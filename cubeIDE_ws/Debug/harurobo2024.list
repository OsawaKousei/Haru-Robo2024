
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023f48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08024148  08024148  00034148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025ebc  08025ebc  00040b0c  2**0
                  CONTENTS
  4 .ARM          00000008  08025ebc  08025ebc  00035ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025ec4  08025ec4  00040b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08025ec4  08025ec4  00035ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025edc  08025edc  00035edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b0c  20000000  08025ee0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016620  20000b10  080269ec  00040b10  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017130  080269ec  00047130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b0c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b3a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f45e  00000000  00000000  00040bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c25  00000000  00000000  0007000e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  00076c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a6e  00000000  00000000  00078eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002da0c  00000000  00000000  000acc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119cdd  00000000  00000000  000da624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a538  00000000  00000000  001f4304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fe83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b10 	.word	0x20000b10
 800021c:	00000000 	.word	0x00000000
 8000220:	08024130 	.word	0x08024130

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b14 	.word	0x20000b14
 800023c:	08024130 	.word	0x08024130

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002e04 	.word	0x20002e04
 8000b38:	20000e00 	.word	0x20000e00
 8000b3c:	20002e08 	.word	0x20002e08
 8000b40:	20002e00 	.word	0x20002e00

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fc93 	bl	80044c8 <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fd4d 	bl	8004668 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002e08 	.word	0x20002e08
 8000be8:	20002e00 	.word	0x20002e00
 8000bec:	20002e04 	.word	0x20002e04
 8000bf0:	20000e00 	.word	0x20000e00
 8000bf4:	20000b2c 	.word	0x20000b2c

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 fd53 	bl	80046d2 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f fdd2 	bl	80207dc <iprintf>
		Error_Handler();
 8000c38:	f002 fc2b 	bl	8003492 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 ff49 	bl	8001ade <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 ff84 	bl	8001b76 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f fd2b 	bl	80207dc <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	08024148 	.word	0x08024148
 8000df0:	20000b40 	.word	0x20000b40
 8000df4:	20000b34 	.word	0x20000b34
 8000df8:	20000b80 	.word	0x20000b80
 8000dfc:	20000c20 	.word	0x20000c20
 8000e00:	20000cc0 	.word	0x20000cc0
 8000e04:	20000d60 	.word	0x20000d60
 8000e08:	08024160 	.word	0x08024160
 8000e0c:	20000b30 	.word	0x20000b30

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 fb1f 	bl	8003492 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 fb03 	bl	8003492 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 faf8 	bl	8003492 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000b2c 	.word	0x20000b2c
 8000ee4:	20000b30 	.word	0x20000b30
 8000ee8:	20000b34 	.word	0x20000b34
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fd9c 	bl	8001a84 <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fd8c 	bl	8001a84 <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fd7c 	bl	8001a84 <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fd6c 	bl	8001a84 <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f94c 	bl	8004268 <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 fa5c 	bl	8003492 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fd4d 	bl	8001a84 <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fd3d 	bl	8001a84 <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fd2d 	bl	8001a84 <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fd1d 	bl	8001a84 <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f8fd 	bl	8004268 <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f002 fa0d 	bl	8003492 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fcfe 	bl	8001a84 <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fcee 	bl	8001a84 <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fcde 	bl	8001a84 <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fcce 	bl	8001a84 <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f003 f8ae 	bl	8004268 <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f002 f9be 	bl	8003492 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fcaf 	bl	8001a84 <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fc9f 	bl	8001a84 <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fc8f 	bl	8001a84 <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fc7f 	bl	8001a84 <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f85f 	bl	8004268 <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f002 f96f 	bl	8003492 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fc60 	bl	8001a84 <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fc50 	bl	8001a84 <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fc40 	bl	8001a84 <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fc30 	bl	8001a84 <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f810 	bl	8004268 <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f002 f920 	bl	8003492 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000b40 	.word	0x20000b40
 8001258:	20000b2c 	.word	0x20000b2c
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fc0c 	bl	8001a84 <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fbfc 	bl	8001a84 <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fbec 	bl	8001a84 <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fbdc 	bl	8001a84 <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 ffbc 	bl	8004268 <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f002 f8cc 	bl	8003492 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fbbd 	bl	8001a84 <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fbad 	bl	8001a84 <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fb9d 	bl	8001a84 <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fb8d 	bl	8001a84 <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 ff6d 	bl	8004268 <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f002 f87d 	bl	8003492 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 f84f 	bl	8004440 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f fa7d 	bl	80208a8 <puts>
		Error_Handler();
 80013ae:	f002 f870 	bl	8003492 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fa9c 	bl	80048f6 <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f fa09 	bl	80207dc <iprintf>
		Error_Handler();
 80013ca:	f002 f862 	bl	8003492 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa8e 	bl	80048f6 <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f f9fb 	bl	80207dc <iprintf>
		Error_Handler();
 80013e6:	f002 f854 	bl	8003492 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b2c 	.word	0x20000b2c
 80013f8:	08024168 	.word	0x08024168
 80013fc:	08024178 	.word	0x08024178

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f f9e6 	bl	80207dc <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 fe08 	bl	8004028 <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f f9d2 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f f9bf 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f f9ac 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f f998 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f f985 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f f971 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f f95d 	bl	80207dc <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0802419c 	.word	0x0802419c
 8001540:	20000b30 	.word	0x20000b30
 8001544:	20000b40 	.word	0x20000b40
 8001548:	080241bc 	.word	0x080241bc
 800154c:	080241cc 	.word	0x080241cc
 8001550:	080241dc 	.word	0x080241dc
 8001554:	080241ec 	.word	0x080241ec
 8001558:	080241fc 	.word	0x080241fc
 800155c:	0802420c 	.word	0x0802420c
 8001560:	08024218 	.word	0x08024218

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fa58 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fa44 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa30 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fa0c 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f9ea 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f9d6 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f9c2 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fcb1 	bl	8004028 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f9a6 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f990 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f978 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d12f      	bne.n	80017ce <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	4619      	mov	r1, r3
 800177a:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 800177c:	0043      	lsls	r3, r0, #1
 800177e:	440b      	add	r3, r1
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	4619      	mov	r1, r3
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 8001796:	0043      	lsls	r3, r0, #1
 8001798:	440b      	add	r3, r1
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	4618      	mov	r0, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 80017b0:	0043      	lsls	r3, r0, #1
 80017b2:	440b      	add	r3, r1
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]
		return ans;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80017cc:	e08f      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d111      	bne.n	80017fa <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	461c      	mov	r4, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	4618      	mov	r0, r3
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <Get_MCMD_Feedback+0x1a0>)
 80017e6:	0063      	lsls	r3, r4, #1
 80017e8:	4403      	add	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80017f8:	e079      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d12f      	bne.n	8001862 <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	4618      	mov	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	4619      	mov	r1, r3
 800180e:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 8001810:	0043      	lsls	r3, r0, #1
 8001812:	440b      	add	r3, r1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	4618      	mov	r0, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	4619      	mov	r1, r3
 8001828:	4a35      	ldr	r2, [pc, #212]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 800182a:	0043      	lsls	r3, r0, #1
 800182c:	440b      	add	r3, r1
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	4619      	mov	r1, r3
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 8001844:	0043      	lsls	r3, r0, #1
 8001846:	440b      	add	r3, r1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60bb      	str	r3, [r7, #8]
		return ans;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800185c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001860:	e045      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d12f      	bne.n	80018ca <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	4618      	mov	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	789b      	ldrb	r3, [r3, #2]
 8001874:	4619      	mov	r1, r3
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 8001878:	0043      	lsls	r3, r0, #1
 800187a:	440b      	add	r3, r1
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	4618      	mov	r0, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	4619      	mov	r1, r3
 8001890:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 8001892:	0043      	lsls	r3, r0, #1
 8001894:	440b      	add	r3, r1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60bb      	str	r3, [r7, #8]
		return ans;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80018c8:	e011      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <Get_MCMD_Feedback+0x1ac>)
 80018da:	f01e ff7f 	bl	80207dc <iprintf>
		return ans;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ea:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000b80 	.word	0x20000b80
 80018fc:	20000c20 	.word	0x20000c20
 8001900:	20000cc0 	.word	0x20000cc0
 8001904:	20000d60 	.word	0x20000d60
 8001908:	08024228 	.word	0x08024228

0800190c <ServoDriver_Init>:

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001922:	2101      	movs	r1, #1
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f884 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2208      	movs	r2, #8
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff fa6a 	bl	8000e10 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 8001948:	2102      	movs	r1, #2
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f871 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2208      	movs	r2, #8
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff fa57 	bl	8000e10 <SendBytes>
	fdata[0] = param->angle_offset;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 800196e:	2103      	movs	r1, #3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f85e 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff fa44 	bl	8000e10 <SendBytes>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 800199c:	2104      	movs	r1, #4
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f847 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	463b      	mov	r3, r7
 80019ac:	2204      	movs	r2, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff fa2e 	bl	8000e10 <SendBytes>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <ServoDriver_SendValue+0x2e>
		Error_Handler();
 80019ba:	f001 fd6a 	bl	8003492 <Error_Handler>
	}
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80019d2:	2101      	movs	r1, #1
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f82c 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	1cfb      	adds	r3, r7, #3
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff fa13 	bl	8000e10 <SendBytes>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <AirCylinder_Init+0x2e>
		Error_Handler();
 80019f0:	f001 fd4f 	bl	8003492 <Error_Handler>
	}
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001a08:	2102      	movs	r1, #2
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f811 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	1cfb      	adds	r3, r7, #3
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f9f8 	bl	8000e10 <SendBytes>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001a26:	f001 fd34 	bl	8003492 <Error_Handler>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001a32:	b4b0      	push	{r4, r5, r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	02db      	lsls	r3, r3, #11
 8001a4c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	17da      	asrs	r2, r3, #31
 8001a70:	461c      	mov	r4, r3
 8001a72:	4615      	mov	r5, r2
 8001a74:	4622      	mov	r2, r4
 8001a76:	462b      	mov	r3, r5
}
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bcb0      	pop	{r4, r5, r7}
 8001a82:	4770      	bx	lr

08001a84 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 8001a84:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71bb      	strb	r3, [r7, #6]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	717b      	strb	r3, [r7, #5]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	02db      	lsls	r3, r3, #11
 8001aa8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001abe:	793b      	ldrb	r3, [r7, #4]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	17da      	asrs	r2, r3, #31
 8001ac8:	4698      	mov	r8, r3
 8001aca:	4691      	mov	r9, r2
 8001acc:	4642      	mov	r2, r8
 8001ace:	464b      	mov	r3, r9
}
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 8001adc:	4770      	bx	lr

08001ade <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	0942      	lsrs	r2, r0, #5
 8001af6:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001afa:	094b      	lsrs	r3, r1, #5
 8001afc:	b2d3      	uxtb	r3, r2
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	0a02      	lsrs	r2, r0, #8
 8001b14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b18:	0a0b      	lsrs	r3, r1, #8
 8001b1a:	b2d3      	uxtb	r3, r2
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	0ac2      	lsrs	r2, r0, #11
 8001b32:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001b36:	0acb      	lsrs	r3, r1, #11
 8001b38:	b2d3      	uxtb	r3, r2
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	723b      	strb	r3, [r7, #8]
    return ans;
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	8019      	strh	r1, [r3, #0]
 8001b50:	3302      	adds	r3, #2
 8001b52:	0c12      	lsrs	r2, r2, #16
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	2300      	movs	r3, #0
 8001b58:	7b3a      	ldrb	r2, [r7, #12]
 8001b5a:	f362 0307 	bfi	r3, r2, #0, #8
 8001b5e:	7b7a      	ldrb	r2, [r7, #13]
 8001b60:	f362 230f 	bfi	r3, r2, #8, #8
 8001b64:	7bba      	ldrb	r2, [r7, #14]
 8001b66:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	e9c7 0100 	strd	r0, r1, [r7]
 8001b80:	783b      	ldrb	r3, [r7, #0]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <MX_CAN1_Init+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bb2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001bb6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001be4:	f002 fa44 	bl	8004070 <HAL_CAN_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001bee:	f001 fc50 	bl	8003492 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20002e0c 	.word	0x20002e0c
 8001bfc:	40006400 	.word	0x40006400

08001c00 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_CAN_MspInit+0xac>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d13f      	bne.n	8001ca2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c52:	2303      	movs	r3, #3
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c62:	2309      	movs	r3, #9
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <HAL_CAN_MspInit+0xb4>)
 8001c6e:	f003 fd53 	bl	8005718 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	2013      	movs	r0, #19
 8001c78:	f003 f90e 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c7c:	2013      	movs	r0, #19
 8001c7e:	f003 f927 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	2014      	movs	r0, #20
 8001c88:	f003 f906 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c8c:	2014      	movs	r0, #20
 8001c8e:	f003 f91f 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2105      	movs	r1, #5
 8001c96:	2015      	movs	r0, #21
 8001c98:	f003 f8fe 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c9c:	2015      	movs	r0, #21
 8001c9e:	f003 f917 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40006400 	.word	0x40006400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001cc4:	f00d f9a4 	bl	800f010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <pvPortMallocMicroROS+0x180>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001cd0:	f000 f98a 	bl	8001fe8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <pvPortMallocMicroROS+0x184>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 8092 	bne.w	8001e06 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01f      	beq.n	8001d28 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001ce8:	2208      	movs	r2, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f023 0307 	bic.w	r3, r3, #7
 8001d00:	3308      	adds	r3, #8
 8001d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d12:	b672      	cpsid	i
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	b662      	cpsie	i
 8001d22:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d24:	bf00      	nop
 8001d26:	e7fe      	b.n	8001d26 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06b      	beq.n	8001e06 <pvPortMallocMicroROS+0x14e>
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d866      	bhi.n	8001e06 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <pvPortMallocMicroROS+0x18c>)
 8001d3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <pvPortMallocMicroROS+0x18c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d42:	e004      	b.n	8001d4e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d903      	bls.n	8001d60 <pvPortMallocMicroROS+0xa8>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f1      	bne.n	8001d44 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <pvPortMallocMicroROS+0x180>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d04d      	beq.n	8001e06 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	4413      	add	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	2308      	movs	r3, #8
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d921      	bls.n	8001dd0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	b672      	cpsid	i
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	b662      	cpsie	i
 8001db2:	613b      	str	r3, [r7, #16]
}
 8001db4:	bf00      	nop
 8001db6:	e7fe      	b.n	8001db6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f000 f96e 	bl	80020ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <pvPortMallocMicroROS+0x190>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d203      	bcs.n	8001df2 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <pvPortMallocMicroROS+0x190>)
 8001df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <pvPortMallocMicroROS+0x184>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e06:	f00d f911 	bl	800f02c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	b672      	cpsid	i
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	b662      	cpsie	i
 8001e28:	60fb      	str	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	e7fe      	b.n	8001e2c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20006a3c 	.word	0x20006a3c
 8001e3c:	20006a48 	.word	0x20006a48
 8001e40:	20006a40 	.word	0x20006a40
 8001e44:	20006a34 	.word	0x20006a34
 8001e48:	20006a44 	.word	0x20006a44

08001e4c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d04c      	beq.n	8001ef8 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001e5e:	2308      	movs	r3, #8
 8001e60:	425b      	negs	r3, r3
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <vPortFreeMicroROS+0xb4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	b672      	cpsid	i
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	b662      	cpsie	i
 8001e8e:	60fb      	str	r3, [r7, #12]
}
 8001e90:	bf00      	nop
 8001e92:	e7fe      	b.n	8001e92 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00c      	beq.n	8001eb6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea0:	b672      	cpsid	i
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	b662      	cpsie	i
 8001eb0:	60bb      	str	r3, [r7, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	e7fe      	b.n	8001eb4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <vPortFreeMicroROS+0xb4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d019      	beq.n	8001ef8 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d115      	bne.n	8001ef8 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <vPortFreeMicroROS+0xb4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001edc:	f00d f898 	bl	800f010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <vPortFreeMicroROS+0xb8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <vPortFreeMicroROS+0xb8>)
 8001eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001eee:	6938      	ldr	r0, [r7, #16]
 8001ef0:	f000 f8dc 	bl	80020ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001ef4:	f00d f89a 	bl	800f02c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20006a48 	.word	0x20006a48
 8001f04:	20006a40 	.word	0x20006a40

08001f08 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001f14:	2308      	movs	r3, #8
 8001f16:	425b      	negs	r3, r3
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <getBlockSize+0x38>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

	return count;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20006a48 	.word	0x20006a48

08001f44 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001f4e:	f00d f85f 	bl	800f010 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f7ff feb0 	bl	8001cb8 <pvPortMallocMicroROS>
 8001f58:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <pvPortReallocMicroROS+0x4c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d014      	beq.n	8001f90 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffce 	bl	8001f08 <getBlockSize>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2208      	movs	r2, #8
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d201      	bcs.n	8001f80 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68b8      	ldr	r0, [r7, #8]
 8001f86:	f01e ffa2 	bl	8020ece <memcpy>

		vPortFreeMicroROS(pv);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff5e 	bl	8001e4c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001f90:	f00d f84c 	bl	800f02c <xTaskResumeAll>

	return newmem;
 8001f94:	68bb      	ldr	r3, [r7, #8]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001fa8:	f00d f832 	bl	800f010 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff fe7e 	bl	8001cb8 <pvPortMallocMicroROS>
 8001fbc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001fc2:	e004      	b.n	8001fce <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	613a      	str	r2, [r7, #16]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	617a      	str	r2, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f5      	bne.n	8001fc4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001fd8:	f00d f828 	bl	800f02c <xTaskResumeAll>
  	return mem;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001fee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ff2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <prvHeapInit+0xac>)
 8001ff6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3307      	adds	r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <prvHeapInit+0xac>)
 8002018:	4413      	add	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <prvHeapInit+0xb0>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <prvHeapInit+0xb0>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002034:	2208      	movs	r2, #8
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <prvHeapInit+0xb4>)
 8002048:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <prvHeapInit+0xb4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <prvHeapInit+0xb4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <prvHeapInit+0xb4>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <prvHeapInit+0xb8>)
 8002076:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <prvHeapInit+0xbc>)
 800207e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <prvHeapInit+0xc0>)
 8002082:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20002e34 	.word	0x20002e34
 8002098:	20006a34 	.word	0x20006a34
 800209c:	20006a3c 	.word	0x20006a3c
 80020a0:	20006a44 	.word	0x20006a44
 80020a4:	20006a40 	.word	0x20006a40
 80020a8:	20006a48 	.word	0x20006a48

080020ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <prvInsertBlockIntoFreeList+0xac>)
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e002      	b.n	80020c0 <prvInsertBlockIntoFreeList+0x14>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d8f7      	bhi.n	80020ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d108      	bne.n	80020ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	441a      	add	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	441a      	add	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d118      	bne.n	8002134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <prvInsertBlockIntoFreeList+0xb0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d00d      	beq.n	800212a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e008      	b.n	800213c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <prvInsertBlockIntoFreeList+0xb0>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e003      	b.n	800213c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d002      	beq.n	800214a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20006a34 	.word	0x20006a34
 800215c:	20006a3c 	.word	0x20006a3c

08002160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_DMA_Init+0x48>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <MX_DMA_Init+0x48>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <MX_DMA_Init+0x48>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	200c      	movs	r0, #12
 8002184:	f002 fe88 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002188:	200c      	movs	r0, #12
 800218a:	f002 fea1 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2105      	movs	r1, #5
 8002192:	200e      	movs	r0, #14
 8002194:	f002 fe80 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002198:	200e      	movs	r0, #14
 800219a:	f002 fe99 	bl	8004ed0 <HAL_NVIC_EnableIRQ>

}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80021ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80021bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c0:	4904      	ldr	r1, [pc, #16]	; (80021d4 <cubemx_transport_open+0x28>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f006 fed4 	bl	8008f70 <HAL_UART_Receive_DMA>
    return true;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20006a4c 	.word	0x20006a4c

080021d8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80021e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f006 ff05 	bl	8008ff8 <HAL_UART_DMAStop>
    return true;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800220c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002212:	2b20      	cmp	r3, #32
 8002214:	d11a      	bne.n	800224c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f006 fe2a 	bl	8008e78 <HAL_UART_Transmit_DMA>
 8002224:	4603      	mov	r3, r0
 8002226:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002228:	e002      	b.n	8002230 <cubemx_transport_write+0x38>
            osDelay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f00b fe86 	bl	800df3c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <cubemx_transport_write+0x46>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800223a:	2b20      	cmp	r3, #32
 800223c:	d1f5      	bne.n	800222a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <cubemx_transport_write+0x50>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	e002      	b.n	800224e <cubemx_transport_write+0x56>
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800224c:	2300      	movs	r3, #0
    }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800226c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002272:	b672      	cpsid	i
}
 8002274:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <cubemx_transport_read+0x9c>)
 8002284:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002286:	b662      	cpsie	i
}
 8002288:	bf00      	nop
        __enable_irq();
        ms_used++;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002290:	2001      	movs	r0, #1
 8002292:	f00b fe53 	bl	800df3c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <cubemx_transport_read+0xa0>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <cubemx_transport_read+0x9c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d103      	bne.n	80022aa <cubemx_transport_read+0x52>
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbe3      	blt.n	8002272 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022ae:	e011      	b.n	80022d4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	440b      	add	r3, r1
 80022ba:	4910      	ldr	r1, [pc, #64]	; (80022fc <cubemx_transport_read+0xa4>)
 80022bc:	5c8a      	ldrb	r2, [r1, r2]
 80022be:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022cc:	6013      	str	r3, [r2, #0]
        wrote++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <cubemx_transport_read+0x9c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d003      	beq.n	80022e8 <cubemx_transport_read+0x90>
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3e3      	bcc.n	80022b0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80022e8:	69bb      	ldr	r3, [r7, #24]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20007250 	.word	0x20007250
 80022f8:	2000724c 	.word	0x2000724c
 80022fc:	20006a4c 	.word	0x20006a4c

08002300 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002308:	f7fe fc76 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800231c:	f7fe fc72 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002330:	f7fe fc62 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002344:	f7fe fc5e 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002358:	f7fe fc4e 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800236c:	f7fe fc4a 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fc44 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200072f4 	.word	0x200072f4

08002394 <canSetting>:
//can通信の設定
void canSetting(){
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 8002398:	480f      	ldr	r0, [pc, #60]	; (80023d8 <canSetting+0x44>)
 800239a:	f01e fa1f 	bl	80207dc <iprintf>
	osDelay(10);
 800239e:	200a      	movs	r0, #10
 80023a0:	f00b fdcc 	bl	800df3c <osDelay>

	CAN_SystemInit(&hcan1);
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <canSetting+0x48>)
 80023a6:	f7fe fd83 	bl	8000eb0 <CAN_SystemInit>

//	num_of_devices.mcmd3 = 1;
	num_of_devices.mcmd3 = 3;
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <canSetting+0x4c>)
 80023ac:	2203      	movs	r2, #3
 80023ae:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <canSetting+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <canSetting+0x4c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 1;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <canSetting+0x4c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <canSetting+0x50>)
 80023c4:	f01e fa0a 	bl	80207dc <iprintf>
	osDelay(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f00b fdb7 	bl	800df3c <osDelay>
	CAN_WaitConnect(&num_of_devices);
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <canSetting+0x4c>)
 80023d0:	f7ff f816 	bl	8001400 <CAN_WaitConnect>
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	08024278 	.word	0x08024278
 80023dc:	20002e0c 	.word	0x20002e0c
 80023e0:	200072f4 	.word	0x200072f4
 80023e4:	080242a0 	.word	0x080242a0

080023e8 <mcmdMoter1Setting>:

//モータ1のmcmd設定
void mcmdMoter1Setting(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	    mcmd4M1_struct.device.node_type = NODE_MCMD3;
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <mcmdMoter1Setting+0xac>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
	    mcmd4M1_struct.device.node_id = 0;
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <mcmdMoter1Setting+0xac>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
	    mcmd4M1_struct.device.device_num = 0;
 80023f8:	4b26      	ldr	r3, [pc, #152]	; (8002494 <mcmdMoter1Setting+0xac>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	709a      	strb	r2, [r3, #2]

	    mcmd4M1_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002400:	2201      	movs	r2, #1
 8002402:	751a      	strb	r2, [r3, #20]
	    mcmd4M1_struct.ctrl_param.PID_param.kp = 0.055f;
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002406:	4a24      	ldr	r2, [pc, #144]	; (8002498 <mcmdMoter1Setting+0xb0>)
 8002408:	619a      	str	r2, [r3, #24]
	    mcmd4M1_struct.ctrl_param.PID_param.ki = 0.015f;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <mcmdMoter1Setting+0xac>)
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <mcmdMoter1Setting+0xb4>)
 800240e:	61da      	str	r2, [r3, #28]
	    mcmd4M1_struct.ctrl_param.PID_param.kd = 0.02f;
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <mcmdMoter1Setting+0xb8>)
 8002414:	621a      	str	r2, [r3, #32]
	    mcmd4M1_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M1_struct.ctrl_param.accel_limit_size = 2.0f;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M1_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M1_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M1_struct.enc_dir = MCMD_DIR_FW;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002438:	2200      	movs	r2, #0
 800243a:	711a      	strb	r2, [r3, #4]
	    mcmd4M1_struct.rot_dir = MCMD_DIR_FW;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <mcmdMoter1Setting+0xac>)
 800243e:	2200      	movs	r2, #0
 8002440:	715a      	strb	r2, [r3, #5]
	    mcmd4M1_struct.quant_per_unit = 1.0/103500.0f;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <mcmdMoter1Setting+0xbc>)
 8002446:	611a      	str	r2, [r3, #16]

	    mcmd4M1_struct.limit_sw_type = LIMIT_SW_NO;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <mcmdMoter1Setting+0xac>)
 800244a:	2201      	movs	r2, #1
 800244c:	719a      	strb	r2, [r3, #6]
	    mcmd4M1_struct.calib = CALIBRATION_DISABLE;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002450:	2201      	movs	r2, #1
 8002452:	71da      	strb	r2, [r3, #7]
	    mcmd4M1_struct.calib_duty = -0.2f;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <mcmdMoter1Setting+0xc0>)
 8002458:	609a      	str	r2, [r3, #8]
	    mcmd4M1_struct.offset = 0.0f;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <mcmdMoter1Setting+0xac>)
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
	    mcmd4M1_struct.fb_type = MCMD_FB_POS;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002464:	2200      	movs	r2, #0
 8002466:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M1_struct);
 8002468:	480a      	ldr	r0, [pc, #40]	; (8002494 <mcmdMoter1Setting+0xac>)
 800246a:	f7ff f8e3 	bl	8001634 <MCMD_init>
		 osDelay(10);
 800246e:	200a      	movs	r0, #10
 8002470:	f00b fd64 	bl	800df3c <osDelay>
		 MCMD_Calib(&mcmd4M1_struct);
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002476:	f7ff f92d 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800247a:	2032      	movs	r0, #50	; 0x32
 800247c:	f00b fd5e 	bl	800df3c <osDelay>
		 MCMD_SetTarget(&mcmd4M1_struct, 0.0f);
 8002480:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80024ac <mcmdMoter1Setting+0xc4>
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002486:	f7ff f951 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M1_struct);
 800248a:	4802      	ldr	r0, [pc, #8]	; (8002494 <mcmdMoter1Setting+0xac>)
 800248c:	f7ff f938 	bl	8001700 <MCMD_Control_Enable>
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200072fc 	.word	0x200072fc
 8002498:	3d6147ae 	.word	0x3d6147ae
 800249c:	3c75c28f 	.word	0x3c75c28f
 80024a0:	3ca3d70a 	.word	0x3ca3d70a
 80024a4:	37221945 	.word	0x37221945
 80024a8:	be4ccccd 	.word	0xbe4ccccd
 80024ac:	00000000 	.word	0x00000000

080024b0 <mcmdMoter2Setting>:

//モータ2のmcmd設定
void mcmdMoter2Setting(){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	    mcmd4M2_struct.device.node_type = NODE_MCMD3;
 80024b4:	4b29      	ldr	r3, [pc, #164]	; (800255c <mcmdMoter2Setting+0xac>)
 80024b6:	2203      	movs	r2, #3
 80024b8:	701a      	strb	r2, [r3, #0]
	    mcmd4M2_struct.device.node_id = 0;
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <mcmdMoter2Setting+0xac>)
 80024bc:	2200      	movs	r2, #0
 80024be:	705a      	strb	r2, [r3, #1]
	    mcmd4M2_struct.device.device_num = 1;
 80024c0:	4b26      	ldr	r3, [pc, #152]	; (800255c <mcmdMoter2Setting+0xac>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	709a      	strb	r2, [r3, #2]

	    mcmd4M2_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <mcmdMoter2Setting+0xac>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	751a      	strb	r2, [r3, #20]
	    mcmd4M2_struct.ctrl_param.PID_param.kp = 0.055f;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <mcmdMoter2Setting+0xac>)
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <mcmdMoter2Setting+0xb0>)
 80024d0:	619a      	str	r2, [r3, #24]
	    mcmd4M2_struct.ctrl_param.PID_param.ki = 0.015f;
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <mcmdMoter2Setting+0xac>)
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <mcmdMoter2Setting+0xb4>)
 80024d6:	61da      	str	r2, [r3, #28]
	    mcmd4M2_struct.ctrl_param.PID_param.kd = 0.02f;
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <mcmdMoter2Setting+0xac>)
 80024da:	4a23      	ldr	r2, [pc, #140]	; (8002568 <mcmdMoter2Setting+0xb8>)
 80024dc:	621a      	str	r2, [r3, #32]
	    mcmd4M2_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <mcmdMoter2Setting+0xac>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M2_struct.ctrl_param.accel_limit_size = 2.0f;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <mcmdMoter2Setting+0xac>)
 80024e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M2_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <mcmdMoter2Setting+0xac>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M2_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <mcmdMoter2Setting+0xac>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M2_struct.enc_dir = MCMD_DIR_FW;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <mcmdMoter2Setting+0xac>)
 8002500:	2200      	movs	r2, #0
 8002502:	711a      	strb	r2, [r3, #4]
	    mcmd4M2_struct.rot_dir = MCMD_DIR_FW;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <mcmdMoter2Setting+0xac>)
 8002506:	2200      	movs	r2, #0
 8002508:	715a      	strb	r2, [r3, #5]
	    mcmd4M2_struct.quant_per_unit = 1.0/103500.0f;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <mcmdMoter2Setting+0xac>)
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <mcmdMoter2Setting+0xbc>)
 800250e:	611a      	str	r2, [r3, #16]

	    mcmd4M2_struct.limit_sw_type = LIMIT_SW_NO;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <mcmdMoter2Setting+0xac>)
 8002512:	2201      	movs	r2, #1
 8002514:	719a      	strb	r2, [r3, #6]
	    mcmd4M2_struct.calib = CALIBRATION_DISABLE;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <mcmdMoter2Setting+0xac>)
 8002518:	2201      	movs	r2, #1
 800251a:	71da      	strb	r2, [r3, #7]
	    mcmd4M2_struct.calib_duty = -0.2f;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <mcmdMoter2Setting+0xac>)
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <mcmdMoter2Setting+0xc0>)
 8002520:	609a      	str	r2, [r3, #8]
	    mcmd4M2_struct.offset = 0.0f;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <mcmdMoter2Setting+0xac>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
	    mcmd4M2_struct.fb_type = MCMD_FB_POS;
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <mcmdMoter2Setting+0xac>)
 800252c:	2200      	movs	r2, #0
 800252e:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M2_struct);
 8002530:	480a      	ldr	r0, [pc, #40]	; (800255c <mcmdMoter2Setting+0xac>)
 8002532:	f7ff f87f 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002536:	200a      	movs	r0, #10
 8002538:	f00b fd00 	bl	800df3c <osDelay>
		 MCMD_Calib(&mcmd4M2_struct);
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <mcmdMoter2Setting+0xac>)
 800253e:	f7ff f8c9 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f00b fcfa 	bl	800df3c <osDelay>
		 MCMD_SetTarget(&mcmd4M2_struct, 0.00f);
 8002548:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002574 <mcmdMoter2Setting+0xc4>
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <mcmdMoter2Setting+0xac>)
 800254e:	f7ff f8ed 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M2_struct);
 8002552:	4802      	ldr	r0, [pc, #8]	; (800255c <mcmdMoter2Setting+0xac>)
 8002554:	f7ff f8d4 	bl	8001700 <MCMD_Control_Enable>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20007344 	.word	0x20007344
 8002560:	3d6147ae 	.word	0x3d6147ae
 8002564:	3c75c28f 	.word	0x3c75c28f
 8002568:	3ca3d70a 	.word	0x3ca3d70a
 800256c:	37221945 	.word	0x37221945
 8002570:	be4ccccd 	.word	0xbe4ccccd
 8002574:	00000000 	.word	0x00000000

08002578 <mcmdMoter3Setting>:

void mcmdMoter3Setting(){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	    mcmd4M3_struct.device.node_type = NODE_MCMD3;
 800257c:	4b29      	ldr	r3, [pc, #164]	; (8002624 <mcmdMoter3Setting+0xac>)
 800257e:	2203      	movs	r2, #3
 8002580:	701a      	strb	r2, [r3, #0]
	    mcmd4M3_struct.device.node_id = 5;
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002584:	2205      	movs	r2, #5
 8002586:	705a      	strb	r2, [r3, #1]
	    mcmd4M3_struct.device.device_num = 0;
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <mcmdMoter3Setting+0xac>)
 800258a:	2200      	movs	r2, #0
 800258c:	709a      	strb	r2, [r3, #2]

	    mcmd4M3_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002590:	2201      	movs	r2, #1
 8002592:	751a      	strb	r2, [r3, #20]
	    mcmd4M3_struct.ctrl_param.PID_param.kp = 0.055f;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <mcmdMoter3Setting+0xb0>)
 8002598:	619a      	str	r2, [r3, #24]
	    mcmd4M3_struct.ctrl_param.PID_param.ki = 0.015f;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <mcmdMoter3Setting+0xac>)
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <mcmdMoter3Setting+0xb4>)
 800259e:	61da      	str	r2, [r3, #28]
	    mcmd4M3_struct.ctrl_param.PID_param.kd = 0.02f;
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <mcmdMoter3Setting+0xb8>)
 80025a4:	621a      	str	r2, [r3, #32]
	    mcmd4M3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M3_struct.ctrl_param.accel_limit_size = 2.0f;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M3_struct.enc_dir = MCMD_DIR_FW;
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	711a      	strb	r2, [r3, #4]
	    mcmd4M3_struct.rot_dir = MCMD_DIR_FW;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	715a      	strb	r2, [r3, #5]
	    mcmd4M3_struct.quant_per_unit = 1.0/103500.0f;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <mcmdMoter3Setting+0xbc>)
 80025d6:	611a      	str	r2, [r3, #16]

	    mcmd4M3_struct.limit_sw_type = LIMIT_SW_NO;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025da:	2201      	movs	r2, #1
 80025dc:	719a      	strb	r2, [r3, #6]
	    mcmd4M3_struct.calib = CALIBRATION_DISABLE;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	71da      	strb	r2, [r3, #7]
	    mcmd4M3_struct.calib_duty = -0.2f;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <mcmdMoter3Setting+0xc0>)
 80025e8:	609a      	str	r2, [r3, #8]
	    mcmd4M3_struct.offset = 0.0f;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
	    mcmd4M3_struct.fb_type = MCMD_FB_POS;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M3_struct);
 80025f8:	480a      	ldr	r0, [pc, #40]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025fa:	f7ff f81b 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80025fe:	200a      	movs	r0, #10
 8002600:	f00b fc9c 	bl	800df3c <osDelay>
		 MCMD_Calib(&mcmd4M3_struct);
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002606:	f7ff f865 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800260a:	2032      	movs	r0, #50	; 0x32
 800260c:	f00b fc96 	bl	800df3c <osDelay>
		 MCMD_SetTarget(&mcmd4M3_struct, 0.00f);
 8002610:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800263c <mcmdMoter3Setting+0xc4>
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002616:	f7ff f889 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M3_struct);
 800261a:	4802      	ldr	r0, [pc, #8]	; (8002624 <mcmdMoter3Setting+0xac>)
 800261c:	f7ff f870 	bl	8001700 <MCMD_Control_Enable>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000738c 	.word	0x2000738c
 8002628:	3d6147ae 	.word	0x3d6147ae
 800262c:	3c75c28f 	.word	0x3c75c28f
 8002630:	3ca3d70a 	.word	0x3ca3d70a
 8002634:	37221945 	.word	0x37221945
 8002638:	be4ccccd 	.word	0xbe4ccccd
 800263c:	00000000 	.word	0x00000000

08002640 <mcmdMoter4Setting>:

void mcmdMoter4Setting(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	    mcmd4M4_struct.device.node_type = NODE_MCMD3;
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002646:	2203      	movs	r2, #3
 8002648:	701a      	strb	r2, [r3, #0]
	    mcmd4M4_struct.device.node_id =5;
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <mcmdMoter4Setting+0xac>)
 800264c:	2205      	movs	r2, #5
 800264e:	705a      	strb	r2, [r3, #1]
	    mcmd4M4_struct.device.device_num = 1;
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002652:	2201      	movs	r2, #1
 8002654:	709a      	strb	r2, [r3, #2]

	    mcmd4M4_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002658:	2201      	movs	r2, #1
 800265a:	751a      	strb	r2, [r3, #20]
	    mcmd4M4_struct.ctrl_param.PID_param.kp = 0.055f;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <mcmdMoter4Setting+0xac>)
 800265e:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <mcmdMoter4Setting+0xb0>)
 8002660:	619a      	str	r2, [r3, #24]
	    mcmd4M4_struct.ctrl_param.PID_param.ki = 0.015f;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <mcmdMoter4Setting+0xb4>)
 8002666:	61da      	str	r2, [r3, #28]
	    mcmd4M4_struct.ctrl_param.PID_param.kd = 0.02f;
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <mcmdMoter4Setting+0xac>)
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <mcmdMoter4Setting+0xb8>)
 800266c:	621a      	str	r2, [r3, #32]
	    mcmd4M4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M4_struct.ctrl_param.accel_limit_size = 2.0f;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M4_struct.enc_dir = MCMD_DIR_FW;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002690:	2200      	movs	r2, #0
 8002692:	711a      	strb	r2, [r3, #4]
	    mcmd4M4_struct.rot_dir = MCMD_DIR_FW;
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002696:	2200      	movs	r2, #0
 8002698:	715a      	strb	r2, [r3, #5]
	    mcmd4M4_struct.quant_per_unit = 1.0/26850.0f;
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <mcmdMoter4Setting+0xac>)
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <mcmdMoter4Setting+0xbc>)
 800269e:	611a      	str	r2, [r3, #16]

	    mcmd4M4_struct.limit_sw_type = LIMIT_SW_NO;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	719a      	strb	r2, [r3, #6]
	    mcmd4M4_struct.calib = CALIBRATION_DISABLE;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	71da      	strb	r2, [r3, #7]
	    mcmd4M4_struct.calib_duty = -0.2f;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <mcmdMoter4Setting+0xc0>)
 80026b0:	609a      	str	r2, [r3, #8]
	    mcmd4M4_struct.offset = 0.0f;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
	    mcmd4M4_struct.fb_type = MCMD_FB_POS;
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026bc:	2200      	movs	r2, #0
 80026be:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M4_struct);
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026c2:	f7fe ffb7 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80026c6:	200a      	movs	r0, #10
 80026c8:	f00b fc38 	bl	800df3c <osDelay>
		 MCMD_Calib(&mcmd4M4_struct);
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026ce:	f7ff f801 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80026d2:	2032      	movs	r0, #50	; 0x32
 80026d4:	f00b fc32 	bl	800df3c <osDelay>
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);
 80026d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002704 <mcmdMoter4Setting+0xc4>
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026de:	f7ff f825 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M4_struct);
 80026e2:	4802      	ldr	r0, [pc, #8]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026e4:	f7ff f80c 	bl	8001700 <MCMD_Control_Enable>
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200073d4 	.word	0x200073d4
 80026f0:	3d6147ae 	.word	0x3d6147ae
 80026f4:	3c75c28f 	.word	0x3c75c28f
 80026f8:	3ca3d70a 	.word	0x3ca3d70a
 80026fc:	381c3662 	.word	0x381c3662
 8002700:	be4ccccd 	.word	0xbe4ccccd
 8002704:	00000000 	.word	0x00000000

08002708 <servo1Setting>:
		 MCMD_SetTarget(&mcmd4M8_struct, 0.00f);
		 MCMD_Control_Enable(&mcmd4M8_struct);
}

//サーボ基盤設定
void servo1Setting(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	servo_device1.node_type = NODE_SERVO;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <servo1Setting+0x44>)
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
	servo_device1.node_id = 1;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <servo1Setting+0x44>)
 8002714:	2201      	movs	r2, #1
 8002716:	705a      	strb	r2, [r3, #1]
	servo_device1.device_num = 0;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <servo1Setting+0x44>)
 800271a:	2200      	movs	r2, #0
 800271c:	709a      	strb	r2, [r3, #2]

	servo_param1.angle_range=270.0f;
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <servo1Setting+0x48>)
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <servo1Setting+0x4c>)
 8002722:	60da      	str	r2, [r3, #12]
	servo_param1.angle_offset=0.0f;
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <servo1Setting+0x48>)
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
	servo_param1.pulse_width_max=2.4f;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <servo1Setting+0x48>)
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <servo1Setting+0x50>)
 8002730:	605a      	str	r2, [r3, #4]
	servo_param1.pulse_width_min=0.5f;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <servo1Setting+0x48>)
 8002734:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002738:	601a      	str	r2, [r3, #0]
	servo_param1.pwm_frequency=50;
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <servo1Setting+0x48>)
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <servo1Setting+0x54>)
 800273e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002740:	2032      	movs	r0, #50	; 0x32
 8002742:	f00b fbfb 	bl	800df3c <osDelay>
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200074b0 	.word	0x200074b0
 8002750:	2000749c 	.word	0x2000749c
 8002754:	43870000 	.word	0x43870000
 8002758:	4019999a 	.word	0x4019999a
 800275c:	42480000 	.word	0x42480000

08002760 <servo2Setting>:

void servo2Setting(){
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	servo_device2.node_type = NODE_SERVO;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <servo2Setting+0x44>)
 8002766:	2204      	movs	r2, #4
 8002768:	701a      	strb	r2, [r3, #0]
	servo_device2.node_id = 1;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <servo2Setting+0x44>)
 800276c:	2201      	movs	r2, #1
 800276e:	705a      	strb	r2, [r3, #1]
	servo_device2.device_num = 1;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <servo2Setting+0x44>)
 8002772:	2201      	movs	r2, #1
 8002774:	709a      	strb	r2, [r3, #2]

	servo_param2.angle_range=270.0f;
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <servo2Setting+0x48>)
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <servo2Setting+0x4c>)
 800277a:	60da      	str	r2, [r3, #12]
	servo_param2.angle_offset=0.0f;
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <servo2Setting+0x48>)
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
	servo_param2.pulse_width_max=2.4f;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <servo2Setting+0x48>)
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <servo2Setting+0x50>)
 8002788:	605a      	str	r2, [r3, #4]
	servo_param2.pulse_width_min=0.5f;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <servo2Setting+0x48>)
 800278c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002790:	601a      	str	r2, [r3, #0]
	servo_param2.pwm_frequency=50;
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <servo2Setting+0x48>)
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <servo2Setting+0x54>)
 8002796:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002798:	2032      	movs	r0, #50	; 0x32
 800279a:	f00b fbcf 	bl	800df3c <osDelay>
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200074c8 	.word	0x200074c8
 80027a8:	200074b4 	.word	0x200074b4
 80027ac:	43870000 	.word	0x43870000
 80027b0:	4019999a 	.word	0x4019999a
 80027b4:	42480000 	.word	0x42480000

080027b8 <airSetting>:

//エアシリ基盤設定
void airSetting(){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR;
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <airSetting+0x44>)
 80027c0:	2205      	movs	r2, #5
 80027c2:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0;
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <airSetting+0x44>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	705a      	strb	r2, [r3, #1]

	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 80027ca:	2300      	movs	r3, #0
 80027cc:	71fb      	strb	r3, [r7, #7]
 80027ce:	e00c      	b.n	80027ea <airSetting+0x32>
		air_device.device_num = i; //
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <airSetting+0x44>)
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	7093      	strb	r3, [r2, #2]
		AirCylinder_Init(&air_device, AIR_OFF);
 80027d6:	2100      	movs	r1, #0
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <airSetting+0x44>)
 80027da:	f7ff f8f4 	bl	80019c6 <AirCylinder_Init>
		HAL_Delay(10);  // このdelayは必要
 80027de:	200a      	movs	r0, #10
 80027e0:	f001 fc22 	bl	8004028 <HAL_Delay>
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	3301      	adds	r3, #1
 80027e8:	71fb      	strb	r3, [r7, #7]
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2b07      	cmp	r3, #7
 80027ee:	d9ef      	bls.n	80027d0 <airSetting+0x18>
	 }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200074cc 	.word	0x200074cc

08002800 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002804:	4a10      	ldr	r2, [pc, #64]	; (8002848 <MX_FREERTOS_Init+0x48>)
 8002806:	2100      	movs	r1, #0
 8002808:	4810      	ldr	r0, [pc, #64]	; (800284c <MX_FREERTOS_Init+0x4c>)
 800280a:	f00b faf1 	bl	800ddf0 <osThreadNew>
 800280e:	4603      	mov	r3, r0
 8002810:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <MX_FREERTOS_Init+0x50>)
 8002812:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <MX_FREERTOS_Init+0x54>)
 8002816:	2100      	movs	r1, #0
 8002818:	480f      	ldr	r0, [pc, #60]	; (8002858 <MX_FREERTOS_Init+0x58>)
 800281a:	f00b fae9 	bl	800ddf0 <osThreadNew>
 800281e:	4603      	mov	r3, r0
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <MX_FREERTOS_Init+0x5c>)
 8002822:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <MX_FREERTOS_Init+0x60>)
 8002826:	2100      	movs	r1, #0
 8002828:	480e      	ldr	r0, [pc, #56]	; (8002864 <MX_FREERTOS_Init+0x64>)
 800282a:	f00b fae1 	bl	800ddf0 <osThreadNew>
 800282e:	4603      	mov	r3, r0
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <MX_FREERTOS_Init+0x68>)
 8002832:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <MX_FREERTOS_Init+0x6c>)
 8002836:	2100      	movs	r1, #0
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_FREERTOS_Init+0x70>)
 800283a:	f00b fad9 	bl	800ddf0 <osThreadNew>
 800283e:	4603      	mov	r3, r0
 8002840:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <MX_FREERTOS_Init+0x74>)
 8002842:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	080244a0 	.word	0x080244a0
 800284c:	08002c41 	.word	0x08002c41
 8002850:	200074d8 	.word	0x200074d8
 8002854:	080244c4 	.word	0x080244c4
 8002858:	08003115 	.word	0x08003115
 800285c:	2000a418 	.word	0x2000a418
 8002860:	080244e8 	.word	0x080244e8
 8002864:	080031f5 	.word	0x080031f5
 8002868:	2000ac78 	.word	0x2000ac78
 800286c:	0802450c 	.word	0x0802450c
 8002870:	0800322d 	.word	0x0800322d
 8002874:	2000b4d8 	.word	0x2000b4d8

08002878 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 8002878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 800288c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002890:	f00b fb54 	bl	800df3c <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028a0:	1884      	adds	r4, r0, r2
 80028a2:	eb41 0503 	adc.w	r5, r1, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028ac:	eb14 0802 	adds.w	r8, r4, r2
 80028b0:	eb45 0903 	adc.w	r9, r5, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	e9c3 8900 	strd	r8, r9, [r3]
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080028c4 <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	ed93 7b04 	vldr	d7, [r3, #16]
 80028d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <subscription_callback+0x58>)
 80028dc:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	ed93 7b06 	vldr	d7, [r3, #24]
 80028e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <subscription_callback+0x58>)
 80028ec:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	ed93 7b08 	vldr	d7, [r3, #32]
 80028f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <subscription_callback+0x58>)
 80028fc:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002906:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <subscription_callback+0x58>)
 800290c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	2000bd3c 	.word	0x2000bd3c

08002920 <print_int>:

//micro-rosでのデバッグ用
void print_int(int num){
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 8002928:	4811      	ldr	r0, [pc, #68]	; (8002970 <print_int+0x50>)
 800292a:	f014 fc6b 	bl	8017204 <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 800292e:	f107 0008 	add.w	r0, r7, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <print_int+0x54>)
 8002936:	210c      	movs	r1, #12
 8002938:	f01e f86c 	bl	8020a14 <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 800293c:	f107 0308 	add.w	r3, r7, #8
 8002940:	220c      	movs	r2, #12
 8002942:	4619      	mov	r1, r3
 8002944:	480a      	ldr	r0, [pc, #40]	; (8002970 <print_int+0x50>)
 8002946:	f014 fcbb 	bl	80172c0 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 800294a:	2200      	movs	r2, #0
 800294c:	4908      	ldr	r1, [pc, #32]	; (8002970 <print_int+0x50>)
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <print_int+0x58>)
 8002950:	f011 f8d2 	bl	8013af8 <rcl_publish>
 8002954:	6178      	str	r0, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <print_int+0x48>
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <print_int+0x5c>)
 8002964:	f01d ff3a 	bl	80207dc <iprintf>
}
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200072e8 	.word	0x200072e8
 8002974:	080242c4 	.word	0x080242c4
 8002978:	200074d0 	.word	0x200074d0
 800297c:	080242c8 	.word	0x080242c8

08002980 <manipsub_callback>:

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002992:	4613      	mov	r3, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ffc3 	bl	8002920 <print_int>
	  print_int(msub->top_base_arm);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	4613      	mov	r3, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ffbc 	bl	8002920 <print_int>
	  print_int(msub->top_base_hand);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ffb5 	bl	8002920 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f000 f834 	bl	8002a2c <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f000 f899 	bl	8002b04 <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f000 f872 	bl	8002ac4 <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f000 f8ab 	bl	8002b44 <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f000 f8c2 	bl	8002b80 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f000 f8db 	bl	8002bc0 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f000 f8f2 	bl	8002bfc <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <manipsub_callback+0xa8>)
 8002a1c:	f003 f841 	bl	8005aa2 <HAL_GPIO_TogglePin>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40020400 	.word	0x40020400

08002a2c <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002a3a:	491c      	ldr	r1, [pc, #112]	; (8002aac <work_arm_deployer+0x80>)
 8002a3c:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <work_arm_deployer+0x84>)
 8002a3e:	f7fe ff65 	bl	800190c <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8002a42:	2064      	movs	r0, #100	; 0x64
 8002a44:	f00b fa7a 	bl	800df3c <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8002a48:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002ab4 <work_arm_deployer+0x88>
 8002a4c:	4818      	ldr	r0, [pc, #96]	; (8002ab0 <work_arm_deployer+0x84>)
 8002a4e:	f7fe ff9f 	bl	8001990 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002a52:	4919      	ldr	r1, [pc, #100]	; (8002ab8 <work_arm_deployer+0x8c>)
 8002a54:	4819      	ldr	r0, [pc, #100]	; (8002abc <work_arm_deployer+0x90>)
 8002a56:	f7fe ff59 	bl	800190c <ServoDriver_Init>
		osDelay(100);
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f00b fa6e 	bl	800df3c <osDelay>
		ServoDriver_SendValue(&servo_device2, 135.0f);
 8002a60:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002ac0 <work_arm_deployer+0x94>
 8002a64:	4815      	ldr	r0, [pc, #84]	; (8002abc <work_arm_deployer+0x90>)
 8002a66:	f7fe ff93 	bl	8001990 <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 45.0f);
		ServoDriver_Init(&servo_device1, &servo_param1);
		osDelay(100);
		ServoDriver_SendValue(&servo_device1, 135.0f);
	}
}
 8002a6a:	e01a      	b.n	8002aa2 <work_arm_deployer+0x76>
	}else if(state == 1){
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d117      	bne.n	8002aa2 <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002a72:	4911      	ldr	r1, [pc, #68]	; (8002ab8 <work_arm_deployer+0x8c>)
 8002a74:	4811      	ldr	r0, [pc, #68]	; (8002abc <work_arm_deployer+0x90>)
 8002a76:	f7fe ff49 	bl	800190c <ServoDriver_Init>
		osDelay(100);
 8002a7a:	2064      	movs	r0, #100	; 0x64
 8002a7c:	f00b fa5e 	bl	800df3c <osDelay>
		ServoDriver_SendValue(&servo_device2, 45.0f);
 8002a80:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002ab4 <work_arm_deployer+0x88>
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <work_arm_deployer+0x90>)
 8002a86:	f7fe ff83 	bl	8001990 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <work_arm_deployer+0x80>)
 8002a8c:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <work_arm_deployer+0x84>)
 8002a8e:	f7fe ff3d 	bl	800190c <ServoDriver_Init>
		osDelay(100);
 8002a92:	2064      	movs	r0, #100	; 0x64
 8002a94:	f00b fa52 	bl	800df3c <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8002a98:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002ac0 <work_arm_deployer+0x94>
 8002a9c:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <work_arm_deployer+0x84>)
 8002a9e:	f7fe ff77 	bl	8001990 <ServoDriver_SendValue>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000749c 	.word	0x2000749c
 8002ab0:	200074b0 	.word	0x200074b0
 8002ab4:	42340000 	.word	0x42340000
 8002ab8:	200074b4 	.word	0x200074b4
 8002abc:	200074c8 	.word	0x200074c8
 8002ac0:	43070000 	.word	0x43070000

08002ac4 <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <work_hand_setter+0x3c>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4809      	ldr	r0, [pc, #36]	; (8002b00 <work_hand_setter+0x3c>)
 8002adc:	f7fe ff8e 	bl	80019fc <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002ae0:	e009      	b.n	8002af6 <work_hand_setter+0x32>
	  }else if(state == 1){
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <work_hand_setter+0x32>
		  air_device.device_num=1;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <work_hand_setter+0x3c>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002aee:	2101      	movs	r1, #1
 8002af0:	4803      	ldr	r0, [pc, #12]	; (8002b00 <work_hand_setter+0x3c>)
 8002af2:	f7fe ff83 	bl	80019fc <AirCylinder_SendOutput>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200074cc 	.word	0x200074cc

08002b04 <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <work_arm_setter+0x3c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4809      	ldr	r0, [pc, #36]	; (8002b40 <work_arm_setter+0x3c>)
 8002b1c:	f7fe ff6e 	bl	80019fc <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002b20:	e009      	b.n	8002b36 <work_arm_setter+0x32>
	  }else if(state == 1){
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <work_arm_setter+0x32>
		  air_device.device_num=0;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <work_arm_setter+0x3c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4803      	ldr	r0, [pc, #12]	; (8002b40 <work_arm_setter+0x3c>)
 8002b32:	f7fe ff63 	bl	80019fc <AirCylinder_SendOutput>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200074cc 	.word	0x200074cc

08002b44 <base1_arm_setter>:

void base1_arm_setter(int state){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8002b52:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002b78 <base1_arm_setter+0x34>
 8002b56:	4809      	ldr	r0, [pc, #36]	; (8002b7c <base1_arm_setter+0x38>)
 8002b58:	f7fe fde8 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
	}
}
 8002b5c:	e007      	b.n	8002b6e <base1_arm_setter+0x2a>
	}else if(state == 1){
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d104      	bne.n	8002b6e <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
 8002b64:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <base1_arm_setter+0x38>)
 8002b6a:	f7fe fddf 	bl	800172c <MCMD_SetTarget>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	2000741c 	.word	0x2000741c

08002b80 <base1_hand_setter>:

void base1_hand_setter(int state){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d107      	bne.n	8002b9e <base1_hand_setter+0x1e>
		air_device.device_num=3;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <base1_hand_setter+0x3c>)
 8002b90:	2203      	movs	r2, #3
 8002b92:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002b94:	2100      	movs	r1, #0
 8002b96:	4809      	ldr	r0, [pc, #36]	; (8002bbc <base1_hand_setter+0x3c>)
 8002b98:	f7fe ff30 	bl	80019fc <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002b9c:	e009      	b.n	8002bb2 <base1_hand_setter+0x32>
		}else if(state == 1){
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <base1_hand_setter+0x32>
			air_device.device_num=3;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <base1_hand_setter+0x3c>)
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002baa:	2101      	movs	r1, #1
 8002bac:	4803      	ldr	r0, [pc, #12]	; (8002bbc <base1_hand_setter+0x3c>)
 8002bae:	f7fe ff25 	bl	80019fc <AirCylinder_SendOutput>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200074cc 	.word	0x200074cc

08002bc0 <base2_arm_setter>:

void base2_arm_setter(int state){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 8002bce:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002bf4 <base2_arm_setter+0x34>
 8002bd2:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <base2_arm_setter+0x38>)
 8002bd4:	f7fe fdaa 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
	}
}
 8002bd8:	e007      	b.n	8002bea <base2_arm_setter+0x2a>
	}else if(state == 1){
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d104      	bne.n	8002bea <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
 8002be0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8002be4:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <base2_arm_setter+0x38>)
 8002be6:	f7fe fda1 	bl	800172c <MCMD_SetTarget>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	00000000 	.word	0x00000000
 8002bf8:	2000745c 	.word	0x2000745c

08002bfc <base2_hand_setter>:

void base2_hand_setter(int state){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <base2_hand_setter+0x1e>
		air_device.device_num=2;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <base2_hand_setter+0x3c>)
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002c10:	2100      	movs	r1, #0
 8002c12:	4809      	ldr	r0, [pc, #36]	; (8002c38 <base2_hand_setter+0x3c>)
 8002c14:	f7fe fef2 	bl	80019fc <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002c18:	e009      	b.n	8002c2e <base2_hand_setter+0x32>
		}else if(state == 1){
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <base2_hand_setter+0x32>
			air_device.device_num=2;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <base2_hand_setter+0x3c>)
 8002c22:	2202      	movs	r2, #2
 8002c24:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002c26:	2101      	movs	r1, #1
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <base2_hand_setter+0x3c>)
 8002c2a:	f7fe fee7 	bl	80019fc <AirCylinder_SendOutput>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200074cc 	.word	0x200074cc
 8002c3c:	00000000 	.word	0x00000000

08002c40 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	b0f0      	sub	sp, #448	; 0x1c0
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002c4a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c4e:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002c50:	f00d fe54 	bl	80108fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 8002c54:	4bd2      	ldr	r3, [pc, #840]	; (8002fa0 <StartDefaultTask+0x360>)
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	4bd2      	ldr	r3, [pc, #840]	; (8002fa4 <StartDefaultTask+0x364>)
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4bd2      	ldr	r3, [pc, #840]	; (8002fa8 <StartDefaultTask+0x368>)
 8002c5e:	4ad3      	ldr	r2, [pc, #844]	; (8002fac <StartDefaultTask+0x36c>)
 8002c60:	49d3      	ldr	r1, [pc, #844]	; (8002fb0 <StartDefaultTask+0x370>)
 8002c62:	2001      	movs	r0, #1
 8002c64:	f012 fd02 	bl	801566c <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002c68:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f012 f993 	bl	8014f98 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8002c72:	4bd0      	ldr	r3, [pc, #832]	; (8002fb4 <StartDefaultTask+0x374>)
 8002c74:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8002c78:	4bcf      	ldr	r3, [pc, #828]	; (8002fb8 <StartDefaultTask+0x378>)
 8002c7a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8002c7e:	4bcf      	ldr	r3, [pc, #828]	; (8002fbc <StartDefaultTask+0x37c>)
 8002c80:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002c84:	4bce      	ldr	r3, [pc, #824]	; (8002fc0 <StartDefaultTask+0x380>)
 8002c86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002c8a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f012 f990 	bl	8014fb4 <rcutils_set_default_allocator>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8002ca0:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8002ca4:	48c7      	ldr	r0, [pc, #796]	; (8002fc4 <StartDefaultTask+0x384>)
 8002ca6:	f01d fd99 	bl	80207dc <iprintf>
  	}

  	osDelay(100);
 8002caa:	2064      	movs	r0, #100	; 0x64
 8002cac:	f00b f946 	bl	800df3c <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8002cb0:	4bc5      	ldr	r3, [pc, #788]	; (8002fc8 <StartDefaultTask+0x388>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6898      	ldr	r0, [r3, #8]
 8002cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cba:	2202      	movs	r2, #2
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f01d fdfb 	bl	80208b8 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002cc2:	f010 fb99 	bl	80133f8 <rcl_get_zero_initialized_init_options>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8002ccc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f012 f98d 	bl	8014ff0 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8002cd6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f010 fc94 	bl	8013608 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8002ce0:	f010 ff50 	bl	8013b84 <rcl_get_zero_initialized_service>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	publisher = rcl_get_zero_initialized_publisher();
 8002cea:	f010 fe37 	bl	801395c <rcl_get_zero_initialized_publisher>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4ab6      	ldr	r2, [pc, #728]	; (8002fcc <StartDefaultTask+0x38c>)
 8002cf2:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8002cf4:	f011 f86a 	bl	8013dcc <rcl_get_zero_initialized_subscription>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 8002cfe:	f011 f865 	bl	8013dcc <rcl_get_zero_initialized_subscription>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002d08:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d10:	4618      	mov	r0, r3
 8002d12:	f011 fceb 	bl	80146ec <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002d16:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002d1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f010 fdec 	bl	80138fc <rcl_node_get_default_options>

  	osDelay(100);
 8002d24:	2064      	movs	r0, #100	; 0x64
 8002d26:	f00b f909 	bl	800df3c <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002d2a:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8002d2e:	466a      	mov	r2, sp
 8002d30:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002d34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d38:	e882 0003 	stmia.w	r2, {r0, r1}
 8002d3c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d42:	4620      	mov	r0, r4
 8002d44:	f010 fb5a 	bl	80133fc <rcl_init_options_init>
 8002d48:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8002d4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <StartDefaultTask+0x122>
 8002d54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d58:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8002d5c:	489c      	ldr	r0, [pc, #624]	; (8002fd0 <StartDefaultTask+0x390>)
 8002d5e:	f01d fd3d 	bl	80207dc <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8002d62:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f010 fc45 	bl	80135f8 <rcl_init_options_set_domain_id>
 8002d6e:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8002d72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <StartDefaultTask+0x148>
 8002d7a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002d7e:	f240 21f1 	movw	r1, #753	; 0x2f1
 8002d82:	4893      	ldr	r0, [pc, #588]	; (8002fd0 <StartDefaultTask+0x390>)
 8002d84:	f01d fd2a 	bl	80207dc <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002d88:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8002d8c:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8002d90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f011 ffd4 	bl	8014d48 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002da0:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002da4:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8002da8:	f107 0320 	add.w	r3, r7, #32
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	4a88      	ldr	r2, [pc, #544]	; (8002fd4 <StartDefaultTask+0x394>)
 8002db2:	4989      	ldr	r1, [pc, #548]	; (8002fd8 <StartDefaultTask+0x398>)
 8002db4:	f011 fffe 	bl	8014db4 <rclc_node_init_with_options>
 8002db8:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8002dbc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <StartDefaultTask+0x192>
 8002dc4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002dc8:	f240 21f3 	movw	r1, #755	; 0x2f3
 8002dcc:	4880      	ldr	r0, [pc, #512]	; (8002fd0 <StartDefaultTask+0x390>)
 8002dce:	f01d fd05 	bl	80207dc <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8002dd2:	f00e faf3 	bl	80113bc <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002ddc:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002de0:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <StartDefaultTask+0x39c>)
 8002de2:	f012 f85d 	bl	8014ea0 <rclc_service_init_default>
 8002de6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8002dea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <StartDefaultTask+0x1c0>
 8002df2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002df6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8002dfa:	4875      	ldr	r0, [pc, #468]	; (8002fd0 <StartDefaultTask+0x390>)
 8002dfc:	f01d fcee 	bl	80207dc <iprintf>

	RCCHECK(rclc_publisher_init_default(
 8002e00:	f014 faee 	bl	80173e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e0a:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <StartDefaultTask+0x3a0>)
 8002e0c:	486f      	ldr	r0, [pc, #444]	; (8002fcc <StartDefaultTask+0x38c>)
 8002e0e:	f012 f80d 	bl	8014e2c <rclc_publisher_init_default>
 8002e12:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <StartDefaultTask+0x1ec>
 8002e1e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e22:	f240 21f6 	movw	r1, #758	; 0x2f6
 8002e26:	486a      	ldr	r0, [pc, #424]	; (8002fd0 <StartDefaultTask+0x390>)
 8002e28:	f01d fcd8 	bl	80207dc <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 8002e2c:	f00e fbf6 	bl	801161c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e36:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <StartDefaultTask+0x3a4>)
 8002e38:	486b      	ldr	r0, [pc, #428]	; (8002fe8 <StartDefaultTask+0x3a8>)
 8002e3a:	f011 fff7 	bl	8014e2c <rclc_publisher_init_default>
 8002e3e:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002e42:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <StartDefaultTask+0x218>
 8002e4a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002e4e:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8002e52:	485f      	ldr	r0, [pc, #380]	; (8002fd0 <StartDefaultTask+0x390>)
 8002e54:	f01d fcc2 	bl	80207dc <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002e58:	f00e fbc8 	bl	80115ec <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e62:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <StartDefaultTask+0x3ac>)
 8002e68:	f012 f854 	bl	8014f14 <rclc_subscription_init_default>
 8002e6c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8002e70:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d006      	beq.n	8002e86 <StartDefaultTask+0x246>
 8002e78:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e7c:	f240 3102 	movw	r1, #770	; 0x302
 8002e80:	4853      	ldr	r0, [pc, #332]	; (8002fd0 <StartDefaultTask+0x390>)
 8002e82:	f01d fcab 	bl	80207dc <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002e86:	f00e fdd7 	bl	8011a38 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e90:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002e94:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <StartDefaultTask+0x3b0>)
 8002e96:	f012 f83d 	bl	8014f14 <rclc_subscription_init_default>
 8002e9a:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8002e9e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <StartDefaultTask+0x274>
 8002ea6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002eaa:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002eae:	4848      	ldr	r0, [pc, #288]	; (8002fd0 <StartDefaultTask+0x390>)
 8002eb0:	f01d fc94 	bl	80207dc <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 8002eb4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002eb8:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8002ebc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	f011 fc1d 	bl	8014700 <rclc_executor_init>
 8002ec6:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8002eca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <StartDefaultTask+0x2a0>
 8002ed2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ed6:	f240 310e 	movw	r1, #782	; 0x30e
 8002eda:	483d      	ldr	r0, [pc, #244]	; (8002fd0 <StartDefaultTask+0x390>)
 8002edc:	f01d fc7e 	bl	80207dc <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8002ee0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002ee4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002ee8:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <StartDefaultTask+0x3b4>)
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <StartDefaultTask+0x3b8>)
 8002eee:	4a43      	ldr	r2, [pc, #268]	; (8002ffc <StartDefaultTask+0x3bc>)
 8002ef0:	f011 fcc0 	bl	8014874 <rclc_executor_add_service>
 8002ef4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8002ef8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <StartDefaultTask+0x2ce>
 8002f00:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002f04:	f44f 7144 	mov.w	r1, #784	; 0x310
 8002f08:	4831      	ldr	r0, [pc, #196]	; (8002fd0 <StartDefaultTask+0x390>)
 8002f0a:	f01d fc67 	bl	80207dc <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002f0e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002f12:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f16:	2300      	movs	r3, #0
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <StartDefaultTask+0x3c0>)
 8002f1c:	4a39      	ldr	r2, [pc, #228]	; (8003004 <StartDefaultTask+0x3c4>)
 8002f1e:	f011 fc6b 	bl	80147f8 <rclc_executor_add_subscription>
 8002f22:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8002f26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <StartDefaultTask+0x2fc>
 8002f2e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002f32:	f240 3111 	movw	r1, #785	; 0x311
 8002f36:	4826      	ldr	r0, [pc, #152]	; (8002fd0 <StartDefaultTask+0x390>)
 8002f38:	f01d fc50 	bl	80207dc <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 8002f3c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002f40:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <StartDefaultTask+0x3c8>)
 8002f4a:	4a30      	ldr	r2, [pc, #192]	; (800300c <StartDefaultTask+0x3cc>)
 8002f4c:	f011 fc54 	bl	80147f8 <rclc_executor_add_subscription>
 8002f50:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8002f54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <StartDefaultTask+0x32a>
 8002f5c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002f60:	f44f 7145 	mov.w	r1, #788	; 0x314
 8002f64:	481a      	ldr	r0, [pc, #104]	; (8002fd0 <StartDefaultTask+0x390>)
 8002f66:	f01d fc39 	bl	80207dc <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 8002f6a:	2064      	movs	r0, #100	; 0x64
 8002f6c:	f00a ffe6 	bl	800df3c <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002f70:	4827      	ldr	r0, [pc, #156]	; (8003010 <StartDefaultTask+0x3d0>)
 8002f72:	f014 f947 	bl	8017204 <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8002f76:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002f7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <StartDefaultTask+0x3d4>)
 8002f80:	461c      	mov	r4, r3
 8002f82:	4615      	mov	r5, r2
 8002f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	2214      	movs	r2, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	481e      	ldr	r0, [pc, #120]	; (8003010 <StartDefaultTask+0x3d0>)
 8002f96:	f014 f993 	bl	80172c0 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	e03c      	b.n	8003018 <StartDefaultTask+0x3d8>
 8002f9e:	bf00      	nop
 8002fa0:	08002259 	.word	0x08002259
 8002fa4:	080021f9 	.word	0x080021f9
 8002fa8:	080021d9 	.word	0x080021d9
 8002fac:	080021ad 	.word	0x080021ad
 8002fb0:	2000be44 	.word	0x2000be44
 8002fb4:	0800349d 	.word	0x0800349d
 8002fb8:	080034e1 	.word	0x080034e1
 8002fbc:	08003519 	.word	0x08003519
 8002fc0:	08003585 	.word	0x08003585
 8002fc4:	080242f4 	.word	0x080242f4
 8002fc8:	2000099c 	.word	0x2000099c
 8002fcc:	200074d0 	.word	0x200074d0
 8002fd0:	0802431c 	.word	0x0802431c
 8002fd4:	08024348 	.word	0x08024348
 8002fd8:	0802434c 	.word	0x0802434c
 8002fdc:	08024354 	.word	0x08024354
 8002fe0:	08024364 	.word	0x08024364
 8002fe4:	08024374 	.word	0x08024374
 8002fe8:	200074d4 	.word	0x200074d4
 8002fec:	08024380 	.word	0x08024380
 8002ff0:	08024390 	.word	0x08024390
 8002ff4:	08002879 	.word	0x08002879
 8002ff8:	20007270 	.word	0x20007270
 8002ffc:	20007258 	.word	0x20007258
 8003000:	080028c5 	.word	0x080028c5
 8003004:	20007278 	.word	0x20007278
 8003008:	08002981 	.word	0x08002981
 800300c:	200072a8 	.word	0x200072a8
 8003010:	200072e8 	.word	0x200072e8
 8003014:	080243b8 	.word	0x080243b8
 8003018:	491f      	ldr	r1, [pc, #124]	; (8003098 <StartDefaultTask+0x458>)
 800301a:	4820      	ldr	r0, [pc, #128]	; (800309c <StartDefaultTask+0x45c>)
 800301c:	f010 fd6c 	bl	8013af8 <rcl_publish>
 8003020:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003024:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <StartDefaultTask+0x3fa>
 800302c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003030:	f240 311e 	movw	r1, #798	; 0x31e
 8003034:	481a      	ldr	r0, [pc, #104]	; (80030a0 <StartDefaultTask+0x460>)
 8003036:	f01d fbd1 	bl	80207dc <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800303a:	2200      	movs	r2, #0
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	4819      	ldr	r0, [pc, #100]	; (80030a4 <StartDefaultTask+0x464>)
 8003040:	f002 fd16 	bl	8005a70 <HAL_GPIO_WritePin>

    //CANの設定を実行
	canSetting();
 8003044:	f7ff f9a6 	bl	8002394 <canSetting>
	mcmdMoter1Setting();
 8003048:	f7ff f9ce 	bl	80023e8 <mcmdMoter1Setting>
	mcmdMoter2Setting();
 800304c:	f7ff fa30 	bl	80024b0 <mcmdMoter2Setting>
	mcmdMoter3Setting();
 8003050:	f7ff fa92 	bl	8002578 <mcmdMoter3Setting>
	mcmdMoter4Setting();
 8003054:	f7ff faf4 	bl	8002640 <mcmdMoter4Setting>
//	mcmdMoter5Setting();
//	mcmdMoter6Setting();
//	mcmdMoter7Setting();
//	mcmdMoter8Setting();
	servo1Setting();
 8003058:	f7ff fb56 	bl	8002708 <servo1Setting>
	servo2Setting();
 800305c:	f7ff fb80 	bl	8002760 <servo2Setting>
	airSetting();
 8003060:	f7ff fbaa 	bl	80027b8 <airSetting>

	printf("All Setting Finished\r\n");
 8003064:	4810      	ldr	r0, [pc, #64]	; (80030a8 <StartDefaultTask+0x468>)
 8003066:	f01d fc1f 	bl	80208a8 <puts>
	finishCANsetting = true;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <StartDefaultTask+0x46c>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8003070:	2064      	movs	r0, #100	; 0x64
 8003072:	f00a ff63 	bl	800df3c <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8003076:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800307a:	a305      	add	r3, pc, #20	; (adr r3, 8003090 <StartDefaultTask+0x450>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	4608      	mov	r0, r1
 8003082:	f011 fe27 	bl	8014cd4 <rclc_executor_spin_some>
	  //RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト

	  osDelay(10);
 8003086:	200a      	movs	r0, #10
 8003088:	f00a ff58 	bl	800df3c <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800308c:	e7f3      	b.n	8003076 <StartDefaultTask+0x436>
 800308e:	bf00      	nop
 8003090:	05f5e100 	.word	0x05f5e100
 8003094:	00000000 	.word	0x00000000
 8003098:	200072e8 	.word	0x200072e8
 800309c:	200074d0 	.word	0x200074d0
 80030a0:	080242c8 	.word	0x080242c8
 80030a4:	40020400 	.word	0x40020400
 80030a8:	080243a0 	.word	0x080243a0
 80030ac:	2000bd38 	.word	0x2000bd38

080030b0 <mcmdEncChecker>:
	MCMD_Control_Enable(mcmd_struct);

	osDelay(100);
}

void mcmdEncChecker(MCMD_Feedback_Typedef *mcmd_fb, MCMD_HandleTypedef *mcmd_struct, int interbalSec){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
	int node_id = mcmd_struct->device.node_id;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	61fb      	str	r3, [r7, #28]
	int device_num = mcmd_struct->device.device_num;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	789b      	ldrb	r3, [r3, #2]
 80030c6:	61bb      	str	r3, [r7, #24]

	mcmd_fb->value = Get_MCMD_Feedback(&(mcmd_struct->device)).value;
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fb43 	bl	800175c <Get_MCMD_Feedback>
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]
	printf("value of %d node %d device %d\r\n",node_id,device_num,(int)((mcmd_fb->value)*100));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800310c <mcmdEncChecker+0x5c>
 80030e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ee:	ee17 3a90 	vmov	r3, s15
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	69f9      	ldr	r1, [r7, #28]
 80030f6:	4806      	ldr	r0, [pc, #24]	; (8003110 <mcmdEncChecker+0x60>)
 80030f8:	f01d fb70 	bl	80207dc <iprintf>
	osDelay(interbalSec);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f00a ff1c 	bl	800df3c <osDelay>
}
 8003104:	bf00      	nop
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	42c80000 	.word	0x42c80000
 8003110:	08024404 	.word	0x08024404

08003114 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <StartSysCheckTask+0x5c>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00d      	beq.n	8003140 <StartSysCheckTask+0x2c>
		  if(!finishCheck){
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <StartSysCheckTask+0x60>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	f083 0301 	eor.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <StartSysCheckTask+0x2c>
			  osDelay(1000);//このdelayは必要？
 8003132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003136:	f00a ff01 	bl	800df3c <osDelay>
//			  mcmdMotorCecker(&mcmd4M1_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4M2_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4M3_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4M4_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);

			  finishCheck = true;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <StartSysCheckTask+0x60>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
		  	  }
	  }
	  //freeRTOSChecker();
	  //airChecker();
	  mcmdEncChecker(&mcmdM1_fb,&mcmd4M1_struct,100);
 8003140:	2264      	movs	r2, #100	; 0x64
 8003142:	490d      	ldr	r1, [pc, #52]	; (8003178 <StartSysCheckTask+0x64>)
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <StartSysCheckTask+0x68>)
 8003146:	f7ff ffb3 	bl	80030b0 <mcmdEncChecker>
	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
 800314a:	2264      	movs	r2, #100	; 0x64
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <StartSysCheckTask+0x6c>)
 800314e:	480d      	ldr	r0, [pc, #52]	; (8003184 <StartSysCheckTask+0x70>)
 8003150:	f7ff ffae 	bl	80030b0 <mcmdEncChecker>
	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
 8003154:	2264      	movs	r2, #100	; 0x64
 8003156:	490c      	ldr	r1, [pc, #48]	; (8003188 <StartSysCheckTask+0x74>)
 8003158:	480c      	ldr	r0, [pc, #48]	; (800318c <StartSysCheckTask+0x78>)
 800315a:	f7ff ffa9 	bl	80030b0 <mcmdEncChecker>
	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
 800315e:	2264      	movs	r2, #100	; 0x64
 8003160:	490b      	ldr	r1, [pc, #44]	; (8003190 <StartSysCheckTask+0x7c>)
 8003162:	480c      	ldr	r0, [pc, #48]	; (8003194 <StartSysCheckTask+0x80>)
 8003164:	f7ff ffa4 	bl	80030b0 <mcmdEncChecker>
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 8003168:	200a      	movs	r0, #10
 800316a:	f00a fee7 	bl	800df3c <osDelay>
	  if(finishCANsetting){
 800316e:	e7d5      	b.n	800311c <StartSysCheckTask+0x8>
 8003170:	2000bd38 	.word	0x2000bd38
 8003174:	2000bd4c 	.word	0x2000bd4c
 8003178:	200072fc 	.word	0x200072fc
 800317c:	2000733c 	.word	0x2000733c
 8003180:	20007344 	.word	0x20007344
 8003184:	20007384 	.word	0x20007384
 8003188:	2000738c 	.word	0x2000738c
 800318c:	200073cc 	.word	0x200073cc
 8003190:	200073d4 	.word	0x200073d4
 8003194:	20007414 	.word	0x20007414

08003198 <motorRun>:
/**
* @brief Function implementing the MotorRunTask thread.
* @param argument: Not used
* @retval None
*/
void motorRun(){
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	MCMD_SetTarget(&mcmd4M1_struct,cmd_motor[0]);
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <motorRun+0x48>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	480f      	ldr	r0, [pc, #60]	; (80031e4 <motorRun+0x4c>)
 80031a8:	f7fe fac0 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M2_struct,cmd_motor[1]);
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <motorRun+0x48>)
 80031ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b2:	eeb0 0a67 	vmov.f32	s0, s15
 80031b6:	480c      	ldr	r0, [pc, #48]	; (80031e8 <motorRun+0x50>)
 80031b8:	f7fe fab8 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M3_struct,cmd_motor[2]);
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <motorRun+0x48>)
 80031be:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c2:	eeb0 0a67 	vmov.f32	s0, s15
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <motorRun+0x54>)
 80031c8:	f7fe fab0 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M4_struct,cmd_motor[3]);
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <motorRun+0x48>)
 80031ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80031d2:	eeb0 0a67 	vmov.f32	s0, s15
 80031d6:	4806      	ldr	r0, [pc, #24]	; (80031f0 <motorRun+0x58>)
 80031d8:	f7fe faa8 	bl	800172c <MCMD_SetTarget>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	2000bd3c 	.word	0x2000bd3c
 80031e4:	200072fc 	.word	0x200072fc
 80031e8:	20007344 	.word	0x20007344
 80031ec:	2000738c 	.word	0x2000738c
 80031f0:	200073d4 	.word	0x200073d4

080031f4 <StartMotorRunTask>:
/* USER CODE END Header_StartMotorRunTask */
void StartMotorRunTask(void *argument)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorRunTask */
	cmd_motor[0] = 1.0f;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <StartMotorRunTask+0x34>)
 80031fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003202:	601a      	str	r2, [r3, #0]
	cmd_motor[1] = 1.0f;
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <StartMotorRunTask+0x34>)
 8003206:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800320a:	605a      	str	r2, [r3, #4]
	cmd_motor[2] = 1.0f;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <StartMotorRunTask+0x34>)
 800320e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003212:	609a      	str	r2, [r3, #8]
	cmd_motor[3] = 1.0f;
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <StartMotorRunTask+0x34>)
 8003216:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800321a:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	  motorRun();
 800321c:	f7ff ffbc 	bl	8003198 <motorRun>

    osDelay(10);
 8003220:	200a      	movs	r0, #10
 8003222:	f00a fe8b 	bl	800df3c <osDelay>
	  motorRun();
 8003226:	e7f9      	b.n	800321c <StartMotorRunTask+0x28>
 8003228:	2000bd3c 	.word	0x2000bd3c

0800322c <StartEncorderTask>:
int64_t count1;
int64_t count2;
float quant_per_unit = 1.0/4096.0f;
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncorderTask */
	//エンコーダーの読み取りをスタート
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003234:	213c      	movs	r1, #60	; 0x3c
 8003236:	4806      	ldr	r0, [pc, #24]	; (8003250 <StartEncorderTask+0x24>)
 8003238:	f005 fa04 	bl	8008644 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800323c:	213c      	movs	r1, #60	; 0x3c
 800323e:	4805      	ldr	r0, [pc, #20]	; (8003254 <StartEncorderTask+0x28>)
 8003240:	f005 fa00 	bl	8008644 <HAL_TIM_Encoder_Start>
//	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
//	  enc.enclx = (int)(count1*quant_per_unit);
//	  enc.encly = (int)(count2*quant_per_unit);
//	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;

    osDelay(1000);
 8003244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003248:	f00a fe78 	bl	800df3c <osDelay>
 800324c:	e7fa      	b.n	8003244 <StartEncorderTask+0x18>
 800324e:	bf00      	nop
 8003250:	2000bdac 	.word	0x2000bdac
 8003254:	2000bdf8 	.word	0x2000bdf8

08003258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800326e:	4b30      	ldr	r3, [pc, #192]	; (8003330 <MX_GPIO_Init+0xd8>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <MX_GPIO_Init+0xd8>)
 8003274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <MX_GPIO_Init+0xd8>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <MX_GPIO_Init+0xd8>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a29      	ldr	r2, [pc, #164]	; (8003330 <MX_GPIO_Init+0xd8>)
 800328c:	f043 0310 	orr.w	r3, r3, #16
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <MX_GPIO_Init+0xd8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a23      	ldr	r2, [pc, #140]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a17      	ldr	r2, [pc, #92]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a11      	ldr	r2, [pc, #68]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <MX_GPIO_Init+0xd8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80032fe:	2200      	movs	r2, #0
 8003300:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003304:	480b      	ldr	r0, [pc, #44]	; (8003334 <MX_GPIO_Init+0xdc>)
 8003306:	f002 fbb3 	bl	8005a70 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 800330a:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 800330e:	61fb      	str	r3, [r7, #28]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	4804      	ldr	r0, [pc, #16]	; (8003334 <MX_GPIO_Init+0xdc>)
 8003324:	f002 f9f8 	bl	8005718 <HAL_GPIO_Init>

}
 8003328:	bf00      	nop
 800332a:	3730      	adds	r7, #48	; 0x30
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	40020400 	.word	0x40020400

08003338 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8003342:	1df9      	adds	r1, r7, #7
 8003344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003348:	2201      	movs	r2, #1
 800334a:	4804      	ldr	r0, [pc, #16]	; (800335c <__io_putchar+0x24>)
 800334c:	f005 fd10 	bl	8008d70 <HAL_UART_Transmit>
    return ch;
 8003350:	79fb      	ldrb	r3, [r7, #7]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	2000be44 	.word	0x2000be44

08003360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003364:	f000 fe33 	bl	8003fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003368:	f000 f814 	bl	8003394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800336c:	f7ff ff74 	bl	8003258 <MX_GPIO_Init>
  MX_DMA_Init();
 8003370:	f7fe fef6 	bl	8002160 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003374:	f000 fd02 	bl	8003d7c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003378:	f000 fbd6 	bl	8003b28 <MX_TIM1_Init>
  MX_CAN1_Init();
 800337c:	f7fe fc0a 	bl	8001b94 <MX_CAN1_Init>
  MX_TIM8_Init();
 8003380:	f000 fc2c 	bl	8003bdc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003384:	f00a fcca 	bl	800dd1c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003388:	f7ff fa3a 	bl	8002800 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800338c:	f00a fcfa 	bl	800dd84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003390:	e7fe      	b.n	8003390 <main+0x30>
	...

08003394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b094      	sub	sp, #80	; 0x50
 8003398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339a:	f107 031c 	add.w	r3, r7, #28
 800339e:	2234      	movs	r2, #52	; 0x34
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f01d fcc6 	bl	8020d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b2c      	ldr	r3, [pc, #176]	; (800346c <SystemClock_Config+0xd8>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	4a2b      	ldr	r2, [pc, #172]	; (800346c <SystemClock_Config+0xd8>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6413      	str	r3, [r2, #64]	; 0x40
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <SystemClock_Config+0xd8>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <SystemClock_Config+0xdc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033d8:	4a25      	ldr	r2, [pc, #148]	; (8003470 <SystemClock_Config+0xdc>)
 80033da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <SystemClock_Config+0xdc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033f6:	2302      	movs	r3, #2
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003400:	2304      	movs	r3, #4
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003404:	2360      	movs	r3, #96	; 0x60
 8003406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003408:	2302      	movs	r3, #2
 800340a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800340c:	2304      	movs	r3, #4
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003410:	2302      	movs	r3, #2
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fe65 	bl	80070e8 <HAL_RCC_OscConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003424:	f000 f835 	bl	8003492 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003428:	f003 fe0e 	bl	8007048 <HAL_PWREx_EnableOverDrive>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003432:	f000 f82e 	bl	8003492 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003436:	230f      	movs	r3, #15
 8003438:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800343a:	2302      	movs	r3, #2
 800343c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	2103      	movs	r1, #3
 8003454:	4618      	mov	r0, r3
 8003456:	f004 f8f5 	bl	8007644 <HAL_RCC_ClockConfig>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003460:	f000 f817 	bl	8003492 <Error_Handler>
  }
}
 8003464:	bf00      	nop
 8003466:	3750      	adds	r7, #80	; 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000

08003474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d101      	bne.n	800348a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003486:	f000 fdaf 	bl	8003fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003496:	b672      	cpsid	i
}
 8003498:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800349a:	e7fe      	b.n	800349a <Error_Handler+0x8>

0800349c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <microros_allocate+0x3c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <microros_allocate+0x3c>)
 80034b4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <microros_allocate+0x40>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <microros_allocate+0x40>)
 80034c4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fbf6 	bl	8001cb8 <pvPortMallocMicroROS>
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	2000bd50 	.word	0x2000bd50
 80034dc:	2000bd54 	.word	0x2000bd54

080034e0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00c      	beq.n	800350a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fe fd09 	bl	8001f08 <getBlockSize>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a06      	ldr	r2, [pc, #24]	; (8003514 <microros_deallocate+0x34>)
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <microros_deallocate+0x34>)
 8003502:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe fca1 	bl	8001e4c <vPortFreeMicroROS>
  }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000bd54 	.word	0x2000bd54

08003518 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <microros_reallocate+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	461a      	mov	r2, r3
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <microros_reallocate+0x64>)
 8003532:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <microros_reallocate+0x68>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4413      	add	r3, r2
 800353e:	461a      	mov	r2, r3
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <microros_reallocate+0x68>)
 8003542:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800354a:	68b8      	ldr	r0, [r7, #8]
 800354c:	f7fe fbb4 	bl	8001cb8 <pvPortMallocMicroROS>
 8003550:	4603      	mov	r3, r0
 8003552:	e00e      	b.n	8003572 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7fe fcd7 	bl	8001f08 <getBlockSize>
 800355a:	4603      	mov	r3, r0
 800355c:	4a08      	ldr	r2, [pc, #32]	; (8003580 <microros_reallocate+0x68>)
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	461a      	mov	r2, r3
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <microros_reallocate+0x68>)
 8003566:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7fe fcea 	bl	8001f44 <pvPortReallocMicroROS>
 8003570:	4603      	mov	r3, r0
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000bd50 	.word	0x2000bd50
 8003580:	2000bd54 	.word	0x2000bd54

08003584 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	4a0c      	ldr	r2, [pc, #48]	; (80035cc <microros_zero_allocate+0x48>)
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	4413      	add	r3, r2
 800359e:	461a      	mov	r2, r3
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <microros_zero_allocate+0x48>)
 80035a2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <microros_zero_allocate+0x4c>)
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <microros_zero_allocate+0x4c>)
 80035b6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7fe fcef 	bl	8001f9e <pvPortCallocMicroROS>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000bd50 	.word	0x2000bd50
 80035d0:	2000bd54 	.word	0x2000bd54
 80035d4:	00000000 	.word	0x00000000

080035d8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80035d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80035ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ee:	a320      	add	r3, pc, #128	; (adr r3, 8003670 <UTILS_NanosecondsToTimespec+0x98>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fd f848 	bl	8000688 <__aeabi_ldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003606:	a31a      	add	r3, pc, #104	; (adr r3, 8003670 <UTILS_NanosecondsToTimespec+0x98>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fd f83c 	bl	8000688 <__aeabi_ldivmod>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	da20      	bge.n	800365e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <UTILS_NanosecondsToTimespec+0x90>)
 8003622:	fb82 1203 	smull	r1, r2, r2, r3
 8003626:	1712      	asrs	r2, r2, #28
 8003628:	17db      	asrs	r3, r3, #31
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	3301      	adds	r3, #1
 800362e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	17c8      	asrs	r0, r1, #31
 800363a:	460c      	mov	r4, r1
 800363c:	4605      	mov	r5, r0
 800363e:	ebb2 0804 	subs.w	r8, r2, r4
 8003642:	eb63 0905 	sbc.w	r9, r3, r5
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4906      	ldr	r1, [pc, #24]	; (800366c <UTILS_NanosecondsToTimespec+0x94>)
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	441a      	add	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
    }
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003668:	44b82fa1 	.word	0x44b82fa1
 800366c:	3b9aca00 	.word	0x3b9aca00
 8003670:	3b9aca00 	.word	0x3b9aca00
 8003674:	00000000 	.word	0x00000000

08003678 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b08e      	sub	sp, #56	; 0x38
 800367e:	af00      	add	r7, sp, #0
 8003680:	6278      	str	r0, [r7, #36]	; 0x24
 8003682:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003684:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003688:	2300      	movs	r3, #0
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800369a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800369e:	4618      	mov	r0, r3
 80036a0:	f00b ff4a 	bl	800f538 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	17da      	asrs	r2, r3, #31
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	61fa      	str	r2, [r7, #28]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	000b      	movs	r3, r1
 80036b8:	2200      	movs	r2, #0
 80036ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	2200      	movs	r2, #0
 80036c2:	461c      	mov	r4, r3
 80036c4:	4615      	mov	r5, r2
 80036c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036ca:	1911      	adds	r1, r2, r4
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	416b      	adcs	r3, r5
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80036da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	f04f 0400 	mov.w	r4, #0
 80036e6:	f04f 0500 	mov.w	r5, #0
 80036ea:	015d      	lsls	r5, r3, #5
 80036ec:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80036f0:	0154      	lsls	r4, r2, #5
 80036f2:	4622      	mov	r2, r4
 80036f4:	462b      	mov	r3, r5
 80036f6:	ebb2 0800 	subs.w	r8, r2, r0
 80036fa:	eb63 0901 	sbc.w	r9, r3, r1
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800370a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800370e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003712:	4690      	mov	r8, r2
 8003714:	4699      	mov	r9, r3
 8003716:	eb18 0a00 	adds.w	sl, r8, r0
 800371a:	eb49 0b01 	adc.w	fp, r9, r1
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800372a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800372e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003732:	ebb2 040a 	subs.w	r4, r2, sl
 8003736:	603c      	str	r4, [r7, #0]
 8003738:	eb63 030b 	sbc.w	r3, r3, fp
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003742:	4623      	mov	r3, r4
 8003744:	181b      	adds	r3, r3, r0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	462b      	mov	r3, r5
 800374a:	eb41 0303 	adc.w	r3, r1, r3
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003756:	f7ff ff3f 	bl	80035d8 <UTILS_NanosecondsToTimespec>

    return 0;
 800375a:	2300      	movs	r3, #0
 800375c:	4618      	mov	r0, r3
 800375e:	3738      	adds	r7, #56	; 0x38
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_MspInit+0x4c>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <HAL_MspInit+0x4c>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_MspInit+0x4c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_MspInit+0x4c>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_MspInit+0x4c>)
 800378c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003790:	6453      	str	r3, [r2, #68]	; 0x44
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_MspInit+0x4c>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	210f      	movs	r1, #15
 80037a2:	f06f 0001 	mvn.w	r0, #1
 80037a6:	f001 fb77 	bl	8004e98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800

080037b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08e      	sub	sp, #56	; 0x38
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80037c8:	4b34      	ldr	r3, [pc, #208]	; (800389c <HAL_InitTick+0xe4>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	4a33      	ldr	r2, [pc, #204]	; (800389c <HAL_InitTick+0xe4>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6413      	str	r3, [r2, #64]	; 0x40
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_InitTick+0xe4>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037e0:	f107 0210 	add.w	r2, r7, #16
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 f950 	bl	8007a90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037fa:	f004 f921 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 80037fe:	6378      	str	r0, [r7, #52]	; 0x34
 8003800:	e004      	b.n	800380c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003802:	f004 f91d 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8003806:	4603      	mov	r3, r0
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380e:	4a24      	ldr	r2, [pc, #144]	; (80038a0 <HAL_InitTick+0xe8>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	0c9b      	lsrs	r3, r3, #18
 8003816:	3b01      	subs	r3, #1
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_InitTick+0xec>)
 800381c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003820:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_InitTick+0xec>)
 8003824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003828:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_InitTick+0xec>)
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003830:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_InitTick+0xec>)
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_InitTick+0xec>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_InitTick+0xec>)
 800383e:	2200      	movs	r2, #0
 8003840:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003842:	4818      	ldr	r0, [pc, #96]	; (80038a4 <HAL_InitTick+0xec>)
 8003844:	f004 fd7e 	bl	8008344 <HAL_TIM_Base_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800384e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11b      	bne.n	800388e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003856:	4813      	ldr	r0, [pc, #76]	; (80038a4 <HAL_InitTick+0xec>)
 8003858:	f004 fdd6 	bl	8008408 <HAL_TIM_Base_Start_IT>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003866:	2b00      	cmp	r3, #0
 8003868:	d111      	bne.n	800388e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800386a:	201c      	movs	r0, #28
 800386c:	f001 fb30 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d808      	bhi.n	8003888 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003876:	2200      	movs	r2, #0
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	201c      	movs	r0, #28
 800387c:	f001 fb0c 	bl	8004e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_InitTick+0xf0>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e002      	b.n	800388e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800388e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003892:	4618      	mov	r0, r3
 8003894:	3738      	adds	r7, #56	; 0x38
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	431bde83 	.word	0x431bde83
 80038a4:	2000bd58 	.word	0x2000bd58
 80038a8:	20000008 	.word	0x20000008

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <NMI_Handler+0x4>

080038b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <HardFault_Handler+0x4>

080038b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <MemManage_Handler+0x4>

080038be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <UsageFault_Handler+0x4>

080038ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA1_Stream1_IRQHandler+0x10>)
 80038de:	f001 fca5 	bl	800522c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000becc 	.word	0x2000becc

080038ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <DMA1_Stream3_IRQHandler+0x10>)
 80038f2:	f001 fc9b 	bl	800522c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2000bf2c 	.word	0x2000bf2c

08003900 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <CAN1_TX_IRQHandler+0x10>)
 8003906:	f001 f81c 	bl	8004942 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20002e0c 	.word	0x20002e0c

08003914 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <CAN1_RX0_IRQHandler+0x10>)
 800391a:	f001 f812 	bl	8004942 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20002e0c 	.word	0x20002e0c

08003928 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <CAN1_RX1_IRQHandler+0x10>)
 800392e:	f001 f808 	bl	8004942 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20002e0c 	.word	0x20002e0c

0800393c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <TIM2_IRQHandler+0x10>)
 8003942:	f004 ff0d 	bl	8008760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000bd58 	.word	0x2000bd58

08003950 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <USART3_IRQHandler+0x10>)
 8003956:	f005 fbe1 	bl	800911c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	2000be44 	.word	0x2000be44

08003964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <OTG_FS_IRQHandler+0x10>)
 800396a:	f002 f9fa 	bl	8005d62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20011db8 	.word	0x20011db8

08003978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return 1;
 800397c:	2301      	movs	r3, #1
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_kill>:

int _kill(int pid, int sig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003992:	f01d fa67 	bl	8020e64 <__errno>
 8003996:	4603      	mov	r3, r0
 8003998:	2216      	movs	r2, #22
 800399a:	601a      	str	r2, [r3, #0]
  return -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_exit>:

void _exit (int status)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffe7 	bl	8003988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039ba:	e7fe      	b.n	80039ba <_exit+0x12>

080039bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e00a      	b.n	80039e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039ce:	f3af 8000 	nop.w
 80039d2:	4601      	mov	r1, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	60ba      	str	r2, [r7, #8]
 80039da:	b2ca      	uxtb	r2, r1
 80039dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dbf0      	blt.n	80039ce <_read+0x12>
  }

  return len;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e009      	b.n	8003a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fc91 	bl	8003338 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	dbf1      	blt.n	8003a08 <_write+0x12>
  }
  return len;
 8003a24:	687b      	ldr	r3, [r7, #4]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <_close>:

int _close(int file)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a56:	605a      	str	r2, [r3, #4]
  return 0;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <_isatty>:

int _isatty(int file)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a6e:	2301      	movs	r3, #1
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <_sbrk+0x5c>)
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <_sbrk+0x60>)
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <_sbrk+0x64>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <_sbrk+0x64>)
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <_sbrk+0x68>)
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <_sbrk+0x64>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d207      	bcs.n	8003ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ac8:	f01d f9cc 	bl	8020e64 <__errno>
 8003acc:	4603      	mov	r3, r0
 8003ace:	220c      	movs	r2, #12
 8003ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ad6:	e009      	b.n	8003aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <_sbrk+0x64>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <_sbrk+0x64>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <_sbrk+0x64>)
 8003ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20080000 	.word	0x20080000
 8003af8:	00000400 	.word	0x00000400
 8003afc:	2000bda8 	.word	0x2000bda8
 8003b00:	20017130 	.word	0x20017130

08003b04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <SystemInit+0x20>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <SystemInit+0x20>)
 8003b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f01d f8fc 	bl	8020d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
 8003b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b48:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <MX_TIM1_Init+0xb0>)
 8003b4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003b58:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b72:	2303      	movs	r3, #3
 8003b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003b9e:	f004 fcab 	bl	80084f8 <HAL_TIM_Encoder_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003ba8:	f7ff fc73 	bl	8003492 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bb8:	463b      	mov	r3, r7
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <MX_TIM1_Init+0xac>)
 8003bbe:	f004 ffdd 	bl	8008b7c <HAL_TIMEx_MasterConfigSynchronization>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003bc8:	f7ff fc63 	bl	8003492 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003bcc:	bf00      	nop
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2000bdac 	.word	0x2000bdac
 8003bd8:	40010000 	.word	0x40010000

08003bdc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	; 0x30
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003be2:	f107 030c 	add.w	r3, r7, #12
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f01d f8a2 	bl	8020d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003bfc:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <MX_TIM8_Init+0xb0>)
 8003bfe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003c00:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c26:	2303      	movs	r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c42:	2300      	movs	r3, #0
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c52:	f004 fc51 	bl	80084f8 <HAL_TIM_Encoder_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003c5c:	f7ff fc19 	bl	8003492 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4805      	ldr	r0, [pc, #20]	; (8003c88 <MX_TIM8_Init+0xac>)
 8003c72:	f004 ff83 	bl	8008b7c <HAL_TIMEx_MasterConfigSynchronization>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003c7c:	f7ff fc09 	bl	8003492 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003c80:	bf00      	nop
 8003c82:	3730      	adds	r7, #48	; 0x30
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	2000bdf8 	.word	0x2000bdf8
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	; 0x30
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 031c 	add.w	r3, r7, #28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d129      	bne.n	8003d06 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cb2:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003cd0:	f043 0310 	orr.w	r3, r3, #16
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003ce2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	481c      	ldr	r0, [pc, #112]	; (8003d70 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d00:	f001 fd0a 	bl	8005718 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003d04:	e02c      	b.n	8003d60 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(tim_encoderHandle->Instance==TIM8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d127      	bne.n	8003d60 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	6313      	str	r3, [r2, #48]	; 0x30
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d40:	23c0      	movs	r3, #192	; 0xc0
 8003d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d50:	2303      	movs	r3, #3
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d54:	f107 031c 	add.w	r3, r7, #28
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4807      	ldr	r0, [pc, #28]	; (8003d78 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d5c:	f001 fcdc 	bl	8005718 <HAL_GPIO_Init>
}
 8003d60:	bf00      	nop
 8003d62:	3730      	adds	r7, #48	; 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010400 	.word	0x40010400
 8003d78:	40020800 	.word	0x40020800

08003d7c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <MX_USART3_UART_Init+0x5c>)
 8003d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <MX_USART3_UART_Init+0x58>)
 8003dc0:	f004 ff88 	bl	8008cd4 <HAL_UART_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003dca:	f7ff fb62 	bl	8003492 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000be44 	.word	0x2000be44
 8003dd8:	40004800 	.word	0x40004800

08003ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b0ae      	sub	sp, #184	; 0xb8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	2290      	movs	r2, #144	; 0x90
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f01c ff99 	bl	8020d34 <memset>
  if(uartHandle->Instance==USART3)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <HAL_UART_MspInit+0x184>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f040 80a4 	bne.w	8003f56 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003e14:	2300      	movs	r3, #0
 8003e16:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 fe69 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003e28:	f7ff fb33 	bl	8003492 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e2c:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <HAL_UART_MspInit+0x188>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	4a4c      	ldr	r2, [pc, #304]	; (8003f64 <HAL_UART_MspInit+0x188>)
 8003e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e36:	6413      	str	r3, [r2, #64]	; 0x40
 8003e38:	4b4a      	ldr	r3, [pc, #296]	; (8003f64 <HAL_UART_MspInit+0x188>)
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e44:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_UART_MspInit+0x188>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	4a46      	ldr	r2, [pc, #280]	; (8003f64 <HAL_UART_MspInit+0x188>)
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e50:	4b44      	ldr	r3, [pc, #272]	; (8003f64 <HAL_UART_MspInit+0x188>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e70:	2303      	movs	r3, #3
 8003e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e76:	2307      	movs	r3, #7
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4839      	ldr	r0, [pc, #228]	; (8003f68 <HAL_UART_MspInit+0x18c>)
 8003e84:	f001 fc48 	bl	8005718 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003e88:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003e8a:	4a39      	ldr	r2, [pc, #228]	; (8003f70 <HAL_UART_MspInit+0x194>)
 8003e8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e94:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eaa:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ebc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003ec0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ec4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ecc:	4827      	ldr	r0, [pc, #156]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003ece:	f001 f80d 	bl	8004eec <HAL_DMA_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8003ed8:	f7ff fadb 	bl	8003492 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003ee0:	675a      	str	r2, [r3, #116]	; 0x74
 8003ee2:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <HAL_UART_MspInit+0x190>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_UART_MspInit+0x19c>)
 8003eec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003ef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003ef8:	2240      	movs	r2, #64	; 0x40
 8003efa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f22:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003f2a:	4812      	ldr	r0, [pc, #72]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f2c:	f000 ffde 	bl	8004eec <HAL_DMA_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003f36:	f7ff faac 	bl	8003492 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f3e:	671a      	str	r2, [r3, #112]	; 0x70
 8003f40:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <HAL_UART_MspInit+0x198>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2105      	movs	r1, #5
 8003f4a:	2027      	movs	r0, #39	; 0x27
 8003f4c:	f000 ffa4 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f50:	2027      	movs	r0, #39	; 0x27
 8003f52:	f000 ffbd 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003f56:	bf00      	nop
 8003f58:	37b8      	adds	r7, #184	; 0xb8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40004800 	.word	0x40004800
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40020c00 	.word	0x40020c00
 8003f6c:	2000becc 	.word	0x2000becc
 8003f70:	40026028 	.word	0x40026028
 8003f74:	2000bf2c 	.word	0x2000bf2c
 8003f78:	40026058 	.word	0x40026058

08003f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f80:	480d      	ldr	r0, [pc, #52]	; (8003fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f82:	490e      	ldr	r1, [pc, #56]	; (8003fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f84:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f88:	e002      	b.n	8003f90 <LoopCopyDataInit>

08003f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f8e:	3304      	adds	r3, #4

08003f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f94:	d3f9      	bcc.n	8003f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f96:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f98:	4c0b      	ldr	r4, [pc, #44]	; (8003fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f9c:	e001      	b.n	8003fa2 <LoopFillZerobss>

08003f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fa0:	3204      	adds	r2, #4

08003fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fa4:	d3fb      	bcc.n	8003f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fa6:	f7ff fdad 	bl	8003b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003faa:	f01c ff61 	bl	8020e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fae:	f7ff f9d7 	bl	8003360 <main>
  bx  lr    
 8003fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fbc:	20000b0c 	.word	0x20000b0c
  ldr r2, =_sidata
 8003fc0:	08025ee0 	.word	0x08025ee0
  ldr r2, =_sbss
 8003fc4:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 8003fc8:	20017130 	.word	0x20017130

08003fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fcc:	e7fe      	b.n	8003fcc <ADC_IRQHandler>

08003fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd2:	2003      	movs	r0, #3
 8003fd4:	f000 ff55 	bl	8004e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fd8:	200f      	movs	r0, #15
 8003fda:	f7ff fbed 	bl	80037b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fde:	f7ff fbc3 	bl	8003768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_IncTick+0x20>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_IncTick+0x24>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_IncTick+0x24>)
 8003ffa:	6013      	str	r3, [r2, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c
 800400c:	2000bf8c 	.word	0x2000bf8c

08004010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return uwTick;
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <HAL_GetTick+0x14>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000bf8c 	.word	0x2000bf8c

08004028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004030:	f7ff ffee 	bl	8004010 <HAL_GetTick>
 8004034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004040:	d005      	beq.n	800404e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004042:	4b0a      	ldr	r3, [pc, #40]	; (800406c <HAL_Delay+0x44>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800404e:	bf00      	nop
 8004050:	f7ff ffde 	bl	8004010 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	429a      	cmp	r2, r3
 800405e:	d8f7      	bhi.n	8004050 <HAL_Delay+0x28>
  {
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	2000000c 	.word	0x2000000c

08004070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0ed      	b.n	800425e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fdb6 	bl	8001c00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a4:	f7ff ffb4 	bl	8004010 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040aa:	e012      	b.n	80040d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040ac:	f7ff ffb0 	bl	8004010 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b0a      	cmp	r3, #10
 80040b8:	d90b      	bls.n	80040d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2205      	movs	r2, #5
 80040ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0c5      	b.n	800425e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0e5      	beq.n	80040ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0202 	bic.w	r2, r2, #2
 80040ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040f0:	f7ff ff8e 	bl	8004010 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040f6:	e012      	b.n	800411e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040f8:	f7ff ff8a 	bl	8004010 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b0a      	cmp	r3, #10
 8004104:	d90b      	bls.n	800411e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2205      	movs	r2, #5
 8004116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e09f      	b.n	800425e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7e1b      	ldrb	r3, [r3, #24]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d108      	bne.n	8004146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e007      	b.n	8004156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7e5b      	ldrb	r3, [r3, #25]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d108      	bne.n	8004170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e007      	b.n	8004180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7e9b      	ldrb	r3, [r3, #26]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d108      	bne.n	800419a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0220 	orr.w	r2, r2, #32
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e007      	b.n	80041aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0220 	bic.w	r2, r2, #32
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7edb      	ldrb	r3, [r3, #27]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0210 	bic.w	r2, r2, #16
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e007      	b.n	80041d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0210 	orr.w	r2, r2, #16
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	7f1b      	ldrb	r3, [r3, #28]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d108      	bne.n	80041ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0208 	orr.w	r2, r2, #8
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e007      	b.n	80041fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0208 	bic.w	r2, r2, #8
 80041fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7f5b      	ldrb	r3, [r3, #29]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d108      	bne.n	8004218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0204 	orr.w	r2, r2, #4
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e007      	b.n	8004228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	ea42 0103 	orr.w	r1, r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	1e5a      	subs	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d003      	beq.n	800428e <HAL_CAN_ConfigFilter+0x26>
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b02      	cmp	r3, #2
 800428a:	f040 80c7 	bne.w	800441c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a69      	ldr	r2, [pc, #420]	; (8004438 <HAL_CAN_ConfigFilter+0x1d0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d001      	beq.n	800429c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_CAN_ConfigFilter+0x1d4>)
 800429a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042a2:	f043 0201 	orr.w	r2, r3, #1
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4a63      	ldr	r2, [pc, #396]	; (800443c <HAL_CAN_ConfigFilter+0x1d4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d111      	bne.n	80042d8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	2201      	movs	r2, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d123      	bne.n	800434a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	401a      	ands	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004324:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3248      	adds	r2, #72	; 0x48
 800432a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800433e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004340:	6979      	ldr	r1, [r7, #20]
 8004342:	3348      	adds	r3, #72	; 0x48
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d122      	bne.n	8004398 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	431a      	orrs	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004372:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3248      	adds	r2, #72	; 0x48
 8004378:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800438c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	3348      	adds	r3, #72	; 0x48
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043b2:	e007      	b.n	80043c4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	431a      	orrs	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043de:	e007      	b.n	80043f0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	431a      	orrs	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e006      	b.n	800442a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40003400 	.word	0x40003400
 800443c:	40006400 	.word	0x40006400

08004440 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d12e      	bne.n	80044b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800446c:	f7ff fdd0 	bl	8004010 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004472:	e012      	b.n	800449a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004474:	f7ff fdcc 	bl	8004010 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b0a      	cmp	r3, #10
 8004480:	d90b      	bls.n	800449a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2205      	movs	r2, #5
 8004492:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e012      	b.n	80044c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e006      	b.n	80044c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d003      	beq.n	80044f4 <HAL_CAN_AddTxMessage+0x2c>
 80044ec:	7ffb      	ldrb	r3, [r7, #31]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	f040 80ad 	bne.w	800464e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8095 	beq.w	800463e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	0e1b      	lsrs	r3, r3, #24
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800451e:	2201      	movs	r2, #1
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	409a      	lsls	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	6809      	ldr	r1, [r1, #0]
 800453e:	431a      	orrs	r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3318      	adds	r3, #24
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	440b      	add	r3, r1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e00f      	b.n	800456c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004556:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004560:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3318      	adds	r3, #24
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	440b      	add	r3, r1
 800456a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3318      	adds	r3, #24
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	440b      	add	r3, r1
 800457c:	3304      	adds	r3, #4
 800457e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	7d1b      	ldrb	r3, [r3, #20]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d111      	bne.n	80045ac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3318      	adds	r3, #24
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	3304      	adds	r3, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	6811      	ldr	r1, [r2, #0]
 800459c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3318      	adds	r3, #24
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	440b      	add	r3, r1
 80045a8:	3304      	adds	r3, #4
 80045aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3307      	adds	r3, #7
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	061a      	lsls	r2, r3, #24
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3306      	adds	r3, #6
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3305      	adds	r3, #5
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4313      	orrs	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	3204      	adds	r2, #4
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	4610      	mov	r0, r2
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	6811      	ldr	r1, [r2, #0]
 80045d4:	ea43 0200 	orr.w	r2, r3, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	440b      	add	r3, r1
 80045de:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80045e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3303      	adds	r3, #3
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	061a      	lsls	r2, r3, #24
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3302      	adds	r3, #2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3301      	adds	r3, #1
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	4313      	orrs	r3, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	4610      	mov	r0, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	ea43 0200 	orr.w	r2, r3, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	440b      	add	r3, r1
 8004614:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004618:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	3318      	adds	r3, #24
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	4413      	add	r3, r2
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	6811      	ldr	r1, [r2, #0]
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3318      	adds	r3, #24
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	440b      	add	r3, r1
 8004638:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e00e      	b.n	800465c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e006      	b.n	800465c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3724      	adds	r7, #36	; 0x24
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800467a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800467c:	7afb      	ldrb	r3, [r7, #11]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d002      	beq.n	8004688 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004682:	7afb      	ldrb	r3, [r7, #11]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d11d      	bne.n	80046c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3301      	adds	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d003      	beq.n	80046f6 <HAL_CAN_GetRxMessage+0x24>
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	f040 80f3 	bne.w	80048dc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10e      	bne.n	800471a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0e7      	b.n	80048ea <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d8      	b.n	80048ea <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	331b      	adds	r3, #27
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	4413      	add	r3, r2
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0204 	and.w	r2, r3, #4
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	331b      	adds	r3, #27
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4413      	add	r3, r2
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0d5b      	lsrs	r3, r3, #21
 8004766:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e00b      	b.n	8004788 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	331b      	adds	r3, #27
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	08db      	lsrs	r3, r3, #3
 8004780:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	331b      	adds	r3, #27
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0202 	and.w	r2, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	331b      	adds	r3, #27
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	4413      	add	r3, r2
 80047aa:	3304      	adds	r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	331b      	adds	r3, #27
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	4413      	add	r3, r2
 80047c2:	3304      	adds	r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	331b      	adds	r3, #27
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4413      	add	r3, r2
 80047da:	3304      	adds	r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4413      	add	r3, r2
 8004806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0a1a      	lsrs	r2, r3, #8
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	4413      	add	r3, r2
 8004820:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	0c1a      	lsrs	r2, r3, #16
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	3302      	adds	r3, #2
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	4413      	add	r3, r2
 800483a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	0e1a      	lsrs	r2, r3, #24
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	3303      	adds	r3, #3
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	4413      	add	r3, r2
 8004854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	3304      	adds	r3, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	4413      	add	r3, r2
 800486c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	0a1a      	lsrs	r2, r3, #8
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	3305      	adds	r3, #5
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	4413      	add	r3, r2
 8004886:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	0c1a      	lsrs	r2, r3, #16
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	3306      	adds	r3, #6
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	4413      	add	r3, r2
 80048a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0e1a      	lsrs	r2, r3, #24
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	3307      	adds	r3, #7
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0220 	orr.w	r2, r2, #32
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e007      	b.n	80048d8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0220 	orr.w	r2, r2, #32
 80048d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e006      	b.n	80048ea <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004906:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d002      	beq.n	8004914 <HAL_CAN_ActivateNotification+0x1e>
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d109      	bne.n	8004928 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6959      	ldr	r1, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e006      	b.n	8004936 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b08a      	sub	sp, #40	; 0x28
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800494a:	2300      	movs	r3, #0
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d07c      	beq.n	8004a82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d023      	beq.n	80049da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2201      	movs	r2, #1
 8004998:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fd fcab 	bl	8002300 <HAL_CAN_TxMailbox0CompleteCallback>
 80049aa:	e016      	b.n	80049da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
 80049be:	e00c      	b.n	80049da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	e002      	b.n	80049da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fd fc9d 	bl	8002314 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d024      	beq.n	8004a2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fd fc95 	bl	8002328 <HAL_CAN_TxMailbox1CompleteCallback>
 80049fe:	e016      	b.n	8004a2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e00c      	b.n	8004a2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	e002      	b.n	8004a2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fd fc87 	bl	800233c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d024      	beq.n	8004a82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fd fc7f 	bl	8002350 <HAL_CAN_TxMailbox2CompleteCallback>
 8004a52:	e016      	b.n	8004a82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e00c      	b.n	8004a82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	e002      	b.n	8004a82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fd fc71 	bl	8002364 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00b      	beq.n	8004ac8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d006      	beq.n	8004ac8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2208      	movs	r2, #8
 8004ac0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8f4 	bl	8004cb0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fd fc49 	bl	8002378 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2210      	movs	r2, #16
 8004b08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d006      	beq.n	8004b2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2208      	movs	r2, #8
 8004b24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8d6 	bl	8004cd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f8bd 	bl	8004cc4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2210      	movs	r2, #16
 8004b64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8c0 	bl	8004cec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d006      	beq.n	8004b8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2208      	movs	r2, #8
 8004b86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f8b9 	bl	8004d00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d07b      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d072      	beq.n	8004c88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d043      	beq.n	8004c88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03e      	beq.n	8004c88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c10:	2b60      	cmp	r3, #96	; 0x60
 8004c12:	d02b      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x32a>
 8004c14:	2b60      	cmp	r3, #96	; 0x60
 8004c16:	d82e      	bhi.n	8004c76 <HAL_CAN_IRQHandler+0x334>
 8004c18:	2b50      	cmp	r3, #80	; 0x50
 8004c1a:	d022      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x320>
 8004c1c:	2b50      	cmp	r3, #80	; 0x50
 8004c1e:	d82a      	bhi.n	8004c76 <HAL_CAN_IRQHandler+0x334>
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d019      	beq.n	8004c58 <HAL_CAN_IRQHandler+0x316>
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d826      	bhi.n	8004c76 <HAL_CAN_IRQHandler+0x334>
 8004c28:	2b30      	cmp	r3, #48	; 0x30
 8004c2a:	d010      	beq.n	8004c4e <HAL_CAN_IRQHandler+0x30c>
 8004c2c:	2b30      	cmp	r3, #48	; 0x30
 8004c2e:	d822      	bhi.n	8004c76 <HAL_CAN_IRQHandler+0x334>
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d002      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x2f8>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d005      	beq.n	8004c44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c38:	e01d      	b.n	8004c76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c42:	e019      	b.n	8004c78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f043 0310 	orr.w	r3, r3, #16
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c4c:	e014      	b.n	8004c78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	f043 0320 	orr.w	r3, r3, #32
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c56:	e00f      	b.n	8004c78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c60:	e00a      	b.n	8004c78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c6a:	e005      	b.n	8004c78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c74:	e000      	b.n	8004c78 <HAL_CAN_IRQHandler+0x336>
            break;
 8004c76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f836 	bl	8004d14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3728      	adds	r7, #40	; 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <__NVIC_SetPriorityGrouping+0x40>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d44:	4013      	ands	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <__NVIC_SetPriorityGrouping+0x44>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <__NVIC_SetPriorityGrouping+0x40>)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	60d3      	str	r3, [r2, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000ed00 	.word	0xe000ed00
 8004d6c:	05fa0000 	.word	0x05fa0000

08004d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__NVIC_GetPriorityGrouping+0x18>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0307 	and.w	r3, r3, #7
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db0b      	blt.n	8004db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4907      	ldr	r1, [pc, #28]	; (8004dc4 <__NVIC_EnableIRQ+0x38>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2001      	movs	r0, #1
 8004dae:	fa00 f202 	lsl.w	r2, r0, r2
 8004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	490c      	ldr	r1, [pc, #48]	; (8004e14 <__NVIC_SetPriority+0x4c>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	440b      	add	r3, r1
 8004dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df0:	e00a      	b.n	8004e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4908      	ldr	r1, [pc, #32]	; (8004e18 <__NVIC_SetPriority+0x50>)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	761a      	strb	r2, [r3, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e100 	.word	0xe000e100
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf28      	it	cs
 8004e3a:	2304      	movcs	r3, #4
 8004e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d902      	bls.n	8004e4c <NVIC_EncodePriority+0x30>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3b03      	subs	r3, #3
 8004e4a:	e000      	b.n	8004e4e <NVIC_EncodePriority+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	4313      	orrs	r3, r2
         );
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	; 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff4c 	bl	8004d28 <__NVIC_SetPriorityGrouping>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eaa:	f7ff ff61 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8004eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7ff ffb1 	bl	8004e1c <NVIC_EncodePriority>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff ff80 	bl	8004dc8 <__NVIC_SetPriority>
}
 8004ec8:	bf00      	nop
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff ff54 	bl	8004d8c <__NVIC_EnableIRQ>
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ef8:	f7ff f88a 	bl	8004010 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e099      	b.n	800503c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f28:	e00f      	b.n	8004f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f2a:	f7ff f871 	bl	8004010 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d908      	bls.n	8004f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2203      	movs	r2, #3
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e078      	b.n	800503c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e8      	bne.n	8004f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4b38      	ldr	r3, [pc, #224]	; (8005044 <HAL_DMA_Init+0x158>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d107      	bne.n	8004fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	4313      	orrs	r3, r2
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d117      	bne.n	800500e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fb15 	bl	8005620 <DMA_CheckFifoParam>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2240      	movs	r2, #64	; 0x40
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800500a:	2301      	movs	r3, #1
 800500c:	e016      	b.n	800503c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 facc 	bl	80055b4 <DMA_CalcBaseAndBitshift>
 800501c:	4603      	mov	r3, r0
 800501e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	223f      	movs	r2, #63	; 0x3f
 8005026:	409a      	lsls	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	e010803f 	.word	0xe010803f

08005048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_DMA_Start_IT+0x26>
 800506a:	2302      	movs	r3, #2
 800506c:	e048      	b.n	8005100 <HAL_DMA_Start_IT+0xb8>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d137      	bne.n	80050f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fa5e 	bl	8005558 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	223f      	movs	r2, #63	; 0x3f
 80050a2:	409a      	lsls	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0216 	orr.w	r2, r2, #22
 80050b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0208 	orr.w	r2, r2, #8
 80050de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e005      	b.n	80050fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005116:	f7fe ff7b 	bl	8004010 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d008      	beq.n	800513a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e052      	b.n	80051e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0216 	bic.w	r2, r2, #22
 8005148:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005158:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <HAL_DMA_Abort+0x62>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0208 	bic.w	r2, r2, #8
 8005178:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800518a:	e013      	b.n	80051b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800518c:	f7fe ff40 	bl	8004010 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b05      	cmp	r3, #5
 8005198:	d90c      	bls.n	80051b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2203      	movs	r2, #3
 80051a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e015      	b.n	80051e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e4      	bne.n	800518c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	223f      	movs	r2, #63	; 0x3f
 80051c8:	409a      	lsls	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d004      	beq.n	8005206 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e00c      	b.n	8005220 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2205      	movs	r2, #5
 800520a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005238:	4b8e      	ldr	r3, [pc, #568]	; (8005474 <HAL_DMA_IRQHandler+0x248>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a8e      	ldr	r2, [pc, #568]	; (8005478 <HAL_DMA_IRQHandler+0x24c>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	0a9b      	lsrs	r3, r3, #10
 8005244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	2208      	movs	r2, #8
 8005258:	409a      	lsls	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01a      	beq.n	8005298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d013      	beq.n	8005298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0204 	bic.w	r2, r2, #4
 800527e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	2208      	movs	r2, #8
 8005286:	409a      	lsls	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	2201      	movs	r2, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d2:	2204      	movs	r2, #4
 80052d4:	409a      	lsls	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d012      	beq.n	8005304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	2204      	movs	r2, #4
 80052f2:	409a      	lsls	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	f043 0204 	orr.w	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	2210      	movs	r2, #16
 800530a:	409a      	lsls	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d043      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d03c      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005326:	2210      	movs	r2, #16
 8005328:	409a      	lsls	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d018      	beq.n	800536e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d024      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
 800535a:	e01f      	b.n	800539c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01b      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	e016      	b.n	800539c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0208 	bic.w	r2, r2, #8
 800538a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	2220      	movs	r2, #32
 80053a2:	409a      	lsls	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 808f 	beq.w	80054cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8087 	beq.w	80054cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	2220      	movs	r2, #32
 80053c4:	409a      	lsls	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d136      	bne.n	8005444 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0216 	bic.w	r2, r2, #22
 80053e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_DMA_IRQHandler+0x1da>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0208 	bic.w	r2, r2, #8
 8005414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	223f      	movs	r2, #63	; 0x3f
 800541c:	409a      	lsls	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	2b00      	cmp	r3, #0
 8005438:	d07e      	beq.n	8005538 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
        }
        return;
 8005442:	e079      	b.n	8005538 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01d      	beq.n	800548e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10d      	bne.n	800547c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005464:	2b00      	cmp	r3, #0
 8005466:	d031      	beq.n	80054cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e02c      	b.n	80054cc <HAL_DMA_IRQHandler+0x2a0>
 8005472:	bf00      	nop
 8005474:	20000004 	.word	0x20000004
 8005478:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d023      	beq.n	80054cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
 800548c:	e01e      	b.n	80054cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10f      	bne.n	80054bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0210 	bic.w	r2, r2, #16
 80054aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d032      	beq.n	800553a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d022      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2205      	movs	r2, #5
 80054e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	429a      	cmp	r2, r3
 8005502:	d307      	bcc.n	8005514 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f2      	bne.n	80054f8 <HAL_DMA_IRQHandler+0x2cc>
 8005512:	e000      	b.n	8005516 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005514:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
 8005536:	e000      	b.n	800553a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005538:	bf00      	nop
    }
  }
}
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005574:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d108      	bne.n	8005598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005596:	e007      	b.n	80055a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	3b10      	subs	r3, #16
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <DMA_CalcBaseAndBitshift+0x60>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <DMA_CalcBaseAndBitshift+0x64>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d908      	bls.n	80055f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <DMA_CalcBaseAndBitshift+0x68>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	1d1a      	adds	r2, r3, #4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	659a      	str	r2, [r3, #88]	; 0x58
 80055f2:	e006      	b.n	8005602 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <DMA_CalcBaseAndBitshift+0x68>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	aaaaaaab 	.word	0xaaaaaaab
 8005618:	08024548 	.word	0x08024548
 800561c:	fffffc00 	.word	0xfffffc00

08005620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11f      	bne.n	800567a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d856      	bhi.n	80056ee <DMA_CheckFifoParam+0xce>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <DMA_CheckFifoParam+0x28>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	08005659 	.word	0x08005659
 800564c:	0800566b 	.word	0x0800566b
 8005650:	08005659 	.word	0x08005659
 8005654:	080056ef 	.word	0x080056ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d046      	beq.n	80056f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005668:	e043      	b.n	80056f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005672:	d140      	bne.n	80056f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005678:	e03d      	b.n	80056f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005682:	d121      	bne.n	80056c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d837      	bhi.n	80056fa <DMA_CheckFifoParam+0xda>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <DMA_CheckFifoParam+0x70>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056a7 	.word	0x080056a7
 8005698:	080056a1 	.word	0x080056a1
 800569c:	080056b9 	.word	0x080056b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
      break;
 80056a4:	e030      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d025      	beq.n	80056fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b6:	e022      	b.n	80056fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056c0:	d11f      	bne.n	8005702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056c6:	e01c      	b.n	8005702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d903      	bls.n	80056d6 <DMA_CheckFifoParam+0xb6>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d003      	beq.n	80056dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056d4:	e018      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e015      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e00b      	b.n	8005706 <DMA_CheckFifoParam+0xe6>
      break;
 80056ee:	bf00      	nop
 80056f0:	e00a      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      break;
 80056f2:	bf00      	nop
 80056f4:	e008      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      break;
 80056f6:	bf00      	nop
 80056f8:	e006      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      break;   
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <DMA_CheckFifoParam+0xe8>
      break;
 8005706:	bf00      	nop
    }
  } 
  
  return status; 
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	e175      	b.n	8005a24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005738:	2201      	movs	r2, #1
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4013      	ands	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	429a      	cmp	r2, r3
 8005752:	f040 8164 	bne.w	8005a1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d005      	beq.n	800576e <HAL_GPIO_Init+0x56>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d130      	bne.n	80057d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	2203      	movs	r2, #3
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057a4:	2201      	movs	r2, #1
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 0201 	and.w	r2, r3, #1
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d017      	beq.n	800580c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	2203      	movs	r2, #3
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d123      	bne.n	8005860 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	08da      	lsrs	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3208      	adds	r2, #8
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	220f      	movs	r2, #15
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4313      	orrs	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	08da      	lsrs	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3208      	adds	r2, #8
 800585a:	69b9      	ldr	r1, [r7, #24]
 800585c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	2203      	movs	r2, #3
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 0203 	and.w	r2, r3, #3
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80be 	beq.w	8005a1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a2:	4b66      	ldr	r3, [pc, #408]	; (8005a3c <HAL_GPIO_Init+0x324>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	4a65      	ldr	r2, [pc, #404]	; (8005a3c <HAL_GPIO_Init+0x324>)
 80058a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ac:	6453      	str	r3, [r2, #68]	; 0x44
 80058ae:	4b63      	ldr	r3, [pc, #396]	; (8005a3c <HAL_GPIO_Init+0x324>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80058ba:	4a61      	ldr	r2, [pc, #388]	; (8005a40 <HAL_GPIO_Init+0x328>)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	3302      	adds	r3, #2
 80058c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	220f      	movs	r2, #15
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <HAL_GPIO_Init+0x32c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d037      	beq.n	8005956 <HAL_GPIO_Init+0x23e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a57      	ldr	r2, [pc, #348]	; (8005a48 <HAL_GPIO_Init+0x330>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d031      	beq.n	8005952 <HAL_GPIO_Init+0x23a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a56      	ldr	r2, [pc, #344]	; (8005a4c <HAL_GPIO_Init+0x334>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02b      	beq.n	800594e <HAL_GPIO_Init+0x236>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a55      	ldr	r2, [pc, #340]	; (8005a50 <HAL_GPIO_Init+0x338>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d025      	beq.n	800594a <HAL_GPIO_Init+0x232>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a54      	ldr	r2, [pc, #336]	; (8005a54 <HAL_GPIO_Init+0x33c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01f      	beq.n	8005946 <HAL_GPIO_Init+0x22e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a53      	ldr	r2, [pc, #332]	; (8005a58 <HAL_GPIO_Init+0x340>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d019      	beq.n	8005942 <HAL_GPIO_Init+0x22a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a52      	ldr	r2, [pc, #328]	; (8005a5c <HAL_GPIO_Init+0x344>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_GPIO_Init+0x226>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a51      	ldr	r2, [pc, #324]	; (8005a60 <HAL_GPIO_Init+0x348>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00d      	beq.n	800593a <HAL_GPIO_Init+0x222>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a50      	ldr	r2, [pc, #320]	; (8005a64 <HAL_GPIO_Init+0x34c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <HAL_GPIO_Init+0x21e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4f      	ldr	r2, [pc, #316]	; (8005a68 <HAL_GPIO_Init+0x350>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <HAL_GPIO_Init+0x21a>
 800592e:	2309      	movs	r3, #9
 8005930:	e012      	b.n	8005958 <HAL_GPIO_Init+0x240>
 8005932:	230a      	movs	r3, #10
 8005934:	e010      	b.n	8005958 <HAL_GPIO_Init+0x240>
 8005936:	2308      	movs	r3, #8
 8005938:	e00e      	b.n	8005958 <HAL_GPIO_Init+0x240>
 800593a:	2307      	movs	r3, #7
 800593c:	e00c      	b.n	8005958 <HAL_GPIO_Init+0x240>
 800593e:	2306      	movs	r3, #6
 8005940:	e00a      	b.n	8005958 <HAL_GPIO_Init+0x240>
 8005942:	2305      	movs	r3, #5
 8005944:	e008      	b.n	8005958 <HAL_GPIO_Init+0x240>
 8005946:	2304      	movs	r3, #4
 8005948:	e006      	b.n	8005958 <HAL_GPIO_Init+0x240>
 800594a:	2303      	movs	r3, #3
 800594c:	e004      	b.n	8005958 <HAL_GPIO_Init+0x240>
 800594e:	2302      	movs	r3, #2
 8005950:	e002      	b.n	8005958 <HAL_GPIO_Init+0x240>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_GPIO_Init+0x240>
 8005956:	2300      	movs	r3, #0
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	f002 0203 	and.w	r2, r2, #3
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	4093      	lsls	r3, r2
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4313      	orrs	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005968:	4935      	ldr	r1, [pc, #212]	; (8005a40 <HAL_GPIO_Init+0x328>)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	089b      	lsrs	r3, r3, #2
 800596e:	3302      	adds	r3, #2
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005976:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_GPIO_Init+0x354>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800599a:	4a34      	ldr	r2, [pc, #208]	; (8005a6c <HAL_GPIO_Init+0x354>)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059a0:	4b32      	ldr	r3, [pc, #200]	; (8005a6c <HAL_GPIO_Init+0x354>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059c4:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <HAL_GPIO_Init+0x354>)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059ca:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <HAL_GPIO_Init+0x354>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <HAL_GPIO_Init+0x354>)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_GPIO_Init+0x354>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a18:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <HAL_GPIO_Init+0x354>)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3301      	adds	r3, #1
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	f67f ae86 	bls.w	8005738 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	3724      	adds	r7, #36	; 0x24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	40013800 	.word	0x40013800
 8005a44:	40020000 	.word	0x40020000
 8005a48:	40020400 	.word	0x40020400
 8005a4c:	40020800 	.word	0x40020800
 8005a50:	40020c00 	.word	0x40020c00
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40021400 	.word	0x40021400
 8005a5c:	40021800 	.word	0x40021800
 8005a60:	40021c00 	.word	0x40021c00
 8005a64:	40022000 	.word	0x40022000
 8005a68:	40022400 	.word	0x40022400
 8005a6c:	40013c00 	.word	0x40013c00

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ab4:	887a      	ldrh	r2, [r7, #2]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	041a      	lsls	r2, r3, #16
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	43d9      	mvns	r1, r3
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	400b      	ands	r3, r1
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	619a      	str	r2, [r3, #24]
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad8:	b08f      	sub	sp, #60	; 0x3c
 8005ada:	af0a      	add	r7, sp, #40	; 0x28
 8005adc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e116      	b.n	8005d16 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f00b f8ec 	bl	8010ce0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f004 fe03 	bl	800a732 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	687e      	ldr	r6, [r7, #4]
 8005b34:	466d      	mov	r5, sp
 8005b36:	f106 0410 	add.w	r4, r6, #16
 8005b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b46:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b4a:	1d33      	adds	r3, r6, #4
 8005b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b4e:	6838      	ldr	r0, [r7, #0]
 8005b50:	f004 fce4 	bl	800a51c <USB_CoreInit>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0d7      	b.n	8005d16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f004 fdf1 	bl	800a754 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
 8005b76:	e04a      	b.n	8005c0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b78:	7bfa      	ldrb	r2, [r7, #15]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	333d      	adds	r3, #61	; 0x3d
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	333c      	adds	r3, #60	; 0x3c
 8005b9c:	7bfa      	ldrb	r2, [r7, #15]
 8005b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ba0:	7bfa      	ldrb	r2, [r7, #15]
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	b298      	uxth	r0, r3
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	3344      	adds	r3, #68	; 0x44
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3340      	adds	r3, #64	; 0x40
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3348      	adds	r3, #72	; 0x48
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005be0:	7bfa      	ldrb	r2, [r7, #15]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	334c      	adds	r3, #76	; 0x4c
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bf4:	7bfa      	ldrb	r2, [r7, #15]
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	3354      	adds	r3, #84	; 0x54
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3af      	bcc.n	8005b78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e044      	b.n	8005ca8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c1e:	7bfa      	ldrb	r2, [r7, #15]
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c34:	7bfa      	ldrb	r2, [r7, #15]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005c46:	7bfa      	ldrb	r2, [r7, #15]
 8005c48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c4a:	7bfa      	ldrb	r2, [r7, #15]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c60:	7bfa      	ldrb	r2, [r7, #15]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c8c:	7bfa      	ldrb	r2, [r7, #15]
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3b5      	bcc.n	8005c1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	687e      	ldr	r6, [r7, #4]
 8005cba:	466d      	mov	r5, sp
 8005cbc:	f106 0410 	add.w	r4, r6, #16
 8005cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ccc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cd0:	1d33      	adds	r3, r6, #4
 8005cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cd4:	6838      	ldr	r0, [r7, #0]
 8005cd6:	f004 fd89 	bl	800a7ec <USB_DevInit>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e014      	b.n	8005d16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d102      	bne.n	8005d0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 f97b 	bl	8007000 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f005 fed7 	bl	800bac2 <USB_DevDisconnect>

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_PCD_Start+0x16>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e012      	b.n	8005d5a <HAL_PCD_Start+0x3c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f004 fce5 	bl	800a710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f005 fe98 	bl	800ba80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d62:	b590      	push	{r4, r7, lr}
 8005d64:	b08d      	sub	sp, #52	; 0x34
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f005 ff56 	bl	800bc2a <USB_GetMode>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 84b7 	bne.w	80066f4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f005 feba 	bl	800bb04 <USB_ReadInterrupts>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 84ad 	beq.w	80066f2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f005 fea7 	bl	800bb04 <USB_ReadInterrupts>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d107      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f002 0202 	and.w	r2, r2, #2
 8005dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f005 fe95 	bl	800bb04 <USB_ReadInterrupts>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d161      	bne.n	8005ea8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0210 	bic.w	r2, r2, #16
 8005df2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f003 020f 	and.w	r2, r3, #15
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3304      	adds	r3, #4
 8005e12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	0c5b      	lsrs	r3, r3, #17
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d124      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d035      	beq.n	8005e98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6a38      	ldr	r0, [r7, #32]
 8005e40:	f005 fccc 	bl	800b7dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e50:	441a      	add	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e62:	441a      	add	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
 8005e68:	e016      	b.n	8005e98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	0c5b      	lsrs	r3, r3, #17
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2b06      	cmp	r3, #6
 8005e74:	d110      	bne.n	8005e98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6a38      	ldr	r0, [r7, #32]
 8005e82:	f005 fcab 	bl	800b7dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e92:	441a      	add	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0210 	orr.w	r2, r2, #16
 8005ea6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f005 fe29 	bl	800bb04 <USB_ReadInterrupts>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ebc:	f040 80a7 	bne.w	800600e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f005 fe2e 	bl	800bb2a <USB_ReadDevAllOutEpInterrupt>
 8005ece:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ed0:	e099      	b.n	8006006 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 808e 	beq.w	8005ffa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f005 fe52 	bl	800bb92 <USB_ReadDevOutEPInterrupt>
 8005eee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00c      	beq.n	8005f14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	461a      	mov	r2, r3
 8005f08:	2301      	movs	r3, #1
 8005f0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fef0 	bl	8006cf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 ffc6 	bl	8006ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2310      	movs	r3, #16
 8005f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d030      	beq.n	8005fc0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d109      	bne.n	8005f7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	3304      	adds	r3, #4
 8005f92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d108      	bne.n	8005fae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f00a ffbd 	bl	8010f28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	461a      	mov	r2, r3
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2320      	movs	r3, #32
 8005fda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ff8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	f47f af62 	bne.w	8005ed2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f005 fd76 	bl	800bb04 <USB_ReadInterrupts>
 8006018:	4603      	mov	r3, r0
 800601a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006022:	f040 80db 	bne.w	80061dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f005 fd97 	bl	800bb5e <USB_ReadDevAllInEpInterrupt>
 8006030:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006036:	e0cd      	b.n	80061d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80c2 	beq.w	80061c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f005 fdbd 	bl	800bbce <USB_ReadDevInEPInterrupt>
 8006054:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d057      	beq.n	8006110 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	2201      	movs	r2, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	43db      	mvns	r3, r3
 800607a:	69f9      	ldr	r1, [r7, #28]
 800607c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006080:	4013      	ands	r3, r2
 8006082:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	461a      	mov	r2, r3
 8006092:	2301      	movs	r3, #1
 8006094:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d132      	bne.n	8006104 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	334c      	adds	r3, #76	; 0x4c
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4403      	add	r3, r0
 80060be:	3348      	adds	r3, #72	; 0x48
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4419      	add	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4403      	add	r3, r0
 80060d2:	334c      	adds	r3, #76	; 0x4c
 80060d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d113      	bne.n	8006104 <HAL_PCD_IRQHandler+0x3a2>
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e0:	4613      	mov	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	3354      	adds	r3, #84	; 0x54
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060fc:	461a      	mov	r2, r3
 80060fe:	2101      	movs	r1, #1
 8006100:	f005 fdc6 	bl	800bc90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f00a fe87 	bl	8010e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	461a      	mov	r2, r3
 8006128:	2308      	movs	r3, #8
 800612a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	2310      	movs	r3, #16
 8006146:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	461a      	mov	r2, r3
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d023      	beq.n	80061b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800616e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006170:	6a38      	ldr	r0, [r7, #32]
 8006172:	f004 fc99 	bl	800aaa8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	3338      	adds	r3, #56	; 0x38
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	3304      	adds	r3, #4
 8006188:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	78db      	ldrb	r3, [r3, #3]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d108      	bne.n	80061a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f00a fed4 	bl	8010f4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b0:	461a      	mov	r2, r3
 80061b2:	2302      	movs	r3, #2
 80061b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80061c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fd08 	bl	8006bd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	3301      	adds	r3, #1
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f47f af2e 	bne.w	8006038 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f005 fc8f 	bl	800bb04 <USB_ReadInterrupts>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f0:	d122      	bne.n	8006238 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800620c:	2b01      	cmp	r3, #1
 800620e:	d108      	bne.n	8006222 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006218:	2100      	movs	r1, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f00b f84e 	bl	80112bc <HAL_PCDEx_LPM_Callback>
 8006220:	e002      	b.n	8006228 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f00a fe72 	bl	8010f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f005 fc61 	bl	800bb04 <USB_ReadInterrupts>
 8006242:	4603      	mov	r3, r0
 8006244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624c:	d112      	bne.n	8006274 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d102      	bne.n	8006264 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f00a fe2e 	bl	8010ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695a      	ldr	r2, [r3, #20]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006272:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f005 fc43 	bl	800bb04 <USB_ReadInterrupts>
 800627e:	4603      	mov	r3, r0
 8006280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006288:	d121      	bne.n	80062ce <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695a      	ldr	r2, [r3, #20]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006298:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d111      	bne.n	80062c8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80062be:	2101      	movs	r1, #1
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f00a fffb 	bl	80112bc <HAL_PCDEx_LPM_Callback>
 80062c6:	e002      	b.n	80062ce <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f00a fdf9 	bl	8010ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f005 fc16 	bl	800bb04 <USB_ReadInterrupts>
 80062d8:	4603      	mov	r3, r0
 80062da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	f040 80b7 	bne.w	8006454 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2110      	movs	r1, #16
 8006300:	4618      	mov	r0, r3
 8006302:	f004 fbd1 	bl	800aaa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006306:	2300      	movs	r3, #0
 8006308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800630a:	e046      	b.n	800639a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	461a      	mov	r2, r3
 800631a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800631e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800633e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006352:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006372:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006392:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	3301      	adds	r3, #1
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d3b3      	bcc.n	800630c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80063b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d016      	beq.n	80063ee <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d0:	f043 030b 	orr.w	r3, r3, #11
 80063d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e6:	f043 030b 	orr.w	r3, r3, #11
 80063ea:	6453      	str	r3, [r2, #68]	; 0x44
 80063ec:	e015      	b.n	800641a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	695a      	ldr	r2, [r3, #20]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	4619      	mov	r1, r3
 80063fe:	f242 032b 	movw	r3, #8235	; 0x202b
 8006402:	4313      	orrs	r3, r2
 8006404:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006414:	f043 030b 	orr.w	r3, r3, #11
 8006418:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006428:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800642c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800643e:	461a      	mov	r2, r3
 8006440:	f005 fc26 	bl	800bc90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f005 fb53 	bl	800bb04 <USB_ReadInterrupts>
 800645e:	4603      	mov	r3, r0
 8006460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006468:	d124      	bne.n	80064b4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f005 fbea 	bl	800bc48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f004 fb92 	bl	800aba2 <USB_GetDevSpeed>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681c      	ldr	r4, [r3, #0]
 800648a:	f001 facd 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 800648e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006494:	b2db      	uxtb	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	4620      	mov	r0, r4
 800649a:	f004 f897 	bl	800a5cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f00a fce5 	bl	8010e6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80064b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f005 fb23 	bl	800bb04 <USB_ReadInterrupts>
 80064be:	4603      	mov	r3, r0
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d10a      	bne.n	80064de <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f00a fcc2 	bl	8010e52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f002 0208 	and.w	r2, r2, #8
 80064dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f005 fb0e 	bl	800bb04 <USB_ReadInterrupts>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d122      	bne.n	8006538 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064fe:	2301      	movs	r3, #1
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	e014      	b.n	800652e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	4613      	mov	r3, r2
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	b2db      	uxtb	r3, r3
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fb27 	bl	8006b76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	3301      	adds	r3, #1
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	429a      	cmp	r2, r3
 8006536:	d3e5      	bcc.n	8006504 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f005 fae1 	bl	800bb04 <USB_ReadInterrupts>
 8006542:	4603      	mov	r3, r0
 8006544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654c:	d13b      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800654e:	2301      	movs	r3, #1
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
 8006552:	e02b      	b.n	80065ac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	3340      	adds	r3, #64	; 0x40
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d115      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800657a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800657c:	2b00      	cmp	r3, #0
 800657e:	da12      	bge.n	80065a6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	333f      	adds	r3, #63	; 0x3f
 8006590:	2201      	movs	r2, #1
 8006592:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800659c:	b2db      	uxtb	r3, r3
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fae8 	bl	8006b76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	3301      	adds	r3, #1
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d3ce      	bcc.n	8006554 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80065c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f005 fa9a 	bl	800bb04 <USB_ReadInterrupts>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065da:	d155      	bne.n	8006688 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065dc:	2301      	movs	r3, #1
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
 80065e0:	e045      	b.n	800666e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d12e      	bne.n	8006668 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800660a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800660c:	2b00      	cmp	r3, #0
 800660e:	da2b      	bge.n	8006668 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800661c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006620:	429a      	cmp	r2, r3
 8006622:	d121      	bne.n	8006668 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006628:	4613      	mov	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006664:	6053      	str	r3, [r2, #4]
            break;
 8006666:	e007      	b.n	8006678 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	3301      	adds	r3, #1
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006674:	429a      	cmp	r2, r3
 8006676:	d3b4      	bcc.n	80065e2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f005 fa39 	bl	800bb04 <USB_ReadInterrupts>
 8006692:	4603      	mov	r3, r0
 8006694:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669c:	d10a      	bne.n	80066b4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f00a fc66 	bl	8010f70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80066b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f005 fa23 	bl	800bb04 <USB_ReadInterrupts>
 80066be:	4603      	mov	r3, r0
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d115      	bne.n	80066f4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f00a fc56 	bl	8010f8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	e000      	b.n	80066f4 <HAL_PCD_IRQHandler+0x992>
      return;
 80066f2:	bf00      	nop
    }
  }
}
 80066f4:	3734      	adds	r7, #52	; 0x34
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_PCD_SetAddress+0x1a>
 8006710:	2302      	movs	r3, #2
 8006712:	e013      	b.n	800673c <HAL_PCD_SetAddress+0x42>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	4611      	mov	r1, r2
 800672c:	4618      	mov	r0, r3
 800672e:	f005 f981 	bl	800ba34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4603      	mov	r3, r0
 8006754:	70fb      	strb	r3, [r7, #3]
 8006756:	460b      	mov	r3, r1
 8006758:	803b      	strh	r3, [r7, #0]
 800675a:	4613      	mov	r3, r2
 800675c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da0f      	bge.n	800678a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	3338      	adds	r3, #56	; 0x38
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	3304      	adds	r3, #4
 8006780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	705a      	strb	r2, [r3, #1]
 8006788:	e00f      	b.n	80067aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	4613      	mov	r3, r2
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80067b6:	883a      	ldrh	r2, [r7, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	78ba      	ldrb	r2, [r7, #2]
 80067c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067d4:	78bb      	ldrb	r3, [r7, #2]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d102      	bne.n	80067e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_PCD_EP_Open+0xaa>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e00e      	b.n	800680c <HAL_PCD_EP_Open+0xc8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f004 f9f5 	bl	800abec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800680a:	7afb      	ldrb	r3, [r7, #11]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006824:	2b00      	cmp	r3, #0
 8006826:	da0f      	bge.n	8006848 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	f003 020f 	and.w	r2, r3, #15
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	3338      	adds	r3, #56	; 0x38
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4413      	add	r3, r2
 800683c:	3304      	adds	r3, #4
 800683e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	705a      	strb	r2, [r3, #1]
 8006846:	e00f      	b.n	8006868 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	4613      	mov	r3, r2
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	3304      	adds	r3, #4
 8006860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_PCD_EP_Close+0x6e>
 800687e:	2302      	movs	r3, #2
 8006880:	e00e      	b.n	80068a0 <HAL_PCD_EP_Close+0x8c>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	4618      	mov	r0, r3
 8006892:	f004 fa33 	bl	800acfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	460b      	mov	r3, r1
 80068b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	f003 020f 	and.w	r2, r3, #15
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	3304      	adds	r3, #4
 80068d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d102      	bne.n	8006904 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	6979      	ldr	r1, [r7, #20]
 800691c:	f004 fd1a 	bl	800b354 <USB_EP0StartXfer>
 8006920:	e008      	b.n	8006934 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	f004 fac0 	bl	800aeb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006960:	681b      	ldr	r3, [r3, #0]
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	460b      	mov	r3, r1
 800697c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	f003 020f 	and.w	r2, r3, #15
 8006984:	4613      	mov	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	3338      	adds	r3, #56	; 0x38
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	3304      	adds	r3, #4
 8006994:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2201      	movs	r2, #1
 80069ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d102      	bne.n	80069c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	6979      	ldr	r1, [r7, #20]
 80069e0:	f004 fcb8 	bl	800b354 <USB_EP0StartXfer>
 80069e4:	e008      	b.n	80069f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	f004 fa5e 	bl	800aeb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d901      	bls.n	8006a20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e050      	b.n	8006ac2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da0f      	bge.n	8006a48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	3338      	adds	r3, #56	; 0x38
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	705a      	strb	r2, [r3, #1]
 8006a46:	e00d      	b.n	8006a64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_PCD_EP_SetStall+0x82>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e01e      	b.n	8006ac2 <HAL_PCD_EP_SetStall+0xc0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f004 fefa 	bl	800b88c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	b2d9      	uxtb	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f005 f8ec 	bl	800bc90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 020f 	and.w	r2, r3, #15
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d901      	bls.n	8006ae8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e042      	b.n	8006b6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da0f      	bge.n	8006b10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	f003 020f 	and.w	r2, r3, #15
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3338      	adds	r3, #56	; 0x38
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	3304      	adds	r3, #4
 8006b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	705a      	strb	r2, [r3, #1]
 8006b0e:	e00f      	b.n	8006b30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	f003 020f 	and.w	r2, r3, #15
 8006b16:	4613      	mov	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	3304      	adds	r3, #4
 8006b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_PCD_EP_ClrStall+0x86>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e00e      	b.n	8006b6e <HAL_PCD_EP_ClrStall+0xa4>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f004 ff02 	bl	800b968 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da0c      	bge.n	8006ba4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 020f 	and.w	r2, r3, #15
 8006b90:	4613      	mov	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	3338      	adds	r3, #56	; 0x38
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e00c      	b.n	8006bbe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	4613      	mov	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4413      	add	r3, r2
 8006bba:	3304      	adds	r3, #4
 8006bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f004 fd21 	bl	800b60c <USB_EPStopXfer>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006bce:	7afb      	ldrb	r3, [r7, #11]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	3338      	adds	r3, #56	; 0x38
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d901      	bls.n	8006c10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e06c      	b.n	8006cea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d902      	bls.n	8006c2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3303      	adds	r3, #3
 8006c30:	089b      	lsrs	r3, r3, #2
 8006c32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c34:	e02b      	b.n	8006c8e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d902      	bls.n	8006c52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	3303      	adds	r3, #3
 8006c56:	089b      	lsrs	r3, r3, #2
 8006c58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6919      	ldr	r1, [r3, #16]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6978      	ldr	r0, [r7, #20]
 8006c72:	f004 fd75 	bl	800b760 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	441a      	add	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	441a      	add	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d809      	bhi.n	8006cb8 <PCD_WriteEmptyTxFifo+0xe0>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1a      	ldr	r2, [r3, #32]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d203      	bcs.n	8006cb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1be      	bne.n	8006c36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d811      	bhi.n	8006ce8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	2201      	movs	r2, #1
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	6939      	ldr	r1, [r7, #16]
 8006ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	333c      	adds	r3, #60	; 0x3c
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d17b      	bne.n	8006e22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	4a61      	ldr	r2, [pc, #388]	; (8006ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	f240 80b9 	bls.w	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80b3 	beq.w	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	461a      	mov	r2, r3
 8006d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d5c:	6093      	str	r3, [r2, #8]
 8006d5e:	e0a7      	b.n	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	461a      	mov	r2, r3
 8006d78:	2320      	movs	r3, #32
 8006d7a:	6093      	str	r3, [r2, #8]
 8006d7c:	e098      	b.n	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f040 8093 	bne.w	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4a4b      	ldr	r2, [pc, #300]	; (8006ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d90f      	bls.n	8006db2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	461a      	mov	r2, r3
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	6093      	str	r3, [r2, #8]
 8006db0:	e07e      	b.n	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	0159      	lsls	r1, r3, #5
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d114      	bne.n	8006e14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2101      	movs	r1, #1
 8006e00:	f004 ff46 	bl	800bc90 <USB_EP0_OutStart>
 8006e04:	e006      	b.n	8006e14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f009 ffe4 	bl	8010de8 <HAL_PCD_DataOutStageCallback>
 8006e20:	e046      	b.n	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	4a26      	ldr	r2, [pc, #152]	; (8006ec0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d124      	bne.n	8006e74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	461a      	mov	r2, r3
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	6093      	str	r3, [r2, #8]
 8006e48:	e032      	b.n	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	2320      	movs	r3, #32
 8006e64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f009 ffbb 	bl	8010de8 <HAL_PCD_DataOutStageCallback>
 8006e72:	e01d      	b.n	8006eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d114      	bne.n	8006ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d108      	bne.n	8006ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	f004 fef6 	bl	800bc90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f009 ff9c 	bl	8010de8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	4f54300a 	.word	0x4f54300a
 8006ec0:	4f54310a 	.word	0x4f54310a

08006ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	333c      	adds	r3, #60	; 0x3c
 8006edc:	3304      	adds	r3, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d90e      	bls.n	8006f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d009      	beq.n	8006f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	461a      	mov	r2, r3
 8006f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f009 ff53 	bl	8010dc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d90c      	bls.n	8006f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d108      	bne.n	8006f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	f004 fea8 	bl	800bc90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	4f54300a 	.word	0x4f54300a

08006f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d107      	bne.n	8006f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f6e:	883b      	ldrh	r3, [r7, #0]
 8006f70:	0419      	lsls	r1, r3, #16
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f7c:	e028      	b.n	8006fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4413      	add	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e00d      	b.n	8006fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	3340      	adds	r3, #64	; 0x40
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	3301      	adds	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	7bfa      	ldrb	r2, [r7, #15]
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d3ec      	bcc.n	8006f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006fb8:	883b      	ldrh	r3, [r7, #0]
 8006fba:	0418      	lsls	r0, r3, #16
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4302      	orrs	r2, r0
 8006fc8:	3340      	adds	r3, #64	; 0x40
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	887a      	ldrh	r2, [r7, #2]
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_PCDEx_ActivateLPM+0x44>)
 8007030:	4313      	orrs	r3, r2
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	10000003 	.word	0x10000003

08007048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a22      	ldr	r2, [pc, #136]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b20      	ldr	r3, [pc, #128]	; (80070e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800706a:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007076:	f7fc ffcb 	bl	8004010 <HAL_GetTick>
 800707a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800707c:	e009      	b.n	8007092 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800707e:	f7fc ffc7 	bl	8004010 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708c:	d901      	bls.n	8007092 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e022      	b.n	80070d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709e:	d1ee      	bne.n	800707e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070a0:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0f      	ldr	r2, [pc, #60]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070ac:	f7fc ffb0 	bl	8004010 <HAL_GetTick>
 80070b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070b2:	e009      	b.n	80070c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070b4:	f7fc ffac 	bl	8004010 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c2:	d901      	bls.n	80070c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e007      	b.n	80070d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d4:	d1ee      	bne.n	80070b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40007000 	.word	0x40007000

080070e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80070f0:	2300      	movs	r3, #0
 80070f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e29b      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8087 	beq.w	800721a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800710c:	4b96      	ldr	r3, [pc, #600]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 030c 	and.w	r3, r3, #12
 8007114:	2b04      	cmp	r3, #4
 8007116:	d00c      	beq.n	8007132 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007118:	4b93      	ldr	r3, [pc, #588]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b08      	cmp	r3, #8
 8007122:	d112      	bne.n	800714a <HAL_RCC_OscConfig+0x62>
 8007124:	4b90      	ldr	r3, [pc, #576]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007130:	d10b      	bne.n	800714a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007132:	4b8d      	ldr	r3, [pc, #564]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d06c      	beq.n	8007218 <HAL_RCC_OscConfig+0x130>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d168      	bne.n	8007218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e275      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007152:	d106      	bne.n	8007162 <HAL_RCC_OscConfig+0x7a>
 8007154:	4b84      	ldr	r3, [pc, #528]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a83      	ldr	r2, [pc, #524]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800715a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e02e      	b.n	80071c0 <HAL_RCC_OscConfig+0xd8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10c      	bne.n	8007184 <HAL_RCC_OscConfig+0x9c>
 800716a:	4b7f      	ldr	r3, [pc, #508]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a7e      	ldr	r2, [pc, #504]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	4b7c      	ldr	r3, [pc, #496]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a7b      	ldr	r2, [pc, #492]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800717c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e01d      	b.n	80071c0 <HAL_RCC_OscConfig+0xd8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0xc0>
 800718e:	4b76      	ldr	r3, [pc, #472]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a75      	ldr	r2, [pc, #468]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	4b73      	ldr	r3, [pc, #460]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a72      	ldr	r2, [pc, #456]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e00b      	b.n	80071c0 <HAL_RCC_OscConfig+0xd8>
 80071a8:	4b6f      	ldr	r3, [pc, #444]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6e      	ldr	r2, [pc, #440]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80071ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	4b6c      	ldr	r3, [pc, #432]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a6b      	ldr	r2, [pc, #428]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80071ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d013      	beq.n	80071f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fc ff22 	bl	8004010 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071d0:	f7fc ff1e 	bl	8004010 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b64      	cmp	r3, #100	; 0x64
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e229      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e2:	4b61      	ldr	r3, [pc, #388]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0xe8>
 80071ee:	e014      	b.n	800721a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f0:	f7fc ff0e 	bl	8004010 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071f8:	f7fc ff0a 	bl	8004010 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b64      	cmp	r3, #100	; 0x64
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e215      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720a:	4b57      	ldr	r3, [pc, #348]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f0      	bne.n	80071f8 <HAL_RCC_OscConfig+0x110>
 8007216:	e000      	b.n	800721a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d069      	beq.n	80072fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007226:	4b50      	ldr	r3, [pc, #320]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 030c 	and.w	r3, r3, #12
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007232:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 030c 	and.w	r3, r3, #12
 800723a:	2b08      	cmp	r3, #8
 800723c:	d11c      	bne.n	8007278 <HAL_RCC_OscConfig+0x190>
 800723e:	4b4a      	ldr	r3, [pc, #296]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d116      	bne.n	8007278 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800724a:	4b47      	ldr	r3, [pc, #284]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <HAL_RCC_OscConfig+0x17a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d001      	beq.n	8007262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e1e9      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007262:	4b41      	ldr	r3, [pc, #260]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	493d      	ldr	r1, [pc, #244]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007272:	4313      	orrs	r3, r2
 8007274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007276:	e040      	b.n	80072fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d023      	beq.n	80072c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007280:	4b39      	ldr	r3, [pc, #228]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a38      	ldr	r2, [pc, #224]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fc fec0 	bl	8004010 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007294:	f7fc febc 	bl	8004010 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e1c7      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a6:	4b30      	ldr	r3, [pc, #192]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b2:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4929      	ldr	r1, [pc, #164]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	600b      	str	r3, [r1, #0]
 80072c6:	e018      	b.n	80072fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072c8:	4b27      	ldr	r3, [pc, #156]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a26      	ldr	r2, [pc, #152]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d4:	f7fc fe9c 	bl	8004010 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072dc:	f7fc fe98 	bl	8004010 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e1a3      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ee:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d038      	beq.n	8007378 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d019      	beq.n	8007342 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731a:	f7fc fe79 	bl	8004010 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007322:	f7fc fe75 	bl	8004010 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e180      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f0      	beq.n	8007322 <HAL_RCC_OscConfig+0x23a>
 8007340:	e01a      	b.n	8007378 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007346:	4a08      	ldr	r2, [pc, #32]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734e:	f7fc fe5f 	bl	8004010 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007354:	e00a      	b.n	800736c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007356:	f7fc fe5b 	bl	8004010 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d903      	bls.n	800736c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e166      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
 8007368:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800736c:	4b92      	ldr	r3, [pc, #584]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800736e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1ee      	bne.n	8007356 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80a4 	beq.w	80074ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007386:	4b8c      	ldr	r3, [pc, #560]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10d      	bne.n	80073ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007392:	4b89      	ldr	r3, [pc, #548]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	4a88      	ldr	r2, [pc, #544]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739c:	6413      	str	r3, [r2, #64]	; 0x40
 800739e:	4b86      	ldr	r3, [pc, #536]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a6:	60bb      	str	r3, [r7, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073ae:	4b83      	ldr	r3, [pc, #524]	; (80075bc <HAL_RCC_OscConfig+0x4d4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d118      	bne.n	80073ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80073ba:	4b80      	ldr	r3, [pc, #512]	; (80075bc <HAL_RCC_OscConfig+0x4d4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a7f      	ldr	r2, [pc, #508]	; (80075bc <HAL_RCC_OscConfig+0x4d4>)
 80073c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073c6:	f7fc fe23 	bl	8004010 <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ce:	f7fc fe1f 	bl	8004010 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b64      	cmp	r3, #100	; 0x64
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e12a      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e0:	4b76      	ldr	r3, [pc, #472]	; (80075bc <HAL_RCC_OscConfig+0x4d4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f0      	beq.n	80073ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d106      	bne.n	8007402 <HAL_RCC_OscConfig+0x31a>
 80073f4:	4b70      	ldr	r3, [pc, #448]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	4a6f      	ldr	r2, [pc, #444]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007400:	e02d      	b.n	800745e <HAL_RCC_OscConfig+0x376>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <HAL_RCC_OscConfig+0x33c>
 800740a:	4b6b      	ldr	r3, [pc, #428]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	4a6a      	ldr	r2, [pc, #424]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	6713      	str	r3, [r2, #112]	; 0x70
 8007416:	4b68      	ldr	r3, [pc, #416]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741a:	4a67      	ldr	r2, [pc, #412]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	6713      	str	r3, [r2, #112]	; 0x70
 8007422:	e01c      	b.n	800745e <HAL_RCC_OscConfig+0x376>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b05      	cmp	r3, #5
 800742a:	d10c      	bne.n	8007446 <HAL_RCC_OscConfig+0x35e>
 800742c:	4b62      	ldr	r3, [pc, #392]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	4a61      	ldr	r2, [pc, #388]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007432:	f043 0304 	orr.w	r3, r3, #4
 8007436:	6713      	str	r3, [r2, #112]	; 0x70
 8007438:	4b5f      	ldr	r3, [pc, #380]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	4a5e      	ldr	r2, [pc, #376]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	6713      	str	r3, [r2, #112]	; 0x70
 8007444:	e00b      	b.n	800745e <HAL_RCC_OscConfig+0x376>
 8007446:	4b5c      	ldr	r3, [pc, #368]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	4a5b      	ldr	r2, [pc, #364]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	6713      	str	r3, [r2, #112]	; 0x70
 8007452:	4b59      	ldr	r3, [pc, #356]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007458:	f023 0304 	bic.w	r3, r3, #4
 800745c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d015      	beq.n	8007492 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007466:	f7fc fdd3 	bl	8004010 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800746c:	e00a      	b.n	8007484 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746e:	f7fc fdcf 	bl	8004010 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	f241 3288 	movw	r2, #5000	; 0x1388
 800747c:	4293      	cmp	r3, r2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e0d8      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007484:	4b4c      	ldr	r3, [pc, #304]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0ee      	beq.n	800746e <HAL_RCC_OscConfig+0x386>
 8007490:	e014      	b.n	80074bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007492:	f7fc fdbd 	bl	8004010 <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007498:	e00a      	b.n	80074b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749a:	f7fc fdb9 	bl	8004010 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e0c2      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b0:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80074b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1ee      	bne.n	800749a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d105      	bne.n	80074ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c2:	4b3d      	ldr	r3, [pc, #244]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	4a3c      	ldr	r2, [pc, #240]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80074c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 80ae 	beq.w	8007634 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074d8:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d06d      	beq.n	80075c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d14b      	bne.n	8007584 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ec:	4b32      	ldr	r3, [pc, #200]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a31      	ldr	r2, [pc, #196]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80074f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f8:	f7fc fd8a 	bl	8004010 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007500:	f7fc fd86 	bl	8004010 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e091      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007512:	4b29      	ldr	r3, [pc, #164]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1f0      	bne.n	8007500 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69da      	ldr	r2, [r3, #28]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	019b      	lsls	r3, r3, #6
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	3b01      	subs	r3, #1
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	061b      	lsls	r3, r3, #24
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	491b      	ldr	r1, [pc, #108]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800755a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fc fd58 	bl	8004010 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007564:	f7fc fd54 	bl	8004010 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e05f      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007576:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCC_OscConfig+0x47c>
 8007582:	e057      	b.n	8007634 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a0b      	ldr	r2, [pc, #44]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 800758a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800758e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fc fd3e 	bl	8004010 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007598:	f7fc fd3a 	bl	8004010 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e045      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <HAL_RCC_OscConfig+0x4d0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x4b0>
 80075b6:	e03d      	b.n	8007634 <HAL_RCC_OscConfig+0x54c>
 80075b8:	40023800 	.word	0x40023800
 80075bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80075c0:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <HAL_RCC_OscConfig+0x558>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d030      	beq.n	8007630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d8:	429a      	cmp	r2, r3
 80075da:	d129      	bne.n	8007630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d122      	bne.n	8007630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075f0:	4013      	ands	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d119      	bne.n	8007630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	3b01      	subs	r3, #1
 800760a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800760c:	429a      	cmp	r2, r3
 800760e:	d10f      	bne.n	8007630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d107      	bne.n	8007630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800762c:	429a      	cmp	r2, r3
 800762e:	d001      	beq.n	8007634 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40023800 	.word	0x40023800

08007644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0d0      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800765c:	4b6a      	ldr	r3, [pc, #424]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d910      	bls.n	800768c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766a:	4b67      	ldr	r3, [pc, #412]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f023 020f 	bic.w	r2, r3, #15
 8007672:	4965      	ldr	r1, [pc, #404]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767a:	4b63      	ldr	r3, [pc, #396]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d001      	beq.n	800768c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0b8      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d020      	beq.n	80076da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	4a58      	ldr	r2, [pc, #352]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076bc:	4b53      	ldr	r3, [pc, #332]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	4a52      	ldr	r2, [pc, #328]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c8:	4b50      	ldr	r3, [pc, #320]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	494d      	ldr	r1, [pc, #308]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d040      	beq.n	8007768 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d107      	bne.n	80076fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ee:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d115      	bne.n	8007726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e07f      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d107      	bne.n	8007716 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007706:	4b41      	ldr	r3, [pc, #260]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e073      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007716:	4b3d      	ldr	r3, [pc, #244]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e06b      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007726:	4b39      	ldr	r3, [pc, #228]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f023 0203 	bic.w	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4936      	ldr	r1, [pc, #216]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 8007734:	4313      	orrs	r3, r2
 8007736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007738:	f7fc fc6a 	bl	8004010 <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773e:	e00a      	b.n	8007756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007740:	f7fc fc66 	bl	8004010 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	f241 3288 	movw	r2, #5000	; 0x1388
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e053      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007756:	4b2d      	ldr	r3, [pc, #180]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 020c 	and.w	r2, r3, #12
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	429a      	cmp	r2, r3
 8007766:	d1eb      	bne.n	8007740 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007768:	4b27      	ldr	r3, [pc, #156]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d210      	bcs.n	8007798 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007776:	4b24      	ldr	r3, [pc, #144]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f023 020f 	bic.w	r2, r3, #15
 800777e:	4922      	ldr	r1, [pc, #136]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	4313      	orrs	r3, r2
 8007784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007786:	4b20      	ldr	r3, [pc, #128]	; (8007808 <HAL_RCC_ClockConfig+0x1c4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d001      	beq.n	8007798 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e032      	b.n	80077fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a4:	4b19      	ldr	r3, [pc, #100]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	4916      	ldr	r1, [pc, #88]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077c2:	4b12      	ldr	r3, [pc, #72]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	490e      	ldr	r1, [pc, #56]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077d6:	f000 f821 	bl	800781c <HAL_RCC_GetSysClockFreq>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <HAL_RCC_ClockConfig+0x1c8>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	490a      	ldr	r1, [pc, #40]	; (8007810 <HAL_RCC_ClockConfig+0x1cc>)
 80077e8:	5ccb      	ldrb	r3, [r1, r3]
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	4a09      	ldr	r2, [pc, #36]	; (8007814 <HAL_RCC_ClockConfig+0x1d0>)
 80077f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <HAL_RCC_ClockConfig+0x1d4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fb ffde 	bl	80037b8 <HAL_InitTick>

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40023c00 	.word	0x40023c00
 800780c:	40023800 	.word	0x40023800
 8007810:	08024530 	.word	0x08024530
 8007814:	20000004 	.word	0x20000004
 8007818:	20000008 	.word	0x20000008

0800781c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800781c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007820:	b094      	sub	sp, #80	; 0x50
 8007822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	647b      	str	r3, [r7, #68]	; 0x44
 8007828:	2300      	movs	r3, #0
 800782a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782c:	2300      	movs	r3, #0
 800782e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007834:	4b79      	ldr	r3, [pc, #484]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 030c 	and.w	r3, r3, #12
 800783c:	2b08      	cmp	r3, #8
 800783e:	d00d      	beq.n	800785c <HAL_RCC_GetSysClockFreq+0x40>
 8007840:	2b08      	cmp	r3, #8
 8007842:	f200 80e1 	bhi.w	8007a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_RCC_GetSysClockFreq+0x34>
 800784a:	2b04      	cmp	r3, #4
 800784c:	d003      	beq.n	8007856 <HAL_RCC_GetSysClockFreq+0x3a>
 800784e:	e0db      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007850:	4b73      	ldr	r3, [pc, #460]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8007852:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007854:	e0db      	b.n	8007a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007856:	4b73      	ldr	r3, [pc, #460]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8007858:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800785a:	e0d8      	b.n	8007a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800785c:	4b6f      	ldr	r3, [pc, #444]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007864:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007866:	4b6d      	ldr	r3, [pc, #436]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d063      	beq.n	800793a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007872:	4b6a      	ldr	r3, [pc, #424]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	2200      	movs	r2, #0
 800787a:	63bb      	str	r3, [r7, #56]	; 0x38
 800787c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007884:	633b      	str	r3, [r7, #48]	; 0x30
 8007886:	2300      	movs	r3, #0
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
 800788a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f04f 0100 	mov.w	r1, #0
 800789a:	0159      	lsls	r1, r3, #5
 800789c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078a0:	0150      	lsls	r0, r2, #5
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4621      	mov	r1, r4
 80078a8:	1a51      	subs	r1, r2, r1
 80078aa:	6139      	str	r1, [r7, #16]
 80078ac:	4629      	mov	r1, r5
 80078ae:	eb63 0301 	sbc.w	r3, r3, r1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078c0:	4659      	mov	r1, fp
 80078c2:	018b      	lsls	r3, r1, #6
 80078c4:	4651      	mov	r1, sl
 80078c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078ca:	4651      	mov	r1, sl
 80078cc:	018a      	lsls	r2, r1, #6
 80078ce:	4651      	mov	r1, sl
 80078d0:	ebb2 0801 	subs.w	r8, r2, r1
 80078d4:	4659      	mov	r1, fp
 80078d6:	eb63 0901 	sbc.w	r9, r3, r1
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078ee:	4690      	mov	r8, r2
 80078f0:	4699      	mov	r9, r3
 80078f2:	4623      	mov	r3, r4
 80078f4:	eb18 0303 	adds.w	r3, r8, r3
 80078f8:	60bb      	str	r3, [r7, #8]
 80078fa:	462b      	mov	r3, r5
 80078fc:	eb49 0303 	adc.w	r3, r9, r3
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800790e:	4629      	mov	r1, r5
 8007910:	024b      	lsls	r3, r1, #9
 8007912:	4621      	mov	r1, r4
 8007914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007918:	4621      	mov	r1, r4
 800791a:	024a      	lsls	r2, r1, #9
 800791c:	4610      	mov	r0, r2
 800791e:	4619      	mov	r1, r3
 8007920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007922:	2200      	movs	r2, #0
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
 8007926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800792c:	f7f8 fefc 	bl	8000728 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007938:	e058      	b.n	80079ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800793a:	4b38      	ldr	r3, [pc, #224]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	099b      	lsrs	r3, r3, #6
 8007940:	2200      	movs	r2, #0
 8007942:	4618      	mov	r0, r3
 8007944:	4611      	mov	r1, r2
 8007946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800794a:	623b      	str	r3, [r7, #32]
 800794c:	2300      	movs	r3, #0
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
 8007950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	f04f 0000 	mov.w	r0, #0
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	0159      	lsls	r1, r3, #5
 8007962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007966:	0150      	lsls	r0, r2, #5
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4641      	mov	r1, r8
 800796e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007972:	4649      	mov	r1, r9
 8007974:	eb63 0b01 	sbc.w	fp, r3, r1
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800798c:	ebb2 040a 	subs.w	r4, r2, sl
 8007990:	eb63 050b 	sbc.w	r5, r3, fp
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	00eb      	lsls	r3, r5, #3
 800799e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079a2:	00e2      	lsls	r2, r4, #3
 80079a4:	4614      	mov	r4, r2
 80079a6:	461d      	mov	r5, r3
 80079a8:	4643      	mov	r3, r8
 80079aa:	18e3      	adds	r3, r4, r3
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	464b      	mov	r3, r9
 80079b0:	eb45 0303 	adc.w	r3, r5, r3
 80079b4:	607b      	str	r3, [r7, #4]
 80079b6:	f04f 0200 	mov.w	r2, #0
 80079ba:	f04f 0300 	mov.w	r3, #0
 80079be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80079c2:	4629      	mov	r1, r5
 80079c4:	028b      	lsls	r3, r1, #10
 80079c6:	4621      	mov	r1, r4
 80079c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079cc:	4621      	mov	r1, r4
 80079ce:	028a      	lsls	r2, r1, #10
 80079d0:	4610      	mov	r0, r2
 80079d2:	4619      	mov	r1, r3
 80079d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d6:	2200      	movs	r2, #0
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	61fa      	str	r2, [r7, #28]
 80079dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079e0:	f7f8 fea2 	bl	8000728 <__aeabi_uldivmod>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4613      	mov	r3, r2
 80079ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80079ec:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	3301      	adds	r3, #1
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80079fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a06:	e002      	b.n	8007a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3750      	adds	r7, #80	; 0x50
 8007a14:	46bd      	mov	sp, r7
 8007a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	00f42400 	.word	0x00f42400
 8007a24:	007a1200 	.word	0x007a1200

08007a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000004 	.word	0x20000004

08007a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a44:	f7ff fff0 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	0a9b      	lsrs	r3, r3, #10
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	4903      	ldr	r1, [pc, #12]	; (8007a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a56:	5ccb      	ldrb	r3, [r1, r3]
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40023800 	.word	0x40023800
 8007a64:	08024540 	.word	0x08024540

08007a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a6c:	f7ff ffdc 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	0b5b      	lsrs	r3, r3, #13
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	4903      	ldr	r1, [pc, #12]	; (8007a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a7e:	5ccb      	ldrb	r3, [r1, r3]
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	08024540 	.word	0x08024540

08007a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	220f      	movs	r2, #15
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aa0:	4b12      	ldr	r3, [pc, #72]	; (8007aec <HAL_RCC_GetClockConfig+0x5c>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0203 	and.w	r2, r3, #3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <HAL_RCC_GetClockConfig+0x5c>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <HAL_RCC_GetClockConfig+0x5c>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ac4:	4b09      	ldr	r3, [pc, #36]	; (8007aec <HAL_RCC_GetClockConfig+0x5c>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	08db      	lsrs	r3, r3, #3
 8007aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <HAL_RCC_GetClockConfig+0x60>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 020f 	and.w	r2, r3, #15
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	601a      	str	r2, [r3, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40023800 	.word	0x40023800
 8007af0:	40023c00 	.word	0x40023c00

08007af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d012      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b1c:	4b69      	ldr	r3, [pc, #420]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	4a68      	ldr	r2, [pc, #416]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b26:	6093      	str	r3, [r2, #8]
 8007b28:	4b66      	ldr	r3, [pc, #408]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b30:	4964      	ldr	r1, [pc, #400]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d017      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b4e:	4b5d      	ldr	r3, [pc, #372]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	4959      	ldr	r1, [pc, #356]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d017      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b8a:	4b4e      	ldr	r3, [pc, #312]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	494a      	ldr	r1, [pc, #296]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba8:	d101      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007baa:	2301      	movs	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 808b 	beq.w	8007cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bd8:	4b3a      	ldr	r3, [pc, #232]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bdc:	4a39      	ldr	r2, [pc, #228]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be2:	6413      	str	r3, [r2, #64]	; 0x40
 8007be4:	4b37      	ldr	r3, [pc, #220]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bf0:	4b35      	ldr	r3, [pc, #212]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a34      	ldr	r2, [pc, #208]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bfc:	f7fc fa08 	bl	8004010 <HAL_GetTick>
 8007c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c02:	e008      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c04:	f7fc fa04 	bl	8004010 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b64      	cmp	r3, #100	; 0x64
 8007c10:	d901      	bls.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e38f      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c16:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c22:	4b28      	ldr	r3, [pc, #160]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d035      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d02e      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c40:	4b20      	ldr	r3, [pc, #128]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c4a:	4b1e      	ldr	r3, [pc, #120]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4e:	4a1d      	ldr	r2, [pc, #116]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c56:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c62:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c68:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d114      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fc f9cc 	bl	8004010 <HAL_GetTick>
 8007c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7a:	e00a      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c7c:	f7fc f9c8 	bl	8004010 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e351      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0ee      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007caa:	d111      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cba:	400b      	ands	r3, r1
 8007cbc:	4901      	ldr	r1, [pc, #4]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
 8007cc2:	e00b      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	40007000 	.word	0x40007000
 8007ccc:	0ffffcff 	.word	0x0ffffcff
 8007cd0:	4bac      	ldr	r3, [pc, #688]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	4aab      	ldr	r2, [pc, #684]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cda:	6093      	str	r3, [r2, #8]
 8007cdc:	4ba9      	ldr	r3, [pc, #676]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce8:	49a6      	ldr	r1, [pc, #664]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d010      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cfa:	4ba2      	ldr	r3, [pc, #648]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d00:	4aa0      	ldr	r2, [pc, #640]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007d0a:	4b9e      	ldr	r3, [pc, #632]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	499b      	ldr	r1, [pc, #620]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d28:	4b96      	ldr	r3, [pc, #600]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d36:	4993      	ldr	r1, [pc, #588]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d4a:	4b8e      	ldr	r3, [pc, #568]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d58:	498a      	ldr	r1, [pc, #552]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d6c:	4b85      	ldr	r3, [pc, #532]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7a:	4982      	ldr	r1, [pc, #520]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d8e:	4b7d      	ldr	r3, [pc, #500]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	4979      	ldr	r1, [pc, #484]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007db0:	4b74      	ldr	r3, [pc, #464]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db6:	f023 0203 	bic.w	r2, r3, #3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	4971      	ldr	r1, [pc, #452]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd8:	f023 020c 	bic.w	r2, r3, #12
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de0:	4968      	ldr	r1, [pc, #416]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007df4:	4b63      	ldr	r3, [pc, #396]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e02:	4960      	ldr	r1, [pc, #384]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e16:	4b5b      	ldr	r3, [pc, #364]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e24:	4957      	ldr	r1, [pc, #348]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e38:	4b52      	ldr	r3, [pc, #328]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	494f      	ldr	r1, [pc, #316]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e5a:	4b4a      	ldr	r3, [pc, #296]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e68:	4946      	ldr	r1, [pc, #280]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e7c:	4b41      	ldr	r3, [pc, #260]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8a:	493e      	ldr	r1, [pc, #248]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e9e:	4b39      	ldr	r3, [pc, #228]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eac:	4935      	ldr	r1, [pc, #212]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ec0:	4b30      	ldr	r3, [pc, #192]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ece:	492d      	ldr	r1, [pc, #180]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d011      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ee2:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef0:	4924      	ldr	r1, [pc, #144]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f00:	d101      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f22:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f30:	4914      	ldr	r1, [pc, #80]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f44:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f54:	490b      	ldr	r1, [pc, #44]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00f      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f78:	4902      	ldr	r1, [pc, #8]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f80:	e002      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007f82:	bf00      	nop
 8007f84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f94:	4b8a      	ldr	r3, [pc, #552]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa4:	4986      	ldr	r1, [pc, #536]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007fb8:	4b81      	ldr	r3, [pc, #516]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc8:	497d      	ldr	r1, [pc, #500]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d006      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80d6 	beq.w	8008190 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fe4:	4b76      	ldr	r3, [pc, #472]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a75      	ldr	r2, [pc, #468]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff0:	f7fc f80e 	bl	8004010 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ff8:	f7fc f80a 	bl	8004010 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	; 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e195      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800800a:	4b6d      	ldr	r3, [pc, #436]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d021      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11d      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800802a:	4b65      	ldr	r3, [pc, #404]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800802c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008038:	4b61      	ldr	r3, [pc, #388]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800803a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	019a      	lsls	r2, r3, #6
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	071b      	lsls	r3, r3, #28
 800805e:	4958      	ldr	r1, [pc, #352]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807a:	d00a      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008084:	2b00      	cmp	r3, #0
 8008086:	d02e      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008090:	d129      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008092:	4b4b      	ldr	r3, [pc, #300]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080a0:	4b47      	ldr	r3, [pc, #284]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a6:	0f1b      	lsrs	r3, r3, #28
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	019a      	lsls	r2, r3, #6
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	041b      	lsls	r3, r3, #16
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	061b      	lsls	r3, r3, #24
 80080c0:	431a      	orrs	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	071b      	lsls	r3, r3, #28
 80080c6:	493e      	ldr	r1, [pc, #248]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80080ce:	4b3c      	ldr	r3, [pc, #240]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d4:	f023 021f 	bic.w	r2, r3, #31
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	3b01      	subs	r3, #1
 80080de:	4938      	ldr	r1, [pc, #224]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01d      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080f2:	4b33      	ldr	r3, [pc, #204]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f8:	0e1b      	lsrs	r3, r3, #24
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008100:	4b2f      	ldr	r3, [pc, #188]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008106:	0f1b      	lsrs	r3, r3, #28
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	019a      	lsls	r2, r3, #6
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	431a      	orrs	r2, r3
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	061b      	lsls	r3, r3, #24
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	071b      	lsls	r3, r3, #28
 8008126:	4926      	ldr	r1, [pc, #152]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d011      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	019a      	lsls	r2, r3, #6
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	061b      	lsls	r3, r3, #24
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	071b      	lsls	r3, r3, #28
 8008156:	491a      	ldr	r1, [pc, #104]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008158:	4313      	orrs	r3, r2
 800815a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7fb ff51 	bl	8004010 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008172:	f7fb ff4d 	bl	8004010 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b64      	cmp	r3, #100	; 0x64
 800817e:	d901      	bls.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e0d8      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f0      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b01      	cmp	r3, #1
 8008194:	f040 80ce 	bne.w	8008334 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008198:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a08      	ldr	r2, [pc, #32]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800819e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a4:	f7fb ff34 	bl	8004010 <HAL_GetTick>
 80081a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081aa:	e00b      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081ac:	f7fb ff30 	bl	8004010 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b64      	cmp	r3, #100	; 0x64
 80081b8:	d904      	bls.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e0bb      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80081be:	bf00      	nop
 80081c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081c4:	4b5e      	ldr	r3, [pc, #376]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d0:	d0ec      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d02e      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d12a      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081fa:	4b51      	ldr	r3, [pc, #324]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008208:	4b4d      	ldr	r3, [pc, #308]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	0f1b      	lsrs	r3, r3, #28
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	019a      	lsls	r2, r3, #6
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	041b      	lsls	r3, r3, #16
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	061b      	lsls	r3, r3, #24
 8008228:	431a      	orrs	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	071b      	lsls	r3, r3, #28
 800822e:	4944      	ldr	r1, [pc, #272]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008230:	4313      	orrs	r3, r2
 8008232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008236:	4b42      	ldr	r3, [pc, #264]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	3b01      	subs	r3, #1
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	493d      	ldr	r1, [pc, #244]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d022      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008264:	d11d      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008266:	4b36      	ldr	r3, [pc, #216]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826c:	0e1b      	lsrs	r3, r3, #24
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008274:	4b32      	ldr	r3, [pc, #200]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827a:	0f1b      	lsrs	r3, r3, #28
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	019a      	lsls	r2, r3, #6
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	041b      	lsls	r3, r3, #16
 800828e:	431a      	orrs	r2, r3
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	061b      	lsls	r3, r3, #24
 8008294:	431a      	orrs	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	071b      	lsls	r3, r3, #28
 800829a:	4929      	ldr	r1, [pc, #164]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800829c:	4313      	orrs	r3, r2
 800829e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d028      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b4:	0e1b      	lsrs	r3, r3, #24
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80082bc:	4b20      	ldr	r3, [pc, #128]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c2:	0c1b      	lsrs	r3, r3, #16
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	019a      	lsls	r2, r3, #6
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	041b      	lsls	r3, r3, #16
 80082d4:	431a      	orrs	r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	061b      	lsls	r3, r3, #24
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	071b      	lsls	r3, r3, #28
 80082e2:	4917      	ldr	r1, [pc, #92]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80082ea:	4b15      	ldr	r3, [pc, #84]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	4911      	ldr	r1, [pc, #68]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008300:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a0e      	ldr	r2, [pc, #56]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830c:	f7fb fe80 	bl	8004010 <HAL_GetTick>
 8008310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008312:	e008      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008314:	f7fb fe7c 	bl	8004010 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b64      	cmp	r3, #100	; 0x64
 8008320:	d901      	bls.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e007      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800832e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008332:	d1ef      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3720      	adds	r7, #32
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40023800 	.word	0x40023800

08008344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e049      	b.n	80083ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f841 	bl	80083f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f000 fb34 	bl	80089f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
	...

08008408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b01      	cmp	r3, #1
 800841a:	d001      	beq.n	8008420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e054      	b.n	80084ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a26      	ldr	r2, [pc, #152]	; (80084d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d022      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d01d      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a22      	ldr	r2, [pc, #136]	; (80084dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d018      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a21      	ldr	r2, [pc, #132]	; (80084e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d013      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a1f      	ldr	r2, [pc, #124]	; (80084e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00e      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a1e      	ldr	r2, [pc, #120]	; (80084e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d009      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1c      	ldr	r2, [pc, #112]	; (80084ec <HAL_TIM_Base_Start_IT+0xe4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d004      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x80>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a1b      	ldr	r2, [pc, #108]	; (80084f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d115      	bne.n	80084b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689a      	ldr	r2, [r3, #8]
 800848e:	4b19      	ldr	r3, [pc, #100]	; (80084f4 <HAL_TIM_Base_Start_IT+0xec>)
 8008490:	4013      	ands	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b06      	cmp	r3, #6
 8008498:	d015      	beq.n	80084c6 <HAL_TIM_Base_Start_IT+0xbe>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a0:	d011      	beq.n	80084c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0201 	orr.w	r2, r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b2:	e008      	b.n	80084c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0201 	orr.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e000      	b.n	80084c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40000c00 	.word	0x40000c00
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40001800 	.word	0x40001800
 80084f4:	00010007 	.word	0x00010007

080084f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e08f      	b.n	800862c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7fb fbb5 	bl	8003c90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6899      	ldr	r1, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b3e      	ldr	r3, [pc, #248]	; (8008634 <HAL_TIM_Encoder_Init+0x13c>)
 800853a:	400b      	ands	r3, r1
 800853c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3304      	adds	r3, #4
 8008546:	4619      	mov	r1, r3
 8008548:	4610      	mov	r0, r2
 800854a:	f000 fa51 	bl	80089f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4b31      	ldr	r3, [pc, #196]	; (8008638 <HAL_TIM_Encoder_Init+0x140>)
 8008574:	4013      	ands	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	4313      	orrs	r3, r2
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4b2b      	ldr	r3, [pc, #172]	; (800863c <HAL_TIM_Encoder_Init+0x144>)
 800858e:	4013      	ands	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <HAL_TIM_Encoder_Init+0x148>)
 8008596:	4013      	ands	r3, r2
 8008598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	4313      	orrs	r3, r2
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	011a      	lsls	r2, r3, #4
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	031b      	lsls	r3, r3, #12
 80085b8:	4313      	orrs	r3, r2
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80085c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	4313      	orrs	r3, r2
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	fffebff8 	.word	0xfffebff8
 8008638:	fffffcfc 	.word	0xfffffcfc
 800863c:	fffff3f3 	.word	0xfffff3f3
 8008640:	ffff0f0f 	.word	0xffff0f0f

08008644 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008654:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800865c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008664:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d110      	bne.n	8008696 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d102      	bne.n	8008680 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800867a:	7b7b      	ldrb	r3, [r7, #13]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d001      	beq.n	8008684 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e069      	b.n	8008758 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008694:	e031      	b.n	80086fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b04      	cmp	r3, #4
 800869a:	d110      	bne.n	80086be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d102      	bne.n	80086a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086a2:	7b3b      	ldrb	r3, [r7, #12]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d001      	beq.n	80086ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e055      	b.n	8008758 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086bc:	e01d      	b.n	80086fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d108      	bne.n	80086d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d105      	bne.n	80086d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086ca:	7b7b      	ldrb	r3, [r7, #13]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d102      	bne.n	80086d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086d0:	7b3b      	ldrb	r3, [r7, #12]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d001      	beq.n	80086da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e03e      	b.n	8008758 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2202      	movs	r2, #2
 80086ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2202      	movs	r2, #2
 80086f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_TIM_Encoder_Start+0xc4>
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2b04      	cmp	r3, #4
 8008704:	d008      	beq.n	8008718 <HAL_TIM_Encoder_Start+0xd4>
 8008706:	e00f      	b.n	8008728 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2201      	movs	r2, #1
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fa0d 	bl	8008b30 <TIM_CCxChannelCmd>
      break;
 8008716:	e016      	b.n	8008746 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2201      	movs	r2, #1
 800871e:	2104      	movs	r1, #4
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fa05 	bl	8008b30 <TIM_CCxChannelCmd>
      break;
 8008726:	e00e      	b.n	8008746 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2201      	movs	r2, #1
 800872e:	2100      	movs	r1, #0
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f9fd 	bl	8008b30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2201      	movs	r2, #1
 800873c:	2104      	movs	r1, #4
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f9f6 	bl	8008b30 <TIM_CCxChannelCmd>
      break;
 8008744:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0201 	orr.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b02      	cmp	r3, #2
 8008774:	d122      	bne.n	80087bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b02      	cmp	r3, #2
 8008782:	d11b      	bne.n	80087bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f06f 0202 	mvn.w	r2, #2
 800878c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f905 	bl	80089b2 <HAL_TIM_IC_CaptureCallback>
 80087a8:	e005      	b.n	80087b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f8f7 	bl	800899e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f908 	bl	80089c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d122      	bne.n	8008810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d11b      	bne.n	8008810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0204 	mvn.w	r2, #4
 80087e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2202      	movs	r2, #2
 80087e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f8db 	bl	80089b2 <HAL_TIM_IC_CaptureCallback>
 80087fc:	e005      	b.n	800880a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f8cd 	bl	800899e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f8de 	bl	80089c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b08      	cmp	r3, #8
 800881c:	d122      	bne.n	8008864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d11b      	bne.n	8008864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f06f 0208 	mvn.w	r2, #8
 8008834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2204      	movs	r2, #4
 800883a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f8b1 	bl	80089b2 <HAL_TIM_IC_CaptureCallback>
 8008850:	e005      	b.n	800885e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8a3 	bl	800899e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f8b4 	bl	80089c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f003 0310 	and.w	r3, r3, #16
 800886e:	2b10      	cmp	r3, #16
 8008870:	d122      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b10      	cmp	r3, #16
 800887e:	d11b      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f06f 0210 	mvn.w	r2, #16
 8008888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2208      	movs	r2, #8
 800888e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f887 	bl	80089b2 <HAL_TIM_IC_CaptureCallback>
 80088a4:	e005      	b.n	80088b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f879 	bl	800899e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f88a 	bl	80089c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d10e      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d107      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f06f 0201 	mvn.w	r2, #1
 80088dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7fa fdc8 	bl	8003474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d10e      	bne.n	8008910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fc:	2b80      	cmp	r3, #128	; 0x80
 80088fe:	d107      	bne.n	8008910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9ce 	bl	8008cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891e:	d10e      	bne.n	800893e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	d107      	bne.n	800893e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9c1 	bl	8008cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008948:	2b40      	cmp	r3, #64	; 0x40
 800894a:	d10e      	bne.n	800896a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008956:	2b40      	cmp	r3, #64	; 0x40
 8008958:	d107      	bne.n	800896a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f838 	bl	80089da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b20      	cmp	r3, #32
 8008976:	d10e      	bne.n	8008996 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b20      	cmp	r3, #32
 8008984:	d107      	bne.n	8008996 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f06f 0220 	mvn.w	r2, #32
 800898e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f981 	bl	8008c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a40      	ldr	r2, [pc, #256]	; (8008b04 <TIM_Base_SetConfig+0x114>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d013      	beq.n	8008a30 <TIM_Base_SetConfig+0x40>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0e:	d00f      	beq.n	8008a30 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3d      	ldr	r2, [pc, #244]	; (8008b08 <TIM_Base_SetConfig+0x118>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00b      	beq.n	8008a30 <TIM_Base_SetConfig+0x40>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a3c      	ldr	r2, [pc, #240]	; (8008b0c <TIM_Base_SetConfig+0x11c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d007      	beq.n	8008a30 <TIM_Base_SetConfig+0x40>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a3b      	ldr	r2, [pc, #236]	; (8008b10 <TIM_Base_SetConfig+0x120>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d003      	beq.n	8008a30 <TIM_Base_SetConfig+0x40>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a3a      	ldr	r2, [pc, #232]	; (8008b14 <TIM_Base_SetConfig+0x124>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d108      	bne.n	8008a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2f      	ldr	r2, [pc, #188]	; (8008b04 <TIM_Base_SetConfig+0x114>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d02b      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a50:	d027      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2c      	ldr	r2, [pc, #176]	; (8008b08 <TIM_Base_SetConfig+0x118>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d023      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a2b      	ldr	r2, [pc, #172]	; (8008b0c <TIM_Base_SetConfig+0x11c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d01f      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a2a      	ldr	r2, [pc, #168]	; (8008b10 <TIM_Base_SetConfig+0x120>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d01b      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a29      	ldr	r2, [pc, #164]	; (8008b14 <TIM_Base_SetConfig+0x124>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d017      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a28      	ldr	r2, [pc, #160]	; (8008b18 <TIM_Base_SetConfig+0x128>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d013      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a27      	ldr	r2, [pc, #156]	; (8008b1c <TIM_Base_SetConfig+0x12c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00f      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <TIM_Base_SetConfig+0x130>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00b      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a25      	ldr	r2, [pc, #148]	; (8008b24 <TIM_Base_SetConfig+0x134>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d007      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a24      	ldr	r2, [pc, #144]	; (8008b28 <TIM_Base_SetConfig+0x138>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_Base_SetConfig+0xb2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a23      	ldr	r2, [pc, #140]	; (8008b2c <TIM_Base_SetConfig+0x13c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d108      	bne.n	8008ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <TIM_Base_SetConfig+0x114>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <TIM_Base_SetConfig+0xf8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a0c      	ldr	r2, [pc, #48]	; (8008b14 <TIM_Base_SetConfig+0x124>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d103      	bne.n	8008af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	691a      	ldr	r2, [r3, #16]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	615a      	str	r2, [r3, #20]
}
 8008af6:	bf00      	nop
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	40010000 	.word	0x40010000
 8008b08:	40000400 	.word	0x40000400
 8008b0c:	40000800 	.word	0x40000800
 8008b10:	40000c00 	.word	0x40000c00
 8008b14:	40010400 	.word	0x40010400
 8008b18:	40014000 	.word	0x40014000
 8008b1c:	40014400 	.word	0x40014400
 8008b20:	40014800 	.word	0x40014800
 8008b24:	40001800 	.word	0x40001800
 8008b28:	40001c00 	.word	0x40001c00
 8008b2c:	40002000 	.word	0x40002000

08008b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	2201      	movs	r2, #1
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a1a      	ldr	r2, [r3, #32]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a1a      	ldr	r2, [r3, #32]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f003 031f 	and.w	r3, r3, #31
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	fa01 f303 	lsl.w	r3, r1, r3
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
	...

08008b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e06d      	b.n	8008c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a30      	ldr	r2, [pc, #192]	; (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d004      	beq.n	8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a2f      	ldr	r2, [pc, #188]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d108      	bne.n	8008bda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a20      	ldr	r2, [pc, #128]	; (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d022      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c06:	d01d      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d018      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d013      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00e      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a15      	ldr	r2, [pc, #84]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d009      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a16      	ldr	r2, [pc, #88]	; (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d004      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d10c      	bne.n	8008c5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	40010000 	.word	0x40010000
 8008c80:	40010400 	.word	0x40010400
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40001800 	.word	0x40001800

08008c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e040      	b.n	8008d68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fb f870 	bl	8003ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2224      	movs	r2, #36	; 0x24
 8008d00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 0201 	bic.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fd32 	bl	800977c <UART_SetConfig>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e022      	b.n	8008d68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 ff8a 	bl	8009c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 f811 	bl	8009d88 <UART_CheckIdleState>
 8008d66:	4603      	mov	r3, r0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	d171      	bne.n	8008e6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <HAL_UART_Transmit+0x24>
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e06a      	b.n	8008e6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2221      	movs	r2, #33	; 0x21
 8008da4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008da6:	f7fb f933 	bl	8004010 <HAL_GetTick>
 8008daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	88fa      	ldrh	r2, [r7, #6]
 8008db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d108      	bne.n	8008dd8 <HAL_UART_Transmit+0x68>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e003      	b.n	8008de0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008de0:	e02c      	b.n	8008e3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2200      	movs	r2, #0
 8008dea:	2180      	movs	r1, #128	; 0x80
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f001 f818 	bl	8009e22 <UART_WaitOnFlagUntilTimeout>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e038      	b.n	8008e6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10b      	bne.n	8008e1a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	3302      	adds	r3, #2
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	e007      	b.n	8008e2a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	781a      	ldrb	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1cc      	bne.n	8008de2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2140      	movs	r1, #64	; 0x40
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 ffe5 	bl	8009e22 <UART_WaitOnFlagUntilTimeout>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e005      	b.n	8008e6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e000      	b.n	8008e6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008e6c:	2302      	movs	r3, #2
  }
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	d165      	bne.n	8008f5a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <HAL_UART_Transmit_DMA+0x22>
 8008e94:	88fb      	ldrh	r3, [r7, #6]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e05e      	b.n	8008f5c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2221      	movs	r2, #33	; 0x21
 8008ec0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d027      	beq.n	8008f1a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ece:	4a25      	ldr	r2, [pc, #148]	; (8008f64 <HAL_UART_Transmit_DMA+0xec>)
 8008ed0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed6:	4a24      	ldr	r2, [pc, #144]	; (8008f68 <HAL_UART_Transmit_DMA+0xf0>)
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ede:	4a23      	ldr	r2, [pc, #140]	; (8008f6c <HAL_UART_Transmit_DMA+0xf4>)
 8008ee0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3328      	adds	r3, #40	; 0x28
 8008efa:	461a      	mov	r2, r3
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	f7fc f8a3 	bl	8005048 <HAL_DMA_Start_IT>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2220      	movs	r2, #32
 8008f14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e020      	b.n	8008f5c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2240      	movs	r2, #64	; 0x40
 8008f20:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	613b      	str	r3, [r7, #16]
   return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f42:	623a      	str	r2, [r7, #32]
 8008f44:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	69f9      	ldr	r1, [r7, #28]
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e5      	bne.n	8008f22 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
  }
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3728      	adds	r7, #40	; 0x28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	0800a205 	.word	0x0800a205
 8008f68:	0800a29b 	.word	0x0800a29b
 8008f6c:	0800a41d 	.word	0x0800a41d

08008f70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	; 0x28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d132      	bne.n	8008fee <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <HAL_UART_Receive_DMA+0x24>
 8008f8e:	88fb      	ldrh	r3, [r7, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e02b      	b.n	8008ff0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d018      	beq.n	8008fde <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	69f9      	ldr	r1, [r7, #28]
 8008fd0:	6a3a      	ldr	r2, [r7, #32]
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e6      	bne.n	8008fac <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fde:	88fb      	ldrh	r3, [r7, #6]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 ffe3 	bl	8009fb0 <UART_Start_Receive_DMA>
 8008fea:	4603      	mov	r3, r0
 8008fec:	e000      	b.n	8008ff0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
  }
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b090      	sub	sp, #64	; 0x40
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d139      	bne.n	8009090 <HAL_UART_DMAStop+0x98>
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	2b21      	cmp	r3, #33	; 0x21
 8009020:	d136      	bne.n	8009090 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3308      	adds	r3, #8
 8009028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	61fb      	str	r3, [r7, #28]
   return(result);
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	2b00      	cmp	r3, #0
 800905c:	d015      	beq.n	800908a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009062:	4618      	mov	r0, r3
 8009064:	f7fc f850 	bl	8005108 <HAL_DMA_Abort>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00d      	beq.n	800908a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009072:	4618      	mov	r0, r3
 8009074:	f7fc fa64 	bl	8005540 <HAL_DMA_GetError>
 8009078:	4603      	mov	r3, r0
 800907a:	2b20      	cmp	r3, #32
 800907c:	d105      	bne.n	800908a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2210      	movs	r2, #16
 8009082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e044      	b.n	8009114 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f001 f830 	bl	800a0f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	d139      	bne.n	8009112 <HAL_UART_DMAStop+0x11a>
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	2b22      	cmp	r3, #34	; 0x22
 80090a2:	d136      	bne.n	8009112 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ba:	633b      	str	r3, [r7, #48]	; 0x30
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c4:	61ba      	str	r2, [r7, #24]
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6979      	ldr	r1, [r7, #20]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	613b      	str	r3, [r7, #16]
   return(result);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e5      	bne.n	80090a4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d015      	beq.n	800910c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fc f80f 	bl	8005108 <HAL_DMA_Abort>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00d      	beq.n	800910c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fc fa23 	bl	8005540 <HAL_DMA_GetError>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d105      	bne.n	800910c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2210      	movs	r2, #16
 8009104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e003      	b.n	8009114 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f815 	bl	800a13c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3740      	adds	r7, #64	; 0x40
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b0ba      	sub	sp, #232	; 0xe8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009146:	f640 030f 	movw	r3, #2063	; 0x80f
 800914a:	4013      	ands	r3, r2
 800914c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d115      	bne.n	8009184 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00f      	beq.n	8009184 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 82ac 	beq.w	80096d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
      }
      return;
 8009182:	e2a6      	b.n	80096d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8117 	beq.w	80093bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800918e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800919a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800919e:	4b85      	ldr	r3, [pc, #532]	; (80093b4 <HAL_UART_IRQHandler+0x298>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 810a 	beq.w	80093bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d011      	beq.n	80091d8 <HAL_UART_IRQHandler+0xbc>
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2201      	movs	r2, #1
 80091c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ce:	f043 0201 	orr.w	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d011      	beq.n	8009208 <HAL_UART_IRQHandler+0xec>
 80091e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2202      	movs	r2, #2
 80091f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091fe:	f043 0204 	orr.w	r2, r3, #4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d011      	beq.n	8009238 <HAL_UART_IRQHandler+0x11c>
 8009214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2204      	movs	r2, #4
 8009226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800922e:	f043 0202 	orr.w	r2, r3, #2
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b00      	cmp	r3, #0
 8009242:	d017      	beq.n	8009274 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d105      	bne.n	800925c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009254:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2208      	movs	r2, #8
 8009262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926a:	f043 0208 	orr.w	r2, r3, #8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800927c:	2b00      	cmp	r3, #0
 800927e:	d012      	beq.n	80092a6 <HAL_UART_IRQHandler+0x18a>
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00c      	beq.n	80092a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929c:	f043 0220 	orr.w	r2, r3, #32
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 8212 	beq.w	80096d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80092b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00d      	beq.n	80092da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d007      	beq.n	80092da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ee:	2b40      	cmp	r3, #64	; 0x40
 80092f0:	d005      	beq.n	80092fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d04f      	beq.n	800939e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 ff1c 	bl	800a13c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d141      	bne.n	8009396 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800932c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3308      	adds	r3, #8
 800933a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800933e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800934a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1d9      	bne.n	8009312 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009362:	2b00      	cmp	r3, #0
 8009364:	d013      	beq.n	800938e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936a:	4a13      	ldr	r2, [pc, #76]	; (80093b8 <HAL_UART_IRQHandler+0x29c>)
 800936c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009372:	4618      	mov	r0, r3
 8009374:	f7fb ff38 	bl	80051e8 <HAL_DMA_Abort_IT>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d017      	beq.n	80093ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938c:	e00f      	b.n	80093ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f9d4 	bl	800973c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009394:	e00b      	b.n	80093ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f9d0 	bl	800973c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800939c:	e007      	b.n	80093ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f9cc 	bl	800973c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80093ac:	e193      	b.n	80096d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ae:	bf00      	nop
    return;
 80093b0:	e191      	b.n	80096d6 <HAL_UART_IRQHandler+0x5ba>
 80093b2:	bf00      	nop
 80093b4:	04000120 	.word	0x04000120
 80093b8:	0800a49b 	.word	0x0800a49b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	f040 814c 	bne.w	800965e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 8145 	beq.w	800965e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 813e 	beq.w	800965e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2210      	movs	r2, #16
 80093e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f4:	2b40      	cmp	r3, #64	; 0x40
 80093f6:	f040 80b6 	bne.w	8009566 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009406:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8165 	beq.w	80096da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800941a:	429a      	cmp	r2, r3
 800941c:	f080 815d 	bcs.w	80096da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	f000 8086 	beq.w	8009544 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800944c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009466:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800946e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800947a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1da      	bne.n	8009438 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3308      	adds	r3, #8
 80094a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e1      	bne.n	8009482 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80094e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80094e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e3      	bne.n	80094be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009514:	f023 0310 	bic.w	r3, r3, #16
 8009518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009526:	65bb      	str	r3, [r7, #88]	; 0x58
 8009528:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800952c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e4      	bne.n	8009504 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953e:	4618      	mov	r0, r3
 8009540:	f7fb fde2 	bl	8005108 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009556:	b29b      	uxth	r3, r3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	b29b      	uxth	r3, r3
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f8f6 	bl	8009750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009564:	e0b9      	b.n	80096da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009572:	b29b      	uxth	r3, r3
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 80ab 	beq.w	80096de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80a6 	beq.w	80096de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	e853 3f00 	ldrex	r3, [r3]
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095b4:	647b      	str	r3, [r7, #68]	; 0x44
 80095b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e4      	bne.n	8009592 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3308      	adds	r3, #8
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	623b      	str	r3, [r7, #32]
   return(result);
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095ec:	633a      	str	r2, [r7, #48]	; 0x30
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e3      	bne.n	80095c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2220      	movs	r2, #32
 8009604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	60fb      	str	r3, [r7, #12]
   return(result);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f023 0310 	bic.w	r3, r3, #16
 8009628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	69b9      	ldr	r1, [r7, #24]
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	617b      	str	r3, [r7, #20]
   return(result);
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e4      	bne.n	8009614 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f87a 	bl	8009750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800965c:	e03f      	b.n	80096de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00e      	beq.n	8009688 <HAL_UART_IRQHandler+0x56c>
 800966a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800966e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d008      	beq.n	8009688 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800967e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f871 	bl	8009768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009686:	e02d      	b.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969c:	2b00      	cmp	r3, #0
 800969e:	d008      	beq.n	80096b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d01c      	beq.n	80096e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
    }
    return;
 80096b0:	e017      	b.n	80096e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d012      	beq.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
 80096be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00c      	beq.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fefb 	bl	800a4c6 <UART_EndTransmit_IT>
    return;
 80096d0:	e008      	b.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80096d2:	bf00      	nop
 80096d4:	e006      	b.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80096d6:	bf00      	nop
 80096d8:	e004      	b.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80096da:	bf00      	nop
 80096dc:	e002      	b.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80096e2:	bf00      	nop
  }

}
 80096e4:	37e8      	adds	r7, #232	; 0xe8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop

080096ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	431a      	orrs	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	431a      	orrs	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	4ba6      	ldr	r3, [pc, #664]	; (8009a40 <UART_SetConfig+0x2c4>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	6979      	ldr	r1, [r7, #20]
 80097b0:	430b      	orrs	r3, r1
 80097b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a94      	ldr	r2, [pc, #592]	; (8009a44 <UART_SetConfig+0x2c8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d120      	bne.n	800983a <UART_SetConfig+0xbe>
 80097f8:	4b93      	ldr	r3, [pc, #588]	; (8009a48 <UART_SetConfig+0x2cc>)
 80097fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b03      	cmp	r3, #3
 8009804:	d816      	bhi.n	8009834 <UART_SetConfig+0xb8>
 8009806:	a201      	add	r2, pc, #4	; (adr r2, 800980c <UART_SetConfig+0x90>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	0800981d 	.word	0x0800981d
 8009810:	08009829 	.word	0x08009829
 8009814:	08009823 	.word	0x08009823
 8009818:	0800982f 	.word	0x0800982f
 800981c:	2301      	movs	r3, #1
 800981e:	77fb      	strb	r3, [r7, #31]
 8009820:	e150      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009822:	2302      	movs	r3, #2
 8009824:	77fb      	strb	r3, [r7, #31]
 8009826:	e14d      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009828:	2304      	movs	r3, #4
 800982a:	77fb      	strb	r3, [r7, #31]
 800982c:	e14a      	b.n	8009ac4 <UART_SetConfig+0x348>
 800982e:	2308      	movs	r3, #8
 8009830:	77fb      	strb	r3, [r7, #31]
 8009832:	e147      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009834:	2310      	movs	r3, #16
 8009836:	77fb      	strb	r3, [r7, #31]
 8009838:	e144      	b.n	8009ac4 <UART_SetConfig+0x348>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a83      	ldr	r2, [pc, #524]	; (8009a4c <UART_SetConfig+0x2d0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d132      	bne.n	80098aa <UART_SetConfig+0x12e>
 8009844:	4b80      	ldr	r3, [pc, #512]	; (8009a48 <UART_SetConfig+0x2cc>)
 8009846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984a:	f003 030c 	and.w	r3, r3, #12
 800984e:	2b0c      	cmp	r3, #12
 8009850:	d828      	bhi.n	80098a4 <UART_SetConfig+0x128>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0xdc>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	0800988d 	.word	0x0800988d
 800985c:	080098a5 	.word	0x080098a5
 8009860:	080098a5 	.word	0x080098a5
 8009864:	080098a5 	.word	0x080098a5
 8009868:	08009899 	.word	0x08009899
 800986c:	080098a5 	.word	0x080098a5
 8009870:	080098a5 	.word	0x080098a5
 8009874:	080098a5 	.word	0x080098a5
 8009878:	08009893 	.word	0x08009893
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098a5 	.word	0x080098a5
 8009884:	080098a5 	.word	0x080098a5
 8009888:	0800989f 	.word	0x0800989f
 800988c:	2300      	movs	r3, #0
 800988e:	77fb      	strb	r3, [r7, #31]
 8009890:	e118      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009892:	2302      	movs	r3, #2
 8009894:	77fb      	strb	r3, [r7, #31]
 8009896:	e115      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009898:	2304      	movs	r3, #4
 800989a:	77fb      	strb	r3, [r7, #31]
 800989c:	e112      	b.n	8009ac4 <UART_SetConfig+0x348>
 800989e:	2308      	movs	r3, #8
 80098a0:	77fb      	strb	r3, [r7, #31]
 80098a2:	e10f      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098a4:	2310      	movs	r3, #16
 80098a6:	77fb      	strb	r3, [r7, #31]
 80098a8:	e10c      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a68      	ldr	r2, [pc, #416]	; (8009a50 <UART_SetConfig+0x2d4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d120      	bne.n	80098f6 <UART_SetConfig+0x17a>
 80098b4:	4b64      	ldr	r3, [pc, #400]	; (8009a48 <UART_SetConfig+0x2cc>)
 80098b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098be:	2b30      	cmp	r3, #48	; 0x30
 80098c0:	d013      	beq.n	80098ea <UART_SetConfig+0x16e>
 80098c2:	2b30      	cmp	r3, #48	; 0x30
 80098c4:	d814      	bhi.n	80098f0 <UART_SetConfig+0x174>
 80098c6:	2b20      	cmp	r3, #32
 80098c8:	d009      	beq.n	80098de <UART_SetConfig+0x162>
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	d810      	bhi.n	80098f0 <UART_SetConfig+0x174>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <UART_SetConfig+0x15c>
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d006      	beq.n	80098e4 <UART_SetConfig+0x168>
 80098d6:	e00b      	b.n	80098f0 <UART_SetConfig+0x174>
 80098d8:	2300      	movs	r3, #0
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e0f2      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098de:	2302      	movs	r3, #2
 80098e0:	77fb      	strb	r3, [r7, #31]
 80098e2:	e0ef      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098e4:	2304      	movs	r3, #4
 80098e6:	77fb      	strb	r3, [r7, #31]
 80098e8:	e0ec      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098ea:	2308      	movs	r3, #8
 80098ec:	77fb      	strb	r3, [r7, #31]
 80098ee:	e0e9      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098f0:	2310      	movs	r3, #16
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e0e6      	b.n	8009ac4 <UART_SetConfig+0x348>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a56      	ldr	r2, [pc, #344]	; (8009a54 <UART_SetConfig+0x2d8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d120      	bne.n	8009942 <UART_SetConfig+0x1c6>
 8009900:	4b51      	ldr	r3, [pc, #324]	; (8009a48 <UART_SetConfig+0x2cc>)
 8009902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800990a:	2bc0      	cmp	r3, #192	; 0xc0
 800990c:	d013      	beq.n	8009936 <UART_SetConfig+0x1ba>
 800990e:	2bc0      	cmp	r3, #192	; 0xc0
 8009910:	d814      	bhi.n	800993c <UART_SetConfig+0x1c0>
 8009912:	2b80      	cmp	r3, #128	; 0x80
 8009914:	d009      	beq.n	800992a <UART_SetConfig+0x1ae>
 8009916:	2b80      	cmp	r3, #128	; 0x80
 8009918:	d810      	bhi.n	800993c <UART_SetConfig+0x1c0>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <UART_SetConfig+0x1a8>
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	d006      	beq.n	8009930 <UART_SetConfig+0x1b4>
 8009922:	e00b      	b.n	800993c <UART_SetConfig+0x1c0>
 8009924:	2300      	movs	r3, #0
 8009926:	77fb      	strb	r3, [r7, #31]
 8009928:	e0cc      	b.n	8009ac4 <UART_SetConfig+0x348>
 800992a:	2302      	movs	r3, #2
 800992c:	77fb      	strb	r3, [r7, #31]
 800992e:	e0c9      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009930:	2304      	movs	r3, #4
 8009932:	77fb      	strb	r3, [r7, #31]
 8009934:	e0c6      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009936:	2308      	movs	r3, #8
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e0c3      	b.n	8009ac4 <UART_SetConfig+0x348>
 800993c:	2310      	movs	r3, #16
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e0c0      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a44      	ldr	r2, [pc, #272]	; (8009a58 <UART_SetConfig+0x2dc>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d125      	bne.n	8009998 <UART_SetConfig+0x21c>
 800994c:	4b3e      	ldr	r3, [pc, #248]	; (8009a48 <UART_SetConfig+0x2cc>)
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800995a:	d017      	beq.n	800998c <UART_SetConfig+0x210>
 800995c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009960:	d817      	bhi.n	8009992 <UART_SetConfig+0x216>
 8009962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009966:	d00b      	beq.n	8009980 <UART_SetConfig+0x204>
 8009968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800996c:	d811      	bhi.n	8009992 <UART_SetConfig+0x216>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <UART_SetConfig+0x1fe>
 8009972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009976:	d006      	beq.n	8009986 <UART_SetConfig+0x20a>
 8009978:	e00b      	b.n	8009992 <UART_SetConfig+0x216>
 800997a:	2300      	movs	r3, #0
 800997c:	77fb      	strb	r3, [r7, #31]
 800997e:	e0a1      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009980:	2302      	movs	r3, #2
 8009982:	77fb      	strb	r3, [r7, #31]
 8009984:	e09e      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009986:	2304      	movs	r3, #4
 8009988:	77fb      	strb	r3, [r7, #31]
 800998a:	e09b      	b.n	8009ac4 <UART_SetConfig+0x348>
 800998c:	2308      	movs	r3, #8
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e098      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009992:	2310      	movs	r3, #16
 8009994:	77fb      	strb	r3, [r7, #31]
 8009996:	e095      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a2f      	ldr	r2, [pc, #188]	; (8009a5c <UART_SetConfig+0x2e0>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d125      	bne.n	80099ee <UART_SetConfig+0x272>
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <UART_SetConfig+0x2cc>)
 80099a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099b0:	d017      	beq.n	80099e2 <UART_SetConfig+0x266>
 80099b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099b6:	d817      	bhi.n	80099e8 <UART_SetConfig+0x26c>
 80099b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099bc:	d00b      	beq.n	80099d6 <UART_SetConfig+0x25a>
 80099be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c2:	d811      	bhi.n	80099e8 <UART_SetConfig+0x26c>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <UART_SetConfig+0x254>
 80099c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099cc:	d006      	beq.n	80099dc <UART_SetConfig+0x260>
 80099ce:	e00b      	b.n	80099e8 <UART_SetConfig+0x26c>
 80099d0:	2301      	movs	r3, #1
 80099d2:	77fb      	strb	r3, [r7, #31]
 80099d4:	e076      	b.n	8009ac4 <UART_SetConfig+0x348>
 80099d6:	2302      	movs	r3, #2
 80099d8:	77fb      	strb	r3, [r7, #31]
 80099da:	e073      	b.n	8009ac4 <UART_SetConfig+0x348>
 80099dc:	2304      	movs	r3, #4
 80099de:	77fb      	strb	r3, [r7, #31]
 80099e0:	e070      	b.n	8009ac4 <UART_SetConfig+0x348>
 80099e2:	2308      	movs	r3, #8
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	e06d      	b.n	8009ac4 <UART_SetConfig+0x348>
 80099e8:	2310      	movs	r3, #16
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e06a      	b.n	8009ac4 <UART_SetConfig+0x348>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <UART_SetConfig+0x2e4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d138      	bne.n	8009a6a <UART_SetConfig+0x2ee>
 80099f8:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <UART_SetConfig+0x2cc>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a06:	d017      	beq.n	8009a38 <UART_SetConfig+0x2bc>
 8009a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a0c:	d82a      	bhi.n	8009a64 <UART_SetConfig+0x2e8>
 8009a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a12:	d00b      	beq.n	8009a2c <UART_SetConfig+0x2b0>
 8009a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a18:	d824      	bhi.n	8009a64 <UART_SetConfig+0x2e8>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <UART_SetConfig+0x2aa>
 8009a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a22:	d006      	beq.n	8009a32 <UART_SetConfig+0x2b6>
 8009a24:	e01e      	b.n	8009a64 <UART_SetConfig+0x2e8>
 8009a26:	2300      	movs	r3, #0
 8009a28:	77fb      	strb	r3, [r7, #31]
 8009a2a:	e04b      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	77fb      	strb	r3, [r7, #31]
 8009a30:	e048      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009a32:	2304      	movs	r3, #4
 8009a34:	77fb      	strb	r3, [r7, #31]
 8009a36:	e045      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009a38:	2308      	movs	r3, #8
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e042      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009a3e:	bf00      	nop
 8009a40:	efff69f3 	.word	0xefff69f3
 8009a44:	40011000 	.word	0x40011000
 8009a48:	40023800 	.word	0x40023800
 8009a4c:	40004400 	.word	0x40004400
 8009a50:	40004800 	.word	0x40004800
 8009a54:	40004c00 	.word	0x40004c00
 8009a58:	40005000 	.word	0x40005000
 8009a5c:	40011400 	.word	0x40011400
 8009a60:	40007800 	.word	0x40007800
 8009a64:	2310      	movs	r3, #16
 8009a66:	77fb      	strb	r3, [r7, #31]
 8009a68:	e02c      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a72      	ldr	r2, [pc, #456]	; (8009c38 <UART_SetConfig+0x4bc>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d125      	bne.n	8009ac0 <UART_SetConfig+0x344>
 8009a74:	4b71      	ldr	r3, [pc, #452]	; (8009c3c <UART_SetConfig+0x4c0>)
 8009a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a82:	d017      	beq.n	8009ab4 <UART_SetConfig+0x338>
 8009a84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a88:	d817      	bhi.n	8009aba <UART_SetConfig+0x33e>
 8009a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a8e:	d00b      	beq.n	8009aa8 <UART_SetConfig+0x32c>
 8009a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a94:	d811      	bhi.n	8009aba <UART_SetConfig+0x33e>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <UART_SetConfig+0x326>
 8009a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a9e:	d006      	beq.n	8009aae <UART_SetConfig+0x332>
 8009aa0:	e00b      	b.n	8009aba <UART_SetConfig+0x33e>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	77fb      	strb	r3, [r7, #31]
 8009aa6:	e00d      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	77fb      	strb	r3, [r7, #31]
 8009aac:	e00a      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009aae:	2304      	movs	r3, #4
 8009ab0:	77fb      	strb	r3, [r7, #31]
 8009ab2:	e007      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	77fb      	strb	r3, [r7, #31]
 8009ab8:	e004      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009aba:	2310      	movs	r3, #16
 8009abc:	77fb      	strb	r3, [r7, #31]
 8009abe:	e001      	b.n	8009ac4 <UART_SetConfig+0x348>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009acc:	d15b      	bne.n	8009b86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009ace:	7ffb      	ldrb	r3, [r7, #31]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d828      	bhi.n	8009b26 <UART_SetConfig+0x3aa>
 8009ad4:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <UART_SetConfig+0x360>)
 8009ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ada:	bf00      	nop
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b09 	.word	0x08009b09
 8009ae4:	08009b11 	.word	0x08009b11
 8009ae8:	08009b27 	.word	0x08009b27
 8009aec:	08009b17 	.word	0x08009b17
 8009af0:	08009b27 	.word	0x08009b27
 8009af4:	08009b27 	.word	0x08009b27
 8009af8:	08009b27 	.word	0x08009b27
 8009afc:	08009b1f 	.word	0x08009b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b00:	f7fd ff9e 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009b04:	61b8      	str	r0, [r7, #24]
        break;
 8009b06:	e013      	b.n	8009b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b08:	f7fd ffae 	bl	8007a68 <HAL_RCC_GetPCLK2Freq>
 8009b0c:	61b8      	str	r0, [r7, #24]
        break;
 8009b0e:	e00f      	b.n	8009b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b10:	4b4b      	ldr	r3, [pc, #300]	; (8009c40 <UART_SetConfig+0x4c4>)
 8009b12:	61bb      	str	r3, [r7, #24]
        break;
 8009b14:	e00c      	b.n	8009b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b16:	f7fd fe81 	bl	800781c <HAL_RCC_GetSysClockFreq>
 8009b1a:	61b8      	str	r0, [r7, #24]
        break;
 8009b1c:	e008      	b.n	8009b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b22:	61bb      	str	r3, [r7, #24]
        break;
 8009b24:	e004      	b.n	8009b30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8009b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d074      	beq.n	8009c20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	005a      	lsls	r2, r3, #1
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d916      	bls.n	8009b80 <UART_SetConfig+0x404>
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b58:	d212      	bcs.n	8009b80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f023 030f 	bic.w	r3, r3, #15
 8009b62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	89fb      	ldrh	r3, [r7, #14]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	89fa      	ldrh	r2, [r7, #14]
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	e04f      	b.n	8009c20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	77bb      	strb	r3, [r7, #30]
 8009b84:	e04c      	b.n	8009c20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b86:	7ffb      	ldrb	r3, [r7, #31]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d828      	bhi.n	8009bde <UART_SetConfig+0x462>
 8009b8c:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <UART_SetConfig+0x418>)
 8009b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b92:	bf00      	nop
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bc1 	.word	0x08009bc1
 8009b9c:	08009bc9 	.word	0x08009bc9
 8009ba0:	08009bdf 	.word	0x08009bdf
 8009ba4:	08009bcf 	.word	0x08009bcf
 8009ba8:	08009bdf 	.word	0x08009bdf
 8009bac:	08009bdf 	.word	0x08009bdf
 8009bb0:	08009bdf 	.word	0x08009bdf
 8009bb4:	08009bd7 	.word	0x08009bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb8:	f7fd ff42 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009bbc:	61b8      	str	r0, [r7, #24]
        break;
 8009bbe:	e013      	b.n	8009be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bc0:	f7fd ff52 	bl	8007a68 <HAL_RCC_GetPCLK2Freq>
 8009bc4:	61b8      	str	r0, [r7, #24]
        break;
 8009bc6:	e00f      	b.n	8009be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc8:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <UART_SetConfig+0x4c4>)
 8009bca:	61bb      	str	r3, [r7, #24]
        break;
 8009bcc:	e00c      	b.n	8009be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bce:	f7fd fe25 	bl	800781c <HAL_RCC_GetSysClockFreq>
 8009bd2:	61b8      	str	r0, [r7, #24]
        break;
 8009bd4:	e008      	b.n	8009be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bda:	61bb      	str	r3, [r7, #24]
        break;
 8009bdc:	e004      	b.n	8009be8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	77bb      	strb	r3, [r7, #30]
        break;
 8009be6:	bf00      	nop
    }

    if (pclk != 0U)
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d018      	beq.n	8009c20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	085a      	lsrs	r2, r3, #1
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	441a      	add	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b0f      	cmp	r3, #15
 8009c06:	d909      	bls.n	8009c1c <UART_SetConfig+0x4a0>
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0e:	d205      	bcs.n	8009c1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60da      	str	r2, [r3, #12]
 8009c1a:	e001      	b.n	8009c20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009c2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40007c00 	.word	0x40007c00
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	00f42400 	.word	0x00f42400

08009c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01a      	beq.n	8009d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d42:	d10a      	bne.n	8009d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	605a      	str	r2, [r3, #4]
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d98:	f7fa f93a 	bl	8004010 <HAL_GetTick>
 8009d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d10e      	bne.n	8009dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f831 	bl	8009e22 <UART_WaitOnFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e027      	b.n	8009e1a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d10e      	bne.n	8009df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f81b 	bl	8009e22 <UART_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e011      	b.n	8009e1a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b09c      	sub	sp, #112	; 0x70
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	603b      	str	r3, [r7, #0]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e32:	e0a7      	b.n	8009f84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e3a:	f000 80a3 	beq.w	8009f84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e3e:	f7fa f8e7 	bl	8004010 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d302      	bcc.n	8009e54 <UART_WaitOnFlagUntilTimeout+0x32>
 8009e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d13f      	bne.n	8009ed4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e68:	667b      	str	r3, [r7, #100]	; 0x64
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e6      	bne.n	8009e54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ea6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e5      	bne.n	8009e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2220      	movs	r2, #32
 8009ebe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e068      	b.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0304 	and.w	r3, r3, #4
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d050      	beq.n	8009f84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ef0:	d148      	bne.n	8009f84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009efa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e6      	bne.n	8009efc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f023 0301 	bic.w	r3, r3, #1
 8009f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f4e:	623a      	str	r2, [r7, #32]
 8009f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	69f9      	ldr	r1, [r7, #28]
 8009f54:	6a3a      	ldr	r2, [r7, #32]
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e5      	bne.n	8009f2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2220      	movs	r2, #32
 8009f66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e010      	b.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	69da      	ldr	r2, [r3, #28]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	bf0c      	ite	eq
 8009f94:	2301      	moveq	r3, #1
 8009f96:	2300      	movne	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	f43f af48 	beq.w	8009e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3770      	adds	r7, #112	; 0x70
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b096      	sub	sp, #88	; 0x58
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	88fa      	ldrh	r2, [r7, #6]
 8009fc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2222      	movs	r2, #34	; 0x22
 8009fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d028      	beq.n	800a036 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe8:	4a3e      	ldr	r2, [pc, #248]	; (800a0e4 <UART_Start_Receive_DMA+0x134>)
 8009fea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff0:	4a3d      	ldr	r2, [pc, #244]	; (800a0e8 <UART_Start_Receive_DMA+0x138>)
 8009ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff8:	4a3c      	ldr	r2, [pc, #240]	; (800a0ec <UART_Start_Receive_DMA+0x13c>)
 8009ffa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a000:	2200      	movs	r2, #0
 800a002:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3324      	adds	r3, #36	; 0x24
 800a00e:	4619      	mov	r1, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a014:	461a      	mov	r2, r3
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	f7fb f816 	bl	8005048 <HAL_DMA_Start_IT>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d009      	beq.n	800a036 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2210      	movs	r2, #16
 800a026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e051      	b.n	800a0da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d018      	beq.n	800a070 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a052:	657b      	str	r3, [r7, #84]	; 0x54
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a05c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a05e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3308      	adds	r3, #8
 800a076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	653b      	str	r3, [r7, #80]	; 0x50
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3308      	adds	r3, #8
 800a08e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a090:	637a      	str	r2, [r7, #52]	; 0x34
 800a092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e5      	bne.n	800a070 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c4:	623a      	str	r2, [r7, #32]
 800a0c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	69f9      	ldr	r1, [r7, #28]
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e5      	bne.n	800a0a4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3758      	adds	r7, #88	; 0x58
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800a2b7 	.word	0x0800a2b7
 800a0e8:	0800a3df 	.word	0x0800a3df
 800a0ec:	0800a41d 	.word	0x0800a41d

0800a0f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b089      	sub	sp, #36	; 0x24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	60bb      	str	r3, [r7, #8]
   return(result);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	6979      	ldr	r1, [r7, #20]
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	613b      	str	r3, [r7, #16]
   return(result);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e6      	bne.n	800a0f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a130:	bf00      	nop
 800a132:	3724      	adds	r7, #36	; 0x24
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b095      	sub	sp, #84	; 0x54
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a162:	643b      	str	r3, [r7, #64]	; 0x40
 800a164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e6      	bne.n	800a144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	e853 3f00 	ldrex	r3, [r3]
 800a184:	61fb      	str	r3, [r7, #28]
   return(result);
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f023 0301 	bic.w	r3, r3, #1
 800a18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3308      	adds	r3, #8
 800a194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a196:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1e5      	bne.n	800a176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d118      	bne.n	800a1e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f023 0310 	bic.w	r3, r3, #16
 800a1c6:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6979      	ldr	r1, [r7, #20]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e6      	bne.n	800a1b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a1f8:	bf00      	nop
 800a1fa:	3754      	adds	r7, #84	; 0x54
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b090      	sub	sp, #64	; 0x40
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a210:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21a:	d037      	beq.n	800a28c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21e:	2200      	movs	r2, #0
 800a220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3308      	adds	r3, #8
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	e853 3f00 	ldrex	r3, [r3]
 800a232:	623b      	str	r3, [r7, #32]
   return(result);
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a23a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3308      	adds	r3, #8
 800a242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a244:	633a      	str	r2, [r7, #48]	; 0x30
 800a246:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a24a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e5      	bne.n	800a224 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	60fb      	str	r3, [r7, #12]
   return(result);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a26c:	637b      	str	r3, [r7, #52]	; 0x34
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a276:	61fb      	str	r3, [r7, #28]
 800a278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	69b9      	ldr	r1, [r7, #24]
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	617b      	str	r3, [r7, #20]
   return(result);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e6      	bne.n	800a258 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a28a:	e002      	b.n	800a292 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a28c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a28e:	f7ff fa2d 	bl	80096ec <HAL_UART_TxCpltCallback>
}
 800a292:	bf00      	nop
 800a294:	3740      	adds	r7, #64	; 0x40
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fa29 	bl	8009700 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ae:	bf00      	nop
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b09c      	sub	sp, #112	; 0x70
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2cc:	d071      	beq.n	800a3b2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3308      	adds	r3, #8
 800a30e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31a:	f023 0301 	bic.w	r3, r3, #1
 800a31e:	667b      	str	r3, [r7, #100]	; 0x64
 800a320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a328:	647a      	str	r2, [r7, #68]	; 0x44
 800a32a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a32e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e5      	bne.n	800a308 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a33c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3308      	adds	r3, #8
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	623b      	str	r3, [r7, #32]
   return(result);
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a352:	663b      	str	r3, [r7, #96]	; 0x60
 800a354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3308      	adds	r3, #8
 800a35a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a35c:	633a      	str	r2, [r7, #48]	; 0x30
 800a35e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e5      	bne.n	800a33c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a372:	2220      	movs	r2, #32
 800a374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d118      	bne.n	800a3b2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f023 0310 	bic.w	r3, r3, #16
 800a394:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a39e:	61fb      	str	r3, [r7, #28]
 800a3a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	69b9      	ldr	r1, [r7, #24]
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	e841 2300 	strex	r3, r2, [r1]
 800a3aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e6      	bne.n	800a380 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d107      	bne.n	800a3d0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3ca:	f7ff f9c1 	bl	8009750 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3ce:	e002      	b.n	800a3d6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a3d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3d2:	f7ff f99f 	bl	8009714 <HAL_UART_RxCpltCallback>
}
 800a3d6:	bf00      	nop
 800a3d8:	3770      	adds	r7, #112	; 0x70
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d109      	bne.n	800a40e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	b29b      	uxth	r3, r3
 800a404:	4619      	mov	r1, r3
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff f9a2 	bl	8009750 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a40c:	e002      	b.n	800a414 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7ff f98a 	bl	8009728 <HAL_UART_RxHalfCpltCallback>
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a42e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a436:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a442:	2b80      	cmp	r3, #128	; 0x80
 800a444:	d109      	bne.n	800a45a <UART_DMAError+0x3e>
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b21      	cmp	r3, #33	; 0x21
 800a44a:	d106      	bne.n	800a45a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a454:	6978      	ldr	r0, [r7, #20]
 800a456:	f7ff fe4b 	bl	800a0f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	d109      	bne.n	800a47c <UART_DMAError+0x60>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b22      	cmp	r3, #34	; 0x22
 800a46c:	d106      	bne.n	800a47c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2200      	movs	r2, #0
 800a472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f7ff fe60 	bl	800a13c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a482:	f043 0210 	orr.w	r2, r3, #16
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a48c:	6978      	ldr	r0, [r7, #20]
 800a48e:	f7ff f955 	bl	800973c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a492:	bf00      	nop
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff f93f 	bl	800973c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b088      	sub	sp, #32
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	e853 3f00 	ldrex	r3, [r3]
 800a4da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	61bb      	str	r3, [r7, #24]
 800a4ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f0:	6979      	ldr	r1, [r7, #20]
 800a4f2:	69ba      	ldr	r2, [r7, #24]
 800a4f4:	e841 2300 	strex	r3, r2, [r1]
 800a4f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e6      	bne.n	800a4ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff f8ed 	bl	80096ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a512:	bf00      	nop
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a51c:	b084      	sub	sp, #16
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	f107 001c 	add.w	r0, r7, #28
 800a52a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	2b01      	cmp	r3, #1
 800a532:	d120      	bne.n	800a576 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	4b20      	ldr	r3, [pc, #128]	; (800a5c8 <USB_CoreInit+0xac>)
 800a546:	4013      	ands	r3, r2
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d105      	bne.n	800a56a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 fbee 	bl	800bd4c <USB_CoreReset>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
 800a574:	e010      	b.n	800a598 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fbe2 	bl	800bd4c <USB_CoreReset>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d10b      	bne.n	800a5b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f043 0206 	orr.w	r2, r3, #6
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f043 0220 	orr.w	r2, r3, #32
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5c2:	b004      	add	sp, #16
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	ffbdffbf 	.word	0xffbdffbf

0800a5cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d165      	bne.n	800a6ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	4a41      	ldr	r2, [pc, #260]	; (800a6e8 <USB_SetTurnaroundTime+0x11c>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d906      	bls.n	800a5f6 <USB_SetTurnaroundTime+0x2a>
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4a40      	ldr	r2, [pc, #256]	; (800a6ec <USB_SetTurnaroundTime+0x120>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d202      	bcs.n	800a5f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5f0:	230f      	movs	r3, #15
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e062      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4a3c      	ldr	r2, [pc, #240]	; (800a6ec <USB_SetTurnaroundTime+0x120>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d306      	bcc.n	800a60c <USB_SetTurnaroundTime+0x40>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4a3b      	ldr	r2, [pc, #236]	; (800a6f0 <USB_SetTurnaroundTime+0x124>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d202      	bcs.n	800a60c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a606:	230e      	movs	r3, #14
 800a608:	617b      	str	r3, [r7, #20]
 800a60a:	e057      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4a38      	ldr	r2, [pc, #224]	; (800a6f0 <USB_SetTurnaroundTime+0x124>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d306      	bcc.n	800a622 <USB_SetTurnaroundTime+0x56>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4a37      	ldr	r2, [pc, #220]	; (800a6f4 <USB_SetTurnaroundTime+0x128>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d202      	bcs.n	800a622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a61c:	230d      	movs	r3, #13
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e04c      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	4a33      	ldr	r2, [pc, #204]	; (800a6f4 <USB_SetTurnaroundTime+0x128>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d306      	bcc.n	800a638 <USB_SetTurnaroundTime+0x6c>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4a32      	ldr	r2, [pc, #200]	; (800a6f8 <USB_SetTurnaroundTime+0x12c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d802      	bhi.n	800a638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a632:	230c      	movs	r3, #12
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	e041      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	4a2f      	ldr	r2, [pc, #188]	; (800a6f8 <USB_SetTurnaroundTime+0x12c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d906      	bls.n	800a64e <USB_SetTurnaroundTime+0x82>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	4a2e      	ldr	r2, [pc, #184]	; (800a6fc <USB_SetTurnaroundTime+0x130>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d802      	bhi.n	800a64e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a648:	230b      	movs	r3, #11
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	e036      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	4a2a      	ldr	r2, [pc, #168]	; (800a6fc <USB_SetTurnaroundTime+0x130>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d906      	bls.n	800a664 <USB_SetTurnaroundTime+0x98>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4a29      	ldr	r2, [pc, #164]	; (800a700 <USB_SetTurnaroundTime+0x134>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d802      	bhi.n	800a664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a65e:	230a      	movs	r3, #10
 800a660:	617b      	str	r3, [r7, #20]
 800a662:	e02b      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	4a26      	ldr	r2, [pc, #152]	; (800a700 <USB_SetTurnaroundTime+0x134>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d906      	bls.n	800a67a <USB_SetTurnaroundTime+0xae>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4a25      	ldr	r2, [pc, #148]	; (800a704 <USB_SetTurnaroundTime+0x138>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d202      	bcs.n	800a67a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a674:	2309      	movs	r3, #9
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	e020      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	4a21      	ldr	r2, [pc, #132]	; (800a704 <USB_SetTurnaroundTime+0x138>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d306      	bcc.n	800a690 <USB_SetTurnaroundTime+0xc4>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	4a20      	ldr	r2, [pc, #128]	; (800a708 <USB_SetTurnaroundTime+0x13c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d802      	bhi.n	800a690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a68a:	2308      	movs	r3, #8
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e015      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4a1d      	ldr	r2, [pc, #116]	; (800a708 <USB_SetTurnaroundTime+0x13c>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d906      	bls.n	800a6a6 <USB_SetTurnaroundTime+0xda>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4a1c      	ldr	r2, [pc, #112]	; (800a70c <USB_SetTurnaroundTime+0x140>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d202      	bcs.n	800a6a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a6a0:	2307      	movs	r3, #7
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	e00a      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a6a6:	2306      	movs	r3, #6
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e007      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a6b2:	2309      	movs	r3, #9
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e001      	b.n	800a6bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6b8:	2309      	movs	r3, #9
 800a6ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	029b      	lsls	r3, r3, #10
 800a6d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	00d8acbf 	.word	0x00d8acbf
 800a6ec:	00e4e1c0 	.word	0x00e4e1c0
 800a6f0:	00f42400 	.word	0x00f42400
 800a6f4:	01067380 	.word	0x01067380
 800a6f8:	011a499f 	.word	0x011a499f
 800a6fc:	01312cff 	.word	0x01312cff
 800a700:	014ca43f 	.word	0x014ca43f
 800a704:	016e3600 	.word	0x016e3600
 800a708:	01a6ab1f 	.word	0x01a6ab1f
 800a70c:	01e84800 	.word	0x01e84800

0800a710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f043 0201 	orr.w	r2, r3, #1
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f023 0201 	bic.w	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d115      	bne.n	800a7a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a782:	2001      	movs	r0, #1
 800a784:	f7f9 fc50 	bl	8004028 <HAL_Delay>
      ms++;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 fa4b 	bl	800bc2a <USB_GetMode>
 800a794:	4603      	mov	r3, r0
 800a796:	2b01      	cmp	r3, #1
 800a798:	d01e      	beq.n	800a7d8 <USB_SetCurrentMode+0x84>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b31      	cmp	r3, #49	; 0x31
 800a79e:	d9f0      	bls.n	800a782 <USB_SetCurrentMode+0x2e>
 800a7a0:	e01a      	b.n	800a7d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d115      	bne.n	800a7d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7b4:	2001      	movs	r0, #1
 800a7b6:	f7f9 fc37 	bl	8004028 <HAL_Delay>
      ms++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f001 fa32 	bl	800bc2a <USB_GetMode>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <USB_SetCurrentMode+0x84>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b31      	cmp	r3, #49	; 0x31
 800a7d0:	d9f0      	bls.n	800a7b4 <USB_SetCurrentMode+0x60>
 800a7d2:	e001      	b.n	800a7d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e005      	b.n	800a7e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b32      	cmp	r3, #50	; 0x32
 800a7dc:	d101      	bne.n	800a7e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b086      	sub	sp, #24
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a7fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a806:	2300      	movs	r3, #0
 800a808:	613b      	str	r3, [r7, #16]
 800a80a:	e009      	b.n	800a820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	3340      	adds	r3, #64	; 0x40
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	2200      	movs	r2, #0
 800a818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3301      	adds	r3, #1
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b0e      	cmp	r3, #14
 800a824:	d9f2      	bls.n	800a80c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d11c      	bne.n	800a866 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a83a:	f043 0302 	orr.w	r3, r3, #2
 800a83e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e005      	b.n	800a872 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a878:	461a      	mov	r2, r3
 800a87a:	2300      	movs	r3, #0
 800a87c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a884:	4619      	mov	r1, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88c:	461a      	mov	r2, r3
 800a88e:	680b      	ldr	r3, [r1, #0]
 800a890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	2b01      	cmp	r3, #1
 800a896:	d10c      	bne.n	800a8b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d104      	bne.n	800a8a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a89e:	2100      	movs	r1, #0
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f965 	bl	800ab70 <USB_SetDevSpeed>
 800a8a6:	e008      	b.n	800a8ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f960 	bl	800ab70 <USB_SetDevSpeed>
 800a8b0:	e003      	b.n	800a8ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8b2:	2103      	movs	r1, #3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f95b 	bl	800ab70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8ba:	2110      	movs	r1, #16
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f8f3 	bl	800aaa8 <USB_FlushTxFifo>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f91f 	bl	800ab10 <USB_FlushRxFifo>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a900:	2300      	movs	r3, #0
 800a902:	613b      	str	r3, [r7, #16]
 800a904:	e043      	b.n	800a98e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a91c:	d118      	bne.n	800a950 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10a      	bne.n	800a93a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a930:	461a      	mov	r2, r3
 800a932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	e013      	b.n	800a962 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	015a      	lsls	r2, r3, #5
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a946:	461a      	mov	r2, r3
 800a948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	e008      	b.n	800a962 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a95c:	461a      	mov	r2, r3
 800a95e:	2300      	movs	r3, #0
 800a960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96e:	461a      	mov	r2, r3
 800a970:	2300      	movs	r3, #0
 800a972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a980:	461a      	mov	r2, r3
 800a982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	3301      	adds	r3, #1
 800a98c:	613b      	str	r3, [r7, #16]
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	429a      	cmp	r2, r3
 800a994:	d3b7      	bcc.n	800a906 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a996:	2300      	movs	r3, #0
 800a998:	613b      	str	r3, [r7, #16]
 800a99a:	e043      	b.n	800aa24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9b2:	d118      	bne.n	800a9e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	e013      	b.n	800a9f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9dc:	461a      	mov	r2, r3
 800a9de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	e008      	b.n	800a9f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa04:	461a      	mov	r2, r3
 800aa06:	2300      	movs	r3, #0
 800aa08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa16:	461a      	mov	r2, r3
 800aa18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3301      	adds	r3, #1
 800aa22:	613b      	str	r3, [r7, #16]
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d3b7      	bcc.n	800a99c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	f043 0210 	orr.w	r2, r3, #16
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699a      	ldr	r2, [r3, #24]
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <USB_DevInit+0x2b4>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	f043 0208 	orr.w	r2, r3, #8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d105      	bne.n	800aa90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	4b06      	ldr	r3, [pc, #24]	; (800aaa4 <USB_DevInit+0x2b8>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa9c:	b004      	add	sp, #16
 800aa9e:	4770      	bx	lr
 800aaa0:	803c3800 	.word	0x803c3800
 800aaa4:	40000004 	.word	0x40000004

0800aaa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4a13      	ldr	r2, [pc, #76]	; (800ab0c <USB_FlushTxFifo+0x64>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d901      	bls.n	800aac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e01b      	b.n	800ab00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	daf2      	bge.n	800aab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	019b      	lsls	r3, r3, #6
 800aad8:	f043 0220 	orr.w	r2, r3, #32
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	4a08      	ldr	r2, [pc, #32]	; (800ab0c <USB_FlushTxFifo+0x64>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d901      	bls.n	800aaf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e006      	b.n	800ab00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f003 0320 	and.w	r3, r3, #32
 800aafa:	2b20      	cmp	r3, #32
 800aafc:	d0f0      	beq.n	800aae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	00030d40 	.word	0x00030d40

0800ab10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4a11      	ldr	r2, [pc, #68]	; (800ab6c <USB_FlushRxFifo+0x5c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d901      	bls.n	800ab2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e018      	b.n	800ab60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	daf2      	bge.n	800ab1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2210      	movs	r2, #16
 800ab3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3301      	adds	r3, #1
 800ab44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4a08      	ldr	r2, [pc, #32]	; (800ab6c <USB_FlushRxFifo+0x5c>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d901      	bls.n	800ab52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e006      	b.n	800ab60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f003 0310 	and.w	r3, r3, #16
 800ab5a:	2b10      	cmp	r3, #16
 800ab5c:	d0f0      	beq.n	800ab40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	00030d40 	.word	0x00030d40

0800ab70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab90:	4313      	orrs	r3, r2
 800ab92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b087      	sub	sp, #28
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	f003 0306 	and.w	r3, r3, #6
 800abba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800abc2:	2300      	movs	r3, #0
 800abc4:	75fb      	strb	r3, [r7, #23]
 800abc6:	e00a      	b.n	800abde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d002      	beq.n	800abd4 <USB_GetDevSpeed+0x32>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b06      	cmp	r3, #6
 800abd2:	d102      	bne.n	800abda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800abd4:	2302      	movs	r3, #2
 800abd6:	75fb      	strb	r3, [r7, #23]
 800abd8:	e001      	b.n	800abde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800abda:	230f      	movs	r3, #15
 800abdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800abde:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	371c      	adds	r7, #28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	785b      	ldrb	r3, [r3, #1]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d139      	bne.n	800ac7c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0e:	69da      	ldr	r2, [r3, #28]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 030f 	and.w	r3, r3, #15
 800ac18:	2101      	movs	r1, #1
 800ac1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	68f9      	ldr	r1, [r7, #12]
 800ac22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac26:	4313      	orrs	r3, r2
 800ac28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d153      	bne.n	800ace8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	791b      	ldrb	r3, [r3, #4]
 800ac5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	059b      	lsls	r3, r3, #22
 800ac62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	0159      	lsls	r1, r3, #5
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac72:	4619      	mov	r1, r3
 800ac74:	4b20      	ldr	r3, [pc, #128]	; (800acf8 <USB_ActivateEndpoint+0x10c>)
 800ac76:	4313      	orrs	r3, r2
 800ac78:	600b      	str	r3, [r1, #0]
 800ac7a:	e035      	b.n	800ace8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac92:	041b      	lsls	r3, r3, #16
 800ac94:	68f9      	ldr	r1, [r7, #12]
 800ac96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d119      	bne.n	800ace8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	791b      	ldrb	r3, [r3, #4]
 800acce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acd0:	430b      	orrs	r3, r1
 800acd2:	431a      	orrs	r2, r3
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	0159      	lsls	r1, r3, #5
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	440b      	add	r3, r1
 800acdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace0:	4619      	mov	r1, r3
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <USB_ActivateEndpoint+0x10c>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	10008000 	.word	0x10008000

0800acfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	785b      	ldrb	r3, [r3, #1]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d161      	bne.n	800addc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad2e:	d11f      	bne.n	800ad70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	0151      	lsls	r1, r2, #5
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	440a      	add	r2, r1
 800ad46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	2101      	movs	r1, #1
 800ad82:	fa01 f303 	lsl.w	r3, r1, r3
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	43db      	mvns	r3, r3
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad90:	4013      	ands	r3, r2
 800ad92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9a:	69da      	ldr	r2, [r3, #28]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 030f 	and.w	r3, r3, #15
 800ada4:	2101      	movs	r1, #1
 800ada6:	fa01 f303 	lsl.w	r3, r1, r3
 800adaa:	b29b      	uxth	r3, r3
 800adac:	43db      	mvns	r3, r3
 800adae:	68f9      	ldr	r1, [r7, #12]
 800adb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adb4:	4013      	ands	r3, r2
 800adb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	0159      	lsls	r1, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	440b      	add	r3, r1
 800adce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add2:	4619      	mov	r1, r3
 800add4:	4b35      	ldr	r3, [pc, #212]	; (800aeac <USB_DeactivateEndpoint+0x1b0>)
 800add6:	4013      	ands	r3, r2
 800add8:	600b      	str	r3, [r1, #0]
 800adda:	e060      	b.n	800ae9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adf2:	d11f      	bne.n	800ae34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	0151      	lsls	r1, r2, #5
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	440a      	add	r2, r1
 800ae0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	2101      	movs	r1, #1
 800ae46:	fa01 f303 	lsl.w	r3, r1, r3
 800ae4a:	041b      	lsls	r3, r3, #16
 800ae4c:	43db      	mvns	r3, r3
 800ae4e:	68f9      	ldr	r1, [r7, #12]
 800ae50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae54:	4013      	ands	r3, r2
 800ae56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae5e:	69da      	ldr	r2, [r3, #28]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	2101      	movs	r1, #1
 800ae6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae6e:	041b      	lsls	r3, r3, #16
 800ae70:	43db      	mvns	r3, r3
 800ae72:	68f9      	ldr	r1, [r7, #12]
 800ae74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae78:	4013      	ands	r3, r2
 800ae7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	0159      	lsls	r1, r3, #5
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	440b      	add	r3, r1
 800ae92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae96:	4619      	mov	r1, r3
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <USB_DeactivateEndpoint+0x1b4>)
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	ec337800 	.word	0xec337800
 800aeb0:	eff37800 	.word	0xeff37800

0800aeb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08a      	sub	sp, #40	; 0x28
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	4613      	mov	r3, r2
 800aec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	f040 8163 	bne.w	800b19c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d132      	bne.n	800af44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeea:	691a      	ldr	r2, [r3, #16]
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	0159      	lsls	r1, r3, #5
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	440b      	add	r3, r1
 800aef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef8:	4619      	mov	r1, r3
 800aefa:	4ba5      	ldr	r3, [pc, #660]	; (800b190 <USB_EPStartXfer+0x2dc>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2c:	691a      	ldr	r2, [r3, #16]
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	0159      	lsls	r1, r3, #5
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	440b      	add	r3, r1
 800af36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3a:	4619      	mov	r1, r3
 800af3c:	4b95      	ldr	r3, [pc, #596]	; (800b194 <USB_EPStartXfer+0x2e0>)
 800af3e:	4013      	ands	r3, r2
 800af40:	610b      	str	r3, [r1, #16]
 800af42:	e074      	b.n	800b02e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	0159      	lsls	r1, r3, #5
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	440b      	add	r3, r1
 800af5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5e:	4619      	mov	r1, r3
 800af60:	4b8c      	ldr	r3, [pc, #560]	; (800b194 <USB_EPStartXfer+0x2e0>)
 800af62:	4013      	ands	r3, r2
 800af64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af72:	691a      	ldr	r2, [r3, #16]
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	0159      	lsls	r1, r3, #5
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	440b      	add	r3, r1
 800af7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af80:	4619      	mov	r1, r3
 800af82:	4b83      	ldr	r3, [pc, #524]	; (800b190 <USB_EPStartXfer+0x2dc>)
 800af84:	4013      	ands	r3, r2
 800af86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6999      	ldr	r1, [r3, #24]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	440b      	add	r3, r1
 800afa0:	1e59      	subs	r1, r3, #1
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	fbb1 f3f3 	udiv	r3, r1, r3
 800afaa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afac:	4b7a      	ldr	r3, [pc, #488]	; (800b198 <USB_EPStartXfer+0x2e4>)
 800afae:	400b      	ands	r3, r1
 800afb0:	69b9      	ldr	r1, [r7, #24]
 800afb2:	0148      	lsls	r0, r1, #5
 800afb4:	69f9      	ldr	r1, [r7, #28]
 800afb6:	4401      	add	r1, r0
 800afb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afbc:	4313      	orrs	r3, r2
 800afbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afcc:	691a      	ldr	r2, [r3, #16]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afd6:	69b9      	ldr	r1, [r7, #24]
 800afd8:	0148      	lsls	r0, r1, #5
 800afda:	69f9      	ldr	r1, [r7, #28]
 800afdc:	4401      	add	r1, r0
 800afde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afe2:	4313      	orrs	r3, r2
 800afe4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	791b      	ldrb	r3, [r3, #4]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d11f      	bne.n	800b02e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	69fa      	ldr	r2, [r7, #28]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b008:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b00c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	0151      	lsls	r1, r2, #5
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	440a      	add	r2, r1
 800b024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b02c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d14b      	bne.n	800b0cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	461a      	mov	r2, r3
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	791b      	ldrb	r3, [r3, #4]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d128      	bne.n	800b0aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b064:	2b00      	cmp	r3, #0
 800b066:	d110      	bne.n	800b08a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	69fa      	ldr	r2, [r7, #28]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	e00f      	b.n	800b0aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	0151      	lsls	r1, r2, #5
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	440a      	add	r2, r1
 800b0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	e137      	b.n	800b33c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	0151      	lsls	r1, r2, #5
 800b0de:	69fa      	ldr	r2, [r7, #28]
 800b0e0:	440a      	add	r2, r1
 800b0e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d015      	beq.n	800b120 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 811f 	beq.w	800b33c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	2101      	movs	r1, #1
 800b110:	fa01 f303 	lsl.w	r3, r1, r3
 800b114:	69f9      	ldr	r1, [r7, #28]
 800b116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b11a:	4313      	orrs	r3, r2
 800b11c:	634b      	str	r3, [r1, #52]	; 0x34
 800b11e:	e10d      	b.n	800b33c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d110      	bne.n	800b152 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	0151      	lsls	r1, r2, #5
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	440a      	add	r2, r1
 800b146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	e00f      	b.n	800b172 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	0151      	lsls	r1, r2, #5
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	440a      	add	r2, r1
 800b168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b170:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	6919      	ldr	r1, [r3, #16]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	781a      	ldrb	r2, [r3, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	b298      	uxth	r0, r3
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	4603      	mov	r3, r0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 faea 	bl	800b760 <USB_WritePacket>
 800b18c:	e0d6      	b.n	800b33c <USB_EPStartXfer+0x488>
 800b18e:	bf00      	nop
 800b190:	e007ffff 	.word	0xe007ffff
 800b194:	fff80000 	.word	0xfff80000
 800b198:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a8:	691a      	ldr	r2, [r3, #16]
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	0159      	lsls	r1, r3, #5
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	440b      	add	r3, r1
 800b1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4b63      	ldr	r3, [pc, #396]	; (800b348 <USB_EPStartXfer+0x494>)
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	0159      	lsls	r1, r3, #5
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	440b      	add	r3, r1
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4b5c      	ldr	r3, [pc, #368]	; (800b34c <USB_EPStartXfer+0x498>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d123      	bne.n	800b230 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f4:	691a      	ldr	r2, [r3, #16]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1fe:	69b9      	ldr	r1, [r7, #24]
 800b200:	0148      	lsls	r0, r1, #5
 800b202:	69f9      	ldr	r1, [r7, #28]
 800b204:	4401      	add	r1, r0
 800b206:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b20a:	4313      	orrs	r3, r2
 800b20c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	015a      	lsls	r2, r3, #5
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	4413      	add	r3, r2
 800b216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	0151      	lsls	r1, r2, #5
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	440a      	add	r2, r1
 800b224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b22c:	6113      	str	r3, [r2, #16]
 800b22e:	e037      	b.n	800b2a0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	699a      	ldr	r2, [r3, #24]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	4413      	add	r3, r2
 800b23a:	1e5a      	subs	r2, r3, #1
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	fbb2 f3f3 	udiv	r3, r2, r3
 800b244:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	8afa      	ldrh	r2, [r7, #22]
 800b24c:	fb03 f202 	mul.w	r2, r3, r2
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	8afb      	ldrh	r3, [r7, #22]
 800b264:	04d9      	lsls	r1, r3, #19
 800b266:	4b3a      	ldr	r3, [pc, #232]	; (800b350 <USB_EPStartXfer+0x49c>)
 800b268:	400b      	ands	r3, r1
 800b26a:	69b9      	ldr	r1, [r7, #24]
 800b26c:	0148      	lsls	r0, r1, #5
 800b26e:	69f9      	ldr	r1, [r7, #28]
 800b270:	4401      	add	r1, r0
 800b272:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b276:	4313      	orrs	r3, r2
 800b278:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b290:	69b9      	ldr	r1, [r7, #24]
 800b292:	0148      	lsls	r0, r1, #5
 800b294:	69f9      	ldr	r1, [r7, #28]
 800b296:	4401      	add	r1, r0
 800b298:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b29c:	4313      	orrs	r3, r2
 800b29e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d10d      	bne.n	800b2c2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d009      	beq.n	800b2c2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6919      	ldr	r1, [r3, #16]
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	460a      	mov	r2, r1
 800b2c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	791b      	ldrb	r3, [r3, #4]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d128      	bne.n	800b31c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d110      	bne.n	800b2fc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	0151      	lsls	r1, r2, #5
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	440a      	add	r2, r1
 800b2f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	e00f      	b.n	800b31c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	69ba      	ldr	r2, [r7, #24]
 800b30c:	0151      	lsls	r1, r2, #5
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	440a      	add	r2, r1
 800b312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b31a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	0151      	lsls	r1, r2, #5
 800b32e:	69fa      	ldr	r2, [r7, #28]
 800b330:	440a      	add	r2, r1
 800b332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b33a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3720      	adds	r7, #32
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	fff80000 	.word	0xfff80000
 800b34c:	e007ffff 	.word	0xe007ffff
 800b350:	1ff80000 	.word	0x1ff80000

0800b354 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b354:	b480      	push	{r7}
 800b356:	b087      	sub	sp, #28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	2b01      	cmp	r3, #1
 800b372:	f040 80ce 	bne.w	800b512 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d132      	bne.n	800b3e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	0159      	lsls	r1, r3, #5
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	440b      	add	r3, r1
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	4619      	mov	r1, r3
 800b39a:	4b9a      	ldr	r3, [pc, #616]	; (800b604 <USB_EP0StartXfer+0x2b0>)
 800b39c:	4013      	ands	r3, r2
 800b39e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	0151      	lsls	r1, r2, #5
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	440a      	add	r2, r1
 800b3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3cc:	691a      	ldr	r2, [r3, #16]
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	0159      	lsls	r1, r3, #5
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	440b      	add	r3, r1
 800b3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4b8a      	ldr	r3, [pc, #552]	; (800b608 <USB_EP0StartXfer+0x2b4>)
 800b3de:	4013      	ands	r3, r2
 800b3e0:	610b      	str	r3, [r1, #16]
 800b3e2:	e04e      	b.n	800b482 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f0:	691a      	ldr	r2, [r3, #16]
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	0159      	lsls	r1, r3, #5
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	440b      	add	r3, r1
 800b3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fe:	4619      	mov	r1, r3
 800b400:	4b81      	ldr	r3, [pc, #516]	; (800b608 <USB_EP0StartXfer+0x2b4>)
 800b402:	4013      	ands	r3, r2
 800b404:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	015a      	lsls	r2, r3, #5
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	4413      	add	r3, r2
 800b40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	0159      	lsls	r1, r3, #5
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	440b      	add	r3, r1
 800b41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b420:	4619      	mov	r1, r3
 800b422:	4b78      	ldr	r3, [pc, #480]	; (800b604 <USB_EP0StartXfer+0x2b0>)
 800b424:	4013      	ands	r3, r2
 800b426:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	699a      	ldr	r2, [r3, #24]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	68da      	ldr	r2, [r3, #12]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	0151      	lsls	r1, r2, #5
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	440a      	add	r2, r1
 800b452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b45a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b472:	6939      	ldr	r1, [r7, #16]
 800b474:	0148      	lsls	r0, r1, #5
 800b476:	6979      	ldr	r1, [r7, #20]
 800b478:	4401      	add	r1, r0
 800b47a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b47e:	4313      	orrs	r3, r2
 800b480:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b482:	79fb      	ldrb	r3, [r7, #7]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d11e      	bne.n	800b4c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	695b      	ldr	r3, [r3, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d009      	beq.n	800b4a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49c:	461a      	mov	r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	e097      	b.n	800b5f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 8083 	beq.w	800b5f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 030f 	and.w	r3, r3, #15
 800b500:	2101      	movs	r1, #1
 800b502:	fa01 f303 	lsl.w	r3, r1, r3
 800b506:	6979      	ldr	r1, [r7, #20]
 800b508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b50c:	4313      	orrs	r3, r2
 800b50e:	634b      	str	r3, [r1, #52]	; 0x34
 800b510:	e071      	b.n	800b5f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	015a      	lsls	r2, r3, #5
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	4413      	add	r3, r2
 800b51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51e:	691a      	ldr	r2, [r3, #16]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	0159      	lsls	r1, r3, #5
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	440b      	add	r3, r1
 800b528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52c:	4619      	mov	r1, r3
 800b52e:	4b36      	ldr	r3, [pc, #216]	; (800b608 <USB_EP0StartXfer+0x2b4>)
 800b530:	4013      	ands	r3, r2
 800b532:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	015a      	lsls	r2, r3, #5
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	4413      	add	r3, r2
 800b53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b540:	691a      	ldr	r2, [r3, #16]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	0159      	lsls	r1, r3, #5
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	440b      	add	r3, r1
 800b54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b54e:	4619      	mov	r1, r3
 800b550:	4b2c      	ldr	r3, [pc, #176]	; (800b604 <USB_EP0StartXfer+0x2b0>)
 800b552:	4013      	ands	r3, r2
 800b554:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	68da      	ldr	r2, [r3, #12]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	4413      	add	r3, r2
 800b576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	0151      	lsls	r1, r2, #5
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	440a      	add	r2, r1
 800b584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b58c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	015a      	lsls	r2, r3, #5
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	4413      	add	r3, r2
 800b596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59a:	691a      	ldr	r2, [r3, #16]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5a4:	6939      	ldr	r1, [r7, #16]
 800b5a6:	0148      	lsls	r0, r1, #5
 800b5a8:	6979      	ldr	r1, [r7, #20]
 800b5aa:	4401      	add	r1, r0
 800b5ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d10d      	bne.n	800b5d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	6919      	ldr	r1, [r3, #16]
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	015a      	lsls	r2, r3, #5
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d2:	460a      	mov	r2, r1
 800b5d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	0151      	lsls	r1, r2, #5
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	440a      	add	r2, r1
 800b5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	e007ffff 	.word	0xe007ffff
 800b608:	fff80000 	.word	0xfff80000

0800b60c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d14a      	bne.n	800b6c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	015a      	lsls	r2, r3, #5
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	4413      	add	r3, r2
 800b634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b63e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b642:	f040 8086 	bne.w	800b752 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	7812      	ldrb	r2, [r2, #0]
 800b65a:	0151      	lsls	r1, r2, #5
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	440a      	add	r2, r1
 800b660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b664:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b668:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	7812      	ldrb	r2, [r2, #0]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b688:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b68c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3301      	adds	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f242 7210 	movw	r2, #10000	; 0x2710
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d902      	bls.n	800b6a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b6a2:	e056      	b.n	800b752 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	015a      	lsls	r2, r3, #5
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6bc:	d0e7      	beq.n	800b68e <USB_EPStopXfer+0x82>
 800b6be:	e048      	b.n	800b752 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	015a      	lsls	r2, r3, #5
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6d8:	d13b      	bne.n	800b752 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	7812      	ldrb	r2, [r2, #0]
 800b6ee:	0151      	lsls	r1, r2, #5
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	440a      	add	r2, r1
 800b6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	7812      	ldrb	r2, [r2, #0]
 800b712:	0151      	lsls	r1, r2, #5
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	440a      	add	r2, r1
 800b718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b720:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3301      	adds	r3, #1
 800b726:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b72e:	4293      	cmp	r3, r2
 800b730:	d902      	bls.n	800b738 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	75fb      	strb	r3, [r7, #23]
          break;
 800b736:	e00c      	b.n	800b752 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	015a      	lsls	r2, r3, #5
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	4413      	add	r3, r2
 800b742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b74c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b750:	d0e7      	beq.n	800b722 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b752:	7dfb      	ldrb	r3, [r7, #23]
}
 800b754:	4618      	mov	r0, r3
 800b756:	371c      	adds	r7, #28
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b760:	b480      	push	{r7}
 800b762:	b089      	sub	sp, #36	; 0x24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4611      	mov	r1, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	460b      	mov	r3, r1
 800b770:	71fb      	strb	r3, [r7, #7]
 800b772:	4613      	mov	r3, r2
 800b774:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b77e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b782:	2b00      	cmp	r3, #0
 800b784:	d123      	bne.n	800b7ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b786:	88bb      	ldrh	r3, [r7, #4]
 800b788:	3303      	adds	r3, #3
 800b78a:	089b      	lsrs	r3, r3, #2
 800b78c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b78e:	2300      	movs	r3, #0
 800b790:	61bb      	str	r3, [r7, #24]
 800b792:	e018      	b.n	800b7c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	031a      	lsls	r2, r3, #12
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	61bb      	str	r3, [r7, #24]
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d3e2      	bcc.n	800b794 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3724      	adds	r7, #36	; 0x24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b08b      	sub	sp, #44	; 0x2c
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	089b      	lsrs	r3, r3, #2
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	f003 0303 	and.w	r3, r3, #3
 800b800:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b802:	2300      	movs	r3, #0
 800b804:	623b      	str	r3, [r7, #32]
 800b806:	e014      	b.n	800b832 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	601a      	str	r2, [r3, #0]
    pDest++;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	3301      	adds	r3, #1
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	3301      	adds	r3, #1
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	3301      	adds	r3, #1
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	3301      	adds	r3, #1
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	3301      	adds	r3, #1
 800b830:	623b      	str	r3, [r7, #32]
 800b832:	6a3a      	ldr	r2, [r7, #32]
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	429a      	cmp	r2, r3
 800b838:	d3e6      	bcc.n	800b808 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b83a:	8bfb      	ldrh	r3, [r7, #30]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d01e      	beq.n	800b87e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b840:	2300      	movs	r3, #0
 800b842:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b84a:	461a      	mov	r2, r3
 800b84c:	f107 0310 	add.w	r3, r7, #16
 800b850:	6812      	ldr	r2, [r2, #0]
 800b852:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	fa22 f303 	lsr.w	r3, r2, r3
 800b860:	b2da      	uxtb	r2, r3
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	701a      	strb	r2, [r3, #0]
      i++;
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	3301      	adds	r3, #1
 800b86a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	3301      	adds	r3, #1
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b872:	8bfb      	ldrh	r3, [r7, #30]
 800b874:	3b01      	subs	r3, #1
 800b876:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b878:	8bfb      	ldrh	r3, [r7, #30]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1ea      	bne.n	800b854 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b880:	4618      	mov	r0, r3
 800b882:	372c      	adds	r7, #44	; 0x2c
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d12c      	bne.n	800b902 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	db12      	blt.n	800b8e0 <USB_EPSetStall+0x54>
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00f      	beq.n	800b8e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	0151      	lsls	r1, r2, #5
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	440a      	add	r2, r1
 800b8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	e02b      	b.n	800b95a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	db12      	blt.n	800b93a <USB_EPSetStall+0xae>
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00f      	beq.n	800b93a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	0151      	lsls	r1, r2, #5
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	440a      	add	r2, r1
 800b930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b938:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	0151      	lsls	r1, r2, #5
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	440a      	add	r2, r1
 800b950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b958:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	785b      	ldrb	r3, [r3, #1]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d128      	bne.n	800b9d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	0151      	lsls	r1, r2, #5
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	440a      	add	r2, r1
 800b99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b99e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	791b      	ldrb	r3, [r3, #4]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d003      	beq.n	800b9b4 <USB_EPClearStall+0x4c>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	791b      	ldrb	r3, [r3, #4]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d138      	bne.n	800ba26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	015a      	lsls	r2, r3, #5
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	0151      	lsls	r1, r2, #5
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	440a      	add	r2, r1
 800b9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	e027      	b.n	800ba26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	0151      	lsls	r1, r2, #5
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	440a      	add	r2, r1
 800b9ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	791b      	ldrb	r3, [r3, #4]
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d003      	beq.n	800ba06 <USB_EPClearStall+0x9e>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	791b      	ldrb	r3, [r3, #4]
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d10f      	bne.n	800ba26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	0151      	lsls	r1, r2, #5
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	440a      	add	r2, r1
 800ba1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	011b      	lsls	r3, r3, #4
 800ba64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba68:	68f9      	ldr	r1, [r7, #12]
 800ba6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba9a:	f023 0303 	bic.w	r3, r3, #3
 800ba9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baae:	f023 0302 	bic.w	r3, r3, #2
 800bab2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b085      	sub	sp, #20
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800badc:	f023 0303 	bic.w	r3, r3, #3
 800bae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baf0:	f043 0302 	orr.w	r3, r3, #2
 800baf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4013      	ands	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b085      	sub	sp, #20
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	0c1b      	lsrs	r3, r3, #16
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b085      	sub	sp, #20
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	4013      	ands	r3, r2
 800bb80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	b29b      	uxth	r3, r3
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb92:	b480      	push	{r7}
 800bb94:	b085      	sub	sp, #20
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b087      	sub	sp, #28
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bbf2:	78fb      	ldrb	r3, [r7, #3]
 800bbf4:	f003 030f 	and.w	r3, r3, #15
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	fa22 f303 	lsr.w	r3, r2, r3
 800bbfe:	01db      	lsls	r3, r3, #7
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc08:	78fb      	ldrb	r3, [r7, #3]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4013      	ands	r3, r2
 800bc1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	f003 0301 	and.w	r3, r3, #1
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	370c      	adds	r7, #12
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc62:	4619      	mov	r1, r3
 800bc64:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <USB_ActivateSetup+0x44>)
 800bc66:	4013      	ands	r3, r2
 800bc68:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	fffff800 	.word	0xfffff800

0800bc90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	333c      	adds	r3, #60	; 0x3c
 800bca6:	3304      	adds	r3, #4
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	4a26      	ldr	r2, [pc, #152]	; (800bd48 <USB_EP0_OutStart+0xb8>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d90a      	bls.n	800bcca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcc4:	d101      	bne.n	800bcca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e037      	b.n	800bd3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcf8:	f043 0318 	orr.w	r3, r3, #24
 800bcfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd12:	7afb      	ldrb	r3, [r7, #11]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d10f      	bne.n	800bd38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1e:	461a      	mov	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bd36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	371c      	adds	r7, #28
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	4f54300a 	.word	0x4f54300a

0800bd4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4a13      	ldr	r2, [pc, #76]	; (800bdb0 <USB_CoreReset+0x64>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d901      	bls.n	800bd6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e01b      	b.n	800bda2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	daf2      	bge.n	800bd58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	f043 0201 	orr.w	r2, r3, #1
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3301      	adds	r3, #1
 800bd86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <USB_CoreReset+0x64>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d901      	bls.n	800bd94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e006      	b.n	800bda2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d0f0      	beq.n	800bd82 <USB_CoreReset+0x36>

  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	00030d40 	.word	0x00030d40

0800bdb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bdc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bdc4:	f013 fbd2 	bl	801f56c <malloc>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d109      	bne.n	800bde6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	32b0      	adds	r2, #176	; 0xb0
 800bddc:	2100      	movs	r1, #0
 800bdde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bde2:	2302      	movs	r3, #2
 800bde4:	e0d4      	b.n	800bf90 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bde6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bdea:	2100      	movs	r1, #0
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f014 ffa1 	bl	8020d34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	32b0      	adds	r2, #176	; 0xb0
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32b0      	adds	r2, #176	; 0xb0
 800be0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	7c1b      	ldrb	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d138      	bne.n	800be90 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be1e:	4b5e      	ldr	r3, [pc, #376]	; (800bf98 <USBD_CDC_Init+0x1e4>)
 800be20:	7819      	ldrb	r1, [r3, #0]
 800be22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be26:	2202      	movs	r2, #2
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f005 f924 	bl	8011076 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be2e:	4b5a      	ldr	r3, [pc, #360]	; (800bf98 <USBD_CDC_Init+0x1e4>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	f003 020f 	and.w	r2, r3, #15
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	440b      	add	r3, r1
 800be42:	3324      	adds	r3, #36	; 0x24
 800be44:	2201      	movs	r2, #1
 800be46:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be48:	4b54      	ldr	r3, [pc, #336]	; (800bf9c <USBD_CDC_Init+0x1e8>)
 800be4a:	7819      	ldrb	r1, [r3, #0]
 800be4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be50:	2202      	movs	r2, #2
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f005 f90f 	bl	8011076 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be58:	4b50      	ldr	r3, [pc, #320]	; (800bf9c <USBD_CDC_Init+0x1e8>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 020f 	and.w	r2, r3, #15
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be70:	2201      	movs	r2, #1
 800be72:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be74:	4b4a      	ldr	r3, [pc, #296]	; (800bfa0 <USBD_CDC_Init+0x1ec>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 020f 	and.w	r2, r3, #15
 800be7c:	6879      	ldr	r1, [r7, #4]
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	440b      	add	r3, r1
 800be88:	3326      	adds	r3, #38	; 0x26
 800be8a:	2210      	movs	r2, #16
 800be8c:	801a      	strh	r2, [r3, #0]
 800be8e:	e035      	b.n	800befc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be90:	4b41      	ldr	r3, [pc, #260]	; (800bf98 <USBD_CDC_Init+0x1e4>)
 800be92:	7819      	ldrb	r1, [r3, #0]
 800be94:	2340      	movs	r3, #64	; 0x40
 800be96:	2202      	movs	r2, #2
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f005 f8ec 	bl	8011076 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be9e:	4b3e      	ldr	r3, [pc, #248]	; (800bf98 <USBD_CDC_Init+0x1e4>)
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	f003 020f 	and.w	r2, r3, #15
 800bea6:	6879      	ldr	r1, [r7, #4]
 800bea8:	4613      	mov	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	440b      	add	r3, r1
 800beb2:	3324      	adds	r3, #36	; 0x24
 800beb4:	2201      	movs	r2, #1
 800beb6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800beb8:	4b38      	ldr	r3, [pc, #224]	; (800bf9c <USBD_CDC_Init+0x1e8>)
 800beba:	7819      	ldrb	r1, [r3, #0]
 800bebc:	2340      	movs	r3, #64	; 0x40
 800bebe:	2202      	movs	r2, #2
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f005 f8d8 	bl	8011076 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bec6:	4b35      	ldr	r3, [pc, #212]	; (800bf9c <USBD_CDC_Init+0x1e8>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f003 020f 	and.w	r2, r3, #15
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	440b      	add	r3, r1
 800beda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bede:	2201      	movs	r2, #1
 800bee0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bee2:	4b2f      	ldr	r3, [pc, #188]	; (800bfa0 <USBD_CDC_Init+0x1ec>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	f003 020f 	and.w	r2, r3, #15
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	4613      	mov	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	440b      	add	r3, r1
 800bef6:	3326      	adds	r3, #38	; 0x26
 800bef8:	2210      	movs	r2, #16
 800befa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800befc:	4b28      	ldr	r3, [pc, #160]	; (800bfa0 <USBD_CDC_Init+0x1ec>)
 800befe:	7819      	ldrb	r1, [r3, #0]
 800bf00:	2308      	movs	r3, #8
 800bf02:	2203      	movs	r2, #3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f005 f8b6 	bl	8011076 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf0a:	4b25      	ldr	r3, [pc, #148]	; (800bfa0 <USBD_CDC_Init+0x1ec>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	f003 020f 	and.w	r2, r3, #15
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	4613      	mov	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	3324      	adds	r3, #36	; 0x24
 800bf20:	2201      	movs	r2, #1
 800bf22:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	33b0      	adds	r3, #176	; 0xb0
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e018      	b.n	800bf90 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	7c1b      	ldrb	r3, [r3, #16]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf66:	4b0d      	ldr	r3, [pc, #52]	; (800bf9c <USBD_CDC_Init+0x1e8>)
 800bf68:	7819      	ldrb	r1, [r3, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f005 f96d 	bl	8011254 <USBD_LL_PrepareReceive>
 800bf7a:	e008      	b.n	800bf8e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf7c:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <USBD_CDC_Init+0x1e8>)
 800bf7e:	7819      	ldrb	r1, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf86:	2340      	movs	r3, #64	; 0x40
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f005 f963 	bl	8011254 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20000097 	.word	0x20000097
 800bf9c:	20000098 	.word	0x20000098
 800bfa0:	20000099 	.word	0x20000099

0800bfa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bfb0:	4b3a      	ldr	r3, [pc, #232]	; (800c09c <USBD_CDC_DeInit+0xf8>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f005 f883 	bl	80110c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bfbc:	4b37      	ldr	r3, [pc, #220]	; (800c09c <USBD_CDC_DeInit+0xf8>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f003 020f 	and.w	r2, r3, #15
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	3324      	adds	r3, #36	; 0x24
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bfd6:	4b32      	ldr	r3, [pc, #200]	; (800c0a0 <USBD_CDC_DeInit+0xfc>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f005 f870 	bl	80110c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bfe2:	4b2f      	ldr	r3, [pc, #188]	; (800c0a0 <USBD_CDC_DeInit+0xfc>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	f003 020f 	and.w	r2, r3, #15
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	440b      	add	r3, r1
 800bff6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bffa:	2200      	movs	r2, #0
 800bffc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bffe:	4b29      	ldr	r3, [pc, #164]	; (800c0a4 <USBD_CDC_DeInit+0x100>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f005 f85c 	bl	80110c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c00a:	4b26      	ldr	r3, [pc, #152]	; (800c0a4 <USBD_CDC_DeInit+0x100>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	f003 020f 	and.w	r2, r3, #15
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	3324      	adds	r3, #36	; 0x24
 800c020:	2200      	movs	r2, #0
 800c022:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c024:	4b1f      	ldr	r3, [pc, #124]	; (800c0a4 <USBD_CDC_DeInit+0x100>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	f003 020f 	and.w	r2, r3, #15
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	3326      	adds	r3, #38	; 0x26
 800c03a:	2200      	movs	r2, #0
 800c03c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	32b0      	adds	r2, #176	; 0xb0
 800c048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01f      	beq.n	800c090 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	33b0      	adds	r3, #176	; 0xb0
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	32b0      	adds	r2, #176	; 0xb0
 800c06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c072:	4618      	mov	r0, r3
 800c074:	f013 fa82 	bl	801f57c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	32b0      	adds	r2, #176	; 0xb0
 800c082:	2100      	movs	r1, #0
 800c084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20000097 	.word	0x20000097
 800c0a0:	20000098 	.word	0x20000098
 800c0a4:	20000099 	.word	0x20000099

0800c0a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	32b0      	adds	r2, #176	; 0xb0
 800c0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e0bf      	b.n	800c258 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d050      	beq.n	800c186 <USBD_CDC_Setup+0xde>
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	f040 80af 	bne.w	800c248 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	88db      	ldrh	r3, [r3, #6]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d03a      	beq.n	800c168 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	b25b      	sxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da1b      	bge.n	800c134 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	33b0      	adds	r3, #176	; 0xb0
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c112:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	88d2      	ldrh	r2, [r2, #6]
 800c118:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	88db      	ldrh	r3, [r3, #6]
 800c11e:	2b07      	cmp	r3, #7
 800c120:	bf28      	it	cs
 800c122:	2307      	movcs	r3, #7
 800c124:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	89fa      	ldrh	r2, [r7, #14]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f001 fd6d 	bl	800dc0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c132:	e090      	b.n	800c256 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	785a      	ldrb	r2, [r3, #1]
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	88db      	ldrh	r3, [r3, #6]
 800c142:	2b3f      	cmp	r3, #63	; 0x3f
 800c144:	d803      	bhi.n	800c14e <USBD_CDC_Setup+0xa6>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	88db      	ldrh	r3, [r3, #6]
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	e000      	b.n	800c150 <USBD_CDC_Setup+0xa8>
 800c14e:	2240      	movs	r2, #64	; 0x40
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c156:	6939      	ldr	r1, [r7, #16]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c15e:	461a      	mov	r2, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 fd7f 	bl	800dc64 <USBD_CtlPrepareRx>
      break;
 800c166:	e076      	b.n	800c256 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	33b0      	adds	r3, #176	; 0xb0
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	7850      	ldrb	r0, [r2, #1]
 800c17e:	2200      	movs	r2, #0
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	4798      	blx	r3
      break;
 800c184:	e067      	b.n	800c256 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	785b      	ldrb	r3, [r3, #1]
 800c18a:	2b0b      	cmp	r3, #11
 800c18c:	d851      	bhi.n	800c232 <USBD_CDC_Setup+0x18a>
 800c18e:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <USBD_CDC_Setup+0xec>)
 800c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c194:	0800c1c5 	.word	0x0800c1c5
 800c198:	0800c241 	.word	0x0800c241
 800c19c:	0800c233 	.word	0x0800c233
 800c1a0:	0800c233 	.word	0x0800c233
 800c1a4:	0800c233 	.word	0x0800c233
 800c1a8:	0800c233 	.word	0x0800c233
 800c1ac:	0800c233 	.word	0x0800c233
 800c1b0:	0800c233 	.word	0x0800c233
 800c1b4:	0800c233 	.word	0x0800c233
 800c1b8:	0800c233 	.word	0x0800c233
 800c1bc:	0800c1ef 	.word	0x0800c1ef
 800c1c0:	0800c219 	.word	0x0800c219
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d107      	bne.n	800c1e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1d0:	f107 030a 	add.w	r3, r7, #10
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f001 fd17 	bl	800dc0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1de:	e032      	b.n	800c246 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 fca1 	bl	800db2a <USBD_CtlError>
            ret = USBD_FAIL;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	75fb      	strb	r3, [r7, #23]
          break;
 800c1ec:	e02b      	b.n	800c246 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d107      	bne.n	800c20a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1fa:	f107 030d 	add.w	r3, r7, #13
 800c1fe:	2201      	movs	r2, #1
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f001 fd02 	bl	800dc0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c208:	e01d      	b.n	800c246 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 fc8c 	bl	800db2a <USBD_CtlError>
            ret = USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	75fb      	strb	r3, [r7, #23]
          break;
 800c216:	e016      	b.n	800c246 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b03      	cmp	r3, #3
 800c222:	d00f      	beq.n	800c244 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fc7f 	bl	800db2a <USBD_CtlError>
            ret = USBD_FAIL;
 800c22c:	2303      	movs	r3, #3
 800c22e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c230:	e008      	b.n	800c244 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 fc78 	bl	800db2a <USBD_CtlError>
          ret = USBD_FAIL;
 800c23a:	2303      	movs	r3, #3
 800c23c:	75fb      	strb	r3, [r7, #23]
          break;
 800c23e:	e002      	b.n	800c246 <USBD_CDC_Setup+0x19e>
          break;
 800c240:	bf00      	nop
 800c242:	e008      	b.n	800c256 <USBD_CDC_Setup+0x1ae>
          break;
 800c244:	bf00      	nop
      }
      break;
 800c246:	e006      	b.n	800c256 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f001 fc6d 	bl	800db2a <USBD_CtlError>
      ret = USBD_FAIL;
 800c250:	2303      	movs	r3, #3
 800c252:	75fb      	strb	r3, [r7, #23]
      break;
 800c254:	bf00      	nop
  }

  return (uint8_t)ret;
 800c256:	7dfb      	ldrb	r3, [r7, #23]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3718      	adds	r7, #24
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c272:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	32b0      	adds	r2, #176	; 0xb0
 800c27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	e065      	b.n	800c356 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	32b0      	adds	r2, #176	; 0xb0
 800c294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c298:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c29a:	78fb      	ldrb	r3, [r7, #3]
 800c29c:	f003 020f 	and.w	r2, r3, #15
 800c2a0:	6879      	ldr	r1, [r7, #4]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	440b      	add	r3, r1
 800c2ac:	3318      	adds	r3, #24
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d02f      	beq.n	800c314 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	f003 020f 	and.w	r2, r3, #15
 800c2ba:	6879      	ldr	r1, [r7, #4]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	3318      	adds	r3, #24
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	78fb      	ldrb	r3, [r7, #3]
 800c2cc:	f003 010f 	and.w	r1, r3, #15
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	00db      	lsls	r3, r3, #3
 800c2d6:	440b      	add	r3, r1
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4403      	add	r3, r0
 800c2dc:	3348      	adds	r3, #72	; 0x48
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2e4:	fb01 f303 	mul.w	r3, r1, r3
 800c2e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d112      	bne.n	800c314 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c2ee:	78fb      	ldrb	r3, [r7, #3]
 800c2f0:	f003 020f 	and.w	r2, r3, #15
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	440b      	add	r3, r1
 800c300:	3318      	adds	r3, #24
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c306:	78f9      	ldrb	r1, [r7, #3]
 800c308:	2300      	movs	r3, #0
 800c30a:	2200      	movs	r2, #0
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f004 ff80 	bl	8011212 <USBD_LL_Transmit>
 800c312:	e01f      	b.n	800c354 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	33b0      	adds	r3, #176	; 0xb0
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d010      	beq.n	800c354 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	33b0      	adds	r3, #176	; 0xb0
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c350:	78fa      	ldrb	r2, [r7, #3]
 800c352:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	32b0      	adds	r2, #176	; 0xb0
 800c374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c378:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	32b0      	adds	r2, #176	; 0xb0
 800c384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e01a      	b.n	800c3c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f004 ff7e 	bl	8011296 <USBD_LL_GetRxDataSize>
 800c39a:	4602      	mov	r2, r0
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	33b0      	adds	r3, #176	; 0xb0
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4413      	add	r3, r2
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	32b0      	adds	r2, #176	; 0xb0
 800c3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e025      	b.n	800c43c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	33b0      	adds	r3, #176	; 0xb0
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01a      	beq.n	800c43a <USBD_CDC_EP0_RxReady+0x6c>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c40a:	2bff      	cmp	r3, #255	; 0xff
 800c40c:	d015      	beq.n	800c43a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	33b0      	adds	r3, #176	; 0xb0
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c426:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c42e:	b292      	uxth	r2, r2
 800c430:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	22ff      	movs	r2, #255	; 0xff
 800c436:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c44c:	2182      	movs	r1, #130	; 0x82
 800c44e:	4818      	ldr	r0, [pc, #96]	; (800c4b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c450:	f000 fd09 	bl	800ce66 <USBD_GetEpDesc>
 800c454:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c456:	2101      	movs	r1, #1
 800c458:	4815      	ldr	r0, [pc, #84]	; (800c4b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c45a:	f000 fd04 	bl	800ce66 <USBD_GetEpDesc>
 800c45e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c460:	2181      	movs	r1, #129	; 0x81
 800c462:	4813      	ldr	r0, [pc, #76]	; (800c4b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c464:	f000 fcff 	bl	800ce66 <USBD_GetEpDesc>
 800c468:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	2210      	movs	r2, #16
 800c474:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d006      	beq.n	800c48a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	2200      	movs	r2, #0
 800c480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c484:	711a      	strb	r2, [r3, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d006      	beq.n	800c49e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c498:	711a      	strb	r2, [r3, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2243      	movs	r2, #67	; 0x43
 800c4a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4a4:	4b02      	ldr	r3, [pc, #8]	; (800c4b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000054 	.word	0x20000054

0800c4b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4bc:	2182      	movs	r1, #130	; 0x82
 800c4be:	4818      	ldr	r0, [pc, #96]	; (800c520 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4c0:	f000 fcd1 	bl	800ce66 <USBD_GetEpDesc>
 800c4c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	4815      	ldr	r0, [pc, #84]	; (800c520 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4ca:	f000 fccc 	bl	800ce66 <USBD_GetEpDesc>
 800c4ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4d0:	2181      	movs	r1, #129	; 0x81
 800c4d2:	4813      	ldr	r0, [pc, #76]	; (800c520 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4d4:	f000 fcc7 	bl	800ce66 <USBD_GetEpDesc>
 800c4d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	2210      	movs	r2, #16
 800c4e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d006      	beq.n	800c4fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	711a      	strb	r2, [r3, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f042 0202 	orr.w	r2, r2, #2
 800c4f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d006      	beq.n	800c50e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	711a      	strb	r2, [r3, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f042 0202 	orr.w	r2, r2, #2
 800c50c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2243      	movs	r2, #67	; 0x43
 800c512:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c514:	4b02      	ldr	r3, [pc, #8]	; (800c520 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c516:	4618      	mov	r0, r3
 800c518:	3718      	adds	r7, #24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20000054 	.word	0x20000054

0800c524 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c52c:	2182      	movs	r1, #130	; 0x82
 800c52e:	4818      	ldr	r0, [pc, #96]	; (800c590 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c530:	f000 fc99 	bl	800ce66 <USBD_GetEpDesc>
 800c534:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c536:	2101      	movs	r1, #1
 800c538:	4815      	ldr	r0, [pc, #84]	; (800c590 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c53a:	f000 fc94 	bl	800ce66 <USBD_GetEpDesc>
 800c53e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c540:	2181      	movs	r1, #129	; 0x81
 800c542:	4813      	ldr	r0, [pc, #76]	; (800c590 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c544:	f000 fc8f 	bl	800ce66 <USBD_GetEpDesc>
 800c548:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2210      	movs	r2, #16
 800c554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d006      	beq.n	800c56a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2200      	movs	r2, #0
 800c560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c564:	711a      	strb	r2, [r3, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c578:	711a      	strb	r2, [r3, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2243      	movs	r2, #67	; 0x43
 800c582:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000054 	.word	0x20000054

0800c594 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	220a      	movs	r2, #10
 800c5a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5a2:	4b03      	ldr	r3, [pc, #12]	; (800c5b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	20000010 	.word	0x20000010

0800c5b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e009      	b.n	800c5dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	33b0      	adds	r3, #176	; 0xb0
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	4413      	add	r3, r2
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	32b0      	adds	r2, #176	; 0xb0
 800c5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c602:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e008      	b.n	800c620 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	371c      	adds	r7, #28
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	32b0      	adds	r2, #176	; 0xb0
 800c640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c644:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e004      	b.n	800c65a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	32b0      	adds	r2, #176	; 0xb0
 800c67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	32b0      	adds	r2, #176	; 0xb0
 800c68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c692:	2303      	movs	r3, #3
 800c694:	e018      	b.n	800c6c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7c1b      	ldrb	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10a      	bne.n	800c6b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c69e:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <USBD_CDC_ReceivePacket+0x68>)
 800c6a0:	7819      	ldrb	r1, [r3, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f004 fdd1 	bl	8011254 <USBD_LL_PrepareReceive>
 800c6b2:	e008      	b.n	800c6c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <USBD_CDC_ReceivePacket+0x68>)
 800c6b6:	7819      	ldrb	r1, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6be:	2340      	movs	r3, #64	; 0x40
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f004 fdc7 	bl	8011254 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20000098 	.word	0x20000098

0800c6d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d101      	bne.n	800c6ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e01f      	b.n	800c72c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	79fa      	ldrb	r2, [r7, #7]
 800c71e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f004 fc41 	bl	8010fa8 <USBD_LL_Init>
 800c726:	4603      	mov	r3, r0
 800c728:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c73e:	2300      	movs	r3, #0
 800c740:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c748:	2303      	movs	r3, #3
 800c74a:	e025      	b.n	800c798 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	32ae      	adds	r2, #174	; 0xae
 800c75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00f      	beq.n	800c788 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	32ae      	adds	r2, #174	; 0xae
 800c772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	f107 020e 	add.w	r2, r7, #14
 800c77c:	4610      	mov	r0, r2
 800c77e:	4798      	blx	r3
 800c780:	4602      	mov	r2, r0
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f004 fc49 	bl	8011040 <USBD_LL_Start>
 800c7ae:	4603      	mov	r3, r0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d009      	beq.n	800c7fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	78fa      	ldrb	r2, [r7, #3]
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	4798      	blx	r3
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	460b      	mov	r3, r1
 800c810:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	78fa      	ldrb	r2, [r7, #3]
 800c820:	4611      	mov	r1, r2
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	4798      	blx	r3
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c82c:	2303      	movs	r3, #3
 800c82e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c830:	7bfb      	ldrb	r3, [r7, #15]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b084      	sub	sp, #16
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f001 f932 	bl	800dab6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c860:	461a      	mov	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c86e:	f003 031f 	and.w	r3, r3, #31
 800c872:	2b02      	cmp	r3, #2
 800c874:	d01a      	beq.n	800c8ac <USBD_LL_SetupStage+0x72>
 800c876:	2b02      	cmp	r3, #2
 800c878:	d822      	bhi.n	800c8c0 <USBD_LL_SetupStage+0x86>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <USBD_LL_SetupStage+0x4a>
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d00a      	beq.n	800c898 <USBD_LL_SetupStage+0x5e>
 800c882:	e01d      	b.n	800c8c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fb5f 	bl	800cf50 <USBD_StdDevReq>
 800c892:	4603      	mov	r3, r0
 800c894:	73fb      	strb	r3, [r7, #15]
      break;
 800c896:	e020      	b.n	800c8da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fbc7 	bl	800d034 <USBD_StdItfReq>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8aa:	e016      	b.n	800c8da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fc29 	bl	800d10c <USBD_StdEPReq>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c8be:	e00c      	b.n	800c8da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f004 fc16 	bl	8011100 <USBD_LL_StallEP>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8d8:	bf00      	nop
  }

  return ret;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c8f6:	7afb      	ldrb	r3, [r7, #11]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d16e      	bne.n	800c9da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c902:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	f040 8098 	bne.w	800ca40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	689a      	ldr	r2, [r3, #8]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d913      	bls.n	800c944 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	689a      	ldr	r2, [r3, #8]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	1ad2      	subs	r2, r2, r3
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	4293      	cmp	r3, r2
 800c934:	bf28      	it	cs
 800c936:	4613      	movcs	r3, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	6879      	ldr	r1, [r7, #4]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f001 f9ae 	bl	800dc9e <USBD_CtlContinueRx>
 800c942:	e07d      	b.n	800ca40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c94a:	f003 031f 	and.w	r3, r3, #31
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d014      	beq.n	800c97c <USBD_LL_DataOutStage+0x98>
 800c952:	2b02      	cmp	r3, #2
 800c954:	d81d      	bhi.n	800c992 <USBD_LL_DataOutStage+0xae>
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <USBD_LL_DataOutStage+0x7c>
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d003      	beq.n	800c966 <USBD_LL_DataOutStage+0x82>
 800c95e:	e018      	b.n	800c992 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c960:	2300      	movs	r3, #0
 800c962:	75bb      	strb	r3, [r7, #22]
            break;
 800c964:	e018      	b.n	800c998 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	4619      	mov	r1, r3
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fa5e 	bl	800ce32 <USBD_CoreFindIF>
 800c976:	4603      	mov	r3, r0
 800c978:	75bb      	strb	r3, [r7, #22]
            break;
 800c97a:	e00d      	b.n	800c998 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c982:	b2db      	uxtb	r3, r3
 800c984:	4619      	mov	r1, r3
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 fa60 	bl	800ce4c <USBD_CoreFindEP>
 800c98c:	4603      	mov	r3, r0
 800c98e:	75bb      	strb	r3, [r7, #22]
            break;
 800c990:	e002      	b.n	800c998 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	75bb      	strb	r3, [r7, #22]
            break;
 800c996:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c998:	7dbb      	ldrb	r3, [r7, #22]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d119      	bne.n	800c9d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d113      	bne.n	800c9d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c9aa:	7dba      	ldrb	r2, [r7, #22]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	32ae      	adds	r2, #174	; 0xae
 800c9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00b      	beq.n	800c9d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c9ba:	7dba      	ldrb	r2, [r7, #22]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c9c2:	7dba      	ldrb	r2, [r7, #22]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	32ae      	adds	r2, #174	; 0xae
 800c9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f001 f974 	bl	800dcc0 <USBD_CtlSendStatus>
 800c9d8:	e032      	b.n	800ca40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c9da:	7afb      	ldrb	r3, [r7, #11]
 800c9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 fa31 	bl	800ce4c <USBD_CoreFindEP>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9ee:	7dbb      	ldrb	r3, [r7, #22]
 800c9f0:	2bff      	cmp	r3, #255	; 0xff
 800c9f2:	d025      	beq.n	800ca40 <USBD_LL_DataOutStage+0x15c>
 800c9f4:	7dbb      	ldrb	r3, [r7, #22]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d122      	bne.n	800ca40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d117      	bne.n	800ca36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca06:	7dba      	ldrb	r2, [r7, #22]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	32ae      	adds	r2, #174	; 0xae
 800ca0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00f      	beq.n	800ca36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca16:	7dba      	ldrb	r2, [r7, #22]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca1e:	7dba      	ldrb	r2, [r7, #22]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	32ae      	adds	r2, #174	; 0xae
 800ca24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	7afa      	ldrb	r2, [r7, #11]
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	4798      	blx	r3
 800ca32:	4603      	mov	r3, r0
 800ca34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	e000      	b.n	800ca42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	460b      	mov	r3, r1
 800ca54:	607a      	str	r2, [r7, #4]
 800ca56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d16f      	bne.n	800cb3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3314      	adds	r3, #20
 800ca62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d15a      	bne.n	800cb24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	689a      	ldr	r2, [r3, #8]
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d914      	bls.n	800caa4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	689a      	ldr	r2, [r3, #8]
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	1ad2      	subs	r2, r2, r3
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f001 f8d6 	bl	800dc42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca96:	2300      	movs	r3, #0
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f004 fbd9 	bl	8011254 <USBD_LL_PrepareReceive>
 800caa2:	e03f      	b.n	800cb24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	68da      	ldr	r2, [r3, #12]
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	429a      	cmp	r2, r3
 800caae:	d11c      	bne.n	800caea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cab8:	429a      	cmp	r2, r3
 800caba:	d316      	bcc.n	800caea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d20f      	bcs.n	800caea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f001 f8b7 	bl	800dc42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cadc:	2300      	movs	r3, #0
 800cade:	2200      	movs	r2, #0
 800cae0:	2100      	movs	r1, #0
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f004 fbb6 	bl	8011254 <USBD_LL_PrepareReceive>
 800cae8:	e01c      	b.n	800cb24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d10f      	bne.n	800cb16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d009      	beq.n	800cb16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb16:	2180      	movs	r1, #128	; 0x80
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f004 faf1 	bl	8011100 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f001 f8e1 	bl	800dce6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d03a      	beq.n	800cba4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f7ff fe42 	bl	800c7b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cb3c:	e032      	b.n	800cba4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cb3e:	7afb      	ldrb	r3, [r7, #11]
 800cb40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	4619      	mov	r1, r3
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 f97f 	bl	800ce4c <USBD_CoreFindEP>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2bff      	cmp	r3, #255	; 0xff
 800cb56:	d025      	beq.n	800cba4 <USBD_LL_DataInStage+0x15a>
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d122      	bne.n	800cba4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	d11c      	bne.n	800cba4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cb6a:	7dfa      	ldrb	r2, [r7, #23]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	32ae      	adds	r2, #174	; 0xae
 800cb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d014      	beq.n	800cba4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cb7a:	7dfa      	ldrb	r2, [r7, #23]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cb82:	7dfa      	ldrb	r2, [r7, #23]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	32ae      	adds	r2, #174	; 0xae
 800cb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	7afa      	ldrb	r2, [r7, #11]
 800cb90:	4611      	mov	r1, r2
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	4798      	blx	r3
 800cb96:	4603      	mov	r3, r0
 800cb98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cb9a:	7dbb      	ldrb	r3, [r7, #22]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cba0:	7dbb      	ldrb	r3, [r7, #22]
 800cba2:	e000      	b.n	800cba6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d014      	beq.n	800cc14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00e      	beq.n	800cc14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	6852      	ldr	r2, [r2, #4]
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	4611      	mov	r1, r2
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4798      	blx	r3
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc10:	2303      	movs	r3, #3
 800cc12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc14:	2340      	movs	r3, #64	; 0x40
 800cc16:	2200      	movs	r2, #0
 800cc18:	2100      	movs	r1, #0
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f004 fa2b 	bl	8011076 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2240      	movs	r2, #64	; 0x40
 800cc2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc30:	2340      	movs	r3, #64	; 0x40
 800cc32:	2200      	movs	r2, #0
 800cc34:	2180      	movs	r1, #128	; 0x80
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f004 fa1d 	bl	8011076 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2240      	movs	r2, #64	; 0x40
 800cc46:	621a      	str	r2, [r3, #32]

  return ret;
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b083      	sub	sp, #12
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	78fa      	ldrb	r2, [r7, #3]
 800cc62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b083      	sub	sp, #12
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2204      	movs	r2, #4
 800cc8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	370c      	adds	r7, #12
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr

0800cc9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cc9e:	b480      	push	{r7}
 800cca0:	b083      	sub	sp, #12
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d106      	bne.n	800ccc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	370c      	adds	r7, #12
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d110      	bne.n	800cd04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf2:	69db      	ldr	r3, [r3, #28]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccfe:	69db      	ldr	r3, [r3, #28]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b082      	sub	sp, #8
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	460b      	mov	r3, r1
 800cd18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	32ae      	adds	r2, #174	; 0xae
 800cd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e01c      	b.n	800cd6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d115      	bne.n	800cd68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	32ae      	adds	r2, #174	; 0xae
 800cd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	32ae      	adds	r2, #174	; 0xae
 800cd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	78fa      	ldrb	r2, [r7, #3]
 800cd62:	4611      	mov	r1, r2
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	32ae      	adds	r2, #174	; 0xae
 800cd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d101      	bne.n	800cd94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd90:	2303      	movs	r3, #3
 800cd92:	e01c      	b.n	800cdce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d115      	bne.n	800cdcc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	32ae      	adds	r2, #174	; 0xae
 800cdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00b      	beq.n	800cdcc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	; 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	78fa      	ldrb	r2, [r7, #3]
 800cdc6:	4611      	mov	r1, r2
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00e      	beq.n	800ce28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	6852      	ldr	r2, [r2, #4]
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	4611      	mov	r1, r2
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	4798      	blx	r3
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d001      	beq.n	800ce28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ce24:	2303      	movs	r3, #3
 800ce26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b083      	sub	sp, #12
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	370c      	adds	r7, #12
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr

0800ce66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b086      	sub	sp, #24
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	885b      	ldrh	r3, [r3, #2]
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d920      	bls.n	800ced0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce96:	e013      	b.n	800cec0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce98:	f107 030a 	add.w	r3, r7, #10
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6978      	ldr	r0, [r7, #20]
 800cea0:	f000 f81b 	bl	800ceda <USBD_GetNextDesc>
 800cea4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	785b      	ldrb	r3, [r3, #1]
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d108      	bne.n	800cec0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	789b      	ldrb	r3, [r3, #2]
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d008      	beq.n	800cece <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cebc:	2300      	movs	r3, #0
 800cebe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	885b      	ldrh	r3, [r3, #2]
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	897b      	ldrh	r3, [r7, #10]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d8e5      	bhi.n	800ce98 <USBD_GetEpDesc+0x32>
 800cecc:	e000      	b.n	800ced0 <USBD_GetEpDesc+0x6a>
          break;
 800cece:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ced0:	693b      	ldr	r3, [r7, #16]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ceda:	b480      	push	{r7}
 800cedc:	b085      	sub	sp, #20
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
 800cee2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	881a      	ldrh	r2, [r3, #0]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	4413      	add	r3, r2
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4413      	add	r3, r2
 800cf04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf06:	68fb      	ldr	r3, [r7, #12]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf32:	8a3b      	ldrh	r3, [r7, #16]
 800cf34:	021b      	lsls	r3, r3, #8
 800cf36:	b21a      	sxth	r2, r3
 800cf38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	b21b      	sxth	r3, r3
 800cf40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf42:	89fb      	ldrh	r3, [r7, #14]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	371c      	adds	r7, #28
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf66:	2b40      	cmp	r3, #64	; 0x40
 800cf68:	d005      	beq.n	800cf76 <USBD_StdDevReq+0x26>
 800cf6a:	2b40      	cmp	r3, #64	; 0x40
 800cf6c:	d857      	bhi.n	800d01e <USBD_StdDevReq+0xce>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00f      	beq.n	800cf92 <USBD_StdDevReq+0x42>
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	d153      	bne.n	800d01e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	32ae      	adds	r2, #174	; 0xae
 800cf80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	4798      	blx	r3
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf90:	e04a      	b.n	800d028 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	785b      	ldrb	r3, [r3, #1]
 800cf96:	2b09      	cmp	r3, #9
 800cf98:	d83b      	bhi.n	800d012 <USBD_StdDevReq+0xc2>
 800cf9a:	a201      	add	r2, pc, #4	; (adr r2, 800cfa0 <USBD_StdDevReq+0x50>)
 800cf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa0:	0800cff5 	.word	0x0800cff5
 800cfa4:	0800d009 	.word	0x0800d009
 800cfa8:	0800d013 	.word	0x0800d013
 800cfac:	0800cfff 	.word	0x0800cfff
 800cfb0:	0800d013 	.word	0x0800d013
 800cfb4:	0800cfd3 	.word	0x0800cfd3
 800cfb8:	0800cfc9 	.word	0x0800cfc9
 800cfbc:	0800d013 	.word	0x0800d013
 800cfc0:	0800cfeb 	.word	0x0800cfeb
 800cfc4:	0800cfdd 	.word	0x0800cfdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fa3c 	bl	800d448 <USBD_GetDescriptor>
          break;
 800cfd0:	e024      	b.n	800d01c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fbcb 	bl	800d770 <USBD_SetAddress>
          break;
 800cfda:	e01f      	b.n	800d01c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fc0a 	bl	800d7f8 <USBD_SetConfig>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
          break;
 800cfe8:	e018      	b.n	800d01c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fcad 	bl	800d94c <USBD_GetConfig>
          break;
 800cff2:	e013      	b.n	800d01c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fcde 	bl	800d9b8 <USBD_GetStatus>
          break;
 800cffc:	e00e      	b.n	800d01c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fd0d 	bl	800da20 <USBD_SetFeature>
          break;
 800d006:	e009      	b.n	800d01c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fd31 	bl	800da72 <USBD_ClrFeature>
          break;
 800d010:	e004      	b.n	800d01c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fd88 	bl	800db2a <USBD_CtlError>
          break;
 800d01a:	bf00      	nop
      }
      break;
 800d01c:	e004      	b.n	800d028 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fd82 	bl	800db2a <USBD_CtlError>
      break;
 800d026:	bf00      	nop
  }

  return ret;
 800d028:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop

0800d034 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d03e:	2300      	movs	r3, #0
 800d040:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d04a:	2b40      	cmp	r3, #64	; 0x40
 800d04c:	d005      	beq.n	800d05a <USBD_StdItfReq+0x26>
 800d04e:	2b40      	cmp	r3, #64	; 0x40
 800d050:	d852      	bhi.n	800d0f8 <USBD_StdItfReq+0xc4>
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <USBD_StdItfReq+0x26>
 800d056:	2b20      	cmp	r3, #32
 800d058:	d14e      	bne.n	800d0f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d060:	b2db      	uxtb	r3, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	2b02      	cmp	r3, #2
 800d066:	d840      	bhi.n	800d0ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	889b      	ldrh	r3, [r3, #4]
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d836      	bhi.n	800d0e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	889b      	ldrh	r3, [r3, #4]
 800d076:	b2db      	uxtb	r3, r3
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff fed9 	bl	800ce32 <USBD_CoreFindIF>
 800d080:	4603      	mov	r3, r0
 800d082:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d084:	7bbb      	ldrb	r3, [r7, #14]
 800d086:	2bff      	cmp	r3, #255	; 0xff
 800d088:	d01d      	beq.n	800d0c6 <USBD_StdItfReq+0x92>
 800d08a:	7bbb      	ldrb	r3, [r7, #14]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d11a      	bne.n	800d0c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d090:	7bba      	ldrb	r2, [r7, #14]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	32ae      	adds	r2, #174	; 0xae
 800d096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00f      	beq.n	800d0c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d0a0:	7bba      	ldrb	r2, [r7, #14]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0a8:	7bba      	ldrb	r2, [r7, #14]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	32ae      	adds	r2, #174	; 0xae
 800d0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	6839      	ldr	r1, [r7, #0]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	4798      	blx	r3
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0be:	e004      	b.n	800d0ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0c4:	e001      	b.n	800d0ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	88db      	ldrh	r3, [r3, #6]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d110      	bne.n	800d0f4 <USBD_StdItfReq+0xc0>
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10d      	bne.n	800d0f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fdf1 	bl	800dcc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0de:	e009      	b.n	800d0f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fd21 	bl	800db2a <USBD_CtlError>
          break;
 800d0e8:	e004      	b.n	800d0f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fd1c 	bl	800db2a <USBD_CtlError>
          break;
 800d0f2:	e000      	b.n	800d0f6 <USBD_StdItfReq+0xc2>
          break;
 800d0f4:	bf00      	nop
      }
      break;
 800d0f6:	e004      	b.n	800d102 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fd15 	bl	800db2a <USBD_CtlError>
      break;
 800d100:	bf00      	nop
  }

  return ret;
 800d102:	7bfb      	ldrb	r3, [r7, #15]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	889b      	ldrh	r3, [r3, #4]
 800d11e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d128:	2b40      	cmp	r3, #64	; 0x40
 800d12a:	d007      	beq.n	800d13c <USBD_StdEPReq+0x30>
 800d12c:	2b40      	cmp	r3, #64	; 0x40
 800d12e:	f200 817f 	bhi.w	800d430 <USBD_StdEPReq+0x324>
 800d132:	2b00      	cmp	r3, #0
 800d134:	d02a      	beq.n	800d18c <USBD_StdEPReq+0x80>
 800d136:	2b20      	cmp	r3, #32
 800d138:	f040 817a 	bne.w	800d430 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d13c:	7bbb      	ldrb	r3, [r7, #14]
 800d13e:	4619      	mov	r1, r3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7ff fe83 	bl	800ce4c <USBD_CoreFindEP>
 800d146:	4603      	mov	r3, r0
 800d148:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d14a:	7b7b      	ldrb	r3, [r7, #13]
 800d14c:	2bff      	cmp	r3, #255	; 0xff
 800d14e:	f000 8174 	beq.w	800d43a <USBD_StdEPReq+0x32e>
 800d152:	7b7b      	ldrb	r3, [r7, #13]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f040 8170 	bne.w	800d43a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d15a:	7b7a      	ldrb	r2, [r7, #13]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d162:	7b7a      	ldrb	r2, [r7, #13]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	32ae      	adds	r2, #174	; 0xae
 800d168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 8163 	beq.w	800d43a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d174:	7b7a      	ldrb	r2, [r7, #13]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	32ae      	adds	r2, #174	; 0xae
 800d17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	4798      	blx	r3
 800d186:	4603      	mov	r3, r0
 800d188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d18a:	e156      	b.n	800d43a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	785b      	ldrb	r3, [r3, #1]
 800d190:	2b03      	cmp	r3, #3
 800d192:	d008      	beq.n	800d1a6 <USBD_StdEPReq+0x9a>
 800d194:	2b03      	cmp	r3, #3
 800d196:	f300 8145 	bgt.w	800d424 <USBD_StdEPReq+0x318>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 809b 	beq.w	800d2d6 <USBD_StdEPReq+0x1ca>
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d03c      	beq.n	800d21e <USBD_StdEPReq+0x112>
 800d1a4:	e13e      	b.n	800d424 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d002      	beq.n	800d1b8 <USBD_StdEPReq+0xac>
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d016      	beq.n	800d1e4 <USBD_StdEPReq+0xd8>
 800d1b6:	e02c      	b.n	800d212 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1b8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00d      	beq.n	800d1da <USBD_StdEPReq+0xce>
 800d1be:	7bbb      	ldrb	r3, [r7, #14]
 800d1c0:	2b80      	cmp	r3, #128	; 0x80
 800d1c2:	d00a      	beq.n	800d1da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f003 ff99 	bl	8011100 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1ce:	2180      	movs	r1, #128	; 0x80
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f003 ff95 	bl	8011100 <USBD_LL_StallEP>
 800d1d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1d8:	e020      	b.n	800d21c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d1da:	6839      	ldr	r1, [r7, #0]
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fca4 	bl	800db2a <USBD_CtlError>
              break;
 800d1e2:	e01b      	b.n	800d21c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	885b      	ldrh	r3, [r3, #2]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10e      	bne.n	800d20a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d1ec:	7bbb      	ldrb	r3, [r7, #14]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00b      	beq.n	800d20a <USBD_StdEPReq+0xfe>
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	2b80      	cmp	r3, #128	; 0x80
 800d1f6:	d008      	beq.n	800d20a <USBD_StdEPReq+0xfe>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	88db      	ldrh	r3, [r3, #6]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d104      	bne.n	800d20a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f003 ff7b 	bl	8011100 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fd58 	bl	800dcc0 <USBD_CtlSendStatus>

              break;
 800d210:	e004      	b.n	800d21c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fc88 	bl	800db2a <USBD_CtlError>
              break;
 800d21a:	bf00      	nop
          }
          break;
 800d21c:	e107      	b.n	800d42e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d224:	b2db      	uxtb	r3, r3
 800d226:	2b02      	cmp	r3, #2
 800d228:	d002      	beq.n	800d230 <USBD_StdEPReq+0x124>
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d016      	beq.n	800d25c <USBD_StdEPReq+0x150>
 800d22e:	e04b      	b.n	800d2c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d230:	7bbb      	ldrb	r3, [r7, #14]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00d      	beq.n	800d252 <USBD_StdEPReq+0x146>
 800d236:	7bbb      	ldrb	r3, [r7, #14]
 800d238:	2b80      	cmp	r3, #128	; 0x80
 800d23a:	d00a      	beq.n	800d252 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f003 ff5d 	bl	8011100 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d246:	2180      	movs	r1, #128	; 0x80
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f003 ff59 	bl	8011100 <USBD_LL_StallEP>
 800d24e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d250:	e040      	b.n	800d2d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fc68 	bl	800db2a <USBD_CtlError>
              break;
 800d25a:	e03b      	b.n	800d2d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	885b      	ldrh	r3, [r3, #2]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d136      	bne.n	800d2d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d004      	beq.n	800d278 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d26e:	7bbb      	ldrb	r3, [r7, #14]
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f003 ff63 	bl	801113e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fd21 	bl	800dcc0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff fde2 	bl	800ce4c <USBD_CoreFindEP>
 800d288:	4603      	mov	r3, r0
 800d28a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d28c:	7b7b      	ldrb	r3, [r7, #13]
 800d28e:	2bff      	cmp	r3, #255	; 0xff
 800d290:	d01f      	beq.n	800d2d2 <USBD_StdEPReq+0x1c6>
 800d292:	7b7b      	ldrb	r3, [r7, #13]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d11c      	bne.n	800d2d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d298:	7b7a      	ldrb	r2, [r7, #13]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d2a0:	7b7a      	ldrb	r2, [r7, #13]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	32ae      	adds	r2, #174	; 0xae
 800d2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d010      	beq.n	800d2d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2b0:	7b7a      	ldrb	r2, [r7, #13]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	32ae      	adds	r2, #174	; 0xae
 800d2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	4798      	blx	r3
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d2c6:	e004      	b.n	800d2d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d2c8:	6839      	ldr	r1, [r7, #0]
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fc2d 	bl	800db2a <USBD_CtlError>
              break;
 800d2d0:	e000      	b.n	800d2d4 <USBD_StdEPReq+0x1c8>
              break;
 800d2d2:	bf00      	nop
          }
          break;
 800d2d4:	e0ab      	b.n	800d42e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d002      	beq.n	800d2e8 <USBD_StdEPReq+0x1dc>
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d032      	beq.n	800d34c <USBD_StdEPReq+0x240>
 800d2e6:	e097      	b.n	800d418 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2e8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d007      	beq.n	800d2fe <USBD_StdEPReq+0x1f2>
 800d2ee:	7bbb      	ldrb	r3, [r7, #14]
 800d2f0:	2b80      	cmp	r3, #128	; 0x80
 800d2f2:	d004      	beq.n	800d2fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d2f4:	6839      	ldr	r1, [r7, #0]
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fc17 	bl	800db2a <USBD_CtlError>
                break;
 800d2fc:	e091      	b.n	800d422 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d302:	2b00      	cmp	r3, #0
 800d304:	da0b      	bge.n	800d31e <USBD_StdEPReq+0x212>
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	3310      	adds	r3, #16
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	4413      	add	r3, r2
 800d31a:	3304      	adds	r3, #4
 800d31c:	e00b      	b.n	800d336 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
 800d320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	4413      	add	r3, r2
 800d334:	3304      	adds	r3, #4
 800d336:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	2200      	movs	r2, #0
 800d33c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2202      	movs	r2, #2
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fc61 	bl	800dc0c <USBD_CtlSendData>
              break;
 800d34a:	e06a      	b.n	800d422 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d34c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d350:	2b00      	cmp	r3, #0
 800d352:	da11      	bge.n	800d378 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d354:	7bbb      	ldrb	r3, [r7, #14]
 800d356:	f003 020f 	and.w	r2, r3, #15
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	440b      	add	r3, r1
 800d366:	3324      	adds	r3, #36	; 0x24
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d117      	bne.n	800d39e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 fbda 	bl	800db2a <USBD_CtlError>
                  break;
 800d376:	e054      	b.n	800d422 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	f003 020f 	and.w	r2, r3, #15
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	440b      	add	r3, r1
 800d38a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d104      	bne.n	800d39e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fbc7 	bl	800db2a <USBD_CtlError>
                  break;
 800d39c:	e041      	b.n	800d422 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d39e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	da0b      	bge.n	800d3be <USBD_StdEPReq+0x2b2>
 800d3a6:	7bbb      	ldrb	r3, [r7, #14]
 800d3a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	3310      	adds	r3, #16
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	e00b      	b.n	800d3d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3be:	7bbb      	ldrb	r3, [r7, #14]
 800d3c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3d8:	7bbb      	ldrb	r3, [r7, #14]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d002      	beq.n	800d3e4 <USBD_StdEPReq+0x2d8>
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
 800d3e0:	2b80      	cmp	r3, #128	; 0x80
 800d3e2:	d103      	bne.n	800d3ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	e00e      	b.n	800d40a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f003 fec3 	bl	801117c <USBD_LL_IsStallEP>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2201      	movs	r2, #1
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	e002      	b.n	800d40a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2200      	movs	r2, #0
 800d408:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2202      	movs	r2, #2
 800d40e:	4619      	mov	r1, r3
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fbfb 	bl	800dc0c <USBD_CtlSendData>
              break;
 800d416:	e004      	b.n	800d422 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fb85 	bl	800db2a <USBD_CtlError>
              break;
 800d420:	bf00      	nop
          }
          break;
 800d422:	e004      	b.n	800d42e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fb7f 	bl	800db2a <USBD_CtlError>
          break;
 800d42c:	bf00      	nop
      }
      break;
 800d42e:	e005      	b.n	800d43c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fb79 	bl	800db2a <USBD_CtlError>
      break;
 800d438:	e000      	b.n	800d43c <USBD_StdEPReq+0x330>
      break;
 800d43a:	bf00      	nop
  }

  return ret;
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
	...

0800d448 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d452:	2300      	movs	r3, #0
 800d454:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d45a:	2300      	movs	r3, #0
 800d45c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	885b      	ldrh	r3, [r3, #2]
 800d462:	0a1b      	lsrs	r3, r3, #8
 800d464:	b29b      	uxth	r3, r3
 800d466:	3b01      	subs	r3, #1
 800d468:	2b0e      	cmp	r3, #14
 800d46a:	f200 8152 	bhi.w	800d712 <USBD_GetDescriptor+0x2ca>
 800d46e:	a201      	add	r2, pc, #4	; (adr r2, 800d474 <USBD_GetDescriptor+0x2c>)
 800d470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d474:	0800d4e5 	.word	0x0800d4e5
 800d478:	0800d4fd 	.word	0x0800d4fd
 800d47c:	0800d53d 	.word	0x0800d53d
 800d480:	0800d713 	.word	0x0800d713
 800d484:	0800d713 	.word	0x0800d713
 800d488:	0800d6b3 	.word	0x0800d6b3
 800d48c:	0800d6df 	.word	0x0800d6df
 800d490:	0800d713 	.word	0x0800d713
 800d494:	0800d713 	.word	0x0800d713
 800d498:	0800d713 	.word	0x0800d713
 800d49c:	0800d713 	.word	0x0800d713
 800d4a0:	0800d713 	.word	0x0800d713
 800d4a4:	0800d713 	.word	0x0800d713
 800d4a8:	0800d713 	.word	0x0800d713
 800d4ac:	0800d4b1 	.word	0x0800d4b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4b6:	69db      	ldr	r3, [r3, #28]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00b      	beq.n	800d4d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	7c12      	ldrb	r2, [r2, #16]
 800d4c8:	f107 0108 	add.w	r1, r7, #8
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	4798      	blx	r3
 800d4d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4d2:	e126      	b.n	800d722 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fb27 	bl	800db2a <USBD_CtlError>
        err++;
 800d4dc:	7afb      	ldrb	r3, [r7, #11]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	72fb      	strb	r3, [r7, #11]
      break;
 800d4e2:	e11e      	b.n	800d722 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	7c12      	ldrb	r2, [r2, #16]
 800d4f0:	f107 0108 	add.w	r1, r7, #8
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	4798      	blx	r3
 800d4f8:	60f8      	str	r0, [r7, #12]
      break;
 800d4fa:	e112      	b.n	800d722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7c1b      	ldrb	r3, [r3, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10d      	bne.n	800d520 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d50c:	f107 0208 	add.w	r2, r7, #8
 800d510:	4610      	mov	r0, r2
 800d512:	4798      	blx	r3
 800d514:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	3301      	adds	r3, #1
 800d51a:	2202      	movs	r2, #2
 800d51c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d51e:	e100      	b.n	800d722 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d528:	f107 0208 	add.w	r2, r7, #8
 800d52c:	4610      	mov	r0, r2
 800d52e:	4798      	blx	r3
 800d530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3301      	adds	r3, #1
 800d536:	2202      	movs	r2, #2
 800d538:	701a      	strb	r2, [r3, #0]
      break;
 800d53a:	e0f2      	b.n	800d722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	885b      	ldrh	r3, [r3, #2]
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b05      	cmp	r3, #5
 800d544:	f200 80ac 	bhi.w	800d6a0 <USBD_GetDescriptor+0x258>
 800d548:	a201      	add	r2, pc, #4	; (adr r2, 800d550 <USBD_GetDescriptor+0x108>)
 800d54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d54e:	bf00      	nop
 800d550:	0800d569 	.word	0x0800d569
 800d554:	0800d59d 	.word	0x0800d59d
 800d558:	0800d5d1 	.word	0x0800d5d1
 800d55c:	0800d605 	.word	0x0800d605
 800d560:	0800d639 	.word	0x0800d639
 800d564:	0800d66d 	.word	0x0800d66d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00b      	beq.n	800d58c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	7c12      	ldrb	r2, [r2, #16]
 800d580:	f107 0108 	add.w	r1, r7, #8
 800d584:	4610      	mov	r0, r2
 800d586:	4798      	blx	r3
 800d588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d58a:	e091      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 facb 	bl	800db2a <USBD_CtlError>
            err++;
 800d594:	7afb      	ldrb	r3, [r7, #11]
 800d596:	3301      	adds	r3, #1
 800d598:	72fb      	strb	r3, [r7, #11]
          break;
 800d59a:	e089      	b.n	800d6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00b      	beq.n	800d5c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	7c12      	ldrb	r2, [r2, #16]
 800d5b4:	f107 0108 	add.w	r1, r7, #8
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	4798      	blx	r3
 800d5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5be:	e077      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fab1 	bl	800db2a <USBD_CtlError>
            err++;
 800d5c8:	7afb      	ldrb	r3, [r7, #11]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ce:	e06f      	b.n	800d6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00b      	beq.n	800d5f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	7c12      	ldrb	r2, [r2, #16]
 800d5e8:	f107 0108 	add.w	r1, r7, #8
 800d5ec:	4610      	mov	r0, r2
 800d5ee:	4798      	blx	r3
 800d5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5f2:	e05d      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa97 	bl	800db2a <USBD_CtlError>
            err++;
 800d5fc:	7afb      	ldrb	r3, [r7, #11]
 800d5fe:	3301      	adds	r3, #1
 800d600:	72fb      	strb	r3, [r7, #11]
          break;
 800d602:	e055      	b.n	800d6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00b      	beq.n	800d628 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	7c12      	ldrb	r2, [r2, #16]
 800d61c:	f107 0108 	add.w	r1, r7, #8
 800d620:	4610      	mov	r0, r2
 800d622:	4798      	blx	r3
 800d624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d626:	e043      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fa7d 	bl	800db2a <USBD_CtlError>
            err++;
 800d630:	7afb      	ldrb	r3, [r7, #11]
 800d632:	3301      	adds	r3, #1
 800d634:	72fb      	strb	r3, [r7, #11]
          break;
 800d636:	e03b      	b.n	800d6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00b      	beq.n	800d65c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	7c12      	ldrb	r2, [r2, #16]
 800d650:	f107 0108 	add.w	r1, r7, #8
 800d654:	4610      	mov	r0, r2
 800d656:	4798      	blx	r3
 800d658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d65a:	e029      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d65c:	6839      	ldr	r1, [r7, #0]
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fa63 	bl	800db2a <USBD_CtlError>
            err++;
 800d664:	7afb      	ldrb	r3, [r7, #11]
 800d666:	3301      	adds	r3, #1
 800d668:	72fb      	strb	r3, [r7, #11]
          break;
 800d66a:	e021      	b.n	800d6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00b      	beq.n	800d690 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d67e:	699b      	ldr	r3, [r3, #24]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	7c12      	ldrb	r2, [r2, #16]
 800d684:	f107 0108 	add.w	r1, r7, #8
 800d688:	4610      	mov	r0, r2
 800d68a:	4798      	blx	r3
 800d68c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d68e:	e00f      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fa49 	bl	800db2a <USBD_CtlError>
            err++;
 800d698:	7afb      	ldrb	r3, [r7, #11]
 800d69a:	3301      	adds	r3, #1
 800d69c:	72fb      	strb	r3, [r7, #11]
          break;
 800d69e:	e007      	b.n	800d6b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6a0:	6839      	ldr	r1, [r7, #0]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fa41 	bl	800db2a <USBD_CtlError>
          err++;
 800d6a8:	7afb      	ldrb	r3, [r7, #11]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d6ae:	bf00      	nop
      }
      break;
 800d6b0:	e037      	b.n	800d722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	7c1b      	ldrb	r3, [r3, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d109      	bne.n	800d6ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c2:	f107 0208 	add.w	r2, r7, #8
 800d6c6:	4610      	mov	r0, r2
 800d6c8:	4798      	blx	r3
 800d6ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6cc:	e029      	b.n	800d722 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6ce:	6839      	ldr	r1, [r7, #0]
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fa2a 	bl	800db2a <USBD_CtlError>
        err++;
 800d6d6:	7afb      	ldrb	r3, [r7, #11]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	72fb      	strb	r3, [r7, #11]
      break;
 800d6dc:	e021      	b.n	800d722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	7c1b      	ldrb	r3, [r3, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10d      	bne.n	800d702 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ee:	f107 0208 	add.w	r2, r7, #8
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	4798      	blx	r3
 800d6f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	2207      	movs	r2, #7
 800d6fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d700:	e00f      	b.n	800d722 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d702:	6839      	ldr	r1, [r7, #0]
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fa10 	bl	800db2a <USBD_CtlError>
        err++;
 800d70a:	7afb      	ldrb	r3, [r7, #11]
 800d70c:	3301      	adds	r3, #1
 800d70e:	72fb      	strb	r3, [r7, #11]
      break;
 800d710:	e007      	b.n	800d722 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 fa08 	bl	800db2a <USBD_CtlError>
      err++;
 800d71a:	7afb      	ldrb	r3, [r7, #11]
 800d71c:	3301      	adds	r3, #1
 800d71e:	72fb      	strb	r3, [r7, #11]
      break;
 800d720:	bf00      	nop
  }

  if (err != 0U)
 800d722:	7afb      	ldrb	r3, [r7, #11]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d11e      	bne.n	800d766 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	88db      	ldrh	r3, [r3, #6]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d016      	beq.n	800d75e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d730:	893b      	ldrh	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00e      	beq.n	800d754 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	88da      	ldrh	r2, [r3, #6]
 800d73a:	893b      	ldrh	r3, [r7, #8]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	bf28      	it	cs
 800d740:	4613      	movcs	r3, r2
 800d742:	b29b      	uxth	r3, r3
 800d744:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d746:	893b      	ldrh	r3, [r7, #8]
 800d748:	461a      	mov	r2, r3
 800d74a:	68f9      	ldr	r1, [r7, #12]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fa5d 	bl	800dc0c <USBD_CtlSendData>
 800d752:	e009      	b.n	800d768 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f9e7 	bl	800db2a <USBD_CtlError>
 800d75c:	e004      	b.n	800d768 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 faae 	bl	800dcc0 <USBD_CtlSendStatus>
 800d764:	e000      	b.n	800d768 <USBD_GetDescriptor+0x320>
    return;
 800d766:	bf00      	nop
  }
}
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop

0800d770 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	889b      	ldrh	r3, [r3, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d131      	bne.n	800d7e6 <USBD_SetAddress+0x76>
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	88db      	ldrh	r3, [r3, #6]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d12d      	bne.n	800d7e6 <USBD_SetAddress+0x76>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	885b      	ldrh	r3, [r3, #2]
 800d78e:	2b7f      	cmp	r3, #127	; 0x7f
 800d790:	d829      	bhi.n	800d7e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	885b      	ldrh	r3, [r3, #2]
 800d796:	b2db      	uxtb	r3, r3
 800d798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d79c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d104      	bne.n	800d7b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f9bc 	bl	800db2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7b2:	e01d      	b.n	800d7f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7bfa      	ldrb	r2, [r7, #15]
 800d7b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f003 fd07 	bl	80111d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fa7a 	bl	800dcc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d004      	beq.n	800d7dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7da:	e009      	b.n	800d7f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e4:	e004      	b.n	800d7f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f99e 	bl	800db2a <USBD_CtlError>
  }
}
 800d7ee:	bf00      	nop
 800d7f0:	bf00      	nop
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	885b      	ldrh	r3, [r3, #2]
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	4b4e      	ldr	r3, [pc, #312]	; (800d948 <USBD_SetConfig+0x150>)
 800d80e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d810:	4b4d      	ldr	r3, [pc, #308]	; (800d948 <USBD_SetConfig+0x150>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d905      	bls.n	800d824 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d818:	6839      	ldr	r1, [r7, #0]
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f985 	bl	800db2a <USBD_CtlError>
    return USBD_FAIL;
 800d820:	2303      	movs	r3, #3
 800d822:	e08c      	b.n	800d93e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d002      	beq.n	800d836 <USBD_SetConfig+0x3e>
 800d830:	2b03      	cmp	r3, #3
 800d832:	d029      	beq.n	800d888 <USBD_SetConfig+0x90>
 800d834:	e075      	b.n	800d922 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d836:	4b44      	ldr	r3, [pc, #272]	; (800d948 <USBD_SetConfig+0x150>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d020      	beq.n	800d880 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d83e:	4b42      	ldr	r3, [pc, #264]	; (800d948 <USBD_SetConfig+0x150>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d848:	4b3f      	ldr	r3, [pc, #252]	; (800d948 <USBD_SetConfig+0x150>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7fe ffbd 	bl	800c7ce <USBD_SetClassConfig>
 800d854:	4603      	mov	r3, r0
 800d856:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d008      	beq.n	800d870 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f962 	bl	800db2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2202      	movs	r2, #2
 800d86a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d86e:	e065      	b.n	800d93c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fa25 	bl	800dcc0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2203      	movs	r2, #3
 800d87a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d87e:	e05d      	b.n	800d93c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fa1d 	bl	800dcc0 <USBD_CtlSendStatus>
      break;
 800d886:	e059      	b.n	800d93c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d888:	4b2f      	ldr	r3, [pc, #188]	; (800d948 <USBD_SetConfig+0x150>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d112      	bne.n	800d8b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d898:	4b2b      	ldr	r3, [pc, #172]	; (800d948 <USBD_SetConfig+0x150>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	461a      	mov	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8a2:	4b29      	ldr	r3, [pc, #164]	; (800d948 <USBD_SetConfig+0x150>)
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7fe ffac 	bl	800c806 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fa06 	bl	800dcc0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8b4:	e042      	b.n	800d93c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d8b6:	4b24      	ldr	r3, [pc, #144]	; (800d948 <USBD_SetConfig+0x150>)
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d02a      	beq.n	800d91a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7fe ff9a 	bl	800c806 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8d2:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <USBD_SetConfig+0x150>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8dc:	4b1a      	ldr	r3, [pc, #104]	; (800d948 <USBD_SetConfig+0x150>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7fe ff73 	bl	800c7ce <USBD_SetClassConfig>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00f      	beq.n	800d912 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f918 	bl	800db2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7fe ff7f 	bl	800c806 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2202      	movs	r2, #2
 800d90c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d910:	e014      	b.n	800d93c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f9d4 	bl	800dcc0 <USBD_CtlSendStatus>
      break;
 800d918:	e010      	b.n	800d93c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f9d0 	bl	800dcc0 <USBD_CtlSendStatus>
      break;
 800d920:	e00c      	b.n	800d93c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 f900 	bl	800db2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d92a:	4b07      	ldr	r3, [pc, #28]	; (800d948 <USBD_SetConfig+0x150>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	4619      	mov	r1, r3
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7fe ff68 	bl	800c806 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d936:	2303      	movs	r3, #3
 800d938:	73fb      	strb	r3, [r7, #15]
      break;
 800d93a:	bf00      	nop
  }

  return ret;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	2000bf90 	.word	0x2000bf90

0800d94c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	88db      	ldrh	r3, [r3, #6]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d004      	beq.n	800d968 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 f8e2 	bl	800db2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d966:	e023      	b.n	800d9b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b02      	cmp	r3, #2
 800d972:	dc02      	bgt.n	800d97a <USBD_GetConfig+0x2e>
 800d974:	2b00      	cmp	r3, #0
 800d976:	dc03      	bgt.n	800d980 <USBD_GetConfig+0x34>
 800d978:	e015      	b.n	800d9a6 <USBD_GetConfig+0x5a>
 800d97a:	2b03      	cmp	r3, #3
 800d97c:	d00b      	beq.n	800d996 <USBD_GetConfig+0x4a>
 800d97e:	e012      	b.n	800d9a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	3308      	adds	r3, #8
 800d98a:	2201      	movs	r2, #1
 800d98c:	4619      	mov	r1, r3
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f93c 	bl	800dc0c <USBD_CtlSendData>
        break;
 800d994:	e00c      	b.n	800d9b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	3304      	adds	r3, #4
 800d99a:	2201      	movs	r2, #1
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f934 	bl	800dc0c <USBD_CtlSendData>
        break;
 800d9a4:	e004      	b.n	800d9b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9a6:	6839      	ldr	r1, [r7, #0]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 f8be 	bl	800db2a <USBD_CtlError>
        break;
 800d9ae:	bf00      	nop
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d81e      	bhi.n	800da0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	88db      	ldrh	r3, [r3, #6]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d004      	beq.n	800d9e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f8a5 	bl	800db2a <USBD_CtlError>
        break;
 800d9e0:	e01a      	b.n	800da18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d005      	beq.n	800d9fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f043 0202 	orr.w	r2, r3, #2
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	330c      	adds	r3, #12
 800da02:	2202      	movs	r2, #2
 800da04:	4619      	mov	r1, r3
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f900 	bl	800dc0c <USBD_CtlSendData>
      break;
 800da0c:	e004      	b.n	800da18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f88a 	bl	800db2a <USBD_CtlError>
      break;
 800da16:	bf00      	nop
  }
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	885b      	ldrh	r3, [r3, #2]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d107      	bne.n	800da42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f940 	bl	800dcc0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da40:	e013      	b.n	800da6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	885b      	ldrh	r3, [r3, #2]
 800da46:	2b02      	cmp	r3, #2
 800da48:	d10b      	bne.n	800da62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	889b      	ldrh	r3, [r3, #4]
 800da4e:	0a1b      	lsrs	r3, r3, #8
 800da50:	b29b      	uxth	r3, r3
 800da52:	b2da      	uxtb	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f930 	bl	800dcc0 <USBD_CtlSendStatus>
}
 800da60:	e003      	b.n	800da6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f860 	bl	800db2a <USBD_CtlError>
}
 800da6a:	bf00      	nop
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da82:	b2db      	uxtb	r3, r3
 800da84:	3b01      	subs	r3, #1
 800da86:	2b02      	cmp	r3, #2
 800da88:	d80b      	bhi.n	800daa2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	885b      	ldrh	r3, [r3, #2]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d10c      	bne.n	800daac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f910 	bl	800dcc0 <USBD_CtlSendStatus>
      }
      break;
 800daa0:	e004      	b.n	800daac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 f840 	bl	800db2a <USBD_CtlError>
      break;
 800daaa:	e000      	b.n	800daae <USBD_ClrFeature+0x3c>
      break;
 800daac:	bf00      	nop
  }
}
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b084      	sub	sp, #16
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	781a      	ldrb	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3301      	adds	r3, #1
 800dad0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	781a      	ldrb	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7ff fa17 	bl	800cf14 <SWAPBYTE>
 800dae6:	4603      	mov	r3, r0
 800dae8:	461a      	mov	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3301      	adds	r3, #1
 800daf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3301      	adds	r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff fa0a 	bl	800cf14 <SWAPBYTE>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3301      	adds	r3, #1
 800db0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	3301      	adds	r3, #1
 800db12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff f9fd 	bl	800cf14 <SWAPBYTE>
 800db1a:	4603      	mov	r3, r0
 800db1c:	461a      	mov	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	80da      	strh	r2, [r3, #6]
}
 800db22:	bf00      	nop
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db34:	2180      	movs	r1, #128	; 0x80
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f003 fae2 	bl	8011100 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db3c:	2100      	movs	r1, #0
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f003 fade 	bl	8011100 <USBD_LL_StallEP>
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db58:	2300      	movs	r3, #0
 800db5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d036      	beq.n	800dbd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db66:	6938      	ldr	r0, [r7, #16]
 800db68:	f000 f836 	bl	800dbd8 <USBD_GetLen>
 800db6c:	4603      	mov	r3, r0
 800db6e:	3301      	adds	r3, #1
 800db70:	b29b      	uxth	r3, r3
 800db72:	005b      	lsls	r3, r3, #1
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	4413      	add	r3, r2
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	7812      	ldrb	r2, [r2, #0]
 800db84:	701a      	strb	r2, [r3, #0]
  idx++;
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	3301      	adds	r3, #1
 800db8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	4413      	add	r3, r2
 800db92:	2203      	movs	r2, #3
 800db94:	701a      	strb	r2, [r3, #0]
  idx++;
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	3301      	adds	r3, #1
 800db9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db9c:	e013      	b.n	800dbc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	4413      	add	r3, r2
 800dba4:	693a      	ldr	r2, [r7, #16]
 800dba6:	7812      	ldrb	r2, [r2, #0]
 800dba8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	3301      	adds	r3, #1
 800dbae:	613b      	str	r3, [r7, #16]
    idx++;
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	4413      	add	r3, r2
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e7      	bne.n	800db9e <USBD_GetString+0x52>
 800dbce:	e000      	b.n	800dbd2 <USBD_GetString+0x86>
    return;
 800dbd0:	bf00      	nop
  }
}
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dbe8:	e005      	b.n	800dbf6 <USBD_GetLen+0x1e>
  {
    len++;
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	3301      	adds	r3, #1
 800dbee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1f5      	bne.n	800dbea <USBD_GetLen+0x12>
  }

  return len;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	2100      	movs	r1, #0
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f003 faed 	bl	8011212 <USBD_LL_Transmit>

  return USBD_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	2100      	movs	r1, #0
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f003 fadc 	bl	8011212 <USBD_LL_Transmit>

  return USBD_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2203      	movs	r2, #3
 800dc74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f003 fae0 	bl	8011254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	2100      	movs	r1, #0
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f003 facf 	bl	8011254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2204      	movs	r2, #4
 800dccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f003 fa9b 	bl	8011212 <USBD_LL_Transmit>

  return USBD_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2205      	movs	r2, #5
 800dcf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f003 faa9 	bl	8011254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dd0c:	b480      	push	{r7}
 800dd0e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800dd10:	bf00      	nop
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
	...

0800dd1c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd22:	f3ef 8305 	mrs	r3, IPSR
 800dd26:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10f      	bne.n	800dd4e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd2e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd32:	607b      	str	r3, [r7, #4]
  return(result);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d105      	bne.n	800dd46 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd3a:	f3ef 8311 	mrs	r3, BASEPRI
 800dd3e:	603b      	str	r3, [r7, #0]
  return(result);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d007      	beq.n	800dd56 <osKernelInitialize+0x3a>
 800dd46:	4b0e      	ldr	r3, [pc, #56]	; (800dd80 <osKernelInitialize+0x64>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d103      	bne.n	800dd56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dd4e:	f06f 0305 	mvn.w	r3, #5
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	e00c      	b.n	800dd70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dd56:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <osKernelInitialize+0x64>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d105      	bne.n	800dd6a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dd5e:	4b08      	ldr	r3, [pc, #32]	; (800dd80 <osKernelInitialize+0x64>)
 800dd60:	2201      	movs	r2, #1
 800dd62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	e002      	b.n	800dd70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dd70:	68fb      	ldr	r3, [r7, #12]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	2000bf94 	.word	0x2000bf94

0800dd84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd8a:	f3ef 8305 	mrs	r3, IPSR
 800dd8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10f      	bne.n	800ddb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd96:	f3ef 8310 	mrs	r3, PRIMASK
 800dd9a:	607b      	str	r3, [r7, #4]
  return(result);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d105      	bne.n	800ddae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dda2:	f3ef 8311 	mrs	r3, BASEPRI
 800dda6:	603b      	str	r3, [r7, #0]
  return(result);
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d007      	beq.n	800ddbe <osKernelStart+0x3a>
 800ddae:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <osKernelStart+0x68>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d103      	bne.n	800ddbe <osKernelStart+0x3a>
    stat = osErrorISR;
 800ddb6:	f06f 0305 	mvn.w	r3, #5
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	e010      	b.n	800dde0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ddbe:	4b0b      	ldr	r3, [pc, #44]	; (800ddec <osKernelStart+0x68>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d109      	bne.n	800ddda <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ddc6:	f7ff ffa1 	bl	800dd0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ddca:	4b08      	ldr	r3, [pc, #32]	; (800ddec <osKernelStart+0x68>)
 800ddcc:	2202      	movs	r2, #2
 800ddce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ddd0:	f001 f8b4 	bl	800ef3c <vTaskStartScheduler>
      stat = osOK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	e002      	b.n	800dde0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ddda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dde0:	68fb      	ldr	r3, [r7, #12]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	2000bf94 	.word	0x2000bf94

0800ddf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b090      	sub	sp, #64	; 0x40
 800ddf4:	af04      	add	r7, sp, #16
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de00:	f3ef 8305 	mrs	r3, IPSR
 800de04:	61fb      	str	r3, [r7, #28]
  return(result);
 800de06:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f040 808f 	bne.w	800df2c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de0e:	f3ef 8310 	mrs	r3, PRIMASK
 800de12:	61bb      	str	r3, [r7, #24]
  return(result);
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de1a:	f3ef 8311 	mrs	r3, BASEPRI
 800de1e:	617b      	str	r3, [r7, #20]
  return(result);
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <osThreadNew+0x3e>
 800de26:	4b44      	ldr	r3, [pc, #272]	; (800df38 <osThreadNew+0x148>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d07e      	beq.n	800df2c <osThreadNew+0x13c>
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d07b      	beq.n	800df2c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800de34:	2380      	movs	r3, #128	; 0x80
 800de36:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800de38:	2318      	movs	r3, #24
 800de3a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800de3c:	2300      	movs	r3, #0
 800de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800de40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d045      	beq.n	800ded8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <osThreadNew+0x6a>
        name = attr->name;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	699b      	ldr	r3, [r3, #24]
 800de66:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d008      	beq.n	800de80 <osThreadNew+0x90>
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	2b38      	cmp	r3, #56	; 0x38
 800de72:	d805      	bhi.n	800de80 <osThreadNew+0x90>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f003 0301 	and.w	r3, r3, #1
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d001      	beq.n	800de84 <osThreadNew+0x94>
        return (NULL);
 800de80:	2300      	movs	r3, #0
 800de82:	e054      	b.n	800df2e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d003      	beq.n	800de94 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	695b      	ldr	r3, [r3, #20]
 800de90:	089b      	lsrs	r3, r3, #2
 800de92:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00e      	beq.n	800deba <osThreadNew+0xca>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	2b5b      	cmp	r3, #91	; 0x5b
 800dea2:	d90a      	bls.n	800deba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d006      	beq.n	800deba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <osThreadNew+0xca>
        mem = 1;
 800deb4:	2301      	movs	r3, #1
 800deb6:	623b      	str	r3, [r7, #32]
 800deb8:	e010      	b.n	800dedc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10c      	bne.n	800dedc <osThreadNew+0xec>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d108      	bne.n	800dedc <osThreadNew+0xec>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d104      	bne.n	800dedc <osThreadNew+0xec>
          mem = 0;
 800ded2:	2300      	movs	r3, #0
 800ded4:	623b      	str	r3, [r7, #32]
 800ded6:	e001      	b.n	800dedc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d110      	bne.n	800df04 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800deea:	9202      	str	r2, [sp, #8]
 800deec:	9301      	str	r3, [sp, #4]
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800def6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 fe3f 	bl	800eb7c <xTaskCreateStatic>
 800defe:	4603      	mov	r3, r0
 800df00:	613b      	str	r3, [r7, #16]
 800df02:	e013      	b.n	800df2c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d110      	bne.n	800df2c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	f107 0310 	add.w	r3, r7, #16
 800df12:	9301      	str	r3, [sp, #4]
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f000 fe90 	bl	800ec42 <xTaskCreate>
 800df22:	4603      	mov	r3, r0
 800df24:	2b01      	cmp	r3, #1
 800df26:	d001      	beq.n	800df2c <osThreadNew+0x13c>
          hTask = NULL;
 800df28:	2300      	movs	r3, #0
 800df2a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df2c:	693b      	ldr	r3, [r7, #16]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3730      	adds	r7, #48	; 0x30
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	2000bf94 	.word	0x2000bf94

0800df3c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df44:	f3ef 8305 	mrs	r3, IPSR
 800df48:	613b      	str	r3, [r7, #16]
  return(result);
 800df4a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10f      	bne.n	800df70 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df50:	f3ef 8310 	mrs	r3, PRIMASK
 800df54:	60fb      	str	r3, [r7, #12]
  return(result);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d105      	bne.n	800df68 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df5c:	f3ef 8311 	mrs	r3, BASEPRI
 800df60:	60bb      	str	r3, [r7, #8]
  return(result);
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d007      	beq.n	800df78 <osDelay+0x3c>
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <osDelay+0x58>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d103      	bne.n	800df78 <osDelay+0x3c>
    stat = osErrorISR;
 800df70:	f06f 0305 	mvn.w	r3, #5
 800df74:	617b      	str	r3, [r7, #20]
 800df76:	e007      	b.n	800df88 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <osDelay+0x4c>
      vTaskDelay(ticks);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 ffa4 	bl	800eed0 <vTaskDelay>
    }
  }

  return (stat);
 800df88:	697b      	ldr	r3, [r7, #20]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3718      	adds	r7, #24
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	2000bf94 	.word	0x2000bf94

0800df98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4a07      	ldr	r2, [pc, #28]	; (800dfc4 <vApplicationGetIdleTaskMemory+0x2c>)
 800dfa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	4a06      	ldr	r2, [pc, #24]	; (800dfc8 <vApplicationGetIdleTaskMemory+0x30>)
 800dfae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2280      	movs	r2, #128	; 0x80
 800dfb4:	601a      	str	r2, [r3, #0]
}
 800dfb6:	bf00      	nop
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	2000bf98 	.word	0x2000bf98
 800dfc8:	2000bff4 	.word	0x2000bff4

0800dfcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4a07      	ldr	r2, [pc, #28]	; (800dff8 <vApplicationGetTimerTaskMemory+0x2c>)
 800dfdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	4a06      	ldr	r2, [pc, #24]	; (800dffc <vApplicationGetTimerTaskMemory+0x30>)
 800dfe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfea:	601a      	str	r2, [r3, #0]
}
 800dfec:	bf00      	nop
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr
 800dff8:	2000c1f4 	.word	0x2000c1f4
 800dffc:	2000c250 	.word	0x2000c250

0800e000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f103 0208 	add.w	r2, r3, #8
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f103 0208 	add.w	r2, r3, #8
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f103 0208 	add.w	r2, r3, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e04e:	bf00      	nop
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e05a:	b480      	push	{r7}
 800e05c:	b085      	sub	sp, #20
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	689a      	ldr	r2, [r3, #8]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	1c5a      	adds	r2, r3, #1
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	601a      	str	r2, [r3, #0]
}
 800e096:	bf00      	nop
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0b8:	d103      	bne.n	800e0c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	e00c      	b.n	800e0dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	e002      	b.n	800e0d0 <vListInsert+0x2e>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	60fb      	str	r3, [r7, #12]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d2f6      	bcs.n	800e0ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	685a      	ldr	r2, [r3, #4]
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	601a      	str	r2, [r3, #0]
}
 800e108:	bf00      	nop
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e114:	b480      	push	{r7}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	6892      	ldr	r2, [r2, #8]
 800e12a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	6852      	ldr	r2, [r2, #4]
 800e134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d103      	bne.n	800e148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	689a      	ldr	r2, [r3, #8]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	1e5a      	subs	r2, r3, #1
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10c      	bne.n	800e196 <xQueueGenericReset+0x2e>
	__asm volatile
 800e17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e180:	b672      	cpsid	i
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	b662      	cpsie	i
 800e190:	60bb      	str	r3, [r7, #8]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e196:	f002 f8a1 	bl	80102dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a2:	68f9      	ldr	r1, [r7, #12]
 800e1a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e1a6:	fb01 f303 	mul.w	r3, r1, r3
 800e1aa:	441a      	add	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	68f9      	ldr	r1, [r7, #12]
 800e1ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e1cc:	fb01 f303 	mul.w	r3, r1, r3
 800e1d0:	441a      	add	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	22ff      	movs	r2, #255	; 0xff
 800e1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	22ff      	movs	r2, #255	; 0xff
 800e1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d114      	bne.n	800e216 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d01a      	beq.n	800e22a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3310      	adds	r3, #16
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f001 f937 	bl	800f46c <xTaskRemoveFromEventList>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d012      	beq.n	800e22a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e204:	4b0c      	ldr	r3, [pc, #48]	; (800e238 <xQueueGenericReset+0xd0>)
 800e206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	e009      	b.n	800e22a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3310      	adds	r3, #16
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fef0 	bl	800e000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	3324      	adds	r3, #36	; 0x24
 800e224:	4618      	mov	r0, r3
 800e226:	f7ff feeb 	bl	800e000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e22a:	f002 f88b 	bl	8010344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e22e:	2301      	movs	r3, #1
}
 800e230:	4618      	mov	r0, r3
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	e000ed04 	.word	0xe000ed04

0800e23c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b08e      	sub	sp, #56	; 0x38
 800e240:	af02      	add	r7, sp, #8
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10c      	bne.n	800e26a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	b672      	cpsid	i
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	b662      	cpsie	i
 800e264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e266:	bf00      	nop
 800e268:	e7fe      	b.n	800e268 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10c      	bne.n	800e28a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	b672      	cpsid	i
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	b662      	cpsie	i
 800e284:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e286:	bf00      	nop
 800e288:	e7fe      	b.n	800e288 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <xQueueGenericCreateStatic+0x5a>
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <xQueueGenericCreateStatic+0x5e>
 800e296:	2301      	movs	r3, #1
 800e298:	e000      	b.n	800e29c <xQueueGenericCreateStatic+0x60>
 800e29a:	2300      	movs	r3, #0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10c      	bne.n	800e2ba <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a4:	b672      	cpsid	i
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	b662      	cpsie	i
 800e2b4:	623b      	str	r3, [r7, #32]
}
 800e2b6:	bf00      	nop
 800e2b8:	e7fe      	b.n	800e2b8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d102      	bne.n	800e2c6 <xQueueGenericCreateStatic+0x8a>
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <xQueueGenericCreateStatic+0x8e>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <xQueueGenericCreateStatic+0x90>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10c      	bne.n	800e2ea <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d4:	b672      	cpsid	i
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	b662      	cpsie	i
 800e2e4:	61fb      	str	r3, [r7, #28]
}
 800e2e6:	bf00      	nop
 800e2e8:	e7fe      	b.n	800e2e8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e2ea:	2350      	movs	r3, #80	; 0x50
 800e2ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2b50      	cmp	r3, #80	; 0x50
 800e2f2:	d00c      	beq.n	800e30e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	b672      	cpsid	i
 800e2fa:	f383 8811 	msr	BASEPRI, r3
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f3bf 8f4f 	dsb	sy
 800e306:	b662      	cpsie	i
 800e308:	61bb      	str	r3, [r7, #24]
}
 800e30a:	bf00      	nop
 800e30c:	e7fe      	b.n	800e30c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e30e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00d      	beq.n	800e336 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e322:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	4613      	mov	r3, r2
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	68b9      	ldr	r1, [r7, #8]
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 f805 	bl	800e340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e338:	4618      	mov	r0, r3
 800e33a:	3730      	adds	r7, #48	; 0x30
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
 800e34c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d103      	bne.n	800e35c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	69ba      	ldr	r2, [r7, #24]
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	e002      	b.n	800e362 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e36e:	2101      	movs	r1, #1
 800e370:	69b8      	ldr	r0, [r7, #24]
 800e372:	f7ff fef9 	bl	800e168 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	78fa      	ldrb	r2, [r7, #3]
 800e37a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e37e:	bf00      	nop
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
	...

0800e388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b08e      	sub	sp, #56	; 0x38
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e396:	2300      	movs	r3, #0
 800e398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10c      	bne.n	800e3be <xQueueGenericSend+0x36>
	__asm volatile
 800e3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a8:	b672      	cpsid	i
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	b662      	cpsie	i
 800e3b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d103      	bne.n	800e3cc <xQueueGenericSend+0x44>
 800e3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d101      	bne.n	800e3d0 <xQueueGenericSend+0x48>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e000      	b.n	800e3d2 <xQueueGenericSend+0x4a>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10c      	bne.n	800e3f0 <xQueueGenericSend+0x68>
	__asm volatile
 800e3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3da:	b672      	cpsid	i
 800e3dc:	f383 8811 	msr	BASEPRI, r3
 800e3e0:	f3bf 8f6f 	isb	sy
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	b662      	cpsie	i
 800e3ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d103      	bne.n	800e3fe <xQueueGenericSend+0x76>
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d101      	bne.n	800e402 <xQueueGenericSend+0x7a>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <xQueueGenericSend+0x7c>
 800e402:	2300      	movs	r3, #0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10c      	bne.n	800e422 <xQueueGenericSend+0x9a>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40c:	b672      	cpsid	i
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	b662      	cpsie	i
 800e41c:	623b      	str	r3, [r7, #32]
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e422:	f001 fa11 	bl	800f848 <xTaskGetSchedulerState>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d102      	bne.n	800e432 <xQueueGenericSend+0xaa>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <xQueueGenericSend+0xae>
 800e432:	2301      	movs	r3, #1
 800e434:	e000      	b.n	800e438 <xQueueGenericSend+0xb0>
 800e436:	2300      	movs	r3, #0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10c      	bne.n	800e456 <xQueueGenericSend+0xce>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	b672      	cpsid	i
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	b662      	cpsie	i
 800e450:	61fb      	str	r3, [r7, #28]
}
 800e452:	bf00      	nop
 800e454:	e7fe      	b.n	800e454 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e456:	f001 ff41 	bl	80102dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e462:	429a      	cmp	r2, r3
 800e464:	d302      	bcc.n	800e46c <xQueueGenericSend+0xe4>
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d129      	bne.n	800e4c0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e46c:	683a      	ldr	r2, [r7, #0]
 800e46e:	68b9      	ldr	r1, [r7, #8]
 800e470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e472:	f000 fa15 	bl	800e8a0 <prvCopyDataToQueue>
 800e476:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d010      	beq.n	800e4a2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e482:	3324      	adds	r3, #36	; 0x24
 800e484:	4618      	mov	r0, r3
 800e486:	f000 fff1 	bl	800f46c <xTaskRemoveFromEventList>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d013      	beq.n	800e4b8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e490:	4b3f      	ldr	r3, [pc, #252]	; (800e590 <xQueueGenericSend+0x208>)
 800e492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	e00a      	b.n	800e4b8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d007      	beq.n	800e4b8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4a8:	4b39      	ldr	r3, [pc, #228]	; (800e590 <xQueueGenericSend+0x208>)
 800e4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4b8:	f001 ff44 	bl	8010344 <vPortExitCritical>
				return pdPASS;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e063      	b.n	800e588 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d103      	bne.n	800e4ce <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4c6:	f001 ff3d 	bl	8010344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	e05c      	b.n	800e588 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4d4:	f107 0314 	add.w	r3, r7, #20
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f001 f855 	bl	800f588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4e2:	f001 ff2f 	bl	8010344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4e6:	f000 fd93 	bl	800f010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4ea:	f001 fef7 	bl	80102dc <vPortEnterCritical>
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4f4:	b25b      	sxtb	r3, r3
 800e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4fa:	d103      	bne.n	800e504 <xQueueGenericSend+0x17c>
 800e4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e50a:	b25b      	sxtb	r3, r3
 800e50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e510:	d103      	bne.n	800e51a <xQueueGenericSend+0x192>
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	2200      	movs	r2, #0
 800e516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e51a:	f001 ff13 	bl	8010344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e51e:	1d3a      	adds	r2, r7, #4
 800e520:	f107 0314 	add.w	r3, r7, #20
 800e524:	4611      	mov	r1, r2
 800e526:	4618      	mov	r0, r3
 800e528:	f001 f844 	bl	800f5b4 <xTaskCheckForTimeOut>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d124      	bne.n	800e57c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e534:	f000 faac 	bl	800ea90 <prvIsQueueFull>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d018      	beq.n	800e570 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	3310      	adds	r3, #16
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	4611      	mov	r1, r2
 800e546:	4618      	mov	r0, r3
 800e548:	f000 ff3c 	bl	800f3c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e54c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e54e:	f000 fa37 	bl	800e9c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e552:	f000 fd6b 	bl	800f02c <xTaskResumeAll>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f47f af7c 	bne.w	800e456 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e55e:	4b0c      	ldr	r3, [pc, #48]	; (800e590 <xQueueGenericSend+0x208>)
 800e560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	f3bf 8f6f 	isb	sy
 800e56e:	e772      	b.n	800e456 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e572:	f000 fa25 	bl	800e9c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e576:	f000 fd59 	bl	800f02c <xTaskResumeAll>
 800e57a:	e76c      	b.n	800e456 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e57c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e57e:	f000 fa1f 	bl	800e9c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e582:	f000 fd53 	bl	800f02c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e586:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3738      	adds	r7, #56	; 0x38
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	e000ed04 	.word	0xe000ed04

0800e594 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b08e      	sub	sp, #56	; 0x38
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10c      	bne.n	800e5c6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b0:	b672      	cpsid	i
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	b662      	cpsie	i
 800e5c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5c2:	bf00      	nop
 800e5c4:	e7fe      	b.n	800e5c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d103      	bne.n	800e5d4 <xQueueGenericSendFromISR+0x40>
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <xQueueGenericSendFromISR+0x44>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e000      	b.n	800e5da <xQueueGenericSendFromISR+0x46>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10c      	bne.n	800e5f8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	b672      	cpsid	i
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	b662      	cpsie	i
 800e5f2:	623b      	str	r3, [r7, #32]
}
 800e5f4:	bf00      	nop
 800e5f6:	e7fe      	b.n	800e5f6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2b02      	cmp	r3, #2
 800e5fc:	d103      	bne.n	800e606 <xQueueGenericSendFromISR+0x72>
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e602:	2b01      	cmp	r3, #1
 800e604:	d101      	bne.n	800e60a <xQueueGenericSendFromISR+0x76>
 800e606:	2301      	movs	r3, #1
 800e608:	e000      	b.n	800e60c <xQueueGenericSendFromISR+0x78>
 800e60a:	2300      	movs	r3, #0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10c      	bne.n	800e62a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e614:	b672      	cpsid	i
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	b662      	cpsie	i
 800e624:	61fb      	str	r3, [r7, #28]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e62a:	f001 ff3f 	bl	80104ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e62e:	f3ef 8211 	mrs	r2, BASEPRI
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	b672      	cpsid	i
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	b662      	cpsie	i
 800e646:	61ba      	str	r2, [r7, #24]
 800e648:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e64a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e64c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e656:	429a      	cmp	r2, r3
 800e658:	d302      	bcc.n	800e660 <xQueueGenericSendFromISR+0xcc>
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	d12c      	bne.n	800e6ba <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	68b9      	ldr	r1, [r7, #8]
 800e66e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e670:	f000 f916 	bl	800e8a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e674:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e67c:	d112      	bne.n	800e6a4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e682:	2b00      	cmp	r3, #0
 800e684:	d016      	beq.n	800e6b4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e688:	3324      	adds	r3, #36	; 0x24
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 feee 	bl	800f46c <xTaskRemoveFromEventList>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00e      	beq.n	800e6b4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00b      	beq.n	800e6b4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	601a      	str	r2, [r3, #0]
 800e6a2:	e007      	b.n	800e6b4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	b25a      	sxtb	r2, r3
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e6b8:	e001      	b.n	800e6be <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e6c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3738      	adds	r7, #56	; 0x38
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08c      	sub	sp, #48	; 0x30
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10c      	bne.n	800e708 <xQueueReceive+0x34>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	b672      	cpsid	i
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	b662      	cpsie	i
 800e702:	623b      	str	r3, [r7, #32]
}
 800e704:	bf00      	nop
 800e706:	e7fe      	b.n	800e706 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d103      	bne.n	800e716 <xQueueReceive+0x42>
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e712:	2b00      	cmp	r3, #0
 800e714:	d101      	bne.n	800e71a <xQueueReceive+0x46>
 800e716:	2301      	movs	r3, #1
 800e718:	e000      	b.n	800e71c <xQueueReceive+0x48>
 800e71a:	2300      	movs	r3, #0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10c      	bne.n	800e73a <xQueueReceive+0x66>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	b672      	cpsid	i
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	b662      	cpsie	i
 800e734:	61fb      	str	r3, [r7, #28]
}
 800e736:	bf00      	nop
 800e738:	e7fe      	b.n	800e738 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e73a:	f001 f885 	bl	800f848 <xTaskGetSchedulerState>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d102      	bne.n	800e74a <xQueueReceive+0x76>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d101      	bne.n	800e74e <xQueueReceive+0x7a>
 800e74a:	2301      	movs	r3, #1
 800e74c:	e000      	b.n	800e750 <xQueueReceive+0x7c>
 800e74e:	2300      	movs	r3, #0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10c      	bne.n	800e76e <xQueueReceive+0x9a>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	b672      	cpsid	i
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	b662      	cpsie	i
 800e768:	61bb      	str	r3, [r7, #24]
}
 800e76a:	bf00      	nop
 800e76c:	e7fe      	b.n	800e76c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e76e:	f001 fdb5 	bl	80102dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d01f      	beq.n	800e7be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e77e:	68b9      	ldr	r1, [r7, #8]
 800e780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e782:	f000 f8f7 	bl	800e974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	1e5a      	subs	r2, r3, #1
 800e78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00f      	beq.n	800e7b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	3310      	adds	r3, #16
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 fe66 	bl	800f46c <xTaskRemoveFromEventList>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d007      	beq.n	800e7b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7a6:	4b3d      	ldr	r3, [pc, #244]	; (800e89c <xQueueReceive+0x1c8>)
 800e7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7b6:	f001 fdc5 	bl	8010344 <vPortExitCritical>
				return pdPASS;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e069      	b.n	800e892 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d103      	bne.n	800e7cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e7c4:	f001 fdbe 	bl	8010344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	e062      	b.n	800e892 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d106      	bne.n	800e7e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7d2:	f107 0310 	add.w	r3, r7, #16
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 fed6 	bl	800f588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7e0:	f001 fdb0 	bl	8010344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7e4:	f000 fc14 	bl	800f010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7e8:	f001 fd78 	bl	80102dc <vPortEnterCritical>
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7f2:	b25b      	sxtb	r3, r3
 800e7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7f8:	d103      	bne.n	800e802 <xQueueReceive+0x12e>
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e808:	b25b      	sxtb	r3, r3
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e80e:	d103      	bne.n	800e818 <xQueueReceive+0x144>
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	2200      	movs	r2, #0
 800e814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e818:	f001 fd94 	bl	8010344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e81c:	1d3a      	adds	r2, r7, #4
 800e81e:	f107 0310 	add.w	r3, r7, #16
 800e822:	4611      	mov	r1, r2
 800e824:	4618      	mov	r0, r3
 800e826:	f000 fec5 	bl	800f5b4 <xTaskCheckForTimeOut>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d123      	bne.n	800e878 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e832:	f000 f917 	bl	800ea64 <prvIsQueueEmpty>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d017      	beq.n	800e86c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	3324      	adds	r3, #36	; 0x24
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4611      	mov	r1, r2
 800e844:	4618      	mov	r0, r3
 800e846:	f000 fdbd 	bl	800f3c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e84c:	f000 f8b8 	bl	800e9c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e850:	f000 fbec 	bl	800f02c <xTaskResumeAll>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d189      	bne.n	800e76e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e85a:	4b10      	ldr	r3, [pc, #64]	; (800e89c <xQueueReceive+0x1c8>)
 800e85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	e780      	b.n	800e76e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e86e:	f000 f8a7 	bl	800e9c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e872:	f000 fbdb 	bl	800f02c <xTaskResumeAll>
 800e876:	e77a      	b.n	800e76e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e87a:	f000 f8a1 	bl	800e9c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e87e:	f000 fbd5 	bl	800f02c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e884:	f000 f8ee 	bl	800ea64 <prvIsQueueEmpty>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f43f af6f 	beq.w	800e76e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e892:	4618      	mov	r0, r3
 800e894:	3730      	adds	r7, #48	; 0x30
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	e000ed04 	.word	0xe000ed04

0800e8a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d10d      	bne.n	800e8da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d14d      	bne.n	800e962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f000 ffda 	bl	800f884 <xTaskPriorityDisinherit>
 800e8d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	609a      	str	r2, [r3, #8]
 800e8d8:	e043      	b.n	800e962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d119      	bne.n	800e914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6858      	ldr	r0, [r3, #4]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	68b9      	ldr	r1, [r7, #8]
 800e8ec:	f012 faef 	bl	8020ece <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	685a      	ldr	r2, [r3, #4]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f8:	441a      	add	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	429a      	cmp	r2, r3
 800e908:	d32b      	bcc.n	800e962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	605a      	str	r2, [r3, #4]
 800e912:	e026      	b.n	800e962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	68d8      	ldr	r0, [r3, #12]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91c:	461a      	mov	r2, r3
 800e91e:	68b9      	ldr	r1, [r7, #8]
 800e920:	f012 fad5 	bl	8020ece <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	68da      	ldr	r2, [r3, #12]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e92c:	425b      	negs	r3, r3
 800e92e:	441a      	add	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	68da      	ldr	r2, [r3, #12]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d207      	bcs.n	800e950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	689a      	ldr	r2, [r3, #8]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e948:	425b      	negs	r3, r3
 800e94a:	441a      	add	r2, r3
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d105      	bne.n	800e962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d002      	beq.n	800e962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	3b01      	subs	r3, #1
 800e960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	1c5a      	adds	r2, r3, #1
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e96a:	697b      	ldr	r3, [r7, #20]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e982:	2b00      	cmp	r3, #0
 800e984:	d018      	beq.n	800e9b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98e:	441a      	add	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68da      	ldr	r2, [r3, #12]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d303      	bcc.n	800e9a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	68d9      	ldr	r1, [r3, #12]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	6838      	ldr	r0, [r7, #0]
 800e9b4:	f012 fa8b 	bl	8020ece <memcpy>
	}
}
 800e9b8:	bf00      	nop
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9c8:	f001 fc88 	bl	80102dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9d4:	e011      	b.n	800e9fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d012      	beq.n	800ea04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	3324      	adds	r3, #36	; 0x24
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f000 fd42 	bl	800f46c <xTaskRemoveFromEventList>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d001      	beq.n	800e9f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9ee:	f000 fe47 	bl	800f680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9f2:	7bfb      	ldrb	r3, [r7, #15]
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	dce9      	bgt.n	800e9d6 <prvUnlockQueue+0x16>
 800ea02:	e000      	b.n	800ea06 <prvUnlockQueue+0x46>
					break;
 800ea04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	22ff      	movs	r2, #255	; 0xff
 800ea0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea0e:	f001 fc99 	bl	8010344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea12:	f001 fc63 	bl	80102dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea1e:	e011      	b.n	800ea44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d012      	beq.n	800ea4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3310      	adds	r3, #16
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f000 fd1d 	bl	800f46c <xTaskRemoveFromEventList>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d001      	beq.n	800ea3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea38:	f000 fe22 	bl	800f680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea3c:	7bbb      	ldrb	r3, [r7, #14]
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	dce9      	bgt.n	800ea20 <prvUnlockQueue+0x60>
 800ea4c:	e000      	b.n	800ea50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	22ff      	movs	r2, #255	; 0xff
 800ea54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea58:	f001 fc74 	bl	8010344 <vPortExitCritical>
}
 800ea5c:	bf00      	nop
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea6c:	f001 fc36 	bl	80102dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d102      	bne.n	800ea7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	60fb      	str	r3, [r7, #12]
 800ea7c:	e001      	b.n	800ea82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea82:	f001 fc5f 	bl	8010344 <vPortExitCritical>

	return xReturn;
 800ea86:	68fb      	ldr	r3, [r7, #12]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea98:	f001 fc20 	bl	80102dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d102      	bne.n	800eaae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	60fb      	str	r3, [r7, #12]
 800eaac:	e001      	b.n	800eab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eaae:	2300      	movs	r3, #0
 800eab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eab2:	f001 fc47 	bl	8010344 <vPortExitCritical>

	return xReturn;
 800eab6:	68fb      	ldr	r3, [r7, #12]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaca:	2300      	movs	r3, #0
 800eacc:	60fb      	str	r3, [r7, #12]
 800eace:	e014      	b.n	800eafa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ead0:	4a0f      	ldr	r2, [pc, #60]	; (800eb10 <vQueueAddToRegistry+0x50>)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10b      	bne.n	800eaf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eadc:	490c      	ldr	r1, [pc, #48]	; (800eb10 <vQueueAddToRegistry+0x50>)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	683a      	ldr	r2, [r7, #0]
 800eae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eae6:	4a0a      	ldr	r2, [pc, #40]	; (800eb10 <vQueueAddToRegistry+0x50>)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	4413      	add	r3, r2
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eaf2:	e006      	b.n	800eb02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2b07      	cmp	r3, #7
 800eafe:	d9e7      	bls.n	800ead0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb00:	bf00      	nop
 800eb02:	bf00      	nop
 800eb04:	3714      	adds	r7, #20
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	2000c650 	.word	0x2000c650

0800eb14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb24:	f001 fbda 	bl	80102dc <vPortEnterCritical>
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb2e:	b25b      	sxtb	r3, r3
 800eb30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb34:	d103      	bne.n	800eb3e <vQueueWaitForMessageRestricted+0x2a>
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb44:	b25b      	sxtb	r3, r3
 800eb46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb4a:	d103      	bne.n	800eb54 <vQueueWaitForMessageRestricted+0x40>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb54:	f001 fbf6 	bl	8010344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	3324      	adds	r3, #36	; 0x24
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	68b9      	ldr	r1, [r7, #8]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f000 fc51 	bl	800f410 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb6e:	6978      	ldr	r0, [r7, #20]
 800eb70:	f7ff ff26 	bl	800e9c0 <prvUnlockQueue>
	}
 800eb74:	bf00      	nop
 800eb76:	3718      	adds	r7, #24
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08e      	sub	sp, #56	; 0x38
 800eb80:	af04      	add	r7, sp, #16
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]
 800eb88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10c      	bne.n	800ebaa <xTaskCreateStatic+0x2e>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	b672      	cpsid	i
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	b662      	cpsie	i
 800eba4:	623b      	str	r3, [r7, #32]
}
 800eba6:	bf00      	nop
 800eba8:	e7fe      	b.n	800eba8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10c      	bne.n	800ebca <xTaskCreateStatic+0x4e>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb4:	b672      	cpsid	i
 800ebb6:	f383 8811 	msr	BASEPRI, r3
 800ebba:	f3bf 8f6f 	isb	sy
 800ebbe:	f3bf 8f4f 	dsb	sy
 800ebc2:	b662      	cpsie	i
 800ebc4:	61fb      	str	r3, [r7, #28]
}
 800ebc6:	bf00      	nop
 800ebc8:	e7fe      	b.n	800ebc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ebca:	235c      	movs	r3, #92	; 0x5c
 800ebcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	2b5c      	cmp	r3, #92	; 0x5c
 800ebd2:	d00c      	beq.n	800ebee <xTaskCreateStatic+0x72>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd8:	b672      	cpsid	i
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	b662      	cpsie	i
 800ebe8:	61bb      	str	r3, [r7, #24]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d01e      	beq.n	800ec34 <xTaskCreateStatic+0xb8>
 800ebf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d01b      	beq.n	800ec34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec08:	2202      	movs	r2, #2
 800ec0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec0e:	2300      	movs	r3, #0
 800ec10:	9303      	str	r3, [sp, #12]
 800ec12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec14:	9302      	str	r3, [sp, #8]
 800ec16:	f107 0314 	add.w	r3, r7, #20
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	68b9      	ldr	r1, [r7, #8]
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f000 f850 	bl	800eccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec2e:	f000 f8df 	bl	800edf0 <prvAddNewTaskToReadyList>
 800ec32:	e001      	b.n	800ec38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec38:	697b      	ldr	r3, [r7, #20]
	}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3728      	adds	r7, #40	; 0x28
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b08c      	sub	sp, #48	; 0x30
 800ec46:	af04      	add	r7, sp, #16
 800ec48:	60f8      	str	r0, [r7, #12]
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	603b      	str	r3, [r7, #0]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec52:	88fb      	ldrh	r3, [r7, #6]
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f001 fc6c 	bl	8010534 <pvPortMalloc>
 800ec5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00e      	beq.n	800ec82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec64:	205c      	movs	r0, #92	; 0x5c
 800ec66:	f001 fc65 	bl	8010534 <pvPortMalloc>
 800ec6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	697a      	ldr	r2, [r7, #20]
 800ec76:	631a      	str	r2, [r3, #48]	; 0x30
 800ec78:	e005      	b.n	800ec86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec7a:	6978      	ldr	r0, [r7, #20]
 800ec7c:	f001 fd24 	bl	80106c8 <vPortFree>
 800ec80:	e001      	b.n	800ec86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d017      	beq.n	800ecbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec94:	88fa      	ldrh	r2, [r7, #6]
 800ec96:	2300      	movs	r3, #0
 800ec98:	9303      	str	r3, [sp, #12]
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	9302      	str	r3, [sp, #8]
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f000 f80e 	bl	800eccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecb0:	69f8      	ldr	r0, [r7, #28]
 800ecb2:	f000 f89d 	bl	800edf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	e002      	b.n	800ecc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ecbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ecc2:	69bb      	ldr	r3, [r7, #24]
	}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3720      	adds	r7, #32
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b088      	sub	sp, #32
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	461a      	mov	r2, r3
 800ece4:	21a5      	movs	r1, #165	; 0xa5
 800ece6:	f012 f825 	bl	8020d34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ecf4:	440b      	add	r3, r1
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	f023 0307 	bic.w	r3, r3, #7
 800ed02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00c      	beq.n	800ed28 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	b672      	cpsid	i
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	b662      	cpsie	i
 800ed22:	617b      	str	r3, [r7, #20]
}
 800ed24:	bf00      	nop
 800ed26:	e7fe      	b.n	800ed26 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d01f      	beq.n	800ed6e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed2e:	2300      	movs	r3, #0
 800ed30:	61fb      	str	r3, [r7, #28]
 800ed32:	e012      	b.n	800ed5a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	4413      	add	r3, r2
 800ed3a:	7819      	ldrb	r1, [r3, #0]
 800ed3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	4413      	add	r3, r2
 800ed42:	3334      	adds	r3, #52	; 0x34
 800ed44:	460a      	mov	r2, r1
 800ed46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d006      	beq.n	800ed62 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	3301      	adds	r3, #1
 800ed58:	61fb      	str	r3, [r7, #28]
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	2b0f      	cmp	r3, #15
 800ed5e:	d9e9      	bls.n	800ed34 <prvInitialiseNewTask+0x68>
 800ed60:	e000      	b.n	800ed64 <prvInitialiseNewTask+0x98>
			{
				break;
 800ed62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	2200      	movs	r2, #0
 800ed68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed6c:	e003      	b.n	800ed76 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	2b37      	cmp	r3, #55	; 0x37
 800ed7a:	d901      	bls.n	800ed80 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed7c:	2337      	movs	r3, #55	; 0x37
 800ed7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	2200      	movs	r2, #0
 800ed90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed94:	3304      	adds	r3, #4
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff f952 	bl	800e040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9e:	3318      	adds	r3, #24
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7ff f94d 	bl	800e040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	2200      	movs	r2, #0
 800edc0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	68f9      	ldr	r1, [r7, #12]
 800edce:	69b8      	ldr	r0, [r7, #24]
 800edd0:	f001 f97a 	bl	80100c8 <pxPortInitialiseStack>
 800edd4:	4602      	mov	r2, r0
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ede6:	bf00      	nop
 800ede8:	3720      	adds	r7, #32
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
	...

0800edf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edf8:	f001 fa70 	bl	80102dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edfc:	4b2d      	ldr	r3, [pc, #180]	; (800eeb4 <prvAddNewTaskToReadyList+0xc4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	4a2c      	ldr	r2, [pc, #176]	; (800eeb4 <prvAddNewTaskToReadyList+0xc4>)
 800ee04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee06:	4b2c      	ldr	r3, [pc, #176]	; (800eeb8 <prvAddNewTaskToReadyList+0xc8>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d109      	bne.n	800ee22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee0e:	4a2a      	ldr	r2, [pc, #168]	; (800eeb8 <prvAddNewTaskToReadyList+0xc8>)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee14:	4b27      	ldr	r3, [pc, #156]	; (800eeb4 <prvAddNewTaskToReadyList+0xc4>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d110      	bne.n	800ee3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee1c:	f000 fc54 	bl	800f6c8 <prvInitialiseTaskLists>
 800ee20:	e00d      	b.n	800ee3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee22:	4b26      	ldr	r3, [pc, #152]	; (800eebc <prvAddNewTaskToReadyList+0xcc>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d109      	bne.n	800ee3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee2a:	4b23      	ldr	r3, [pc, #140]	; (800eeb8 <prvAddNewTaskToReadyList+0xc8>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d802      	bhi.n	800ee3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee38:	4a1f      	ldr	r2, [pc, #124]	; (800eeb8 <prvAddNewTaskToReadyList+0xc8>)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee3e:	4b20      	ldr	r3, [pc, #128]	; (800eec0 <prvAddNewTaskToReadyList+0xd0>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	3301      	adds	r3, #1
 800ee44:	4a1e      	ldr	r2, [pc, #120]	; (800eec0 <prvAddNewTaskToReadyList+0xd0>)
 800ee46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee48:	4b1d      	ldr	r3, [pc, #116]	; (800eec0 <prvAddNewTaskToReadyList+0xd0>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee54:	4b1b      	ldr	r3, [pc, #108]	; (800eec4 <prvAddNewTaskToReadyList+0xd4>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d903      	bls.n	800ee64 <prvAddNewTaskToReadyList+0x74>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee60:	4a18      	ldr	r2, [pc, #96]	; (800eec4 <prvAddNewTaskToReadyList+0xd4>)
 800ee62:	6013      	str	r3, [r2, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee68:	4613      	mov	r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4a15      	ldr	r2, [pc, #84]	; (800eec8 <prvAddNewTaskToReadyList+0xd8>)
 800ee72:	441a      	add	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f7ff f8ed 	bl	800e05a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee80:	f001 fa60 	bl	8010344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee84:	4b0d      	ldr	r3, [pc, #52]	; (800eebc <prvAddNewTaskToReadyList+0xcc>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00e      	beq.n	800eeaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee8c:	4b0a      	ldr	r3, [pc, #40]	; (800eeb8 <prvAddNewTaskToReadyList+0xc8>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d207      	bcs.n	800eeaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee9a:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <prvAddNewTaskToReadyList+0xdc>)
 800ee9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	f3bf 8f4f 	dsb	sy
 800eea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eeaa:	bf00      	nop
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	2000cb64 	.word	0x2000cb64
 800eeb8:	2000c690 	.word	0x2000c690
 800eebc:	2000cb70 	.word	0x2000cb70
 800eec0:	2000cb80 	.word	0x2000cb80
 800eec4:	2000cb6c 	.word	0x2000cb6c
 800eec8:	2000c694 	.word	0x2000c694
 800eecc:	e000ed04 	.word	0xe000ed04

0800eed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eed8:	2300      	movs	r3, #0
 800eeda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d019      	beq.n	800ef16 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eee2:	4b14      	ldr	r3, [pc, #80]	; (800ef34 <vTaskDelay+0x64>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00c      	beq.n	800ef04 <vTaskDelay+0x34>
	__asm volatile
 800eeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeee:	b672      	cpsid	i
 800eef0:	f383 8811 	msr	BASEPRI, r3
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	b662      	cpsie	i
 800eefe:	60bb      	str	r3, [r7, #8]
}
 800ef00:	bf00      	nop
 800ef02:	e7fe      	b.n	800ef02 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ef04:	f000 f884 	bl	800f010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef08:	2100      	movs	r1, #0
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fd2c 	bl	800f968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef10:	f000 f88c 	bl	800f02c <xTaskResumeAll>
 800ef14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d107      	bne.n	800ef2c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ef1c:	4b06      	ldr	r3, [pc, #24]	; (800ef38 <vTaskDelay+0x68>)
 800ef1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef2c:	bf00      	nop
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	2000cb8c 	.word	0x2000cb8c
 800ef38:	e000ed04 	.word	0xe000ed04

0800ef3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08a      	sub	sp, #40	; 0x28
 800ef40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef4a:	463a      	mov	r2, r7
 800ef4c:	1d39      	adds	r1, r7, #4
 800ef4e:	f107 0308 	add.w	r3, r7, #8
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff f820 	bl	800df98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef58:	6839      	ldr	r1, [r7, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	9202      	str	r2, [sp, #8]
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	2300      	movs	r3, #0
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	2300      	movs	r3, #0
 800ef68:	460a      	mov	r2, r1
 800ef6a:	4923      	ldr	r1, [pc, #140]	; (800eff8 <vTaskStartScheduler+0xbc>)
 800ef6c:	4823      	ldr	r0, [pc, #140]	; (800effc <vTaskStartScheduler+0xc0>)
 800ef6e:	f7ff fe05 	bl	800eb7c <xTaskCreateStatic>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4a22      	ldr	r2, [pc, #136]	; (800f000 <vTaskStartScheduler+0xc4>)
 800ef76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef78:	4b21      	ldr	r3, [pc, #132]	; (800f000 <vTaskStartScheduler+0xc4>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef80:	2301      	movs	r3, #1
 800ef82:	617b      	str	r3, [r7, #20]
 800ef84:	e001      	b.n	800ef8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d102      	bne.n	800ef96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef90:	f000 fd3e 	bl	800fa10 <xTimerCreateTimerTask>
 800ef94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d118      	bne.n	800efce <vTaskStartScheduler+0x92>
	__asm volatile
 800ef9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa0:	b672      	cpsid	i
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	b662      	cpsie	i
 800efb0:	613b      	str	r3, [r7, #16]
}
 800efb2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800efb4:	4b13      	ldr	r3, [pc, #76]	; (800f004 <vTaskStartScheduler+0xc8>)
 800efb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800efbc:	4b12      	ldr	r3, [pc, #72]	; (800f008 <vTaskStartScheduler+0xcc>)
 800efbe:	2201      	movs	r2, #1
 800efc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800efc2:	4b12      	ldr	r3, [pc, #72]	; (800f00c <vTaskStartScheduler+0xd0>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800efc8:	f001 f90a 	bl	80101e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800efcc:	e010      	b.n	800eff0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efd4:	d10c      	bne.n	800eff0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	b672      	cpsid	i
 800efdc:	f383 8811 	msr	BASEPRI, r3
 800efe0:	f3bf 8f6f 	isb	sy
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	b662      	cpsie	i
 800efea:	60fb      	str	r3, [r7, #12]
}
 800efec:	bf00      	nop
 800efee:	e7fe      	b.n	800efee <vTaskStartScheduler+0xb2>
}
 800eff0:	bf00      	nop
 800eff2:	3718      	adds	r7, #24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	08024424 	.word	0x08024424
 800effc:	0800f699 	.word	0x0800f699
 800f000:	2000cb88 	.word	0x2000cb88
 800f004:	2000cb84 	.word	0x2000cb84
 800f008:	2000cb70 	.word	0x2000cb70
 800f00c:	2000cb68 	.word	0x2000cb68

0800f010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f010:	b480      	push	{r7}
 800f012:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f014:	4b04      	ldr	r3, [pc, #16]	; (800f028 <vTaskSuspendAll+0x18>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	3301      	adds	r3, #1
 800f01a:	4a03      	ldr	r2, [pc, #12]	; (800f028 <vTaskSuspendAll+0x18>)
 800f01c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f01e:	bf00      	nop
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	2000cb8c 	.word	0x2000cb8c

0800f02c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f032:	2300      	movs	r3, #0
 800f034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f036:	2300      	movs	r3, #0
 800f038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f03a:	4b43      	ldr	r3, [pc, #268]	; (800f148 <xTaskResumeAll+0x11c>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10c      	bne.n	800f05c <xTaskResumeAll+0x30>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f046:	b672      	cpsid	i
 800f048:	f383 8811 	msr	BASEPRI, r3
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	b662      	cpsie	i
 800f056:	603b      	str	r3, [r7, #0]
}
 800f058:	bf00      	nop
 800f05a:	e7fe      	b.n	800f05a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f05c:	f001 f93e 	bl	80102dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f060:	4b39      	ldr	r3, [pc, #228]	; (800f148 <xTaskResumeAll+0x11c>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3b01      	subs	r3, #1
 800f066:	4a38      	ldr	r2, [pc, #224]	; (800f148 <xTaskResumeAll+0x11c>)
 800f068:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f06a:	4b37      	ldr	r3, [pc, #220]	; (800f148 <xTaskResumeAll+0x11c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d162      	bne.n	800f138 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f072:	4b36      	ldr	r3, [pc, #216]	; (800f14c <xTaskResumeAll+0x120>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d05e      	beq.n	800f138 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f07a:	e02f      	b.n	800f0dc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07c:	4b34      	ldr	r3, [pc, #208]	; (800f150 <xTaskResumeAll+0x124>)
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	3318      	adds	r3, #24
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff f843 	bl	800e114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3304      	adds	r3, #4
 800f092:	4618      	mov	r0, r3
 800f094:	f7ff f83e 	bl	800e114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f09c:	4b2d      	ldr	r3, [pc, #180]	; (800f154 <xTaskResumeAll+0x128>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d903      	bls.n	800f0ac <xTaskResumeAll+0x80>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a8:	4a2a      	ldr	r2, [pc, #168]	; (800f154 <xTaskResumeAll+0x128>)
 800f0aa:	6013      	str	r3, [r2, #0]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4a27      	ldr	r2, [pc, #156]	; (800f158 <xTaskResumeAll+0x12c>)
 800f0ba:	441a      	add	r2, r3
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	f7fe ffc9 	bl	800e05a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0cc:	4b23      	ldr	r3, [pc, #140]	; (800f15c <xTaskResumeAll+0x130>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d302      	bcc.n	800f0dc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f0d6:	4b22      	ldr	r3, [pc, #136]	; (800f160 <xTaskResumeAll+0x134>)
 800f0d8:	2201      	movs	r2, #1
 800f0da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0dc:	4b1c      	ldr	r3, [pc, #112]	; (800f150 <xTaskResumeAll+0x124>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1cb      	bne.n	800f07c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0ea:	f000 fb8d 	bl	800f808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f0ee:	4b1d      	ldr	r3, [pc, #116]	; (800f164 <xTaskResumeAll+0x138>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d010      	beq.n	800f11c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0fa:	f000 f847 	bl	800f18c <xTaskIncrementTick>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f104:	4b16      	ldr	r3, [pc, #88]	; (800f160 <xTaskResumeAll+0x134>)
 800f106:	2201      	movs	r2, #1
 800f108:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1f1      	bne.n	800f0fa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f116:	4b13      	ldr	r3, [pc, #76]	; (800f164 <xTaskResumeAll+0x138>)
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f11c:	4b10      	ldr	r3, [pc, #64]	; (800f160 <xTaskResumeAll+0x134>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d009      	beq.n	800f138 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f124:	2301      	movs	r3, #1
 800f126:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f128:	4b0f      	ldr	r3, [pc, #60]	; (800f168 <xTaskResumeAll+0x13c>)
 800f12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f12e:	601a      	str	r2, [r3, #0]
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f138:	f001 f904 	bl	8010344 <vPortExitCritical>

	return xAlreadyYielded;
 800f13c:	68bb      	ldr	r3, [r7, #8]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3710      	adds	r7, #16
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	2000cb8c 	.word	0x2000cb8c
 800f14c:	2000cb64 	.word	0x2000cb64
 800f150:	2000cb24 	.word	0x2000cb24
 800f154:	2000cb6c 	.word	0x2000cb6c
 800f158:	2000c694 	.word	0x2000c694
 800f15c:	2000c690 	.word	0x2000c690
 800f160:	2000cb78 	.word	0x2000cb78
 800f164:	2000cb74 	.word	0x2000cb74
 800f168:	e000ed04 	.word	0xe000ed04

0800f16c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f172:	4b05      	ldr	r3, [pc, #20]	; (800f188 <xTaskGetTickCount+0x1c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f178:	687b      	ldr	r3, [r7, #4]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	370c      	adds	r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	2000cb68 	.word	0x2000cb68

0800f18c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b086      	sub	sp, #24
 800f190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f192:	2300      	movs	r3, #0
 800f194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f196:	4b50      	ldr	r3, [pc, #320]	; (800f2d8 <xTaskIncrementTick+0x14c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f040 808b 	bne.w	800f2b6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f1a0:	4b4e      	ldr	r3, [pc, #312]	; (800f2dc <xTaskIncrementTick+0x150>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1a8:	4a4c      	ldr	r2, [pc, #304]	; (800f2dc <xTaskIncrementTick+0x150>)
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d122      	bne.n	800f1fa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1b4:	4b4a      	ldr	r3, [pc, #296]	; (800f2e0 <xTaskIncrementTick+0x154>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00c      	beq.n	800f1d8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c2:	b672      	cpsid	i
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	b662      	cpsie	i
 800f1d2:	603b      	str	r3, [r7, #0]
}
 800f1d4:	bf00      	nop
 800f1d6:	e7fe      	b.n	800f1d6 <xTaskIncrementTick+0x4a>
 800f1d8:	4b41      	ldr	r3, [pc, #260]	; (800f2e0 <xTaskIncrementTick+0x154>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	60fb      	str	r3, [r7, #12]
 800f1de:	4b41      	ldr	r3, [pc, #260]	; (800f2e4 <xTaskIncrementTick+0x158>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4a3f      	ldr	r2, [pc, #252]	; (800f2e0 <xTaskIncrementTick+0x154>)
 800f1e4:	6013      	str	r3, [r2, #0]
 800f1e6:	4a3f      	ldr	r2, [pc, #252]	; (800f2e4 <xTaskIncrementTick+0x158>)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	6013      	str	r3, [r2, #0]
 800f1ec:	4b3e      	ldr	r3, [pc, #248]	; (800f2e8 <xTaskIncrementTick+0x15c>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	4a3d      	ldr	r2, [pc, #244]	; (800f2e8 <xTaskIncrementTick+0x15c>)
 800f1f4:	6013      	str	r3, [r2, #0]
 800f1f6:	f000 fb07 	bl	800f808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1fa:	4b3c      	ldr	r3, [pc, #240]	; (800f2ec <xTaskIncrementTick+0x160>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	429a      	cmp	r2, r3
 800f202:	d349      	bcc.n	800f298 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f204:	4b36      	ldr	r3, [pc, #216]	; (800f2e0 <xTaskIncrementTick+0x154>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d104      	bne.n	800f218 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f20e:	4b37      	ldr	r3, [pc, #220]	; (800f2ec <xTaskIncrementTick+0x160>)
 800f210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f214:	601a      	str	r2, [r3, #0]
					break;
 800f216:	e03f      	b.n	800f298 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f218:	4b31      	ldr	r3, [pc, #196]	; (800f2e0 <xTaskIncrementTick+0x154>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d203      	bcs.n	800f238 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f230:	4a2e      	ldr	r2, [pc, #184]	; (800f2ec <xTaskIncrementTick+0x160>)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f236:	e02f      	b.n	800f298 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	3304      	adds	r3, #4
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe ff69 	bl	800e114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f246:	2b00      	cmp	r3, #0
 800f248:	d004      	beq.n	800f254 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	3318      	adds	r3, #24
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fe ff60 	bl	800e114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f258:	4b25      	ldr	r3, [pc, #148]	; (800f2f0 <xTaskIncrementTick+0x164>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d903      	bls.n	800f268 <xTaskIncrementTick+0xdc>
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f264:	4a22      	ldr	r2, [pc, #136]	; (800f2f0 <xTaskIncrementTick+0x164>)
 800f266:	6013      	str	r3, [r2, #0]
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26c:	4613      	mov	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4413      	add	r3, r2
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4a1f      	ldr	r2, [pc, #124]	; (800f2f4 <xTaskIncrementTick+0x168>)
 800f276:	441a      	add	r2, r3
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	3304      	adds	r3, #4
 800f27c:	4619      	mov	r1, r3
 800f27e:	4610      	mov	r0, r2
 800f280:	f7fe feeb 	bl	800e05a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f288:	4b1b      	ldr	r3, [pc, #108]	; (800f2f8 <xTaskIncrementTick+0x16c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28e:	429a      	cmp	r2, r3
 800f290:	d3b8      	bcc.n	800f204 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f292:	2301      	movs	r3, #1
 800f294:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f296:	e7b5      	b.n	800f204 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f298:	4b17      	ldr	r3, [pc, #92]	; (800f2f8 <xTaskIncrementTick+0x16c>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f29e:	4915      	ldr	r1, [pc, #84]	; (800f2f4 <xTaskIncrementTick+0x168>)
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	4413      	add	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	440b      	add	r3, r1
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d907      	bls.n	800f2c0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	617b      	str	r3, [r7, #20]
 800f2b4:	e004      	b.n	800f2c0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f2b6:	4b11      	ldr	r3, [pc, #68]	; (800f2fc <xTaskIncrementTick+0x170>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	4a0f      	ldr	r2, [pc, #60]	; (800f2fc <xTaskIncrementTick+0x170>)
 800f2be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f2c0:	4b0f      	ldr	r3, [pc, #60]	; (800f300 <xTaskIncrementTick+0x174>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f2cc:	697b      	ldr	r3, [r7, #20]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	2000cb8c 	.word	0x2000cb8c
 800f2dc:	2000cb68 	.word	0x2000cb68
 800f2e0:	2000cb1c 	.word	0x2000cb1c
 800f2e4:	2000cb20 	.word	0x2000cb20
 800f2e8:	2000cb7c 	.word	0x2000cb7c
 800f2ec:	2000cb84 	.word	0x2000cb84
 800f2f0:	2000cb6c 	.word	0x2000cb6c
 800f2f4:	2000c694 	.word	0x2000c694
 800f2f8:	2000c690 	.word	0x2000c690
 800f2fc:	2000cb74 	.word	0x2000cb74
 800f300:	2000cb78 	.word	0x2000cb78

0800f304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f30a:	4b29      	ldr	r3, [pc, #164]	; (800f3b0 <vTaskSwitchContext+0xac>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f312:	4b28      	ldr	r3, [pc, #160]	; (800f3b4 <vTaskSwitchContext+0xb0>)
 800f314:	2201      	movs	r2, #1
 800f316:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f318:	e043      	b.n	800f3a2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f31a:	4b26      	ldr	r3, [pc, #152]	; (800f3b4 <vTaskSwitchContext+0xb0>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f320:	4b25      	ldr	r3, [pc, #148]	; (800f3b8 <vTaskSwitchContext+0xb4>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	60fb      	str	r3, [r7, #12]
 800f326:	e012      	b.n	800f34e <vTaskSwitchContext+0x4a>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10c      	bne.n	800f348 <vTaskSwitchContext+0x44>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	b672      	cpsid	i
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	b662      	cpsie	i
 800f342:	607b      	str	r3, [r7, #4]
}
 800f344:	bf00      	nop
 800f346:	e7fe      	b.n	800f346 <vTaskSwitchContext+0x42>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3b01      	subs	r3, #1
 800f34c:	60fb      	str	r3, [r7, #12]
 800f34e:	491b      	ldr	r1, [pc, #108]	; (800f3bc <vTaskSwitchContext+0xb8>)
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	4613      	mov	r3, r2
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	4413      	add	r3, r2
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	440b      	add	r3, r1
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d0e2      	beq.n	800f328 <vTaskSwitchContext+0x24>
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	4613      	mov	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	4a13      	ldr	r2, [pc, #76]	; (800f3bc <vTaskSwitchContext+0xb8>)
 800f36e:	4413      	add	r3, r2
 800f370:	60bb      	str	r3, [r7, #8]
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	605a      	str	r2, [r3, #4]
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	685a      	ldr	r2, [r3, #4]
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	3308      	adds	r3, #8
 800f384:	429a      	cmp	r2, r3
 800f386:	d104      	bne.n	800f392 <vTaskSwitchContext+0x8e>
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	685a      	ldr	r2, [r3, #4]
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	605a      	str	r2, [r3, #4]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	4a09      	ldr	r2, [pc, #36]	; (800f3c0 <vTaskSwitchContext+0xbc>)
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	4a06      	ldr	r2, [pc, #24]	; (800f3b8 <vTaskSwitchContext+0xb4>)
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6013      	str	r3, [r2, #0]
}
 800f3a2:	bf00      	nop
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	2000cb8c 	.word	0x2000cb8c
 800f3b4:	2000cb78 	.word	0x2000cb78
 800f3b8:	2000cb6c 	.word	0x2000cb6c
 800f3bc:	2000c694 	.word	0x2000c694
 800f3c0:	2000c690 	.word	0x2000c690

0800f3c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10c      	bne.n	800f3ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d8:	b672      	cpsid	i
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	b662      	cpsie	i
 800f3e8:	60fb      	str	r3, [r7, #12]
}
 800f3ea:	bf00      	nop
 800f3ec:	e7fe      	b.n	800f3ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3ee:	4b07      	ldr	r3, [pc, #28]	; (800f40c <vTaskPlaceOnEventList+0x48>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3318      	adds	r3, #24
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f7fe fe53 	bl	800e0a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	6838      	ldr	r0, [r7, #0]
 800f400:	f000 fab2 	bl	800f968 <prvAddCurrentTaskToDelayedList>
}
 800f404:	bf00      	nop
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	2000c690 	.word	0x2000c690

0800f410 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d10c      	bne.n	800f43c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f426:	b672      	cpsid	i
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	b662      	cpsie	i
 800f436:	617b      	str	r3, [r7, #20]
}
 800f438:	bf00      	nop
 800f43a:	e7fe      	b.n	800f43a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <vTaskPlaceOnEventListRestricted+0x58>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3318      	adds	r3, #24
 800f442:	4619      	mov	r1, r3
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7fe fe08 	bl	800e05a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d002      	beq.n	800f456 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f454:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	68b8      	ldr	r0, [r7, #8]
 800f45a:	f000 fa85 	bl	800f968 <prvAddCurrentTaskToDelayedList>
	}
 800f45e:	bf00      	nop
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	2000c690 	.word	0x2000c690

0800f46c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10c      	bne.n	800f49c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f486:	b672      	cpsid	i
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	b662      	cpsie	i
 800f496:	60fb      	str	r3, [r7, #12]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	3318      	adds	r3, #24
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fe fe37 	bl	800e114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4a6:	4b1e      	ldr	r3, [pc, #120]	; (800f520 <xTaskRemoveFromEventList+0xb4>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d11d      	bne.n	800f4ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fe2e 	bl	800e114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4bc:	4b19      	ldr	r3, [pc, #100]	; (800f524 <xTaskRemoveFromEventList+0xb8>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d903      	bls.n	800f4cc <xTaskRemoveFromEventList+0x60>
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c8:	4a16      	ldr	r2, [pc, #88]	; (800f524 <xTaskRemoveFromEventList+0xb8>)
 800f4ca:	6013      	str	r3, [r2, #0]
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4a13      	ldr	r2, [pc, #76]	; (800f528 <xTaskRemoveFromEventList+0xbc>)
 800f4da:	441a      	add	r2, r3
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	3304      	adds	r3, #4
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	f7fe fdb9 	bl	800e05a <vListInsertEnd>
 800f4e8:	e005      	b.n	800f4f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	3318      	adds	r3, #24
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	480e      	ldr	r0, [pc, #56]	; (800f52c <xTaskRemoveFromEventList+0xc0>)
 800f4f2:	f7fe fdb2 	bl	800e05a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4fa:	4b0d      	ldr	r3, [pc, #52]	; (800f530 <xTaskRemoveFromEventList+0xc4>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f500:	429a      	cmp	r2, r3
 800f502:	d905      	bls.n	800f510 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f504:	2301      	movs	r3, #1
 800f506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f508:	4b0a      	ldr	r3, [pc, #40]	; (800f534 <xTaskRemoveFromEventList+0xc8>)
 800f50a:	2201      	movs	r2, #1
 800f50c:	601a      	str	r2, [r3, #0]
 800f50e:	e001      	b.n	800f514 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f510:	2300      	movs	r3, #0
 800f512:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f514:	697b      	ldr	r3, [r7, #20]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	2000cb8c 	.word	0x2000cb8c
 800f524:	2000cb6c 	.word	0x2000cb6c
 800f528:	2000c694 	.word	0x2000c694
 800f52c:	2000cb24 	.word	0x2000cb24
 800f530:	2000c690 	.word	0x2000c690
 800f534:	2000cb78 	.word	0x2000cb78

0800f538 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d10c      	bne.n	800f560 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54a:	b672      	cpsid	i
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	b662      	cpsie	i
 800f55a:	60fb      	str	r3, [r7, #12]
}
 800f55c:	bf00      	nop
 800f55e:	e7fe      	b.n	800f55e <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f560:	f000 febc 	bl	80102dc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f564:	4b06      	ldr	r3, [pc, #24]	; (800f580 <vTaskSetTimeOutState+0x48>)
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <vTaskSetTimeOutState+0x4c>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f574:	f000 fee6 	bl	8010344 <vPortExitCritical>
}
 800f578:	bf00      	nop
 800f57a:	3710      	adds	r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	2000cb7c 	.word	0x2000cb7c
 800f584:	2000cb68 	.word	0x2000cb68

0800f588 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f590:	4b06      	ldr	r3, [pc, #24]	; (800f5ac <vTaskInternalSetTimeOutState+0x24>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f598:	4b05      	ldr	r3, [pc, #20]	; (800f5b0 <vTaskInternalSetTimeOutState+0x28>)
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	605a      	str	r2, [r3, #4]
}
 800f5a0:	bf00      	nop
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	2000cb7c 	.word	0x2000cb7c
 800f5b0:	2000cb68 	.word	0x2000cb68

0800f5b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b088      	sub	sp, #32
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d10c      	bne.n	800f5de <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c8:	b672      	cpsid	i
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	b662      	cpsie	i
 800f5d8:	613b      	str	r3, [r7, #16]
}
 800f5da:	bf00      	nop
 800f5dc:	e7fe      	b.n	800f5dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10c      	bne.n	800f5fe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e8:	b672      	cpsid	i
 800f5ea:	f383 8811 	msr	BASEPRI, r3
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f3bf 8f4f 	dsb	sy
 800f5f6:	b662      	cpsie	i
 800f5f8:	60fb      	str	r3, [r7, #12]
}
 800f5fa:	bf00      	nop
 800f5fc:	e7fe      	b.n	800f5fc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f5fe:	f000 fe6d 	bl	80102dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f602:	4b1d      	ldr	r3, [pc, #116]	; (800f678 <xTaskCheckForTimeOut+0xc4>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	69ba      	ldr	r2, [r7, #24]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f61a:	d102      	bne.n	800f622 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f61c:	2300      	movs	r3, #0
 800f61e:	61fb      	str	r3, [r7, #28]
 800f620:	e023      	b.n	800f66a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	4b15      	ldr	r3, [pc, #84]	; (800f67c <xTaskCheckForTimeOut+0xc8>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d007      	beq.n	800f63e <xTaskCheckForTimeOut+0x8a>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	69ba      	ldr	r2, [r7, #24]
 800f634:	429a      	cmp	r2, r3
 800f636:	d302      	bcc.n	800f63e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f638:	2301      	movs	r3, #1
 800f63a:	61fb      	str	r3, [r7, #28]
 800f63c:	e015      	b.n	800f66a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	429a      	cmp	r2, r3
 800f646:	d20b      	bcs.n	800f660 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	1ad2      	subs	r2, r2, r3
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff ff97 	bl	800f588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f65a:	2300      	movs	r3, #0
 800f65c:	61fb      	str	r3, [r7, #28]
 800f65e:	e004      	b.n	800f66a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2200      	movs	r2, #0
 800f664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f666:	2301      	movs	r3, #1
 800f668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f66a:	f000 fe6b 	bl	8010344 <vPortExitCritical>

	return xReturn;
 800f66e:	69fb      	ldr	r3, [r7, #28]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	2000cb68 	.word	0x2000cb68
 800f67c:	2000cb7c 	.word	0x2000cb7c

0800f680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f680:	b480      	push	{r7}
 800f682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f684:	4b03      	ldr	r3, [pc, #12]	; (800f694 <vTaskMissedYield+0x14>)
 800f686:	2201      	movs	r2, #1
 800f688:	601a      	str	r2, [r3, #0]
}
 800f68a:	bf00      	nop
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	2000cb78 	.word	0x2000cb78

0800f698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6a0:	f000 f852 	bl	800f748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6a4:	4b06      	ldr	r3, [pc, #24]	; (800f6c0 <prvIdleTask+0x28>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d9f9      	bls.n	800f6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f6ac:	4b05      	ldr	r3, [pc, #20]	; (800f6c4 <prvIdleTask+0x2c>)
 800f6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6b2:	601a      	str	r2, [r3, #0]
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f6bc:	e7f0      	b.n	800f6a0 <prvIdleTask+0x8>
 800f6be:	bf00      	nop
 800f6c0:	2000c694 	.word	0x2000c694
 800f6c4:	e000ed04 	.word	0xe000ed04

0800f6c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	607b      	str	r3, [r7, #4]
 800f6d2:	e00c      	b.n	800f6ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4a12      	ldr	r2, [pc, #72]	; (800f728 <prvInitialiseTaskLists+0x60>)
 800f6e0:	4413      	add	r3, r2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fc8c 	bl	800e000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	607b      	str	r3, [r7, #4]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b37      	cmp	r3, #55	; 0x37
 800f6f2:	d9ef      	bls.n	800f6d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6f4:	480d      	ldr	r0, [pc, #52]	; (800f72c <prvInitialiseTaskLists+0x64>)
 800f6f6:	f7fe fc83 	bl	800e000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6fa:	480d      	ldr	r0, [pc, #52]	; (800f730 <prvInitialiseTaskLists+0x68>)
 800f6fc:	f7fe fc80 	bl	800e000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f700:	480c      	ldr	r0, [pc, #48]	; (800f734 <prvInitialiseTaskLists+0x6c>)
 800f702:	f7fe fc7d 	bl	800e000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f706:	480c      	ldr	r0, [pc, #48]	; (800f738 <prvInitialiseTaskLists+0x70>)
 800f708:	f7fe fc7a 	bl	800e000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f70c:	480b      	ldr	r0, [pc, #44]	; (800f73c <prvInitialiseTaskLists+0x74>)
 800f70e:	f7fe fc77 	bl	800e000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f712:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <prvInitialiseTaskLists+0x78>)
 800f714:	4a05      	ldr	r2, [pc, #20]	; (800f72c <prvInitialiseTaskLists+0x64>)
 800f716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f718:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <prvInitialiseTaskLists+0x7c>)
 800f71a:	4a05      	ldr	r2, [pc, #20]	; (800f730 <prvInitialiseTaskLists+0x68>)
 800f71c:	601a      	str	r2, [r3, #0]
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	2000c694 	.word	0x2000c694
 800f72c:	2000caf4 	.word	0x2000caf4
 800f730:	2000cb08 	.word	0x2000cb08
 800f734:	2000cb24 	.word	0x2000cb24
 800f738:	2000cb38 	.word	0x2000cb38
 800f73c:	2000cb50 	.word	0x2000cb50
 800f740:	2000cb1c 	.word	0x2000cb1c
 800f744:	2000cb20 	.word	0x2000cb20

0800f748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f74e:	e019      	b.n	800f784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f750:	f000 fdc4 	bl	80102dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f754:	4b10      	ldr	r3, [pc, #64]	; (800f798 <prvCheckTasksWaitingTermination+0x50>)
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	3304      	adds	r3, #4
 800f760:	4618      	mov	r0, r3
 800f762:	f7fe fcd7 	bl	800e114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f766:	4b0d      	ldr	r3, [pc, #52]	; (800f79c <prvCheckTasksWaitingTermination+0x54>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	4a0b      	ldr	r2, [pc, #44]	; (800f79c <prvCheckTasksWaitingTermination+0x54>)
 800f76e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f770:	4b0b      	ldr	r3, [pc, #44]	; (800f7a0 <prvCheckTasksWaitingTermination+0x58>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	3b01      	subs	r3, #1
 800f776:	4a0a      	ldr	r2, [pc, #40]	; (800f7a0 <prvCheckTasksWaitingTermination+0x58>)
 800f778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f77a:	f000 fde3 	bl	8010344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 f810 	bl	800f7a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f784:	4b06      	ldr	r3, [pc, #24]	; (800f7a0 <prvCheckTasksWaitingTermination+0x58>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1e1      	bne.n	800f750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f78c:	bf00      	nop
 800f78e:	bf00      	nop
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	2000cb38 	.word	0x2000cb38
 800f79c:	2000cb64 	.word	0x2000cb64
 800f7a0:	2000cb4c 	.word	0x2000cb4c

0800f7a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d108      	bne.n	800f7c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 ff84 	bl	80106c8 <vPortFree>
				vPortFree( pxTCB );
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 ff81 	bl	80106c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f7c6:	e01a      	b.n	800f7fe <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d103      	bne.n	800f7da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 ff78 	bl	80106c8 <vPortFree>
	}
 800f7d8:	e011      	b.n	800f7fe <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7e0:	2b02      	cmp	r3, #2
 800f7e2:	d00c      	beq.n	800f7fe <prvDeleteTCB+0x5a>
	__asm volatile
 800f7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e8:	b672      	cpsid	i
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	b662      	cpsie	i
 800f7f8:	60fb      	str	r3, [r7, #12]
}
 800f7fa:	bf00      	nop
 800f7fc:	e7fe      	b.n	800f7fc <prvDeleteTCB+0x58>
	}
 800f7fe:	bf00      	nop
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f80e:	4b0c      	ldr	r3, [pc, #48]	; (800f840 <prvResetNextTaskUnblockTime+0x38>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d104      	bne.n	800f822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f818:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <prvResetNextTaskUnblockTime+0x3c>)
 800f81a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f81e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f820:	e008      	b.n	800f834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f822:	4b07      	ldr	r3, [pc, #28]	; (800f840 <prvResetNextTaskUnblockTime+0x38>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	4a04      	ldr	r2, [pc, #16]	; (800f844 <prvResetNextTaskUnblockTime+0x3c>)
 800f832:	6013      	str	r3, [r2, #0]
}
 800f834:	bf00      	nop
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	2000cb1c 	.word	0x2000cb1c
 800f844:	2000cb84 	.word	0x2000cb84

0800f848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f84e:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <xTaskGetSchedulerState+0x34>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d102      	bne.n	800f85c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f856:	2301      	movs	r3, #1
 800f858:	607b      	str	r3, [r7, #4]
 800f85a:	e008      	b.n	800f86e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f85c:	4b08      	ldr	r3, [pc, #32]	; (800f880 <xTaskGetSchedulerState+0x38>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d102      	bne.n	800f86a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f864:	2302      	movs	r3, #2
 800f866:	607b      	str	r3, [r7, #4]
 800f868:	e001      	b.n	800f86e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f86a:	2300      	movs	r3, #0
 800f86c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f86e:	687b      	ldr	r3, [r7, #4]
	}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	2000cb70 	.word	0x2000cb70
 800f880:	2000cb8c 	.word	0x2000cb8c

0800f884 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f890:	2300      	movs	r3, #0
 800f892:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d05a      	beq.n	800f950 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f89a:	4b30      	ldr	r3, [pc, #192]	; (800f95c <xTaskPriorityDisinherit+0xd8>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d00c      	beq.n	800f8be <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	b672      	cpsid	i
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	b662      	cpsie	i
 800f8b8:	60fb      	str	r3, [r7, #12]
}
 800f8ba:	bf00      	nop
 800f8bc:	e7fe      	b.n	800f8bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d10c      	bne.n	800f8e0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800f8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ca:	b672      	cpsid	i
 800f8cc:	f383 8811 	msr	BASEPRI, r3
 800f8d0:	f3bf 8f6f 	isb	sy
 800f8d4:	f3bf 8f4f 	dsb	sy
 800f8d8:	b662      	cpsie	i
 800f8da:	60bb      	str	r3, [r7, #8]
}
 800f8dc:	bf00      	nop
 800f8de:	e7fe      	b.n	800f8de <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8e4:	1e5a      	subs	r2, r3, #1
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d02c      	beq.n	800f950 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d128      	bne.n	800f950 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	3304      	adds	r3, #4
 800f902:	4618      	mov	r0, r3
 800f904:	f7fe fc06 	bl	800e114 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f920:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <xTaskPriorityDisinherit+0xdc>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d903      	bls.n	800f930 <xTaskPriorityDisinherit+0xac>
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92c:	4a0c      	ldr	r2, [pc, #48]	; (800f960 <xTaskPriorityDisinherit+0xdc>)
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f934:	4613      	mov	r3, r2
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	4413      	add	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4a09      	ldr	r2, [pc, #36]	; (800f964 <xTaskPriorityDisinherit+0xe0>)
 800f93e:	441a      	add	r2, r3
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	3304      	adds	r3, #4
 800f944:	4619      	mov	r1, r3
 800f946:	4610      	mov	r0, r2
 800f948:	f7fe fb87 	bl	800e05a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f94c:	2301      	movs	r3, #1
 800f94e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f950:	697b      	ldr	r3, [r7, #20]
	}
 800f952:	4618      	mov	r0, r3
 800f954:	3718      	adds	r7, #24
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	2000c690 	.word	0x2000c690
 800f960:	2000cb6c 	.word	0x2000cb6c
 800f964:	2000c694 	.word	0x2000c694

0800f968 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f972:	4b21      	ldr	r3, [pc, #132]	; (800f9f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f978:	4b20      	ldr	r3, [pc, #128]	; (800f9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	3304      	adds	r3, #4
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe fbc8 	bl	800e114 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f98a:	d10a      	bne.n	800f9a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d007      	beq.n	800f9a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f992:	4b1a      	ldr	r3, [pc, #104]	; (800f9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3304      	adds	r3, #4
 800f998:	4619      	mov	r1, r3
 800f99a:	4819      	ldr	r0, [pc, #100]	; (800fa00 <prvAddCurrentTaskToDelayedList+0x98>)
 800f99c:	f7fe fb5d 	bl	800e05a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9a0:	e026      	b.n	800f9f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9aa:	4b14      	ldr	r3, [pc, #80]	; (800f9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d209      	bcs.n	800f9ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9ba:	4b12      	ldr	r3, [pc, #72]	; (800fa04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	4b0f      	ldr	r3, [pc, #60]	; (800f9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f7fe fb6b 	bl	800e0a2 <vListInsert>
}
 800f9cc:	e010      	b.n	800f9f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9ce:	4b0e      	ldr	r3, [pc, #56]	; (800fa08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	4b0a      	ldr	r3, [pc, #40]	; (800f9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7fe fb61 	bl	800e0a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f9e0:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d202      	bcs.n	800f9f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f9ea:	4a08      	ldr	r2, [pc, #32]	; (800fa0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	6013      	str	r3, [r2, #0]
}
 800f9f0:	bf00      	nop
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	2000cb68 	.word	0x2000cb68
 800f9fc:	2000c690 	.word	0x2000c690
 800fa00:	2000cb50 	.word	0x2000cb50
 800fa04:	2000cb20 	.word	0x2000cb20
 800fa08:	2000cb1c 	.word	0x2000cb1c
 800fa0c:	2000cb84 	.word	0x2000cb84

0800fa10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b08a      	sub	sp, #40	; 0x28
 800fa14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fa1a:	f000 fb15 	bl	8010048 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fa1e:	4b1d      	ldr	r3, [pc, #116]	; (800fa94 <xTimerCreateTimerTask+0x84>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d021      	beq.n	800fa6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fa26:	2300      	movs	r3, #0
 800fa28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fa2e:	1d3a      	adds	r2, r7, #4
 800fa30:	f107 0108 	add.w	r1, r7, #8
 800fa34:	f107 030c 	add.w	r3, r7, #12
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fac7 	bl	800dfcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa3e:	6879      	ldr	r1, [r7, #4]
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	9202      	str	r2, [sp, #8]
 800fa46:	9301      	str	r3, [sp, #4]
 800fa48:	2302      	movs	r3, #2
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	460a      	mov	r2, r1
 800fa50:	4911      	ldr	r1, [pc, #68]	; (800fa98 <xTimerCreateTimerTask+0x88>)
 800fa52:	4812      	ldr	r0, [pc, #72]	; (800fa9c <xTimerCreateTimerTask+0x8c>)
 800fa54:	f7ff f892 	bl	800eb7c <xTaskCreateStatic>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	4a11      	ldr	r2, [pc, #68]	; (800faa0 <xTimerCreateTimerTask+0x90>)
 800fa5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa5e:	4b10      	ldr	r3, [pc, #64]	; (800faa0 <xTimerCreateTimerTask+0x90>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa66:	2301      	movs	r3, #1
 800fa68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10c      	bne.n	800fa8a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	b672      	cpsid	i
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	b662      	cpsie	i
 800fa84:	613b      	str	r3, [r7, #16]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fa8a:	697b      	ldr	r3, [r7, #20]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	2000cbc0 	.word	0x2000cbc0
 800fa98:	0802442c 	.word	0x0802442c
 800fa9c:	0800fbe1 	.word	0x0800fbe1
 800faa0:	2000cbc4 	.word	0x2000cbc4

0800faa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b08a      	sub	sp, #40	; 0x28
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	607a      	str	r2, [r7, #4]
 800fab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fab2:	2300      	movs	r3, #0
 800fab4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10c      	bne.n	800fad6 <xTimerGenericCommand+0x32>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	b672      	cpsid	i
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	b662      	cpsie	i
 800fad0:	623b      	str	r3, [r7, #32]
}
 800fad2:	bf00      	nop
 800fad4:	e7fe      	b.n	800fad4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fad6:	4b1a      	ldr	r3, [pc, #104]	; (800fb40 <xTimerGenericCommand+0x9c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d02a      	beq.n	800fb34 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b05      	cmp	r3, #5
 800faee:	dc18      	bgt.n	800fb22 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800faf0:	f7ff feaa 	bl	800f848 <xTaskGetSchedulerState>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	d109      	bne.n	800fb0e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fafa:	4b11      	ldr	r3, [pc, #68]	; (800fb40 <xTimerGenericCommand+0x9c>)
 800fafc:	6818      	ldr	r0, [r3, #0]
 800fafe:	f107 0110 	add.w	r1, r7, #16
 800fb02:	2300      	movs	r3, #0
 800fb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb06:	f7fe fc3f 	bl	800e388 <xQueueGenericSend>
 800fb0a:	6278      	str	r0, [r7, #36]	; 0x24
 800fb0c:	e012      	b.n	800fb34 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb0e:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <xTimerGenericCommand+0x9c>)
 800fb10:	6818      	ldr	r0, [r3, #0]
 800fb12:	f107 0110 	add.w	r1, r7, #16
 800fb16:	2300      	movs	r3, #0
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f7fe fc35 	bl	800e388 <xQueueGenericSend>
 800fb1e:	6278      	str	r0, [r7, #36]	; 0x24
 800fb20:	e008      	b.n	800fb34 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb22:	4b07      	ldr	r3, [pc, #28]	; (800fb40 <xTimerGenericCommand+0x9c>)
 800fb24:	6818      	ldr	r0, [r3, #0]
 800fb26:	f107 0110 	add.w	r1, r7, #16
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	683a      	ldr	r2, [r7, #0]
 800fb2e:	f7fe fd31 	bl	800e594 <xQueueGenericSendFromISR>
 800fb32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3728      	adds	r7, #40	; 0x28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	2000cbc0 	.word	0x2000cbc0

0800fb44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b088      	sub	sp, #32
 800fb48:	af02      	add	r7, sp, #8
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb4e:	4b23      	ldr	r3, [pc, #140]	; (800fbdc <prvProcessExpiredTimer+0x98>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fe fad9 	bl	800e114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb68:	f003 0304 	and.w	r3, r3, #4
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d024      	beq.n	800fbba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	699a      	ldr	r2, [r3, #24]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	18d1      	adds	r1, r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	6978      	ldr	r0, [r7, #20]
 800fb7e:	f000 f8d3 	bl	800fd28 <prvInsertTimerInActiveList>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d021      	beq.n	800fbcc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb88:	2300      	movs	r3, #0
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	2100      	movs	r1, #0
 800fb92:	6978      	ldr	r0, [r7, #20]
 800fb94:	f7ff ff86 	bl	800faa4 <xTimerGenericCommand>
 800fb98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d115      	bne.n	800fbcc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	b672      	cpsid	i
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	b662      	cpsie	i
 800fbb4:	60fb      	str	r3, [r7, #12]
}
 800fbb6:	bf00      	nop
 800fbb8:	e7fe      	b.n	800fbb8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbc0:	f023 0301 	bic.w	r3, r3, #1
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	6a1b      	ldr	r3, [r3, #32]
 800fbd0:	6978      	ldr	r0, [r7, #20]
 800fbd2:	4798      	blx	r3
}
 800fbd4:	bf00      	nop
 800fbd6:	3718      	adds	r7, #24
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	2000cbb8 	.word	0x2000cbb8

0800fbe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbe8:	f107 0308 	add.w	r3, r7, #8
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f857 	bl	800fca0 <prvGetNextExpireTime>
 800fbf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f000 f803 	bl	800fc04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fbfe:	f000 f8d5 	bl	800fdac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc02:	e7f1      	b.n	800fbe8 <prvTimerTask+0x8>

0800fc04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc0e:	f7ff f9ff 	bl	800f010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc12:	f107 0308 	add.w	r3, r7, #8
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 f866 	bl	800fce8 <prvSampleTimeNow>
 800fc1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d130      	bne.n	800fc86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10a      	bne.n	800fc40 <prvProcessTimerOrBlockTask+0x3c>
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d806      	bhi.n	800fc40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fc32:	f7ff f9fb 	bl	800f02c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fc36:	68f9      	ldr	r1, [r7, #12]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff ff83 	bl	800fb44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc3e:	e024      	b.n	800fc8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d008      	beq.n	800fc58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc46:	4b13      	ldr	r3, [pc, #76]	; (800fc94 <prvProcessTimerOrBlockTask+0x90>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <prvProcessTimerOrBlockTask+0x50>
 800fc50:	2301      	movs	r3, #1
 800fc52:	e000      	b.n	800fc56 <prvProcessTimerOrBlockTask+0x52>
 800fc54:	2300      	movs	r3, #0
 800fc56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc58:	4b0f      	ldr	r3, [pc, #60]	; (800fc98 <prvProcessTimerOrBlockTask+0x94>)
 800fc5a:	6818      	ldr	r0, [r3, #0]
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	683a      	ldr	r2, [r7, #0]
 800fc64:	4619      	mov	r1, r3
 800fc66:	f7fe ff55 	bl	800eb14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc6a:	f7ff f9df 	bl	800f02c <xTaskResumeAll>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d10a      	bne.n	800fc8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc74:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <prvProcessTimerOrBlockTask+0x98>)
 800fc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc7a:	601a      	str	r2, [r3, #0]
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	f3bf 8f6f 	isb	sy
}
 800fc84:	e001      	b.n	800fc8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc86:	f7ff f9d1 	bl	800f02c <xTaskResumeAll>
}
 800fc8a:	bf00      	nop
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	2000cbbc 	.word	0x2000cbbc
 800fc98:	2000cbc0 	.word	0x2000cbc0
 800fc9c:	e000ed04 	.word	0xe000ed04

0800fca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fca8:	4b0e      	ldr	r3, [pc, #56]	; (800fce4 <prvGetNextExpireTime+0x44>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <prvGetNextExpireTime+0x16>
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	e000      	b.n	800fcb8 <prvGetNextExpireTime+0x18>
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d105      	bne.n	800fcd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcc4:	4b07      	ldr	r3, [pc, #28]	; (800fce4 <prvGetNextExpireTime+0x44>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	e001      	b.n	800fcd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	2000cbb8 	.word	0x2000cbb8

0800fce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fcf0:	f7ff fa3c 	bl	800f16c <xTaskGetTickCount>
 800fcf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fcf6:	4b0b      	ldr	r3, [pc, #44]	; (800fd24 <prvSampleTimeNow+0x3c>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d205      	bcs.n	800fd0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd00:	f000 f93c 	bl	800ff7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	601a      	str	r2, [r3, #0]
 800fd0a:	e002      	b.n	800fd12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd12:	4a04      	ldr	r2, [pc, #16]	; (800fd24 <prvSampleTimeNow+0x3c>)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd18:	68fb      	ldr	r3, [r7, #12]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	2000cbc8 	.word	0x2000cbc8

0800fd28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fd36:	2300      	movs	r3, #0
 800fd38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d812      	bhi.n	800fd74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	1ad2      	subs	r2, r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	699b      	ldr	r3, [r3, #24]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d302      	bcc.n	800fd62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	617b      	str	r3, [r7, #20]
 800fd60:	e01b      	b.n	800fd9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd62:	4b10      	ldr	r3, [pc, #64]	; (800fda4 <prvInsertTimerInActiveList+0x7c>)
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	f7fe f998 	bl	800e0a2 <vListInsert>
 800fd72:	e012      	b.n	800fd9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d206      	bcs.n	800fd8a <prvInsertTimerInActiveList+0x62>
 800fd7c:	68ba      	ldr	r2, [r7, #8]
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d302      	bcc.n	800fd8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd84:	2301      	movs	r3, #1
 800fd86:	617b      	str	r3, [r7, #20]
 800fd88:	e007      	b.n	800fd9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd8a:	4b07      	ldr	r3, [pc, #28]	; (800fda8 <prvInsertTimerInActiveList+0x80>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	3304      	adds	r3, #4
 800fd92:	4619      	mov	r1, r3
 800fd94:	4610      	mov	r0, r2
 800fd96:	f7fe f984 	bl	800e0a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd9a:	697b      	ldr	r3, [r7, #20]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	2000cbbc 	.word	0x2000cbbc
 800fda8:	2000cbb8 	.word	0x2000cbb8

0800fdac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	; 0x38
 800fdb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdb2:	e0d0      	b.n	800ff56 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	da1a      	bge.n	800fdf0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fdba:	1d3b      	adds	r3, r7, #4
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d10c      	bne.n	800fde0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800fdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdca:	b672      	cpsid	i
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	b662      	cpsie	i
 800fdda:	61fb      	str	r3, [r7, #28]
}
 800fddc:	bf00      	nop
 800fdde:	e7fe      	b.n	800fdde <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fde6:	6850      	ldr	r0, [r2, #4]
 800fde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdea:	6892      	ldr	r2, [r2, #8]
 800fdec:	4611      	mov	r1, r2
 800fdee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f2c0 80af 	blt.w	800ff56 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	695b      	ldr	r3, [r3, #20]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d004      	beq.n	800fe0e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	3304      	adds	r3, #4
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe f983 	bl	800e114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe0e:	463b      	mov	r3, r7
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff ff69 	bl	800fce8 <prvSampleTimeNow>
 800fe16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b09      	cmp	r3, #9
 800fe1c:	f200 809a 	bhi.w	800ff54 <prvProcessReceivedCommands+0x1a8>
 800fe20:	a201      	add	r2, pc, #4	; (adr r2, 800fe28 <prvProcessReceivedCommands+0x7c>)
 800fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe26:	bf00      	nop
 800fe28:	0800fe51 	.word	0x0800fe51
 800fe2c:	0800fe51 	.word	0x0800fe51
 800fe30:	0800fe51 	.word	0x0800fe51
 800fe34:	0800fec9 	.word	0x0800fec9
 800fe38:	0800fedd 	.word	0x0800fedd
 800fe3c:	0800ff2b 	.word	0x0800ff2b
 800fe40:	0800fe51 	.word	0x0800fe51
 800fe44:	0800fe51 	.word	0x0800fe51
 800fe48:	0800fec9 	.word	0x0800fec9
 800fe4c:	0800fedd 	.word	0x0800fedd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe56:	f043 0301 	orr.w	r3, r3, #1
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	18d1      	adds	r1, r2, r3
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe70:	f7ff ff5a 	bl	800fd28 <prvInsertTimerInActiveList>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d06d      	beq.n	800ff56 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe88:	f003 0304 	and.w	r3, r3, #4
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d062      	beq.n	800ff56 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	699b      	ldr	r3, [r3, #24]
 800fe96:	441a      	add	r2, r3
 800fe98:	2300      	movs	r3, #0
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	2100      	movs	r1, #0
 800fea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea2:	f7ff fdff 	bl	800faa4 <xTimerGenericCommand>
 800fea6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fea8:	6a3b      	ldr	r3, [r7, #32]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d153      	bne.n	800ff56 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	b672      	cpsid	i
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	b662      	cpsie	i
 800fec2:	61bb      	str	r3, [r7, #24]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fece:	f023 0301 	bic.w	r3, r3, #1
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800feda:	e03c      	b.n	800ff56 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fee2:	f043 0301 	orr.w	r3, r3, #1
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef6:	699b      	ldr	r3, [r3, #24]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10c      	bne.n	800ff16 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	b672      	cpsid	i
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	b662      	cpsie	i
 800ff10:	617b      	str	r3, [r7, #20]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	699a      	ldr	r2, [r3, #24]
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1c:	18d1      	adds	r1, r2, r3
 800ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff24:	f7ff ff00 	bl	800fd28 <prvInsertTimerInActiveList>
					break;
 800ff28:	e015      	b.n	800ff56 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ff2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff30:	f003 0302 	and.w	r3, r3, #2
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d103      	bne.n	800ff40 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ff38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff3a:	f000 fbc5 	bl	80106c8 <vPortFree>
 800ff3e:	e00a      	b.n	800ff56 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff46:	f023 0301 	bic.w	r3, r3, #1
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff52:	e000      	b.n	800ff56 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800ff54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff56:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <prvProcessReceivedCommands+0x1cc>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	1d39      	adds	r1, r7, #4
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe fbb8 	bl	800e6d4 <xQueueReceive>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f47f af24 	bne.w	800fdb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ff6c:	bf00      	nop
 800ff6e:	bf00      	nop
 800ff70:	3730      	adds	r7, #48	; 0x30
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	2000cbc0 	.word	0x2000cbc0

0800ff7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b088      	sub	sp, #32
 800ff80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff82:	e04a      	b.n	801001a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff84:	4b2e      	ldr	r3, [pc, #184]	; (8010040 <prvSwitchTimerLists+0xc4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	68db      	ldr	r3, [r3, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff8e:	4b2c      	ldr	r3, [pc, #176]	; (8010040 <prvSwitchTimerLists+0xc4>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fe f8b9 	bl	800e114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6a1b      	ldr	r3, [r3, #32]
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffb0:	f003 0304 	and.w	r3, r3, #4
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d030      	beq.n	801001a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	699b      	ldr	r3, [r3, #24]
 800ffbc:	693a      	ldr	r2, [r7, #16]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d90e      	bls.n	800ffe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	68ba      	ldr	r2, [r7, #8]
 800ffce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ffd6:	4b1a      	ldr	r3, [pc, #104]	; (8010040 <prvSwitchTimerLists+0xc4>)
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	4619      	mov	r1, r3
 800ffe0:	4610      	mov	r0, r2
 800ffe2:	f7fe f85e 	bl	800e0a2 <vListInsert>
 800ffe6:	e018      	b.n	801001a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffe8:	2300      	movs	r3, #0
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	2300      	movs	r3, #0
 800ffee:	693a      	ldr	r2, [r7, #16]
 800fff0:	2100      	movs	r1, #0
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f7ff fd56 	bl	800faa4 <xTimerGenericCommand>
 800fff8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10c      	bne.n	801001a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010004:	b672      	cpsid	i
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	b662      	cpsie	i
 8010014:	603b      	str	r3, [r7, #0]
}
 8010016:	bf00      	nop
 8010018:	e7fe      	b.n	8010018 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801001a:	4b09      	ldr	r3, [pc, #36]	; (8010040 <prvSwitchTimerLists+0xc4>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1af      	bne.n	800ff84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010024:	4b06      	ldr	r3, [pc, #24]	; (8010040 <prvSwitchTimerLists+0xc4>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801002a:	4b06      	ldr	r3, [pc, #24]	; (8010044 <prvSwitchTimerLists+0xc8>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a04      	ldr	r2, [pc, #16]	; (8010040 <prvSwitchTimerLists+0xc4>)
 8010030:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010032:	4a04      	ldr	r2, [pc, #16]	; (8010044 <prvSwitchTimerLists+0xc8>)
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	6013      	str	r3, [r2, #0]
}
 8010038:	bf00      	nop
 801003a:	3718      	adds	r7, #24
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	2000cbb8 	.word	0x2000cbb8
 8010044:	2000cbbc 	.word	0x2000cbbc

08010048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801004e:	f000 f945 	bl	80102dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010052:	4b15      	ldr	r3, [pc, #84]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d120      	bne.n	801009c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801005a:	4814      	ldr	r0, [pc, #80]	; (80100ac <prvCheckForValidListAndQueue+0x64>)
 801005c:	f7fd ffd0 	bl	800e000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010060:	4813      	ldr	r0, [pc, #76]	; (80100b0 <prvCheckForValidListAndQueue+0x68>)
 8010062:	f7fd ffcd 	bl	800e000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010066:	4b13      	ldr	r3, [pc, #76]	; (80100b4 <prvCheckForValidListAndQueue+0x6c>)
 8010068:	4a10      	ldr	r2, [pc, #64]	; (80100ac <prvCheckForValidListAndQueue+0x64>)
 801006a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801006c:	4b12      	ldr	r3, [pc, #72]	; (80100b8 <prvCheckForValidListAndQueue+0x70>)
 801006e:	4a10      	ldr	r2, [pc, #64]	; (80100b0 <prvCheckForValidListAndQueue+0x68>)
 8010070:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010072:	2300      	movs	r3, #0
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	4b11      	ldr	r3, [pc, #68]	; (80100bc <prvCheckForValidListAndQueue+0x74>)
 8010078:	4a11      	ldr	r2, [pc, #68]	; (80100c0 <prvCheckForValidListAndQueue+0x78>)
 801007a:	2110      	movs	r1, #16
 801007c:	200a      	movs	r0, #10
 801007e:	f7fe f8dd 	bl	800e23c <xQueueGenericCreateStatic>
 8010082:	4603      	mov	r3, r0
 8010084:	4a08      	ldr	r2, [pc, #32]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 8010086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010088:	4b07      	ldr	r3, [pc, #28]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d005      	beq.n	801009c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010090:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	490b      	ldr	r1, [pc, #44]	; (80100c4 <prvCheckForValidListAndQueue+0x7c>)
 8010096:	4618      	mov	r0, r3
 8010098:	f7fe fd12 	bl	800eac0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801009c:	f000 f952 	bl	8010344 <vPortExitCritical>
}
 80100a0:	bf00      	nop
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	2000cbc0 	.word	0x2000cbc0
 80100ac:	2000cb90 	.word	0x2000cb90
 80100b0:	2000cba4 	.word	0x2000cba4
 80100b4:	2000cbb8 	.word	0x2000cbb8
 80100b8:	2000cbbc 	.word	0x2000cbbc
 80100bc:	2000cc6c 	.word	0x2000cc6c
 80100c0:	2000cbcc 	.word	0x2000cbcc
 80100c4:	08024434 	.word	0x08024434

080100c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	3b04      	subs	r3, #4
 80100d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80100e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	3b04      	subs	r3, #4
 80100e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	f023 0201 	bic.w	r2, r3, #1
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3b04      	subs	r3, #4
 80100f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80100f8:	4a0c      	ldr	r2, [pc, #48]	; (801012c <pxPortInitialiseStack+0x64>)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3b14      	subs	r3, #20
 8010102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3b04      	subs	r3, #4
 801010e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f06f 0202 	mvn.w	r2, #2
 8010116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3b20      	subs	r3, #32
 801011c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801011e:	68fb      	ldr	r3, [r7, #12]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3714      	adds	r7, #20
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	08010131 	.word	0x08010131

08010130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801013a:	4b14      	ldr	r3, [pc, #80]	; (801018c <prvTaskExitError+0x5c>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010142:	d00c      	beq.n	801015e <prvTaskExitError+0x2e>
	__asm volatile
 8010144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010148:	b672      	cpsid	i
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	b662      	cpsie	i
 8010158:	60fb      	str	r3, [r7, #12]
}
 801015a:	bf00      	nop
 801015c:	e7fe      	b.n	801015c <prvTaskExitError+0x2c>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	b672      	cpsid	i
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	b662      	cpsie	i
 8010172:	60bb      	str	r3, [r7, #8]
}
 8010174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010176:	bf00      	nop
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0fc      	beq.n	8010178 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801017e:	bf00      	nop
 8010180:	bf00      	nop
 8010182:	3714      	adds	r7, #20
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr
 801018c:	2000009c 	.word	0x2000009c

08010190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010190:	4b07      	ldr	r3, [pc, #28]	; (80101b0 <pxCurrentTCBConst2>)
 8010192:	6819      	ldr	r1, [r3, #0]
 8010194:	6808      	ldr	r0, [r1, #0]
 8010196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019a:	f380 8809 	msr	PSP, r0
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f04f 0000 	mov.w	r0, #0
 80101a6:	f380 8811 	msr	BASEPRI, r0
 80101aa:	4770      	bx	lr
 80101ac:	f3af 8000 	nop.w

080101b0 <pxCurrentTCBConst2>:
 80101b0:	2000c690 	.word	0x2000c690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop

080101b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101b8:	4808      	ldr	r0, [pc, #32]	; (80101dc <prvPortStartFirstTask+0x24>)
 80101ba:	6800      	ldr	r0, [r0, #0]
 80101bc:	6800      	ldr	r0, [r0, #0]
 80101be:	f380 8808 	msr	MSP, r0
 80101c2:	f04f 0000 	mov.w	r0, #0
 80101c6:	f380 8814 	msr	CONTROL, r0
 80101ca:	b662      	cpsie	i
 80101cc:	b661      	cpsie	f
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	df00      	svc	0
 80101d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80101da:	bf00      	nop
 80101dc:	e000ed08 	.word	0xe000ed08

080101e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101e6:	4b37      	ldr	r3, [pc, #220]	; (80102c4 <xPortStartScheduler+0xe4>)
 80101e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	22ff      	movs	r2, #255	; 0xff
 80101f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010200:	78fb      	ldrb	r3, [r7, #3]
 8010202:	b2db      	uxtb	r3, r3
 8010204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010208:	b2da      	uxtb	r2, r3
 801020a:	4b2f      	ldr	r3, [pc, #188]	; (80102c8 <xPortStartScheduler+0xe8>)
 801020c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801020e:	4b2f      	ldr	r3, [pc, #188]	; (80102cc <xPortStartScheduler+0xec>)
 8010210:	2207      	movs	r2, #7
 8010212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010214:	e009      	b.n	801022a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010216:	4b2d      	ldr	r3, [pc, #180]	; (80102cc <xPortStartScheduler+0xec>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3b01      	subs	r3, #1
 801021c:	4a2b      	ldr	r2, [pc, #172]	; (80102cc <xPortStartScheduler+0xec>)
 801021e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010220:	78fb      	ldrb	r3, [r7, #3]
 8010222:	b2db      	uxtb	r3, r3
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	b2db      	uxtb	r3, r3
 8010228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	b2db      	uxtb	r3, r3
 801022e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010232:	2b80      	cmp	r3, #128	; 0x80
 8010234:	d0ef      	beq.n	8010216 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010236:	4b25      	ldr	r3, [pc, #148]	; (80102cc <xPortStartScheduler+0xec>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f1c3 0307 	rsb	r3, r3, #7
 801023e:	2b04      	cmp	r3, #4
 8010240:	d00c      	beq.n	801025c <xPortStartScheduler+0x7c>
	__asm volatile
 8010242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010246:	b672      	cpsid	i
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	b662      	cpsie	i
 8010256:	60bb      	str	r3, [r7, #8]
}
 8010258:	bf00      	nop
 801025a:	e7fe      	b.n	801025a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801025c:	4b1b      	ldr	r3, [pc, #108]	; (80102cc <xPortStartScheduler+0xec>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	021b      	lsls	r3, r3, #8
 8010262:	4a1a      	ldr	r2, [pc, #104]	; (80102cc <xPortStartScheduler+0xec>)
 8010264:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010266:	4b19      	ldr	r3, [pc, #100]	; (80102cc <xPortStartScheduler+0xec>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801026e:	4a17      	ldr	r2, [pc, #92]	; (80102cc <xPortStartScheduler+0xec>)
 8010270:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	b2da      	uxtb	r2, r3
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801027a:	4b15      	ldr	r3, [pc, #84]	; (80102d0 <xPortStartScheduler+0xf0>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4a14      	ldr	r2, [pc, #80]	; (80102d0 <xPortStartScheduler+0xf0>)
 8010280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010284:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010286:	4b12      	ldr	r3, [pc, #72]	; (80102d0 <xPortStartScheduler+0xf0>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a11      	ldr	r2, [pc, #68]	; (80102d0 <xPortStartScheduler+0xf0>)
 801028c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010290:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010292:	f000 f8dd 	bl	8010450 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010296:	4b0f      	ldr	r3, [pc, #60]	; (80102d4 <xPortStartScheduler+0xf4>)
 8010298:	2200      	movs	r2, #0
 801029a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801029c:	f000 f8fc 	bl	8010498 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102a0:	4b0d      	ldr	r3, [pc, #52]	; (80102d8 <xPortStartScheduler+0xf8>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4a0c      	ldr	r2, [pc, #48]	; (80102d8 <xPortStartScheduler+0xf8>)
 80102a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102ac:	f7ff ff84 	bl	80101b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80102b0:	f7ff f828 	bl	800f304 <vTaskSwitchContext>
	prvTaskExitError();
 80102b4:	f7ff ff3c 	bl	8010130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	e000e400 	.word	0xe000e400
 80102c8:	2000ccbc 	.word	0x2000ccbc
 80102cc:	2000ccc0 	.word	0x2000ccc0
 80102d0:	e000ed20 	.word	0xe000ed20
 80102d4:	2000009c 	.word	0x2000009c
 80102d8:	e000ef34 	.word	0xe000ef34

080102dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e6:	b672      	cpsid	i
 80102e8:	f383 8811 	msr	BASEPRI, r3
 80102ec:	f3bf 8f6f 	isb	sy
 80102f0:	f3bf 8f4f 	dsb	sy
 80102f4:	b662      	cpsie	i
 80102f6:	607b      	str	r3, [r7, #4]
}
 80102f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102fa:	4b10      	ldr	r3, [pc, #64]	; (801033c <vPortEnterCritical+0x60>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	3301      	adds	r3, #1
 8010300:	4a0e      	ldr	r2, [pc, #56]	; (801033c <vPortEnterCritical+0x60>)
 8010302:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010304:	4b0d      	ldr	r3, [pc, #52]	; (801033c <vPortEnterCritical+0x60>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d111      	bne.n	8010330 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801030c:	4b0c      	ldr	r3, [pc, #48]	; (8010340 <vPortEnterCritical+0x64>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00c      	beq.n	8010330 <vPortEnterCritical+0x54>
	__asm volatile
 8010316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031a:	b672      	cpsid	i
 801031c:	f383 8811 	msr	BASEPRI, r3
 8010320:	f3bf 8f6f 	isb	sy
 8010324:	f3bf 8f4f 	dsb	sy
 8010328:	b662      	cpsie	i
 801032a:	603b      	str	r3, [r7, #0]
}
 801032c:	bf00      	nop
 801032e:	e7fe      	b.n	801032e <vPortEnterCritical+0x52>
	}
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	2000009c 	.word	0x2000009c
 8010340:	e000ed04 	.word	0xe000ed04

08010344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801034a:	4b13      	ldr	r3, [pc, #76]	; (8010398 <vPortExitCritical+0x54>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10c      	bne.n	801036c <vPortExitCritical+0x28>
	__asm volatile
 8010352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010356:	b672      	cpsid	i
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	b662      	cpsie	i
 8010366:	607b      	str	r3, [r7, #4]
}
 8010368:	bf00      	nop
 801036a:	e7fe      	b.n	801036a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801036c:	4b0a      	ldr	r3, [pc, #40]	; (8010398 <vPortExitCritical+0x54>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	3b01      	subs	r3, #1
 8010372:	4a09      	ldr	r2, [pc, #36]	; (8010398 <vPortExitCritical+0x54>)
 8010374:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010376:	4b08      	ldr	r3, [pc, #32]	; (8010398 <vPortExitCritical+0x54>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d105      	bne.n	801038a <vPortExitCritical+0x46>
 801037e:	2300      	movs	r3, #0
 8010380:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	f383 8811 	msr	BASEPRI, r3
}
 8010388:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801038a:	bf00      	nop
 801038c:	370c      	adds	r7, #12
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	2000009c 	.word	0x2000009c
 801039c:	00000000 	.word	0x00000000

080103a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103a0:	f3ef 8009 	mrs	r0, PSP
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	4b15      	ldr	r3, [pc, #84]	; (8010400 <pxCurrentTCBConst>)
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	f01e 0f10 	tst.w	lr, #16
 80103b0:	bf08      	it	eq
 80103b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ba:	6010      	str	r0, [r2, #0]
 80103bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80103c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80103c4:	b672      	cpsid	i
 80103c6:	f380 8811 	msr	BASEPRI, r0
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	f3bf 8f6f 	isb	sy
 80103d2:	b662      	cpsie	i
 80103d4:	f7fe ff96 	bl	800f304 <vTaskSwitchContext>
 80103d8:	f04f 0000 	mov.w	r0, #0
 80103dc:	f380 8811 	msr	BASEPRI, r0
 80103e0:	bc09      	pop	{r0, r3}
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	6808      	ldr	r0, [r1, #0]
 80103e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ea:	f01e 0f10 	tst.w	lr, #16
 80103ee:	bf08      	it	eq
 80103f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103f4:	f380 8809 	msr	PSP, r0
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop

08010400 <pxCurrentTCBConst>:
 8010400:	2000c690 	.word	0x2000c690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010404:	bf00      	nop
 8010406:	bf00      	nop

08010408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010412:	b672      	cpsid	i
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	b662      	cpsie	i
 8010422:	607b      	str	r3, [r7, #4]
}
 8010424:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010426:	f7fe feb1 	bl	800f18c <xTaskIncrementTick>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d003      	beq.n	8010438 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010430:	4b06      	ldr	r3, [pc, #24]	; (801044c <SysTick_Handler+0x44>)
 8010432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010436:	601a      	str	r2, [r3, #0]
 8010438:	2300      	movs	r3, #0
 801043a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	f383 8811 	msr	BASEPRI, r3
}
 8010442:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	e000ed04 	.word	0xe000ed04

08010450 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010450:	b480      	push	{r7}
 8010452:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010454:	4b0b      	ldr	r3, [pc, #44]	; (8010484 <vPortSetupTimerInterrupt+0x34>)
 8010456:	2200      	movs	r2, #0
 8010458:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801045a:	4b0b      	ldr	r3, [pc, #44]	; (8010488 <vPortSetupTimerInterrupt+0x38>)
 801045c:	2200      	movs	r2, #0
 801045e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010460:	4b0a      	ldr	r3, [pc, #40]	; (801048c <vPortSetupTimerInterrupt+0x3c>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a0a      	ldr	r2, [pc, #40]	; (8010490 <vPortSetupTimerInterrupt+0x40>)
 8010466:	fba2 2303 	umull	r2, r3, r2, r3
 801046a:	099b      	lsrs	r3, r3, #6
 801046c:	4a09      	ldr	r2, [pc, #36]	; (8010494 <vPortSetupTimerInterrupt+0x44>)
 801046e:	3b01      	subs	r3, #1
 8010470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010472:	4b04      	ldr	r3, [pc, #16]	; (8010484 <vPortSetupTimerInterrupt+0x34>)
 8010474:	2207      	movs	r2, #7
 8010476:	601a      	str	r2, [r3, #0]
}
 8010478:	bf00      	nop
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	e000e010 	.word	0xe000e010
 8010488:	e000e018 	.word	0xe000e018
 801048c:	20000004 	.word	0x20000004
 8010490:	10624dd3 	.word	0x10624dd3
 8010494:	e000e014 	.word	0xe000e014

08010498 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010498:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104a8 <vPortEnableVFP+0x10>
 801049c:	6801      	ldr	r1, [r0, #0]
 801049e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104a2:	6001      	str	r1, [r0, #0]
 80104a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104a6:	bf00      	nop
 80104a8:	e000ed88 	.word	0xe000ed88

080104ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80104b2:	f3ef 8305 	mrs	r3, IPSR
 80104b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2b0f      	cmp	r3, #15
 80104bc:	d916      	bls.n	80104ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104be:	4a19      	ldr	r2, [pc, #100]	; (8010524 <vPortValidateInterruptPriority+0x78>)
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	4413      	add	r3, r2
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80104c8:	4b17      	ldr	r3, [pc, #92]	; (8010528 <vPortValidateInterruptPriority+0x7c>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	7afa      	ldrb	r2, [r7, #11]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d20c      	bcs.n	80104ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d6:	b672      	cpsid	i
 80104d8:	f383 8811 	msr	BASEPRI, r3
 80104dc:	f3bf 8f6f 	isb	sy
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	b662      	cpsie	i
 80104e6:	607b      	str	r3, [r7, #4]
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80104ec:	4b0f      	ldr	r3, [pc, #60]	; (801052c <vPortValidateInterruptPriority+0x80>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80104f4:	4b0e      	ldr	r3, [pc, #56]	; (8010530 <vPortValidateInterruptPriority+0x84>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d90c      	bls.n	8010516 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80104fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010500:	b672      	cpsid	i
 8010502:	f383 8811 	msr	BASEPRI, r3
 8010506:	f3bf 8f6f 	isb	sy
 801050a:	f3bf 8f4f 	dsb	sy
 801050e:	b662      	cpsie	i
 8010510:	603b      	str	r3, [r7, #0]
}
 8010512:	bf00      	nop
 8010514:	e7fe      	b.n	8010514 <vPortValidateInterruptPriority+0x68>
	}
 8010516:	bf00      	nop
 8010518:	3714      	adds	r7, #20
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	e000e3f0 	.word	0xe000e3f0
 8010528:	2000ccbc 	.word	0x2000ccbc
 801052c:	e000ed0c 	.word	0xe000ed0c
 8010530:	2000ccc0 	.word	0x2000ccc0

08010534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b08a      	sub	sp, #40	; 0x28
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801053c:	2300      	movs	r3, #0
 801053e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010540:	f7fe fd66 	bl	800f010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010544:	4b5b      	ldr	r3, [pc, #364]	; (80106b4 <pvPortMalloc+0x180>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d101      	bne.n	8010550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801054c:	f000 f91a 	bl	8010784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010550:	4b59      	ldr	r3, [pc, #356]	; (80106b8 <pvPortMalloc+0x184>)
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4013      	ands	r3, r2
 8010558:	2b00      	cmp	r3, #0
 801055a:	f040 8092 	bne.w	8010682 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d01f      	beq.n	80105a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010564:	2208      	movs	r2, #8
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4413      	add	r3, r2
 801056a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f003 0307 	and.w	r3, r3, #7
 8010572:	2b00      	cmp	r3, #0
 8010574:	d016      	beq.n	80105a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f023 0307 	bic.w	r3, r3, #7
 801057c:	3308      	adds	r3, #8
 801057e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f003 0307 	and.w	r3, r3, #7
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00c      	beq.n	80105a4 <pvPortMalloc+0x70>
	__asm volatile
 801058a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058e:	b672      	cpsid	i
 8010590:	f383 8811 	msr	BASEPRI, r3
 8010594:	f3bf 8f6f 	isb	sy
 8010598:	f3bf 8f4f 	dsb	sy
 801059c:	b662      	cpsie	i
 801059e:	617b      	str	r3, [r7, #20]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d06b      	beq.n	8010682 <pvPortMalloc+0x14e>
 80105aa:	4b44      	ldr	r3, [pc, #272]	; (80106bc <pvPortMalloc+0x188>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d866      	bhi.n	8010682 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105b4:	4b42      	ldr	r3, [pc, #264]	; (80106c0 <pvPortMalloc+0x18c>)
 80105b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105b8:	4b41      	ldr	r3, [pc, #260]	; (80106c0 <pvPortMalloc+0x18c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105be:	e004      	b.n	80105ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d903      	bls.n	80105dc <pvPortMalloc+0xa8>
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d1f1      	bne.n	80105c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105dc:	4b35      	ldr	r3, [pc, #212]	; (80106b4 <pvPortMalloc+0x180>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d04d      	beq.n	8010682 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2208      	movs	r2, #8
 80105ec:	4413      	add	r3, r2
 80105ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	6a3b      	ldr	r3, [r7, #32]
 80105f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	685a      	ldr	r2, [r3, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	1ad2      	subs	r2, r2, r3
 8010600:	2308      	movs	r3, #8
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	429a      	cmp	r2, r3
 8010606:	d921      	bls.n	801064c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4413      	add	r3, r2
 801060e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	f003 0307 	and.w	r3, r3, #7
 8010616:	2b00      	cmp	r3, #0
 8010618:	d00c      	beq.n	8010634 <pvPortMalloc+0x100>
	__asm volatile
 801061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061e:	b672      	cpsid	i
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	b662      	cpsie	i
 801062e:	613b      	str	r3, [r7, #16]
}
 8010630:	bf00      	nop
 8010632:	e7fe      	b.n	8010632 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	685a      	ldr	r2, [r3, #4]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	1ad2      	subs	r2, r2, r3
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010646:	69b8      	ldr	r0, [r7, #24]
 8010648:	f000 f8fe 	bl	8010848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801064c:	4b1b      	ldr	r3, [pc, #108]	; (80106bc <pvPortMalloc+0x188>)
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	4a19      	ldr	r2, [pc, #100]	; (80106bc <pvPortMalloc+0x188>)
 8010658:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801065a:	4b18      	ldr	r3, [pc, #96]	; (80106bc <pvPortMalloc+0x188>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	4b19      	ldr	r3, [pc, #100]	; (80106c4 <pvPortMalloc+0x190>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d203      	bcs.n	801066e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010666:	4b15      	ldr	r3, [pc, #84]	; (80106bc <pvPortMalloc+0x188>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a16      	ldr	r2, [pc, #88]	; (80106c4 <pvPortMalloc+0x190>)
 801066c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	685a      	ldr	r2, [r3, #4]
 8010672:	4b11      	ldr	r3, [pc, #68]	; (80106b8 <pvPortMalloc+0x184>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	431a      	orrs	r2, r3
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	2200      	movs	r2, #0
 8010680:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010682:	f7fe fcd3 	bl	800f02c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	f003 0307 	and.w	r3, r3, #7
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00c      	beq.n	80106aa <pvPortMalloc+0x176>
	__asm volatile
 8010690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010694:	b672      	cpsid	i
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	b662      	cpsie	i
 80106a4:	60fb      	str	r3, [r7, #12]
}
 80106a6:	bf00      	nop
 80106a8:	e7fe      	b.n	80106a8 <pvPortMalloc+0x174>
	return pvReturn;
 80106aa:	69fb      	ldr	r3, [r7, #28]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3728      	adds	r7, #40	; 0x28
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	200108cc 	.word	0x200108cc
 80106b8:	200108d8 	.word	0x200108d8
 80106bc:	200108d0 	.word	0x200108d0
 80106c0:	200108c4 	.word	0x200108c4
 80106c4:	200108d4 	.word	0x200108d4

080106c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b086      	sub	sp, #24
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d04c      	beq.n	8010774 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106da:	2308      	movs	r3, #8
 80106dc:	425b      	negs	r3, r3
 80106de:	697a      	ldr	r2, [r7, #20]
 80106e0:	4413      	add	r3, r2
 80106e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	685a      	ldr	r2, [r3, #4]
 80106ec:	4b23      	ldr	r3, [pc, #140]	; (801077c <vPortFree+0xb4>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4013      	ands	r3, r2
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d10c      	bne.n	8010710 <vPortFree+0x48>
	__asm volatile
 80106f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fa:	b672      	cpsid	i
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	b662      	cpsie	i
 801070a:	60fb      	str	r3, [r7, #12]
}
 801070c:	bf00      	nop
 801070e:	e7fe      	b.n	801070e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00c      	beq.n	8010732 <vPortFree+0x6a>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	b672      	cpsid	i
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	b662      	cpsie	i
 801072c:	60bb      	str	r3, [r7, #8]
}
 801072e:	bf00      	nop
 8010730:	e7fe      	b.n	8010730 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	4b11      	ldr	r3, [pc, #68]	; (801077c <vPortFree+0xb4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4013      	ands	r3, r2
 801073c:	2b00      	cmp	r3, #0
 801073e:	d019      	beq.n	8010774 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d115      	bne.n	8010774 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	4b0b      	ldr	r3, [pc, #44]	; (801077c <vPortFree+0xb4>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	43db      	mvns	r3, r3
 8010752:	401a      	ands	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010758:	f7fe fc5a 	bl	800f010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	4b07      	ldr	r3, [pc, #28]	; (8010780 <vPortFree+0xb8>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4413      	add	r3, r2
 8010766:	4a06      	ldr	r2, [pc, #24]	; (8010780 <vPortFree+0xb8>)
 8010768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801076a:	6938      	ldr	r0, [r7, #16]
 801076c:	f000 f86c 	bl	8010848 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010770:	f7fe fc5c 	bl	800f02c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010774:	bf00      	nop
 8010776:	3718      	adds	r7, #24
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	200108d8 	.word	0x200108d8
 8010780:	200108d0 	.word	0x200108d0

08010784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801078a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801078e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010790:	4b27      	ldr	r3, [pc, #156]	; (8010830 <prvHeapInit+0xac>)
 8010792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f003 0307 	and.w	r3, r3, #7
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00c      	beq.n	80107b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3307      	adds	r3, #7
 80107a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f023 0307 	bic.w	r3, r3, #7
 80107aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	4a1f      	ldr	r2, [pc, #124]	; (8010830 <prvHeapInit+0xac>)
 80107b4:	4413      	add	r3, r2
 80107b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107bc:	4a1d      	ldr	r2, [pc, #116]	; (8010834 <prvHeapInit+0xb0>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107c2:	4b1c      	ldr	r3, [pc, #112]	; (8010834 <prvHeapInit+0xb0>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	4413      	add	r3, r2
 80107ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107d0:	2208      	movs	r2, #8
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f023 0307 	bic.w	r3, r3, #7
 80107de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	4a15      	ldr	r2, [pc, #84]	; (8010838 <prvHeapInit+0xb4>)
 80107e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <prvHeapInit+0xb4>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2200      	movs	r2, #0
 80107ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <prvHeapInit+0xb4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	1ad2      	subs	r2, r2, r3
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010804:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <prvHeapInit+0xb4>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	4a0a      	ldr	r2, [pc, #40]	; (801083c <prvHeapInit+0xb8>)
 8010812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	4a09      	ldr	r2, [pc, #36]	; (8010840 <prvHeapInit+0xbc>)
 801081a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <prvHeapInit+0xc0>)
 801081e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010822:	601a      	str	r2, [r3, #0]
}
 8010824:	bf00      	nop
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	2000ccc4 	.word	0x2000ccc4
 8010834:	200108c4 	.word	0x200108c4
 8010838:	200108cc 	.word	0x200108cc
 801083c:	200108d4 	.word	0x200108d4
 8010840:	200108d0 	.word	0x200108d0
 8010844:	200108d8 	.word	0x200108d8

08010848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <prvInsertBlockIntoFreeList+0xac>)
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e002      	b.n	801085c <prvInsertBlockIntoFreeList+0x14>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	60fb      	str	r3, [r7, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	429a      	cmp	r2, r3
 8010864:	d8f7      	bhi.n	8010856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	4413      	add	r3, r2
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	429a      	cmp	r2, r3
 8010876:	d108      	bne.n	801088a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	685a      	ldr	r2, [r3, #4]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	441a      	add	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	441a      	add	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d118      	bne.n	80108d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d00d      	beq.n	80108c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	441a      	add	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	e008      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108c6:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	e003      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d002      	beq.n	80108e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108e6:	bf00      	nop
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	200108c4 	.word	0x200108c4
 80108f8:	200108cc 	.word	0x200108cc

080108fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010900:	2200      	movs	r2, #0
 8010902:	4912      	ldr	r1, [pc, #72]	; (801094c <MX_USB_DEVICE_Init+0x50>)
 8010904:	4812      	ldr	r0, [pc, #72]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 8010906:	f7fb fee5 	bl	800c6d4 <USBD_Init>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d001      	beq.n	8010914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010910:	f7f2 fdbf 	bl	8003492 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010914:	490f      	ldr	r1, [pc, #60]	; (8010954 <MX_USB_DEVICE_Init+0x58>)
 8010916:	480e      	ldr	r0, [pc, #56]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 8010918:	f7fb ff0c 	bl	800c734 <USBD_RegisterClass>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010922:	f7f2 fdb6 	bl	8003492 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010926:	490c      	ldr	r1, [pc, #48]	; (8010958 <MX_USB_DEVICE_Init+0x5c>)
 8010928:	4809      	ldr	r0, [pc, #36]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 801092a:	f7fb fe43 	bl	800c5b4 <USBD_CDC_RegisterInterface>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010934:	f7f2 fdad 	bl	8003492 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010938:	4805      	ldr	r0, [pc, #20]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 801093a:	f7fb ff31 	bl	800c7a0 <USBD_Start>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d001      	beq.n	8010948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010944:	f7f2 fda5 	bl	8003492 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010948:	bf00      	nop
 801094a:	bd80      	pop	{r7, pc}
 801094c:	200000b4 	.word	0x200000b4
 8010950:	200108dc 	.word	0x200108dc
 8010954:	2000001c 	.word	0x2000001c
 8010958:	200000a0 	.word	0x200000a0

0801095c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010960:	2200      	movs	r2, #0
 8010962:	4905      	ldr	r1, [pc, #20]	; (8010978 <CDC_Init_FS+0x1c>)
 8010964:	4805      	ldr	r0, [pc, #20]	; (801097c <CDC_Init_FS+0x20>)
 8010966:	f7fb fe3f 	bl	800c5e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801096a:	4905      	ldr	r1, [pc, #20]	; (8010980 <CDC_Init_FS+0x24>)
 801096c:	4803      	ldr	r0, [pc, #12]	; (801097c <CDC_Init_FS+0x20>)
 801096e:	f7fb fe5d 	bl	800c62c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010974:	4618      	mov	r0, r3
 8010976:	bd80      	pop	{r7, pc}
 8010978:	200113b8 	.word	0x200113b8
 801097c:	200108dc 	.word	0x200108dc
 8010980:	20010bb8 	.word	0x20010bb8

08010984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010984:	b480      	push	{r7}
 8010986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801098a:	4618      	mov	r0, r3
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	6039      	str	r1, [r7, #0]
 801099e:	71fb      	strb	r3, [r7, #7]
 80109a0:	4613      	mov	r3, r2
 80109a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80109a4:	79fb      	ldrb	r3, [r7, #7]
 80109a6:	2b23      	cmp	r3, #35	; 0x23
 80109a8:	d84a      	bhi.n	8010a40 <CDC_Control_FS+0xac>
 80109aa:	a201      	add	r2, pc, #4	; (adr r2, 80109b0 <CDC_Control_FS+0x1c>)
 80109ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b0:	08010a41 	.word	0x08010a41
 80109b4:	08010a41 	.word	0x08010a41
 80109b8:	08010a41 	.word	0x08010a41
 80109bc:	08010a41 	.word	0x08010a41
 80109c0:	08010a41 	.word	0x08010a41
 80109c4:	08010a41 	.word	0x08010a41
 80109c8:	08010a41 	.word	0x08010a41
 80109cc:	08010a41 	.word	0x08010a41
 80109d0:	08010a41 	.word	0x08010a41
 80109d4:	08010a41 	.word	0x08010a41
 80109d8:	08010a41 	.word	0x08010a41
 80109dc:	08010a41 	.word	0x08010a41
 80109e0:	08010a41 	.word	0x08010a41
 80109e4:	08010a41 	.word	0x08010a41
 80109e8:	08010a41 	.word	0x08010a41
 80109ec:	08010a41 	.word	0x08010a41
 80109f0:	08010a41 	.word	0x08010a41
 80109f4:	08010a41 	.word	0x08010a41
 80109f8:	08010a41 	.word	0x08010a41
 80109fc:	08010a41 	.word	0x08010a41
 8010a00:	08010a41 	.word	0x08010a41
 8010a04:	08010a41 	.word	0x08010a41
 8010a08:	08010a41 	.word	0x08010a41
 8010a0c:	08010a41 	.word	0x08010a41
 8010a10:	08010a41 	.word	0x08010a41
 8010a14:	08010a41 	.word	0x08010a41
 8010a18:	08010a41 	.word	0x08010a41
 8010a1c:	08010a41 	.word	0x08010a41
 8010a20:	08010a41 	.word	0x08010a41
 8010a24:	08010a41 	.word	0x08010a41
 8010a28:	08010a41 	.word	0x08010a41
 8010a2c:	08010a41 	.word	0x08010a41
 8010a30:	08010a41 	.word	0x08010a41
 8010a34:	08010a41 	.word	0x08010a41
 8010a38:	08010a41 	.word	0x08010a41
 8010a3c:	08010a41 	.word	0x08010a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010a40:	bf00      	nop
  }

  return (USBD_OK);
 8010a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	4805      	ldr	r0, [pc, #20]	; (8010a74 <CDC_Receive_FS+0x24>)
 8010a5e:	f7fb fde5 	bl	800c62c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a62:	4804      	ldr	r0, [pc, #16]	; (8010a74 <CDC_Receive_FS+0x24>)
 8010a64:	f7fb fe00 	bl	800c668 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010a68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3708      	adds	r7, #8
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	200108dc 	.word	0x200108dc

08010a78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b087      	sub	sp, #28
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	4613      	mov	r3, r2
 8010a84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	371c      	adds	r7, #28
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
	...

08010a9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	6039      	str	r1, [r7, #0]
 8010aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	2212      	movs	r2, #18
 8010aac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010aae:	4b03      	ldr	r3, [pc, #12]	; (8010abc <USBD_FS_DeviceDescriptor+0x20>)
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr
 8010abc:	200000d4 	.word	0x200000d4

08010ac0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	6039      	str	r1, [r7, #0]
 8010aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	2204      	movs	r2, #4
 8010ad0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010ad2:	4b03      	ldr	r3, [pc, #12]	; (8010ae0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	200000f4 	.word	0x200000f4

08010ae4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	4603      	mov	r3, r0
 8010aec:	6039      	str	r1, [r7, #0]
 8010aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010af0:	79fb      	ldrb	r3, [r7, #7]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d105      	bne.n	8010b02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010af6:	683a      	ldr	r2, [r7, #0]
 8010af8:	4907      	ldr	r1, [pc, #28]	; (8010b18 <USBD_FS_ProductStrDescriptor+0x34>)
 8010afa:	4808      	ldr	r0, [pc, #32]	; (8010b1c <USBD_FS_ProductStrDescriptor+0x38>)
 8010afc:	f7fd f826 	bl	800db4c <USBD_GetString>
 8010b00:	e004      	b.n	8010b0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	4904      	ldr	r1, [pc, #16]	; (8010b18 <USBD_FS_ProductStrDescriptor+0x34>)
 8010b06:	4805      	ldr	r0, [pc, #20]	; (8010b1c <USBD_FS_ProductStrDescriptor+0x38>)
 8010b08:	f7fd f820 	bl	800db4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b0c:	4b02      	ldr	r3, [pc, #8]	; (8010b18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	20011bb8 	.word	0x20011bb8
 8010b1c:	0802443c 	.word	0x0802443c

08010b20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	4603      	mov	r3, r0
 8010b28:	6039      	str	r1, [r7, #0]
 8010b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	4904      	ldr	r1, [pc, #16]	; (8010b40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010b30:	4804      	ldr	r0, [pc, #16]	; (8010b44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010b32:	f7fd f80b 	bl	800db4c <USBD_GetString>
  return USBD_StrDesc;
 8010b36:	4b02      	ldr	r3, [pc, #8]	; (8010b40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	20011bb8 	.word	0x20011bb8
 8010b44:	08024454 	.word	0x08024454

08010b48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	4603      	mov	r3, r0
 8010b50:	6039      	str	r1, [r7, #0]
 8010b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	221a      	movs	r2, #26
 8010b58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010b5a:	f000 f855 	bl	8010c08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010b5e:	4b02      	ldr	r3, [pc, #8]	; (8010b68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3708      	adds	r7, #8
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	200000f8 	.word	0x200000f8

08010b6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	6039      	str	r1, [r7, #0]
 8010b76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d105      	bne.n	8010b8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b7e:	683a      	ldr	r2, [r7, #0]
 8010b80:	4907      	ldr	r1, [pc, #28]	; (8010ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b82:	4808      	ldr	r0, [pc, #32]	; (8010ba4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b84:	f7fc ffe2 	bl	800db4c <USBD_GetString>
 8010b88:	e004      	b.n	8010b94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	4904      	ldr	r1, [pc, #16]	; (8010ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b8e:	4805      	ldr	r0, [pc, #20]	; (8010ba4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b90:	f7fc ffdc 	bl	800db4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b94:	4b02      	ldr	r3, [pc, #8]	; (8010ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3708      	adds	r7, #8
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20011bb8 	.word	0x20011bb8
 8010ba4:	08024468 	.word	0x08024468

08010ba8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4603      	mov	r3, r0
 8010bb0:	6039      	str	r1, [r7, #0]
 8010bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bb4:	79fb      	ldrb	r3, [r7, #7]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d105      	bne.n	8010bc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010bba:	683a      	ldr	r2, [r7, #0]
 8010bbc:	4907      	ldr	r1, [pc, #28]	; (8010bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bbe:	4808      	ldr	r0, [pc, #32]	; (8010be0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bc0:	f7fc ffc4 	bl	800db4c <USBD_GetString>
 8010bc4:	e004      	b.n	8010bd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	4904      	ldr	r1, [pc, #16]	; (8010bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bca:	4805      	ldr	r0, [pc, #20]	; (8010be0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bcc:	f7fc ffbe 	bl	800db4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bd0:	4b02      	ldr	r3, [pc, #8]	; (8010bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	20011bb8 	.word	0x20011bb8
 8010be0:	08024474 	.word	0x08024474

08010be4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	6039      	str	r1, [r7, #0]
 8010bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	220c      	movs	r2, #12
 8010bf4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010bf6:	4b03      	ldr	r3, [pc, #12]	; (8010c04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr
 8010c04:	200000e8 	.word	0x200000e8

08010c08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010c0e:	4b0f      	ldr	r3, [pc, #60]	; (8010c4c <Get_SerialNum+0x44>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010c14:	4b0e      	ldr	r3, [pc, #56]	; (8010c50 <Get_SerialNum+0x48>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010c1a:	4b0e      	ldr	r3, [pc, #56]	; (8010c54 <Get_SerialNum+0x4c>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4413      	add	r3, r2
 8010c26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d009      	beq.n	8010c42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010c2e:	2208      	movs	r2, #8
 8010c30:	4909      	ldr	r1, [pc, #36]	; (8010c58 <Get_SerialNum+0x50>)
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f000 f814 	bl	8010c60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010c38:	2204      	movs	r2, #4
 8010c3a:	4908      	ldr	r1, [pc, #32]	; (8010c5c <Get_SerialNum+0x54>)
 8010c3c:	68b8      	ldr	r0, [r7, #8]
 8010c3e:	f000 f80f 	bl	8010c60 <IntToUnicode>
  }
}
 8010c42:	bf00      	nop
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	1ff0f420 	.word	0x1ff0f420
 8010c50:	1ff0f424 	.word	0x1ff0f424
 8010c54:	1ff0f428 	.word	0x1ff0f428
 8010c58:	200000fa 	.word	0x200000fa
 8010c5c:	2000010a 	.word	0x2000010a

08010c60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b087      	sub	sp, #28
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010c72:	2300      	movs	r3, #0
 8010c74:	75fb      	strb	r3, [r7, #23]
 8010c76:	e027      	b.n	8010cc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	0f1b      	lsrs	r3, r3, #28
 8010c7c:	2b09      	cmp	r3, #9
 8010c7e:	d80b      	bhi.n	8010c98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	0f1b      	lsrs	r3, r3, #28
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	440b      	add	r3, r1
 8010c90:	3230      	adds	r2, #48	; 0x30
 8010c92:	b2d2      	uxtb	r2, r2
 8010c94:	701a      	strb	r2, [r3, #0]
 8010c96:	e00a      	b.n	8010cae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	0f1b      	lsrs	r3, r3, #28
 8010c9c:	b2da      	uxtb	r2, r3
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	440b      	add	r3, r1
 8010ca8:	3237      	adds	r2, #55	; 0x37
 8010caa:	b2d2      	uxtb	r2, r2
 8010cac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	011b      	lsls	r3, r3, #4
 8010cb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	005b      	lsls	r3, r3, #1
 8010cb8:	3301      	adds	r3, #1
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	75fb      	strb	r3, [r7, #23]
 8010cc8:	7dfa      	ldrb	r2, [r7, #23]
 8010cca:	79fb      	ldrb	r3, [r7, #7]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d3d3      	bcc.n	8010c78 <IntToUnicode+0x18>
  }
}
 8010cd0:	bf00      	nop
 8010cd2:	bf00      	nop
 8010cd4:	371c      	adds	r7, #28
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
	...

08010ce0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b0ae      	sub	sp, #184	; 0xb8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010cec:	2200      	movs	r2, #0
 8010cee:	601a      	str	r2, [r3, #0]
 8010cf0:	605a      	str	r2, [r3, #4]
 8010cf2:	609a      	str	r2, [r3, #8]
 8010cf4:	60da      	str	r2, [r3, #12]
 8010cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010cf8:	f107 0314 	add.w	r3, r7, #20
 8010cfc:	2290      	movs	r2, #144	; 0x90
 8010cfe:	2100      	movs	r1, #0
 8010d00:	4618      	mov	r0, r3
 8010d02:	f010 f817 	bl	8020d34 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d0e:	d151      	bne.n	8010db4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010d10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010d1c:	f107 0314 	add.w	r3, r7, #20
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7f6 fee7 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d001      	beq.n	8010d30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010d2c:	f7f2 fbb1 	bl	8003492 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d30:	4b22      	ldr	r3, [pc, #136]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d34:	4a21      	ldr	r2, [pc, #132]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d36:	f043 0301 	orr.w	r3, r3, #1
 8010d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8010d3c:	4b1f      	ldr	r3, [pc, #124]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	613b      	str	r3, [r7, #16]
 8010d46:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d50:	2302      	movs	r3, #2
 8010d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d56:	2300      	movs	r3, #0
 8010d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d5c:	2303      	movs	r3, #3
 8010d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010d62:	230a      	movs	r3, #10
 8010d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	4814      	ldr	r0, [pc, #80]	; (8010dc0 <HAL_PCD_MspInit+0xe0>)
 8010d70:	f7f4 fcd2 	bl	8005718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d74:	4b11      	ldr	r3, [pc, #68]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d78:	4a10      	ldr	r2, [pc, #64]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d7e:	6353      	str	r3, [r2, #52]	; 0x34
 8010d80:	4b0e      	ldr	r3, [pc, #56]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d88:	60fb      	str	r3, [r7, #12]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	4b0b      	ldr	r3, [pc, #44]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d90:	4a0a      	ldr	r2, [pc, #40]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d96:	6453      	str	r3, [r2, #68]	; 0x44
 8010d98:	4b08      	ldr	r3, [pc, #32]	; (8010dbc <HAL_PCD_MspInit+0xdc>)
 8010d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010da0:	60bb      	str	r3, [r7, #8]
 8010da2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010da4:	2200      	movs	r2, #0
 8010da6:	2105      	movs	r1, #5
 8010da8:	2043      	movs	r0, #67	; 0x43
 8010daa:	f7f4 f875 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010dae:	2043      	movs	r0, #67	; 0x43
 8010db0:	f7f4 f88e 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010db4:	bf00      	nop
 8010db6:	37b8      	adds	r7, #184	; 0xb8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	40023800 	.word	0x40023800
 8010dc0:	40020000 	.word	0x40020000

08010dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010dd8:	4619      	mov	r1, r3
 8010dda:	4610      	mov	r0, r2
 8010ddc:	f7fb fd2d 	bl	800c83a <USBD_LL_SetupStage>
}
 8010de0:	bf00      	nop
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	460b      	mov	r3, r1
 8010df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010dfa:	78fa      	ldrb	r2, [r7, #3]
 8010dfc:	6879      	ldr	r1, [r7, #4]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	4413      	add	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	440b      	add	r3, r1
 8010e08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	78fb      	ldrb	r3, [r7, #3]
 8010e10:	4619      	mov	r1, r3
 8010e12:	f7fb fd67 	bl	800c8e4 <USBD_LL_DataOutStage>
}
 8010e16:	bf00      	nop
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b082      	sub	sp, #8
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	460b      	mov	r3, r1
 8010e28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010e30:	78fa      	ldrb	r2, [r7, #3]
 8010e32:	6879      	ldr	r1, [r7, #4]
 8010e34:	4613      	mov	r3, r2
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	4413      	add	r3, r2
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	440b      	add	r3, r1
 8010e3e:	334c      	adds	r3, #76	; 0x4c
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	78fb      	ldrb	r3, [r7, #3]
 8010e44:	4619      	mov	r1, r3
 8010e46:	f7fb fe00 	bl	800ca4a <USBD_LL_DataInStage>
}
 8010e4a:	bf00      	nop
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b082      	sub	sp, #8
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fb ff34 	bl	800ccce <USBD_LL_SOF>
}
 8010e66:	bf00      	nop
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b084      	sub	sp, #16
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e76:	2301      	movs	r3, #1
 8010e78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d102      	bne.n	8010e88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010e82:	2300      	movs	r3, #0
 8010e84:	73fb      	strb	r3, [r7, #15]
 8010e86:	e008      	b.n	8010e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	2b02      	cmp	r3, #2
 8010e8e:	d102      	bne.n	8010e96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010e90:	2301      	movs	r3, #1
 8010e92:	73fb      	strb	r3, [r7, #15]
 8010e94:	e001      	b.n	8010e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010e96:	f7f2 fafc 	bl	8003492 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010ea0:	7bfa      	ldrb	r2, [r7, #15]
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fb fed4 	bl	800cc52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fb fe7c 	bl	800cbae <USBD_LL_Reset>
}
 8010eb6:	bf00      	nop
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
	...

08010ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fb fecf 	bl	800cc72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	6812      	ldr	r2, [r2, #0]
 8010ee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ee6:	f043 0301 	orr.w	r3, r3, #1
 8010eea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6a1b      	ldr	r3, [r3, #32]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d005      	beq.n	8010f00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ef4:	4b04      	ldr	r3, [pc, #16]	; (8010f08 <HAL_PCD_SuspendCallback+0x48>)
 8010ef6:	691b      	ldr	r3, [r3, #16]
 8010ef8:	4a03      	ldr	r2, [pc, #12]	; (8010f08 <HAL_PCD_SuspendCallback+0x48>)
 8010efa:	f043 0306 	orr.w	r3, r3, #6
 8010efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010f00:	bf00      	nop
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	e000ed00 	.word	0xe000ed00

08010f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fb febf 	bl	800cc9e <USBD_LL_Resume>
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	460b      	mov	r3, r1
 8010f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f3a:	78fa      	ldrb	r2, [r7, #3]
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fb ff17 	bl	800cd72 <USBD_LL_IsoOUTIncomplete>
}
 8010f44:	bf00      	nop
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	460b      	mov	r3, r1
 8010f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f5e:	78fa      	ldrb	r2, [r7, #3]
 8010f60:	4611      	mov	r1, r2
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fb fed3 	bl	800cd0e <USBD_LL_IsoINIncomplete>
}
 8010f68:	bf00      	nop
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fb ff29 	bl	800cdd6 <USBD_LL_DevConnected>
}
 8010f84:	bf00      	nop
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fb ff26 	bl	800cdec <USBD_LL_DevDisconnected>
}
 8010fa0:	bf00      	nop
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d13c      	bne.n	8011032 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010fb8:	4a20      	ldr	r2, [pc, #128]	; (801103c <USBD_LL_Init+0x94>)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4a1e      	ldr	r2, [pc, #120]	; (801103c <USBD_LL_Init+0x94>)
 8010fc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010fc8:	4b1c      	ldr	r3, [pc, #112]	; (801103c <USBD_LL_Init+0x94>)
 8010fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010fce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010fd0:	4b1a      	ldr	r3, [pc, #104]	; (801103c <USBD_LL_Init+0x94>)
 8010fd2:	2206      	movs	r2, #6
 8010fd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010fd6:	4b19      	ldr	r3, [pc, #100]	; (801103c <USBD_LL_Init+0x94>)
 8010fd8:	2202      	movs	r2, #2
 8010fda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010fdc:	4b17      	ldr	r3, [pc, #92]	; (801103c <USBD_LL_Init+0x94>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010fe2:	4b16      	ldr	r3, [pc, #88]	; (801103c <USBD_LL_Init+0x94>)
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010fe8:	4b14      	ldr	r3, [pc, #80]	; (801103c <USBD_LL_Init+0x94>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010fee:	4b13      	ldr	r3, [pc, #76]	; (801103c <USBD_LL_Init+0x94>)
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010ff4:	4b11      	ldr	r3, [pc, #68]	; (801103c <USBD_LL_Init+0x94>)
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010ffa:	4b10      	ldr	r3, [pc, #64]	; (801103c <USBD_LL_Init+0x94>)
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011000:	4b0e      	ldr	r3, [pc, #56]	; (801103c <USBD_LL_Init+0x94>)
 8011002:	2200      	movs	r2, #0
 8011004:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011006:	480d      	ldr	r0, [pc, #52]	; (801103c <USBD_LL_Init+0x94>)
 8011008:	f7f4 fd65 	bl	8005ad6 <HAL_PCD_Init>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d001      	beq.n	8011016 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011012:	f7f2 fa3e 	bl	8003492 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011016:	2180      	movs	r1, #128	; 0x80
 8011018:	4808      	ldr	r0, [pc, #32]	; (801103c <USBD_LL_Init+0x94>)
 801101a:	f7f5 ffe0 	bl	8006fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801101e:	2240      	movs	r2, #64	; 0x40
 8011020:	2100      	movs	r1, #0
 8011022:	4806      	ldr	r0, [pc, #24]	; (801103c <USBD_LL_Init+0x94>)
 8011024:	f7f5 ff94 	bl	8006f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011028:	2280      	movs	r2, #128	; 0x80
 801102a:	2101      	movs	r1, #1
 801102c:	4803      	ldr	r0, [pc, #12]	; (801103c <USBD_LL_Init+0x94>)
 801102e:	f7f5 ff8f 	bl	8006f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	20011db8 	.word	0x20011db8

08011040 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011056:	4618      	mov	r0, r3
 8011058:	f7f4 fe61 	bl	8005d1e <HAL_PCD_Start>
 801105c:	4603      	mov	r3, r0
 801105e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011060:	7bfb      	ldrb	r3, [r7, #15]
 8011062:	4618      	mov	r0, r3
 8011064:	f000 f97e 	bl	8011364 <USBD_Get_USB_Status>
 8011068:	4603      	mov	r3, r0
 801106a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801106c:	7bbb      	ldrb	r3, [r7, #14]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}

08011076 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011076:	b580      	push	{r7, lr}
 8011078:	b084      	sub	sp, #16
 801107a:	af00      	add	r7, sp, #0
 801107c:	6078      	str	r0, [r7, #4]
 801107e:	4608      	mov	r0, r1
 8011080:	4611      	mov	r1, r2
 8011082:	461a      	mov	r2, r3
 8011084:	4603      	mov	r3, r0
 8011086:	70fb      	strb	r3, [r7, #3]
 8011088:	460b      	mov	r3, r1
 801108a:	70bb      	strb	r3, [r7, #2]
 801108c:	4613      	mov	r3, r2
 801108e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011090:	2300      	movs	r3, #0
 8011092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801109e:	78bb      	ldrb	r3, [r7, #2]
 80110a0:	883a      	ldrh	r2, [r7, #0]
 80110a2:	78f9      	ldrb	r1, [r7, #3]
 80110a4:	f7f5 fb4e 	bl	8006744 <HAL_PCD_EP_Open>
 80110a8:	4603      	mov	r3, r0
 80110aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110ac:	7bfb      	ldrb	r3, [r7, #15]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 f958 	bl	8011364 <USBD_Get_USB_Status>
 80110b4:	4603      	mov	r3, r0
 80110b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b084      	sub	sp, #16
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	460b      	mov	r3, r1
 80110cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80110dc:	78fa      	ldrb	r2, [r7, #3]
 80110de:	4611      	mov	r1, r2
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7f5 fb97 	bl	8006814 <HAL_PCD_EP_Close>
 80110e6:	4603      	mov	r3, r0
 80110e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110ea:	7bfb      	ldrb	r3, [r7, #15]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f000 f939 	bl	8011364 <USBD_Get_USB_Status>
 80110f2:	4603      	mov	r3, r0
 80110f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	460b      	mov	r3, r1
 801110a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801110c:	2300      	movs	r3, #0
 801110e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011110:	2300      	movs	r3, #0
 8011112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801111a:	78fa      	ldrb	r2, [r7, #3]
 801111c:	4611      	mov	r1, r2
 801111e:	4618      	mov	r0, r3
 8011120:	f7f5 fc6f 	bl	8006a02 <HAL_PCD_EP_SetStall>
 8011124:	4603      	mov	r3, r0
 8011126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011128:	7bfb      	ldrb	r3, [r7, #15]
 801112a:	4618      	mov	r0, r3
 801112c:	f000 f91a 	bl	8011364 <USBD_Get_USB_Status>
 8011130:	4603      	mov	r3, r0
 8011132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011134:	7bbb      	ldrb	r3, [r7, #14]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b084      	sub	sp, #16
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	460b      	mov	r3, r1
 8011148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801114a:	2300      	movs	r3, #0
 801114c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801114e:	2300      	movs	r3, #0
 8011150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011158:	78fa      	ldrb	r2, [r7, #3]
 801115a:	4611      	mov	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f7f5 fcb4 	bl	8006aca <HAL_PCD_EP_ClrStall>
 8011162:	4603      	mov	r3, r0
 8011164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011166:	7bfb      	ldrb	r3, [r7, #15]
 8011168:	4618      	mov	r0, r3
 801116a:	f000 f8fb 	bl	8011364 <USBD_Get_USB_Status>
 801116e:	4603      	mov	r3, r0
 8011170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011172:	7bbb      	ldrb	r3, [r7, #14]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801118e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011194:	2b00      	cmp	r3, #0
 8011196:	da0b      	bge.n	80111b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011198:	78fb      	ldrb	r3, [r7, #3]
 801119a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801119e:	68f9      	ldr	r1, [r7, #12]
 80111a0:	4613      	mov	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	440b      	add	r3, r1
 80111aa:	333e      	adds	r3, #62	; 0x3e
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	e00b      	b.n	80111c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111b0:	78fb      	ldrb	r3, [r7, #3]
 80111b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111b6:	68f9      	ldr	r1, [r7, #12]
 80111b8:	4613      	mov	r3, r2
 80111ba:	00db      	lsls	r3, r3, #3
 80111bc:	4413      	add	r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	440b      	add	r3, r1
 80111c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80111c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	460b      	mov	r3, r1
 80111de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80111ee:	78fa      	ldrb	r2, [r7, #3]
 80111f0:	4611      	mov	r1, r2
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7f5 fa81 	bl	80066fa <HAL_PCD_SetAddress>
 80111f8:	4603      	mov	r3, r0
 80111fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111fc:	7bfb      	ldrb	r3, [r7, #15]
 80111fe:	4618      	mov	r0, r3
 8011200:	f000 f8b0 	bl	8011364 <USBD_Get_USB_Status>
 8011204:	4603      	mov	r3, r0
 8011206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011208:	7bbb      	ldrb	r3, [r7, #14]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b086      	sub	sp, #24
 8011216:	af00      	add	r7, sp, #0
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	607a      	str	r2, [r7, #4]
 801121c:	603b      	str	r3, [r7, #0]
 801121e:	460b      	mov	r3, r1
 8011220:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011230:	7af9      	ldrb	r1, [r7, #11]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	f7f5 fb9a 	bl	800696e <HAL_PCD_EP_Transmit>
 801123a:	4603      	mov	r3, r0
 801123c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801123e:	7dfb      	ldrb	r3, [r7, #23]
 8011240:	4618      	mov	r0, r3
 8011242:	f000 f88f 	bl	8011364 <USBD_Get_USB_Status>
 8011246:	4603      	mov	r3, r0
 8011248:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801124a:	7dbb      	ldrb	r3, [r7, #22]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3718      	adds	r7, #24
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	607a      	str	r2, [r7, #4]
 801125e:	603b      	str	r3, [r7, #0]
 8011260:	460b      	mov	r3, r1
 8011262:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011272:	7af9      	ldrb	r1, [r7, #11]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	f7f5 fb16 	bl	80068a8 <HAL_PCD_EP_Receive>
 801127c:	4603      	mov	r3, r0
 801127e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011280:	7dfb      	ldrb	r3, [r7, #23]
 8011282:	4618      	mov	r0, r3
 8011284:	f000 f86e 	bl	8011364 <USBD_Get_USB_Status>
 8011288:	4603      	mov	r3, r0
 801128a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801128c:	7dbb      	ldrb	r3, [r7, #22]
}
 801128e:	4618      	mov	r0, r3
 8011290:	3718      	adds	r7, #24
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b082      	sub	sp, #8
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	460b      	mov	r3, r1
 80112a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112a8:	78fa      	ldrb	r2, [r7, #3]
 80112aa:	4611      	mov	r1, r2
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7f5 fb46 	bl	800693e <HAL_PCD_EP_GetRxCount>
 80112b2:	4603      	mov	r3, r0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80112c8:	78fb      	ldrb	r3, [r7, #3]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <HAL_PCDEx_LPM_Callback+0x18>
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d01f      	beq.n	8011312 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80112d2:	e03b      	b.n	801134c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a1b      	ldr	r3, [r3, #32]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d007      	beq.n	80112ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80112dc:	f000 f83c 	bl	8011358 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80112e0:	4b1c      	ldr	r3, [pc, #112]	; (8011354 <HAL_PCDEx_LPM_Callback+0x98>)
 80112e2:	691b      	ldr	r3, [r3, #16]
 80112e4:	4a1b      	ldr	r2, [pc, #108]	; (8011354 <HAL_PCDEx_LPM_Callback+0x98>)
 80112e6:	f023 0306 	bic.w	r3, r3, #6
 80112ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	6812      	ldr	r2, [r2, #0]
 80112fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80112fe:	f023 0301 	bic.w	r3, r3, #1
 8011302:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801130a:	4618      	mov	r0, r3
 801130c:	f7fb fcc7 	bl	800cc9e <USBD_LL_Resume>
    break;
 8011310:	e01c      	b.n	801134c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	6812      	ldr	r2, [r2, #0]
 8011320:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011324:	f043 0301 	orr.w	r3, r3, #1
 8011328:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011330:	4618      	mov	r0, r3
 8011332:	f7fb fc9e 	bl	800cc72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a1b      	ldr	r3, [r3, #32]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d005      	beq.n	801134a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801133e:	4b05      	ldr	r3, [pc, #20]	; (8011354 <HAL_PCDEx_LPM_Callback+0x98>)
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	4a04      	ldr	r2, [pc, #16]	; (8011354 <HAL_PCDEx_LPM_Callback+0x98>)
 8011344:	f043 0306 	orr.w	r3, r3, #6
 8011348:	6113      	str	r3, [r2, #16]
    break;
 801134a:	bf00      	nop
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	e000ed00 	.word	0xe000ed00

08011358 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801135c:	f7f2 f81a 	bl	8003394 <SystemClock_Config>
}
 8011360:	bf00      	nop
 8011362:	bd80      	pop	{r7, pc}

08011364 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	4603      	mov	r3, r0
 801136c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801136e:	2300      	movs	r3, #0
 8011370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011372:	79fb      	ldrb	r3, [r7, #7]
 8011374:	2b03      	cmp	r3, #3
 8011376:	d817      	bhi.n	80113a8 <USBD_Get_USB_Status+0x44>
 8011378:	a201      	add	r2, pc, #4	; (adr r2, 8011380 <USBD_Get_USB_Status+0x1c>)
 801137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801137e:	bf00      	nop
 8011380:	08011391 	.word	0x08011391
 8011384:	08011397 	.word	0x08011397
 8011388:	0801139d 	.word	0x0801139d
 801138c:	080113a3 	.word	0x080113a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011390:	2300      	movs	r3, #0
 8011392:	73fb      	strb	r3, [r7, #15]
    break;
 8011394:	e00b      	b.n	80113ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011396:	2303      	movs	r3, #3
 8011398:	73fb      	strb	r3, [r7, #15]
    break;
 801139a:	e008      	b.n	80113ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801139c:	2301      	movs	r3, #1
 801139e:	73fb      	strb	r3, [r7, #15]
    break;
 80113a0:	e005      	b.n	80113ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80113a2:	2303      	movs	r3, #3
 80113a4:	73fb      	strb	r3, [r7, #15]
    break;
 80113a6:	e002      	b.n	80113ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80113a8:	2303      	movs	r3, #3
 80113aa:	73fb      	strb	r3, [r7, #15]
    break;
 80113ac:	bf00      	nop
  }
  return usb_status;
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3714      	adds	r7, #20
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80113bc:	4b04      	ldr	r3, [pc, #16]	; (80113d0 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	b10a      	cbz	r2, 80113c6 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 80113c2:	4803      	ldr	r0, [pc, #12]	; (80113d0 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80113c4:	4770      	bx	lr
 80113c6:	4a03      	ldr	r2, [pc, #12]	; (80113d4 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 80113c8:	4801      	ldr	r0, [pc, #4]	; (80113d0 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80113ca:	6812      	ldr	r2, [r2, #0]
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	4770      	bx	lr
 80113d0:	2000011c 	.word	0x2000011c
 80113d4:	200008b8 	.word	0x200008b8

080113d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80113d8:	4b04      	ldr	r3, [pc, #16]	; (80113ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80113da:	4805      	ldr	r0, [pc, #20]	; (80113f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	4905      	ldr	r1, [pc, #20]	; (80113f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 80113e0:	4a05      	ldr	r2, [pc, #20]	; (80113f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 80113e2:	6003      	str	r3, [r0, #0]
 80113e4:	600b      	str	r3, [r1, #0]
 80113e6:	6013      	str	r3, [r2, #0]
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	200008b8 	.word	0x200008b8
 80113f0:	20000138 	.word	0x20000138
 80113f4:	20000144 	.word	0x20000144
 80113f8:	2000011c 	.word	0x2000011c

080113fc <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 80113fc:	f006 b880 	b.w	8017500 <custom_test_msgs__srv__AddThreeInts_Request__init>

08011400 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8011400:	f006 b882 	b.w	8017508 <custom_test_msgs__srv__AddThreeInts_Request__fini>

08011404 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8011404:	f006 b882 	b.w	801750c <custom_test_msgs__srv__AddThreeInts_Response__init>

08011408 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8011408:	f006 b884 	b.w	8017514 <custom_test_msgs__srv__AddThreeInts_Response__fini>

0801140c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 801140c:	4b04      	ldr	r3, [pc, #16]	; (8011420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	b10a      	cbz	r2, 8011416 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8011412:	4803      	ldr	r0, [pc, #12]	; (8011420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8011414:	4770      	bx	lr
 8011416:	4a03      	ldr	r2, [pc, #12]	; (8011424 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8011418:	4801      	ldr	r0, [pc, #4]	; (8011420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801141a:	6812      	ldr	r2, [r2, #0]
 801141c:	601a      	str	r2, [r3, #0]
 801141e:	4770      	bx	lr
 8011420:	20000204 	.word	0x20000204
 8011424:	200008bc 	.word	0x200008bc

08011428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8011428:	4b04      	ldr	r3, [pc, #16]	; (801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	b10a      	cbz	r2, 8011432 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 801142e:	4803      	ldr	r0, [pc, #12]	; (801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011430:	4770      	bx	lr
 8011432:	4a03      	ldr	r2, [pc, #12]	; (8011440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8011434:	4801      	ldr	r0, [pc, #4]	; (801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011436:	6812      	ldr	r2, [r2, #0]
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	4770      	bx	lr
 801143c:	2000024c 	.word	0x2000024c
 8011440:	200008bc 	.word	0x200008bc

08011444 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011444:	4b13      	ldr	r3, [pc, #76]	; (8011494 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	b132      	cbz	r2, 8011458 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	689a      	ldr	r2, [r3, #8]
 801144e:	b152      	cbz	r2, 8011466 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8011450:	68da      	ldr	r2, [r3, #12]
 8011452:	b182      	cbz	r2, 8011476 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8011454:	480f      	ldr	r0, [pc, #60]	; (8011494 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011456:	4770      	bx	lr
 8011458:	4a0f      	ldr	r2, [pc, #60]	; (8011498 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801145a:	6812      	ldr	r2, [r2, #0]
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	689a      	ldr	r2, [r3, #8]
 8011462:	2a00      	cmp	r2, #0
 8011464:	d1f4      	bne.n	8011450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8011466:	4a0d      	ldr	r2, [pc, #52]	; (801149c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8011468:	6811      	ldr	r1, [r2, #0]
 801146a:	b179      	cbz	r1, 801148c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801146c:	6852      	ldr	r2, [r2, #4]
 801146e:	609a      	str	r2, [r3, #8]
 8011470:	68da      	ldr	r2, [r3, #12]
 8011472:	2a00      	cmp	r2, #0
 8011474:	d1ee      	bne.n	8011454 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8011476:	4a0a      	ldr	r2, [pc, #40]	; (80114a0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8011478:	6811      	ldr	r1, [r2, #0]
 801147a:	b119      	cbz	r1, 8011484 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 801147c:	6852      	ldr	r2, [r2, #4]
 801147e:	4805      	ldr	r0, [pc, #20]	; (8011494 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011480:	60da      	str	r2, [r3, #12]
 8011482:	4770      	bx	lr
 8011484:	4904      	ldr	r1, [pc, #16]	; (8011498 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8011486:	6809      	ldr	r1, [r1, #0]
 8011488:	6011      	str	r1, [r2, #0]
 801148a:	e7f7      	b.n	801147c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 801148c:	4902      	ldr	r1, [pc, #8]	; (8011498 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801148e:	6809      	ldr	r1, [r1, #0]
 8011490:	6011      	str	r1, [r2, #0]
 8011492:	e7eb      	b.n	801146c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8011494:	20000268 	.word	0x20000268
 8011498:	200008bc 	.word	0x200008bc
 801149c:	20000204 	.word	0x20000204
 80114a0:	2000024c 	.word	0x2000024c

080114a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80114a4:	4800      	ldr	r0, [pc, #0]	; (80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 80114a6:	4770      	bx	lr
 80114a8:	20000290 	.word	0x20000290

080114ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 80114ac:	4800      	ldr	r0, [pc, #0]	; (80114b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 80114ae:	4770      	bx	lr
 80114b0:	2000029c 	.word	0x2000029c

080114b4 <_AddThreeInts_Response__max_serialized_size>:
 80114b4:	2108      	movs	r1, #8
 80114b6:	2000      	movs	r0, #0
 80114b8:	b508      	push	{r3, lr}
 80114ba:	f001 fed5 	bl	8013268 <ucdr_alignment>
 80114be:	3008      	adds	r0, #8
 80114c0:	bd08      	pop	{r3, pc}
 80114c2:	bf00      	nop

080114c4 <_AddThreeInts_Response__cdr_deserialize>:
 80114c4:	b109      	cbz	r1, 80114ca <_AddThreeInts_Response__cdr_deserialize+0x6>
 80114c6:	f001 bc1b 	b.w	8012d00 <ucdr_deserialize_int64_t>
 80114ca:	4608      	mov	r0, r1
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop

080114d0 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 80114d0:	b1b8      	cbz	r0, 8011502 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 80114d2:	b538      	push	{r3, r4, r5, lr}
 80114d4:	460d      	mov	r5, r1
 80114d6:	2108      	movs	r1, #8
 80114d8:	4628      	mov	r0, r5
 80114da:	f001 fec5 	bl	8013268 <ucdr_alignment>
 80114de:	f105 0308 	add.w	r3, r5, #8
 80114e2:	2108      	movs	r1, #8
 80114e4:	f1c5 0508 	rsb	r5, r5, #8
 80114e8:	181c      	adds	r4, r3, r0
 80114ea:	4620      	mov	r0, r4
 80114ec:	f001 febc 	bl	8013268 <ucdr_alignment>
 80114f0:	2108      	movs	r1, #8
 80114f2:	4408      	add	r0, r1
 80114f4:	4404      	add	r4, r0
 80114f6:	4620      	mov	r0, r4
 80114f8:	f001 feb6 	bl	8013268 <ucdr_alignment>
 80114fc:	4428      	add	r0, r5
 80114fe:	4420      	add	r0, r4
 8011500:	bd38      	pop	{r3, r4, r5, pc}
 8011502:	4770      	bx	lr

08011504 <_AddThreeInts_Response__get_serialized_size>:
 8011504:	b130      	cbz	r0, 8011514 <_AddThreeInts_Response__get_serialized_size+0x10>
 8011506:	2108      	movs	r1, #8
 8011508:	2000      	movs	r0, #0
 801150a:	b508      	push	{r3, lr}
 801150c:	f001 feac 	bl	8013268 <ucdr_alignment>
 8011510:	3008      	adds	r0, #8
 8011512:	bd08      	pop	{r3, pc}
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop

08011518 <_AddThreeInts_Request__cdr_deserialize>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	460c      	mov	r4, r1
 801151c:	b171      	cbz	r1, 801153c <_AddThreeInts_Request__cdr_deserialize+0x24>
 801151e:	4605      	mov	r5, r0
 8011520:	f001 fbee 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011524:	f104 0108 	add.w	r1, r4, #8
 8011528:	4628      	mov	r0, r5
 801152a:	f001 fbe9 	bl	8012d00 <ucdr_deserialize_int64_t>
 801152e:	f104 0110 	add.w	r1, r4, #16
 8011532:	4628      	mov	r0, r5
 8011534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011538:	f001 bbe2 	b.w	8012d00 <ucdr_deserialize_int64_t>
 801153c:	4608      	mov	r0, r1
 801153e:	bd38      	pop	{r3, r4, r5, pc}

08011540 <_AddThreeInts_Request__cdr_serialize>:
 8011540:	b198      	cbz	r0, 801156a <_AddThreeInts_Request__cdr_serialize+0x2a>
 8011542:	b570      	push	{r4, r5, r6, lr}
 8011544:	460d      	mov	r5, r1
 8011546:	4604      	mov	r4, r0
 8011548:	e9d0 2300 	ldrd	r2, r3, [r0]
 801154c:	4608      	mov	r0, r1
 801154e:	f001 fb07 	bl	8012b60 <ucdr_serialize_int64_t>
 8011552:	4628      	mov	r0, r5
 8011554:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011558:	f001 fb02 	bl	8012b60 <ucdr_serialize_int64_t>
 801155c:	4628      	mov	r0, r5
 801155e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011566:	f001 bafb 	b.w	8012b60 <ucdr_serialize_int64_t>
 801156a:	4770      	bx	lr

0801156c <_AddThreeInts_Response__cdr_serialize>:
 801156c:	b120      	cbz	r0, 8011578 <_AddThreeInts_Response__cdr_serialize+0xc>
 801156e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011572:	4608      	mov	r0, r1
 8011574:	f001 baf4 	b.w	8012b60 <ucdr_serialize_int64_t>
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop

0801157c <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 801157c:	b138      	cbz	r0, 801158e <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 801157e:	b508      	push	{r3, lr}
 8011580:	460b      	mov	r3, r1
 8011582:	2108      	movs	r1, #8
 8011584:	4618      	mov	r0, r3
 8011586:	f001 fe6f 	bl	8013268 <ucdr_alignment>
 801158a:	3008      	adds	r0, #8
 801158c:	bd08      	pop	{r3, pc}
 801158e:	4770      	bx	lr

08011590 <_AddThreeInts_Request__get_serialized_size>:
 8011590:	b190      	cbz	r0, 80115b8 <_AddThreeInts_Request__get_serialized_size+0x28>
 8011592:	2108      	movs	r1, #8
 8011594:	2000      	movs	r0, #0
 8011596:	b510      	push	{r4, lr}
 8011598:	f001 fe66 	bl	8013268 <ucdr_alignment>
 801159c:	2108      	movs	r1, #8
 801159e:	1844      	adds	r4, r0, r1
 80115a0:	4620      	mov	r0, r4
 80115a2:	f001 fe61 	bl	8013268 <ucdr_alignment>
 80115a6:	2108      	movs	r1, #8
 80115a8:	4408      	add	r0, r1
 80115aa:	4404      	add	r4, r0
 80115ac:	4620      	mov	r0, r4
 80115ae:	f001 fe5b 	bl	8013268 <ucdr_alignment>
 80115b2:	3008      	adds	r0, #8
 80115b4:	4420      	add	r0, r4
 80115b6:	bd10      	pop	{r4, pc}
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop

080115bc <_AddThreeInts_Request__max_serialized_size>:
 80115bc:	b538      	push	{r3, r4, r5, lr}
 80115be:	2108      	movs	r1, #8
 80115c0:	2000      	movs	r0, #0
 80115c2:	f001 fe51 	bl	8013268 <ucdr_alignment>
 80115c6:	2108      	movs	r1, #8
 80115c8:	1845      	adds	r5, r0, r1
 80115ca:	4628      	mov	r0, r5
 80115cc:	f001 fe4c 	bl	8013268 <ucdr_alignment>
 80115d0:	2108      	movs	r1, #8
 80115d2:	1844      	adds	r4, r0, r1
 80115d4:	442c      	add	r4, r5
 80115d6:	4620      	mov	r0, r4
 80115d8:	f001 fe46 	bl	8013268 <ucdr_alignment>
 80115dc:	3008      	adds	r0, #8
 80115de:	4420      	add	r0, r4
 80115e0:	bd38      	pop	{r3, r4, r5, pc}
 80115e2:	bf00      	nop

080115e4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80115e4:	4800      	ldr	r0, [pc, #0]	; (80115e8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 80115e6:	4770      	bx	lr
 80115e8:	20000284 	.word	0x20000284

080115ec <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80115ec:	4b04      	ldr	r3, [pc, #16]	; (8011600 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	b10a      	cbz	r2, 80115f6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80115f2:	4803      	ldr	r0, [pc, #12]	; (8011600 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80115f4:	4770      	bx	lr
 80115f6:	4a03      	ldr	r2, [pc, #12]	; (8011604 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80115f8:	4801      	ldr	r0, [pc, #4]	; (8011600 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80115fa:	6812      	ldr	r2, [r2, #0]
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	4770      	bx	lr
 8011600:	200002e8 	.word	0x200002e8
 8011604:	200008b8 	.word	0x200008b8

08011608 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011608:	4a02      	ldr	r2, [pc, #8]	; (8011614 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 801160a:	4b03      	ldr	r3, [pc, #12]	; (8011618 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 801160c:	6812      	ldr	r2, [r2, #0]
 801160e:	601a      	str	r2, [r3, #0]
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	200008b8 	.word	0x200008b8
 8011618:	200002e8 	.word	0x200002e8

0801161c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	b10a      	cbz	r2, 8011626 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8011622:	4803      	ldr	r0, [pc, #12]	; (8011630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011624:	4770      	bx	lr
 8011626:	4a03      	ldr	r2, [pc, #12]	; (8011634 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011628:	4801      	ldr	r0, [pc, #4]	; (8011630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801162a:	6812      	ldr	r2, [r2, #0]
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	4770      	bx	lr
 8011630:	200002fc 	.word	0x200002fc
 8011634:	200008b8 	.word	0x200008b8

08011638 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011638:	4a02      	ldr	r2, [pc, #8]	; (8011644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 801163a:	4b03      	ldr	r3, [pc, #12]	; (8011648 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 801163c:	6812      	ldr	r2, [r2, #0]
 801163e:	601a      	str	r2, [r3, #0]
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	200008b8 	.word	0x200008b8
 8011648:	200002fc 	.word	0x200002fc

0801164c <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 801164c:	f005 bf64 	b.w	8017518 <drive_msgs__msg__Omni__init>

08011650 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8011650:	f005 bf74 	b.w	801753c <drive_msgs__msg__Omni__fini>

08011654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011654:	4b04      	ldr	r3, [pc, #16]	; (8011668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	b10a      	cbz	r2, 801165e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 801165a:	4803      	ldr	r0, [pc, #12]	; (8011668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801165c:	4770      	bx	lr
 801165e:	4a03      	ldr	r2, [pc, #12]	; (801166c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011660:	4801      	ldr	r0, [pc, #4]	; (8011668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011662:	6812      	ldr	r2, [r2, #0]
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	4770      	bx	lr
 8011668:	20000434 	.word	0x20000434
 801166c:	200008bc 	.word	0x200008bc

08011670 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 8011670:	f005 bf68 	b.w	8017544 <drive_msgs__msg__OmniEnc__init>

08011674 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 8011674:	f005 bf78 	b.w	8017568 <drive_msgs__msg__OmniEnc__fini>

08011678 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011678:	4b04      	ldr	r3, [pc, #16]	; (801168c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	b10a      	cbz	r2, 8011682 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 801167e:	4803      	ldr	r0, [pc, #12]	; (801168c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011680:	4770      	bx	lr
 8011682:	4a03      	ldr	r2, [pc, #12]	; (8011690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011684:	4801      	ldr	r0, [pc, #4]	; (801168c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011686:	6812      	ldr	r2, [r2, #0]
 8011688:	601a      	str	r2, [r3, #0]
 801168a:	4770      	bx	lr
 801168c:	20000620 	.word	0x20000620
 8011690:	200008bc 	.word	0x200008bc

08011694 <_Omni__cdr_serialize>:
 8011694:	b330      	cbz	r0, 80116e4 <_Omni__cdr_serialize+0x50>
 8011696:	b570      	push	{r4, r5, r6, lr}
 8011698:	6806      	ldr	r6, [r0, #0]
 801169a:	4604      	mov	r4, r0
 801169c:	460d      	mov	r5, r1
 801169e:	b1f6      	cbz	r6, 80116de <_Omni__cdr_serialize+0x4a>
 80116a0:	4630      	mov	r0, r6
 80116a2:	f7ee fe2d 	bl	8000300 <strlen>
 80116a6:	1c42      	adds	r2, r0, #1
 80116a8:	4631      	mov	r1, r6
 80116aa:	6060      	str	r0, [r4, #4]
 80116ac:	4628      	mov	r0, r5
 80116ae:	f001 fe4b 	bl	8013348 <ucdr_serialize_sequence_char>
 80116b2:	4628      	mov	r0, r5
 80116b4:	ed94 0b04 	vldr	d0, [r4, #16]
 80116b8:	f001 fbe8 	bl	8012e8c <ucdr_serialize_double>
 80116bc:	4628      	mov	r0, r5
 80116be:	ed94 0b06 	vldr	d0, [r4, #24]
 80116c2:	f001 fbe3 	bl	8012e8c <ucdr_serialize_double>
 80116c6:	4628      	mov	r0, r5
 80116c8:	ed94 0b08 	vldr	d0, [r4, #32]
 80116cc:	f001 fbde 	bl	8012e8c <ucdr_serialize_double>
 80116d0:	4628      	mov	r0, r5
 80116d2:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 80116d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116da:	f001 bbd7 	b.w	8012e8c <ucdr_serialize_double>
 80116de:	4632      	mov	r2, r6
 80116e0:	4630      	mov	r0, r6
 80116e2:	e7e1      	b.n	80116a8 <_Omni__cdr_serialize+0x14>
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop

080116e8 <get_serialized_size_drive_msgs__msg__Omni>:
 80116e8:	b570      	push	{r4, r5, r6, lr}
 80116ea:	4604      	mov	r4, r0
 80116ec:	b310      	cbz	r0, 8011734 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 80116ee:	460d      	mov	r5, r1
 80116f0:	2104      	movs	r1, #4
 80116f2:	4628      	mov	r0, r5
 80116f4:	f001 fdb8 	bl	8013268 <ucdr_alignment>
 80116f8:	6866      	ldr	r6, [r4, #4]
 80116fa:	1d6b      	adds	r3, r5, #5
 80116fc:	2108      	movs	r1, #8
 80116fe:	f1c5 0508 	rsb	r5, r5, #8
 8011702:	4433      	add	r3, r6
 8011704:	181e      	adds	r6, r3, r0
 8011706:	4630      	mov	r0, r6
 8011708:	f001 fdae 	bl	8013268 <ucdr_alignment>
 801170c:	2108      	movs	r1, #8
 801170e:	1844      	adds	r4, r0, r1
 8011710:	4426      	add	r6, r4
 8011712:	4630      	mov	r0, r6
 8011714:	f001 fda8 	bl	8013268 <ucdr_alignment>
 8011718:	2108      	movs	r1, #8
 801171a:	1844      	adds	r4, r0, r1
 801171c:	4434      	add	r4, r6
 801171e:	4620      	mov	r0, r4
 8011720:	f001 fda2 	bl	8013268 <ucdr_alignment>
 8011724:	2108      	movs	r1, #8
 8011726:	4408      	add	r0, r1
 8011728:	4404      	add	r4, r0
 801172a:	4620      	mov	r0, r4
 801172c:	f001 fd9c 	bl	8013268 <ucdr_alignment>
 8011730:	4428      	add	r0, r5
 8011732:	4420      	add	r0, r4
 8011734:	bd70      	pop	{r4, r5, r6, pc}
 8011736:	bf00      	nop

08011738 <_Omni__cdr_deserialize>:
 8011738:	b570      	push	{r4, r5, r6, lr}
 801173a:	460c      	mov	r4, r1
 801173c:	b082      	sub	sp, #8
 801173e:	b329      	cbz	r1, 801178c <_Omni__cdr_deserialize+0x54>
 8011740:	688e      	ldr	r6, [r1, #8]
 8011742:	ab01      	add	r3, sp, #4
 8011744:	6809      	ldr	r1, [r1, #0]
 8011746:	4605      	mov	r5, r0
 8011748:	4632      	mov	r2, r6
 801174a:	f001 fe0f 	bl	801336c <ucdr_deserialize_sequence_char>
 801174e:	9b01      	ldr	r3, [sp, #4]
 8011750:	b9c0      	cbnz	r0, 8011784 <_Omni__cdr_deserialize+0x4c>
 8011752:	429e      	cmp	r6, r3
 8011754:	d31d      	bcc.n	8011792 <_Omni__cdr_deserialize+0x5a>
 8011756:	f104 0110 	add.w	r1, r4, #16
 801175a:	4628      	mov	r0, r5
 801175c:	f001 fc66 	bl	801302c <ucdr_deserialize_double>
 8011760:	f104 0118 	add.w	r1, r4, #24
 8011764:	4628      	mov	r0, r5
 8011766:	f001 fc61 	bl	801302c <ucdr_deserialize_double>
 801176a:	f104 0120 	add.w	r1, r4, #32
 801176e:	4628      	mov	r0, r5
 8011770:	f001 fc5c 	bl	801302c <ucdr_deserialize_double>
 8011774:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011778:	4628      	mov	r0, r5
 801177a:	b002      	add	sp, #8
 801177c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011780:	f001 bc54 	b.w	801302c <ucdr_deserialize_double>
 8011784:	b103      	cbz	r3, 8011788 <_Omni__cdr_deserialize+0x50>
 8011786:	3b01      	subs	r3, #1
 8011788:	6063      	str	r3, [r4, #4]
 801178a:	e7e4      	b.n	8011756 <_Omni__cdr_deserialize+0x1e>
 801178c:	4608      	mov	r0, r1
 801178e:	b002      	add	sp, #8
 8011790:	bd70      	pop	{r4, r5, r6, pc}
 8011792:	2101      	movs	r1, #1
 8011794:	75a8      	strb	r0, [r5, #22]
 8011796:	7569      	strb	r1, [r5, #21]
 8011798:	6060      	str	r0, [r4, #4]
 801179a:	4628      	mov	r0, r5
 801179c:	f001 fd7c 	bl	8013298 <ucdr_align_to>
 80117a0:	9901      	ldr	r1, [sp, #4]
 80117a2:	4628      	mov	r0, r5
 80117a4:	f001 fdb0 	bl	8013308 <ucdr_advance_buffer>
 80117a8:	e7d5      	b.n	8011756 <_Omni__cdr_deserialize+0x1e>
 80117aa:	bf00      	nop

080117ac <_Omni__max_serialized_size>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	2108      	movs	r1, #8
 80117b0:	2000      	movs	r0, #0
 80117b2:	f001 fd59 	bl	8013268 <ucdr_alignment>
 80117b6:	2108      	movs	r1, #8
 80117b8:	1845      	adds	r5, r0, r1
 80117ba:	4628      	mov	r0, r5
 80117bc:	f001 fd54 	bl	8013268 <ucdr_alignment>
 80117c0:	2108      	movs	r1, #8
 80117c2:	1844      	adds	r4, r0, r1
 80117c4:	442c      	add	r4, r5
 80117c6:	4620      	mov	r0, r4
 80117c8:	f001 fd4e 	bl	8013268 <ucdr_alignment>
 80117cc:	2108      	movs	r1, #8
 80117ce:	4408      	add	r0, r1
 80117d0:	4404      	add	r4, r0
 80117d2:	4620      	mov	r0, r4
 80117d4:	f001 fd48 	bl	8013268 <ucdr_alignment>
 80117d8:	3008      	adds	r0, #8
 80117da:	4420      	add	r0, r4
 80117dc:	bd38      	pop	{r3, r4, r5, pc}
 80117de:	bf00      	nop

080117e0 <_Omni__get_serialized_size>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4604      	mov	r4, r0
 80117e4:	b1f0      	cbz	r0, 8011824 <_Omni__get_serialized_size+0x44>
 80117e6:	2104      	movs	r1, #4
 80117e8:	2000      	movs	r0, #0
 80117ea:	f001 fd3d 	bl	8013268 <ucdr_alignment>
 80117ee:	6863      	ldr	r3, [r4, #4]
 80117f0:	2108      	movs	r1, #8
 80117f2:	3305      	adds	r3, #5
 80117f4:	181d      	adds	r5, r3, r0
 80117f6:	4628      	mov	r0, r5
 80117f8:	f001 fd36 	bl	8013268 <ucdr_alignment>
 80117fc:	2108      	movs	r1, #8
 80117fe:	1844      	adds	r4, r0, r1
 8011800:	4425      	add	r5, r4
 8011802:	4628      	mov	r0, r5
 8011804:	f001 fd30 	bl	8013268 <ucdr_alignment>
 8011808:	2108      	movs	r1, #8
 801180a:	1844      	adds	r4, r0, r1
 801180c:	442c      	add	r4, r5
 801180e:	4620      	mov	r0, r4
 8011810:	f001 fd2a 	bl	8013268 <ucdr_alignment>
 8011814:	2108      	movs	r1, #8
 8011816:	4408      	add	r0, r1
 8011818:	4404      	add	r4, r0
 801181a:	4620      	mov	r0, r4
 801181c:	f001 fd24 	bl	8013268 <ucdr_alignment>
 8011820:	3008      	adds	r0, #8
 8011822:	4420      	add	r0, r4
 8011824:	bd38      	pop	{r3, r4, r5, pc}
 8011826:	bf00      	nop

08011828 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011828:	4800      	ldr	r0, [pc, #0]	; (801182c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 801182a:	4770      	bx	lr
 801182c:	2000062c 	.word	0x2000062c

08011830 <_OmniEnc__cdr_serialize>:
 8011830:	b3a8      	cbz	r0, 801189e <_OmniEnc__cdr_serialize+0x6e>
 8011832:	b570      	push	{r4, r5, r6, lr}
 8011834:	6806      	ldr	r6, [r0, #0]
 8011836:	4604      	mov	r4, r0
 8011838:	460d      	mov	r5, r1
 801183a:	b36e      	cbz	r6, 8011898 <_OmniEnc__cdr_serialize+0x68>
 801183c:	4630      	mov	r0, r6
 801183e:	f7ee fd5f 	bl	8000300 <strlen>
 8011842:	1c42      	adds	r2, r0, #1
 8011844:	4631      	mov	r1, r6
 8011846:	6060      	str	r0, [r4, #4]
 8011848:	4628      	mov	r0, r5
 801184a:	f001 fd7d 	bl	8013348 <ucdr_serialize_sequence_char>
 801184e:	4628      	mov	r0, r5
 8011850:	ed94 0b04 	vldr	d0, [r4, #16]
 8011854:	f001 fb1a 	bl	8012e8c <ucdr_serialize_double>
 8011858:	4628      	mov	r0, r5
 801185a:	ed94 0b06 	vldr	d0, [r4, #24]
 801185e:	f001 fb15 	bl	8012e8c <ucdr_serialize_double>
 8011862:	4628      	mov	r0, r5
 8011864:	ed94 0b08 	vldr	d0, [r4, #32]
 8011868:	f001 fb10 	bl	8012e8c <ucdr_serialize_double>
 801186c:	4628      	mov	r0, r5
 801186e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011872:	f001 fb0b 	bl	8012e8c <ucdr_serialize_double>
 8011876:	4628      	mov	r0, r5
 8011878:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 801187c:	f001 fb06 	bl	8012e8c <ucdr_serialize_double>
 8011880:	4628      	mov	r0, r5
 8011882:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8011886:	f001 fb01 	bl	8012e8c <ucdr_serialize_double>
 801188a:	4628      	mov	r0, r5
 801188c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8011890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011894:	f001 bafa 	b.w	8012e8c <ucdr_serialize_double>
 8011898:	4632      	mov	r2, r6
 801189a:	4630      	mov	r0, r6
 801189c:	e7d2      	b.n	8011844 <_OmniEnc__cdr_serialize+0x14>
 801189e:	4770      	bx	lr

080118a0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	460c      	mov	r4, r1
 80118a4:	4605      	mov	r5, r0
 80118a6:	2104      	movs	r1, #4
 80118a8:	4620      	mov	r0, r4
 80118aa:	f001 fcdd 	bl	8013268 <ucdr_alignment>
 80118ae:	686b      	ldr	r3, [r5, #4]
 80118b0:	2108      	movs	r1, #8
 80118b2:	4423      	add	r3, r4
 80118b4:	f1c4 0408 	rsb	r4, r4, #8
 80118b8:	3305      	adds	r3, #5
 80118ba:	18c6      	adds	r6, r0, r3
 80118bc:	4630      	mov	r0, r6
 80118be:	f001 fcd3 	bl	8013268 <ucdr_alignment>
 80118c2:	2108      	movs	r1, #8
 80118c4:	1845      	adds	r5, r0, r1
 80118c6:	442e      	add	r6, r5
 80118c8:	4630      	mov	r0, r6
 80118ca:	f001 fccd 	bl	8013268 <ucdr_alignment>
 80118ce:	2108      	movs	r1, #8
 80118d0:	1845      	adds	r5, r0, r1
 80118d2:	4435      	add	r5, r6
 80118d4:	4628      	mov	r0, r5
 80118d6:	f001 fcc7 	bl	8013268 <ucdr_alignment>
 80118da:	2108      	movs	r1, #8
 80118dc:	4408      	add	r0, r1
 80118de:	4405      	add	r5, r0
 80118e0:	4628      	mov	r0, r5
 80118e2:	f001 fcc1 	bl	8013268 <ucdr_alignment>
 80118e6:	2108      	movs	r1, #8
 80118e8:	4408      	add	r0, r1
 80118ea:	1946      	adds	r6, r0, r5
 80118ec:	4630      	mov	r0, r6
 80118ee:	f001 fcbb 	bl	8013268 <ucdr_alignment>
 80118f2:	2108      	movs	r1, #8
 80118f4:	1845      	adds	r5, r0, r1
 80118f6:	4435      	add	r5, r6
 80118f8:	4628      	mov	r0, r5
 80118fa:	f001 fcb5 	bl	8013268 <ucdr_alignment>
 80118fe:	2108      	movs	r1, #8
 8011900:	4408      	add	r0, r1
 8011902:	4405      	add	r5, r0
 8011904:	4628      	mov	r0, r5
 8011906:	f001 fcaf 	bl	8013268 <ucdr_alignment>
 801190a:	4420      	add	r0, r4
 801190c:	4428      	add	r0, r5
 801190e:	bd70      	pop	{r4, r5, r6, pc}

08011910 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8011910:	b108      	cbz	r0, 8011916 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8011912:	f7ff bfc5 	b.w	80118a0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011916:	4770      	bx	lr

08011918 <_OmniEnc__get_serialized_size>:
 8011918:	b110      	cbz	r0, 8011920 <_OmniEnc__get_serialized_size+0x8>
 801191a:	2100      	movs	r1, #0
 801191c:	f7ff bfc0 	b.w	80118a0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop

08011924 <_OmniEnc__cdr_deserialize>:
 8011924:	b570      	push	{r4, r5, r6, lr}
 8011926:	460c      	mov	r4, r1
 8011928:	b082      	sub	sp, #8
 801192a:	b3a1      	cbz	r1, 8011996 <_OmniEnc__cdr_deserialize+0x72>
 801192c:	688e      	ldr	r6, [r1, #8]
 801192e:	ab01      	add	r3, sp, #4
 8011930:	6809      	ldr	r1, [r1, #0]
 8011932:	4605      	mov	r5, r0
 8011934:	4632      	mov	r2, r6
 8011936:	f001 fd19 	bl	801336c <ucdr_deserialize_sequence_char>
 801193a:	9b01      	ldr	r3, [sp, #4]
 801193c:	bb38      	cbnz	r0, 801198e <_OmniEnc__cdr_deserialize+0x6a>
 801193e:	429e      	cmp	r6, r3
 8011940:	d32c      	bcc.n	801199c <_OmniEnc__cdr_deserialize+0x78>
 8011942:	f104 0110 	add.w	r1, r4, #16
 8011946:	4628      	mov	r0, r5
 8011948:	f001 fb70 	bl	801302c <ucdr_deserialize_double>
 801194c:	f104 0118 	add.w	r1, r4, #24
 8011950:	4628      	mov	r0, r5
 8011952:	f001 fb6b 	bl	801302c <ucdr_deserialize_double>
 8011956:	f104 0120 	add.w	r1, r4, #32
 801195a:	4628      	mov	r0, r5
 801195c:	f001 fb66 	bl	801302c <ucdr_deserialize_double>
 8011960:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011964:	4628      	mov	r0, r5
 8011966:	f001 fb61 	bl	801302c <ucdr_deserialize_double>
 801196a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801196e:	4628      	mov	r0, r5
 8011970:	f001 fb5c 	bl	801302c <ucdr_deserialize_double>
 8011974:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011978:	4628      	mov	r0, r5
 801197a:	f001 fb57 	bl	801302c <ucdr_deserialize_double>
 801197e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011982:	4628      	mov	r0, r5
 8011984:	b002      	add	sp, #8
 8011986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801198a:	f001 bb4f 	b.w	801302c <ucdr_deserialize_double>
 801198e:	b103      	cbz	r3, 8011992 <_OmniEnc__cdr_deserialize+0x6e>
 8011990:	3b01      	subs	r3, #1
 8011992:	6063      	str	r3, [r4, #4]
 8011994:	e7d5      	b.n	8011942 <_OmniEnc__cdr_deserialize+0x1e>
 8011996:	4608      	mov	r0, r1
 8011998:	b002      	add	sp, #8
 801199a:	bd70      	pop	{r4, r5, r6, pc}
 801199c:	2101      	movs	r1, #1
 801199e:	75a8      	strb	r0, [r5, #22]
 80119a0:	7569      	strb	r1, [r5, #21]
 80119a2:	6060      	str	r0, [r4, #4]
 80119a4:	4628      	mov	r0, r5
 80119a6:	f001 fc77 	bl	8013298 <ucdr_align_to>
 80119aa:	9901      	ldr	r1, [sp, #4]
 80119ac:	4628      	mov	r0, r5
 80119ae:	f001 fcab 	bl	8013308 <ucdr_advance_buffer>
 80119b2:	e7c6      	b.n	8011942 <_OmniEnc__cdr_deserialize+0x1e>

080119b4 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 80119b4:	b570      	push	{r4, r5, r6, lr}
 80119b6:	460c      	mov	r4, r1
 80119b8:	4603      	mov	r3, r0
 80119ba:	2200      	movs	r2, #0
 80119bc:	2108      	movs	r1, #8
 80119be:	f104 0508 	add.w	r5, r4, #8
 80119c2:	4620      	mov	r0, r4
 80119c4:	701a      	strb	r2, [r3, #0]
 80119c6:	f1c4 0408 	rsb	r4, r4, #8
 80119ca:	f001 fc4d 	bl	8013268 <ucdr_alignment>
 80119ce:	4405      	add	r5, r0
 80119d0:	2108      	movs	r1, #8
 80119d2:	4628      	mov	r0, r5
 80119d4:	f001 fc48 	bl	8013268 <ucdr_alignment>
 80119d8:	2108      	movs	r1, #8
 80119da:	1846      	adds	r6, r0, r1
 80119dc:	442e      	add	r6, r5
 80119de:	4630      	mov	r0, r6
 80119e0:	f001 fc42 	bl	8013268 <ucdr_alignment>
 80119e4:	2108      	movs	r1, #8
 80119e6:	1845      	adds	r5, r0, r1
 80119e8:	442e      	add	r6, r5
 80119ea:	4630      	mov	r0, r6
 80119ec:	f001 fc3c 	bl	8013268 <ucdr_alignment>
 80119f0:	2108      	movs	r1, #8
 80119f2:	4408      	add	r0, r1
 80119f4:	4406      	add	r6, r0
 80119f6:	4630      	mov	r0, r6
 80119f8:	f001 fc36 	bl	8013268 <ucdr_alignment>
 80119fc:	2108      	movs	r1, #8
 80119fe:	1845      	adds	r5, r0, r1
 8011a00:	4435      	add	r5, r6
 8011a02:	4628      	mov	r0, r5
 8011a04:	f001 fc30 	bl	8013268 <ucdr_alignment>
 8011a08:	2108      	movs	r1, #8
 8011a0a:	4408      	add	r0, r1
 8011a0c:	4405      	add	r5, r0
 8011a0e:	4628      	mov	r0, r5
 8011a10:	f001 fc2a 	bl	8013268 <ucdr_alignment>
 8011a14:	4420      	add	r0, r4
 8011a16:	4428      	add	r0, r5
 8011a18:	bd70      	pop	{r4, r5, r6, pc}
 8011a1a:	bf00      	nop

08011a1c <_OmniEnc__max_serialized_size>:
 8011a1c:	b500      	push	{lr}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	2100      	movs	r1, #0
 8011a22:	f10d 0007 	add.w	r0, sp, #7
 8011a26:	f7ff ffc5 	bl	80119b4 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8011a2a:	b003      	add	sp, #12
 8011a2c:	f85d fb04 	ldr.w	pc, [sp], #4

08011a30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011a30:	4800      	ldr	r0, [pc, #0]	; (8011a34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8011a32:	4770      	bx	lr
 8011a34:	20000654 	.word	0x20000654

08011a38 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011a38:	4b04      	ldr	r3, [pc, #16]	; (8011a4c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	b10a      	cbz	r2, 8011a42 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011a3e:	4803      	ldr	r0, [pc, #12]	; (8011a4c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a40:	4770      	bx	lr
 8011a42:	4a03      	ldr	r2, [pc, #12]	; (8011a50 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011a44:	4801      	ldr	r0, [pc, #4]	; (8011a4c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a46:	6812      	ldr	r2, [r2, #0]
 8011a48:	601a      	str	r2, [r3, #0]
 8011a4a:	4770      	bx	lr
 8011a4c:	20000684 	.word	0x20000684
 8011a50:	200008b8 	.word	0x200008b8

08011a54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011a54:	4a02      	ldr	r2, [pc, #8]	; (8011a60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8011a56:	4b03      	ldr	r3, [pc, #12]	; (8011a64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8011a58:	6812      	ldr	r2, [r2, #0]
 8011a5a:	601a      	str	r2, [r3, #0]
 8011a5c:	4770      	bx	lr
 8011a5e:	bf00      	nop
 8011a60:	200008b8 	.word	0x200008b8
 8011a64:	20000684 	.word	0x20000684

08011a68 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8011a68:	f005 bd82 	b.w	8017570 <manip_msgs__msg__Cmd__init>

08011a6c <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 8011a6c:	f005 bd84 	b.w	8017578 <manip_msgs__msg__Cmd__fini>

08011a70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011a70:	4b04      	ldr	r3, [pc, #16]	; (8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	b10a      	cbz	r2, 8011a7a <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011a76:	4803      	ldr	r0, [pc, #12]	; (8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a78:	4770      	bx	lr
 8011a7a:	4a03      	ldr	r2, [pc, #12]	; (8011a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011a7c:	4801      	ldr	r0, [pc, #4]	; (8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a7e:	6812      	ldr	r2, [r2, #0]
 8011a80:	601a      	str	r2, [r3, #0]
 8011a82:	4770      	bx	lr
 8011a84:	20000870 	.word	0x20000870
 8011a88:	200008bc 	.word	0x200008bc

08011a8c <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 8011a8c:	b570      	push	{r4, r5, r6, lr}
 8011a8e:	2108      	movs	r1, #8
 8011a90:	4604      	mov	r4, r0
 8011a92:	f001 fbe9 	bl	8013268 <ucdr_alignment>
 8011a96:	2108      	movs	r1, #8
 8011a98:	1866      	adds	r6, r4, r1
 8011a9a:	f1c4 0408 	rsb	r4, r4, #8
 8011a9e:	4406      	add	r6, r0
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f001 fbe1 	bl	8013268 <ucdr_alignment>
 8011aa6:	2108      	movs	r1, #8
 8011aa8:	1845      	adds	r5, r0, r1
 8011aaa:	442e      	add	r6, r5
 8011aac:	4630      	mov	r0, r6
 8011aae:	f001 fbdb 	bl	8013268 <ucdr_alignment>
 8011ab2:	2108      	movs	r1, #8
 8011ab4:	1845      	adds	r5, r0, r1
 8011ab6:	4435      	add	r5, r6
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f001 fbd5 	bl	8013268 <ucdr_alignment>
 8011abe:	2108      	movs	r1, #8
 8011ac0:	4408      	add	r0, r1
 8011ac2:	4405      	add	r5, r0
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f001 fbcf 	bl	8013268 <ucdr_alignment>
 8011aca:	2108      	movs	r1, #8
 8011acc:	4408      	add	r0, r1
 8011ace:	1946      	adds	r6, r0, r5
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f001 fbc9 	bl	8013268 <ucdr_alignment>
 8011ad6:	2108      	movs	r1, #8
 8011ad8:	1845      	adds	r5, r0, r1
 8011ada:	4435      	add	r5, r6
 8011adc:	4628      	mov	r0, r5
 8011ade:	f001 fbc3 	bl	8013268 <ucdr_alignment>
 8011ae2:	2108      	movs	r1, #8
 8011ae4:	4408      	add	r0, r1
 8011ae6:	4405      	add	r5, r0
 8011ae8:	4628      	mov	r0, r5
 8011aea:	f001 fbbd 	bl	8013268 <ucdr_alignment>
 8011aee:	4420      	add	r0, r4
 8011af0:	4428      	add	r0, r5
 8011af2:	bd70      	pop	{r4, r5, r6, pc}

08011af4 <get_serialized_size_manip_msgs__msg__Cmd>:
 8011af4:	b110      	cbz	r0, 8011afc <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8011af6:	4608      	mov	r0, r1
 8011af8:	f7ff bfc8 	b.w	8011a8c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop

08011b00 <_Cmd__get_serialized_size>:
 8011b00:	b110      	cbz	r0, 8011b08 <_Cmd__get_serialized_size+0x8>
 8011b02:	2000      	movs	r0, #0
 8011b04:	f7ff bfc2 	b.w	8011a8c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011b08:	4770      	bx	lr
 8011b0a:	bf00      	nop

08011b0c <_Cmd__cdr_deserialize>:
 8011b0c:	b538      	push	{r3, r4, r5, lr}
 8011b0e:	460c      	mov	r4, r1
 8011b10:	b339      	cbz	r1, 8011b62 <_Cmd__cdr_deserialize+0x56>
 8011b12:	4605      	mov	r5, r0
 8011b14:	f001 f8f4 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b18:	f104 0108 	add.w	r1, r4, #8
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f001 f8ef 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b22:	f104 0110 	add.w	r1, r4, #16
 8011b26:	4628      	mov	r0, r5
 8011b28:	f001 f8ea 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b2c:	f104 0118 	add.w	r1, r4, #24
 8011b30:	4628      	mov	r0, r5
 8011b32:	f001 f8e5 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b36:	f104 0120 	add.w	r1, r4, #32
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f001 f8e0 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b40:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011b44:	4628      	mov	r0, r5
 8011b46:	f001 f8db 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b4a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f001 f8d6 	bl	8012d00 <ucdr_deserialize_int64_t>
 8011b54:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011b58:	4628      	mov	r0, r5
 8011b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b5e:	f001 b8cf 	b.w	8012d00 <ucdr_deserialize_int64_t>
 8011b62:	4608      	mov	r0, r1
 8011b64:	bd38      	pop	{r3, r4, r5, pc}
 8011b66:	bf00      	nop

08011b68 <_Cmd__cdr_serialize>:
 8011b68:	b360      	cbz	r0, 8011bc4 <_Cmd__cdr_serialize+0x5c>
 8011b6a:	b570      	push	{r4, r5, r6, lr}
 8011b6c:	460d      	mov	r5, r1
 8011b6e:	4604      	mov	r4, r0
 8011b70:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011b74:	4608      	mov	r0, r1
 8011b76:	f000 fff3 	bl	8012b60 <ucdr_serialize_int64_t>
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011b80:	f000 ffee 	bl	8012b60 <ucdr_serialize_int64_t>
 8011b84:	4628      	mov	r0, r5
 8011b86:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011b8a:	f000 ffe9 	bl	8012b60 <ucdr_serialize_int64_t>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011b94:	f000 ffe4 	bl	8012b60 <ucdr_serialize_int64_t>
 8011b98:	4628      	mov	r0, r5
 8011b9a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011b9e:	f000 ffdf 	bl	8012b60 <ucdr_serialize_int64_t>
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8011ba8:	f000 ffda 	bl	8012b60 <ucdr_serialize_int64_t>
 8011bac:	4628      	mov	r0, r5
 8011bae:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011bb2:	f000 ffd5 	bl	8012b60 <ucdr_serialize_int64_t>
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bc0:	f000 bfce 	b.w	8012b60 <ucdr_serialize_int64_t>
 8011bc4:	4770      	bx	lr
 8011bc6:	bf00      	nop

08011bc8 <max_serialized_size_manip_msgs__msg__Cmd>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	460c      	mov	r4, r1
 8011bcc:	2301      	movs	r3, #1
 8011bce:	2108      	movs	r1, #8
 8011bd0:	f104 0608 	add.w	r6, r4, #8
 8011bd4:	7003      	strb	r3, [r0, #0]
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f1c4 0408 	rsb	r4, r4, #8
 8011bdc:	f001 fb44 	bl	8013268 <ucdr_alignment>
 8011be0:	4406      	add	r6, r0
 8011be2:	2108      	movs	r1, #8
 8011be4:	4630      	mov	r0, r6
 8011be6:	f001 fb3f 	bl	8013268 <ucdr_alignment>
 8011bea:	2108      	movs	r1, #8
 8011bec:	1845      	adds	r5, r0, r1
 8011bee:	442e      	add	r6, r5
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f001 fb39 	bl	8013268 <ucdr_alignment>
 8011bf6:	2108      	movs	r1, #8
 8011bf8:	1845      	adds	r5, r0, r1
 8011bfa:	4435      	add	r5, r6
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	f001 fb33 	bl	8013268 <ucdr_alignment>
 8011c02:	2108      	movs	r1, #8
 8011c04:	4408      	add	r0, r1
 8011c06:	4405      	add	r5, r0
 8011c08:	4628      	mov	r0, r5
 8011c0a:	f001 fb2d 	bl	8013268 <ucdr_alignment>
 8011c0e:	2108      	movs	r1, #8
 8011c10:	4408      	add	r0, r1
 8011c12:	1946      	adds	r6, r0, r5
 8011c14:	4630      	mov	r0, r6
 8011c16:	f001 fb27 	bl	8013268 <ucdr_alignment>
 8011c1a:	2108      	movs	r1, #8
 8011c1c:	1845      	adds	r5, r0, r1
 8011c1e:	4435      	add	r5, r6
 8011c20:	4628      	mov	r0, r5
 8011c22:	f001 fb21 	bl	8013268 <ucdr_alignment>
 8011c26:	2108      	movs	r1, #8
 8011c28:	4408      	add	r0, r1
 8011c2a:	4405      	add	r5, r0
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	f001 fb1b 	bl	8013268 <ucdr_alignment>
 8011c32:	4420      	add	r0, r4
 8011c34:	4428      	add	r0, r5
 8011c36:	bd70      	pop	{r4, r5, r6, pc}

08011c38 <_Cmd__max_serialized_size>:
 8011c38:	b500      	push	{lr}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	2100      	movs	r1, #0
 8011c3e:	f10d 0007 	add.w	r0, sp, #7
 8011c42:	f7ff ffc1 	bl	8011bc8 <max_serialized_size_manip_msgs__msg__Cmd>
 8011c46:	b003      	add	sp, #12
 8011c48:	f85d fb04 	ldr.w	pc, [sp], #4

08011c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011c4c:	4800      	ldr	r0, [pc, #0]	; (8011c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8011c4e:	4770      	bx	lr
 8011c50:	2000087c 	.word	0x2000087c

08011c54 <ucdr_serialize_bool>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	460d      	mov	r5, r1
 8011c58:	2101      	movs	r1, #1
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	f001 fab8 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011c60:	b148      	cbz	r0, 8011c76 <ucdr_serialize_bool+0x22>
 8011c62:	68a3      	ldr	r3, [r4, #8]
 8011c64:	2101      	movs	r1, #1
 8011c66:	701d      	strb	r5, [r3, #0]
 8011c68:	68a2      	ldr	r2, [r4, #8]
 8011c6a:	6923      	ldr	r3, [r4, #16]
 8011c6c:	440a      	add	r2, r1
 8011c6e:	7561      	strb	r1, [r4, #21]
 8011c70:	440b      	add	r3, r1
 8011c72:	60a2      	str	r2, [r4, #8]
 8011c74:	6123      	str	r3, [r4, #16]
 8011c76:	7da0      	ldrb	r0, [r4, #22]
 8011c78:	f080 0001 	eor.w	r0, r0, #1
 8011c7c:	bd38      	pop	{r3, r4, r5, pc}
 8011c7e:	bf00      	nop

08011c80 <ucdr_deserialize_bool>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	460d      	mov	r5, r1
 8011c84:	2101      	movs	r1, #1
 8011c86:	4604      	mov	r4, r0
 8011c88:	f001 faa2 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011c8c:	b160      	cbz	r0, 8011ca8 <ucdr_deserialize_bool+0x28>
 8011c8e:	68a2      	ldr	r2, [r4, #8]
 8011c90:	2101      	movs	r1, #1
 8011c92:	6923      	ldr	r3, [r4, #16]
 8011c94:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011c98:	440b      	add	r3, r1
 8011c9a:	3800      	subs	r0, #0
 8011c9c:	bf18      	it	ne
 8011c9e:	2001      	movne	r0, #1
 8011ca0:	7028      	strb	r0, [r5, #0]
 8011ca2:	60a2      	str	r2, [r4, #8]
 8011ca4:	6123      	str	r3, [r4, #16]
 8011ca6:	7561      	strb	r1, [r4, #21]
 8011ca8:	7da0      	ldrb	r0, [r4, #22]
 8011caa:	f080 0001 	eor.w	r0, r0, #1
 8011cae:	bd38      	pop	{r3, r4, r5, pc}

08011cb0 <ucdr_serialize_uint8_t>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	460d      	mov	r5, r1
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	f001 fa8a 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011cbc:	b148      	cbz	r0, 8011cd2 <ucdr_serialize_uint8_t+0x22>
 8011cbe:	68a3      	ldr	r3, [r4, #8]
 8011cc0:	2101      	movs	r1, #1
 8011cc2:	701d      	strb	r5, [r3, #0]
 8011cc4:	68a2      	ldr	r2, [r4, #8]
 8011cc6:	6923      	ldr	r3, [r4, #16]
 8011cc8:	440a      	add	r2, r1
 8011cca:	7561      	strb	r1, [r4, #21]
 8011ccc:	440b      	add	r3, r1
 8011cce:	60a2      	str	r2, [r4, #8]
 8011cd0:	6123      	str	r3, [r4, #16]
 8011cd2:	7da0      	ldrb	r0, [r4, #22]
 8011cd4:	f080 0001 	eor.w	r0, r0, #1
 8011cd8:	bd38      	pop	{r3, r4, r5, pc}
 8011cda:	bf00      	nop

08011cdc <ucdr_deserialize_uint8_t>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	460d      	mov	r5, r1
 8011ce0:	2101      	movs	r1, #1
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	f001 fa74 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011ce8:	b150      	cbz	r0, 8011d00 <ucdr_deserialize_uint8_t+0x24>
 8011cea:	68a3      	ldr	r3, [r4, #8]
 8011cec:	2101      	movs	r1, #1
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	702b      	strb	r3, [r5, #0]
 8011cf2:	68a2      	ldr	r2, [r4, #8]
 8011cf4:	6923      	ldr	r3, [r4, #16]
 8011cf6:	440a      	add	r2, r1
 8011cf8:	7561      	strb	r1, [r4, #21]
 8011cfa:	440b      	add	r3, r1
 8011cfc:	60a2      	str	r2, [r4, #8]
 8011cfe:	6123      	str	r3, [r4, #16]
 8011d00:	7da0      	ldrb	r0, [r4, #22]
 8011d02:	f080 0001 	eor.w	r0, r0, #1
 8011d06:	bd38      	pop	{r3, r4, r5, pc}

08011d08 <ucdr_serialize_uint16_t>:
 8011d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	b082      	sub	sp, #8
 8011d10:	4604      	mov	r4, r0
 8011d12:	2102      	movs	r1, #2
 8011d14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011d18:	f001 faae 	bl	8013278 <ucdr_buffer_alignment>
 8011d1c:	4601      	mov	r1, r0
 8011d1e:	4620      	mov	r0, r4
 8011d20:	7d67      	ldrb	r7, [r4, #21]
 8011d22:	f001 faf1 	bl	8013308 <ucdr_advance_buffer>
 8011d26:	2102      	movs	r1, #2
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f001 fa45 	bl	80131b8 <ucdr_check_buffer_available_for>
 8011d2e:	bb78      	cbnz	r0, 8011d90 <ucdr_serialize_uint16_t+0x88>
 8011d30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d34:	42ab      	cmp	r3, r5
 8011d36:	d926      	bls.n	8011d86 <ucdr_serialize_uint16_t+0x7e>
 8011d38:	1b5e      	subs	r6, r3, r5
 8011d3a:	60a3      	str	r3, [r4, #8]
 8011d3c:	6923      	ldr	r3, [r4, #16]
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f1c6 0802 	rsb	r8, r6, #2
 8011d44:	4433      	add	r3, r6
 8011d46:	4641      	mov	r1, r8
 8011d48:	6123      	str	r3, [r4, #16]
 8011d4a:	f001 fa41 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	d03b      	beq.n	8011dca <ucdr_serialize_uint16_t+0xc2>
 8011d52:	7d23      	ldrb	r3, [r4, #20]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d04a      	beq.n	8011dee <ucdr_serialize_uint16_t+0xe6>
 8011d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d5c:	702b      	strb	r3, [r5, #0]
 8011d5e:	2e00      	cmp	r6, #0
 8011d60:	d040      	beq.n	8011de4 <ucdr_serialize_uint16_t+0xdc>
 8011d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d66:	706b      	strb	r3, [r5, #1]
 8011d68:	6923      	ldr	r3, [r4, #16]
 8011d6a:	2102      	movs	r1, #2
 8011d6c:	68a2      	ldr	r2, [r4, #8]
 8011d6e:	3302      	adds	r3, #2
 8011d70:	7da0      	ldrb	r0, [r4, #22]
 8011d72:	4442      	add	r2, r8
 8011d74:	7561      	strb	r1, [r4, #21]
 8011d76:	1b9e      	subs	r6, r3, r6
 8011d78:	f080 0001 	eor.w	r0, r0, #1
 8011d7c:	60a2      	str	r2, [r4, #8]
 8011d7e:	6126      	str	r6, [r4, #16]
 8011d80:	b002      	add	sp, #8
 8011d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d86:	2102      	movs	r1, #2
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f001 fa21 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011d8e:	b190      	cbz	r0, 8011db6 <ucdr_serialize_uint16_t+0xae>
 8011d90:	7d23      	ldrb	r3, [r4, #20]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	68a3      	ldr	r3, [r4, #8]
 8011d96:	d014      	beq.n	8011dc2 <ucdr_serialize_uint16_t+0xba>
 8011d98:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011d9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011da0:	7019      	strb	r1, [r3, #0]
 8011da2:	68a3      	ldr	r3, [r4, #8]
 8011da4:	705a      	strb	r2, [r3, #1]
 8011da6:	2102      	movs	r1, #2
 8011da8:	68a2      	ldr	r2, [r4, #8]
 8011daa:	6923      	ldr	r3, [r4, #16]
 8011dac:	440a      	add	r2, r1
 8011dae:	7561      	strb	r1, [r4, #21]
 8011db0:	440b      	add	r3, r1
 8011db2:	60a2      	str	r2, [r4, #8]
 8011db4:	6123      	str	r3, [r4, #16]
 8011db6:	7da0      	ldrb	r0, [r4, #22]
 8011db8:	f080 0001 	eor.w	r0, r0, #1
 8011dbc:	b002      	add	sp, #8
 8011dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011dc6:	801a      	strh	r2, [r3, #0]
 8011dc8:	e7ed      	b.n	8011da6 <ucdr_serialize_uint16_t+0x9e>
 8011dca:	68a2      	ldr	r2, [r4, #8]
 8011dcc:	6923      	ldr	r3, [r4, #16]
 8011dce:	7da0      	ldrb	r0, [r4, #22]
 8011dd0:	1b92      	subs	r2, r2, r6
 8011dd2:	1b9b      	subs	r3, r3, r6
 8011dd4:	7567      	strb	r7, [r4, #21]
 8011dd6:	f080 0001 	eor.w	r0, r0, #1
 8011dda:	60a2      	str	r2, [r4, #8]
 8011ddc:	6123      	str	r3, [r4, #16]
 8011dde:	b002      	add	sp, #8
 8011de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de4:	68a3      	ldr	r3, [r4, #8]
 8011de6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011dea:	701a      	strb	r2, [r3, #0]
 8011dec:	e7bc      	b.n	8011d68 <ucdr_serialize_uint16_t+0x60>
 8011dee:	4628      	mov	r0, r5
 8011df0:	f10d 0506 	add.w	r5, sp, #6
 8011df4:	4632      	mov	r2, r6
 8011df6:	4629      	mov	r1, r5
 8011df8:	f00f f869 	bl	8020ece <memcpy>
 8011dfc:	4642      	mov	r2, r8
 8011dfe:	19a9      	adds	r1, r5, r6
 8011e00:	68a0      	ldr	r0, [r4, #8]
 8011e02:	f00f f864 	bl	8020ece <memcpy>
 8011e06:	e7af      	b.n	8011d68 <ucdr_serialize_uint16_t+0x60>

08011e08 <ucdr_serialize_endian_uint16_t>:
 8011e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	b083      	sub	sp, #12
 8011e10:	460d      	mov	r5, r1
 8011e12:	2102      	movs	r1, #2
 8011e14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011e18:	f001 fa2e 	bl	8013278 <ucdr_buffer_alignment>
 8011e1c:	4601      	mov	r1, r0
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e24:	f001 fa70 	bl	8013308 <ucdr_advance_buffer>
 8011e28:	2102      	movs	r1, #2
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	f001 f9c4 	bl	80131b8 <ucdr_check_buffer_available_for>
 8011e30:	bb70      	cbnz	r0, 8011e90 <ucdr_serialize_endian_uint16_t+0x88>
 8011e32:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011e36:	42be      	cmp	r6, r7
 8011e38:	d925      	bls.n	8011e86 <ucdr_serialize_endian_uint16_t+0x7e>
 8011e3a:	6923      	ldr	r3, [r4, #16]
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	60a6      	str	r6, [r4, #8]
 8011e40:	1bf6      	subs	r6, r6, r7
 8011e42:	4433      	add	r3, r6
 8011e44:	f1c6 0902 	rsb	r9, r6, #2
 8011e48:	6123      	str	r3, [r4, #16]
 8011e4a:	4649      	mov	r1, r9
 8011e4c:	f001 f9c0 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d039      	beq.n	8011ec8 <ucdr_serialize_endian_uint16_t+0xc0>
 8011e54:	2d01      	cmp	r5, #1
 8011e56:	d04a      	beq.n	8011eee <ucdr_serialize_endian_uint16_t+0xe6>
 8011e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e5c:	703b      	strb	r3, [r7, #0]
 8011e5e:	2e00      	cmp	r6, #0
 8011e60:	d040      	beq.n	8011ee4 <ucdr_serialize_endian_uint16_t+0xdc>
 8011e62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011e66:	707b      	strb	r3, [r7, #1]
 8011e68:	6923      	ldr	r3, [r4, #16]
 8011e6a:	2102      	movs	r1, #2
 8011e6c:	68a2      	ldr	r2, [r4, #8]
 8011e6e:	7da0      	ldrb	r0, [r4, #22]
 8011e70:	3302      	adds	r3, #2
 8011e72:	444a      	add	r2, r9
 8011e74:	7561      	strb	r1, [r4, #21]
 8011e76:	1b9b      	subs	r3, r3, r6
 8011e78:	f080 0001 	eor.w	r0, r0, #1
 8011e7c:	60a2      	str	r2, [r4, #8]
 8011e7e:	6123      	str	r3, [r4, #16]
 8011e80:	b003      	add	sp, #12
 8011e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e86:	2102      	movs	r1, #2
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f001 f9a1 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011e8e:	b188      	cbz	r0, 8011eb4 <ucdr_serialize_endian_uint16_t+0xac>
 8011e90:	2d01      	cmp	r5, #1
 8011e92:	68a3      	ldr	r3, [r4, #8]
 8011e94:	d014      	beq.n	8011ec0 <ucdr_serialize_endian_uint16_t+0xb8>
 8011e96:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011e9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e9e:	7019      	strb	r1, [r3, #0]
 8011ea0:	68a3      	ldr	r3, [r4, #8]
 8011ea2:	705a      	strb	r2, [r3, #1]
 8011ea4:	2102      	movs	r1, #2
 8011ea6:	68a2      	ldr	r2, [r4, #8]
 8011ea8:	6923      	ldr	r3, [r4, #16]
 8011eaa:	440a      	add	r2, r1
 8011eac:	7561      	strb	r1, [r4, #21]
 8011eae:	440b      	add	r3, r1
 8011eb0:	60a2      	str	r2, [r4, #8]
 8011eb2:	6123      	str	r3, [r4, #16]
 8011eb4:	7da0      	ldrb	r0, [r4, #22]
 8011eb6:	f080 0001 	eor.w	r0, r0, #1
 8011eba:	b003      	add	sp, #12
 8011ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ec0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011ec4:	801a      	strh	r2, [r3, #0]
 8011ec6:	e7ed      	b.n	8011ea4 <ucdr_serialize_endian_uint16_t+0x9c>
 8011ec8:	68a2      	ldr	r2, [r4, #8]
 8011eca:	6923      	ldr	r3, [r4, #16]
 8011ecc:	7da0      	ldrb	r0, [r4, #22]
 8011ece:	1b92      	subs	r2, r2, r6
 8011ed0:	1b9b      	subs	r3, r3, r6
 8011ed2:	f884 8015 	strb.w	r8, [r4, #21]
 8011ed6:	f080 0001 	eor.w	r0, r0, #1
 8011eda:	60a2      	str	r2, [r4, #8]
 8011edc:	6123      	str	r3, [r4, #16]
 8011ede:	b003      	add	sp, #12
 8011ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee4:	68a3      	ldr	r3, [r4, #8]
 8011ee6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011eea:	701a      	strb	r2, [r3, #0]
 8011eec:	e7bc      	b.n	8011e68 <ucdr_serialize_endian_uint16_t+0x60>
 8011eee:	f10d 0506 	add.w	r5, sp, #6
 8011ef2:	4632      	mov	r2, r6
 8011ef4:	4638      	mov	r0, r7
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f00e ffe9 	bl	8020ece <memcpy>
 8011efc:	464a      	mov	r2, r9
 8011efe:	19a9      	adds	r1, r5, r6
 8011f00:	68a0      	ldr	r0, [r4, #8]
 8011f02:	f00e ffe4 	bl	8020ece <memcpy>
 8011f06:	e7af      	b.n	8011e68 <ucdr_serialize_endian_uint16_t+0x60>

08011f08 <ucdr_deserialize_uint16_t>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	4604      	mov	r4, r0
 8011f0e:	460d      	mov	r5, r1
 8011f10:	2102      	movs	r1, #2
 8011f12:	f001 f9b1 	bl	8013278 <ucdr_buffer_alignment>
 8011f16:	4601      	mov	r1, r0
 8011f18:	4620      	mov	r0, r4
 8011f1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011f1e:	f001 f9f3 	bl	8013308 <ucdr_advance_buffer>
 8011f22:	2102      	movs	r1, #2
 8011f24:	4620      	mov	r0, r4
 8011f26:	f001 f947 	bl	80131b8 <ucdr_check_buffer_available_for>
 8011f2a:	bb60      	cbnz	r0, 8011f86 <ucdr_deserialize_uint16_t+0x7e>
 8011f2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011f30:	42be      	cmp	r6, r7
 8011f32:	d923      	bls.n	8011f7c <ucdr_deserialize_uint16_t+0x74>
 8011f34:	6923      	ldr	r3, [r4, #16]
 8011f36:	4620      	mov	r0, r4
 8011f38:	60a6      	str	r6, [r4, #8]
 8011f3a:	1bf6      	subs	r6, r6, r7
 8011f3c:	4433      	add	r3, r6
 8011f3e:	f1c6 0902 	rsb	r9, r6, #2
 8011f42:	6123      	str	r3, [r4, #16]
 8011f44:	4649      	mov	r1, r9
 8011f46:	f001 f943 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d034      	beq.n	8011fb8 <ucdr_deserialize_uint16_t+0xb0>
 8011f4e:	7d23      	ldrb	r3, [r4, #20]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d042      	beq.n	8011fda <ucdr_deserialize_uint16_t+0xd2>
 8011f54:	787b      	ldrb	r3, [r7, #1]
 8011f56:	702b      	strb	r3, [r5, #0]
 8011f58:	2e00      	cmp	r6, #0
 8011f5a:	d03a      	beq.n	8011fd2 <ucdr_deserialize_uint16_t+0xca>
 8011f5c:	783b      	ldrb	r3, [r7, #0]
 8011f5e:	706b      	strb	r3, [r5, #1]
 8011f60:	6923      	ldr	r3, [r4, #16]
 8011f62:	2102      	movs	r1, #2
 8011f64:	68a2      	ldr	r2, [r4, #8]
 8011f66:	3302      	adds	r3, #2
 8011f68:	7da0      	ldrb	r0, [r4, #22]
 8011f6a:	444a      	add	r2, r9
 8011f6c:	7561      	strb	r1, [r4, #21]
 8011f6e:	1b9b      	subs	r3, r3, r6
 8011f70:	f080 0001 	eor.w	r0, r0, #1
 8011f74:	60a2      	str	r2, [r4, #8]
 8011f76:	6123      	str	r3, [r4, #16]
 8011f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f7c:	2102      	movs	r1, #2
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f001 f926 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8011f84:	b180      	cbz	r0, 8011fa8 <ucdr_deserialize_uint16_t+0xa0>
 8011f86:	7d23      	ldrb	r3, [r4, #20]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	68a3      	ldr	r3, [r4, #8]
 8011f8c:	d011      	beq.n	8011fb2 <ucdr_deserialize_uint16_t+0xaa>
 8011f8e:	785b      	ldrb	r3, [r3, #1]
 8011f90:	702b      	strb	r3, [r5, #0]
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	706b      	strb	r3, [r5, #1]
 8011f98:	2102      	movs	r1, #2
 8011f9a:	68a2      	ldr	r2, [r4, #8]
 8011f9c:	6923      	ldr	r3, [r4, #16]
 8011f9e:	440a      	add	r2, r1
 8011fa0:	7561      	strb	r1, [r4, #21]
 8011fa2:	440b      	add	r3, r1
 8011fa4:	60a2      	str	r2, [r4, #8]
 8011fa6:	6123      	str	r3, [r4, #16]
 8011fa8:	7da0      	ldrb	r0, [r4, #22]
 8011faa:	f080 0001 	eor.w	r0, r0, #1
 8011fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fb2:	881b      	ldrh	r3, [r3, #0]
 8011fb4:	802b      	strh	r3, [r5, #0]
 8011fb6:	e7ef      	b.n	8011f98 <ucdr_deserialize_uint16_t+0x90>
 8011fb8:	68a2      	ldr	r2, [r4, #8]
 8011fba:	6923      	ldr	r3, [r4, #16]
 8011fbc:	1b92      	subs	r2, r2, r6
 8011fbe:	7da0      	ldrb	r0, [r4, #22]
 8011fc0:	1b9b      	subs	r3, r3, r6
 8011fc2:	f884 8015 	strb.w	r8, [r4, #21]
 8011fc6:	f080 0001 	eor.w	r0, r0, #1
 8011fca:	60a2      	str	r2, [r4, #8]
 8011fcc:	6123      	str	r3, [r4, #16]
 8011fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd2:	68a3      	ldr	r3, [r4, #8]
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	706b      	strb	r3, [r5, #1]
 8011fd8:	e7c2      	b.n	8011f60 <ucdr_deserialize_uint16_t+0x58>
 8011fda:	4639      	mov	r1, r7
 8011fdc:	4632      	mov	r2, r6
 8011fde:	4628      	mov	r0, r5
 8011fe0:	f00e ff75 	bl	8020ece <memcpy>
 8011fe4:	464a      	mov	r2, r9
 8011fe6:	19a8      	adds	r0, r5, r6
 8011fe8:	68a1      	ldr	r1, [r4, #8]
 8011fea:	f00e ff70 	bl	8020ece <memcpy>
 8011fee:	e7b7      	b.n	8011f60 <ucdr_deserialize_uint16_t+0x58>

08011ff0 <ucdr_deserialize_endian_uint16_t>:
 8011ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	460e      	mov	r6, r1
 8011ff8:	2102      	movs	r1, #2
 8011ffa:	4615      	mov	r5, r2
 8011ffc:	f001 f93c 	bl	8013278 <ucdr_buffer_alignment>
 8012000:	4601      	mov	r1, r0
 8012002:	4620      	mov	r0, r4
 8012004:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012008:	f001 f97e 	bl	8013308 <ucdr_advance_buffer>
 801200c:	2102      	movs	r1, #2
 801200e:	4620      	mov	r0, r4
 8012010:	f001 f8d2 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012014:	bb70      	cbnz	r0, 8012074 <ucdr_deserialize_endian_uint16_t+0x84>
 8012016:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801201a:	454f      	cmp	r7, r9
 801201c:	d925      	bls.n	801206a <ucdr_deserialize_endian_uint16_t+0x7a>
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	4620      	mov	r0, r4
 8012022:	60a7      	str	r7, [r4, #8]
 8012024:	eba7 0709 	sub.w	r7, r7, r9
 8012028:	443b      	add	r3, r7
 801202a:	f1c7 0a02 	rsb	sl, r7, #2
 801202e:	6123      	str	r3, [r4, #16]
 8012030:	4651      	mov	r1, sl
 8012032:	f001 f8cd 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012036:	2800      	cmp	r0, #0
 8012038:	d034      	beq.n	80120a4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801203a:	2e01      	cmp	r6, #1
 801203c:	d043      	beq.n	80120c6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801203e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012042:	702b      	strb	r3, [r5, #0]
 8012044:	2f00      	cmp	r7, #0
 8012046:	d03a      	beq.n	80120be <ucdr_deserialize_endian_uint16_t+0xce>
 8012048:	f899 3000 	ldrb.w	r3, [r9]
 801204c:	706b      	strb	r3, [r5, #1]
 801204e:	6923      	ldr	r3, [r4, #16]
 8012050:	2102      	movs	r1, #2
 8012052:	68a2      	ldr	r2, [r4, #8]
 8012054:	3302      	adds	r3, #2
 8012056:	7da0      	ldrb	r0, [r4, #22]
 8012058:	4452      	add	r2, sl
 801205a:	7561      	strb	r1, [r4, #21]
 801205c:	1bdb      	subs	r3, r3, r7
 801205e:	f080 0001 	eor.w	r0, r0, #1
 8012062:	60a2      	str	r2, [r4, #8]
 8012064:	6123      	str	r3, [r4, #16]
 8012066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206a:	2102      	movs	r1, #2
 801206c:	4620      	mov	r0, r4
 801206e:	f001 f8af 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012072:	b178      	cbz	r0, 8012094 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012074:	2e01      	cmp	r6, #1
 8012076:	68a3      	ldr	r3, [r4, #8]
 8012078:	d011      	beq.n	801209e <ucdr_deserialize_endian_uint16_t+0xae>
 801207a:	785b      	ldrb	r3, [r3, #1]
 801207c:	702b      	strb	r3, [r5, #0]
 801207e:	68a3      	ldr	r3, [r4, #8]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	706b      	strb	r3, [r5, #1]
 8012084:	2102      	movs	r1, #2
 8012086:	68a2      	ldr	r2, [r4, #8]
 8012088:	6923      	ldr	r3, [r4, #16]
 801208a:	440a      	add	r2, r1
 801208c:	7561      	strb	r1, [r4, #21]
 801208e:	440b      	add	r3, r1
 8012090:	60a2      	str	r2, [r4, #8]
 8012092:	6123      	str	r3, [r4, #16]
 8012094:	7da0      	ldrb	r0, [r4, #22]
 8012096:	f080 0001 	eor.w	r0, r0, #1
 801209a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	802b      	strh	r3, [r5, #0]
 80120a2:	e7ef      	b.n	8012084 <ucdr_deserialize_endian_uint16_t+0x94>
 80120a4:	68a2      	ldr	r2, [r4, #8]
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	1bd2      	subs	r2, r2, r7
 80120aa:	7da0      	ldrb	r0, [r4, #22]
 80120ac:	1bdb      	subs	r3, r3, r7
 80120ae:	f884 8015 	strb.w	r8, [r4, #21]
 80120b2:	f080 0001 	eor.w	r0, r0, #1
 80120b6:	60a2      	str	r2, [r4, #8]
 80120b8:	6123      	str	r3, [r4, #16]
 80120ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120be:	68a3      	ldr	r3, [r4, #8]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	706b      	strb	r3, [r5, #1]
 80120c4:	e7c3      	b.n	801204e <ucdr_deserialize_endian_uint16_t+0x5e>
 80120c6:	4649      	mov	r1, r9
 80120c8:	463a      	mov	r2, r7
 80120ca:	4628      	mov	r0, r5
 80120cc:	f00e feff 	bl	8020ece <memcpy>
 80120d0:	4652      	mov	r2, sl
 80120d2:	19e8      	adds	r0, r5, r7
 80120d4:	68a1      	ldr	r1, [r4, #8]
 80120d6:	f00e fefa 	bl	8020ece <memcpy>
 80120da:	e7b8      	b.n	801204e <ucdr_deserialize_endian_uint16_t+0x5e>

080120dc <ucdr_serialize_uint32_t>:
 80120dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e0:	b082      	sub	sp, #8
 80120e2:	4604      	mov	r4, r0
 80120e4:	9101      	str	r1, [sp, #4]
 80120e6:	2104      	movs	r1, #4
 80120e8:	f001 f8c6 	bl	8013278 <ucdr_buffer_alignment>
 80120ec:	4601      	mov	r1, r0
 80120ee:	4620      	mov	r0, r4
 80120f0:	7d67      	ldrb	r7, [r4, #21]
 80120f2:	f001 f909 	bl	8013308 <ucdr_advance_buffer>
 80120f6:	2104      	movs	r1, #4
 80120f8:	4620      	mov	r0, r4
 80120fa:	f001 f85d 	bl	80131b8 <ucdr_check_buffer_available_for>
 80120fe:	2800      	cmp	r0, #0
 8012100:	d139      	bne.n	8012176 <ucdr_serialize_uint32_t+0x9a>
 8012102:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012106:	42ab      	cmp	r3, r5
 8012108:	d930      	bls.n	801216c <ucdr_serialize_uint32_t+0x90>
 801210a:	1b5e      	subs	r6, r3, r5
 801210c:	60a3      	str	r3, [r4, #8]
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	4620      	mov	r0, r4
 8012112:	f1c6 0804 	rsb	r8, r6, #4
 8012116:	4433      	add	r3, r6
 8012118:	4641      	mov	r1, r8
 801211a:	6123      	str	r3, [r4, #16]
 801211c:	f001 f858 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012120:	2800      	cmp	r0, #0
 8012122:	d04c      	beq.n	80121be <ucdr_serialize_uint32_t+0xe2>
 8012124:	7d23      	ldrb	r3, [r4, #20]
 8012126:	2b01      	cmp	r3, #1
 8012128:	d063      	beq.n	80121f2 <ucdr_serialize_uint32_t+0x116>
 801212a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801212e:	702b      	strb	r3, [r5, #0]
 8012130:	2e00      	cmp	r6, #0
 8012132:	d051      	beq.n	80121d8 <ucdr_serialize_uint32_t+0xfc>
 8012134:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012138:	2e01      	cmp	r6, #1
 801213a:	706b      	strb	r3, [r5, #1]
 801213c:	d050      	beq.n	80121e0 <ucdr_serialize_uint32_t+0x104>
 801213e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012142:	2e02      	cmp	r6, #2
 8012144:	70ab      	strb	r3, [r5, #2]
 8012146:	d04f      	beq.n	80121e8 <ucdr_serialize_uint32_t+0x10c>
 8012148:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801214c:	70eb      	strb	r3, [r5, #3]
 801214e:	6923      	ldr	r3, [r4, #16]
 8012150:	2104      	movs	r1, #4
 8012152:	68a2      	ldr	r2, [r4, #8]
 8012154:	3304      	adds	r3, #4
 8012156:	7da0      	ldrb	r0, [r4, #22]
 8012158:	4442      	add	r2, r8
 801215a:	7561      	strb	r1, [r4, #21]
 801215c:	1b9e      	subs	r6, r3, r6
 801215e:	f080 0001 	eor.w	r0, r0, #1
 8012162:	60a2      	str	r2, [r4, #8]
 8012164:	6126      	str	r6, [r4, #16]
 8012166:	b002      	add	sp, #8
 8012168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216c:	2104      	movs	r1, #4
 801216e:	4620      	mov	r0, r4
 8012170:	f001 f82e 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012174:	b1d0      	cbz	r0, 80121ac <ucdr_serialize_uint32_t+0xd0>
 8012176:	7d23      	ldrb	r3, [r4, #20]
 8012178:	2b01      	cmp	r3, #1
 801217a:	68a3      	ldr	r3, [r4, #8]
 801217c:	d01c      	beq.n	80121b8 <ucdr_serialize_uint32_t+0xdc>
 801217e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012186:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801218a:	7018      	strb	r0, [r3, #0]
 801218c:	68a3      	ldr	r3, [r4, #8]
 801218e:	705a      	strb	r2, [r3, #1]
 8012190:	68a3      	ldr	r3, [r4, #8]
 8012192:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012196:	7099      	strb	r1, [r3, #2]
 8012198:	68a3      	ldr	r3, [r4, #8]
 801219a:	70da      	strb	r2, [r3, #3]
 801219c:	2104      	movs	r1, #4
 801219e:	68a2      	ldr	r2, [r4, #8]
 80121a0:	6923      	ldr	r3, [r4, #16]
 80121a2:	440a      	add	r2, r1
 80121a4:	7561      	strb	r1, [r4, #21]
 80121a6:	440b      	add	r3, r1
 80121a8:	60a2      	str	r2, [r4, #8]
 80121aa:	6123      	str	r3, [r4, #16]
 80121ac:	7da0      	ldrb	r0, [r4, #22]
 80121ae:	f080 0001 	eor.w	r0, r0, #1
 80121b2:	b002      	add	sp, #8
 80121b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b8:	9a01      	ldr	r2, [sp, #4]
 80121ba:	601a      	str	r2, [r3, #0]
 80121bc:	e7ee      	b.n	801219c <ucdr_serialize_uint32_t+0xc0>
 80121be:	68a2      	ldr	r2, [r4, #8]
 80121c0:	6923      	ldr	r3, [r4, #16]
 80121c2:	7da0      	ldrb	r0, [r4, #22]
 80121c4:	1b92      	subs	r2, r2, r6
 80121c6:	1b9b      	subs	r3, r3, r6
 80121c8:	7567      	strb	r7, [r4, #21]
 80121ca:	f080 0001 	eor.w	r0, r0, #1
 80121ce:	60a2      	str	r2, [r4, #8]
 80121d0:	6123      	str	r3, [r4, #16]
 80121d2:	b002      	add	sp, #8
 80121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121d8:	68a3      	ldr	r3, [r4, #8]
 80121da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121de:	701a      	strb	r2, [r3, #0]
 80121e0:	68a3      	ldr	r3, [r4, #8]
 80121e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80121e6:	701a      	strb	r2, [r3, #0]
 80121e8:	68a3      	ldr	r3, [r4, #8]
 80121ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121ee:	701a      	strb	r2, [r3, #0]
 80121f0:	e7ad      	b.n	801214e <ucdr_serialize_uint32_t+0x72>
 80121f2:	4628      	mov	r0, r5
 80121f4:	ad01      	add	r5, sp, #4
 80121f6:	4632      	mov	r2, r6
 80121f8:	4629      	mov	r1, r5
 80121fa:	f00e fe68 	bl	8020ece <memcpy>
 80121fe:	4642      	mov	r2, r8
 8012200:	19a9      	adds	r1, r5, r6
 8012202:	68a0      	ldr	r0, [r4, #8]
 8012204:	f00e fe63 	bl	8020ece <memcpy>
 8012208:	e7a1      	b.n	801214e <ucdr_serialize_uint32_t+0x72>
 801220a:	bf00      	nop

0801220c <ucdr_serialize_endian_uint32_t>:
 801220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012210:	4604      	mov	r4, r0
 8012212:	b083      	sub	sp, #12
 8012214:	460d      	mov	r5, r1
 8012216:	2104      	movs	r1, #4
 8012218:	9201      	str	r2, [sp, #4]
 801221a:	f001 f82d 	bl	8013278 <ucdr_buffer_alignment>
 801221e:	4601      	mov	r1, r0
 8012220:	4620      	mov	r0, r4
 8012222:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012226:	f001 f86f 	bl	8013308 <ucdr_advance_buffer>
 801222a:	2104      	movs	r1, #4
 801222c:	4620      	mov	r0, r4
 801222e:	f000 ffc3 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012232:	2800      	cmp	r0, #0
 8012234:	d138      	bne.n	80122a8 <ucdr_serialize_endian_uint32_t+0x9c>
 8012236:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801223a:	42b7      	cmp	r7, r6
 801223c:	d92f      	bls.n	801229e <ucdr_serialize_endian_uint32_t+0x92>
 801223e:	6923      	ldr	r3, [r4, #16]
 8012240:	4620      	mov	r0, r4
 8012242:	60a7      	str	r7, [r4, #8]
 8012244:	1bbf      	subs	r7, r7, r6
 8012246:	443b      	add	r3, r7
 8012248:	f1c7 0904 	rsb	r9, r7, #4
 801224c:	6123      	str	r3, [r4, #16]
 801224e:	4649      	mov	r1, r9
 8012250:	f000 ffbe 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012254:	2800      	cmp	r0, #0
 8012256:	d04a      	beq.n	80122ee <ucdr_serialize_endian_uint32_t+0xe2>
 8012258:	2d01      	cmp	r5, #1
 801225a:	d063      	beq.n	8012324 <ucdr_serialize_endian_uint32_t+0x118>
 801225c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012260:	7033      	strb	r3, [r6, #0]
 8012262:	2f00      	cmp	r7, #0
 8012264:	d051      	beq.n	801230a <ucdr_serialize_endian_uint32_t+0xfe>
 8012266:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801226a:	2f01      	cmp	r7, #1
 801226c:	7073      	strb	r3, [r6, #1]
 801226e:	d050      	beq.n	8012312 <ucdr_serialize_endian_uint32_t+0x106>
 8012270:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012274:	2f02      	cmp	r7, #2
 8012276:	70b3      	strb	r3, [r6, #2]
 8012278:	d04f      	beq.n	801231a <ucdr_serialize_endian_uint32_t+0x10e>
 801227a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801227e:	70f3      	strb	r3, [r6, #3]
 8012280:	6923      	ldr	r3, [r4, #16]
 8012282:	2104      	movs	r1, #4
 8012284:	68a2      	ldr	r2, [r4, #8]
 8012286:	7da0      	ldrb	r0, [r4, #22]
 8012288:	3304      	adds	r3, #4
 801228a:	444a      	add	r2, r9
 801228c:	7561      	strb	r1, [r4, #21]
 801228e:	1bdb      	subs	r3, r3, r7
 8012290:	f080 0001 	eor.w	r0, r0, #1
 8012294:	60a2      	str	r2, [r4, #8]
 8012296:	6123      	str	r3, [r4, #16]
 8012298:	b003      	add	sp, #12
 801229a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801229e:	2104      	movs	r1, #4
 80122a0:	4620      	mov	r0, r4
 80122a2:	f000 ff95 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80122a6:	b1c8      	cbz	r0, 80122dc <ucdr_serialize_endian_uint32_t+0xd0>
 80122a8:	2d01      	cmp	r5, #1
 80122aa:	68a3      	ldr	r3, [r4, #8]
 80122ac:	d01c      	beq.n	80122e8 <ucdr_serialize_endian_uint32_t+0xdc>
 80122ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80122b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80122ba:	7018      	strb	r0, [r3, #0]
 80122bc:	68a3      	ldr	r3, [r4, #8]
 80122be:	705a      	strb	r2, [r3, #1]
 80122c0:	68a3      	ldr	r3, [r4, #8]
 80122c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80122c6:	7099      	strb	r1, [r3, #2]
 80122c8:	68a3      	ldr	r3, [r4, #8]
 80122ca:	70da      	strb	r2, [r3, #3]
 80122cc:	2104      	movs	r1, #4
 80122ce:	68a2      	ldr	r2, [r4, #8]
 80122d0:	6923      	ldr	r3, [r4, #16]
 80122d2:	440a      	add	r2, r1
 80122d4:	7561      	strb	r1, [r4, #21]
 80122d6:	440b      	add	r3, r1
 80122d8:	60a2      	str	r2, [r4, #8]
 80122da:	6123      	str	r3, [r4, #16]
 80122dc:	7da0      	ldrb	r0, [r4, #22]
 80122de:	f080 0001 	eor.w	r0, r0, #1
 80122e2:	b003      	add	sp, #12
 80122e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122e8:	9a01      	ldr	r2, [sp, #4]
 80122ea:	601a      	str	r2, [r3, #0]
 80122ec:	e7ee      	b.n	80122cc <ucdr_serialize_endian_uint32_t+0xc0>
 80122ee:	68a2      	ldr	r2, [r4, #8]
 80122f0:	6923      	ldr	r3, [r4, #16]
 80122f2:	7da0      	ldrb	r0, [r4, #22]
 80122f4:	1bd2      	subs	r2, r2, r7
 80122f6:	1bdb      	subs	r3, r3, r7
 80122f8:	f884 8015 	strb.w	r8, [r4, #21]
 80122fc:	f080 0001 	eor.w	r0, r0, #1
 8012300:	60a2      	str	r2, [r4, #8]
 8012302:	6123      	str	r3, [r4, #16]
 8012304:	b003      	add	sp, #12
 8012306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801230a:	68a3      	ldr	r3, [r4, #8]
 801230c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	68a3      	ldr	r3, [r4, #8]
 8012314:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012318:	701a      	strb	r2, [r3, #0]
 801231a:	68a3      	ldr	r3, [r4, #8]
 801231c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012320:	701a      	strb	r2, [r3, #0]
 8012322:	e7ad      	b.n	8012280 <ucdr_serialize_endian_uint32_t+0x74>
 8012324:	ad01      	add	r5, sp, #4
 8012326:	463a      	mov	r2, r7
 8012328:	4630      	mov	r0, r6
 801232a:	4629      	mov	r1, r5
 801232c:	f00e fdcf 	bl	8020ece <memcpy>
 8012330:	464a      	mov	r2, r9
 8012332:	19e9      	adds	r1, r5, r7
 8012334:	68a0      	ldr	r0, [r4, #8]
 8012336:	f00e fdca 	bl	8020ece <memcpy>
 801233a:	e7a1      	b.n	8012280 <ucdr_serialize_endian_uint32_t+0x74>

0801233c <ucdr_deserialize_uint32_t>:
 801233c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012340:	4604      	mov	r4, r0
 8012342:	460d      	mov	r5, r1
 8012344:	2104      	movs	r1, #4
 8012346:	f000 ff97 	bl	8013278 <ucdr_buffer_alignment>
 801234a:	4601      	mov	r1, r0
 801234c:	4620      	mov	r0, r4
 801234e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012352:	f000 ffd9 	bl	8013308 <ucdr_advance_buffer>
 8012356:	2104      	movs	r1, #4
 8012358:	4620      	mov	r0, r4
 801235a:	f000 ff2d 	bl	80131b8 <ucdr_check_buffer_available_for>
 801235e:	2800      	cmp	r0, #0
 8012360:	d138      	bne.n	80123d4 <ucdr_deserialize_uint32_t+0x98>
 8012362:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012366:	42b7      	cmp	r7, r6
 8012368:	d92f      	bls.n	80123ca <ucdr_deserialize_uint32_t+0x8e>
 801236a:	6923      	ldr	r3, [r4, #16]
 801236c:	4620      	mov	r0, r4
 801236e:	60a7      	str	r7, [r4, #8]
 8012370:	1bbf      	subs	r7, r7, r6
 8012372:	443b      	add	r3, r7
 8012374:	f1c7 0904 	rsb	r9, r7, #4
 8012378:	6123      	str	r3, [r4, #16]
 801237a:	4649      	mov	r1, r9
 801237c:	f000 ff28 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012380:	2800      	cmp	r0, #0
 8012382:	d046      	beq.n	8012412 <ucdr_deserialize_uint32_t+0xd6>
 8012384:	7d23      	ldrb	r3, [r4, #20]
 8012386:	2b01      	cmp	r3, #1
 8012388:	d05c      	beq.n	8012444 <ucdr_deserialize_uint32_t+0x108>
 801238a:	78f3      	ldrb	r3, [r6, #3]
 801238c:	702b      	strb	r3, [r5, #0]
 801238e:	2f00      	cmp	r7, #0
 8012390:	d04c      	beq.n	801242c <ucdr_deserialize_uint32_t+0xf0>
 8012392:	78b3      	ldrb	r3, [r6, #2]
 8012394:	2f01      	cmp	r7, #1
 8012396:	706b      	strb	r3, [r5, #1]
 8012398:	f105 0302 	add.w	r3, r5, #2
 801239c:	d04a      	beq.n	8012434 <ucdr_deserialize_uint32_t+0xf8>
 801239e:	7873      	ldrb	r3, [r6, #1]
 80123a0:	2f02      	cmp	r7, #2
 80123a2:	70ab      	strb	r3, [r5, #2]
 80123a4:	f105 0303 	add.w	r3, r5, #3
 80123a8:	d048      	beq.n	801243c <ucdr_deserialize_uint32_t+0x100>
 80123aa:	7833      	ldrb	r3, [r6, #0]
 80123ac:	70eb      	strb	r3, [r5, #3]
 80123ae:	6923      	ldr	r3, [r4, #16]
 80123b0:	2104      	movs	r1, #4
 80123b2:	68a2      	ldr	r2, [r4, #8]
 80123b4:	3304      	adds	r3, #4
 80123b6:	7da0      	ldrb	r0, [r4, #22]
 80123b8:	444a      	add	r2, r9
 80123ba:	7561      	strb	r1, [r4, #21]
 80123bc:	1bdb      	subs	r3, r3, r7
 80123be:	f080 0001 	eor.w	r0, r0, #1
 80123c2:	60a2      	str	r2, [r4, #8]
 80123c4:	6123      	str	r3, [r4, #16]
 80123c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ca:	2104      	movs	r1, #4
 80123cc:	4620      	mov	r0, r4
 80123ce:	f000 feff 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80123d2:	b1b0      	cbz	r0, 8012402 <ucdr_deserialize_uint32_t+0xc6>
 80123d4:	7d23      	ldrb	r3, [r4, #20]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	68a3      	ldr	r3, [r4, #8]
 80123da:	d017      	beq.n	801240c <ucdr_deserialize_uint32_t+0xd0>
 80123dc:	78db      	ldrb	r3, [r3, #3]
 80123de:	702b      	strb	r3, [r5, #0]
 80123e0:	68a3      	ldr	r3, [r4, #8]
 80123e2:	789b      	ldrb	r3, [r3, #2]
 80123e4:	706b      	strb	r3, [r5, #1]
 80123e6:	68a3      	ldr	r3, [r4, #8]
 80123e8:	785b      	ldrb	r3, [r3, #1]
 80123ea:	70ab      	strb	r3, [r5, #2]
 80123ec:	68a3      	ldr	r3, [r4, #8]
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	70eb      	strb	r3, [r5, #3]
 80123f2:	2104      	movs	r1, #4
 80123f4:	68a2      	ldr	r2, [r4, #8]
 80123f6:	6923      	ldr	r3, [r4, #16]
 80123f8:	440a      	add	r2, r1
 80123fa:	7561      	strb	r1, [r4, #21]
 80123fc:	440b      	add	r3, r1
 80123fe:	60a2      	str	r2, [r4, #8]
 8012400:	6123      	str	r3, [r4, #16]
 8012402:	7da0      	ldrb	r0, [r4, #22]
 8012404:	f080 0001 	eor.w	r0, r0, #1
 8012408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	602b      	str	r3, [r5, #0]
 8012410:	e7ef      	b.n	80123f2 <ucdr_deserialize_uint32_t+0xb6>
 8012412:	68a2      	ldr	r2, [r4, #8]
 8012414:	6923      	ldr	r3, [r4, #16]
 8012416:	1bd2      	subs	r2, r2, r7
 8012418:	7da0      	ldrb	r0, [r4, #22]
 801241a:	1bdb      	subs	r3, r3, r7
 801241c:	f884 8015 	strb.w	r8, [r4, #21]
 8012420:	f080 0001 	eor.w	r0, r0, #1
 8012424:	60a2      	str	r2, [r4, #8]
 8012426:	6123      	str	r3, [r4, #16]
 8012428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801242c:	68a3      	ldr	r3, [r4, #8]
 801242e:	789b      	ldrb	r3, [r3, #2]
 8012430:	706b      	strb	r3, [r5, #1]
 8012432:	1cab      	adds	r3, r5, #2
 8012434:	68a2      	ldr	r2, [r4, #8]
 8012436:	7852      	ldrb	r2, [r2, #1]
 8012438:	f803 2b01 	strb.w	r2, [r3], #1
 801243c:	68a2      	ldr	r2, [r4, #8]
 801243e:	7812      	ldrb	r2, [r2, #0]
 8012440:	701a      	strb	r2, [r3, #0]
 8012442:	e7b4      	b.n	80123ae <ucdr_deserialize_uint32_t+0x72>
 8012444:	4631      	mov	r1, r6
 8012446:	463a      	mov	r2, r7
 8012448:	4628      	mov	r0, r5
 801244a:	f00e fd40 	bl	8020ece <memcpy>
 801244e:	464a      	mov	r2, r9
 8012450:	19e8      	adds	r0, r5, r7
 8012452:	68a1      	ldr	r1, [r4, #8]
 8012454:	f00e fd3b 	bl	8020ece <memcpy>
 8012458:	e7a9      	b.n	80123ae <ucdr_deserialize_uint32_t+0x72>
 801245a:	bf00      	nop

0801245c <ucdr_deserialize_endian_uint32_t>:
 801245c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012460:	4604      	mov	r4, r0
 8012462:	460e      	mov	r6, r1
 8012464:	2104      	movs	r1, #4
 8012466:	4615      	mov	r5, r2
 8012468:	f000 ff06 	bl	8013278 <ucdr_buffer_alignment>
 801246c:	4601      	mov	r1, r0
 801246e:	4620      	mov	r0, r4
 8012470:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012474:	f000 ff48 	bl	8013308 <ucdr_advance_buffer>
 8012478:	2104      	movs	r1, #4
 801247a:	4620      	mov	r0, r4
 801247c:	f000 fe9c 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012480:	2800      	cmp	r0, #0
 8012482:	d13c      	bne.n	80124fe <ucdr_deserialize_endian_uint32_t+0xa2>
 8012484:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012488:	42bb      	cmp	r3, r7
 801248a:	d933      	bls.n	80124f4 <ucdr_deserialize_endian_uint32_t+0x98>
 801248c:	eba3 0907 	sub.w	r9, r3, r7
 8012490:	60a3      	str	r3, [r4, #8]
 8012492:	6923      	ldr	r3, [r4, #16]
 8012494:	4620      	mov	r0, r4
 8012496:	f1c9 0a04 	rsb	sl, r9, #4
 801249a:	444b      	add	r3, r9
 801249c:	4651      	mov	r1, sl
 801249e:	6123      	str	r3, [r4, #16]
 80124a0:	f000 fe96 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d048      	beq.n	801253a <ucdr_deserialize_endian_uint32_t+0xde>
 80124a8:	2e01      	cmp	r6, #1
 80124aa:	d061      	beq.n	8012570 <ucdr_deserialize_endian_uint32_t+0x114>
 80124ac:	78fb      	ldrb	r3, [r7, #3]
 80124ae:	702b      	strb	r3, [r5, #0]
 80124b0:	f1b9 0f00 	cmp.w	r9, #0
 80124b4:	d050      	beq.n	8012558 <ucdr_deserialize_endian_uint32_t+0xfc>
 80124b6:	78bb      	ldrb	r3, [r7, #2]
 80124b8:	f1b9 0f01 	cmp.w	r9, #1
 80124bc:	706b      	strb	r3, [r5, #1]
 80124be:	f105 0302 	add.w	r3, r5, #2
 80124c2:	d04d      	beq.n	8012560 <ucdr_deserialize_endian_uint32_t+0x104>
 80124c4:	787b      	ldrb	r3, [r7, #1]
 80124c6:	f1b9 0f02 	cmp.w	r9, #2
 80124ca:	70ab      	strb	r3, [r5, #2]
 80124cc:	f105 0303 	add.w	r3, r5, #3
 80124d0:	d04a      	beq.n	8012568 <ucdr_deserialize_endian_uint32_t+0x10c>
 80124d2:	783b      	ldrb	r3, [r7, #0]
 80124d4:	70eb      	strb	r3, [r5, #3]
 80124d6:	6923      	ldr	r3, [r4, #16]
 80124d8:	2104      	movs	r1, #4
 80124da:	68a2      	ldr	r2, [r4, #8]
 80124dc:	3304      	adds	r3, #4
 80124de:	7da0      	ldrb	r0, [r4, #22]
 80124e0:	4452      	add	r2, sl
 80124e2:	7561      	strb	r1, [r4, #21]
 80124e4:	eba3 0309 	sub.w	r3, r3, r9
 80124e8:	f080 0001 	eor.w	r0, r0, #1
 80124ec:	60a2      	str	r2, [r4, #8]
 80124ee:	6123      	str	r3, [r4, #16]
 80124f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f4:	2104      	movs	r1, #4
 80124f6:	4620      	mov	r0, r4
 80124f8:	f000 fe6a 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80124fc:	b1a8      	cbz	r0, 801252a <ucdr_deserialize_endian_uint32_t+0xce>
 80124fe:	2e01      	cmp	r6, #1
 8012500:	68a3      	ldr	r3, [r4, #8]
 8012502:	d017      	beq.n	8012534 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012504:	78db      	ldrb	r3, [r3, #3]
 8012506:	702b      	strb	r3, [r5, #0]
 8012508:	68a3      	ldr	r3, [r4, #8]
 801250a:	789b      	ldrb	r3, [r3, #2]
 801250c:	706b      	strb	r3, [r5, #1]
 801250e:	68a3      	ldr	r3, [r4, #8]
 8012510:	785b      	ldrb	r3, [r3, #1]
 8012512:	70ab      	strb	r3, [r5, #2]
 8012514:	68a3      	ldr	r3, [r4, #8]
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	70eb      	strb	r3, [r5, #3]
 801251a:	2104      	movs	r1, #4
 801251c:	68a2      	ldr	r2, [r4, #8]
 801251e:	6923      	ldr	r3, [r4, #16]
 8012520:	440a      	add	r2, r1
 8012522:	7561      	strb	r1, [r4, #21]
 8012524:	440b      	add	r3, r1
 8012526:	60a2      	str	r2, [r4, #8]
 8012528:	6123      	str	r3, [r4, #16]
 801252a:	7da0      	ldrb	r0, [r4, #22]
 801252c:	f080 0001 	eor.w	r0, r0, #1
 8012530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	602b      	str	r3, [r5, #0]
 8012538:	e7ef      	b.n	801251a <ucdr_deserialize_endian_uint32_t+0xbe>
 801253a:	68a2      	ldr	r2, [r4, #8]
 801253c:	6923      	ldr	r3, [r4, #16]
 801253e:	eba2 0209 	sub.w	r2, r2, r9
 8012542:	7da0      	ldrb	r0, [r4, #22]
 8012544:	eba3 0309 	sub.w	r3, r3, r9
 8012548:	f884 8015 	strb.w	r8, [r4, #21]
 801254c:	f080 0001 	eor.w	r0, r0, #1
 8012550:	60a2      	str	r2, [r4, #8]
 8012552:	6123      	str	r3, [r4, #16]
 8012554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012558:	68a3      	ldr	r3, [r4, #8]
 801255a:	789b      	ldrb	r3, [r3, #2]
 801255c:	706b      	strb	r3, [r5, #1]
 801255e:	1cab      	adds	r3, r5, #2
 8012560:	68a2      	ldr	r2, [r4, #8]
 8012562:	7852      	ldrb	r2, [r2, #1]
 8012564:	f803 2b01 	strb.w	r2, [r3], #1
 8012568:	68a2      	ldr	r2, [r4, #8]
 801256a:	7812      	ldrb	r2, [r2, #0]
 801256c:	701a      	strb	r2, [r3, #0]
 801256e:	e7b2      	b.n	80124d6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8012570:	4639      	mov	r1, r7
 8012572:	464a      	mov	r2, r9
 8012574:	4628      	mov	r0, r5
 8012576:	f00e fcaa 	bl	8020ece <memcpy>
 801257a:	4652      	mov	r2, sl
 801257c:	eb05 0009 	add.w	r0, r5, r9
 8012580:	68a1      	ldr	r1, [r4, #8]
 8012582:	f00e fca4 	bl	8020ece <memcpy>
 8012586:	e7a6      	b.n	80124d6 <ucdr_deserialize_endian_uint32_t+0x7a>

08012588 <ucdr_serialize_uint64_t>:
 8012588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801258c:	4604      	mov	r4, r0
 801258e:	b082      	sub	sp, #8
 8012590:	2108      	movs	r1, #8
 8012592:	e9cd 2300 	strd	r2, r3, [sp]
 8012596:	f000 fe6f 	bl	8013278 <ucdr_buffer_alignment>
 801259a:	4601      	mov	r1, r0
 801259c:	4620      	mov	r0, r4
 801259e:	7d67      	ldrb	r7, [r4, #21]
 80125a0:	f000 feb2 	bl	8013308 <ucdr_advance_buffer>
 80125a4:	2108      	movs	r1, #8
 80125a6:	4620      	mov	r0, r4
 80125a8:	f000 fe06 	bl	80131b8 <ucdr_check_buffer_available_for>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d14e      	bne.n	801264e <ucdr_serialize_uint64_t+0xc6>
 80125b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80125b4:	42ab      	cmp	r3, r5
 80125b6:	d945      	bls.n	8012644 <ucdr_serialize_uint64_t+0xbc>
 80125b8:	1b5e      	subs	r6, r3, r5
 80125ba:	60a3      	str	r3, [r4, #8]
 80125bc:	6923      	ldr	r3, [r4, #16]
 80125be:	4620      	mov	r0, r4
 80125c0:	f1c6 0808 	rsb	r8, r6, #8
 80125c4:	4433      	add	r3, r6
 80125c6:	4641      	mov	r1, r8
 80125c8:	6123      	str	r3, [r4, #16]
 80125ca:	f000 fe01 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80125ce:	2800      	cmp	r0, #0
 80125d0:	d074      	beq.n	80126bc <ucdr_serialize_uint64_t+0x134>
 80125d2:	7d23      	ldrb	r3, [r4, #20]
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	f000 809b 	beq.w	8012710 <ucdr_serialize_uint64_t+0x188>
 80125da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80125de:	702b      	strb	r3, [r5, #0]
 80125e0:	2e00      	cmp	r6, #0
 80125e2:	d078      	beq.n	80126d6 <ucdr_serialize_uint64_t+0x14e>
 80125e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80125e8:	2e01      	cmp	r6, #1
 80125ea:	706b      	strb	r3, [r5, #1]
 80125ec:	d077      	beq.n	80126de <ucdr_serialize_uint64_t+0x156>
 80125ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80125f2:	2e02      	cmp	r6, #2
 80125f4:	70ab      	strb	r3, [r5, #2]
 80125f6:	d076      	beq.n	80126e6 <ucdr_serialize_uint64_t+0x15e>
 80125f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125fc:	2e03      	cmp	r6, #3
 80125fe:	70eb      	strb	r3, [r5, #3]
 8012600:	d075      	beq.n	80126ee <ucdr_serialize_uint64_t+0x166>
 8012602:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012606:	2e04      	cmp	r6, #4
 8012608:	712b      	strb	r3, [r5, #4]
 801260a:	d074      	beq.n	80126f6 <ucdr_serialize_uint64_t+0x16e>
 801260c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012610:	2e05      	cmp	r6, #5
 8012612:	716b      	strb	r3, [r5, #5]
 8012614:	d073      	beq.n	80126fe <ucdr_serialize_uint64_t+0x176>
 8012616:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801261a:	2e06      	cmp	r6, #6
 801261c:	71ab      	strb	r3, [r5, #6]
 801261e:	d072      	beq.n	8012706 <ucdr_serialize_uint64_t+0x17e>
 8012620:	f89d 3000 	ldrb.w	r3, [sp]
 8012624:	71eb      	strb	r3, [r5, #7]
 8012626:	6923      	ldr	r3, [r4, #16]
 8012628:	2108      	movs	r1, #8
 801262a:	68a2      	ldr	r2, [r4, #8]
 801262c:	3308      	adds	r3, #8
 801262e:	7da0      	ldrb	r0, [r4, #22]
 8012630:	4442      	add	r2, r8
 8012632:	7561      	strb	r1, [r4, #21]
 8012634:	1b9e      	subs	r6, r3, r6
 8012636:	f080 0001 	eor.w	r0, r0, #1
 801263a:	60a2      	str	r2, [r4, #8]
 801263c:	6126      	str	r6, [r4, #16]
 801263e:	b002      	add	sp, #8
 8012640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012644:	2108      	movs	r1, #8
 8012646:	4620      	mov	r0, r4
 8012648:	f000 fdc2 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 801264c:	b350      	cbz	r0, 80126a4 <ucdr_serialize_uint64_t+0x11c>
 801264e:	7d23      	ldrb	r3, [r4, #20]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d02d      	beq.n	80126b0 <ucdr_serialize_uint64_t+0x128>
 8012654:	68a3      	ldr	r3, [r4, #8]
 8012656:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801265a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801265e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012662:	7018      	strb	r0, [r3, #0]
 8012664:	68a3      	ldr	r3, [r4, #8]
 8012666:	705a      	strb	r2, [r3, #1]
 8012668:	68a3      	ldr	r3, [r4, #8]
 801266a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801266e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012672:	7099      	strb	r1, [r3, #2]
 8012674:	68a3      	ldr	r3, [r4, #8]
 8012676:	70da      	strb	r2, [r3, #3]
 8012678:	68a3      	ldr	r3, [r4, #8]
 801267a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801267e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012682:	7118      	strb	r0, [r3, #4]
 8012684:	68a3      	ldr	r3, [r4, #8]
 8012686:	715a      	strb	r2, [r3, #5]
 8012688:	68a3      	ldr	r3, [r4, #8]
 801268a:	f89d 2000 	ldrb.w	r2, [sp]
 801268e:	7199      	strb	r1, [r3, #6]
 8012690:	68a3      	ldr	r3, [r4, #8]
 8012692:	71da      	strb	r2, [r3, #7]
 8012694:	2108      	movs	r1, #8
 8012696:	68a2      	ldr	r2, [r4, #8]
 8012698:	6923      	ldr	r3, [r4, #16]
 801269a:	440a      	add	r2, r1
 801269c:	7561      	strb	r1, [r4, #21]
 801269e:	440b      	add	r3, r1
 80126a0:	60a2      	str	r2, [r4, #8]
 80126a2:	6123      	str	r3, [r4, #16]
 80126a4:	7da0      	ldrb	r0, [r4, #22]
 80126a6:	f080 0001 	eor.w	r0, r0, #1
 80126aa:	b002      	add	sp, #8
 80126ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126b0:	466b      	mov	r3, sp
 80126b2:	68a2      	ldr	r2, [r4, #8]
 80126b4:	cb03      	ldmia	r3!, {r0, r1}
 80126b6:	6010      	str	r0, [r2, #0]
 80126b8:	6051      	str	r1, [r2, #4]
 80126ba:	e7eb      	b.n	8012694 <ucdr_serialize_uint64_t+0x10c>
 80126bc:	68a2      	ldr	r2, [r4, #8]
 80126be:	6923      	ldr	r3, [r4, #16]
 80126c0:	7da0      	ldrb	r0, [r4, #22]
 80126c2:	1b92      	subs	r2, r2, r6
 80126c4:	1b9b      	subs	r3, r3, r6
 80126c6:	7567      	strb	r7, [r4, #21]
 80126c8:	f080 0001 	eor.w	r0, r0, #1
 80126cc:	60a2      	str	r2, [r4, #8]
 80126ce:	6123      	str	r3, [r4, #16]
 80126d0:	b002      	add	sp, #8
 80126d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d6:	68a3      	ldr	r3, [r4, #8]
 80126d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126dc:	701a      	strb	r2, [r3, #0]
 80126de:	68a3      	ldr	r3, [r4, #8]
 80126e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80126e4:	701a      	strb	r2, [r3, #0]
 80126e6:	68a3      	ldr	r3, [r4, #8]
 80126e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126ec:	701a      	strb	r2, [r3, #0]
 80126ee:	68a3      	ldr	r3, [r4, #8]
 80126f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80126f4:	701a      	strb	r2, [r3, #0]
 80126f6:	68a3      	ldr	r3, [r4, #8]
 80126f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80126fc:	701a      	strb	r2, [r3, #0]
 80126fe:	68a3      	ldr	r3, [r4, #8]
 8012700:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012704:	701a      	strb	r2, [r3, #0]
 8012706:	68a3      	ldr	r3, [r4, #8]
 8012708:	f89d 2000 	ldrb.w	r2, [sp]
 801270c:	701a      	strb	r2, [r3, #0]
 801270e:	e78a      	b.n	8012626 <ucdr_serialize_uint64_t+0x9e>
 8012710:	4628      	mov	r0, r5
 8012712:	466d      	mov	r5, sp
 8012714:	4632      	mov	r2, r6
 8012716:	4629      	mov	r1, r5
 8012718:	f00e fbd9 	bl	8020ece <memcpy>
 801271c:	4642      	mov	r2, r8
 801271e:	19a9      	adds	r1, r5, r6
 8012720:	68a0      	ldr	r0, [r4, #8]
 8012722:	f00e fbd4 	bl	8020ece <memcpy>
 8012726:	e77e      	b.n	8012626 <ucdr_serialize_uint64_t+0x9e>

08012728 <ucdr_serialize_int16_t>:
 8012728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801272c:	460b      	mov	r3, r1
 801272e:	b082      	sub	sp, #8
 8012730:	4604      	mov	r4, r0
 8012732:	2102      	movs	r1, #2
 8012734:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012738:	f000 fd9e 	bl	8013278 <ucdr_buffer_alignment>
 801273c:	4601      	mov	r1, r0
 801273e:	4620      	mov	r0, r4
 8012740:	7d67      	ldrb	r7, [r4, #21]
 8012742:	f000 fde1 	bl	8013308 <ucdr_advance_buffer>
 8012746:	2102      	movs	r1, #2
 8012748:	4620      	mov	r0, r4
 801274a:	f000 fd35 	bl	80131b8 <ucdr_check_buffer_available_for>
 801274e:	bb78      	cbnz	r0, 80127b0 <ucdr_serialize_int16_t+0x88>
 8012750:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012754:	42ab      	cmp	r3, r5
 8012756:	d926      	bls.n	80127a6 <ucdr_serialize_int16_t+0x7e>
 8012758:	1b5e      	subs	r6, r3, r5
 801275a:	60a3      	str	r3, [r4, #8]
 801275c:	6923      	ldr	r3, [r4, #16]
 801275e:	4620      	mov	r0, r4
 8012760:	f1c6 0802 	rsb	r8, r6, #2
 8012764:	4433      	add	r3, r6
 8012766:	4641      	mov	r1, r8
 8012768:	6123      	str	r3, [r4, #16]
 801276a:	f000 fd31 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 801276e:	2800      	cmp	r0, #0
 8012770:	d03b      	beq.n	80127ea <ucdr_serialize_int16_t+0xc2>
 8012772:	7d23      	ldrb	r3, [r4, #20]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d04a      	beq.n	801280e <ucdr_serialize_int16_t+0xe6>
 8012778:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801277c:	702b      	strb	r3, [r5, #0]
 801277e:	2e00      	cmp	r6, #0
 8012780:	d040      	beq.n	8012804 <ucdr_serialize_int16_t+0xdc>
 8012782:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012786:	706b      	strb	r3, [r5, #1]
 8012788:	6923      	ldr	r3, [r4, #16]
 801278a:	2102      	movs	r1, #2
 801278c:	68a2      	ldr	r2, [r4, #8]
 801278e:	3302      	adds	r3, #2
 8012790:	7da0      	ldrb	r0, [r4, #22]
 8012792:	4442      	add	r2, r8
 8012794:	7561      	strb	r1, [r4, #21]
 8012796:	1b9e      	subs	r6, r3, r6
 8012798:	f080 0001 	eor.w	r0, r0, #1
 801279c:	60a2      	str	r2, [r4, #8]
 801279e:	6126      	str	r6, [r4, #16]
 80127a0:	b002      	add	sp, #8
 80127a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a6:	2102      	movs	r1, #2
 80127a8:	4620      	mov	r0, r4
 80127aa:	f000 fd11 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80127ae:	b190      	cbz	r0, 80127d6 <ucdr_serialize_int16_t+0xae>
 80127b0:	7d23      	ldrb	r3, [r4, #20]
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	68a3      	ldr	r3, [r4, #8]
 80127b6:	d014      	beq.n	80127e2 <ucdr_serialize_int16_t+0xba>
 80127b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80127bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80127c0:	7019      	strb	r1, [r3, #0]
 80127c2:	68a3      	ldr	r3, [r4, #8]
 80127c4:	705a      	strb	r2, [r3, #1]
 80127c6:	2102      	movs	r1, #2
 80127c8:	68a2      	ldr	r2, [r4, #8]
 80127ca:	6923      	ldr	r3, [r4, #16]
 80127cc:	440a      	add	r2, r1
 80127ce:	7561      	strb	r1, [r4, #21]
 80127d0:	440b      	add	r3, r1
 80127d2:	60a2      	str	r2, [r4, #8]
 80127d4:	6123      	str	r3, [r4, #16]
 80127d6:	7da0      	ldrb	r0, [r4, #22]
 80127d8:	f080 0001 	eor.w	r0, r0, #1
 80127dc:	b002      	add	sp, #8
 80127de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80127e6:	801a      	strh	r2, [r3, #0]
 80127e8:	e7ed      	b.n	80127c6 <ucdr_serialize_int16_t+0x9e>
 80127ea:	68a2      	ldr	r2, [r4, #8]
 80127ec:	6923      	ldr	r3, [r4, #16]
 80127ee:	7da0      	ldrb	r0, [r4, #22]
 80127f0:	1b92      	subs	r2, r2, r6
 80127f2:	1b9b      	subs	r3, r3, r6
 80127f4:	7567      	strb	r7, [r4, #21]
 80127f6:	f080 0001 	eor.w	r0, r0, #1
 80127fa:	60a2      	str	r2, [r4, #8]
 80127fc:	6123      	str	r3, [r4, #16]
 80127fe:	b002      	add	sp, #8
 8012800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012804:	68a3      	ldr	r3, [r4, #8]
 8012806:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801280a:	701a      	strb	r2, [r3, #0]
 801280c:	e7bc      	b.n	8012788 <ucdr_serialize_int16_t+0x60>
 801280e:	4628      	mov	r0, r5
 8012810:	f10d 0506 	add.w	r5, sp, #6
 8012814:	4632      	mov	r2, r6
 8012816:	4629      	mov	r1, r5
 8012818:	f00e fb59 	bl	8020ece <memcpy>
 801281c:	4642      	mov	r2, r8
 801281e:	19a9      	adds	r1, r5, r6
 8012820:	68a0      	ldr	r0, [r4, #8]
 8012822:	f00e fb54 	bl	8020ece <memcpy>
 8012826:	e7af      	b.n	8012788 <ucdr_serialize_int16_t+0x60>

08012828 <ucdr_deserialize_int16_t>:
 8012828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801282c:	4604      	mov	r4, r0
 801282e:	460d      	mov	r5, r1
 8012830:	2102      	movs	r1, #2
 8012832:	f000 fd21 	bl	8013278 <ucdr_buffer_alignment>
 8012836:	4601      	mov	r1, r0
 8012838:	4620      	mov	r0, r4
 801283a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801283e:	f000 fd63 	bl	8013308 <ucdr_advance_buffer>
 8012842:	2102      	movs	r1, #2
 8012844:	4620      	mov	r0, r4
 8012846:	f000 fcb7 	bl	80131b8 <ucdr_check_buffer_available_for>
 801284a:	bb60      	cbnz	r0, 80128a6 <ucdr_deserialize_int16_t+0x7e>
 801284c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012850:	42be      	cmp	r6, r7
 8012852:	d923      	bls.n	801289c <ucdr_deserialize_int16_t+0x74>
 8012854:	6923      	ldr	r3, [r4, #16]
 8012856:	4620      	mov	r0, r4
 8012858:	60a6      	str	r6, [r4, #8]
 801285a:	1bf6      	subs	r6, r6, r7
 801285c:	4433      	add	r3, r6
 801285e:	f1c6 0902 	rsb	r9, r6, #2
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	4649      	mov	r1, r9
 8012866:	f000 fcb3 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 801286a:	2800      	cmp	r0, #0
 801286c:	d034      	beq.n	80128d8 <ucdr_deserialize_int16_t+0xb0>
 801286e:	7d23      	ldrb	r3, [r4, #20]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d042      	beq.n	80128fa <ucdr_deserialize_int16_t+0xd2>
 8012874:	787b      	ldrb	r3, [r7, #1]
 8012876:	702b      	strb	r3, [r5, #0]
 8012878:	2e00      	cmp	r6, #0
 801287a:	d03a      	beq.n	80128f2 <ucdr_deserialize_int16_t+0xca>
 801287c:	783b      	ldrb	r3, [r7, #0]
 801287e:	706b      	strb	r3, [r5, #1]
 8012880:	6923      	ldr	r3, [r4, #16]
 8012882:	2102      	movs	r1, #2
 8012884:	68a2      	ldr	r2, [r4, #8]
 8012886:	3302      	adds	r3, #2
 8012888:	7da0      	ldrb	r0, [r4, #22]
 801288a:	444a      	add	r2, r9
 801288c:	7561      	strb	r1, [r4, #21]
 801288e:	1b9b      	subs	r3, r3, r6
 8012890:	f080 0001 	eor.w	r0, r0, #1
 8012894:	60a2      	str	r2, [r4, #8]
 8012896:	6123      	str	r3, [r4, #16]
 8012898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801289c:	2102      	movs	r1, #2
 801289e:	4620      	mov	r0, r4
 80128a0:	f000 fc96 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80128a4:	b180      	cbz	r0, 80128c8 <ucdr_deserialize_int16_t+0xa0>
 80128a6:	7d23      	ldrb	r3, [r4, #20]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	68a3      	ldr	r3, [r4, #8]
 80128ac:	d011      	beq.n	80128d2 <ucdr_deserialize_int16_t+0xaa>
 80128ae:	785b      	ldrb	r3, [r3, #1]
 80128b0:	702b      	strb	r3, [r5, #0]
 80128b2:	68a3      	ldr	r3, [r4, #8]
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	706b      	strb	r3, [r5, #1]
 80128b8:	2102      	movs	r1, #2
 80128ba:	68a2      	ldr	r2, [r4, #8]
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	440a      	add	r2, r1
 80128c0:	7561      	strb	r1, [r4, #21]
 80128c2:	440b      	add	r3, r1
 80128c4:	60a2      	str	r2, [r4, #8]
 80128c6:	6123      	str	r3, [r4, #16]
 80128c8:	7da0      	ldrb	r0, [r4, #22]
 80128ca:	f080 0001 	eor.w	r0, r0, #1
 80128ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128d2:	881b      	ldrh	r3, [r3, #0]
 80128d4:	802b      	strh	r3, [r5, #0]
 80128d6:	e7ef      	b.n	80128b8 <ucdr_deserialize_int16_t+0x90>
 80128d8:	68a2      	ldr	r2, [r4, #8]
 80128da:	6923      	ldr	r3, [r4, #16]
 80128dc:	1b92      	subs	r2, r2, r6
 80128de:	7da0      	ldrb	r0, [r4, #22]
 80128e0:	1b9b      	subs	r3, r3, r6
 80128e2:	f884 8015 	strb.w	r8, [r4, #21]
 80128e6:	f080 0001 	eor.w	r0, r0, #1
 80128ea:	60a2      	str	r2, [r4, #8]
 80128ec:	6123      	str	r3, [r4, #16]
 80128ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f2:	68a3      	ldr	r3, [r4, #8]
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	706b      	strb	r3, [r5, #1]
 80128f8:	e7c2      	b.n	8012880 <ucdr_deserialize_int16_t+0x58>
 80128fa:	4639      	mov	r1, r7
 80128fc:	4632      	mov	r2, r6
 80128fe:	4628      	mov	r0, r5
 8012900:	f00e fae5 	bl	8020ece <memcpy>
 8012904:	464a      	mov	r2, r9
 8012906:	19a8      	adds	r0, r5, r6
 8012908:	68a1      	ldr	r1, [r4, #8]
 801290a:	f00e fae0 	bl	8020ece <memcpy>
 801290e:	e7b7      	b.n	8012880 <ucdr_deserialize_int16_t+0x58>

08012910 <ucdr_serialize_int32_t>:
 8012910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012914:	b082      	sub	sp, #8
 8012916:	4604      	mov	r4, r0
 8012918:	9101      	str	r1, [sp, #4]
 801291a:	2104      	movs	r1, #4
 801291c:	f000 fcac 	bl	8013278 <ucdr_buffer_alignment>
 8012920:	4601      	mov	r1, r0
 8012922:	4620      	mov	r0, r4
 8012924:	7d67      	ldrb	r7, [r4, #21]
 8012926:	f000 fcef 	bl	8013308 <ucdr_advance_buffer>
 801292a:	2104      	movs	r1, #4
 801292c:	4620      	mov	r0, r4
 801292e:	f000 fc43 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012932:	2800      	cmp	r0, #0
 8012934:	d139      	bne.n	80129aa <ucdr_serialize_int32_t+0x9a>
 8012936:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801293a:	42ab      	cmp	r3, r5
 801293c:	d930      	bls.n	80129a0 <ucdr_serialize_int32_t+0x90>
 801293e:	1b5e      	subs	r6, r3, r5
 8012940:	60a3      	str	r3, [r4, #8]
 8012942:	6923      	ldr	r3, [r4, #16]
 8012944:	4620      	mov	r0, r4
 8012946:	f1c6 0804 	rsb	r8, r6, #4
 801294a:	4433      	add	r3, r6
 801294c:	4641      	mov	r1, r8
 801294e:	6123      	str	r3, [r4, #16]
 8012950:	f000 fc3e 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012954:	2800      	cmp	r0, #0
 8012956:	d04c      	beq.n	80129f2 <ucdr_serialize_int32_t+0xe2>
 8012958:	7d23      	ldrb	r3, [r4, #20]
 801295a:	2b01      	cmp	r3, #1
 801295c:	d063      	beq.n	8012a26 <ucdr_serialize_int32_t+0x116>
 801295e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012962:	702b      	strb	r3, [r5, #0]
 8012964:	2e00      	cmp	r6, #0
 8012966:	d051      	beq.n	8012a0c <ucdr_serialize_int32_t+0xfc>
 8012968:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801296c:	2e01      	cmp	r6, #1
 801296e:	706b      	strb	r3, [r5, #1]
 8012970:	d050      	beq.n	8012a14 <ucdr_serialize_int32_t+0x104>
 8012972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012976:	2e02      	cmp	r6, #2
 8012978:	70ab      	strb	r3, [r5, #2]
 801297a:	d04f      	beq.n	8012a1c <ucdr_serialize_int32_t+0x10c>
 801297c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012980:	70eb      	strb	r3, [r5, #3]
 8012982:	6923      	ldr	r3, [r4, #16]
 8012984:	2104      	movs	r1, #4
 8012986:	68a2      	ldr	r2, [r4, #8]
 8012988:	3304      	adds	r3, #4
 801298a:	7da0      	ldrb	r0, [r4, #22]
 801298c:	4442      	add	r2, r8
 801298e:	7561      	strb	r1, [r4, #21]
 8012990:	1b9e      	subs	r6, r3, r6
 8012992:	f080 0001 	eor.w	r0, r0, #1
 8012996:	60a2      	str	r2, [r4, #8]
 8012998:	6126      	str	r6, [r4, #16]
 801299a:	b002      	add	sp, #8
 801299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a0:	2104      	movs	r1, #4
 80129a2:	4620      	mov	r0, r4
 80129a4:	f000 fc14 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80129a8:	b1d0      	cbz	r0, 80129e0 <ucdr_serialize_int32_t+0xd0>
 80129aa:	7d23      	ldrb	r3, [r4, #20]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	68a3      	ldr	r3, [r4, #8]
 80129b0:	d01c      	beq.n	80129ec <ucdr_serialize_int32_t+0xdc>
 80129b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80129b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80129be:	7018      	strb	r0, [r3, #0]
 80129c0:	68a3      	ldr	r3, [r4, #8]
 80129c2:	705a      	strb	r2, [r3, #1]
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129ca:	7099      	strb	r1, [r3, #2]
 80129cc:	68a3      	ldr	r3, [r4, #8]
 80129ce:	70da      	strb	r2, [r3, #3]
 80129d0:	2104      	movs	r1, #4
 80129d2:	68a2      	ldr	r2, [r4, #8]
 80129d4:	6923      	ldr	r3, [r4, #16]
 80129d6:	440a      	add	r2, r1
 80129d8:	7561      	strb	r1, [r4, #21]
 80129da:	440b      	add	r3, r1
 80129dc:	60a2      	str	r2, [r4, #8]
 80129de:	6123      	str	r3, [r4, #16]
 80129e0:	7da0      	ldrb	r0, [r4, #22]
 80129e2:	f080 0001 	eor.w	r0, r0, #1
 80129e6:	b002      	add	sp, #8
 80129e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ec:	9a01      	ldr	r2, [sp, #4]
 80129ee:	601a      	str	r2, [r3, #0]
 80129f0:	e7ee      	b.n	80129d0 <ucdr_serialize_int32_t+0xc0>
 80129f2:	68a2      	ldr	r2, [r4, #8]
 80129f4:	6923      	ldr	r3, [r4, #16]
 80129f6:	7da0      	ldrb	r0, [r4, #22]
 80129f8:	1b92      	subs	r2, r2, r6
 80129fa:	1b9b      	subs	r3, r3, r6
 80129fc:	7567      	strb	r7, [r4, #21]
 80129fe:	f080 0001 	eor.w	r0, r0, #1
 8012a02:	60a2      	str	r2, [r4, #8]
 8012a04:	6123      	str	r3, [r4, #16]
 8012a06:	b002      	add	sp, #8
 8012a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a0c:	68a3      	ldr	r3, [r4, #8]
 8012a0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a12:	701a      	strb	r2, [r3, #0]
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a1a:	701a      	strb	r2, [r3, #0]
 8012a1c:	68a3      	ldr	r3, [r4, #8]
 8012a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a22:	701a      	strb	r2, [r3, #0]
 8012a24:	e7ad      	b.n	8012982 <ucdr_serialize_int32_t+0x72>
 8012a26:	4628      	mov	r0, r5
 8012a28:	ad01      	add	r5, sp, #4
 8012a2a:	4632      	mov	r2, r6
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	f00e fa4e 	bl	8020ece <memcpy>
 8012a32:	4642      	mov	r2, r8
 8012a34:	19a9      	adds	r1, r5, r6
 8012a36:	68a0      	ldr	r0, [r4, #8]
 8012a38:	f00e fa49 	bl	8020ece <memcpy>
 8012a3c:	e7a1      	b.n	8012982 <ucdr_serialize_int32_t+0x72>
 8012a3e:	bf00      	nop

08012a40 <ucdr_deserialize_int32_t>:
 8012a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a44:	4604      	mov	r4, r0
 8012a46:	460d      	mov	r5, r1
 8012a48:	2104      	movs	r1, #4
 8012a4a:	f000 fc15 	bl	8013278 <ucdr_buffer_alignment>
 8012a4e:	4601      	mov	r1, r0
 8012a50:	4620      	mov	r0, r4
 8012a52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012a56:	f000 fc57 	bl	8013308 <ucdr_advance_buffer>
 8012a5a:	2104      	movs	r1, #4
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f000 fbab 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d138      	bne.n	8012ad8 <ucdr_deserialize_int32_t+0x98>
 8012a66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012a6a:	42b7      	cmp	r7, r6
 8012a6c:	d92f      	bls.n	8012ace <ucdr_deserialize_int32_t+0x8e>
 8012a6e:	6923      	ldr	r3, [r4, #16]
 8012a70:	4620      	mov	r0, r4
 8012a72:	60a7      	str	r7, [r4, #8]
 8012a74:	1bbf      	subs	r7, r7, r6
 8012a76:	443b      	add	r3, r7
 8012a78:	f1c7 0904 	rsb	r9, r7, #4
 8012a7c:	6123      	str	r3, [r4, #16]
 8012a7e:	4649      	mov	r1, r9
 8012a80:	f000 fba6 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d046      	beq.n	8012b16 <ucdr_deserialize_int32_t+0xd6>
 8012a88:	7d23      	ldrb	r3, [r4, #20]
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d05c      	beq.n	8012b48 <ucdr_deserialize_int32_t+0x108>
 8012a8e:	78f3      	ldrb	r3, [r6, #3]
 8012a90:	702b      	strb	r3, [r5, #0]
 8012a92:	2f00      	cmp	r7, #0
 8012a94:	d04c      	beq.n	8012b30 <ucdr_deserialize_int32_t+0xf0>
 8012a96:	78b3      	ldrb	r3, [r6, #2]
 8012a98:	2f01      	cmp	r7, #1
 8012a9a:	706b      	strb	r3, [r5, #1]
 8012a9c:	f105 0302 	add.w	r3, r5, #2
 8012aa0:	d04a      	beq.n	8012b38 <ucdr_deserialize_int32_t+0xf8>
 8012aa2:	7873      	ldrb	r3, [r6, #1]
 8012aa4:	2f02      	cmp	r7, #2
 8012aa6:	70ab      	strb	r3, [r5, #2]
 8012aa8:	f105 0303 	add.w	r3, r5, #3
 8012aac:	d048      	beq.n	8012b40 <ucdr_deserialize_int32_t+0x100>
 8012aae:	7833      	ldrb	r3, [r6, #0]
 8012ab0:	70eb      	strb	r3, [r5, #3]
 8012ab2:	6923      	ldr	r3, [r4, #16]
 8012ab4:	2104      	movs	r1, #4
 8012ab6:	68a2      	ldr	r2, [r4, #8]
 8012ab8:	3304      	adds	r3, #4
 8012aba:	7da0      	ldrb	r0, [r4, #22]
 8012abc:	444a      	add	r2, r9
 8012abe:	7561      	strb	r1, [r4, #21]
 8012ac0:	1bdb      	subs	r3, r3, r7
 8012ac2:	f080 0001 	eor.w	r0, r0, #1
 8012ac6:	60a2      	str	r2, [r4, #8]
 8012ac8:	6123      	str	r3, [r4, #16]
 8012aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ace:	2104      	movs	r1, #4
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f000 fb7d 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012ad6:	b1b0      	cbz	r0, 8012b06 <ucdr_deserialize_int32_t+0xc6>
 8012ad8:	7d23      	ldrb	r3, [r4, #20]
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	68a3      	ldr	r3, [r4, #8]
 8012ade:	d017      	beq.n	8012b10 <ucdr_deserialize_int32_t+0xd0>
 8012ae0:	78db      	ldrb	r3, [r3, #3]
 8012ae2:	702b      	strb	r3, [r5, #0]
 8012ae4:	68a3      	ldr	r3, [r4, #8]
 8012ae6:	789b      	ldrb	r3, [r3, #2]
 8012ae8:	706b      	strb	r3, [r5, #1]
 8012aea:	68a3      	ldr	r3, [r4, #8]
 8012aec:	785b      	ldrb	r3, [r3, #1]
 8012aee:	70ab      	strb	r3, [r5, #2]
 8012af0:	68a3      	ldr	r3, [r4, #8]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	70eb      	strb	r3, [r5, #3]
 8012af6:	2104      	movs	r1, #4
 8012af8:	68a2      	ldr	r2, [r4, #8]
 8012afa:	6923      	ldr	r3, [r4, #16]
 8012afc:	440a      	add	r2, r1
 8012afe:	7561      	strb	r1, [r4, #21]
 8012b00:	440b      	add	r3, r1
 8012b02:	60a2      	str	r2, [r4, #8]
 8012b04:	6123      	str	r3, [r4, #16]
 8012b06:	7da0      	ldrb	r0, [r4, #22]
 8012b08:	f080 0001 	eor.w	r0, r0, #1
 8012b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	602b      	str	r3, [r5, #0]
 8012b14:	e7ef      	b.n	8012af6 <ucdr_deserialize_int32_t+0xb6>
 8012b16:	68a2      	ldr	r2, [r4, #8]
 8012b18:	6923      	ldr	r3, [r4, #16]
 8012b1a:	1bd2      	subs	r2, r2, r7
 8012b1c:	7da0      	ldrb	r0, [r4, #22]
 8012b1e:	1bdb      	subs	r3, r3, r7
 8012b20:	f884 8015 	strb.w	r8, [r4, #21]
 8012b24:	f080 0001 	eor.w	r0, r0, #1
 8012b28:	60a2      	str	r2, [r4, #8]
 8012b2a:	6123      	str	r3, [r4, #16]
 8012b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b30:	68a3      	ldr	r3, [r4, #8]
 8012b32:	789b      	ldrb	r3, [r3, #2]
 8012b34:	706b      	strb	r3, [r5, #1]
 8012b36:	1cab      	adds	r3, r5, #2
 8012b38:	68a2      	ldr	r2, [r4, #8]
 8012b3a:	7852      	ldrb	r2, [r2, #1]
 8012b3c:	f803 2b01 	strb.w	r2, [r3], #1
 8012b40:	68a2      	ldr	r2, [r4, #8]
 8012b42:	7812      	ldrb	r2, [r2, #0]
 8012b44:	701a      	strb	r2, [r3, #0]
 8012b46:	e7b4      	b.n	8012ab2 <ucdr_deserialize_int32_t+0x72>
 8012b48:	4631      	mov	r1, r6
 8012b4a:	463a      	mov	r2, r7
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f00e f9be 	bl	8020ece <memcpy>
 8012b52:	464a      	mov	r2, r9
 8012b54:	19e8      	adds	r0, r5, r7
 8012b56:	68a1      	ldr	r1, [r4, #8]
 8012b58:	f00e f9b9 	bl	8020ece <memcpy>
 8012b5c:	e7a9      	b.n	8012ab2 <ucdr_deserialize_int32_t+0x72>
 8012b5e:	bf00      	nop

08012b60 <ucdr_serialize_int64_t>:
 8012b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b64:	4604      	mov	r4, r0
 8012b66:	b082      	sub	sp, #8
 8012b68:	2108      	movs	r1, #8
 8012b6a:	e9cd 2300 	strd	r2, r3, [sp]
 8012b6e:	f000 fb83 	bl	8013278 <ucdr_buffer_alignment>
 8012b72:	4601      	mov	r1, r0
 8012b74:	4620      	mov	r0, r4
 8012b76:	7d67      	ldrb	r7, [r4, #21]
 8012b78:	f000 fbc6 	bl	8013308 <ucdr_advance_buffer>
 8012b7c:	2108      	movs	r1, #8
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 fb1a 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d14e      	bne.n	8012c26 <ucdr_serialize_int64_t+0xc6>
 8012b88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012b8c:	42ab      	cmp	r3, r5
 8012b8e:	d945      	bls.n	8012c1c <ucdr_serialize_int64_t+0xbc>
 8012b90:	1b5e      	subs	r6, r3, r5
 8012b92:	60a3      	str	r3, [r4, #8]
 8012b94:	6923      	ldr	r3, [r4, #16]
 8012b96:	4620      	mov	r0, r4
 8012b98:	f1c6 0808 	rsb	r8, r6, #8
 8012b9c:	4433      	add	r3, r6
 8012b9e:	4641      	mov	r1, r8
 8012ba0:	6123      	str	r3, [r4, #16]
 8012ba2:	f000 fb15 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d074      	beq.n	8012c94 <ucdr_serialize_int64_t+0x134>
 8012baa:	7d23      	ldrb	r3, [r4, #20]
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	f000 809b 	beq.w	8012ce8 <ucdr_serialize_int64_t+0x188>
 8012bb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012bb6:	702b      	strb	r3, [r5, #0]
 8012bb8:	2e00      	cmp	r6, #0
 8012bba:	d078      	beq.n	8012cae <ucdr_serialize_int64_t+0x14e>
 8012bbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012bc0:	2e01      	cmp	r6, #1
 8012bc2:	706b      	strb	r3, [r5, #1]
 8012bc4:	d077      	beq.n	8012cb6 <ucdr_serialize_int64_t+0x156>
 8012bc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012bca:	2e02      	cmp	r6, #2
 8012bcc:	70ab      	strb	r3, [r5, #2]
 8012bce:	d076      	beq.n	8012cbe <ucdr_serialize_int64_t+0x15e>
 8012bd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012bd4:	2e03      	cmp	r6, #3
 8012bd6:	70eb      	strb	r3, [r5, #3]
 8012bd8:	d075      	beq.n	8012cc6 <ucdr_serialize_int64_t+0x166>
 8012bda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012bde:	2e04      	cmp	r6, #4
 8012be0:	712b      	strb	r3, [r5, #4]
 8012be2:	d074      	beq.n	8012cce <ucdr_serialize_int64_t+0x16e>
 8012be4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012be8:	2e05      	cmp	r6, #5
 8012bea:	716b      	strb	r3, [r5, #5]
 8012bec:	d073      	beq.n	8012cd6 <ucdr_serialize_int64_t+0x176>
 8012bee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012bf2:	2e06      	cmp	r6, #6
 8012bf4:	71ab      	strb	r3, [r5, #6]
 8012bf6:	d072      	beq.n	8012cde <ucdr_serialize_int64_t+0x17e>
 8012bf8:	f89d 3000 	ldrb.w	r3, [sp]
 8012bfc:	71eb      	strb	r3, [r5, #7]
 8012bfe:	6923      	ldr	r3, [r4, #16]
 8012c00:	2108      	movs	r1, #8
 8012c02:	68a2      	ldr	r2, [r4, #8]
 8012c04:	3308      	adds	r3, #8
 8012c06:	7da0      	ldrb	r0, [r4, #22]
 8012c08:	4442      	add	r2, r8
 8012c0a:	7561      	strb	r1, [r4, #21]
 8012c0c:	1b9e      	subs	r6, r3, r6
 8012c0e:	f080 0001 	eor.w	r0, r0, #1
 8012c12:	60a2      	str	r2, [r4, #8]
 8012c14:	6126      	str	r6, [r4, #16]
 8012c16:	b002      	add	sp, #8
 8012c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c1c:	2108      	movs	r1, #8
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f000 fad6 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012c24:	b350      	cbz	r0, 8012c7c <ucdr_serialize_int64_t+0x11c>
 8012c26:	7d23      	ldrb	r3, [r4, #20]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d02d      	beq.n	8012c88 <ucdr_serialize_int64_t+0x128>
 8012c2c:	68a3      	ldr	r3, [r4, #8]
 8012c2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012c32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c36:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012c3a:	7018      	strb	r0, [r3, #0]
 8012c3c:	68a3      	ldr	r3, [r4, #8]
 8012c3e:	705a      	strb	r2, [r3, #1]
 8012c40:	68a3      	ldr	r3, [r4, #8]
 8012c42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012c46:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012c4a:	7099      	strb	r1, [r3, #2]
 8012c4c:	68a3      	ldr	r3, [r4, #8]
 8012c4e:	70da      	strb	r2, [r3, #3]
 8012c50:	68a3      	ldr	r3, [r4, #8]
 8012c52:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012c56:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012c5a:	7118      	strb	r0, [r3, #4]
 8012c5c:	68a3      	ldr	r3, [r4, #8]
 8012c5e:	715a      	strb	r2, [r3, #5]
 8012c60:	68a3      	ldr	r3, [r4, #8]
 8012c62:	f89d 2000 	ldrb.w	r2, [sp]
 8012c66:	7199      	strb	r1, [r3, #6]
 8012c68:	68a3      	ldr	r3, [r4, #8]
 8012c6a:	71da      	strb	r2, [r3, #7]
 8012c6c:	2108      	movs	r1, #8
 8012c6e:	68a2      	ldr	r2, [r4, #8]
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	440a      	add	r2, r1
 8012c74:	7561      	strb	r1, [r4, #21]
 8012c76:	440b      	add	r3, r1
 8012c78:	60a2      	str	r2, [r4, #8]
 8012c7a:	6123      	str	r3, [r4, #16]
 8012c7c:	7da0      	ldrb	r0, [r4, #22]
 8012c7e:	f080 0001 	eor.w	r0, r0, #1
 8012c82:	b002      	add	sp, #8
 8012c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c88:	466b      	mov	r3, sp
 8012c8a:	68a2      	ldr	r2, [r4, #8]
 8012c8c:	cb03      	ldmia	r3!, {r0, r1}
 8012c8e:	6010      	str	r0, [r2, #0]
 8012c90:	6051      	str	r1, [r2, #4]
 8012c92:	e7eb      	b.n	8012c6c <ucdr_serialize_int64_t+0x10c>
 8012c94:	68a2      	ldr	r2, [r4, #8]
 8012c96:	6923      	ldr	r3, [r4, #16]
 8012c98:	7da0      	ldrb	r0, [r4, #22]
 8012c9a:	1b92      	subs	r2, r2, r6
 8012c9c:	1b9b      	subs	r3, r3, r6
 8012c9e:	7567      	strb	r7, [r4, #21]
 8012ca0:	f080 0001 	eor.w	r0, r0, #1
 8012ca4:	60a2      	str	r2, [r4, #8]
 8012ca6:	6123      	str	r3, [r4, #16]
 8012ca8:	b002      	add	sp, #8
 8012caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cae:	68a3      	ldr	r3, [r4, #8]
 8012cb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cb4:	701a      	strb	r2, [r3, #0]
 8012cb6:	68a3      	ldr	r3, [r4, #8]
 8012cb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012cbc:	701a      	strb	r2, [r3, #0]
 8012cbe:	68a3      	ldr	r3, [r4, #8]
 8012cc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012cc4:	701a      	strb	r2, [r3, #0]
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	68a3      	ldr	r3, [r4, #8]
 8012cd0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012cd4:	701a      	strb	r2, [r3, #0]
 8012cd6:	68a3      	ldr	r3, [r4, #8]
 8012cd8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012cdc:	701a      	strb	r2, [r3, #0]
 8012cde:	68a3      	ldr	r3, [r4, #8]
 8012ce0:	f89d 2000 	ldrb.w	r2, [sp]
 8012ce4:	701a      	strb	r2, [r3, #0]
 8012ce6:	e78a      	b.n	8012bfe <ucdr_serialize_int64_t+0x9e>
 8012ce8:	4628      	mov	r0, r5
 8012cea:	466d      	mov	r5, sp
 8012cec:	4632      	mov	r2, r6
 8012cee:	4629      	mov	r1, r5
 8012cf0:	f00e f8ed 	bl	8020ece <memcpy>
 8012cf4:	4642      	mov	r2, r8
 8012cf6:	19a9      	adds	r1, r5, r6
 8012cf8:	68a0      	ldr	r0, [r4, #8]
 8012cfa:	f00e f8e8 	bl	8020ece <memcpy>
 8012cfe:	e77e      	b.n	8012bfe <ucdr_serialize_int64_t+0x9e>

08012d00 <ucdr_deserialize_int64_t>:
 8012d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d04:	4604      	mov	r4, r0
 8012d06:	460d      	mov	r5, r1
 8012d08:	2108      	movs	r1, #8
 8012d0a:	f000 fab5 	bl	8013278 <ucdr_buffer_alignment>
 8012d0e:	4601      	mov	r1, r0
 8012d10:	4620      	mov	r0, r4
 8012d12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d16:	f000 faf7 	bl	8013308 <ucdr_advance_buffer>
 8012d1a:	2108      	movs	r1, #8
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 fa4b 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d151      	bne.n	8012dca <ucdr_deserialize_int64_t+0xca>
 8012d26:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012d2a:	42be      	cmp	r6, r7
 8012d2c:	d948      	bls.n	8012dc0 <ucdr_deserialize_int64_t+0xc0>
 8012d2e:	6923      	ldr	r3, [r4, #16]
 8012d30:	4620      	mov	r0, r4
 8012d32:	60a6      	str	r6, [r4, #8]
 8012d34:	1bf6      	subs	r6, r6, r7
 8012d36:	4433      	add	r3, r6
 8012d38:	f1c6 0908 	rsb	r9, r6, #8
 8012d3c:	6123      	str	r3, [r4, #16]
 8012d3e:	4649      	mov	r1, r9
 8012d40:	f000 fa46 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d06d      	beq.n	8012e24 <ucdr_deserialize_int64_t+0x124>
 8012d48:	7d23      	ldrb	r3, [r4, #20]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	f000 8093 	beq.w	8012e76 <ucdr_deserialize_int64_t+0x176>
 8012d50:	79fb      	ldrb	r3, [r7, #7]
 8012d52:	702b      	strb	r3, [r5, #0]
 8012d54:	2e00      	cmp	r6, #0
 8012d56:	d072      	beq.n	8012e3e <ucdr_deserialize_int64_t+0x13e>
 8012d58:	79bb      	ldrb	r3, [r7, #6]
 8012d5a:	2e01      	cmp	r6, #1
 8012d5c:	706b      	strb	r3, [r5, #1]
 8012d5e:	f105 0302 	add.w	r3, r5, #2
 8012d62:	d070      	beq.n	8012e46 <ucdr_deserialize_int64_t+0x146>
 8012d64:	797b      	ldrb	r3, [r7, #5]
 8012d66:	2e02      	cmp	r6, #2
 8012d68:	70ab      	strb	r3, [r5, #2]
 8012d6a:	f105 0303 	add.w	r3, r5, #3
 8012d6e:	d06e      	beq.n	8012e4e <ucdr_deserialize_int64_t+0x14e>
 8012d70:	793b      	ldrb	r3, [r7, #4]
 8012d72:	2e03      	cmp	r6, #3
 8012d74:	70eb      	strb	r3, [r5, #3]
 8012d76:	f105 0304 	add.w	r3, r5, #4
 8012d7a:	d06c      	beq.n	8012e56 <ucdr_deserialize_int64_t+0x156>
 8012d7c:	78fb      	ldrb	r3, [r7, #3]
 8012d7e:	2e04      	cmp	r6, #4
 8012d80:	712b      	strb	r3, [r5, #4]
 8012d82:	f105 0305 	add.w	r3, r5, #5
 8012d86:	d06a      	beq.n	8012e5e <ucdr_deserialize_int64_t+0x15e>
 8012d88:	78bb      	ldrb	r3, [r7, #2]
 8012d8a:	2e05      	cmp	r6, #5
 8012d8c:	716b      	strb	r3, [r5, #5]
 8012d8e:	f105 0306 	add.w	r3, r5, #6
 8012d92:	d068      	beq.n	8012e66 <ucdr_deserialize_int64_t+0x166>
 8012d94:	787b      	ldrb	r3, [r7, #1]
 8012d96:	2e06      	cmp	r6, #6
 8012d98:	71ab      	strb	r3, [r5, #6]
 8012d9a:	f105 0307 	add.w	r3, r5, #7
 8012d9e:	d066      	beq.n	8012e6e <ucdr_deserialize_int64_t+0x16e>
 8012da0:	783b      	ldrb	r3, [r7, #0]
 8012da2:	71eb      	strb	r3, [r5, #7]
 8012da4:	6923      	ldr	r3, [r4, #16]
 8012da6:	2108      	movs	r1, #8
 8012da8:	68a2      	ldr	r2, [r4, #8]
 8012daa:	3308      	adds	r3, #8
 8012dac:	7da0      	ldrb	r0, [r4, #22]
 8012dae:	444a      	add	r2, r9
 8012db0:	7561      	strb	r1, [r4, #21]
 8012db2:	1b9e      	subs	r6, r3, r6
 8012db4:	f080 0001 	eor.w	r0, r0, #1
 8012db8:	60a2      	str	r2, [r4, #8]
 8012dba:	6126      	str	r6, [r4, #16]
 8012dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dc0:	2108      	movs	r1, #8
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 fa04 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012dc8:	b310      	cbz	r0, 8012e10 <ucdr_deserialize_int64_t+0x110>
 8012dca:	7d23      	ldrb	r3, [r4, #20]
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	68a3      	ldr	r3, [r4, #8]
 8012dd0:	d023      	beq.n	8012e1a <ucdr_deserialize_int64_t+0x11a>
 8012dd2:	79db      	ldrb	r3, [r3, #7]
 8012dd4:	702b      	strb	r3, [r5, #0]
 8012dd6:	68a3      	ldr	r3, [r4, #8]
 8012dd8:	799b      	ldrb	r3, [r3, #6]
 8012dda:	706b      	strb	r3, [r5, #1]
 8012ddc:	68a3      	ldr	r3, [r4, #8]
 8012dde:	795b      	ldrb	r3, [r3, #5]
 8012de0:	70ab      	strb	r3, [r5, #2]
 8012de2:	68a3      	ldr	r3, [r4, #8]
 8012de4:	791b      	ldrb	r3, [r3, #4]
 8012de6:	70eb      	strb	r3, [r5, #3]
 8012de8:	68a3      	ldr	r3, [r4, #8]
 8012dea:	78db      	ldrb	r3, [r3, #3]
 8012dec:	712b      	strb	r3, [r5, #4]
 8012dee:	68a3      	ldr	r3, [r4, #8]
 8012df0:	789b      	ldrb	r3, [r3, #2]
 8012df2:	716b      	strb	r3, [r5, #5]
 8012df4:	68a3      	ldr	r3, [r4, #8]
 8012df6:	785b      	ldrb	r3, [r3, #1]
 8012df8:	71ab      	strb	r3, [r5, #6]
 8012dfa:	68a3      	ldr	r3, [r4, #8]
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	71eb      	strb	r3, [r5, #7]
 8012e00:	2108      	movs	r1, #8
 8012e02:	68a2      	ldr	r2, [r4, #8]
 8012e04:	6923      	ldr	r3, [r4, #16]
 8012e06:	440a      	add	r2, r1
 8012e08:	7561      	strb	r1, [r4, #21]
 8012e0a:	440b      	add	r3, r1
 8012e0c:	60a2      	str	r2, [r4, #8]
 8012e0e:	6123      	str	r3, [r4, #16]
 8012e10:	7da0      	ldrb	r0, [r4, #22]
 8012e12:	f080 0001 	eor.w	r0, r0, #1
 8012e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e1a:	681a      	ldr	r2, [r3, #0]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	602a      	str	r2, [r5, #0]
 8012e20:	606b      	str	r3, [r5, #4]
 8012e22:	e7ed      	b.n	8012e00 <ucdr_deserialize_int64_t+0x100>
 8012e24:	68a2      	ldr	r2, [r4, #8]
 8012e26:	6923      	ldr	r3, [r4, #16]
 8012e28:	1b92      	subs	r2, r2, r6
 8012e2a:	7da0      	ldrb	r0, [r4, #22]
 8012e2c:	1b9b      	subs	r3, r3, r6
 8012e2e:	f884 8015 	strb.w	r8, [r4, #21]
 8012e32:	f080 0001 	eor.w	r0, r0, #1
 8012e36:	60a2      	str	r2, [r4, #8]
 8012e38:	6123      	str	r3, [r4, #16]
 8012e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e3e:	68a3      	ldr	r3, [r4, #8]
 8012e40:	799b      	ldrb	r3, [r3, #6]
 8012e42:	706b      	strb	r3, [r5, #1]
 8012e44:	1cab      	adds	r3, r5, #2
 8012e46:	68a2      	ldr	r2, [r4, #8]
 8012e48:	7952      	ldrb	r2, [r2, #5]
 8012e4a:	f803 2b01 	strb.w	r2, [r3], #1
 8012e4e:	68a2      	ldr	r2, [r4, #8]
 8012e50:	7912      	ldrb	r2, [r2, #4]
 8012e52:	f803 2b01 	strb.w	r2, [r3], #1
 8012e56:	68a2      	ldr	r2, [r4, #8]
 8012e58:	78d2      	ldrb	r2, [r2, #3]
 8012e5a:	f803 2b01 	strb.w	r2, [r3], #1
 8012e5e:	68a2      	ldr	r2, [r4, #8]
 8012e60:	7892      	ldrb	r2, [r2, #2]
 8012e62:	f803 2b01 	strb.w	r2, [r3], #1
 8012e66:	68a2      	ldr	r2, [r4, #8]
 8012e68:	7852      	ldrb	r2, [r2, #1]
 8012e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8012e6e:	68a2      	ldr	r2, [r4, #8]
 8012e70:	7812      	ldrb	r2, [r2, #0]
 8012e72:	701a      	strb	r2, [r3, #0]
 8012e74:	e796      	b.n	8012da4 <ucdr_deserialize_int64_t+0xa4>
 8012e76:	4639      	mov	r1, r7
 8012e78:	4632      	mov	r2, r6
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f00e f827 	bl	8020ece <memcpy>
 8012e80:	464a      	mov	r2, r9
 8012e82:	19a8      	adds	r0, r5, r6
 8012e84:	68a1      	ldr	r1, [r4, #8]
 8012e86:	f00e f822 	bl	8020ece <memcpy>
 8012e8a:	e78b      	b.n	8012da4 <ucdr_deserialize_int64_t+0xa4>

08012e8c <ucdr_serialize_double>:
 8012e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e90:	4604      	mov	r4, r0
 8012e92:	b082      	sub	sp, #8
 8012e94:	2108      	movs	r1, #8
 8012e96:	ed8d 0b00 	vstr	d0, [sp]
 8012e9a:	f000 f9ed 	bl	8013278 <ucdr_buffer_alignment>
 8012e9e:	4601      	mov	r1, r0
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	7d67      	ldrb	r7, [r4, #21]
 8012ea4:	f000 fa30 	bl	8013308 <ucdr_advance_buffer>
 8012ea8:	2108      	movs	r1, #8
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f000 f984 	bl	80131b8 <ucdr_check_buffer_available_for>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	d14e      	bne.n	8012f52 <ucdr_serialize_double+0xc6>
 8012eb4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012eb8:	42ab      	cmp	r3, r5
 8012eba:	d945      	bls.n	8012f48 <ucdr_serialize_double+0xbc>
 8012ebc:	1b5e      	subs	r6, r3, r5
 8012ebe:	60a3      	str	r3, [r4, #8]
 8012ec0:	6923      	ldr	r3, [r4, #16]
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	f1c6 0808 	rsb	r8, r6, #8
 8012ec8:	4433      	add	r3, r6
 8012eca:	4641      	mov	r1, r8
 8012ecc:	6123      	str	r3, [r4, #16]
 8012ece:	f000 f97f 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d074      	beq.n	8012fc0 <ucdr_serialize_double+0x134>
 8012ed6:	7d23      	ldrb	r3, [r4, #20]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	f000 809b 	beq.w	8013014 <ucdr_serialize_double+0x188>
 8012ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012ee2:	702b      	strb	r3, [r5, #0]
 8012ee4:	2e00      	cmp	r6, #0
 8012ee6:	d078      	beq.n	8012fda <ucdr_serialize_double+0x14e>
 8012ee8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012eec:	2e01      	cmp	r6, #1
 8012eee:	706b      	strb	r3, [r5, #1]
 8012ef0:	d077      	beq.n	8012fe2 <ucdr_serialize_double+0x156>
 8012ef2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012ef6:	2e02      	cmp	r6, #2
 8012ef8:	70ab      	strb	r3, [r5, #2]
 8012efa:	d076      	beq.n	8012fea <ucdr_serialize_double+0x15e>
 8012efc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f00:	2e03      	cmp	r6, #3
 8012f02:	70eb      	strb	r3, [r5, #3]
 8012f04:	d075      	beq.n	8012ff2 <ucdr_serialize_double+0x166>
 8012f06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012f0a:	2e04      	cmp	r6, #4
 8012f0c:	712b      	strb	r3, [r5, #4]
 8012f0e:	d074      	beq.n	8012ffa <ucdr_serialize_double+0x16e>
 8012f10:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012f14:	2e05      	cmp	r6, #5
 8012f16:	716b      	strb	r3, [r5, #5]
 8012f18:	d073      	beq.n	8013002 <ucdr_serialize_double+0x176>
 8012f1a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012f1e:	2e06      	cmp	r6, #6
 8012f20:	71ab      	strb	r3, [r5, #6]
 8012f22:	d072      	beq.n	801300a <ucdr_serialize_double+0x17e>
 8012f24:	f89d 3000 	ldrb.w	r3, [sp]
 8012f28:	71eb      	strb	r3, [r5, #7]
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	2108      	movs	r1, #8
 8012f2e:	68a2      	ldr	r2, [r4, #8]
 8012f30:	3308      	adds	r3, #8
 8012f32:	7da0      	ldrb	r0, [r4, #22]
 8012f34:	4442      	add	r2, r8
 8012f36:	7561      	strb	r1, [r4, #21]
 8012f38:	1b9e      	subs	r6, r3, r6
 8012f3a:	f080 0001 	eor.w	r0, r0, #1
 8012f3e:	60a2      	str	r2, [r4, #8]
 8012f40:	6126      	str	r6, [r4, #16]
 8012f42:	b002      	add	sp, #8
 8012f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f48:	2108      	movs	r1, #8
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f000 f940 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8012f50:	b350      	cbz	r0, 8012fa8 <ucdr_serialize_double+0x11c>
 8012f52:	7d23      	ldrb	r3, [r4, #20]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d02d      	beq.n	8012fb4 <ucdr_serialize_double+0x128>
 8012f58:	68a3      	ldr	r3, [r4, #8]
 8012f5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012f5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f62:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012f66:	7018      	strb	r0, [r3, #0]
 8012f68:	68a3      	ldr	r3, [r4, #8]
 8012f6a:	705a      	strb	r2, [r3, #1]
 8012f6c:	68a3      	ldr	r3, [r4, #8]
 8012f6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f72:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012f76:	7099      	strb	r1, [r3, #2]
 8012f78:	68a3      	ldr	r3, [r4, #8]
 8012f7a:	70da      	strb	r2, [r3, #3]
 8012f7c:	68a3      	ldr	r3, [r4, #8]
 8012f7e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f82:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012f86:	7118      	strb	r0, [r3, #4]
 8012f88:	68a3      	ldr	r3, [r4, #8]
 8012f8a:	715a      	strb	r2, [r3, #5]
 8012f8c:	68a3      	ldr	r3, [r4, #8]
 8012f8e:	f89d 2000 	ldrb.w	r2, [sp]
 8012f92:	7199      	strb	r1, [r3, #6]
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	71da      	strb	r2, [r3, #7]
 8012f98:	2108      	movs	r1, #8
 8012f9a:	68a2      	ldr	r2, [r4, #8]
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	440a      	add	r2, r1
 8012fa0:	7561      	strb	r1, [r4, #21]
 8012fa2:	440b      	add	r3, r1
 8012fa4:	60a2      	str	r2, [r4, #8]
 8012fa6:	6123      	str	r3, [r4, #16]
 8012fa8:	7da0      	ldrb	r0, [r4, #22]
 8012faa:	f080 0001 	eor.w	r0, r0, #1
 8012fae:	b002      	add	sp, #8
 8012fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb4:	466b      	mov	r3, sp
 8012fb6:	68a2      	ldr	r2, [r4, #8]
 8012fb8:	cb03      	ldmia	r3!, {r0, r1}
 8012fba:	6010      	str	r0, [r2, #0]
 8012fbc:	6051      	str	r1, [r2, #4]
 8012fbe:	e7eb      	b.n	8012f98 <ucdr_serialize_double+0x10c>
 8012fc0:	68a2      	ldr	r2, [r4, #8]
 8012fc2:	6923      	ldr	r3, [r4, #16]
 8012fc4:	7da0      	ldrb	r0, [r4, #22]
 8012fc6:	1b92      	subs	r2, r2, r6
 8012fc8:	1b9b      	subs	r3, r3, r6
 8012fca:	7567      	strb	r7, [r4, #21]
 8012fcc:	f080 0001 	eor.w	r0, r0, #1
 8012fd0:	60a2      	str	r2, [r4, #8]
 8012fd2:	6123      	str	r3, [r4, #16]
 8012fd4:	b002      	add	sp, #8
 8012fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fda:	68a3      	ldr	r3, [r4, #8]
 8012fdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012fe0:	701a      	strb	r2, [r3, #0]
 8012fe2:	68a3      	ldr	r3, [r4, #8]
 8012fe4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012fe8:	701a      	strb	r2, [r3, #0]
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012ff0:	701a      	strb	r2, [r3, #0]
 8012ff2:	68a3      	ldr	r3, [r4, #8]
 8012ff4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	68a3      	ldr	r3, [r4, #8]
 8012ffc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013000:	701a      	strb	r2, [r3, #0]
 8013002:	68a3      	ldr	r3, [r4, #8]
 8013004:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	68a3      	ldr	r3, [r4, #8]
 801300c:	f89d 2000 	ldrb.w	r2, [sp]
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	e78a      	b.n	8012f2a <ucdr_serialize_double+0x9e>
 8013014:	4628      	mov	r0, r5
 8013016:	466d      	mov	r5, sp
 8013018:	4632      	mov	r2, r6
 801301a:	4629      	mov	r1, r5
 801301c:	f00d ff57 	bl	8020ece <memcpy>
 8013020:	4642      	mov	r2, r8
 8013022:	19a9      	adds	r1, r5, r6
 8013024:	68a0      	ldr	r0, [r4, #8]
 8013026:	f00d ff52 	bl	8020ece <memcpy>
 801302a:	e77e      	b.n	8012f2a <ucdr_serialize_double+0x9e>

0801302c <ucdr_deserialize_double>:
 801302c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013030:	4604      	mov	r4, r0
 8013032:	460d      	mov	r5, r1
 8013034:	2108      	movs	r1, #8
 8013036:	f000 f91f 	bl	8013278 <ucdr_buffer_alignment>
 801303a:	4601      	mov	r1, r0
 801303c:	4620      	mov	r0, r4
 801303e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013042:	f000 f961 	bl	8013308 <ucdr_advance_buffer>
 8013046:	2108      	movs	r1, #8
 8013048:	4620      	mov	r0, r4
 801304a:	f000 f8b5 	bl	80131b8 <ucdr_check_buffer_available_for>
 801304e:	2800      	cmp	r0, #0
 8013050:	d151      	bne.n	80130f6 <ucdr_deserialize_double+0xca>
 8013052:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013056:	42be      	cmp	r6, r7
 8013058:	d948      	bls.n	80130ec <ucdr_deserialize_double+0xc0>
 801305a:	6923      	ldr	r3, [r4, #16]
 801305c:	4620      	mov	r0, r4
 801305e:	60a6      	str	r6, [r4, #8]
 8013060:	1bf6      	subs	r6, r6, r7
 8013062:	4433      	add	r3, r6
 8013064:	f1c6 0908 	rsb	r9, r6, #8
 8013068:	6123      	str	r3, [r4, #16]
 801306a:	4649      	mov	r1, r9
 801306c:	f000 f8b0 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 8013070:	2800      	cmp	r0, #0
 8013072:	d06d      	beq.n	8013150 <ucdr_deserialize_double+0x124>
 8013074:	7d23      	ldrb	r3, [r4, #20]
 8013076:	2b01      	cmp	r3, #1
 8013078:	f000 8093 	beq.w	80131a2 <ucdr_deserialize_double+0x176>
 801307c:	79fb      	ldrb	r3, [r7, #7]
 801307e:	702b      	strb	r3, [r5, #0]
 8013080:	2e00      	cmp	r6, #0
 8013082:	d072      	beq.n	801316a <ucdr_deserialize_double+0x13e>
 8013084:	79bb      	ldrb	r3, [r7, #6]
 8013086:	2e01      	cmp	r6, #1
 8013088:	706b      	strb	r3, [r5, #1]
 801308a:	f105 0302 	add.w	r3, r5, #2
 801308e:	d070      	beq.n	8013172 <ucdr_deserialize_double+0x146>
 8013090:	797b      	ldrb	r3, [r7, #5]
 8013092:	2e02      	cmp	r6, #2
 8013094:	70ab      	strb	r3, [r5, #2]
 8013096:	f105 0303 	add.w	r3, r5, #3
 801309a:	d06e      	beq.n	801317a <ucdr_deserialize_double+0x14e>
 801309c:	793b      	ldrb	r3, [r7, #4]
 801309e:	2e03      	cmp	r6, #3
 80130a0:	70eb      	strb	r3, [r5, #3]
 80130a2:	f105 0304 	add.w	r3, r5, #4
 80130a6:	d06c      	beq.n	8013182 <ucdr_deserialize_double+0x156>
 80130a8:	78fb      	ldrb	r3, [r7, #3]
 80130aa:	2e04      	cmp	r6, #4
 80130ac:	712b      	strb	r3, [r5, #4]
 80130ae:	f105 0305 	add.w	r3, r5, #5
 80130b2:	d06a      	beq.n	801318a <ucdr_deserialize_double+0x15e>
 80130b4:	78bb      	ldrb	r3, [r7, #2]
 80130b6:	2e05      	cmp	r6, #5
 80130b8:	716b      	strb	r3, [r5, #5]
 80130ba:	f105 0306 	add.w	r3, r5, #6
 80130be:	d068      	beq.n	8013192 <ucdr_deserialize_double+0x166>
 80130c0:	787b      	ldrb	r3, [r7, #1]
 80130c2:	2e06      	cmp	r6, #6
 80130c4:	71ab      	strb	r3, [r5, #6]
 80130c6:	f105 0307 	add.w	r3, r5, #7
 80130ca:	d066      	beq.n	801319a <ucdr_deserialize_double+0x16e>
 80130cc:	783b      	ldrb	r3, [r7, #0]
 80130ce:	71eb      	strb	r3, [r5, #7]
 80130d0:	6923      	ldr	r3, [r4, #16]
 80130d2:	2108      	movs	r1, #8
 80130d4:	68a2      	ldr	r2, [r4, #8]
 80130d6:	3308      	adds	r3, #8
 80130d8:	7da0      	ldrb	r0, [r4, #22]
 80130da:	444a      	add	r2, r9
 80130dc:	7561      	strb	r1, [r4, #21]
 80130de:	1b9e      	subs	r6, r3, r6
 80130e0:	f080 0001 	eor.w	r0, r0, #1
 80130e4:	60a2      	str	r2, [r4, #8]
 80130e6:	6126      	str	r6, [r4, #16]
 80130e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ec:	2108      	movs	r1, #8
 80130ee:	4620      	mov	r0, r4
 80130f0:	f000 f86e 	bl	80131d0 <ucdr_check_final_buffer_behavior>
 80130f4:	b310      	cbz	r0, 801313c <ucdr_deserialize_double+0x110>
 80130f6:	7d23      	ldrb	r3, [r4, #20]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	68a3      	ldr	r3, [r4, #8]
 80130fc:	d023      	beq.n	8013146 <ucdr_deserialize_double+0x11a>
 80130fe:	79db      	ldrb	r3, [r3, #7]
 8013100:	702b      	strb	r3, [r5, #0]
 8013102:	68a3      	ldr	r3, [r4, #8]
 8013104:	799b      	ldrb	r3, [r3, #6]
 8013106:	706b      	strb	r3, [r5, #1]
 8013108:	68a3      	ldr	r3, [r4, #8]
 801310a:	795b      	ldrb	r3, [r3, #5]
 801310c:	70ab      	strb	r3, [r5, #2]
 801310e:	68a3      	ldr	r3, [r4, #8]
 8013110:	791b      	ldrb	r3, [r3, #4]
 8013112:	70eb      	strb	r3, [r5, #3]
 8013114:	68a3      	ldr	r3, [r4, #8]
 8013116:	78db      	ldrb	r3, [r3, #3]
 8013118:	712b      	strb	r3, [r5, #4]
 801311a:	68a3      	ldr	r3, [r4, #8]
 801311c:	789b      	ldrb	r3, [r3, #2]
 801311e:	716b      	strb	r3, [r5, #5]
 8013120:	68a3      	ldr	r3, [r4, #8]
 8013122:	785b      	ldrb	r3, [r3, #1]
 8013124:	71ab      	strb	r3, [r5, #6]
 8013126:	68a3      	ldr	r3, [r4, #8]
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	71eb      	strb	r3, [r5, #7]
 801312c:	2108      	movs	r1, #8
 801312e:	68a2      	ldr	r2, [r4, #8]
 8013130:	6923      	ldr	r3, [r4, #16]
 8013132:	440a      	add	r2, r1
 8013134:	7561      	strb	r1, [r4, #21]
 8013136:	440b      	add	r3, r1
 8013138:	60a2      	str	r2, [r4, #8]
 801313a:	6123      	str	r3, [r4, #16]
 801313c:	7da0      	ldrb	r0, [r4, #22]
 801313e:	f080 0001 	eor.w	r0, r0, #1
 8013142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013146:	681a      	ldr	r2, [r3, #0]
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	602a      	str	r2, [r5, #0]
 801314c:	606b      	str	r3, [r5, #4]
 801314e:	e7ed      	b.n	801312c <ucdr_deserialize_double+0x100>
 8013150:	68a2      	ldr	r2, [r4, #8]
 8013152:	6923      	ldr	r3, [r4, #16]
 8013154:	1b92      	subs	r2, r2, r6
 8013156:	7da0      	ldrb	r0, [r4, #22]
 8013158:	1b9b      	subs	r3, r3, r6
 801315a:	f884 8015 	strb.w	r8, [r4, #21]
 801315e:	f080 0001 	eor.w	r0, r0, #1
 8013162:	60a2      	str	r2, [r4, #8]
 8013164:	6123      	str	r3, [r4, #16]
 8013166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801316a:	68a3      	ldr	r3, [r4, #8]
 801316c:	799b      	ldrb	r3, [r3, #6]
 801316e:	706b      	strb	r3, [r5, #1]
 8013170:	1cab      	adds	r3, r5, #2
 8013172:	68a2      	ldr	r2, [r4, #8]
 8013174:	7952      	ldrb	r2, [r2, #5]
 8013176:	f803 2b01 	strb.w	r2, [r3], #1
 801317a:	68a2      	ldr	r2, [r4, #8]
 801317c:	7912      	ldrb	r2, [r2, #4]
 801317e:	f803 2b01 	strb.w	r2, [r3], #1
 8013182:	68a2      	ldr	r2, [r4, #8]
 8013184:	78d2      	ldrb	r2, [r2, #3]
 8013186:	f803 2b01 	strb.w	r2, [r3], #1
 801318a:	68a2      	ldr	r2, [r4, #8]
 801318c:	7892      	ldrb	r2, [r2, #2]
 801318e:	f803 2b01 	strb.w	r2, [r3], #1
 8013192:	68a2      	ldr	r2, [r4, #8]
 8013194:	7852      	ldrb	r2, [r2, #1]
 8013196:	f803 2b01 	strb.w	r2, [r3], #1
 801319a:	68a2      	ldr	r2, [r4, #8]
 801319c:	7812      	ldrb	r2, [r2, #0]
 801319e:	701a      	strb	r2, [r3, #0]
 80131a0:	e796      	b.n	80130d0 <ucdr_deserialize_double+0xa4>
 80131a2:	4639      	mov	r1, r7
 80131a4:	4632      	mov	r2, r6
 80131a6:	4628      	mov	r0, r5
 80131a8:	f00d fe91 	bl	8020ece <memcpy>
 80131ac:	464a      	mov	r2, r9
 80131ae:	19a8      	adds	r0, r5, r6
 80131b0:	68a1      	ldr	r1, [r4, #8]
 80131b2:	f00d fe8c 	bl	8020ece <memcpy>
 80131b6:	e78b      	b.n	80130d0 <ucdr_deserialize_double+0xa4>

080131b8 <ucdr_check_buffer_available_for>:
 80131b8:	7d83      	ldrb	r3, [r0, #22]
 80131ba:	b93b      	cbnz	r3, 80131cc <ucdr_check_buffer_available_for+0x14>
 80131bc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80131c0:	4419      	add	r1, r3
 80131c2:	4288      	cmp	r0, r1
 80131c4:	bf34      	ite	cc
 80131c6:	2000      	movcc	r0, #0
 80131c8:	2001      	movcs	r0, #1
 80131ca:	4770      	bx	lr
 80131cc:	2000      	movs	r0, #0
 80131ce:	4770      	bx	lr

080131d0 <ucdr_check_final_buffer_behavior>:
 80131d0:	7d83      	ldrb	r3, [r0, #22]
 80131d2:	b943      	cbnz	r3, 80131e6 <ucdr_check_final_buffer_behavior+0x16>
 80131d4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80131d8:	b510      	push	{r4, lr}
 80131da:	4291      	cmp	r1, r2
 80131dc:	4604      	mov	r4, r0
 80131de:	d205      	bcs.n	80131ec <ucdr_check_final_buffer_behavior+0x1c>
 80131e0:	2301      	movs	r3, #1
 80131e2:	4618      	mov	r0, r3
 80131e4:	bd10      	pop	{r4, pc}
 80131e6:	2300      	movs	r3, #0
 80131e8:	4618      	mov	r0, r3
 80131ea:	4770      	bx	lr
 80131ec:	6982      	ldr	r2, [r0, #24]
 80131ee:	b13a      	cbz	r2, 8013200 <ucdr_check_final_buffer_behavior+0x30>
 80131f0:	69c1      	ldr	r1, [r0, #28]
 80131f2:	4790      	blx	r2
 80131f4:	f080 0301 	eor.w	r3, r0, #1
 80131f8:	75a0      	strb	r0, [r4, #22]
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	4618      	mov	r0, r3
 80131fe:	bd10      	pop	{r4, pc}
 8013200:	2001      	movs	r0, #1
 8013202:	75a0      	strb	r0, [r4, #22]
 8013204:	e7fa      	b.n	80131fc <ucdr_check_final_buffer_behavior+0x2c>
 8013206:	bf00      	nop

08013208 <ucdr_set_on_full_buffer_callback>:
 8013208:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop

08013210 <ucdr_init_buffer_origin_offset_endian>:
 8013210:	b410      	push	{r4}
 8013212:	9c01      	ldr	r4, [sp, #4]
 8013214:	440a      	add	r2, r1
 8013216:	6001      	str	r1, [r0, #0]
 8013218:	6042      	str	r2, [r0, #4]
 801321a:	190a      	adds	r2, r1, r4
 801321c:	441c      	add	r4, r3
 801321e:	6082      	str	r2, [r0, #8]
 8013220:	2200      	movs	r2, #0
 8013222:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013226:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801322a:	7542      	strb	r2, [r0, #21]
 801322c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013230:	7582      	strb	r2, [r0, #22]
 8013232:	7503      	strb	r3, [r0, #20]
 8013234:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013238:	4770      	bx	lr
 801323a:	bf00      	nop

0801323c <ucdr_init_buffer_origin_offset>:
 801323c:	b510      	push	{r4, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	9c04      	ldr	r4, [sp, #16]
 8013242:	9400      	str	r4, [sp, #0]
 8013244:	2401      	movs	r4, #1
 8013246:	9401      	str	r4, [sp, #4]
 8013248:	f7ff ffe2 	bl	8013210 <ucdr_init_buffer_origin_offset_endian>
 801324c:	b002      	add	sp, #8
 801324e:	bd10      	pop	{r4, pc}

08013250 <ucdr_init_buffer_origin>:
 8013250:	b510      	push	{r4, lr}
 8013252:	2400      	movs	r4, #0
 8013254:	b082      	sub	sp, #8
 8013256:	9400      	str	r4, [sp, #0]
 8013258:	f7ff fff0 	bl	801323c <ucdr_init_buffer_origin_offset>
 801325c:	b002      	add	sp, #8
 801325e:	bd10      	pop	{r4, pc}

08013260 <ucdr_init_buffer>:
 8013260:	2300      	movs	r3, #0
 8013262:	f7ff bff5 	b.w	8013250 <ucdr_init_buffer_origin>
 8013266:	bf00      	nop

08013268 <ucdr_alignment>:
 8013268:	fbb0 f2f1 	udiv	r2, r0, r1
 801326c:	fb02 0011 	mls	r0, r2, r1, r0
 8013270:	1e4b      	subs	r3, r1, #1
 8013272:	1a08      	subs	r0, r1, r0
 8013274:	4018      	ands	r0, r3
 8013276:	4770      	bx	lr

08013278 <ucdr_buffer_alignment>:
 8013278:	7d43      	ldrb	r3, [r0, #21]
 801327a:	428b      	cmp	r3, r1
 801327c:	d209      	bcs.n	8013292 <ucdr_buffer_alignment+0x1a>
 801327e:	6903      	ldr	r3, [r0, #16]
 8013280:	1e4a      	subs	r2, r1, #1
 8013282:	fbb3 f0f1 	udiv	r0, r3, r1
 8013286:	fb01 3010 	mls	r0, r1, r0, r3
 801328a:	1a09      	subs	r1, r1, r0
 801328c:	ea01 0002 	and.w	r0, r1, r2
 8013290:	4770      	bx	lr
 8013292:	2000      	movs	r0, #0
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop

08013298 <ucdr_align_to>:
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	4604      	mov	r4, r0
 801329c:	460d      	mov	r5, r1
 801329e:	f7ff ffeb 	bl	8013278 <ucdr_buffer_alignment>
 80132a2:	68a3      	ldr	r3, [r4, #8]
 80132a4:	7565      	strb	r5, [r4, #21]
 80132a6:	181a      	adds	r2, r3, r0
 80132a8:	6923      	ldr	r3, [r4, #16]
 80132aa:	4418      	add	r0, r3
 80132ac:	6863      	ldr	r3, [r4, #4]
 80132ae:	4293      	cmp	r3, r2
 80132b0:	6120      	str	r0, [r4, #16]
 80132b2:	bf28      	it	cs
 80132b4:	4613      	movcs	r3, r2
 80132b6:	60a3      	str	r3, [r4, #8]
 80132b8:	bd38      	pop	{r3, r4, r5, pc}
 80132ba:	bf00      	nop

080132bc <ucdr_buffer_length>:
 80132bc:	6882      	ldr	r2, [r0, #8]
 80132be:	6800      	ldr	r0, [r0, #0]
 80132c0:	1a10      	subs	r0, r2, r0
 80132c2:	4770      	bx	lr

080132c4 <ucdr_buffer_remaining>:
 80132c4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80132c8:	1a10      	subs	r0, r2, r0
 80132ca:	4770      	bx	lr

080132cc <ucdr_check_final_buffer_behavior_array>:
 80132cc:	b538      	push	{r3, r4, r5, lr}
 80132ce:	7d83      	ldrb	r3, [r0, #22]
 80132d0:	b9a3      	cbnz	r3, 80132fc <ucdr_check_final_buffer_behavior_array+0x30>
 80132d2:	4604      	mov	r4, r0
 80132d4:	460d      	mov	r5, r1
 80132d6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d300      	bcc.n	80132e0 <ucdr_check_final_buffer_behavior_array+0x14>
 80132de:	b931      	cbnz	r1, 80132ee <ucdr_check_final_buffer_behavior_array+0x22>
 80132e0:	4620      	mov	r0, r4
 80132e2:	f7ff ffef 	bl	80132c4 <ucdr_buffer_remaining>
 80132e6:	42a8      	cmp	r0, r5
 80132e8:	bf28      	it	cs
 80132ea:	4628      	movcs	r0, r5
 80132ec:	bd38      	pop	{r3, r4, r5, pc}
 80132ee:	6983      	ldr	r3, [r0, #24]
 80132f0:	b133      	cbz	r3, 8013300 <ucdr_check_final_buffer_behavior_array+0x34>
 80132f2:	69c1      	ldr	r1, [r0, #28]
 80132f4:	4798      	blx	r3
 80132f6:	75a0      	strb	r0, [r4, #22]
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d0f1      	beq.n	80132e0 <ucdr_check_final_buffer_behavior_array+0x14>
 80132fc:	2000      	movs	r0, #0
 80132fe:	bd38      	pop	{r3, r4, r5, pc}
 8013300:	2301      	movs	r3, #1
 8013302:	7583      	strb	r3, [r0, #22]
 8013304:	e7fa      	b.n	80132fc <ucdr_check_final_buffer_behavior_array+0x30>
 8013306:	bf00      	nop

08013308 <ucdr_advance_buffer>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	4604      	mov	r4, r0
 801330c:	460d      	mov	r5, r1
 801330e:	f7ff ff53 	bl	80131b8 <ucdr_check_buffer_available_for>
 8013312:	b178      	cbz	r0, 8013334 <ucdr_advance_buffer+0x2c>
 8013314:	6923      	ldr	r3, [r4, #16]
 8013316:	68a2      	ldr	r2, [r4, #8]
 8013318:	442b      	add	r3, r5
 801331a:	442a      	add	r2, r5
 801331c:	6123      	str	r3, [r4, #16]
 801331e:	2301      	movs	r3, #1
 8013320:	60a2      	str	r2, [r4, #8]
 8013322:	7563      	strb	r3, [r4, #21]
 8013324:	bd38      	pop	{r3, r4, r5, pc}
 8013326:	68a2      	ldr	r2, [r4, #8]
 8013328:	1a2d      	subs	r5, r5, r0
 801332a:	6923      	ldr	r3, [r4, #16]
 801332c:	4402      	add	r2, r0
 801332e:	4418      	add	r0, r3
 8013330:	60a2      	str	r2, [r4, #8]
 8013332:	6120      	str	r0, [r4, #16]
 8013334:	4629      	mov	r1, r5
 8013336:	2201      	movs	r2, #1
 8013338:	4620      	mov	r0, r4
 801333a:	f7ff ffc7 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 801333e:	2800      	cmp	r0, #0
 8013340:	d1f1      	bne.n	8013326 <ucdr_advance_buffer+0x1e>
 8013342:	2301      	movs	r3, #1
 8013344:	7563      	strb	r3, [r4, #21]
 8013346:	bd38      	pop	{r3, r4, r5, pc}

08013348 <ucdr_serialize_sequence_char>:
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	4615      	mov	r5, r2
 801334c:	460e      	mov	r6, r1
 801334e:	7d01      	ldrb	r1, [r0, #20]
 8013350:	4604      	mov	r4, r0
 8013352:	f7fe ff5b 	bl	801220c <ucdr_serialize_endian_uint32_t>
 8013356:	b90d      	cbnz	r5, 801335c <ucdr_serialize_sequence_char+0x14>
 8013358:	2001      	movs	r0, #1
 801335a:	bd70      	pop	{r4, r5, r6, pc}
 801335c:	462b      	mov	r3, r5
 801335e:	4632      	mov	r2, r6
 8013360:	7d21      	ldrb	r1, [r4, #20]
 8013362:	4620      	mov	r0, r4
 8013364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013368:	f004 b908 	b.w	801757c <ucdr_serialize_endian_array_char>

0801336c <ucdr_deserialize_sequence_char>:
 801336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013370:	461d      	mov	r5, r3
 8013372:	4616      	mov	r6, r2
 8013374:	460f      	mov	r7, r1
 8013376:	461a      	mov	r2, r3
 8013378:	7d01      	ldrb	r1, [r0, #20]
 801337a:	4604      	mov	r4, r0
 801337c:	f7ff f86e 	bl	801245c <ucdr_deserialize_endian_uint32_t>
 8013380:	682b      	ldr	r3, [r5, #0]
 8013382:	429e      	cmp	r6, r3
 8013384:	d201      	bcs.n	801338a <ucdr_deserialize_sequence_char+0x1e>
 8013386:	2201      	movs	r2, #1
 8013388:	75a2      	strb	r2, [r4, #22]
 801338a:	b913      	cbnz	r3, 8013392 <ucdr_deserialize_sequence_char+0x26>
 801338c:	2001      	movs	r0, #1
 801338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013392:	463a      	mov	r2, r7
 8013394:	7d21      	ldrb	r1, [r4, #20]
 8013396:	4620      	mov	r0, r4
 8013398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801339c:	f004 b920 	b.w	80175e0 <ucdr_deserialize_endian_array_char>

080133a0 <ucdr_serialize_sequence_uint8_t>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	4615      	mov	r5, r2
 80133a4:	460e      	mov	r6, r1
 80133a6:	7d01      	ldrb	r1, [r0, #20]
 80133a8:	4604      	mov	r4, r0
 80133aa:	f7fe ff2f 	bl	801220c <ucdr_serialize_endian_uint32_t>
 80133ae:	b90d      	cbnz	r5, 80133b4 <ucdr_serialize_sequence_uint8_t+0x14>
 80133b0:	2001      	movs	r0, #1
 80133b2:	bd70      	pop	{r4, r5, r6, pc}
 80133b4:	462b      	mov	r3, r5
 80133b6:	4632      	mov	r2, r6
 80133b8:	7d21      	ldrb	r1, [r4, #20]
 80133ba:	4620      	mov	r0, r4
 80133bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133c0:	f004 b974 	b.w	80176ac <ucdr_serialize_endian_array_uint8_t>

080133c4 <ucdr_deserialize_sequence_uint8_t>:
 80133c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c8:	461d      	mov	r5, r3
 80133ca:	4616      	mov	r6, r2
 80133cc:	460f      	mov	r7, r1
 80133ce:	461a      	mov	r2, r3
 80133d0:	7d01      	ldrb	r1, [r0, #20]
 80133d2:	4604      	mov	r4, r0
 80133d4:	f7ff f842 	bl	801245c <ucdr_deserialize_endian_uint32_t>
 80133d8:	682b      	ldr	r3, [r5, #0]
 80133da:	429e      	cmp	r6, r3
 80133dc:	d201      	bcs.n	80133e2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 80133de:	2201      	movs	r2, #1
 80133e0:	75a2      	strb	r2, [r4, #22]
 80133e2:	b913      	cbnz	r3, 80133ea <ucdr_deserialize_sequence_uint8_t+0x26>
 80133e4:	2001      	movs	r0, #1
 80133e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ea:	463a      	mov	r2, r7
 80133ec:	7d21      	ldrb	r1, [r4, #20]
 80133ee:	4620      	mov	r0, r4
 80133f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133f4:	f004 b9c0 	b.w	8017778 <ucdr_deserialize_endian_array_uint8_t>

080133f8 <rcl_get_zero_initialized_init_options>:
 80133f8:	2000      	movs	r0, #0
 80133fa:	4770      	bx	lr

080133fc <rcl_init_options_init>:
 80133fc:	b084      	sub	sp, #16
 80133fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013400:	b097      	sub	sp, #92	; 0x5c
 8013402:	ae1d      	add	r6, sp, #116	; 0x74
 8013404:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013408:	2800      	cmp	r0, #0
 801340a:	d058      	beq.n	80134be <rcl_init_options_init+0xc2>
 801340c:	6803      	ldr	r3, [r0, #0]
 801340e:	4605      	mov	r5, r0
 8013410:	b133      	cbz	r3, 8013420 <rcl_init_options_init+0x24>
 8013412:	2464      	movs	r4, #100	; 0x64
 8013414:	4620      	mov	r0, r4
 8013416:	b017      	add	sp, #92	; 0x5c
 8013418:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801341c:	b004      	add	sp, #16
 801341e:	4770      	bx	lr
 8013420:	4630      	mov	r0, r6
 8013422:	f001 fdf3 	bl	801500c <rcutils_allocator_is_valid>
 8013426:	2800      	cmp	r0, #0
 8013428:	d049      	beq.n	80134be <rcl_init_options_init+0xc2>
 801342a:	46b4      	mov	ip, r6
 801342c:	ac11      	add	r4, sp, #68	; 0x44
 801342e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013434:	f8dc 3000 	ldr.w	r3, [ip]
 8013438:	2050      	movs	r0, #80	; 0x50
 801343a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801343c:	6023      	str	r3, [r4, #0]
 801343e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013440:	4798      	blx	r3
 8013442:	4604      	mov	r4, r0
 8013444:	6028      	str	r0, [r5, #0]
 8013446:	2800      	cmp	r0, #0
 8013448:	d03b      	beq.n	80134c2 <rcl_init_options_init+0xc6>
 801344a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801344e:	4686      	mov	lr, r0
 8013450:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013454:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013458:	f8dc 3000 	ldr.w	r3, [ip]
 801345c:	a802      	add	r0, sp, #8
 801345e:	f8ce 3000 	str.w	r3, [lr]
 8013462:	f001 fff1 	bl	8015448 <rmw_get_zero_initialized_init_options>
 8013466:	f10d 0e08 	add.w	lr, sp, #8
 801346a:	f104 0c18 	add.w	ip, r4, #24
 801346e:	682f      	ldr	r7, [r5, #0]
 8013470:	ac20      	add	r4, sp, #128	; 0x80
 8013472:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013476:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801347a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801347e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013482:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013486:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801348a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801348e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013496:	e88d 0003 	stmia.w	sp, {r0, r1}
 801349a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801349e:	f107 0018 	add.w	r0, r7, #24
 80134a2:	f002 f8f9 	bl	8015698 <rmw_init_options_init>
 80134a6:	4604      	mov	r4, r0
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d0b3      	beq.n	8013414 <rcl_init_options_init+0x18>
 80134ac:	9921      	ldr	r1, [sp, #132]	; 0x84
 80134ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80134b0:	6828      	ldr	r0, [r5, #0]
 80134b2:	4798      	blx	r3
 80134b4:	4620      	mov	r0, r4
 80134b6:	f007 ff8d 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80134ba:	4604      	mov	r4, r0
 80134bc:	e7aa      	b.n	8013414 <rcl_init_options_init+0x18>
 80134be:	240b      	movs	r4, #11
 80134c0:	e7a8      	b.n	8013414 <rcl_init_options_init+0x18>
 80134c2:	240a      	movs	r4, #10
 80134c4:	e7a6      	b.n	8013414 <rcl_init_options_init+0x18>
 80134c6:	bf00      	nop

080134c8 <rcl_init_options_fini>:
 80134c8:	b530      	push	{r4, r5, lr}
 80134ca:	b087      	sub	sp, #28
 80134cc:	b1f0      	cbz	r0, 801350c <rcl_init_options_fini+0x44>
 80134ce:	6803      	ldr	r3, [r0, #0]
 80134d0:	4604      	mov	r4, r0
 80134d2:	b1db      	cbz	r3, 801350c <rcl_init_options_fini+0x44>
 80134d4:	469c      	mov	ip, r3
 80134d6:	f10d 0e04 	add.w	lr, sp, #4
 80134da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134e2:	f8dc 3000 	ldr.w	r3, [ip]
 80134e6:	a801      	add	r0, sp, #4
 80134e8:	f8ce 3000 	str.w	r3, [lr]
 80134ec:	f001 fd8e 	bl	801500c <rcutils_allocator_is_valid>
 80134f0:	b160      	cbz	r0, 801350c <rcl_init_options_fini+0x44>
 80134f2:	6820      	ldr	r0, [r4, #0]
 80134f4:	3018      	adds	r0, #24
 80134f6:	f002 f989 	bl	801580c <rmw_init_options_fini>
 80134fa:	4605      	mov	r5, r0
 80134fc:	b950      	cbnz	r0, 8013514 <rcl_init_options_fini+0x4c>
 80134fe:	6820      	ldr	r0, [r4, #0]
 8013500:	9b02      	ldr	r3, [sp, #8]
 8013502:	9905      	ldr	r1, [sp, #20]
 8013504:	4798      	blx	r3
 8013506:	4628      	mov	r0, r5
 8013508:	b007      	add	sp, #28
 801350a:	bd30      	pop	{r4, r5, pc}
 801350c:	250b      	movs	r5, #11
 801350e:	4628      	mov	r0, r5
 8013510:	b007      	add	sp, #28
 8013512:	bd30      	pop	{r4, r5, pc}
 8013514:	f007 ff5e 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013518:	4605      	mov	r5, r0
 801351a:	e7f8      	b.n	801350e <rcl_init_options_fini+0x46>

0801351c <rcl_init_options_copy>:
 801351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013520:	b094      	sub	sp, #80	; 0x50
 8013522:	2800      	cmp	r0, #0
 8013524:	d05b      	beq.n	80135de <rcl_init_options_copy+0xc2>
 8013526:	4604      	mov	r4, r0
 8013528:	6800      	ldr	r0, [r0, #0]
 801352a:	2800      	cmp	r0, #0
 801352c:	d057      	beq.n	80135de <rcl_init_options_copy+0xc2>
 801352e:	460e      	mov	r6, r1
 8013530:	f001 fd6c 	bl	801500c <rcutils_allocator_is_valid>
 8013534:	2e00      	cmp	r6, #0
 8013536:	d052      	beq.n	80135de <rcl_init_options_copy+0xc2>
 8013538:	f080 0001 	eor.w	r0, r0, #1
 801353c:	b2c0      	uxtb	r0, r0
 801353e:	2800      	cmp	r0, #0
 8013540:	d14d      	bne.n	80135de <rcl_init_options_copy+0xc2>
 8013542:	6833      	ldr	r3, [r6, #0]
 8013544:	b123      	cbz	r3, 8013550 <rcl_init_options_copy+0x34>
 8013546:	2464      	movs	r4, #100	; 0x64
 8013548:	4620      	mov	r0, r4
 801354a:	b014      	add	sp, #80	; 0x50
 801354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013550:	6827      	ldr	r7, [r4, #0]
 8013552:	ad0f      	add	r5, sp, #60	; 0x3c
 8013554:	46bc      	mov	ip, r7
 8013556:	f8d7 8000 	ldr.w	r8, [r7]
 801355a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801355e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013560:	f8dc 3000 	ldr.w	r3, [ip]
 8013564:	2050      	movs	r0, #80	; 0x50
 8013566:	4619      	mov	r1, r3
 8013568:	602b      	str	r3, [r5, #0]
 801356a:	47c0      	blx	r8
 801356c:	4605      	mov	r5, r0
 801356e:	6030      	str	r0, [r6, #0]
 8013570:	b3d0      	cbz	r0, 80135e8 <rcl_init_options_copy+0xcc>
 8013572:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8013576:	4686      	mov	lr, r0
 8013578:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801357c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013580:	f8dc 3000 	ldr.w	r3, [ip]
 8013584:	4668      	mov	r0, sp
 8013586:	f8ce 3000 	str.w	r3, [lr]
 801358a:	f001 ff5d 	bl	8015448 <rmw_get_zero_initialized_init_options>
 801358e:	46ee      	mov	lr, sp
 8013590:	f105 0c18 	add.w	ip, r5, #24
 8013594:	6824      	ldr	r4, [r4, #0]
 8013596:	6835      	ldr	r5, [r6, #0]
 8013598:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801359c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80135b4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135b8:	f104 0018 	add.w	r0, r4, #24
 80135bc:	f105 0118 	add.w	r1, r5, #24
 80135c0:	f002 f8d2 	bl	8015768 <rmw_init_options_copy>
 80135c4:	4604      	mov	r4, r0
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d0be      	beq.n	8013548 <rcl_init_options_copy+0x2c>
 80135ca:	f001 fd45 	bl	8015058 <rcutils_get_error_string>
 80135ce:	f001 fd5b 	bl	8015088 <rcutils_reset_error>
 80135d2:	4630      	mov	r0, r6
 80135d4:	f7ff ff78 	bl	80134c8 <rcl_init_options_fini>
 80135d8:	b140      	cbz	r0, 80135ec <rcl_init_options_copy+0xd0>
 80135da:	4604      	mov	r4, r0
 80135dc:	e7b4      	b.n	8013548 <rcl_init_options_copy+0x2c>
 80135de:	240b      	movs	r4, #11
 80135e0:	4620      	mov	r0, r4
 80135e2:	b014      	add	sp, #80	; 0x50
 80135e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e8:	240a      	movs	r4, #10
 80135ea:	e7ad      	b.n	8013548 <rcl_init_options_copy+0x2c>
 80135ec:	4620      	mov	r0, r4
 80135ee:	b014      	add	sp, #80	; 0x50
 80135f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135f4:	f007 beee 	b.w	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>

080135f8 <rcl_init_options_set_domain_id>:
 80135f8:	b120      	cbz	r0, 8013604 <rcl_init_options_set_domain_id+0xc>
 80135fa:	6803      	ldr	r3, [r0, #0]
 80135fc:	b113      	cbz	r3, 8013604 <rcl_init_options_set_domain_id+0xc>
 80135fe:	2000      	movs	r0, #0
 8013600:	6259      	str	r1, [r3, #36]	; 0x24
 8013602:	4770      	bx	lr
 8013604:	200b      	movs	r0, #11
 8013606:	4770      	bx	lr

08013608 <rcl_get_zero_initialized_node>:
 8013608:	4a03      	ldr	r2, [pc, #12]	; (8013618 <rcl_get_zero_initialized_node+0x10>)
 801360a:	4603      	mov	r3, r0
 801360c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013610:	e883 0003 	stmia.w	r3, {r0, r1}
 8013614:	4618      	mov	r0, r3
 8013616:	4770      	bx	lr
 8013618:	08024da8 	.word	0x08024da8

0801361c <rcl_node_init>:
 801361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013620:	b0a9      	sub	sp, #164	; 0xa4
 8013622:	4604      	mov	r4, r0
 8013624:	460e      	mov	r6, r1
 8013626:	4615      	mov	r5, r2
 8013628:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 801362c:	a823      	add	r0, sp, #140	; 0x8c
 801362e:	461f      	mov	r7, r3
 8013630:	f007 ffe0 	bl	801b5f4 <rcl_guard_condition_get_default_options>
 8013634:	f1b8 0f00 	cmp.w	r8, #0
 8013638:	f000 80f3 	beq.w	8013822 <rcl_node_init+0x206>
 801363c:	4640      	mov	r0, r8
 801363e:	f001 fce5 	bl	801500c <rcutils_allocator_is_valid>
 8013642:	2d00      	cmp	r5, #0
 8013644:	bf18      	it	ne
 8013646:	2c00      	cmpne	r4, #0
 8013648:	f080 0001 	eor.w	r0, r0, #1
 801364c:	bf0c      	ite	eq
 801364e:	f04f 0c01 	moveq.w	ip, #1
 8013652:	f04f 0c00 	movne.w	ip, #0
 8013656:	2e00      	cmp	r6, #0
 8013658:	bf08      	it	eq
 801365a:	f04c 0c01 	orreq.w	ip, ip, #1
 801365e:	ea4c 0c00 	orr.w	ip, ip, r0
 8013662:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8013666:	f040 80dc 	bne.w	8013822 <rcl_node_init+0x206>
 801366a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801366e:	f1ba 0f00 	cmp.w	sl, #0
 8013672:	f040 80fc 	bne.w	801386e <rcl_node_init+0x252>
 8013676:	2f00      	cmp	r7, #0
 8013678:	f000 80d3 	beq.w	8013822 <rcl_node_init+0x206>
 801367c:	4638      	mov	r0, r7
 801367e:	f007 fec7 	bl	801b410 <rcl_context_is_valid>
 8013682:	4683      	mov	fp, r0
 8013684:	2800      	cmp	r0, #0
 8013686:	f000 80d2 	beq.w	801382e <rcl_node_init+0x212>
 801368a:	4652      	mov	r2, sl
 801368c:	4630      	mov	r0, r6
 801368e:	a922      	add	r1, sp, #136	; 0x88
 8013690:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8013694:	f001 ff8a 	bl	80155ac <rmw_validate_node_name>
 8013698:	4682      	mov	sl, r0
 801369a:	2800      	cmp	r0, #0
 801369c:	f040 80c3 	bne.w	8013826 <rcl_node_init+0x20a>
 80136a0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80136a2:	2800      	cmp	r0, #0
 80136a4:	f040 80f1 	bne.w	801388a <rcl_node_init+0x26e>
 80136a8:	4628      	mov	r0, r5
 80136aa:	f7ec fe29 	bl	8000300 <strlen>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	f040 80c0 	bne.w	8013834 <rcl_node_init+0x218>
 80136b4:	4d79      	ldr	r5, [pc, #484]	; (801389c <rcl_node_init+0x280>)
 80136b6:	a922      	add	r1, sp, #136	; 0x88
 80136b8:	2200      	movs	r2, #0
 80136ba:	4628      	mov	r0, r5
 80136bc:	f001 ff58 	bl	8015570 <rmw_validate_namespace>
 80136c0:	4682      	mov	sl, r0
 80136c2:	2800      	cmp	r0, #0
 80136c4:	f040 80af 	bne.w	8013826 <rcl_node_init+0x20a>
 80136c8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80136ca:	2800      	cmp	r0, #0
 80136cc:	f040 80d5 	bne.w	801387a <rcl_node_init+0x25e>
 80136d0:	f8d8 3000 	ldr.w	r3, [r8]
 80136d4:	2078      	movs	r0, #120	; 0x78
 80136d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80136da:	4798      	blx	r3
 80136dc:	4682      	mov	sl, r0
 80136de:	6060      	str	r0, [r4, #4]
 80136e0:	2800      	cmp	r0, #0
 80136e2:	f000 80cf 	beq.w	8013884 <rcl_node_init+0x268>
 80136e6:	2200      	movs	r2, #0
 80136e8:	2300      	movs	r3, #0
 80136ea:	a808      	add	r0, sp, #32
 80136ec:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 80136f0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 80136f4:	f000 f902 	bl	80138fc <rcl_node_get_default_options>
 80136f8:	a908      	add	r1, sp, #32
 80136fa:	4650      	mov	r0, sl
 80136fc:	2268      	movs	r2, #104	; 0x68
 80136fe:	f00d fbe6 	bl	8020ece <memcpy>
 8013702:	6861      	ldr	r1, [r4, #4]
 8013704:	4640      	mov	r0, r8
 8013706:	6027      	str	r7, [r4, #0]
 8013708:	f000 f906 	bl	8013918 <rcl_node_options_copy>
 801370c:	2800      	cmp	r0, #0
 801370e:	d158      	bne.n	80137c2 <rcl_node_init+0x1a6>
 8013710:	4628      	mov	r0, r5
 8013712:	f7ec fdf5 	bl	8000300 <strlen>
 8013716:	4428      	add	r0, r5
 8013718:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801371c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013720:	2b2f      	cmp	r3, #47	; 0x2f
 8013722:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	bf0c      	ite	eq
 801372a:	4b5d      	ldreq	r3, [pc, #372]	; (80138a0 <rcl_node_init+0x284>)
 801372c:	4b5d      	ldrne	r3, [pc, #372]	; (80138a4 <rcl_node_init+0x288>)
 801372e:	9302      	str	r3, [sp, #8]
 8013730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013734:	9301      	str	r3, [sp, #4]
 8013736:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801373a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801373e:	f001 fcbf 	bl	80150c0 <rcutils_format_string_limit>
 8013742:	6823      	ldr	r3, [r4, #0]
 8013744:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8013748:	4631      	mov	r1, r6
 801374a:	6818      	ldr	r0, [r3, #0]
 801374c:	462a      	mov	r2, r5
 801374e:	6866      	ldr	r6, [r4, #4]
 8013750:	3028      	adds	r0, #40	; 0x28
 8013752:	f002 fa87 	bl	8015c64 <rmw_create_node>
 8013756:	6863      	ldr	r3, [r4, #4]
 8013758:	66b0      	str	r0, [r6, #104]	; 0x68
 801375a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801375c:	2800      	cmp	r0, #0
 801375e:	d032      	beq.n	80137c6 <rcl_node_init+0x1aa>
 8013760:	f002 fb10 	bl	8015d84 <rmw_node_get_graph_guard_condition>
 8013764:	4682      	mov	sl, r0
 8013766:	b360      	cbz	r0, 80137c2 <rcl_node_init+0x1a6>
 8013768:	f8d8 3000 	ldr.w	r3, [r8]
 801376c:	2008      	movs	r0, #8
 801376e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013772:	6866      	ldr	r6, [r4, #4]
 8013774:	4798      	blx	r3
 8013776:	6863      	ldr	r3, [r4, #4]
 8013778:	66f0      	str	r0, [r6, #108]	; 0x6c
 801377a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801377e:	f1bb 0f00 	cmp.w	fp, #0
 8013782:	d020      	beq.n	80137c6 <rcl_node_init+0x1aa>
 8013784:	a806      	add	r0, sp, #24
 8013786:	ae23      	add	r6, sp, #140	; 0x8c
 8013788:	f007 fea8 	bl	801b4dc <rcl_get_zero_initialized_guard_condition>
 801378c:	a806      	add	r0, sp, #24
 801378e:	6863      	ldr	r3, [r4, #4]
 8013790:	46c4      	mov	ip, r8
 8013792:	c803      	ldmia	r0, {r0, r1}
 8013794:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8013798:	e88b 0003 	stmia.w	fp, {r0, r1}
 801379c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80137a2:	f8dc 3000 	ldr.w	r3, [ip]
 80137a6:	6033      	str	r3, [r6, #0]
 80137a8:	ab28      	add	r3, sp, #160	; 0xa0
 80137aa:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80137ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80137b2:	4651      	mov	r1, sl
 80137b4:	463a      	mov	r2, r7
 80137b6:	4670      	mov	r0, lr
 80137b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80137ba:	f007 fe99 	bl	801b4f0 <rcl_guard_condition_init_from_rmw>
 80137be:	4682      	mov	sl, r0
 80137c0:	b328      	cbz	r0, 801380e <rcl_node_init+0x1f2>
 80137c2:	6863      	ldr	r3, [r4, #4]
 80137c4:	b1f3      	cbz	r3, 8013804 <rcl_node_init+0x1e8>
 80137c6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80137c8:	b128      	cbz	r0, 80137d6 <rcl_node_init+0x1ba>
 80137ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80137ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137d2:	4798      	blx	r3
 80137d4:	6863      	ldr	r3, [r4, #4]
 80137d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80137d8:	b110      	cbz	r0, 80137e0 <rcl_node_init+0x1c4>
 80137da:	f002 fa55 	bl	8015c88 <rmw_destroy_node>
 80137de:	6863      	ldr	r3, [r4, #4]
 80137e0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80137e2:	b148      	cbz	r0, 80137f8 <rcl_node_init+0x1dc>
 80137e4:	f007 fee0 	bl	801b5a8 <rcl_guard_condition_fini>
 80137e8:	6863      	ldr	r3, [r4, #4]
 80137ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137ee:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80137f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80137f4:	4798      	blx	r3
 80137f6:	6863      	ldr	r3, [r4, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013802:	4798      	blx	r3
 8013804:	2300      	movs	r3, #0
 8013806:	f04f 0a01 	mov.w	sl, #1
 801380a:	e9c4 3300 	strd	r3, r3, [r4]
 801380e:	f1b9 0f00 	cmp.w	r9, #0
 8013812:	d008      	beq.n	8013826 <rcl_node_init+0x20a>
 8013814:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013818:	4628      	mov	r0, r5
 801381a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801381e:	4798      	blx	r3
 8013820:	e001      	b.n	8013826 <rcl_node_init+0x20a>
 8013822:	f04f 0a0b 	mov.w	sl, #11
 8013826:	4650      	mov	r0, sl
 8013828:	b029      	add	sp, #164	; 0xa4
 801382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382e:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8013832:	e7f8      	b.n	8013826 <rcl_node_init+0x20a>
 8013834:	782b      	ldrb	r3, [r5, #0]
 8013836:	2b2f      	cmp	r3, #47	; 0x2f
 8013838:	f43f af3d 	beq.w	80136b6 <rcl_node_init+0x9a>
 801383c:	9503      	str	r5, [sp, #12]
 801383e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013842:	9300      	str	r3, [sp, #0]
 8013844:	4b18      	ldr	r3, [pc, #96]	; (80138a8 <rcl_node_init+0x28c>)
 8013846:	9302      	str	r3, [sp, #8]
 8013848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801384c:	9301      	str	r3, [sp, #4]
 801384e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013852:	f001 fc35 	bl	80150c0 <rcutils_format_string_limit>
 8013856:	4605      	mov	r5, r0
 8013858:	b1e0      	cbz	r0, 8013894 <rcl_node_init+0x278>
 801385a:	2200      	movs	r2, #0
 801385c:	a922      	add	r1, sp, #136	; 0x88
 801385e:	9222      	str	r2, [sp, #136]	; 0x88
 8013860:	f001 fe86 	bl	8015570 <rmw_validate_namespace>
 8013864:	4682      	mov	sl, r0
 8013866:	2800      	cmp	r0, #0
 8013868:	d1d4      	bne.n	8013814 <rcl_node_init+0x1f8>
 801386a:	46d9      	mov	r9, fp
 801386c:	e72c      	b.n	80136c8 <rcl_node_init+0xac>
 801386e:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8013872:	4650      	mov	r0, sl
 8013874:	b029      	add	sp, #164	; 0xa4
 8013876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387a:	f04f 0aca 	mov.w	sl, #202	; 0xca
 801387e:	f001 fe89 	bl	8015594 <rmw_namespace_validation_result_string>
 8013882:	e7c4      	b.n	801380e <rcl_node_init+0x1f2>
 8013884:	f04f 0a0a 	mov.w	sl, #10
 8013888:	e7c1      	b.n	801380e <rcl_node_init+0x1f2>
 801388a:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801388e:	f001 fee1 	bl	8015654 <rmw_node_name_validation_result_string>
 8013892:	e7c8      	b.n	8013826 <rcl_node_init+0x20a>
 8013894:	f04f 0a0a 	mov.w	sl, #10
 8013898:	e7c5      	b.n	8013826 <rcl_node_init+0x20a>
 801389a:	bf00      	nop
 801389c:	08024d90 	.word	0x08024d90
 80138a0:	08024d98 	.word	0x08024d98
 80138a4:	08024da0 	.word	0x08024da0
 80138a8:	08024d94 	.word	0x08024d94

080138ac <rcl_node_is_valid>:
 80138ac:	b130      	cbz	r0, 80138bc <rcl_node_is_valid+0x10>
 80138ae:	6843      	ldr	r3, [r0, #4]
 80138b0:	b123      	cbz	r3, 80138bc <rcl_node_is_valid+0x10>
 80138b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138b4:	b113      	cbz	r3, 80138bc <rcl_node_is_valid+0x10>
 80138b6:	6800      	ldr	r0, [r0, #0]
 80138b8:	f007 bdaa 	b.w	801b410 <rcl_context_is_valid>
 80138bc:	2000      	movs	r0, #0
 80138be:	4770      	bx	lr

080138c0 <rcl_node_get_name>:
 80138c0:	b120      	cbz	r0, 80138cc <rcl_node_get_name+0xc>
 80138c2:	6840      	ldr	r0, [r0, #4]
 80138c4:	b110      	cbz	r0, 80138cc <rcl_node_get_name+0xc>
 80138c6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80138c8:	b100      	cbz	r0, 80138cc <rcl_node_get_name+0xc>
 80138ca:	6880      	ldr	r0, [r0, #8]
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop

080138d0 <rcl_node_get_namespace>:
 80138d0:	b120      	cbz	r0, 80138dc <rcl_node_get_namespace+0xc>
 80138d2:	6840      	ldr	r0, [r0, #4]
 80138d4:	b110      	cbz	r0, 80138dc <rcl_node_get_namespace+0xc>
 80138d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80138d8:	b100      	cbz	r0, 80138dc <rcl_node_get_namespace+0xc>
 80138da:	68c0      	ldr	r0, [r0, #12]
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop

080138e0 <rcl_node_get_options>:
 80138e0:	b128      	cbz	r0, 80138ee <rcl_node_get_options+0xe>
 80138e2:	6840      	ldr	r0, [r0, #4]
 80138e4:	b118      	cbz	r0, 80138ee <rcl_node_get_options+0xe>
 80138e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	bf08      	it	eq
 80138ec:	2000      	moveq	r0, #0
 80138ee:	4770      	bx	lr

080138f0 <rcl_node_get_rmw_handle>:
 80138f0:	b110      	cbz	r0, 80138f8 <rcl_node_get_rmw_handle+0x8>
 80138f2:	6840      	ldr	r0, [r0, #4]
 80138f4:	b100      	cbz	r0, 80138f8 <rcl_node_get_rmw_handle+0x8>
 80138f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop

080138fc <rcl_node_get_default_options>:
 80138fc:	b510      	push	{r4, lr}
 80138fe:	4604      	mov	r4, r0
 8013900:	2268      	movs	r2, #104	; 0x68
 8013902:	2100      	movs	r1, #0
 8013904:	f00d fa16 	bl	8020d34 <memset>
 8013908:	4620      	mov	r0, r4
 801390a:	f001 fb71 	bl	8014ff0 <rcutils_get_default_allocator>
 801390e:	2301      	movs	r3, #1
 8013910:	4620      	mov	r0, r4
 8013912:	7523      	strb	r3, [r4, #20]
 8013914:	bd10      	pop	{r4, pc}
 8013916:	bf00      	nop

08013918 <rcl_node_options_copy>:
 8013918:	2800      	cmp	r0, #0
 801391a:	bf18      	it	ne
 801391c:	4288      	cmpne	r0, r1
 801391e:	d01b      	beq.n	8013958 <rcl_node_options_copy+0x40>
 8013920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013922:	fab1 f681 	clz	r6, r1
 8013926:	460c      	mov	r4, r1
 8013928:	0976      	lsrs	r6, r6, #5
 801392a:	b199      	cbz	r1, 8013954 <rcl_node_options_copy+0x3c>
 801392c:	4605      	mov	r5, r0
 801392e:	8a87      	ldrh	r7, [r0, #20]
 8013930:	4684      	mov	ip, r0
 8013932:	468e      	mov	lr, r1
 8013934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013936:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	2250      	movs	r2, #80	; 0x50
 801393e:	f10c 0118 	add.w	r1, ip, #24
 8013942:	f104 0018 	add.w	r0, r4, #24
 8013946:	f8ce 3000 	str.w	r3, [lr]
 801394a:	82a7      	strh	r7, [r4, #20]
 801394c:	f00d fabf 	bl	8020ece <memcpy>
 8013950:	4630      	mov	r0, r6
 8013952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013954:	200b      	movs	r0, #11
 8013956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013958:	200b      	movs	r0, #11
 801395a:	4770      	bx	lr

0801395c <rcl_get_zero_initialized_publisher>:
 801395c:	4b01      	ldr	r3, [pc, #4]	; (8013964 <rcl_get_zero_initialized_publisher+0x8>)
 801395e:	6818      	ldr	r0, [r3, #0]
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	08024db0 	.word	0x08024db0

08013968 <rcl_publisher_init>:
 8013968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801396c:	b088      	sub	sp, #32
 801396e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013970:	2e00      	cmp	r6, #0
 8013972:	d06b      	beq.n	8013a4c <rcl_publisher_init+0xe4>
 8013974:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8013978:	4605      	mov	r5, r0
 801397a:	460f      	mov	r7, r1
 801397c:	4690      	mov	r8, r2
 801397e:	4650      	mov	r0, sl
 8013980:	4699      	mov	r9, r3
 8013982:	f001 fb43 	bl	801500c <rcutils_allocator_is_valid>
 8013986:	f080 0401 	eor.w	r4, r0, #1
 801398a:	b2e4      	uxtb	r4, r4
 801398c:	2c00      	cmp	r4, #0
 801398e:	d15d      	bne.n	8013a4c <rcl_publisher_init+0xe4>
 8013990:	2d00      	cmp	r5, #0
 8013992:	d05b      	beq.n	8013a4c <rcl_publisher_init+0xe4>
 8013994:	682b      	ldr	r3, [r5, #0]
 8013996:	b123      	cbz	r3, 80139a2 <rcl_publisher_init+0x3a>
 8013998:	2464      	movs	r4, #100	; 0x64
 801399a:	4620      	mov	r0, r4
 801399c:	b008      	add	sp, #32
 801399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a2:	4638      	mov	r0, r7
 80139a4:	f7ff ff82 	bl	80138ac <rcl_node_is_valid>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d054      	beq.n	8013a56 <rcl_publisher_init+0xee>
 80139ac:	f1b8 0f00 	cmp.w	r8, #0
 80139b0:	d04c      	beq.n	8013a4c <rcl_publisher_init+0xe4>
 80139b2:	fab9 f389 	clz	r3, r9
 80139b6:	095b      	lsrs	r3, r3, #5
 80139b8:	f1b9 0f00 	cmp.w	r9, #0
 80139bc:	d046      	beq.n	8013a4c <rcl_publisher_init+0xe4>
 80139be:	aa07      	add	r2, sp, #28
 80139c0:	9307      	str	r3, [sp, #28]
 80139c2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80139c6:	f106 0358 	add.w	r3, r6, #88	; 0x58
 80139ca:	9205      	str	r2, [sp, #20]
 80139cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80139d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139d4:	4649      	mov	r1, r9
 80139d6:	4638      	mov	r0, r7
 80139d8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80139dc:	f007 ff54 	bl	801b888 <rcl_node_resolve_name>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d14f      	bne.n	8013a84 <rcl_publisher_init+0x11c>
 80139e4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80139e6:	20c8      	movs	r0, #200	; 0xc8
 80139e8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80139ea:	4798      	blx	r3
 80139ec:	6028      	str	r0, [r5, #0]
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d050      	beq.n	8013a94 <rcl_publisher_init+0x12c>
 80139f2:	4638      	mov	r0, r7
 80139f4:	f7ff ff7c 	bl	80138f0 <rcl_node_get_rmw_handle>
 80139f8:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80139fc:	4641      	mov	r1, r8
 80139fe:	9a07      	ldr	r2, [sp, #28]
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	4633      	mov	r3, r6
 8013a04:	682c      	ldr	r4, [r5, #0]
 8013a06:	f002 fa27 	bl	8015e58 <rmw_create_publisher>
 8013a0a:	682b      	ldr	r3, [r5, #0]
 8013a0c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013a10:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013a14:	b370      	cbz	r0, 8013a74 <rcl_publisher_init+0x10c>
 8013a16:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8013a1a:	f002 fb01 	bl	8016020 <rmw_publisher_get_actual_qos>
 8013a1e:	682b      	ldr	r3, [r5, #0]
 8013a20:	4604      	mov	r4, r0
 8013a22:	b9d0      	cbnz	r0, 8013a5a <rcl_publisher_init+0xf2>
 8013a24:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8013a28:	4631      	mov	r1, r6
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8013a30:	2270      	movs	r2, #112	; 0x70
 8013a32:	f00d fa4c 	bl	8020ece <memcpy>
 8013a36:	683a      	ldr	r2, [r7, #0]
 8013a38:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8013a3c:	9807      	ldr	r0, [sp, #28]
 8013a3e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013a40:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013a42:	4798      	blx	r3
 8013a44:	4620      	mov	r0, r4
 8013a46:	b008      	add	sp, #32
 8013a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a4c:	240b      	movs	r4, #11
 8013a4e:	4620      	mov	r0, r4
 8013a50:	b008      	add	sp, #32
 8013a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a56:	24c8      	movs	r4, #200	; 0xc8
 8013a58:	e79f      	b.n	801399a <rcl_publisher_init+0x32>
 8013a5a:	b1cb      	cbz	r3, 8013a90 <rcl_publisher_init+0x128>
 8013a5c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013a60:	b142      	cbz	r2, 8013a74 <rcl_publisher_init+0x10c>
 8013a62:	4638      	mov	r0, r7
 8013a64:	f7ff ff44 	bl	80138f0 <rcl_node_get_rmw_handle>
 8013a68:	682b      	ldr	r3, [r5, #0]
 8013a6a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013a6e:	f002 faeb 	bl	8016048 <rmw_destroy_publisher>
 8013a72:	682b      	ldr	r3, [r5, #0]
 8013a74:	4618      	mov	r0, r3
 8013a76:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013a78:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013a7a:	2401      	movs	r4, #1
 8013a7c:	4790      	blx	r2
 8013a7e:	2300      	movs	r3, #0
 8013a80:	602b      	str	r3, [r5, #0]
 8013a82:	e7db      	b.n	8013a3c <rcl_publisher_init+0xd4>
 8013a84:	2867      	cmp	r0, #103	; 0x67
 8013a86:	d007      	beq.n	8013a98 <rcl_publisher_init+0x130>
 8013a88:	2869      	cmp	r0, #105	; 0x69
 8013a8a:	d005      	beq.n	8013a98 <rcl_publisher_init+0x130>
 8013a8c:	280a      	cmp	r0, #10
 8013a8e:	d001      	beq.n	8013a94 <rcl_publisher_init+0x12c>
 8013a90:	2401      	movs	r4, #1
 8013a92:	e7d3      	b.n	8013a3c <rcl_publisher_init+0xd4>
 8013a94:	240a      	movs	r4, #10
 8013a96:	e7d1      	b.n	8013a3c <rcl_publisher_init+0xd4>
 8013a98:	2467      	movs	r4, #103	; 0x67
 8013a9a:	e7cf      	b.n	8013a3c <rcl_publisher_init+0xd4>

08013a9c <rcl_publisher_get_default_options>:
 8013a9c:	b570      	push	{r4, r5, r6, lr}
 8013a9e:	4d14      	ldr	r5, [pc, #80]	; (8013af0 <rcl_publisher_get_default_options+0x54>)
 8013aa0:	b088      	sub	sp, #32
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	2250      	movs	r2, #80	; 0x50
 8013aa6:	4913      	ldr	r1, [pc, #76]	; (8013af4 <rcl_publisher_get_default_options+0x58>)
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f00d fa10 	bl	8020ece <memcpy>
 8013aae:	a802      	add	r0, sp, #8
 8013ab0:	f001 fa9e 	bl	8014ff0 <rcutils_get_default_allocator>
 8013ab4:	f10d 0c08 	add.w	ip, sp, #8
 8013ab8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013abc:	466e      	mov	r6, sp
 8013abe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ac2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013ac6:	f8dc 3000 	ldr.w	r3, [ip]
 8013aca:	4630      	mov	r0, r6
 8013acc:	f8ce 3000 	str.w	r3, [lr]
 8013ad0:	f001 fcca 	bl	8015468 <rmw_get_default_publisher_options>
 8013ad4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013ad8:	2270      	movs	r2, #112	; 0x70
 8013ada:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013ade:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ae2:	4629      	mov	r1, r5
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f00d f9f2 	bl	8020ece <memcpy>
 8013aea:	4620      	mov	r0, r4
 8013aec:	b008      	add	sp, #32
 8013aee:	bd70      	pop	{r4, r5, r6, pc}
 8013af0:	200122c0 	.word	0x200122c0
 8013af4:	08024db8 	.word	0x08024db8

08013af8 <rcl_publish>:
 8013af8:	b1f8      	cbz	r0, 8013b3a <rcl_publish+0x42>
 8013afa:	6803      	ldr	r3, [r0, #0]
 8013afc:	b570      	push	{r4, r5, r6, lr}
 8013afe:	4604      	mov	r4, r0
 8013b00:	b1b3      	cbz	r3, 8013b30 <rcl_publish+0x38>
 8013b02:	4616      	mov	r6, r2
 8013b04:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013b08:	b192      	cbz	r2, 8013b30 <rcl_publish+0x38>
 8013b0a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013b0e:	460d      	mov	r5, r1
 8013b10:	f007 fc7e 	bl	801b410 <rcl_context_is_valid>
 8013b14:	b160      	cbz	r0, 8013b30 <rcl_publish+0x38>
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013b1c:	b140      	cbz	r0, 8013b30 <rcl_publish+0x38>
 8013b1e:	b155      	cbz	r5, 8013b36 <rcl_publish+0x3e>
 8013b20:	4632      	mov	r2, r6
 8013b22:	4629      	mov	r1, r5
 8013b24:	f002 f938 	bl	8015d98 <rmw_publish>
 8013b28:	3800      	subs	r0, #0
 8013b2a:	bf18      	it	ne
 8013b2c:	2001      	movne	r0, #1
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013b34:	bd70      	pop	{r4, r5, r6, pc}
 8013b36:	200b      	movs	r0, #11
 8013b38:	bd70      	pop	{r4, r5, r6, pc}
 8013b3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013b3e:	4770      	bx	lr

08013b40 <rcl_publisher_is_valid>:
 8013b40:	b1a0      	cbz	r0, 8013b6c <rcl_publisher_is_valid+0x2c>
 8013b42:	6803      	ldr	r3, [r0, #0]
 8013b44:	b510      	push	{r4, lr}
 8013b46:	4604      	mov	r4, r0
 8013b48:	b173      	cbz	r3, 8013b68 <rcl_publisher_is_valid+0x28>
 8013b4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013b4e:	b15a      	cbz	r2, 8013b68 <rcl_publisher_is_valid+0x28>
 8013b50:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013b54:	f007 fc5c 	bl	801b410 <rcl_context_is_valid>
 8013b58:	b130      	cbz	r0, 8013b68 <rcl_publisher_is_valid+0x28>
 8013b5a:	6823      	ldr	r3, [r4, #0]
 8013b5c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013b60:	3800      	subs	r0, #0
 8013b62:	bf18      	it	ne
 8013b64:	2001      	movne	r0, #1
 8013b66:	bd10      	pop	{r4, pc}
 8013b68:	2000      	movs	r0, #0
 8013b6a:	bd10      	pop	{r4, pc}
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	4770      	bx	lr

08013b70 <rcl_publisher_is_valid_except_context>:
 8013b70:	b130      	cbz	r0, 8013b80 <rcl_publisher_is_valid_except_context+0x10>
 8013b72:	6800      	ldr	r0, [r0, #0]
 8013b74:	b120      	cbz	r0, 8013b80 <rcl_publisher_is_valid_except_context+0x10>
 8013b76:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013b7a:	3800      	subs	r0, #0
 8013b7c:	bf18      	it	ne
 8013b7e:	2001      	movne	r0, #1
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop

08013b84 <rcl_get_zero_initialized_service>:
 8013b84:	4b01      	ldr	r3, [pc, #4]	; (8013b8c <rcl_get_zero_initialized_service+0x8>)
 8013b86:	6818      	ldr	r0, [r3, #0]
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop
 8013b8c:	08024e08 	.word	0x08024e08

08013b90 <rcl_service_init>:
 8013b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b94:	b088      	sub	sp, #32
 8013b96:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013b98:	b1ff      	cbz	r7, 8013bda <rcl_service_init+0x4a>
 8013b9a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	460e      	mov	r6, r1
 8013ba2:	4691      	mov	r9, r2
 8013ba4:	4650      	mov	r0, sl
 8013ba6:	4698      	mov	r8, r3
 8013ba8:	f001 fa30 	bl	801500c <rcutils_allocator_is_valid>
 8013bac:	f080 0401 	eor.w	r4, r0, #1
 8013bb0:	b2e4      	uxtb	r4, r4
 8013bb2:	b994      	cbnz	r4, 8013bda <rcl_service_init+0x4a>
 8013bb4:	b18d      	cbz	r5, 8013bda <rcl_service_init+0x4a>
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	f7ff fe78 	bl	80138ac <rcl_node_is_valid>
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	d05d      	beq.n	8013c7c <rcl_service_init+0xec>
 8013bc0:	f1b8 0f00 	cmp.w	r8, #0
 8013bc4:	d009      	beq.n	8013bda <rcl_service_init+0x4a>
 8013bc6:	f1b9 0f00 	cmp.w	r9, #0
 8013bca:	d006      	beq.n	8013bda <rcl_service_init+0x4a>
 8013bcc:	682b      	ldr	r3, [r5, #0]
 8013bce:	b14b      	cbz	r3, 8013be4 <rcl_service_init+0x54>
 8013bd0:	2464      	movs	r4, #100	; 0x64
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	b008      	add	sp, #32
 8013bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bda:	240b      	movs	r4, #11
 8013bdc:	4620      	mov	r0, r4
 8013bde:	b008      	add	sp, #32
 8013be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013be4:	aa07      	add	r2, sp, #28
 8013be6:	9304      	str	r3, [sp, #16]
 8013be8:	9307      	str	r3, [sp, #28]
 8013bea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013bee:	9205      	str	r2, [sp, #20]
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	9203      	str	r2, [sp, #12]
 8013bf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013bf8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013bfc:	4641      	mov	r1, r8
 8013bfe:	4630      	mov	r0, r6
 8013c00:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013c04:	f007 fe40 	bl	801b888 <rcl_node_resolve_name>
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	d146      	bne.n	8013c9a <rcl_service_init+0x10a>
 8013c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c0e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8013c12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c14:	4798      	blx	r3
 8013c16:	6028      	str	r0, [r5, #0]
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d046      	beq.n	8013caa <rcl_service_init+0x11a>
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7ff fe67 	bl	80138f0 <rcl_node_get_rmw_handle>
 8013c22:	463b      	mov	r3, r7
 8013c24:	4649      	mov	r1, r9
 8013c26:	9a07      	ldr	r2, [sp, #28]
 8013c28:	682c      	ldr	r4, [r5, #0]
 8013c2a:	f002 fbb1 	bl	8016390 <rmw_create_service>
 8013c2e:	682b      	ldr	r3, [r5, #0]
 8013c30:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8013c34:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013c38:	b338      	cbz	r0, 8013c8a <rcl_service_init+0xfa>
 8013c3a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8013c3e:	f002 fcd9 	bl	80165f4 <rmw_service_request_subscription_get_actual_qos>
 8013c42:	bb00      	cbnz	r0, 8013c86 <rcl_service_init+0xf6>
 8013c44:	682b      	ldr	r3, [r5, #0]
 8013c46:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8013c4a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013c4e:	f002 fcbd 	bl	80165cc <rmw_service_response_publisher_get_actual_qos>
 8013c52:	4604      	mov	r4, r0
 8013c54:	b9b8      	cbnz	r0, 8013c86 <rcl_service_init+0xf6>
 8013c56:	6828      	ldr	r0, [r5, #0]
 8013c58:	2268      	movs	r2, #104	; 0x68
 8013c5a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013c5e:	4639      	mov	r1, r7
 8013c60:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013c64:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8013c68:	f00d f931 	bl	8020ece <memcpy>
 8013c6c:	9807      	ldr	r0, [sp, #28]
 8013c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c72:	4798      	blx	r3
 8013c74:	4620      	mov	r0, r4
 8013c76:	b008      	add	sp, #32
 8013c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c7c:	24c8      	movs	r4, #200	; 0xc8
 8013c7e:	4620      	mov	r0, r4
 8013c80:	b008      	add	sp, #32
 8013c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c86:	682b      	ldr	r3, [r5, #0]
 8013c88:	b16b      	cbz	r3, 8013ca6 <rcl_service_init+0x116>
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c90:	2401      	movs	r4, #1
 8013c92:	4790      	blx	r2
 8013c94:	2300      	movs	r3, #0
 8013c96:	602b      	str	r3, [r5, #0]
 8013c98:	e7e8      	b.n	8013c6c <rcl_service_init+0xdc>
 8013c9a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d905      	bls.n	8013cae <rcl_service_init+0x11e>
 8013ca2:	280a      	cmp	r0, #10
 8013ca4:	d001      	beq.n	8013caa <rcl_service_init+0x11a>
 8013ca6:	2401      	movs	r4, #1
 8013ca8:	e7e0      	b.n	8013c6c <rcl_service_init+0xdc>
 8013caa:	240a      	movs	r4, #10
 8013cac:	e7de      	b.n	8013c6c <rcl_service_init+0xdc>
 8013cae:	2468      	movs	r4, #104	; 0x68
 8013cb0:	e7dc      	b.n	8013c6c <rcl_service_init+0xdc>
 8013cb2:	bf00      	nop

08013cb4 <rcl_service_get_default_options>:
 8013cb4:	b530      	push	{r4, r5, lr}
 8013cb6:	4d0f      	ldr	r5, [pc, #60]	; (8013cf4 <rcl_service_get_default_options+0x40>)
 8013cb8:	b087      	sub	sp, #28
 8013cba:	4604      	mov	r4, r0
 8013cbc:	2250      	movs	r2, #80	; 0x50
 8013cbe:	490e      	ldr	r1, [pc, #56]	; (8013cf8 <rcl_service_get_default_options+0x44>)
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f00d f904 	bl	8020ece <memcpy>
 8013cc6:	4668      	mov	r0, sp
 8013cc8:	f001 f992 	bl	8014ff0 <rcutils_get_default_allocator>
 8013ccc:	46ec      	mov	ip, sp
 8013cce:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013cd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013cda:	f8dc 3000 	ldr.w	r3, [ip]
 8013cde:	2268      	movs	r2, #104	; 0x68
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	f8ce 3000 	str.w	r3, [lr]
 8013ce8:	f00d f8f1 	bl	8020ece <memcpy>
 8013cec:	4620      	mov	r0, r4
 8013cee:	b007      	add	sp, #28
 8013cf0:	bd30      	pop	{r4, r5, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20012330 	.word	0x20012330
 8013cf8:	08024e10 	.word	0x08024e10

08013cfc <rcl_service_get_rmw_handle>:
 8013cfc:	b118      	cbz	r0, 8013d06 <rcl_service_get_rmw_handle+0xa>
 8013cfe:	6800      	ldr	r0, [r0, #0]
 8013d00:	b108      	cbz	r0, 8013d06 <rcl_service_get_rmw_handle+0xa>
 8013d02:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013d06:	4770      	bx	lr

08013d08 <rcl_take_request>:
 8013d08:	b570      	push	{r4, r5, r6, lr}
 8013d0a:	468e      	mov	lr, r1
 8013d0c:	b08c      	sub	sp, #48	; 0x30
 8013d0e:	460c      	mov	r4, r1
 8013d10:	4616      	mov	r6, r2
 8013d12:	f10d 0c18 	add.w	ip, sp, #24
 8013d16:	4605      	mov	r5, r0
 8013d18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d28:	b30d      	cbz	r5, 8013d6e <rcl_take_request+0x66>
 8013d2a:	682b      	ldr	r3, [r5, #0]
 8013d2c:	b1fb      	cbz	r3, 8013d6e <rcl_take_request+0x66>
 8013d2e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013d32:	b1e0      	cbz	r0, 8013d6e <rcl_take_request+0x66>
 8013d34:	b336      	cbz	r6, 8013d84 <rcl_take_request+0x7c>
 8013d36:	2300      	movs	r3, #0
 8013d38:	4632      	mov	r2, r6
 8013d3a:	a902      	add	r1, sp, #8
 8013d3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013d40:	f10d 0307 	add.w	r3, sp, #7
 8013d44:	f002 fa22 	bl	801618c <rmw_take_request>
 8013d48:	4605      	mov	r5, r0
 8013d4a:	b198      	cbz	r0, 8013d74 <rcl_take_request+0x6c>
 8013d4c:	280a      	cmp	r0, #10
 8013d4e:	bf18      	it	ne
 8013d50:	2501      	movne	r5, #1
 8013d52:	f10d 0e18 	add.w	lr, sp, #24
 8013d56:	46a4      	mov	ip, r4
 8013d58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d60:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d64:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d68:	4628      	mov	r0, r5
 8013d6a:	b00c      	add	sp, #48	; 0x30
 8013d6c:	bd70      	pop	{r4, r5, r6, pc}
 8013d6e:	f44f 7516 	mov.w	r5, #600	; 0x258
 8013d72:	e7ee      	b.n	8013d52 <rcl_take_request+0x4a>
 8013d74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013d78:	f240 2359 	movw	r3, #601	; 0x259
 8013d7c:	2a00      	cmp	r2, #0
 8013d7e:	bf08      	it	eq
 8013d80:	461d      	moveq	r5, r3
 8013d82:	e7e6      	b.n	8013d52 <rcl_take_request+0x4a>
 8013d84:	250b      	movs	r5, #11
 8013d86:	e7e4      	b.n	8013d52 <rcl_take_request+0x4a>

08013d88 <rcl_send_response>:
 8013d88:	b170      	cbz	r0, 8013da8 <rcl_send_response+0x20>
 8013d8a:	6800      	ldr	r0, [r0, #0]
 8013d8c:	b160      	cbz	r0, 8013da8 <rcl_send_response+0x20>
 8013d8e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013d92:	b148      	cbz	r0, 8013da8 <rcl_send_response+0x20>
 8013d94:	b169      	cbz	r1, 8013db2 <rcl_send_response+0x2a>
 8013d96:	b510      	push	{r4, lr}
 8013d98:	b14a      	cbz	r2, 8013dae <rcl_send_response+0x26>
 8013d9a:	f002 fa55 	bl	8016248 <rmw_send_response>
 8013d9e:	b110      	cbz	r0, 8013da6 <rcl_send_response+0x1e>
 8013da0:	2802      	cmp	r0, #2
 8013da2:	bf18      	it	ne
 8013da4:	2001      	movne	r0, #1
 8013da6:	bd10      	pop	{r4, pc}
 8013da8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013dac:	4770      	bx	lr
 8013dae:	200b      	movs	r0, #11
 8013db0:	bd10      	pop	{r4, pc}
 8013db2:	200b      	movs	r0, #11
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop

08013db8 <rcl_service_is_valid>:
 8013db8:	b130      	cbz	r0, 8013dc8 <rcl_service_is_valid+0x10>
 8013dba:	6800      	ldr	r0, [r0, #0]
 8013dbc:	b120      	cbz	r0, 8013dc8 <rcl_service_is_valid+0x10>
 8013dbe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013dc2:	3800      	subs	r0, #0
 8013dc4:	bf18      	it	ne
 8013dc6:	2001      	movne	r0, #1
 8013dc8:	4770      	bx	lr
 8013dca:	bf00      	nop

08013dcc <rcl_get_zero_initialized_subscription>:
 8013dcc:	4b01      	ldr	r3, [pc, #4]	; (8013dd4 <rcl_get_zero_initialized_subscription+0x8>)
 8013dce:	6818      	ldr	r0, [r3, #0]
 8013dd0:	4770      	bx	lr
 8013dd2:	bf00      	nop
 8013dd4:	08024e60 	.word	0x08024e60

08013dd8 <rcl_subscription_init>:
 8013dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ddc:	b088      	sub	sp, #32
 8013dde:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013de0:	b1ff      	cbz	r7, 8013e22 <rcl_subscription_init+0x4a>
 8013de2:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013de6:	4605      	mov	r5, r0
 8013de8:	460e      	mov	r6, r1
 8013dea:	4691      	mov	r9, r2
 8013dec:	4650      	mov	r0, sl
 8013dee:	4698      	mov	r8, r3
 8013df0:	f001 f90c 	bl	801500c <rcutils_allocator_is_valid>
 8013df4:	f080 0401 	eor.w	r4, r0, #1
 8013df8:	b2e4      	uxtb	r4, r4
 8013dfa:	b994      	cbnz	r4, 8013e22 <rcl_subscription_init+0x4a>
 8013dfc:	b18d      	cbz	r5, 8013e22 <rcl_subscription_init+0x4a>
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f7ff fd54 	bl	80138ac <rcl_node_is_valid>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	d055      	beq.n	8013eb4 <rcl_subscription_init+0xdc>
 8013e08:	f1b9 0f00 	cmp.w	r9, #0
 8013e0c:	d009      	beq.n	8013e22 <rcl_subscription_init+0x4a>
 8013e0e:	f1b8 0f00 	cmp.w	r8, #0
 8013e12:	d006      	beq.n	8013e22 <rcl_subscription_init+0x4a>
 8013e14:	682b      	ldr	r3, [r5, #0]
 8013e16:	b14b      	cbz	r3, 8013e2c <rcl_subscription_init+0x54>
 8013e18:	2464      	movs	r4, #100	; 0x64
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	b008      	add	sp, #32
 8013e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e22:	240b      	movs	r4, #11
 8013e24:	4620      	mov	r0, r4
 8013e26:	b008      	add	sp, #32
 8013e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013e30:	aa07      	add	r2, sp, #28
 8013e32:	9307      	str	r3, [sp, #28]
 8013e34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e38:	9205      	str	r2, [sp, #20]
 8013e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013e42:	4641      	mov	r1, r8
 8013e44:	4630      	mov	r0, r6
 8013e46:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013e4a:	f007 fd1d 	bl	801b888 <rcl_node_resolve_name>
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	d15f      	bne.n	8013f12 <rcl_subscription_init+0x13a>
 8013e52:	21c8      	movs	r1, #200	; 0xc8
 8013e54:	2001      	movs	r0, #1
 8013e56:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8013e5a:	4798      	blx	r3
 8013e5c:	6028      	str	r0, [r5, #0]
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d05f      	beq.n	8013f22 <rcl_subscription_init+0x14a>
 8013e62:	4630      	mov	r0, r6
 8013e64:	f7ff fd44 	bl	80138f0 <rcl_node_get_rmw_handle>
 8013e68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013e6c:	4649      	mov	r1, r9
 8013e6e:	9a07      	ldr	r2, [sp, #28]
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	463b      	mov	r3, r7
 8013e74:	682c      	ldr	r4, [r5, #0]
 8013e76:	f002 fbd1 	bl	801661c <rmw_create_subscription>
 8013e7a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8013e7e:	682c      	ldr	r4, [r5, #0]
 8013e80:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8013e84:	b348      	cbz	r0, 8013eda <rcl_subscription_init+0x102>
 8013e86:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8013e8a:	f002 fcbd 	bl	8016808 <rmw_subscription_get_actual_qos>
 8013e8e:	4604      	mov	r4, r0
 8013e90:	b9a8      	cbnz	r0, 8013ebe <rcl_subscription_init+0xe6>
 8013e92:	6828      	ldr	r0, [r5, #0]
 8013e94:	2270      	movs	r2, #112	; 0x70
 8013e96:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8013ea0:	f00d f815 	bl	8020ece <memcpy>
 8013ea4:	9807      	ldr	r0, [sp, #28]
 8013ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ea8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013eaa:	4798      	blx	r3
 8013eac:	4620      	mov	r0, r4
 8013eae:	b008      	add	sp, #32
 8013eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eb4:	24c8      	movs	r4, #200	; 0xc8
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	b008      	add	sp, #32
 8013eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ebe:	682c      	ldr	r4, [r5, #0]
 8013ec0:	b36c      	cbz	r4, 8013f1e <rcl_subscription_init+0x146>
 8013ec2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8013ec6:	b14b      	cbz	r3, 8013edc <rcl_subscription_init+0x104>
 8013ec8:	4630      	mov	r0, r6
 8013eca:	f7ff fd11 	bl	80138f0 <rcl_node_get_rmw_handle>
 8013ece:	682b      	ldr	r3, [r5, #0]
 8013ed0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8013ed4:	f002 fcac 	bl	8016830 <rmw_destroy_subscription>
 8013ed8:	682c      	ldr	r4, [r5, #0]
 8013eda:	b194      	cbz	r4, 8013f02 <rcl_subscription_init+0x12a>
 8013edc:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f001 f893 	bl	801500c <rcutils_allocator_is_valid>
 8013ee6:	b158      	cbz	r0, 8013f00 <rcl_subscription_init+0x128>
 8013ee8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013eea:	b148      	cbz	r0, 8013f00 <rcl_subscription_init+0x128>
 8013eec:	4631      	mov	r1, r6
 8013eee:	f001 fac3 	bl	8015478 <rmw_subscription_content_filter_options_fini>
 8013ef2:	4606      	mov	r6, r0
 8013ef4:	b9c8      	cbnz	r0, 8013f2a <rcl_subscription_init+0x152>
 8013ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013ef8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8013efa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013efc:	4798      	blx	r3
 8013efe:	66e6      	str	r6, [r4, #108]	; 0x6c
 8013f00:	682c      	ldr	r4, [r5, #0]
 8013f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f04:	4620      	mov	r0, r4
 8013f06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013f08:	2401      	movs	r4, #1
 8013f0a:	4798      	blx	r3
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	602b      	str	r3, [r5, #0]
 8013f10:	e7c8      	b.n	8013ea4 <rcl_subscription_init+0xcc>
 8013f12:	2867      	cmp	r0, #103	; 0x67
 8013f14:	d007      	beq.n	8013f26 <rcl_subscription_init+0x14e>
 8013f16:	2869      	cmp	r0, #105	; 0x69
 8013f18:	d005      	beq.n	8013f26 <rcl_subscription_init+0x14e>
 8013f1a:	280a      	cmp	r0, #10
 8013f1c:	d001      	beq.n	8013f22 <rcl_subscription_init+0x14a>
 8013f1e:	2401      	movs	r4, #1
 8013f20:	e7c0      	b.n	8013ea4 <rcl_subscription_init+0xcc>
 8013f22:	240a      	movs	r4, #10
 8013f24:	e7be      	b.n	8013ea4 <rcl_subscription_init+0xcc>
 8013f26:	2467      	movs	r4, #103	; 0x67
 8013f28:	e7bc      	b.n	8013ea4 <rcl_subscription_init+0xcc>
 8013f2a:	f007 fa53 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013f2e:	682c      	ldr	r4, [r5, #0]
 8013f30:	e7e7      	b.n	8013f02 <rcl_subscription_init+0x12a>
 8013f32:	bf00      	nop

08013f34 <rcl_subscription_get_default_options>:
 8013f34:	b570      	push	{r4, r5, r6, lr}
 8013f36:	4d14      	ldr	r5, [pc, #80]	; (8013f88 <rcl_subscription_get_default_options+0x54>)
 8013f38:	b08a      	sub	sp, #40	; 0x28
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	2250      	movs	r2, #80	; 0x50
 8013f3e:	4913      	ldr	r1, [pc, #76]	; (8013f8c <rcl_subscription_get_default_options+0x58>)
 8013f40:	4628      	mov	r0, r5
 8013f42:	f00c ffc4 	bl	8020ece <memcpy>
 8013f46:	a804      	add	r0, sp, #16
 8013f48:	f001 f852 	bl	8014ff0 <rcutils_get_default_allocator>
 8013f4c:	f10d 0c10 	add.w	ip, sp, #16
 8013f50:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013f54:	466e      	mov	r6, sp
 8013f56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f5e:	f8dc 3000 	ldr.w	r3, [ip]
 8013f62:	4630      	mov	r0, r6
 8013f64:	f8ce 3000 	str.w	r3, [lr]
 8013f68:	f001 faa0 	bl	80154ac <rmw_get_default_subscription_options>
 8013f6c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013f70:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013f78:	2270      	movs	r2, #112	; 0x70
 8013f7a:	4629      	mov	r1, r5
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	f00c ffa6 	bl	8020ece <memcpy>
 8013f82:	4620      	mov	r0, r4
 8013f84:	b00a      	add	sp, #40	; 0x28
 8013f86:	bd70      	pop	{r4, r5, r6, pc}
 8013f88:	20012398 	.word	0x20012398
 8013f8c:	08024e68 	.word	0x08024e68

08013f90 <rcl_take>:
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d049      	beq.n	8014028 <rcl_take+0x98>
 8013f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f98:	4615      	mov	r5, r2
 8013f9a:	6802      	ldr	r2, [r0, #0]
 8013f9c:	b0a4      	sub	sp, #144	; 0x90
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	2a00      	cmp	r2, #0
 8013fa2:	d039      	beq.n	8014018 <rcl_take+0x88>
 8013fa4:	461f      	mov	r7, r3
 8013fa6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8013faa:	b3ab      	cbz	r3, 8014018 <rcl_take+0x88>
 8013fac:	460e      	mov	r6, r1
 8013fae:	2900      	cmp	r1, #0
 8013fb0:	d038      	beq.n	8014024 <rcl_take+0x94>
 8013fb2:	2d00      	cmp	r5, #0
 8013fb4:	d03c      	beq.n	8014030 <rcl_take+0xa0>
 8013fb6:	a802      	add	r0, sp, #8
 8013fb8:	f04f 0800 	mov.w	r8, #0
 8013fbc:	f001 fa7c 	bl	80154b8 <rmw_get_zero_initialized_message_info>
 8013fc0:	f10d 0c08 	add.w	ip, sp, #8
 8013fc4:	46ae      	mov	lr, r5
 8013fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013fce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013fd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013fde:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013fe2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013fe6:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8013fea:	462b      	mov	r3, r5
 8013fec:	6820      	ldr	r0, [r4, #0]
 8013fee:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8013ff2:	4631      	mov	r1, r6
 8013ff4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013ff8:	9700      	str	r7, [sp, #0]
 8013ffa:	f002 fc7b 	bl	80168f4 <rmw_take_with_info>
 8013ffe:	4603      	mov	r3, r0
 8014000:	b9c0      	cbnz	r0, 8014034 <rcl_take+0xa4>
 8014002:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8014006:	f240 1291 	movw	r2, #401	; 0x191
 801400a:	2900      	cmp	r1, #0
 801400c:	bf08      	it	eq
 801400e:	4613      	moveq	r3, r2
 8014010:	4618      	mov	r0, r3
 8014012:	b024      	add	sp, #144	; 0x90
 8014014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014018:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801401c:	4618      	mov	r0, r3
 801401e:	b024      	add	sp, #144	; 0x90
 8014020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014024:	230b      	movs	r3, #11
 8014026:	e7f3      	b.n	8014010 <rcl_take+0x80>
 8014028:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801402c:	4618      	mov	r0, r3
 801402e:	4770      	bx	lr
 8014030:	ad14      	add	r5, sp, #80	; 0x50
 8014032:	e7c0      	b.n	8013fb6 <rcl_take+0x26>
 8014034:	f007 f9ce 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014038:	4603      	mov	r3, r0
 801403a:	e7e9      	b.n	8014010 <rcl_take+0x80>

0801403c <rcl_subscription_get_rmw_handle>:
 801403c:	b118      	cbz	r0, 8014046 <rcl_subscription_get_rmw_handle+0xa>
 801403e:	6800      	ldr	r0, [r0, #0]
 8014040:	b108      	cbz	r0, 8014046 <rcl_subscription_get_rmw_handle+0xa>
 8014042:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014046:	4770      	bx	lr

08014048 <rcl_subscription_is_valid>:
 8014048:	b130      	cbz	r0, 8014058 <rcl_subscription_is_valid+0x10>
 801404a:	6800      	ldr	r0, [r0, #0]
 801404c:	b120      	cbz	r0, 8014058 <rcl_subscription_is_valid+0x10>
 801404e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014052:	3800      	subs	r0, #0
 8014054:	bf18      	it	ne
 8014056:	2001      	movne	r0, #1
 8014058:	4770      	bx	lr
 801405a:	bf00      	nop

0801405c <_rclc_check_for_new_data>:
 801405c:	2800      	cmp	r0, #0
 801405e:	d046      	beq.n	80140ee <_rclc_check_for_new_data+0x92>
 8014060:	4603      	mov	r3, r0
 8014062:	b530      	push	{r4, r5, lr}
 8014064:	7802      	ldrb	r2, [r0, #0]
 8014066:	b085      	sub	sp, #20
 8014068:	2a0a      	cmp	r2, #10
 801406a:	d842      	bhi.n	80140f2 <_rclc_check_for_new_data+0x96>
 801406c:	e8df f002 	tbb	[pc, r2]
 8014070:	14181212 	.word	0x14181212
 8014074:	06060614 	.word	0x06060614
 8014078:	2e1a      	.short	0x2e1a
 801407a:	16          	.byte	0x16
 801407b:	00          	.byte	0x00
 801407c:	6a0a      	ldr	r2, [r1, #32]
 801407e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014080:	2000      	movs	r0, #0
 8014082:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014086:	1a12      	subs	r2, r2, r0
 8014088:	bf18      	it	ne
 801408a:	2201      	movne	r2, #1
 801408c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014090:	b005      	add	sp, #20
 8014092:	bd30      	pop	{r4, r5, pc}
 8014094:	680a      	ldr	r2, [r1, #0]
 8014096:	e7f2      	b.n	801407e <_rclc_check_for_new_data+0x22>
 8014098:	698a      	ldr	r2, [r1, #24]
 801409a:	e7f0      	b.n	801407e <_rclc_check_for_new_data+0x22>
 801409c:	688a      	ldr	r2, [r1, #8]
 801409e:	e7ee      	b.n	801407e <_rclc_check_for_new_data+0x22>
 80140a0:	690a      	ldr	r2, [r1, #16]
 80140a2:	e7ec      	b.n	801407e <_rclc_check_for_new_data+0x22>
 80140a4:	685c      	ldr	r4, [r3, #4]
 80140a6:	4608      	mov	r0, r1
 80140a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140b4:	f104 0110 	add.w	r1, r4, #16
 80140b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80140bc:	9500      	str	r5, [sp, #0]
 80140be:	f104 0341 	add.w	r3, r4, #65	; 0x41
 80140c2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80140c6:	f008 ff4b 	bl	801cf60 <rcl_action_client_wait_set_get_entities_ready>
 80140ca:	e7e1      	b.n	8014090 <_rclc_check_for_new_data+0x34>
 80140cc:	685c      	ldr	r4, [r3, #4]
 80140ce:	4608      	mov	r0, r1
 80140d0:	f104 0222 	add.w	r2, r4, #34	; 0x22
 80140d4:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80140d8:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80140dc:	e9cd 2100 	strd	r2, r1, [sp]
 80140e0:	f104 0220 	add.w	r2, r4, #32
 80140e4:	f104 0110 	add.w	r1, r4, #16
 80140e8:	f009 f952 	bl	801d390 <rcl_action_server_wait_set_get_entities_ready>
 80140ec:	e7d0      	b.n	8014090 <_rclc_check_for_new_data+0x34>
 80140ee:	200b      	movs	r0, #11
 80140f0:	4770      	bx	lr
 80140f2:	2001      	movs	r0, #1
 80140f4:	e7cc      	b.n	8014090 <_rclc_check_for_new_data+0x34>
 80140f6:	bf00      	nop

080140f8 <_rclc_take_new_data>:
 80140f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140fa:	b09b      	sub	sp, #108	; 0x6c
 80140fc:	2800      	cmp	r0, #0
 80140fe:	f000 8088 	beq.w	8014212 <_rclc_take_new_data+0x11a>
 8014102:	7803      	ldrb	r3, [r0, #0]
 8014104:	4604      	mov	r4, r0
 8014106:	2b0a      	cmp	r3, #10
 8014108:	f200 8167 	bhi.w	80143da <_rclc_take_new_data+0x2e2>
 801410c:	e8df f003 	tbb	[pc, r3]
 8014110:	44152d2d 	.word	0x44152d2d
 8014114:	19191944 	.word	0x19191944
 8014118:	065a      	.short	0x065a
 801411a:	15          	.byte	0x15
 801411b:	00          	.byte	0x00
 801411c:	6840      	ldr	r0, [r0, #4]
 801411e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014122:	2b00      	cmp	r3, #0
 8014124:	f040 80b2 	bne.w	801428c <_rclc_take_new_data+0x194>
 8014128:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801412c:	2b00      	cmp	r3, #0
 801412e:	f040 80e4 	bne.w	80142fa <_rclc_take_new_data+0x202>
 8014132:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8014136:	2b00      	cmp	r3, #0
 8014138:	d16f      	bne.n	801421a <_rclc_take_new_data+0x122>
 801413a:	2500      	movs	r5, #0
 801413c:	4628      	mov	r0, r5
 801413e:	b01b      	add	sp, #108	; 0x6c
 8014140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014142:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014144:	6a0b      	ldr	r3, [r1, #32]
 8014146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d0f5      	beq.n	801413a <_rclc_take_new_data+0x42>
 801414e:	6882      	ldr	r2, [r0, #8]
 8014150:	f100 0110 	add.w	r1, r0, #16
 8014154:	6840      	ldr	r0, [r0, #4]
 8014156:	f7ff fdd7 	bl	8013d08 <rcl_take_request>
 801415a:	4605      	mov	r5, r0
 801415c:	2800      	cmp	r0, #0
 801415e:	d0ec      	beq.n	801413a <_rclc_take_new_data+0x42>
 8014160:	f240 2359 	movw	r3, #601	; 0x259
 8014164:	4298      	cmp	r0, r3
 8014166:	d013      	beq.n	8014190 <_rclc_take_new_data+0x98>
 8014168:	e029      	b.n	80141be <_rclc_take_new_data+0xc6>
 801416a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801416c:	680b      	ldr	r3, [r1, #0]
 801416e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d0e1      	beq.n	801413a <_rclc_take_new_data+0x42>
 8014176:	2300      	movs	r3, #0
 8014178:	aa0a      	add	r2, sp, #40	; 0x28
 801417a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801417e:	f7ff ff07 	bl	8013f90 <rcl_take>
 8014182:	4605      	mov	r5, r0
 8014184:	2800      	cmp	r0, #0
 8014186:	d0d9      	beq.n	801413c <_rclc_take_new_data+0x44>
 8014188:	f240 1391 	movw	r3, #401	; 0x191
 801418c:	4298      	cmp	r0, r3
 801418e:	d116      	bne.n	80141be <_rclc_take_new_data+0xc6>
 8014190:	2300      	movs	r3, #0
 8014192:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014196:	e7d1      	b.n	801413c <_rclc_take_new_data+0x44>
 8014198:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801419a:	698b      	ldr	r3, [r1, #24]
 801419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d0ca      	beq.n	801413a <_rclc_take_new_data+0x42>
 80141a4:	6882      	ldr	r2, [r0, #8]
 80141a6:	f100 0110 	add.w	r1, r0, #16
 80141aa:	6840      	ldr	r0, [r0, #4]
 80141ac:	f007 f8c0 	bl	801b330 <rcl_take_response>
 80141b0:	4605      	mov	r5, r0
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d0c1      	beq.n	801413a <_rclc_take_new_data+0x42>
 80141b6:	f240 13f5 	movw	r3, #501	; 0x1f5
 80141ba:	4298      	cmp	r0, r3
 80141bc:	d0be      	beq.n	801413c <_rclc_take_new_data+0x44>
 80141be:	f000 ff63 	bl	8015088 <rcutils_reset_error>
 80141c2:	e7bb      	b.n	801413c <_rclc_take_new_data+0x44>
 80141c4:	6840      	ldr	r0, [r0, #4]
 80141c6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d17d      	bne.n	80142ca <_rclc_take_new_data+0x1d2>
 80141ce:	69c3      	ldr	r3, [r0, #28]
 80141d0:	b11b      	cbz	r3, 80141da <_rclc_take_new_data+0xe2>
 80141d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d144      	bne.n	8014264 <_rclc_take_new_data+0x16c>
 80141da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80141de:	2b00      	cmp	r3, #0
 80141e0:	f040 80ac 	bne.w	801433c <_rclc_take_new_data+0x244>
 80141e4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d0a6      	beq.n	801413a <_rclc_take_new_data+0x42>
 80141ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80141ee:	a90a      	add	r1, sp, #40	; 0x28
 80141f0:	3010      	adds	r0, #16
 80141f2:	f008 fd8d 	bl	801cd10 <rcl_action_take_result_response>
 80141f6:	4605      	mov	r5, r0
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d1e0      	bne.n	80141be <_rclc_take_new_data+0xc6>
 80141fc:	6860      	ldr	r0, [r4, #4]
 80141fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014202:	f009 f9f5 	bl	801d5f0 <rclc_action_find_handle_by_result_request_sequence_number>
 8014206:	2800      	cmp	r0, #0
 8014208:	d098      	beq.n	801413c <_rclc_take_new_data+0x44>
 801420a:	2301      	movs	r3, #1
 801420c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8014210:	e794      	b.n	801413c <_rclc_take_new_data+0x44>
 8014212:	250b      	movs	r5, #11
 8014214:	4628      	mov	r0, r5
 8014216:	b01b      	add	sp, #108	; 0x6c
 8014218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801421a:	ae04      	add	r6, sp, #16
 801421c:	3010      	adds	r0, #16
 801421e:	aa0a      	add	r2, sp, #40	; 0x28
 8014220:	4631      	mov	r1, r6
 8014222:	f008 ffe9 	bl	801d1f8 <rcl_action_take_cancel_request>
 8014226:	4605      	mov	r5, r0
 8014228:	2800      	cmp	r0, #0
 801422a:	d1c8      	bne.n	80141be <_rclc_take_new_data+0xc6>
 801422c:	a90a      	add	r1, sp, #40	; 0x28
 801422e:	6860      	ldr	r0, [r4, #4]
 8014230:	f009 f99e 	bl	801d570 <rclc_action_find_goal_handle_by_uuid>
 8014234:	4607      	mov	r7, r0
 8014236:	2800      	cmp	r0, #0
 8014238:	f000 80bb 	beq.w	80143b2 <_rclc_take_new_data+0x2ba>
 801423c:	2101      	movs	r1, #1
 801423e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014242:	f009 f91f 	bl	801d484 <rcl_action_transition_goal_state>
 8014246:	2803      	cmp	r0, #3
 8014248:	4684      	mov	ip, r0
 801424a:	f040 80a7 	bne.w	801439c <_rclc_take_new_data+0x2a4>
 801424e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8014252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014256:	e896 0003 	ldmia.w	r6, {r0, r1}
 801425a:	e884 0003 	stmia.w	r4, {r0, r1}
 801425e:	f887 c008 	strb.w	ip, [r7, #8]
 8014262:	e76b      	b.n	801413c <_rclc_take_new_data+0x44>
 8014264:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014266:	3010      	adds	r0, #16
 8014268:	f008 fdd2 	bl	801ce10 <rcl_action_take_feedback>
 801426c:	4605      	mov	r5, r0
 801426e:	2800      	cmp	r0, #0
 8014270:	d1a5      	bne.n	80141be <_rclc_take_new_data+0xc6>
 8014272:	6860      	ldr	r0, [r4, #4]
 8014274:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014276:	f009 f97b 	bl	801d570 <rclc_action_find_goal_handle_by_uuid>
 801427a:	4603      	mov	r3, r0
 801427c:	2800      	cmp	r0, #0
 801427e:	f000 80a3 	beq.w	80143c8 <_rclc_take_new_data+0x2d0>
 8014282:	2201      	movs	r2, #1
 8014284:	6860      	ldr	r0, [r4, #4]
 8014286:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 801428a:	e7a6      	b.n	80141da <_rclc_take_new_data+0xe2>
 801428c:	f009 f94a 	bl	801d524 <rclc_action_take_goal_handle>
 8014290:	4606      	mov	r6, r0
 8014292:	6860      	ldr	r0, [r4, #4]
 8014294:	2e00      	cmp	r6, #0
 8014296:	f43f af47 	beq.w	8014128 <_rclc_take_new_data+0x30>
 801429a:	6070      	str	r0, [r6, #4]
 801429c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80142a0:	69f2      	ldr	r2, [r6, #28]
 80142a2:	3010      	adds	r0, #16
 80142a4:	f008 fef2 	bl	801d08c <rcl_action_take_goal_request>
 80142a8:	4605      	mov	r5, r0
 80142aa:	2800      	cmp	r0, #0
 80142ac:	f040 808e 	bne.w	80143cc <_rclc_take_new_data+0x2d4>
 80142b0:	69f7      	ldr	r7, [r6, #28]
 80142b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80142b4:	7235      	strb	r5, [r6, #8]
 80142b6:	f8c6 0009 	str.w	r0, [r6, #9]
 80142ba:	f8c6 100d 	str.w	r1, [r6, #13]
 80142be:	6860      	ldr	r0, [r4, #4]
 80142c0:	f8c6 2011 	str.w	r2, [r6, #17]
 80142c4:	f8c6 3015 	str.w	r3, [r6, #21]
 80142c8:	e72e      	b.n	8014128 <_rclc_take_new_data+0x30>
 80142ca:	aa04      	add	r2, sp, #16
 80142cc:	a90a      	add	r1, sp, #40	; 0x28
 80142ce:	3010      	adds	r0, #16
 80142d0:	f008 fca6 	bl	801cc20 <rcl_action_take_goal_response>
 80142d4:	4605      	mov	r5, r0
 80142d6:	2800      	cmp	r0, #0
 80142d8:	f47f af71 	bne.w	80141be <_rclc_take_new_data+0xc6>
 80142dc:	6860      	ldr	r0, [r4, #4]
 80142de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142e2:	f009 f973 	bl	801d5cc <rclc_action_find_handle_by_goal_request_sequence_number>
 80142e6:	b130      	cbz	r0, 80142f6 <_rclc_take_new_data+0x1fe>
 80142e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80142ec:	2201      	movs	r2, #1
 80142ee:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80142f2:	f880 2020 	strb.w	r2, [r0, #32]
 80142f6:	6860      	ldr	r0, [r4, #4]
 80142f8:	e769      	b.n	80141ce <_rclc_take_new_data+0xd6>
 80142fa:	3010      	adds	r0, #16
 80142fc:	aa04      	add	r2, sp, #16
 80142fe:	a90a      	add	r1, sp, #40	; 0x28
 8014300:	f008 ff3a 	bl	801d178 <rcl_action_take_result_request>
 8014304:	4605      	mov	r5, r0
 8014306:	2800      	cmp	r0, #0
 8014308:	f47f af59 	bne.w	80141be <_rclc_take_new_data+0xc6>
 801430c:	a904      	add	r1, sp, #16
 801430e:	6860      	ldr	r0, [r4, #4]
 8014310:	f009 f92e 	bl	801d570 <rclc_action_find_goal_handle_by_uuid>
 8014314:	4607      	mov	r7, r0
 8014316:	b160      	cbz	r0, 8014332 <_rclc_take_new_data+0x23a>
 8014318:	ad0a      	add	r5, sp, #40	; 0x28
 801431a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801431e:	f04f 0c02 	mov.w	ip, #2
 8014322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014324:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014326:	e895 0003 	ldmia.w	r5, {r0, r1}
 801432a:	e886 0003 	stmia.w	r6, {r0, r1}
 801432e:	f887 c008 	strb.w	ip, [r7, #8]
 8014332:	6860      	ldr	r0, [r4, #4]
 8014334:	2300      	movs	r3, #0
 8014336:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 801433a:	e6fa      	b.n	8014132 <_rclc_take_new_data+0x3a>
 801433c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014340:	a90a      	add	r1, sp, #40	; 0x28
 8014342:	3010      	adds	r0, #16
 8014344:	f008 fd24 	bl	801cd90 <rcl_action_take_cancel_response>
 8014348:	4605      	mov	r5, r0
 801434a:	2800      	cmp	r0, #0
 801434c:	f47f af37 	bne.w	80141be <_rclc_take_new_data+0xc6>
 8014350:	6860      	ldr	r0, [r4, #4]
 8014352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014356:	f009 f95d 	bl	801d614 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801435a:	4606      	mov	r6, r0
 801435c:	6860      	ldr	r0, [r4, #4]
 801435e:	2e00      	cmp	r6, #0
 8014360:	f43f af40 	beq.w	80141e4 <_rclc_take_new_data+0xec>
 8014364:	2701      	movs	r7, #1
 8014366:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014368:	84b7      	strh	r7, [r6, #36]	; 0x24
 801436a:	2b00      	cmp	r3, #0
 801436c:	f43f af3a 	beq.w	80141e4 <_rclc_take_new_data+0xec>
 8014370:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014372:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014376:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801437a:	f009 f8f9 	bl	801d570 <rclc_action_find_goal_handle_by_uuid>
 801437e:	b138      	cbz	r0, 8014390 <_rclc_take_new_data+0x298>
 8014380:	6860      	ldr	r0, [r4, #4]
 8014382:	3501      	adds	r5, #1
 8014384:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8014388:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801438a:	42ab      	cmp	r3, r5
 801438c:	d8f0      	bhi.n	8014370 <_rclc_take_new_data+0x278>
 801438e:	e729      	b.n	80141e4 <_rclc_take_new_data+0xec>
 8014390:	6860      	ldr	r0, [r4, #4]
 8014392:	3501      	adds	r5, #1
 8014394:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014396:	42ab      	cmp	r3, r5
 8014398:	d8ea      	bhi.n	8014370 <_rclc_take_new_data+0x278>
 801439a:	e723      	b.n	80141e4 <_rclc_take_new_data+0xec>
 801439c:	ab06      	add	r3, sp, #24
 801439e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80143a4:	2103      	movs	r1, #3
 80143a6:	6860      	ldr	r0, [r4, #4]
 80143a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143ac:	f009 f9a8 	bl	801d700 <rclc_action_server_goal_cancel_reject>
 80143b0:	e6c4      	b.n	801413c <_rclc_take_new_data+0x44>
 80143b2:	ab06      	add	r3, sp, #24
 80143b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80143ba:	2102      	movs	r1, #2
 80143bc:	6860      	ldr	r0, [r4, #4]
 80143be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143c2:	f009 f99d 	bl	801d700 <rclc_action_server_goal_cancel_reject>
 80143c6:	e6b9      	b.n	801413c <_rclc_take_new_data+0x44>
 80143c8:	6860      	ldr	r0, [r4, #4]
 80143ca:	e706      	b.n	80141da <_rclc_take_new_data+0xe2>
 80143cc:	4631      	mov	r1, r6
 80143ce:	6860      	ldr	r0, [r4, #4]
 80143d0:	f009 f8b8 	bl	801d544 <rclc_action_remove_used_goal_handle>
 80143d4:	f000 fe58 	bl	8015088 <rcutils_reset_error>
 80143d8:	e6b0      	b.n	801413c <_rclc_take_new_data+0x44>
 80143da:	2501      	movs	r5, #1
 80143dc:	e6ae      	b.n	801413c <_rclc_take_new_data+0x44>
 80143de:	bf00      	nop

080143e0 <_rclc_execute.part.0>:
 80143e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e2:	7803      	ldrb	r3, [r0, #0]
 80143e4:	b085      	sub	sp, #20
 80143e6:	4604      	mov	r4, r0
 80143e8:	2b0a      	cmp	r3, #10
 80143ea:	f200 8139 	bhi.w	8014660 <_rclc_execute.part.0+0x280>
 80143ee:	e8df f003 	tbb	[pc, r3]
 80143f2:	4268      	.short	0x4268
 80143f4:	06a75b4d 	.word	0x06a75b4d
 80143f8:	721d0606 	.word	0x721d0606
 80143fc:	62          	.byte	0x62
 80143fd:	00          	.byte	0x00
 80143fe:	2b06      	cmp	r3, #6
 8014400:	f000 8126 	beq.w	8014650 <_rclc_execute.part.0+0x270>
 8014404:	2b07      	cmp	r3, #7
 8014406:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014408:	f040 811c 	bne.w	8014644 <_rclc_execute.part.0+0x264>
 801440c:	f104 0510 	add.w	r5, r4, #16
 8014410:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8014414:	6880      	ldr	r0, [r0, #8]
 8014416:	4798      	blx	r3
 8014418:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801441a:	4629      	mov	r1, r5
 801441c:	6860      	ldr	r0, [r4, #4]
 801441e:	f7ff fcb3 	bl	8013d88 <rcl_send_response>
 8014422:	4604      	mov	r4, r0
 8014424:	b378      	cbz	r0, 8014486 <_rclc_execute.part.0+0xa6>
 8014426:	f000 fe2f 	bl	8015088 <rcutils_reset_error>
 801442a:	e02c      	b.n	8014486 <_rclc_execute.part.0+0xa6>
 801442c:	6840      	ldr	r0, [r0, #4]
 801442e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8014432:	2b00      	cmp	r3, #0
 8014434:	f000 808e 	beq.w	8014554 <_rclc_execute.part.0+0x174>
 8014438:	2600      	movs	r6, #0
 801443a:	2701      	movs	r7, #1
 801443c:	e004      	b.n	8014448 <_rclc_execute.part.0+0x68>
 801443e:	f009 f84b 	bl	801d4d8 <rclc_action_send_result_request>
 8014442:	b998      	cbnz	r0, 801446c <_rclc_execute.part.0+0x8c>
 8014444:	722f      	strb	r7, [r5, #8]
 8014446:	6860      	ldr	r0, [r4, #4]
 8014448:	f009 f8f6 	bl	801d638 <rclc_action_find_first_handle_with_goal_response>
 801444c:	4605      	mov	r5, r0
 801444e:	2800      	cmp	r0, #0
 8014450:	d07f      	beq.n	8014552 <_rclc_execute.part.0+0x172>
 8014452:	6863      	ldr	r3, [r4, #4]
 8014454:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014456:	699b      	ldr	r3, [r3, #24]
 8014458:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 801445c:	f885 6020 	strb.w	r6, [r5, #32]
 8014460:	4798      	blx	r3
 8014462:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014466:	4628      	mov	r0, r5
 8014468:	2b00      	cmp	r3, #0
 801446a:	d1e8      	bne.n	801443e <_rclc_execute.part.0+0x5e>
 801446c:	6860      	ldr	r0, [r4, #4]
 801446e:	4629      	mov	r1, r5
 8014470:	f009 f868 	bl	801d544 <rclc_action_remove_used_goal_handle>
 8014474:	e7e7      	b.n	8014446 <_rclc_execute.part.0+0x66>
 8014476:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801447a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 801447e:	b100      	cbz	r0, 8014482 <_rclc_execute.part.0+0xa2>
 8014480:	68a0      	ldr	r0, [r4, #8]
 8014482:	2400      	movs	r4, #0
 8014484:	4798      	blx	r3
 8014486:	4620      	mov	r0, r4
 8014488:	b005      	add	sp, #20
 801448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801448c:	6840      	ldr	r0, [r0, #4]
 801448e:	f007 fc7d 	bl	801bd8c <rcl_timer_call>
 8014492:	f240 3321 	movw	r3, #801	; 0x321
 8014496:	4604      	mov	r4, r0
 8014498:	4298      	cmp	r0, r3
 801449a:	d001      	beq.n	80144a0 <_rclc_execute.part.0+0xc0>
 801449c:	2800      	cmp	r0, #0
 801449e:	d1c2      	bne.n	8014426 <_rclc_execute.part.0+0x46>
 80144a0:	2400      	movs	r4, #0
 80144a2:	4620      	mov	r0, r4
 80144a4:	b005      	add	sp, #20
 80144a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a8:	2400      	movs	r4, #0
 80144aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80144ac:	6880      	ldr	r0, [r0, #8]
 80144ae:	4798      	blx	r3
 80144b0:	4620      	mov	r0, r4
 80144b2:	b005      	add	sp, #20
 80144b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144b6:	2400      	movs	r4, #0
 80144b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80144ba:	4798      	blx	r3
 80144bc:	4620      	mov	r0, r4
 80144be:	b005      	add	sp, #20
 80144c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144c2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80144c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80144c8:	b100      	cbz	r0, 80144cc <_rclc_execute.part.0+0xec>
 80144ca:	68a0      	ldr	r0, [r4, #8]
 80144cc:	2400      	movs	r4, #0
 80144ce:	4798      	blx	r3
 80144d0:	4620      	mov	r0, r4
 80144d2:	b005      	add	sp, #20
 80144d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144d6:	6840      	ldr	r0, [r0, #4]
 80144d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80144dc:	bb3b      	cbnz	r3, 801452e <_rclc_execute.part.0+0x14e>
 80144de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d07d      	beq.n	80145e2 <_rclc_execute.part.0+0x202>
 80144e6:	f640 0634 	movw	r6, #2100	; 0x834
 80144ea:	2701      	movs	r7, #1
 80144ec:	e007      	b.n	80144fe <_rclc_execute.part.0+0x11e>
 80144ee:	4628      	mov	r0, r5
 80144f0:	f009 f8ba 	bl	801d668 <rclc_action_server_response_goal_request>
 80144f4:	4629      	mov	r1, r5
 80144f6:	6860      	ldr	r0, [r4, #4]
 80144f8:	f009 f824 	bl	801d544 <rclc_action_remove_used_goal_handle>
 80144fc:	6860      	ldr	r0, [r4, #4]
 80144fe:	2100      	movs	r1, #0
 8014500:	f009 f84c 	bl	801d59c <rclc_action_find_first_handle_by_status>
 8014504:	4605      	mov	r5, r0
 8014506:	2800      	cmp	r0, #0
 8014508:	d068      	beq.n	80145dc <_rclc_execute.part.0+0x1fc>
 801450a:	6863      	ldr	r3, [r4, #4]
 801450c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801450e:	699b      	ldr	r3, [r3, #24]
 8014510:	4798      	blx	r3
 8014512:	42b0      	cmp	r0, r6
 8014514:	f04f 0100 	mov.w	r1, #0
 8014518:	d1e9      	bne.n	80144ee <_rclc_execute.part.0+0x10e>
 801451a:	2101      	movs	r1, #1
 801451c:	4628      	mov	r0, r5
 801451e:	f009 f8a3 	bl	801d668 <rclc_action_server_response_goal_request>
 8014522:	722f      	strb	r7, [r5, #8]
 8014524:	e7ea      	b.n	80144fc <_rclc_execute.part.0+0x11c>
 8014526:	6848      	ldr	r0, [r1, #4]
 8014528:	f009 f80c 	bl	801d544 <rclc_action_remove_used_goal_handle>
 801452c:	6860      	ldr	r0, [r4, #4]
 801452e:	f009 f841 	bl	801d5b4 <rclc_action_find_first_terminated_handle>
 8014532:	4601      	mov	r1, r0
 8014534:	2800      	cmp	r0, #0
 8014536:	d1f6      	bne.n	8014526 <_rclc_execute.part.0+0x146>
 8014538:	6860      	ldr	r0, [r4, #4]
 801453a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801453e:	e7ce      	b.n	80144de <_rclc_execute.part.0+0xfe>
 8014540:	2400      	movs	r4, #0
 8014542:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014544:	f100 0110 	add.w	r1, r0, #16
 8014548:	6880      	ldr	r0, [r0, #8]
 801454a:	4798      	blx	r3
 801454c:	4620      	mov	r0, r4
 801454e:	b005      	add	sp, #20
 8014550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014552:	6860      	ldr	r0, [r4, #4]
 8014554:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014558:	b18b      	cbz	r3, 801457e <_rclc_execute.part.0+0x19e>
 801455a:	68c5      	ldr	r5, [r0, #12]
 801455c:	b32d      	cbz	r5, 80145aa <_rclc_execute.part.0+0x1ca>
 801455e:	2600      	movs	r6, #0
 8014560:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8014564:	b143      	cbz	r3, 8014578 <_rclc_execute.part.0+0x198>
 8014566:	69c3      	ldr	r3, [r0, #28]
 8014568:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 801456c:	b123      	cbz	r3, 8014578 <_rclc_execute.part.0+0x198>
 801456e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014570:	4628      	mov	r0, r5
 8014572:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014574:	4798      	blx	r3
 8014576:	6860      	ldr	r0, [r4, #4]
 8014578:	682d      	ldr	r5, [r5, #0]
 801457a:	2d00      	cmp	r5, #0
 801457c:	d1f0      	bne.n	8014560 <_rclc_execute.part.0+0x180>
 801457e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014582:	b193      	cbz	r3, 80145aa <_rclc_execute.part.0+0x1ca>
 8014584:	68c5      	ldr	r5, [r0, #12]
 8014586:	b185      	cbz	r5, 80145aa <_rclc_execute.part.0+0x1ca>
 8014588:	2600      	movs	r6, #0
 801458a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801458e:	b14b      	cbz	r3, 80145a4 <_rclc_execute.part.0+0x1c4>
 8014590:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014592:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8014596:	b12b      	cbz	r3, 80145a4 <_rclc_execute.part.0+0x1c4>
 8014598:	4628      	mov	r0, r5
 801459a:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 801459e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145a0:	4798      	blx	r3
 80145a2:	6860      	ldr	r0, [r4, #4]
 80145a4:	682d      	ldr	r5, [r5, #0]
 80145a6:	2d00      	cmp	r5, #0
 80145a8:	d1ef      	bne.n	801458a <_rclc_execute.part.0+0x1aa>
 80145aa:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	f43f af76 	beq.w	80144a0 <_rclc_execute.part.0+0xc0>
 80145b4:	2700      	movs	r7, #0
 80145b6:	e00b      	b.n	80145d0 <_rclc_execute.part.0+0x1f0>
 80145b8:	6863      	ldr	r3, [r4, #4]
 80145ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80145be:	6a1e      	ldr	r6, [r3, #32]
 80145c0:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 80145c4:	47b0      	blx	r6
 80145c6:	6860      	ldr	r0, [r4, #4]
 80145c8:	4629      	mov	r1, r5
 80145ca:	f008 ffbb 	bl	801d544 <rclc_action_remove_used_goal_handle>
 80145ce:	6860      	ldr	r0, [r4, #4]
 80145d0:	f009 f83e 	bl	801d650 <rclc_action_find_first_handle_with_result_response>
 80145d4:	4605      	mov	r5, r0
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d1ee      	bne.n	80145b8 <_rclc_execute.part.0+0x1d8>
 80145da:	e761      	b.n	80144a0 <_rclc_execute.part.0+0xc0>
 80145dc:	6860      	ldr	r0, [r4, #4]
 80145de:	f880 5020 	strb.w	r5, [r0, #32]
 80145e2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f43f af5a 	beq.w	80144a0 <_rclc_execute.part.0+0xc0>
 80145ec:	68c5      	ldr	r5, [r0, #12]
 80145ee:	b1b5      	cbz	r5, 801461e <_rclc_execute.part.0+0x23e>
 80145f0:	2602      	movs	r6, #2
 80145f2:	e001      	b.n	80145f8 <_rclc_execute.part.0+0x218>
 80145f4:	682d      	ldr	r5, [r5, #0]
 80145f6:	b195      	cbz	r5, 801461e <_rclc_execute.part.0+0x23e>
 80145f8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80145fc:	2b03      	cmp	r3, #3
 80145fe:	d1f9      	bne.n	80145f4 <_rclc_execute.part.0+0x214>
 8014600:	69c3      	ldr	r3, [r0, #28]
 8014602:	4628      	mov	r0, r5
 8014604:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014606:	4798      	blx	r3
 8014608:	4603      	mov	r3, r0
 801460a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 801460e:	4628      	mov	r0, r5
 8014610:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014614:	b143      	cbz	r3, 8014628 <_rclc_execute.part.0+0x248>
 8014616:	f009 f847 	bl	801d6a8 <rclc_action_server_goal_cancel_accept>
 801461a:	6860      	ldr	r0, [r4, #4]
 801461c:	e7ea      	b.n	80145f4 <_rclc_execute.part.0+0x214>
 801461e:	2300      	movs	r3, #0
 8014620:	461c      	mov	r4, r3
 8014622:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8014626:	e72e      	b.n	8014486 <_rclc_execute.part.0+0xa6>
 8014628:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801462a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 801462e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014632:	2101      	movs	r1, #1
 8014634:	6860      	ldr	r0, [r4, #4]
 8014636:	e9d7 2300 	ldrd	r2, r3, [r7]
 801463a:	f009 f861 	bl	801d700 <rclc_action_server_goal_cancel_reject>
 801463e:	722e      	strb	r6, [r5, #8]
 8014640:	6860      	ldr	r0, [r4, #4]
 8014642:	e7d7      	b.n	80145f4 <_rclc_execute.part.0+0x214>
 8014644:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014646:	f104 0510 	add.w	r5, r4, #16
 801464a:	6880      	ldr	r0, [r0, #8]
 801464c:	4798      	blx	r3
 801464e:	e6e3      	b.n	8014418 <_rclc_execute.part.0+0x38>
 8014650:	f100 0510 	add.w	r5, r0, #16
 8014654:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014656:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014658:	4629      	mov	r1, r5
 801465a:	6880      	ldr	r0, [r0, #8]
 801465c:	4798      	blx	r3
 801465e:	e6db      	b.n	8014418 <_rclc_execute.part.0+0x38>
 8014660:	2401      	movs	r4, #1
 8014662:	e710      	b.n	8014486 <_rclc_execute.part.0+0xa6>

08014664 <rclc_executor_trigger_any>:
 8014664:	2800      	cmp	r0, #0
 8014666:	d03d      	beq.n	80146e4 <rclc_executor_trigger_any+0x80>
 8014668:	2900      	cmp	r1, #0
 801466a:	d03c      	beq.n	80146e6 <rclc_executor_trigger_any+0x82>
 801466c:	4603      	mov	r3, r0
 801466e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8014672:	2200      	movs	r2, #0
 8014674:	2800      	cmp	r0, #0
 8014676:	d035      	beq.n	80146e4 <rclc_executor_trigger_any+0x80>
 8014678:	b430      	push	{r4, r5}
 801467a:	f893 c000 	ldrb.w	ip, [r3]
 801467e:	f1bc 0f08 	cmp.w	ip, #8
 8014682:	d11d      	bne.n	80146c0 <rclc_executor_trigger_any+0x5c>
 8014684:	685c      	ldr	r4, [r3, #4]
 8014686:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014688:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 801468c:	d105      	bne.n	801469a <rclc_executor_trigger_any+0x36>
 801468e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8014692:	b910      	cbnz	r0, 801469a <rclc_executor_trigger_any+0x36>
 8014694:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8014698:	b128      	cbz	r0, 80146a6 <rclc_executor_trigger_any+0x42>
 801469a:	bc30      	pop	{r4, r5}
 801469c:	4770      	bx	lr
 801469e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 80146a2:	2800      	cmp	r0, #0
 80146a4:	d1f9      	bne.n	801469a <rclc_executor_trigger_any+0x36>
 80146a6:	3201      	adds	r2, #1
 80146a8:	3340      	adds	r3, #64	; 0x40
 80146aa:	4291      	cmp	r1, r2
 80146ac:	d017      	beq.n	80146de <rclc_executor_trigger_any+0x7a>
 80146ae:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d0f1      	beq.n	801469a <rclc_executor_trigger_any+0x36>
 80146b6:	f893 c000 	ldrb.w	ip, [r3]
 80146ba:	f1bc 0f08 	cmp.w	ip, #8
 80146be:	d0e1      	beq.n	8014684 <rclc_executor_trigger_any+0x20>
 80146c0:	f1bc 0f09 	cmp.w	ip, #9
 80146c4:	d1eb      	bne.n	801469e <rclc_executor_trigger_any+0x3a>
 80146c6:	685c      	ldr	r4, [r3, #4]
 80146c8:	6a25      	ldr	r5, [r4, #32]
 80146ca:	2d00      	cmp	r5, #0
 80146cc:	d1e5      	bne.n	801469a <rclc_executor_trigger_any+0x36>
 80146ce:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d1e1      	bne.n	801469a <rclc_executor_trigger_any+0x36>
 80146d6:	3201      	adds	r2, #1
 80146d8:	3340      	adds	r3, #64	; 0x40
 80146da:	4291      	cmp	r1, r2
 80146dc:	d1e7      	bne.n	80146ae <rclc_executor_trigger_any+0x4a>
 80146de:	2000      	movs	r0, #0
 80146e0:	bc30      	pop	{r4, r5}
 80146e2:	4770      	bx	lr
 80146e4:	4770      	bx	lr
 80146e6:	4608      	mov	r0, r1
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop

080146ec <rclc_executor_get_zero_initialized_executor>:
 80146ec:	b510      	push	{r4, lr}
 80146ee:	4604      	mov	r4, r0
 80146f0:	2288      	movs	r2, #136	; 0x88
 80146f2:	4902      	ldr	r1, [pc, #8]	; (80146fc <rclc_executor_get_zero_initialized_executor+0x10>)
 80146f4:	f00c fbeb 	bl	8020ece <memcpy>
 80146f8:	4620      	mov	r0, r4
 80146fa:	bd10      	pop	{r4, pc}
 80146fc:	08024eb8 	.word	0x08024eb8

08014700 <rclc_executor_init>:
 8014700:	2900      	cmp	r1, #0
 8014702:	d06a      	beq.n	80147da <rclc_executor_init+0xda>
 8014704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014708:	4605      	mov	r5, r0
 801470a:	b0b0      	sub	sp, #192	; 0xc0
 801470c:	2800      	cmp	r0, #0
 801470e:	d05c      	beq.n	80147ca <rclc_executor_init+0xca>
 8014710:	4616      	mov	r6, r2
 8014712:	4618      	mov	r0, r3
 8014714:	4688      	mov	r8, r1
 8014716:	461f      	mov	r7, r3
 8014718:	f000 fc78 	bl	801500c <rcutils_allocator_is_valid>
 801471c:	2e00      	cmp	r6, #0
 801471e:	d054      	beq.n	80147ca <rclc_executor_init+0xca>
 8014720:	f080 0401 	eor.w	r4, r0, #1
 8014724:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8014728:	d14f      	bne.n	80147ca <rclc_executor_init+0xca>
 801472a:	2288      	movs	r2, #136	; 0x88
 801472c:	4930      	ldr	r1, [pc, #192]	; (80147f0 <rclc_executor_init+0xf0>)
 801472e:	a80e      	add	r0, sp, #56	; 0x38
 8014730:	f00c fbcd 	bl	8020ece <memcpy>
 8014734:	a90e      	add	r1, sp, #56	; 0x38
 8014736:	2288      	movs	r2, #136	; 0x88
 8014738:	4628      	mov	r0, r5
 801473a:	f00c fbc8 	bl	8020ece <memcpy>
 801473e:	4668      	mov	r0, sp
 8014740:	f8c5 8000 	str.w	r8, [r5]
 8014744:	60ae      	str	r6, [r5, #8]
 8014746:	f007 fc97 	bl	801c078 <rcl_get_zero_initialized_wait_set>
 801474a:	46ec      	mov	ip, sp
 801474c:	f105 0e14 	add.w	lr, r5, #20
 8014750:	f8d7 8000 	ldr.w	r8, [r7]
 8014754:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014758:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801475c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014764:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014768:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80147e8 <rclc_executor_init+0xe8>
 801476c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014770:	f8dc 3000 	ldr.w	r3, [ip]
 8014774:	01b0      	lsls	r0, r6, #6
 8014776:	6939      	ldr	r1, [r7, #16]
 8014778:	f8ce 3000 	str.w	r3, [lr]
 801477c:	612f      	str	r7, [r5, #16]
 801477e:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8014782:	47c0      	blx	r8
 8014784:	6068      	str	r0, [r5, #4]
 8014786:	b908      	cbnz	r0, 801478c <rclc_executor_init+0x8c>
 8014788:	e029      	b.n	80147de <rclc_executor_init+0xde>
 801478a:	6868      	ldr	r0, [r5, #4]
 801478c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014790:	3401      	adds	r4, #1
 8014792:	4631      	mov	r1, r6
 8014794:	f000 fac0 	bl	8014d18 <rclc_executor_handle_init>
 8014798:	42a6      	cmp	r6, r4
 801479a:	d8f6      	bhi.n	801478a <rclc_executor_init+0x8a>
 801479c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80147a0:	f000 faae 	bl	8014d00 <rclc_executor_handle_counters_zero_init>
 80147a4:	4a13      	ldr	r2, [pc, #76]	; (80147f4 <rclc_executor_init+0xf4>)
 80147a6:	2300      	movs	r3, #0
 80147a8:	6868      	ldr	r0, [r5, #4]
 80147aa:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 80147ae:	b168      	cbz	r0, 80147cc <rclc_executor_init+0xcc>
 80147b0:	68ab      	ldr	r3, [r5, #8]
 80147b2:	b173      	cbz	r3, 80147d2 <rclc_executor_init+0xd2>
 80147b4:	692a      	ldr	r2, [r5, #16]
 80147b6:	fab2 f382 	clz	r3, r2
 80147ba:	095b      	lsrs	r3, r3, #5
 80147bc:	b14a      	cbz	r2, 80147d2 <rclc_executor_init+0xd2>
 80147be:	4618      	mov	r0, r3
 80147c0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 80147c4:	b030      	add	sp, #192	; 0xc0
 80147c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ca:	200b      	movs	r0, #11
 80147cc:	b030      	add	sp, #192	; 0xc0
 80147ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d2:	2000      	movs	r0, #0
 80147d4:	b030      	add	sp, #192	; 0xc0
 80147d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147da:	200b      	movs	r0, #11
 80147dc:	4770      	bx	lr
 80147de:	200a      	movs	r0, #10
 80147e0:	e7f4      	b.n	80147cc <rclc_executor_init+0xcc>
 80147e2:	bf00      	nop
 80147e4:	f3af 8000 	nop.w
 80147e8:	3b9aca00 	.word	0x3b9aca00
 80147ec:	00000000 	.word	0x00000000
 80147f0:	08024eb8 	.word	0x08024eb8
 80147f4:	08014665 	.word	0x08014665

080147f8 <rclc_executor_add_subscription>:
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	bf18      	it	ne
 80147fc:	2a00      	cmpne	r2, #0
 80147fe:	b570      	push	{r4, r5, r6, lr}
 8014800:	4604      	mov	r4, r0
 8014802:	bf0c      	ite	eq
 8014804:	2001      	moveq	r0, #1
 8014806:	2000      	movne	r0, #0
 8014808:	f89d c010 	ldrb.w	ip, [sp, #16]
 801480c:	2900      	cmp	r1, #0
 801480e:	bf08      	it	eq
 8014810:	f040 0001 	orreq.w	r0, r0, #1
 8014814:	bb28      	cbnz	r0, 8014862 <rclc_executor_add_subscription+0x6a>
 8014816:	fab4 f584 	clz	r5, r4
 801481a:	096d      	lsrs	r5, r5, #5
 801481c:	b30c      	cbz	r4, 8014862 <rclc_executor_add_subscription+0x6a>
 801481e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014822:	4286      	cmp	r6, r0
 8014824:	d301      	bcc.n	801482a <rclc_executor_add_subscription+0x32>
 8014826:	2001      	movs	r0, #1
 8014828:	bd70      	pop	{r4, r5, r6, pc}
 801482a:	6860      	ldr	r0, [r4, #4]
 801482c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014830:	f800 500e 	strb.w	r5, [r0, lr]
 8014834:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014838:	3601      	adds	r6, #1
 801483a:	6303      	str	r3, [r0, #48]	; 0x30
 801483c:	2301      	movs	r3, #1
 801483e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014840:	f104 0514 	add.w	r5, r4, #20
 8014844:	f880 c001 	strb.w	ip, [r0, #1]
 8014848:	8703      	strh	r3, [r0, #56]	; 0x38
 801484a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801484e:	4628      	mov	r0, r5
 8014850:	60e6      	str	r6, [r4, #12]
 8014852:	f007 fc25 	bl	801c0a0 <rcl_wait_set_is_valid>
 8014856:	b930      	cbnz	r0, 8014866 <rclc_executor_add_subscription+0x6e>
 8014858:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801485a:	2000      	movs	r0, #0
 801485c:	3301      	adds	r3, #1
 801485e:	64a3      	str	r3, [r4, #72]	; 0x48
 8014860:	bd70      	pop	{r4, r5, r6, pc}
 8014862:	200b      	movs	r0, #11
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	4628      	mov	r0, r5
 8014868:	f007 fc20 	bl	801c0ac <rcl_wait_set_fini>
 801486c:	2800      	cmp	r0, #0
 801486e:	d0f3      	beq.n	8014858 <rclc_executor_add_subscription+0x60>
 8014870:	bd70      	pop	{r4, r5, r6, pc}
 8014872:	bf00      	nop

08014874 <rclc_executor_add_service>:
 8014874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014876:	9d06      	ldr	r5, [sp, #24]
 8014878:	4604      	mov	r4, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	bf18      	it	ne
 801487e:	2d00      	cmpne	r5, #0
 8014880:	bf0c      	ite	eq
 8014882:	2001      	moveq	r0, #1
 8014884:	2000      	movne	r0, #0
 8014886:	2a00      	cmp	r2, #0
 8014888:	bf08      	it	eq
 801488a:	f040 0001 	orreq.w	r0, r0, #1
 801488e:	2900      	cmp	r1, #0
 8014890:	bf08      	it	eq
 8014892:	f040 0001 	orreq.w	r0, r0, #1
 8014896:	bb40      	cbnz	r0, 80148ea <rclc_executor_add_service+0x76>
 8014898:	fab4 f684 	clz	r6, r4
 801489c:	0976      	lsrs	r6, r6, #5
 801489e:	b324      	cbz	r4, 80148ea <rclc_executor_add_service+0x76>
 80148a0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 80148a4:	42b8      	cmp	r0, r7
 80148a6:	d301      	bcc.n	80148ac <rclc_executor_add_service+0x38>
 80148a8:	2001      	movs	r0, #1
 80148aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ac:	6867      	ldr	r7, [r4, #4]
 80148ae:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80148b2:	f100 0c01 	add.w	ip, r0, #1
 80148b6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 80148ba:	6283      	str	r3, [r0, #40]	; 0x28
 80148bc:	2305      	movs	r3, #5
 80148be:	6305      	str	r5, [r0, #48]	; 0x30
 80148c0:	f104 0514 	add.w	r5, r4, #20
 80148c4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80148c8:	f827 300e 	strh.w	r3, [r7, lr]
 80148cc:	2301      	movs	r3, #1
 80148ce:	62c6      	str	r6, [r0, #44]	; 0x2c
 80148d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80148d4:	4628      	mov	r0, r5
 80148d6:	f8c4 c00c 	str.w	ip, [r4, #12]
 80148da:	f007 fbe1 	bl	801c0a0 <rcl_wait_set_is_valid>
 80148de:	b930      	cbnz	r0, 80148ee <rclc_executor_add_service+0x7a>
 80148e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80148e2:	2000      	movs	r0, #0
 80148e4:	3301      	adds	r3, #1
 80148e6:	6563      	str	r3, [r4, #84]	; 0x54
 80148e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ea:	200b      	movs	r0, #11
 80148ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ee:	4628      	mov	r0, r5
 80148f0:	f007 fbdc 	bl	801c0ac <rcl_wait_set_fini>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d0f3      	beq.n	80148e0 <rclc_executor_add_service+0x6c>
 80148f8:	e7d7      	b.n	80148aa <rclc_executor_add_service+0x36>
 80148fa:	bf00      	nop

080148fc <rclc_executor_prepare>:
 80148fc:	2800      	cmp	r0, #0
 80148fe:	d044      	beq.n	801498a <rclc_executor_prepare+0x8e>
 8014900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014902:	f100 0514 	add.w	r5, r0, #20
 8014906:	b09b      	sub	sp, #108	; 0x6c
 8014908:	4604      	mov	r4, r0
 801490a:	4628      	mov	r0, r5
 801490c:	f007 fbc8 	bl	801c0a0 <rcl_wait_set_is_valid>
 8014910:	b110      	cbz	r0, 8014918 <rclc_executor_prepare+0x1c>
 8014912:	2000      	movs	r0, #0
 8014914:	b01b      	add	sp, #108	; 0x6c
 8014916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014918:	4628      	mov	r0, r5
 801491a:	f007 fbc7 	bl	801c0ac <rcl_wait_set_fini>
 801491e:	2800      	cmp	r0, #0
 8014920:	d130      	bne.n	8014984 <rclc_executor_prepare+0x88>
 8014922:	a80c      	add	r0, sp, #48	; 0x30
 8014924:	ae04      	add	r6, sp, #16
 8014926:	f007 fba7 	bl	801c078 <rcl_get_zero_initialized_wait_set>
 801492a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801492e:	46ae      	mov	lr, r5
 8014930:	6927      	ldr	r7, [r4, #16]
 8014932:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014936:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801493a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801493e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014942:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014946:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801494a:	f8dc 3000 	ldr.w	r3, [ip]
 801494e:	f8ce 3000 	str.w	r3, [lr]
 8014952:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014954:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	4628      	mov	r0, r5
 801495a:	6822      	ldr	r2, [r4, #0]
 801495c:	6033      	str	r3, [r6, #0]
 801495e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014960:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014962:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014966:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 801496a:	e9cd 2100 	strd	r2, r1, [sp]
 801496e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014972:	f007 fe9b 	bl	801c6ac <rcl_wait_set_init>
 8014976:	2800      	cmp	r0, #0
 8014978:	d0cc      	beq.n	8014914 <rclc_executor_prepare+0x18>
 801497a:	900b      	str	r0, [sp, #44]	; 0x2c
 801497c:	f000 fb84 	bl	8015088 <rcutils_reset_error>
 8014980:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014982:	e7c7      	b.n	8014914 <rclc_executor_prepare+0x18>
 8014984:	f000 fb80 	bl	8015088 <rcutils_reset_error>
 8014988:	e7cb      	b.n	8014922 <rclc_executor_prepare+0x26>
 801498a:	200b      	movs	r0, #11
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop

08014990 <rclc_executor_spin_some.part.0>:
 8014990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014994:	4605      	mov	r5, r0
 8014996:	4691      	mov	r9, r2
 8014998:	4698      	mov	r8, r3
 801499a:	f7ff ffaf 	bl	80148fc <rclc_executor_prepare>
 801499e:	f105 0614 	add.w	r6, r5, #20
 80149a2:	4630      	mov	r0, r6
 80149a4:	f007 fc4e 	bl	801c244 <rcl_wait_set_clear>
 80149a8:	4607      	mov	r7, r0
 80149aa:	2800      	cmp	r0, #0
 80149ac:	f040 80a8 	bne.w	8014b00 <rclc_executor_spin_some.part.0+0x170>
 80149b0:	68ab      	ldr	r3, [r5, #8]
 80149b2:	b30b      	cbz	r3, 80149f8 <rclc_executor_spin_some.part.0+0x68>
 80149b4:	4604      	mov	r4, r0
 80149b6:	6869      	ldr	r1, [r5, #4]
 80149b8:	01a2      	lsls	r2, r4, #6
 80149ba:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80149be:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 80149c2:	b1cb      	cbz	r3, 80149f8 <rclc_executor_spin_some.part.0+0x68>
 80149c4:	5c8b      	ldrb	r3, [r1, r2]
 80149c6:	2b0a      	cmp	r3, #10
 80149c8:	f200 80de 	bhi.w	8014b88 <rclc_executor_spin_some.part.0+0x1f8>
 80149cc:	e8df f003 	tbb	[pc, r3]
 80149d0:	8da99d9d 	.word	0x8da99d9d
 80149d4:	0606068d 	.word	0x0606068d
 80149d8:	c1ce      	.short	0xc1ce
 80149da:	b5          	.byte	0xb5
 80149db:	00          	.byte	0x00
 80149dc:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80149e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80149e4:	4630      	mov	r0, r6
 80149e6:	f007 ff7d 	bl	801c8e4 <rcl_wait_set_add_service>
 80149ea:	2800      	cmp	r0, #0
 80149ec:	f040 8087 	bne.w	8014afe <rclc_executor_spin_some.part.0+0x16e>
 80149f0:	3401      	adds	r4, #1
 80149f2:	68ab      	ldr	r3, [r5, #8]
 80149f4:	429c      	cmp	r4, r3
 80149f6:	d3de      	bcc.n	80149b6 <rclc_executor_spin_some.part.0+0x26>
 80149f8:	4643      	mov	r3, r8
 80149fa:	464a      	mov	r2, r9
 80149fc:	4630      	mov	r0, r6
 80149fe:	f007 ff9f 	bl	801c940 <rcl_wait>
 8014a02:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	f000 80c6 	beq.w	8014b98 <rclc_executor_spin_some.part.0+0x208>
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	f040 80bb 	bne.w	8014b88 <rclc_executor_spin_some.part.0+0x1f8>
 8014a12:	68ab      	ldr	r3, [r5, #8]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	f000 8159 	beq.w	8014ccc <rclc_executor_spin_some.part.0+0x33c>
 8014a1a:	2400      	movs	r4, #0
 8014a1c:	f240 1991 	movw	r9, #401	; 0x191
 8014a20:	46a0      	mov	r8, r4
 8014a22:	e00a      	b.n	8014a3a <rclc_executor_spin_some.part.0+0xaa>
 8014a24:	f7ff fb1a 	bl	801405c <_rclc_check_for_new_data>
 8014a28:	4604      	mov	r4, r0
 8014a2a:	b110      	cbz	r0, 8014a32 <rclc_executor_spin_some.part.0+0xa2>
 8014a2c:	4548      	cmp	r0, r9
 8014a2e:	f040 80b1 	bne.w	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014a32:	68ab      	ldr	r3, [r5, #8]
 8014a34:	4598      	cmp	r8, r3
 8014a36:	f080 8126 	bcs.w	8014c86 <rclc_executor_spin_some.part.0+0x2f6>
 8014a3a:	686a      	ldr	r2, [r5, #4]
 8014a3c:	4631      	mov	r1, r6
 8014a3e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014a42:	f108 0801 	add.w	r8, r8, #1
 8014a46:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014a4a:	f1bc 0f00 	cmp.w	ip, #0
 8014a4e:	d1e9      	bne.n	8014a24 <rclc_executor_spin_some.part.0+0x94>
 8014a50:	4619      	mov	r1, r3
 8014a52:	4610      	mov	r0, r2
 8014a54:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014a58:	4798      	blx	r3
 8014a5a:	2800      	cmp	r0, #0
 8014a5c:	f000 809a 	beq.w	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014a60:	68ab      	ldr	r3, [r5, #8]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f000 8096 	beq.w	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014a68:	f04f 0800 	mov.w	r8, #0
 8014a6c:	f240 1991 	movw	r9, #401	; 0x191
 8014a70:	e009      	b.n	8014a86 <rclc_executor_spin_some.part.0+0xf6>
 8014a72:	f7ff fb41 	bl	80140f8 <_rclc_take_new_data>
 8014a76:	4604      	mov	r4, r0
 8014a78:	b110      	cbz	r0, 8014a80 <rclc_executor_spin_some.part.0+0xf0>
 8014a7a:	4548      	cmp	r0, r9
 8014a7c:	f040 808a 	bne.w	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014a80:	68ab      	ldr	r3, [r5, #8]
 8014a82:	4598      	cmp	r8, r3
 8014a84:	d209      	bcs.n	8014a9a <rclc_executor_spin_some.part.0+0x10a>
 8014a86:	6868      	ldr	r0, [r5, #4]
 8014a88:	4631      	mov	r1, r6
 8014a8a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014a8e:	f108 0801 	add.w	r8, r8, #1
 8014a92:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8014a96:	2a00      	cmp	r2, #0
 8014a98:	d1eb      	bne.n	8014a72 <rclc_executor_spin_some.part.0+0xe2>
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d07a      	beq.n	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014a9e:	2600      	movs	r6, #0
 8014aa0:	e00e      	b.n	8014ac0 <rclc_executor_spin_some.part.0+0x130>
 8014aa2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014aa6:	2a08      	cmp	r2, #8
 8014aa8:	f000 80fc 	beq.w	8014ca4 <rclc_executor_spin_some.part.0+0x314>
 8014aac:	2a09      	cmp	r2, #9
 8014aae:	f000 80ee 	beq.w	8014c8e <rclc_executor_spin_some.part.0+0x2fe>
 8014ab2:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8014ab6:	b98a      	cbnz	r2, 8014adc <rclc_executor_spin_some.part.0+0x14c>
 8014ab8:	3601      	adds	r6, #1
 8014aba:	429e      	cmp	r6, r3
 8014abc:	d267      	bcs.n	8014b8e <rclc_executor_spin_some.part.0+0x1fe>
 8014abe:	2400      	movs	r4, #0
 8014ac0:	686a      	ldr	r2, [r5, #4]
 8014ac2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014ac6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014aca:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8014ace:	2900      	cmp	r1, #0
 8014ad0:	d060      	beq.n	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014ad2:	7841      	ldrb	r1, [r0, #1]
 8014ad4:	2900      	cmp	r1, #0
 8014ad6:	d0e4      	beq.n	8014aa2 <rclc_executor_spin_some.part.0+0x112>
 8014ad8:	2901      	cmp	r1, #1
 8014ada:	d1ed      	bne.n	8014ab8 <rclc_executor_spin_some.part.0+0x128>
 8014adc:	f7ff fc80 	bl	80143e0 <_rclc_execute.part.0>
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f040 80b5 	bne.w	8014c50 <rclc_executor_spin_some.part.0+0x2c0>
 8014ae6:	68ab      	ldr	r3, [r5, #8]
 8014ae8:	e7e6      	b.n	8014ab8 <rclc_executor_spin_some.part.0+0x128>
 8014aea:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014aee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014af2:	4630      	mov	r0, r6
 8014af4:	f007 feca 	bl	801c88c <rcl_wait_set_add_client>
 8014af8:	2800      	cmp	r0, #0
 8014afa:	f43f af79 	beq.w	80149f0 <rclc_executor_spin_some.part.0+0x60>
 8014afe:	4607      	mov	r7, r0
 8014b00:	f000 fac2 	bl	8015088 <rcutils_reset_error>
 8014b04:	4638      	mov	r0, r7
 8014b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b0e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b12:	4630      	mov	r0, r6
 8014b14:	f007 fb6a 	bl	801c1ec <rcl_wait_set_add_subscription>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	f43f af69 	beq.w	80149f0 <rclc_executor_spin_some.part.0+0x60>
 8014b1e:	4607      	mov	r7, r0
 8014b20:	e7ee      	b.n	8014b00 <rclc_executor_spin_some.part.0+0x170>
 8014b22:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b26:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	f007 fe7e 	bl	801c82c <rcl_wait_set_add_timer>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	f43f af5d 	beq.w	80149f0 <rclc_executor_spin_some.part.0+0x60>
 8014b36:	4607      	mov	r7, r0
 8014b38:	e7e2      	b.n	8014b00 <rclc_executor_spin_some.part.0+0x170>
 8014b3a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b3e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b42:	4630      	mov	r0, r6
 8014b44:	f007 fe46 	bl	801c7d4 <rcl_wait_set_add_guard_condition>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	f43f af51 	beq.w	80149f0 <rclc_executor_spin_some.part.0+0x60>
 8014b4e:	4607      	mov	r7, r0
 8014b50:	e7d6      	b.n	8014b00 <rclc_executor_spin_some.part.0+0x170>
 8014b52:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b56:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	3110      	adds	r1, #16
 8014b5e:	f008 fbc3 	bl	801d2e8 <rcl_action_wait_set_add_action_server>
 8014b62:	2800      	cmp	r0, #0
 8014b64:	f43f af44 	beq.w	80149f0 <rclc_executor_spin_some.part.0+0x60>
 8014b68:	4607      	mov	r7, r0
 8014b6a:	e7c9      	b.n	8014b00 <rclc_executor_spin_some.part.0+0x170>
 8014b6c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b70:	2300      	movs	r3, #0
 8014b72:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b76:	4630      	mov	r0, r6
 8014b78:	3110      	adds	r1, #16
 8014b7a:	f008 f98d 	bl	801ce98 <rcl_action_wait_set_add_action_client>
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	f43f af36 	beq.w	80149f0 <rclc_executor_spin_some.part.0+0x60>
 8014b84:	4607      	mov	r7, r0
 8014b86:	e7bb      	b.n	8014b00 <rclc_executor_spin_some.part.0+0x170>
 8014b88:	2701      	movs	r7, #1
 8014b8a:	f000 fa7d 	bl	8015088 <rcutils_reset_error>
 8014b8e:	4638      	mov	r0, r7
 8014b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b94:	4627      	mov	r7, r4
 8014b96:	e7fa      	b.n	8014b8e <rclc_executor_spin_some.part.0+0x1fe>
 8014b98:	68ab      	ldr	r3, [r5, #8]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	f000 8093 	beq.w	8014cc6 <rclc_executor_spin_some.part.0+0x336>
 8014ba0:	2400      	movs	r4, #0
 8014ba2:	f240 1991 	movw	r9, #401	; 0x191
 8014ba6:	46a0      	mov	r8, r4
 8014ba8:	e008      	b.n	8014bbc <rclc_executor_spin_some.part.0+0x22c>
 8014baa:	f7ff fa57 	bl	801405c <_rclc_check_for_new_data>
 8014bae:	4604      	mov	r4, r0
 8014bb0:	b108      	cbz	r0, 8014bb6 <rclc_executor_spin_some.part.0+0x226>
 8014bb2:	4548      	cmp	r0, r9
 8014bb4:	d1ee      	bne.n	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014bb6:	68ab      	ldr	r3, [r5, #8]
 8014bb8:	4598      	cmp	r8, r3
 8014bba:	d266      	bcs.n	8014c8a <rclc_executor_spin_some.part.0+0x2fa>
 8014bbc:	686a      	ldr	r2, [r5, #4]
 8014bbe:	4631      	mov	r1, r6
 8014bc0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014bc4:	f108 0801 	add.w	r8, r8, #1
 8014bc8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014bcc:	f1bc 0f00 	cmp.w	ip, #0
 8014bd0:	d1eb      	bne.n	8014baa <rclc_executor_spin_some.part.0+0x21a>
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	4610      	mov	r0, r2
 8014bd6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014bda:	4798      	blx	r3
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d0d9      	beq.n	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014be0:	68ab      	ldr	r3, [r5, #8]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d0d6      	beq.n	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014be6:	f04f 0a00 	mov.w	sl, #0
 8014bea:	f240 1891 	movw	r8, #401	; 0x191
 8014bee:	f240 2959 	movw	r9, #601	; 0x259
 8014bf2:	e00e      	b.n	8014c12 <rclc_executor_spin_some.part.0+0x282>
 8014bf4:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014bf8:	2b08      	cmp	r3, #8
 8014bfa:	d034      	beq.n	8014c66 <rclc_executor_spin_some.part.0+0x2d6>
 8014bfc:	2b09      	cmp	r3, #9
 8014bfe:	d029      	beq.n	8014c54 <rclc_executor_spin_some.part.0+0x2c4>
 8014c00:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014c04:	bb03      	cbnz	r3, 8014c48 <rclc_executor_spin_some.part.0+0x2b8>
 8014c06:	f10a 0a01 	add.w	sl, sl, #1
 8014c0a:	68ab      	ldr	r3, [r5, #8]
 8014c0c:	459a      	cmp	sl, r3
 8014c0e:	d2be      	bcs.n	8014b8e <rclc_executor_spin_some.part.0+0x1fe>
 8014c10:	2400      	movs	r4, #0
 8014c12:	6868      	ldr	r0, [r5, #4]
 8014c14:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014c18:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014c1c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d0b7      	beq.n	8014b94 <rclc_executor_spin_some.part.0+0x204>
 8014c24:	4631      	mov	r1, r6
 8014c26:	f7ff fa67 	bl	80140f8 <_rclc_take_new_data>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	bf18      	it	ne
 8014c2e:	4540      	cmpne	r0, r8
 8014c30:	d001      	beq.n	8014c36 <rclc_executor_spin_some.part.0+0x2a6>
 8014c32:	4548      	cmp	r0, r9
 8014c34:	d10c      	bne.n	8014c50 <rclc_executor_spin_some.part.0+0x2c0>
 8014c36:	686b      	ldr	r3, [r5, #4]
 8014c38:	eb13 000b 	adds.w	r0, r3, fp
 8014c3c:	d021      	beq.n	8014c82 <rclc_executor_spin_some.part.0+0x2f2>
 8014c3e:	7842      	ldrb	r2, [r0, #1]
 8014c40:	2a00      	cmp	r2, #0
 8014c42:	d0d7      	beq.n	8014bf4 <rclc_executor_spin_some.part.0+0x264>
 8014c44:	2a01      	cmp	r2, #1
 8014c46:	d1de      	bne.n	8014c06 <rclc_executor_spin_some.part.0+0x276>
 8014c48:	f7ff fbca 	bl	80143e0 <_rclc_execute.part.0>
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	d0da      	beq.n	8014c06 <rclc_executor_spin_some.part.0+0x276>
 8014c50:	4607      	mov	r7, r0
 8014c52:	e79c      	b.n	8014b8e <rclc_executor_spin_some.part.0+0x1fe>
 8014c54:	6843      	ldr	r3, [r0, #4]
 8014c56:	6a1a      	ldr	r2, [r3, #32]
 8014c58:	2a00      	cmp	r2, #0
 8014c5a:	d1f5      	bne.n	8014c48 <rclc_executor_spin_some.part.0+0x2b8>
 8014c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d0d0      	beq.n	8014c06 <rclc_executor_spin_some.part.0+0x276>
 8014c64:	e7f0      	b.n	8014c48 <rclc_executor_spin_some.part.0+0x2b8>
 8014c66:	6843      	ldr	r3, [r0, #4]
 8014c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014c6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8014c6e:	d1eb      	bne.n	8014c48 <rclc_executor_spin_some.part.0+0x2b8>
 8014c70:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014c74:	2a00      	cmp	r2, #0
 8014c76:	d1e7      	bne.n	8014c48 <rclc_executor_spin_some.part.0+0x2b8>
 8014c78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d0c2      	beq.n	8014c06 <rclc_executor_spin_some.part.0+0x276>
 8014c80:	e7e2      	b.n	8014c48 <rclc_executor_spin_some.part.0+0x2b8>
 8014c82:	270b      	movs	r7, #11
 8014c84:	e783      	b.n	8014b8e <rclc_executor_spin_some.part.0+0x1fe>
 8014c86:	686a      	ldr	r2, [r5, #4]
 8014c88:	e6e2      	b.n	8014a50 <rclc_executor_spin_some.part.0+0xc0>
 8014c8a:	686a      	ldr	r2, [r5, #4]
 8014c8c:	e7a1      	b.n	8014bd2 <rclc_executor_spin_some.part.0+0x242>
 8014c8e:	6842      	ldr	r2, [r0, #4]
 8014c90:	6a11      	ldr	r1, [r2, #32]
 8014c92:	2900      	cmp	r1, #0
 8014c94:	f47f af22 	bne.w	8014adc <rclc_executor_spin_some.part.0+0x14c>
 8014c98:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014c9c:	2a00      	cmp	r2, #0
 8014c9e:	f43f af0b 	beq.w	8014ab8 <rclc_executor_spin_some.part.0+0x128>
 8014ca2:	e71b      	b.n	8014adc <rclc_executor_spin_some.part.0+0x14c>
 8014ca4:	6842      	ldr	r2, [r0, #4]
 8014ca6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014ca8:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8014cac:	f47f af16 	bne.w	8014adc <rclc_executor_spin_some.part.0+0x14c>
 8014cb0:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8014cb4:	2900      	cmp	r1, #0
 8014cb6:	f47f af11 	bne.w	8014adc <rclc_executor_spin_some.part.0+0x14c>
 8014cba:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8014cbe:	2a00      	cmp	r2, #0
 8014cc0:	f43f aefa 	beq.w	8014ab8 <rclc_executor_spin_some.part.0+0x128>
 8014cc4:	e70a      	b.n	8014adc <rclc_executor_spin_some.part.0+0x14c>
 8014cc6:	686a      	ldr	r2, [r5, #4]
 8014cc8:	461c      	mov	r4, r3
 8014cca:	e782      	b.n	8014bd2 <rclc_executor_spin_some.part.0+0x242>
 8014ccc:	686a      	ldr	r2, [r5, #4]
 8014cce:	461c      	mov	r4, r3
 8014cd0:	e6be      	b.n	8014a50 <rclc_executor_spin_some.part.0+0xc0>
 8014cd2:	bf00      	nop

08014cd4 <rclc_executor_spin_some>:
 8014cd4:	b190      	cbz	r0, 8014cfc <rclc_executor_spin_some+0x28>
 8014cd6:	b570      	push	{r4, r5, r6, lr}
 8014cd8:	4604      	mov	r4, r0
 8014cda:	6800      	ldr	r0, [r0, #0]
 8014cdc:	4616      	mov	r6, r2
 8014cde:	461d      	mov	r5, r3
 8014ce0:	f006 fb96 	bl	801b410 <rcl_context_is_valid>
 8014ce4:	b130      	cbz	r0, 8014cf4 <rclc_executor_spin_some+0x20>
 8014ce6:	4632      	mov	r2, r6
 8014ce8:	462b      	mov	r3, r5
 8014cea:	4620      	mov	r0, r4
 8014cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cf0:	f7ff be4e 	b.w	8014990 <rclc_executor_spin_some.part.0>
 8014cf4:	f000 f9c8 	bl	8015088 <rcutils_reset_error>
 8014cf8:	2001      	movs	r0, #1
 8014cfa:	bd70      	pop	{r4, r5, r6, pc}
 8014cfc:	200b      	movs	r0, #11
 8014cfe:	4770      	bx	lr

08014d00 <rclc_executor_handle_counters_zero_init>:
 8014d00:	b130      	cbz	r0, 8014d10 <rclc_executor_handle_counters_zero_init+0x10>
 8014d02:	2220      	movs	r2, #32
 8014d04:	2100      	movs	r1, #0
 8014d06:	b508      	push	{r3, lr}
 8014d08:	f00c f814 	bl	8020d34 <memset>
 8014d0c:	2000      	movs	r0, #0
 8014d0e:	bd08      	pop	{r3, pc}
 8014d10:	200b      	movs	r0, #11
 8014d12:	4770      	bx	lr
 8014d14:	0000      	movs	r0, r0
	...

08014d18 <rclc_executor_handle_init>:
 8014d18:	4603      	mov	r3, r0
 8014d1a:	b178      	cbz	r0, 8014d3c <rclc_executor_handle_init+0x24>
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f04f 0c0b 	mov.w	ip, #11
 8014d22:	6341      	str	r1, [r0, #52]	; 0x34
 8014d24:	4610      	mov	r0, r2
 8014d26:	f8a3 c000 	strh.w	ip, [r3]
 8014d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8014d2c:	871a      	strh	r2, [r3, #56]	; 0x38
 8014d2e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8014d40 <rclc_executor_handle_init+0x28>
 8014d32:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014d36:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8014d3a:	4770      	bx	lr
 8014d3c:	200b      	movs	r0, #11
 8014d3e:	4770      	bx	lr
	...

08014d48 <rclc_support_init_with_options>:
 8014d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d4c:	b083      	sub	sp, #12
 8014d4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	bf18      	it	ne
 8014d54:	2f00      	cmpne	r7, #0
 8014d56:	d027      	beq.n	8014da8 <rclc_support_init_with_options+0x60>
 8014d58:	4604      	mov	r4, r0
 8014d5a:	b328      	cbz	r0, 8014da8 <rclc_support_init_with_options+0x60>
 8014d5c:	46e9      	mov	r9, sp
 8014d5e:	461d      	mov	r5, r3
 8014d60:	460e      	mov	r6, r1
 8014d62:	4690      	mov	r8, r2
 8014d64:	4648      	mov	r0, r9
 8014d66:	f006 fb49 	bl	801b3fc <rcl_get_zero_initialized_context>
 8014d6a:	462a      	mov	r2, r5
 8014d6c:	4623      	mov	r3, r4
 8014d6e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014d72:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d76:	4641      	mov	r1, r8
 8014d78:	4630      	mov	r0, r6
 8014d7a:	f006 fc5d 	bl	801b638 <rcl_init>
 8014d7e:	4605      	mov	r5, r0
 8014d80:	b960      	cbnz	r0, 8014d9c <rclc_support_init_with_options+0x54>
 8014d82:	463a      	mov	r2, r7
 8014d84:	f104 010c 	add.w	r1, r4, #12
 8014d88:	2003      	movs	r0, #3
 8014d8a:	60a7      	str	r7, [r4, #8]
 8014d8c:	f006 ff6a 	bl	801bc64 <rcl_clock_init>
 8014d90:	4605      	mov	r5, r0
 8014d92:	b918      	cbnz	r0, 8014d9c <rclc_support_init_with_options+0x54>
 8014d94:	4628      	mov	r0, r5
 8014d96:	b003      	add	sp, #12
 8014d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d9c:	f000 f974 	bl	8015088 <rcutils_reset_error>
 8014da0:	4628      	mov	r0, r5
 8014da2:	b003      	add	sp, #12
 8014da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014da8:	250b      	movs	r5, #11
 8014daa:	4628      	mov	r0, r5
 8014dac:	b003      	add	sp, #12
 8014dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014db2:	bf00      	nop

08014db4 <rclc_node_init_with_options>:
 8014db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014db8:	b087      	sub	sp, #28
 8014dba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014dbc:	2e00      	cmp	r6, #0
 8014dbe:	bf18      	it	ne
 8014dc0:	2b00      	cmpne	r3, #0
 8014dc2:	bf0c      	ite	eq
 8014dc4:	f04f 0c01 	moveq.w	ip, #1
 8014dc8:	f04f 0c00 	movne.w	ip, #0
 8014dcc:	2a00      	cmp	r2, #0
 8014dce:	bf08      	it	eq
 8014dd0:	f04c 0c01 	orreq.w	ip, ip, #1
 8014dd4:	2900      	cmp	r1, #0
 8014dd6:	bf08      	it	eq
 8014dd8:	f04c 0c01 	orreq.w	ip, ip, #1
 8014ddc:	f1bc 0f00 	cmp.w	ip, #0
 8014de0:	d118      	bne.n	8014e14 <rclc_node_init_with_options+0x60>
 8014de2:	4604      	mov	r4, r0
 8014de4:	b1b0      	cbz	r0, 8014e14 <rclc_node_init_with_options+0x60>
 8014de6:	f10d 0910 	add.w	r9, sp, #16
 8014dea:	460d      	mov	r5, r1
 8014dec:	4698      	mov	r8, r3
 8014dee:	4617      	mov	r7, r2
 8014df0:	4648      	mov	r0, r9
 8014df2:	f7fe fc09 	bl	8013608 <rcl_get_zero_initialized_node>
 8014df6:	9600      	str	r6, [sp, #0]
 8014df8:	4643      	mov	r3, r8
 8014dfa:	463a      	mov	r2, r7
 8014dfc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014e00:	e884 0003 	stmia.w	r4, {r0, r1}
 8014e04:	4629      	mov	r1, r5
 8014e06:	4620      	mov	r0, r4
 8014e08:	f7fe fc08 	bl	801361c <rcl_node_init>
 8014e0c:	b930      	cbnz	r0, 8014e1c <rclc_node_init_with_options+0x68>
 8014e0e:	b007      	add	sp, #28
 8014e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e14:	200b      	movs	r0, #11
 8014e16:	b007      	add	sp, #28
 8014e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e1c:	9003      	str	r0, [sp, #12]
 8014e1e:	f000 f933 	bl	8015088 <rcutils_reset_error>
 8014e22:	9803      	ldr	r0, [sp, #12]
 8014e24:	b007      	add	sp, #28
 8014e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e2a:	bf00      	nop

08014e2c <rclc_publisher_init_default>:
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	bf18      	it	ne
 8014e30:	2a00      	cmpne	r2, #0
 8014e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e36:	4616      	mov	r6, r2
 8014e38:	bf0c      	ite	eq
 8014e3a:	2201      	moveq	r2, #1
 8014e3c:	2200      	movne	r2, #0
 8014e3e:	b0a0      	sub	sp, #128	; 0x80
 8014e40:	2900      	cmp	r1, #0
 8014e42:	bf08      	it	eq
 8014e44:	f042 0201 	orreq.w	r2, r2, #1
 8014e48:	bb1a      	cbnz	r2, 8014e92 <rclc_publisher_init_default+0x66>
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	b308      	cbz	r0, 8014e92 <rclc_publisher_init_default+0x66>
 8014e4e:	f10d 0810 	add.w	r8, sp, #16
 8014e52:	461f      	mov	r7, r3
 8014e54:	460d      	mov	r5, r1
 8014e56:	f7fe fd81 	bl	801395c <rcl_get_zero_initialized_publisher>
 8014e5a:	6020      	str	r0, [r4, #0]
 8014e5c:	4640      	mov	r0, r8
 8014e5e:	f7fe fe1d 	bl	8013a9c <rcl_publisher_get_default_options>
 8014e62:	2250      	movs	r2, #80	; 0x50
 8014e64:	490d      	ldr	r1, [pc, #52]	; (8014e9c <rclc_publisher_init_default+0x70>)
 8014e66:	4640      	mov	r0, r8
 8014e68:	f00c f831 	bl	8020ece <memcpy>
 8014e6c:	463b      	mov	r3, r7
 8014e6e:	4632      	mov	r2, r6
 8014e70:	4629      	mov	r1, r5
 8014e72:	4620      	mov	r0, r4
 8014e74:	f8cd 8000 	str.w	r8, [sp]
 8014e78:	f7fe fd76 	bl	8013968 <rcl_publisher_init>
 8014e7c:	b910      	cbnz	r0, 8014e84 <rclc_publisher_init_default+0x58>
 8014e7e:	b020      	add	sp, #128	; 0x80
 8014e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e84:	9003      	str	r0, [sp, #12]
 8014e86:	f000 f8ff 	bl	8015088 <rcutils_reset_error>
 8014e8a:	9803      	ldr	r0, [sp, #12]
 8014e8c:	b020      	add	sp, #128	; 0x80
 8014e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e92:	200b      	movs	r0, #11
 8014e94:	b020      	add	sp, #128	; 0x80
 8014e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e9a:	bf00      	nop
 8014e9c:	08024f40 	.word	0x08024f40

08014ea0 <rclc_service_init_default>:
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	bf18      	it	ne
 8014ea4:	2a00      	cmpne	r2, #0
 8014ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eaa:	4616      	mov	r6, r2
 8014eac:	bf0c      	ite	eq
 8014eae:	2201      	moveq	r2, #1
 8014eb0:	2200      	movne	r2, #0
 8014eb2:	b09e      	sub	sp, #120	; 0x78
 8014eb4:	2900      	cmp	r1, #0
 8014eb6:	bf08      	it	eq
 8014eb8:	f042 0201 	orreq.w	r2, r2, #1
 8014ebc:	bb1a      	cbnz	r2, 8014f06 <rclc_service_init_default+0x66>
 8014ebe:	4604      	mov	r4, r0
 8014ec0:	b308      	cbz	r0, 8014f06 <rclc_service_init_default+0x66>
 8014ec2:	f10d 0810 	add.w	r8, sp, #16
 8014ec6:	461f      	mov	r7, r3
 8014ec8:	460d      	mov	r5, r1
 8014eca:	f7fe fe5b 	bl	8013b84 <rcl_get_zero_initialized_service>
 8014ece:	6020      	str	r0, [r4, #0]
 8014ed0:	4640      	mov	r0, r8
 8014ed2:	f7fe feef 	bl	8013cb4 <rcl_service_get_default_options>
 8014ed6:	2250      	movs	r2, #80	; 0x50
 8014ed8:	490d      	ldr	r1, [pc, #52]	; (8014f10 <rclc_service_init_default+0x70>)
 8014eda:	4640      	mov	r0, r8
 8014edc:	f00b fff7 	bl	8020ece <memcpy>
 8014ee0:	463b      	mov	r3, r7
 8014ee2:	4632      	mov	r2, r6
 8014ee4:	4629      	mov	r1, r5
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f8cd 8000 	str.w	r8, [sp]
 8014eec:	f7fe fe50 	bl	8013b90 <rcl_service_init>
 8014ef0:	b910      	cbnz	r0, 8014ef8 <rclc_service_init_default+0x58>
 8014ef2:	b01e      	add	sp, #120	; 0x78
 8014ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef8:	9003      	str	r0, [sp, #12]
 8014efa:	f000 f8c5 	bl	8015088 <rcutils_reset_error>
 8014efe:	9803      	ldr	r0, [sp, #12]
 8014f00:	b01e      	add	sp, #120	; 0x78
 8014f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f06:	200b      	movs	r0, #11
 8014f08:	b01e      	add	sp, #120	; 0x78
 8014f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f0e:	bf00      	nop
 8014f10:	08024f90 	.word	0x08024f90

08014f14 <rclc_subscription_init_default>:
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	bf18      	it	ne
 8014f18:	2a00      	cmpne	r2, #0
 8014f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f1e:	4616      	mov	r6, r2
 8014f20:	bf0c      	ite	eq
 8014f22:	2201      	moveq	r2, #1
 8014f24:	2200      	movne	r2, #0
 8014f26:	b0a0      	sub	sp, #128	; 0x80
 8014f28:	2900      	cmp	r1, #0
 8014f2a:	bf08      	it	eq
 8014f2c:	f042 0201 	orreq.w	r2, r2, #1
 8014f30:	bb1a      	cbnz	r2, 8014f7a <rclc_subscription_init_default+0x66>
 8014f32:	4604      	mov	r4, r0
 8014f34:	b308      	cbz	r0, 8014f7a <rclc_subscription_init_default+0x66>
 8014f36:	f10d 0810 	add.w	r8, sp, #16
 8014f3a:	461f      	mov	r7, r3
 8014f3c:	460d      	mov	r5, r1
 8014f3e:	f7fe ff45 	bl	8013dcc <rcl_get_zero_initialized_subscription>
 8014f42:	6020      	str	r0, [r4, #0]
 8014f44:	4640      	mov	r0, r8
 8014f46:	f7fe fff5 	bl	8013f34 <rcl_subscription_get_default_options>
 8014f4a:	2250      	movs	r2, #80	; 0x50
 8014f4c:	490d      	ldr	r1, [pc, #52]	; (8014f84 <rclc_subscription_init_default+0x70>)
 8014f4e:	4640      	mov	r0, r8
 8014f50:	f00b ffbd 	bl	8020ece <memcpy>
 8014f54:	463b      	mov	r3, r7
 8014f56:	4632      	mov	r2, r6
 8014f58:	4629      	mov	r1, r5
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f8cd 8000 	str.w	r8, [sp]
 8014f60:	f7fe ff3a 	bl	8013dd8 <rcl_subscription_init>
 8014f64:	b910      	cbnz	r0, 8014f6c <rclc_subscription_init_default+0x58>
 8014f66:	b020      	add	sp, #128	; 0x80
 8014f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6c:	9003      	str	r0, [sp, #12]
 8014f6e:	f000 f88b 	bl	8015088 <rcutils_reset_error>
 8014f72:	9803      	ldr	r0, [sp, #12]
 8014f74:	b020      	add	sp, #128	; 0x80
 8014f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f7a:	200b      	movs	r0, #11
 8014f7c:	b020      	add	sp, #128	; 0x80
 8014f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f82:	bf00      	nop
 8014f84:	08024fe0 	.word	0x08024fe0

08014f88 <__default_zero_allocate>:
 8014f88:	f00a ba78 	b.w	801f47c <calloc>

08014f8c <__default_reallocate>:
 8014f8c:	f00a bc16 	b.w	801f7bc <realloc>

08014f90 <__default_deallocate>:
 8014f90:	f00a baf4 	b.w	801f57c <free>

08014f94 <__default_allocate>:
 8014f94:	f00a baea 	b.w	801f56c <malloc>

08014f98 <rcutils_get_zero_initialized_allocator>:
 8014f98:	b510      	push	{r4, lr}
 8014f9a:	4c05      	ldr	r4, [pc, #20]	; (8014fb0 <rcutils_get_zero_initialized_allocator+0x18>)
 8014f9c:	4686      	mov	lr, r0
 8014f9e:	4684      	mov	ip, r0
 8014fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fa6:	6823      	ldr	r3, [r4, #0]
 8014fa8:	4670      	mov	r0, lr
 8014faa:	f8cc 3000 	str.w	r3, [ip]
 8014fae:	bd10      	pop	{r4, pc}
 8014fb0:	08025030 	.word	0x08025030

08014fb4 <rcutils_set_default_allocator>:
 8014fb4:	b1a8      	cbz	r0, 8014fe2 <rcutils_set_default_allocator+0x2e>
 8014fb6:	6802      	ldr	r2, [r0, #0]
 8014fb8:	b1a2      	cbz	r2, 8014fe4 <rcutils_set_default_allocator+0x30>
 8014fba:	6841      	ldr	r1, [r0, #4]
 8014fbc:	b1a1      	cbz	r1, 8014fe8 <rcutils_set_default_allocator+0x34>
 8014fbe:	b410      	push	{r4}
 8014fc0:	68c4      	ldr	r4, [r0, #12]
 8014fc2:	b164      	cbz	r4, 8014fde <rcutils_set_default_allocator+0x2a>
 8014fc4:	6880      	ldr	r0, [r0, #8]
 8014fc6:	b138      	cbz	r0, 8014fd8 <rcutils_set_default_allocator+0x24>
 8014fc8:	4b08      	ldr	r3, [pc, #32]	; (8014fec <rcutils_set_default_allocator+0x38>)
 8014fca:	601a      	str	r2, [r3, #0]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8014fd2:	2001      	movs	r0, #1
 8014fd4:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8014fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fdc:	4770      	bx	lr
 8014fde:	4620      	mov	r0, r4
 8014fe0:	e7fa      	b.n	8014fd8 <rcutils_set_default_allocator+0x24>
 8014fe2:	4770      	bx	lr
 8014fe4:	4610      	mov	r0, r2
 8014fe6:	4770      	bx	lr
 8014fe8:	4608      	mov	r0, r1
 8014fea:	4770      	bx	lr
 8014fec:	200008a4 	.word	0x200008a4

08014ff0 <rcutils_get_default_allocator>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	4c05      	ldr	r4, [pc, #20]	; (8015008 <rcutils_get_default_allocator+0x18>)
 8014ff4:	4686      	mov	lr, r0
 8014ff6:	4684      	mov	ip, r0
 8014ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ffa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	4670      	mov	r0, lr
 8015002:	f8cc 3000 	str.w	r3, [ip]
 8015006:	bd10      	pop	{r4, pc}
 8015008:	200008a4 	.word	0x200008a4

0801500c <rcutils_allocator_is_valid>:
 801500c:	b158      	cbz	r0, 8015026 <rcutils_allocator_is_valid+0x1a>
 801500e:	6803      	ldr	r3, [r0, #0]
 8015010:	b143      	cbz	r3, 8015024 <rcutils_allocator_is_valid+0x18>
 8015012:	6843      	ldr	r3, [r0, #4]
 8015014:	b133      	cbz	r3, 8015024 <rcutils_allocator_is_valid+0x18>
 8015016:	68c3      	ldr	r3, [r0, #12]
 8015018:	b123      	cbz	r3, 8015024 <rcutils_allocator_is_valid+0x18>
 801501a:	6880      	ldr	r0, [r0, #8]
 801501c:	3800      	subs	r0, #0
 801501e:	bf18      	it	ne
 8015020:	2001      	movne	r0, #1
 8015022:	4770      	bx	lr
 8015024:	4618      	mov	r0, r3
 8015026:	4770      	bx	lr

08015028 <rcutils_get_env>:
 8015028:	b168      	cbz	r0, 8015046 <rcutils_get_env+0x1e>
 801502a:	b510      	push	{r4, lr}
 801502c:	460c      	mov	r4, r1
 801502e:	b129      	cbz	r1, 801503c <rcutils_get_env+0x14>
 8015030:	f00a fa54 	bl	801f4dc <getenv>
 8015034:	b120      	cbz	r0, 8015040 <rcutils_get_env+0x18>
 8015036:	6020      	str	r0, [r4, #0]
 8015038:	2000      	movs	r0, #0
 801503a:	bd10      	pop	{r4, pc}
 801503c:	4803      	ldr	r0, [pc, #12]	; (801504c <rcutils_get_env+0x24>)
 801503e:	bd10      	pop	{r4, pc}
 8015040:	4b03      	ldr	r3, [pc, #12]	; (8015050 <rcutils_get_env+0x28>)
 8015042:	6023      	str	r3, [r4, #0]
 8015044:	bd10      	pop	{r4, pc}
 8015046:	4803      	ldr	r0, [pc, #12]	; (8015054 <rcutils_get_env+0x2c>)
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop
 801504c:	08025060 	.word	0x08025060
 8015050:	08025418 	.word	0x08025418
 8015054:	08025044 	.word	0x08025044

08015058 <rcutils_get_error_string>:
 8015058:	4b06      	ldr	r3, [pc, #24]	; (8015074 <rcutils_get_error_string+0x1c>)
 801505a:	781b      	ldrb	r3, [r3, #0]
 801505c:	b13b      	cbz	r3, 801506e <rcutils_get_error_string+0x16>
 801505e:	4b06      	ldr	r3, [pc, #24]	; (8015078 <rcutils_get_error_string+0x20>)
 8015060:	781a      	ldrb	r2, [r3, #0]
 8015062:	b90a      	cbnz	r2, 8015068 <rcutils_get_error_string+0x10>
 8015064:	2201      	movs	r2, #1
 8015066:	701a      	strb	r2, [r3, #0]
 8015068:	4b04      	ldr	r3, [pc, #16]	; (801507c <rcutils_get_error_string+0x24>)
 801506a:	7818      	ldrb	r0, [r3, #0]
 801506c:	4770      	bx	lr
 801506e:	4b04      	ldr	r3, [pc, #16]	; (8015080 <rcutils_get_error_string+0x28>)
 8015070:	7818      	ldrb	r0, [r3, #0]
 8015072:	4770      	bx	lr
 8015074:	20012408 	.word	0x20012408
 8015078:	20012421 	.word	0x20012421
 801507c:	20012420 	.word	0x20012420
 8015080:	080246f0 	.word	0x080246f0
 8015084:	00000000 	.word	0x00000000

08015088 <rcutils_reset_error>:
 8015088:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80150a8 <rcutils_reset_error+0x20>
 801508c:	2300      	movs	r3, #0
 801508e:	4a08      	ldr	r2, [pc, #32]	; (80150b0 <rcutils_reset_error+0x28>)
 8015090:	4808      	ldr	r0, [pc, #32]	; (80150b4 <rcutils_reset_error+0x2c>)
 8015092:	8013      	strh	r3, [r2, #0]
 8015094:	4908      	ldr	r1, [pc, #32]	; (80150b8 <rcutils_reset_error+0x30>)
 8015096:	7003      	strb	r3, [r0, #0]
 8015098:	700b      	strb	r3, [r1, #0]
 801509a:	ed82 7b02 	vstr	d7, [r2, #8]
 801509e:	4a07      	ldr	r2, [pc, #28]	; (80150bc <rcutils_reset_error+0x34>)
 80150a0:	7013      	strb	r3, [r2, #0]
 80150a2:	4770      	bx	lr
 80150a4:	f3af 8000 	nop.w
	...
 80150b0:	20012410 	.word	0x20012410
 80150b4:	20012421 	.word	0x20012421
 80150b8:	20012420 	.word	0x20012420
 80150bc:	20012408 	.word	0x20012408

080150c0 <rcutils_format_string_limit>:
 80150c0:	b40f      	push	{r0, r1, r2, r3}
 80150c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150c4:	b083      	sub	sp, #12
 80150c6:	ac08      	add	r4, sp, #32
 80150c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80150ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80150ce:	b326      	cbz	r6, 801511a <rcutils_format_string_limit+0x5a>
 80150d0:	a808      	add	r0, sp, #32
 80150d2:	f7ff ff9b 	bl	801500c <rcutils_allocator_is_valid>
 80150d6:	b300      	cbz	r0, 801511a <rcutils_format_string_limit+0x5a>
 80150d8:	2100      	movs	r1, #0
 80150da:	ab0f      	add	r3, sp, #60	; 0x3c
 80150dc:	4632      	mov	r2, r6
 80150de:	4608      	mov	r0, r1
 80150e0:	e9cd 3300 	strd	r3, r3, [sp]
 80150e4:	f000 f906 	bl	80152f4 <rcutils_vsnprintf>
 80150e8:	1c43      	adds	r3, r0, #1
 80150ea:	4605      	mov	r5, r0
 80150ec:	d015      	beq.n	801511a <rcutils_format_string_limit+0x5a>
 80150ee:	1c47      	adds	r7, r0, #1
 80150f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150f2:	429f      	cmp	r7, r3
 80150f4:	d901      	bls.n	80150fa <rcutils_format_string_limit+0x3a>
 80150f6:	1e5d      	subs	r5, r3, #1
 80150f8:	461f      	mov	r7, r3
 80150fa:	9b08      	ldr	r3, [sp, #32]
 80150fc:	4638      	mov	r0, r7
 80150fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015100:	4798      	blx	r3
 8015102:	4604      	mov	r4, r0
 8015104:	b148      	cbz	r0, 801511a <rcutils_format_string_limit+0x5a>
 8015106:	4632      	mov	r2, r6
 8015108:	4639      	mov	r1, r7
 801510a:	9b01      	ldr	r3, [sp, #4]
 801510c:	f000 f8f2 	bl	80152f4 <rcutils_vsnprintf>
 8015110:	2800      	cmp	r0, #0
 8015112:	db09      	blt.n	8015128 <rcutils_format_string_limit+0x68>
 8015114:	2300      	movs	r3, #0
 8015116:	5563      	strb	r3, [r4, r5]
 8015118:	e000      	b.n	801511c <rcutils_format_string_limit+0x5c>
 801511a:	2400      	movs	r4, #0
 801511c:	4620      	mov	r0, r4
 801511e:	b003      	add	sp, #12
 8015120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015124:	b004      	add	sp, #16
 8015126:	4770      	bx	lr
 8015128:	4620      	mov	r0, r4
 801512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801512c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801512e:	2400      	movs	r4, #0
 8015130:	4798      	blx	r3
 8015132:	e7f3      	b.n	801511c <rcutils_format_string_limit+0x5c>

08015134 <rcutils_repl_str>:
 8015134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015138:	ed2d 8b02 	vpush	{d8}
 801513c:	b087      	sub	sp, #28
 801513e:	2600      	movs	r6, #0
 8015140:	4680      	mov	r8, r0
 8015142:	468a      	mov	sl, r1
 8015144:	9000      	str	r0, [sp, #0]
 8015146:	4608      	mov	r0, r1
 8015148:	ee08 2a10 	vmov	s16, r2
 801514c:	4699      	mov	r9, r3
 801514e:	2510      	movs	r5, #16
 8015150:	f7eb f8d6 	bl	8000300 <strlen>
 8015154:	4637      	mov	r7, r6
 8015156:	46b3      	mov	fp, r6
 8015158:	9001      	str	r0, [sp, #4]
 801515a:	e01e      	b.n	801519a <rcutils_repl_str+0x66>
 801515c:	f10b 0b01 	add.w	fp, fp, #1
 8015160:	9b01      	ldr	r3, [sp, #4]
 8015162:	455e      	cmp	r6, fp
 8015164:	eb04 0803 	add.w	r8, r4, r3
 8015168:	d211      	bcs.n	801518e <rcutils_repl_str+0x5a>
 801516a:	442e      	add	r6, r5
 801516c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015170:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015178:	00b1      	lsls	r1, r6, #2
 801517a:	4798      	blx	r3
 801517c:	2800      	cmp	r0, #0
 801517e:	f000 8088 	beq.w	8015292 <rcutils_repl_str+0x15e>
 8015182:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015186:	4607      	mov	r7, r0
 8015188:	bf28      	it	cs
 801518a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801518e:	9a00      	ldr	r2, [sp, #0]
 8015190:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8015194:	1aa4      	subs	r4, r4, r2
 8015196:	f843 4c04 	str.w	r4, [r3, #-4]
 801519a:	4651      	mov	r1, sl
 801519c:	4640      	mov	r0, r8
 801519e:	f00b fdf0 	bl	8020d82 <strstr>
 80151a2:	4604      	mov	r4, r0
 80151a4:	4638      	mov	r0, r7
 80151a6:	2c00      	cmp	r4, #0
 80151a8:	d1d8      	bne.n	801515c <rcutils_repl_str+0x28>
 80151aa:	4640      	mov	r0, r8
 80151ac:	f7eb f8a8 	bl	8000300 <strlen>
 80151b0:	9b00      	ldr	r3, [sp, #0]
 80151b2:	eba8 0803 	sub.w	r8, r8, r3
 80151b6:	eb08 0400 	add.w	r4, r8, r0
 80151ba:	9402      	str	r4, [sp, #8]
 80151bc:	f1bb 0f00 	cmp.w	fp, #0
 80151c0:	d045      	beq.n	801524e <rcutils_repl_str+0x11a>
 80151c2:	ee18 0a10 	vmov	r0, s16
 80151c6:	f7eb f89b 	bl	8000300 <strlen>
 80151ca:	9a01      	ldr	r2, [sp, #4]
 80151cc:	4606      	mov	r6, r0
 80151ce:	f8d9 3000 	ldr.w	r3, [r9]
 80151d2:	1a82      	subs	r2, r0, r2
 80151d4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80151d8:	fb0b 4202 	mla	r2, fp, r2, r4
 80151dc:	1c50      	adds	r0, r2, #1
 80151de:	9205      	str	r2, [sp, #20]
 80151e0:	4798      	blx	r3
 80151e2:	4682      	mov	sl, r0
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d054      	beq.n	8015292 <rcutils_repl_str+0x15e>
 80151e8:	683a      	ldr	r2, [r7, #0]
 80151ea:	463d      	mov	r5, r7
 80151ec:	9900      	ldr	r1, [sp, #0]
 80151ee:	2401      	movs	r4, #1
 80151f0:	f00b fe6d 	bl	8020ece <memcpy>
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80151fa:	eb0a 0803 	add.w	r8, sl, r3
 80151fe:	ee18 7a10 	vmov	r7, s16
 8015202:	f8dd a000 	ldr.w	sl, [sp]
 8015206:	f8cd 9000 	str.w	r9, [sp]
 801520a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801520e:	4632      	mov	r2, r6
 8015210:	4639      	mov	r1, r7
 8015212:	4640      	mov	r0, r8
 8015214:	44b0      	add	r8, r6
 8015216:	f00b fe5a 	bl	8020ece <memcpy>
 801521a:	f855 2b04 	ldr.w	r2, [r5], #4
 801521e:	45a3      	cmp	fp, r4
 8015220:	444a      	add	r2, r9
 8015222:	eb0a 0102 	add.w	r1, sl, r2
 8015226:	d02a      	beq.n	801527e <rcutils_repl_str+0x14a>
 8015228:	6828      	ldr	r0, [r5, #0]
 801522a:	1a82      	subs	r2, r0, r2
 801522c:	4640      	mov	r0, r8
 801522e:	4490      	add	r8, r2
 8015230:	f00b fe4d 	bl	8020ece <memcpy>
 8015234:	1c62      	adds	r2, r4, #1
 8015236:	45a3      	cmp	fp, r4
 8015238:	4614      	mov	r4, r2
 801523a:	d8e8      	bhi.n	801520e <rcutils_repl_str+0xda>
 801523c:	f8dd 9000 	ldr.w	r9, [sp]
 8015240:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015244:	2300      	movs	r3, #0
 8015246:	9a05      	ldr	r2, [sp, #20]
 8015248:	f80a 3002 	strb.w	r3, [sl, r2]
 801524c:	e00b      	b.n	8015266 <rcutils_repl_str+0x132>
 801524e:	4620      	mov	r0, r4
 8015250:	f8d9 3000 	ldr.w	r3, [r9]
 8015254:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015258:	3001      	adds	r0, #1
 801525a:	4798      	blx	r3
 801525c:	4682      	mov	sl, r0
 801525e:	b110      	cbz	r0, 8015266 <rcutils_repl_str+0x132>
 8015260:	9900      	ldr	r1, [sp, #0]
 8015262:	f00b fe2c 	bl	8020ebe <strcpy>
 8015266:	4638      	mov	r0, r7
 8015268:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801526c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015270:	4798      	blx	r3
 8015272:	4650      	mov	r0, sl
 8015274:	b007      	add	sp, #28
 8015276:	ecbd 8b02 	vpop	{d8}
 801527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527e:	9b02      	ldr	r3, [sp, #8]
 8015280:	4640      	mov	r0, r8
 8015282:	f8dd 9000 	ldr.w	r9, [sp]
 8015286:	1a9a      	subs	r2, r3, r2
 8015288:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801528c:	f00b fe1f 	bl	8020ece <memcpy>
 8015290:	e7d8      	b.n	8015244 <rcutils_repl_str+0x110>
 8015292:	f04f 0a00 	mov.w	sl, #0
 8015296:	e7e6      	b.n	8015266 <rcutils_repl_str+0x132>

08015298 <rcutils_snprintf>:
 8015298:	b40c      	push	{r2, r3}
 801529a:	b530      	push	{r4, r5, lr}
 801529c:	b083      	sub	sp, #12
 801529e:	ab06      	add	r3, sp, #24
 80152a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80152a4:	9301      	str	r3, [sp, #4]
 80152a6:	b1e2      	cbz	r2, 80152e2 <rcutils_snprintf+0x4a>
 80152a8:	fab0 f480 	clz	r4, r0
 80152ac:	fab1 f581 	clz	r5, r1
 80152b0:	ea50 0c01 	orrs.w	ip, r0, r1
 80152b4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80152b8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80152bc:	d008      	beq.n	80152d0 <rcutils_snprintf+0x38>
 80152be:	b984      	cbnz	r4, 80152e2 <rcutils_snprintf+0x4a>
 80152c0:	b97d      	cbnz	r5, 80152e2 <rcutils_snprintf+0x4a>
 80152c2:	f00b fc69 	bl	8020b98 <vsniprintf>
 80152c6:	b003      	add	sp, #12
 80152c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152cc:	b002      	add	sp, #8
 80152ce:	4770      	bx	lr
 80152d0:	4661      	mov	r1, ip
 80152d2:	4660      	mov	r0, ip
 80152d4:	f00b fc60 	bl	8020b98 <vsniprintf>
 80152d8:	b003      	add	sp, #12
 80152da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152de:	b002      	add	sp, #8
 80152e0:	4770      	bx	lr
 80152e2:	f00b fdbf 	bl	8020e64 <__errno>
 80152e6:	2216      	movs	r2, #22
 80152e8:	4603      	mov	r3, r0
 80152ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152ee:	601a      	str	r2, [r3, #0]
 80152f0:	e7e9      	b.n	80152c6 <rcutils_snprintf+0x2e>
 80152f2:	bf00      	nop

080152f4 <rcutils_vsnprintf>:
 80152f4:	b570      	push	{r4, r5, r6, lr}
 80152f6:	b1b2      	cbz	r2, 8015326 <rcutils_vsnprintf+0x32>
 80152f8:	fab0 f480 	clz	r4, r0
 80152fc:	fab1 f581 	clz	r5, r1
 8015300:	ea50 0c01 	orrs.w	ip, r0, r1
 8015304:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015308:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801530c:	d005      	beq.n	801531a <rcutils_vsnprintf+0x26>
 801530e:	b954      	cbnz	r4, 8015326 <rcutils_vsnprintf+0x32>
 8015310:	b94d      	cbnz	r5, 8015326 <rcutils_vsnprintf+0x32>
 8015312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015316:	f00b bc3f 	b.w	8020b98 <vsniprintf>
 801531a:	4661      	mov	r1, ip
 801531c:	4660      	mov	r0, ip
 801531e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015322:	f00b bc39 	b.w	8020b98 <vsniprintf>
 8015326:	f00b fd9d 	bl	8020e64 <__errno>
 801532a:	2316      	movs	r3, #22
 801532c:	6003      	str	r3, [r0, #0]
 801532e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015332:	bd70      	pop	{r4, r5, r6, pc}

08015334 <rcutils_strdup>:
 8015334:	b084      	sub	sp, #16
 8015336:	b570      	push	{r4, r5, r6, lr}
 8015338:	b082      	sub	sp, #8
 801533a:	4605      	mov	r5, r0
 801533c:	ac07      	add	r4, sp, #28
 801533e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015342:	b1b0      	cbz	r0, 8015372 <rcutils_strdup+0x3e>
 8015344:	f7ea ffdc 	bl	8000300 <strlen>
 8015348:	1c42      	adds	r2, r0, #1
 801534a:	9b07      	ldr	r3, [sp, #28]
 801534c:	4606      	mov	r6, r0
 801534e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015350:	4610      	mov	r0, r2
 8015352:	9201      	str	r2, [sp, #4]
 8015354:	4798      	blx	r3
 8015356:	4604      	mov	r4, r0
 8015358:	b128      	cbz	r0, 8015366 <rcutils_strdup+0x32>
 801535a:	9a01      	ldr	r2, [sp, #4]
 801535c:	4629      	mov	r1, r5
 801535e:	f00b fdb6 	bl	8020ece <memcpy>
 8015362:	2300      	movs	r3, #0
 8015364:	55a3      	strb	r3, [r4, r6]
 8015366:	4620      	mov	r0, r4
 8015368:	b002      	add	sp, #8
 801536a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801536e:	b004      	add	sp, #16
 8015370:	4770      	bx	lr
 8015372:	4604      	mov	r4, r0
 8015374:	e7f7      	b.n	8015366 <rcutils_strdup+0x32>
 8015376:	bf00      	nop

08015378 <rcutils_strndup>:
 8015378:	b082      	sub	sp, #8
 801537a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801537c:	ac06      	add	r4, sp, #24
 801537e:	4605      	mov	r5, r0
 8015380:	e884 000c 	stmia.w	r4, {r2, r3}
 8015384:	b188      	cbz	r0, 80153aa <rcutils_strndup+0x32>
 8015386:	1c4f      	adds	r7, r1, #1
 8015388:	460e      	mov	r6, r1
 801538a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801538c:	4638      	mov	r0, r7
 801538e:	4790      	blx	r2
 8015390:	4604      	mov	r4, r0
 8015392:	b128      	cbz	r0, 80153a0 <rcutils_strndup+0x28>
 8015394:	463a      	mov	r2, r7
 8015396:	4629      	mov	r1, r5
 8015398:	f00b fd99 	bl	8020ece <memcpy>
 801539c:	2300      	movs	r3, #0
 801539e:	55a3      	strb	r3, [r4, r6]
 80153a0:	4620      	mov	r0, r4
 80153a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80153a6:	b002      	add	sp, #8
 80153a8:	4770      	bx	lr
 80153aa:	4604      	mov	r4, r0
 80153ac:	e7f8      	b.n	80153a0 <rcutils_strndup+0x28>
 80153ae:	bf00      	nop

080153b0 <rcutils_system_time_now>:
 80153b0:	b300      	cbz	r0, 80153f4 <rcutils_system_time_now+0x44>
 80153b2:	b570      	push	{r4, r5, r6, lr}
 80153b4:	b084      	sub	sp, #16
 80153b6:	4604      	mov	r4, r0
 80153b8:	2001      	movs	r0, #1
 80153ba:	4669      	mov	r1, sp
 80153bc:	f7ee f95c 	bl	8003678 <clock_gettime>
 80153c0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80153c4:	2900      	cmp	r1, #0
 80153c6:	db12      	blt.n	80153ee <rcutils_system_time_now+0x3e>
 80153c8:	ea53 0201 	orrs.w	r2, r3, r1
 80153cc:	9d02      	ldr	r5, [sp, #8]
 80153ce:	d101      	bne.n	80153d4 <rcutils_system_time_now+0x24>
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	db0c      	blt.n	80153ee <rcutils_system_time_now+0x3e>
 80153d4:	4e08      	ldr	r6, [pc, #32]	; (80153f8 <rcutils_system_time_now+0x48>)
 80153d6:	2000      	movs	r0, #0
 80153d8:	fba3 3206 	umull	r3, r2, r3, r6
 80153dc:	195b      	adds	r3, r3, r5
 80153de:	fb06 2201 	mla	r2, r6, r1, r2
 80153e2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80153e6:	e9c4 3200 	strd	r3, r2, [r4]
 80153ea:	b004      	add	sp, #16
 80153ec:	bd70      	pop	{r4, r5, r6, pc}
 80153ee:	2002      	movs	r0, #2
 80153f0:	b004      	add	sp, #16
 80153f2:	bd70      	pop	{r4, r5, r6, pc}
 80153f4:	200b      	movs	r0, #11
 80153f6:	4770      	bx	lr
 80153f8:	3b9aca00 	.word	0x3b9aca00

080153fc <rcutils_steady_time_now>:
 80153fc:	b300      	cbz	r0, 8015440 <rcutils_steady_time_now+0x44>
 80153fe:	b570      	push	{r4, r5, r6, lr}
 8015400:	b084      	sub	sp, #16
 8015402:	4604      	mov	r4, r0
 8015404:	2000      	movs	r0, #0
 8015406:	4669      	mov	r1, sp
 8015408:	f7ee f936 	bl	8003678 <clock_gettime>
 801540c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015410:	2900      	cmp	r1, #0
 8015412:	db12      	blt.n	801543a <rcutils_steady_time_now+0x3e>
 8015414:	ea53 0201 	orrs.w	r2, r3, r1
 8015418:	9d02      	ldr	r5, [sp, #8]
 801541a:	d101      	bne.n	8015420 <rcutils_steady_time_now+0x24>
 801541c:	2d00      	cmp	r5, #0
 801541e:	db0c      	blt.n	801543a <rcutils_steady_time_now+0x3e>
 8015420:	4e08      	ldr	r6, [pc, #32]	; (8015444 <rcutils_steady_time_now+0x48>)
 8015422:	2000      	movs	r0, #0
 8015424:	fba3 3206 	umull	r3, r2, r3, r6
 8015428:	195b      	adds	r3, r3, r5
 801542a:	fb06 2201 	mla	r2, r6, r1, r2
 801542e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8015432:	e9c4 3200 	strd	r3, r2, [r4]
 8015436:	b004      	add	sp, #16
 8015438:	bd70      	pop	{r4, r5, r6, pc}
 801543a:	2002      	movs	r0, #2
 801543c:	b004      	add	sp, #16
 801543e:	bd70      	pop	{r4, r5, r6, pc}
 8015440:	200b      	movs	r0, #11
 8015442:	4770      	bx	lr
 8015444:	3b9aca00 	.word	0x3b9aca00

08015448 <rmw_get_zero_initialized_init_options>:
 8015448:	b510      	push	{r4, lr}
 801544a:	4604      	mov	r4, r0
 801544c:	2238      	movs	r2, #56	; 0x38
 801544e:	2100      	movs	r1, #0
 8015450:	f00b fc70 	bl	8020d34 <memset>
 8015454:	f104 0010 	add.w	r0, r4, #16
 8015458:	f000 f80a 	bl	8015470 <rmw_get_default_security_options>
 801545c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015460:	4620      	mov	r0, r4
 8015462:	60e3      	str	r3, [r4, #12]
 8015464:	bd10      	pop	{r4, pc}
 8015466:	bf00      	nop

08015468 <rmw_get_default_publisher_options>:
 8015468:	2200      	movs	r2, #0
 801546a:	6002      	str	r2, [r0, #0]
 801546c:	7102      	strb	r2, [r0, #4]
 801546e:	4770      	bx	lr

08015470 <rmw_get_default_security_options>:
 8015470:	2200      	movs	r2, #0
 8015472:	7002      	strb	r2, [r0, #0]
 8015474:	6042      	str	r2, [r0, #4]
 8015476:	4770      	bx	lr

08015478 <rmw_subscription_content_filter_options_fini>:
 8015478:	b1b0      	cbz	r0, 80154a8 <rmw_subscription_content_filter_options_fini+0x30>
 801547a:	b538      	push	{r3, r4, r5, lr}
 801547c:	4604      	mov	r4, r0
 801547e:	4608      	mov	r0, r1
 8015480:	460d      	mov	r5, r1
 8015482:	f7ff fdc3 	bl	801500c <rcutils_allocator_is_valid>
 8015486:	b168      	cbz	r0, 80154a4 <rmw_subscription_content_filter_options_fini+0x2c>
 8015488:	6820      	ldr	r0, [r4, #0]
 801548a:	b120      	cbz	r0, 8015496 <rmw_subscription_content_filter_options_fini+0x1e>
 801548c:	686b      	ldr	r3, [r5, #4]
 801548e:	6929      	ldr	r1, [r5, #16]
 8015490:	4798      	blx	r3
 8015492:	2300      	movs	r3, #0
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	1d20      	adds	r0, r4, #4
 8015498:	f008 fa06 	bl	801d8a8 <rcutils_string_array_fini>
 801549c:	3800      	subs	r0, #0
 801549e:	bf18      	it	ne
 80154a0:	2001      	movne	r0, #1
 80154a2:	bd38      	pop	{r3, r4, r5, pc}
 80154a4:	200b      	movs	r0, #11
 80154a6:	bd38      	pop	{r3, r4, r5, pc}
 80154a8:	200b      	movs	r0, #11
 80154aa:	4770      	bx	lr

080154ac <rmw_get_default_subscription_options>:
 80154ac:	2200      	movs	r2, #0
 80154ae:	e9c0 2200 	strd	r2, r2, [r0]
 80154b2:	6082      	str	r2, [r0, #8]
 80154b4:	4770      	bx	lr
 80154b6:	bf00      	nop

080154b8 <rmw_get_zero_initialized_message_info>:
 80154b8:	b510      	push	{r4, lr}
 80154ba:	4604      	mov	r4, r0
 80154bc:	2240      	movs	r2, #64	; 0x40
 80154be:	2100      	movs	r1, #0
 80154c0:	f00b fc38 	bl	8020d34 <memset>
 80154c4:	4620      	mov	r0, r4
 80154c6:	bd10      	pop	{r4, pc}

080154c8 <rmw_validate_namespace_with_size>:
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d043      	beq.n	8015554 <rmw_validate_namespace_with_size+0x8c>
 80154cc:	b570      	push	{r4, r5, r6, lr}
 80154ce:	4614      	mov	r4, r2
 80154d0:	b0c2      	sub	sp, #264	; 0x108
 80154d2:	b32a      	cbz	r2, 8015520 <rmw_validate_namespace_with_size+0x58>
 80154d4:	2901      	cmp	r1, #1
 80154d6:	460d      	mov	r5, r1
 80154d8:	461e      	mov	r6, r3
 80154da:	d102      	bne.n	80154e2 <rmw_validate_namespace_with_size+0x1a>
 80154dc:	7803      	ldrb	r3, [r0, #0]
 80154de:	2b2f      	cmp	r3, #47	; 0x2f
 80154e0:	d012      	beq.n	8015508 <rmw_validate_namespace_with_size+0x40>
 80154e2:	aa01      	add	r2, sp, #4
 80154e4:	4669      	mov	r1, sp
 80154e6:	f008 fbd3 	bl	801dc90 <rmw_validate_full_topic_name>
 80154ea:	b980      	cbnz	r0, 801550e <rmw_validate_namespace_with_size+0x46>
 80154ec:	9a00      	ldr	r2, [sp, #0]
 80154ee:	b14a      	cbz	r2, 8015504 <rmw_validate_namespace_with_size+0x3c>
 80154f0:	2a07      	cmp	r2, #7
 80154f2:	d007      	beq.n	8015504 <rmw_validate_namespace_with_size+0x3c>
 80154f4:	1e53      	subs	r3, r2, #1
 80154f6:	2b05      	cmp	r3, #5
 80154f8:	d82e      	bhi.n	8015558 <rmw_validate_namespace_with_size+0x90>
 80154fa:	e8df f003 	tbb	[pc, r3]
 80154fe:	1f1c      	.short	0x1f1c
 8015500:	14282522 	.word	0x14282522
 8015504:	2df5      	cmp	r5, #245	; 0xf5
 8015506:	d804      	bhi.n	8015512 <rmw_validate_namespace_with_size+0x4a>
 8015508:	2300      	movs	r3, #0
 801550a:	4618      	mov	r0, r3
 801550c:	6023      	str	r3, [r4, #0]
 801550e:	b042      	add	sp, #264	; 0x108
 8015510:	bd70      	pop	{r4, r5, r6, pc}
 8015512:	2307      	movs	r3, #7
 8015514:	6023      	str	r3, [r4, #0]
 8015516:	2e00      	cmp	r6, #0
 8015518:	d0f9      	beq.n	801550e <rmw_validate_namespace_with_size+0x46>
 801551a:	23f4      	movs	r3, #244	; 0xf4
 801551c:	6033      	str	r3, [r6, #0]
 801551e:	e7f6      	b.n	801550e <rmw_validate_namespace_with_size+0x46>
 8015520:	200b      	movs	r0, #11
 8015522:	b042      	add	sp, #264	; 0x108
 8015524:	bd70      	pop	{r4, r5, r6, pc}
 8015526:	2306      	movs	r3, #6
 8015528:	6023      	str	r3, [r4, #0]
 801552a:	2e00      	cmp	r6, #0
 801552c:	d0ef      	beq.n	801550e <rmw_validate_namespace_with_size+0x46>
 801552e:	9b01      	ldr	r3, [sp, #4]
 8015530:	6033      	str	r3, [r6, #0]
 8015532:	b042      	add	sp, #264	; 0x108
 8015534:	bd70      	pop	{r4, r5, r6, pc}
 8015536:	2301      	movs	r3, #1
 8015538:	6023      	str	r3, [r4, #0]
 801553a:	e7f6      	b.n	801552a <rmw_validate_namespace_with_size+0x62>
 801553c:	2302      	movs	r3, #2
 801553e:	6023      	str	r3, [r4, #0]
 8015540:	e7f3      	b.n	801552a <rmw_validate_namespace_with_size+0x62>
 8015542:	2303      	movs	r3, #3
 8015544:	6023      	str	r3, [r4, #0]
 8015546:	e7f0      	b.n	801552a <rmw_validate_namespace_with_size+0x62>
 8015548:	2304      	movs	r3, #4
 801554a:	6023      	str	r3, [r4, #0]
 801554c:	e7ed      	b.n	801552a <rmw_validate_namespace_with_size+0x62>
 801554e:	2305      	movs	r3, #5
 8015550:	6023      	str	r3, [r4, #0]
 8015552:	e7ea      	b.n	801552a <rmw_validate_namespace_with_size+0x62>
 8015554:	200b      	movs	r0, #11
 8015556:	4770      	bx	lr
 8015558:	4613      	mov	r3, r2
 801555a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801555e:	4a03      	ldr	r2, [pc, #12]	; (801556c <rmw_validate_namespace_with_size+0xa4>)
 8015560:	a802      	add	r0, sp, #8
 8015562:	f7ff fe99 	bl	8015298 <rcutils_snprintf>
 8015566:	2001      	movs	r0, #1
 8015568:	e7d1      	b.n	801550e <rmw_validate_namespace_with_size+0x46>
 801556a:	bf00      	nop
 801556c:	0802507c 	.word	0x0802507c

08015570 <rmw_validate_namespace>:
 8015570:	b168      	cbz	r0, 801558e <rmw_validate_namespace+0x1e>
 8015572:	b570      	push	{r4, r5, r6, lr}
 8015574:	460d      	mov	r5, r1
 8015576:	4616      	mov	r6, r2
 8015578:	4604      	mov	r4, r0
 801557a:	f7ea fec1 	bl	8000300 <strlen>
 801557e:	4633      	mov	r3, r6
 8015580:	4601      	mov	r1, r0
 8015582:	462a      	mov	r2, r5
 8015584:	4620      	mov	r0, r4
 8015586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801558a:	f7ff bf9d 	b.w	80154c8 <rmw_validate_namespace_with_size>
 801558e:	200b      	movs	r0, #11
 8015590:	4770      	bx	lr
 8015592:	bf00      	nop

08015594 <rmw_namespace_validation_result_string>:
 8015594:	2807      	cmp	r0, #7
 8015596:	d803      	bhi.n	80155a0 <rmw_namespace_validation_result_string+0xc>
 8015598:	4b02      	ldr	r3, [pc, #8]	; (80155a4 <rmw_namespace_validation_result_string+0x10>)
 801559a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801559e:	4770      	bx	lr
 80155a0:	4801      	ldr	r0, [pc, #4]	; (80155a8 <rmw_namespace_validation_result_string+0x14>)
 80155a2:	4770      	bx	lr
 80155a4:	08025274 	.word	0x08025274
 80155a8:	080250cc 	.word	0x080250cc

080155ac <rmw_validate_node_name>:
 80155ac:	2800      	cmp	r0, #0
 80155ae:	d042      	beq.n	8015636 <rmw_validate_node_name+0x8a>
 80155b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b4:	460d      	mov	r5, r1
 80155b6:	2900      	cmp	r1, #0
 80155b8:	d03f      	beq.n	801563a <rmw_validate_node_name+0x8e>
 80155ba:	4604      	mov	r4, r0
 80155bc:	4616      	mov	r6, r2
 80155be:	f7ea fe9f 	bl	8000300 <strlen>
 80155c2:	b310      	cbz	r0, 801560a <rmw_validate_node_name+0x5e>
 80155c4:	1e63      	subs	r3, r4, #1
 80155c6:	f1c4 0101 	rsb	r1, r4, #1
 80155ca:	eb03 0800 	add.w	r8, r3, r0
 80155ce:	18cf      	adds	r7, r1, r3
 80155d0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80155d4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80155d8:	f02e 0c20 	bic.w	ip, lr, #32
 80155dc:	2a09      	cmp	r2, #9
 80155de:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80155e2:	d905      	bls.n	80155f0 <rmw_validate_node_name+0x44>
 80155e4:	f1bc 0f19 	cmp.w	ip, #25
 80155e8:	d902      	bls.n	80155f0 <rmw_validate_node_name+0x44>
 80155ea:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80155ee:	d114      	bne.n	801561a <rmw_validate_node_name+0x6e>
 80155f0:	4598      	cmp	r8, r3
 80155f2:	d1ec      	bne.n	80155ce <rmw_validate_node_name+0x22>
 80155f4:	7822      	ldrb	r2, [r4, #0]
 80155f6:	4b16      	ldr	r3, [pc, #88]	; (8015650 <rmw_validate_node_name+0xa4>)
 80155f8:	5cd3      	ldrb	r3, [r2, r3]
 80155fa:	f013 0304 	ands.w	r3, r3, #4
 80155fe:	d113      	bne.n	8015628 <rmw_validate_node_name+0x7c>
 8015600:	28ff      	cmp	r0, #255	; 0xff
 8015602:	d81c      	bhi.n	801563e <rmw_validate_node_name+0x92>
 8015604:	4618      	mov	r0, r3
 8015606:	602b      	str	r3, [r5, #0]
 8015608:	e00c      	b.n	8015624 <rmw_validate_node_name+0x78>
 801560a:	2301      	movs	r3, #1
 801560c:	602b      	str	r3, [r5, #0]
 801560e:	b17e      	cbz	r6, 8015630 <rmw_validate_node_name+0x84>
 8015610:	2300      	movs	r3, #0
 8015612:	4618      	mov	r0, r3
 8015614:	6033      	str	r3, [r6, #0]
 8015616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561a:	2302      	movs	r3, #2
 801561c:	602b      	str	r3, [r5, #0]
 801561e:	b13e      	cbz	r6, 8015630 <rmw_validate_node_name+0x84>
 8015620:	2000      	movs	r0, #0
 8015622:	6037      	str	r7, [r6, #0]
 8015624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015628:	2303      	movs	r3, #3
 801562a:	602b      	str	r3, [r5, #0]
 801562c:	2e00      	cmp	r6, #0
 801562e:	d1ef      	bne.n	8015610 <rmw_validate_node_name+0x64>
 8015630:	2000      	movs	r0, #0
 8015632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015636:	200b      	movs	r0, #11
 8015638:	4770      	bx	lr
 801563a:	200b      	movs	r0, #11
 801563c:	e7f2      	b.n	8015624 <rmw_validate_node_name+0x78>
 801563e:	2204      	movs	r2, #4
 8015640:	602a      	str	r2, [r5, #0]
 8015642:	2e00      	cmp	r6, #0
 8015644:	d0f4      	beq.n	8015630 <rmw_validate_node_name+0x84>
 8015646:	22fe      	movs	r2, #254	; 0xfe
 8015648:	4618      	mov	r0, r3
 801564a:	6032      	str	r2, [r6, #0]
 801564c:	e7ea      	b.n	8015624 <rmw_validate_node_name+0x78>
 801564e:	bf00      	nop
 8015650:	08025aac 	.word	0x08025aac

08015654 <rmw_node_name_validation_result_string>:
 8015654:	2804      	cmp	r0, #4
 8015656:	d803      	bhi.n	8015660 <rmw_node_name_validation_result_string+0xc>
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <rmw_node_name_validation_result_string+0x10>)
 801565a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801565e:	4770      	bx	lr
 8015660:	4801      	ldr	r0, [pc, #4]	; (8015668 <rmw_node_name_validation_result_string+0x14>)
 8015662:	4770      	bx	lr
 8015664:	08025380 	.word	0x08025380
 8015668:	08025294 	.word	0x08025294

0801566c <rmw_uros_set_custom_transport>:
 801566c:	b470      	push	{r4, r5, r6}
 801566e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8015672:	b162      	cbz	r2, 801568e <rmw_uros_set_custom_transport+0x22>
 8015674:	b15b      	cbz	r3, 801568e <rmw_uros_set_custom_transport+0x22>
 8015676:	b155      	cbz	r5, 801568e <rmw_uros_set_custom_transport+0x22>
 8015678:	b14e      	cbz	r6, 801568e <rmw_uros_set_custom_transport+0x22>
 801567a:	4c06      	ldr	r4, [pc, #24]	; (8015694 <rmw_uros_set_custom_transport+0x28>)
 801567c:	7020      	strb	r0, [r4, #0]
 801567e:	2000      	movs	r0, #0
 8015680:	6166      	str	r6, [r4, #20]
 8015682:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015686:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801568a:	bc70      	pop	{r4, r5, r6}
 801568c:	4770      	bx	lr
 801568e:	200b      	movs	r0, #11
 8015690:	bc70      	pop	{r4, r5, r6}
 8015692:	4770      	bx	lr
 8015694:	20012424 	.word	0x20012424

08015698 <rmw_init_options_init>:
 8015698:	b084      	sub	sp, #16
 801569a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801569c:	b083      	sub	sp, #12
 801569e:	ad09      	add	r5, sp, #36	; 0x24
 80156a0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80156a4:	b130      	cbz	r0, 80156b4 <rmw_init_options_init+0x1c>
 80156a6:	4604      	mov	r4, r0
 80156a8:	4628      	mov	r0, r5
 80156aa:	f7ff fcaf 	bl	801500c <rcutils_allocator_is_valid>
 80156ae:	b108      	cbz	r0, 80156b4 <rmw_init_options_init+0x1c>
 80156b0:	68a6      	ldr	r6, [r4, #8]
 80156b2:	b12e      	cbz	r6, 80156c0 <rmw_init_options_init+0x28>
 80156b4:	200b      	movs	r0, #11
 80156b6:	b003      	add	sp, #12
 80156b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156bc:	b004      	add	sp, #16
 80156be:	4770      	bx	lr
 80156c0:	2200      	movs	r2, #0
 80156c2:	2300      	movs	r3, #0
 80156c4:	f104 0c20 	add.w	ip, r4, #32
 80156c8:	f8df e098 	ldr.w	lr, [pc, #152]	; 8015764 <rmw_init_options_init+0xcc>
 80156cc:	466f      	mov	r7, sp
 80156ce:	e9c4 2300 	strd	r2, r3, [r4]
 80156d2:	4b20      	ldr	r3, [pc, #128]	; (8015754 <rmw_init_options_init+0xbc>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	60a3      	str	r3, [r4, #8]
 80156d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156de:	682b      	ldr	r3, [r5, #0]
 80156e0:	4638      	mov	r0, r7
 80156e2:	f8cc 3000 	str.w	r3, [ip]
 80156e6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80156ea:	60e6      	str	r6, [r4, #12]
 80156ec:	f7ff fec0 	bl	8015470 <rmw_get_default_security_options>
 80156f0:	f104 0310 	add.w	r3, r4, #16
 80156f4:	2203      	movs	r2, #3
 80156f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80156fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80156fe:	4816      	ldr	r0, [pc, #88]	; (8015758 <rmw_init_options_init+0xc0>)
 8015700:	4916      	ldr	r1, [pc, #88]	; (801575c <rmw_init_options_init+0xc4>)
 8015702:	7626      	strb	r6, [r4, #24]
 8015704:	f001 fa62 	bl	8016bcc <rmw_uxrce_init_init_options_impl_memory>
 8015708:	4813      	ldr	r0, [pc, #76]	; (8015758 <rmw_init_options_init+0xc0>)
 801570a:	f008 fc25 	bl	801df58 <get_memory>
 801570e:	b1f0      	cbz	r0, 801574e <rmw_init_options_init+0xb6>
 8015710:	4a13      	ldr	r2, [pc, #76]	; (8015760 <rmw_init_options_init+0xc8>)
 8015712:	6883      	ldr	r3, [r0, #8]
 8015714:	6851      	ldr	r1, [r2, #4]
 8015716:	6363      	str	r3, [r4, #52]	; 0x34
 8015718:	7810      	ldrb	r0, [r2, #0]
 801571a:	6159      	str	r1, [r3, #20]
 801571c:	68d1      	ldr	r1, [r2, #12]
 801571e:	7418      	strb	r0, [r3, #16]
 8015720:	61d9      	str	r1, [r3, #28]
 8015722:	6911      	ldr	r1, [r2, #16]
 8015724:	6219      	str	r1, [r3, #32]
 8015726:	6951      	ldr	r1, [r2, #20]
 8015728:	6892      	ldr	r2, [r2, #8]
 801572a:	6259      	str	r1, [r3, #36]	; 0x24
 801572c:	619a      	str	r2, [r3, #24]
 801572e:	f004 fb65 	bl	8019dfc <uxr_nanos>
 8015732:	f009 ffd7 	bl	801f6e4 <srand>
 8015736:	f00a f803 	bl	801f740 <rand>
 801573a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801573c:	6298      	str	r0, [r3, #40]	; 0x28
 801573e:	2800      	cmp	r0, #0
 8015740:	d0f9      	beq.n	8015736 <rmw_init_options_init+0x9e>
 8015742:	2000      	movs	r0, #0
 8015744:	b003      	add	sp, #12
 8015746:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801574a:	b004      	add	sp, #16
 801574c:	4770      	bx	lr
 801574e:	2001      	movs	r0, #1
 8015750:	e7b1      	b.n	80156b6 <rmw_init_options_init+0x1e>
 8015752:	bf00      	nop
 8015754:	08025a04 	.word	0x08025a04
 8015758:	20016e7c 	.word	0x20016e7c
 801575c:	20012718 	.word	0x20012718
 8015760:	20012424 	.word	0x20012424
 8015764:	08024d90 	.word	0x08024d90

08015768 <rmw_init_options_copy>:
 8015768:	2800      	cmp	r0, #0
 801576a:	d047      	beq.n	80157fc <rmw_init_options_copy+0x94>
 801576c:	b570      	push	{r4, r5, r6, lr}
 801576e:	460d      	mov	r5, r1
 8015770:	b149      	cbz	r1, 8015786 <rmw_init_options_copy+0x1e>
 8015772:	4604      	mov	r4, r0
 8015774:	6880      	ldr	r0, [r0, #8]
 8015776:	b120      	cbz	r0, 8015782 <rmw_init_options_copy+0x1a>
 8015778:	4b22      	ldr	r3, [pc, #136]	; (8015804 <rmw_init_options_copy+0x9c>)
 801577a:	6819      	ldr	r1, [r3, #0]
 801577c:	f7ea fd60 	bl	8000240 <strcmp>
 8015780:	bba8      	cbnz	r0, 80157ee <rmw_init_options_copy+0x86>
 8015782:	68ab      	ldr	r3, [r5, #8]
 8015784:	b11b      	cbz	r3, 801578e <rmw_init_options_copy+0x26>
 8015786:	f04f 0c0b 	mov.w	ip, #11
 801578a:	4660      	mov	r0, ip
 801578c:	bd70      	pop	{r4, r5, r6, pc}
 801578e:	4623      	mov	r3, r4
 8015790:	462a      	mov	r2, r5
 8015792:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015796:	f8d3 e000 	ldr.w	lr, [r3]
 801579a:	3310      	adds	r3, #16
 801579c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80157a0:	3210      	adds	r2, #16
 80157a2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80157a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80157aa:	42b3      	cmp	r3, r6
 80157ac:	f842 ec10 	str.w	lr, [r2, #-16]
 80157b0:	f842 cc0c 	str.w	ip, [r2, #-12]
 80157b4:	f842 0c08 	str.w	r0, [r2, #-8]
 80157b8:	f842 1c04 	str.w	r1, [r2, #-4]
 80157bc:	d1eb      	bne.n	8015796 <rmw_init_options_copy+0x2e>
 80157be:	6819      	ldr	r1, [r3, #0]
 80157c0:	685b      	ldr	r3, [r3, #4]
 80157c2:	4811      	ldr	r0, [pc, #68]	; (8015808 <rmw_init_options_copy+0xa0>)
 80157c4:	6011      	str	r1, [r2, #0]
 80157c6:	6053      	str	r3, [r2, #4]
 80157c8:	f008 fbc6 	bl	801df58 <get_memory>
 80157cc:	b198      	cbz	r0, 80157f6 <rmw_init_options_copy+0x8e>
 80157ce:	6883      	ldr	r3, [r0, #8]
 80157d0:	f04f 0c00 	mov.w	ip, #0
 80157d4:	636b      	str	r3, [r5, #52]	; 0x34
 80157d6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80157d8:	f103 0410 	add.w	r4, r3, #16
 80157dc:	3510      	adds	r5, #16
 80157de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80157e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80157ea:	4660      	mov	r0, ip
 80157ec:	bd70      	pop	{r4, r5, r6, pc}
 80157ee:	f04f 0c0c 	mov.w	ip, #12
 80157f2:	4660      	mov	r0, ip
 80157f4:	bd70      	pop	{r4, r5, r6, pc}
 80157f6:	f04f 0c01 	mov.w	ip, #1
 80157fa:	e7c6      	b.n	801578a <rmw_init_options_copy+0x22>
 80157fc:	f04f 0c0b 	mov.w	ip, #11
 8015800:	4660      	mov	r0, ip
 8015802:	4770      	bx	lr
 8015804:	08025a04 	.word	0x08025a04
 8015808:	20016e7c 	.word	0x20016e7c

0801580c <rmw_init_options_fini>:
 801580c:	b510      	push	{r4, lr}
 801580e:	b08e      	sub	sp, #56	; 0x38
 8015810:	b388      	cbz	r0, 8015876 <rmw_init_options_fini+0x6a>
 8015812:	4604      	mov	r4, r0
 8015814:	3020      	adds	r0, #32
 8015816:	f7ff fbf9 	bl	801500c <rcutils_allocator_is_valid>
 801581a:	b360      	cbz	r0, 8015876 <rmw_init_options_fini+0x6a>
 801581c:	68a0      	ldr	r0, [r4, #8]
 801581e:	b120      	cbz	r0, 801582a <rmw_init_options_fini+0x1e>
 8015820:	4b1a      	ldr	r3, [pc, #104]	; (801588c <rmw_init_options_fini+0x80>)
 8015822:	6819      	ldr	r1, [r3, #0]
 8015824:	f7ea fd0c 	bl	8000240 <strcmp>
 8015828:	bb68      	cbnz	r0, 8015886 <rmw_init_options_fini+0x7a>
 801582a:	4b19      	ldr	r3, [pc, #100]	; (8015890 <rmw_init_options_fini+0x84>)
 801582c:	6819      	ldr	r1, [r3, #0]
 801582e:	b331      	cbz	r1, 801587e <rmw_init_options_fini+0x72>
 8015830:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015832:	e001      	b.n	8015838 <rmw_init_options_fini+0x2c>
 8015834:	6849      	ldr	r1, [r1, #4]
 8015836:	b311      	cbz	r1, 801587e <rmw_init_options_fini+0x72>
 8015838:	688b      	ldr	r3, [r1, #8]
 801583a:	429a      	cmp	r2, r3
 801583c:	d1fa      	bne.n	8015834 <rmw_init_options_fini+0x28>
 801583e:	4814      	ldr	r0, [pc, #80]	; (8015890 <rmw_init_options_fini+0x84>)
 8015840:	f008 fb9a 	bl	801df78 <put_memory>
 8015844:	4668      	mov	r0, sp
 8015846:	f7ff fdff 	bl	8015448 <rmw_get_zero_initialized_init_options>
 801584a:	46ee      	mov	lr, sp
 801584c:	46a4      	mov	ip, r4
 801584e:	2400      	movs	r4, #0
 8015850:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015858:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801585c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015860:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015868:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801586c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015870:	4620      	mov	r0, r4
 8015872:	b00e      	add	sp, #56	; 0x38
 8015874:	bd10      	pop	{r4, pc}
 8015876:	240b      	movs	r4, #11
 8015878:	4620      	mov	r0, r4
 801587a:	b00e      	add	sp, #56	; 0x38
 801587c:	bd10      	pop	{r4, pc}
 801587e:	2401      	movs	r4, #1
 8015880:	4620      	mov	r0, r4
 8015882:	b00e      	add	sp, #56	; 0x38
 8015884:	bd10      	pop	{r4, pc}
 8015886:	240c      	movs	r4, #12
 8015888:	e7f2      	b.n	8015870 <rmw_init_options_fini+0x64>
 801588a:	bf00      	nop
 801588c:	08025a04 	.word	0x08025a04
 8015890:	20016e7c 	.word	0x20016e7c

08015894 <rmw_init>:
 8015894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015898:	b083      	sub	sp, #12
 801589a:	2800      	cmp	r0, #0
 801589c:	f000 80d3 	beq.w	8015a46 <rmw_init+0x1b2>
 80158a0:	460e      	mov	r6, r1
 80158a2:	2900      	cmp	r1, #0
 80158a4:	f000 80cf 	beq.w	8015a46 <rmw_init+0x1b2>
 80158a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80158aa:	4605      	mov	r5, r0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	f000 80ca 	beq.w	8015a46 <rmw_init+0x1b2>
 80158b2:	4b78      	ldr	r3, [pc, #480]	; (8015a94 <rmw_init+0x200>)
 80158b4:	6880      	ldr	r0, [r0, #8]
 80158b6:	681f      	ldr	r7, [r3, #0]
 80158b8:	b128      	cbz	r0, 80158c6 <rmw_init+0x32>
 80158ba:	4639      	mov	r1, r7
 80158bc:	f7ea fcc0 	bl	8000240 <strcmp>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	f040 80ca 	bne.w	8015a5a <rmw_init+0x1c6>
 80158c6:	4c74      	ldr	r4, [pc, #464]	; (8015a98 <rmw_init+0x204>)
 80158c8:	f04f 0800 	mov.w	r8, #0
 80158cc:	4973      	ldr	r1, [pc, #460]	; (8015a9c <rmw_init+0x208>)
 80158ce:	4874      	ldr	r0, [pc, #464]	; (8015aa0 <rmw_init+0x20c>)
 80158d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80158d4:	60b7      	str	r7, [r6, #8]
 80158d6:	e9c6 2300 	strd	r2, r3, [r6]
 80158da:	68eb      	ldr	r3, [r5, #12]
 80158dc:	2201      	movs	r2, #1
 80158de:	64b3      	str	r3, [r6, #72]	; 0x48
 80158e0:	f001 f914 	bl	8016b0c <rmw_uxrce_init_session_memory>
 80158e4:	4620      	mov	r0, r4
 80158e6:	2204      	movs	r2, #4
 80158e8:	496e      	ldr	r1, [pc, #440]	; (8015aa4 <rmw_init+0x210>)
 80158ea:	f001 f94f 	bl	8016b8c <rmw_uxrce_init_static_input_buffer_memory>
 80158ee:	486c      	ldr	r0, [pc, #432]	; (8015aa0 <rmw_init+0x20c>)
 80158f0:	f884 800d 	strb.w	r8, [r4, #13]
 80158f4:	f008 fb30 	bl	801df58 <get_memory>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	f000 80a9 	beq.w	8015a50 <rmw_init+0x1bc>
 80158fe:	6884      	ldr	r4, [r0, #8]
 8015900:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015902:	f104 0910 	add.w	r9, r4, #16
 8015906:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015908:	f890 c010 	ldrb.w	ip, [r0, #16]
 801590c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015910:	9101      	str	r1, [sp, #4]
 8015912:	4661      	mov	r1, ip
 8015914:	6a00      	ldr	r0, [r0, #32]
 8015916:	9000      	str	r0, [sp, #0]
 8015918:	4648      	mov	r0, r9
 801591a:	f002 fa19 	bl	8017d50 <uxr_set_custom_transport_callbacks>
 801591e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015922:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8015926:	4960      	ldr	r1, [pc, #384]	; (8015aa8 <rmw_init+0x214>)
 8015928:	4860      	ldr	r0, [pc, #384]	; (8015aac <rmw_init+0x218>)
 801592a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801592e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8015932:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8015936:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 801593a:	2201      	movs	r2, #1
 801593c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015940:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015944:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015948:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 801594c:	64f4      	str	r4, [r6, #76]	; 0x4c
 801594e:	f001 f8bd 	bl	8016acc <rmw_uxrce_init_node_memory>
 8015952:	2205      	movs	r2, #5
 8015954:	4956      	ldr	r1, [pc, #344]	; (8015ab0 <rmw_init+0x21c>)
 8015956:	4857      	ldr	r0, [pc, #348]	; (8015ab4 <rmw_init+0x220>)
 8015958:	f001 f898 	bl	8016a8c <rmw_uxrce_init_subscription_memory>
 801595c:	220a      	movs	r2, #10
 801595e:	4956      	ldr	r1, [pc, #344]	; (8015ab8 <rmw_init+0x224>)
 8015960:	4856      	ldr	r0, [pc, #344]	; (8015abc <rmw_init+0x228>)
 8015962:	f001 f873 	bl	8016a4c <rmw_uxrce_init_publisher_memory>
 8015966:	2201      	movs	r2, #1
 8015968:	4955      	ldr	r1, [pc, #340]	; (8015ac0 <rmw_init+0x22c>)
 801596a:	4856      	ldr	r0, [pc, #344]	; (8015ac4 <rmw_init+0x230>)
 801596c:	f001 f82e 	bl	80169cc <rmw_uxrce_init_service_memory>
 8015970:	2201      	movs	r2, #1
 8015972:	4955      	ldr	r1, [pc, #340]	; (8015ac8 <rmw_init+0x234>)
 8015974:	4855      	ldr	r0, [pc, #340]	; (8015acc <rmw_init+0x238>)
 8015976:	f001 f849 	bl	8016a0c <rmw_uxrce_init_client_memory>
 801597a:	220f      	movs	r2, #15
 801597c:	4954      	ldr	r1, [pc, #336]	; (8015ad0 <rmw_init+0x23c>)
 801597e:	4855      	ldr	r0, [pc, #340]	; (8015ad4 <rmw_init+0x240>)
 8015980:	f001 f8e4 	bl	8016b4c <rmw_uxrce_init_topic_memory>
 8015984:	2203      	movs	r2, #3
 8015986:	4954      	ldr	r1, [pc, #336]	; (8015ad8 <rmw_init+0x244>)
 8015988:	4854      	ldr	r0, [pc, #336]	; (8015adc <rmw_init+0x248>)
 801598a:	f001 f91f 	bl	8016bcc <rmw_uxrce_init_init_options_impl_memory>
 801598e:	2204      	movs	r2, #4
 8015990:	4953      	ldr	r1, [pc, #332]	; (8015ae0 <rmw_init+0x24c>)
 8015992:	4854      	ldr	r0, [pc, #336]	; (8015ae4 <rmw_init+0x250>)
 8015994:	f001 f93a 	bl	8016c0c <rmw_uxrce_init_wait_set_memory>
 8015998:	4953      	ldr	r1, [pc, #332]	; (8015ae8 <rmw_init+0x254>)
 801599a:	4854      	ldr	r0, [pc, #336]	; (8015aec <rmw_init+0x258>)
 801599c:	2204      	movs	r2, #4
 801599e:	f001 f955 	bl	8016c4c <rmw_uxrce_init_guard_condition_memory>
 80159a2:	4642      	mov	r2, r8
 80159a4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80159a6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80159a8:	f000 fff8 	bl	801699c <rmw_uxrce_transport_init>
 80159ac:	4607      	mov	r7, r0
 80159ae:	2800      	cmp	r0, #0
 80159b0:	d158      	bne.n	8015a64 <rmw_init+0x1d0>
 80159b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80159b4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80159b8:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80159bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80159be:	4628      	mov	r0, r5
 80159c0:	f002 fbf6 	bl	80181b0 <uxr_init_session>
 80159c4:	4622      	mov	r2, r4
 80159c6:	494a      	ldr	r1, [pc, #296]	; (8015af0 <rmw_init+0x25c>)
 80159c8:	4628      	mov	r0, r5
 80159ca:	f002 fc15 	bl	80181f8 <uxr_set_topic_callback>
 80159ce:	463a      	mov	r2, r7
 80159d0:	4948      	ldr	r1, [pc, #288]	; (8015af4 <rmw_init+0x260>)
 80159d2:	4628      	mov	r0, r5
 80159d4:	f002 fc0c 	bl	80181f0 <uxr_set_status_callback>
 80159d8:	463a      	mov	r2, r7
 80159da:	4947      	ldr	r1, [pc, #284]	; (8015af8 <rmw_init+0x264>)
 80159dc:	4628      	mov	r0, r5
 80159de:	f002 fc0f 	bl	8018200 <uxr_set_request_callback>
 80159e2:	463a      	mov	r2, r7
 80159e4:	4945      	ldr	r1, [pc, #276]	; (8015afc <rmw_init+0x268>)
 80159e6:	4628      	mov	r0, r5
 80159e8:	f002 fc0e 	bl	8018208 <uxr_set_reply_callback>
 80159ec:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80159f0:	2304      	movs	r3, #4
 80159f2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80159f6:	0092      	lsls	r2, r2, #2
 80159f8:	4628      	mov	r0, r5
 80159fa:	f002 fc45 	bl	8018288 <uxr_create_input_reliable_stream>
 80159fe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015a02:	2304      	movs	r3, #4
 8015a04:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015a08:	0092      	lsls	r2, r2, #2
 8015a0a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015a0e:	4628      	mov	r0, r5
 8015a10:	f002 fc10 	bl	8018234 <uxr_create_output_reliable_stream>
 8015a14:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f002 fc2f 	bl	801827c <uxr_create_input_best_effort_stream>
 8015a1e:	f241 3194 	movw	r1, #5012	; 0x1394
 8015a22:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015a26:	4628      	mov	r0, r5
 8015a28:	4421      	add	r1, r4
 8015a2a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015a2e:	f002 fbef 	bl	8018210 <uxr_create_output_best_effort_stream>
 8015a32:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015a36:	4628      	mov	r0, r5
 8015a38:	f003 f978 	bl	8018d2c <uxr_create_session>
 8015a3c:	b1f8      	cbz	r0, 8015a7e <rmw_init+0x1ea>
 8015a3e:	4638      	mov	r0, r7
 8015a40:	b003      	add	sp, #12
 8015a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a46:	270b      	movs	r7, #11
 8015a48:	4638      	mov	r0, r7
 8015a4a:	b003      	add	sp, #12
 8015a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a50:	2701      	movs	r7, #1
 8015a52:	4638      	mov	r0, r7
 8015a54:	b003      	add	sp, #12
 8015a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a5a:	270c      	movs	r7, #12
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	b003      	add	sp, #12
 8015a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a64:	4648      	mov	r0, r9
 8015a66:	f002 f9b1 	bl	8017dcc <uxr_close_custom_transport>
 8015a6a:	4621      	mov	r1, r4
 8015a6c:	480c      	ldr	r0, [pc, #48]	; (8015aa0 <rmw_init+0x20c>)
 8015a6e:	f008 fa83 	bl	801df78 <put_memory>
 8015a72:	4638      	mov	r0, r7
 8015a74:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015a78:	b003      	add	sp, #12
 8015a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a7e:	4648      	mov	r0, r9
 8015a80:	f002 f9a4 	bl	8017dcc <uxr_close_custom_transport>
 8015a84:	4621      	mov	r1, r4
 8015a86:	4806      	ldr	r0, [pc, #24]	; (8015aa0 <rmw_init+0x20c>)
 8015a88:	f008 fa76 	bl	801df78 <put_memory>
 8015a8c:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015a8e:	2701      	movs	r7, #1
 8015a90:	e7d5      	b.n	8015a3e <rmw_init+0x1aa>
 8015a92:	bf00      	nop
 8015a94:	08025a04 	.word	0x08025a04
 8015a98:	20016ecc 	.word	0x20016ecc
 8015a9c:	20013178 	.word	0x20013178
 8015aa0:	20016ebc 	.word	0x20016ebc
 8015aa4:	20014720 	.word	0x20014720
 8015aa8:	2001279c 	.word	0x2001279c
 8015aac:	20016e8c 	.word	0x20016e8c
 8015ab0:	20016820 	.word	0x20016820
 8015ab4:	20016edc 	.word	0x20016edc
 8015ab8:	20012840 	.word	0x20012840
 8015abc:	20016e9c 	.word	0x20016e9c
 8015ac0:	200130b0 	.word	0x200130b0
 8015ac4:	20016eac 	.word	0x20016eac
 8015ac8:	200125d0 	.word	0x200125d0
 8015acc:	200125bc 	.word	0x200125bc
 8015ad0:	20016c58 	.word	0x20016c58
 8015ad4:	20016eec 	.word	0x20016eec
 8015ad8:	20012718 	.word	0x20012718
 8015adc:	20016e7c 	.word	0x20016e7c
 8015ae0:	20016dfc 	.word	0x20016dfc
 8015ae4:	20016efc 	.word	0x20016efc
 8015ae8:	20012698 	.word	0x20012698
 8015aec:	20016e6c 	.word	0x20016e6c
 8015af0:	0801dd91 	.word	0x0801dd91
 8015af4:	0801dd89 	.word	0x0801dd89
 8015af8:	0801de29 	.word	0x0801de29
 8015afc:	0801dec5 	.word	0x0801dec5

08015b00 <rmw_context_fini>:
 8015b00:	4b17      	ldr	r3, [pc, #92]	; (8015b60 <rmw_context_fini+0x60>)
 8015b02:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015b04:	b570      	push	{r4, r5, r6, lr}
 8015b06:	681c      	ldr	r4, [r3, #0]
 8015b08:	4605      	mov	r5, r0
 8015b0a:	b334      	cbz	r4, 8015b5a <rmw_context_fini+0x5a>
 8015b0c:	2600      	movs	r6, #0
 8015b0e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015b12:	6902      	ldr	r2, [r0, #16]
 8015b14:	428a      	cmp	r2, r1
 8015b16:	d018      	beq.n	8015b4a <rmw_context_fini+0x4a>
 8015b18:	2c00      	cmp	r4, #0
 8015b1a:	d1f8      	bne.n	8015b0e <rmw_context_fini+0xe>
 8015b1c:	b189      	cbz	r1, 8015b42 <rmw_context_fini+0x42>
 8015b1e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015b22:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015b26:	789b      	ldrb	r3, [r3, #2]
 8015b28:	2b01      	cmp	r3, #1
 8015b2a:	bf14      	ite	ne
 8015b2c:	210a      	movne	r1, #10
 8015b2e:	2100      	moveq	r1, #0
 8015b30:	f003 f8d4 	bl	8018cdc <uxr_delete_session_retries>
 8015b34:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015b36:	f001 f8a9 	bl	8016c8c <rmw_uxrce_fini_session_memory>
 8015b3a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015b3c:	3010      	adds	r0, #16
 8015b3e:	f002 f945 	bl	8017dcc <uxr_close_custom_transport>
 8015b42:	2300      	movs	r3, #0
 8015b44:	4630      	mov	r0, r6
 8015b46:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015b48:	bd70      	pop	{r4, r5, r6, pc}
 8015b4a:	3018      	adds	r0, #24
 8015b4c:	f000 f89c 	bl	8015c88 <rmw_destroy_node>
 8015b50:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015b52:	4606      	mov	r6, r0
 8015b54:	2c00      	cmp	r4, #0
 8015b56:	d1da      	bne.n	8015b0e <rmw_context_fini+0xe>
 8015b58:	e7e0      	b.n	8015b1c <rmw_context_fini+0x1c>
 8015b5a:	4626      	mov	r6, r4
 8015b5c:	e7de      	b.n	8015b1c <rmw_context_fini+0x1c>
 8015b5e:	bf00      	nop
 8015b60:	20016e8c 	.word	0x20016e8c

08015b64 <create_node>:
 8015b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b68:	b083      	sub	sp, #12
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d064      	beq.n	8015c38 <create_node+0xd4>
 8015b6e:	4606      	mov	r6, r0
 8015b70:	4838      	ldr	r0, [pc, #224]	; (8015c54 <create_node+0xf0>)
 8015b72:	460f      	mov	r7, r1
 8015b74:	4690      	mov	r8, r2
 8015b76:	461d      	mov	r5, r3
 8015b78:	f008 f9ee 	bl	801df58 <get_memory>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	d05b      	beq.n	8015c38 <create_node+0xd4>
 8015b80:	6884      	ldr	r4, [r0, #8]
 8015b82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015b84:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015b88:	f104 0518 	add.w	r5, r4, #24
 8015b8c:	6123      	str	r3, [r4, #16]
 8015b8e:	f008 fa4b 	bl	801e028 <rmw_get_implementation_identifier>
 8015b92:	f8c4 9020 	str.w	r9, [r4, #32]
 8015b96:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	f7ea fbb0 	bl	8000300 <strlen>
 8015ba0:	1c42      	adds	r2, r0, #1
 8015ba2:	2a3c      	cmp	r2, #60	; 0x3c
 8015ba4:	d840      	bhi.n	8015c28 <create_node+0xc4>
 8015ba6:	4648      	mov	r0, r9
 8015ba8:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015bac:	4631      	mov	r1, r6
 8015bae:	f00b f98e 	bl	8020ece <memcpy>
 8015bb2:	4638      	mov	r0, r7
 8015bb4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015bb8:	f7ea fba2 	bl	8000300 <strlen>
 8015bbc:	1c42      	adds	r2, r0, #1
 8015bbe:	2a3c      	cmp	r2, #60	; 0x3c
 8015bc0:	d832      	bhi.n	8015c28 <create_node+0xc4>
 8015bc2:	4639      	mov	r1, r7
 8015bc4:	4648      	mov	r0, r9
 8015bc6:	f00b f982 	bl	8020ece <memcpy>
 8015bca:	6923      	ldr	r3, [r4, #16]
 8015bcc:	2101      	movs	r1, #1
 8015bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bd2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015bd6:	1842      	adds	r2, r0, r1
 8015bd8:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015bdc:	f002 f8fa 	bl	8017dd4 <uxr_object_id>
 8015be0:	6160      	str	r0, [r4, #20]
 8015be2:	783b      	ldrb	r3, [r7, #0]
 8015be4:	2b2f      	cmp	r3, #47	; 0x2f
 8015be6:	d12c      	bne.n	8015c42 <create_node+0xde>
 8015be8:	787b      	ldrb	r3, [r7, #1]
 8015bea:	bb53      	cbnz	r3, 8015c42 <create_node+0xde>
 8015bec:	4633      	mov	r3, r6
 8015bee:	4a1a      	ldr	r2, [pc, #104]	; (8015c58 <create_node+0xf4>)
 8015bf0:	213c      	movs	r1, #60	; 0x3c
 8015bf2:	481a      	ldr	r0, [pc, #104]	; (8015c5c <create_node+0xf8>)
 8015bf4:	f00a ff0e 	bl	8020a14 <sniprintf>
 8015bf8:	6920      	ldr	r0, [r4, #16]
 8015bfa:	2106      	movs	r1, #6
 8015bfc:	fa1f f388 	uxth.w	r3, r8
 8015c00:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015c04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c08:	9101      	str	r1, [sp, #4]
 8015c0a:	4914      	ldr	r1, [pc, #80]	; (8015c5c <create_node+0xf8>)
 8015c0c:	9100      	str	r1, [sp, #0]
 8015c0e:	6811      	ldr	r1, [r2, #0]
 8015c10:	6962      	ldr	r2, [r4, #20]
 8015c12:	f001 fe31 	bl	8017878 <uxr_buffer_create_participant_bin>
 8015c16:	4602      	mov	r2, r0
 8015c18:	6920      	ldr	r0, [r4, #16]
 8015c1a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015c1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015c22:	f001 f9b7 	bl	8016f94 <run_xrce_session>
 8015c26:	b918      	cbnz	r0, 8015c30 <create_node+0xcc>
 8015c28:	4628      	mov	r0, r5
 8015c2a:	2500      	movs	r5, #0
 8015c2c:	f001 f834 	bl	8016c98 <rmw_uxrce_fini_node_memory>
 8015c30:	4628      	mov	r0, r5
 8015c32:	b003      	add	sp, #12
 8015c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c38:	2500      	movs	r5, #0
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	b003      	add	sp, #12
 8015c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c42:	463b      	mov	r3, r7
 8015c44:	4a06      	ldr	r2, [pc, #24]	; (8015c60 <create_node+0xfc>)
 8015c46:	213c      	movs	r1, #60	; 0x3c
 8015c48:	9600      	str	r6, [sp, #0]
 8015c4a:	4804      	ldr	r0, [pc, #16]	; (8015c5c <create_node+0xf8>)
 8015c4c:	f00a fee2 	bl	8020a14 <sniprintf>
 8015c50:	e7d2      	b.n	8015bf8 <create_node+0x94>
 8015c52:	bf00      	nop
 8015c54:	20016e8c 	.word	0x20016e8c
 8015c58:	080253a4 	.word	0x080253a4
 8015c5c:	20012440 	.word	0x20012440
 8015c60:	08024da0 	.word	0x08024da0

08015c64 <rmw_create_node>:
 8015c64:	468c      	mov	ip, r1
 8015c66:	4611      	mov	r1, r2
 8015c68:	f1bc 0f00 	cmp.w	ip, #0
 8015c6c:	d00a      	beq.n	8015c84 <rmw_create_node+0x20>
 8015c6e:	f89c 3000 	ldrb.w	r3, [ip]
 8015c72:	b13b      	cbz	r3, 8015c84 <rmw_create_node+0x20>
 8015c74:	b132      	cbz	r2, 8015c84 <rmw_create_node+0x20>
 8015c76:	7813      	ldrb	r3, [r2, #0]
 8015c78:	b123      	cbz	r3, 8015c84 <rmw_create_node+0x20>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015c7e:	4660      	mov	r0, ip
 8015c80:	f7ff bf70 	b.w	8015b64 <create_node>
 8015c84:	2000      	movs	r0, #0
 8015c86:	4770      	bx	lr

08015c88 <rmw_destroy_node>:
 8015c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c8a:	b328      	cbz	r0, 8015cd8 <rmw_destroy_node+0x50>
 8015c8c:	4607      	mov	r7, r0
 8015c8e:	6800      	ldr	r0, [r0, #0]
 8015c90:	b120      	cbz	r0, 8015c9c <rmw_destroy_node+0x14>
 8015c92:	4b37      	ldr	r3, [pc, #220]	; (8015d70 <rmw_destroy_node+0xe8>)
 8015c94:	6819      	ldr	r1, [r3, #0]
 8015c96:	f7ea fad3 	bl	8000240 <strcmp>
 8015c9a:	b9e8      	cbnz	r0, 8015cd8 <rmw_destroy_node+0x50>
 8015c9c:	687d      	ldr	r5, [r7, #4]
 8015c9e:	b1dd      	cbz	r5, 8015cd8 <rmw_destroy_node+0x50>
 8015ca0:	4b34      	ldr	r3, [pc, #208]	; (8015d74 <rmw_destroy_node+0xec>)
 8015ca2:	681c      	ldr	r4, [r3, #0]
 8015ca4:	2c00      	cmp	r4, #0
 8015ca6:	d060      	beq.n	8015d6a <rmw_destroy_node+0xe2>
 8015ca8:	2600      	movs	r6, #0
 8015caa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015cae:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015cb2:	429d      	cmp	r5, r3
 8015cb4:	d013      	beq.n	8015cde <rmw_destroy_node+0x56>
 8015cb6:	2c00      	cmp	r4, #0
 8015cb8:	d1f7      	bne.n	8015caa <rmw_destroy_node+0x22>
 8015cba:	4b2f      	ldr	r3, [pc, #188]	; (8015d78 <rmw_destroy_node+0xf0>)
 8015cbc:	681c      	ldr	r4, [r3, #0]
 8015cbe:	b1c4      	cbz	r4, 8015cf2 <rmw_destroy_node+0x6a>
 8015cc0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015cc4:	6a0b      	ldr	r3, [r1, #32]
 8015cc6:	429d      	cmp	r5, r3
 8015cc8:	d1f9      	bne.n	8015cbe <rmw_destroy_node+0x36>
 8015cca:	317c      	adds	r1, #124	; 0x7c
 8015ccc:	4638      	mov	r0, r7
 8015cce:	f000 fdaf 	bl	8016830 <rmw_destroy_subscription>
 8015cd2:	2801      	cmp	r0, #1
 8015cd4:	4606      	mov	r6, r0
 8015cd6:	d1f2      	bne.n	8015cbe <rmw_destroy_node+0x36>
 8015cd8:	2601      	movs	r6, #1
 8015cda:	4630      	mov	r0, r6
 8015cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cde:	3184      	adds	r1, #132	; 0x84
 8015ce0:	4638      	mov	r0, r7
 8015ce2:	f000 f9b1 	bl	8016048 <rmw_destroy_publisher>
 8015ce6:	2801      	cmp	r0, #1
 8015ce8:	4606      	mov	r6, r0
 8015cea:	d0f5      	beq.n	8015cd8 <rmw_destroy_node+0x50>
 8015cec:	2c00      	cmp	r4, #0
 8015cee:	d1dc      	bne.n	8015caa <rmw_destroy_node+0x22>
 8015cf0:	e7e3      	b.n	8015cba <rmw_destroy_node+0x32>
 8015cf2:	4b22      	ldr	r3, [pc, #136]	; (8015d7c <rmw_destroy_node+0xf4>)
 8015cf4:	681c      	ldr	r4, [r3, #0]
 8015cf6:	b16c      	cbz	r4, 8015d14 <rmw_destroy_node+0x8c>
 8015cf8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015cfc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015cfe:	429d      	cmp	r5, r3
 8015d00:	d1f9      	bne.n	8015cf6 <rmw_destroy_node+0x6e>
 8015d02:	317c      	adds	r1, #124	; 0x7c
 8015d04:	4638      	mov	r0, r7
 8015d06:	f000 fc1d 	bl	8016544 <rmw_destroy_service>
 8015d0a:	2801      	cmp	r0, #1
 8015d0c:	4606      	mov	r6, r0
 8015d0e:	d0e3      	beq.n	8015cd8 <rmw_destroy_node+0x50>
 8015d10:	2c00      	cmp	r4, #0
 8015d12:	d1f1      	bne.n	8015cf8 <rmw_destroy_node+0x70>
 8015d14:	4b1a      	ldr	r3, [pc, #104]	; (8015d80 <rmw_destroy_node+0xf8>)
 8015d16:	681c      	ldr	r4, [r3, #0]
 8015d18:	b16c      	cbz	r4, 8015d36 <rmw_destroy_node+0xae>
 8015d1a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d1e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015d20:	429d      	cmp	r5, r3
 8015d22:	d1f9      	bne.n	8015d18 <rmw_destroy_node+0x90>
 8015d24:	317c      	adds	r1, #124	; 0x7c
 8015d26:	4638      	mov	r0, r7
 8015d28:	f008 f93a 	bl	801dfa0 <rmw_destroy_client>
 8015d2c:	2801      	cmp	r0, #1
 8015d2e:	4606      	mov	r6, r0
 8015d30:	d0d2      	beq.n	8015cd8 <rmw_destroy_node+0x50>
 8015d32:	2c00      	cmp	r4, #0
 8015d34:	d1f1      	bne.n	8015d1a <rmw_destroy_node+0x92>
 8015d36:	6928      	ldr	r0, [r5, #16]
 8015d38:	696a      	ldr	r2, [r5, #20]
 8015d3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015d3e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015d42:	6819      	ldr	r1, [r3, #0]
 8015d44:	f001 fd4c 	bl	80177e0 <uxr_buffer_delete_entity>
 8015d48:	4602      	mov	r2, r0
 8015d4a:	6928      	ldr	r0, [r5, #16]
 8015d4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015d50:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015d54:	f001 f91e 	bl	8016f94 <run_xrce_session>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	4638      	mov	r0, r7
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	bf08      	it	eq
 8015d60:	2602      	moveq	r6, #2
 8015d62:	f000 ff99 	bl	8016c98 <rmw_uxrce_fini_node_memory>
 8015d66:	4630      	mov	r0, r6
 8015d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d6a:	4626      	mov	r6, r4
 8015d6c:	e7a5      	b.n	8015cba <rmw_destroy_node+0x32>
 8015d6e:	bf00      	nop
 8015d70:	08025a04 	.word	0x08025a04
 8015d74:	20016e9c 	.word	0x20016e9c
 8015d78:	20016edc 	.word	0x20016edc
 8015d7c:	20016eac 	.word	0x20016eac
 8015d80:	200125bc 	.word	0x200125bc

08015d84 <rmw_node_get_graph_guard_condition>:
 8015d84:	6843      	ldr	r3, [r0, #4]
 8015d86:	6918      	ldr	r0, [r3, #16]
 8015d88:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop

08015d90 <flush_session>:
 8015d90:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8015d92:	f002 be59 	b.w	8018a48 <uxr_run_session_until_confirm_delivery>
 8015d96:	bf00      	nop

08015d98 <rmw_publish>:
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	d053      	beq.n	8015e44 <rmw_publish+0xac>
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	460d      	mov	r5, r1
 8015da0:	b08e      	sub	sp, #56	; 0x38
 8015da2:	2900      	cmp	r1, #0
 8015da4:	d04b      	beq.n	8015e3e <rmw_publish+0xa6>
 8015da6:	4604      	mov	r4, r0
 8015da8:	6800      	ldr	r0, [r0, #0]
 8015daa:	f001 fa05 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	d045      	beq.n	8015e3e <rmw_publish+0xa6>
 8015db2:	6866      	ldr	r6, [r4, #4]
 8015db4:	2e00      	cmp	r6, #0
 8015db6:	d042      	beq.n	8015e3e <rmw_publish+0xa6>
 8015db8:	69b4      	ldr	r4, [r6, #24]
 8015dba:	4628      	mov	r0, r5
 8015dbc:	6923      	ldr	r3, [r4, #16]
 8015dbe:	4798      	blx	r3
 8015dc0:	69f3      	ldr	r3, [r6, #28]
 8015dc2:	9005      	str	r0, [sp, #20]
 8015dc4:	b113      	cbz	r3, 8015dcc <rmw_publish+0x34>
 8015dc6:	a805      	add	r0, sp, #20
 8015dc8:	4798      	blx	r3
 8015dca:	9805      	ldr	r0, [sp, #20]
 8015dcc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015dd0:	691b      	ldr	r3, [r3, #16]
 8015dd2:	9000      	str	r0, [sp, #0]
 8015dd4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015dd8:	6972      	ldr	r2, [r6, #20]
 8015dda:	ab06      	add	r3, sp, #24
 8015ddc:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015dde:	f004 f8ad 	bl	8019f3c <uxr_prepare_output_stream>
 8015de2:	b1d8      	cbz	r0, 8015e1c <rmw_publish+0x84>
 8015de4:	68a3      	ldr	r3, [r4, #8]
 8015de6:	a906      	add	r1, sp, #24
 8015de8:	4628      	mov	r0, r5
 8015dea:	4798      	blx	r3
 8015dec:	6a33      	ldr	r3, [r6, #32]
 8015dee:	4604      	mov	r4, r0
 8015df0:	b10b      	cbz	r3, 8015df6 <rmw_publish+0x5e>
 8015df2:	a806      	add	r0, sp, #24
 8015df4:	4798      	blx	r3
 8015df6:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e00:	d022      	beq.n	8015e48 <rmw_publish+0xb0>
 8015e02:	6918      	ldr	r0, [r3, #16]
 8015e04:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8015e06:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e0a:	f002 fe1d 	bl	8018a48 <uxr_run_session_until_confirm_delivery>
 8015e0e:	4020      	ands	r0, r4
 8015e10:	b2c4      	uxtb	r4, r0
 8015e12:	f084 0001 	eor.w	r0, r4, #1
 8015e16:	b2c0      	uxtb	r0, r0
 8015e18:	b00e      	add	sp, #56	; 0x38
 8015e1a:	bd70      	pop	{r4, r5, r6, pc}
 8015e1c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e20:	6918      	ldr	r0, [r3, #16]
 8015e22:	9b05      	ldr	r3, [sp, #20]
 8015e24:	9602      	str	r6, [sp, #8]
 8015e26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e2a:	9300      	str	r3, [sp, #0]
 8015e2c:	4b09      	ldr	r3, [pc, #36]	; (8015e54 <rmw_publish+0xbc>)
 8015e2e:	9301      	str	r3, [sp, #4]
 8015e30:	ab06      	add	r3, sp, #24
 8015e32:	6972      	ldr	r2, [r6, #20]
 8015e34:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015e36:	f004 f8b1 	bl	8019f9c <uxr_prepare_output_stream_fragmented>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d1d2      	bne.n	8015de4 <rmw_publish+0x4c>
 8015e3e:	2001      	movs	r0, #1
 8015e40:	b00e      	add	sp, #56	; 0x38
 8015e42:	bd70      	pop	{r4, r5, r6, pc}
 8015e44:	2001      	movs	r0, #1
 8015e46:	4770      	bx	lr
 8015e48:	6918      	ldr	r0, [r3, #16]
 8015e4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e4e:	f002 fa41 	bl	80182d4 <uxr_flash_output_streams>
 8015e52:	e7de      	b.n	8015e12 <rmw_publish+0x7a>
 8015e54:	08015d91 	.word	0x08015d91

08015e58 <rmw_create_publisher>:
 8015e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e5c:	b087      	sub	sp, #28
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	f000 80d2 	beq.w	8016008 <rmw_create_publisher+0x1b0>
 8015e64:	460e      	mov	r6, r1
 8015e66:	2900      	cmp	r1, #0
 8015e68:	f000 80ce 	beq.w	8016008 <rmw_create_publisher+0x1b0>
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	6800      	ldr	r0, [r0, #0]
 8015e70:	4615      	mov	r5, r2
 8015e72:	461f      	mov	r7, r3
 8015e74:	f001 f9a0 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8015e78:	f080 0001 	eor.w	r0, r0, #1
 8015e7c:	b2c0      	uxtb	r0, r0
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	f040 80c2 	bne.w	8016008 <rmw_create_publisher+0x1b0>
 8015e84:	2d00      	cmp	r5, #0
 8015e86:	f000 80bf 	beq.w	8016008 <rmw_create_publisher+0x1b0>
 8015e8a:	782b      	ldrb	r3, [r5, #0]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	f000 80bb 	beq.w	8016008 <rmw_create_publisher+0x1b0>
 8015e92:	2f00      	cmp	r7, #0
 8015e94:	f000 80b8 	beq.w	8016008 <rmw_create_publisher+0x1b0>
 8015e98:	485e      	ldr	r0, [pc, #376]	; (8016014 <rmw_create_publisher+0x1bc>)
 8015e9a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015e9e:	f008 f85b 	bl	801df58 <get_memory>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	f000 80b0 	beq.w	8016008 <rmw_create_publisher+0x1b0>
 8015ea8:	6884      	ldr	r4, [r0, #8]
 8015eaa:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8015eae:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8015eb2:	f008 f8b9 	bl	801e028 <rmw_get_implementation_identifier>
 8015eb6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8015eba:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	f7ea fa1e 	bl	8000300 <strlen>
 8015ec4:	3001      	adds	r0, #1
 8015ec6:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8015eca:	283c      	cmp	r0, #60	; 0x3c
 8015ecc:	f200 808f 	bhi.w	8015fee <rmw_create_publisher+0x196>
 8015ed0:	462b      	mov	r3, r5
 8015ed2:	4a51      	ldr	r2, [pc, #324]	; (8016018 <rmw_create_publisher+0x1c0>)
 8015ed4:	213c      	movs	r1, #60	; 0x3c
 8015ed6:	4650      	mov	r0, sl
 8015ed8:	f00a fd9c 	bl	8020a14 <sniprintf>
 8015edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015ee0:	4639      	mov	r1, r7
 8015ee2:	2250      	movs	r2, #80	; 0x50
 8015ee4:	67e3      	str	r3, [r4, #124]	; 0x7c
 8015ee6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015eea:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8015eee:	f00a ffee 	bl	8020ece <memcpy>
 8015ef2:	7a3b      	ldrb	r3, [r7, #8]
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	4949      	ldr	r1, [pc, #292]	; (801601c <rmw_create_publisher+0x1c4>)
 8015ef8:	2b02      	cmp	r3, #2
 8015efa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015efe:	bf0c      	ite	eq
 8015f00:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8015f04:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8015f08:	67a3      	str	r3, [r4, #120]	; 0x78
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015f10:	f001 f960 	bl	80171d4 <get_message_typesupport_handle>
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d06a      	beq.n	8015fee <rmw_create_publisher+0x196>
 8015f18:	6842      	ldr	r2, [r0, #4]
 8015f1a:	61a2      	str	r2, [r4, #24]
 8015f1c:	2a00      	cmp	r2, #0
 8015f1e:	d066      	beq.n	8015fee <rmw_create_publisher+0x196>
 8015f20:	4629      	mov	r1, r5
 8015f22:	463b      	mov	r3, r7
 8015f24:	4648      	mov	r0, r9
 8015f26:	f008 f8af 	bl	801e088 <create_topic>
 8015f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d062      	beq.n	8015ff6 <rmw_create_publisher+0x19e>
 8015f30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f34:	2103      	movs	r1, #3
 8015f36:	2506      	movs	r5, #6
 8015f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f3c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8015f40:	1c42      	adds	r2, r0, #1
 8015f42:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8015f46:	f001 ff45 	bl	8017dd4 <uxr_object_id>
 8015f4a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015f4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f52:	6120      	str	r0, [r4, #16]
 8015f54:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8015f58:	6910      	ldr	r0, [r2, #16]
 8015f5a:	9500      	str	r5, [sp, #0]
 8015f5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015f60:	6819      	ldr	r1, [r3, #0]
 8015f62:	6922      	ldr	r2, [r4, #16]
 8015f64:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015f68:	f001 fcee 	bl	8017948 <uxr_buffer_create_publisher_bin>
 8015f6c:	4602      	mov	r2, r0
 8015f6e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015f72:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015f76:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015f7a:	f001 f80b 	bl	8016f94 <run_xrce_session>
 8015f7e:	b3b0      	cbz	r0, 8015fee <rmw_create_publisher+0x196>
 8015f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f84:	2105      	movs	r1, #5
 8015f86:	f10d 0a10 	add.w	sl, sp, #16
 8015f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f8e:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8015f92:	1c42      	adds	r2, r0, #1
 8015f94:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8015f98:	f001 ff1c 	bl	8017dd4 <uxr_object_id>
 8015f9c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015fa0:	4639      	mov	r1, r7
 8015fa2:	6160      	str	r0, [r4, #20]
 8015fa4:	691e      	ldr	r6, [r3, #16]
 8015fa6:	4650      	mov	r0, sl
 8015fa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fac:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8015fb0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8015fb4:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8015fb8:	f001 f808 	bl	8016fcc <convert_qos_profile>
 8015fbc:	9503      	str	r5, [sp, #12]
 8015fbe:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015fc2:	9001      	str	r0, [sp, #4]
 8015fc4:	4630      	mov	r0, r6
 8015fc6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015fca:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015fce:	9300      	str	r3, [sp, #0]
 8015fd0:	6839      	ldr	r1, [r7, #0]
 8015fd2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015fd6:	f001 fd17 	bl	8017a08 <uxr_buffer_create_datawriter_bin>
 8015fda:	4602      	mov	r2, r0
 8015fdc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015fe0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015fe4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015fe8:	f000 ffd4 	bl	8016f94 <run_xrce_session>
 8015fec:	b970      	cbnz	r0, 801600c <rmw_create_publisher+0x1b4>
 8015fee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015ff0:	b108      	cbz	r0, 8015ff6 <rmw_create_publisher+0x19e>
 8015ff2:	f000 fec1 	bl	8016d78 <rmw_uxrce_fini_topic_memory>
 8015ff6:	4640      	mov	r0, r8
 8015ff8:	f04f 0800 	mov.w	r8, #0
 8015ffc:	f000 fe64 	bl	8016cc8 <rmw_uxrce_fini_publisher_memory>
 8016000:	4640      	mov	r0, r8
 8016002:	b007      	add	sp, #28
 8016004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016008:	f04f 0800 	mov.w	r8, #0
 801600c:	4640      	mov	r0, r8
 801600e:	b007      	add	sp, #28
 8016010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016014:	20016e9c 	.word	0x20016e9c
 8016018:	080253a4 	.word	0x080253a4
 801601c:	0802465c 	.word	0x0802465c

08016020 <rmw_publisher_get_actual_qos>:
 8016020:	b178      	cbz	r0, 8016042 <rmw_publisher_get_actual_qos+0x22>
 8016022:	b510      	push	{r4, lr}
 8016024:	fab1 f481 	clz	r4, r1
 8016028:	0964      	lsrs	r4, r4, #5
 801602a:	b141      	cbz	r1, 801603e <rmw_publisher_get_actual_qos+0x1e>
 801602c:	6843      	ldr	r3, [r0, #4]
 801602e:	2250      	movs	r2, #80	; 0x50
 8016030:	4608      	mov	r0, r1
 8016032:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016036:	f00a ff4a 	bl	8020ece <memcpy>
 801603a:	4620      	mov	r0, r4
 801603c:	bd10      	pop	{r4, pc}
 801603e:	200b      	movs	r0, #11
 8016040:	bd10      	pop	{r4, pc}
 8016042:	200b      	movs	r0, #11
 8016044:	4770      	bx	lr
 8016046:	bf00      	nop

08016048 <rmw_destroy_publisher>:
 8016048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801604c:	b128      	cbz	r0, 801605a <rmw_destroy_publisher+0x12>
 801604e:	4604      	mov	r4, r0
 8016050:	6800      	ldr	r0, [r0, #0]
 8016052:	460d      	mov	r5, r1
 8016054:	f001 f8b0 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8016058:	b918      	cbnz	r0, 8016062 <rmw_destroy_publisher+0x1a>
 801605a:	2401      	movs	r4, #1
 801605c:	4620      	mov	r0, r4
 801605e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016062:	6863      	ldr	r3, [r4, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d0f8      	beq.n	801605a <rmw_destroy_publisher+0x12>
 8016068:	fab5 f485 	clz	r4, r5
 801606c:	0964      	lsrs	r4, r4, #5
 801606e:	2d00      	cmp	r5, #0
 8016070:	d0f3      	beq.n	801605a <rmw_destroy_publisher+0x12>
 8016072:	6828      	ldr	r0, [r5, #0]
 8016074:	f001 f8a0 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8016078:	2800      	cmp	r0, #0
 801607a:	d0ee      	beq.n	801605a <rmw_destroy_publisher+0x12>
 801607c:	686e      	ldr	r6, [r5, #4]
 801607e:	2e00      	cmp	r6, #0
 8016080:	d0eb      	beq.n	801605a <rmw_destroy_publisher+0x12>
 8016082:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8016084:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016088:	f008 f84e 	bl	801e128 <destroy_topic>
 801608c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016090:	6972      	ldr	r2, [r6, #20]
 8016092:	6918      	ldr	r0, [r3, #16]
 8016094:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016098:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801609c:	6819      	ldr	r1, [r3, #0]
 801609e:	f001 fb9f 	bl	80177e0 <uxr_buffer_delete_entity>
 80160a2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80160a6:	4680      	mov	r8, r0
 80160a8:	6932      	ldr	r2, [r6, #16]
 80160aa:	6918      	ldr	r0, [r3, #16]
 80160ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80160b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160b4:	6819      	ldr	r1, [r3, #0]
 80160b6:	f001 fb93 	bl	80177e0 <uxr_buffer_delete_entity>
 80160ba:	4606      	mov	r6, r0
 80160bc:	6938      	ldr	r0, [r7, #16]
 80160be:	4642      	mov	r2, r8
 80160c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80160c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80160c8:	f000 ff64 	bl	8016f94 <run_xrce_session>
 80160cc:	693f      	ldr	r7, [r7, #16]
 80160ce:	4632      	mov	r2, r6
 80160d0:	4606      	mov	r6, r0
 80160d2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80160d6:	4638      	mov	r0, r7
 80160d8:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80160dc:	f000 ff5a 	bl	8016f94 <run_xrce_session>
 80160e0:	b126      	cbz	r6, 80160ec <rmw_destroy_publisher+0xa4>
 80160e2:	b118      	cbz	r0, 80160ec <rmw_destroy_publisher+0xa4>
 80160e4:	4628      	mov	r0, r5
 80160e6:	f000 fdef 	bl	8016cc8 <rmw_uxrce_fini_publisher_memory>
 80160ea:	e7b7      	b.n	801605c <rmw_destroy_publisher+0x14>
 80160ec:	2402      	movs	r4, #2
 80160ee:	e7f9      	b.n	80160e4 <rmw_destroy_publisher+0x9c>

080160f0 <rmw_send_request>:
 80160f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160f4:	4604      	mov	r4, r0
 80160f6:	6800      	ldr	r0, [r0, #0]
 80160f8:	b08b      	sub	sp, #44	; 0x2c
 80160fa:	460e      	mov	r6, r1
 80160fc:	4615      	mov	r5, r2
 80160fe:	b128      	cbz	r0, 801610c <rmw_send_request+0x1c>
 8016100:	4b21      	ldr	r3, [pc, #132]	; (8016188 <rmw_send_request+0x98>)
 8016102:	6819      	ldr	r1, [r3, #0]
 8016104:	f7ea f89c 	bl	8000240 <strcmp>
 8016108:	2800      	cmp	r0, #0
 801610a:	d139      	bne.n	8016180 <rmw_send_request+0x90>
 801610c:	6864      	ldr	r4, [r4, #4]
 801610e:	2700      	movs	r7, #0
 8016110:	6963      	ldr	r3, [r4, #20]
 8016112:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8016116:	689b      	ldr	r3, [r3, #8]
 8016118:	4798      	blx	r3
 801611a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801611e:	4630      	mov	r0, r6
 8016120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016124:	4798      	blx	r3
 8016126:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801612a:	9000      	str	r0, [sp, #0]
 801612c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016130:	6922      	ldr	r2, [r4, #16]
 8016132:	ab02      	add	r3, sp, #8
 8016134:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8016136:	f003 ff01 	bl	8019f3c <uxr_prepare_output_stream>
 801613a:	e9c5 0700 	strd	r0, r7, [r5]
 801613e:	b198      	cbz	r0, 8016168 <rmw_send_request+0x78>
 8016140:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016144:	a902      	add	r1, sp, #8
 8016146:	4630      	mov	r0, r6
 8016148:	4798      	blx	r3
 801614a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801614e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016152:	2b01      	cmp	r3, #1
 8016154:	d00c      	beq.n	8016170 <rmw_send_request+0x80>
 8016156:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8016158:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801615c:	f002 fc74 	bl	8018a48 <uxr_run_session_until_confirm_delivery>
 8016160:	4638      	mov	r0, r7
 8016162:	b00b      	add	sp, #44	; 0x2c
 8016164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016168:	2001      	movs	r0, #1
 801616a:	b00b      	add	sp, #44	; 0x2c
 801616c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016170:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016174:	f002 f8ae 	bl	80182d4 <uxr_flash_output_streams>
 8016178:	4638      	mov	r0, r7
 801617a:	b00b      	add	sp, #44	; 0x2c
 801617c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016180:	200c      	movs	r0, #12
 8016182:	b00b      	add	sp, #44	; 0x2c
 8016184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016188:	08025a04 	.word	0x08025a04

0801618c <rmw_take_request>:
 801618c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016190:	4605      	mov	r5, r0
 8016192:	6800      	ldr	r0, [r0, #0]
 8016194:	b089      	sub	sp, #36	; 0x24
 8016196:	460c      	mov	r4, r1
 8016198:	4690      	mov	r8, r2
 801619a:	461e      	mov	r6, r3
 801619c:	b128      	cbz	r0, 80161aa <rmw_take_request+0x1e>
 801619e:	4b28      	ldr	r3, [pc, #160]	; (8016240 <rmw_take_request+0xb4>)
 80161a0:	6819      	ldr	r1, [r3, #0]
 80161a2:	f7ea f84d 	bl	8000240 <strcmp>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d146      	bne.n	8016238 <rmw_take_request+0xac>
 80161aa:	b10e      	cbz	r6, 80161b0 <rmw_take_request+0x24>
 80161ac:	2300      	movs	r3, #0
 80161ae:	7033      	strb	r3, [r6, #0]
 80161b0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80161b4:	f000 fe70 	bl	8016e98 <rmw_uxrce_clean_expired_static_input_buffer>
 80161b8:	4648      	mov	r0, r9
 80161ba:	f000 fe43 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 80161be:	4607      	mov	r7, r0
 80161c0:	b3b0      	cbz	r0, 8016230 <rmw_take_request+0xa4>
 80161c2:	6885      	ldr	r5, [r0, #8]
 80161c4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80161c8:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 80161cc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80161d0:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80161d4:	7423      	strb	r3, [r4, #16]
 80161d6:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 80161da:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 80161de:	f8a4 2011 	strh.w	r2, [r4, #17]
 80161e2:	74e3      	strb	r3, [r4, #19]
 80161e4:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 80161e8:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 80161ec:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 80161f0:	6161      	str	r1, [r4, #20]
 80161f2:	61a2      	str	r2, [r4, #24]
 80161f4:	61e3      	str	r3, [r4, #28]
 80161f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80161fa:	689b      	ldr	r3, [r3, #8]
 80161fc:	4798      	blx	r3
 80161fe:	6844      	ldr	r4, [r0, #4]
 8016200:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8016204:	f105 0110 	add.w	r1, r5, #16
 8016208:	4668      	mov	r0, sp
 801620a:	f7fd f829 	bl	8013260 <ucdr_init_buffer>
 801620e:	4641      	mov	r1, r8
 8016210:	68e3      	ldr	r3, [r4, #12]
 8016212:	4668      	mov	r0, sp
 8016214:	4798      	blx	r3
 8016216:	4639      	mov	r1, r7
 8016218:	4604      	mov	r4, r0
 801621a:	480a      	ldr	r0, [pc, #40]	; (8016244 <rmw_take_request+0xb8>)
 801621c:	f007 feac 	bl	801df78 <put_memory>
 8016220:	b106      	cbz	r6, 8016224 <rmw_take_request+0x98>
 8016222:	7034      	strb	r4, [r6, #0]
 8016224:	f084 0001 	eor.w	r0, r4, #1
 8016228:	b2c0      	uxtb	r0, r0
 801622a:	b009      	add	sp, #36	; 0x24
 801622c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016230:	2001      	movs	r0, #1
 8016232:	b009      	add	sp, #36	; 0x24
 8016234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016238:	200c      	movs	r0, #12
 801623a:	b009      	add	sp, #36	; 0x24
 801623c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016240:	08025a04 	.word	0x08025a04
 8016244:	20016ecc 	.word	0x20016ecc

08016248 <rmw_send_response>:
 8016248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801624a:	4605      	mov	r5, r0
 801624c:	6800      	ldr	r0, [r0, #0]
 801624e:	b091      	sub	sp, #68	; 0x44
 8016250:	460c      	mov	r4, r1
 8016252:	4616      	mov	r6, r2
 8016254:	b128      	cbz	r0, 8016262 <rmw_send_response+0x1a>
 8016256:	4b29      	ldr	r3, [pc, #164]	; (80162fc <rmw_send_response+0xb4>)
 8016258:	6819      	ldr	r1, [r3, #0]
 801625a:	f7e9 fff1 	bl	8000240 <strcmp>
 801625e:	2800      	cmp	r0, #0
 8016260:	d141      	bne.n	80162e6 <rmw_send_response+0x9e>
 8016262:	686d      	ldr	r5, [r5, #4]
 8016264:	68a1      	ldr	r1, [r4, #8]
 8016266:	6860      	ldr	r0, [r4, #4]
 8016268:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801626a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801626e:	9307      	str	r3, [sp, #28]
 8016270:	4623      	mov	r3, r4
 8016272:	9206      	str	r2, [sp, #24]
 8016274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016278:	789b      	ldrb	r3, [r3, #2]
 801627a:	f88d 2017 	strb.w	r2, [sp, #23]
 801627e:	f88d 3016 	strb.w	r3, [sp, #22]
 8016282:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016286:	68e2      	ldr	r2, [r4, #12]
 8016288:	f8ad 3014 	strh.w	r3, [sp, #20]
 801628c:	ab02      	add	r3, sp, #8
 801628e:	696c      	ldr	r4, [r5, #20]
 8016290:	c307      	stmia	r3!, {r0, r1, r2}
 8016292:	68e3      	ldr	r3, [r4, #12]
 8016294:	4798      	blx	r3
 8016296:	6844      	ldr	r4, [r0, #4]
 8016298:	4630      	mov	r0, r6
 801629a:	6923      	ldr	r3, [r4, #16]
 801629c:	4798      	blx	r3
 801629e:	f100 0318 	add.w	r3, r0, #24
 80162a2:	6938      	ldr	r0, [r7, #16]
 80162a4:	9300      	str	r3, [sp, #0]
 80162a6:	ab08      	add	r3, sp, #32
 80162a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80162ac:	692a      	ldr	r2, [r5, #16]
 80162ae:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80162b0:	f003 fe44 	bl	8019f3c <uxr_prepare_output_stream>
 80162b4:	b910      	cbnz	r0, 80162bc <rmw_send_response+0x74>
 80162b6:	2001      	movs	r0, #1
 80162b8:	b011      	add	sp, #68	; 0x44
 80162ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162bc:	a902      	add	r1, sp, #8
 80162be:	a808      	add	r0, sp, #32
 80162c0:	f004 ffa8 	bl	801b214 <uxr_serialize_SampleIdentity>
 80162c4:	68a3      	ldr	r3, [r4, #8]
 80162c6:	a908      	add	r1, sp, #32
 80162c8:	4630      	mov	r0, r6
 80162ca:	4798      	blx	r3
 80162cc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80162d0:	6938      	ldr	r0, [r7, #16]
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d00a      	beq.n	80162ec <rmw_send_response+0xa4>
 80162d6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80162d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80162dc:	f002 fbb4 	bl	8018a48 <uxr_run_session_until_confirm_delivery>
 80162e0:	2000      	movs	r0, #0
 80162e2:	b011      	add	sp, #68	; 0x44
 80162e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162e6:	200c      	movs	r0, #12
 80162e8:	b011      	add	sp, #68	; 0x44
 80162ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80162f0:	f001 fff0 	bl	80182d4 <uxr_flash_output_streams>
 80162f4:	2000      	movs	r0, #0
 80162f6:	b011      	add	sp, #68	; 0x44
 80162f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162fa:	bf00      	nop
 80162fc:	08025a04 	.word	0x08025a04

08016300 <rmw_take_response>:
 8016300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016304:	4604      	mov	r4, r0
 8016306:	6800      	ldr	r0, [r0, #0]
 8016308:	b088      	sub	sp, #32
 801630a:	460f      	mov	r7, r1
 801630c:	4690      	mov	r8, r2
 801630e:	461d      	mov	r5, r3
 8016310:	b120      	cbz	r0, 801631c <rmw_take_response+0x1c>
 8016312:	4b1d      	ldr	r3, [pc, #116]	; (8016388 <rmw_take_response+0x88>)
 8016314:	6819      	ldr	r1, [r3, #0]
 8016316:	f7e9 ff93 	bl	8000240 <strcmp>
 801631a:	bb68      	cbnz	r0, 8016378 <rmw_take_response+0x78>
 801631c:	b10d      	cbz	r5, 8016322 <rmw_take_response+0x22>
 801631e:	2300      	movs	r3, #0
 8016320:	702b      	strb	r3, [r5, #0]
 8016322:	6864      	ldr	r4, [r4, #4]
 8016324:	f000 fdb8 	bl	8016e98 <rmw_uxrce_clean_expired_static_input_buffer>
 8016328:	4620      	mov	r0, r4
 801632a:	f000 fd8b 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 801632e:	4606      	mov	r6, r0
 8016330:	b330      	cbz	r0, 8016380 <rmw_take_response+0x80>
 8016332:	6963      	ldr	r3, [r4, #20]
 8016334:	6884      	ldr	r4, [r0, #8]
 8016336:	68db      	ldr	r3, [r3, #12]
 8016338:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801633c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016340:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8016344:	4798      	blx	r3
 8016346:	6847      	ldr	r7, [r0, #4]
 8016348:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801634c:	f104 0110 	add.w	r1, r4, #16
 8016350:	4668      	mov	r0, sp
 8016352:	f7fc ff85 	bl	8013260 <ucdr_init_buffer>
 8016356:	4641      	mov	r1, r8
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	4668      	mov	r0, sp
 801635c:	4798      	blx	r3
 801635e:	4631      	mov	r1, r6
 8016360:	4604      	mov	r4, r0
 8016362:	480a      	ldr	r0, [pc, #40]	; (801638c <rmw_take_response+0x8c>)
 8016364:	f007 fe08 	bl	801df78 <put_memory>
 8016368:	b105      	cbz	r5, 801636c <rmw_take_response+0x6c>
 801636a:	702c      	strb	r4, [r5, #0]
 801636c:	f084 0001 	eor.w	r0, r4, #1
 8016370:	b2c0      	uxtb	r0, r0
 8016372:	b008      	add	sp, #32
 8016374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016378:	200c      	movs	r0, #12
 801637a:	b008      	add	sp, #32
 801637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016380:	2001      	movs	r0, #1
 8016382:	b008      	add	sp, #32
 8016384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016388:	08025a04 	.word	0x08025a04
 801638c:	20016ecc 	.word	0x20016ecc

08016390 <rmw_create_service>:
 8016390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016394:	b091      	sub	sp, #68	; 0x44
 8016396:	2900      	cmp	r1, #0
 8016398:	f000 80bb 	beq.w	8016512 <rmw_create_service+0x182>
 801639c:	4606      	mov	r6, r0
 801639e:	2800      	cmp	r0, #0
 80163a0:	f000 80b7 	beq.w	8016512 <rmw_create_service+0x182>
 80163a4:	4614      	mov	r4, r2
 80163a6:	6800      	ldr	r0, [r0, #0]
 80163a8:	4689      	mov	r9, r1
 80163aa:	461d      	mov	r5, r3
 80163ac:	f000 ff04 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 80163b0:	2c00      	cmp	r4, #0
 80163b2:	f000 80ae 	beq.w	8016512 <rmw_create_service+0x182>
 80163b6:	f080 0001 	eor.w	r0, r0, #1
 80163ba:	b2c0      	uxtb	r0, r0
 80163bc:	2800      	cmp	r0, #0
 80163be:	f040 80a8 	bne.w	8016512 <rmw_create_service+0x182>
 80163c2:	7823      	ldrb	r3, [r4, #0]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	f000 80a4 	beq.w	8016512 <rmw_create_service+0x182>
 80163ca:	2d00      	cmp	r5, #0
 80163cc:	f000 80a1 	beq.w	8016512 <rmw_create_service+0x182>
 80163d0:	4856      	ldr	r0, [pc, #344]	; (801652c <rmw_create_service+0x19c>)
 80163d2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80163d6:	f007 fdbf 	bl	801df58 <get_memory>
 80163da:	4606      	mov	r6, r0
 80163dc:	2800      	cmp	r0, #0
 80163de:	f000 8099 	beq.w	8016514 <rmw_create_service+0x184>
 80163e2:	6887      	ldr	r7, [r0, #8]
 80163e4:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 80163e8:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80163ec:	f007 fe1c 	bl	801e028 <rmw_get_implementation_identifier>
 80163f0:	67f8      	str	r0, [r7, #124]	; 0x7c
 80163f2:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80163f6:	4620      	mov	r0, r4
 80163f8:	f7e9 ff82 	bl	8000300 <strlen>
 80163fc:	1c42      	adds	r2, r0, #1
 80163fe:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8016402:	2a3c      	cmp	r2, #60	; 0x3c
 8016404:	f200 808a 	bhi.w	801651c <rmw_create_service+0x18c>
 8016408:	4621      	mov	r1, r4
 801640a:	4650      	mov	r0, sl
 801640c:	f00a fd5f 	bl	8020ece <memcpy>
 8016410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016414:	4629      	mov	r1, r5
 8016416:	2250      	movs	r2, #80	; 0x50
 8016418:	f107 0020 	add.w	r0, r7, #32
 801641c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8016420:	677b      	str	r3, [r7, #116]	; 0x74
 8016422:	f00a fd54 	bl	8020ece <memcpy>
 8016426:	4648      	mov	r0, r9
 8016428:	4941      	ldr	r1, [pc, #260]	; (8016530 <rmw_create_service+0x1a0>)
 801642a:	f000 fedf 	bl	80171ec <get_service_typesupport_handle>
 801642e:	2800      	cmp	r0, #0
 8016430:	d074      	beq.n	801651c <rmw_create_service+0x18c>
 8016432:	6843      	ldr	r3, [r0, #4]
 8016434:	617b      	str	r3, [r7, #20]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d070      	beq.n	801651c <rmw_create_service+0x18c>
 801643a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801643e:	2108      	movs	r1, #8
 8016440:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8016538 <rmw_create_service+0x1a8>
 8016444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016448:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801653c <rmw_create_service+0x1ac>
 801644c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8016450:	1c42      	adds	r2, r0, #1
 8016452:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8016456:	f001 fcbd 	bl	8017dd4 <uxr_object_id>
 801645a:	2364      	movs	r3, #100	; 0x64
 801645c:	6138      	str	r0, [r7, #16]
 801645e:	4652      	mov	r2, sl
 8016460:	4649      	mov	r1, r9
 8016462:	6978      	ldr	r0, [r7, #20]
 8016464:	f000 fdfc 	bl	8017060 <generate_service_types>
 8016468:	2800      	cmp	r0, #0
 801646a:	d057      	beq.n	801651c <rmw_create_service+0x18c>
 801646c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8016540 <rmw_create_service+0x1b0>
 8016470:	233c      	movs	r3, #60	; 0x3c
 8016472:	4a30      	ldr	r2, [pc, #192]	; (8016534 <rmw_create_service+0x1a4>)
 8016474:	4620      	mov	r0, r4
 8016476:	4659      	mov	r1, fp
 8016478:	f000 fdc0 	bl	8016ffc <generate_service_topics>
 801647c:	2800      	cmp	r0, #0
 801647e:	d04d      	beq.n	801651c <rmw_create_service+0x18c>
 8016480:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016484:	a80c      	add	r0, sp, #48	; 0x30
 8016486:	4629      	mov	r1, r5
 8016488:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801648c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016490:	f000 fd9c 	bl	8016fcc <convert_qos_profile>
 8016494:	4a27      	ldr	r2, [pc, #156]	; (8016534 <rmw_create_service+0x1a4>)
 8016496:	a80c      	add	r0, sp, #48	; 0x30
 8016498:	9400      	str	r4, [sp, #0]
 801649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801649c:	e9cd b203 	strd	fp, r2, [sp, #12]
 80164a0:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80164a4:	c803      	ldmia	r0, {r0, r1}
 80164a6:	9a08      	ldr	r2, [sp, #32]
 80164a8:	9005      	str	r0, [sp, #20]
 80164aa:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80164ae:	2306      	movs	r3, #6
 80164b0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80164b4:	9307      	str	r3, [sp, #28]
 80164b6:	6811      	ldr	r1, [r2, #0]
 80164b8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80164bc:	693a      	ldr	r2, [r7, #16]
 80164be:	f001 fb91 	bl	8017be4 <uxr_buffer_create_replier_bin>
 80164c2:	4602      	mov	r2, r0
 80164c4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80164c8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80164cc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80164d0:	f000 fd60 	bl	8016f94 <run_xrce_session>
 80164d4:	b310      	cbz	r0, 801651c <rmw_create_service+0x18c>
 80164d6:	7a2b      	ldrb	r3, [r5, #8]
 80164d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164dc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	920e      	str	r2, [sp, #56]	; 0x38
 80164e4:	f04f 0200 	mov.w	r2, #0
 80164e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80164ea:	bf0c      	ite	eq
 80164ec:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 80164f0:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 80164f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80164f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80164fa:	ab0e      	add	r3, sp, #56	; 0x38
 80164fc:	673a      	str	r2, [r7, #112]	; 0x70
 80164fe:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016506:	6811      	ldr	r1, [r2, #0]
 8016508:	693a      	ldr	r2, [r7, #16]
 801650a:	f001 fc93 	bl	8017e34 <uxr_buffer_request_data>
 801650e:	8338      	strh	r0, [r7, #24]
 8016510:	e000      	b.n	8016514 <rmw_create_service+0x184>
 8016512:	2600      	movs	r6, #0
 8016514:	4630      	mov	r0, r6
 8016516:	b011      	add	sp, #68	; 0x44
 8016518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651c:	4630      	mov	r0, r6
 801651e:	2600      	movs	r6, #0
 8016520:	f000 fbfe 	bl	8016d20 <rmw_uxrce_fini_service_memory>
 8016524:	4630      	mov	r0, r6
 8016526:	b011      	add	sp, #68	; 0x44
 8016528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652c:	20016eac 	.word	0x20016eac
 8016530:	0802465c 	.word	0x0802465c
 8016534:	2001251c 	.word	0x2001251c
 8016538:	20012558 	.word	0x20012558
 801653c:	200124b8 	.word	0x200124b8
 8016540:	2001247c 	.word	0x2001247c

08016544 <rmw_destroy_service>:
 8016544:	b570      	push	{r4, r5, r6, lr}
 8016546:	b128      	cbz	r0, 8016554 <rmw_destroy_service+0x10>
 8016548:	4604      	mov	r4, r0
 801654a:	6800      	ldr	r0, [r0, #0]
 801654c:	460d      	mov	r5, r1
 801654e:	f000 fe33 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8016552:	b910      	cbnz	r0, 801655a <rmw_destroy_service+0x16>
 8016554:	2401      	movs	r4, #1
 8016556:	4620      	mov	r0, r4
 8016558:	bd70      	pop	{r4, r5, r6, pc}
 801655a:	6863      	ldr	r3, [r4, #4]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d0f9      	beq.n	8016554 <rmw_destroy_service+0x10>
 8016560:	2d00      	cmp	r5, #0
 8016562:	d0f7      	beq.n	8016554 <rmw_destroy_service+0x10>
 8016564:	6828      	ldr	r0, [r5, #0]
 8016566:	f000 fe27 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 801656a:	2800      	cmp	r0, #0
 801656c:	d0f2      	beq.n	8016554 <rmw_destroy_service+0x10>
 801656e:	686e      	ldr	r6, [r5, #4]
 8016570:	2e00      	cmp	r6, #0
 8016572:	d0ef      	beq.n	8016554 <rmw_destroy_service+0x10>
 8016574:	6864      	ldr	r4, [r4, #4]
 8016576:	6932      	ldr	r2, [r6, #16]
 8016578:	6920      	ldr	r0, [r4, #16]
 801657a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801657e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016582:	6819      	ldr	r1, [r3, #0]
 8016584:	f001 fc90 	bl	8017ea8 <uxr_buffer_cancel_data>
 8016588:	4602      	mov	r2, r0
 801658a:	6920      	ldr	r0, [r4, #16]
 801658c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016590:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016594:	f000 fcfe 	bl	8016f94 <run_xrce_session>
 8016598:	6920      	ldr	r0, [r4, #16]
 801659a:	6932      	ldr	r2, [r6, #16]
 801659c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80165a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165a4:	6819      	ldr	r1, [r3, #0]
 80165a6:	f001 f91b 	bl	80177e0 <uxr_buffer_delete_entity>
 80165aa:	4602      	mov	r2, r0
 80165ac:	6920      	ldr	r0, [r4, #16]
 80165ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80165b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80165b6:	f000 fced 	bl	8016f94 <run_xrce_session>
 80165ba:	4603      	mov	r3, r0
 80165bc:	4628      	mov	r0, r5
 80165be:	2b00      	cmp	r3, #0
 80165c0:	bf14      	ite	ne
 80165c2:	2400      	movne	r4, #0
 80165c4:	2402      	moveq	r4, #2
 80165c6:	f000 fbab 	bl	8016d20 <rmw_uxrce_fini_service_memory>
 80165ca:	e7c4      	b.n	8016556 <rmw_destroy_service+0x12>

080165cc <rmw_service_response_publisher_get_actual_qos>:
 80165cc:	b181      	cbz	r1, 80165f0 <rmw_service_response_publisher_get_actual_qos+0x24>
 80165ce:	4603      	mov	r3, r0
 80165d0:	b510      	push	{r4, lr}
 80165d2:	fab0 f480 	clz	r4, r0
 80165d6:	0964      	lsrs	r4, r4, #5
 80165d8:	b140      	cbz	r0, 80165ec <rmw_service_response_publisher_get_actual_qos+0x20>
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	4608      	mov	r0, r1
 80165de:	2250      	movs	r2, #80	; 0x50
 80165e0:	f103 0120 	add.w	r1, r3, #32
 80165e4:	f00a fc73 	bl	8020ece <memcpy>
 80165e8:	4620      	mov	r0, r4
 80165ea:	bd10      	pop	{r4, pc}
 80165ec:	200b      	movs	r0, #11
 80165ee:	bd10      	pop	{r4, pc}
 80165f0:	200b      	movs	r0, #11
 80165f2:	4770      	bx	lr

080165f4 <rmw_service_request_subscription_get_actual_qos>:
 80165f4:	b178      	cbz	r0, 8016616 <rmw_service_request_subscription_get_actual_qos+0x22>
 80165f6:	b510      	push	{r4, lr}
 80165f8:	fab1 f481 	clz	r4, r1
 80165fc:	0964      	lsrs	r4, r4, #5
 80165fe:	b141      	cbz	r1, 8016612 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8016600:	6843      	ldr	r3, [r0, #4]
 8016602:	2250      	movs	r2, #80	; 0x50
 8016604:	4608      	mov	r0, r1
 8016606:	f103 0120 	add.w	r1, r3, #32
 801660a:	f00a fc60 	bl	8020ece <memcpy>
 801660e:	4620      	mov	r0, r4
 8016610:	bd10      	pop	{r4, pc}
 8016612:	200b      	movs	r0, #11
 8016614:	bd10      	pop	{r4, pc}
 8016616:	200b      	movs	r0, #11
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop

0801661c <rmw_create_subscription>:
 801661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016620:	b08d      	sub	sp, #52	; 0x34
 8016622:	2900      	cmp	r1, #0
 8016624:	f000 80d8 	beq.w	80167d8 <rmw_create_subscription+0x1bc>
 8016628:	4604      	mov	r4, r0
 801662a:	2800      	cmp	r0, #0
 801662c:	f000 80d4 	beq.w	80167d8 <rmw_create_subscription+0x1bc>
 8016630:	6800      	ldr	r0, [r0, #0]
 8016632:	460e      	mov	r6, r1
 8016634:	4615      	mov	r5, r2
 8016636:	461f      	mov	r7, r3
 8016638:	f000 fdbe 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 801663c:	f080 0001 	eor.w	r0, r0, #1
 8016640:	b2c0      	uxtb	r0, r0
 8016642:	2800      	cmp	r0, #0
 8016644:	f040 80c8 	bne.w	80167d8 <rmw_create_subscription+0x1bc>
 8016648:	2d00      	cmp	r5, #0
 801664a:	f000 80c5 	beq.w	80167d8 <rmw_create_subscription+0x1bc>
 801664e:	782b      	ldrb	r3, [r5, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	f000 80c1 	beq.w	80167d8 <rmw_create_subscription+0x1bc>
 8016656:	2f00      	cmp	r7, #0
 8016658:	f000 80be 	beq.w	80167d8 <rmw_create_subscription+0x1bc>
 801665c:	4867      	ldr	r0, [pc, #412]	; (80167fc <rmw_create_subscription+0x1e0>)
 801665e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016662:	f007 fc79 	bl	801df58 <get_memory>
 8016666:	4604      	mov	r4, r0
 8016668:	2800      	cmp	r0, #0
 801666a:	f000 80b6 	beq.w	80167da <rmw_create_subscription+0x1be>
 801666e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016672:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8016676:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 801667a:	f007 fcd5 	bl	801e028 <rmw_get_implementation_identifier>
 801667e:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8016682:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8016686:	4628      	mov	r0, r5
 8016688:	f7e9 fe3a 	bl	8000300 <strlen>
 801668c:	3001      	adds	r0, #1
 801668e:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8016692:	283c      	cmp	r0, #60	; 0x3c
 8016694:	f200 80a5 	bhi.w	80167e2 <rmw_create_subscription+0x1c6>
 8016698:	462b      	mov	r3, r5
 801669a:	4a59      	ldr	r2, [pc, #356]	; (8016800 <rmw_create_subscription+0x1e4>)
 801669c:	213c      	movs	r1, #60	; 0x3c
 801669e:	4650      	mov	r0, sl
 80166a0:	f00a f9b8 	bl	8020a14 <sniprintf>
 80166a4:	4639      	mov	r1, r7
 80166a6:	2250      	movs	r2, #80	; 0x50
 80166a8:	f108 0028 	add.w	r0, r8, #40	; 0x28
 80166ac:	f8c8 9020 	str.w	r9, [r8, #32]
 80166b0:	f00a fc0d 	bl	8020ece <memcpy>
 80166b4:	4630      	mov	r0, r6
 80166b6:	4953      	ldr	r1, [pc, #332]	; (8016804 <rmw_create_subscription+0x1e8>)
 80166b8:	f000 fd8c 	bl	80171d4 <get_message_typesupport_handle>
 80166bc:	2800      	cmp	r0, #0
 80166be:	f000 8090 	beq.w	80167e2 <rmw_create_subscription+0x1c6>
 80166c2:	6842      	ldr	r2, [r0, #4]
 80166c4:	f8c8 2018 	str.w	r2, [r8, #24]
 80166c8:	2a00      	cmp	r2, #0
 80166ca:	f000 808a 	beq.w	80167e2 <rmw_create_subscription+0x1c6>
 80166ce:	4629      	mov	r1, r5
 80166d0:	463b      	mov	r3, r7
 80166d2:	4648      	mov	r0, r9
 80166d4:	f007 fcd8 	bl	801e088 <create_topic>
 80166d8:	f8c8 001c 	str.w	r0, [r8, #28]
 80166dc:	2800      	cmp	r0, #0
 80166de:	f000 8085 	beq.w	80167ec <rmw_create_subscription+0x1d0>
 80166e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80166e6:	2104      	movs	r1, #4
 80166e8:	2506      	movs	r5, #6
 80166ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166ee:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80166f2:	1c42      	adds	r2, r0, #1
 80166f4:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80166f8:	f001 fb6c 	bl	8017dd4 <uxr_object_id>
 80166fc:	f8c8 0010 	str.w	r0, [r8, #16]
 8016700:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016704:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8016708:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801670c:	9500      	str	r5, [sp, #0]
 801670e:	6819      	ldr	r1, [r3, #0]
 8016710:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016714:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016718:	f001 f946 	bl	80179a8 <uxr_buffer_create_subscriber_bin>
 801671c:	4602      	mov	r2, r0
 801671e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016722:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016726:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801672a:	f000 fc33 	bl	8016f94 <run_xrce_session>
 801672e:	2800      	cmp	r0, #0
 8016730:	d057      	beq.n	80167e2 <rmw_create_subscription+0x1c6>
 8016732:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016736:	4629      	mov	r1, r5
 8016738:	ae08      	add	r6, sp, #32
 801673a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801673e:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8016742:	1c42      	adds	r2, r0, #1
 8016744:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8016748:	f001 fb44 	bl	8017dd4 <uxr_object_id>
 801674c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016750:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8016754:	4639      	mov	r1, r7
 8016756:	f8c8 0014 	str.w	r0, [r8, #20]
 801675a:	4630      	mov	r0, r6
 801675c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8016760:	9305      	str	r3, [sp, #20]
 8016762:	f000 fc33 	bl	8016fcc <convert_qos_profile>
 8016766:	9503      	str	r5, [sp, #12]
 8016768:	9b05      	ldr	r3, [sp, #20]
 801676a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801676e:	9001      	str	r0, [sp, #4]
 8016770:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8016774:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016778:	691b      	ldr	r3, [r3, #16]
 801677a:	9300      	str	r3, [sp, #0]
 801677c:	f8db 1000 	ldr.w	r1, [fp]
 8016780:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8016784:	f001 f9b6 	bl	8017af4 <uxr_buffer_create_datareader_bin>
 8016788:	4602      	mov	r2, r0
 801678a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801678e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016792:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016796:	f000 fbfd 	bl	8016f94 <run_xrce_session>
 801679a:	b310      	cbz	r0, 80167e2 <rmw_create_subscription+0x1c6>
 801679c:	7a3b      	ldrb	r3, [r7, #8]
 801679e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80167a6:	2b02      	cmp	r3, #2
 80167a8:	920a      	str	r2, [sp, #40]	; 0x28
 80167aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80167ae:	f04f 0200 	mov.w	r2, #0
 80167b2:	bf08      	it	eq
 80167b4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80167b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80167bc:	bf18      	it	ne
 80167be:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 80167c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80167c4:	9307      	str	r3, [sp, #28]
 80167c6:	ab0a      	add	r3, sp, #40	; 0x28
 80167c8:	9300      	str	r3, [sp, #0]
 80167ca:	9b07      	ldr	r3, [sp, #28]
 80167cc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80167d0:	6809      	ldr	r1, [r1, #0]
 80167d2:	f001 fb2f 	bl	8017e34 <uxr_buffer_request_data>
 80167d6:	e000      	b.n	80167da <rmw_create_subscription+0x1be>
 80167d8:	2400      	movs	r4, #0
 80167da:	4620      	mov	r0, r4
 80167dc:	b00d      	add	sp, #52	; 0x34
 80167de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167e2:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80167e6:	b108      	cbz	r0, 80167ec <rmw_create_subscription+0x1d0>
 80167e8:	f000 fac6 	bl	8016d78 <rmw_uxrce_fini_topic_memory>
 80167ec:	4620      	mov	r0, r4
 80167ee:	2400      	movs	r4, #0
 80167f0:	f000 fa80 	bl	8016cf4 <rmw_uxrce_fini_subscription_memory>
 80167f4:	4620      	mov	r0, r4
 80167f6:	b00d      	add	sp, #52	; 0x34
 80167f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fc:	20016edc 	.word	0x20016edc
 8016800:	080253a4 	.word	0x080253a4
 8016804:	0802465c 	.word	0x0802465c

08016808 <rmw_subscription_get_actual_qos>:
 8016808:	b178      	cbz	r0, 801682a <rmw_subscription_get_actual_qos+0x22>
 801680a:	b510      	push	{r4, lr}
 801680c:	fab1 f481 	clz	r4, r1
 8016810:	0964      	lsrs	r4, r4, #5
 8016812:	b141      	cbz	r1, 8016826 <rmw_subscription_get_actual_qos+0x1e>
 8016814:	6843      	ldr	r3, [r0, #4]
 8016816:	2250      	movs	r2, #80	; 0x50
 8016818:	4608      	mov	r0, r1
 801681a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801681e:	f00a fb56 	bl	8020ece <memcpy>
 8016822:	4620      	mov	r0, r4
 8016824:	bd10      	pop	{r4, pc}
 8016826:	200b      	movs	r0, #11
 8016828:	bd10      	pop	{r4, pc}
 801682a:	200b      	movs	r0, #11
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop

08016830 <rmw_destroy_subscription>:
 8016830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016834:	b128      	cbz	r0, 8016842 <rmw_destroy_subscription+0x12>
 8016836:	4604      	mov	r4, r0
 8016838:	6800      	ldr	r0, [r0, #0]
 801683a:	460d      	mov	r5, r1
 801683c:	f000 fcbc 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8016840:	b918      	cbnz	r0, 801684a <rmw_destroy_subscription+0x1a>
 8016842:	2401      	movs	r4, #1
 8016844:	4620      	mov	r0, r4
 8016846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801684a:	6863      	ldr	r3, [r4, #4]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d0f8      	beq.n	8016842 <rmw_destroy_subscription+0x12>
 8016850:	fab5 f485 	clz	r4, r5
 8016854:	0964      	lsrs	r4, r4, #5
 8016856:	2d00      	cmp	r5, #0
 8016858:	d0f3      	beq.n	8016842 <rmw_destroy_subscription+0x12>
 801685a:	6828      	ldr	r0, [r5, #0]
 801685c:	f000 fcac 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 8016860:	2800      	cmp	r0, #0
 8016862:	d0ee      	beq.n	8016842 <rmw_destroy_subscription+0x12>
 8016864:	686e      	ldr	r6, [r5, #4]
 8016866:	2e00      	cmp	r6, #0
 8016868:	d0eb      	beq.n	8016842 <rmw_destroy_subscription+0x12>
 801686a:	6a37      	ldr	r7, [r6, #32]
 801686c:	6972      	ldr	r2, [r6, #20]
 801686e:	6938      	ldr	r0, [r7, #16]
 8016870:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016874:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016878:	6819      	ldr	r1, [r3, #0]
 801687a:	f001 fb15 	bl	8017ea8 <uxr_buffer_cancel_data>
 801687e:	4602      	mov	r2, r0
 8016880:	6938      	ldr	r0, [r7, #16]
 8016882:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016886:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801688a:	f000 fb83 	bl	8016f94 <run_xrce_session>
 801688e:	69f0      	ldr	r0, [r6, #28]
 8016890:	f007 fc4a 	bl	801e128 <destroy_topic>
 8016894:	6a33      	ldr	r3, [r6, #32]
 8016896:	6972      	ldr	r2, [r6, #20]
 8016898:	6918      	ldr	r0, [r3, #16]
 801689a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801689e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80168a2:	6819      	ldr	r1, [r3, #0]
 80168a4:	f000 ff9c 	bl	80177e0 <uxr_buffer_delete_entity>
 80168a8:	6a33      	ldr	r3, [r6, #32]
 80168aa:	4680      	mov	r8, r0
 80168ac:	6932      	ldr	r2, [r6, #16]
 80168ae:	6918      	ldr	r0, [r3, #16]
 80168b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80168b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80168b8:	6819      	ldr	r1, [r3, #0]
 80168ba:	f000 ff91 	bl	80177e0 <uxr_buffer_delete_entity>
 80168be:	4606      	mov	r6, r0
 80168c0:	6938      	ldr	r0, [r7, #16]
 80168c2:	4642      	mov	r2, r8
 80168c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80168c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80168cc:	f000 fb62 	bl	8016f94 <run_xrce_session>
 80168d0:	693f      	ldr	r7, [r7, #16]
 80168d2:	4632      	mov	r2, r6
 80168d4:	4606      	mov	r6, r0
 80168d6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80168da:	4638      	mov	r0, r7
 80168dc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80168e0:	f000 fb58 	bl	8016f94 <run_xrce_session>
 80168e4:	b126      	cbz	r6, 80168f0 <rmw_destroy_subscription+0xc0>
 80168e6:	b118      	cbz	r0, 80168f0 <rmw_destroy_subscription+0xc0>
 80168e8:	4628      	mov	r0, r5
 80168ea:	f000 fa03 	bl	8016cf4 <rmw_uxrce_fini_subscription_memory>
 80168ee:	e7a9      	b.n	8016844 <rmw_destroy_subscription+0x14>
 80168f0:	2402      	movs	r4, #2
 80168f2:	e7f9      	b.n	80168e8 <rmw_destroy_subscription+0xb8>

080168f4 <rmw_take_with_info>:
 80168f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168f6:	4604      	mov	r4, r0
 80168f8:	6800      	ldr	r0, [r0, #0]
 80168fa:	b089      	sub	sp, #36	; 0x24
 80168fc:	460f      	mov	r7, r1
 80168fe:	4615      	mov	r5, r2
 8016900:	b128      	cbz	r0, 801690e <rmw_take_with_info+0x1a>
 8016902:	4b24      	ldr	r3, [pc, #144]	; (8016994 <rmw_take_with_info+0xa0>)
 8016904:	6819      	ldr	r1, [r3, #0]
 8016906:	f7e9 fc9b 	bl	8000240 <strcmp>
 801690a:	2800      	cmp	r0, #0
 801690c:	d13e      	bne.n	801698c <rmw_take_with_info+0x98>
 801690e:	b305      	cbz	r5, 8016952 <rmw_take_with_info+0x5e>
 8016910:	2300      	movs	r3, #0
 8016912:	6864      	ldr	r4, [r4, #4]
 8016914:	702b      	strb	r3, [r5, #0]
 8016916:	f000 fabf 	bl	8016e98 <rmw_uxrce_clean_expired_static_input_buffer>
 801691a:	4620      	mov	r0, r4
 801691c:	f000 fa92 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016920:	4606      	mov	r6, r0
 8016922:	b1f0      	cbz	r0, 8016962 <rmw_take_with_info+0x6e>
 8016924:	6881      	ldr	r1, [r0, #8]
 8016926:	4668      	mov	r0, sp
 8016928:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801692c:	3110      	adds	r1, #16
 801692e:	f7fc fc97 	bl	8013260 <ucdr_init_buffer>
 8016932:	69a3      	ldr	r3, [r4, #24]
 8016934:	4639      	mov	r1, r7
 8016936:	4668      	mov	r0, sp
 8016938:	68db      	ldr	r3, [r3, #12]
 801693a:	4798      	blx	r3
 801693c:	4604      	mov	r4, r0
 801693e:	4631      	mov	r1, r6
 8016940:	4815      	ldr	r0, [pc, #84]	; (8016998 <rmw_take_with_info+0xa4>)
 8016942:	f007 fb19 	bl	801df78 <put_memory>
 8016946:	702c      	strb	r4, [r5, #0]
 8016948:	f084 0001 	eor.w	r0, r4, #1
 801694c:	b2c0      	uxtb	r0, r0
 801694e:	b009      	add	sp, #36	; 0x24
 8016950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016952:	6864      	ldr	r4, [r4, #4]
 8016954:	f000 faa0 	bl	8016e98 <rmw_uxrce_clean_expired_static_input_buffer>
 8016958:	4620      	mov	r0, r4
 801695a:	f000 fa73 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 801695e:	4605      	mov	r5, r0
 8016960:	b910      	cbnz	r0, 8016968 <rmw_take_with_info+0x74>
 8016962:	2001      	movs	r0, #1
 8016964:	b009      	add	sp, #36	; 0x24
 8016966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016968:	68a9      	ldr	r1, [r5, #8]
 801696a:	4668      	mov	r0, sp
 801696c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016970:	3110      	adds	r1, #16
 8016972:	f7fc fc75 	bl	8013260 <ucdr_init_buffer>
 8016976:	69a3      	ldr	r3, [r4, #24]
 8016978:	4639      	mov	r1, r7
 801697a:	4668      	mov	r0, sp
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	4798      	blx	r3
 8016980:	4629      	mov	r1, r5
 8016982:	4604      	mov	r4, r0
 8016984:	4804      	ldr	r0, [pc, #16]	; (8016998 <rmw_take_with_info+0xa4>)
 8016986:	f007 faf7 	bl	801df78 <put_memory>
 801698a:	e7dd      	b.n	8016948 <rmw_take_with_info+0x54>
 801698c:	200c      	movs	r0, #12
 801698e:	b009      	add	sp, #36	; 0x24
 8016990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016992:	bf00      	nop
 8016994:	08025a04 	.word	0x08025a04
 8016998:	20016ecc 	.word	0x20016ecc

0801699c <rmw_uxrce_transport_init>:
 801699c:	b508      	push	{r3, lr}
 801699e:	b108      	cbz	r0, 80169a4 <rmw_uxrce_transport_init+0x8>
 80169a0:	f100 0210 	add.w	r2, r0, #16
 80169a4:	b139      	cbz	r1, 80169b6 <rmw_uxrce_transport_init+0x1a>
 80169a6:	6949      	ldr	r1, [r1, #20]
 80169a8:	4610      	mov	r0, r2
 80169aa:	f001 f9db 	bl	8017d64 <uxr_init_custom_transport>
 80169ae:	f080 0001 	eor.w	r0, r0, #1
 80169b2:	b2c0      	uxtb	r0, r0
 80169b4:	bd08      	pop	{r3, pc}
 80169b6:	4b04      	ldr	r3, [pc, #16]	; (80169c8 <rmw_uxrce_transport_init+0x2c>)
 80169b8:	4610      	mov	r0, r2
 80169ba:	6859      	ldr	r1, [r3, #4]
 80169bc:	f001 f9d2 	bl	8017d64 <uxr_init_custom_transport>
 80169c0:	f080 0001 	eor.w	r0, r0, #1
 80169c4:	b2c0      	uxtb	r0, r0
 80169c6:	bd08      	pop	{r3, pc}
 80169c8:	20012424 	.word	0x20012424

080169cc <rmw_uxrce_init_service_memory>:
 80169cc:	b1e2      	cbz	r2, 8016a08 <rmw_uxrce_init_service_memory+0x3c>
 80169ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169d2:	7b05      	ldrb	r5, [r0, #12]
 80169d4:	4606      	mov	r6, r0
 80169d6:	b9ad      	cbnz	r5, 8016a04 <rmw_uxrce_init_service_memory+0x38>
 80169d8:	23c8      	movs	r3, #200	; 0xc8
 80169da:	4617      	mov	r7, r2
 80169dc:	460c      	mov	r4, r1
 80169de:	46a8      	mov	r8, r5
 80169e0:	6083      	str	r3, [r0, #8]
 80169e2:	f240 1301 	movw	r3, #257	; 0x101
 80169e6:	e9c0 5500 	strd	r5, r5, [r0]
 80169ea:	8183      	strh	r3, [r0, #12]
 80169ec:	3501      	adds	r5, #1
 80169ee:	4621      	mov	r1, r4
 80169f0:	4630      	mov	r0, r6
 80169f2:	f007 fac1 	bl	801df78 <put_memory>
 80169f6:	42af      	cmp	r7, r5
 80169f8:	60a4      	str	r4, [r4, #8]
 80169fa:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80169fe:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016a02:	d1f3      	bne.n	80169ec <rmw_uxrce_init_service_memory+0x20>
 8016a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop

08016a0c <rmw_uxrce_init_client_memory>:
 8016a0c:	b1e2      	cbz	r2, 8016a48 <rmw_uxrce_init_client_memory+0x3c>
 8016a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a12:	7b05      	ldrb	r5, [r0, #12]
 8016a14:	4606      	mov	r6, r0
 8016a16:	b9ad      	cbnz	r5, 8016a44 <rmw_uxrce_init_client_memory+0x38>
 8016a18:	23c8      	movs	r3, #200	; 0xc8
 8016a1a:	4617      	mov	r7, r2
 8016a1c:	460c      	mov	r4, r1
 8016a1e:	46a8      	mov	r8, r5
 8016a20:	6083      	str	r3, [r0, #8]
 8016a22:	f240 1301 	movw	r3, #257	; 0x101
 8016a26:	e9c0 5500 	strd	r5, r5, [r0]
 8016a2a:	8183      	strh	r3, [r0, #12]
 8016a2c:	3501      	adds	r5, #1
 8016a2e:	4621      	mov	r1, r4
 8016a30:	4630      	mov	r0, r6
 8016a32:	f007 faa1 	bl	801df78 <put_memory>
 8016a36:	42af      	cmp	r7, r5
 8016a38:	60a4      	str	r4, [r4, #8]
 8016a3a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016a3e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016a42:	d1f3      	bne.n	8016a2c <rmw_uxrce_init_client_memory+0x20>
 8016a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a48:	4770      	bx	lr
 8016a4a:	bf00      	nop

08016a4c <rmw_uxrce_init_publisher_memory>:
 8016a4c:	b1e2      	cbz	r2, 8016a88 <rmw_uxrce_init_publisher_memory+0x3c>
 8016a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a52:	7b05      	ldrb	r5, [r0, #12]
 8016a54:	4606      	mov	r6, r0
 8016a56:	b9ad      	cbnz	r5, 8016a84 <rmw_uxrce_init_publisher_memory+0x38>
 8016a58:	23d8      	movs	r3, #216	; 0xd8
 8016a5a:	4617      	mov	r7, r2
 8016a5c:	460c      	mov	r4, r1
 8016a5e:	46a8      	mov	r8, r5
 8016a60:	6083      	str	r3, [r0, #8]
 8016a62:	f240 1301 	movw	r3, #257	; 0x101
 8016a66:	e9c0 5500 	strd	r5, r5, [r0]
 8016a6a:	8183      	strh	r3, [r0, #12]
 8016a6c:	3501      	adds	r5, #1
 8016a6e:	4621      	mov	r1, r4
 8016a70:	4630      	mov	r0, r6
 8016a72:	f007 fa81 	bl	801df78 <put_memory>
 8016a76:	42af      	cmp	r7, r5
 8016a78:	60a4      	str	r4, [r4, #8]
 8016a7a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016a7e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016a82:	d1f3      	bne.n	8016a6c <rmw_uxrce_init_publisher_memory+0x20>
 8016a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a88:	4770      	bx	lr
 8016a8a:	bf00      	nop

08016a8c <rmw_uxrce_init_subscription_memory>:
 8016a8c:	b1e2      	cbz	r2, 8016ac8 <rmw_uxrce_init_subscription_memory+0x3c>
 8016a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a92:	7b05      	ldrb	r5, [r0, #12]
 8016a94:	4606      	mov	r6, r0
 8016a96:	b9ad      	cbnz	r5, 8016ac4 <rmw_uxrce_init_subscription_memory+0x38>
 8016a98:	23d8      	movs	r3, #216	; 0xd8
 8016a9a:	4617      	mov	r7, r2
 8016a9c:	460c      	mov	r4, r1
 8016a9e:	46a8      	mov	r8, r5
 8016aa0:	6083      	str	r3, [r0, #8]
 8016aa2:	f240 1301 	movw	r3, #257	; 0x101
 8016aa6:	e9c0 5500 	strd	r5, r5, [r0]
 8016aaa:	8183      	strh	r3, [r0, #12]
 8016aac:	3501      	adds	r5, #1
 8016aae:	4621      	mov	r1, r4
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f007 fa61 	bl	801df78 <put_memory>
 8016ab6:	42af      	cmp	r7, r5
 8016ab8:	60a4      	str	r4, [r4, #8]
 8016aba:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016abe:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016ac2:	d1f3      	bne.n	8016aac <rmw_uxrce_init_subscription_memory+0x20>
 8016ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac8:	4770      	bx	lr
 8016aca:	bf00      	nop

08016acc <rmw_uxrce_init_node_memory>:
 8016acc:	b1e2      	cbz	r2, 8016b08 <rmw_uxrce_init_node_memory+0x3c>
 8016ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad2:	7b05      	ldrb	r5, [r0, #12]
 8016ad4:	4606      	mov	r6, r0
 8016ad6:	b9ad      	cbnz	r5, 8016b04 <rmw_uxrce_init_node_memory+0x38>
 8016ad8:	23a4      	movs	r3, #164	; 0xa4
 8016ada:	4617      	mov	r7, r2
 8016adc:	460c      	mov	r4, r1
 8016ade:	46a8      	mov	r8, r5
 8016ae0:	6083      	str	r3, [r0, #8]
 8016ae2:	f240 1301 	movw	r3, #257	; 0x101
 8016ae6:	e9c0 5500 	strd	r5, r5, [r0]
 8016aea:	8183      	strh	r3, [r0, #12]
 8016aec:	3501      	adds	r5, #1
 8016aee:	4621      	mov	r1, r4
 8016af0:	4630      	mov	r0, r6
 8016af2:	f007 fa41 	bl	801df78 <put_memory>
 8016af6:	42af      	cmp	r7, r5
 8016af8:	60a4      	str	r4, [r4, #8]
 8016afa:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8016afe:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016b02:	d1f3      	bne.n	8016aec <rmw_uxrce_init_node_memory+0x20>
 8016b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b08:	4770      	bx	lr
 8016b0a:	bf00      	nop

08016b0c <rmw_uxrce_init_session_memory>:
 8016b0c:	b1ea      	cbz	r2, 8016b4a <rmw_uxrce_init_session_memory+0x3e>
 8016b0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b12:	7b05      	ldrb	r5, [r0, #12]
 8016b14:	4606      	mov	r6, r0
 8016b16:	b9b5      	cbnz	r5, 8016b46 <rmw_uxrce_init_session_memory+0x3a>
 8016b18:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016b1c:	f240 1301 	movw	r3, #257	; 0x101
 8016b20:	4617      	mov	r7, r2
 8016b22:	460c      	mov	r4, r1
 8016b24:	46a9      	mov	r9, r5
 8016b26:	f8c0 8008 	str.w	r8, [r0, #8]
 8016b2a:	8183      	strh	r3, [r0, #12]
 8016b2c:	e9c0 5500 	strd	r5, r5, [r0]
 8016b30:	3501      	adds	r5, #1
 8016b32:	4621      	mov	r1, r4
 8016b34:	4630      	mov	r0, r6
 8016b36:	f007 fa1f 	bl	801df78 <put_memory>
 8016b3a:	42af      	cmp	r7, r5
 8016b3c:	60a4      	str	r4, [r4, #8]
 8016b3e:	f884 900c 	strb.w	r9, [r4, #12]
 8016b42:	4444      	add	r4, r8
 8016b44:	d1f4      	bne.n	8016b30 <rmw_uxrce_init_session_memory+0x24>
 8016b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b4a:	4770      	bx	lr

08016b4c <rmw_uxrce_init_topic_memory>:
 8016b4c:	b1e2      	cbz	r2, 8016b88 <rmw_uxrce_init_topic_memory+0x3c>
 8016b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b52:	7b05      	ldrb	r5, [r0, #12]
 8016b54:	4606      	mov	r6, r0
 8016b56:	b9ad      	cbnz	r5, 8016b84 <rmw_uxrce_init_topic_memory+0x38>
 8016b58:	231c      	movs	r3, #28
 8016b5a:	4617      	mov	r7, r2
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	46a8      	mov	r8, r5
 8016b60:	6083      	str	r3, [r0, #8]
 8016b62:	f240 1301 	movw	r3, #257	; 0x101
 8016b66:	e9c0 5500 	strd	r5, r5, [r0]
 8016b6a:	8183      	strh	r3, [r0, #12]
 8016b6c:	3501      	adds	r5, #1
 8016b6e:	4621      	mov	r1, r4
 8016b70:	4630      	mov	r0, r6
 8016b72:	f007 fa01 	bl	801df78 <put_memory>
 8016b76:	42af      	cmp	r7, r5
 8016b78:	60a4      	str	r4, [r4, #8]
 8016b7a:	f104 041c 	add.w	r4, r4, #28
 8016b7e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016b82:	d1f3      	bne.n	8016b6c <rmw_uxrce_init_topic_memory+0x20>
 8016b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop

08016b8c <rmw_uxrce_init_static_input_buffer_memory>:
 8016b8c:	b1ea      	cbz	r2, 8016bca <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b92:	7b05      	ldrb	r5, [r0, #12]
 8016b94:	4606      	mov	r6, r0
 8016b96:	b9b5      	cbnz	r5, 8016bc6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016b98:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016b9c:	4617      	mov	r7, r2
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	46a8      	mov	r8, r5
 8016ba2:	6083      	str	r3, [r0, #8]
 8016ba4:	f240 1301 	movw	r3, #257	; 0x101
 8016ba8:	e9c0 5500 	strd	r5, r5, [r0]
 8016bac:	8183      	strh	r3, [r0, #12]
 8016bae:	3501      	adds	r5, #1
 8016bb0:	4621      	mov	r1, r4
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	f007 f9e0 	bl	801df78 <put_memory>
 8016bb8:	42af      	cmp	r7, r5
 8016bba:	60a4      	str	r4, [r4, #8]
 8016bbc:	f884 800c 	strb.w	r8, [r4, #12]
 8016bc0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016bc4:	d1f3      	bne.n	8016bae <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bca:	4770      	bx	lr

08016bcc <rmw_uxrce_init_init_options_impl_memory>:
 8016bcc:	b1e2      	cbz	r2, 8016c08 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd2:	7b05      	ldrb	r5, [r0, #12]
 8016bd4:	4606      	mov	r6, r0
 8016bd6:	b9ad      	cbnz	r5, 8016c04 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016bd8:	232c      	movs	r3, #44	; 0x2c
 8016bda:	4617      	mov	r7, r2
 8016bdc:	460c      	mov	r4, r1
 8016bde:	46a8      	mov	r8, r5
 8016be0:	6083      	str	r3, [r0, #8]
 8016be2:	f240 1301 	movw	r3, #257	; 0x101
 8016be6:	e9c0 5500 	strd	r5, r5, [r0]
 8016bea:	8183      	strh	r3, [r0, #12]
 8016bec:	3501      	adds	r5, #1
 8016bee:	4621      	mov	r1, r4
 8016bf0:	4630      	mov	r0, r6
 8016bf2:	f007 f9c1 	bl	801df78 <put_memory>
 8016bf6:	42af      	cmp	r7, r5
 8016bf8:	60a4      	str	r4, [r4, #8]
 8016bfa:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8016bfe:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016c02:	d1f3      	bne.n	8016bec <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c08:	4770      	bx	lr
 8016c0a:	bf00      	nop

08016c0c <rmw_uxrce_init_wait_set_memory>:
 8016c0c:	b1e2      	cbz	r2, 8016c48 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c12:	7b05      	ldrb	r5, [r0, #12]
 8016c14:	4606      	mov	r6, r0
 8016c16:	b9ad      	cbnz	r5, 8016c44 <rmw_uxrce_init_wait_set_memory+0x38>
 8016c18:	231c      	movs	r3, #28
 8016c1a:	4617      	mov	r7, r2
 8016c1c:	460c      	mov	r4, r1
 8016c1e:	46a8      	mov	r8, r5
 8016c20:	6083      	str	r3, [r0, #8]
 8016c22:	f240 1301 	movw	r3, #257	; 0x101
 8016c26:	e9c0 5500 	strd	r5, r5, [r0]
 8016c2a:	8183      	strh	r3, [r0, #12]
 8016c2c:	3501      	adds	r5, #1
 8016c2e:	4621      	mov	r1, r4
 8016c30:	4630      	mov	r0, r6
 8016c32:	f007 f9a1 	bl	801df78 <put_memory>
 8016c36:	42af      	cmp	r7, r5
 8016c38:	60a4      	str	r4, [r4, #8]
 8016c3a:	f104 041c 	add.w	r4, r4, #28
 8016c3e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016c42:	d1f3      	bne.n	8016c2c <rmw_uxrce_init_wait_set_memory+0x20>
 8016c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop

08016c4c <rmw_uxrce_init_guard_condition_memory>:
 8016c4c:	b1e2      	cbz	r2, 8016c88 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c52:	7b05      	ldrb	r5, [r0, #12]
 8016c54:	4606      	mov	r6, r0
 8016c56:	b9ad      	cbnz	r5, 8016c84 <rmw_uxrce_init_guard_condition_memory+0x38>
 8016c58:	2320      	movs	r3, #32
 8016c5a:	4617      	mov	r7, r2
 8016c5c:	460c      	mov	r4, r1
 8016c5e:	46a8      	mov	r8, r5
 8016c60:	6083      	str	r3, [r0, #8]
 8016c62:	f240 1301 	movw	r3, #257	; 0x101
 8016c66:	e9c0 5500 	strd	r5, r5, [r0]
 8016c6a:	8183      	strh	r3, [r0, #12]
 8016c6c:	3501      	adds	r5, #1
 8016c6e:	4621      	mov	r1, r4
 8016c70:	4630      	mov	r0, r6
 8016c72:	f007 f981 	bl	801df78 <put_memory>
 8016c76:	42af      	cmp	r7, r5
 8016c78:	60a4      	str	r4, [r4, #8]
 8016c7a:	f104 0420 	add.w	r4, r4, #32
 8016c7e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016c82:	d1f3      	bne.n	8016c6c <rmw_uxrce_init_guard_condition_memory+0x20>
 8016c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c88:	4770      	bx	lr
 8016c8a:	bf00      	nop

08016c8c <rmw_uxrce_fini_session_memory>:
 8016c8c:	4601      	mov	r1, r0
 8016c8e:	4801      	ldr	r0, [pc, #4]	; (8016c94 <rmw_uxrce_fini_session_memory+0x8>)
 8016c90:	f007 b972 	b.w	801df78 <put_memory>
 8016c94:	20016ebc 	.word	0x20016ebc

08016c98 <rmw_uxrce_fini_node_memory>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	6800      	ldr	r0, [r0, #0]
 8016c9e:	b128      	cbz	r0, 8016cac <rmw_uxrce_fini_node_memory+0x14>
 8016ca0:	4b07      	ldr	r3, [pc, #28]	; (8016cc0 <rmw_uxrce_fini_node_memory+0x28>)
 8016ca2:	6819      	ldr	r1, [r3, #0]
 8016ca4:	f7e9 facc 	bl	8000240 <strcmp>
 8016ca8:	b940      	cbnz	r0, 8016cbc <rmw_uxrce_fini_node_memory+0x24>
 8016caa:	6020      	str	r0, [r4, #0]
 8016cac:	6861      	ldr	r1, [r4, #4]
 8016cae:	b129      	cbz	r1, 8016cbc <rmw_uxrce_fini_node_memory+0x24>
 8016cb0:	2500      	movs	r5, #0
 8016cb2:	4804      	ldr	r0, [pc, #16]	; (8016cc4 <rmw_uxrce_fini_node_memory+0x2c>)
 8016cb4:	610d      	str	r5, [r1, #16]
 8016cb6:	f007 f95f 	bl	801df78 <put_memory>
 8016cba:	6065      	str	r5, [r4, #4]
 8016cbc:	bd38      	pop	{r3, r4, r5, pc}
 8016cbe:	bf00      	nop
 8016cc0:	08025a04 	.word	0x08025a04
 8016cc4:	20016e8c 	.word	0x20016e8c

08016cc8 <rmw_uxrce_fini_publisher_memory>:
 8016cc8:	b510      	push	{r4, lr}
 8016cca:	4604      	mov	r4, r0
 8016ccc:	6800      	ldr	r0, [r0, #0]
 8016cce:	b128      	cbz	r0, 8016cdc <rmw_uxrce_fini_publisher_memory+0x14>
 8016cd0:	4b06      	ldr	r3, [pc, #24]	; (8016cec <rmw_uxrce_fini_publisher_memory+0x24>)
 8016cd2:	6819      	ldr	r1, [r3, #0]
 8016cd4:	f7e9 fab4 	bl	8000240 <strcmp>
 8016cd8:	b938      	cbnz	r0, 8016cea <rmw_uxrce_fini_publisher_memory+0x22>
 8016cda:	6020      	str	r0, [r4, #0]
 8016cdc:	6861      	ldr	r1, [r4, #4]
 8016cde:	b121      	cbz	r1, 8016cea <rmw_uxrce_fini_publisher_memory+0x22>
 8016ce0:	4803      	ldr	r0, [pc, #12]	; (8016cf0 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016ce2:	f007 f949 	bl	801df78 <put_memory>
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	6063      	str	r3, [r4, #4]
 8016cea:	bd10      	pop	{r4, pc}
 8016cec:	08025a04 	.word	0x08025a04
 8016cf0:	20016e9c 	.word	0x20016e9c

08016cf4 <rmw_uxrce_fini_subscription_memory>:
 8016cf4:	b510      	push	{r4, lr}
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	6800      	ldr	r0, [r0, #0]
 8016cfa:	b128      	cbz	r0, 8016d08 <rmw_uxrce_fini_subscription_memory+0x14>
 8016cfc:	4b06      	ldr	r3, [pc, #24]	; (8016d18 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016cfe:	6819      	ldr	r1, [r3, #0]
 8016d00:	f7e9 fa9e 	bl	8000240 <strcmp>
 8016d04:	b938      	cbnz	r0, 8016d16 <rmw_uxrce_fini_subscription_memory+0x22>
 8016d06:	6020      	str	r0, [r4, #0]
 8016d08:	6861      	ldr	r1, [r4, #4]
 8016d0a:	b121      	cbz	r1, 8016d16 <rmw_uxrce_fini_subscription_memory+0x22>
 8016d0c:	4803      	ldr	r0, [pc, #12]	; (8016d1c <rmw_uxrce_fini_subscription_memory+0x28>)
 8016d0e:	f007 f933 	bl	801df78 <put_memory>
 8016d12:	2300      	movs	r3, #0
 8016d14:	6063      	str	r3, [r4, #4]
 8016d16:	bd10      	pop	{r4, pc}
 8016d18:	08025a04 	.word	0x08025a04
 8016d1c:	20016edc 	.word	0x20016edc

08016d20 <rmw_uxrce_fini_service_memory>:
 8016d20:	b510      	push	{r4, lr}
 8016d22:	4604      	mov	r4, r0
 8016d24:	6800      	ldr	r0, [r0, #0]
 8016d26:	b128      	cbz	r0, 8016d34 <rmw_uxrce_fini_service_memory+0x14>
 8016d28:	4b06      	ldr	r3, [pc, #24]	; (8016d44 <rmw_uxrce_fini_service_memory+0x24>)
 8016d2a:	6819      	ldr	r1, [r3, #0]
 8016d2c:	f7e9 fa88 	bl	8000240 <strcmp>
 8016d30:	b938      	cbnz	r0, 8016d42 <rmw_uxrce_fini_service_memory+0x22>
 8016d32:	6020      	str	r0, [r4, #0]
 8016d34:	6861      	ldr	r1, [r4, #4]
 8016d36:	b121      	cbz	r1, 8016d42 <rmw_uxrce_fini_service_memory+0x22>
 8016d38:	4803      	ldr	r0, [pc, #12]	; (8016d48 <rmw_uxrce_fini_service_memory+0x28>)
 8016d3a:	f007 f91d 	bl	801df78 <put_memory>
 8016d3e:	2300      	movs	r3, #0
 8016d40:	6063      	str	r3, [r4, #4]
 8016d42:	bd10      	pop	{r4, pc}
 8016d44:	08025a04 	.word	0x08025a04
 8016d48:	20016eac 	.word	0x20016eac

08016d4c <rmw_uxrce_fini_client_memory>:
 8016d4c:	b510      	push	{r4, lr}
 8016d4e:	4604      	mov	r4, r0
 8016d50:	6800      	ldr	r0, [r0, #0]
 8016d52:	b128      	cbz	r0, 8016d60 <rmw_uxrce_fini_client_memory+0x14>
 8016d54:	4b06      	ldr	r3, [pc, #24]	; (8016d70 <rmw_uxrce_fini_client_memory+0x24>)
 8016d56:	6819      	ldr	r1, [r3, #0]
 8016d58:	f7e9 fa72 	bl	8000240 <strcmp>
 8016d5c:	b938      	cbnz	r0, 8016d6e <rmw_uxrce_fini_client_memory+0x22>
 8016d5e:	6020      	str	r0, [r4, #0]
 8016d60:	6861      	ldr	r1, [r4, #4]
 8016d62:	b121      	cbz	r1, 8016d6e <rmw_uxrce_fini_client_memory+0x22>
 8016d64:	4803      	ldr	r0, [pc, #12]	; (8016d74 <rmw_uxrce_fini_client_memory+0x28>)
 8016d66:	f007 f907 	bl	801df78 <put_memory>
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	6063      	str	r3, [r4, #4]
 8016d6e:	bd10      	pop	{r4, pc}
 8016d70:	08025a04 	.word	0x08025a04
 8016d74:	200125bc 	.word	0x200125bc

08016d78 <rmw_uxrce_fini_topic_memory>:
 8016d78:	b510      	push	{r4, lr}
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	4803      	ldr	r0, [pc, #12]	; (8016d8c <rmw_uxrce_fini_topic_memory+0x14>)
 8016d7e:	4621      	mov	r1, r4
 8016d80:	f007 f8fa 	bl	801df78 <put_memory>
 8016d84:	2300      	movs	r3, #0
 8016d86:	61a3      	str	r3, [r4, #24]
 8016d88:	bd10      	pop	{r4, pc}
 8016d8a:	bf00      	nop
 8016d8c:	20016eec 	.word	0x20016eec

08016d90 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016d90:	b082      	sub	sp, #8
 8016d92:	492b      	ldr	r1, [pc, #172]	; (8016e40 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016d94:	b530      	push	{r4, r5, lr}
 8016d96:	680d      	ldr	r5, [r1, #0]
 8016d98:	ac03      	add	r4, sp, #12
 8016d9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8016d9e:	461c      	mov	r4, r3
 8016da0:	2d00      	cmp	r5, #0
 8016da2:	d04b      	beq.n	8016e3c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016da4:	462b      	mov	r3, r5
 8016da6:	2100      	movs	r1, #0
 8016da8:	689a      	ldr	r2, [r3, #8]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8016db0:	4290      	cmp	r0, r2
 8016db2:	bf08      	it	eq
 8016db4:	3101      	addeq	r1, #1
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d1f6      	bne.n	8016da8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016dba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016dbe:	2b02      	cmp	r3, #2
 8016dc0:	d029      	beq.n	8016e16 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016dc2:	d820      	bhi.n	8016e06 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016dc4:	428c      	cmp	r4, r1
 8016dc6:	d828      	bhi.n	8016e1a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016dc8:	fab4 f284 	clz	r2, r4
 8016dcc:	0952      	lsrs	r2, r2, #5
 8016dce:	b324      	cbz	r4, 8016e1a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016dd0:	b1dd      	cbz	r5, 8016e0a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016dd2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016dd6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016dda:	e001      	b.n	8016de0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016ddc:	686d      	ldr	r5, [r5, #4]
 8016dde:	b1ad      	cbz	r5, 8016e0c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016de0:	68ab      	ldr	r3, [r5, #8]
 8016de2:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8016de6:	4288      	cmp	r0, r1
 8016de8:	d1f8      	bne.n	8016ddc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016dea:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8016dee:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8016df2:	4561      	cmp	r1, ip
 8016df4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016df8:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016dfc:	daee      	bge.n	8016ddc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016dfe:	468c      	mov	ip, r1
 8016e00:	461c      	mov	r4, r3
 8016e02:	462a      	mov	r2, r5
 8016e04:	e7ea      	b.n	8016ddc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016e06:	2b03      	cmp	r3, #3
 8016e08:	d0dc      	beq.n	8016dc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	4610      	mov	r0, r2
 8016e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e12:	b002      	add	sp, #8
 8016e14:	4770      	bx	lr
 8016e16:	428c      	cmp	r4, r1
 8016e18:	d905      	bls.n	8016e26 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016e1a:	4809      	ldr	r0, [pc, #36]	; (8016e40 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e20:	b002      	add	sp, #8
 8016e22:	f007 b899 	b.w	801df58 <get_memory>
 8016e26:	fab4 f284 	clz	r2, r4
 8016e2a:	0952      	lsrs	r2, r2, #5
 8016e2c:	2c00      	cmp	r4, #0
 8016e2e:	d1ed      	bne.n	8016e0c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016e30:	4803      	ldr	r0, [pc, #12]	; (8016e40 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e36:	b002      	add	sp, #8
 8016e38:	f007 b88e 	b.w	801df58 <get_memory>
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	e7bc      	b.n	8016dba <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016e40:	20016ecc 	.word	0x20016ecc

08016e44 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016e44:	4b12      	ldr	r3, [pc, #72]	; (8016e90 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	b530      	push	{r4, r5, lr}
 8016e4a:	b1f3      	cbz	r3, 8016e8a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016e4c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016e50:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8016e54:	2400      	movs	r4, #0
 8016e56:	e001      	b.n	8016e5c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	b1a3      	cbz	r3, 8016e86 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016e5c:	689a      	ldr	r2, [r3, #8]
 8016e5e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8016e62:	4288      	cmp	r0, r1
 8016e64:	d1f8      	bne.n	8016e58 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016e66:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8016e6a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8016e6e:	4571      	cmp	r1, lr
 8016e70:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016e74:	eb72 050c 	sbcs.w	r5, r2, ip
 8016e78:	daee      	bge.n	8016e58 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016e7a:	461c      	mov	r4, r3
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	468e      	mov	lr, r1
 8016e80:	4694      	mov	ip, r2
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d1ea      	bne.n	8016e5c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016e86:	4620      	mov	r0, r4
 8016e88:	bd30      	pop	{r4, r5, pc}
 8016e8a:	461c      	mov	r4, r3
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	bd30      	pop	{r4, r5, pc}
 8016e90:	20016ecc 	.word	0x20016ecc
 8016e94:	00000000 	.word	0x00000000

08016e98 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016e98:	4b3d      	ldr	r3, [pc, #244]	; (8016f90 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9e:	681f      	ldr	r7, [r3, #0]
 8016ea0:	ed2d 8b06 	vpush	{d8-d10}
 8016ea4:	b08d      	sub	sp, #52	; 0x34
 8016ea6:	f007 fae3 	bl	801e470 <rmw_uros_epoch_nanos>
 8016eaa:	2f00      	cmp	r7, #0
 8016eac:	d05d      	beq.n	8016f6a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016eae:	46b8      	mov	r8, r7
 8016eb0:	4681      	mov	r9, r0
 8016eb2:	468a      	mov	sl, r1
 8016eb4:	ac04      	add	r4, sp, #16
 8016eb6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016eba:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016ebe:	2b04      	cmp	r3, #4
 8016ec0:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8016f78 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016ec4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8016f80 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016ec8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8016f88 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016ecc:	d03f      	beq.n	8016f4e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016ece:	2b05      	cmp	r3, #5
 8016ed0:	d044      	beq.n	8016f5c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016ed2:	2b03      	cmp	r3, #3
 8016ed4:	d03b      	beq.n	8016f4e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016ed6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016eda:	ed8d ab06 	vstr	d10, [sp, #24]
 8016ede:	ab08      	add	r3, sp, #32
 8016ee0:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016ee4:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8016ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016eea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016eee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016ef2:	f006 fe45 	bl	801db80 <rmw_time_equal>
 8016ef6:	b118      	cbz	r0, 8016f00 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016ef8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016efc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016f00:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8016f04:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8016f08:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016f0c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016f10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f14:	f006 fe8a 	bl	801dc2c <rmw_time_total_nsec>
 8016f18:	1830      	adds	r0, r6, r0
 8016f1a:	eb47 0101 	adc.w	r1, r7, r1
 8016f1e:	4548      	cmp	r0, r9
 8016f20:	eb71 030a 	sbcs.w	r3, r1, sl
 8016f24:	db05      	blt.n	8016f32 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016f26:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016f2a:	4591      	cmp	r9, r2
 8016f2c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016f30:	da03      	bge.n	8016f3a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016f32:	4641      	mov	r1, r8
 8016f34:	4816      	ldr	r0, [pc, #88]	; (8016f90 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016f36:	f007 f81f 	bl	801df78 <put_memory>
 8016f3a:	f1bb 0f00 	cmp.w	fp, #0
 8016f3e:	d014      	beq.n	8016f6a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016f40:	46d8      	mov	r8, fp
 8016f42:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016f46:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016f4a:	2b04      	cmp	r3, #4
 8016f4c:	d1bf      	bne.n	8016ece <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8016f4e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016f52:	3340      	adds	r3, #64	; 0x40
 8016f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f5a:	e7c0      	b.n	8016ede <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016f5c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016f60:	3348      	adds	r3, #72	; 0x48
 8016f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f68:	e7b9      	b.n	8016ede <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016f6a:	b00d      	add	sp, #52	; 0x34
 8016f6c:	ecbd 8b06 	vpop	{d8-d10}
 8016f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f74:	f3af 8000 	nop.w
	...
 8016f80:	00000001 	.word	0x00000001
 8016f84:	00000000 	.word	0x00000000
 8016f88:	0000001e 	.word	0x0000001e
 8016f8c:	00000000 	.word	0x00000000
 8016f90:	20016ecc 	.word	0x20016ecc

08016f94 <run_xrce_session>:
 8016f94:	b510      	push	{r4, lr}
 8016f96:	788c      	ldrb	r4, [r1, #2]
 8016f98:	b086      	sub	sp, #24
 8016f9a:	2c01      	cmp	r4, #1
 8016f9c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016fa0:	d00c      	beq.n	8016fbc <run_xrce_session+0x28>
 8016fa2:	2401      	movs	r4, #1
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	f10d 020e 	add.w	r2, sp, #14
 8016faa:	f10d 0317 	add.w	r3, sp, #23
 8016fae:	9400      	str	r4, [sp, #0]
 8016fb0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016fb4:	f001 fd6c 	bl	8018a90 <uxr_run_session_until_all_status>
 8016fb8:	b006      	add	sp, #24
 8016fba:	bd10      	pop	{r4, pc}
 8016fbc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016fc0:	f001 f988 	bl	80182d4 <uxr_flash_output_streams>
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	b006      	add	sp, #24
 8016fc8:	bd10      	pop	{r4, pc}
 8016fca:	bf00      	nop

08016fcc <convert_qos_profile>:
 8016fcc:	7a4a      	ldrb	r2, [r1, #9]
 8016fce:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016fd2:	2a02      	cmp	r2, #2
 8016fd4:	bf18      	it	ne
 8016fd6:	2200      	movne	r2, #0
 8016fd8:	7002      	strb	r2, [r0, #0]
 8016fda:	f1ac 0202 	sub.w	r2, ip, #2
 8016fde:	fab2 f282 	clz	r2, r2
 8016fe2:	0952      	lsrs	r2, r2, #5
 8016fe4:	7042      	strb	r2, [r0, #1]
 8016fe6:	780a      	ldrb	r2, [r1, #0]
 8016fe8:	8889      	ldrh	r1, [r1, #4]
 8016fea:	f1a2 0202 	sub.w	r2, r2, #2
 8016fee:	8081      	strh	r1, [r0, #4]
 8016ff0:	fab2 f282 	clz	r2, r2
 8016ff4:	0952      	lsrs	r2, r2, #5
 8016ff6:	7082      	strb	r2, [r0, #2]
 8016ff8:	4770      	bx	lr
 8016ffa:	bf00      	nop

08016ffc <generate_service_topics>:
 8016ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ffe:	461d      	mov	r5, r3
 8017000:	b083      	sub	sp, #12
 8017002:	4606      	mov	r6, r0
 8017004:	4c11      	ldr	r4, [pc, #68]	; (801704c <generate_service_topics+0x50>)
 8017006:	4608      	mov	r0, r1
 8017008:	4b11      	ldr	r3, [pc, #68]	; (8017050 <generate_service_topics+0x54>)
 801700a:	4617      	mov	r7, r2
 801700c:	4629      	mov	r1, r5
 801700e:	4a11      	ldr	r2, [pc, #68]	; (8017054 <generate_service_topics+0x58>)
 8017010:	9401      	str	r4, [sp, #4]
 8017012:	9600      	str	r6, [sp, #0]
 8017014:	f009 fcfe 	bl	8020a14 <sniprintf>
 8017018:	4a0f      	ldr	r2, [pc, #60]	; (8017058 <generate_service_topics+0x5c>)
 801701a:	4604      	mov	r4, r0
 801701c:	4b0f      	ldr	r3, [pc, #60]	; (801705c <generate_service_topics+0x60>)
 801701e:	9201      	str	r2, [sp, #4]
 8017020:	4638      	mov	r0, r7
 8017022:	4a0c      	ldr	r2, [pc, #48]	; (8017054 <generate_service_topics+0x58>)
 8017024:	4629      	mov	r1, r5
 8017026:	9600      	str	r6, [sp, #0]
 8017028:	f009 fcf4 	bl	8020a14 <sniprintf>
 801702c:	2c00      	cmp	r4, #0
 801702e:	bfa8      	it	ge
 8017030:	42a5      	cmpge	r5, r4
 8017032:	bfcc      	ite	gt
 8017034:	2401      	movgt	r4, #1
 8017036:	2400      	movle	r4, #0
 8017038:	dd05      	ble.n	8017046 <generate_service_topics+0x4a>
 801703a:	2800      	cmp	r0, #0
 801703c:	bfa8      	it	ge
 801703e:	4285      	cmpge	r5, r0
 8017040:	bfcc      	ite	gt
 8017042:	2401      	movgt	r4, #1
 8017044:	2400      	movle	r4, #0
 8017046:	4620      	mov	r0, r4
 8017048:	b003      	add	sp, #12
 801704a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801704c:	080253c0 	.word	0x080253c0
 8017050:	080253bc 	.word	0x080253bc
 8017054:	080253a0 	.word	0x080253a0
 8017058:	080253b4 	.word	0x080253b4
 801705c:	080253b0 	.word	0x080253b0

08017060 <generate_service_types>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	4606      	mov	r6, r0
 8017066:	b087      	sub	sp, #28
 8017068:	461c      	mov	r4, r3
 801706a:	6883      	ldr	r3, [r0, #8]
 801706c:	460d      	mov	r5, r1
 801706e:	4617      	mov	r7, r2
 8017070:	4798      	blx	r3
 8017072:	68f3      	ldr	r3, [r6, #12]
 8017074:	4606      	mov	r6, r0
 8017076:	4798      	blx	r3
 8017078:	2300      	movs	r3, #0
 801707a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801707e:	6872      	ldr	r2, [r6, #4]
 8017080:	702b      	strb	r3, [r5, #0]
 8017082:	6813      	ldr	r3, [r2, #0]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d03f      	beq.n	8017108 <generate_service_types+0xa8>
 8017088:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801711c <generate_service_types+0xbc>
 801708c:	4649      	mov	r1, r9
 801708e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8017124 <generate_service_types+0xc4>
 8017092:	4628      	mov	r0, r5
 8017094:	f8df a090 	ldr.w	sl, [pc, #144]	; 8017128 <generate_service_types+0xc8>
 8017098:	f8cd 8014 	str.w	r8, [sp, #20]
 801709c:	6852      	ldr	r2, [r2, #4]
 801709e:	9100      	str	r1, [sp, #0]
 80170a0:	4621      	mov	r1, r4
 80170a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80170a6:	f8cd a004 	str.w	sl, [sp, #4]
 80170aa:	e9cd 9203 	strd	r9, r2, [sp, #12]
 80170ae:	4a1a      	ldr	r2, [pc, #104]	; (8017118 <generate_service_types+0xb8>)
 80170b0:	f009 fcb0 	bl	8020a14 <sniprintf>
 80170b4:	2300      	movs	r3, #0
 80170b6:	42a0      	cmp	r0, r4
 80170b8:	ea6f 0600 	mvn.w	r6, r0
 80170bc:	703b      	strb	r3, [r7, #0]
 80170be:	f8db 3000 	ldr.w	r3, [fp]
 80170c2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 80170c6:	bfac      	ite	ge
 80170c8:	2500      	movge	r5, #0
 80170ca:	2501      	movlt	r5, #1
 80170cc:	b30b      	cbz	r3, 8017112 <generate_service_types+0xb2>
 80170ce:	4a13      	ldr	r2, [pc, #76]	; (801711c <generate_service_types+0xbc>)
 80170d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80170d4:	402e      	ands	r6, r5
 80170d6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80170da:	4638      	mov	r0, r7
 80170dc:	9104      	str	r1, [sp, #16]
 80170de:	4621      	mov	r1, r4
 80170e0:	e9cd 2a00 	strd	r2, sl, [sp]
 80170e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80170e8:	4a0b      	ldr	r2, [pc, #44]	; (8017118 <generate_service_types+0xb8>)
 80170ea:	f009 fc93 	bl	8020a14 <sniprintf>
 80170ee:	2800      	cmp	r0, #0
 80170f0:	bfb4      	ite	lt
 80170f2:	2600      	movlt	r6, #0
 80170f4:	f006 0601 	andge.w	r6, r6, #1
 80170f8:	42a0      	cmp	r0, r4
 80170fa:	bfac      	ite	ge
 80170fc:	2000      	movge	r0, #0
 80170fe:	f006 0001 	andlt.w	r0, r6, #1
 8017102:	b007      	add	sp, #28
 8017104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017108:	4b05      	ldr	r3, [pc, #20]	; (8017120 <generate_service_types+0xc0>)
 801710a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 801711c <generate_service_types+0xbc>
 801710e:	4619      	mov	r1, r3
 8017110:	e7bd      	b.n	801708e <generate_service_types+0x2e>
 8017112:	4b03      	ldr	r3, [pc, #12]	; (8017120 <generate_service_types+0xc0>)
 8017114:	461a      	mov	r2, r3
 8017116:	e7db      	b.n	80170d0 <generate_service_types+0x70>
 8017118:	08025398 	.word	0x08025398
 801711c:	08025394 	.word	0x08025394
 8017120:	08025418 	.word	0x08025418
 8017124:	080253a8 	.word	0x080253a8
 8017128:	080253ac 	.word	0x080253ac

0801712c <generate_type_name>:
 801712c:	2300      	movs	r3, #0
 801712e:	b530      	push	{r4, r5, lr}
 8017130:	700b      	strb	r3, [r1, #0]
 8017132:	b087      	sub	sp, #28
 8017134:	6803      	ldr	r3, [r0, #0]
 8017136:	4614      	mov	r4, r2
 8017138:	b1bb      	cbz	r3, 801716a <generate_type_name+0x3e>
 801713a:	4a0e      	ldr	r2, [pc, #56]	; (8017174 <generate_type_name+0x48>)
 801713c:	4615      	mov	r5, r2
 801713e:	9500      	str	r5, [sp, #0]
 8017140:	9203      	str	r2, [sp, #12]
 8017142:	4d0d      	ldr	r5, [pc, #52]	; (8017178 <generate_type_name+0x4c>)
 8017144:	6842      	ldr	r2, [r0, #4]
 8017146:	4608      	mov	r0, r1
 8017148:	490c      	ldr	r1, [pc, #48]	; (801717c <generate_type_name+0x50>)
 801714a:	9204      	str	r2, [sp, #16]
 801714c:	9105      	str	r1, [sp, #20]
 801714e:	9102      	str	r1, [sp, #8]
 8017150:	4621      	mov	r1, r4
 8017152:	4a0b      	ldr	r2, [pc, #44]	; (8017180 <generate_type_name+0x54>)
 8017154:	9501      	str	r5, [sp, #4]
 8017156:	f009 fc5d 	bl	8020a14 <sniprintf>
 801715a:	2800      	cmp	r0, #0
 801715c:	bfa8      	it	ge
 801715e:	4284      	cmpge	r4, r0
 8017160:	bfcc      	ite	gt
 8017162:	2001      	movgt	r0, #1
 8017164:	2000      	movle	r0, #0
 8017166:	b007      	add	sp, #28
 8017168:	bd30      	pop	{r4, r5, pc}
 801716a:	4b06      	ldr	r3, [pc, #24]	; (8017184 <generate_type_name+0x58>)
 801716c:	4a01      	ldr	r2, [pc, #4]	; (8017174 <generate_type_name+0x48>)
 801716e:	461d      	mov	r5, r3
 8017170:	e7e5      	b.n	801713e <generate_type_name+0x12>
 8017172:	bf00      	nop
 8017174:	08025394 	.word	0x08025394
 8017178:	080253ac 	.word	0x080253ac
 801717c:	080253a8 	.word	0x080253a8
 8017180:	08025398 	.word	0x08025398
 8017184:	08025418 	.word	0x08025418

08017188 <generate_topic_name>:
 8017188:	b530      	push	{r4, r5, lr}
 801718a:	4614      	mov	r4, r2
 801718c:	b083      	sub	sp, #12
 801718e:	4605      	mov	r5, r0
 8017190:	4b07      	ldr	r3, [pc, #28]	; (80171b0 <generate_topic_name+0x28>)
 8017192:	4a08      	ldr	r2, [pc, #32]	; (80171b4 <generate_topic_name+0x2c>)
 8017194:	4608      	mov	r0, r1
 8017196:	9500      	str	r5, [sp, #0]
 8017198:	4621      	mov	r1, r4
 801719a:	f009 fc3b 	bl	8020a14 <sniprintf>
 801719e:	2800      	cmp	r0, #0
 80171a0:	bfa8      	it	ge
 80171a2:	4284      	cmpge	r4, r0
 80171a4:	bfcc      	ite	gt
 80171a6:	2001      	movgt	r0, #1
 80171a8:	2000      	movle	r0, #0
 80171aa:	b003      	add	sp, #12
 80171ac:	bd30      	pop	{r4, r5, pc}
 80171ae:	bf00      	nop
 80171b0:	080253c8 	.word	0x080253c8
 80171b4:	08024d98 	.word	0x08024d98

080171b8 <is_uxrce_rmw_identifier_valid>:
 80171b8:	b510      	push	{r4, lr}
 80171ba:	4604      	mov	r4, r0
 80171bc:	b140      	cbz	r0, 80171d0 <is_uxrce_rmw_identifier_valid+0x18>
 80171be:	f006 ff33 	bl	801e028 <rmw_get_implementation_identifier>
 80171c2:	4601      	mov	r1, r0
 80171c4:	4620      	mov	r0, r4
 80171c6:	f7e9 f83b 	bl	8000240 <strcmp>
 80171ca:	fab0 f080 	clz	r0, r0
 80171ce:	0940      	lsrs	r0, r0, #5
 80171d0:	bd10      	pop	{r4, pc}
 80171d2:	bf00      	nop

080171d4 <get_message_typesupport_handle>:
 80171d4:	6883      	ldr	r3, [r0, #8]
 80171d6:	4718      	bx	r3

080171d8 <get_message_typesupport_handle_function>:
 80171d8:	b510      	push	{r4, lr}
 80171da:	4604      	mov	r4, r0
 80171dc:	6800      	ldr	r0, [r0, #0]
 80171de:	f7e9 f82f 	bl	8000240 <strcmp>
 80171e2:	2800      	cmp	r0, #0
 80171e4:	bf0c      	ite	eq
 80171e6:	4620      	moveq	r0, r4
 80171e8:	2000      	movne	r0, #0
 80171ea:	bd10      	pop	{r4, pc}

080171ec <get_service_typesupport_handle>:
 80171ec:	6883      	ldr	r3, [r0, #8]
 80171ee:	4718      	bx	r3

080171f0 <get_service_typesupport_handle_function>:
 80171f0:	b510      	push	{r4, lr}
 80171f2:	4604      	mov	r4, r0
 80171f4:	6800      	ldr	r0, [r0, #0]
 80171f6:	f7e9 f823 	bl	8000240 <strcmp>
 80171fa:	2800      	cmp	r0, #0
 80171fc:	bf0c      	ite	eq
 80171fe:	4620      	moveq	r0, r4
 8017200:	2000      	movne	r0, #0
 8017202:	bd10      	pop	{r4, pc}

08017204 <rosidl_runtime_c__String__init>:
 8017204:	b510      	push	{r4, lr}
 8017206:	4604      	mov	r4, r0
 8017208:	b086      	sub	sp, #24
 801720a:	b170      	cbz	r0, 801722a <rosidl_runtime_c__String__init+0x26>
 801720c:	a801      	add	r0, sp, #4
 801720e:	f7fd feef 	bl	8014ff0 <rcutils_get_default_allocator>
 8017212:	9b01      	ldr	r3, [sp, #4]
 8017214:	9905      	ldr	r1, [sp, #20]
 8017216:	2001      	movs	r0, #1
 8017218:	4798      	blx	r3
 801721a:	6020      	str	r0, [r4, #0]
 801721c:	b128      	cbz	r0, 801722a <rosidl_runtime_c__String__init+0x26>
 801721e:	2100      	movs	r1, #0
 8017220:	2201      	movs	r2, #1
 8017222:	7001      	strb	r1, [r0, #0]
 8017224:	4610      	mov	r0, r2
 8017226:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801722a:	b006      	add	sp, #24
 801722c:	bd10      	pop	{r4, pc}
 801722e:	bf00      	nop

08017230 <rosidl_runtime_c__String__fini>:
 8017230:	b320      	cbz	r0, 801727c <rosidl_runtime_c__String__fini+0x4c>
 8017232:	6803      	ldr	r3, [r0, #0]
 8017234:	b510      	push	{r4, lr}
 8017236:	4604      	mov	r4, r0
 8017238:	b086      	sub	sp, #24
 801723a:	b173      	cbz	r3, 801725a <rosidl_runtime_c__String__fini+0x2a>
 801723c:	6883      	ldr	r3, [r0, #8]
 801723e:	b1f3      	cbz	r3, 801727e <rosidl_runtime_c__String__fini+0x4e>
 8017240:	a801      	add	r0, sp, #4
 8017242:	f7fd fed5 	bl	8014ff0 <rcutils_get_default_allocator>
 8017246:	9b02      	ldr	r3, [sp, #8]
 8017248:	9905      	ldr	r1, [sp, #20]
 801724a:	6820      	ldr	r0, [r4, #0]
 801724c:	4798      	blx	r3
 801724e:	2300      	movs	r3, #0
 8017250:	e9c4 3300 	strd	r3, r3, [r4]
 8017254:	60a3      	str	r3, [r4, #8]
 8017256:	b006      	add	sp, #24
 8017258:	bd10      	pop	{r4, pc}
 801725a:	6843      	ldr	r3, [r0, #4]
 801725c:	b9db      	cbnz	r3, 8017296 <rosidl_runtime_c__String__fini+0x66>
 801725e:	6883      	ldr	r3, [r0, #8]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d0f8      	beq.n	8017256 <rosidl_runtime_c__String__fini+0x26>
 8017264:	4b12      	ldr	r3, [pc, #72]	; (80172b0 <rosidl_runtime_c__String__fini+0x80>)
 8017266:	2251      	movs	r2, #81	; 0x51
 8017268:	2101      	movs	r1, #1
 801726a:	4812      	ldr	r0, [pc, #72]	; (80172b4 <rosidl_runtime_c__String__fini+0x84>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	f009 faa6 	bl	80207c0 <fwrite>
 8017274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017278:	f008 f91e 	bl	801f4b8 <exit>
 801727c:	4770      	bx	lr
 801727e:	4b0c      	ldr	r3, [pc, #48]	; (80172b0 <rosidl_runtime_c__String__fini+0x80>)
 8017280:	224c      	movs	r2, #76	; 0x4c
 8017282:	2101      	movs	r1, #1
 8017284:	480c      	ldr	r0, [pc, #48]	; (80172b8 <rosidl_runtime_c__String__fini+0x88>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	68db      	ldr	r3, [r3, #12]
 801728a:	f009 fa99 	bl	80207c0 <fwrite>
 801728e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017292:	f008 f911 	bl	801f4b8 <exit>
 8017296:	4b06      	ldr	r3, [pc, #24]	; (80172b0 <rosidl_runtime_c__String__fini+0x80>)
 8017298:	224e      	movs	r2, #78	; 0x4e
 801729a:	2101      	movs	r1, #1
 801729c:	4807      	ldr	r0, [pc, #28]	; (80172bc <rosidl_runtime_c__String__fini+0x8c>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	68db      	ldr	r3, [r3, #12]
 80172a2:	f009 fa8d 	bl	80207c0 <fwrite>
 80172a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172aa:	f008 f905 	bl	801f4b8 <exit>
 80172ae:	bf00      	nop
 80172b0:	2000099c 	.word	0x2000099c
 80172b4:	0802546c 	.word	0x0802546c
 80172b8:	080253cc 	.word	0x080253cc
 80172bc:	0802541c 	.word	0x0802541c

080172c0 <rosidl_runtime_c__String__assignn>:
 80172c0:	2900      	cmp	r1, #0
 80172c2:	bf18      	it	ne
 80172c4:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 80172c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172cc:	bf0c      	ite	eq
 80172ce:	2401      	moveq	r4, #1
 80172d0:	2400      	movne	r4, #0
 80172d2:	b087      	sub	sp, #28
 80172d4:	2800      	cmp	r0, #0
 80172d6:	bf08      	it	eq
 80172d8:	f044 0401 	orreq.w	r4, r4, #1
 80172dc:	b124      	cbz	r4, 80172e8 <rosidl_runtime_c__String__assignn+0x28>
 80172de:	2400      	movs	r4, #0
 80172e0:	4620      	mov	r0, r4
 80172e2:	b007      	add	sp, #28
 80172e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172e8:	4616      	mov	r6, r2
 80172ea:	4605      	mov	r5, r0
 80172ec:	a801      	add	r0, sp, #4
 80172ee:	460f      	mov	r7, r1
 80172f0:	f106 0901 	add.w	r9, r6, #1
 80172f4:	f7fd fe7c 	bl	8014ff0 <rcutils_get_default_allocator>
 80172f8:	9b03      	ldr	r3, [sp, #12]
 80172fa:	9a05      	ldr	r2, [sp, #20]
 80172fc:	4649      	mov	r1, r9
 80172fe:	6828      	ldr	r0, [r5, #0]
 8017300:	4798      	blx	r3
 8017302:	4680      	mov	r8, r0
 8017304:	2800      	cmp	r0, #0
 8017306:	d0eb      	beq.n	80172e0 <rosidl_runtime_c__String__assignn+0x20>
 8017308:	4639      	mov	r1, r7
 801730a:	4632      	mov	r2, r6
 801730c:	f009 fddf 	bl	8020ece <memcpy>
 8017310:	f808 4006 	strb.w	r4, [r8, r6]
 8017314:	2401      	movs	r4, #1
 8017316:	f8c5 9008 	str.w	r9, [r5, #8]
 801731a:	4620      	mov	r0, r4
 801731c:	e9c5 8600 	strd	r8, r6, [r5]
 8017320:	b007      	add	sp, #28
 8017322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017326:	bf00      	nop

08017328 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801732c:	6805      	ldr	r5, [r0, #0]
 801732e:	4604      	mov	r4, r0
 8017330:	460e      	mov	r6, r1
 8017332:	4628      	mov	r0, r5
 8017334:	f7e8 ff84 	bl	8000240 <strcmp>
 8017338:	b1c8      	cbz	r0, 801736e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801733a:	4b11      	ldr	r3, [pc, #68]	; (8017380 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	429d      	cmp	r5, r3
 8017340:	d112      	bne.n	8017368 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017342:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017346:	f8d8 4000 	ldr.w	r4, [r8]
 801734a:	b16c      	cbz	r4, 8017368 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801734c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017350:	2700      	movs	r7, #0
 8017352:	3d04      	subs	r5, #4
 8017354:	4631      	mov	r1, r6
 8017356:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801735a:	f7e8 ff71 	bl	8000240 <strcmp>
 801735e:	00bb      	lsls	r3, r7, #2
 8017360:	b140      	cbz	r0, 8017374 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8017362:	3701      	adds	r7, #1
 8017364:	42bc      	cmp	r4, r7
 8017366:	d1f5      	bne.n	8017354 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017368:	2000      	movs	r0, #0
 801736a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801736e:	4620      	mov	r0, r4
 8017370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017374:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801737c:	58d3      	ldr	r3, [r2, r3]
 801737e:	4718      	bx	r3
 8017380:	200008b8 	.word	0x200008b8

08017384 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8017384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017388:	6805      	ldr	r5, [r0, #0]
 801738a:	4604      	mov	r4, r0
 801738c:	460e      	mov	r6, r1
 801738e:	4628      	mov	r0, r5
 8017390:	f7e8 ff56 	bl	8000240 <strcmp>
 8017394:	b1c8      	cbz	r0, 80173ca <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8017396:	4b11      	ldr	r3, [pc, #68]	; (80173dc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	429d      	cmp	r5, r3
 801739c:	d112      	bne.n	80173c4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801739e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80173a2:	f8d8 4000 	ldr.w	r4, [r8]
 80173a6:	b16c      	cbz	r4, 80173c4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80173a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80173ac:	2700      	movs	r7, #0
 80173ae:	3d04      	subs	r5, #4
 80173b0:	4631      	mov	r1, r6
 80173b2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80173b6:	f7e8 ff43 	bl	8000240 <strcmp>
 80173ba:	00bb      	lsls	r3, r7, #2
 80173bc:	b140      	cbz	r0, 80173d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80173be:	3701      	adds	r7, #1
 80173c0:	42bc      	cmp	r4, r7
 80173c2:	d1f5      	bne.n	80173b0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80173c4:	2000      	movs	r0, #0
 80173c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ca:	4620      	mov	r0, r4
 80173cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80173d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173d8:	58d3      	ldr	r3, [r2, r3]
 80173da:	4718      	bx	r3
 80173dc:	200008b8 	.word	0x200008b8

080173e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80173e0:	4b04      	ldr	r3, [pc, #16]	; (80173f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80173e2:	681a      	ldr	r2, [r3, #0]
 80173e4:	b10a      	cbz	r2, 80173ea <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80173e6:	4803      	ldr	r0, [pc, #12]	; (80173f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80173e8:	4770      	bx	lr
 80173ea:	4a03      	ldr	r2, [pc, #12]	; (80173f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80173ec:	4801      	ldr	r0, [pc, #4]	; (80173f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80173ee:	6812      	ldr	r2, [r2, #0]
 80173f0:	601a      	str	r2, [r3, #0]
 80173f2:	4770      	bx	lr
 80173f4:	200008c8 	.word	0x200008c8
 80173f8:	200008b8 	.word	0x200008b8

080173fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80173fc:	4a02      	ldr	r2, [pc, #8]	; (8017408 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 80173fe:	4b03      	ldr	r3, [pc, #12]	; (801740c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8017400:	6812      	ldr	r2, [r2, #0]
 8017402:	601a      	str	r2, [r3, #0]
 8017404:	4770      	bx	lr
 8017406:	bf00      	nop
 8017408:	200008b8 	.word	0x200008b8
 801740c:	200008c8 	.word	0x200008c8

08017410 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8017410:	f007 b83c 	b.w	801e48c <std_msgs__msg__String__init>

08017414 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 8017414:	f007 b84c 	b.w	801e4b0 <std_msgs__msg__String__fini>

08017418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017418:	4b04      	ldr	r3, [pc, #16]	; (801742c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801741a:	681a      	ldr	r2, [r3, #0]
 801741c:	b10a      	cbz	r2, 8017422 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801741e:	4803      	ldr	r0, [pc, #12]	; (801742c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017420:	4770      	bx	lr
 8017422:	4a03      	ldr	r2, [pc, #12]	; (8017430 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8017424:	4801      	ldr	r0, [pc, #4]	; (801742c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017426:	6812      	ldr	r2, [r2, #0]
 8017428:	601a      	str	r2, [r3, #0]
 801742a:	4770      	bx	lr
 801742c:	20000910 	.word	0x20000910
 8017430:	200008bc 	.word	0x200008bc

08017434 <_String__max_serialized_size>:
 8017434:	2000      	movs	r0, #0
 8017436:	4770      	bx	lr

08017438 <_String__cdr_serialize>:
 8017438:	b1c8      	cbz	r0, 801746e <_String__cdr_serialize+0x36>
 801743a:	b570      	push	{r4, r5, r6, lr}
 801743c:	6806      	ldr	r6, [r0, #0]
 801743e:	4604      	mov	r4, r0
 8017440:	460d      	mov	r5, r1
 8017442:	b15e      	cbz	r6, 801745c <_String__cdr_serialize+0x24>
 8017444:	4630      	mov	r0, r6
 8017446:	f7e8 ff5b 	bl	8000300 <strlen>
 801744a:	4603      	mov	r3, r0
 801744c:	1c42      	adds	r2, r0, #1
 801744e:	4631      	mov	r1, r6
 8017450:	4628      	mov	r0, r5
 8017452:	6063      	str	r3, [r4, #4]
 8017454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017458:	f7fb bf76 	b.w	8013348 <ucdr_serialize_sequence_char>
 801745c:	4633      	mov	r3, r6
 801745e:	4632      	mov	r2, r6
 8017460:	4631      	mov	r1, r6
 8017462:	4628      	mov	r0, r5
 8017464:	6063      	str	r3, [r4, #4]
 8017466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801746a:	f7fb bf6d 	b.w	8013348 <ucdr_serialize_sequence_char>
 801746e:	4770      	bx	lr

08017470 <get_serialized_size_std_msgs__msg__String>:
 8017470:	b510      	push	{r4, lr}
 8017472:	4604      	mov	r4, r0
 8017474:	b130      	cbz	r0, 8017484 <get_serialized_size_std_msgs__msg__String+0x14>
 8017476:	4608      	mov	r0, r1
 8017478:	2104      	movs	r1, #4
 801747a:	f7fb fef5 	bl	8013268 <ucdr_alignment>
 801747e:	6863      	ldr	r3, [r4, #4]
 8017480:	3305      	adds	r3, #5
 8017482:	4418      	add	r0, r3
 8017484:	bd10      	pop	{r4, pc}
 8017486:	bf00      	nop

08017488 <_String__cdr_deserialize>:
 8017488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801748a:	460c      	mov	r4, r1
 801748c:	b083      	sub	sp, #12
 801748e:	b1a1      	cbz	r1, 80174ba <_String__cdr_deserialize+0x32>
 8017490:	688f      	ldr	r7, [r1, #8]
 8017492:	ab01      	add	r3, sp, #4
 8017494:	6809      	ldr	r1, [r1, #0]
 8017496:	4606      	mov	r6, r0
 8017498:	463a      	mov	r2, r7
 801749a:	f7fb ff67 	bl	801336c <ucdr_deserialize_sequence_char>
 801749e:	9b01      	ldr	r3, [sp, #4]
 80174a0:	4605      	mov	r5, r0
 80174a2:	b920      	cbnz	r0, 80174ae <_String__cdr_deserialize+0x26>
 80174a4:	429f      	cmp	r7, r3
 80174a6:	d30c      	bcc.n	80174c2 <_String__cdr_deserialize+0x3a>
 80174a8:	4628      	mov	r0, r5
 80174aa:	b003      	add	sp, #12
 80174ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ae:	b103      	cbz	r3, 80174b2 <_String__cdr_deserialize+0x2a>
 80174b0:	3b01      	subs	r3, #1
 80174b2:	4628      	mov	r0, r5
 80174b4:	6063      	str	r3, [r4, #4]
 80174b6:	b003      	add	sp, #12
 80174b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ba:	460d      	mov	r5, r1
 80174bc:	4628      	mov	r0, r5
 80174be:	b003      	add	sp, #12
 80174c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c2:	2101      	movs	r1, #1
 80174c4:	4630      	mov	r0, r6
 80174c6:	75b5      	strb	r5, [r6, #22]
 80174c8:	7571      	strb	r1, [r6, #21]
 80174ca:	6065      	str	r5, [r4, #4]
 80174cc:	f7fb fee4 	bl	8013298 <ucdr_align_to>
 80174d0:	4630      	mov	r0, r6
 80174d2:	9901      	ldr	r1, [sp, #4]
 80174d4:	f7fb ff18 	bl	8013308 <ucdr_advance_buffer>
 80174d8:	4628      	mov	r0, r5
 80174da:	b003      	add	sp, #12
 80174dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174de:	bf00      	nop

080174e0 <_String__get_serialized_size>:
 80174e0:	b510      	push	{r4, lr}
 80174e2:	4604      	mov	r4, r0
 80174e4:	b130      	cbz	r0, 80174f4 <_String__get_serialized_size+0x14>
 80174e6:	2104      	movs	r1, #4
 80174e8:	2000      	movs	r0, #0
 80174ea:	f7fb febd 	bl	8013268 <ucdr_alignment>
 80174ee:	6863      	ldr	r3, [r4, #4]
 80174f0:	3305      	adds	r3, #5
 80174f2:	4418      	add	r0, r3
 80174f4:	bd10      	pop	{r4, pc}
 80174f6:	bf00      	nop

080174f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 80174f8:	4800      	ldr	r0, [pc, #0]	; (80174fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 80174fa:	4770      	bx	lr
 80174fc:	2000091c 	.word	0x2000091c

08017500 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8017500:	3800      	subs	r0, #0
 8017502:	bf18      	it	ne
 8017504:	2001      	movne	r0, #1
 8017506:	4770      	bx	lr

08017508 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8017508:	4770      	bx	lr
 801750a:	bf00      	nop

0801750c <custom_test_msgs__srv__AddThreeInts_Response__init>:
 801750c:	3800      	subs	r0, #0
 801750e:	bf18      	it	ne
 8017510:	2001      	movne	r0, #1
 8017512:	4770      	bx	lr

08017514 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop

08017518 <drive_msgs__msg__Omni__init>:
 8017518:	b538      	push	{r3, r4, r5, lr}
 801751a:	4604      	mov	r4, r0
 801751c:	b128      	cbz	r0, 801752a <drive_msgs__msg__Omni__init+0x12>
 801751e:	f7ff fe71 	bl	8017204 <rosidl_runtime_c__String__init>
 8017522:	4605      	mov	r5, r0
 8017524:	b120      	cbz	r0, 8017530 <drive_msgs__msg__Omni__init+0x18>
 8017526:	4628      	mov	r0, r5
 8017528:	bd38      	pop	{r3, r4, r5, pc}
 801752a:	4605      	mov	r5, r0
 801752c:	4628      	mov	r0, r5
 801752e:	bd38      	pop	{r3, r4, r5, pc}
 8017530:	4620      	mov	r0, r4
 8017532:	f7ff fe7d 	bl	8017230 <rosidl_runtime_c__String__fini>
 8017536:	4628      	mov	r0, r5
 8017538:	bd38      	pop	{r3, r4, r5, pc}
 801753a:	bf00      	nop

0801753c <drive_msgs__msg__Omni__fini>:
 801753c:	b108      	cbz	r0, 8017542 <drive_msgs__msg__Omni__fini+0x6>
 801753e:	f7ff be77 	b.w	8017230 <rosidl_runtime_c__String__fini>
 8017542:	4770      	bx	lr

08017544 <drive_msgs__msg__OmniEnc__init>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4604      	mov	r4, r0
 8017548:	b128      	cbz	r0, 8017556 <drive_msgs__msg__OmniEnc__init+0x12>
 801754a:	f7ff fe5b 	bl	8017204 <rosidl_runtime_c__String__init>
 801754e:	4605      	mov	r5, r0
 8017550:	b120      	cbz	r0, 801755c <drive_msgs__msg__OmniEnc__init+0x18>
 8017552:	4628      	mov	r0, r5
 8017554:	bd38      	pop	{r3, r4, r5, pc}
 8017556:	4605      	mov	r5, r0
 8017558:	4628      	mov	r0, r5
 801755a:	bd38      	pop	{r3, r4, r5, pc}
 801755c:	4620      	mov	r0, r4
 801755e:	f7ff fe67 	bl	8017230 <rosidl_runtime_c__String__fini>
 8017562:	4628      	mov	r0, r5
 8017564:	bd38      	pop	{r3, r4, r5, pc}
 8017566:	bf00      	nop

08017568 <drive_msgs__msg__OmniEnc__fini>:
 8017568:	b108      	cbz	r0, 801756e <drive_msgs__msg__OmniEnc__fini+0x6>
 801756a:	f7ff be61 	b.w	8017230 <rosidl_runtime_c__String__fini>
 801756e:	4770      	bx	lr

08017570 <manip_msgs__msg__Cmd__init>:
 8017570:	3800      	subs	r0, #0
 8017572:	bf18      	it	ne
 8017574:	2001      	movne	r0, #1
 8017576:	4770      	bx	lr

08017578 <manip_msgs__msg__Cmd__fini>:
 8017578:	4770      	bx	lr
 801757a:	bf00      	nop

0801757c <ucdr_serialize_endian_array_char>:
 801757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017580:	4619      	mov	r1, r3
 8017582:	461f      	mov	r7, r3
 8017584:	4605      	mov	r5, r0
 8017586:	4690      	mov	r8, r2
 8017588:	f7fb fe16 	bl	80131b8 <ucdr_check_buffer_available_for>
 801758c:	b9e0      	cbnz	r0, 80175c8 <ucdr_serialize_endian_array_char+0x4c>
 801758e:	463e      	mov	r6, r7
 8017590:	e00b      	b.n	80175aa <ucdr_serialize_endian_array_char+0x2e>
 8017592:	4441      	add	r1, r8
 8017594:	68a8      	ldr	r0, [r5, #8]
 8017596:	4622      	mov	r2, r4
 8017598:	1b36      	subs	r6, r6, r4
 801759a:	f009 fc98 	bl	8020ece <memcpy>
 801759e:	68ab      	ldr	r3, [r5, #8]
 80175a0:	6928      	ldr	r0, [r5, #16]
 80175a2:	4423      	add	r3, r4
 80175a4:	4420      	add	r0, r4
 80175a6:	60ab      	str	r3, [r5, #8]
 80175a8:	6128      	str	r0, [r5, #16]
 80175aa:	4631      	mov	r1, r6
 80175ac:	2201      	movs	r2, #1
 80175ae:	4628      	mov	r0, r5
 80175b0:	f7fb fe8c 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 80175b4:	1bb9      	subs	r1, r7, r6
 80175b6:	4604      	mov	r4, r0
 80175b8:	2800      	cmp	r0, #0
 80175ba:	d1ea      	bne.n	8017592 <ucdr_serialize_endian_array_char+0x16>
 80175bc:	2301      	movs	r3, #1
 80175be:	7da8      	ldrb	r0, [r5, #22]
 80175c0:	756b      	strb	r3, [r5, #21]
 80175c2:	4058      	eors	r0, r3
 80175c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175c8:	463a      	mov	r2, r7
 80175ca:	4641      	mov	r1, r8
 80175cc:	68a8      	ldr	r0, [r5, #8]
 80175ce:	f009 fc7e 	bl	8020ece <memcpy>
 80175d2:	68aa      	ldr	r2, [r5, #8]
 80175d4:	692b      	ldr	r3, [r5, #16]
 80175d6:	443a      	add	r2, r7
 80175d8:	443b      	add	r3, r7
 80175da:	60aa      	str	r2, [r5, #8]
 80175dc:	612b      	str	r3, [r5, #16]
 80175de:	e7ed      	b.n	80175bc <ucdr_serialize_endian_array_char+0x40>

080175e0 <ucdr_deserialize_endian_array_char>:
 80175e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e4:	4619      	mov	r1, r3
 80175e6:	461f      	mov	r7, r3
 80175e8:	4605      	mov	r5, r0
 80175ea:	4690      	mov	r8, r2
 80175ec:	f7fb fde4 	bl	80131b8 <ucdr_check_buffer_available_for>
 80175f0:	b9e8      	cbnz	r0, 801762e <ucdr_deserialize_endian_array_char+0x4e>
 80175f2:	463e      	mov	r6, r7
 80175f4:	e00c      	b.n	8017610 <ucdr_deserialize_endian_array_char+0x30>
 80175f6:	eb08 0003 	add.w	r0, r8, r3
 80175fa:	68a9      	ldr	r1, [r5, #8]
 80175fc:	4622      	mov	r2, r4
 80175fe:	1b36      	subs	r6, r6, r4
 8017600:	f009 fc65 	bl	8020ece <memcpy>
 8017604:	68ab      	ldr	r3, [r5, #8]
 8017606:	6928      	ldr	r0, [r5, #16]
 8017608:	4423      	add	r3, r4
 801760a:	4420      	add	r0, r4
 801760c:	60ab      	str	r3, [r5, #8]
 801760e:	6128      	str	r0, [r5, #16]
 8017610:	4631      	mov	r1, r6
 8017612:	2201      	movs	r2, #1
 8017614:	4628      	mov	r0, r5
 8017616:	f7fb fe59 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 801761a:	1bbb      	subs	r3, r7, r6
 801761c:	4604      	mov	r4, r0
 801761e:	2800      	cmp	r0, #0
 8017620:	d1e9      	bne.n	80175f6 <ucdr_deserialize_endian_array_char+0x16>
 8017622:	2301      	movs	r3, #1
 8017624:	7da8      	ldrb	r0, [r5, #22]
 8017626:	756b      	strb	r3, [r5, #21]
 8017628:	4058      	eors	r0, r3
 801762a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762e:	463a      	mov	r2, r7
 8017630:	68a9      	ldr	r1, [r5, #8]
 8017632:	4640      	mov	r0, r8
 8017634:	f009 fc4b 	bl	8020ece <memcpy>
 8017638:	68aa      	ldr	r2, [r5, #8]
 801763a:	692b      	ldr	r3, [r5, #16]
 801763c:	443a      	add	r2, r7
 801763e:	443b      	add	r3, r7
 8017640:	60aa      	str	r2, [r5, #8]
 8017642:	612b      	str	r3, [r5, #16]
 8017644:	e7ed      	b.n	8017622 <ucdr_deserialize_endian_array_char+0x42>
 8017646:	bf00      	nop

08017648 <ucdr_serialize_array_uint8_t>:
 8017648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801764c:	4688      	mov	r8, r1
 801764e:	4611      	mov	r1, r2
 8017650:	4617      	mov	r7, r2
 8017652:	4605      	mov	r5, r0
 8017654:	f7fb fdb0 	bl	80131b8 <ucdr_check_buffer_available_for>
 8017658:	b9e0      	cbnz	r0, 8017694 <ucdr_serialize_array_uint8_t+0x4c>
 801765a:	463e      	mov	r6, r7
 801765c:	e00b      	b.n	8017676 <ucdr_serialize_array_uint8_t+0x2e>
 801765e:	4441      	add	r1, r8
 8017660:	68a8      	ldr	r0, [r5, #8]
 8017662:	4622      	mov	r2, r4
 8017664:	1b36      	subs	r6, r6, r4
 8017666:	f009 fc32 	bl	8020ece <memcpy>
 801766a:	68ab      	ldr	r3, [r5, #8]
 801766c:	6928      	ldr	r0, [r5, #16]
 801766e:	4423      	add	r3, r4
 8017670:	4420      	add	r0, r4
 8017672:	60ab      	str	r3, [r5, #8]
 8017674:	6128      	str	r0, [r5, #16]
 8017676:	4631      	mov	r1, r6
 8017678:	2201      	movs	r2, #1
 801767a:	4628      	mov	r0, r5
 801767c:	f7fb fe26 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 8017680:	1bb9      	subs	r1, r7, r6
 8017682:	4604      	mov	r4, r0
 8017684:	2800      	cmp	r0, #0
 8017686:	d1ea      	bne.n	801765e <ucdr_serialize_array_uint8_t+0x16>
 8017688:	2301      	movs	r3, #1
 801768a:	7da8      	ldrb	r0, [r5, #22]
 801768c:	756b      	strb	r3, [r5, #21]
 801768e:	4058      	eors	r0, r3
 8017690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017694:	463a      	mov	r2, r7
 8017696:	4641      	mov	r1, r8
 8017698:	68a8      	ldr	r0, [r5, #8]
 801769a:	f009 fc18 	bl	8020ece <memcpy>
 801769e:	68aa      	ldr	r2, [r5, #8]
 80176a0:	692b      	ldr	r3, [r5, #16]
 80176a2:	443a      	add	r2, r7
 80176a4:	443b      	add	r3, r7
 80176a6:	60aa      	str	r2, [r5, #8]
 80176a8:	612b      	str	r3, [r5, #16]
 80176aa:	e7ed      	b.n	8017688 <ucdr_serialize_array_uint8_t+0x40>

080176ac <ucdr_serialize_endian_array_uint8_t>:
 80176ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176b0:	4619      	mov	r1, r3
 80176b2:	461f      	mov	r7, r3
 80176b4:	4605      	mov	r5, r0
 80176b6:	4690      	mov	r8, r2
 80176b8:	f7fb fd7e 	bl	80131b8 <ucdr_check_buffer_available_for>
 80176bc:	b9e0      	cbnz	r0, 80176f8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80176be:	463e      	mov	r6, r7
 80176c0:	e00b      	b.n	80176da <ucdr_serialize_endian_array_uint8_t+0x2e>
 80176c2:	4441      	add	r1, r8
 80176c4:	68a8      	ldr	r0, [r5, #8]
 80176c6:	4622      	mov	r2, r4
 80176c8:	1b36      	subs	r6, r6, r4
 80176ca:	f009 fc00 	bl	8020ece <memcpy>
 80176ce:	68ab      	ldr	r3, [r5, #8]
 80176d0:	6928      	ldr	r0, [r5, #16]
 80176d2:	4423      	add	r3, r4
 80176d4:	4420      	add	r0, r4
 80176d6:	60ab      	str	r3, [r5, #8]
 80176d8:	6128      	str	r0, [r5, #16]
 80176da:	4631      	mov	r1, r6
 80176dc:	2201      	movs	r2, #1
 80176de:	4628      	mov	r0, r5
 80176e0:	f7fb fdf4 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 80176e4:	1bb9      	subs	r1, r7, r6
 80176e6:	4604      	mov	r4, r0
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d1ea      	bne.n	80176c2 <ucdr_serialize_endian_array_uint8_t+0x16>
 80176ec:	2301      	movs	r3, #1
 80176ee:	7da8      	ldrb	r0, [r5, #22]
 80176f0:	756b      	strb	r3, [r5, #21]
 80176f2:	4058      	eors	r0, r3
 80176f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f8:	463a      	mov	r2, r7
 80176fa:	4641      	mov	r1, r8
 80176fc:	68a8      	ldr	r0, [r5, #8]
 80176fe:	f009 fbe6 	bl	8020ece <memcpy>
 8017702:	68aa      	ldr	r2, [r5, #8]
 8017704:	692b      	ldr	r3, [r5, #16]
 8017706:	443a      	add	r2, r7
 8017708:	443b      	add	r3, r7
 801770a:	60aa      	str	r2, [r5, #8]
 801770c:	612b      	str	r3, [r5, #16]
 801770e:	e7ed      	b.n	80176ec <ucdr_serialize_endian_array_uint8_t+0x40>

08017710 <ucdr_deserialize_array_uint8_t>:
 8017710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017714:	4688      	mov	r8, r1
 8017716:	4611      	mov	r1, r2
 8017718:	4617      	mov	r7, r2
 801771a:	4605      	mov	r5, r0
 801771c:	f7fb fd4c 	bl	80131b8 <ucdr_check_buffer_available_for>
 8017720:	b9e8      	cbnz	r0, 801775e <ucdr_deserialize_array_uint8_t+0x4e>
 8017722:	463e      	mov	r6, r7
 8017724:	e00c      	b.n	8017740 <ucdr_deserialize_array_uint8_t+0x30>
 8017726:	eb08 0003 	add.w	r0, r8, r3
 801772a:	68a9      	ldr	r1, [r5, #8]
 801772c:	4622      	mov	r2, r4
 801772e:	1b36      	subs	r6, r6, r4
 8017730:	f009 fbcd 	bl	8020ece <memcpy>
 8017734:	68ab      	ldr	r3, [r5, #8]
 8017736:	6928      	ldr	r0, [r5, #16]
 8017738:	4423      	add	r3, r4
 801773a:	4420      	add	r0, r4
 801773c:	60ab      	str	r3, [r5, #8]
 801773e:	6128      	str	r0, [r5, #16]
 8017740:	4631      	mov	r1, r6
 8017742:	2201      	movs	r2, #1
 8017744:	4628      	mov	r0, r5
 8017746:	f7fb fdc1 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 801774a:	1bbb      	subs	r3, r7, r6
 801774c:	4604      	mov	r4, r0
 801774e:	2800      	cmp	r0, #0
 8017750:	d1e9      	bne.n	8017726 <ucdr_deserialize_array_uint8_t+0x16>
 8017752:	2301      	movs	r3, #1
 8017754:	7da8      	ldrb	r0, [r5, #22]
 8017756:	756b      	strb	r3, [r5, #21]
 8017758:	4058      	eors	r0, r3
 801775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801775e:	463a      	mov	r2, r7
 8017760:	68a9      	ldr	r1, [r5, #8]
 8017762:	4640      	mov	r0, r8
 8017764:	f009 fbb3 	bl	8020ece <memcpy>
 8017768:	68aa      	ldr	r2, [r5, #8]
 801776a:	692b      	ldr	r3, [r5, #16]
 801776c:	443a      	add	r2, r7
 801776e:	443b      	add	r3, r7
 8017770:	60aa      	str	r2, [r5, #8]
 8017772:	612b      	str	r3, [r5, #16]
 8017774:	e7ed      	b.n	8017752 <ucdr_deserialize_array_uint8_t+0x42>
 8017776:	bf00      	nop

08017778 <ucdr_deserialize_endian_array_uint8_t>:
 8017778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801777c:	4619      	mov	r1, r3
 801777e:	461f      	mov	r7, r3
 8017780:	4605      	mov	r5, r0
 8017782:	4690      	mov	r8, r2
 8017784:	f7fb fd18 	bl	80131b8 <ucdr_check_buffer_available_for>
 8017788:	b9e8      	cbnz	r0, 80177c6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801778a:	463e      	mov	r6, r7
 801778c:	e00c      	b.n	80177a8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801778e:	eb08 0003 	add.w	r0, r8, r3
 8017792:	68a9      	ldr	r1, [r5, #8]
 8017794:	4622      	mov	r2, r4
 8017796:	1b36      	subs	r6, r6, r4
 8017798:	f009 fb99 	bl	8020ece <memcpy>
 801779c:	68ab      	ldr	r3, [r5, #8]
 801779e:	6928      	ldr	r0, [r5, #16]
 80177a0:	4423      	add	r3, r4
 80177a2:	4420      	add	r0, r4
 80177a4:	60ab      	str	r3, [r5, #8]
 80177a6:	6128      	str	r0, [r5, #16]
 80177a8:	4631      	mov	r1, r6
 80177aa:	2201      	movs	r2, #1
 80177ac:	4628      	mov	r0, r5
 80177ae:	f7fb fd8d 	bl	80132cc <ucdr_check_final_buffer_behavior_array>
 80177b2:	1bbb      	subs	r3, r7, r6
 80177b4:	4604      	mov	r4, r0
 80177b6:	2800      	cmp	r0, #0
 80177b8:	d1e9      	bne.n	801778e <ucdr_deserialize_endian_array_uint8_t+0x16>
 80177ba:	2301      	movs	r3, #1
 80177bc:	7da8      	ldrb	r0, [r5, #22]
 80177be:	756b      	strb	r3, [r5, #21]
 80177c0:	4058      	eors	r0, r3
 80177c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c6:	463a      	mov	r2, r7
 80177c8:	68a9      	ldr	r1, [r5, #8]
 80177ca:	4640      	mov	r0, r8
 80177cc:	f009 fb7f 	bl	8020ece <memcpy>
 80177d0:	68aa      	ldr	r2, [r5, #8]
 80177d2:	692b      	ldr	r3, [r5, #16]
 80177d4:	443a      	add	r2, r7
 80177d6:	443b      	add	r3, r7
 80177d8:	60aa      	str	r2, [r5, #8]
 80177da:	612b      	str	r3, [r5, #16]
 80177dc:	e7ed      	b.n	80177ba <ucdr_deserialize_endian_array_uint8_t+0x42>
 80177de:	bf00      	nop

080177e0 <uxr_buffer_delete_entity>:
 80177e0:	b510      	push	{r4, lr}
 80177e2:	2300      	movs	r3, #0
 80177e4:	b08e      	sub	sp, #56	; 0x38
 80177e6:	4604      	mov	r4, r0
 80177e8:	9103      	str	r1, [sp, #12]
 80177ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80177ee:	2303      	movs	r3, #3
 80177f0:	2204      	movs	r2, #4
 80177f2:	9300      	str	r3, [sp, #0]
 80177f4:	ab06      	add	r3, sp, #24
 80177f6:	f001 fb77 	bl	8018ee8 <uxr_prepare_stream_to_write_submessage>
 80177fa:	b918      	cbnz	r0, 8017804 <uxr_buffer_delete_entity+0x24>
 80177fc:	4604      	mov	r4, r0
 80177fe:	4620      	mov	r0, r4
 8017800:	b00e      	add	sp, #56	; 0x38
 8017802:	bd10      	pop	{r4, pc}
 8017804:	9902      	ldr	r1, [sp, #8]
 8017806:	aa05      	add	r2, sp, #20
 8017808:	4620      	mov	r0, r4
 801780a:	f001 fca9 	bl	8019160 <uxr_init_base_object_request>
 801780e:	4604      	mov	r4, r0
 8017810:	a905      	add	r1, sp, #20
 8017812:	a806      	add	r0, sp, #24
 8017814:	f003 fbae 	bl	801af74 <uxr_serialize_DELETE_Payload>
 8017818:	4620      	mov	r0, r4
 801781a:	b00e      	add	sp, #56	; 0x38
 801781c:	bd10      	pop	{r4, pc}
 801781e:	bf00      	nop

08017820 <uxr_common_create_entity>:
 8017820:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017824:	b510      	push	{r4, lr}
 8017826:	f1bc 0f01 	cmp.w	ip, #1
 801782a:	b08c      	sub	sp, #48	; 0x30
 801782c:	4604      	mov	r4, r0
 801782e:	9202      	str	r2, [sp, #8]
 8017830:	bf0c      	ite	eq
 8017832:	f003 0201 	andeq.w	r2, r3, #1
 8017836:	2200      	movne	r2, #0
 8017838:	330e      	adds	r3, #14
 801783a:	9103      	str	r1, [sp, #12]
 801783c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017840:	441a      	add	r2, r3
 8017842:	ab04      	add	r3, sp, #16
 8017844:	9101      	str	r1, [sp, #4]
 8017846:	2101      	movs	r1, #1
 8017848:	b292      	uxth	r2, r2
 801784a:	9100      	str	r1, [sp, #0]
 801784c:	9903      	ldr	r1, [sp, #12]
 801784e:	f001 fb4b 	bl	8018ee8 <uxr_prepare_stream_to_write_submessage>
 8017852:	b918      	cbnz	r0, 801785c <uxr_common_create_entity+0x3c>
 8017854:	4604      	mov	r4, r0
 8017856:	4620      	mov	r0, r4
 8017858:	b00c      	add	sp, #48	; 0x30
 801785a:	bd10      	pop	{r4, pc}
 801785c:	9902      	ldr	r1, [sp, #8]
 801785e:	4620      	mov	r0, r4
 8017860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017862:	f001 fc7d 	bl	8019160 <uxr_init_base_object_request>
 8017866:	4604      	mov	r4, r0
 8017868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801786a:	a804      	add	r0, sp, #16
 801786c:	f003 fadc 	bl	801ae28 <uxr_serialize_CREATE_Payload>
 8017870:	4620      	mov	r0, r4
 8017872:	b00c      	add	sp, #48	; 0x30
 8017874:	bd10      	pop	{r4, pc}
 8017876:	bf00      	nop

08017878 <uxr_buffer_create_participant_bin>:
 8017878:	b570      	push	{r4, r5, r6, lr}
 801787a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801787e:	4605      	mov	r5, r0
 8017880:	ac11      	add	r4, sp, #68	; 0x44
 8017882:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8017886:	2303      	movs	r3, #3
 8017888:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801788c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017890:	7223      	strb	r3, [r4, #8]
 8017892:	2300      	movs	r3, #0
 8017894:	2201      	movs	r2, #1
 8017896:	f88d 3014 	strb.w	r3, [sp, #20]
 801789a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 801789c:	7122      	strb	r2, [r4, #4]
 801789e:	b1cb      	cbz	r3, 80178d4 <uxr_buffer_create_participant_bin+0x5c>
 80178a0:	f88d 201c 	strb.w	r2, [sp, #28]
 80178a4:	9308      	str	r3, [sp, #32]
 80178a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80178aa:	a915      	add	r1, sp, #84	; 0x54
 80178ac:	a809      	add	r0, sp, #36	; 0x24
 80178ae:	f7fb fcd7 	bl	8013260 <ucdr_init_buffer>
 80178b2:	a905      	add	r1, sp, #20
 80178b4:	a809      	add	r0, sp, #36	; 0x24
 80178b6:	f002 fe6d 	bl	801a594 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80178ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178bc:	9600      	str	r6, [sp, #0]
 80178be:	4628      	mov	r0, r5
 80178c0:	9401      	str	r4, [sp, #4]
 80178c2:	60e3      	str	r3, [r4, #12]
 80178c4:	b29b      	uxth	r3, r3
 80178c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80178ca:	f7ff ffa9 	bl	8017820 <uxr_common_create_entity>
 80178ce:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80178d2:	bd70      	pop	{r4, r5, r6, pc}
 80178d4:	f88d 301c 	strb.w	r3, [sp, #28]
 80178d8:	e7e5      	b.n	80178a6 <uxr_buffer_create_participant_bin+0x2e>
 80178da:	bf00      	nop

080178dc <uxr_buffer_create_topic_bin>:
 80178dc:	b570      	push	{r4, r5, r6, lr}
 80178de:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80178e2:	4605      	mov	r5, r0
 80178e4:	4618      	mov	r0, r3
 80178e6:	9105      	str	r1, [sp, #20]
 80178e8:	a997      	add	r1, sp, #604	; 0x25c
 80178ea:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 80178ee:	ac13      	add	r4, sp, #76	; 0x4c
 80178f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80178f4:	2302      	movs	r3, #2
 80178f6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80178fa:	f000 fa8d 	bl	8017e18 <uxr_object_id_to_raw>
 80178fe:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8017900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017904:	a917      	add	r1, sp, #92	; 0x5c
 8017906:	a80b      	add	r0, sp, #44	; 0x2c
 8017908:	9306      	str	r3, [sp, #24]
 801790a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 801790c:	930a      	str	r3, [sp, #40]	; 0x28
 801790e:	2303      	movs	r3, #3
 8017910:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017914:	2301      	movs	r3, #1
 8017916:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801791a:	2300      	movs	r3, #0
 801791c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017920:	f7fb fc9e 	bl	8013260 <ucdr_init_buffer>
 8017924:	a906      	add	r1, sp, #24
 8017926:	a80b      	add	r0, sp, #44	; 0x2c
 8017928:	f002 fe56 	bl	801a5d8 <uxr_serialize_OBJK_Topic_Binary>
 801792c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801792e:	4628      	mov	r0, r5
 8017930:	9600      	str	r6, [sp, #0]
 8017932:	9316      	str	r3, [sp, #88]	; 0x58
 8017934:	b29b      	uxth	r3, r3
 8017936:	9401      	str	r4, [sp, #4]
 8017938:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801793c:	f7ff ff70 	bl	8017820 <uxr_common_create_entity>
 8017940:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8017944:	bd70      	pop	{r4, r5, r6, pc}
 8017946:	bf00      	nop

08017948 <uxr_buffer_create_publisher_bin>:
 8017948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801794a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 801794e:	2603      	movs	r6, #3
 8017950:	4605      	mov	r5, r0
 8017952:	4618      	mov	r0, r3
 8017954:	9105      	str	r1, [sp, #20]
 8017956:	a992      	add	r1, sp, #584	; 0x248
 8017958:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801795c:	ac0e      	add	r4, sp, #56	; 0x38
 801795e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8017962:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017966:	f000 fa57 	bl	8017e18 <uxr_object_id_to_raw>
 801796a:	2300      	movs	r3, #0
 801796c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017970:	a912      	add	r1, sp, #72	; 0x48
 8017972:	a806      	add	r0, sp, #24
 8017974:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017978:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801797c:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8017980:	f7fb fc6e 	bl	8013260 <ucdr_init_buffer>
 8017984:	a993      	add	r1, sp, #588	; 0x24c
 8017986:	a806      	add	r0, sp, #24
 8017988:	f002 feda 	bl	801a740 <uxr_serialize_OBJK_Publisher_Binary>
 801798c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801798e:	4628      	mov	r0, r5
 8017990:	9700      	str	r7, [sp, #0]
 8017992:	9311      	str	r3, [sp, #68]	; 0x44
 8017994:	b29b      	uxth	r3, r3
 8017996:	9401      	str	r4, [sp, #4]
 8017998:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801799c:	f7ff ff40 	bl	8017820 <uxr_common_create_entity>
 80179a0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80179a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179a6:	bf00      	nop

080179a8 <uxr_buffer_create_subscriber_bin>:
 80179a8:	b570      	push	{r4, r5, r6, lr}
 80179aa:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80179ae:	4605      	mov	r5, r0
 80179b0:	4618      	mov	r0, r3
 80179b2:	9105      	str	r1, [sp, #20]
 80179b4:	a992      	add	r1, sp, #584	; 0x248
 80179b6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80179ba:	ac0e      	add	r4, sp, #56	; 0x38
 80179bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80179c0:	2304      	movs	r3, #4
 80179c2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80179c6:	f000 fa27 	bl	8017e18 <uxr_object_id_to_raw>
 80179ca:	2300      	movs	r3, #0
 80179cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80179d0:	a912      	add	r1, sp, #72	; 0x48
 80179d2:	a806      	add	r0, sp, #24
 80179d4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80179d8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80179dc:	2303      	movs	r3, #3
 80179de:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80179e2:	f7fb fc3d 	bl	8013260 <ucdr_init_buffer>
 80179e6:	a993      	add	r1, sp, #588	; 0x24c
 80179e8:	a806      	add	r0, sp, #24
 80179ea:	f002 ff59 	bl	801a8a0 <uxr_serialize_OBJK_Subscriber_Binary>
 80179ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179f0:	4628      	mov	r0, r5
 80179f2:	9600      	str	r6, [sp, #0]
 80179f4:	9311      	str	r3, [sp, #68]	; 0x44
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	9401      	str	r4, [sp, #4]
 80179fa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80179fe:	f7ff ff0f 	bl	8017820 <uxr_common_create_entity>
 8017a02:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8017a06:	bd70      	pop	{r4, r5, r6, pc}

08017a08 <uxr_buffer_create_datawriter_bin>:
 8017a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017a10:	4606      	mov	r6, r0
 8017a12:	4618      	mov	r0, r3
 8017a14:	2703      	movs	r7, #3
 8017a16:	ac1d      	add	r4, sp, #116	; 0x74
 8017a18:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8017a1c:	9105      	str	r1, [sp, #20]
 8017a1e:	a9a1      	add	r1, sp, #644	; 0x284
 8017a20:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8017a24:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a28:	2305      	movs	r3, #5
 8017a2a:	7123      	strb	r3, [r4, #4]
 8017a2c:	f000 f9f4 	bl	8017e18 <uxr_object_id_to_raw>
 8017a30:	a90e      	add	r1, sp, #56	; 0x38
 8017a32:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8017a34:	7227      	strb	r7, [r4, #8]
 8017a36:	f000 f9ef 	bl	8017e18 <uxr_object_id_to_raw>
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017a40:	3d00      	subs	r5, #0
 8017a42:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8017a46:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017a4a:	bf18      	it	ne
 8017a4c:	2501      	movne	r5, #1
 8017a4e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017a52:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017a56:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017a5a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017a5e:	2301      	movs	r3, #1
 8017a60:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017a64:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017a68:	bb8a      	cbnz	r2, 8017ace <uxr_buffer_create_datawriter_bin+0xc6>
 8017a6a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017a6e:	f04f 0c13 	mov.w	ip, #19
 8017a72:	250b      	movs	r5, #11
 8017a74:	2221      	movs	r2, #33	; 0x21
 8017a76:	2111      	movs	r1, #17
 8017a78:	2009      	movs	r0, #9
 8017a7a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017a7e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017a82:	b923      	cbnz	r3, 8017a8e <uxr_buffer_create_datawriter_bin+0x86>
 8017a84:	4672      	mov	r2, lr
 8017a86:	4661      	mov	r1, ip
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017a8e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d025      	beq.n	8017ae2 <uxr_buffer_create_datawriter_bin+0xda>
 8017a96:	2b03      	cmp	r3, #3
 8017a98:	d029      	beq.n	8017aee <uxr_buffer_create_datawriter_bin+0xe6>
 8017a9a:	b32b      	cbz	r3, 8017ae8 <uxr_buffer_create_datawriter_bin+0xe0>
 8017a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017aa0:	a921      	add	r1, sp, #132	; 0x84
 8017aa2:	a806      	add	r0, sp, #24
 8017aa4:	f7fb fbdc 	bl	8013260 <ucdr_init_buffer>
 8017aa8:	a90e      	add	r1, sp, #56	; 0x38
 8017aaa:	a806      	add	r0, sp, #24
 8017aac:	f002 ffaa 	bl	801aa04 <uxr_serialize_OBJK_DataWriter_Binary>
 8017ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ab2:	f8cd 8000 	str.w	r8, [sp]
 8017ab6:	4630      	mov	r0, r6
 8017ab8:	9401      	str	r4, [sp, #4]
 8017aba:	60e3      	str	r3, [r4, #12]
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017ac2:	f7ff fead 	bl	8017820 <uxr_common_create_entity>
 8017ac6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ace:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017ad2:	f04f 0c12 	mov.w	ip, #18
 8017ad6:	250a      	movs	r5, #10
 8017ad8:	2220      	movs	r2, #32
 8017ada:	2110      	movs	r1, #16
 8017adc:	2008      	movs	r0, #8
 8017ade:	2702      	movs	r7, #2
 8017ae0:	e7cd      	b.n	8017a7e <uxr_buffer_create_datawriter_bin+0x76>
 8017ae2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017ae6:	e7d9      	b.n	8017a9c <uxr_buffer_create_datawriter_bin+0x94>
 8017ae8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017aec:	e7d6      	b.n	8017a9c <uxr_buffer_create_datawriter_bin+0x94>
 8017aee:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017af2:	e7d3      	b.n	8017a9c <uxr_buffer_create_datawriter_bin+0x94>

08017af4 <uxr_buffer_create_datareader_bin>:
 8017af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017af8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017afc:	4606      	mov	r6, r0
 8017afe:	4618      	mov	r0, r3
 8017b00:	2703      	movs	r7, #3
 8017b02:	ac1f      	add	r4, sp, #124	; 0x7c
 8017b04:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8017b08:	9105      	str	r1, [sp, #20]
 8017b0a:	a9a3      	add	r1, sp, #652	; 0x28c
 8017b0c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8017b10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017b14:	2306      	movs	r3, #6
 8017b16:	7123      	strb	r3, [r4, #4]
 8017b18:	f000 f97e 	bl	8017e18 <uxr_object_id_to_raw>
 8017b1c:	a90e      	add	r1, sp, #56	; 0x38
 8017b1e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017b20:	7227      	strb	r7, [r4, #8]
 8017b22:	f000 f979 	bl	8017e18 <uxr_object_id_to_raw>
 8017b26:	2300      	movs	r3, #0
 8017b28:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017b2c:	3d00      	subs	r5, #0
 8017b2e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8017b32:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8017b36:	bf18      	it	ne
 8017b38:	2501      	movne	r5, #1
 8017b3a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017b3e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017b42:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017b46:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017b4a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017b4e:	2301      	movs	r3, #1
 8017b50:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017b54:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017b58:	bb8a      	cbnz	r2, 8017bbe <uxr_buffer_create_datareader_bin+0xca>
 8017b5a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017b5e:	f04f 0c13 	mov.w	ip, #19
 8017b62:	250b      	movs	r5, #11
 8017b64:	2221      	movs	r2, #33	; 0x21
 8017b66:	2111      	movs	r1, #17
 8017b68:	2009      	movs	r0, #9
 8017b6a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017b6e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017b72:	b923      	cbnz	r3, 8017b7e <uxr_buffer_create_datareader_bin+0x8a>
 8017b74:	4672      	mov	r2, lr
 8017b76:	4661      	mov	r1, ip
 8017b78:	4628      	mov	r0, r5
 8017b7a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017b7e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017b82:	2b01      	cmp	r3, #1
 8017b84:	d025      	beq.n	8017bd2 <uxr_buffer_create_datareader_bin+0xde>
 8017b86:	2b03      	cmp	r3, #3
 8017b88:	d029      	beq.n	8017bde <uxr_buffer_create_datareader_bin+0xea>
 8017b8a:	b32b      	cbz	r3, 8017bd8 <uxr_buffer_create_datareader_bin+0xe4>
 8017b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b90:	a923      	add	r1, sp, #140	; 0x8c
 8017b92:	a806      	add	r0, sp, #24
 8017b94:	f7fb fb64 	bl	8013260 <ucdr_init_buffer>
 8017b98:	a90e      	add	r1, sp, #56	; 0x38
 8017b9a:	a806      	add	r0, sp, #24
 8017b9c:	f002 fef6 	bl	801a98c <uxr_serialize_OBJK_DataReader_Binary>
 8017ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ba2:	f8cd 8000 	str.w	r8, [sp]
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	9401      	str	r4, [sp, #4]
 8017baa:	60e3      	str	r3, [r4, #12]
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017bb2:	f7ff fe35 	bl	8017820 <uxr_common_create_entity>
 8017bb6:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bbe:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017bc2:	f04f 0c12 	mov.w	ip, #18
 8017bc6:	250a      	movs	r5, #10
 8017bc8:	2220      	movs	r2, #32
 8017bca:	2110      	movs	r1, #16
 8017bcc:	2008      	movs	r0, #8
 8017bce:	2702      	movs	r7, #2
 8017bd0:	e7cd      	b.n	8017b6e <uxr_buffer_create_datareader_bin+0x7a>
 8017bd2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017bd6:	e7d9      	b.n	8017b8c <uxr_buffer_create_datareader_bin+0x98>
 8017bd8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017bdc:	e7d6      	b.n	8017b8c <uxr_buffer_create_datareader_bin+0x98>
 8017bde:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017be2:	e7d3      	b.n	8017b8c <uxr_buffer_create_datareader_bin+0x98>

08017be4 <uxr_buffer_create_replier_bin>:
 8017be4:	b570      	push	{r4, r5, r6, lr}
 8017be6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017bea:	4605      	mov	r5, r0
 8017bec:	4618      	mov	r0, r3
 8017bee:	9105      	str	r1, [sp, #20]
 8017bf0:	a999      	add	r1, sp, #612	; 0x264
 8017bf2:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8017bf6:	ac15      	add	r4, sp, #84	; 0x54
 8017bf8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017bfc:	2308      	movs	r3, #8
 8017bfe:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8017c02:	f000 f909 	bl	8017e18 <uxr_object_id_to_raw>
 8017c06:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8017c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c0c:	a919      	add	r1, sp, #100	; 0x64
 8017c0e:	a80d      	add	r0, sp, #52	; 0x34
 8017c10:	9306      	str	r3, [sp, #24]
 8017c12:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8017c14:	9307      	str	r3, [sp, #28]
 8017c16:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8017c18:	9308      	str	r3, [sp, #32]
 8017c1a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8017c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8017c1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c20:	930a      	str	r3, [sp, #40]	; 0x28
 8017c22:	2301      	movs	r3, #1
 8017c24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017c28:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017c2c:	2303      	movs	r3, #3
 8017c2e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8017c32:	f7fb fb15 	bl	8013260 <ucdr_init_buffer>
 8017c36:	a906      	add	r1, sp, #24
 8017c38:	a80d      	add	r0, sp, #52	; 0x34
 8017c3a:	f002 ff0f 	bl	801aa5c <uxr_serialize_OBJK_Replier_Binary>
 8017c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c40:	4628      	mov	r0, r5
 8017c42:	9600      	str	r6, [sp, #0]
 8017c44:	9318      	str	r3, [sp, #96]	; 0x60
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	9401      	str	r4, [sp, #4]
 8017c4a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c4e:	f7ff fde7 	bl	8017820 <uxr_common_create_entity>
 8017c52:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8017c56:	bd70      	pop	{r4, r5, r6, pc}

08017c58 <get_custom_error>:
 8017c58:	4b01      	ldr	r3, [pc, #4]	; (8017c60 <get_custom_error+0x8>)
 8017c5a:	7818      	ldrb	r0, [r3, #0]
 8017c5c:	4770      	bx	lr
 8017c5e:	bf00      	nop
 8017c60:	20016f0c 	.word	0x20016f0c

08017c64 <recv_custom_msg>:
 8017c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c68:	4693      	mov	fp, r2
 8017c6a:	b089      	sub	sp, #36	; 0x24
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	4604      	mov	r4, r0
 8017c70:	468a      	mov	sl, r1
 8017c72:	9305      	str	r3, [sp, #20]
 8017c74:	f88d 201e 	strb.w	r2, [sp, #30]
 8017c78:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017c7c:	b322      	cbz	r2, 8017cc8 <recv_custom_msg+0x64>
 8017c7e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8017c82:	f10d 081f 	add.w	r8, sp, #31
 8017c86:	af05      	add	r7, sp, #20
 8017c88:	f10d 061e 	add.w	r6, sp, #30
 8017c8c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017c90:	e002      	b.n	8017c98 <recv_custom_msg+0x34>
 8017c92:	9b05      	ldr	r3, [sp, #20]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	dd0f      	ble.n	8017cb8 <recv_custom_msg+0x54>
 8017c98:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8017c9c:	4623      	mov	r3, r4
 8017c9e:	4622      	mov	r2, r4
 8017ca0:	4648      	mov	r0, r9
 8017ca2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017ca6:	e9cd 5600 	strd	r5, r6, [sp]
 8017caa:	f001 fc6f 	bl	801958c <uxr_read_framed_msg>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d0ef      	beq.n	8017c92 <recv_custom_msg+0x2e>
 8017cb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017cb6:	b1b3      	cbz	r3, 8017ce6 <recv_custom_msg+0x82>
 8017cb8:	4b0f      	ldr	r3, [pc, #60]	; (8017cf8 <recv_custom_msg+0x94>)
 8017cba:	2000      	movs	r0, #0
 8017cbc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017cc0:	701a      	strb	r2, [r3, #0]
 8017cc2:	b009      	add	sp, #36	; 0x24
 8017cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc8:	f10d 021f 	add.w	r2, sp, #31
 8017ccc:	4601      	mov	r1, r0
 8017cce:	9200      	str	r2, [sp, #0]
 8017cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017cd4:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017cd8:	47a8      	blx	r5
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	d0ec      	beq.n	8017cb8 <recv_custom_msg+0x54>
 8017cde:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d1e8      	bne.n	8017cb8 <recv_custom_msg+0x54>
 8017ce6:	f8cb 0000 	str.w	r0, [fp]
 8017cea:	2001      	movs	r0, #1
 8017cec:	f8ca 4000 	str.w	r4, [sl]
 8017cf0:	b009      	add	sp, #36	; 0x24
 8017cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf6:	bf00      	nop
 8017cf8:	20016f0c 	.word	0x20016f0c

08017cfc <send_custom_msg>:
 8017cfc:	b530      	push	{r4, r5, lr}
 8017cfe:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8017d02:	b087      	sub	sp, #28
 8017d04:	4614      	mov	r4, r2
 8017d06:	b995      	cbnz	r5, 8017d2e <send_custom_msg+0x32>
 8017d08:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017d0c:	f10d 0317 	add.w	r3, sp, #23
 8017d10:	47a8      	blx	r5
 8017d12:	1e03      	subs	r3, r0, #0
 8017d14:	bf18      	it	ne
 8017d16:	2301      	movne	r3, #1
 8017d18:	42a0      	cmp	r0, r4
 8017d1a:	bf18      	it	ne
 8017d1c:	2300      	movne	r3, #0
 8017d1e:	b91b      	cbnz	r3, 8017d28 <send_custom_msg+0x2c>
 8017d20:	4a0a      	ldr	r2, [pc, #40]	; (8017d4c <send_custom_msg+0x50>)
 8017d22:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017d26:	7011      	strb	r1, [r2, #0]
 8017d28:	4618      	mov	r0, r3
 8017d2a:	b007      	add	sp, #28
 8017d2c:	bd30      	pop	{r4, r5, pc}
 8017d2e:	460b      	mov	r3, r1
 8017d30:	2200      	movs	r2, #0
 8017d32:	f10d 0117 	add.w	r1, sp, #23
 8017d36:	9400      	str	r4, [sp, #0]
 8017d38:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017d3c:	4602      	mov	r2, r0
 8017d3e:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017d42:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017d46:	f001 fa43 	bl	80191d0 <uxr_write_framed_msg>
 8017d4a:	e7e2      	b.n	8017d12 <send_custom_msg+0x16>
 8017d4c:	20016f0c 	.word	0x20016f0c

08017d50 <uxr_set_custom_transport_callbacks>:
 8017d50:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017d54:	9901      	ldr	r1, [sp, #4]
 8017d56:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017d5a:	9b00      	ldr	r3, [sp, #0]
 8017d5c:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8017d60:	4770      	bx	lr
 8017d62:	bf00      	nop

08017d64 <uxr_init_custom_transport>:
 8017d64:	b538      	push	{r3, r4, r5, lr}
 8017d66:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017d6a:	b303      	cbz	r3, 8017dae <uxr_init_custom_transport+0x4a>
 8017d6c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017d70:	4604      	mov	r4, r0
 8017d72:	b1e2      	cbz	r2, 8017dae <uxr_init_custom_transport+0x4a>
 8017d74:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8017d78:	b1ca      	cbz	r2, 8017dae <uxr_init_custom_transport+0x4a>
 8017d7a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8017d7e:	b1b2      	cbz	r2, 8017dae <uxr_init_custom_transport+0x4a>
 8017d80:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8017d84:	4798      	blx	r3
 8017d86:	4605      	mov	r5, r0
 8017d88:	b188      	cbz	r0, 8017dae <uxr_init_custom_transport+0x4a>
 8017d8a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8017d8e:	b98b      	cbnz	r3, 8017db4 <uxr_init_custom_transport+0x50>
 8017d90:	4b0b      	ldr	r3, [pc, #44]	; (8017dc0 <uxr_init_custom_transport+0x5c>)
 8017d92:	4628      	mov	r0, r5
 8017d94:	490b      	ldr	r1, [pc, #44]	; (8017dc4 <uxr_init_custom_transport+0x60>)
 8017d96:	4a0c      	ldr	r2, [pc, #48]	; (8017dc8 <uxr_init_custom_transport+0x64>)
 8017d98:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8017d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017da0:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8017da4:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8017da8:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8017dac:	bd38      	pop	{r3, r4, r5, pc}
 8017dae:	2500      	movs	r5, #0
 8017db0:	4628      	mov	r0, r5
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
 8017db4:	2100      	movs	r1, #0
 8017db6:	f204 2002 	addw	r0, r4, #514	; 0x202
 8017dba:	f001 fa03 	bl	80191c4 <uxr_init_framing_io>
 8017dbe:	e7e7      	b.n	8017d90 <uxr_init_custom_transport+0x2c>
 8017dc0:	08017c65 	.word	0x08017c65
 8017dc4:	08017cfd 	.word	0x08017cfd
 8017dc8:	08017c59 	.word	0x08017c59

08017dcc <uxr_close_custom_transport>:
 8017dcc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8017dd0:	4718      	bx	r3
 8017dd2:	bf00      	nop

08017dd4 <uxr_object_id>:
 8017dd4:	b082      	sub	sp, #8
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	f88d 1006 	strb.w	r1, [sp, #6]
 8017ddc:	f360 030f 	bfi	r3, r0, #0, #16
 8017de0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017de4:	f362 431f 	bfi	r3, r2, #16, #16
 8017de8:	4618      	mov	r0, r3
 8017dea:	b002      	add	sp, #8
 8017dec:	4770      	bx	lr
 8017dee:	bf00      	nop

08017df0 <uxr_object_id_from_raw>:
 8017df0:	7843      	ldrb	r3, [r0, #1]
 8017df2:	b082      	sub	sp, #8
 8017df4:	7801      	ldrb	r1, [r0, #0]
 8017df6:	2000      	movs	r0, #0
 8017df8:	091a      	lsrs	r2, r3, #4
 8017dfa:	f003 030f 	and.w	r3, r3, #15
 8017dfe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017e02:	f88d 3006 	strb.w	r3, [sp, #6]
 8017e06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017e0a:	f362 000f 	bfi	r0, r2, #0, #16
 8017e0e:	f363 401f 	bfi	r0, r3, #16, #16
 8017e12:	b002      	add	sp, #8
 8017e14:	4770      	bx	lr
 8017e16:	bf00      	nop

08017e18 <uxr_object_id_to_raw>:
 8017e18:	4602      	mov	r2, r0
 8017e1a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017e1e:	b082      	sub	sp, #8
 8017e20:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017e24:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017e28:	f881 c000 	strb.w	ip, [r1]
 8017e2c:	7048      	strb	r0, [r1, #1]
 8017e2e:	b002      	add	sp, #8
 8017e30:	4770      	bx	lr
 8017e32:	bf00      	nop

08017e34 <uxr_buffer_request_data>:
 8017e34:	b530      	push	{r4, r5, lr}
 8017e36:	b095      	sub	sp, #84	; 0x54
 8017e38:	4604      	mov	r4, r0
 8017e3a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017e3c:	9303      	str	r3, [sp, #12]
 8017e3e:	2d00      	cmp	r5, #0
 8017e40:	f88d 301c 	strb.w	r3, [sp, #28]
 8017e44:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017e48:	f04f 0200 	mov.w	r2, #0
 8017e4c:	bf14      	ite	ne
 8017e4e:	2101      	movne	r1, #1
 8017e50:	4611      	moveq	r1, r2
 8017e52:	f88d 201d 	strb.w	r2, [sp, #29]
 8017e56:	f88d 201e 	strb.w	r2, [sp, #30]
 8017e5a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017e5e:	d021      	beq.n	8017ea4 <uxr_buffer_request_data+0x70>
 8017e60:	686b      	ldr	r3, [r5, #4]
 8017e62:	2210      	movs	r2, #16
 8017e64:	6829      	ldr	r1, [r5, #0]
 8017e66:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017e6a:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8017e6e:	2308      	movs	r3, #8
 8017e70:	2100      	movs	r1, #0
 8017e72:	4620      	mov	r0, r4
 8017e74:	e9cd 3100 	strd	r3, r1, [sp]
 8017e78:	ab0c      	add	r3, sp, #48	; 0x30
 8017e7a:	9905      	ldr	r1, [sp, #20]
 8017e7c:	f001 f834 	bl	8018ee8 <uxr_prepare_stream_to_write_submessage>
 8017e80:	b918      	cbnz	r0, 8017e8a <uxr_buffer_request_data+0x56>
 8017e82:	4604      	mov	r4, r0
 8017e84:	4620      	mov	r0, r4
 8017e86:	b015      	add	sp, #84	; 0x54
 8017e88:	bd30      	pop	{r4, r5, pc}
 8017e8a:	9904      	ldr	r1, [sp, #16]
 8017e8c:	aa06      	add	r2, sp, #24
 8017e8e:	4620      	mov	r0, r4
 8017e90:	f001 f966 	bl	8019160 <uxr_init_base_object_request>
 8017e94:	4604      	mov	r4, r0
 8017e96:	a906      	add	r1, sp, #24
 8017e98:	a80c      	add	r0, sp, #48	; 0x30
 8017e9a:	f003 f915 	bl	801b0c8 <uxr_serialize_READ_DATA_Payload>
 8017e9e:	4620      	mov	r0, r4
 8017ea0:	b015      	add	sp, #84	; 0x54
 8017ea2:	bd30      	pop	{r4, r5, pc}
 8017ea4:	2208      	movs	r2, #8
 8017ea6:	e7e2      	b.n	8017e6e <uxr_buffer_request_data+0x3a>

08017ea8 <uxr_buffer_cancel_data>:
 8017ea8:	b510      	push	{r4, lr}
 8017eaa:	2300      	movs	r3, #0
 8017eac:	b094      	sub	sp, #80	; 0x50
 8017eae:	4604      	mov	r4, r0
 8017eb0:	9205      	str	r2, [sp, #20]
 8017eb2:	9301      	str	r3, [sp, #4]
 8017eb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017eb8:	f88d 301e 	strb.w	r3, [sp, #30]
 8017ebc:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8017ec0:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017ec4:	2308      	movs	r3, #8
 8017ec6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017eca:	2201      	movs	r2, #1
 8017ecc:	9300      	str	r3, [sp, #0]
 8017ece:	ab0c      	add	r3, sp, #48	; 0x30
 8017ed0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017ed4:	2210      	movs	r2, #16
 8017ed6:	f001 f807 	bl	8018ee8 <uxr_prepare_stream_to_write_submessage>
 8017eda:	b918      	cbnz	r0, 8017ee4 <uxr_buffer_cancel_data+0x3c>
 8017edc:	4604      	mov	r4, r0
 8017ede:	4620      	mov	r0, r4
 8017ee0:	b014      	add	sp, #80	; 0x50
 8017ee2:	bd10      	pop	{r4, pc}
 8017ee4:	9905      	ldr	r1, [sp, #20]
 8017ee6:	aa06      	add	r2, sp, #24
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f001 f939 	bl	8019160 <uxr_init_base_object_request>
 8017eee:	4604      	mov	r4, r0
 8017ef0:	a906      	add	r1, sp, #24
 8017ef2:	a80c      	add	r0, sp, #48	; 0x30
 8017ef4:	f003 f8e8 	bl	801b0c8 <uxr_serialize_READ_DATA_Payload>
 8017ef8:	4620      	mov	r0, r4
 8017efa:	b014      	add	sp, #80	; 0x50
 8017efc:	bd10      	pop	{r4, pc}
 8017efe:	bf00      	nop

08017f00 <read_submessage_format>:
 8017f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f04:	b095      	sub	sp, #84	; 0x54
 8017f06:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8017f0a:	b113      	cbz	r3, 8017f12 <read_submessage_format+0x12>
 8017f0c:	b015      	add	sp, #84	; 0x54
 8017f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f12:	4606      	mov	r6, r0
 8017f14:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017f16:	460c      	mov	r4, r1
 8017f18:	4615      	mov	r5, r2
 8017f1a:	9004      	str	r0, [sp, #16]
 8017f1c:	4699      	mov	r9, r3
 8017f1e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017f20:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8017f24:	9005      	str	r0, [sp, #20]
 8017f26:	a80c      	add	r0, sp, #48	; 0x30
 8017f28:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017f2c:	1a52      	subs	r2, r2, r1
 8017f2e:	f7fb f997 	bl	8013260 <ucdr_init_buffer>
 8017f32:	a80c      	add	r0, sp, #48	; 0x30
 8017f34:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017f38:	f7fb f966 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 8017f3c:	69e2      	ldr	r2, [r4, #28]
 8017f3e:	b19a      	cbz	r2, 8017f68 <read_submessage_format+0x68>
 8017f40:	f1b8 0f07 	cmp.w	r8, #7
 8017f44:	f882 9014 	strb.w	r9, [r2, #20]
 8017f48:	d040      	beq.n	8017fcc <read_submessage_format+0xcc>
 8017f4a:	f1b8 0f08 	cmp.w	r8, #8
 8017f4e:	d02e      	beq.n	8017fae <read_submessage_format+0xae>
 8017f50:	f1b8 0f06 	cmp.w	r8, #6
 8017f54:	d011      	beq.n	8017f7a <read_submessage_format+0x7a>
 8017f56:	2301      	movs	r3, #1
 8017f58:	7513      	strb	r3, [r2, #20]
 8017f5a:	4629      	mov	r1, r5
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	f7fb f9d3 	bl	8013308 <ucdr_advance_buffer>
 8017f62:	b015      	add	sp, #84	; 0x54
 8017f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f68:	f1b8 0f07 	cmp.w	r8, #7
 8017f6c:	d02e      	beq.n	8017fcc <read_submessage_format+0xcc>
 8017f6e:	f1b8 0f08 	cmp.w	r8, #8
 8017f72:	d01c      	beq.n	8017fae <read_submessage_format+0xae>
 8017f74:	f1b8 0f06 	cmp.w	r8, #6
 8017f78:	d1ef      	bne.n	8017f5a <read_submessage_format+0x5a>
 8017f7a:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8017f7e:	f1b8 0f00 	cmp.w	r8, #0
 8017f82:	d011      	beq.n	8017fa8 <read_submessage_format+0xa8>
 8017f84:	ab0c      	add	r3, sp, #48	; 0x30
 8017f86:	9501      	str	r5, [sp, #4]
 8017f88:	463a      	mov	r2, r7
 8017f8a:	4630      	mov	r0, r6
 8017f8c:	9300      	str	r3, [sp, #0]
 8017f8e:	2306      	movs	r3, #6
 8017f90:	f88d 3016 	strb.w	r3, [sp, #22]
 8017f94:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8017f98:	9302      	str	r3, [sp, #8]
 8017f9a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017f9e:	47c0      	blx	r8
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	69e2      	ldr	r2, [r4, #28]
 8017fa4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017fa8:	2a00      	cmp	r2, #0
 8017faa:	d1d4      	bne.n	8017f56 <read_submessage_format+0x56>
 8017fac:	e7d5      	b.n	8017f5a <read_submessage_format+0x5a>
 8017fae:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d0f8      	beq.n	8017fa8 <read_submessage_format+0xa8>
 8017fb6:	a80c      	add	r0, sp, #48	; 0x30
 8017fb8:	a906      	add	r1, sp, #24
 8017fba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017fbe:	f003 f94f 	bl	801b260 <uxr_deserialize_SampleIdentity>
 8017fc2:	b9a0      	cbnz	r0, 8017fee <read_submessage_format+0xee>
 8017fc4:	69e2      	ldr	r2, [r4, #28]
 8017fc6:	2a00      	cmp	r2, #0
 8017fc8:	d1c5      	bne.n	8017f56 <read_submessage_format+0x56>
 8017fca:	e7c6      	b.n	8017f5a <read_submessage_format+0x5a>
 8017fcc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8017fd0:	b13b      	cbz	r3, 8017fe2 <read_submessage_format+0xe2>
 8017fd2:	a906      	add	r1, sp, #24
 8017fd4:	a80c      	add	r0, sp, #48	; 0x30
 8017fd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017fda:	f002 fe15 	bl	801ac08 <uxr_deserialize_BaseObjectRequest>
 8017fde:	bb60      	cbnz	r0, 801803a <read_submessage_format+0x13a>
 8017fe0:	69e2      	ldr	r2, [r4, #28]
 8017fe2:	68a3      	ldr	r3, [r4, #8]
 8017fe4:	442b      	add	r3, r5
 8017fe6:	60a3      	str	r3, [r4, #8]
 8017fe8:	2a00      	cmp	r2, #0
 8017fea:	d1b4      	bne.n	8017f56 <read_submessage_format+0x56>
 8017fec:	e7b5      	b.n	8017f5a <read_submessage_format+0x5a>
 8017fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ff0:	a80c      	add	r0, sp, #48	; 0x30
 8017ff2:	eba8 0803 	sub.w	r8, r8, r3
 8017ff6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017ffa:	44a8      	add	r8, r5
 8017ffc:	1a52      	subs	r2, r2, r1
 8017ffe:	f7fb f92f 	bl	8013260 <ucdr_init_buffer>
 8018002:	a80c      	add	r0, sp, #48	; 0x30
 8018004:	fa1f f888 	uxth.w	r8, r8
 8018008:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801800c:	f7fb f8fc 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 8018010:	ab0c      	add	r3, sp, #48	; 0x30
 8018012:	2108      	movs	r1, #8
 8018014:	f8cd 8004 	str.w	r8, [sp, #4]
 8018018:	9300      	str	r3, [sp, #0]
 801801a:	463a      	mov	r2, r7
 801801c:	f88d 1016 	strb.w	r1, [sp, #22]
 8018020:	ab06      	add	r3, sp, #24
 8018022:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8018026:	4630      	mov	r0, r6
 8018028:	9102      	str	r1, [sp, #8]
 801802a:	9905      	ldr	r1, [sp, #20]
 801802c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8018030:	47b8      	blx	r7
 8018032:	2301      	movs	r3, #1
 8018034:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018038:	e7c4      	b.n	8017fc4 <read_submessage_format+0xc4>
 801803a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801803e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018040:	a80c      	add	r0, sp, #48	; 0x30
 8018042:	1a52      	subs	r2, r2, r1
 8018044:	eba8 0803 	sub.w	r8, r8, r3
 8018048:	f7fb f90a 	bl	8013260 <ucdr_init_buffer>
 801804c:	a80c      	add	r0, sp, #48	; 0x30
 801804e:	44a8      	add	r8, r5
 8018050:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018054:	f7fb f8d8 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 8018058:	ab0c      	add	r3, sp, #48	; 0x30
 801805a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801805e:	fa1f f888 	uxth.w	r8, r8
 8018062:	9300      	str	r3, [sp, #0]
 8018064:	463a      	mov	r2, r7
 8018066:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801806a:	4630      	mov	r0, r6
 801806c:	f8cd 8004 	str.w	r8, [sp, #4]
 8018070:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018074:	2107      	movs	r1, #7
 8018076:	f88d 1016 	strb.w	r1, [sp, #22]
 801807a:	b29b      	uxth	r3, r3
 801807c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8018080:	9102      	str	r1, [sp, #8]
 8018082:	9905      	ldr	r1, [sp, #20]
 8018084:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8018088:	47b8      	blx	r7
 801808a:	2301      	movs	r3, #1
 801808c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018090:	e7a6      	b.n	8017fe0 <read_submessage_format+0xe0>
 8018092:	bf00      	nop

08018094 <on_get_fragmentation_info>:
 8018094:	b500      	push	{lr}
 8018096:	b08b      	sub	sp, #44	; 0x2c
 8018098:	4601      	mov	r1, r0
 801809a:	2204      	movs	r2, #4
 801809c:	a802      	add	r0, sp, #8
 801809e:	f7fb f8df 	bl	8013260 <ucdr_init_buffer>
 80180a2:	f10d 0305 	add.w	r3, sp, #5
 80180a6:	f10d 0206 	add.w	r2, sp, #6
 80180aa:	a901      	add	r1, sp, #4
 80180ac:	a802      	add	r0, sp, #8
 80180ae:	f001 fe5d 	bl	8019d6c <uxr_read_submessage_header>
 80180b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80180b6:	2b0d      	cmp	r3, #13
 80180b8:	d003      	beq.n	80180c2 <on_get_fragmentation_info+0x2e>
 80180ba:	2000      	movs	r0, #0
 80180bc:	b00b      	add	sp, #44	; 0x2c
 80180be:	f85d fb04 	ldr.w	pc, [sp], #4
 80180c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80180c6:	f013 0f02 	tst.w	r3, #2
 80180ca:	bf14      	ite	ne
 80180cc:	2002      	movne	r0, #2
 80180ce:	2001      	moveq	r0, #1
 80180d0:	b00b      	add	sp, #44	; 0x2c
 80180d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80180d6:	bf00      	nop

080180d8 <read_submessage_get_info>:
 80180d8:	b570      	push	{r4, r5, r6, lr}
 80180da:	2500      	movs	r5, #0
 80180dc:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80180e0:	460e      	mov	r6, r1
 80180e2:	4604      	mov	r4, r0
 80180e4:	f44f 7224 	mov.w	r2, #656	; 0x290
 80180e8:	4629      	mov	r1, r5
 80180ea:	a810      	add	r0, sp, #64	; 0x40
 80180ec:	9503      	str	r5, [sp, #12]
 80180ee:	9504      	str	r5, [sp, #16]
 80180f0:	f008 fe20 	bl	8020d34 <memset>
 80180f4:	a903      	add	r1, sp, #12
 80180f6:	4630      	mov	r0, r6
 80180f8:	f002 ff26 	bl	801af48 <uxr_deserialize_GET_INFO_Payload>
 80180fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018100:	4620      	mov	r0, r4
 8018102:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8018106:	f001 f823 	bl	8019150 <uxr_session_header_offset>
 801810a:	462b      	mov	r3, r5
 801810c:	220c      	movs	r2, #12
 801810e:	a905      	add	r1, sp, #20
 8018110:	9000      	str	r0, [sp, #0]
 8018112:	a808      	add	r0, sp, #32
 8018114:	f7fb f892 	bl	801323c <ucdr_init_buffer_origin_offset>
 8018118:	a910      	add	r1, sp, #64	; 0x40
 801811a:	a808      	add	r0, sp, #32
 801811c:	f002 ff88 	bl	801b030 <uxr_serialize_INFO_Payload>
 8018120:	9b08      	ldr	r3, [sp, #32]
 8018122:	462a      	mov	r2, r5
 8018124:	4629      	mov	r1, r5
 8018126:	4620      	mov	r0, r4
 8018128:	f000 ffbe 	bl	80190a8 <uxr_stamp_session_header>
 801812c:	a808      	add	r0, sp, #32
 801812e:	f7fb f8c5 	bl	80132bc <ucdr_buffer_length>
 8018132:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018134:	4602      	mov	r2, r0
 8018136:	a905      	add	r1, sp, #20
 8018138:	e9d3 0400 	ldrd	r0, r4, [r3]
 801813c:	47a0      	blx	r4
 801813e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8018142:	bd70      	pop	{r4, r5, r6, pc}

08018144 <write_submessage_acknack.isra.0>:
 8018144:	b570      	push	{r4, r5, r6, lr}
 8018146:	b092      	sub	sp, #72	; 0x48
 8018148:	4605      	mov	r5, r0
 801814a:	460e      	mov	r6, r1
 801814c:	4614      	mov	r4, r2
 801814e:	f000 ffff 	bl	8019150 <uxr_session_header_offset>
 8018152:	a905      	add	r1, sp, #20
 8018154:	9000      	str	r0, [sp, #0]
 8018156:	2300      	movs	r3, #0
 8018158:	a80a      	add	r0, sp, #40	; 0x28
 801815a:	2211      	movs	r2, #17
 801815c:	f7fb f86e 	bl	801323c <ucdr_init_buffer_origin_offset>
 8018160:	2218      	movs	r2, #24
 8018162:	2300      	movs	r3, #0
 8018164:	210a      	movs	r1, #10
 8018166:	fb02 5404 	mla	r4, r2, r4, r5
 801816a:	a80a      	add	r0, sp, #40	; 0x28
 801816c:	2205      	movs	r2, #5
 801816e:	3450      	adds	r4, #80	; 0x50
 8018170:	f001 fde2 	bl	8019d38 <uxr_buffer_submessage_header>
 8018174:	a903      	add	r1, sp, #12
 8018176:	4620      	mov	r0, r4
 8018178:	f006 fb50 	bl	801e81c <uxr_compute_acknack>
 801817c:	ba40      	rev16	r0, r0
 801817e:	a903      	add	r1, sp, #12
 8018180:	f88d 6010 	strb.w	r6, [sp, #16]
 8018184:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018188:	a80a      	add	r0, sp, #40	; 0x28
 801818a:	f002 ffc3 	bl	801b114 <uxr_serialize_ACKNACK_Payload>
 801818e:	2200      	movs	r2, #0
 8018190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018192:	4628      	mov	r0, r5
 8018194:	4611      	mov	r1, r2
 8018196:	f000 ff87 	bl	80190a8 <uxr_stamp_session_header>
 801819a:	a80a      	add	r0, sp, #40	; 0x28
 801819c:	f7fb f88e 	bl	80132bc <ucdr_buffer_length>
 80181a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80181a2:	4602      	mov	r2, r0
 80181a4:	a905      	add	r1, sp, #20
 80181a6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80181aa:	47a0      	blx	r4
 80181ac:	b012      	add	sp, #72	; 0x48
 80181ae:	bd70      	pop	{r4, r5, r6, pc}

080181b0 <uxr_init_session>:
 80181b0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80181e8 <uxr_init_session+0x38>
 80181b4:	2300      	movs	r3, #0
 80181b6:	b510      	push	{r4, lr}
 80181b8:	4604      	mov	r4, r0
 80181ba:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80181be:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80181c2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80181c6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80181ca:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80181ce:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80181d2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80181d6:	2181      	movs	r1, #129	; 0x81
 80181d8:	f000 feca 	bl	8018f70 <uxr_init_session_info>
 80181dc:	f104 0008 	add.w	r0, r4, #8
 80181e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181e4:	f001 bcc4 	b.w	8019b70 <uxr_init_stream_storage>
	...

080181f0 <uxr_set_status_callback>:
 80181f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80181f4:	4770      	bx	lr
 80181f6:	bf00      	nop

080181f8 <uxr_set_topic_callback>:
 80181f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80181fc:	4770      	bx	lr
 80181fe:	bf00      	nop

08018200 <uxr_set_request_callback>:
 8018200:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8018204:	4770      	bx	lr
 8018206:	bf00      	nop

08018208 <uxr_set_reply_callback>:
 8018208:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801820c:	4770      	bx	lr
 801820e:	bf00      	nop

08018210 <uxr_create_output_best_effort_stream>:
 8018210:	b510      	push	{r4, lr}
 8018212:	4604      	mov	r4, r0
 8018214:	b084      	sub	sp, #16
 8018216:	e9cd 2100 	strd	r2, r1, [sp]
 801821a:	f000 ff99 	bl	8019150 <uxr_session_header_offset>
 801821e:	4603      	mov	r3, r0
 8018220:	f104 0008 	add.w	r0, r4, #8
 8018224:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018228:	b004      	add	sp, #16
 801822a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801822e:	f001 bce5 	b.w	8019bfc <uxr_add_output_best_effort_buffer>
 8018232:	bf00      	nop

08018234 <uxr_create_output_reliable_stream>:
 8018234:	b530      	push	{r4, r5, lr}
 8018236:	b089      	sub	sp, #36	; 0x24
 8018238:	4604      	mov	r4, r0
 801823a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801823e:	9303      	str	r3, [sp, #12]
 8018240:	f000 ff86 	bl	8019150 <uxr_session_header_offset>
 8018244:	4605      	mov	r5, r0
 8018246:	9905      	ldr	r1, [sp, #20]
 8018248:	f104 0008 	add.w	r0, r4, #8
 801824c:	9500      	str	r5, [sp, #0]
 801824e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018252:	f001 fce7 	bl	8019c24 <uxr_add_output_reliable_buffer>
 8018256:	2200      	movs	r2, #0
 8018258:	fa5f fc80 	uxtb.w	ip, r0
 801825c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018260:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018264:	0e03      	lsrs	r3, r0, #24
 8018266:	f36c 0207 	bfi	r2, ip, #0, #8
 801826a:	f364 220f 	bfi	r2, r4, #8, #8
 801826e:	f361 4217 	bfi	r2, r1, #16, #8
 8018272:	f363 621f 	bfi	r2, r3, #24, #8
 8018276:	4610      	mov	r0, r2
 8018278:	b009      	add	sp, #36	; 0x24
 801827a:	bd30      	pop	{r4, r5, pc}

0801827c <uxr_create_input_best_effort_stream>:
 801827c:	b082      	sub	sp, #8
 801827e:	3008      	adds	r0, #8
 8018280:	b002      	add	sp, #8
 8018282:	f001 bce9 	b.w	8019c58 <uxr_add_input_best_effort_buffer>
 8018286:	bf00      	nop

08018288 <uxr_create_input_reliable_stream>:
 8018288:	b510      	push	{r4, lr}
 801828a:	4c0c      	ldr	r4, [pc, #48]	; (80182bc <uxr_create_input_reliable_stream+0x34>)
 801828c:	b084      	sub	sp, #16
 801828e:	3008      	adds	r0, #8
 8018290:	9400      	str	r4, [sp, #0]
 8018292:	f001 fcf7 	bl	8019c84 <uxr_add_input_reliable_buffer>
 8018296:	2200      	movs	r2, #0
 8018298:	fa5f fe80 	uxtb.w	lr, r0
 801829c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80182a0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80182a4:	0e03      	lsrs	r3, r0, #24
 80182a6:	f36e 0207 	bfi	r2, lr, #0, #8
 80182aa:	f36c 220f 	bfi	r2, ip, #8, #8
 80182ae:	f361 4217 	bfi	r2, r1, #16, #8
 80182b2:	f363 621f 	bfi	r2, r3, #24, #8
 80182b6:	4610      	mov	r0, r2
 80182b8:	b004      	add	sp, #16
 80182ba:	bd10      	pop	{r4, pc}
 80182bc:	08018095 	.word	0x08018095

080182c0 <uxr_epoch_nanos>:
 80182c0:	b510      	push	{r4, lr}
 80182c2:	4604      	mov	r4, r0
 80182c4:	f001 fd9a 	bl	8019dfc <uxr_nanos>
 80182c8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80182cc:	1ac0      	subs	r0, r0, r3
 80182ce:	eb61 0102 	sbc.w	r1, r1, r2
 80182d2:	bd10      	pop	{r4, pc}

080182d4 <uxr_flash_output_streams>:
 80182d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182d8:	7e03      	ldrb	r3, [r0, #24]
 80182da:	b084      	sub	sp, #16
 80182dc:	4604      	mov	r4, r0
 80182de:	b1fb      	cbz	r3, 8018320 <uxr_flash_output_streams+0x4c>
 80182e0:	f04f 0900 	mov.w	r9, #0
 80182e4:	f10d 0802 	add.w	r8, sp, #2
 80182e8:	af03      	add	r7, sp, #12
 80182ea:	ae02      	add	r6, sp, #8
 80182ec:	4648      	mov	r0, r9
 80182ee:	2201      	movs	r2, #1
 80182f0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80182f4:	4611      	mov	r1, r2
 80182f6:	3508      	adds	r5, #8
 80182f8:	f001 fbe0 	bl	8019abc <uxr_stream_id>
 80182fc:	4684      	mov	ip, r0
 80182fe:	4643      	mov	r3, r8
 8018300:	463a      	mov	r2, r7
 8018302:	4631      	mov	r1, r6
 8018304:	4628      	mov	r0, r5
 8018306:	f8cd c004 	str.w	ip, [sp, #4]
 801830a:	f006 fb11 	bl	801e930 <uxr_prepare_best_effort_buffer_to_send>
 801830e:	2800      	cmp	r0, #0
 8018310:	d13d      	bne.n	801838e <uxr_flash_output_streams+0xba>
 8018312:	f109 0901 	add.w	r9, r9, #1
 8018316:	7e23      	ldrb	r3, [r4, #24]
 8018318:	fa5f f089 	uxtb.w	r0, r9
 801831c:	4283      	cmp	r3, r0
 801831e:	d8e6      	bhi.n	80182ee <uxr_flash_output_streams+0x1a>
 8018320:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018324:	b383      	cbz	r3, 8018388 <uxr_flash_output_streams+0xb4>
 8018326:	f04f 0900 	mov.w	r9, #0
 801832a:	f10d 0802 	add.w	r8, sp, #2
 801832e:	af03      	add	r7, sp, #12
 8018330:	ae02      	add	r6, sp, #8
 8018332:	4648      	mov	r0, r9
 8018334:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018338:	2201      	movs	r2, #1
 801833a:	2102      	movs	r1, #2
 801833c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018340:	f001 fbbc 	bl	8019abc <uxr_stream_id>
 8018344:	9001      	str	r0, [sp, #4]
 8018346:	3520      	adds	r5, #32
 8018348:	e00c      	b.n	8018364 <uxr_flash_output_streams+0x90>
 801834a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801834e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018352:	9b02      	ldr	r3, [sp, #8]
 8018354:	f000 fea8 	bl	80190a8 <uxr_stamp_session_header>
 8018358:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801835a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801835e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8018362:	47d0      	blx	sl
 8018364:	4643      	mov	r3, r8
 8018366:	463a      	mov	r2, r7
 8018368:	4631      	mov	r1, r6
 801836a:	4628      	mov	r0, r5
 801836c:	f006 fd04 	bl	801ed78 <uxr_prepare_next_reliable_buffer_to_send>
 8018370:	4603      	mov	r3, r0
 8018372:	4620      	mov	r0, r4
 8018374:	2b00      	cmp	r3, #0
 8018376:	d1e8      	bne.n	801834a <uxr_flash_output_streams+0x76>
 8018378:	f109 0901 	add.w	r9, r9, #1
 801837c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018380:	fa5f f089 	uxtb.w	r0, r9
 8018384:	4283      	cmp	r3, r0
 8018386:	d8d5      	bhi.n	8018334 <uxr_flash_output_streams+0x60>
 8018388:	b004      	add	sp, #16
 801838a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801838e:	9b02      	ldr	r3, [sp, #8]
 8018390:	4620      	mov	r0, r4
 8018392:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018396:	f109 0901 	add.w	r9, r9, #1
 801839a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801839e:	f000 fe83 	bl	80190a8 <uxr_stamp_session_header>
 80183a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80183a4:	9a03      	ldr	r2, [sp, #12]
 80183a6:	685d      	ldr	r5, [r3, #4]
 80183a8:	6818      	ldr	r0, [r3, #0]
 80183aa:	9902      	ldr	r1, [sp, #8]
 80183ac:	47a8      	blx	r5
 80183ae:	7e23      	ldrb	r3, [r4, #24]
 80183b0:	fa5f f089 	uxtb.w	r0, r9
 80183b4:	4283      	cmp	r3, r0
 80183b6:	d89a      	bhi.n	80182ee <uxr_flash_output_streams+0x1a>
 80183b8:	e7b2      	b.n	8018320 <uxr_flash_output_streams+0x4c>
 80183ba:	bf00      	nop

080183bc <read_submessage_info>:
 80183bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183c0:	460d      	mov	r5, r1
 80183c2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80183c6:	4606      	mov	r6, r0
 80183c8:	4669      	mov	r1, sp
 80183ca:	4628      	mov	r0, r5
 80183cc:	f002 fcce 	bl	801ad6c <uxr_deserialize_BaseObjectReply>
 80183d0:	4604      	mov	r4, r0
 80183d2:	a902      	add	r1, sp, #8
 80183d4:	4628      	mov	r0, r5
 80183d6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80183da:	f7f9 fc51 	bl	8011c80 <ucdr_deserialize_bool>
 80183de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80183e2:	4004      	ands	r4, r0
 80183e4:	b2e4      	uxtb	r4, r4
 80183e6:	b95b      	cbnz	r3, 8018400 <read_submessage_info+0x44>
 80183e8:	a987      	add	r1, sp, #540	; 0x21c
 80183ea:	4628      	mov	r0, r5
 80183ec:	f7f9 fc48 	bl	8011c80 <ucdr_deserialize_bool>
 80183f0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80183f4:	4680      	mov	r8, r0
 80183f6:	b94b      	cbnz	r3, 801840c <read_submessage_info+0x50>
 80183f8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80183fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018400:	a903      	add	r1, sp, #12
 8018402:	4628      	mov	r0, r5
 8018404:	f002 fb5e 	bl	801aac4 <uxr_deserialize_ObjectVariant>
 8018408:	4004      	ands	r4, r0
 801840a:	e7ed      	b.n	80183e8 <read_submessage_info+0x2c>
 801840c:	a988      	add	r1, sp, #544	; 0x220
 801840e:	4628      	mov	r0, r5
 8018410:	f7f9 fc64 	bl	8011cdc <ucdr_deserialize_uint8_t>
 8018414:	ea14 0f08 	tst.w	r4, r8
 8018418:	d0ee      	beq.n	80183f8 <read_submessage_info+0x3c>
 801841a:	2800      	cmp	r0, #0
 801841c:	d0ec      	beq.n	80183f8 <read_submessage_info+0x3c>
 801841e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8018422:	2b0d      	cmp	r3, #13
 8018424:	d1e8      	bne.n	80183f8 <read_submessage_info+0x3c>
 8018426:	a98a      	add	r1, sp, #552	; 0x228
 8018428:	4628      	mov	r0, r5
 801842a:	f7fa f9fd 	bl	8012828 <ucdr_deserialize_int16_t>
 801842e:	b138      	cbz	r0, 8018440 <read_submessage_info+0x84>
 8018430:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8018434:	2b00      	cmp	r3, #0
 8018436:	dd06      	ble.n	8018446 <read_submessage_info+0x8a>
 8018438:	2f00      	cmp	r7, #0
 801843a:	bf14      	ite	ne
 801843c:	2001      	movne	r0, #1
 801843e:	2002      	moveq	r0, #2
 8018440:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8018444:	e7d8      	b.n	80183f8 <read_submessage_info+0x3c>
 8018446:	2000      	movs	r0, #0
 8018448:	e7fa      	b.n	8018440 <read_submessage_info+0x84>
 801844a:	bf00      	nop

0801844c <read_submessage_list>:
 801844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018450:	4604      	mov	r4, r0
 8018452:	b097      	sub	sp, #92	; 0x5c
 8018454:	460d      	mov	r5, r1
 8018456:	4ec1      	ldr	r6, [pc, #772]	; (801875c <read_submessage_list+0x310>)
 8018458:	9209      	str	r2, [sp, #36]	; 0x24
 801845a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801845e:	aa0c      	add	r2, sp, #48	; 0x30
 8018460:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8018464:	4628      	mov	r0, r5
 8018466:	f001 fc81 	bl	8019d6c <uxr_read_submessage_header>
 801846a:	2800      	cmp	r0, #0
 801846c:	f000 8142 	beq.w	80186f4 <read_submessage_list+0x2a8>
 8018470:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8018474:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018478:	3b02      	subs	r3, #2
 801847a:	2b0d      	cmp	r3, #13
 801847c:	d8ed      	bhi.n	801845a <read_submessage_list+0xe>
 801847e:	a101      	add	r1, pc, #4	; (adr r1, 8018484 <read_submessage_list+0x38>)
 8018480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018484:	080186eb 	.word	0x080186eb
 8018488:	0801845b 	.word	0x0801845b
 801848c:	080186db 	.word	0x080186db
 8018490:	08018679 	.word	0x08018679
 8018494:	0801866f 	.word	0x0801866f
 8018498:	0801845b 	.word	0x0801845b
 801849c:	0801845b 	.word	0x0801845b
 80184a0:	080185c5 	.word	0x080185c5
 80184a4:	08018557 	.word	0x08018557
 80184a8:	08018517 	.word	0x08018517
 80184ac:	0801845b 	.word	0x0801845b
 80184b0:	0801845b 	.word	0x0801845b
 80184b4:	0801845b 	.word	0x0801845b
 80184b8:	080184bd 	.word	0x080184bd
 80184bc:	a910      	add	r1, sp, #64	; 0x40
 80184be:	4628      	mov	r0, r5
 80184c0:	f002 fe7c 	bl	801b1bc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80184c4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 80184c8:	f1b8 0f00 	cmp.w	r8, #0
 80184cc:	f000 811a 	beq.w	8018704 <read_submessage_list+0x2b8>
 80184d0:	f001 fc94 	bl	8019dfc <uxr_nanos>
 80184d4:	4602      	mov	r2, r0
 80184d6:	460b      	mov	r3, r1
 80184d8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80184dc:	2100      	movs	r1, #0
 80184de:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80184e0:	9006      	str	r0, [sp, #24]
 80184e2:	468c      	mov	ip, r1
 80184e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80184e6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80184ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80184ec:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80184f0:	468c      	mov	ip, r1
 80184f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80184f4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80184f8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80184fc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8018500:	fbc7 0106 	smlal	r0, r1, r7, r6
 8018504:	e9cd 0100 	strd	r0, r1, [sp]
 8018508:	4620      	mov	r0, r4
 801850a:	47c0      	blx	r8
 801850c:	f04f 0301 	mov.w	r3, #1
 8018510:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8018514:	e7a1      	b.n	801845a <read_submessage_list+0xe>
 8018516:	a910      	add	r1, sp, #64	; 0x40
 8018518:	4628      	mov	r0, r5
 801851a:	f002 fe3b 	bl	801b194 <uxr_deserialize_HEARTBEAT_Payload>
 801851e:	2100      	movs	r1, #0
 8018520:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018524:	f001 faf8 	bl	8019b18 <uxr_stream_id_from_raw>
 8018528:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801852c:	900f      	str	r0, [sp, #60]	; 0x3c
 801852e:	f104 0008 	add.w	r0, r4, #8
 8018532:	4641      	mov	r1, r8
 8018534:	f001 fbde 	bl	8019cf4 <uxr_get_input_reliable_stream>
 8018538:	2800      	cmp	r0, #0
 801853a:	d08e      	beq.n	801845a <read_submessage_list+0xe>
 801853c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8018540:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018544:	f006 f95e 	bl	801e804 <uxr_process_heartbeat>
 8018548:	4642      	mov	r2, r8
 801854a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801854e:	4620      	mov	r0, r4
 8018550:	f7ff fdf8 	bl	8018144 <write_submessage_acknack.isra.0>
 8018554:	e781      	b.n	801845a <read_submessage_list+0xe>
 8018556:	a910      	add	r1, sp, #64	; 0x40
 8018558:	4628      	mov	r0, r5
 801855a:	f002 fdf3 	bl	801b144 <uxr_deserialize_ACKNACK_Payload>
 801855e:	2100      	movs	r1, #0
 8018560:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018564:	f001 fad8 	bl	8019b18 <uxr_stream_id_from_raw>
 8018568:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801856c:	900d      	str	r0, [sp, #52]	; 0x34
 801856e:	f104 0008 	add.w	r0, r4, #8
 8018572:	f001 fba9 	bl	8019cc8 <uxr_get_output_reliable_stream>
 8018576:	4680      	mov	r8, r0
 8018578:	2800      	cmp	r0, #0
 801857a:	f43f af6e 	beq.w	801845a <read_submessage_list+0xe>
 801857e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8018582:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018586:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801858a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801858e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018592:	b289      	uxth	r1, r1
 8018594:	f006 fc98 	bl	801eec8 <uxr_process_acknack>
 8018598:	4640      	mov	r0, r8
 801859a:	f006 fc59 	bl	801ee50 <uxr_begin_output_nack_buffer_it>
 801859e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80185a2:	e005      	b.n	80185b0 <read_submessage_list+0x164>
 80185a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80185a6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80185aa:	e9d3 0900 	ldrd	r0, r9, [r3]
 80185ae:	47c8      	blx	r9
 80185b0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80185b4:	aa0f      	add	r2, sp, #60	; 0x3c
 80185b6:	4651      	mov	r1, sl
 80185b8:	4640      	mov	r0, r8
 80185ba:	f006 fc4b 	bl	801ee54 <uxr_next_reliable_nack_buffer_to_send>
 80185be:	2800      	cmp	r0, #0
 80185c0:	d1f0      	bne.n	80185a4 <read_submessage_list+0x158>
 80185c2:	e74a      	b.n	801845a <read_submessage_list+0xe>
 80185c4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80185c8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80185cc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80185d0:	4628      	mov	r0, r5
 80185d2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80185d6:	4651      	mov	r1, sl
 80185d8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80185dc:	f1a8 0804 	sub.w	r8, r8, #4
 80185e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80185e4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80185e8:	fa1f f888 	uxth.w	r8, r8
 80185ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80185f0:	f009 090e 	and.w	r9, r9, #14
 80185f4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80185f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80185fc:	f002 fb04 	bl	801ac08 <uxr_deserialize_BaseObjectRequest>
 8018600:	4650      	mov	r0, sl
 8018602:	a90f      	add	r1, sp, #60	; 0x3c
 8018604:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018608:	f000 fdca 	bl	80191a0 <uxr_parse_base_object_request>
 801860c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801860e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8018612:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8018616:	9110      	str	r1, [sp, #64]	; 0x40
 8018618:	f1bb 0f00 	cmp.w	fp, #0
 801861c:	d006      	beq.n	801862c <read_submessage_list+0x1e0>
 801861e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018622:	4652      	mov	r2, sl
 8018624:	4620      	mov	r0, r4
 8018626:	9300      	str	r3, [sp, #0]
 8018628:	2300      	movs	r3, #0
 801862a:	47d8      	blx	fp
 801862c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801862e:	b182      	cbz	r2, 8018652 <read_submessage_list+0x206>
 8018630:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8018632:	f04f 0c00 	mov.w	ip, #0
 8018636:	3902      	subs	r1, #2
 8018638:	e003      	b.n	8018642 <read_submessage_list+0x1f6>
 801863a:	f10c 0c01 	add.w	ip, ip, #1
 801863e:	4594      	cmp	ip, r2
 8018640:	d007      	beq.n	8018652 <read_submessage_list+0x206>
 8018642:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8018646:	4553      	cmp	r3, sl
 8018648:	d1f7      	bne.n	801863a <read_submessage_list+0x1ee>
 801864a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801864c:	2200      	movs	r2, #0
 801864e:	f803 200c 	strb.w	r2, [r3, ip]
 8018652:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018656:	464b      	mov	r3, r9
 8018658:	4642      	mov	r2, r8
 801865a:	4620      	mov	r0, r4
 801865c:	9102      	str	r1, [sp, #8]
 801865e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018660:	9101      	str	r1, [sp, #4]
 8018662:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018664:	9100      	str	r1, [sp, #0]
 8018666:	4629      	mov	r1, r5
 8018668:	f7ff fc4a 	bl	8017f00 <read_submessage_format>
 801866c:	e6f5      	b.n	801845a <read_submessage_list+0xe>
 801866e:	4629      	mov	r1, r5
 8018670:	4620      	mov	r0, r4
 8018672:	f7ff fea3 	bl	80183bc <read_submessage_info>
 8018676:	e6f0      	b.n	801845a <read_submessage_list+0xe>
 8018678:	2a00      	cmp	r2, #0
 801867a:	d03e      	beq.n	80186fa <read_submessage_list+0x2ae>
 801867c:	a910      	add	r1, sp, #64	; 0x40
 801867e:	4628      	mov	r0, r5
 8018680:	f002 fcb8 	bl	801aff4 <uxr_deserialize_STATUS_Payload>
 8018684:	a90e      	add	r1, sp, #56	; 0x38
 8018686:	aa0d      	add	r2, sp, #52	; 0x34
 8018688:	a810      	add	r0, sp, #64	; 0x40
 801868a:	f000 fd89 	bl	80191a0 <uxr_parse_base_object_request>
 801868e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018690:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8018694:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018698:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801869c:	910f      	str	r1, [sp, #60]	; 0x3c
 801869e:	f1ba 0f00 	cmp.w	sl, #0
 80186a2:	d006      	beq.n	80186b2 <read_submessage_list+0x266>
 80186a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80186a8:	4642      	mov	r2, r8
 80186aa:	4620      	mov	r0, r4
 80186ac:	9300      	str	r3, [sp, #0]
 80186ae:	464b      	mov	r3, r9
 80186b0:	47d0      	blx	sl
 80186b2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80186b4:	2a00      	cmp	r2, #0
 80186b6:	f43f aed0 	beq.w	801845a <read_submessage_list+0xe>
 80186ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80186bc:	2100      	movs	r1, #0
 80186be:	3802      	subs	r0, #2
 80186c0:	e003      	b.n	80186ca <read_submessage_list+0x27e>
 80186c2:	3101      	adds	r1, #1
 80186c4:	4291      	cmp	r1, r2
 80186c6:	f43f aec8 	beq.w	801845a <read_submessage_list+0xe>
 80186ca:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80186ce:	4543      	cmp	r3, r8
 80186d0:	d1f7      	bne.n	80186c2 <read_submessage_list+0x276>
 80186d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80186d4:	f803 9001 	strb.w	r9, [r3, r1]
 80186d8:	e6bf      	b.n	801845a <read_submessage_list+0xe>
 80186da:	2a00      	cmp	r2, #0
 80186dc:	f47f aebd 	bne.w	801845a <read_submessage_list+0xe>
 80186e0:	4629      	mov	r1, r5
 80186e2:	4620      	mov	r0, r4
 80186e4:	f000 fca0 	bl	8019028 <uxr_read_create_session_status>
 80186e8:	e6b7      	b.n	801845a <read_submessage_list+0xe>
 80186ea:	4629      	mov	r1, r5
 80186ec:	4620      	mov	r0, r4
 80186ee:	f7ff fcf3 	bl	80180d8 <read_submessage_get_info>
 80186f2:	e6b2      	b.n	801845a <read_submessage_list+0xe>
 80186f4:	b017      	add	sp, #92	; 0x5c
 80186f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186fa:	4629      	mov	r1, r5
 80186fc:	4620      	mov	r0, r4
 80186fe:	f000 fca1 	bl	8019044 <uxr_read_delete_session_status>
 8018702:	e6aa      	b.n	801845a <read_submessage_list+0xe>
 8018704:	f001 fb7a 	bl	8019dfc <uxr_nanos>
 8018708:	4642      	mov	r2, r8
 801870a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801870c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801870e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018712:	1818      	adds	r0, r3, r0
 8018714:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018716:	eb42 0101 	adc.w	r1, r2, r1
 801871a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801871c:	4642      	mov	r2, r8
 801871e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018722:	469c      	mov	ip, r3
 8018724:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8018728:	fbc3 7806 	smlal	r7, r8, r3, r6
 801872c:	4643      	mov	r3, r8
 801872e:	eb1c 0c07 	adds.w	ip, ip, r7
 8018732:	eb42 0203 	adc.w	r2, r2, r3
 8018736:	ebb0 030c 	subs.w	r3, r0, ip
 801873a:	eb61 0202 	sbc.w	r2, r1, r2
 801873e:	2a00      	cmp	r2, #0
 8018740:	db08      	blt.n	8018754 <read_submessage_list+0x308>
 8018742:	085b      	lsrs	r3, r3, #1
 8018744:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8018748:	1052      	asrs	r2, r2, #1
 801874a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801874e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8018752:	e6db      	b.n	801850c <read_submessage_list+0xc0>
 8018754:	3301      	adds	r3, #1
 8018756:	f142 0200 	adc.w	r2, r2, #0
 801875a:	e7f2      	b.n	8018742 <read_submessage_list+0x2f6>
 801875c:	3b9aca00 	.word	0x3b9aca00

08018760 <listen_message_reliably>:
 8018760:	1e0b      	subs	r3, r1, #0
 8018762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018766:	bfb8      	it	lt
 8018768:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801876c:	b09d      	sub	sp, #116	; 0x74
 801876e:	4680      	mov	r8, r0
 8018770:	9305      	str	r3, [sp, #20]
 8018772:	f001 fb27 	bl	8019dc4 <uxr_millis>
 8018776:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801877a:	4681      	mov	r9, r0
 801877c:	2a00      	cmp	r2, #0
 801877e:	f000 809a 	beq.w	80188b6 <listen_message_reliably+0x156>
 8018782:	2600      	movs	r6, #0
 8018784:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018788:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801878c:	460f      	mov	r7, r1
 801878e:	4630      	mov	r0, r6
 8018790:	9303      	str	r3, [sp, #12]
 8018792:	e00e      	b.n	80187b2 <listen_message_reliably+0x52>
 8018794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018796:	3601      	adds	r6, #1
 8018798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801879a:	455a      	cmp	r2, fp
 801879c:	9903      	ldr	r1, [sp, #12]
 801879e:	b2f0      	uxtb	r0, r6
 80187a0:	eb73 0101 	sbcs.w	r1, r3, r1
 80187a4:	da01      	bge.n	80187aa <listen_message_reliably+0x4a>
 80187a6:	4693      	mov	fp, r2
 80187a8:	9303      	str	r3, [sp, #12]
 80187aa:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80187ae:	4283      	cmp	r3, r0
 80187b0:	d95f      	bls.n	8018872 <listen_message_reliably+0x112>
 80187b2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80187b6:	2102      	movs	r1, #2
 80187b8:	2201      	movs	r2, #1
 80187ba:	00e4      	lsls	r4, r4, #3
 80187bc:	f001 f97e 	bl	8019abc <uxr_stream_id>
 80187c0:	4601      	mov	r1, r0
 80187c2:	f104 0520 	add.w	r5, r4, #32
 80187c6:	463b      	mov	r3, r7
 80187c8:	464a      	mov	r2, r9
 80187ca:	9109      	str	r1, [sp, #36]	; 0x24
 80187cc:	4445      	add	r5, r8
 80187ce:	4628      	mov	r0, r5
 80187d0:	f006 fb12 	bl	801edf8 <uxr_update_output_stream_heartbeat_timestamp>
 80187d4:	eb08 0304 	add.w	r3, r8, r4
 80187d8:	2800      	cmp	r0, #0
 80187da:	d0db      	beq.n	8018794 <listen_message_reliably+0x34>
 80187dc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80187e0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80187e4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80187e8:	4640      	mov	r0, r8
 80187ea:	3501      	adds	r5, #1
 80187ec:	4444      	add	r4, r8
 80187ee:	9304      	str	r3, [sp, #16]
 80187f0:	f000 fcae 	bl	8019150 <uxr_session_header_offset>
 80187f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80187f8:	2300      	movs	r3, #0
 80187fa:	2211      	movs	r2, #17
 80187fc:	a90c      	add	r1, sp, #48	; 0x30
 80187fe:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8018802:	9000      	str	r0, [sp, #0]
 8018804:	4650      	mov	r0, sl
 8018806:	3601      	adds	r6, #1
 8018808:	f7fa fd18 	bl	801323c <ucdr_init_buffer_origin_offset>
 801880c:	2300      	movs	r3, #0
 801880e:	2205      	movs	r2, #5
 8018810:	210b      	movs	r1, #11
 8018812:	4650      	mov	r0, sl
 8018814:	f001 fa90 	bl	8019d38 <uxr_buffer_submessage_header>
 8018818:	2101      	movs	r1, #1
 801881a:	8968      	ldrh	r0, [r5, #10]
 801881c:	f006 fbb0 	bl	801ef80 <uxr_seq_num_add>
 8018820:	892b      	ldrh	r3, [r5, #8]
 8018822:	4602      	mov	r2, r0
 8018824:	a90a      	add	r1, sp, #40	; 0x28
 8018826:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801882a:	4650      	mov	r0, sl
 801882c:	9b04      	ldr	r3, [sp, #16]
 801882e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018832:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018836:	f002 fc99 	bl	801b16c <uxr_serialize_HEARTBEAT_Payload>
 801883a:	2200      	movs	r2, #0
 801883c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801883e:	4640      	mov	r0, r8
 8018840:	4611      	mov	r1, r2
 8018842:	f000 fc31 	bl	80190a8 <uxr_stamp_session_header>
 8018846:	4650      	mov	r0, sl
 8018848:	f7fa fd38 	bl	80132bc <ucdr_buffer_length>
 801884c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018850:	4602      	mov	r2, r0
 8018852:	a90c      	add	r1, sp, #48	; 0x30
 8018854:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018858:	47a8      	blx	r5
 801885a:	9903      	ldr	r1, [sp, #12]
 801885c:	b2f0      	uxtb	r0, r6
 801885e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8018862:	455a      	cmp	r2, fp
 8018864:	eb73 0101 	sbcs.w	r1, r3, r1
 8018868:	db9d      	blt.n	80187a6 <listen_message_reliably+0x46>
 801886a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801886e:	4283      	cmp	r3, r0
 8018870:	d89f      	bhi.n	80187b2 <listen_message_reliably+0x52>
 8018872:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018876:	9a03      	ldr	r2, [sp, #12]
 8018878:	429a      	cmp	r2, r3
 801887a:	bf08      	it	eq
 801887c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8018880:	d019      	beq.n	80188b6 <listen_message_reliably+0x156>
 8018882:	ebab 0309 	sub.w	r3, fp, r9
 8018886:	2b00      	cmp	r3, #0
 8018888:	9d05      	ldr	r5, [sp, #20]
 801888a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 801888e:	aa08      	add	r2, sp, #32
 8018890:	bf08      	it	eq
 8018892:	2301      	moveq	r3, #1
 8018894:	a907      	add	r1, sp, #28
 8018896:	6884      	ldr	r4, [r0, #8]
 8018898:	429d      	cmp	r5, r3
 801889a:	6800      	ldr	r0, [r0, #0]
 801889c:	bfa8      	it	ge
 801889e:	461d      	movge	r5, r3
 80188a0:	462b      	mov	r3, r5
 80188a2:	47a0      	blx	r4
 80188a4:	b948      	cbnz	r0, 80188ba <listen_message_reliably+0x15a>
 80188a6:	9b05      	ldr	r3, [sp, #20]
 80188a8:	1b5b      	subs	r3, r3, r5
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	9305      	str	r3, [sp, #20]
 80188ae:	f73f af60 	bgt.w	8018772 <listen_message_reliably+0x12>
 80188b2:	4604      	mov	r4, r0
 80188b4:	e012      	b.n	80188dc <listen_message_reliably+0x17c>
 80188b6:	9b05      	ldr	r3, [sp, #20]
 80188b8:	e7e5      	b.n	8018886 <listen_message_reliably+0x126>
 80188ba:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80188be:	4604      	mov	r4, r0
 80188c0:	2500      	movs	r5, #0
 80188c2:	a80c      	add	r0, sp, #48	; 0x30
 80188c4:	f7fa fccc 	bl	8013260 <ucdr_init_buffer>
 80188c8:	f10d 031a 	add.w	r3, sp, #26
 80188cc:	aa06      	add	r2, sp, #24
 80188ce:	a90c      	add	r1, sp, #48	; 0x30
 80188d0:	4640      	mov	r0, r8
 80188d2:	f88d 5018 	strb.w	r5, [sp, #24]
 80188d6:	f000 fbfb 	bl	80190d0 <uxr_read_session_header>
 80188da:	b918      	cbnz	r0, 80188e4 <listen_message_reliably+0x184>
 80188dc:	4620      	mov	r0, r4
 80188de:	b01d      	add	sp, #116	; 0x74
 80188e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e4:	4629      	mov	r1, r5
 80188e6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80188ea:	f001 f915 	bl	8019b18 <uxr_stream_id_from_raw>
 80188ee:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80188f2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80188f6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80188fa:	2e01      	cmp	r6, #1
 80188fc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018900:	d04b      	beq.n	801899a <listen_message_reliably+0x23a>
 8018902:	2e02      	cmp	r6, #2
 8018904:	d00f      	beq.n	8018926 <listen_message_reliably+0x1c6>
 8018906:	2e00      	cmp	r6, #0
 8018908:	d1e8      	bne.n	80188dc <listen_message_reliably+0x17c>
 801890a:	4631      	mov	r1, r6
 801890c:	4630      	mov	r0, r6
 801890e:	f001 f903 	bl	8019b18 <uxr_stream_id_from_raw>
 8018912:	4602      	mov	r2, r0
 8018914:	a90c      	add	r1, sp, #48	; 0x30
 8018916:	4640      	mov	r0, r8
 8018918:	920a      	str	r2, [sp, #40]	; 0x28
 801891a:	f7ff fd97 	bl	801844c <read_submessage_list>
 801891e:	4620      	mov	r0, r4
 8018920:	b01d      	add	sp, #116	; 0x74
 8018922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018926:	4629      	mov	r1, r5
 8018928:	f108 0008 	add.w	r0, r8, #8
 801892c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8018930:	f001 f9e0 	bl	8019cf4 <uxr_get_input_reliable_stream>
 8018934:	4607      	mov	r7, r0
 8018936:	b338      	cbz	r0, 8018988 <listen_message_reliably+0x228>
 8018938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801893a:	a80c      	add	r0, sp, #48	; 0x30
 801893c:	9203      	str	r2, [sp, #12]
 801893e:	f7fa fcc1 	bl	80132c4 <ucdr_buffer_remaining>
 8018942:	4603      	mov	r3, r0
 8018944:	f10d 0019 	add.w	r0, sp, #25
 8018948:	9a03      	ldr	r2, [sp, #12]
 801894a:	4651      	mov	r1, sl
 801894c:	9000      	str	r0, [sp, #0]
 801894e:	4638      	mov	r0, r7
 8018950:	f005 fe5c 	bl	801e60c <uxr_receive_reliable_message>
 8018954:	b1c0      	cbz	r0, 8018988 <listen_message_reliably+0x228>
 8018956:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801895a:	b393      	cbz	r3, 80189c2 <listen_message_reliably+0x262>
 801895c:	ae14      	add	r6, sp, #80	; 0x50
 801895e:	f04f 0a02 	mov.w	sl, #2
 8018962:	e00a      	b.n	801897a <listen_message_reliably+0x21a>
 8018964:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8018968:	4631      	mov	r1, r6
 801896a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801896e:	4640      	mov	r0, r8
 8018970:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018976:	f7ff fd69 	bl	801844c <read_submessage_list>
 801897a:	2204      	movs	r2, #4
 801897c:	4631      	mov	r1, r6
 801897e:	4638      	mov	r0, r7
 8018980:	f005 fec6 	bl	801e710 <uxr_next_input_reliable_buffer_available>
 8018984:	2800      	cmp	r0, #0
 8018986:	d1ed      	bne.n	8018964 <listen_message_reliably+0x204>
 8018988:	4640      	mov	r0, r8
 801898a:	462a      	mov	r2, r5
 801898c:	4649      	mov	r1, r9
 801898e:	f7ff fbd9 	bl	8018144 <write_submessage_acknack.isra.0>
 8018992:	4620      	mov	r0, r4
 8018994:	b01d      	add	sp, #116	; 0x74
 8018996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801899a:	4629      	mov	r1, r5
 801899c:	f108 0008 	add.w	r0, r8, #8
 80189a0:	f001 f99e 	bl	8019ce0 <uxr_get_input_best_effort_stream>
 80189a4:	2800      	cmp	r0, #0
 80189a6:	d099      	beq.n	80188dc <listen_message_reliably+0x17c>
 80189a8:	4651      	mov	r1, sl
 80189aa:	f005 fda5 	bl	801e4f8 <uxr_receive_best_effort_message>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d094      	beq.n	80188dc <listen_message_reliably+0x17c>
 80189b2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80189b6:	a90c      	add	r1, sp, #48	; 0x30
 80189b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189ba:	4640      	mov	r0, r8
 80189bc:	f7ff fd46 	bl	801844c <read_submessage_list>
 80189c0:	e78c      	b.n	80188dc <listen_message_reliably+0x17c>
 80189c2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80189c6:	a90c      	add	r1, sp, #48	; 0x30
 80189c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189ca:	4640      	mov	r0, r8
 80189cc:	f7ff fd3e 	bl	801844c <read_submessage_list>
 80189d0:	e7c4      	b.n	801895c <listen_message_reliably+0x1fc>
 80189d2:	bf00      	nop

080189d4 <uxr_run_session_timeout>:
 80189d4:	b570      	push	{r4, r5, r6, lr}
 80189d6:	4604      	mov	r4, r0
 80189d8:	460d      	mov	r5, r1
 80189da:	f001 f9f3 	bl	8019dc4 <uxr_millis>
 80189de:	4606      	mov	r6, r0
 80189e0:	4620      	mov	r0, r4
 80189e2:	f7ff fc77 	bl	80182d4 <uxr_flash_output_streams>
 80189e6:	4629      	mov	r1, r5
 80189e8:	4620      	mov	r0, r4
 80189ea:	f7ff feb9 	bl	8018760 <listen_message_reliably>
 80189ee:	f001 f9e9 	bl	8019dc4 <uxr_millis>
 80189f2:	1b83      	subs	r3, r0, r6
 80189f4:	1ae9      	subs	r1, r5, r3
 80189f6:	2900      	cmp	r1, #0
 80189f8:	dcf6      	bgt.n	80189e8 <uxr_run_session_timeout+0x14>
 80189fa:	f104 0008 	add.w	r0, r4, #8
 80189fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a02:	f001 b983 	b.w	8019d0c <uxr_output_streams_confirmed>
 8018a06:	bf00      	nop

08018a08 <uxr_run_session_until_data>:
 8018a08:	b570      	push	{r4, r5, r6, lr}
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	460d      	mov	r5, r1
 8018a0e:	f001 f9d9 	bl	8019dc4 <uxr_millis>
 8018a12:	4606      	mov	r6, r0
 8018a14:	4620      	mov	r0, r4
 8018a16:	f7ff fc5d 	bl	80182d4 <uxr_flash_output_streams>
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	4629      	mov	r1, r5
 8018a1e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018a22:	e005      	b.n	8018a30 <uxr_run_session_until_data+0x28>
 8018a24:	f001 f9ce 	bl	8019dc4 <uxr_millis>
 8018a28:	1b83      	subs	r3, r0, r6
 8018a2a:	1ae9      	subs	r1, r5, r3
 8018a2c:	2900      	cmp	r1, #0
 8018a2e:	dd07      	ble.n	8018a40 <uxr_run_session_until_data+0x38>
 8018a30:	4620      	mov	r0, r4
 8018a32:	f7ff fe95 	bl	8018760 <listen_message_reliably>
 8018a36:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018a3a:	2800      	cmp	r0, #0
 8018a3c:	d0f2      	beq.n	8018a24 <uxr_run_session_until_data+0x1c>
 8018a3e:	bd70      	pop	{r4, r5, r6, pc}
 8018a40:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018a44:	bd70      	pop	{r4, r5, r6, pc}
 8018a46:	bf00      	nop

08018a48 <uxr_run_session_until_confirm_delivery>:
 8018a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4c:	4606      	mov	r6, r0
 8018a4e:	460d      	mov	r5, r1
 8018a50:	f001 f9b8 	bl	8019dc4 <uxr_millis>
 8018a54:	4607      	mov	r7, r0
 8018a56:	4630      	mov	r0, r6
 8018a58:	f106 0808 	add.w	r8, r6, #8
 8018a5c:	f7ff fc3a 	bl	80182d4 <uxr_flash_output_streams>
 8018a60:	2d00      	cmp	r5, #0
 8018a62:	db10      	blt.n	8018a86 <uxr_run_session_until_confirm_delivery+0x3e>
 8018a64:	462c      	mov	r4, r5
 8018a66:	e006      	b.n	8018a76 <uxr_run_session_until_confirm_delivery+0x2e>
 8018a68:	f7ff fe7a 	bl	8018760 <listen_message_reliably>
 8018a6c:	f001 f9aa 	bl	8019dc4 <uxr_millis>
 8018a70:	1bc3      	subs	r3, r0, r7
 8018a72:	1aec      	subs	r4, r5, r3
 8018a74:	d407      	bmi.n	8018a86 <uxr_run_session_until_confirm_delivery+0x3e>
 8018a76:	4640      	mov	r0, r8
 8018a78:	f001 f948 	bl	8019d0c <uxr_output_streams_confirmed>
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	4621      	mov	r1, r4
 8018a80:	4630      	mov	r0, r6
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d0f0      	beq.n	8018a68 <uxr_run_session_until_confirm_delivery+0x20>
 8018a86:	4640      	mov	r0, r8
 8018a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a8c:	f001 b93e 	b.w	8019d0c <uxr_output_streams_confirmed>

08018a90 <uxr_run_session_until_all_status>:
 8018a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a94:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018a98:	4606      	mov	r6, r0
 8018a9a:	4688      	mov	r8, r1
 8018a9c:	4692      	mov	sl, r2
 8018a9e:	461f      	mov	r7, r3
 8018aa0:	f7ff fc18 	bl	80182d4 <uxr_flash_output_streams>
 8018aa4:	f1bb 0f00 	cmp.w	fp, #0
 8018aa8:	d004      	beq.n	8018ab4 <uxr_run_session_until_all_status+0x24>
 8018aaa:	465a      	mov	r2, fp
 8018aac:	21ff      	movs	r1, #255	; 0xff
 8018aae:	4638      	mov	r0, r7
 8018ab0:	f008 f940 	bl	8020d34 <memset>
 8018ab4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018ab8:	1e7d      	subs	r5, r7, #1
 8018aba:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8018abe:	f001 f981 	bl	8019dc4 <uxr_millis>
 8018ac2:	4641      	mov	r1, r8
 8018ac4:	4681      	mov	r9, r0
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	f7ff fe4a 	bl	8018760 <listen_message_reliably>
 8018acc:	f001 f97a 	bl	8019dc4 <uxr_millis>
 8018ad0:	eba0 0009 	sub.w	r0, r0, r9
 8018ad4:	eba8 0100 	sub.w	r1, r8, r0
 8018ad8:	f1bb 0f00 	cmp.w	fp, #0
 8018adc:	d029      	beq.n	8018b32 <uxr_run_session_until_all_status+0xa2>
 8018ade:	46ae      	mov	lr, r5
 8018ae0:	f04f 0c00 	mov.w	ip, #0
 8018ae4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018ae8:	2cff      	cmp	r4, #255	; 0xff
 8018aea:	d015      	beq.n	8018b18 <uxr_run_session_until_all_status+0x88>
 8018aec:	f10c 0c01 	add.w	ip, ip, #1
 8018af0:	45e3      	cmp	fp, ip
 8018af2:	d8f7      	bhi.n	8018ae4 <uxr_run_session_until_all_status+0x54>
 8018af4:	2300      	movs	r3, #0
 8018af6:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018af8:	e000      	b.n	8018afc <uxr_run_session_until_all_status+0x6c>
 8018afa:	b158      	cbz	r0, 8018b14 <uxr_run_session_until_all_status+0x84>
 8018afc:	462b      	mov	r3, r5
 8018afe:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018b02:	3302      	adds	r3, #2
 8018b04:	2801      	cmp	r0, #1
 8018b06:	eba3 0307 	sub.w	r3, r3, r7
 8018b0a:	bf8c      	ite	hi
 8018b0c:	2000      	movhi	r0, #0
 8018b0e:	2001      	movls	r0, #1
 8018b10:	459b      	cmp	fp, r3
 8018b12:	d8f2      	bhi.n	8018afa <uxr_run_session_until_all_status+0x6a>
 8018b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b18:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018b1c:	f10c 0c01 	add.w	ip, ip, #1
 8018b20:	45dc      	cmp	ip, fp
 8018b22:	d201      	bcs.n	8018b28 <uxr_run_session_until_all_status+0x98>
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d0dd      	beq.n	8018ae4 <uxr_run_session_until_all_status+0x54>
 8018b28:	2900      	cmp	r1, #0
 8018b2a:	dde3      	ble.n	8018af4 <uxr_run_session_until_all_status+0x64>
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d1ca      	bne.n	8018ac6 <uxr_run_session_until_all_status+0x36>
 8018b30:	e7e0      	b.n	8018af4 <uxr_run_session_until_all_status+0x64>
 8018b32:	2001      	movs	r0, #1
 8018b34:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b3c <wait_session_status>:
 8018b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b40:	4604      	mov	r4, r0
 8018b42:	b09d      	sub	sp, #116	; 0x74
 8018b44:	20ff      	movs	r0, #255	; 0xff
 8018b46:	9303      	str	r3, [sp, #12]
 8018b48:	7160      	strb	r0, [r4, #5]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	f000 80b6 	beq.w	8018cbc <wait_session_status+0x180>
 8018b50:	4689      	mov	r9, r1
 8018b52:	4692      	mov	sl, r2
 8018b54:	f04f 0b00 	mov.w	fp, #0
 8018b58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018b5a:	4652      	mov	r2, sl
 8018b5c:	4649      	mov	r1, r9
 8018b5e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018b62:	47a8      	blx	r5
 8018b64:	f001 f92e 	bl	8019dc4 <uxr_millis>
 8018b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	e009      	b.n	8018b84 <wait_session_status+0x48>
 8018b70:	f001 f928 	bl	8019dc4 <uxr_millis>
 8018b74:	1b40      	subs	r0, r0, r5
 8018b76:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	dd40      	ble.n	8018c00 <wait_session_status+0xc4>
 8018b7e:	7960      	ldrb	r0, [r4, #5]
 8018b80:	28ff      	cmp	r0, #255	; 0xff
 8018b82:	d145      	bne.n	8018c10 <wait_session_status+0xd4>
 8018b84:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018b86:	a908      	add	r1, sp, #32
 8018b88:	6896      	ldr	r6, [r2, #8]
 8018b8a:	6810      	ldr	r0, [r2, #0]
 8018b8c:	aa09      	add	r2, sp, #36	; 0x24
 8018b8e:	47b0      	blx	r6
 8018b90:	2800      	cmp	r0, #0
 8018b92:	d0ed      	beq.n	8018b70 <wait_session_status+0x34>
 8018b94:	a80c      	add	r0, sp, #48	; 0x30
 8018b96:	2600      	movs	r6, #0
 8018b98:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018b9c:	f7fa fb60 	bl	8013260 <ucdr_init_buffer>
 8018ba0:	f10d 031e 	add.w	r3, sp, #30
 8018ba4:	aa07      	add	r2, sp, #28
 8018ba6:	a90c      	add	r1, sp, #48	; 0x30
 8018ba8:	4620      	mov	r0, r4
 8018baa:	f88d 601c 	strb.w	r6, [sp, #28]
 8018bae:	f000 fa8f 	bl	80190d0 <uxr_read_session_header>
 8018bb2:	2800      	cmp	r0, #0
 8018bb4:	d0dc      	beq.n	8018b70 <wait_session_status+0x34>
 8018bb6:	4631      	mov	r1, r6
 8018bb8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018bbc:	f000 ffac 	bl	8019b18 <uxr_stream_id_from_raw>
 8018bc0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018bc4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018bc8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018bcc:	2f01      	cmp	r7, #1
 8018bce:	9302      	str	r3, [sp, #8]
 8018bd0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018bd4:	d05c      	beq.n	8018c90 <wait_session_status+0x154>
 8018bd6:	2f02      	cmp	r7, #2
 8018bd8:	d020      	beq.n	8018c1c <wait_session_status+0xe0>
 8018bda:	2f00      	cmp	r7, #0
 8018bdc:	d1c8      	bne.n	8018b70 <wait_session_status+0x34>
 8018bde:	4639      	mov	r1, r7
 8018be0:	4638      	mov	r0, r7
 8018be2:	f000 ff99 	bl	8019b18 <uxr_stream_id_from_raw>
 8018be6:	a90c      	add	r1, sp, #48	; 0x30
 8018be8:	4602      	mov	r2, r0
 8018bea:	900b      	str	r0, [sp, #44]	; 0x2c
 8018bec:	4620      	mov	r0, r4
 8018bee:	f7ff fc2d 	bl	801844c <read_submessage_list>
 8018bf2:	f001 f8e7 	bl	8019dc4 <uxr_millis>
 8018bf6:	1b40      	subs	r0, r0, r5
 8018bf8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	dcbe      	bgt.n	8018b7e <wait_session_status+0x42>
 8018c00:	f10b 0b01 	add.w	fp, fp, #1
 8018c04:	9b03      	ldr	r3, [sp, #12]
 8018c06:	7960      	ldrb	r0, [r4, #5]
 8018c08:	455b      	cmp	r3, fp
 8018c0a:	d001      	beq.n	8018c10 <wait_session_status+0xd4>
 8018c0c:	28ff      	cmp	r0, #255	; 0xff
 8018c0e:	d0a3      	beq.n	8018b58 <wait_session_status+0x1c>
 8018c10:	38ff      	subs	r0, #255	; 0xff
 8018c12:	bf18      	it	ne
 8018c14:	2001      	movne	r0, #1
 8018c16:	b01d      	add	sp, #116	; 0x74
 8018c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8018c20:	4631      	mov	r1, r6
 8018c22:	f104 0008 	add.w	r0, r4, #8
 8018c26:	9304      	str	r3, [sp, #16]
 8018c28:	f001 f864 	bl	8019cf4 <uxr_get_input_reliable_stream>
 8018c2c:	4680      	mov	r8, r0
 8018c2e:	b348      	cbz	r0, 8018c84 <wait_session_status+0x148>
 8018c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018c32:	a80c      	add	r0, sp, #48	; 0x30
 8018c34:	9205      	str	r2, [sp, #20]
 8018c36:	f7fa fb45 	bl	80132c4 <ucdr_buffer_remaining>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	f10d 001d 	add.w	r0, sp, #29
 8018c40:	9a05      	ldr	r2, [sp, #20]
 8018c42:	9000      	str	r0, [sp, #0]
 8018c44:	4640      	mov	r0, r8
 8018c46:	9902      	ldr	r1, [sp, #8]
 8018c48:	f005 fce0 	bl	801e60c <uxr_receive_reliable_message>
 8018c4c:	b1d0      	cbz	r0, 8018c84 <wait_session_status+0x148>
 8018c4e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d03a      	beq.n	8018ccc <wait_session_status+0x190>
 8018c56:	9f04      	ldr	r7, [sp, #16]
 8018c58:	e00a      	b.n	8018c70 <wait_session_status+0x134>
 8018c5a:	f04f 0302 	mov.w	r3, #2
 8018c5e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8018c62:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018c66:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8018c6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c6c:	f7ff fbee 	bl	801844c <read_submessage_list>
 8018c70:	a914      	add	r1, sp, #80	; 0x50
 8018c72:	2204      	movs	r2, #4
 8018c74:	4640      	mov	r0, r8
 8018c76:	f005 fd4b 	bl	801e710 <uxr_next_input_reliable_buffer_available>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	a914      	add	r1, sp, #80	; 0x50
 8018c7e:	4620      	mov	r0, r4
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d1ea      	bne.n	8018c5a <wait_session_status+0x11e>
 8018c84:	4632      	mov	r2, r6
 8018c86:	9904      	ldr	r1, [sp, #16]
 8018c88:	4620      	mov	r0, r4
 8018c8a:	f7ff fa5b 	bl	8018144 <write_submessage_acknack.isra.0>
 8018c8e:	e76f      	b.n	8018b70 <wait_session_status+0x34>
 8018c90:	4631      	mov	r1, r6
 8018c92:	f104 0008 	add.w	r0, r4, #8
 8018c96:	f001 f823 	bl	8019ce0 <uxr_get_input_best_effort_stream>
 8018c9a:	2800      	cmp	r0, #0
 8018c9c:	f43f af68 	beq.w	8018b70 <wait_session_status+0x34>
 8018ca0:	9902      	ldr	r1, [sp, #8]
 8018ca2:	f005 fc29 	bl	801e4f8 <uxr_receive_best_effort_message>
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	f43f af62 	beq.w	8018b70 <wait_session_status+0x34>
 8018cac:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018cb0:	a90c      	add	r1, sp, #48	; 0x30
 8018cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f7ff fbc9 	bl	801844c <read_submessage_list>
 8018cba:	e759      	b.n	8018b70 <wait_session_status+0x34>
 8018cbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018cbe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018cc2:	47a0      	blx	r4
 8018cc4:	2001      	movs	r0, #1
 8018cc6:	b01d      	add	sp, #116	; 0x74
 8018cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ccc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018cd0:	a90c      	add	r1, sp, #48	; 0x30
 8018cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f7ff fbb9 	bl	801844c <read_submessage_list>
 8018cda:	e7bc      	b.n	8018c56 <wait_session_status+0x11a>

08018cdc <uxr_delete_session_retries>:
 8018cdc:	b530      	push	{r4, r5, lr}
 8018cde:	b08f      	sub	sp, #60	; 0x3c
 8018ce0:	4604      	mov	r4, r0
 8018ce2:	460d      	mov	r5, r1
 8018ce4:	f000 fa34 	bl	8019150 <uxr_session_header_offset>
 8018ce8:	2300      	movs	r3, #0
 8018cea:	2210      	movs	r2, #16
 8018cec:	a902      	add	r1, sp, #8
 8018cee:	9000      	str	r0, [sp, #0]
 8018cf0:	a806      	add	r0, sp, #24
 8018cf2:	f7fa faa3 	bl	801323c <ucdr_init_buffer_origin_offset>
 8018cf6:	a906      	add	r1, sp, #24
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f000 f979 	bl	8018ff0 <uxr_buffer_delete_session>
 8018cfe:	2200      	movs	r2, #0
 8018d00:	9b06      	ldr	r3, [sp, #24]
 8018d02:	4620      	mov	r0, r4
 8018d04:	4611      	mov	r1, r2
 8018d06:	f000 f9cf 	bl	80190a8 <uxr_stamp_session_header>
 8018d0a:	a806      	add	r0, sp, #24
 8018d0c:	f7fa fad6 	bl	80132bc <ucdr_buffer_length>
 8018d10:	462b      	mov	r3, r5
 8018d12:	4602      	mov	r2, r0
 8018d14:	a902      	add	r1, sp, #8
 8018d16:	4620      	mov	r0, r4
 8018d18:	f7ff ff10 	bl	8018b3c <wait_session_status>
 8018d1c:	b118      	cbz	r0, 8018d26 <uxr_delete_session_retries+0x4a>
 8018d1e:	7960      	ldrb	r0, [r4, #5]
 8018d20:	fab0 f080 	clz	r0, r0
 8018d24:	0940      	lsrs	r0, r0, #5
 8018d26:	b00f      	add	sp, #60	; 0x3c
 8018d28:	bd30      	pop	{r4, r5, pc}
 8018d2a:	bf00      	nop

08018d2c <uxr_create_session>:
 8018d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d30:	f100 0b08 	add.w	fp, r0, #8
 8018d34:	4604      	mov	r4, r0
 8018d36:	b0ab      	sub	sp, #172	; 0xac
 8018d38:	4658      	mov	r0, fp
 8018d3a:	465e      	mov	r6, fp
 8018d3c:	f000 ff22 	bl	8019b84 <uxr_reset_stream_storage>
 8018d40:	4620      	mov	r0, r4
 8018d42:	f000 fa05 	bl	8019150 <uxr_session_header_offset>
 8018d46:	2300      	movs	r3, #0
 8018d48:	221c      	movs	r2, #28
 8018d4a:	a90b      	add	r1, sp, #44	; 0x2c
 8018d4c:	9000      	str	r0, [sp, #0]
 8018d4e:	a812      	add	r0, sp, #72	; 0x48
 8018d50:	f7fa fa74 	bl	801323c <ucdr_init_buffer_origin_offset>
 8018d54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d56:	a912      	add	r1, sp, #72	; 0x48
 8018d58:	4620      	mov	r0, r4
 8018d5a:	8a1a      	ldrh	r2, [r3, #16]
 8018d5c:	3a04      	subs	r2, #4
 8018d5e:	b292      	uxth	r2, r2
 8018d60:	f000 f91c 	bl	8018f9c <uxr_buffer_create_session>
 8018d64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018d66:	4620      	mov	r0, r4
 8018d68:	f000 f98a 	bl	8019080 <uxr_stamp_create_session_header>
 8018d6c:	a812      	add	r0, sp, #72	; 0x48
 8018d6e:	f7fa faa5 	bl	80132bc <ucdr_buffer_length>
 8018d72:	23ff      	movs	r3, #255	; 0xff
 8018d74:	4681      	mov	r9, r0
 8018d76:	7163      	strb	r3, [r4, #5]
 8018d78:	230a      	movs	r3, #10
 8018d7a:	9303      	str	r3, [sp, #12]
 8018d7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d7e:	464a      	mov	r2, r9
 8018d80:	a90b      	add	r1, sp, #44	; 0x2c
 8018d82:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018d86:	47a8      	blx	r5
 8018d88:	f001 f81c 	bl	8019dc4 <uxr_millis>
 8018d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018d90:	4605      	mov	r5, r0
 8018d92:	e009      	b.n	8018da8 <uxr_create_session+0x7c>
 8018d94:	f001 f816 	bl	8019dc4 <uxr_millis>
 8018d98:	1b40      	subs	r0, r0, r5
 8018d9a:	7962      	ldrb	r2, [r4, #5]
 8018d9c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	dd38      	ble.n	8018e16 <uxr_create_session+0xea>
 8018da4:	2aff      	cmp	r2, #255	; 0xff
 8018da6:	d13c      	bne.n	8018e22 <uxr_create_session+0xf6>
 8018da8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018daa:	a907      	add	r1, sp, #28
 8018dac:	6897      	ldr	r7, [r2, #8]
 8018dae:	6810      	ldr	r0, [r2, #0]
 8018db0:	aa08      	add	r2, sp, #32
 8018db2:	47b8      	blx	r7
 8018db4:	2800      	cmp	r0, #0
 8018db6:	d0ed      	beq.n	8018d94 <uxr_create_session+0x68>
 8018db8:	a81a      	add	r0, sp, #104	; 0x68
 8018dba:	2700      	movs	r7, #0
 8018dbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018dc0:	f7fa fa4e 	bl	8013260 <ucdr_init_buffer>
 8018dc4:	f10d 031a 	add.w	r3, sp, #26
 8018dc8:	aa06      	add	r2, sp, #24
 8018dca:	a91a      	add	r1, sp, #104	; 0x68
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f88d 7018 	strb.w	r7, [sp, #24]
 8018dd2:	f000 f97d 	bl	80190d0 <uxr_read_session_header>
 8018dd6:	2800      	cmp	r0, #0
 8018dd8:	d0dc      	beq.n	8018d94 <uxr_create_session+0x68>
 8018dda:	4639      	mov	r1, r7
 8018ddc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018de0:	f000 fe9a 	bl	8019b18 <uxr_stream_id_from_raw>
 8018de4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018de8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018dec:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018df0:	2f01      	cmp	r7, #1
 8018df2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018df6:	d053      	beq.n	8018ea0 <uxr_create_session+0x174>
 8018df8:	2f02      	cmp	r7, #2
 8018dfa:	d018      	beq.n	8018e2e <uxr_create_session+0x102>
 8018dfc:	2f00      	cmp	r7, #0
 8018dfe:	d1c9      	bne.n	8018d94 <uxr_create_session+0x68>
 8018e00:	4639      	mov	r1, r7
 8018e02:	4638      	mov	r0, r7
 8018e04:	f000 fe88 	bl	8019b18 <uxr_stream_id_from_raw>
 8018e08:	a91a      	add	r1, sp, #104	; 0x68
 8018e0a:	4602      	mov	r2, r0
 8018e0c:	900a      	str	r0, [sp, #40]	; 0x28
 8018e0e:	4620      	mov	r0, r4
 8018e10:	f7ff fb1c 	bl	801844c <read_submessage_list>
 8018e14:	e7be      	b.n	8018d94 <uxr_create_session+0x68>
 8018e16:	9b03      	ldr	r3, [sp, #12]
 8018e18:	3b01      	subs	r3, #1
 8018e1a:	9303      	str	r3, [sp, #12]
 8018e1c:	d001      	beq.n	8018e22 <uxr_create_session+0xf6>
 8018e1e:	2aff      	cmp	r2, #255	; 0xff
 8018e20:	d0ac      	beq.n	8018d7c <uxr_create_session+0x50>
 8018e22:	2a00      	cmp	r2, #0
 8018e24:	d051      	beq.n	8018eca <uxr_create_session+0x19e>
 8018e26:	2000      	movs	r0, #0
 8018e28:	b02b      	add	sp, #172	; 0xac
 8018e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e2e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018e32:	4641      	mov	r1, r8
 8018e34:	4630      	mov	r0, r6
 8018e36:	9304      	str	r3, [sp, #16]
 8018e38:	f000 ff5c 	bl	8019cf4 <uxr_get_input_reliable_stream>
 8018e3c:	4682      	mov	sl, r0
 8018e3e:	b348      	cbz	r0, 8018e94 <uxr_create_session+0x168>
 8018e40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018e42:	a81a      	add	r0, sp, #104	; 0x68
 8018e44:	9205      	str	r2, [sp, #20]
 8018e46:	f7fa fa3d 	bl	80132c4 <ucdr_buffer_remaining>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	f10d 0019 	add.w	r0, sp, #25
 8018e50:	9a05      	ldr	r2, [sp, #20]
 8018e52:	4659      	mov	r1, fp
 8018e54:	9000      	str	r0, [sp, #0]
 8018e56:	4650      	mov	r0, sl
 8018e58:	f005 fbd8 	bl	801e60c <uxr_receive_reliable_message>
 8018e5c:	b1d0      	cbz	r0, 8018e94 <uxr_create_session+0x168>
 8018e5e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d038      	beq.n	8018ed8 <uxr_create_session+0x1ac>
 8018e66:	9f04      	ldr	r7, [sp, #16]
 8018e68:	e00a      	b.n	8018e80 <uxr_create_session+0x154>
 8018e6a:	f04f 0302 	mov.w	r3, #2
 8018e6e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8018e72:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8018e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e7c:	f7ff fae6 	bl	801844c <read_submessage_list>
 8018e80:	a922      	add	r1, sp, #136	; 0x88
 8018e82:	2204      	movs	r2, #4
 8018e84:	4650      	mov	r0, sl
 8018e86:	f005 fc43 	bl	801e710 <uxr_next_input_reliable_buffer_available>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	a922      	add	r1, sp, #136	; 0x88
 8018e8e:	4620      	mov	r0, r4
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d1ea      	bne.n	8018e6a <uxr_create_session+0x13e>
 8018e94:	4642      	mov	r2, r8
 8018e96:	9904      	ldr	r1, [sp, #16]
 8018e98:	4620      	mov	r0, r4
 8018e9a:	f7ff f953 	bl	8018144 <write_submessage_acknack.isra.0>
 8018e9e:	e779      	b.n	8018d94 <uxr_create_session+0x68>
 8018ea0:	4641      	mov	r1, r8
 8018ea2:	4630      	mov	r0, r6
 8018ea4:	f000 ff1c 	bl	8019ce0 <uxr_get_input_best_effort_stream>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	f43f af73 	beq.w	8018d94 <uxr_create_session+0x68>
 8018eae:	4659      	mov	r1, fp
 8018eb0:	f005 fb22 	bl	801e4f8 <uxr_receive_best_effort_message>
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	f43f af6d 	beq.w	8018d94 <uxr_create_session+0x68>
 8018eba:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018ebe:	a91a      	add	r1, sp, #104	; 0x68
 8018ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	f7ff fac2 	bl	801844c <read_submessage_list>
 8018ec8:	e764      	b.n	8018d94 <uxr_create_session+0x68>
 8018eca:	4630      	mov	r0, r6
 8018ecc:	f000 fe5a 	bl	8019b84 <uxr_reset_stream_storage>
 8018ed0:	2001      	movs	r0, #1
 8018ed2:	b02b      	add	sp, #172	; 0xac
 8018ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ed8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018edc:	a91a      	add	r1, sp, #104	; 0x68
 8018ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	f7ff fab3 	bl	801844c <read_submessage_list>
 8018ee6:	e7be      	b.n	8018e66 <uxr_create_session+0x13a>

08018ee8 <uxr_prepare_stream_to_write_submessage>:
 8018ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018eec:	b082      	sub	sp, #8
 8018eee:	4604      	mov	r4, r0
 8018ef0:	4610      	mov	r0, r2
 8018ef2:	4615      	mov	r5, r2
 8018ef4:	461e      	mov	r6, r3
 8018ef6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018efa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8018efe:	f105 0904 	add.w	r9, r5, #4
 8018f02:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8018f06:	9101      	str	r1, [sp, #4]
 8018f08:	f000 ff56 	bl	8019db8 <uxr_submessage_padding>
 8018f0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018f10:	4481      	add	r9, r0
 8018f12:	2b01      	cmp	r3, #1
 8018f14:	d01d      	beq.n	8018f52 <uxr_prepare_stream_to_write_submessage+0x6a>
 8018f16:	2b02      	cmp	r3, #2
 8018f18:	d116      	bne.n	8018f48 <uxr_prepare_stream_to_write_submessage+0x60>
 8018f1a:	f104 0008 	add.w	r0, r4, #8
 8018f1e:	4651      	mov	r1, sl
 8018f20:	f000 fed2 	bl	8019cc8 <uxr_get_output_reliable_stream>
 8018f24:	4604      	mov	r4, r0
 8018f26:	b158      	cbz	r0, 8018f40 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f28:	4649      	mov	r1, r9
 8018f2a:	4632      	mov	r2, r6
 8018f2c:	f005 fdb6 	bl	801ea9c <uxr_prepare_reliable_buffer_to_write>
 8018f30:	4604      	mov	r4, r0
 8018f32:	b12c      	cbz	r4, 8018f40 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f34:	4643      	mov	r3, r8
 8018f36:	b2aa      	uxth	r2, r5
 8018f38:	4639      	mov	r1, r7
 8018f3a:	4630      	mov	r0, r6
 8018f3c:	f000 fefc 	bl	8019d38 <uxr_buffer_submessage_header>
 8018f40:	4620      	mov	r0, r4
 8018f42:	b002      	add	sp, #8
 8018f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f48:	2400      	movs	r4, #0
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	b002      	add	sp, #8
 8018f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f52:	f104 0008 	add.w	r0, r4, #8
 8018f56:	4651      	mov	r1, sl
 8018f58:	f000 feae 	bl	8019cb8 <uxr_get_output_best_effort_stream>
 8018f5c:	4604      	mov	r4, r0
 8018f5e:	2800      	cmp	r0, #0
 8018f60:	d0ee      	beq.n	8018f40 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f62:	4649      	mov	r1, r9
 8018f64:	4632      	mov	r2, r6
 8018f66:	f005 fcc3 	bl	801e8f0 <uxr_prepare_best_effort_buffer_to_write>
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	e7e1      	b.n	8018f32 <uxr_prepare_stream_to_write_submessage+0x4a>
 8018f6e:	bf00      	nop

08018f70 <uxr_init_session_info>:
 8018f70:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018f74:	23ff      	movs	r3, #255	; 0xff
 8018f76:	7102      	strb	r2, [r0, #4]
 8018f78:	f880 c001 	strb.w	ip, [r0, #1]
 8018f7c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018f80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018f84:	7001      	strb	r1, [r0, #0]
 8018f86:	f880 c002 	strb.w	ip, [r0, #2]
 8018f8a:	7143      	strb	r3, [r0, #5]
 8018f8c:	70c2      	strb	r2, [r0, #3]
 8018f8e:	b500      	push	{lr}
 8018f90:	f04f 0e09 	mov.w	lr, #9
 8018f94:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018f98:	f85d fb04 	ldr.w	pc, [sp], #4

08018f9c <uxr_buffer_create_session>:
 8018f9c:	b530      	push	{r4, r5, lr}
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	b089      	sub	sp, #36	; 0x24
 8018fa2:	4d12      	ldr	r5, [pc, #72]	; (8018fec <uxr_buffer_create_session+0x50>)
 8018fa4:	460c      	mov	r4, r1
 8018fa6:	9307      	str	r3, [sp, #28]
 8018fa8:	4619      	mov	r1, r3
 8018faa:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018fae:	2201      	movs	r2, #1
 8018fb0:	9301      	str	r3, [sp, #4]
 8018fb2:	80c2      	strh	r2, [r0, #6]
 8018fb4:	f88d 2004 	strb.w	r2, [sp, #4]
 8018fb8:	682a      	ldr	r2, [r5, #0]
 8018fba:	9303      	str	r3, [sp, #12]
 8018fbc:	9200      	str	r2, [sp, #0]
 8018fbe:	88aa      	ldrh	r2, [r5, #4]
 8018fc0:	9306      	str	r3, [sp, #24]
 8018fc2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018fc6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018fca:	9202      	str	r2, [sp, #8]
 8018fcc:	7802      	ldrb	r2, [r0, #0]
 8018fce:	4620      	mov	r0, r4
 8018fd0:	f88d 200c 	strb.w	r2, [sp, #12]
 8018fd4:	2210      	movs	r2, #16
 8018fd6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8018fda:	f000 fead 	bl	8019d38 <uxr_buffer_submessage_header>
 8018fde:	4669      	mov	r1, sp
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	f001 ff1f 	bl	801ae24 <uxr_serialize_CREATE_CLIENT_Payload>
 8018fe6:	b009      	add	sp, #36	; 0x24
 8018fe8:	bd30      	pop	{r4, r5, pc}
 8018fea:	bf00      	nop
 8018fec:	08024484 	.word	0x08024484

08018ff0 <uxr_buffer_delete_session>:
 8018ff0:	4a0c      	ldr	r2, [pc, #48]	; (8019024 <uxr_buffer_delete_session+0x34>)
 8018ff2:	2302      	movs	r3, #2
 8018ff4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8018ff8:	b510      	push	{r4, lr}
 8018ffa:	460c      	mov	r4, r1
 8018ffc:	b082      	sub	sp, #8
 8018ffe:	8911      	ldrh	r1, [r2, #8]
 8019000:	2204      	movs	r2, #4
 8019002:	80c3      	strh	r3, [r0, #6]
 8019004:	2300      	movs	r3, #0
 8019006:	f8ad 1006 	strh.w	r1, [sp, #6]
 801900a:	4620      	mov	r0, r4
 801900c:	2103      	movs	r1, #3
 801900e:	f8ad c004 	strh.w	ip, [sp, #4]
 8019012:	f000 fe91 	bl	8019d38 <uxr_buffer_submessage_header>
 8019016:	a901      	add	r1, sp, #4
 8019018:	4620      	mov	r0, r4
 801901a:	f001 ffab 	bl	801af74 <uxr_serialize_DELETE_Payload>
 801901e:	b002      	add	sp, #8
 8019020:	bd10      	pop	{r4, pc}
 8019022:	bf00      	nop
 8019024:	08024484 	.word	0x08024484

08019028 <uxr_read_create_session_status>:
 8019028:	b510      	push	{r4, lr}
 801902a:	460b      	mov	r3, r1
 801902c:	b088      	sub	sp, #32
 801902e:	4604      	mov	r4, r0
 8019030:	a901      	add	r1, sp, #4
 8019032:	4618      	mov	r0, r3
 8019034:	f001 ffae 	bl	801af94 <uxr_deserialize_STATUS_AGENT_Payload>
 8019038:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801903c:	7163      	strb	r3, [r4, #5]
 801903e:	b008      	add	sp, #32
 8019040:	bd10      	pop	{r4, pc}
 8019042:	bf00      	nop

08019044 <uxr_read_delete_session_status>:
 8019044:	b510      	push	{r4, lr}
 8019046:	b084      	sub	sp, #16
 8019048:	4604      	mov	r4, r0
 801904a:	4608      	mov	r0, r1
 801904c:	a902      	add	r1, sp, #8
 801904e:	f001 ffd1 	bl	801aff4 <uxr_deserialize_STATUS_Payload>
 8019052:	88e3      	ldrh	r3, [r4, #6]
 8019054:	2b02      	cmp	r3, #2
 8019056:	d001      	beq.n	801905c <uxr_read_delete_session_status+0x18>
 8019058:	b004      	add	sp, #16
 801905a:	bd10      	pop	{r4, pc}
 801905c:	f10d 000a 	add.w	r0, sp, #10
 8019060:	f7fe fec6 	bl	8017df0 <uxr_object_id_from_raw>
 8019064:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8019068:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801906c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019070:	b29b      	uxth	r3, r3
 8019072:	2b02      	cmp	r3, #2
 8019074:	d1f0      	bne.n	8019058 <uxr_read_delete_session_status+0x14>
 8019076:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801907a:	7163      	strb	r3, [r4, #5]
 801907c:	e7ec      	b.n	8019058 <uxr_read_delete_session_status+0x14>
 801907e:	bf00      	nop

08019080 <uxr_stamp_create_session_header>:
 8019080:	b510      	push	{r4, lr}
 8019082:	2208      	movs	r2, #8
 8019084:	b08a      	sub	sp, #40	; 0x28
 8019086:	4604      	mov	r4, r0
 8019088:	eb0d 0002 	add.w	r0, sp, r2
 801908c:	f7fa f8e8 	bl	8013260 <ucdr_init_buffer>
 8019090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019094:	2300      	movs	r3, #0
 8019096:	a802      	add	r0, sp, #8
 8019098:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801909c:	9400      	str	r4, [sp, #0]
 801909e:	461a      	mov	r2, r3
 80190a0:	f001 f846 	bl	801a130 <uxr_serialize_message_header>
 80190a4:	b00a      	add	sp, #40	; 0x28
 80190a6:	bd10      	pop	{r4, pc}

080190a8 <uxr_stamp_session_header>:
 80190a8:	b530      	push	{r4, r5, lr}
 80190aa:	b08d      	sub	sp, #52	; 0x34
 80190ac:	4604      	mov	r4, r0
 80190ae:	460d      	mov	r5, r1
 80190b0:	4619      	mov	r1, r3
 80190b2:	a804      	add	r0, sp, #16
 80190b4:	9203      	str	r2, [sp, #12]
 80190b6:	2208      	movs	r2, #8
 80190b8:	f7fa f8d2 	bl	8013260 <ucdr_init_buffer>
 80190bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190c0:	9b03      	ldr	r3, [sp, #12]
 80190c2:	462a      	mov	r2, r5
 80190c4:	a804      	add	r0, sp, #16
 80190c6:	9400      	str	r4, [sp, #0]
 80190c8:	f001 f832 	bl	801a130 <uxr_serialize_message_header>
 80190cc:	b00d      	add	sp, #52	; 0x34
 80190ce:	bd30      	pop	{r4, r5, pc}

080190d0 <uxr_read_session_header>:
 80190d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d4:	4607      	mov	r7, r0
 80190d6:	b084      	sub	sp, #16
 80190d8:	4608      	mov	r0, r1
 80190da:	460c      	mov	r4, r1
 80190dc:	4615      	mov	r5, r2
 80190de:	461e      	mov	r6, r3
 80190e0:	f7fa f8f0 	bl	80132c4 <ucdr_buffer_remaining>
 80190e4:	2808      	cmp	r0, #8
 80190e6:	d803      	bhi.n	80190f0 <uxr_read_session_header+0x20>
 80190e8:	2000      	movs	r0, #0
 80190ea:	b004      	add	sp, #16
 80190ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190f0:	f10d 080c 	add.w	r8, sp, #12
 80190f4:	4633      	mov	r3, r6
 80190f6:	462a      	mov	r2, r5
 80190f8:	4620      	mov	r0, r4
 80190fa:	f10d 010b 	add.w	r1, sp, #11
 80190fe:	f8cd 8000 	str.w	r8, [sp]
 8019102:	f001 f833 	bl	801a16c <uxr_deserialize_message_header>
 8019106:	783a      	ldrb	r2, [r7, #0]
 8019108:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801910c:	4293      	cmp	r3, r2
 801910e:	d1eb      	bne.n	80190e8 <uxr_read_session_header+0x18>
 8019110:	061b      	lsls	r3, r3, #24
 8019112:	d41b      	bmi.n	801914c <uxr_read_session_header+0x7c>
 8019114:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019118:	787b      	ldrb	r3, [r7, #1]
 801911a:	429a      	cmp	r2, r3
 801911c:	d003      	beq.n	8019126 <uxr_read_session_header+0x56>
 801911e:	2001      	movs	r0, #1
 8019120:	f080 0001 	eor.w	r0, r0, #1
 8019124:	e7e1      	b.n	80190ea <uxr_read_session_header+0x1a>
 8019126:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801912a:	1cb8      	adds	r0, r7, #2
 801912c:	78bb      	ldrb	r3, [r7, #2]
 801912e:	429a      	cmp	r2, r3
 8019130:	d1f5      	bne.n	801911e <uxr_read_session_header+0x4e>
 8019132:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8019136:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801913a:	429a      	cmp	r2, r3
 801913c:	d1ef      	bne.n	801911e <uxr_read_session_header+0x4e>
 801913e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8019142:	7843      	ldrb	r3, [r0, #1]
 8019144:	429a      	cmp	r2, r3
 8019146:	d1ea      	bne.n	801911e <uxr_read_session_header+0x4e>
 8019148:	2000      	movs	r0, #0
 801914a:	e7e9      	b.n	8019120 <uxr_read_session_header+0x50>
 801914c:	2001      	movs	r0, #1
 801914e:	e7cc      	b.n	80190ea <uxr_read_session_header+0x1a>

08019150 <uxr_session_header_offset>:
 8019150:	f990 3000 	ldrsb.w	r3, [r0]
 8019154:	2b00      	cmp	r3, #0
 8019156:	bfac      	ite	ge
 8019158:	2008      	movge	r0, #8
 801915a:	2004      	movlt	r0, #4
 801915c:	4770      	bx	lr
 801915e:	bf00      	nop

08019160 <uxr_init_base_object_request>:
 8019160:	b510      	push	{r4, lr}
 8019162:	b082      	sub	sp, #8
 8019164:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8019168:	9101      	str	r1, [sp, #4]
 801916a:	88c3      	ldrh	r3, [r0, #6]
 801916c:	f1a3 010a 	sub.w	r1, r3, #10
 8019170:	b289      	uxth	r1, r1
 8019172:	42a1      	cmp	r1, r4
 8019174:	d80f      	bhi.n	8019196 <uxr_init_base_object_request+0x36>
 8019176:	3301      	adds	r3, #1
 8019178:	b29c      	uxth	r4, r3
 801917a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801917e:	b2db      	uxtb	r3, r3
 8019180:	80c4      	strh	r4, [r0, #6]
 8019182:	1c91      	adds	r1, r2, #2
 8019184:	9801      	ldr	r0, [sp, #4]
 8019186:	f882 c000 	strb.w	ip, [r2]
 801918a:	7053      	strb	r3, [r2, #1]
 801918c:	f7fe fe44 	bl	8017e18 <uxr_object_id_to_raw>
 8019190:	4620      	mov	r0, r4
 8019192:	b002      	add	sp, #8
 8019194:	bd10      	pop	{r4, pc}
 8019196:	230a      	movs	r3, #10
 8019198:	f04f 0c00 	mov.w	ip, #0
 801919c:	461c      	mov	r4, r3
 801919e:	e7ef      	b.n	8019180 <uxr_init_base_object_request+0x20>

080191a0 <uxr_parse_base_object_request>:
 80191a0:	b570      	push	{r4, r5, r6, lr}
 80191a2:	4604      	mov	r4, r0
 80191a4:	3002      	adds	r0, #2
 80191a6:	460d      	mov	r5, r1
 80191a8:	4616      	mov	r6, r2
 80191aa:	f7fe fe21 	bl	8017df0 <uxr_object_id_from_raw>
 80191ae:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80191b2:	8028      	strh	r0, [r5, #0]
 80191b4:	806b      	strh	r3, [r5, #2]
 80191b6:	7822      	ldrb	r2, [r4, #0]
 80191b8:	7863      	ldrb	r3, [r4, #1]
 80191ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80191be:	8033      	strh	r3, [r6, #0]
 80191c0:	bd70      	pop	{r4, r5, r6, pc}
 80191c2:	bf00      	nop

080191c4 <uxr_init_framing_io>:
 80191c4:	2300      	movs	r3, #0
 80191c6:	7041      	strb	r1, [r0, #1]
 80191c8:	7003      	strb	r3, [r0, #0]
 80191ca:	8583      	strh	r3, [r0, #44]	; 0x2c
 80191cc:	4770      	bx	lr
 80191ce:	bf00      	nop

080191d0 <uxr_write_framed_msg>:
 80191d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d4:	4617      	mov	r7, r2
 80191d6:	7842      	ldrb	r2, [r0, #1]
 80191d8:	460e      	mov	r6, r1
 80191da:	b083      	sub	sp, #12
 80191dc:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80191e0:	469b      	mov	fp, r3
 80191e2:	237e      	movs	r3, #126	; 0x7e
 80191e4:	4604      	mov	r4, r0
 80191e6:	2901      	cmp	r1, #1
 80191e8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80191ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80191f0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80191f4:	f240 8115 	bls.w	8019422 <uxr_write_framed_msg+0x252>
 80191f8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80191fc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019200:	2202      	movs	r2, #2
 8019202:	2901      	cmp	r1, #1
 8019204:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019208:	d952      	bls.n	80192b0 <uxr_write_framed_msg+0xe0>
 801920a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801920c:	2103      	movs	r1, #3
 801920e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8019212:	b2dd      	uxtb	r5, r3
 8019214:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019218:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801921c:	2a01      	cmp	r2, #1
 801921e:	d95c      	bls.n	80192da <uxr_write_framed_msg+0x10a>
 8019220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019222:	1862      	adds	r2, r4, r1
 8019224:	3101      	adds	r1, #1
 8019226:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801922a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801922e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019232:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019236:	2a01      	cmp	r2, #1
 8019238:	d961      	bls.n	80192fe <uxr_write_framed_msg+0x12e>
 801923a:	1c4a      	adds	r2, r1, #1
 801923c:	4421      	add	r1, r4
 801923e:	b2d2      	uxtb	r2, r2
 8019240:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019244:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019248:	2b00      	cmp	r3, #0
 801924a:	d06a      	beq.n	8019322 <uxr_write_framed_msg+0x152>
 801924c:	f04f 0800 	mov.w	r8, #0
 8019250:	46c1      	mov	r9, r8
 8019252:	e016      	b.n	8019282 <uxr_write_framed_msg+0xb2>
 8019254:	2a29      	cmp	r2, #41	; 0x29
 8019256:	d868      	bhi.n	801932a <uxr_write_framed_msg+0x15a>
 8019258:	18a0      	adds	r0, r4, r2
 801925a:	3201      	adds	r2, #1
 801925c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019260:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019264:	ea88 0101 	eor.w	r1, r8, r1
 8019268:	4b7d      	ldr	r3, [pc, #500]	; (8019460 <uxr_write_framed_msg+0x290>)
 801926a:	f109 0901 	add.w	r9, r9, #1
 801926e:	b2c9      	uxtb	r1, r1
 8019270:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019274:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801927a:	454b      	cmp	r3, r9
 801927c:	d969      	bls.n	8019352 <uxr_write_framed_msg+0x182>
 801927e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019282:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019286:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801928a:	2801      	cmp	r0, #1
 801928c:	d8e2      	bhi.n	8019254 <uxr_write_framed_msg+0x84>
 801928e:	1c50      	adds	r0, r2, #1
 8019290:	b2c0      	uxtb	r0, r0
 8019292:	2829      	cmp	r0, #41	; 0x29
 8019294:	d849      	bhi.n	801932a <uxr_write_framed_msg+0x15a>
 8019296:	18a0      	adds	r0, r4, r2
 8019298:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801929c:	3202      	adds	r2, #2
 801929e:	f081 0520 	eor.w	r5, r1, #32
 80192a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80192a6:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80192aa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192ae:	e7d9      	b.n	8019264 <uxr_write_framed_msg+0x94>
 80192b0:	2104      	movs	r1, #4
 80192b2:	f04f 0c03 	mov.w	ip, #3
 80192b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192b8:	4422      	add	r2, r4
 80192ba:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80192be:	44a4      	add	ip, r4
 80192c0:	b2dd      	uxtb	r5, r3
 80192c2:	f080 0020 	eor.w	r0, r0, #32
 80192c6:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80192ca:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80192ce:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80192d2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80192d6:	2a01      	cmp	r2, #1
 80192d8:	d8a2      	bhi.n	8019220 <uxr_write_framed_msg+0x50>
 80192da:	1862      	adds	r2, r4, r1
 80192dc:	207d      	movs	r0, #125	; 0x7d
 80192de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192e0:	f085 0520 	eor.w	r5, r5, #32
 80192e4:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80192e8:	3102      	adds	r1, #2
 80192ea:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80192ee:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80192f2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80192f6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80192fa:	2a01      	cmp	r2, #1
 80192fc:	d89d      	bhi.n	801923a <uxr_write_framed_msg+0x6a>
 80192fe:	1c4d      	adds	r5, r1, #1
 8019300:	1c8a      	adds	r2, r1, #2
 8019302:	f080 0020 	eor.w	r0, r0, #32
 8019306:	4421      	add	r1, r4
 8019308:	fa54 f585 	uxtab	r5, r4, r5
 801930c:	b2d2      	uxtb	r2, r2
 801930e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8019312:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8019316:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801931a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801931e:	2b00      	cmp	r3, #0
 8019320:	d194      	bne.n	801924c <uxr_write_framed_msg+0x7c>
 8019322:	4619      	mov	r1, r3
 8019324:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019328:	e019      	b.n	801935e <uxr_write_framed_msg+0x18e>
 801932a:	2500      	movs	r5, #0
 801932c:	e000      	b.n	8019330 <uxr_write_framed_msg+0x160>
 801932e:	b160      	cbz	r0, 801934a <uxr_write_framed_msg+0x17a>
 8019330:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019334:	1b52      	subs	r2, r2, r5
 8019336:	4653      	mov	r3, sl
 8019338:	4638      	mov	r0, r7
 801933a:	4421      	add	r1, r4
 801933c:	47b0      	blx	r6
 801933e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019342:	4405      	add	r5, r0
 8019344:	4295      	cmp	r5, r2
 8019346:	d3f2      	bcc.n	801932e <uxr_write_framed_msg+0x15e>
 8019348:	d066      	beq.n	8019418 <uxr_write_framed_msg+0x248>
 801934a:	2000      	movs	r0, #0
 801934c:	b003      	add	sp, #12
 801934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019352:	fa5f f188 	uxtb.w	r1, r8
 8019356:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801935a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801935e:	f04f 0900 	mov.w	r9, #0
 8019362:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8019366:	46c8      	mov	r8, r9
 8019368:	e013      	b.n	8019392 <uxr_write_framed_msg+0x1c2>
 801936a:	2a29      	cmp	r2, #41	; 0x29
 801936c:	d824      	bhi.n	80193b8 <uxr_write_framed_msg+0x1e8>
 801936e:	18a3      	adds	r3, r4, r2
 8019370:	3201      	adds	r2, #1
 8019372:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8019376:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801937a:	f109 0901 	add.w	r9, r9, #1
 801937e:	f1b9 0f02 	cmp.w	r9, #2
 8019382:	d02d      	beq.n	80193e0 <uxr_write_framed_msg+0x210>
 8019384:	f109 0308 	add.w	r3, r9, #8
 8019388:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801938c:	446b      	add	r3, sp
 801938e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019392:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8019396:	2b01      	cmp	r3, #1
 8019398:	d8e7      	bhi.n	801936a <uxr_write_framed_msg+0x19a>
 801939a:	1c53      	adds	r3, r2, #1
 801939c:	b2db      	uxtb	r3, r3
 801939e:	2b29      	cmp	r3, #41	; 0x29
 80193a0:	d80a      	bhi.n	80193b8 <uxr_write_framed_msg+0x1e8>
 80193a2:	18a3      	adds	r3, r4, r2
 80193a4:	f081 0120 	eor.w	r1, r1, #32
 80193a8:	3202      	adds	r2, #2
 80193aa:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80193ae:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 80193b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193b6:	e7e0      	b.n	801937a <uxr_write_framed_msg+0x1aa>
 80193b8:	2500      	movs	r5, #0
 80193ba:	e001      	b.n	80193c0 <uxr_write_framed_msg+0x1f0>
 80193bc:	2800      	cmp	r0, #0
 80193be:	d0c4      	beq.n	801934a <uxr_write_framed_msg+0x17a>
 80193c0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80193c4:	1b52      	subs	r2, r2, r5
 80193c6:	4653      	mov	r3, sl
 80193c8:	4638      	mov	r0, r7
 80193ca:	4421      	add	r1, r4
 80193cc:	47b0      	blx	r6
 80193ce:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80193d2:	4405      	add	r5, r0
 80193d4:	4295      	cmp	r5, r2
 80193d6:	d3f1      	bcc.n	80193bc <uxr_write_framed_msg+0x1ec>
 80193d8:	d1b7      	bne.n	801934a <uxr_write_framed_msg+0x17a>
 80193da:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80193de:	e7d1      	b.n	8019384 <uxr_write_framed_msg+0x1b4>
 80193e0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80193e4:	b19a      	cbz	r2, 801940e <uxr_write_framed_msg+0x23e>
 80193e6:	2500      	movs	r5, #0
 80193e8:	e001      	b.n	80193ee <uxr_write_framed_msg+0x21e>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	d0ad      	beq.n	801934a <uxr_write_framed_msg+0x17a>
 80193ee:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80193f2:	1b52      	subs	r2, r2, r5
 80193f4:	4653      	mov	r3, sl
 80193f6:	4638      	mov	r0, r7
 80193f8:	4421      	add	r1, r4
 80193fa:	47b0      	blx	r6
 80193fc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019400:	4405      	add	r5, r0
 8019402:	4295      	cmp	r5, r2
 8019404:	d3f1      	bcc.n	80193ea <uxr_write_framed_msg+0x21a>
 8019406:	d1a0      	bne.n	801934a <uxr_write_framed_msg+0x17a>
 8019408:	2300      	movs	r3, #0
 801940a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801940e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019410:	b298      	uxth	r0, r3
 8019412:	b003      	add	sp, #12
 8019414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019418:	f04f 0300 	mov.w	r3, #0
 801941c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019420:	e72a      	b.n	8019278 <uxr_write_framed_msg+0xa8>
 8019422:	217d      	movs	r1, #125	; 0x7d
 8019424:	f082 0220 	eor.w	r2, r2, #32
 8019428:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801942c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019430:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8019434:	2203      	movs	r2, #3
 8019436:	2901      	cmp	r1, #1
 8019438:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801943c:	d803      	bhi.n	8019446 <uxr_write_framed_msg+0x276>
 801943e:	2105      	movs	r1, #5
 8019440:	f04f 0c04 	mov.w	ip, #4
 8019444:	e737      	b.n	80192b6 <uxr_write_framed_msg+0xe6>
 8019446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019448:	2104      	movs	r1, #4
 801944a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801944e:	b2dd      	uxtb	r5, r3
 8019450:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019454:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019458:	2a01      	cmp	r2, #1
 801945a:	f63f aee1 	bhi.w	8019220 <uxr_write_framed_msg+0x50>
 801945e:	e73c      	b.n	80192da <uxr_write_framed_msg+0x10a>
 8019460:	08025604 	.word	0x08025604

08019464 <uxr_framing_read_transport>:
 8019464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019468:	4604      	mov	r4, r0
 801946a:	b085      	sub	sp, #20
 801946c:	4692      	mov	sl, r2
 801946e:	4689      	mov	r9, r1
 8019470:	461d      	mov	r5, r3
 8019472:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019474:	f000 fca6 	bl	8019dc4 <uxr_millis>
 8019478:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801947c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019480:	4680      	mov	r8, r0
 8019482:	42ba      	cmp	r2, r7
 8019484:	d05f      	beq.n	8019546 <uxr_framing_read_transport+0xe2>
 8019486:	d817      	bhi.n	80194b8 <uxr_framing_read_transport+0x54>
 8019488:	3f01      	subs	r7, #1
 801948a:	1aba      	subs	r2, r7, r2
 801948c:	2700      	movs	r7, #0
 801948e:	b2d2      	uxtb	r2, r2
 8019490:	42b2      	cmp	r2, r6
 8019492:	d81a      	bhi.n	80194ca <uxr_framing_read_transport+0x66>
 8019494:	19d3      	adds	r3, r2, r7
 8019496:	42b3      	cmp	r3, r6
 8019498:	d852      	bhi.n	8019540 <uxr_framing_read_transport+0xdc>
 801949a:	b9d2      	cbnz	r2, 80194d2 <uxr_framing_read_transport+0x6e>
 801949c:	2600      	movs	r6, #0
 801949e:	f000 fc91 	bl	8019dc4 <uxr_millis>
 80194a2:	682b      	ldr	r3, [r5, #0]
 80194a4:	eba0 0008 	sub.w	r0, r0, r8
 80194a8:	1a1b      	subs	r3, r3, r0
 80194aa:	4630      	mov	r0, r6
 80194ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194b0:	602b      	str	r3, [r5, #0]
 80194b2:	b005      	add	sp, #20
 80194b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194b8:	2f00      	cmp	r7, #0
 80194ba:	d060      	beq.n	801957e <uxr_framing_read_transport+0x11a>
 80194bc:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 80194c0:	3f01      	subs	r7, #1
 80194c2:	b2d2      	uxtb	r2, r2
 80194c4:	b2ff      	uxtb	r7, r7
 80194c6:	42b2      	cmp	r2, r6
 80194c8:	d9e4      	bls.n	8019494 <uxr_framing_read_transport+0x30>
 80194ca:	b2f2      	uxtb	r2, r6
 80194cc:	2700      	movs	r7, #0
 80194ce:	2a00      	cmp	r2, #0
 80194d0:	d0e4      	beq.n	801949c <uxr_framing_read_transport+0x38>
 80194d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194d4:	4650      	mov	r0, sl
 80194d6:	9203      	str	r2, [sp, #12]
 80194d8:	9300      	str	r3, [sp, #0]
 80194da:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80194de:	682b      	ldr	r3, [r5, #0]
 80194e0:	3102      	adds	r1, #2
 80194e2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019588 <uxr_framing_read_transport+0x124>
 80194e6:	4421      	add	r1, r4
 80194e8:	47c8      	blx	r9
 80194ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80194ee:	4606      	mov	r6, r0
 80194f0:	4403      	add	r3, r0
 80194f2:	0859      	lsrs	r1, r3, #1
 80194f4:	fbab 2101 	umull	r2, r1, fp, r1
 80194f8:	222a      	movs	r2, #42	; 0x2a
 80194fa:	0889      	lsrs	r1, r1, #2
 80194fc:	fb02 3111 	mls	r1, r2, r1, r3
 8019500:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8019504:	2800      	cmp	r0, #0
 8019506:	d0c9      	beq.n	801949c <uxr_framing_read_transport+0x38>
 8019508:	9a03      	ldr	r2, [sp, #12]
 801950a:	4290      	cmp	r0, r2
 801950c:	d1c7      	bne.n	801949e <uxr_framing_read_transport+0x3a>
 801950e:	2f00      	cmp	r7, #0
 8019510:	d0c5      	beq.n	801949e <uxr_framing_read_transport+0x3a>
 8019512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019514:	3102      	adds	r1, #2
 8019516:	463a      	mov	r2, r7
 8019518:	4650      	mov	r0, sl
 801951a:	4421      	add	r1, r4
 801951c:	9300      	str	r3, [sp, #0]
 801951e:	2300      	movs	r3, #0
 8019520:	47c8      	blx	r9
 8019522:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019526:	4406      	add	r6, r0
 8019528:	1813      	adds	r3, r2, r0
 801952a:	085a      	lsrs	r2, r3, #1
 801952c:	fbab 1b02 	umull	r1, fp, fp, r2
 8019530:	222a      	movs	r2, #42	; 0x2a
 8019532:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019536:	fb02 331b 	mls	r3, r2, fp, r3
 801953a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801953e:	e7ae      	b.n	801949e <uxr_framing_read_transport+0x3a>
 8019540:	1ab6      	subs	r6, r6, r2
 8019542:	b2f7      	uxtb	r7, r6
 8019544:	e7a9      	b.n	801949a <uxr_framing_read_transport+0x36>
 8019546:	2300      	movs	r3, #0
 8019548:	2e28      	cmp	r6, #40	; 0x28
 801954a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801954c:	d9bd      	bls.n	80194ca <uxr_framing_read_transport+0x66>
 801954e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019550:	2229      	movs	r2, #41	; 0x29
 8019552:	1ca1      	adds	r1, r4, #2
 8019554:	4650      	mov	r0, sl
 8019556:	9300      	str	r3, [sp, #0]
 8019558:	682b      	ldr	r3, [r5, #0]
 801955a:	47c8      	blx	r9
 801955c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019560:	4606      	mov	r6, r0
 8019562:	212a      	movs	r1, #42	; 0x2a
 8019564:	4403      	add	r3, r0
 8019566:	4808      	ldr	r0, [pc, #32]	; (8019588 <uxr_framing_read_transport+0x124>)
 8019568:	085a      	lsrs	r2, r3, #1
 801956a:	fba0 0202 	umull	r0, r2, r0, r2
 801956e:	0892      	lsrs	r2, r2, #2
 8019570:	fb01 3312 	mls	r3, r1, r2, r3
 8019574:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019578:	2e00      	cmp	r6, #0
 801957a:	d08f      	beq.n	801949c <uxr_framing_read_transport+0x38>
 801957c:	e78f      	b.n	801949e <uxr_framing_read_transport+0x3a>
 801957e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8019582:	b2d2      	uxtb	r2, r2
 8019584:	e784      	b.n	8019490 <uxr_framing_read_transport+0x2c>
 8019586:	bf00      	nop
 8019588:	30c30c31 	.word	0x30c30c31

0801958c <uxr_read_framed_msg>:
 801958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019590:	461e      	mov	r6, r3
 8019592:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019596:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801959a:	b083      	sub	sp, #12
 801959c:	4604      	mov	r4, r0
 801959e:	4688      	mov	r8, r1
 80195a0:	429d      	cmp	r5, r3
 80195a2:	4691      	mov	r9, r2
 80195a4:	f000 818c 	beq.w	80198c0 <uxr_read_framed_msg+0x334>
 80195a8:	7823      	ldrb	r3, [r4, #0]
 80195aa:	4dc3      	ldr	r5, [pc, #780]	; (80198b8 <uxr_read_framed_msg+0x32c>)
 80195ac:	4fc3      	ldr	r7, [pc, #780]	; (80198bc <uxr_read_framed_msg+0x330>)
 80195ae:	2b07      	cmp	r3, #7
 80195b0:	d8fd      	bhi.n	80195ae <uxr_read_framed_msg+0x22>
 80195b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80195b6:	011c      	.short	0x011c
 80195b8:	00d900fb 	.word	0x00d900fb
 80195bc:	008f00ba 	.word	0x008f00ba
 80195c0:	00320051 	.word	0x00320051
 80195c4:	0008      	.short	0x0008
 80195c6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80195ca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80195ce:	4299      	cmp	r1, r3
 80195d0:	f000 814d 	beq.w	801986e <uxr_read_framed_msg+0x2e2>
 80195d4:	18e2      	adds	r2, r4, r3
 80195d6:	7892      	ldrb	r2, [r2, #2]
 80195d8:	2a7d      	cmp	r2, #125	; 0x7d
 80195da:	f000 81b8 	beq.w	801994e <uxr_read_framed_msg+0x3c2>
 80195de:	3301      	adds	r3, #1
 80195e0:	212a      	movs	r1, #42	; 0x2a
 80195e2:	2a7e      	cmp	r2, #126	; 0x7e
 80195e4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80195e8:	fba5 c000 	umull	ip, r0, r5, r0
 80195ec:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80195f0:	fb01 3310 	mls	r3, r1, r0, r3
 80195f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195f8:	f000 8257 	beq.w	8019aaa <uxr_read_framed_msg+0x51e>
 80195fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80195fe:	2000      	movs	r0, #0
 8019600:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019602:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019606:	7020      	strb	r0, [r4, #0]
 8019608:	b29b      	uxth	r3, r3
 801960a:	4299      	cmp	r1, r3
 801960c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801960e:	f000 8178 	beq.w	8019902 <uxr_read_framed_msg+0x376>
 8019612:	2000      	movs	r0, #0
 8019614:	b003      	add	sp, #12
 8019616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801961a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801961e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019622:	4298      	cmp	r0, r3
 8019624:	f000 8132 	beq.w	801988c <uxr_read_framed_msg+0x300>
 8019628:	18e2      	adds	r2, r4, r3
 801962a:	7891      	ldrb	r1, [r2, #2]
 801962c:	297d      	cmp	r1, #125	; 0x7d
 801962e:	f000 8170 	beq.w	8019912 <uxr_read_framed_msg+0x386>
 8019632:	3301      	adds	r3, #1
 8019634:	202a      	movs	r0, #42	; 0x2a
 8019636:	297e      	cmp	r1, #126	; 0x7e
 8019638:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801963c:	fba5 c202 	umull	ip, r2, r5, r2
 8019640:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019644:	fb00 3312 	mls	r3, r0, r2, r3
 8019648:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801964c:	f000 821d 	beq.w	8019a8a <uxr_read_framed_msg+0x4fe>
 8019650:	2307      	movs	r3, #7
 8019652:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019654:	7023      	strb	r3, [r4, #0]
 8019656:	e7aa      	b.n	80195ae <uxr_read_framed_msg+0x22>
 8019658:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801965a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801965e:	459e      	cmp	lr, r3
 8019660:	d827      	bhi.n	80196b2 <uxr_read_framed_msg+0x126>
 8019662:	e032      	b.n	80196ca <uxr_read_framed_msg+0x13e>
 8019664:	fba5 b101 	umull	fp, r1, r5, r1
 8019668:	f89c c002 	ldrb.w	ip, [ip, #2]
 801966c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019670:	0889      	lsrs	r1, r1, #2
 8019672:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019676:	fb0b 0111 	mls	r1, fp, r1, r0
 801967a:	f000 80d4 	beq.w	8019826 <uxr_read_framed_msg+0x29a>
 801967e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019682:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019686:	f000 80cb 	beq.w	8019820 <uxr_read_framed_msg+0x294>
 801968a:	f806 c003 	strb.w	ip, [r6, r3]
 801968e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019690:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019692:	ea80 010c 	eor.w	r1, r0, ip
 8019696:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801969a:	3301      	adds	r3, #1
 801969c:	b2c9      	uxtb	r1, r1
 801969e:	b29b      	uxth	r3, r3
 80196a0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80196a4:	4573      	cmp	r3, lr
 80196a6:	8663      	strh	r3, [r4, #50]	; 0x32
 80196a8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80196ac:	86e2      	strh	r2, [r4, #54]	; 0x36
 80196ae:	f080 811d 	bcs.w	80198ec <uxr_read_framed_msg+0x360>
 80196b2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80196b6:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80196ba:	1c50      	adds	r0, r2, #1
 80196bc:	eb04 0c02 	add.w	ip, r4, r2
 80196c0:	4592      	cmp	sl, r2
 80196c2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80196c6:	d1cd      	bne.n	8019664 <uxr_read_framed_msg+0xd8>
 80196c8:	459e      	cmp	lr, r3
 80196ca:	f040 8114 	bne.w	80198f6 <uxr_read_framed_msg+0x36a>
 80196ce:	2306      	movs	r3, #6
 80196d0:	7023      	strb	r3, [r4, #0]
 80196d2:	e76c      	b.n	80195ae <uxr_read_framed_msg+0x22>
 80196d4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80196d8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80196dc:	4298      	cmp	r0, r3
 80196de:	f000 80c6 	beq.w	801986e <uxr_read_framed_msg+0x2e2>
 80196e2:	18e2      	adds	r2, r4, r3
 80196e4:	7891      	ldrb	r1, [r2, #2]
 80196e6:	297d      	cmp	r1, #125	; 0x7d
 80196e8:	f000 8193 	beq.w	8019a12 <uxr_read_framed_msg+0x486>
 80196ec:	3301      	adds	r3, #1
 80196ee:	202a      	movs	r0, #42	; 0x2a
 80196f0:	297e      	cmp	r1, #126	; 0x7e
 80196f2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80196f6:	fba5 c202 	umull	ip, r2, r5, r2
 80196fa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80196fe:	fb00 3312 	mls	r3, r0, r2, r3
 8019702:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019706:	f000 81d0 	beq.w	8019aaa <uxr_read_framed_msg+0x51e>
 801970a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801970c:	2000      	movs	r0, #0
 801970e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019712:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019714:	8660      	strh	r0, [r4, #50]	; 0x32
 8019716:	b29b      	uxth	r3, r3
 8019718:	86e0      	strh	r0, [r4, #54]	; 0x36
 801971a:	428b      	cmp	r3, r1
 801971c:	8623      	strh	r3, [r4, #48]	; 0x30
 801971e:	f240 80e2 	bls.w	80198e6 <uxr_read_framed_msg+0x35a>
 8019722:	7020      	strb	r0, [r4, #0]
 8019724:	b003      	add	sp, #12
 8019726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801972a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801972e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019732:	4298      	cmp	r0, r3
 8019734:	f000 80aa 	beq.w	801988c <uxr_read_framed_msg+0x300>
 8019738:	18e2      	adds	r2, r4, r3
 801973a:	7891      	ldrb	r1, [r2, #2]
 801973c:	297d      	cmp	r1, #125	; 0x7d
 801973e:	f000 8186 	beq.w	8019a4e <uxr_read_framed_msg+0x4c2>
 8019742:	3301      	adds	r3, #1
 8019744:	202a      	movs	r0, #42	; 0x2a
 8019746:	297e      	cmp	r1, #126	; 0x7e
 8019748:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801974c:	fba5 c202 	umull	ip, r2, r5, r2
 8019750:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019754:	fb00 3312 	mls	r3, r0, r2, r3
 8019758:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801975c:	f000 8195 	beq.w	8019a8a <uxr_read_framed_msg+0x4fe>
 8019760:	2304      	movs	r3, #4
 8019762:	8621      	strh	r1, [r4, #48]	; 0x30
 8019764:	7023      	strb	r3, [r4, #0]
 8019766:	e722      	b.n	80195ae <uxr_read_framed_msg+0x22>
 8019768:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801976c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019770:	4290      	cmp	r0, r2
 8019772:	f000 80b4 	beq.w	80198de <uxr_read_framed_msg+0x352>
 8019776:	18a3      	adds	r3, r4, r2
 8019778:	7899      	ldrb	r1, [r3, #2]
 801977a:	297d      	cmp	r1, #125	; 0x7d
 801977c:	f000 8107 	beq.w	801998e <uxr_read_framed_msg+0x402>
 8019780:	3201      	adds	r2, #1
 8019782:	232a      	movs	r3, #42	; 0x2a
 8019784:	297e      	cmp	r1, #126	; 0x7e
 8019786:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801978a:	fba5 c000 	umull	ip, r0, r5, r0
 801978e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019792:	fb03 2210 	mls	r2, r3, r0, r2
 8019796:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801979a:	f000 818a 	beq.w	8019ab2 <uxr_read_framed_msg+0x526>
 801979e:	7863      	ldrb	r3, [r4, #1]
 80197a0:	428b      	cmp	r3, r1
 80197a2:	bf0c      	ite	eq
 80197a4:	2303      	moveq	r3, #3
 80197a6:	2300      	movne	r3, #0
 80197a8:	7023      	strb	r3, [r4, #0]
 80197aa:	e700      	b.n	80195ae <uxr_read_framed_msg+0x22>
 80197ac:	2300      	movs	r3, #0
 80197ae:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80197b2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80197b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80197ba:	4299      	cmp	r1, r3
 80197bc:	d06a      	beq.n	8019894 <uxr_read_framed_msg+0x308>
 80197be:	18e2      	adds	r2, r4, r3
 80197c0:	7890      	ldrb	r0, [r2, #2]
 80197c2:	287d      	cmp	r0, #125	; 0x7d
 80197c4:	f000 8100 	beq.w	80199c8 <uxr_read_framed_msg+0x43c>
 80197c8:	3301      	adds	r3, #1
 80197ca:	212a      	movs	r1, #42	; 0x2a
 80197cc:	287e      	cmp	r0, #126	; 0x7e
 80197ce:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80197d2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80197d6:	fba5 c202 	umull	ip, r2, r5, r2
 80197da:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80197de:	fb01 3312 	mls	r3, r1, r2, r3
 80197e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80197e6:	d055      	beq.n	8019894 <uxr_read_framed_msg+0x308>
 80197e8:	2302      	movs	r3, #2
 80197ea:	7023      	strb	r3, [r4, #0]
 80197ec:	e6df      	b.n	80195ae <uxr_read_framed_msg+0x22>
 80197ee:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 80197f2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80197f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80197fa:	1c5a      	adds	r2, r3, #1
 80197fc:	459c      	cmp	ip, r3
 80197fe:	eb04 0103 	add.w	r1, r4, r3
 8019802:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019806:	f43f af04 	beq.w	8019612 <uxr_read_framed_msg+0x86>
 801980a:	fba5 0303 	umull	r0, r3, r5, r3
 801980e:	7889      	ldrb	r1, [r1, #2]
 8019810:	089b      	lsrs	r3, r3, #2
 8019812:	297e      	cmp	r1, #126	; 0x7e
 8019814:	fb0e 2313 	mls	r3, lr, r3, r2
 8019818:	b2db      	uxtb	r3, r3
 801981a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801981e:	d1ec      	bne.n	80197fa <uxr_read_framed_msg+0x26e>
 8019820:	2301      	movs	r3, #1
 8019822:	7023      	strb	r3, [r4, #0]
 8019824:	e6c3      	b.n	80195ae <uxr_read_framed_msg+0x22>
 8019826:	1c50      	adds	r0, r2, #1
 8019828:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801982c:	3202      	adds	r2, #2
 801982e:	0841      	lsrs	r1, r0, #1
 8019830:	fba5 c101 	umull	ip, r1, r5, r1
 8019834:	0889      	lsrs	r1, r1, #2
 8019836:	fb0b 0111 	mls	r1, fp, r1, r0
 801983a:	1860      	adds	r0, r4, r1
 801983c:	b2c9      	uxtb	r1, r1
 801983e:	458a      	cmp	sl, r1
 8019840:	f43f af42 	beq.w	80196c8 <uxr_read_framed_msg+0x13c>
 8019844:	0851      	lsrs	r1, r2, #1
 8019846:	7880      	ldrb	r0, [r0, #2]
 8019848:	fba5 a101 	umull	sl, r1, r5, r1
 801984c:	287e      	cmp	r0, #126	; 0x7e
 801984e:	f080 0c20 	eor.w	ip, r0, #32
 8019852:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019856:	fb0b 2211 	mls	r2, fp, r1, r2
 801985a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801985e:	f47f af14 	bne.w	801968a <uxr_read_framed_msg+0xfe>
 8019862:	459e      	cmp	lr, r3
 8019864:	f43f af33 	beq.w	80196ce <uxr_read_framed_msg+0x142>
 8019868:	2301      	movs	r3, #1
 801986a:	7023      	strb	r3, [r4, #0]
 801986c:	e69f      	b.n	80195ae <uxr_read_framed_msg+0x22>
 801986e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019870:	9300      	str	r3, [sp, #0]
 8019872:	2301      	movs	r3, #1
 8019874:	9301      	str	r3, [sp, #4]
 8019876:	464a      	mov	r2, r9
 8019878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801987a:	4641      	mov	r1, r8
 801987c:	4620      	mov	r0, r4
 801987e:	f7ff fdf1 	bl	8019464 <uxr_framing_read_transport>
 8019882:	2800      	cmp	r0, #0
 8019884:	f43f aec5 	beq.w	8019612 <uxr_read_framed_msg+0x86>
 8019888:	7823      	ldrb	r3, [r4, #0]
 801988a:	e690      	b.n	80195ae <uxr_read_framed_msg+0x22>
 801988c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801988e:	9300      	str	r3, [sp, #0]
 8019890:	2302      	movs	r3, #2
 8019892:	e7ef      	b.n	8019874 <uxr_read_framed_msg+0x2e8>
 8019894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019896:	464a      	mov	r2, r9
 8019898:	4641      	mov	r1, r8
 801989a:	4620      	mov	r0, r4
 801989c:	9300      	str	r3, [sp, #0]
 801989e:	2304      	movs	r3, #4
 80198a0:	9301      	str	r3, [sp, #4]
 80198a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198a4:	f7ff fdde 	bl	8019464 <uxr_framing_read_transport>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	d1ed      	bne.n	8019888 <uxr_read_framed_msg+0x2fc>
 80198ac:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80198b0:	2b7e      	cmp	r3, #126	; 0x7e
 80198b2:	d0e9      	beq.n	8019888 <uxr_read_framed_msg+0x2fc>
 80198b4:	e6ad      	b.n	8019612 <uxr_read_framed_msg+0x86>
 80198b6:	bf00      	nop
 80198b8:	30c30c31 	.word	0x30c30c31
 80198bc:	08025604 	.word	0x08025604
 80198c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198c2:	9300      	str	r3, [sp, #0]
 80198c4:	2305      	movs	r3, #5
 80198c6:	9301      	str	r3, [sp, #4]
 80198c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198ca:	f7ff fdcb 	bl	8019464 <uxr_framing_read_transport>
 80198ce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80198d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80198d6:	429a      	cmp	r2, r3
 80198d8:	f43f ae9b 	beq.w	8019612 <uxr_read_framed_msg+0x86>
 80198dc:	e664      	b.n	80195a8 <uxr_read_framed_msg+0x1c>
 80198de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198e0:	9300      	str	r3, [sp, #0]
 80198e2:	2303      	movs	r3, #3
 80198e4:	e7c6      	b.n	8019874 <uxr_read_framed_msg+0x2e8>
 80198e6:	2305      	movs	r3, #5
 80198e8:	7023      	strb	r3, [r4, #0]
 80198ea:	e660      	b.n	80195ae <uxr_read_framed_msg+0x22>
 80198ec:	f43f aeef 	beq.w	80196ce <uxr_read_framed_msg+0x142>
 80198f0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80198f4:	d094      	beq.n	8019820 <uxr_read_framed_msg+0x294>
 80198f6:	ebae 0303 	sub.w	r3, lr, r3
 80198fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80198fc:	3302      	adds	r3, #2
 80198fe:	9200      	str	r2, [sp, #0]
 8019900:	e7b8      	b.n	8019874 <uxr_read_framed_msg+0x2e8>
 8019902:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019908:	7013      	strb	r3, [r2, #0]
 801990a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801990c:	b003      	add	sp, #12
 801990e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019912:	1c59      	adds	r1, r3, #1
 8019914:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019918:	084a      	lsrs	r2, r1, #1
 801991a:	fba5 e202 	umull	lr, r2, r5, r2
 801991e:	0892      	lsrs	r2, r2, #2
 8019920:	fb0c 1212 	mls	r2, ip, r2, r1
 8019924:	b2d1      	uxtb	r1, r2
 8019926:	4288      	cmp	r0, r1
 8019928:	d0b0      	beq.n	801988c <uxr_read_framed_msg+0x300>
 801992a:	3302      	adds	r3, #2
 801992c:	4422      	add	r2, r4
 801992e:	7891      	ldrb	r1, [r2, #2]
 8019930:	085a      	lsrs	r2, r3, #1
 8019932:	fba5 0202 	umull	r0, r2, r5, r2
 8019936:	297e      	cmp	r1, #126	; 0x7e
 8019938:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801993c:	fb0c 3312 	mls	r3, ip, r2, r3
 8019940:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019944:	f000 80a1 	beq.w	8019a8a <uxr_read_framed_msg+0x4fe>
 8019948:	f081 0120 	eor.w	r1, r1, #32
 801994c:	e680      	b.n	8019650 <uxr_read_framed_msg+0xc4>
 801994e:	f103 0c01 	add.w	ip, r3, #1
 8019952:	202a      	movs	r0, #42	; 0x2a
 8019954:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019958:	fba5 e202 	umull	lr, r2, r5, r2
 801995c:	0892      	lsrs	r2, r2, #2
 801995e:	fb00 c212 	mls	r2, r0, r2, ip
 8019962:	fa5f fc82 	uxtb.w	ip, r2
 8019966:	4561      	cmp	r1, ip
 8019968:	d081      	beq.n	801986e <uxr_read_framed_msg+0x2e2>
 801996a:	3302      	adds	r3, #2
 801996c:	4422      	add	r2, r4
 801996e:	0859      	lsrs	r1, r3, #1
 8019970:	7892      	ldrb	r2, [r2, #2]
 8019972:	fba5 c101 	umull	ip, r1, r5, r1
 8019976:	2a7e      	cmp	r2, #126	; 0x7e
 8019978:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801997c:	fb00 3311 	mls	r3, r0, r1, r3
 8019980:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019984:	f000 8091 	beq.w	8019aaa <uxr_read_framed_msg+0x51e>
 8019988:	f082 0220 	eor.w	r2, r2, #32
 801998c:	e636      	b.n	80195fc <uxr_read_framed_msg+0x70>
 801998e:	1c51      	adds	r1, r2, #1
 8019990:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019994:	084b      	lsrs	r3, r1, #1
 8019996:	fba5 e303 	umull	lr, r3, r5, r3
 801999a:	089b      	lsrs	r3, r3, #2
 801999c:	fb0c 1313 	mls	r3, ip, r3, r1
 80199a0:	b2d9      	uxtb	r1, r3
 80199a2:	4288      	cmp	r0, r1
 80199a4:	d09b      	beq.n	80198de <uxr_read_framed_msg+0x352>
 80199a6:	3202      	adds	r2, #2
 80199a8:	4423      	add	r3, r4
 80199aa:	0850      	lsrs	r0, r2, #1
 80199ac:	789b      	ldrb	r3, [r3, #2]
 80199ae:	fba5 1000 	umull	r1, r0, r5, r0
 80199b2:	2b7e      	cmp	r3, #126	; 0x7e
 80199b4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80199b8:	fb0c 2210 	mls	r2, ip, r0, r2
 80199bc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80199c0:	d077      	beq.n	8019ab2 <uxr_read_framed_msg+0x526>
 80199c2:	f083 0120 	eor.w	r1, r3, #32
 80199c6:	e6ea      	b.n	801979e <uxr_read_framed_msg+0x212>
 80199c8:	f103 0c01 	add.w	ip, r3, #1
 80199cc:	202a      	movs	r0, #42	; 0x2a
 80199ce:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80199d2:	fba5 e202 	umull	lr, r2, r5, r2
 80199d6:	0892      	lsrs	r2, r2, #2
 80199d8:	fb00 c212 	mls	r2, r0, r2, ip
 80199dc:	fa5f fc82 	uxtb.w	ip, r2
 80199e0:	4561      	cmp	r1, ip
 80199e2:	f43f af57 	beq.w	8019894 <uxr_read_framed_msg+0x308>
 80199e6:	3302      	adds	r3, #2
 80199e8:	4422      	add	r2, r4
 80199ea:	7891      	ldrb	r1, [r2, #2]
 80199ec:	085a      	lsrs	r2, r3, #1
 80199ee:	fba5 c202 	umull	ip, r2, r5, r2
 80199f2:	297e      	cmp	r1, #126	; 0x7e
 80199f4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80199f8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80199fc:	fb00 3312 	mls	r3, r0, r2, r3
 8019a00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a04:	f43f af46 	beq.w	8019894 <uxr_read_framed_msg+0x308>
 8019a08:	f081 0120 	eor.w	r1, r1, #32
 8019a0c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019a10:	e6ea      	b.n	80197e8 <uxr_read_framed_msg+0x25c>
 8019a12:	1c59      	adds	r1, r3, #1
 8019a14:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019a18:	084a      	lsrs	r2, r1, #1
 8019a1a:	fba5 e202 	umull	lr, r2, r5, r2
 8019a1e:	0892      	lsrs	r2, r2, #2
 8019a20:	fb0c 1212 	mls	r2, ip, r2, r1
 8019a24:	b2d1      	uxtb	r1, r2
 8019a26:	4288      	cmp	r0, r1
 8019a28:	f43f af21 	beq.w	801986e <uxr_read_framed_msg+0x2e2>
 8019a2c:	3302      	adds	r3, #2
 8019a2e:	4422      	add	r2, r4
 8019a30:	7891      	ldrb	r1, [r2, #2]
 8019a32:	085a      	lsrs	r2, r3, #1
 8019a34:	fba5 0202 	umull	r0, r2, r5, r2
 8019a38:	297e      	cmp	r1, #126	; 0x7e
 8019a3a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a3e:	fb0c 3312 	mls	r3, ip, r2, r3
 8019a42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a46:	d030      	beq.n	8019aaa <uxr_read_framed_msg+0x51e>
 8019a48:	f081 0120 	eor.w	r1, r1, #32
 8019a4c:	e65d      	b.n	801970a <uxr_read_framed_msg+0x17e>
 8019a4e:	1c59      	adds	r1, r3, #1
 8019a50:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019a54:	084a      	lsrs	r2, r1, #1
 8019a56:	fba5 e202 	umull	lr, r2, r5, r2
 8019a5a:	0892      	lsrs	r2, r2, #2
 8019a5c:	fb0c 1212 	mls	r2, ip, r2, r1
 8019a60:	b2d1      	uxtb	r1, r2
 8019a62:	4288      	cmp	r0, r1
 8019a64:	f43f af12 	beq.w	801988c <uxr_read_framed_msg+0x300>
 8019a68:	3302      	adds	r3, #2
 8019a6a:	4422      	add	r2, r4
 8019a6c:	7891      	ldrb	r1, [r2, #2]
 8019a6e:	085a      	lsrs	r2, r3, #1
 8019a70:	fba5 0202 	umull	r0, r2, r5, r2
 8019a74:	297e      	cmp	r1, #126	; 0x7e
 8019a76:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a7a:	fb0c 3312 	mls	r3, ip, r2, r3
 8019a7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a82:	d002      	beq.n	8019a8a <uxr_read_framed_msg+0x4fe>
 8019a84:	f081 0120 	eor.w	r1, r1, #32
 8019a88:	e66a      	b.n	8019760 <uxr_read_framed_msg+0x1d4>
 8019a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a8c:	9300      	str	r3, [sp, #0]
 8019a8e:	2302      	movs	r3, #2
 8019a90:	9301      	str	r3, [sp, #4]
 8019a92:	464a      	mov	r2, r9
 8019a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a96:	4641      	mov	r1, r8
 8019a98:	4620      	mov	r0, r4
 8019a9a:	f7ff fce3 	bl	8019464 <uxr_framing_read_transport>
 8019a9e:	2800      	cmp	r0, #0
 8019aa0:	f47f aef2 	bne.w	8019888 <uxr_read_framed_msg+0x2fc>
 8019aa4:	2301      	movs	r3, #1
 8019aa6:	7023      	strb	r3, [r4, #0]
 8019aa8:	e581      	b.n	80195ae <uxr_read_framed_msg+0x22>
 8019aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019aac:	9300      	str	r3, [sp, #0]
 8019aae:	2301      	movs	r3, #1
 8019ab0:	e7ee      	b.n	8019a90 <uxr_read_framed_msg+0x504>
 8019ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	2303      	movs	r3, #3
 8019ab8:	e7ea      	b.n	8019a90 <uxr_read_framed_msg+0x504>
 8019aba:	bf00      	nop

08019abc <uxr_stream_id>:
 8019abc:	2901      	cmp	r1, #1
 8019abe:	4684      	mov	ip, r0
 8019ac0:	b500      	push	{lr}
 8019ac2:	b083      	sub	sp, #12
 8019ac4:	d01f      	beq.n	8019b06 <uxr_stream_id+0x4a>
 8019ac6:	2902      	cmp	r1, #2
 8019ac8:	f04f 0e00 	mov.w	lr, #0
 8019acc:	d020      	beq.n	8019b10 <uxr_stream_id+0x54>
 8019ace:	2300      	movs	r3, #0
 8019ad0:	2000      	movs	r0, #0
 8019ad2:	f36e 0307 	bfi	r3, lr, #0, #8
 8019ad6:	f36c 230f 	bfi	r3, ip, #8, #8
 8019ada:	f361 4317 	bfi	r3, r1, #16, #8
 8019ade:	f362 631f 	bfi	r3, r2, #24, #8
 8019ae2:	fa5f fc83 	uxtb.w	ip, r3
 8019ae6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019aea:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019aee:	0e1b      	lsrs	r3, r3, #24
 8019af0:	f36c 0007 	bfi	r0, ip, #0, #8
 8019af4:	f361 200f 	bfi	r0, r1, #8, #8
 8019af8:	f362 4017 	bfi	r0, r2, #16, #8
 8019afc:	f363 601f 	bfi	r0, r3, #24, #8
 8019b00:	b003      	add	sp, #12
 8019b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b06:	f100 0e01 	add.w	lr, r0, #1
 8019b0a:	fa5f fe8e 	uxtb.w	lr, lr
 8019b0e:	e7de      	b.n	8019ace <uxr_stream_id+0x12>
 8019b10:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8019b14:	e7db      	b.n	8019ace <uxr_stream_id+0x12>
 8019b16:	bf00      	nop

08019b18 <uxr_stream_id_from_raw>:
 8019b18:	b082      	sub	sp, #8
 8019b1a:	b130      	cbz	r0, 8019b2a <uxr_stream_id_from_raw+0x12>
 8019b1c:	0603      	lsls	r3, r0, #24
 8019b1e:	d421      	bmi.n	8019b64 <uxr_stream_id_from_raw+0x4c>
 8019b20:	1e42      	subs	r2, r0, #1
 8019b22:	f04f 0c01 	mov.w	ip, #1
 8019b26:	b2d2      	uxtb	r2, r2
 8019b28:	e001      	b.n	8019b2e <uxr_stream_id_from_raw+0x16>
 8019b2a:	4684      	mov	ip, r0
 8019b2c:	4602      	mov	r2, r0
 8019b2e:	2300      	movs	r3, #0
 8019b30:	f360 0307 	bfi	r3, r0, #0, #8
 8019b34:	2000      	movs	r0, #0
 8019b36:	f362 230f 	bfi	r3, r2, #8, #8
 8019b3a:	f36c 4317 	bfi	r3, ip, #16, #8
 8019b3e:	f361 631f 	bfi	r3, r1, #24, #8
 8019b42:	fa5f fc83 	uxtb.w	ip, r3
 8019b46:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019b4a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019b4e:	0e1b      	lsrs	r3, r3, #24
 8019b50:	f36c 0007 	bfi	r0, ip, #0, #8
 8019b54:	f361 200f 	bfi	r0, r1, #8, #8
 8019b58:	f362 4017 	bfi	r0, r2, #16, #8
 8019b5c:	f363 601f 	bfi	r0, r3, #24, #8
 8019b60:	b002      	add	sp, #8
 8019b62:	4770      	bx	lr
 8019b64:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019b68:	f04f 0c02 	mov.w	ip, #2
 8019b6c:	e7df      	b.n	8019b2e <uxr_stream_id_from_raw+0x16>
 8019b6e:	bf00      	nop

08019b70 <uxr_init_stream_storage>:
 8019b70:	2300      	movs	r3, #0
 8019b72:	7403      	strb	r3, [r0, #16]
 8019b74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019b78:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019b7c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019b80:	4770      	bx	lr
 8019b82:	bf00      	nop

08019b84 <uxr_reset_stream_storage>:
 8019b84:	b570      	push	{r4, r5, r6, lr}
 8019b86:	7c03      	ldrb	r3, [r0, #16]
 8019b88:	4604      	mov	r4, r0
 8019b8a:	b14b      	cbz	r3, 8019ba0 <uxr_reset_stream_storage+0x1c>
 8019b8c:	4606      	mov	r6, r0
 8019b8e:	2500      	movs	r5, #0
 8019b90:	4630      	mov	r0, r6
 8019b92:	3501      	adds	r5, #1
 8019b94:	f004 fea6 	bl	801e8e4 <uxr_reset_output_best_effort_stream>
 8019b98:	7c23      	ldrb	r3, [r4, #16]
 8019b9a:	3610      	adds	r6, #16
 8019b9c:	42ab      	cmp	r3, r5
 8019b9e:	d8f7      	bhi.n	8019b90 <uxr_reset_stream_storage+0xc>
 8019ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019ba4:	b15b      	cbz	r3, 8019bbe <uxr_reset_stream_storage+0x3a>
 8019ba6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019baa:	2500      	movs	r5, #0
 8019bac:	4630      	mov	r0, r6
 8019bae:	3501      	adds	r5, #1
 8019bb0:	f004 fc9e 	bl	801e4f0 <uxr_reset_input_best_effort_stream>
 8019bb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019bb8:	3602      	adds	r6, #2
 8019bba:	42ab      	cmp	r3, r5
 8019bbc:	d8f6      	bhi.n	8019bac <uxr_reset_stream_storage+0x28>
 8019bbe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019bc2:	b15b      	cbz	r3, 8019bdc <uxr_reset_stream_storage+0x58>
 8019bc4:	f104 0618 	add.w	r6, r4, #24
 8019bc8:	2500      	movs	r5, #0
 8019bca:	4630      	mov	r0, r6
 8019bcc:	3501      	adds	r5, #1
 8019bce:	f004 ff37 	bl	801ea40 <uxr_reset_output_reliable_stream>
 8019bd2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019bd6:	3628      	adds	r6, #40	; 0x28
 8019bd8:	42ab      	cmp	r3, r5
 8019bda:	d8f6      	bhi.n	8019bca <uxr_reset_stream_storage+0x46>
 8019bdc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019be0:	b15b      	cbz	r3, 8019bfa <uxr_reset_stream_storage+0x76>
 8019be2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019be6:	2500      	movs	r5, #0
 8019be8:	4630      	mov	r0, r6
 8019bea:	3501      	adds	r5, #1
 8019bec:	f004 fcec 	bl	801e5c8 <uxr_reset_input_reliable_stream>
 8019bf0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019bf4:	3618      	adds	r6, #24
 8019bf6:	42ab      	cmp	r3, r5
 8019bf8:	d8f6      	bhi.n	8019be8 <uxr_reset_stream_storage+0x64>
 8019bfa:	bd70      	pop	{r4, r5, r6, pc}

08019bfc <uxr_add_output_best_effort_buffer>:
 8019bfc:	b510      	push	{r4, lr}
 8019bfe:	7c04      	ldrb	r4, [r0, #16]
 8019c00:	b082      	sub	sp, #8
 8019c02:	f104 0c01 	add.w	ip, r4, #1
 8019c06:	f880 c010 	strb.w	ip, [r0, #16]
 8019c0a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019c0e:	f004 fe5f 	bl	801e8d0 <uxr_init_output_best_effort_stream>
 8019c12:	2201      	movs	r2, #1
 8019c14:	4620      	mov	r0, r4
 8019c16:	4611      	mov	r1, r2
 8019c18:	b002      	add	sp, #8
 8019c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c1e:	f7ff bf4d 	b.w	8019abc <uxr_stream_id>
 8019c22:	bf00      	nop

08019c24 <uxr_add_output_reliable_buffer>:
 8019c24:	b510      	push	{r4, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	4684      	mov	ip, r0
 8019c2a:	2028      	movs	r0, #40	; 0x28
 8019c2c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019c30:	9400      	str	r4, [sp, #0]
 8019c32:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8019c36:	fb00 c004 	mla	r0, r0, r4, ip
 8019c3a:	f104 0e01 	add.w	lr, r4, #1
 8019c3e:	3018      	adds	r0, #24
 8019c40:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8019c44:	f004 fec4 	bl	801e9d0 <uxr_init_output_reliable_stream>
 8019c48:	2201      	movs	r2, #1
 8019c4a:	2102      	movs	r1, #2
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	b004      	add	sp, #16
 8019c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c54:	f7ff bf32 	b.w	8019abc <uxr_stream_id>

08019c58 <uxr_add_input_best_effort_buffer>:
 8019c58:	b510      	push	{r4, lr}
 8019c5a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8019c5e:	b082      	sub	sp, #8
 8019c60:	1c62      	adds	r2, r4, #1
 8019c62:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8019c66:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019c6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019c6e:	f004 fc3b 	bl	801e4e8 <uxr_init_input_best_effort_stream>
 8019c72:	2200      	movs	r2, #0
 8019c74:	2101      	movs	r1, #1
 8019c76:	4620      	mov	r0, r4
 8019c78:	b002      	add	sp, #8
 8019c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c7e:	f7ff bf1d 	b.w	8019abc <uxr_stream_id>
 8019c82:	bf00      	nop

08019c84 <uxr_add_input_reliable_buffer>:
 8019c84:	b510      	push	{r4, lr}
 8019c86:	b084      	sub	sp, #16
 8019c88:	4684      	mov	ip, r0
 8019c8a:	2018      	movs	r0, #24
 8019c8c:	9c06      	ldr	r4, [sp, #24]
 8019c8e:	9400      	str	r4, [sp, #0]
 8019c90:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019c94:	fb00 c004 	mla	r0, r0, r4, ip
 8019c98:	f104 0e01 	add.w	lr, r4, #1
 8019c9c:	3048      	adds	r0, #72	; 0x48
 8019c9e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8019ca2:	f004 fc6b 	bl	801e57c <uxr_init_input_reliable_stream>
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	2102      	movs	r1, #2
 8019caa:	4620      	mov	r0, r4
 8019cac:	b004      	add	sp, #16
 8019cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cb2:	f7ff bf03 	b.w	8019abc <uxr_stream_id>
 8019cb6:	bf00      	nop

08019cb8 <uxr_get_output_best_effort_stream>:
 8019cb8:	7c03      	ldrb	r3, [r0, #16]
 8019cba:	428b      	cmp	r3, r1
 8019cbc:	bf8c      	ite	hi
 8019cbe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019cc2:	2000      	movls	r0, #0
 8019cc4:	4770      	bx	lr
 8019cc6:	bf00      	nop

08019cc8 <uxr_get_output_reliable_stream>:
 8019cc8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019ccc:	428b      	cmp	r3, r1
 8019cce:	d904      	bls.n	8019cda <uxr_get_output_reliable_stream+0x12>
 8019cd0:	2328      	movs	r3, #40	; 0x28
 8019cd2:	fb03 0001 	mla	r0, r3, r1, r0
 8019cd6:	3018      	adds	r0, #24
 8019cd8:	4770      	bx	lr
 8019cda:	2000      	movs	r0, #0
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop

08019ce0 <uxr_get_input_best_effort_stream>:
 8019ce0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019ce4:	428b      	cmp	r3, r1
 8019ce6:	d903      	bls.n	8019cf0 <uxr_get_input_best_effort_stream+0x10>
 8019ce8:	3121      	adds	r1, #33	; 0x21
 8019cea:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019cee:	4770      	bx	lr
 8019cf0:	2000      	movs	r0, #0
 8019cf2:	4770      	bx	lr

08019cf4 <uxr_get_input_reliable_stream>:
 8019cf4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019cf8:	428b      	cmp	r3, r1
 8019cfa:	d904      	bls.n	8019d06 <uxr_get_input_reliable_stream+0x12>
 8019cfc:	2318      	movs	r3, #24
 8019cfe:	fb03 0001 	mla	r0, r3, r1, r0
 8019d02:	3048      	adds	r0, #72	; 0x48
 8019d04:	4770      	bx	lr
 8019d06:	2000      	movs	r0, #0
 8019d08:	4770      	bx	lr
 8019d0a:	bf00      	nop

08019d0c <uxr_output_streams_confirmed>:
 8019d0c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019d10:	b183      	cbz	r3, 8019d34 <uxr_output_streams_confirmed+0x28>
 8019d12:	b570      	push	{r4, r5, r6, lr}
 8019d14:	4606      	mov	r6, r0
 8019d16:	f100 0518 	add.w	r5, r0, #24
 8019d1a:	2400      	movs	r4, #0
 8019d1c:	e000      	b.n	8019d20 <uxr_output_streams_confirmed+0x14>
 8019d1e:	b140      	cbz	r0, 8019d32 <uxr_output_streams_confirmed+0x26>
 8019d20:	4628      	mov	r0, r5
 8019d22:	3401      	adds	r4, #1
 8019d24:	f005 f900 	bl	801ef28 <uxr_is_output_up_to_date>
 8019d28:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8019d2c:	3528      	adds	r5, #40	; 0x28
 8019d2e:	42a3      	cmp	r3, r4
 8019d30:	d8f5      	bhi.n	8019d1e <uxr_output_streams_confirmed+0x12>
 8019d32:	bd70      	pop	{r4, r5, r6, pc}
 8019d34:	2001      	movs	r0, #1
 8019d36:	4770      	bx	lr

08019d38 <uxr_buffer_submessage_header>:
 8019d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d3a:	460e      	mov	r6, r1
 8019d3c:	2104      	movs	r1, #4
 8019d3e:	4604      	mov	r4, r0
 8019d40:	4615      	mov	r5, r2
 8019d42:	461f      	mov	r7, r3
 8019d44:	f7f9 faa8 	bl	8013298 <ucdr_align_to>
 8019d48:	2301      	movs	r3, #1
 8019d4a:	4631      	mov	r1, r6
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	ea47 0203 	orr.w	r2, r7, r3
 8019d52:	7523      	strb	r3, [r4, #20]
 8019d54:	462b      	mov	r3, r5
 8019d56:	f000 fa29 	bl	801a1ac <uxr_serialize_submessage_header>
 8019d5a:	4620      	mov	r0, r4
 8019d5c:	f7f9 fab2 	bl	80132c4 <ucdr_buffer_remaining>
 8019d60:	42a8      	cmp	r0, r5
 8019d62:	bf34      	ite	cc
 8019d64:	2000      	movcc	r0, #0
 8019d66:	2001      	movcs	r0, #1
 8019d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d6a:	bf00      	nop

08019d6c <uxr_read_submessage_header>:
 8019d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d70:	4604      	mov	r4, r0
 8019d72:	460d      	mov	r5, r1
 8019d74:	2104      	movs	r1, #4
 8019d76:	4616      	mov	r6, r2
 8019d78:	4698      	mov	r8, r3
 8019d7a:	f7f9 fa8d 	bl	8013298 <ucdr_align_to>
 8019d7e:	4620      	mov	r0, r4
 8019d80:	f7f9 faa0 	bl	80132c4 <ucdr_buffer_remaining>
 8019d84:	2803      	cmp	r0, #3
 8019d86:	bf8c      	ite	hi
 8019d88:	2701      	movhi	r7, #1
 8019d8a:	2700      	movls	r7, #0
 8019d8c:	d802      	bhi.n	8019d94 <uxr_read_submessage_header+0x28>
 8019d8e:	4638      	mov	r0, r7
 8019d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d94:	4633      	mov	r3, r6
 8019d96:	4642      	mov	r2, r8
 8019d98:	4620      	mov	r0, r4
 8019d9a:	4629      	mov	r1, r5
 8019d9c:	f000 fa1a 	bl	801a1d4 <uxr_deserialize_submessage_header>
 8019da0:	f898 3000 	ldrb.w	r3, [r8]
 8019da4:	4638      	mov	r0, r7
 8019da6:	f003 0201 	and.w	r2, r3, #1
 8019daa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019dae:	f888 3000 	strb.w	r3, [r8]
 8019db2:	7522      	strb	r2, [r4, #20]
 8019db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019db8 <uxr_submessage_padding>:
 8019db8:	f010 0003 	ands.w	r0, r0, #3
 8019dbc:	bf18      	it	ne
 8019dbe:	f1c0 0004 	rsbne	r0, r0, #4
 8019dc2:	4770      	bx	lr

08019dc4 <uxr_millis>:
 8019dc4:	b510      	push	{r4, lr}
 8019dc6:	b084      	sub	sp, #16
 8019dc8:	2001      	movs	r0, #1
 8019dca:	4669      	mov	r1, sp
 8019dcc:	f7e9 fc54 	bl	8003678 <clock_gettime>
 8019dd0:	4908      	ldr	r1, [pc, #32]	; (8019df4 <uxr_millis+0x30>)
 8019dd2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019dd6:	fba0 0301 	umull	r0, r3, r0, r1
 8019dda:	1900      	adds	r0, r0, r4
 8019ddc:	fb01 3102 	mla	r1, r1, r2, r3
 8019de0:	4a05      	ldr	r2, [pc, #20]	; (8019df8 <uxr_millis+0x34>)
 8019de2:	f04f 0300 	mov.w	r3, #0
 8019de6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019dea:	f7e6 fc4d 	bl	8000688 <__aeabi_ldivmod>
 8019dee:	b004      	add	sp, #16
 8019df0:	bd10      	pop	{r4, pc}
 8019df2:	bf00      	nop
 8019df4:	3b9aca00 	.word	0x3b9aca00
 8019df8:	000f4240 	.word	0x000f4240

08019dfc <uxr_nanos>:
 8019dfc:	b510      	push	{r4, lr}
 8019dfe:	b084      	sub	sp, #16
 8019e00:	2001      	movs	r0, #1
 8019e02:	4669      	mov	r1, sp
 8019e04:	f7e9 fc38 	bl	8003678 <clock_gettime>
 8019e08:	4a06      	ldr	r2, [pc, #24]	; (8019e24 <uxr_nanos+0x28>)
 8019e0a:	9800      	ldr	r0, [sp, #0]
 8019e0c:	9902      	ldr	r1, [sp, #8]
 8019e0e:	fba0 0302 	umull	r0, r3, r0, r2
 8019e12:	9c01      	ldr	r4, [sp, #4]
 8019e14:	1840      	adds	r0, r0, r1
 8019e16:	fb02 3304 	mla	r3, r2, r4, r3
 8019e1a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019e1e:	b004      	add	sp, #16
 8019e20:	bd10      	pop	{r4, pc}
 8019e22:	bf00      	nop
 8019e24:	3b9aca00 	.word	0x3b9aca00

08019e28 <on_full_output_buffer_fragmented>:
 8019e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e2c:	460c      	mov	r4, r1
 8019e2e:	b08a      	sub	sp, #40	; 0x28
 8019e30:	4606      	mov	r6, r0
 8019e32:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8019e36:	f104 0008 	add.w	r0, r4, #8
 8019e3a:	f7ff ff45 	bl	8019cc8 <uxr_get_output_reliable_stream>
 8019e3e:	4605      	mov	r5, r0
 8019e40:	f005 f87c 	bl	801ef3c <get_available_free_slots>
 8019e44:	b968      	cbnz	r0, 8019e62 <on_full_output_buffer_fragmented+0x3a>
 8019e46:	4620      	mov	r0, r4
 8019e48:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8019e4c:	4798      	blx	r3
 8019e4e:	b918      	cbnz	r0, 8019e58 <on_full_output_buffer_fragmented+0x30>
 8019e50:	2001      	movs	r0, #1
 8019e52:	b00a      	add	sp, #40	; 0x28
 8019e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e58:	4628      	mov	r0, r5
 8019e5a:	f005 f86f 	bl	801ef3c <get_available_free_slots>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	d0f6      	beq.n	8019e50 <on_full_output_buffer_fragmented+0x28>
 8019e62:	8929      	ldrh	r1, [r5, #8]
 8019e64:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8019e68:	89eb      	ldrh	r3, [r5, #14]
 8019e6a:	7b28      	ldrb	r0, [r5, #12]
 8019e6c:	686f      	ldr	r7, [r5, #4]
 8019e6e:	1a12      	subs	r2, r2, r0
 8019e70:	fbb3 f0f1 	udiv	r0, r3, r1
 8019e74:	fbb7 f7f1 	udiv	r7, r7, r1
 8019e78:	fb01 3110 	mls	r1, r1, r0, r3
 8019e7c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8019e80:	b289      	uxth	r1, r1
 8019e82:	fb07 f101 	mul.w	r1, r7, r1
 8019e86:	3f04      	subs	r7, #4
 8019e88:	443a      	add	r2, r7
 8019e8a:	3104      	adds	r1, #4
 8019e8c:	fa1f f882 	uxth.w	r8, r2
 8019e90:	463a      	mov	r2, r7
 8019e92:	eba3 0308 	sub.w	r3, r3, r8
 8019e96:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8019e9a:	682b      	ldr	r3, [r5, #0]
 8019e9c:	4419      	add	r1, r3
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019ea4:	9000      	str	r0, [sp, #0]
 8019ea6:	a802      	add	r0, sp, #8
 8019ea8:	f7f9 f9c8 	bl	801323c <ucdr_init_buffer_origin_offset>
 8019eac:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019eb0:	f102 0308 	add.w	r3, r2, #8
 8019eb4:	42bb      	cmp	r3, r7
 8019eb6:	d927      	bls.n	8019f08 <on_full_output_buffer_fragmented+0xe0>
 8019eb8:	4642      	mov	r2, r8
 8019eba:	2300      	movs	r3, #0
 8019ebc:	210d      	movs	r1, #13
 8019ebe:	a802      	add	r0, sp, #8
 8019ec0:	f7ff ff3a 	bl	8019d38 <uxr_buffer_submessage_header>
 8019ec4:	8929      	ldrh	r1, [r5, #8]
 8019ec6:	89eb      	ldrh	r3, [r5, #14]
 8019ec8:	686a      	ldr	r2, [r5, #4]
 8019eca:	fbb3 f0f1 	udiv	r0, r3, r1
 8019ece:	fbb2 f2f1 	udiv	r2, r2, r1
 8019ed2:	fb01 3310 	mls	r3, r1, r0, r3
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	fb02 f303 	mul.w	r3, r2, r3
 8019edc:	682a      	ldr	r2, [r5, #0]
 8019ede:	50d7      	str	r7, [r2, r3]
 8019ee0:	2101      	movs	r1, #1
 8019ee2:	89e8      	ldrh	r0, [r5, #14]
 8019ee4:	f005 f84c 	bl	801ef80 <uxr_seq_num_add>
 8019ee8:	9904      	ldr	r1, [sp, #16]
 8019eea:	9a03      	ldr	r2, [sp, #12]
 8019eec:	81e8      	strh	r0, [r5, #14]
 8019eee:	4630      	mov	r0, r6
 8019ef0:	1a52      	subs	r2, r2, r1
 8019ef2:	f7f9 f9b5 	bl	8013260 <ucdr_init_buffer>
 8019ef6:	4630      	mov	r0, r6
 8019ef8:	4622      	mov	r2, r4
 8019efa:	490f      	ldr	r1, [pc, #60]	; (8019f38 <on_full_output_buffer_fragmented+0x110>)
 8019efc:	f7f9 f984 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 8019f00:	2000      	movs	r0, #0
 8019f02:	b00a      	add	sp, #40	; 0x28
 8019f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f08:	b292      	uxth	r2, r2
 8019f0a:	2302      	movs	r3, #2
 8019f0c:	210d      	movs	r1, #13
 8019f0e:	a802      	add	r0, sp, #8
 8019f10:	f7ff ff12 	bl	8019d38 <uxr_buffer_submessage_header>
 8019f14:	8928      	ldrh	r0, [r5, #8]
 8019f16:	89eb      	ldrh	r3, [r5, #14]
 8019f18:	6869      	ldr	r1, [r5, #4]
 8019f1a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019f1e:	fbb3 f7f0 	udiv	r7, r3, r0
 8019f22:	fbb1 f1f0 	udiv	r1, r1, r0
 8019f26:	fb00 3317 	mls	r3, r0, r7, r3
 8019f2a:	3208      	adds	r2, #8
 8019f2c:	b29b      	uxth	r3, r3
 8019f2e:	fb01 f303 	mul.w	r3, r1, r3
 8019f32:	6829      	ldr	r1, [r5, #0]
 8019f34:	50ca      	str	r2, [r1, r3]
 8019f36:	e7d3      	b.n	8019ee0 <on_full_output_buffer_fragmented+0xb8>
 8019f38:	08019e29 	.word	0x08019e29

08019f3c <uxr_prepare_output_stream>:
 8019f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f3e:	b087      	sub	sp, #28
 8019f40:	2707      	movs	r7, #7
 8019f42:	2500      	movs	r5, #0
 8019f44:	461c      	mov	r4, r3
 8019f46:	4606      	mov	r6, r0
 8019f48:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019f4e:	e9cd 7500 	strd	r7, r5, [sp]
 8019f52:	3204      	adds	r2, #4
 8019f54:	f7fe ffc8 	bl	8018ee8 <uxr_prepare_stream_to_write_submessage>
 8019f58:	f080 0201 	eor.w	r2, r0, #1
 8019f5c:	b2d2      	uxtb	r2, r2
 8019f5e:	75a2      	strb	r2, [r4, #22]
 8019f60:	b112      	cbz	r2, 8019f68 <uxr_prepare_output_stream+0x2c>
 8019f62:	4628      	mov	r0, r5
 8019f64:	b007      	add	sp, #28
 8019f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f68:	aa05      	add	r2, sp, #20
 8019f6a:	9902      	ldr	r1, [sp, #8]
 8019f6c:	4630      	mov	r0, r6
 8019f6e:	f7ff f8f7 	bl	8019160 <uxr_init_base_object_request>
 8019f72:	a905      	add	r1, sp, #20
 8019f74:	4605      	mov	r5, r0
 8019f76:	4620      	mov	r0, r4
 8019f78:	f001 f8bc 	bl	801b0f4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019f7c:	69a6      	ldr	r6, [r4, #24]
 8019f7e:	69e7      	ldr	r7, [r4, #28]
 8019f80:	4620      	mov	r0, r4
 8019f82:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019f86:	1a52      	subs	r2, r2, r1
 8019f88:	f7f9 f96a 	bl	8013260 <ucdr_init_buffer>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	463a      	mov	r2, r7
 8019f90:	4631      	mov	r1, r6
 8019f92:	f7f9 f939 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 8019f96:	4628      	mov	r0, r5
 8019f98:	b007      	add	sp, #28
 8019f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f9c <uxr_prepare_output_stream_fragmented>:
 8019f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa0:	b091      	sub	sp, #68	; 0x44
 8019fa2:	4605      	mov	r5, r0
 8019fa4:	3008      	adds	r0, #8
 8019fa6:	461e      	mov	r6, r3
 8019fa8:	9105      	str	r1, [sp, #20]
 8019faa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019fae:	9204      	str	r2, [sp, #16]
 8019fb0:	f7ff fe8a 	bl	8019cc8 <uxr_get_output_reliable_stream>
 8019fb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019fb8:	2b01      	cmp	r3, #1
 8019fba:	f000 8093 	beq.w	801a0e4 <uxr_prepare_output_stream_fragmented+0x148>
 8019fbe:	4604      	mov	r4, r0
 8019fc0:	2800      	cmp	r0, #0
 8019fc2:	f000 808f 	beq.w	801a0e4 <uxr_prepare_output_stream_fragmented+0x148>
 8019fc6:	f004 ffb9 	bl	801ef3c <get_available_free_slots>
 8019fca:	2800      	cmp	r0, #0
 8019fcc:	f000 8085 	beq.w	801a0da <uxr_prepare_output_stream_fragmented+0x13e>
 8019fd0:	8923      	ldrh	r3, [r4, #8]
 8019fd2:	89e7      	ldrh	r7, [r4, #14]
 8019fd4:	6862      	ldr	r2, [r4, #4]
 8019fd6:	fbb7 f9f3 	udiv	r9, r7, r3
 8019fda:	fbb2 f2f3 	udiv	r2, r2, r3
 8019fde:	fb03 7919 	mls	r9, r3, r9, r7
 8019fe2:	6823      	ldr	r3, [r4, #0]
 8019fe4:	f1a2 0b04 	sub.w	fp, r2, #4
 8019fe8:	9203      	str	r2, [sp, #12]
 8019fea:	fa1f f989 	uxth.w	r9, r9
 8019fee:	fb02 f909 	mul.w	r9, r2, r9
 8019ff2:	f109 0904 	add.w	r9, r9, #4
 8019ff6:	4499      	add	r9, r3
 8019ff8:	7b23      	ldrb	r3, [r4, #12]
 8019ffa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8019ffe:	4543      	cmp	r3, r8
 801a000:	d37c      	bcc.n	801a0fc <uxr_prepare_output_stream_fragmented+0x160>
 801a002:	f1ab 0a04 	sub.w	sl, fp, #4
 801a006:	465a      	mov	r2, fp
 801a008:	4649      	mov	r1, r9
 801a00a:	a808      	add	r0, sp, #32
 801a00c:	ebaa 0a03 	sub.w	sl, sl, r3
 801a010:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a012:	f8cd 8000 	str.w	r8, [sp]
 801a016:	3308      	adds	r3, #8
 801a018:	fa1f fa8a 	uxth.w	sl, sl
 801a01c:	9302      	str	r3, [sp, #8]
 801a01e:	2300      	movs	r3, #0
 801a020:	f7f9 f90c 	bl	801323c <ucdr_init_buffer_origin_offset>
 801a024:	9b02      	ldr	r3, [sp, #8]
 801a026:	4652      	mov	r2, sl
 801a028:	210d      	movs	r1, #13
 801a02a:	455b      	cmp	r3, fp
 801a02c:	bf34      	ite	cc
 801a02e:	2302      	movcc	r3, #2
 801a030:	2300      	movcs	r3, #0
 801a032:	a808      	add	r0, sp, #32
 801a034:	f7ff fe80 	bl	8019d38 <uxr_buffer_submessage_header>
 801a038:	8921      	ldrh	r1, [r4, #8]
 801a03a:	6863      	ldr	r3, [r4, #4]
 801a03c:	4638      	mov	r0, r7
 801a03e:	fbb7 f2f1 	udiv	r2, r7, r1
 801a042:	fbb3 f3f1 	udiv	r3, r3, r1
 801a046:	fb01 7212 	mls	r2, r1, r2, r7
 801a04a:	2101      	movs	r1, #1
 801a04c:	b292      	uxth	r2, r2
 801a04e:	fb02 f303 	mul.w	r3, r2, r3
 801a052:	6822      	ldr	r2, [r4, #0]
 801a054:	f842 b003 	str.w	fp, [r2, r3]
 801a058:	f004 ff92 	bl	801ef80 <uxr_seq_num_add>
 801a05c:	9b03      	ldr	r3, [sp, #12]
 801a05e:	f108 0104 	add.w	r1, r8, #4
 801a062:	4607      	mov	r7, r0
 801a064:	f1a3 0208 	sub.w	r2, r3, #8
 801a068:	4630      	mov	r0, r6
 801a06a:	4449      	add	r1, r9
 801a06c:	eba2 0208 	sub.w	r2, r2, r8
 801a070:	f7f9 f8f6 	bl	8013260 <ucdr_init_buffer>
 801a074:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a076:	2107      	movs	r1, #7
 801a078:	81e7      	strh	r7, [r4, #14]
 801a07a:	1d1a      	adds	r2, r3, #4
 801a07c:	2300      	movs	r3, #0
 801a07e:	4630      	mov	r0, r6
 801a080:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801a084:	bf28      	it	cs
 801a086:	461a      	movcs	r2, r3
 801a088:	b292      	uxth	r2, r2
 801a08a:	f7ff fe55 	bl	8019d38 <uxr_buffer_submessage_header>
 801a08e:	aa07      	add	r2, sp, #28
 801a090:	9904      	ldr	r1, [sp, #16]
 801a092:	4628      	mov	r0, r5
 801a094:	f7ff f864 	bl	8019160 <uxr_init_base_object_request>
 801a098:	4604      	mov	r4, r0
 801a09a:	b320      	cbz	r0, 801a0e6 <uxr_prepare_output_stream_fragmented+0x14a>
 801a09c:	a907      	add	r1, sp, #28
 801a09e:	4630      	mov	r0, r6
 801a0a0:	f001 f828 	bl	801b0f4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a0a4:	4630      	mov	r0, r6
 801a0a6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801a0aa:	1a52      	subs	r2, r2, r1
 801a0ac:	f7f9 f8d8 	bl	8013260 <ucdr_init_buffer>
 801a0b0:	9b05      	ldr	r3, [sp, #20]
 801a0b2:	9a02      	ldr	r2, [sp, #8]
 801a0b4:	4630      	mov	r0, r6
 801a0b6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801a0ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a0bc:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801a0c0:	462a      	mov	r2, r5
 801a0c2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801a0c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a0c8:	4918      	ldr	r1, [pc, #96]	; (801a12c <uxr_prepare_output_stream_fragmented+0x190>)
 801a0ca:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801a0ce:	f7f9 f89b 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	b011      	add	sp, #68	; 0x44
 801a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0da:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a0dc:	4628      	mov	r0, r5
 801a0de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a0e0:	4798      	blx	r3
 801a0e2:	b920      	cbnz	r0, 801a0ee <uxr_prepare_output_stream_fragmented+0x152>
 801a0e4:	2400      	movs	r4, #0
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	b011      	add	sp, #68	; 0x44
 801a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	f004 ff24 	bl	801ef3c <get_available_free_slots>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	f47f af6b 	bne.w	8019fd0 <uxr_prepare_output_stream_fragmented+0x34>
 801a0fa:	e7f3      	b.n	801a0e4 <uxr_prepare_output_stream_fragmented+0x148>
 801a0fc:	4638      	mov	r0, r7
 801a0fe:	2101      	movs	r1, #1
 801a100:	f004 ff3e 	bl	801ef80 <uxr_seq_num_add>
 801a104:	8922      	ldrh	r2, [r4, #8]
 801a106:	6863      	ldr	r3, [r4, #4]
 801a108:	4607      	mov	r7, r0
 801a10a:	fbb3 f9f2 	udiv	r9, r3, r2
 801a10e:	fbb0 f3f2 	udiv	r3, r0, r2
 801a112:	fb02 0313 	mls	r3, r2, r3, r0
 801a116:	b29b      	uxth	r3, r3
 801a118:	fb03 f909 	mul.w	r9, r3, r9
 801a11c:	6823      	ldr	r3, [r4, #0]
 801a11e:	f109 0904 	add.w	r9, r9, #4
 801a122:	4499      	add	r9, r3
 801a124:	7b23      	ldrb	r3, [r4, #12]
 801a126:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a12a:	e76a      	b.n	801a002 <uxr_prepare_output_stream_fragmented+0x66>
 801a12c:	08019e29 	.word	0x08019e29

0801a130 <uxr_serialize_message_header>:
 801a130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a132:	4616      	mov	r6, r2
 801a134:	b083      	sub	sp, #12
 801a136:	4604      	mov	r4, r0
 801a138:	460d      	mov	r5, r1
 801a13a:	9301      	str	r3, [sp, #4]
 801a13c:	9f08      	ldr	r7, [sp, #32]
 801a13e:	f7f7 fdb7 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a142:	4631      	mov	r1, r6
 801a144:	4620      	mov	r0, r4
 801a146:	f7f7 fdb3 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a14a:	9a01      	ldr	r2, [sp, #4]
 801a14c:	2101      	movs	r1, #1
 801a14e:	4620      	mov	r0, r4
 801a150:	f7f7 fe5a 	bl	8011e08 <ucdr_serialize_endian_uint16_t>
 801a154:	062b      	lsls	r3, r5, #24
 801a156:	d501      	bpl.n	801a15c <uxr_serialize_message_header+0x2c>
 801a158:	b003      	add	sp, #12
 801a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a15c:	2204      	movs	r2, #4
 801a15e:	4639      	mov	r1, r7
 801a160:	4620      	mov	r0, r4
 801a162:	b003      	add	sp, #12
 801a164:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a168:	f7fd ba6e 	b.w	8017648 <ucdr_serialize_array_uint8_t>

0801a16c <uxr_deserialize_message_header>:
 801a16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a16e:	4616      	mov	r6, r2
 801a170:	b083      	sub	sp, #12
 801a172:	4604      	mov	r4, r0
 801a174:	460d      	mov	r5, r1
 801a176:	9301      	str	r3, [sp, #4]
 801a178:	9f08      	ldr	r7, [sp, #32]
 801a17a:	f7f7 fdaf 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801a17e:	4631      	mov	r1, r6
 801a180:	4620      	mov	r0, r4
 801a182:	f7f7 fdab 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801a186:	9a01      	ldr	r2, [sp, #4]
 801a188:	2101      	movs	r1, #1
 801a18a:	4620      	mov	r0, r4
 801a18c:	f7f7 ff30 	bl	8011ff0 <ucdr_deserialize_endian_uint16_t>
 801a190:	f995 3000 	ldrsb.w	r3, [r5]
 801a194:	2b00      	cmp	r3, #0
 801a196:	da01      	bge.n	801a19c <uxr_deserialize_message_header+0x30>
 801a198:	b003      	add	sp, #12
 801a19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a19c:	2204      	movs	r2, #4
 801a19e:	4639      	mov	r1, r7
 801a1a0:	4620      	mov	r0, r4
 801a1a2:	b003      	add	sp, #12
 801a1a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a1a8:	f7fd bab2 	b.w	8017710 <ucdr_deserialize_array_uint8_t>

0801a1ac <uxr_serialize_submessage_header>:
 801a1ac:	b530      	push	{r4, r5, lr}
 801a1ae:	4615      	mov	r5, r2
 801a1b0:	b083      	sub	sp, #12
 801a1b2:	4604      	mov	r4, r0
 801a1b4:	9301      	str	r3, [sp, #4]
 801a1b6:	f7f7 fd7b 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a1ba:	4629      	mov	r1, r5
 801a1bc:	4620      	mov	r0, r4
 801a1be:	f7f7 fd77 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a1c2:	9a01      	ldr	r2, [sp, #4]
 801a1c4:	2101      	movs	r1, #1
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	b003      	add	sp, #12
 801a1ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1ce:	f7f7 be1b 	b.w	8011e08 <ucdr_serialize_endian_uint16_t>
 801a1d2:	bf00      	nop

0801a1d4 <uxr_deserialize_submessage_header>:
 801a1d4:	b530      	push	{r4, r5, lr}
 801a1d6:	4615      	mov	r5, r2
 801a1d8:	b083      	sub	sp, #12
 801a1da:	4604      	mov	r4, r0
 801a1dc:	9301      	str	r3, [sp, #4]
 801a1de:	f7f7 fd7d 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801a1e2:	4629      	mov	r1, r5
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	f7f7 fd79 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801a1ea:	9a01      	ldr	r2, [sp, #4]
 801a1ec:	2101      	movs	r1, #1
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	b003      	add	sp, #12
 801a1f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1f6:	f7f7 befb 	b.w	8011ff0 <ucdr_deserialize_endian_uint16_t>
 801a1fa:	bf00      	nop

0801a1fc <uxr_serialize_CLIENT_Representation>:
 801a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a200:	2204      	movs	r2, #4
 801a202:	460e      	mov	r6, r1
 801a204:	4605      	mov	r5, r0
 801a206:	f7fd fa1f 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a20a:	4607      	mov	r7, r0
 801a20c:	2202      	movs	r2, #2
 801a20e:	1d31      	adds	r1, r6, #4
 801a210:	4628      	mov	r0, r5
 801a212:	f7fd fa19 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a216:	4038      	ands	r0, r7
 801a218:	2202      	movs	r2, #2
 801a21a:	1db1      	adds	r1, r6, #6
 801a21c:	b2c7      	uxtb	r7, r0
 801a21e:	4628      	mov	r0, r5
 801a220:	f7fd fa12 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a224:	2204      	movs	r2, #4
 801a226:	4007      	ands	r7, r0
 801a228:	f106 0108 	add.w	r1, r6, #8
 801a22c:	4628      	mov	r0, r5
 801a22e:	f7fd fa0b 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a232:	4007      	ands	r7, r0
 801a234:	7b31      	ldrb	r1, [r6, #12]
 801a236:	4628      	mov	r0, r5
 801a238:	f7f7 fd3a 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a23c:	7b71      	ldrb	r1, [r6, #13]
 801a23e:	4007      	ands	r7, r0
 801a240:	4628      	mov	r0, r5
 801a242:	f7f7 fd07 	bl	8011c54 <ucdr_serialize_bool>
 801a246:	7b73      	ldrb	r3, [r6, #13]
 801a248:	ea07 0800 	and.w	r8, r7, r0
 801a24c:	b93b      	cbnz	r3, 801a25e <uxr_serialize_CLIENT_Representation+0x62>
 801a24e:	8bb1      	ldrh	r1, [r6, #28]
 801a250:	4628      	mov	r0, r5
 801a252:	f7f7 fd59 	bl	8011d08 <ucdr_serialize_uint16_t>
 801a256:	ea08 0000 	and.w	r0, r8, r0
 801a25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a25e:	6931      	ldr	r1, [r6, #16]
 801a260:	4628      	mov	r0, r5
 801a262:	f7f7 ff3b 	bl	80120dc <ucdr_serialize_uint32_t>
 801a266:	6933      	ldr	r3, [r6, #16]
 801a268:	b1e3      	cbz	r3, 801a2a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801a26a:	b1c0      	cbz	r0, 801a29e <uxr_serialize_CLIENT_Representation+0xa2>
 801a26c:	4637      	mov	r7, r6
 801a26e:	f04f 0900 	mov.w	r9, #0
 801a272:	e000      	b.n	801a276 <uxr_serialize_CLIENT_Representation+0x7a>
 801a274:	b19c      	cbz	r4, 801a29e <uxr_serialize_CLIENT_Representation+0xa2>
 801a276:	6979      	ldr	r1, [r7, #20]
 801a278:	4628      	mov	r0, r5
 801a27a:	f004 f91d 	bl	801e4b8 <ucdr_serialize_string>
 801a27e:	69b9      	ldr	r1, [r7, #24]
 801a280:	4604      	mov	r4, r0
 801a282:	4628      	mov	r0, r5
 801a284:	f004 f918 	bl	801e4b8 <ucdr_serialize_string>
 801a288:	f109 0901 	add.w	r9, r9, #1
 801a28c:	6933      	ldr	r3, [r6, #16]
 801a28e:	4004      	ands	r4, r0
 801a290:	3708      	adds	r7, #8
 801a292:	4599      	cmp	r9, r3
 801a294:	b2e4      	uxtb	r4, r4
 801a296:	d3ed      	bcc.n	801a274 <uxr_serialize_CLIENT_Representation+0x78>
 801a298:	ea08 0804 	and.w	r8, r8, r4
 801a29c:	e7d7      	b.n	801a24e <uxr_serialize_CLIENT_Representation+0x52>
 801a29e:	f04f 0800 	mov.w	r8, #0
 801a2a2:	e7d4      	b.n	801a24e <uxr_serialize_CLIENT_Representation+0x52>
 801a2a4:	ea08 0800 	and.w	r8, r8, r0
 801a2a8:	e7d1      	b.n	801a24e <uxr_serialize_CLIENT_Representation+0x52>
 801a2aa:	bf00      	nop

0801a2ac <uxr_deserialize_CLIENT_Representation>:
 801a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2b0:	2204      	movs	r2, #4
 801a2b2:	460c      	mov	r4, r1
 801a2b4:	4605      	mov	r5, r0
 801a2b6:	f7fd fa2b 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801a2ba:	4607      	mov	r7, r0
 801a2bc:	2202      	movs	r2, #2
 801a2be:	1d21      	adds	r1, r4, #4
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	f7fd fa25 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801a2c6:	4038      	ands	r0, r7
 801a2c8:	2202      	movs	r2, #2
 801a2ca:	1da1      	adds	r1, r4, #6
 801a2cc:	b2c6      	uxtb	r6, r0
 801a2ce:	4628      	mov	r0, r5
 801a2d0:	f7fd fa1e 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801a2d4:	2204      	movs	r2, #4
 801a2d6:	4006      	ands	r6, r0
 801a2d8:	f104 0108 	add.w	r1, r4, #8
 801a2dc:	4628      	mov	r0, r5
 801a2de:	f7fd fa17 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801a2e2:	4006      	ands	r6, r0
 801a2e4:	f104 010c 	add.w	r1, r4, #12
 801a2e8:	4628      	mov	r0, r5
 801a2ea:	f7f7 fcf7 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801a2ee:	f104 010d 	add.w	r1, r4, #13
 801a2f2:	ea06 0700 	and.w	r7, r6, r0
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	f7f7 fcc2 	bl	8011c80 <ucdr_deserialize_bool>
 801a2fc:	7b63      	ldrb	r3, [r4, #13]
 801a2fe:	4007      	ands	r7, r0
 801a300:	b93b      	cbnz	r3, 801a312 <uxr_deserialize_CLIENT_Representation+0x66>
 801a302:	f104 011c 	add.w	r1, r4, #28
 801a306:	4628      	mov	r0, r5
 801a308:	f7f7 fdfe 	bl	8011f08 <ucdr_deserialize_uint16_t>
 801a30c:	4038      	ands	r0, r7
 801a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a312:	f104 0110 	add.w	r1, r4, #16
 801a316:	4628      	mov	r0, r5
 801a318:	f7f8 f810 	bl	801233c <ucdr_deserialize_uint32_t>
 801a31c:	6923      	ldr	r3, [r4, #16]
 801a31e:	2b01      	cmp	r3, #1
 801a320:	d903      	bls.n	801a32a <uxr_deserialize_CLIENT_Representation+0x7e>
 801a322:	2301      	movs	r3, #1
 801a324:	2700      	movs	r7, #0
 801a326:	75ab      	strb	r3, [r5, #22]
 801a328:	e7eb      	b.n	801a302 <uxr_deserialize_CLIENT_Representation+0x56>
 801a32a:	b30b      	cbz	r3, 801a370 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a32c:	b1f0      	cbz	r0, 801a36c <uxr_deserialize_CLIENT_Representation+0xc0>
 801a32e:	46a0      	mov	r8, r4
 801a330:	f04f 0900 	mov.w	r9, #0
 801a334:	e000      	b.n	801a338 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a336:	b1ce      	cbz	r6, 801a36c <uxr_deserialize_CLIENT_Representation+0xc0>
 801a338:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a33c:	f108 0808 	add.w	r8, r8, #8
 801a340:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a344:	4628      	mov	r0, r5
 801a346:	f004 f8c7 	bl	801e4d8 <ucdr_deserialize_string>
 801a34a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a34e:	4606      	mov	r6, r0
 801a350:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a354:	4628      	mov	r0, r5
 801a356:	f109 0901 	add.w	r9, r9, #1
 801a35a:	f004 f8bd 	bl	801e4d8 <ucdr_deserialize_string>
 801a35e:	6923      	ldr	r3, [r4, #16]
 801a360:	4006      	ands	r6, r0
 801a362:	4599      	cmp	r9, r3
 801a364:	b2f6      	uxtb	r6, r6
 801a366:	d3e6      	bcc.n	801a336 <uxr_deserialize_CLIENT_Representation+0x8a>
 801a368:	4037      	ands	r7, r6
 801a36a:	e7ca      	b.n	801a302 <uxr_deserialize_CLIENT_Representation+0x56>
 801a36c:	2700      	movs	r7, #0
 801a36e:	e7c8      	b.n	801a302 <uxr_deserialize_CLIENT_Representation+0x56>
 801a370:	4007      	ands	r7, r0
 801a372:	e7c6      	b.n	801a302 <uxr_deserialize_CLIENT_Representation+0x56>

0801a374 <uxr_serialize_AGENT_Representation>:
 801a374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a378:	2204      	movs	r2, #4
 801a37a:	460f      	mov	r7, r1
 801a37c:	4605      	mov	r5, r0
 801a37e:	f7fd f963 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a382:	4604      	mov	r4, r0
 801a384:	2202      	movs	r2, #2
 801a386:	1d39      	adds	r1, r7, #4
 801a388:	4628      	mov	r0, r5
 801a38a:	f7fd f95d 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a38e:	4020      	ands	r0, r4
 801a390:	2202      	movs	r2, #2
 801a392:	1db9      	adds	r1, r7, #6
 801a394:	b2c4      	uxtb	r4, r0
 801a396:	4628      	mov	r0, r5
 801a398:	f7fd f956 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a39c:	7a39      	ldrb	r1, [r7, #8]
 801a39e:	4004      	ands	r4, r0
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	f7f7 fc57 	bl	8011c54 <ucdr_serialize_bool>
 801a3a6:	7a3b      	ldrb	r3, [r7, #8]
 801a3a8:	ea00 0804 	and.w	r8, r0, r4
 801a3ac:	b913      	cbnz	r3, 801a3b4 <uxr_serialize_AGENT_Representation+0x40>
 801a3ae:	4640      	mov	r0, r8
 801a3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3b4:	68f9      	ldr	r1, [r7, #12]
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f7f7 fe90 	bl	80120dc <ucdr_serialize_uint32_t>
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	b303      	cbz	r3, 801a402 <uxr_serialize_AGENT_Representation+0x8e>
 801a3c0:	b1d0      	cbz	r0, 801a3f8 <uxr_serialize_AGENT_Representation+0x84>
 801a3c2:	463e      	mov	r6, r7
 801a3c4:	f04f 0900 	mov.w	r9, #0
 801a3c8:	e000      	b.n	801a3cc <uxr_serialize_AGENT_Representation+0x58>
 801a3ca:	b1ac      	cbz	r4, 801a3f8 <uxr_serialize_AGENT_Representation+0x84>
 801a3cc:	6931      	ldr	r1, [r6, #16]
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	f004 f872 	bl	801e4b8 <ucdr_serialize_string>
 801a3d4:	6971      	ldr	r1, [r6, #20]
 801a3d6:	4604      	mov	r4, r0
 801a3d8:	4628      	mov	r0, r5
 801a3da:	f004 f86d 	bl	801e4b8 <ucdr_serialize_string>
 801a3de:	f109 0901 	add.w	r9, r9, #1
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	4004      	ands	r4, r0
 801a3e6:	3608      	adds	r6, #8
 801a3e8:	4599      	cmp	r9, r3
 801a3ea:	b2e4      	uxtb	r4, r4
 801a3ec:	d3ed      	bcc.n	801a3ca <uxr_serialize_AGENT_Representation+0x56>
 801a3ee:	ea08 0804 	and.w	r8, r8, r4
 801a3f2:	4640      	mov	r0, r8
 801a3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3f8:	f04f 0800 	mov.w	r8, #0
 801a3fc:	4640      	mov	r0, r8
 801a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a402:	ea08 0800 	and.w	r8, r8, r0
 801a406:	e7d2      	b.n	801a3ae <uxr_serialize_AGENT_Representation+0x3a>

0801a408 <uxr_serialize_DATAWRITER_Representation>:
 801a408:	b570      	push	{r4, r5, r6, lr}
 801a40a:	460d      	mov	r5, r1
 801a40c:	7809      	ldrb	r1, [r1, #0]
 801a40e:	4606      	mov	r6, r0
 801a410:	f7f7 fc4e 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a414:	4604      	mov	r4, r0
 801a416:	b130      	cbz	r0, 801a426 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a418:	782b      	ldrb	r3, [r5, #0]
 801a41a:	2b02      	cmp	r3, #2
 801a41c:	d00c      	beq.n	801a438 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a41e:	2b03      	cmp	r3, #3
 801a420:	d010      	beq.n	801a444 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a422:	2b01      	cmp	r3, #1
 801a424:	d008      	beq.n	801a438 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a426:	2202      	movs	r2, #2
 801a428:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a42c:	4630      	mov	r0, r6
 801a42e:	f7fd f90b 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a432:	4020      	ands	r0, r4
 801a434:	b2c0      	uxtb	r0, r0
 801a436:	bd70      	pop	{r4, r5, r6, pc}
 801a438:	6869      	ldr	r1, [r5, #4]
 801a43a:	4630      	mov	r0, r6
 801a43c:	f004 f83c 	bl	801e4b8 <ucdr_serialize_string>
 801a440:	4604      	mov	r4, r0
 801a442:	e7f0      	b.n	801a426 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a444:	4629      	mov	r1, r5
 801a446:	4630      	mov	r0, r6
 801a448:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a44c:	3104      	adds	r1, #4
 801a44e:	f7f8 ffa7 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801a452:	4604      	mov	r4, r0
 801a454:	e7e7      	b.n	801a426 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a456:	bf00      	nop

0801a458 <uxr_serialize_ObjectVariant.part.0>:
 801a458:	b570      	push	{r4, r5, r6, lr}
 801a45a:	780b      	ldrb	r3, [r1, #0]
 801a45c:	460c      	mov	r4, r1
 801a45e:	4605      	mov	r5, r0
 801a460:	3b01      	subs	r3, #1
 801a462:	2b0d      	cmp	r3, #13
 801a464:	d854      	bhi.n	801a510 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a466:	e8df f003 	tbb	[pc, r3]
 801a46a:	0730      	.short	0x0730
 801a46c:	07071b1b 	.word	0x07071b1b
 801a470:	0c530707 	.word	0x0c530707
 801a474:	494e0c0c 	.word	0x494e0c0c
 801a478:	3104      	adds	r1, #4
 801a47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a47e:	f7ff bfc3 	b.w	801a408 <uxr_serialize_DATAWRITER_Representation>
 801a482:	7909      	ldrb	r1, [r1, #4]
 801a484:	f7f7 fc14 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a488:	b1e8      	cbz	r0, 801a4c6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a48a:	7923      	ldrb	r3, [r4, #4]
 801a48c:	2b01      	cmp	r3, #1
 801a48e:	d001      	beq.n	801a494 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a490:	2b02      	cmp	r3, #2
 801a492:	d13d      	bne.n	801a510 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a494:	68a1      	ldr	r1, [r4, #8]
 801a496:	4628      	mov	r0, r5
 801a498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a49c:	f004 b80c 	b.w	801e4b8 <ucdr_serialize_string>
 801a4a0:	7909      	ldrb	r1, [r1, #4]
 801a4a2:	f7f7 fc05 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a4a6:	4606      	mov	r6, r0
 801a4a8:	b120      	cbz	r0, 801a4b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a4aa:	7923      	ldrb	r3, [r4, #4]
 801a4ac:	2b02      	cmp	r3, #2
 801a4ae:	d039      	beq.n	801a524 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a4b0:	2b03      	cmp	r3, #3
 801a4b2:	d02f      	beq.n	801a514 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a4b4:	2202      	movs	r2, #2
 801a4b6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a4ba:	4628      	mov	r0, r5
 801a4bc:	f7fd f8c4 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a4c0:	4030      	ands	r0, r6
 801a4c2:	b2c0      	uxtb	r0, r0
 801a4c4:	bd70      	pop	{r4, r5, r6, pc}
 801a4c6:	2000      	movs	r0, #0
 801a4c8:	bd70      	pop	{r4, r5, r6, pc}
 801a4ca:	7909      	ldrb	r1, [r1, #4]
 801a4cc:	f7f7 fbf0 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801a4d0:	4606      	mov	r6, r0
 801a4d2:	b158      	cbz	r0, 801a4ec <uxr_serialize_ObjectVariant.part.0+0x94>
 801a4d4:	7923      	ldrb	r3, [r4, #4]
 801a4d6:	2b02      	cmp	r3, #2
 801a4d8:	d003      	beq.n	801a4e2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a4da:	2b03      	cmp	r3, #3
 801a4dc:	d028      	beq.n	801a530 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a4de:	2b01      	cmp	r3, #1
 801a4e0:	d104      	bne.n	801a4ec <uxr_serialize_ObjectVariant.part.0+0x94>
 801a4e2:	68a1      	ldr	r1, [r4, #8]
 801a4e4:	4628      	mov	r0, r5
 801a4e6:	f003 ffe7 	bl	801e4b8 <ucdr_serialize_string>
 801a4ea:	4606      	mov	r6, r0
 801a4ec:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	f7f8 f919 	bl	8012728 <ucdr_serialize_int16_t>
 801a4f6:	4030      	ands	r0, r6
 801a4f8:	b2c0      	uxtb	r0, r0
 801a4fa:	bd70      	pop	{r4, r5, r6, pc}
 801a4fc:	3104      	adds	r1, #4
 801a4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a502:	f7ff be7b 	b.w	801a1fc <uxr_serialize_CLIENT_Representation>
 801a506:	3104      	adds	r1, #4
 801a508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a50c:	f7ff bf32 	b.w	801a374 <uxr_serialize_AGENT_Representation>
 801a510:	2001      	movs	r0, #1
 801a512:	bd70      	pop	{r4, r5, r6, pc}
 801a514:	68a2      	ldr	r2, [r4, #8]
 801a516:	f104 010c 	add.w	r1, r4, #12
 801a51a:	4628      	mov	r0, r5
 801a51c:	f7f8 ff40 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801a520:	4606      	mov	r6, r0
 801a522:	e7c7      	b.n	801a4b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a524:	68a1      	ldr	r1, [r4, #8]
 801a526:	4628      	mov	r0, r5
 801a528:	f003 ffc6 	bl	801e4b8 <ucdr_serialize_string>
 801a52c:	4606      	mov	r6, r0
 801a52e:	e7c1      	b.n	801a4b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a530:	68a2      	ldr	r2, [r4, #8]
 801a532:	f104 010c 	add.w	r1, r4, #12
 801a536:	4628      	mov	r0, r5
 801a538:	f7f8 ff32 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801a53c:	4606      	mov	r6, r0
 801a53e:	e7d5      	b.n	801a4ec <uxr_serialize_ObjectVariant.part.0+0x94>

0801a540 <uxr_deserialize_DATAWRITER_Representation>:
 801a540:	b570      	push	{r4, r5, r6, lr}
 801a542:	4606      	mov	r6, r0
 801a544:	460d      	mov	r5, r1
 801a546:	f7f7 fbc9 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801a54a:	4604      	mov	r4, r0
 801a54c:	b130      	cbz	r0, 801a55c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a54e:	782b      	ldrb	r3, [r5, #0]
 801a550:	2b02      	cmp	r3, #2
 801a552:	d00c      	beq.n	801a56e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a554:	2b03      	cmp	r3, #3
 801a556:	d012      	beq.n	801a57e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a558:	2b01      	cmp	r3, #1
 801a55a:	d008      	beq.n	801a56e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a55c:	2202      	movs	r2, #2
 801a55e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a562:	4630      	mov	r0, r6
 801a564:	f7fd f8d4 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801a568:	4020      	ands	r0, r4
 801a56a:	b2c0      	uxtb	r0, r0
 801a56c:	bd70      	pop	{r4, r5, r6, pc}
 801a56e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a572:	6869      	ldr	r1, [r5, #4]
 801a574:	4630      	mov	r0, r6
 801a576:	f003 ffaf 	bl	801e4d8 <ucdr_deserialize_string>
 801a57a:	4604      	mov	r4, r0
 801a57c:	e7ee      	b.n	801a55c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a57e:	1d2b      	adds	r3, r5, #4
 801a580:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a584:	f105 0108 	add.w	r1, r5, #8
 801a588:	4630      	mov	r0, r6
 801a58a:	f7f8 ff1b 	bl	80133c4 <ucdr_deserialize_sequence_uint8_t>
 801a58e:	4604      	mov	r4, r0
 801a590:	e7e4      	b.n	801a55c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a592:	bf00      	nop

0801a594 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a594:	b570      	push	{r4, r5, r6, lr}
 801a596:	460d      	mov	r5, r1
 801a598:	7809      	ldrb	r1, [r1, #0]
 801a59a:	4606      	mov	r6, r0
 801a59c:	f7f7 fb5a 	bl	8011c54 <ucdr_serialize_bool>
 801a5a0:	782b      	ldrb	r3, [r5, #0]
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	b94b      	cbnz	r3, 801a5ba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a5a6:	7a29      	ldrb	r1, [r5, #8]
 801a5a8:	4630      	mov	r0, r6
 801a5aa:	f7f7 fb53 	bl	8011c54 <ucdr_serialize_bool>
 801a5ae:	7a2b      	ldrb	r3, [r5, #8]
 801a5b0:	4004      	ands	r4, r0
 801a5b2:	b2e4      	uxtb	r4, r4
 801a5b4:	b943      	cbnz	r3, 801a5c8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	bd70      	pop	{r4, r5, r6, pc}
 801a5ba:	6869      	ldr	r1, [r5, #4]
 801a5bc:	4630      	mov	r0, r6
 801a5be:	f003 ff7b 	bl	801e4b8 <ucdr_serialize_string>
 801a5c2:	4004      	ands	r4, r0
 801a5c4:	b2e4      	uxtb	r4, r4
 801a5c6:	e7ee      	b.n	801a5a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a5c8:	68e9      	ldr	r1, [r5, #12]
 801a5ca:	4630      	mov	r0, r6
 801a5cc:	f003 ff74 	bl	801e4b8 <ucdr_serialize_string>
 801a5d0:	4004      	ands	r4, r0
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	bd70      	pop	{r4, r5, r6, pc}
 801a5d6:	bf00      	nop

0801a5d8 <uxr_serialize_OBJK_Topic_Binary>:
 801a5d8:	b570      	push	{r4, r5, r6, lr}
 801a5da:	460d      	mov	r5, r1
 801a5dc:	4606      	mov	r6, r0
 801a5de:	6809      	ldr	r1, [r1, #0]
 801a5e0:	f003 ff6a 	bl	801e4b8 <ucdr_serialize_string>
 801a5e4:	4604      	mov	r4, r0
 801a5e6:	7929      	ldrb	r1, [r5, #4]
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	f7f7 fb33 	bl	8011c54 <ucdr_serialize_bool>
 801a5ee:	792b      	ldrb	r3, [r5, #4]
 801a5f0:	4004      	ands	r4, r0
 801a5f2:	b2e4      	uxtb	r4, r4
 801a5f4:	b943      	cbnz	r3, 801a608 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a5f6:	7b29      	ldrb	r1, [r5, #12]
 801a5f8:	4630      	mov	r0, r6
 801a5fa:	f7f7 fb2b 	bl	8011c54 <ucdr_serialize_bool>
 801a5fe:	7b2b      	ldrb	r3, [r5, #12]
 801a600:	4004      	ands	r4, r0
 801a602:	b93b      	cbnz	r3, 801a614 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a604:	4620      	mov	r0, r4
 801a606:	bd70      	pop	{r4, r5, r6, pc}
 801a608:	68a9      	ldr	r1, [r5, #8]
 801a60a:	4630      	mov	r0, r6
 801a60c:	f003 ff54 	bl	801e4b8 <ucdr_serialize_string>
 801a610:	4004      	ands	r4, r0
 801a612:	e7f0      	b.n	801a5f6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a614:	6929      	ldr	r1, [r5, #16]
 801a616:	4630      	mov	r0, r6
 801a618:	f003 ff4e 	bl	801e4b8 <ucdr_serialize_string>
 801a61c:	4004      	ands	r4, r0
 801a61e:	b2e4      	uxtb	r4, r4
 801a620:	4620      	mov	r0, r4
 801a622:	bd70      	pop	{r4, r5, r6, pc}

0801a624 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a628:	460c      	mov	r4, r1
 801a62a:	7809      	ldrb	r1, [r1, #0]
 801a62c:	4606      	mov	r6, r0
 801a62e:	f7f7 fb11 	bl	8011c54 <ucdr_serialize_bool>
 801a632:	7823      	ldrb	r3, [r4, #0]
 801a634:	4605      	mov	r5, r0
 801a636:	b96b      	cbnz	r3, 801a654 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a638:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a63c:	4630      	mov	r0, r6
 801a63e:	f7f7 fb09 	bl	8011c54 <ucdr_serialize_bool>
 801a642:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a646:	4005      	ands	r5, r0
 801a648:	b2ed      	uxtb	r5, r5
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d169      	bne.n	801a722 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a64e:	4628      	mov	r0, r5
 801a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a654:	6861      	ldr	r1, [r4, #4]
 801a656:	4630      	mov	r0, r6
 801a658:	f7f7 fd40 	bl	80120dc <ucdr_serialize_uint32_t>
 801a65c:	6863      	ldr	r3, [r4, #4]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d06b      	beq.n	801a73a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a662:	2800      	cmp	r0, #0
 801a664:	d067      	beq.n	801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a666:	68a1      	ldr	r1, [r4, #8]
 801a668:	4630      	mov	r0, r6
 801a66a:	f003 ff25 	bl	801e4b8 <ucdr_serialize_string>
 801a66e:	6863      	ldr	r3, [r4, #4]
 801a670:	2b01      	cmp	r3, #1
 801a672:	d953      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a674:	2800      	cmp	r0, #0
 801a676:	d05e      	beq.n	801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a678:	68e1      	ldr	r1, [r4, #12]
 801a67a:	4630      	mov	r0, r6
 801a67c:	f003 ff1c 	bl	801e4b8 <ucdr_serialize_string>
 801a680:	6863      	ldr	r3, [r4, #4]
 801a682:	2b02      	cmp	r3, #2
 801a684:	d94a      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a686:	2800      	cmp	r0, #0
 801a688:	d055      	beq.n	801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a68a:	6921      	ldr	r1, [r4, #16]
 801a68c:	4630      	mov	r0, r6
 801a68e:	f003 ff13 	bl	801e4b8 <ucdr_serialize_string>
 801a692:	6863      	ldr	r3, [r4, #4]
 801a694:	2b03      	cmp	r3, #3
 801a696:	d941      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a698:	2800      	cmp	r0, #0
 801a69a:	d04c      	beq.n	801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a69c:	6961      	ldr	r1, [r4, #20]
 801a69e:	4630      	mov	r0, r6
 801a6a0:	f003 ff0a 	bl	801e4b8 <ucdr_serialize_string>
 801a6a4:	6863      	ldr	r3, [r4, #4]
 801a6a6:	2b04      	cmp	r3, #4
 801a6a8:	d938      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6aa:	2800      	cmp	r0, #0
 801a6ac:	d043      	beq.n	801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6ae:	69a1      	ldr	r1, [r4, #24]
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	f003 ff01 	bl	801e4b8 <ucdr_serialize_string>
 801a6b6:	6863      	ldr	r3, [r4, #4]
 801a6b8:	2b05      	cmp	r3, #5
 801a6ba:	d92f      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	d03a      	beq.n	801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6c0:	69e1      	ldr	r1, [r4, #28]
 801a6c2:	4630      	mov	r0, r6
 801a6c4:	f003 fef8 	bl	801e4b8 <ucdr_serialize_string>
 801a6c8:	6863      	ldr	r3, [r4, #4]
 801a6ca:	2b06      	cmp	r3, #6
 801a6cc:	d926      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6ce:	b390      	cbz	r0, 801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6d0:	6a21      	ldr	r1, [r4, #32]
 801a6d2:	4630      	mov	r0, r6
 801a6d4:	f003 fef0 	bl	801e4b8 <ucdr_serialize_string>
 801a6d8:	6863      	ldr	r3, [r4, #4]
 801a6da:	2b07      	cmp	r3, #7
 801a6dc:	d91e      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6de:	b350      	cbz	r0, 801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a6e2:	4630      	mov	r0, r6
 801a6e4:	f003 fee8 	bl	801e4b8 <ucdr_serialize_string>
 801a6e8:	6863      	ldr	r3, [r4, #4]
 801a6ea:	2b08      	cmp	r3, #8
 801a6ec:	d916      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6ee:	b310      	cbz	r0, 801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a6f2:	4630      	mov	r0, r6
 801a6f4:	f003 fee0 	bl	801e4b8 <ucdr_serialize_string>
 801a6f8:	6863      	ldr	r3, [r4, #4]
 801a6fa:	2b09      	cmp	r3, #9
 801a6fc:	d90e      	bls.n	801a71c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6fe:	b1d0      	cbz	r0, 801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a700:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a704:	2709      	movs	r7, #9
 801a706:	e000      	b.n	801a70a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a708:	b1a8      	cbz	r0, 801a736 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a70a:	f858 1b04 	ldr.w	r1, [r8], #4
 801a70e:	4630      	mov	r0, r6
 801a710:	f003 fed2 	bl	801e4b8 <ucdr_serialize_string>
 801a714:	3701      	adds	r7, #1
 801a716:	6862      	ldr	r2, [r4, #4]
 801a718:	4297      	cmp	r7, r2
 801a71a:	d3f5      	bcc.n	801a708 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a71c:	4005      	ands	r5, r0
 801a71e:	b2ed      	uxtb	r5, r5
 801a720:	e78a      	b.n	801a638 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a724:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a728:	4630      	mov	r0, r6
 801a72a:	f7f8 fe39 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801a72e:	4005      	ands	r5, r0
 801a730:	4628      	mov	r0, r5
 801a732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a736:	2500      	movs	r5, #0
 801a738:	e77e      	b.n	801a638 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a73a:	4028      	ands	r0, r5
 801a73c:	b2c5      	uxtb	r5, r0
 801a73e:	e77b      	b.n	801a638 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a740 <uxr_serialize_OBJK_Publisher_Binary>:
 801a740:	b570      	push	{r4, r5, r6, lr}
 801a742:	460d      	mov	r5, r1
 801a744:	7809      	ldrb	r1, [r1, #0]
 801a746:	4606      	mov	r6, r0
 801a748:	f7f7 fa84 	bl	8011c54 <ucdr_serialize_bool>
 801a74c:	782b      	ldrb	r3, [r5, #0]
 801a74e:	4604      	mov	r4, r0
 801a750:	b94b      	cbnz	r3, 801a766 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a752:	7a29      	ldrb	r1, [r5, #8]
 801a754:	4630      	mov	r0, r6
 801a756:	f7f7 fa7d 	bl	8011c54 <ucdr_serialize_bool>
 801a75a:	7a2b      	ldrb	r3, [r5, #8]
 801a75c:	4004      	ands	r4, r0
 801a75e:	b2e4      	uxtb	r4, r4
 801a760:	b943      	cbnz	r3, 801a774 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a762:	4620      	mov	r0, r4
 801a764:	bd70      	pop	{r4, r5, r6, pc}
 801a766:	6869      	ldr	r1, [r5, #4]
 801a768:	4630      	mov	r0, r6
 801a76a:	f003 fea5 	bl	801e4b8 <ucdr_serialize_string>
 801a76e:	4004      	ands	r4, r0
 801a770:	b2e4      	uxtb	r4, r4
 801a772:	e7ee      	b.n	801a752 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a774:	f105 010c 	add.w	r1, r5, #12
 801a778:	4630      	mov	r0, r6
 801a77a:	f7ff ff53 	bl	801a624 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a77e:	4004      	ands	r4, r0
 801a780:	4620      	mov	r0, r4
 801a782:	bd70      	pop	{r4, r5, r6, pc}

0801a784 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a788:	460c      	mov	r4, r1
 801a78a:	7809      	ldrb	r1, [r1, #0]
 801a78c:	4606      	mov	r6, r0
 801a78e:	f7f7 fa61 	bl	8011c54 <ucdr_serialize_bool>
 801a792:	7823      	ldrb	r3, [r4, #0]
 801a794:	4605      	mov	r5, r0
 801a796:	b96b      	cbnz	r3, 801a7b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a798:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a79c:	4630      	mov	r0, r6
 801a79e:	f7f7 fa59 	bl	8011c54 <ucdr_serialize_bool>
 801a7a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a7a6:	4005      	ands	r5, r0
 801a7a8:	b2ed      	uxtb	r5, r5
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d169      	bne.n	801a882 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a7ae:	4628      	mov	r0, r5
 801a7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7b4:	6861      	ldr	r1, [r4, #4]
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f7f7 fc90 	bl	80120dc <ucdr_serialize_uint32_t>
 801a7bc:	6863      	ldr	r3, [r4, #4]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d06b      	beq.n	801a89a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a7c2:	2800      	cmp	r0, #0
 801a7c4:	d067      	beq.n	801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7c6:	68a1      	ldr	r1, [r4, #8]
 801a7c8:	4630      	mov	r0, r6
 801a7ca:	f003 fe75 	bl	801e4b8 <ucdr_serialize_string>
 801a7ce:	6863      	ldr	r3, [r4, #4]
 801a7d0:	2b01      	cmp	r3, #1
 801a7d2:	d953      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7d4:	2800      	cmp	r0, #0
 801a7d6:	d05e      	beq.n	801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7d8:	68e1      	ldr	r1, [r4, #12]
 801a7da:	4630      	mov	r0, r6
 801a7dc:	f003 fe6c 	bl	801e4b8 <ucdr_serialize_string>
 801a7e0:	6863      	ldr	r3, [r4, #4]
 801a7e2:	2b02      	cmp	r3, #2
 801a7e4:	d94a      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7e6:	2800      	cmp	r0, #0
 801a7e8:	d055      	beq.n	801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7ea:	6921      	ldr	r1, [r4, #16]
 801a7ec:	4630      	mov	r0, r6
 801a7ee:	f003 fe63 	bl	801e4b8 <ucdr_serialize_string>
 801a7f2:	6863      	ldr	r3, [r4, #4]
 801a7f4:	2b03      	cmp	r3, #3
 801a7f6:	d941      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7f8:	2800      	cmp	r0, #0
 801a7fa:	d04c      	beq.n	801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7fc:	6961      	ldr	r1, [r4, #20]
 801a7fe:	4630      	mov	r0, r6
 801a800:	f003 fe5a 	bl	801e4b8 <ucdr_serialize_string>
 801a804:	6863      	ldr	r3, [r4, #4]
 801a806:	2b04      	cmp	r3, #4
 801a808:	d938      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a80a:	2800      	cmp	r0, #0
 801a80c:	d043      	beq.n	801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a80e:	69a1      	ldr	r1, [r4, #24]
 801a810:	4630      	mov	r0, r6
 801a812:	f003 fe51 	bl	801e4b8 <ucdr_serialize_string>
 801a816:	6863      	ldr	r3, [r4, #4]
 801a818:	2b05      	cmp	r3, #5
 801a81a:	d92f      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a81c:	2800      	cmp	r0, #0
 801a81e:	d03a      	beq.n	801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a820:	69e1      	ldr	r1, [r4, #28]
 801a822:	4630      	mov	r0, r6
 801a824:	f003 fe48 	bl	801e4b8 <ucdr_serialize_string>
 801a828:	6863      	ldr	r3, [r4, #4]
 801a82a:	2b06      	cmp	r3, #6
 801a82c:	d926      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a82e:	b390      	cbz	r0, 801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a830:	6a21      	ldr	r1, [r4, #32]
 801a832:	4630      	mov	r0, r6
 801a834:	f003 fe40 	bl	801e4b8 <ucdr_serialize_string>
 801a838:	6863      	ldr	r3, [r4, #4]
 801a83a:	2b07      	cmp	r3, #7
 801a83c:	d91e      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a83e:	b350      	cbz	r0, 801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a842:	4630      	mov	r0, r6
 801a844:	f003 fe38 	bl	801e4b8 <ucdr_serialize_string>
 801a848:	6863      	ldr	r3, [r4, #4]
 801a84a:	2b08      	cmp	r3, #8
 801a84c:	d916      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a84e:	b310      	cbz	r0, 801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a850:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a852:	4630      	mov	r0, r6
 801a854:	f003 fe30 	bl	801e4b8 <ucdr_serialize_string>
 801a858:	6863      	ldr	r3, [r4, #4]
 801a85a:	2b09      	cmp	r3, #9
 801a85c:	d90e      	bls.n	801a87c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a85e:	b1d0      	cbz	r0, 801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a860:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a864:	2709      	movs	r7, #9
 801a866:	e000      	b.n	801a86a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a868:	b1a8      	cbz	r0, 801a896 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a86a:	f858 1b04 	ldr.w	r1, [r8], #4
 801a86e:	4630      	mov	r0, r6
 801a870:	f003 fe22 	bl	801e4b8 <ucdr_serialize_string>
 801a874:	3701      	adds	r7, #1
 801a876:	6862      	ldr	r2, [r4, #4]
 801a878:	4297      	cmp	r7, r2
 801a87a:	d3f5      	bcc.n	801a868 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a87c:	4005      	ands	r5, r0
 801a87e:	b2ed      	uxtb	r5, r5
 801a880:	e78a      	b.n	801a798 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a884:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a888:	4630      	mov	r0, r6
 801a88a:	f7f8 fd89 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801a88e:	4005      	ands	r5, r0
 801a890:	4628      	mov	r0, r5
 801a892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a896:	2500      	movs	r5, #0
 801a898:	e77e      	b.n	801a798 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a89a:	4028      	ands	r0, r5
 801a89c:	b2c5      	uxtb	r5, r0
 801a89e:	e77b      	b.n	801a798 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a8a0 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a8a0:	b570      	push	{r4, r5, r6, lr}
 801a8a2:	460d      	mov	r5, r1
 801a8a4:	7809      	ldrb	r1, [r1, #0]
 801a8a6:	4606      	mov	r6, r0
 801a8a8:	f7f7 f9d4 	bl	8011c54 <ucdr_serialize_bool>
 801a8ac:	782b      	ldrb	r3, [r5, #0]
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	b94b      	cbnz	r3, 801a8c6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a8b2:	7a29      	ldrb	r1, [r5, #8]
 801a8b4:	4630      	mov	r0, r6
 801a8b6:	f7f7 f9cd 	bl	8011c54 <ucdr_serialize_bool>
 801a8ba:	7a2b      	ldrb	r3, [r5, #8]
 801a8bc:	4004      	ands	r4, r0
 801a8be:	b2e4      	uxtb	r4, r4
 801a8c0:	b943      	cbnz	r3, 801a8d4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	bd70      	pop	{r4, r5, r6, pc}
 801a8c6:	6869      	ldr	r1, [r5, #4]
 801a8c8:	4630      	mov	r0, r6
 801a8ca:	f003 fdf5 	bl	801e4b8 <ucdr_serialize_string>
 801a8ce:	4004      	ands	r4, r0
 801a8d0:	b2e4      	uxtb	r4, r4
 801a8d2:	e7ee      	b.n	801a8b2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a8d4:	f105 010c 	add.w	r1, r5, #12
 801a8d8:	4630      	mov	r0, r6
 801a8da:	f7ff ff53 	bl	801a784 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a8de:	4004      	ands	r4, r0
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	bd70      	pop	{r4, r5, r6, pc}

0801a8e4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a8e4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a8e8:	4688      	mov	r8, r1
 801a8ea:	4681      	mov	r9, r0
 801a8ec:	8809      	ldrh	r1, [r1, #0]
 801a8ee:	f7f7 fa0b 	bl	8011d08 <ucdr_serialize_uint16_t>
 801a8f2:	4606      	mov	r6, r0
 801a8f4:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a8f8:	4648      	mov	r0, r9
 801a8fa:	f7f7 f9ab 	bl	8011c54 <ucdr_serialize_bool>
 801a8fe:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a902:	4006      	ands	r6, r0
 801a904:	b2f5      	uxtb	r5, r6
 801a906:	b9eb      	cbnz	r3, 801a944 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a908:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a90c:	4648      	mov	r0, r9
 801a90e:	f7f7 f9a1 	bl	8011c54 <ucdr_serialize_bool>
 801a912:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a916:	4005      	ands	r5, r0
 801a918:	bb7b      	cbnz	r3, 801a97a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a91a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a91e:	4648      	mov	r0, r9
 801a920:	f7f7 f998 	bl	8011c54 <ucdr_serialize_bool>
 801a924:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a928:	4005      	ands	r5, r0
 801a92a:	b9f3      	cbnz	r3, 801a96a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a92c:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a930:	4648      	mov	r0, r9
 801a932:	f7f7 f98f 	bl	8011c54 <ucdr_serialize_bool>
 801a936:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a93a:	4005      	ands	r5, r0
 801a93c:	b94b      	cbnz	r3, 801a952 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a93e:	4628      	mov	r0, r5
 801a940:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a944:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a948:	4648      	mov	r0, r9
 801a94a:	f7f7 f9dd 	bl	8011d08 <ucdr_serialize_uint16_t>
 801a94e:	4005      	ands	r5, r0
 801a950:	e7da      	b.n	801a908 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a952:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a956:	f108 011c 	add.w	r1, r8, #28
 801a95a:	4648      	mov	r0, r9
 801a95c:	f7f8 fd20 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801a960:	4028      	ands	r0, r5
 801a962:	b2c5      	uxtb	r5, r0
 801a964:	4628      	mov	r0, r5
 801a966:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a96a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a96e:	4648      	mov	r0, r9
 801a970:	f7f7 fbb4 	bl	80120dc <ucdr_serialize_uint32_t>
 801a974:	4028      	ands	r0, r5
 801a976:	b2c5      	uxtb	r5, r0
 801a978:	e7d8      	b.n	801a92c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a97a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a97e:	4648      	mov	r0, r9
 801a980:	f7f7 fbac 	bl	80120dc <ucdr_serialize_uint32_t>
 801a984:	4028      	ands	r0, r5
 801a986:	b2c5      	uxtb	r5, r0
 801a988:	e7c7      	b.n	801a91a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a98a:	bf00      	nop

0801a98c <uxr_serialize_OBJK_DataReader_Binary>:
 801a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a98e:	2202      	movs	r2, #2
 801a990:	460c      	mov	r4, r1
 801a992:	4606      	mov	r6, r0
 801a994:	f7fc fe58 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801a998:	4605      	mov	r5, r0
 801a99a:	78a1      	ldrb	r1, [r4, #2]
 801a99c:	4630      	mov	r0, r6
 801a99e:	f7f7 f959 	bl	8011c54 <ucdr_serialize_bool>
 801a9a2:	78a3      	ldrb	r3, [r4, #2]
 801a9a4:	4005      	ands	r5, r0
 801a9a6:	b2ed      	uxtb	r5, r5
 801a9a8:	b90b      	cbnz	r3, 801a9ae <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9ae:	f104 0108 	add.w	r1, r4, #8
 801a9b2:	4630      	mov	r0, r6
 801a9b4:	f7ff ff96 	bl	801a8e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a9b8:	4607      	mov	r7, r0
 801a9ba:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a9be:	4630      	mov	r0, r6
 801a9c0:	f7f7 f948 	bl	8011c54 <ucdr_serialize_bool>
 801a9c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a9c8:	4038      	ands	r0, r7
 801a9ca:	b2c7      	uxtb	r7, r0
 801a9cc:	b95b      	cbnz	r3, 801a9e6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a9ce:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801a9d2:	4630      	mov	r0, r6
 801a9d4:	f7f7 f93e 	bl	8011c54 <ucdr_serialize_bool>
 801a9d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a9dc:	4007      	ands	r7, r0
 801a9de:	b94b      	cbnz	r3, 801a9f4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a9e0:	403d      	ands	r5, r7
 801a9e2:	4628      	mov	r0, r5
 801a9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9e6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801a9ea:	4630      	mov	r0, r6
 801a9ec:	f7f7 fdcc 	bl	8012588 <ucdr_serialize_uint64_t>
 801a9f0:	4007      	ands	r7, r0
 801a9f2:	e7ec      	b.n	801a9ce <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a9f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a9f6:	4630      	mov	r0, r6
 801a9f8:	f003 fd5e 	bl	801e4b8 <ucdr_serialize_string>
 801a9fc:	4007      	ands	r7, r0
 801a9fe:	b2ff      	uxtb	r7, r7
 801aa00:	e7ee      	b.n	801a9e0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801aa02:	bf00      	nop

0801aa04 <uxr_serialize_OBJK_DataWriter_Binary>:
 801aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa06:	2202      	movs	r2, #2
 801aa08:	460d      	mov	r5, r1
 801aa0a:	4606      	mov	r6, r0
 801aa0c:	f7fc fe1c 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801aa10:	4604      	mov	r4, r0
 801aa12:	78a9      	ldrb	r1, [r5, #2]
 801aa14:	4630      	mov	r0, r6
 801aa16:	f7f7 f91d 	bl	8011c54 <ucdr_serialize_bool>
 801aa1a:	78ab      	ldrb	r3, [r5, #2]
 801aa1c:	4004      	ands	r4, r0
 801aa1e:	b2e4      	uxtb	r4, r4
 801aa20:	b90b      	cbnz	r3, 801aa26 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801aa22:	4620      	mov	r0, r4
 801aa24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa26:	f105 0108 	add.w	r1, r5, #8
 801aa2a:	4630      	mov	r0, r6
 801aa2c:	f7ff ff5a 	bl	801a8e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801aa30:	4607      	mov	r7, r0
 801aa32:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801aa36:	4630      	mov	r0, r6
 801aa38:	f7f7 f90c 	bl	8011c54 <ucdr_serialize_bool>
 801aa3c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801aa40:	4038      	ands	r0, r7
 801aa42:	b2c7      	uxtb	r7, r0
 801aa44:	b913      	cbnz	r3, 801aa4c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801aa46:	403c      	ands	r4, r7
 801aa48:	4620      	mov	r0, r4
 801aa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa4c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801aa50:	4630      	mov	r0, r6
 801aa52:	f7f7 fd99 	bl	8012588 <ucdr_serialize_uint64_t>
 801aa56:	4007      	ands	r7, r0
 801aa58:	e7f5      	b.n	801aa46 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801aa5a:	bf00      	nop

0801aa5c <uxr_serialize_OBJK_Replier_Binary>:
 801aa5c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801aa60:	460f      	mov	r7, r1
 801aa62:	4680      	mov	r8, r0
 801aa64:	6809      	ldr	r1, [r1, #0]
 801aa66:	f003 fd27 	bl	801e4b8 <ucdr_serialize_string>
 801aa6a:	4605      	mov	r5, r0
 801aa6c:	6879      	ldr	r1, [r7, #4]
 801aa6e:	4640      	mov	r0, r8
 801aa70:	f003 fd22 	bl	801e4b8 <ucdr_serialize_string>
 801aa74:	4005      	ands	r5, r0
 801aa76:	68b9      	ldr	r1, [r7, #8]
 801aa78:	4640      	mov	r0, r8
 801aa7a:	b2ec      	uxtb	r4, r5
 801aa7c:	f003 fd1c 	bl	801e4b8 <ucdr_serialize_string>
 801aa80:	7b39      	ldrb	r1, [r7, #12]
 801aa82:	4004      	ands	r4, r0
 801aa84:	4640      	mov	r0, r8
 801aa86:	f7f7 f8e5 	bl	8011c54 <ucdr_serialize_bool>
 801aa8a:	7b3b      	ldrb	r3, [r7, #12]
 801aa8c:	4004      	ands	r4, r0
 801aa8e:	b94b      	cbnz	r3, 801aaa4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801aa90:	7d39      	ldrb	r1, [r7, #20]
 801aa92:	4640      	mov	r0, r8
 801aa94:	f7f7 f8de 	bl	8011c54 <ucdr_serialize_bool>
 801aa98:	7d3b      	ldrb	r3, [r7, #20]
 801aa9a:	4004      	ands	r4, r0
 801aa9c:	b943      	cbnz	r3, 801aab0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aaa4:	6939      	ldr	r1, [r7, #16]
 801aaa6:	4640      	mov	r0, r8
 801aaa8:	f003 fd06 	bl	801e4b8 <ucdr_serialize_string>
 801aaac:	4004      	ands	r4, r0
 801aaae:	e7ef      	b.n	801aa90 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801aab0:	69b9      	ldr	r1, [r7, #24]
 801aab2:	4640      	mov	r0, r8
 801aab4:	f003 fd00 	bl	801e4b8 <ucdr_serialize_string>
 801aab8:	4004      	ands	r4, r0
 801aaba:	b2e4      	uxtb	r4, r4
 801aabc:	4620      	mov	r0, r4
 801aabe:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aac2:	bf00      	nop

0801aac4 <uxr_deserialize_ObjectVariant>:
 801aac4:	b570      	push	{r4, r5, r6, lr}
 801aac6:	4605      	mov	r5, r0
 801aac8:	460e      	mov	r6, r1
 801aaca:	f7f7 f907 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801aace:	b168      	cbz	r0, 801aaec <uxr_deserialize_ObjectVariant+0x28>
 801aad0:	7833      	ldrb	r3, [r6, #0]
 801aad2:	4604      	mov	r4, r0
 801aad4:	3b01      	subs	r3, #1
 801aad6:	2b0d      	cmp	r3, #13
 801aad8:	d809      	bhi.n	801aaee <uxr_deserialize_ObjectVariant+0x2a>
 801aada:	e8df f003 	tbb	[pc, r3]
 801aade:	0a41      	.short	0x0a41
 801aae0:	0a0a2323 	.word	0x0a0a2323
 801aae4:	10080a0a 	.word	0x10080a0a
 801aae8:	565c1010 	.word	0x565c1010
 801aaec:	2400      	movs	r4, #0
 801aaee:	4620      	mov	r0, r4
 801aaf0:	bd70      	pop	{r4, r5, r6, pc}
 801aaf2:	1d31      	adds	r1, r6, #4
 801aaf4:	4628      	mov	r0, r5
 801aaf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aafa:	f7ff bd21 	b.w	801a540 <uxr_deserialize_DATAWRITER_Representation>
 801aafe:	1d31      	adds	r1, r6, #4
 801ab00:	4628      	mov	r0, r5
 801ab02:	f7f7 f8eb 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801ab06:	2800      	cmp	r0, #0
 801ab08:	d0f0      	beq.n	801aaec <uxr_deserialize_ObjectVariant+0x28>
 801ab0a:	7933      	ldrb	r3, [r6, #4]
 801ab0c:	2b01      	cmp	r3, #1
 801ab0e:	d001      	beq.n	801ab14 <uxr_deserialize_ObjectVariant+0x50>
 801ab10:	2b02      	cmp	r3, #2
 801ab12:	d1ec      	bne.n	801aaee <uxr_deserialize_ObjectVariant+0x2a>
 801ab14:	68b1      	ldr	r1, [r6, #8]
 801ab16:	4628      	mov	r0, r5
 801ab18:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab20:	f003 bcda 	b.w	801e4d8 <ucdr_deserialize_string>
 801ab24:	1d31      	adds	r1, r6, #4
 801ab26:	4628      	mov	r0, r5
 801ab28:	f7f7 f8d8 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801ab2c:	4604      	mov	r4, r0
 801ab2e:	b170      	cbz	r0, 801ab4e <uxr_deserialize_ObjectVariant+0x8a>
 801ab30:	7933      	ldrb	r3, [r6, #4]
 801ab32:	2b02      	cmp	r3, #2
 801ab34:	d04c      	beq.n	801abd0 <uxr_deserialize_ObjectVariant+0x10c>
 801ab36:	2b03      	cmp	r3, #3
 801ab38:	d109      	bne.n	801ab4e <uxr_deserialize_ObjectVariant+0x8a>
 801ab3a:	f106 0308 	add.w	r3, r6, #8
 801ab3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab42:	f106 010c 	add.w	r1, r6, #12
 801ab46:	4628      	mov	r0, r5
 801ab48:	f7f8 fc3c 	bl	80133c4 <ucdr_deserialize_sequence_uint8_t>
 801ab4c:	4604      	mov	r4, r0
 801ab4e:	2202      	movs	r2, #2
 801ab50:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801ab54:	4628      	mov	r0, r5
 801ab56:	f7fc fddb 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801ab5a:	4020      	ands	r0, r4
 801ab5c:	b2c4      	uxtb	r4, r0
 801ab5e:	e7c6      	b.n	801aaee <uxr_deserialize_ObjectVariant+0x2a>
 801ab60:	1d31      	adds	r1, r6, #4
 801ab62:	4628      	mov	r0, r5
 801ab64:	f7f7 f8ba 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801ab68:	4604      	mov	r4, r0
 801ab6a:	b130      	cbz	r0, 801ab7a <uxr_deserialize_ObjectVariant+0xb6>
 801ab6c:	7933      	ldrb	r3, [r6, #4]
 801ab6e:	2b02      	cmp	r3, #2
 801ab70:	d036      	beq.n	801abe0 <uxr_deserialize_ObjectVariant+0x11c>
 801ab72:	2b03      	cmp	r3, #3
 801ab74:	d03c      	beq.n	801abf0 <uxr_deserialize_ObjectVariant+0x12c>
 801ab76:	2b01      	cmp	r3, #1
 801ab78:	d032      	beq.n	801abe0 <uxr_deserialize_ObjectVariant+0x11c>
 801ab7a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801ab7e:	4628      	mov	r0, r5
 801ab80:	f7f7 fe52 	bl	8012828 <ucdr_deserialize_int16_t>
 801ab84:	4020      	ands	r0, r4
 801ab86:	b2c4      	uxtb	r4, r0
 801ab88:	e7b1      	b.n	801aaee <uxr_deserialize_ObjectVariant+0x2a>
 801ab8a:	1d31      	adds	r1, r6, #4
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab92:	f7ff bb8b 	b.w	801a2ac <uxr_deserialize_CLIENT_Representation>
 801ab96:	2204      	movs	r2, #4
 801ab98:	4628      	mov	r0, r5
 801ab9a:	18b1      	adds	r1, r6, r2
 801ab9c:	f7fc fdb8 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801aba0:	4604      	mov	r4, r0
 801aba2:	2202      	movs	r2, #2
 801aba4:	f106 0108 	add.w	r1, r6, #8
 801aba8:	4628      	mov	r0, r5
 801abaa:	f7fc fdb1 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801abae:	4004      	ands	r4, r0
 801abb0:	2202      	movs	r2, #2
 801abb2:	f106 010a 	add.w	r1, r6, #10
 801abb6:	4628      	mov	r0, r5
 801abb8:	b2e4      	uxtb	r4, r4
 801abba:	f7fc fda9 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801abbe:	4603      	mov	r3, r0
 801abc0:	f106 010c 	add.w	r1, r6, #12
 801abc4:	4628      	mov	r0, r5
 801abc6:	401c      	ands	r4, r3
 801abc8:	f7f7 f85a 	bl	8011c80 <ucdr_deserialize_bool>
 801abcc:	4004      	ands	r4, r0
 801abce:	e78e      	b.n	801aaee <uxr_deserialize_ObjectVariant+0x2a>
 801abd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801abd4:	68b1      	ldr	r1, [r6, #8]
 801abd6:	4628      	mov	r0, r5
 801abd8:	f003 fc7e 	bl	801e4d8 <ucdr_deserialize_string>
 801abdc:	4604      	mov	r4, r0
 801abde:	e7b6      	b.n	801ab4e <uxr_deserialize_ObjectVariant+0x8a>
 801abe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801abe4:	68b1      	ldr	r1, [r6, #8]
 801abe6:	4628      	mov	r0, r5
 801abe8:	f003 fc76 	bl	801e4d8 <ucdr_deserialize_string>
 801abec:	4604      	mov	r4, r0
 801abee:	e7c4      	b.n	801ab7a <uxr_deserialize_ObjectVariant+0xb6>
 801abf0:	f106 0308 	add.w	r3, r6, #8
 801abf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801abf8:	f106 010c 	add.w	r1, r6, #12
 801abfc:	4628      	mov	r0, r5
 801abfe:	f7f8 fbe1 	bl	80133c4 <ucdr_deserialize_sequence_uint8_t>
 801ac02:	4604      	mov	r4, r0
 801ac04:	e7b9      	b.n	801ab7a <uxr_deserialize_ObjectVariant+0xb6>
 801ac06:	bf00      	nop

0801ac08 <uxr_deserialize_BaseObjectRequest>:
 801ac08:	b570      	push	{r4, r5, r6, lr}
 801ac0a:	2202      	movs	r2, #2
 801ac0c:	4605      	mov	r5, r0
 801ac0e:	460e      	mov	r6, r1
 801ac10:	f7fc fd7e 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801ac14:	2202      	movs	r2, #2
 801ac16:	4604      	mov	r4, r0
 801ac18:	4628      	mov	r0, r5
 801ac1a:	18b1      	adds	r1, r6, r2
 801ac1c:	f7fc fd78 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801ac20:	4020      	ands	r0, r4
 801ac22:	b2c0      	uxtb	r0, r0
 801ac24:	bd70      	pop	{r4, r5, r6, pc}
 801ac26:	bf00      	nop

0801ac28 <uxr_serialize_ActivityInfoVariant>:
 801ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac2c:	460e      	mov	r6, r1
 801ac2e:	7809      	ldrb	r1, [r1, #0]
 801ac30:	4680      	mov	r8, r0
 801ac32:	f7f7 f83d 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801ac36:	4607      	mov	r7, r0
 801ac38:	b138      	cbz	r0, 801ac4a <uxr_serialize_ActivityInfoVariant+0x22>
 801ac3a:	7833      	ldrb	r3, [r6, #0]
 801ac3c:	2b06      	cmp	r3, #6
 801ac3e:	f000 8081 	beq.w	801ad44 <uxr_serialize_ActivityInfoVariant+0x11c>
 801ac42:	2b0d      	cmp	r3, #13
 801ac44:	d014      	beq.n	801ac70 <uxr_serialize_ActivityInfoVariant+0x48>
 801ac46:	2b05      	cmp	r3, #5
 801ac48:	d002      	beq.n	801ac50 <uxr_serialize_ActivityInfoVariant+0x28>
 801ac4a:	4638      	mov	r0, r7
 801ac4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac50:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ac54:	4640      	mov	r0, r8
 801ac56:	f7f7 fd67 	bl	8012728 <ucdr_serialize_int16_t>
 801ac5a:	4607      	mov	r7, r0
 801ac5c:	4640      	mov	r0, r8
 801ac5e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801ac62:	f7f7 fc91 	bl	8012588 <ucdr_serialize_uint64_t>
 801ac66:	4038      	ands	r0, r7
 801ac68:	b2c7      	uxtb	r7, r0
 801ac6a:	4638      	mov	r0, r7
 801ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac70:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ac74:	4640      	mov	r0, r8
 801ac76:	f7f7 fd57 	bl	8012728 <ucdr_serialize_int16_t>
 801ac7a:	68f1      	ldr	r1, [r6, #12]
 801ac7c:	4607      	mov	r7, r0
 801ac7e:	4640      	mov	r0, r8
 801ac80:	f7f7 fa2c 	bl	80120dc <ucdr_serialize_uint32_t>
 801ac84:	68f3      	ldr	r3, [r6, #12]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d0ed      	beq.n	801ac66 <uxr_serialize_ActivityInfoVariant+0x3e>
 801ac8a:	b318      	cbz	r0, 801acd4 <uxr_serialize_ActivityInfoVariant+0xac>
 801ac8c:	f106 090c 	add.w	r9, r6, #12
 801ac90:	2400      	movs	r4, #0
 801ac92:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801ac96:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801ac9a:	7c29      	ldrb	r1, [r5, #16]
 801ac9c:	4640      	mov	r0, r8
 801ac9e:	f7f7 f807 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801aca2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801aca6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801acaa:	2800      	cmp	r0, #0
 801acac:	d051      	beq.n	801ad52 <uxr_serialize_ActivityInfoVariant+0x12a>
 801acae:	7c2b      	ldrb	r3, [r5, #16]
 801acb0:	00c9      	lsls	r1, r1, #3
 801acb2:	2b03      	cmp	r3, #3
 801acb4:	d854      	bhi.n	801ad60 <uxr_serialize_ActivityInfoVariant+0x138>
 801acb6:	e8df f003 	tbb	[pc, r3]
 801acba:	2133      	.short	0x2133
 801acbc:	020f      	.short	0x020f
 801acbe:	4449      	add	r1, r9
 801acc0:	4640      	mov	r0, r8
 801acc2:	6889      	ldr	r1, [r1, #8]
 801acc4:	f003 fbf8 	bl	801e4b8 <ucdr_serialize_string>
 801acc8:	3401      	adds	r4, #1
 801acca:	68f2      	ldr	r2, [r6, #12]
 801accc:	4294      	cmp	r4, r2
 801acce:	d244      	bcs.n	801ad5a <uxr_serialize_ActivityInfoVariant+0x132>
 801acd0:	2800      	cmp	r0, #0
 801acd2:	d1de      	bne.n	801ac92 <uxr_serialize_ActivityInfoVariant+0x6a>
 801acd4:	2700      	movs	r7, #0
 801acd6:	e7b8      	b.n	801ac4a <uxr_serialize_ActivityInfoVariant+0x22>
 801acd8:	3108      	adds	r1, #8
 801acda:	44a2      	add	sl, r4
 801acdc:	2210      	movs	r2, #16
 801acde:	4640      	mov	r0, r8
 801ace0:	4449      	add	r1, r9
 801ace2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ace6:	f7fc fcaf 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801acea:	4605      	mov	r5, r0
 801acec:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801acf0:	4640      	mov	r0, r8
 801acf2:	f7f7 f9f3 	bl	80120dc <ucdr_serialize_uint32_t>
 801acf6:	4028      	ands	r0, r5
 801acf8:	b2c0      	uxtb	r0, r0
 801acfa:	e7e5      	b.n	801acc8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801acfc:	3108      	adds	r1, #8
 801acfe:	44a2      	add	sl, r4
 801ad00:	2204      	movs	r2, #4
 801ad02:	4640      	mov	r0, r8
 801ad04:	4449      	add	r1, r9
 801ad06:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad0a:	f7fc fc9d 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801ad0e:	4605      	mov	r5, r0
 801ad10:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801ad14:	4640      	mov	r0, r8
 801ad16:	f7f6 fff7 	bl	8011d08 <ucdr_serialize_uint16_t>
 801ad1a:	4028      	ands	r0, r5
 801ad1c:	b2c0      	uxtb	r0, r0
 801ad1e:	e7d3      	b.n	801acc8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad20:	3108      	adds	r1, #8
 801ad22:	44a2      	add	sl, r4
 801ad24:	2202      	movs	r2, #2
 801ad26:	4640      	mov	r0, r8
 801ad28:	4449      	add	r1, r9
 801ad2a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad2e:	f7fc fc8b 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801ad32:	4605      	mov	r5, r0
 801ad34:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801ad38:	4640      	mov	r0, r8
 801ad3a:	f7f6 ffb9 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801ad3e:	4028      	ands	r0, r5
 801ad40:	b2c0      	uxtb	r0, r0
 801ad42:	e7c1      	b.n	801acc8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad44:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ad48:	4640      	mov	r0, r8
 801ad4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad4e:	f7f7 bceb 	b.w	8012728 <ucdr_serialize_int16_t>
 801ad52:	3401      	adds	r4, #1
 801ad54:	68f2      	ldr	r2, [r6, #12]
 801ad56:	42a2      	cmp	r2, r4
 801ad58:	d8bc      	bhi.n	801acd4 <uxr_serialize_ActivityInfoVariant+0xac>
 801ad5a:	4007      	ands	r7, r0
 801ad5c:	b2ff      	uxtb	r7, r7
 801ad5e:	e774      	b.n	801ac4a <uxr_serialize_ActivityInfoVariant+0x22>
 801ad60:	3401      	adds	r4, #1
 801ad62:	68f3      	ldr	r3, [r6, #12]
 801ad64:	3518      	adds	r5, #24
 801ad66:	429c      	cmp	r4, r3
 801ad68:	d397      	bcc.n	801ac9a <uxr_serialize_ActivityInfoVariant+0x72>
 801ad6a:	e76e      	b.n	801ac4a <uxr_serialize_ActivityInfoVariant+0x22>

0801ad6c <uxr_deserialize_BaseObjectReply>:
 801ad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad70:	2202      	movs	r2, #2
 801ad72:	4606      	mov	r6, r0
 801ad74:	460f      	mov	r7, r1
 801ad76:	f7fc fccb 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801ad7a:	2202      	movs	r2, #2
 801ad7c:	4605      	mov	r5, r0
 801ad7e:	4630      	mov	r0, r6
 801ad80:	18b9      	adds	r1, r7, r2
 801ad82:	f7fc fcc5 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801ad86:	4680      	mov	r8, r0
 801ad88:	1d39      	adds	r1, r7, #4
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	f7f6 ffa6 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801ad90:	ea05 0508 	and.w	r5, r5, r8
 801ad94:	4604      	mov	r4, r0
 801ad96:	1d79      	adds	r1, r7, #5
 801ad98:	4630      	mov	r0, r6
 801ad9a:	402c      	ands	r4, r5
 801ad9c:	f7f6 ff9e 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801ada0:	4020      	ands	r0, r4
 801ada2:	b2c0      	uxtb	r0, r0
 801ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ada8 <uxr_serialize_ReadSpecification>:
 801ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adaa:	460e      	mov	r6, r1
 801adac:	4607      	mov	r7, r0
 801adae:	7809      	ldrb	r1, [r1, #0]
 801adb0:	f7f6 ff7e 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801adb4:	4604      	mov	r4, r0
 801adb6:	7871      	ldrb	r1, [r6, #1]
 801adb8:	4638      	mov	r0, r7
 801adba:	f7f6 ff79 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801adbe:	4004      	ands	r4, r0
 801adc0:	78b1      	ldrb	r1, [r6, #2]
 801adc2:	4638      	mov	r0, r7
 801adc4:	f7f6 ff46 	bl	8011c54 <ucdr_serialize_bool>
 801adc8:	78b3      	ldrb	r3, [r6, #2]
 801adca:	b2e4      	uxtb	r4, r4
 801adcc:	4004      	ands	r4, r0
 801adce:	b943      	cbnz	r3, 801ade2 <uxr_serialize_ReadSpecification+0x3a>
 801add0:	7a31      	ldrb	r1, [r6, #8]
 801add2:	4638      	mov	r0, r7
 801add4:	f7f6 ff3e 	bl	8011c54 <ucdr_serialize_bool>
 801add8:	7a33      	ldrb	r3, [r6, #8]
 801adda:	4004      	ands	r4, r0
 801addc:	b93b      	cbnz	r3, 801adee <uxr_serialize_ReadSpecification+0x46>
 801adde:	4620      	mov	r0, r4
 801ade0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ade2:	6871      	ldr	r1, [r6, #4]
 801ade4:	4638      	mov	r0, r7
 801ade6:	f003 fb67 	bl	801e4b8 <ucdr_serialize_string>
 801adea:	4004      	ands	r4, r0
 801adec:	e7f0      	b.n	801add0 <uxr_serialize_ReadSpecification+0x28>
 801adee:	8971      	ldrh	r1, [r6, #10]
 801adf0:	4638      	mov	r0, r7
 801adf2:	f7f6 ff89 	bl	8011d08 <ucdr_serialize_uint16_t>
 801adf6:	4605      	mov	r5, r0
 801adf8:	89b1      	ldrh	r1, [r6, #12]
 801adfa:	4638      	mov	r0, r7
 801adfc:	f7f6 ff84 	bl	8011d08 <ucdr_serialize_uint16_t>
 801ae00:	4005      	ands	r5, r0
 801ae02:	89f1      	ldrh	r1, [r6, #14]
 801ae04:	4638      	mov	r0, r7
 801ae06:	b2ed      	uxtb	r5, r5
 801ae08:	f7f6 ff7e 	bl	8011d08 <ucdr_serialize_uint16_t>
 801ae0c:	8a31      	ldrh	r1, [r6, #16]
 801ae0e:	4025      	ands	r5, r4
 801ae10:	4604      	mov	r4, r0
 801ae12:	4638      	mov	r0, r7
 801ae14:	4025      	ands	r5, r4
 801ae16:	f7f6 ff77 	bl	8011d08 <ucdr_serialize_uint16_t>
 801ae1a:	ea00 0405 	and.w	r4, r0, r5
 801ae1e:	4620      	mov	r0, r4
 801ae20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae22:	bf00      	nop

0801ae24 <uxr_serialize_CREATE_CLIENT_Payload>:
 801ae24:	f7ff b9ea 	b.w	801a1fc <uxr_serialize_CLIENT_Representation>

0801ae28 <uxr_serialize_CREATE_Payload>:
 801ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae2a:	2202      	movs	r2, #2
 801ae2c:	4607      	mov	r7, r0
 801ae2e:	460e      	mov	r6, r1
 801ae30:	f7fc fc0a 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801ae34:	2202      	movs	r2, #2
 801ae36:	4605      	mov	r5, r0
 801ae38:	4638      	mov	r0, r7
 801ae3a:	18b1      	adds	r1, r6, r2
 801ae3c:	f7fc fc04 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801ae40:	7931      	ldrb	r1, [r6, #4]
 801ae42:	4604      	mov	r4, r0
 801ae44:	4638      	mov	r0, r7
 801ae46:	f7f6 ff33 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801ae4a:	b170      	cbz	r0, 801ae6a <uxr_serialize_CREATE_Payload+0x42>
 801ae4c:	7933      	ldrb	r3, [r6, #4]
 801ae4e:	402c      	ands	r4, r5
 801ae50:	3b01      	subs	r3, #1
 801ae52:	b2e4      	uxtb	r4, r4
 801ae54:	2b0d      	cmp	r3, #13
 801ae56:	d809      	bhi.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801ae58:	e8df f003 	tbb	[pc, r3]
 801ae5c:	23230a4c 	.word	0x23230a4c
 801ae60:	0a0a0a0a 	.word	0x0a0a0a0a
 801ae64:	12121208 	.word	0x12121208
 801ae68:	3e45      	.short	0x3e45
 801ae6a:	2400      	movs	r4, #0
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae70:	f106 0108 	add.w	r1, r6, #8
 801ae74:	4638      	mov	r0, r7
 801ae76:	f7ff fac7 	bl	801a408 <uxr_serialize_DATAWRITER_Representation>
 801ae7a:	4004      	ands	r4, r0
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae80:	7a31      	ldrb	r1, [r6, #8]
 801ae82:	4638      	mov	r0, r7
 801ae84:	f7f6 ff14 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d0ee      	beq.n	801ae6a <uxr_serialize_CREATE_Payload+0x42>
 801ae8c:	7a33      	ldrb	r3, [r6, #8]
 801ae8e:	2b01      	cmp	r3, #1
 801ae90:	d001      	beq.n	801ae96 <uxr_serialize_CREATE_Payload+0x6e>
 801ae92:	2b02      	cmp	r3, #2
 801ae94:	d1ea      	bne.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801ae96:	68f1      	ldr	r1, [r6, #12]
 801ae98:	4638      	mov	r0, r7
 801ae9a:	f003 fb0d 	bl	801e4b8 <ucdr_serialize_string>
 801ae9e:	4004      	ands	r4, r0
 801aea0:	e7e4      	b.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801aea2:	7a31      	ldrb	r1, [r6, #8]
 801aea4:	4638      	mov	r0, r7
 801aea6:	f7f6 ff03 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801aeaa:	4605      	mov	r5, r0
 801aeac:	b158      	cbz	r0, 801aec6 <uxr_serialize_CREATE_Payload+0x9e>
 801aeae:	7a33      	ldrb	r3, [r6, #8]
 801aeb0:	2b02      	cmp	r3, #2
 801aeb2:	d034      	beq.n	801af1e <uxr_serialize_CREATE_Payload+0xf6>
 801aeb4:	2b03      	cmp	r3, #3
 801aeb6:	d106      	bne.n	801aec6 <uxr_serialize_CREATE_Payload+0x9e>
 801aeb8:	68f2      	ldr	r2, [r6, #12]
 801aeba:	f106 0110 	add.w	r1, r6, #16
 801aebe:	4638      	mov	r0, r7
 801aec0:	f7f8 fa6e 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801aec4:	4605      	mov	r5, r0
 801aec6:	2202      	movs	r2, #2
 801aec8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801aecc:	4638      	mov	r0, r7
 801aece:	f7fc fbbb 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801aed2:	4028      	ands	r0, r5
 801aed4:	4004      	ands	r4, r0
 801aed6:	e7c9      	b.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801aed8:	f106 0108 	add.w	r1, r6, #8
 801aedc:	4638      	mov	r0, r7
 801aede:	f7ff f98d 	bl	801a1fc <uxr_serialize_CLIENT_Representation>
 801aee2:	4004      	ands	r4, r0
 801aee4:	e7c2      	b.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801aee6:	f106 0108 	add.w	r1, r6, #8
 801aeea:	4638      	mov	r0, r7
 801aeec:	f7ff fa42 	bl	801a374 <uxr_serialize_AGENT_Representation>
 801aef0:	4004      	ands	r4, r0
 801aef2:	e7bb      	b.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801aef4:	7a31      	ldrb	r1, [r6, #8]
 801aef6:	4638      	mov	r0, r7
 801aef8:	f7f6 feda 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801aefc:	4605      	mov	r5, r0
 801aefe:	b130      	cbz	r0, 801af0e <uxr_serialize_CREATE_Payload+0xe6>
 801af00:	7a33      	ldrb	r3, [r6, #8]
 801af02:	2b02      	cmp	r3, #2
 801af04:	d011      	beq.n	801af2a <uxr_serialize_CREATE_Payload+0x102>
 801af06:	2b03      	cmp	r3, #3
 801af08:	d015      	beq.n	801af36 <uxr_serialize_CREATE_Payload+0x10e>
 801af0a:	2b01      	cmp	r3, #1
 801af0c:	d00d      	beq.n	801af2a <uxr_serialize_CREATE_Payload+0x102>
 801af0e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801af12:	4638      	mov	r0, r7
 801af14:	f7f7 fc08 	bl	8012728 <ucdr_serialize_int16_t>
 801af18:	4028      	ands	r0, r5
 801af1a:	4004      	ands	r4, r0
 801af1c:	e7a6      	b.n	801ae6c <uxr_serialize_CREATE_Payload+0x44>
 801af1e:	68f1      	ldr	r1, [r6, #12]
 801af20:	4638      	mov	r0, r7
 801af22:	f003 fac9 	bl	801e4b8 <ucdr_serialize_string>
 801af26:	4605      	mov	r5, r0
 801af28:	e7cd      	b.n	801aec6 <uxr_serialize_CREATE_Payload+0x9e>
 801af2a:	68f1      	ldr	r1, [r6, #12]
 801af2c:	4638      	mov	r0, r7
 801af2e:	f003 fac3 	bl	801e4b8 <ucdr_serialize_string>
 801af32:	4605      	mov	r5, r0
 801af34:	e7eb      	b.n	801af0e <uxr_serialize_CREATE_Payload+0xe6>
 801af36:	68f2      	ldr	r2, [r6, #12]
 801af38:	f106 0110 	add.w	r1, r6, #16
 801af3c:	4638      	mov	r0, r7
 801af3e:	f7f8 fa2f 	bl	80133a0 <ucdr_serialize_sequence_uint8_t>
 801af42:	4605      	mov	r5, r0
 801af44:	e7e3      	b.n	801af0e <uxr_serialize_CREATE_Payload+0xe6>
 801af46:	bf00      	nop

0801af48 <uxr_deserialize_GET_INFO_Payload>:
 801af48:	b570      	push	{r4, r5, r6, lr}
 801af4a:	2202      	movs	r2, #2
 801af4c:	4605      	mov	r5, r0
 801af4e:	460e      	mov	r6, r1
 801af50:	f7fc fbde 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801af54:	2202      	movs	r2, #2
 801af56:	4604      	mov	r4, r0
 801af58:	4628      	mov	r0, r5
 801af5a:	18b1      	adds	r1, r6, r2
 801af5c:	f7fc fbd8 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801af60:	4603      	mov	r3, r0
 801af62:	1d31      	adds	r1, r6, #4
 801af64:	4628      	mov	r0, r5
 801af66:	401c      	ands	r4, r3
 801af68:	f7f7 f9e8 	bl	801233c <ucdr_deserialize_uint32_t>
 801af6c:	b2e4      	uxtb	r4, r4
 801af6e:	4020      	ands	r0, r4
 801af70:	bd70      	pop	{r4, r5, r6, pc}
 801af72:	bf00      	nop

0801af74 <uxr_serialize_DELETE_Payload>:
 801af74:	b570      	push	{r4, r5, r6, lr}
 801af76:	2202      	movs	r2, #2
 801af78:	4605      	mov	r5, r0
 801af7a:	460e      	mov	r6, r1
 801af7c:	f7fc fb64 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801af80:	2202      	movs	r2, #2
 801af82:	4604      	mov	r4, r0
 801af84:	4628      	mov	r0, r5
 801af86:	18b1      	adds	r1, r6, r2
 801af88:	f7fc fb5e 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801af8c:	4020      	ands	r0, r4
 801af8e:	b2c0      	uxtb	r0, r0
 801af90:	bd70      	pop	{r4, r5, r6, pc}
 801af92:	bf00      	nop

0801af94 <uxr_deserialize_STATUS_AGENT_Payload>:
 801af94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af98:	460e      	mov	r6, r1
 801af9a:	4605      	mov	r5, r0
 801af9c:	f7f6 fe9e 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801afa0:	4604      	mov	r4, r0
 801afa2:	1c71      	adds	r1, r6, #1
 801afa4:	4628      	mov	r0, r5
 801afa6:	f7f6 fe99 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801afaa:	2204      	movs	r2, #4
 801afac:	4681      	mov	r9, r0
 801afae:	4628      	mov	r0, r5
 801afb0:	18b1      	adds	r1, r6, r2
 801afb2:	f7fc fbad 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801afb6:	f106 0108 	add.w	r1, r6, #8
 801afba:	4680      	mov	r8, r0
 801afbc:	2202      	movs	r2, #2
 801afbe:	4628      	mov	r0, r5
 801afc0:	f7fc fba6 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801afc4:	ea04 0309 	and.w	r3, r4, r9
 801afc8:	4607      	mov	r7, r0
 801afca:	2202      	movs	r2, #2
 801afcc:	b2db      	uxtb	r3, r3
 801afce:	f106 010a 	add.w	r1, r6, #10
 801afd2:	4628      	mov	r0, r5
 801afd4:	ea03 0408 	and.w	r4, r3, r8
 801afd8:	f7fc fb9a 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801afdc:	4603      	mov	r3, r0
 801afde:	4628      	mov	r0, r5
 801afe0:	403c      	ands	r4, r7
 801afe2:	f106 010c 	add.w	r1, r6, #12
 801afe6:	461d      	mov	r5, r3
 801afe8:	f7f6 fe4a 	bl	8011c80 <ucdr_deserialize_bool>
 801afec:	4025      	ands	r5, r4
 801afee:	4028      	ands	r0, r5
 801aff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801aff4 <uxr_deserialize_STATUS_Payload>:
 801aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff8:	2202      	movs	r2, #2
 801affa:	4606      	mov	r6, r0
 801affc:	460f      	mov	r7, r1
 801affe:	f7fc fb87 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801b002:	2202      	movs	r2, #2
 801b004:	4605      	mov	r5, r0
 801b006:	4630      	mov	r0, r6
 801b008:	18b9      	adds	r1, r7, r2
 801b00a:	f7fc fb81 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801b00e:	4680      	mov	r8, r0
 801b010:	1d39      	adds	r1, r7, #4
 801b012:	4630      	mov	r0, r6
 801b014:	f7f6 fe62 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801b018:	ea05 0508 	and.w	r5, r5, r8
 801b01c:	4604      	mov	r4, r0
 801b01e:	1d79      	adds	r1, r7, #5
 801b020:	4630      	mov	r0, r6
 801b022:	402c      	ands	r4, r5
 801b024:	f7f6 fe5a 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801b028:	4020      	ands	r0, r4
 801b02a:	b2c0      	uxtb	r0, r0
 801b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b030 <uxr_serialize_INFO_Payload>:
 801b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b034:	2202      	movs	r2, #2
 801b036:	460c      	mov	r4, r1
 801b038:	4605      	mov	r5, r0
 801b03a:	f7fc fb05 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b03e:	2202      	movs	r2, #2
 801b040:	4680      	mov	r8, r0
 801b042:	4628      	mov	r0, r5
 801b044:	18a1      	adds	r1, r4, r2
 801b046:	f7fc faff 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b04a:	4607      	mov	r7, r0
 801b04c:	7921      	ldrb	r1, [r4, #4]
 801b04e:	4628      	mov	r0, r5
 801b050:	f7f6 fe2e 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801b054:	ea08 0807 	and.w	r8, r8, r7
 801b058:	4606      	mov	r6, r0
 801b05a:	7961      	ldrb	r1, [r4, #5]
 801b05c:	4628      	mov	r0, r5
 801b05e:	ea06 0608 	and.w	r6, r6, r8
 801b062:	f7f6 fe25 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801b066:	7a21      	ldrb	r1, [r4, #8]
 801b068:	4030      	ands	r0, r6
 801b06a:	b2c7      	uxtb	r7, r0
 801b06c:	4628      	mov	r0, r5
 801b06e:	f7f6 fdf1 	bl	8011c54 <ucdr_serialize_bool>
 801b072:	7a23      	ldrb	r3, [r4, #8]
 801b074:	4606      	mov	r6, r0
 801b076:	b96b      	cbnz	r3, 801b094 <uxr_serialize_INFO_Payload+0x64>
 801b078:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b07c:	4628      	mov	r0, r5
 801b07e:	f7f6 fde9 	bl	8011c54 <ucdr_serialize_bool>
 801b082:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b086:	4030      	ands	r0, r6
 801b088:	b2c6      	uxtb	r6, r0
 801b08a:	b983      	cbnz	r3, 801b0ae <uxr_serialize_INFO_Payload+0x7e>
 801b08c:	ea06 0007 	and.w	r0, r6, r7
 801b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b094:	7b21      	ldrb	r1, [r4, #12]
 801b096:	4628      	mov	r0, r5
 801b098:	f7f6 fe0a 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801b09c:	b188      	cbz	r0, 801b0c2 <uxr_serialize_INFO_Payload+0x92>
 801b09e:	f104 010c 	add.w	r1, r4, #12
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	f7ff f9d8 	bl	801a458 <uxr_serialize_ObjectVariant.part.0>
 801b0a8:	4030      	ands	r0, r6
 801b0aa:	b2c6      	uxtb	r6, r0
 801b0ac:	e7e4      	b.n	801b078 <uxr_serialize_INFO_Payload+0x48>
 801b0ae:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b0b2:	4628      	mov	r0, r5
 801b0b4:	f7ff fdb8 	bl	801ac28 <uxr_serialize_ActivityInfoVariant>
 801b0b8:	4006      	ands	r6, r0
 801b0ba:	ea06 0007 	and.w	r0, r6, r7
 801b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0c2:	4606      	mov	r6, r0
 801b0c4:	e7d8      	b.n	801b078 <uxr_serialize_INFO_Payload+0x48>
 801b0c6:	bf00      	nop

0801b0c8 <uxr_serialize_READ_DATA_Payload>:
 801b0c8:	b570      	push	{r4, r5, r6, lr}
 801b0ca:	2202      	movs	r2, #2
 801b0cc:	4605      	mov	r5, r0
 801b0ce:	460e      	mov	r6, r1
 801b0d0:	f7fc faba 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b0d4:	2202      	movs	r2, #2
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	4628      	mov	r0, r5
 801b0da:	18b1      	adds	r1, r6, r2
 801b0dc:	f7fc fab4 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	1d31      	adds	r1, r6, #4
 801b0e4:	4628      	mov	r0, r5
 801b0e6:	401c      	ands	r4, r3
 801b0e8:	f7ff fe5e 	bl	801ada8 <uxr_serialize_ReadSpecification>
 801b0ec:	b2e4      	uxtb	r4, r4
 801b0ee:	4020      	ands	r0, r4
 801b0f0:	bd70      	pop	{r4, r5, r6, pc}
 801b0f2:	bf00      	nop

0801b0f4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b0f4:	b570      	push	{r4, r5, r6, lr}
 801b0f6:	2202      	movs	r2, #2
 801b0f8:	4605      	mov	r5, r0
 801b0fa:	460e      	mov	r6, r1
 801b0fc:	f7fc faa4 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b100:	2202      	movs	r2, #2
 801b102:	4604      	mov	r4, r0
 801b104:	4628      	mov	r0, r5
 801b106:	18b1      	adds	r1, r6, r2
 801b108:	f7fc fa9e 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b10c:	4020      	ands	r0, r4
 801b10e:	b2c0      	uxtb	r0, r0
 801b110:	bd70      	pop	{r4, r5, r6, pc}
 801b112:	bf00      	nop

0801b114 <uxr_serialize_ACKNACK_Payload>:
 801b114:	b570      	push	{r4, r5, r6, lr}
 801b116:	460c      	mov	r4, r1
 801b118:	4605      	mov	r5, r0
 801b11a:	460e      	mov	r6, r1
 801b11c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b120:	f7f6 fdf2 	bl	8011d08 <ucdr_serialize_uint16_t>
 801b124:	2202      	movs	r2, #2
 801b126:	4621      	mov	r1, r4
 801b128:	4604      	mov	r4, r0
 801b12a:	4628      	mov	r0, r5
 801b12c:	f7fc fa8c 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b130:	4603      	mov	r3, r0
 801b132:	7931      	ldrb	r1, [r6, #4]
 801b134:	4628      	mov	r0, r5
 801b136:	401c      	ands	r4, r3
 801b138:	f7f6 fdba 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801b13c:	b2e4      	uxtb	r4, r4
 801b13e:	4020      	ands	r0, r4
 801b140:	bd70      	pop	{r4, r5, r6, pc}
 801b142:	bf00      	nop

0801b144 <uxr_deserialize_ACKNACK_Payload>:
 801b144:	b570      	push	{r4, r5, r6, lr}
 801b146:	460e      	mov	r6, r1
 801b148:	4605      	mov	r5, r0
 801b14a:	f7f6 fedd 	bl	8011f08 <ucdr_deserialize_uint16_t>
 801b14e:	2202      	movs	r2, #2
 801b150:	4604      	mov	r4, r0
 801b152:	4628      	mov	r0, r5
 801b154:	18b1      	adds	r1, r6, r2
 801b156:	f7fc fadb 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801b15a:	4603      	mov	r3, r0
 801b15c:	1d31      	adds	r1, r6, #4
 801b15e:	4628      	mov	r0, r5
 801b160:	401c      	ands	r4, r3
 801b162:	f7f6 fdbb 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801b166:	b2e4      	uxtb	r4, r4
 801b168:	4020      	ands	r0, r4
 801b16a:	bd70      	pop	{r4, r5, r6, pc}

0801b16c <uxr_serialize_HEARTBEAT_Payload>:
 801b16c:	b570      	push	{r4, r5, r6, lr}
 801b16e:	460d      	mov	r5, r1
 801b170:	4606      	mov	r6, r0
 801b172:	8809      	ldrh	r1, [r1, #0]
 801b174:	f7f6 fdc8 	bl	8011d08 <ucdr_serialize_uint16_t>
 801b178:	8869      	ldrh	r1, [r5, #2]
 801b17a:	4604      	mov	r4, r0
 801b17c:	4630      	mov	r0, r6
 801b17e:	f7f6 fdc3 	bl	8011d08 <ucdr_serialize_uint16_t>
 801b182:	4603      	mov	r3, r0
 801b184:	7929      	ldrb	r1, [r5, #4]
 801b186:	4630      	mov	r0, r6
 801b188:	401c      	ands	r4, r3
 801b18a:	f7f6 fd91 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801b18e:	b2e4      	uxtb	r4, r4
 801b190:	4020      	ands	r0, r4
 801b192:	bd70      	pop	{r4, r5, r6, pc}

0801b194 <uxr_deserialize_HEARTBEAT_Payload>:
 801b194:	b570      	push	{r4, r5, r6, lr}
 801b196:	460e      	mov	r6, r1
 801b198:	4605      	mov	r5, r0
 801b19a:	f7f6 feb5 	bl	8011f08 <ucdr_deserialize_uint16_t>
 801b19e:	4604      	mov	r4, r0
 801b1a0:	1cb1      	adds	r1, r6, #2
 801b1a2:	4628      	mov	r0, r5
 801b1a4:	f7f6 feb0 	bl	8011f08 <ucdr_deserialize_uint16_t>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	1d31      	adds	r1, r6, #4
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	401c      	ands	r4, r3
 801b1b0:	f7f6 fd94 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801b1b4:	b2e4      	uxtb	r4, r4
 801b1b6:	4020      	ands	r0, r4
 801b1b8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ba:	bf00      	nop

0801b1bc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1c0:	460e      	mov	r6, r1
 801b1c2:	4605      	mov	r5, r0
 801b1c4:	f7f7 fc3c 	bl	8012a40 <ucdr_deserialize_int32_t>
 801b1c8:	4607      	mov	r7, r0
 801b1ca:	1d31      	adds	r1, r6, #4
 801b1cc:	4628      	mov	r0, r5
 801b1ce:	f7f7 f8b5 	bl	801233c <ucdr_deserialize_uint32_t>
 801b1d2:	4680      	mov	r8, r0
 801b1d4:	f106 0108 	add.w	r1, r6, #8
 801b1d8:	4628      	mov	r0, r5
 801b1da:	f7f7 fc31 	bl	8012a40 <ucdr_deserialize_int32_t>
 801b1de:	ea07 0708 	and.w	r7, r7, r8
 801b1e2:	4604      	mov	r4, r0
 801b1e4:	f106 010c 	add.w	r1, r6, #12
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	403c      	ands	r4, r7
 801b1ec:	f7f7 f8a6 	bl	801233c <ucdr_deserialize_uint32_t>
 801b1f0:	f106 0110 	add.w	r1, r6, #16
 801b1f4:	4004      	ands	r4, r0
 801b1f6:	4628      	mov	r0, r5
 801b1f8:	f7f7 fc22 	bl	8012a40 <ucdr_deserialize_int32_t>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	b2e4      	uxtb	r4, r4
 801b200:	4628      	mov	r0, r5
 801b202:	461d      	mov	r5, r3
 801b204:	f106 0114 	add.w	r1, r6, #20
 801b208:	f7f7 f898 	bl	801233c <ucdr_deserialize_uint32_t>
 801b20c:	402c      	ands	r4, r5
 801b20e:	4020      	ands	r0, r4
 801b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b214 <uxr_serialize_SampleIdentity>:
 801b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b218:	4604      	mov	r4, r0
 801b21a:	460d      	mov	r5, r1
 801b21c:	220c      	movs	r2, #12
 801b21e:	f7fc fa13 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b222:	2203      	movs	r2, #3
 801b224:	f105 010c 	add.w	r1, r5, #12
 801b228:	4607      	mov	r7, r0
 801b22a:	4620      	mov	r0, r4
 801b22c:	f7fc fa0c 	bl	8017648 <ucdr_serialize_array_uint8_t>
 801b230:	7be9      	ldrb	r1, [r5, #15]
 801b232:	4680      	mov	r8, r0
 801b234:	4620      	mov	r0, r4
 801b236:	f7f6 fd3b 	bl	8011cb0 <ucdr_serialize_uint8_t>
 801b23a:	6929      	ldr	r1, [r5, #16]
 801b23c:	4606      	mov	r6, r0
 801b23e:	4620      	mov	r0, r4
 801b240:	f7f7 fb66 	bl	8012910 <ucdr_serialize_int32_t>
 801b244:	ea07 0708 	and.w	r7, r7, r8
 801b248:	4603      	mov	r3, r0
 801b24a:	4620      	mov	r0, r4
 801b24c:	403e      	ands	r6, r7
 801b24e:	6969      	ldr	r1, [r5, #20]
 801b250:	461c      	mov	r4, r3
 801b252:	f7f6 ff43 	bl	80120dc <ucdr_serialize_uint32_t>
 801b256:	4034      	ands	r4, r6
 801b258:	4020      	ands	r0, r4
 801b25a:	b2c0      	uxtb	r0, r0
 801b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b260 <uxr_deserialize_SampleIdentity>:
 801b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b264:	4604      	mov	r4, r0
 801b266:	460d      	mov	r5, r1
 801b268:	220c      	movs	r2, #12
 801b26a:	f7fc fa51 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801b26e:	2203      	movs	r2, #3
 801b270:	f105 010c 	add.w	r1, r5, #12
 801b274:	4607      	mov	r7, r0
 801b276:	4620      	mov	r0, r4
 801b278:	f7fc fa4a 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801b27c:	f105 010f 	add.w	r1, r5, #15
 801b280:	4680      	mov	r8, r0
 801b282:	4620      	mov	r0, r4
 801b284:	f7f6 fd2a 	bl	8011cdc <ucdr_deserialize_uint8_t>
 801b288:	f105 0110 	add.w	r1, r5, #16
 801b28c:	4606      	mov	r6, r0
 801b28e:	4620      	mov	r0, r4
 801b290:	f7f7 fbd6 	bl	8012a40 <ucdr_deserialize_int32_t>
 801b294:	ea07 0708 	and.w	r7, r7, r8
 801b298:	4603      	mov	r3, r0
 801b29a:	4620      	mov	r0, r4
 801b29c:	403e      	ands	r6, r7
 801b29e:	f105 0114 	add.w	r1, r5, #20
 801b2a2:	461c      	mov	r4, r3
 801b2a4:	f7f7 f84a 	bl	801233c <ucdr_deserialize_uint32_t>
 801b2a8:	4034      	ands	r4, r6
 801b2aa:	4020      	ands	r0, r4
 801b2ac:	b2c0      	uxtb	r0, r0
 801b2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b2:	bf00      	nop

0801b2b4 <rcl_client_get_rmw_handle>:
 801b2b4:	b118      	cbz	r0, 801b2be <rcl_client_get_rmw_handle+0xa>
 801b2b6:	6800      	ldr	r0, [r0, #0]
 801b2b8:	b108      	cbz	r0, 801b2be <rcl_client_get_rmw_handle+0xa>
 801b2ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b2be:	4770      	bx	lr

0801b2c0 <rcl_send_request>:
 801b2c0:	b570      	push	{r4, r5, r6, lr}
 801b2c2:	b082      	sub	sp, #8
 801b2c4:	b1f8      	cbz	r0, 801b306 <rcl_send_request+0x46>
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	6800      	ldr	r0, [r0, #0]
 801b2ca:	b1e0      	cbz	r0, 801b306 <rcl_send_request+0x46>
 801b2cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b2d0:	b1cb      	cbz	r3, 801b306 <rcl_send_request+0x46>
 801b2d2:	460e      	mov	r6, r1
 801b2d4:	b1e1      	cbz	r1, 801b310 <rcl_send_request+0x50>
 801b2d6:	4615      	mov	r5, r2
 801b2d8:	b1d2      	cbz	r2, 801b310 <rcl_send_request+0x50>
 801b2da:	2105      	movs	r1, #5
 801b2dc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b2e0:	f002 fa2e 	bl	801d740 <__atomic_load_8>
 801b2e4:	4602      	mov	r2, r0
 801b2e6:	460b      	mov	r3, r1
 801b2e8:	4631      	mov	r1, r6
 801b2ea:	e9c5 2300 	strd	r2, r3, [r5]
 801b2ee:	6823      	ldr	r3, [r4, #0]
 801b2f0:	462a      	mov	r2, r5
 801b2f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b2f6:	f7fa fefb 	bl	80160f0 <rmw_send_request>
 801b2fa:	4606      	mov	r6, r0
 801b2fc:	b160      	cbz	r0, 801b318 <rcl_send_request+0x58>
 801b2fe:	2601      	movs	r6, #1
 801b300:	4630      	mov	r0, r6
 801b302:	b002      	add	sp, #8
 801b304:	bd70      	pop	{r4, r5, r6, pc}
 801b306:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b30a:	4630      	mov	r0, r6
 801b30c:	b002      	add	sp, #8
 801b30e:	bd70      	pop	{r4, r5, r6, pc}
 801b310:	260b      	movs	r6, #11
 801b312:	4630      	mov	r0, r6
 801b314:	b002      	add	sp, #8
 801b316:	bd70      	pop	{r4, r5, r6, pc}
 801b318:	6820      	ldr	r0, [r4, #0]
 801b31a:	2105      	movs	r1, #5
 801b31c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b320:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b324:	9100      	str	r1, [sp, #0]
 801b326:	f002 fa77 	bl	801d818 <__atomic_exchange_8>
 801b32a:	4630      	mov	r0, r6
 801b32c:	b002      	add	sp, #8
 801b32e:	bd70      	pop	{r4, r5, r6, pc}

0801b330 <rcl_take_response>:
 801b330:	b570      	push	{r4, r5, r6, lr}
 801b332:	468e      	mov	lr, r1
 801b334:	b08c      	sub	sp, #48	; 0x30
 801b336:	460c      	mov	r4, r1
 801b338:	4616      	mov	r6, r2
 801b33a:	f10d 0c18 	add.w	ip, sp, #24
 801b33e:	4605      	mov	r5, r0
 801b340:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b344:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b348:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b34c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b350:	b35d      	cbz	r5, 801b3aa <rcl_take_response+0x7a>
 801b352:	682b      	ldr	r3, [r5, #0]
 801b354:	b34b      	cbz	r3, 801b3aa <rcl_take_response+0x7a>
 801b356:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b35a:	b330      	cbz	r0, 801b3aa <rcl_take_response+0x7a>
 801b35c:	b346      	cbz	r6, 801b3b0 <rcl_take_response+0x80>
 801b35e:	2300      	movs	r3, #0
 801b360:	4632      	mov	r2, r6
 801b362:	a902      	add	r1, sp, #8
 801b364:	f88d 3007 	strb.w	r3, [sp, #7]
 801b368:	f10d 0307 	add.w	r3, sp, #7
 801b36c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b3b8 <rcl_take_response+0x88>
 801b370:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b374:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b378:	f7fa ffc2 	bl	8016300 <rmw_take_response>
 801b37c:	4605      	mov	r5, r0
 801b37e:	b9c8      	cbnz	r0, 801b3b4 <rcl_take_response+0x84>
 801b380:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b384:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b388:	2a00      	cmp	r2, #0
 801b38a:	bf08      	it	eq
 801b38c:	461d      	moveq	r5, r3
 801b38e:	f10d 0e18 	add.w	lr, sp, #24
 801b392:	46a4      	mov	ip, r4
 801b394:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b39c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b3a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b3a4:	4628      	mov	r0, r5
 801b3a6:	b00c      	add	sp, #48	; 0x30
 801b3a8:	bd70      	pop	{r4, r5, r6, pc}
 801b3aa:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b3ae:	e7ee      	b.n	801b38e <rcl_take_response+0x5e>
 801b3b0:	250b      	movs	r5, #11
 801b3b2:	e7ec      	b.n	801b38e <rcl_take_response+0x5e>
 801b3b4:	2501      	movs	r5, #1
 801b3b6:	e7ea      	b.n	801b38e <rcl_take_response+0x5e>
	...

0801b3c0 <rcl_client_is_valid>:
 801b3c0:	b130      	cbz	r0, 801b3d0 <rcl_client_is_valid+0x10>
 801b3c2:	6800      	ldr	r0, [r0, #0]
 801b3c4:	b120      	cbz	r0, 801b3d0 <rcl_client_is_valid+0x10>
 801b3c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b3ca:	3800      	subs	r0, #0
 801b3cc:	bf18      	it	ne
 801b3ce:	2001      	movne	r0, #1
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop

0801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801b3d4:	280b      	cmp	r0, #11
 801b3d6:	dc0d      	bgt.n	801b3f4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	db09      	blt.n	801b3f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b3dc:	280b      	cmp	r0, #11
 801b3de:	d807      	bhi.n	801b3f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b3e0:	e8df f000 	tbb	[pc, r0]
 801b3e4:	07060607 	.word	0x07060607
 801b3e8:	06060606 	.word	0x06060606
 801b3ec:	07070606 	.word	0x07070606
 801b3f0:	2001      	movs	r0, #1
 801b3f2:	4770      	bx	lr
 801b3f4:	28cb      	cmp	r0, #203	; 0xcb
 801b3f6:	bf18      	it	ne
 801b3f8:	2001      	movne	r0, #1
 801b3fa:	4770      	bx	lr

0801b3fc <rcl_get_zero_initialized_context>:
 801b3fc:	4a03      	ldr	r2, [pc, #12]	; (801b40c <rcl_get_zero_initialized_context+0x10>)
 801b3fe:	4603      	mov	r3, r0
 801b400:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b404:	e883 0003 	stmia.w	r3, {r0, r1}
 801b408:	4618      	mov	r0, r3
 801b40a:	4770      	bx	lr
 801b40c:	08025804 	.word	0x08025804

0801b410 <rcl_context_is_valid>:
 801b410:	b118      	cbz	r0, 801b41a <rcl_context_is_valid+0xa>
 801b412:	6840      	ldr	r0, [r0, #4]
 801b414:	3800      	subs	r0, #0
 801b416:	bf18      	it	ne
 801b418:	2001      	movne	r0, #1
 801b41a:	4770      	bx	lr

0801b41c <__cleanup_context>:
 801b41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b420:	4606      	mov	r6, r0
 801b422:	2300      	movs	r3, #0
 801b424:	6800      	ldr	r0, [r0, #0]
 801b426:	6073      	str	r3, [r6, #4]
 801b428:	2800      	cmp	r0, #0
 801b42a:	d049      	beq.n	801b4c0 <__cleanup_context+0xa4>
 801b42c:	6947      	ldr	r7, [r0, #20]
 801b42e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b432:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b436:	b137      	cbz	r7, 801b446 <__cleanup_context+0x2a>
 801b438:	3014      	adds	r0, #20
 801b43a:	f7f8 f845 	bl	80134c8 <rcl_init_options_fini>
 801b43e:	4607      	mov	r7, r0
 801b440:	2800      	cmp	r0, #0
 801b442:	d144      	bne.n	801b4ce <__cleanup_context+0xb2>
 801b444:	6830      	ldr	r0, [r6, #0]
 801b446:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b448:	b143      	cbz	r3, 801b45c <__cleanup_context+0x40>
 801b44a:	3028      	adds	r0, #40	; 0x28
 801b44c:	f7fa fb58 	bl	8015b00 <rmw_context_fini>
 801b450:	b118      	cbz	r0, 801b45a <__cleanup_context+0x3e>
 801b452:	2f00      	cmp	r7, #0
 801b454:	d03e      	beq.n	801b4d4 <__cleanup_context+0xb8>
 801b456:	f7f9 fe17 	bl	8015088 <rcutils_reset_error>
 801b45a:	6830      	ldr	r0, [r6, #0]
 801b45c:	6a03      	ldr	r3, [r0, #32]
 801b45e:	b1db      	cbz	r3, 801b498 <__cleanup_context+0x7c>
 801b460:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b464:	2a01      	cmp	r2, #1
 801b466:	f17c 0100 	sbcs.w	r1, ip, #0
 801b46a:	db11      	blt.n	801b490 <__cleanup_context+0x74>
 801b46c:	2400      	movs	r4, #0
 801b46e:	4625      	mov	r5, r4
 801b470:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b474:	4649      	mov	r1, r9
 801b476:	b1b8      	cbz	r0, 801b4a8 <__cleanup_context+0x8c>
 801b478:	47c0      	blx	r8
 801b47a:	6833      	ldr	r3, [r6, #0]
 801b47c:	3401      	adds	r4, #1
 801b47e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b482:	f145 0500 	adc.w	r5, r5, #0
 801b486:	6a1b      	ldr	r3, [r3, #32]
 801b488:	4294      	cmp	r4, r2
 801b48a:	eb75 010c 	sbcs.w	r1, r5, ip
 801b48e:	dbef      	blt.n	801b470 <__cleanup_context+0x54>
 801b490:	4618      	mov	r0, r3
 801b492:	4649      	mov	r1, r9
 801b494:	47c0      	blx	r8
 801b496:	6830      	ldr	r0, [r6, #0]
 801b498:	4649      	mov	r1, r9
 801b49a:	47c0      	blx	r8
 801b49c:	2300      	movs	r3, #0
 801b49e:	4638      	mov	r0, r7
 801b4a0:	e9c6 3300 	strd	r3, r3, [r6]
 801b4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4a8:	3401      	adds	r4, #1
 801b4aa:	f145 0500 	adc.w	r5, r5, #0
 801b4ae:	4294      	cmp	r4, r2
 801b4b0:	eb75 010c 	sbcs.w	r1, r5, ip
 801b4b4:	dbdc      	blt.n	801b470 <__cleanup_context+0x54>
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	4649      	mov	r1, r9
 801b4ba:	47c0      	blx	r8
 801b4bc:	6830      	ldr	r0, [r6, #0]
 801b4be:	e7eb      	b.n	801b498 <__cleanup_context+0x7c>
 801b4c0:	4607      	mov	r7, r0
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	4638      	mov	r0, r7
 801b4c6:	e9c6 3300 	strd	r3, r3, [r6]
 801b4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4ce:	f7f9 fddb 	bl	8015088 <rcutils_reset_error>
 801b4d2:	e7b7      	b.n	801b444 <__cleanup_context+0x28>
 801b4d4:	f7ff ff7e 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b4d8:	4607      	mov	r7, r0
 801b4da:	e7bc      	b.n	801b456 <__cleanup_context+0x3a>

0801b4dc <rcl_get_zero_initialized_guard_condition>:
 801b4dc:	4a03      	ldr	r2, [pc, #12]	; (801b4ec <rcl_get_zero_initialized_guard_condition+0x10>)
 801b4de:	4603      	mov	r3, r0
 801b4e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b4e4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	4770      	bx	lr
 801b4ec:	0802580c 	.word	0x0802580c

0801b4f0 <rcl_guard_condition_init_from_rmw>:
 801b4f0:	b082      	sub	sp, #8
 801b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4f6:	b086      	sub	sp, #24
 801b4f8:	4604      	mov	r4, r0
 801b4fa:	460e      	mov	r6, r1
 801b4fc:	4615      	mov	r5, r2
 801b4fe:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b502:	f10d 0e04 	add.w	lr, sp, #4
 801b506:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b50a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b50e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b512:	f8dc 3000 	ldr.w	r3, [ip]
 801b516:	a801      	add	r0, sp, #4
 801b518:	f8ce 3000 	str.w	r3, [lr]
 801b51c:	f7f9 fd76 	bl	801500c <rcutils_allocator_is_valid>
 801b520:	f080 0301 	eor.w	r3, r0, #1
 801b524:	b2db      	uxtb	r3, r3
 801b526:	bb3b      	cbnz	r3, 801b578 <rcl_guard_condition_init_from_rmw+0x88>
 801b528:	b334      	cbz	r4, 801b578 <rcl_guard_condition_init_from_rmw+0x88>
 801b52a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b52e:	f1b8 0f00 	cmp.w	r8, #0
 801b532:	d11a      	bne.n	801b56a <rcl_guard_condition_init_from_rmw+0x7a>
 801b534:	b305      	cbz	r5, 801b578 <rcl_guard_condition_init_from_rmw+0x88>
 801b536:	4628      	mov	r0, r5
 801b538:	f7ff ff6a 	bl	801b410 <rcl_context_is_valid>
 801b53c:	b1f0      	cbz	r0, 801b57c <rcl_guard_condition_init_from_rmw+0x8c>
 801b53e:	9b01      	ldr	r3, [sp, #4]
 801b540:	201c      	movs	r0, #28
 801b542:	9905      	ldr	r1, [sp, #20]
 801b544:	4798      	blx	r3
 801b546:	4607      	mov	r7, r0
 801b548:	6060      	str	r0, [r4, #4]
 801b54a:	b320      	cbz	r0, 801b596 <rcl_guard_condition_init_from_rmw+0xa6>
 801b54c:	b1c6      	cbz	r6, 801b580 <rcl_guard_condition_init_from_rmw+0x90>
 801b54e:	6006      	str	r6, [r0, #0]
 801b550:	f880 8004 	strb.w	r8, [r0, #4]
 801b554:	ac01      	add	r4, sp, #4
 801b556:	f107 0c08 	add.w	ip, r7, #8
 801b55a:	2500      	movs	r5, #0
 801b55c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b55e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b562:	6823      	ldr	r3, [r4, #0]
 801b564:	f8cc 3000 	str.w	r3, [ip]
 801b568:	e000      	b.n	801b56c <rcl_guard_condition_init_from_rmw+0x7c>
 801b56a:	2564      	movs	r5, #100	; 0x64
 801b56c:	4628      	mov	r0, r5
 801b56e:	b006      	add	sp, #24
 801b570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b574:	b002      	add	sp, #8
 801b576:	4770      	bx	lr
 801b578:	250b      	movs	r5, #11
 801b57a:	e7f7      	b.n	801b56c <rcl_guard_condition_init_from_rmw+0x7c>
 801b57c:	2565      	movs	r5, #101	; 0x65
 801b57e:	e7f5      	b.n	801b56c <rcl_guard_condition_init_from_rmw+0x7c>
 801b580:	6828      	ldr	r0, [r5, #0]
 801b582:	3028      	adds	r0, #40	; 0x28
 801b584:	f002 fd56 	bl	801e034 <rmw_create_guard_condition>
 801b588:	6038      	str	r0, [r7, #0]
 801b58a:	6867      	ldr	r7, [r4, #4]
 801b58c:	683e      	ldr	r6, [r7, #0]
 801b58e:	b126      	cbz	r6, 801b59a <rcl_guard_condition_init_from_rmw+0xaa>
 801b590:	2301      	movs	r3, #1
 801b592:	713b      	strb	r3, [r7, #4]
 801b594:	e7de      	b.n	801b554 <rcl_guard_condition_init_from_rmw+0x64>
 801b596:	250a      	movs	r5, #10
 801b598:	e7e8      	b.n	801b56c <rcl_guard_condition_init_from_rmw+0x7c>
 801b59a:	9b02      	ldr	r3, [sp, #8]
 801b59c:	4638      	mov	r0, r7
 801b59e:	9905      	ldr	r1, [sp, #20]
 801b5a0:	2501      	movs	r5, #1
 801b5a2:	4798      	blx	r3
 801b5a4:	6066      	str	r6, [r4, #4]
 801b5a6:	e7e1      	b.n	801b56c <rcl_guard_condition_init_from_rmw+0x7c>

0801b5a8 <rcl_guard_condition_fini>:
 801b5a8:	b570      	push	{r4, r5, r6, lr}
 801b5aa:	b082      	sub	sp, #8
 801b5ac:	b1f0      	cbz	r0, 801b5ec <rcl_guard_condition_fini+0x44>
 801b5ae:	6843      	ldr	r3, [r0, #4]
 801b5b0:	4604      	mov	r4, r0
 801b5b2:	b163      	cbz	r3, 801b5ce <rcl_guard_condition_fini+0x26>
 801b5b4:	6818      	ldr	r0, [r3, #0]
 801b5b6:	68de      	ldr	r6, [r3, #12]
 801b5b8:	6999      	ldr	r1, [r3, #24]
 801b5ba:	b160      	cbz	r0, 801b5d6 <rcl_guard_condition_fini+0x2e>
 801b5bc:	791d      	ldrb	r5, [r3, #4]
 801b5be:	b965      	cbnz	r5, 801b5da <rcl_guard_condition_fini+0x32>
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	47b0      	blx	r6
 801b5c4:	2300      	movs	r3, #0
 801b5c6:	4628      	mov	r0, r5
 801b5c8:	6063      	str	r3, [r4, #4]
 801b5ca:	b002      	add	sp, #8
 801b5cc:	bd70      	pop	{r4, r5, r6, pc}
 801b5ce:	461d      	mov	r5, r3
 801b5d0:	4628      	mov	r0, r5
 801b5d2:	b002      	add	sp, #8
 801b5d4:	bd70      	pop	{r4, r5, r6, pc}
 801b5d6:	4605      	mov	r5, r0
 801b5d8:	e7f2      	b.n	801b5c0 <rcl_guard_condition_fini+0x18>
 801b5da:	9101      	str	r1, [sp, #4]
 801b5dc:	f002 fd40 	bl	801e060 <rmw_destroy_guard_condition>
 801b5e0:	1e05      	subs	r5, r0, #0
 801b5e2:	6863      	ldr	r3, [r4, #4]
 801b5e4:	9901      	ldr	r1, [sp, #4]
 801b5e6:	bf18      	it	ne
 801b5e8:	2501      	movne	r5, #1
 801b5ea:	e7e9      	b.n	801b5c0 <rcl_guard_condition_fini+0x18>
 801b5ec:	250b      	movs	r5, #11
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	b002      	add	sp, #8
 801b5f2:	bd70      	pop	{r4, r5, r6, pc}

0801b5f4 <rcl_guard_condition_get_default_options>:
 801b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5f6:	b087      	sub	sp, #28
 801b5f8:	4606      	mov	r6, r0
 801b5fa:	4c0b      	ldr	r4, [pc, #44]	; (801b628 <rcl_guard_condition_get_default_options+0x34>)
 801b5fc:	4668      	mov	r0, sp
 801b5fe:	f7f9 fcf7 	bl	8014ff0 <rcutils_get_default_allocator>
 801b602:	46ee      	mov	lr, sp
 801b604:	46a4      	mov	ip, r4
 801b606:	4625      	mov	r5, r4
 801b608:	4634      	mov	r4, r6
 801b60a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b60e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b614:	f8de 7000 	ldr.w	r7, [lr]
 801b618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b61a:	4630      	mov	r0, r6
 801b61c:	f8cc 7000 	str.w	r7, [ip]
 801b620:	6027      	str	r7, [r4, #0]
 801b622:	b007      	add	sp, #28
 801b624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b626:	bf00      	nop
 801b628:	20016f10 	.word	0x20016f10

0801b62c <rcl_guard_condition_get_rmw_handle>:
 801b62c:	b110      	cbz	r0, 801b634 <rcl_guard_condition_get_rmw_handle+0x8>
 801b62e:	6840      	ldr	r0, [r0, #4]
 801b630:	b100      	cbz	r0, 801b634 <rcl_guard_condition_get_rmw_handle+0x8>
 801b632:	6800      	ldr	r0, [r0, #0]
 801b634:	4770      	bx	lr
 801b636:	bf00      	nop

0801b638 <rcl_init>:
 801b638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b63c:	1e05      	subs	r5, r0, #0
 801b63e:	b09e      	sub	sp, #120	; 0x78
 801b640:	460e      	mov	r6, r1
 801b642:	4690      	mov	r8, r2
 801b644:	461f      	mov	r7, r3
 801b646:	f340 809f 	ble.w	801b788 <rcl_init+0x150>
 801b64a:	2900      	cmp	r1, #0
 801b64c:	f000 809f 	beq.w	801b78e <rcl_init+0x156>
 801b650:	f1a1 0e04 	sub.w	lr, r1, #4
 801b654:	f04f 0c00 	mov.w	ip, #0
 801b658:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801b65c:	f10c 0c01 	add.w	ip, ip, #1
 801b660:	2c00      	cmp	r4, #0
 801b662:	f000 8094 	beq.w	801b78e <rcl_init+0x156>
 801b666:	4565      	cmp	r5, ip
 801b668:	d1f6      	bne.n	801b658 <rcl_init+0x20>
 801b66a:	f1b8 0f00 	cmp.w	r8, #0
 801b66e:	f000 808e 	beq.w	801b78e <rcl_init+0x156>
 801b672:	f8d8 4000 	ldr.w	r4, [r8]
 801b676:	2c00      	cmp	r4, #0
 801b678:	f000 8089 	beq.w	801b78e <rcl_init+0x156>
 801b67c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801b680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b682:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b686:	6823      	ldr	r3, [r4, #0]
 801b688:	a819      	add	r0, sp, #100	; 0x64
 801b68a:	f8cc 3000 	str.w	r3, [ip]
 801b68e:	f7f9 fcbd 	bl	801500c <rcutils_allocator_is_valid>
 801b692:	f080 0001 	eor.w	r0, r0, #1
 801b696:	b2c0      	uxtb	r0, r0
 801b698:	2800      	cmp	r0, #0
 801b69a:	d178      	bne.n	801b78e <rcl_init+0x156>
 801b69c:	2f00      	cmp	r7, #0
 801b69e:	d076      	beq.n	801b78e <rcl_init+0x156>
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d178      	bne.n	801b798 <rcl_init+0x160>
 801b6a6:	2178      	movs	r1, #120	; 0x78
 801b6a8:	2001      	movs	r0, #1
 801b6aa:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b6ae:	4798      	blx	r3
 801b6b0:	4604      	mov	r4, r0
 801b6b2:	6038      	str	r0, [r7, #0]
 801b6b4:	2800      	cmp	r0, #0
 801b6b6:	f000 80b6 	beq.w	801b826 <rcl_init+0x1ee>
 801b6ba:	a802      	add	r0, sp, #8
 801b6bc:	f002 fa4c 	bl	801db58 <rmw_get_zero_initialized_context>
 801b6c0:	a902      	add	r1, sp, #8
 801b6c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801b6c6:	2250      	movs	r2, #80	; 0x50
 801b6c8:	f005 fc01 	bl	8020ece <memcpy>
 801b6cc:	ac19      	add	r4, sp, #100	; 0x64
 801b6ce:	f8d7 e000 	ldr.w	lr, [r7]
 801b6d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6d4:	46f4      	mov	ip, lr
 801b6d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6da:	6823      	ldr	r3, [r4, #0]
 801b6dc:	f10e 0114 	add.w	r1, lr, #20
 801b6e0:	4640      	mov	r0, r8
 801b6e2:	f8cc 3000 	str.w	r3, [ip]
 801b6e6:	f7f7 ff19 	bl	801351c <rcl_init_options_copy>
 801b6ea:	4604      	mov	r4, r0
 801b6ec:	2800      	cmp	r0, #0
 801b6ee:	d144      	bne.n	801b77a <rcl_init+0x142>
 801b6f0:	f8d7 9000 	ldr.w	r9, [r7]
 801b6f4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801b6f8:	f8c9 0020 	str.w	r0, [r9, #32]
 801b6fc:	f8c9 5018 	str.w	r5, [r9, #24]
 801b700:	f8c9 801c 	str.w	r8, [r9, #28]
 801b704:	2d00      	cmp	r5, #0
 801b706:	d04e      	beq.n	801b7a6 <rcl_init+0x16e>
 801b708:	2e00      	cmp	r6, #0
 801b70a:	d04c      	beq.n	801b7a6 <rcl_init+0x16e>
 801b70c:	2104      	movs	r1, #4
 801b70e:	4628      	mov	r0, r5
 801b710:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b714:	4798      	blx	r3
 801b716:	f8c9 0020 	str.w	r0, [r9, #32]
 801b71a:	f8d7 9000 	ldr.w	r9, [r7]
 801b71e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801b722:	46ca      	mov	sl, r9
 801b724:	b343      	cbz	r3, 801b778 <rcl_init+0x140>
 801b726:	2d01      	cmp	r5, #1
 801b728:	f178 0300 	sbcs.w	r3, r8, #0
 801b72c:	db3b      	blt.n	801b7a6 <rcl_init+0x16e>
 801b72e:	2400      	movs	r4, #0
 801b730:	3e04      	subs	r6, #4
 801b732:	46a1      	mov	r9, r4
 801b734:	e00b      	b.n	801b74e <rcl_init+0x116>
 801b736:	6831      	ldr	r1, [r6, #0]
 801b738:	f005 fbc9 	bl	8020ece <memcpy>
 801b73c:	3401      	adds	r4, #1
 801b73e:	f149 0900 	adc.w	r9, r9, #0
 801b742:	45c8      	cmp	r8, r9
 801b744:	bf08      	it	eq
 801b746:	42a5      	cmpeq	r5, r4
 801b748:	d02b      	beq.n	801b7a2 <rcl_init+0x16a>
 801b74a:	f8d7 a000 	ldr.w	sl, [r7]
 801b74e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801b752:	f7e4 fdd5 	bl	8000300 <strlen>
 801b756:	1c42      	adds	r2, r0, #1
 801b758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b75a:	4610      	mov	r0, r2
 801b75c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b75e:	f8da a020 	ldr.w	sl, [sl, #32]
 801b762:	9201      	str	r2, [sp, #4]
 801b764:	4798      	blx	r3
 801b766:	683b      	ldr	r3, [r7, #0]
 801b768:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801b76c:	6a1b      	ldr	r3, [r3, #32]
 801b76e:	9a01      	ldr	r2, [sp, #4]
 801b770:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b774:	2800      	cmp	r0, #0
 801b776:	d1de      	bne.n	801b736 <rcl_init+0xfe>
 801b778:	240a      	movs	r4, #10
 801b77a:	4638      	mov	r0, r7
 801b77c:	f7ff fe4e 	bl	801b41c <__cleanup_context>
 801b780:	4620      	mov	r0, r4
 801b782:	b01e      	add	sp, #120	; 0x78
 801b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b788:	2900      	cmp	r1, #0
 801b78a:	f43f af6e 	beq.w	801b66a <rcl_init+0x32>
 801b78e:	240b      	movs	r4, #11
 801b790:	4620      	mov	r0, r4
 801b792:	b01e      	add	sp, #120	; 0x78
 801b794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b798:	2464      	movs	r4, #100	; 0x64
 801b79a:	4620      	mov	r0, r4
 801b79c:	b01e      	add	sp, #120	; 0x78
 801b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7a2:	f8d7 9000 	ldr.w	r9, [r7]
 801b7a6:	4926      	ldr	r1, [pc, #152]	; (801b840 <rcl_init+0x208>)
 801b7a8:	680b      	ldr	r3, [r1, #0]
 801b7aa:	3301      	adds	r3, #1
 801b7ac:	d036      	beq.n	801b81c <rcl_init+0x1e4>
 801b7ae:	461a      	mov	r2, r3
 801b7b0:	2400      	movs	r4, #0
 801b7b2:	600b      	str	r3, [r1, #0]
 801b7b4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801b7b8:	607b      	str	r3, [r7, #4]
 801b7ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b7bc:	3301      	adds	r3, #1
 801b7be:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801b7c2:	d034      	beq.n	801b82e <rcl_init+0x1f6>
 801b7c4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b7c8:	b93b      	cbnz	r3, 801b7da <rcl_init+0x1a2>
 801b7ca:	3030      	adds	r0, #48	; 0x30
 801b7cc:	f000 f83a 	bl	801b844 <rcl_get_localhost_only>
 801b7d0:	4604      	mov	r4, r0
 801b7d2:	2800      	cmp	r0, #0
 801b7d4:	d1d1      	bne.n	801b77a <rcl_init+0x142>
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	6958      	ldr	r0, [r3, #20]
 801b7da:	aa18      	add	r2, sp, #96	; 0x60
 801b7dc:	a917      	add	r1, sp, #92	; 0x5c
 801b7de:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b7e0:	f000 fc38 	bl	801c054 <rcl_validate_enclave_name>
 801b7e4:	4604      	mov	r4, r0
 801b7e6:	2800      	cmp	r0, #0
 801b7e8:	d1c7      	bne.n	801b77a <rcl_init+0x142>
 801b7ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b7ec:	b9eb      	cbnz	r3, 801b82a <rcl_init+0x1f2>
 801b7ee:	6839      	ldr	r1, [r7, #0]
 801b7f0:	694b      	ldr	r3, [r1, #20]
 801b7f2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801b7f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b7f8:	f000 f9c8 	bl	801bb8c <rcl_get_security_options_from_environment>
 801b7fc:	4604      	mov	r4, r0
 801b7fe:	2800      	cmp	r0, #0
 801b800:	d1bb      	bne.n	801b77a <rcl_init+0x142>
 801b802:	6839      	ldr	r1, [r7, #0]
 801b804:	6948      	ldr	r0, [r1, #20]
 801b806:	3128      	adds	r1, #40	; 0x28
 801b808:	3018      	adds	r0, #24
 801b80a:	f7fa f843 	bl	8015894 <rmw_init>
 801b80e:	4604      	mov	r4, r0
 801b810:	2800      	cmp	r0, #0
 801b812:	d0bd      	beq.n	801b790 <rcl_init+0x158>
 801b814:	f7ff fdde 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b818:	4604      	mov	r4, r0
 801b81a:	e7ae      	b.n	801b77a <rcl_init+0x142>
 801b81c:	2201      	movs	r2, #1
 801b81e:	461c      	mov	r4, r3
 801b820:	600a      	str	r2, [r1, #0]
 801b822:	4613      	mov	r3, r2
 801b824:	e7c6      	b.n	801b7b4 <rcl_init+0x17c>
 801b826:	240a      	movs	r4, #10
 801b828:	e7b2      	b.n	801b790 <rcl_init+0x158>
 801b82a:	2401      	movs	r4, #1
 801b82c:	e7a5      	b.n	801b77a <rcl_init+0x142>
 801b82e:	3024      	adds	r0, #36	; 0x24
 801b830:	f003 fbc6 	bl	801efc0 <rcl_get_default_domain_id>
 801b834:	4604      	mov	r4, r0
 801b836:	2800      	cmp	r0, #0
 801b838:	d19f      	bne.n	801b77a <rcl_init+0x142>
 801b83a:	683b      	ldr	r3, [r7, #0]
 801b83c:	6958      	ldr	r0, [r3, #20]
 801b83e:	e7c1      	b.n	801b7c4 <rcl_init+0x18c>
 801b840:	20016f24 	.word	0x20016f24

0801b844 <rcl_get_localhost_only>:
 801b844:	b510      	push	{r4, lr}
 801b846:	2300      	movs	r3, #0
 801b848:	b082      	sub	sp, #8
 801b84a:	9301      	str	r3, [sp, #4]
 801b84c:	b1b8      	cbz	r0, 801b87e <rcl_get_localhost_only+0x3a>
 801b84e:	4604      	mov	r4, r0
 801b850:	a901      	add	r1, sp, #4
 801b852:	480c      	ldr	r0, [pc, #48]	; (801b884 <rcl_get_localhost_only+0x40>)
 801b854:	f7f9 fbe8 	bl	8015028 <rcutils_get_env>
 801b858:	b110      	cbz	r0, 801b860 <rcl_get_localhost_only+0x1c>
 801b85a:	2001      	movs	r0, #1
 801b85c:	b002      	add	sp, #8
 801b85e:	bd10      	pop	{r4, pc}
 801b860:	9b01      	ldr	r3, [sp, #4]
 801b862:	b113      	cbz	r3, 801b86a <rcl_get_localhost_only+0x26>
 801b864:	781a      	ldrb	r2, [r3, #0]
 801b866:	2a31      	cmp	r2, #49	; 0x31
 801b868:	d004      	beq.n	801b874 <rcl_get_localhost_only+0x30>
 801b86a:	2302      	movs	r3, #2
 801b86c:	2000      	movs	r0, #0
 801b86e:	7023      	strb	r3, [r4, #0]
 801b870:	b002      	add	sp, #8
 801b872:	bd10      	pop	{r4, pc}
 801b874:	785b      	ldrb	r3, [r3, #1]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d1f7      	bne.n	801b86a <rcl_get_localhost_only+0x26>
 801b87a:	2301      	movs	r3, #1
 801b87c:	e7f6      	b.n	801b86c <rcl_get_localhost_only+0x28>
 801b87e:	200b      	movs	r0, #11
 801b880:	b002      	add	sp, #8
 801b882:	bd10      	pop	{r4, pc}
 801b884:	08025814 	.word	0x08025814

0801b888 <rcl_node_resolve_name>:
 801b888:	b082      	sub	sp, #8
 801b88a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b88e:	b091      	sub	sp, #68	; 0x44
 801b890:	ac1a      	add	r4, sp, #104	; 0x68
 801b892:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801b896:	e884 000c 	stmia.w	r4, {r2, r3}
 801b89a:	2800      	cmp	r0, #0
 801b89c:	d03d      	beq.n	801b91a <rcl_node_resolve_name+0x92>
 801b89e:	460c      	mov	r4, r1
 801b8a0:	4605      	mov	r5, r0
 801b8a2:	f7f8 f81d 	bl	80138e0 <rcl_node_get_options>
 801b8a6:	2800      	cmp	r0, #0
 801b8a8:	d03a      	beq.n	801b920 <rcl_node_resolve_name+0x98>
 801b8aa:	4628      	mov	r0, r5
 801b8ac:	f7f8 f808 	bl	80138c0 <rcl_node_get_name>
 801b8b0:	4606      	mov	r6, r0
 801b8b2:	4628      	mov	r0, r5
 801b8b4:	ad0b      	add	r5, sp, #44	; 0x2c
 801b8b6:	f7f8 f80b 	bl	80138d0 <rcl_node_get_namespace>
 801b8ba:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b8be:	4607      	mov	r7, r0
 801b8c0:	46ac      	mov	ip, r5
 801b8c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b8c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8ca:	f8de 3000 	ldr.w	r3, [lr]
 801b8ce:	f8cc 3000 	str.w	r3, [ip]
 801b8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b8d4:	b30b      	cbz	r3, 801b91a <rcl_node_resolve_name+0x92>
 801b8d6:	4689      	mov	r9, r1
 801b8d8:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b8dc:	f002 f80e 	bl	801d8fc <rcutils_get_zero_initialized_string_map>
 801b8e0:	ab10      	add	r3, sp, #64	; 0x40
 801b8e2:	9008      	str	r0, [sp, #32]
 801b8e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b8e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b8ec:	2100      	movs	r1, #0
 801b8ee:	a808      	add	r0, sp, #32
 801b8f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b8f4:	f002 f878 	bl	801d9e8 <rcutils_string_map_init>
 801b8f8:	4683      	mov	fp, r0
 801b8fa:	b1a0      	cbz	r0, 801b926 <rcl_node_resolve_name+0x9e>
 801b8fc:	f7f9 fbac 	bl	8015058 <rcutils_get_error_string>
 801b900:	f7f9 fbc2 	bl	8015088 <rcutils_reset_error>
 801b904:	f1bb 0f0a 	cmp.w	fp, #10
 801b908:	bf18      	it	ne
 801b90a:	f04f 0b01 	movne.w	fp, #1
 801b90e:	4658      	mov	r0, fp
 801b910:	b011      	add	sp, #68	; 0x44
 801b912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b916:	b002      	add	sp, #8
 801b918:	4770      	bx	lr
 801b91a:	f04f 0b0b 	mov.w	fp, #11
 801b91e:	e7f6      	b.n	801b90e <rcl_node_resolve_name+0x86>
 801b920:	f04f 0b01 	mov.w	fp, #1
 801b924:	e7f3      	b.n	801b90e <rcl_node_resolve_name+0x86>
 801b926:	9009      	str	r0, [sp, #36]	; 0x24
 801b928:	9007      	str	r0, [sp, #28]
 801b92a:	a808      	add	r0, sp, #32
 801b92c:	f003 fcdc 	bl	801f2e8 <rcl_get_default_topic_name_substitutions>
 801b930:	4683      	mov	fp, r0
 801b932:	b180      	cbz	r0, 801b956 <rcl_node_resolve_name+0xce>
 801b934:	280a      	cmp	r0, #10
 801b936:	a808      	add	r0, sp, #32
 801b938:	bf18      	it	ne
 801b93a:	f04f 0b01 	movne.w	fp, #1
 801b93e:	f002 f893 	bl	801da68 <rcutils_string_map_fini>
 801b942:	4604      	mov	r4, r0
 801b944:	2800      	cmp	r0, #0
 801b946:	d15b      	bne.n	801ba00 <rcl_node_resolve_name+0x178>
 801b948:	4651      	mov	r1, sl
 801b94a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b94c:	47c8      	blx	r9
 801b94e:	4651      	mov	r1, sl
 801b950:	4620      	mov	r0, r4
 801b952:	47c8      	blx	r9
 801b954:	e7db      	b.n	801b90e <rcl_node_resolve_name+0x86>
 801b956:	ab09      	add	r3, sp, #36	; 0x24
 801b958:	46ec      	mov	ip, sp
 801b95a:	9305      	str	r3, [sp, #20]
 801b95c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b95e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b962:	682b      	ldr	r3, [r5, #0]
 801b964:	463a      	mov	r2, r7
 801b966:	4631      	mov	r1, r6
 801b968:	4620      	mov	r0, r4
 801b96a:	f8cc 3000 	str.w	r3, [ip]
 801b96e:	ab08      	add	r3, sp, #32
 801b970:	f003 fb5a 	bl	801f028 <rcl_expand_topic_name>
 801b974:	4683      	mov	fp, r0
 801b976:	b9d8      	cbnz	r0, 801b9b0 <rcl_node_resolve_name+0x128>
 801b978:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b97a:	4602      	mov	r2, r0
 801b97c:	9009      	str	r0, [sp, #36]	; 0x24
 801b97e:	a90a      	add	r1, sp, #40	; 0x28
 801b980:	4620      	mov	r0, r4
 801b982:	f002 f985 	bl	801dc90 <rmw_validate_full_topic_name>
 801b986:	bb50      	cbnz	r0, 801b9de <rcl_node_resolve_name+0x156>
 801b988:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b98a:	2d00      	cmp	r5, #0
 801b98c:	d140      	bne.n	801ba10 <rcl_node_resolve_name+0x188>
 801b98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b990:	a808      	add	r0, sp, #32
 801b992:	601c      	str	r4, [r3, #0]
 801b994:	f002 f868 	bl	801da68 <rcutils_string_map_fini>
 801b998:	4683      	mov	fp, r0
 801b99a:	2800      	cmp	r0, #0
 801b99c:	d043      	beq.n	801ba26 <rcl_node_resolve_name+0x19e>
 801b99e:	f7f9 fb5b 	bl	8015058 <rcutils_get_error_string>
 801b9a2:	46a8      	mov	r8, r5
 801b9a4:	f04f 0b01 	mov.w	fp, #1
 801b9a8:	462c      	mov	r4, r5
 801b9aa:	f7f9 fb6d 	bl	8015088 <rcutils_reset_error>
 801b9ae:	e00a      	b.n	801b9c6 <rcl_node_resolve_name+0x13e>
 801b9b0:	2867      	cmp	r0, #103	; 0x67
 801b9b2:	bf14      	ite	ne
 801b9b4:	f04f 0800 	movne.w	r8, #0
 801b9b8:	f008 0801 	andeq.w	r8, r8, #1
 801b9bc:	9c07      	ldr	r4, [sp, #28]
 801b9be:	a808      	add	r0, sp, #32
 801b9c0:	f002 f852 	bl	801da68 <rcutils_string_map_fini>
 801b9c4:	bb50      	cbnz	r0, 801ba1c <rcl_node_resolve_name+0x194>
 801b9c6:	4651      	mov	r1, sl
 801b9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b9ca:	47c8      	blx	r9
 801b9cc:	4651      	mov	r1, sl
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	47c8      	blx	r9
 801b9d2:	f1b8 0f00 	cmp.w	r8, #0
 801b9d6:	bf18      	it	ne
 801b9d8:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801b9dc:	e797      	b.n	801b90e <rcl_node_resolve_name+0x86>
 801b9de:	f7f9 fb3b 	bl	8015058 <rcutils_get_error_string>
 801b9e2:	f7f9 fb51 	bl	8015088 <rcutils_reset_error>
 801b9e6:	a808      	add	r0, sp, #32
 801b9e8:	f002 f83e 	bl	801da68 <rcutils_string_map_fini>
 801b9ec:	b998      	cbnz	r0, 801ba16 <rcl_node_resolve_name+0x18e>
 801b9ee:	4651      	mov	r1, sl
 801b9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b9f2:	47c8      	blx	r9
 801b9f4:	4651      	mov	r1, sl
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f04f 0b01 	mov.w	fp, #1
 801b9fc:	47c8      	blx	r9
 801b9fe:	e786      	b.n	801b90e <rcl_node_resolve_name+0x86>
 801ba00:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ba04:	f7f9 fb28 	bl	8015058 <rcutils_get_error_string>
 801ba08:	f7f9 fb3e 	bl	8015088 <rcutils_reset_error>
 801ba0c:	4644      	mov	r4, r8
 801ba0e:	e7da      	b.n	801b9c6 <rcl_node_resolve_name+0x13e>
 801ba10:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ba14:	e7d3      	b.n	801b9be <rcl_node_resolve_name+0x136>
 801ba16:	46d8      	mov	r8, fp
 801ba18:	f04f 0b01 	mov.w	fp, #1
 801ba1c:	f7f9 fb1c 	bl	8015058 <rcutils_get_error_string>
 801ba20:	f7f9 fb32 	bl	8015088 <rcutils_reset_error>
 801ba24:	e7cf      	b.n	801b9c6 <rcl_node_resolve_name+0x13e>
 801ba26:	4651      	mov	r1, sl
 801ba28:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba2a:	47c8      	blx	r9
 801ba2c:	4651      	mov	r1, sl
 801ba2e:	4658      	mov	r0, fp
 801ba30:	47c8      	blx	r9
 801ba32:	e76c      	b.n	801b90e <rcl_node_resolve_name+0x86>

0801ba34 <exact_match_lookup>:
 801ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba36:	f102 0708 	add.w	r7, r2, #8
 801ba3a:	460b      	mov	r3, r1
 801ba3c:	b085      	sub	sp, #20
 801ba3e:	4614      	mov	r4, r2
 801ba40:	4606      	mov	r6, r0
 801ba42:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801ba46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	4919      	ldr	r1, [pc, #100]	; (801bab4 <exact_match_lookup+0x80>)
 801ba4e:	e894 000c 	ldmia.w	r4, {r2, r3}
 801ba52:	f001 ff1b 	bl	801d88c <rcutils_join_path>
 801ba56:	7833      	ldrb	r3, [r6, #0]
 801ba58:	4605      	mov	r5, r0
 801ba5a:	2b2f      	cmp	r3, #47	; 0x2f
 801ba5c:	d023      	beq.n	801baa6 <exact_match_lookup+0x72>
 801ba5e:	f104 030c 	add.w	r3, r4, #12
 801ba62:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba66:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ba6a:	1c70      	adds	r0, r6, #1
 801ba6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ba70:	f001 ff12 	bl	801d898 <rcutils_to_native_path>
 801ba74:	4606      	mov	r6, r0
 801ba76:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801ba7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ba7e:	4631      	mov	r1, r6
 801ba80:	4628      	mov	r0, r5
 801ba82:	e894 000c 	ldmia.w	r4, {r2, r3}
 801ba86:	f001 ff01 	bl	801d88c <rcutils_join_path>
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	4630      	mov	r0, r6
 801ba8e:	6862      	ldr	r2, [r4, #4]
 801ba90:	461e      	mov	r6, r3
 801ba92:	6921      	ldr	r1, [r4, #16]
 801ba94:	4790      	blx	r2
 801ba96:	4628      	mov	r0, r5
 801ba98:	4635      	mov	r5, r6
 801ba9a:	6863      	ldr	r3, [r4, #4]
 801ba9c:	6921      	ldr	r1, [r4, #16]
 801ba9e:	4798      	blx	r3
 801baa0:	4628      	mov	r0, r5
 801baa2:	b005      	add	sp, #20
 801baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baa6:	7873      	ldrb	r3, [r6, #1]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d1d8      	bne.n	801ba5e <exact_match_lookup+0x2a>
 801baac:	4628      	mov	r0, r5
 801baae:	b005      	add	sp, #20
 801bab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bab2:	bf00      	nop
 801bab4:	08025864 	.word	0x08025864

0801bab8 <rcl_get_secure_root>:
 801bab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801babc:	b085      	sub	sp, #20
 801babe:	b168      	cbz	r0, 801badc <rcl_get_secure_root+0x24>
 801bac0:	4607      	mov	r7, r0
 801bac2:	4608      	mov	r0, r1
 801bac4:	460c      	mov	r4, r1
 801bac6:	f7f9 faa1 	bl	801500c <rcutils_allocator_is_valid>
 801baca:	b138      	cbz	r0, 801badc <rcl_get_secure_root+0x24>
 801bacc:	2300      	movs	r3, #0
 801bace:	482d      	ldr	r0, [pc, #180]	; (801bb84 <rcl_get_secure_root+0xcc>)
 801bad0:	a903      	add	r1, sp, #12
 801bad2:	9303      	str	r3, [sp, #12]
 801bad4:	f7f9 faa8 	bl	8015028 <rcutils_get_env>
 801bad8:	4605      	mov	r5, r0
 801bada:	b120      	cbz	r0, 801bae6 <rcl_get_secure_root+0x2e>
 801badc:	2500      	movs	r5, #0
 801bade:	4628      	mov	r0, r5
 801bae0:	b005      	add	sp, #20
 801bae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bae6:	9b03      	ldr	r3, [sp, #12]
 801bae8:	781a      	ldrb	r2, [r3, #0]
 801baea:	2a00      	cmp	r2, #0
 801baec:	d0f6      	beq.n	801badc <rcl_get_secure_root+0x24>
 801baee:	f104 090c 	add.w	r9, r4, #12
 801baf2:	e899 0003 	ldmia.w	r9, {r0, r1}
 801baf6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bafa:	4618      	mov	r0, r3
 801bafc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bb00:	f7f9 fc18 	bl	8015334 <rcutils_strdup>
 801bb04:	4680      	mov	r8, r0
 801bb06:	2800      	cmp	r0, #0
 801bb08:	d0e8      	beq.n	801badc <rcl_get_secure_root+0x24>
 801bb0a:	a903      	add	r1, sp, #12
 801bb0c:	481e      	ldr	r0, [pc, #120]	; (801bb88 <rcl_get_secure_root+0xd0>)
 801bb0e:	9503      	str	r5, [sp, #12]
 801bb10:	f7f9 fa8a 	bl	8015028 <rcutils_get_env>
 801bb14:	b160      	cbz	r0, 801bb30 <rcl_get_secure_root+0x78>
 801bb16:	2600      	movs	r6, #0
 801bb18:	4630      	mov	r0, r6
 801bb1a:	6863      	ldr	r3, [r4, #4]
 801bb1c:	6921      	ldr	r1, [r4, #16]
 801bb1e:	4798      	blx	r3
 801bb20:	4640      	mov	r0, r8
 801bb22:	6863      	ldr	r3, [r4, #4]
 801bb24:	6921      	ldr	r1, [r4, #16]
 801bb26:	4798      	blx	r3
 801bb28:	4628      	mov	r0, r5
 801bb2a:	b005      	add	sp, #20
 801bb2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb30:	9b03      	ldr	r3, [sp, #12]
 801bb32:	781e      	ldrb	r6, [r3, #0]
 801bb34:	b1f6      	cbz	r6, 801bb74 <rcl_get_secure_root+0xbc>
 801bb36:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bb3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bb44:	f7f9 fbf6 	bl	8015334 <rcutils_strdup>
 801bb48:	4606      	mov	r6, r0
 801bb4a:	2800      	cmp	r0, #0
 801bb4c:	d0e3      	beq.n	801bb16 <rcl_get_secure_root+0x5e>
 801bb4e:	4622      	mov	r2, r4
 801bb50:	4641      	mov	r1, r8
 801bb52:	f7ff ff6f 	bl	801ba34 <exact_match_lookup>
 801bb56:	4605      	mov	r5, r0
 801bb58:	2d00      	cmp	r5, #0
 801bb5a:	d0dd      	beq.n	801bb18 <rcl_get_secure_root+0x60>
 801bb5c:	4628      	mov	r0, r5
 801bb5e:	f001 fe93 	bl	801d888 <rcutils_is_directory>
 801bb62:	4603      	mov	r3, r0
 801bb64:	2800      	cmp	r0, #0
 801bb66:	d1d7      	bne.n	801bb18 <rcl_get_secure_root+0x60>
 801bb68:	4628      	mov	r0, r5
 801bb6a:	6921      	ldr	r1, [r4, #16]
 801bb6c:	461d      	mov	r5, r3
 801bb6e:	6863      	ldr	r3, [r4, #4]
 801bb70:	4798      	blx	r3
 801bb72:	e7d1      	b.n	801bb18 <rcl_get_secure_root+0x60>
 801bb74:	4622      	mov	r2, r4
 801bb76:	4638      	mov	r0, r7
 801bb78:	4641      	mov	r1, r8
 801bb7a:	f7ff ff5b 	bl	801ba34 <exact_match_lookup>
 801bb7e:	4605      	mov	r5, r0
 801bb80:	e7ea      	b.n	801bb58 <rcl_get_secure_root+0xa0>
 801bb82:	bf00      	nop
 801bb84:	08025870 	.word	0x08025870
 801bb88:	08025888 	.word	0x08025888

0801bb8c <rcl_get_security_options_from_environment>:
 801bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb90:	b082      	sub	sp, #8
 801bb92:	2300      	movs	r3, #0
 801bb94:	4606      	mov	r6, r0
 801bb96:	460f      	mov	r7, r1
 801bb98:	4821      	ldr	r0, [pc, #132]	; (801bc20 <rcl_get_security_options_from_environment+0x94>)
 801bb9a:	a901      	add	r1, sp, #4
 801bb9c:	4690      	mov	r8, r2
 801bb9e:	9301      	str	r3, [sp, #4]
 801bba0:	f7f9 fa42 	bl	8015028 <rcutils_get_env>
 801bba4:	b120      	cbz	r0, 801bbb0 <rcl_get_security_options_from_environment+0x24>
 801bba6:	2501      	movs	r5, #1
 801bba8:	4628      	mov	r0, r5
 801bbaa:	b002      	add	sp, #8
 801bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbb0:	4604      	mov	r4, r0
 801bbb2:	491c      	ldr	r1, [pc, #112]	; (801bc24 <rcl_get_security_options_from_environment+0x98>)
 801bbb4:	9801      	ldr	r0, [sp, #4]
 801bbb6:	f7e4 fb43 	bl	8000240 <strcmp>
 801bbba:	4605      	mov	r5, r0
 801bbbc:	b9f0      	cbnz	r0, 801bbfc <rcl_get_security_options_from_environment+0x70>
 801bbbe:	9001      	str	r0, [sp, #4]
 801bbc0:	f1b8 0f00 	cmp.w	r8, #0
 801bbc4:	d021      	beq.n	801bc0a <rcl_get_security_options_from_environment+0x7e>
 801bbc6:	a901      	add	r1, sp, #4
 801bbc8:	4817      	ldr	r0, [pc, #92]	; (801bc28 <rcl_get_security_options_from_environment+0x9c>)
 801bbca:	f7f9 fa2d 	bl	8015028 <rcutils_get_env>
 801bbce:	2800      	cmp	r0, #0
 801bbd0:	d1e9      	bne.n	801bba6 <rcl_get_security_options_from_environment+0x1a>
 801bbd2:	4916      	ldr	r1, [pc, #88]	; (801bc2c <rcl_get_security_options_from_environment+0xa0>)
 801bbd4:	9801      	ldr	r0, [sp, #4]
 801bbd6:	f7e4 fb33 	bl	8000240 <strcmp>
 801bbda:	4603      	mov	r3, r0
 801bbdc:	4639      	mov	r1, r7
 801bbde:	4630      	mov	r0, r6
 801bbe0:	fab3 f383 	clz	r3, r3
 801bbe4:	095b      	lsrs	r3, r3, #5
 801bbe6:	f888 3000 	strb.w	r3, [r8]
 801bbea:	f7ff ff65 	bl	801bab8 <rcl_get_secure_root>
 801bbee:	b170      	cbz	r0, 801bc0e <rcl_get_security_options_from_environment+0x82>
 801bbf0:	f8c8 0004 	str.w	r0, [r8, #4]
 801bbf4:	4628      	mov	r0, r5
 801bbf6:	b002      	add	sp, #8
 801bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbfc:	4625      	mov	r5, r4
 801bbfe:	f888 4000 	strb.w	r4, [r8]
 801bc02:	4628      	mov	r0, r5
 801bc04:	b002      	add	sp, #8
 801bc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc0a:	250b      	movs	r5, #11
 801bc0c:	e7cc      	b.n	801bba8 <rcl_get_security_options_from_environment+0x1c>
 801bc0e:	f898 5000 	ldrb.w	r5, [r8]
 801bc12:	f1a5 0501 	sub.w	r5, r5, #1
 801bc16:	fab5 f585 	clz	r5, r5
 801bc1a:	096d      	lsrs	r5, r5, #5
 801bc1c:	e7c4      	b.n	801bba8 <rcl_get_security_options_from_environment+0x1c>
 801bc1e:	bf00      	nop
 801bc20:	08025828 	.word	0x08025828
 801bc24:	0802583c 	.word	0x0802583c
 801bc28:	08025844 	.word	0x08025844
 801bc2c:	0802585c 	.word	0x0802585c

0801bc30 <rcl_get_system_time>:
 801bc30:	4608      	mov	r0, r1
 801bc32:	f7f9 bbbd 	b.w	80153b0 <rcutils_system_time_now>
 801bc36:	bf00      	nop

0801bc38 <rcl_get_steady_time>:
 801bc38:	4608      	mov	r0, r1
 801bc3a:	f7f9 bbdf 	b.w	80153fc <rcutils_steady_time_now>
 801bc3e:	bf00      	nop

0801bc40 <rcl_get_ros_time>:
 801bc40:	7a03      	ldrb	r3, [r0, #8]
 801bc42:	b510      	push	{r4, lr}
 801bc44:	460c      	mov	r4, r1
 801bc46:	b143      	cbz	r3, 801bc5a <rcl_get_ros_time+0x1a>
 801bc48:	2105      	movs	r1, #5
 801bc4a:	f001 fd79 	bl	801d740 <__atomic_load_8>
 801bc4e:	4602      	mov	r2, r0
 801bc50:	460b      	mov	r3, r1
 801bc52:	2000      	movs	r0, #0
 801bc54:	e9c4 2300 	strd	r2, r3, [r4]
 801bc58:	bd10      	pop	{r4, pc}
 801bc5a:	4608      	mov	r0, r1
 801bc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc60:	f7f9 bba6 	b.w	80153b0 <rcutils_system_time_now>

0801bc64 <rcl_clock_init>:
 801bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc66:	4605      	mov	r5, r0
 801bc68:	4610      	mov	r0, r2
 801bc6a:	4614      	mov	r4, r2
 801bc6c:	460e      	mov	r6, r1
 801bc6e:	f7f9 f9cd 	bl	801500c <rcutils_allocator_is_valid>
 801bc72:	b128      	cbz	r0, 801bc80 <rcl_clock_init+0x1c>
 801bc74:	2d03      	cmp	r5, #3
 801bc76:	d803      	bhi.n	801bc80 <rcl_clock_init+0x1c>
 801bc78:	e8df f005 	tbb	[pc, r5]
 801bc7c:	0659301f 	.word	0x0659301f
 801bc80:	f04f 0c0b 	mov.w	ip, #11
 801bc84:	4660      	mov	r0, ip
 801bc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc88:	2c00      	cmp	r4, #0
 801bc8a:	d0f9      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bc8c:	fab6 f386 	clz	r3, r6
 801bc90:	095b      	lsrs	r3, r3, #5
 801bc92:	2e00      	cmp	r6, #0
 801bc94:	d0f4      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bc96:	6133      	str	r3, [r6, #16]
 801bc98:	469c      	mov	ip, r3
 801bc9a:	f106 0514 	add.w	r5, r6, #20
 801bc9e:	4f32      	ldr	r7, [pc, #200]	; (801bd68 <rcl_clock_init+0x104>)
 801bca0:	f04f 0e03 	mov.w	lr, #3
 801bca4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bcac:	6823      	ldr	r3, [r4, #0]
 801bcae:	4660      	mov	r0, ip
 801bcb0:	602b      	str	r3, [r5, #0]
 801bcb2:	60f7      	str	r7, [r6, #12]
 801bcb4:	f886 e000 	strb.w	lr, [r6]
 801bcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcba:	2e00      	cmp	r6, #0
 801bcbc:	d0e0      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	f106 0514 	add.w	r5, r6, #20
 801bcc4:	7033      	strb	r3, [r6, #0]
 801bcc6:	469c      	mov	ip, r3
 801bcc8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bccc:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bcd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bcd4:	6823      	ldr	r3, [r4, #0]
 801bcd6:	4660      	mov	r0, ip
 801bcd8:	602b      	str	r3, [r5, #0]
 801bcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcdc:	2c00      	cmp	r4, #0
 801bcde:	d0cf      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bce0:	fab6 f586 	clz	r5, r6
 801bce4:	096d      	lsrs	r5, r5, #5
 801bce6:	2e00      	cmp	r6, #0
 801bce8:	d0ca      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bcea:	46a6      	mov	lr, r4
 801bcec:	7035      	strb	r5, [r6, #0]
 801bcee:	f106 0c14 	add.w	ip, r6, #20
 801bcf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bcf6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bcfa:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bcfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd02:	f8de 3000 	ldr.w	r3, [lr]
 801bd06:	2010      	movs	r0, #16
 801bd08:	f8cc 3000 	str.w	r3, [ip]
 801bd0c:	6823      	ldr	r3, [r4, #0]
 801bd0e:	6921      	ldr	r1, [r4, #16]
 801bd10:	4798      	blx	r3
 801bd12:	6130      	str	r0, [r6, #16]
 801bd14:	b320      	cbz	r0, 801bd60 <rcl_clock_init+0xfc>
 801bd16:	2200      	movs	r2, #0
 801bd18:	2300      	movs	r3, #0
 801bd1a:	46ac      	mov	ip, r5
 801bd1c:	7205      	strb	r5, [r0, #8]
 801bd1e:	e9c0 2300 	strd	r2, r3, [r0]
 801bd22:	4a12      	ldr	r2, [pc, #72]	; (801bd6c <rcl_clock_init+0x108>)
 801bd24:	2301      	movs	r3, #1
 801bd26:	4660      	mov	r0, ip
 801bd28:	60f2      	str	r2, [r6, #12]
 801bd2a:	7033      	strb	r3, [r6, #0]
 801bd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd2e:	2c00      	cmp	r4, #0
 801bd30:	d0a6      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bd32:	fab6 f386 	clz	r3, r6
 801bd36:	095b      	lsrs	r3, r3, #5
 801bd38:	2e00      	cmp	r6, #0
 801bd3a:	d0a1      	beq.n	801bc80 <rcl_clock_init+0x1c>
 801bd3c:	6133      	str	r3, [r6, #16]
 801bd3e:	469c      	mov	ip, r3
 801bd40:	f106 0514 	add.w	r5, r6, #20
 801bd44:	f8df e028 	ldr.w	lr, [pc, #40]	; 801bd70 <rcl_clock_init+0x10c>
 801bd48:	2702      	movs	r7, #2
 801bd4a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd52:	6823      	ldr	r3, [r4, #0]
 801bd54:	4660      	mov	r0, ip
 801bd56:	602b      	str	r3, [r5, #0]
 801bd58:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bd5c:	7037      	strb	r7, [r6, #0]
 801bd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd60:	f04f 0c0a 	mov.w	ip, #10
 801bd64:	e78e      	b.n	801bc84 <rcl_clock_init+0x20>
 801bd66:	bf00      	nop
 801bd68:	0801bc39 	.word	0x0801bc39
 801bd6c:	0801bc41 	.word	0x0801bc41
 801bd70:	0801bc31 	.word	0x0801bc31

0801bd74 <rcl_clock_get_now>:
 801bd74:	b140      	cbz	r0, 801bd88 <rcl_clock_get_now+0x14>
 801bd76:	b139      	cbz	r1, 801bd88 <rcl_clock_get_now+0x14>
 801bd78:	7803      	ldrb	r3, [r0, #0]
 801bd7a:	b11b      	cbz	r3, 801bd84 <rcl_clock_get_now+0x10>
 801bd7c:	68c3      	ldr	r3, [r0, #12]
 801bd7e:	b10b      	cbz	r3, 801bd84 <rcl_clock_get_now+0x10>
 801bd80:	6900      	ldr	r0, [r0, #16]
 801bd82:	4718      	bx	r3
 801bd84:	2001      	movs	r0, #1
 801bd86:	4770      	bx	lr
 801bd88:	200b      	movs	r0, #11
 801bd8a:	4770      	bx	lr

0801bd8c <rcl_timer_call>:
 801bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd90:	b087      	sub	sp, #28
 801bd92:	2800      	cmp	r0, #0
 801bd94:	d06c      	beq.n	801be70 <rcl_timer_call+0xe4>
 801bd96:	6803      	ldr	r3, [r0, #0]
 801bd98:	4604      	mov	r4, r0
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d062      	beq.n	801be64 <rcl_timer_call+0xd8>
 801bd9e:	f3bf 8f5b 	dmb	ish
 801bda2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bda6:	f3bf 8f5b 	dmb	ish
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d14f      	bne.n	801be4e <rcl_timer_call+0xc2>
 801bdae:	6803      	ldr	r3, [r0, #0]
 801bdb0:	a904      	add	r1, sp, #16
 801bdb2:	6818      	ldr	r0, [r3, #0]
 801bdb4:	f7ff ffde 	bl	801bd74 <rcl_clock_get_now>
 801bdb8:	4605      	mov	r5, r0
 801bdba:	2800      	cmp	r0, #0
 801bdbc:	d149      	bne.n	801be52 <rcl_timer_call+0xc6>
 801bdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	db49      	blt.n	801be5a <rcl_timer_call+0xce>
 801bdc6:	2605      	movs	r6, #5
 801bdc8:	6820      	ldr	r0, [r4, #0]
 801bdca:	9600      	str	r6, [sp, #0]
 801bdcc:	3020      	adds	r0, #32
 801bdce:	f001 fd23 	bl	801d818 <__atomic_exchange_8>
 801bdd2:	6823      	ldr	r3, [r4, #0]
 801bdd4:	4680      	mov	r8, r0
 801bdd6:	f3bf 8f5b 	dmb	ish
 801bdda:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801bdde:	f3bf 8f5b 	dmb	ish
 801bde2:	6820      	ldr	r0, [r4, #0]
 801bde4:	4689      	mov	r9, r1
 801bde6:	4631      	mov	r1, r6
 801bde8:	3028      	adds	r0, #40	; 0x28
 801bdea:	f001 fca9 	bl	801d740 <__atomic_load_8>
 801bdee:	460f      	mov	r7, r1
 801bdf0:	4631      	mov	r1, r6
 801bdf2:	4606      	mov	r6, r0
 801bdf4:	6820      	ldr	r0, [r4, #0]
 801bdf6:	3018      	adds	r0, #24
 801bdf8:	f001 fca2 	bl	801d740 <__atomic_load_8>
 801bdfc:	4602      	mov	r2, r0
 801bdfe:	9804      	ldr	r0, [sp, #16]
 801be00:	460b      	mov	r3, r1
 801be02:	18b6      	adds	r6, r6, r2
 801be04:	f8dd c014 	ldr.w	ip, [sp, #20]
 801be08:	4692      	mov	sl, r2
 801be0a:	eb47 0701 	adc.w	r7, r7, r1
 801be0e:	4286      	cmp	r6, r0
 801be10:	eb77 010c 	sbcs.w	r1, r7, ip
 801be14:	da04      	bge.n	801be20 <rcl_timer_call+0x94>
 801be16:	ea53 0102 	orrs.w	r1, r3, r2
 801be1a:	d12e      	bne.n	801be7a <rcl_timer_call+0xee>
 801be1c:	4606      	mov	r6, r0
 801be1e:	4667      	mov	r7, ip
 801be20:	6820      	ldr	r0, [r4, #0]
 801be22:	2105      	movs	r1, #5
 801be24:	4632      	mov	r2, r6
 801be26:	463b      	mov	r3, r7
 801be28:	3028      	adds	r0, #40	; 0x28
 801be2a:	9100      	str	r1, [sp, #0]
 801be2c:	f001 fcbe 	bl	801d7ac <__atomic_store_8>
 801be30:	f1bb 0f00 	cmp.w	fp, #0
 801be34:	d00d      	beq.n	801be52 <rcl_timer_call+0xc6>
 801be36:	9a04      	ldr	r2, [sp, #16]
 801be38:	4620      	mov	r0, r4
 801be3a:	9b05      	ldr	r3, [sp, #20]
 801be3c:	ebb2 0208 	subs.w	r2, r2, r8
 801be40:	eb63 0309 	sbc.w	r3, r3, r9
 801be44:	47d8      	blx	fp
 801be46:	4628      	mov	r0, r5
 801be48:	b007      	add	sp, #28
 801be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be4e:	f240 3521 	movw	r5, #801	; 0x321
 801be52:	4628      	mov	r0, r5
 801be54:	b007      	add	sp, #28
 801be56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be5a:	2501      	movs	r5, #1
 801be5c:	4628      	mov	r0, r5
 801be5e:	b007      	add	sp, #28
 801be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be64:	f44f 7548 	mov.w	r5, #800	; 0x320
 801be68:	4628      	mov	r0, r5
 801be6a:	b007      	add	sp, #28
 801be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be70:	250b      	movs	r5, #11
 801be72:	4628      	mov	r0, r5
 801be74:	b007      	add	sp, #28
 801be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be7a:	1b80      	subs	r0, r0, r6
 801be7c:	eb6c 0107 	sbc.w	r1, ip, r7
 801be80:	3801      	subs	r0, #1
 801be82:	f161 0100 	sbc.w	r1, r1, #0
 801be86:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801be8a:	f7e4 fbfd 	bl	8000688 <__aeabi_ldivmod>
 801be8e:	9b02      	ldr	r3, [sp, #8]
 801be90:	3001      	adds	r0, #1
 801be92:	f141 0100 	adc.w	r1, r1, #0
 801be96:	fb00 f303 	mul.w	r3, r0, r3
 801be9a:	fb01 330a 	mla	r3, r1, sl, r3
 801be9e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801bea2:	1986      	adds	r6, r0, r6
 801bea4:	4453      	add	r3, sl
 801bea6:	eb43 0707 	adc.w	r7, r3, r7
 801beaa:	e7b9      	b.n	801be20 <rcl_timer_call+0x94>

0801beac <rcl_timer_is_ready>:
 801beac:	b570      	push	{r4, r5, r6, lr}
 801beae:	b082      	sub	sp, #8
 801beb0:	b380      	cbz	r0, 801bf14 <rcl_timer_is_ready+0x68>
 801beb2:	6803      	ldr	r3, [r0, #0]
 801beb4:	4604      	mov	r4, r0
 801beb6:	b38b      	cbz	r3, 801bf1c <rcl_timer_is_ready+0x70>
 801beb8:	460d      	mov	r5, r1
 801beba:	b359      	cbz	r1, 801bf14 <rcl_timer_is_ready+0x68>
 801bebc:	f3bf 8f5b 	dmb	ish
 801bec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bec4:	f3bf 8f5b 	dmb	ish
 801bec8:	b953      	cbnz	r3, 801bee0 <rcl_timer_is_ready+0x34>
 801beca:	6803      	ldr	r3, [r0, #0]
 801becc:	4669      	mov	r1, sp
 801bece:	6818      	ldr	r0, [r3, #0]
 801bed0:	f7ff ff50 	bl	801bd74 <rcl_clock_get_now>
 801bed4:	4606      	mov	r6, r0
 801bed6:	b148      	cbz	r0, 801beec <rcl_timer_is_ready+0x40>
 801bed8:	f240 3321 	movw	r3, #801	; 0x321
 801bedc:	4298      	cmp	r0, r3
 801bede:	d102      	bne.n	801bee6 <rcl_timer_is_ready+0x3a>
 801bee0:	2300      	movs	r3, #0
 801bee2:	461e      	mov	r6, r3
 801bee4:	702b      	strb	r3, [r5, #0]
 801bee6:	4630      	mov	r0, r6
 801bee8:	b002      	add	sp, #8
 801beea:	bd70      	pop	{r4, r5, r6, pc}
 801beec:	6820      	ldr	r0, [r4, #0]
 801beee:	2105      	movs	r1, #5
 801bef0:	3028      	adds	r0, #40	; 0x28
 801bef2:	f001 fc25 	bl	801d740 <__atomic_load_8>
 801bef6:	9b00      	ldr	r3, [sp, #0]
 801bef8:	1ac0      	subs	r0, r0, r3
 801befa:	9b01      	ldr	r3, [sp, #4]
 801befc:	eb61 0103 	sbc.w	r1, r1, r3
 801bf00:	2801      	cmp	r0, #1
 801bf02:	4630      	mov	r0, r6
 801bf04:	f171 0300 	sbcs.w	r3, r1, #0
 801bf08:	bfb4      	ite	lt
 801bf0a:	2301      	movlt	r3, #1
 801bf0c:	2300      	movge	r3, #0
 801bf0e:	702b      	strb	r3, [r5, #0]
 801bf10:	b002      	add	sp, #8
 801bf12:	bd70      	pop	{r4, r5, r6, pc}
 801bf14:	260b      	movs	r6, #11
 801bf16:	4630      	mov	r0, r6
 801bf18:	b002      	add	sp, #8
 801bf1a:	bd70      	pop	{r4, r5, r6, pc}
 801bf1c:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bf20:	e7e1      	b.n	801bee6 <rcl_timer_is_ready+0x3a>
 801bf22:	bf00      	nop

0801bf24 <rcl_timer_get_time_until_next_call>:
 801bf24:	b570      	push	{r4, r5, r6, lr}
 801bf26:	b082      	sub	sp, #8
 801bf28:	b330      	cbz	r0, 801bf78 <rcl_timer_get_time_until_next_call+0x54>
 801bf2a:	6803      	ldr	r3, [r0, #0]
 801bf2c:	4604      	mov	r4, r0
 801bf2e:	b33b      	cbz	r3, 801bf80 <rcl_timer_get_time_until_next_call+0x5c>
 801bf30:	460d      	mov	r5, r1
 801bf32:	b309      	cbz	r1, 801bf78 <rcl_timer_get_time_until_next_call+0x54>
 801bf34:	f3bf 8f5b 	dmb	ish
 801bf38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf3c:	f3bf 8f5b 	dmb	ish
 801bf40:	b9ab      	cbnz	r3, 801bf6e <rcl_timer_get_time_until_next_call+0x4a>
 801bf42:	6803      	ldr	r3, [r0, #0]
 801bf44:	4669      	mov	r1, sp
 801bf46:	6818      	ldr	r0, [r3, #0]
 801bf48:	f7ff ff14 	bl	801bd74 <rcl_clock_get_now>
 801bf4c:	4606      	mov	r6, r0
 801bf4e:	b958      	cbnz	r0, 801bf68 <rcl_timer_get_time_until_next_call+0x44>
 801bf50:	6820      	ldr	r0, [r4, #0]
 801bf52:	2105      	movs	r1, #5
 801bf54:	3028      	adds	r0, #40	; 0x28
 801bf56:	f001 fbf3 	bl	801d740 <__atomic_load_8>
 801bf5a:	9b00      	ldr	r3, [sp, #0]
 801bf5c:	1ac0      	subs	r0, r0, r3
 801bf5e:	9b01      	ldr	r3, [sp, #4]
 801bf60:	eb61 0103 	sbc.w	r1, r1, r3
 801bf64:	6028      	str	r0, [r5, #0]
 801bf66:	6069      	str	r1, [r5, #4]
 801bf68:	4630      	mov	r0, r6
 801bf6a:	b002      	add	sp, #8
 801bf6c:	bd70      	pop	{r4, r5, r6, pc}
 801bf6e:	f240 3621 	movw	r6, #801	; 0x321
 801bf72:	4630      	mov	r0, r6
 801bf74:	b002      	add	sp, #8
 801bf76:	bd70      	pop	{r4, r5, r6, pc}
 801bf78:	260b      	movs	r6, #11
 801bf7a:	4630      	mov	r0, r6
 801bf7c:	b002      	add	sp, #8
 801bf7e:	bd70      	pop	{r4, r5, r6, pc}
 801bf80:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bf84:	e7f0      	b.n	801bf68 <rcl_timer_get_time_until_next_call+0x44>
 801bf86:	bf00      	nop

0801bf88 <rcl_timer_get_guard_condition>:
 801bf88:	b130      	cbz	r0, 801bf98 <rcl_timer_get_guard_condition+0x10>
 801bf8a:	6800      	ldr	r0, [r0, #0]
 801bf8c:	b120      	cbz	r0, 801bf98 <rcl_timer_get_guard_condition+0x10>
 801bf8e:	68c3      	ldr	r3, [r0, #12]
 801bf90:	b10b      	cbz	r3, 801bf96 <rcl_timer_get_guard_condition+0xe>
 801bf92:	3008      	adds	r0, #8
 801bf94:	4770      	bx	lr
 801bf96:	4618      	mov	r0, r3
 801bf98:	4770      	bx	lr
 801bf9a:	bf00      	nop

0801bf9c <rcl_validate_enclave_name_with_size>:
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	d049      	beq.n	801c034 <rcl_validate_enclave_name_with_size+0x98>
 801bfa0:	b570      	push	{r4, r5, r6, lr}
 801bfa2:	4615      	mov	r5, r2
 801bfa4:	b0c2      	sub	sp, #264	; 0x108
 801bfa6:	b19a      	cbz	r2, 801bfd0 <rcl_validate_enclave_name_with_size+0x34>
 801bfa8:	461e      	mov	r6, r3
 801bfaa:	466a      	mov	r2, sp
 801bfac:	ab01      	add	r3, sp, #4
 801bfae:	460c      	mov	r4, r1
 801bfb0:	f7f9 fa8a 	bl	80154c8 <rmw_validate_namespace_with_size>
 801bfb4:	4684      	mov	ip, r0
 801bfb6:	b9b8      	cbnz	r0, 801bfe8 <rcl_validate_enclave_name_with_size+0x4c>
 801bfb8:	9900      	ldr	r1, [sp, #0]
 801bfba:	b171      	cbz	r1, 801bfda <rcl_validate_enclave_name_with_size+0x3e>
 801bfbc:	2907      	cmp	r1, #7
 801bfbe:	d019      	beq.n	801bff4 <rcl_validate_enclave_name_with_size+0x58>
 801bfc0:	1e4b      	subs	r3, r1, #1
 801bfc2:	2b05      	cmp	r3, #5
 801bfc4:	d83a      	bhi.n	801c03c <rcl_validate_enclave_name_with_size+0xa0>
 801bfc6:	e8df f003 	tbb	[pc, r3]
 801bfca:	2926      	.short	0x2926
 801bfcc:	1d322f2c 	.word	0x1d322f2c
 801bfd0:	f04f 0c0b 	mov.w	ip, #11
 801bfd4:	4660      	mov	r0, ip
 801bfd6:	b042      	add	sp, #264	; 0x108
 801bfd8:	bd70      	pop	{r4, r5, r6, pc}
 801bfda:	2907      	cmp	r1, #7
 801bfdc:	d00a      	beq.n	801bff4 <rcl_validate_enclave_name_with_size+0x58>
 801bfde:	2300      	movs	r3, #0
 801bfe0:	4660      	mov	r0, ip
 801bfe2:	602b      	str	r3, [r5, #0]
 801bfe4:	b042      	add	sp, #264	; 0x108
 801bfe6:	bd70      	pop	{r4, r5, r6, pc}
 801bfe8:	f7ff f9f4 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bfec:	4684      	mov	ip, r0
 801bfee:	4660      	mov	r0, ip
 801bff0:	b042      	add	sp, #264	; 0x108
 801bff2:	bd70      	pop	{r4, r5, r6, pc}
 801bff4:	2cff      	cmp	r4, #255	; 0xff
 801bff6:	d9f2      	bls.n	801bfde <rcl_validate_enclave_name_with_size+0x42>
 801bff8:	6029      	str	r1, [r5, #0]
 801bffa:	2e00      	cmp	r6, #0
 801bffc:	d0ea      	beq.n	801bfd4 <rcl_validate_enclave_name_with_size+0x38>
 801bffe:	23fe      	movs	r3, #254	; 0xfe
 801c000:	6033      	str	r3, [r6, #0]
 801c002:	e7e7      	b.n	801bfd4 <rcl_validate_enclave_name_with_size+0x38>
 801c004:	2306      	movs	r3, #6
 801c006:	602b      	str	r3, [r5, #0]
 801c008:	2e00      	cmp	r6, #0
 801c00a:	d0e3      	beq.n	801bfd4 <rcl_validate_enclave_name_with_size+0x38>
 801c00c:	9b01      	ldr	r3, [sp, #4]
 801c00e:	4660      	mov	r0, ip
 801c010:	6033      	str	r3, [r6, #0]
 801c012:	b042      	add	sp, #264	; 0x108
 801c014:	bd70      	pop	{r4, r5, r6, pc}
 801c016:	2301      	movs	r3, #1
 801c018:	602b      	str	r3, [r5, #0]
 801c01a:	e7f5      	b.n	801c008 <rcl_validate_enclave_name_with_size+0x6c>
 801c01c:	2302      	movs	r3, #2
 801c01e:	602b      	str	r3, [r5, #0]
 801c020:	e7f2      	b.n	801c008 <rcl_validate_enclave_name_with_size+0x6c>
 801c022:	2303      	movs	r3, #3
 801c024:	602b      	str	r3, [r5, #0]
 801c026:	e7ef      	b.n	801c008 <rcl_validate_enclave_name_with_size+0x6c>
 801c028:	2304      	movs	r3, #4
 801c02a:	602b      	str	r3, [r5, #0]
 801c02c:	e7ec      	b.n	801c008 <rcl_validate_enclave_name_with_size+0x6c>
 801c02e:	2305      	movs	r3, #5
 801c030:	602b      	str	r3, [r5, #0]
 801c032:	e7e9      	b.n	801c008 <rcl_validate_enclave_name_with_size+0x6c>
 801c034:	f04f 0c0b 	mov.w	ip, #11
 801c038:	4660      	mov	r0, ip
 801c03a:	4770      	bx	lr
 801c03c:	460b      	mov	r3, r1
 801c03e:	4a04      	ldr	r2, [pc, #16]	; (801c050 <rcl_validate_enclave_name_with_size+0xb4>)
 801c040:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c044:	a802      	add	r0, sp, #8
 801c046:	f7f9 f927 	bl	8015298 <rcutils_snprintf>
 801c04a:	f04f 0c01 	mov.w	ip, #1
 801c04e:	e7c1      	b.n	801bfd4 <rcl_validate_enclave_name_with_size+0x38>
 801c050:	080258a8 	.word	0x080258a8

0801c054 <rcl_validate_enclave_name>:
 801c054:	b168      	cbz	r0, 801c072 <rcl_validate_enclave_name+0x1e>
 801c056:	b570      	push	{r4, r5, r6, lr}
 801c058:	460d      	mov	r5, r1
 801c05a:	4616      	mov	r6, r2
 801c05c:	4604      	mov	r4, r0
 801c05e:	f7e4 f94f 	bl	8000300 <strlen>
 801c062:	4633      	mov	r3, r6
 801c064:	4601      	mov	r1, r0
 801c066:	462a      	mov	r2, r5
 801c068:	4620      	mov	r0, r4
 801c06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c06e:	f7ff bf95 	b.w	801bf9c <rcl_validate_enclave_name_with_size>
 801c072:	200b      	movs	r0, #11
 801c074:	4770      	bx	lr
 801c076:	bf00      	nop

0801c078 <rcl_get_zero_initialized_wait_set>:
 801c078:	b510      	push	{r4, lr}
 801c07a:	4c08      	ldr	r4, [pc, #32]	; (801c09c <rcl_get_zero_initialized_wait_set+0x24>)
 801c07c:	4686      	mov	lr, r0
 801c07e:	4684      	mov	ip, r0
 801c080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c082:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c088:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c08c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c08e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c092:	6823      	ldr	r3, [r4, #0]
 801c094:	4670      	mov	r0, lr
 801c096:	f8cc 3000 	str.w	r3, [ip]
 801c09a:	bd10      	pop	{r4, pc}
 801c09c:	08025908 	.word	0x08025908

0801c0a0 <rcl_wait_set_is_valid>:
 801c0a0:	b118      	cbz	r0, 801c0aa <rcl_wait_set_is_valid+0xa>
 801c0a2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c0a4:	3800      	subs	r0, #0
 801c0a6:	bf18      	it	ne
 801c0a8:	2001      	movne	r0, #1
 801c0aa:	4770      	bx	lr

0801c0ac <rcl_wait_set_fini>:
 801c0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0b0:	b082      	sub	sp, #8
 801c0b2:	2800      	cmp	r0, #0
 801c0b4:	f000 8095 	beq.w	801c1e2 <rcl_wait_set_fini+0x136>
 801c0b8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c0ba:	4604      	mov	r4, r0
 801c0bc:	2e00      	cmp	r6, #0
 801c0be:	f000 808c 	beq.w	801c1da <rcl_wait_set_fini+0x12e>
 801c0c2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c0c4:	f002 f9c0 	bl	801e448 <rmw_destroy_wait_set>
 801c0c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0ca:	1e06      	subs	r6, r0, #0
 801c0cc:	bf18      	it	ne
 801c0ce:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c0d2:	2d00      	cmp	r5, #0
 801c0d4:	f000 8081 	beq.w	801c1da <rcl_wait_set_fini+0x12e>
 801c0d8:	2700      	movs	r7, #0
 801c0da:	6820      	ldr	r0, [r4, #0]
 801c0dc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c0e0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c0e2:	6067      	str	r7, [r4, #4]
 801c0e4:	602f      	str	r7, [r5, #0]
 801c0e6:	b120      	cbz	r0, 801c0f2 <rcl_wait_set_fini+0x46>
 801c0e8:	9101      	str	r1, [sp, #4]
 801c0ea:	47c0      	blx	r8
 801c0ec:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0ee:	9901      	ldr	r1, [sp, #4]
 801c0f0:	6027      	str	r7, [r4, #0]
 801c0f2:	68a8      	ldr	r0, [r5, #8]
 801c0f4:	b120      	cbz	r0, 801c100 <rcl_wait_set_fini+0x54>
 801c0f6:	47c0      	blx	r8
 801c0f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0fa:	2300      	movs	r3, #0
 801c0fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c100:	f04f 0800 	mov.w	r8, #0
 801c104:	68a0      	ldr	r0, [r4, #8]
 801c106:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c108:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c10a:	f8c4 800c 	str.w	r8, [r4, #12]
 801c10e:	f8c5 800c 	str.w	r8, [r5, #12]
 801c112:	b128      	cbz	r0, 801c120 <rcl_wait_set_fini+0x74>
 801c114:	47b8      	blx	r7
 801c116:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c118:	f8c4 8008 	str.w	r8, [r4, #8]
 801c11c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c11e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c120:	f04f 0800 	mov.w	r8, #0
 801c124:	6968      	ldr	r0, [r5, #20]
 801c126:	f8c5 8010 	str.w	r8, [r5, #16]
 801c12a:	b128      	cbz	r0, 801c138 <rcl_wait_set_fini+0x8c>
 801c12c:	47b8      	blx	r7
 801c12e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c132:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c134:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c136:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c138:	f04f 0800 	mov.w	r8, #0
 801c13c:	6920      	ldr	r0, [r4, #16]
 801c13e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c142:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c146:	b128      	cbz	r0, 801c154 <rcl_wait_set_fini+0xa8>
 801c148:	47b8      	blx	r7
 801c14a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c14c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c150:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c152:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c154:	f04f 0800 	mov.w	r8, #0
 801c158:	69a0      	ldr	r0, [r4, #24]
 801c15a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c15e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c162:	b128      	cbz	r0, 801c170 <rcl_wait_set_fini+0xc4>
 801c164:	9101      	str	r1, [sp, #4]
 801c166:	47b8      	blx	r7
 801c168:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c16a:	9901      	ldr	r1, [sp, #4]
 801c16c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c170:	6a28      	ldr	r0, [r5, #32]
 801c172:	b120      	cbz	r0, 801c17e <rcl_wait_set_fini+0xd2>
 801c174:	47b8      	blx	r7
 801c176:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c178:	2300      	movs	r3, #0
 801c17a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c17e:	2700      	movs	r7, #0
 801c180:	6a20      	ldr	r0, [r4, #32]
 801c182:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c186:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c188:	6267      	str	r7, [r4, #36]	; 0x24
 801c18a:	626f      	str	r7, [r5, #36]	; 0x24
 801c18c:	b120      	cbz	r0, 801c198 <rcl_wait_set_fini+0xec>
 801c18e:	9101      	str	r1, [sp, #4]
 801c190:	47c0      	blx	r8
 801c192:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c194:	9901      	ldr	r1, [sp, #4]
 801c196:	6227      	str	r7, [r4, #32]
 801c198:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c19a:	b120      	cbz	r0, 801c1a6 <rcl_wait_set_fini+0xfa>
 801c19c:	47c0      	blx	r8
 801c19e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1a0:	2300      	movs	r3, #0
 801c1a2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c1a6:	2700      	movs	r7, #0
 801c1a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c1aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c1ae:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1b0:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c1b2:	632f      	str	r7, [r5, #48]	; 0x30
 801c1b4:	b120      	cbz	r0, 801c1c0 <rcl_wait_set_fini+0x114>
 801c1b6:	9101      	str	r1, [sp, #4]
 801c1b8:	47c0      	blx	r8
 801c1ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1bc:	9901      	ldr	r1, [sp, #4]
 801c1be:	62a7      	str	r7, [r4, #40]	; 0x28
 801c1c0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c1c2:	b120      	cbz	r0, 801c1ce <rcl_wait_set_fini+0x122>
 801c1c4:	47c0      	blx	r8
 801c1c6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c1ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c1d0:	4628      	mov	r0, r5
 801c1d2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1d4:	4798      	blx	r3
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	6323      	str	r3, [r4, #48]	; 0x30
 801c1da:	4630      	mov	r0, r6
 801c1dc:	b002      	add	sp, #8
 801c1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1e2:	260b      	movs	r6, #11
 801c1e4:	4630      	mov	r0, r6
 801c1e6:	b002      	add	sp, #8
 801c1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c1ec <rcl_wait_set_add_subscription>:
 801c1ec:	b318      	cbz	r0, 801c236 <rcl_wait_set_add_subscription+0x4a>
 801c1ee:	b538      	push	{r3, r4, r5, lr}
 801c1f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c1f2:	4604      	mov	r4, r0
 801c1f4:	b30b      	cbz	r3, 801c23a <rcl_wait_set_add_subscription+0x4e>
 801c1f6:	b319      	cbz	r1, 801c240 <rcl_wait_set_add_subscription+0x54>
 801c1f8:	681d      	ldr	r5, [r3, #0]
 801c1fa:	6840      	ldr	r0, [r0, #4]
 801c1fc:	4285      	cmp	r5, r0
 801c1fe:	d217      	bcs.n	801c230 <rcl_wait_set_add_subscription+0x44>
 801c200:	1c68      	adds	r0, r5, #1
 801c202:	6018      	str	r0, [r3, #0]
 801c204:	6823      	ldr	r3, [r4, #0]
 801c206:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c20a:	b102      	cbz	r2, 801c20e <rcl_wait_set_add_subscription+0x22>
 801c20c:	6015      	str	r5, [r2, #0]
 801c20e:	4608      	mov	r0, r1
 801c210:	f7f7 ff14 	bl	801403c <rcl_subscription_get_rmw_handle>
 801c214:	b150      	cbz	r0, 801c22c <rcl_wait_set_add_subscription+0x40>
 801c216:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c218:	6842      	ldr	r2, [r0, #4]
 801c21a:	2000      	movs	r0, #0
 801c21c:	689b      	ldr	r3, [r3, #8]
 801c21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c222:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c224:	6853      	ldr	r3, [r2, #4]
 801c226:	3301      	adds	r3, #1
 801c228:	6053      	str	r3, [r2, #4]
 801c22a:	bd38      	pop	{r3, r4, r5, pc}
 801c22c:	2001      	movs	r0, #1
 801c22e:	bd38      	pop	{r3, r4, r5, pc}
 801c230:	f240 3086 	movw	r0, #902	; 0x386
 801c234:	bd38      	pop	{r3, r4, r5, pc}
 801c236:	200b      	movs	r0, #11
 801c238:	4770      	bx	lr
 801c23a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c23e:	bd38      	pop	{r3, r4, r5, pc}
 801c240:	200b      	movs	r0, #11
 801c242:	bd38      	pop	{r3, r4, r5, pc}

0801c244 <rcl_wait_set_clear>:
 801c244:	2800      	cmp	r0, #0
 801c246:	d074      	beq.n	801c332 <rcl_wait_set_clear+0xee>
 801c248:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c24a:	b510      	push	{r4, lr}
 801c24c:	4604      	mov	r4, r0
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d071      	beq.n	801c336 <rcl_wait_set_clear+0xf2>
 801c252:	6800      	ldr	r0, [r0, #0]
 801c254:	b138      	cbz	r0, 801c266 <rcl_wait_set_clear+0x22>
 801c256:	6862      	ldr	r2, [r4, #4]
 801c258:	2100      	movs	r1, #0
 801c25a:	0092      	lsls	r2, r2, #2
 801c25c:	f004 fd6a 	bl	8020d34 <memset>
 801c260:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c262:	2200      	movs	r2, #0
 801c264:	601a      	str	r2, [r3, #0]
 801c266:	68a0      	ldr	r0, [r4, #8]
 801c268:	b138      	cbz	r0, 801c27a <rcl_wait_set_clear+0x36>
 801c26a:	68e2      	ldr	r2, [r4, #12]
 801c26c:	2100      	movs	r1, #0
 801c26e:	0092      	lsls	r2, r2, #2
 801c270:	f004 fd60 	bl	8020d34 <memset>
 801c274:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c276:	2200      	movs	r2, #0
 801c278:	60da      	str	r2, [r3, #12]
 801c27a:	69a0      	ldr	r0, [r4, #24]
 801c27c:	b138      	cbz	r0, 801c28e <rcl_wait_set_clear+0x4a>
 801c27e:	69e2      	ldr	r2, [r4, #28]
 801c280:	2100      	movs	r1, #0
 801c282:	0092      	lsls	r2, r2, #2
 801c284:	f004 fd56 	bl	8020d34 <memset>
 801c288:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c28a:	2200      	movs	r2, #0
 801c28c:	619a      	str	r2, [r3, #24]
 801c28e:	6a20      	ldr	r0, [r4, #32]
 801c290:	b138      	cbz	r0, 801c2a2 <rcl_wait_set_clear+0x5e>
 801c292:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c294:	2100      	movs	r1, #0
 801c296:	0092      	lsls	r2, r2, #2
 801c298:	f004 fd4c 	bl	8020d34 <memset>
 801c29c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c29e:	2200      	movs	r2, #0
 801c2a0:	625a      	str	r2, [r3, #36]	; 0x24
 801c2a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c2a4:	b138      	cbz	r0, 801c2b6 <rcl_wait_set_clear+0x72>
 801c2a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c2a8:	2100      	movs	r1, #0
 801c2aa:	0092      	lsls	r2, r2, #2
 801c2ac:	f004 fd42 	bl	8020d34 <memset>
 801c2b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	631a      	str	r2, [r3, #48]	; 0x30
 801c2b6:	6920      	ldr	r0, [r4, #16]
 801c2b8:	b138      	cbz	r0, 801c2ca <rcl_wait_set_clear+0x86>
 801c2ba:	6962      	ldr	r2, [r4, #20]
 801c2bc:	2100      	movs	r1, #0
 801c2be:	0092      	lsls	r2, r2, #2
 801c2c0:	f004 fd38 	bl	8020d34 <memset>
 801c2c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	641a      	str	r2, [r3, #64]	; 0x40
 801c2ca:	6898      	ldr	r0, [r3, #8]
 801c2cc:	b138      	cbz	r0, 801c2de <rcl_wait_set_clear+0x9a>
 801c2ce:	685a      	ldr	r2, [r3, #4]
 801c2d0:	2100      	movs	r1, #0
 801c2d2:	0092      	lsls	r2, r2, #2
 801c2d4:	f004 fd2e 	bl	8020d34 <memset>
 801c2d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2da:	2200      	movs	r2, #0
 801c2dc:	605a      	str	r2, [r3, #4]
 801c2de:	6958      	ldr	r0, [r3, #20]
 801c2e0:	b138      	cbz	r0, 801c2f2 <rcl_wait_set_clear+0xae>
 801c2e2:	691a      	ldr	r2, [r3, #16]
 801c2e4:	2100      	movs	r1, #0
 801c2e6:	0092      	lsls	r2, r2, #2
 801c2e8:	f004 fd24 	bl	8020d34 <memset>
 801c2ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	611a      	str	r2, [r3, #16]
 801c2f2:	6a18      	ldr	r0, [r3, #32]
 801c2f4:	b138      	cbz	r0, 801c306 <rcl_wait_set_clear+0xc2>
 801c2f6:	69da      	ldr	r2, [r3, #28]
 801c2f8:	2100      	movs	r1, #0
 801c2fa:	0092      	lsls	r2, r2, #2
 801c2fc:	f004 fd1a 	bl	8020d34 <memset>
 801c300:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c302:	2200      	movs	r2, #0
 801c304:	61da      	str	r2, [r3, #28]
 801c306:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c308:	b138      	cbz	r0, 801c31a <rcl_wait_set_clear+0xd6>
 801c30a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c30c:	2100      	movs	r1, #0
 801c30e:	0092      	lsls	r2, r2, #2
 801c310:	f004 fd10 	bl	8020d34 <memset>
 801c314:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c316:	2200      	movs	r2, #0
 801c318:	629a      	str	r2, [r3, #40]	; 0x28
 801c31a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c31c:	b140      	cbz	r0, 801c330 <rcl_wait_set_clear+0xec>
 801c31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c320:	2100      	movs	r1, #0
 801c322:	0092      	lsls	r2, r2, #2
 801c324:	f004 fd06 	bl	8020d34 <memset>
 801c328:	2300      	movs	r3, #0
 801c32a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c32c:	4618      	mov	r0, r3
 801c32e:	6353      	str	r3, [r2, #52]	; 0x34
 801c330:	bd10      	pop	{r4, pc}
 801c332:	200b      	movs	r0, #11
 801c334:	4770      	bx	lr
 801c336:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c33a:	bd10      	pop	{r4, pc}

0801c33c <rcl_wait_set_resize>:
 801c33c:	2800      	cmp	r0, #0
 801c33e:	f000 8180 	beq.w	801c642 <rcl_wait_set_resize+0x306>
 801c342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c346:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c348:	b083      	sub	sp, #12
 801c34a:	4605      	mov	r5, r0
 801c34c:	2c00      	cmp	r4, #0
 801c34e:	f000 817a 	beq.w	801c646 <rcl_wait_set_resize+0x30a>
 801c352:	f04f 0900 	mov.w	r9, #0
 801c356:	461f      	mov	r7, r3
 801c358:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c35c:	4688      	mov	r8, r1
 801c35e:	4616      	mov	r6, r2
 801c360:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c364:	f8c0 9004 	str.w	r9, [r0, #4]
 801c368:	f8c4 9000 	str.w	r9, [r4]
 801c36c:	2900      	cmp	r1, #0
 801c36e:	f000 80bf 	beq.w	801c4f0 <rcl_wait_set_resize+0x1b4>
 801c372:	008c      	lsls	r4, r1, #2
 801c374:	4652      	mov	r2, sl
 801c376:	6800      	ldr	r0, [r0, #0]
 801c378:	4621      	mov	r1, r4
 801c37a:	9301      	str	r3, [sp, #4]
 801c37c:	4798      	blx	r3
 801c37e:	9b01      	ldr	r3, [sp, #4]
 801c380:	6028      	str	r0, [r5, #0]
 801c382:	2800      	cmp	r0, #0
 801c384:	f000 80f6 	beq.w	801c574 <rcl_wait_set_resize+0x238>
 801c388:	4622      	mov	r2, r4
 801c38a:	4649      	mov	r1, r9
 801c38c:	9301      	str	r3, [sp, #4]
 801c38e:	f004 fcd1 	bl	8020d34 <memset>
 801c392:	f8c5 8004 	str.w	r8, [r5, #4]
 801c396:	4652      	mov	r2, sl
 801c398:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c39c:	4621      	mov	r1, r4
 801c39e:	9b01      	ldr	r3, [sp, #4]
 801c3a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c3a4:	f8c8 9004 	str.w	r9, [r8, #4]
 801c3a8:	4798      	blx	r3
 801c3aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c3ac:	f8c8 0008 	str.w	r0, [r8, #8]
 801c3b0:	689b      	ldr	r3, [r3, #8]
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	f000 814a 	beq.w	801c64c <rcl_wait_set_resize+0x310>
 801c3b8:	4622      	mov	r2, r4
 801c3ba:	4649      	mov	r1, r9
 801c3bc:	4618      	mov	r0, r3
 801c3be:	f004 fcb9 	bl	8020d34 <memset>
 801c3c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3c4:	f04f 0800 	mov.w	r8, #0
 801c3c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c3cc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c3d0:	f8c5 800c 	str.w	r8, [r5, #12]
 801c3d4:	f8c4 800c 	str.w	r8, [r4, #12]
 801c3d8:	2e00      	cmp	r6, #0
 801c3da:	f040 809b 	bne.w	801c514 <rcl_wait_set_resize+0x1d8>
 801c3de:	68a8      	ldr	r0, [r5, #8]
 801c3e0:	b128      	cbz	r0, 801c3ee <rcl_wait_set_resize+0xb2>
 801c3e2:	4649      	mov	r1, r9
 801c3e4:	4790      	blx	r2
 801c3e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3e8:	60ae      	str	r6, [r5, #8]
 801c3ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c3ee:	f04f 0800 	mov.w	r8, #0
 801c3f2:	19f6      	adds	r6, r6, r7
 801c3f4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c3f8:	f040 80a2 	bne.w	801c540 <rcl_wait_set_resize+0x204>
 801c3fc:	6960      	ldr	r0, [r4, #20]
 801c3fe:	b130      	cbz	r0, 801c40e <rcl_wait_set_resize+0xd2>
 801c400:	4649      	mov	r1, r9
 801c402:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c404:	4798      	blx	r3
 801c406:	6166      	str	r6, [r4, #20]
 801c408:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c40a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c40e:	2600      	movs	r6, #0
 801c410:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c414:	616e      	str	r6, [r5, #20]
 801c416:	6426      	str	r6, [r4, #64]	; 0x40
 801c418:	2f00      	cmp	r7, #0
 801c41a:	f040 80af 	bne.w	801c57c <rcl_wait_set_resize+0x240>
 801c41e:	6928      	ldr	r0, [r5, #16]
 801c420:	b138      	cbz	r0, 801c432 <rcl_wait_set_resize+0xf6>
 801c422:	4649      	mov	r1, r9
 801c424:	47d0      	blx	sl
 801c426:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c428:	612f      	str	r7, [r5, #16]
 801c42a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c42e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c432:	2600      	movs	r6, #0
 801c434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c436:	61ee      	str	r6, [r5, #28]
 801c438:	61a6      	str	r6, [r4, #24]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	f040 8093 	bne.w	801c566 <rcl_wait_set_resize+0x22a>
 801c440:	69a8      	ldr	r0, [r5, #24]
 801c442:	b120      	cbz	r0, 801c44e <rcl_wait_set_resize+0x112>
 801c444:	4649      	mov	r1, r9
 801c446:	47d0      	blx	sl
 801c448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c44a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c44c:	61ab      	str	r3, [r5, #24]
 801c44e:	6a20      	ldr	r0, [r4, #32]
 801c450:	b128      	cbz	r0, 801c45e <rcl_wait_set_resize+0x122>
 801c452:	4649      	mov	r1, r9
 801c454:	47d0      	blx	sl
 801c456:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c458:	2300      	movs	r3, #0
 801c45a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c45e:	2600      	movs	r6, #0
 801c460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c462:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c464:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c468:	626e      	str	r6, [r5, #36]	; 0x24
 801c46a:	6266      	str	r6, [r4, #36]	; 0x24
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	f000 8098 	beq.w	801c5a2 <rcl_wait_set_resize+0x266>
 801c472:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c476:	463a      	mov	r2, r7
 801c478:	6a28      	ldr	r0, [r5, #32]
 801c47a:	4651      	mov	r1, sl
 801c47c:	47c8      	blx	r9
 801c47e:	6228      	str	r0, [r5, #32]
 801c480:	2800      	cmp	r0, #0
 801c482:	d077      	beq.n	801c574 <rcl_wait_set_resize+0x238>
 801c484:	4652      	mov	r2, sl
 801c486:	4631      	mov	r1, r6
 801c488:	f004 fc54 	bl	8020d34 <memset>
 801c48c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c490:	463a      	mov	r2, r7
 801c492:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c494:	4651      	mov	r1, sl
 801c496:	626b      	str	r3, [r5, #36]	; 0x24
 801c498:	62a6      	str	r6, [r4, #40]	; 0x28
 801c49a:	47c8      	blx	r9
 801c49c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c49e:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c4a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c4a2:	2c00      	cmp	r4, #0
 801c4a4:	f000 80f2 	beq.w	801c68c <rcl_wait_set_resize+0x350>
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	4652      	mov	r2, sl
 801c4ac:	4631      	mov	r1, r6
 801c4ae:	f004 fc41 	bl	8020d34 <memset>
 801c4b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4b4:	2600      	movs	r6, #0
 801c4b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4b8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c4ba:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c4be:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c4c0:	6326      	str	r6, [r4, #48]	; 0x30
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	f040 8097 	bne.w	801c5f6 <rcl_wait_set_resize+0x2ba>
 801c4c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c4ca:	b120      	cbz	r0, 801c4d6 <rcl_wait_set_resize+0x19a>
 801c4cc:	4639      	mov	r1, r7
 801c4ce:	47c0      	blx	r8
 801c4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4d4:	62ab      	str	r3, [r5, #40]	; 0x28
 801c4d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	d04c      	beq.n	801c576 <rcl_wait_set_resize+0x23a>
 801c4dc:	4639      	mov	r1, r7
 801c4de:	47c0      	blx	r8
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c4ea:	b003      	add	sp, #12
 801c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4f0:	6800      	ldr	r0, [r0, #0]
 801c4f2:	b120      	cbz	r0, 801c4fe <rcl_wait_set_resize+0x1c2>
 801c4f4:	4651      	mov	r1, sl
 801c4f6:	47d8      	blx	fp
 801c4f8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4fa:	f8c5 8000 	str.w	r8, [r5]
 801c4fe:	68a0      	ldr	r0, [r4, #8]
 801c500:	2800      	cmp	r0, #0
 801c502:	f43f af5f 	beq.w	801c3c4 <rcl_wait_set_resize+0x88>
 801c506:	4651      	mov	r1, sl
 801c508:	47d8      	blx	fp
 801c50a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c50c:	2300      	movs	r3, #0
 801c50e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c512:	e757      	b.n	801c3c4 <rcl_wait_set_resize+0x88>
 801c514:	00b4      	lsls	r4, r6, #2
 801c516:	464a      	mov	r2, r9
 801c518:	68a8      	ldr	r0, [r5, #8]
 801c51a:	4621      	mov	r1, r4
 801c51c:	4798      	blx	r3
 801c51e:	60a8      	str	r0, [r5, #8]
 801c520:	b340      	cbz	r0, 801c574 <rcl_wait_set_resize+0x238>
 801c522:	4622      	mov	r2, r4
 801c524:	4641      	mov	r1, r8
 801c526:	f004 fc05 	bl	8020d34 <memset>
 801c52a:	f04f 0800 	mov.w	r8, #0
 801c52e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c530:	60ee      	str	r6, [r5, #12]
 801c532:	19f6      	adds	r6, r6, r7
 801c534:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c538:	f8c4 8010 	str.w	r8, [r4, #16]
 801c53c:	f43f af5e 	beq.w	801c3fc <rcl_wait_set_resize+0xc0>
 801c540:	00b6      	lsls	r6, r6, #2
 801c542:	464a      	mov	r2, r9
 801c544:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c546:	6960      	ldr	r0, [r4, #20]
 801c548:	4631      	mov	r1, r6
 801c54a:	4798      	blx	r3
 801c54c:	4681      	mov	r9, r0
 801c54e:	6160      	str	r0, [r4, #20]
 801c550:	2800      	cmp	r0, #0
 801c552:	f000 8084 	beq.w	801c65e <rcl_wait_set_resize+0x322>
 801c556:	4632      	mov	r2, r6
 801c558:	4641      	mov	r1, r8
 801c55a:	f004 fbeb 	bl	8020d34 <memset>
 801c55e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c560:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c564:	e753      	b.n	801c40e <rcl_wait_set_resize+0xd2>
 801c566:	009c      	lsls	r4, r3, #2
 801c568:	464a      	mov	r2, r9
 801c56a:	69a8      	ldr	r0, [r5, #24]
 801c56c:	4621      	mov	r1, r4
 801c56e:	47c0      	blx	r8
 801c570:	61a8      	str	r0, [r5, #24]
 801c572:	bb40      	cbnz	r0, 801c5c6 <rcl_wait_set_resize+0x28a>
 801c574:	200a      	movs	r0, #10
 801c576:	b003      	add	sp, #12
 801c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c57c:	00bc      	lsls	r4, r7, #2
 801c57e:	464a      	mov	r2, r9
 801c580:	6928      	ldr	r0, [r5, #16]
 801c582:	4621      	mov	r1, r4
 801c584:	47c0      	blx	r8
 801c586:	6128      	str	r0, [r5, #16]
 801c588:	2800      	cmp	r0, #0
 801c58a:	d0f3      	beq.n	801c574 <rcl_wait_set_resize+0x238>
 801c58c:	4622      	mov	r2, r4
 801c58e:	4631      	mov	r1, r6
 801c590:	f004 fbd0 	bl	8020d34 <memset>
 801c594:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c596:	616f      	str	r7, [r5, #20]
 801c598:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c59c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c5a0:	e747      	b.n	801c432 <rcl_wait_set_resize+0xf6>
 801c5a2:	6a28      	ldr	r0, [r5, #32]
 801c5a4:	b120      	cbz	r0, 801c5b0 <rcl_wait_set_resize+0x274>
 801c5a6:	4639      	mov	r1, r7
 801c5a8:	47c0      	blx	r8
 801c5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c5ac:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5ae:	622b      	str	r3, [r5, #32]
 801c5b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c5b2:	2800      	cmp	r0, #0
 801c5b4:	f43f af7e 	beq.w	801c4b4 <rcl_wait_set_resize+0x178>
 801c5b8:	4639      	mov	r1, r7
 801c5ba:	47c0      	blx	r8
 801c5bc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5be:	2300      	movs	r3, #0
 801c5c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c5c4:	e776      	b.n	801c4b4 <rcl_wait_set_resize+0x178>
 801c5c6:	4622      	mov	r2, r4
 801c5c8:	4631      	mov	r1, r6
 801c5ca:	f004 fbb3 	bl	8020d34 <memset>
 801c5ce:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c5d2:	464a      	mov	r2, r9
 801c5d4:	6a38      	ldr	r0, [r7, #32]
 801c5d6:	4621      	mov	r1, r4
 801c5d8:	61eb      	str	r3, [r5, #28]
 801c5da:	61fe      	str	r6, [r7, #28]
 801c5dc:	47c0      	blx	r8
 801c5de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c5e0:	6238      	str	r0, [r7, #32]
 801c5e2:	6a1f      	ldr	r7, [r3, #32]
 801c5e4:	2f00      	cmp	r7, #0
 801c5e6:	d04a      	beq.n	801c67e <rcl_wait_set_resize+0x342>
 801c5e8:	4622      	mov	r2, r4
 801c5ea:	4631      	mov	r1, r6
 801c5ec:	4638      	mov	r0, r7
 801c5ee:	f004 fba1 	bl	8020d34 <memset>
 801c5f2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5f4:	e733      	b.n	801c45e <rcl_wait_set_resize+0x122>
 801c5f6:	009c      	lsls	r4, r3, #2
 801c5f8:	463a      	mov	r2, r7
 801c5fa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c5fc:	4621      	mov	r1, r4
 801c5fe:	47c8      	blx	r9
 801c600:	62a8      	str	r0, [r5, #40]	; 0x28
 801c602:	2800      	cmp	r0, #0
 801c604:	d0b6      	beq.n	801c574 <rcl_wait_set_resize+0x238>
 801c606:	4622      	mov	r2, r4
 801c608:	4631      	mov	r1, r6
 801c60a:	f004 fb93 	bl	8020d34 <memset>
 801c60e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c614:	463a      	mov	r2, r7
 801c616:	4621      	mov	r1, r4
 801c618:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c61c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c61e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c622:	47c8      	blx	r9
 801c624:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c626:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d034      	beq.n	801c69a <rcl_wait_set_resize+0x35e>
 801c630:	4622      	mov	r2, r4
 801c632:	4631      	mov	r1, r6
 801c634:	4618      	mov	r0, r3
 801c636:	f004 fb7d 	bl	8020d34 <memset>
 801c63a:	4630      	mov	r0, r6
 801c63c:	b003      	add	sp, #12
 801c63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c642:	200b      	movs	r0, #11
 801c644:	4770      	bx	lr
 801c646:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c64a:	e794      	b.n	801c576 <rcl_wait_set_resize+0x23a>
 801c64c:	6828      	ldr	r0, [r5, #0]
 801c64e:	4651      	mov	r1, sl
 801c650:	9301      	str	r3, [sp, #4]
 801c652:	47d8      	blx	fp
 801c654:	9b01      	ldr	r3, [sp, #4]
 801c656:	200a      	movs	r0, #10
 801c658:	e9c5 3300 	strd	r3, r3, [r5]
 801c65c:	e78b      	b.n	801c576 <rcl_wait_set_resize+0x23a>
 801c65e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c660:	68a8      	ldr	r0, [r5, #8]
 801c662:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c666:	4798      	blx	r3
 801c668:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c66a:	6928      	ldr	r0, [r5, #16]
 801c66c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c66e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c670:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c674:	4790      	blx	r2
 801c676:	200a      	movs	r0, #10
 801c678:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c67c:	e77b      	b.n	801c576 <rcl_wait_set_resize+0x23a>
 801c67e:	69a8      	ldr	r0, [r5, #24]
 801c680:	4649      	mov	r1, r9
 801c682:	47d0      	blx	sl
 801c684:	200a      	movs	r0, #10
 801c686:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c68a:	e774      	b.n	801c576 <rcl_wait_set_resize+0x23a>
 801c68c:	6a28      	ldr	r0, [r5, #32]
 801c68e:	4639      	mov	r1, r7
 801c690:	47c0      	blx	r8
 801c692:	200a      	movs	r0, #10
 801c694:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c698:	e76d      	b.n	801c576 <rcl_wait_set_resize+0x23a>
 801c69a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c69c:	4639      	mov	r1, r7
 801c69e:	9301      	str	r3, [sp, #4]
 801c6a0:	47c0      	blx	r8
 801c6a2:	9b01      	ldr	r3, [sp, #4]
 801c6a4:	200a      	movs	r0, #10
 801c6a6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c6aa:	e764      	b.n	801c576 <rcl_wait_set_resize+0x23a>

0801c6ac <rcl_wait_set_init>:
 801c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6b0:	b085      	sub	sp, #20
 801c6b2:	4605      	mov	r5, r0
 801c6b4:	460e      	mov	r6, r1
 801c6b6:	4617      	mov	r7, r2
 801c6b8:	a812      	add	r0, sp, #72	; 0x48
 801c6ba:	4698      	mov	r8, r3
 801c6bc:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c6c0:	f7f8 fca4 	bl	801500c <rcutils_allocator_is_valid>
 801c6c4:	2d00      	cmp	r5, #0
 801c6c6:	d072      	beq.n	801c7ae <rcl_wait_set_init+0x102>
 801c6c8:	f080 0001 	eor.w	r0, r0, #1
 801c6cc:	b2c0      	uxtb	r0, r0
 801c6ce:	2800      	cmp	r0, #0
 801c6d0:	d16d      	bne.n	801c7ae <rcl_wait_set_init+0x102>
 801c6d2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c6d6:	f1ba 0f00 	cmp.w	sl, #0
 801c6da:	d004      	beq.n	801c6e6 <rcl_wait_set_init+0x3a>
 801c6dc:	2464      	movs	r4, #100	; 0x64
 801c6de:	4620      	mov	r0, r4
 801c6e0:	b005      	add	sp, #20
 801c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6e6:	f1b9 0f00 	cmp.w	r9, #0
 801c6ea:	d060      	beq.n	801c7ae <rcl_wait_set_init+0x102>
 801c6ec:	4648      	mov	r0, r9
 801c6ee:	f7fe fe8f 	bl	801b410 <rcl_context_is_valid>
 801c6f2:	2800      	cmp	r0, #0
 801c6f4:	d068      	beq.n	801c7c8 <rcl_wait_set_init+0x11c>
 801c6f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c6f8:	205c      	movs	r0, #92	; 0x5c
 801c6fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c6fc:	4798      	blx	r3
 801c6fe:	6328      	str	r0, [r5, #48]	; 0x30
 801c700:	2800      	cmp	r0, #0
 801c702:	d063      	beq.n	801c7cc <rcl_wait_set_init+0x120>
 801c704:	225c      	movs	r2, #92	; 0x5c
 801c706:	4651      	mov	r1, sl
 801c708:	f004 fb14 	bl	8020d34 <memset>
 801c70c:	ac12      	add	r4, sp, #72	; 0x48
 801c70e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c712:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c716:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c71a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c71e:	eb03 0e02 	add.w	lr, r3, r2
 801c722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c724:	f8d9 9000 	ldr.w	r9, [r9]
 801c728:	449e      	add	lr, r3
 801c72a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c72c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c730:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c734:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c738:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c73c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c740:	44be      	add	lr, r7
 801c742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c746:	6823      	ldr	r3, [r4, #0]
 801c748:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c74c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c750:	f8cc 3000 	str.w	r3, [ip]
 801c754:	f001 fe6e 	bl	801e434 <rmw_create_wait_set>
 801c758:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c75a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c75e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c760:	b350      	cbz	r0, 801c7b8 <rcl_wait_set_init+0x10c>
 801c762:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c764:	4643      	mov	r3, r8
 801c766:	463a      	mov	r2, r7
 801c768:	4631      	mov	r1, r6
 801c76a:	9402      	str	r4, [sp, #8]
 801c76c:	4628      	mov	r0, r5
 801c76e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c770:	9401      	str	r4, [sp, #4]
 801c772:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c774:	9400      	str	r4, [sp, #0]
 801c776:	f7ff fde1 	bl	801c33c <rcl_wait_set_resize>
 801c77a:	4604      	mov	r4, r0
 801c77c:	2800      	cmp	r0, #0
 801c77e:	d0ae      	beq.n	801c6de <rcl_wait_set_init+0x32>
 801c780:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c782:	bb2b      	cbnz	r3, 801c7d0 <rcl_wait_set_init+0x124>
 801c784:	2600      	movs	r6, #0
 801c786:	4628      	mov	r0, r5
 801c788:	4633      	mov	r3, r6
 801c78a:	4632      	mov	r2, r6
 801c78c:	4631      	mov	r1, r6
 801c78e:	9600      	str	r6, [sp, #0]
 801c790:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801c794:	f7ff fdd2 	bl	801c33c <rcl_wait_set_resize>
 801c798:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c79a:	2800      	cmp	r0, #0
 801c79c:	d09f      	beq.n	801c6de <rcl_wait_set_init+0x32>
 801c79e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801c7a0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801c7a2:	4798      	blx	r3
 801c7a4:	4620      	mov	r0, r4
 801c7a6:	632e      	str	r6, [r5, #48]	; 0x30
 801c7a8:	b005      	add	sp, #20
 801c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7ae:	240b      	movs	r4, #11
 801c7b0:	4620      	mov	r0, r4
 801c7b2:	b005      	add	sp, #20
 801c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7b8:	2401      	movs	r4, #1
 801c7ba:	f001 fe45 	bl	801e448 <rmw_destroy_wait_set>
 801c7be:	2800      	cmp	r0, #0
 801c7c0:	bf18      	it	ne
 801c7c2:	f44f 7461 	movne.w	r4, #900	; 0x384
 801c7c6:	e7dd      	b.n	801c784 <rcl_wait_set_init+0xd8>
 801c7c8:	2465      	movs	r4, #101	; 0x65
 801c7ca:	e788      	b.n	801c6de <rcl_wait_set_init+0x32>
 801c7cc:	240a      	movs	r4, #10
 801c7ce:	e786      	b.n	801c6de <rcl_wait_set_init+0x32>
 801c7d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c7d2:	e7f2      	b.n	801c7ba <rcl_wait_set_init+0x10e>

0801c7d4 <rcl_wait_set_add_guard_condition>:
 801c7d4:	b318      	cbz	r0, 801c81e <rcl_wait_set_add_guard_condition+0x4a>
 801c7d6:	b538      	push	{r3, r4, r5, lr}
 801c7d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c7da:	4604      	mov	r4, r0
 801c7dc:	b30b      	cbz	r3, 801c822 <rcl_wait_set_add_guard_condition+0x4e>
 801c7de:	b319      	cbz	r1, 801c828 <rcl_wait_set_add_guard_condition+0x54>
 801c7e0:	68dd      	ldr	r5, [r3, #12]
 801c7e2:	68c0      	ldr	r0, [r0, #12]
 801c7e4:	4285      	cmp	r5, r0
 801c7e6:	d217      	bcs.n	801c818 <rcl_wait_set_add_guard_condition+0x44>
 801c7e8:	1c68      	adds	r0, r5, #1
 801c7ea:	60d8      	str	r0, [r3, #12]
 801c7ec:	68a3      	ldr	r3, [r4, #8]
 801c7ee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c7f2:	b102      	cbz	r2, 801c7f6 <rcl_wait_set_add_guard_condition+0x22>
 801c7f4:	6015      	str	r5, [r2, #0]
 801c7f6:	4608      	mov	r0, r1
 801c7f8:	f7fe ff18 	bl	801b62c <rcl_guard_condition_get_rmw_handle>
 801c7fc:	b150      	cbz	r0, 801c814 <rcl_wait_set_add_guard_condition+0x40>
 801c7fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c800:	6842      	ldr	r2, [r0, #4]
 801c802:	2000      	movs	r0, #0
 801c804:	695b      	ldr	r3, [r3, #20]
 801c806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c80a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c80c:	6913      	ldr	r3, [r2, #16]
 801c80e:	3301      	adds	r3, #1
 801c810:	6113      	str	r3, [r2, #16]
 801c812:	bd38      	pop	{r3, r4, r5, pc}
 801c814:	2001      	movs	r0, #1
 801c816:	bd38      	pop	{r3, r4, r5, pc}
 801c818:	f240 3086 	movw	r0, #902	; 0x386
 801c81c:	bd38      	pop	{r3, r4, r5, pc}
 801c81e:	200b      	movs	r0, #11
 801c820:	4770      	bx	lr
 801c822:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c826:	bd38      	pop	{r3, r4, r5, pc}
 801c828:	200b      	movs	r0, #11
 801c82a:	bd38      	pop	{r3, r4, r5, pc}

0801c82c <rcl_wait_set_add_timer>:
 801c82c:	b328      	cbz	r0, 801c87a <rcl_wait_set_add_timer+0x4e>
 801c82e:	b538      	push	{r3, r4, r5, lr}
 801c830:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c832:	4604      	mov	r4, r0
 801c834:	b31b      	cbz	r3, 801c87e <rcl_wait_set_add_timer+0x52>
 801c836:	b329      	cbz	r1, 801c884 <rcl_wait_set_add_timer+0x58>
 801c838:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801c83a:	6965      	ldr	r5, [r4, #20]
 801c83c:	42a8      	cmp	r0, r5
 801c83e:	d219      	bcs.n	801c874 <rcl_wait_set_add_timer+0x48>
 801c840:	1c45      	adds	r5, r0, #1
 801c842:	641d      	str	r5, [r3, #64]	; 0x40
 801c844:	6923      	ldr	r3, [r4, #16]
 801c846:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801c84a:	b102      	cbz	r2, 801c84e <rcl_wait_set_add_timer+0x22>
 801c84c:	6010      	str	r0, [r2, #0]
 801c84e:	4608      	mov	r0, r1
 801c850:	f7ff fb9a 	bl	801bf88 <rcl_timer_get_guard_condition>
 801c854:	b168      	cbz	r0, 801c872 <rcl_wait_set_add_timer+0x46>
 801c856:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c858:	68e3      	ldr	r3, [r4, #12]
 801c85a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801c85c:	3b01      	subs	r3, #1
 801c85e:	441d      	add	r5, r3
 801c860:	f7fe fee4 	bl	801b62c <rcl_guard_condition_get_rmw_handle>
 801c864:	b180      	cbz	r0, 801c888 <rcl_wait_set_add_timer+0x5c>
 801c866:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c868:	6842      	ldr	r2, [r0, #4]
 801c86a:	2000      	movs	r0, #0
 801c86c:	695b      	ldr	r3, [r3, #20]
 801c86e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c872:	bd38      	pop	{r3, r4, r5, pc}
 801c874:	f240 3086 	movw	r0, #902	; 0x386
 801c878:	bd38      	pop	{r3, r4, r5, pc}
 801c87a:	200b      	movs	r0, #11
 801c87c:	4770      	bx	lr
 801c87e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c882:	bd38      	pop	{r3, r4, r5, pc}
 801c884:	200b      	movs	r0, #11
 801c886:	bd38      	pop	{r3, r4, r5, pc}
 801c888:	2001      	movs	r0, #1
 801c88a:	bd38      	pop	{r3, r4, r5, pc}

0801c88c <rcl_wait_set_add_client>:
 801c88c:	b318      	cbz	r0, 801c8d6 <rcl_wait_set_add_client+0x4a>
 801c88e:	b538      	push	{r3, r4, r5, lr}
 801c890:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c892:	4604      	mov	r4, r0
 801c894:	b30b      	cbz	r3, 801c8da <rcl_wait_set_add_client+0x4e>
 801c896:	b319      	cbz	r1, 801c8e0 <rcl_wait_set_add_client+0x54>
 801c898:	699d      	ldr	r5, [r3, #24]
 801c89a:	69c0      	ldr	r0, [r0, #28]
 801c89c:	4285      	cmp	r5, r0
 801c89e:	d217      	bcs.n	801c8d0 <rcl_wait_set_add_client+0x44>
 801c8a0:	1c68      	adds	r0, r5, #1
 801c8a2:	6198      	str	r0, [r3, #24]
 801c8a4:	69a3      	ldr	r3, [r4, #24]
 801c8a6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c8aa:	b102      	cbz	r2, 801c8ae <rcl_wait_set_add_client+0x22>
 801c8ac:	6015      	str	r5, [r2, #0]
 801c8ae:	4608      	mov	r0, r1
 801c8b0:	f7fe fd00 	bl	801b2b4 <rcl_client_get_rmw_handle>
 801c8b4:	b150      	cbz	r0, 801c8cc <rcl_wait_set_add_client+0x40>
 801c8b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c8b8:	6842      	ldr	r2, [r0, #4]
 801c8ba:	2000      	movs	r0, #0
 801c8bc:	6a1b      	ldr	r3, [r3, #32]
 801c8be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c8c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c8c4:	69d3      	ldr	r3, [r2, #28]
 801c8c6:	3301      	adds	r3, #1
 801c8c8:	61d3      	str	r3, [r2, #28]
 801c8ca:	bd38      	pop	{r3, r4, r5, pc}
 801c8cc:	2001      	movs	r0, #1
 801c8ce:	bd38      	pop	{r3, r4, r5, pc}
 801c8d0:	f240 3086 	movw	r0, #902	; 0x386
 801c8d4:	bd38      	pop	{r3, r4, r5, pc}
 801c8d6:	200b      	movs	r0, #11
 801c8d8:	4770      	bx	lr
 801c8da:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c8de:	bd38      	pop	{r3, r4, r5, pc}
 801c8e0:	200b      	movs	r0, #11
 801c8e2:	bd38      	pop	{r3, r4, r5, pc}

0801c8e4 <rcl_wait_set_add_service>:
 801c8e4:	b318      	cbz	r0, 801c92e <rcl_wait_set_add_service+0x4a>
 801c8e6:	b538      	push	{r3, r4, r5, lr}
 801c8e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c8ea:	4604      	mov	r4, r0
 801c8ec:	b30b      	cbz	r3, 801c932 <rcl_wait_set_add_service+0x4e>
 801c8ee:	b319      	cbz	r1, 801c938 <rcl_wait_set_add_service+0x54>
 801c8f0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c8f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c8f4:	4285      	cmp	r5, r0
 801c8f6:	d217      	bcs.n	801c928 <rcl_wait_set_add_service+0x44>
 801c8f8:	1c68      	adds	r0, r5, #1
 801c8fa:	6258      	str	r0, [r3, #36]	; 0x24
 801c8fc:	6a23      	ldr	r3, [r4, #32]
 801c8fe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c902:	b102      	cbz	r2, 801c906 <rcl_wait_set_add_service+0x22>
 801c904:	6015      	str	r5, [r2, #0]
 801c906:	4608      	mov	r0, r1
 801c908:	f7f7 f9f8 	bl	8013cfc <rcl_service_get_rmw_handle>
 801c90c:	b150      	cbz	r0, 801c924 <rcl_wait_set_add_service+0x40>
 801c90e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c910:	6842      	ldr	r2, [r0, #4]
 801c912:	2000      	movs	r0, #0
 801c914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c91a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c91c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801c91e:	3301      	adds	r3, #1
 801c920:	6293      	str	r3, [r2, #40]	; 0x28
 801c922:	bd38      	pop	{r3, r4, r5, pc}
 801c924:	2001      	movs	r0, #1
 801c926:	bd38      	pop	{r3, r4, r5, pc}
 801c928:	f240 3086 	movw	r0, #902	; 0x386
 801c92c:	bd38      	pop	{r3, r4, r5, pc}
 801c92e:	200b      	movs	r0, #11
 801c930:	4770      	bx	lr
 801c932:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c936:	bd38      	pop	{r3, r4, r5, pc}
 801c938:	200b      	movs	r0, #11
 801c93a:	bd38      	pop	{r3, r4, r5, pc}
 801c93c:	0000      	movs	r0, r0
	...

0801c940 <rcl_wait>:
 801c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c944:	ed2d 8b02 	vpush	{d8}
 801c948:	b08d      	sub	sp, #52	; 0x34
 801c94a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c94e:	2800      	cmp	r0, #0
 801c950:	f000 814f 	beq.w	801cbf2 <rcl_wait+0x2b2>
 801c954:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c956:	4605      	mov	r5, r0
 801c958:	2e00      	cmp	r6, #0
 801c95a:	f000 811a 	beq.w	801cb92 <rcl_wait+0x252>
 801c95e:	6843      	ldr	r3, [r0, #4]
 801c960:	b983      	cbnz	r3, 801c984 <rcl_wait+0x44>
 801c962:	68eb      	ldr	r3, [r5, #12]
 801c964:	b973      	cbnz	r3, 801c984 <rcl_wait+0x44>
 801c966:	696b      	ldr	r3, [r5, #20]
 801c968:	b963      	cbnz	r3, 801c984 <rcl_wait+0x44>
 801c96a:	69eb      	ldr	r3, [r5, #28]
 801c96c:	b953      	cbnz	r3, 801c984 <rcl_wait+0x44>
 801c96e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c970:	b943      	cbnz	r3, 801c984 <rcl_wait+0x44>
 801c972:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801c974:	b933      	cbnz	r3, 801c984 <rcl_wait+0x44>
 801c976:	f240 3085 	movw	r0, #901	; 0x385
 801c97a:	b00d      	add	sp, #52	; 0x34
 801c97c:	ecbd 8b02 	vpop	{d8}
 801c980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c984:	9b04      	ldr	r3, [sp, #16]
 801c986:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801c988:	2b01      	cmp	r3, #1
 801c98a:	9b05      	ldr	r3, [sp, #20]
 801c98c:	f173 0300 	sbcs.w	r3, r3, #0
 801c990:	f2c0 80f8 	blt.w	801cb84 <rcl_wait+0x244>
 801c994:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801c998:	2a00      	cmp	r2, #0
 801c99a:	f000 810f 	beq.w	801cbbc <rcl_wait+0x27c>
 801c99e:	2400      	movs	r4, #0
 801c9a0:	4613      	mov	r3, r2
 801c9a2:	f240 3921 	movw	r9, #801	; 0x321
 801c9a6:	4632      	mov	r2, r6
 801c9a8:	46a2      	mov	sl, r4
 801c9aa:	46a3      	mov	fp, r4
 801c9ac:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801cc10 <rcl_wait+0x2d0>
 801c9b0:	e014      	b.n	801c9dc <rcl_wait+0x9c>
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	d1e1      	bne.n	801c97a <rcl_wait+0x3a>
 801c9b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c9ba:	4542      	cmp	r2, r8
 801c9bc:	eb73 0107 	sbcs.w	r1, r3, r7
 801c9c0:	da03      	bge.n	801c9ca <rcl_wait+0x8a>
 801c9c2:	4690      	mov	r8, r2
 801c9c4:	461f      	mov	r7, r3
 801c9c6:	f04f 0b01 	mov.w	fp, #1
 801c9ca:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c9cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801c9ce:	3401      	adds	r4, #1
 801c9d0:	f14a 0a00 	adc.w	sl, sl, #0
 801c9d4:	429c      	cmp	r4, r3
 801c9d6:	f17a 0100 	sbcs.w	r1, sl, #0
 801c9da:	d228      	bcs.n	801ca2e <rcl_wait+0xee>
 801c9dc:	6928      	ldr	r0, [r5, #16]
 801c9de:	a908      	add	r1, sp, #32
 801c9e0:	00a6      	lsls	r6, r4, #2
 801c9e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801c9e6:	2800      	cmp	r0, #0
 801c9e8:	d0f1      	beq.n	801c9ce <rcl_wait+0x8e>
 801c9ea:	68eb      	ldr	r3, [r5, #12]
 801c9ec:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801c9f0:	4423      	add	r3, r4
 801c9f2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801c9f6:	f1be 0f00 	cmp.w	lr, #0
 801c9fa:	d006      	beq.n	801ca0a <rcl_wait+0xca>
 801c9fc:	6913      	ldr	r3, [r2, #16]
 801c9fe:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ca02:	3301      	adds	r3, #1
 801ca04:	6113      	str	r3, [r2, #16]
 801ca06:	692b      	ldr	r3, [r5, #16]
 801ca08:	5998      	ldr	r0, [r3, r6]
 801ca0a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ca0e:	f7ff fa89 	bl	801bf24 <rcl_timer_get_time_until_next_call>
 801ca12:	4548      	cmp	r0, r9
 801ca14:	d1cd      	bne.n	801c9b2 <rcl_wait+0x72>
 801ca16:	692b      	ldr	r3, [r5, #16]
 801ca18:	2200      	movs	r2, #0
 801ca1a:	3401      	adds	r4, #1
 801ca1c:	519a      	str	r2, [r3, r6]
 801ca1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ca20:	f14a 0a00 	adc.w	sl, sl, #0
 801ca24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ca26:	429c      	cmp	r4, r3
 801ca28:	f17a 0100 	sbcs.w	r1, sl, #0
 801ca2c:	d3d6      	bcc.n	801c9dc <rcl_wait+0x9c>
 801ca2e:	4659      	mov	r1, fp
 801ca30:	4616      	mov	r6, r2
 801ca32:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ca36:	4313      	orrs	r3, r2
 801ca38:	f040 80b4 	bne.w	801cba4 <rcl_wait+0x264>
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	2200      	movs	r2, #0
 801ca40:	460c      	mov	r4, r1
 801ca42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ca46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ca4a:	ab08      	add	r3, sp, #32
 801ca4c:	9302      	str	r3, [sp, #8]
 801ca4e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801ca52:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801ca54:	f106 0110 	add.w	r1, r6, #16
 801ca58:	9300      	str	r3, [sp, #0]
 801ca5a:	1d30      	adds	r0, r6, #4
 801ca5c:	f106 031c 	add.w	r3, r6, #28
 801ca60:	9201      	str	r2, [sp, #4]
 801ca62:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801ca66:	f001 fb81 	bl	801e16c <rmw_wait>
 801ca6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca6c:	4680      	mov	r8, r0
 801ca6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ca70:	b1e2      	cbz	r2, 801caac <rcl_wait+0x16c>
 801ca72:	f04f 0900 	mov.w	r9, #0
 801ca76:	464f      	mov	r7, r9
 801ca78:	692a      	ldr	r2, [r5, #16]
 801ca7a:	f10d 011f 	add.w	r1, sp, #31
 801ca7e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801ca82:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801ca86:	b160      	cbz	r0, 801caa2 <rcl_wait+0x162>
 801ca88:	f88d 701f 	strb.w	r7, [sp, #31]
 801ca8c:	f7ff fa0e 	bl	801beac <rcl_timer_is_ready>
 801ca90:	2800      	cmp	r0, #0
 801ca92:	f47f af72 	bne.w	801c97a <rcl_wait+0x3a>
 801ca96:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ca9a:	b90b      	cbnz	r3, 801caa0 <rcl_wait+0x160>
 801ca9c:	692a      	ldr	r2, [r5, #16]
 801ca9e:	5193      	str	r3, [r2, r6]
 801caa0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801caa2:	f109 0901 	add.w	r9, r9, #1
 801caa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801caa8:	454a      	cmp	r2, r9
 801caaa:	d8e5      	bhi.n	801ca78 <rcl_wait+0x138>
 801caac:	f038 0002 	bics.w	r0, r8, #2
 801cab0:	d176      	bne.n	801cba0 <rcl_wait+0x260>
 801cab2:	686f      	ldr	r7, [r5, #4]
 801cab4:	b17f      	cbz	r7, 801cad6 <rcl_wait+0x196>
 801cab6:	4602      	mov	r2, r0
 801cab8:	e002      	b.n	801cac0 <rcl_wait+0x180>
 801caba:	3201      	adds	r2, #1
 801cabc:	42ba      	cmp	r2, r7
 801cabe:	d00a      	beq.n	801cad6 <rcl_wait+0x196>
 801cac0:	6899      	ldr	r1, [r3, #8]
 801cac2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cac6:	2900      	cmp	r1, #0
 801cac8:	d1f7      	bne.n	801caba <rcl_wait+0x17a>
 801caca:	682e      	ldr	r6, [r5, #0]
 801cacc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cad0:	3201      	adds	r2, #1
 801cad2:	42ba      	cmp	r2, r7
 801cad4:	d1f4      	bne.n	801cac0 <rcl_wait+0x180>
 801cad6:	68ef      	ldr	r7, [r5, #12]
 801cad8:	b17f      	cbz	r7, 801cafa <rcl_wait+0x1ba>
 801cada:	2200      	movs	r2, #0
 801cadc:	e002      	b.n	801cae4 <rcl_wait+0x1a4>
 801cade:	3201      	adds	r2, #1
 801cae0:	42ba      	cmp	r2, r7
 801cae2:	d00a      	beq.n	801cafa <rcl_wait+0x1ba>
 801cae4:	6959      	ldr	r1, [r3, #20]
 801cae6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801caea:	2900      	cmp	r1, #0
 801caec:	d1f7      	bne.n	801cade <rcl_wait+0x19e>
 801caee:	68ae      	ldr	r6, [r5, #8]
 801caf0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801caf4:	3201      	adds	r2, #1
 801caf6:	42ba      	cmp	r2, r7
 801caf8:	d1f4      	bne.n	801cae4 <rcl_wait+0x1a4>
 801cafa:	69ef      	ldr	r7, [r5, #28]
 801cafc:	b17f      	cbz	r7, 801cb1e <rcl_wait+0x1de>
 801cafe:	2200      	movs	r2, #0
 801cb00:	e002      	b.n	801cb08 <rcl_wait+0x1c8>
 801cb02:	3201      	adds	r2, #1
 801cb04:	42ba      	cmp	r2, r7
 801cb06:	d00a      	beq.n	801cb1e <rcl_wait+0x1de>
 801cb08:	6a19      	ldr	r1, [r3, #32]
 801cb0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb0e:	2900      	cmp	r1, #0
 801cb10:	d1f7      	bne.n	801cb02 <rcl_wait+0x1c2>
 801cb12:	69ae      	ldr	r6, [r5, #24]
 801cb14:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb18:	3201      	adds	r2, #1
 801cb1a:	42ba      	cmp	r2, r7
 801cb1c:	d1f4      	bne.n	801cb08 <rcl_wait+0x1c8>
 801cb1e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cb20:	b17f      	cbz	r7, 801cb42 <rcl_wait+0x202>
 801cb22:	2200      	movs	r2, #0
 801cb24:	e002      	b.n	801cb2c <rcl_wait+0x1ec>
 801cb26:	3201      	adds	r2, #1
 801cb28:	42ba      	cmp	r2, r7
 801cb2a:	d00a      	beq.n	801cb42 <rcl_wait+0x202>
 801cb2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cb2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb32:	2900      	cmp	r1, #0
 801cb34:	d1f7      	bne.n	801cb26 <rcl_wait+0x1e6>
 801cb36:	6a2e      	ldr	r6, [r5, #32]
 801cb38:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb3c:	3201      	adds	r2, #1
 801cb3e:	42ba      	cmp	r2, r7
 801cb40:	d1f4      	bne.n	801cb2c <rcl_wait+0x1ec>
 801cb42:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cb44:	b17f      	cbz	r7, 801cb66 <rcl_wait+0x226>
 801cb46:	2200      	movs	r2, #0
 801cb48:	e002      	b.n	801cb50 <rcl_wait+0x210>
 801cb4a:	3201      	adds	r2, #1
 801cb4c:	42ba      	cmp	r2, r7
 801cb4e:	d00a      	beq.n	801cb66 <rcl_wait+0x226>
 801cb50:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cb52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb56:	2900      	cmp	r1, #0
 801cb58:	d1f7      	bne.n	801cb4a <rcl_wait+0x20a>
 801cb5a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801cb5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb60:	3201      	adds	r2, #1
 801cb62:	42ba      	cmp	r2, r7
 801cb64:	d1f4      	bne.n	801cb50 <rcl_wait+0x210>
 801cb66:	f1b8 0f02 	cmp.w	r8, #2
 801cb6a:	f47f af06 	bne.w	801c97a <rcl_wait+0x3a>
 801cb6e:	f084 0301 	eor.w	r3, r4, #1
 801cb72:	b2db      	uxtb	r3, r3
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	bf18      	it	ne
 801cb78:	2002      	movne	r0, #2
 801cb7a:	b00d      	add	sp, #52	; 0x34
 801cb7c:	ecbd 8b02 	vpop	{d8}
 801cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb84:	2a00      	cmp	r2, #0
 801cb86:	d03a      	beq.n	801cbfe <rcl_wait+0x2be>
 801cb88:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cb8c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cb90:	e705      	b.n	801c99e <rcl_wait+0x5e>
 801cb92:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb96:	b00d      	add	sp, #52	; 0x34
 801cb98:	ecbd 8b02 	vpop	{d8}
 801cb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cba0:	2001      	movs	r0, #1
 801cba2:	e6ea      	b.n	801c97a <rcl_wait+0x3a>
 801cba4:	9b04      	ldr	r3, [sp, #16]
 801cba6:	460c      	mov	r4, r1
 801cba8:	2b01      	cmp	r3, #1
 801cbaa:	9b05      	ldr	r3, [sp, #20]
 801cbac:	f173 0300 	sbcs.w	r3, r3, #0
 801cbb0:	bfa8      	it	ge
 801cbb2:	f044 0401 	orrge.w	r4, r4, #1
 801cbb6:	b914      	cbnz	r4, 801cbbe <rcl_wait+0x27e>
 801cbb8:	4623      	mov	r3, r4
 801cbba:	e747      	b.n	801ca4c <rcl_wait+0x10c>
 801cbbc:	4611      	mov	r1, r2
 801cbbe:	2f00      	cmp	r7, #0
 801cbc0:	da02      	bge.n	801cbc8 <rcl_wait+0x288>
 801cbc2:	f04f 0800 	mov.w	r8, #0
 801cbc6:	4647      	mov	r7, r8
 801cbc8:	460c      	mov	r4, r1
 801cbca:	4640      	mov	r0, r8
 801cbcc:	4639      	mov	r1, r7
 801cbce:	a312      	add	r3, pc, #72	; (adr r3, 801cc18 <rcl_wait+0x2d8>)
 801cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd4:	f7e3 fd58 	bl	8000688 <__aeabi_ldivmod>
 801cbd8:	a30f      	add	r3, pc, #60	; (adr r3, 801cc18 <rcl_wait+0x2d8>)
 801cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cbe2:	4640      	mov	r0, r8
 801cbe4:	4639      	mov	r1, r7
 801cbe6:	f7e3 fd4f 	bl	8000688 <__aeabi_ldivmod>
 801cbea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cbee:	ab08      	add	r3, sp, #32
 801cbf0:	e72c      	b.n	801ca4c <rcl_wait+0x10c>
 801cbf2:	200b      	movs	r0, #11
 801cbf4:	b00d      	add	sp, #52	; 0x34
 801cbf6:	ecbd 8b02 	vpop	{d8}
 801cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbfe:	4611      	mov	r1, r2
 801cc00:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cc04:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cc08:	e713      	b.n	801ca32 <rcl_wait+0xf2>
 801cc0a:	bf00      	nop
 801cc0c:	f3af 8000 	nop.w
 801cc10:	ffffffff 	.word	0xffffffff
 801cc14:	7fffffff 	.word	0x7fffffff
 801cc18:	3b9aca00 	.word	0x3b9aca00
 801cc1c:	00000000 	.word	0x00000000

0801cc20 <rcl_action_take_goal_response>:
 801cc20:	2800      	cmp	r0, #0
 801cc22:	d039      	beq.n	801cc98 <rcl_action_take_goal_response+0x78>
 801cc24:	b570      	push	{r4, r5, r6, lr}
 801cc26:	4604      	mov	r4, r0
 801cc28:	6800      	ldr	r0, [r0, #0]
 801cc2a:	b380      	cbz	r0, 801cc8e <rcl_action_take_goal_response+0x6e>
 801cc2c:	460e      	mov	r6, r1
 801cc2e:	4615      	mov	r5, r2
 801cc30:	f7fe fbc6 	bl	801b3c0 <rcl_client_is_valid>
 801cc34:	b330      	cbz	r0, 801cc84 <rcl_action_take_goal_response+0x64>
 801cc36:	6820      	ldr	r0, [r4, #0]
 801cc38:	3004      	adds	r0, #4
 801cc3a:	f7fe fbc1 	bl	801b3c0 <rcl_client_is_valid>
 801cc3e:	b308      	cbz	r0, 801cc84 <rcl_action_take_goal_response+0x64>
 801cc40:	6820      	ldr	r0, [r4, #0]
 801cc42:	3008      	adds	r0, #8
 801cc44:	f7fe fbbc 	bl	801b3c0 <rcl_client_is_valid>
 801cc48:	b1e0      	cbz	r0, 801cc84 <rcl_action_take_goal_response+0x64>
 801cc4a:	6820      	ldr	r0, [r4, #0]
 801cc4c:	300c      	adds	r0, #12
 801cc4e:	f7f7 f9fb 	bl	8014048 <rcl_subscription_is_valid>
 801cc52:	b1b8      	cbz	r0, 801cc84 <rcl_action_take_goal_response+0x64>
 801cc54:	6820      	ldr	r0, [r4, #0]
 801cc56:	3010      	adds	r0, #16
 801cc58:	f7f7 f9f6 	bl	8014048 <rcl_subscription_is_valid>
 801cc5c:	b190      	cbz	r0, 801cc84 <rcl_action_take_goal_response+0x64>
 801cc5e:	b1cd      	cbz	r5, 801cc94 <rcl_action_take_goal_response+0x74>
 801cc60:	b1c6      	cbz	r6, 801cc94 <rcl_action_take_goal_response+0x74>
 801cc62:	462a      	mov	r2, r5
 801cc64:	4631      	mov	r1, r6
 801cc66:	6820      	ldr	r0, [r4, #0]
 801cc68:	f7fe fb62 	bl	801b330 <rcl_take_response>
 801cc6c:	b148      	cbz	r0, 801cc82 <rcl_action_take_goal_response+0x62>
 801cc6e:	280a      	cmp	r0, #10
 801cc70:	d007      	beq.n	801cc82 <rcl_action_take_goal_response+0x62>
 801cc72:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cc76:	f640 0337 	movw	r3, #2103	; 0x837
 801cc7a:	4290      	cmp	r0, r2
 801cc7c:	bf0c      	ite	eq
 801cc7e:	4618      	moveq	r0, r3
 801cc80:	2001      	movne	r0, #1
 801cc82:	bd70      	pop	{r4, r5, r6, pc}
 801cc84:	f7f8 fa00 	bl	8015088 <rcutils_reset_error>
 801cc88:	f640 0036 	movw	r0, #2102	; 0x836
 801cc8c:	bd70      	pop	{r4, r5, r6, pc}
 801cc8e:	f640 0036 	movw	r0, #2102	; 0x836
 801cc92:	bd70      	pop	{r4, r5, r6, pc}
 801cc94:	200b      	movs	r0, #11
 801cc96:	bd70      	pop	{r4, r5, r6, pc}
 801cc98:	f640 0036 	movw	r0, #2102	; 0x836
 801cc9c:	4770      	bx	lr
 801cc9e:	bf00      	nop

0801cca0 <rcl_action_send_result_request>:
 801cca0:	b390      	cbz	r0, 801cd08 <rcl_action_send_result_request+0x68>
 801cca2:	b570      	push	{r4, r5, r6, lr}
 801cca4:	4604      	mov	r4, r0
 801cca6:	6800      	ldr	r0, [r0, #0]
 801cca8:	b348      	cbz	r0, 801ccfe <rcl_action_send_result_request+0x5e>
 801ccaa:	460e      	mov	r6, r1
 801ccac:	4615      	mov	r5, r2
 801ccae:	f7fe fb87 	bl	801b3c0 <rcl_client_is_valid>
 801ccb2:	b1f8      	cbz	r0, 801ccf4 <rcl_action_send_result_request+0x54>
 801ccb4:	6820      	ldr	r0, [r4, #0]
 801ccb6:	3004      	adds	r0, #4
 801ccb8:	f7fe fb82 	bl	801b3c0 <rcl_client_is_valid>
 801ccbc:	b1d0      	cbz	r0, 801ccf4 <rcl_action_send_result_request+0x54>
 801ccbe:	6820      	ldr	r0, [r4, #0]
 801ccc0:	3008      	adds	r0, #8
 801ccc2:	f7fe fb7d 	bl	801b3c0 <rcl_client_is_valid>
 801ccc6:	b1a8      	cbz	r0, 801ccf4 <rcl_action_send_result_request+0x54>
 801ccc8:	6820      	ldr	r0, [r4, #0]
 801ccca:	300c      	adds	r0, #12
 801cccc:	f7f7 f9bc 	bl	8014048 <rcl_subscription_is_valid>
 801ccd0:	b180      	cbz	r0, 801ccf4 <rcl_action_send_result_request+0x54>
 801ccd2:	6820      	ldr	r0, [r4, #0]
 801ccd4:	3010      	adds	r0, #16
 801ccd6:	f7f7 f9b7 	bl	8014048 <rcl_subscription_is_valid>
 801ccda:	b158      	cbz	r0, 801ccf4 <rcl_action_send_result_request+0x54>
 801ccdc:	b195      	cbz	r5, 801cd04 <rcl_action_send_result_request+0x64>
 801ccde:	b18e      	cbz	r6, 801cd04 <rcl_action_send_result_request+0x64>
 801cce0:	6820      	ldr	r0, [r4, #0]
 801cce2:	462a      	mov	r2, r5
 801cce4:	4631      	mov	r1, r6
 801cce6:	3008      	adds	r0, #8
 801cce8:	f7fe faea 	bl	801b2c0 <rcl_send_request>
 801ccec:	3800      	subs	r0, #0
 801ccee:	bf18      	it	ne
 801ccf0:	2001      	movne	r0, #1
 801ccf2:	bd70      	pop	{r4, r5, r6, pc}
 801ccf4:	f7f8 f9c8 	bl	8015088 <rcutils_reset_error>
 801ccf8:	f640 0036 	movw	r0, #2102	; 0x836
 801ccfc:	bd70      	pop	{r4, r5, r6, pc}
 801ccfe:	f640 0036 	movw	r0, #2102	; 0x836
 801cd02:	bd70      	pop	{r4, r5, r6, pc}
 801cd04:	200b      	movs	r0, #11
 801cd06:	bd70      	pop	{r4, r5, r6, pc}
 801cd08:	f640 0036 	movw	r0, #2102	; 0x836
 801cd0c:	4770      	bx	lr
 801cd0e:	bf00      	nop

0801cd10 <rcl_action_take_result_response>:
 801cd10:	2800      	cmp	r0, #0
 801cd12:	d03a      	beq.n	801cd8a <rcl_action_take_result_response+0x7a>
 801cd14:	b570      	push	{r4, r5, r6, lr}
 801cd16:	4604      	mov	r4, r0
 801cd18:	6800      	ldr	r0, [r0, #0]
 801cd1a:	b388      	cbz	r0, 801cd80 <rcl_action_take_result_response+0x70>
 801cd1c:	460e      	mov	r6, r1
 801cd1e:	4615      	mov	r5, r2
 801cd20:	f7fe fb4e 	bl	801b3c0 <rcl_client_is_valid>
 801cd24:	b338      	cbz	r0, 801cd76 <rcl_action_take_result_response+0x66>
 801cd26:	6820      	ldr	r0, [r4, #0]
 801cd28:	3004      	adds	r0, #4
 801cd2a:	f7fe fb49 	bl	801b3c0 <rcl_client_is_valid>
 801cd2e:	b310      	cbz	r0, 801cd76 <rcl_action_take_result_response+0x66>
 801cd30:	6820      	ldr	r0, [r4, #0]
 801cd32:	3008      	adds	r0, #8
 801cd34:	f7fe fb44 	bl	801b3c0 <rcl_client_is_valid>
 801cd38:	b1e8      	cbz	r0, 801cd76 <rcl_action_take_result_response+0x66>
 801cd3a:	6820      	ldr	r0, [r4, #0]
 801cd3c:	300c      	adds	r0, #12
 801cd3e:	f7f7 f983 	bl	8014048 <rcl_subscription_is_valid>
 801cd42:	b1c0      	cbz	r0, 801cd76 <rcl_action_take_result_response+0x66>
 801cd44:	6820      	ldr	r0, [r4, #0]
 801cd46:	3010      	adds	r0, #16
 801cd48:	f7f7 f97e 	bl	8014048 <rcl_subscription_is_valid>
 801cd4c:	b198      	cbz	r0, 801cd76 <rcl_action_take_result_response+0x66>
 801cd4e:	b1d5      	cbz	r5, 801cd86 <rcl_action_take_result_response+0x76>
 801cd50:	b1ce      	cbz	r6, 801cd86 <rcl_action_take_result_response+0x76>
 801cd52:	6820      	ldr	r0, [r4, #0]
 801cd54:	462a      	mov	r2, r5
 801cd56:	4631      	mov	r1, r6
 801cd58:	3008      	adds	r0, #8
 801cd5a:	f7fe fae9 	bl	801b330 <rcl_take_response>
 801cd5e:	b148      	cbz	r0, 801cd74 <rcl_action_take_result_response+0x64>
 801cd60:	280a      	cmp	r0, #10
 801cd62:	d007      	beq.n	801cd74 <rcl_action_take_result_response+0x64>
 801cd64:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cd68:	f640 0337 	movw	r3, #2103	; 0x837
 801cd6c:	4290      	cmp	r0, r2
 801cd6e:	bf0c      	ite	eq
 801cd70:	4618      	moveq	r0, r3
 801cd72:	2001      	movne	r0, #1
 801cd74:	bd70      	pop	{r4, r5, r6, pc}
 801cd76:	f7f8 f987 	bl	8015088 <rcutils_reset_error>
 801cd7a:	f640 0036 	movw	r0, #2102	; 0x836
 801cd7e:	bd70      	pop	{r4, r5, r6, pc}
 801cd80:	f640 0036 	movw	r0, #2102	; 0x836
 801cd84:	bd70      	pop	{r4, r5, r6, pc}
 801cd86:	200b      	movs	r0, #11
 801cd88:	bd70      	pop	{r4, r5, r6, pc}
 801cd8a:	f640 0036 	movw	r0, #2102	; 0x836
 801cd8e:	4770      	bx	lr

0801cd90 <rcl_action_take_cancel_response>:
 801cd90:	2800      	cmp	r0, #0
 801cd92:	d03a      	beq.n	801ce0a <rcl_action_take_cancel_response+0x7a>
 801cd94:	b570      	push	{r4, r5, r6, lr}
 801cd96:	4604      	mov	r4, r0
 801cd98:	6800      	ldr	r0, [r0, #0]
 801cd9a:	b388      	cbz	r0, 801ce00 <rcl_action_take_cancel_response+0x70>
 801cd9c:	460e      	mov	r6, r1
 801cd9e:	4615      	mov	r5, r2
 801cda0:	f7fe fb0e 	bl	801b3c0 <rcl_client_is_valid>
 801cda4:	b338      	cbz	r0, 801cdf6 <rcl_action_take_cancel_response+0x66>
 801cda6:	6820      	ldr	r0, [r4, #0]
 801cda8:	3004      	adds	r0, #4
 801cdaa:	f7fe fb09 	bl	801b3c0 <rcl_client_is_valid>
 801cdae:	b310      	cbz	r0, 801cdf6 <rcl_action_take_cancel_response+0x66>
 801cdb0:	6820      	ldr	r0, [r4, #0]
 801cdb2:	3008      	adds	r0, #8
 801cdb4:	f7fe fb04 	bl	801b3c0 <rcl_client_is_valid>
 801cdb8:	b1e8      	cbz	r0, 801cdf6 <rcl_action_take_cancel_response+0x66>
 801cdba:	6820      	ldr	r0, [r4, #0]
 801cdbc:	300c      	adds	r0, #12
 801cdbe:	f7f7 f943 	bl	8014048 <rcl_subscription_is_valid>
 801cdc2:	b1c0      	cbz	r0, 801cdf6 <rcl_action_take_cancel_response+0x66>
 801cdc4:	6820      	ldr	r0, [r4, #0]
 801cdc6:	3010      	adds	r0, #16
 801cdc8:	f7f7 f93e 	bl	8014048 <rcl_subscription_is_valid>
 801cdcc:	b198      	cbz	r0, 801cdf6 <rcl_action_take_cancel_response+0x66>
 801cdce:	b1d5      	cbz	r5, 801ce06 <rcl_action_take_cancel_response+0x76>
 801cdd0:	b1ce      	cbz	r6, 801ce06 <rcl_action_take_cancel_response+0x76>
 801cdd2:	6820      	ldr	r0, [r4, #0]
 801cdd4:	462a      	mov	r2, r5
 801cdd6:	4631      	mov	r1, r6
 801cdd8:	3004      	adds	r0, #4
 801cdda:	f7fe faa9 	bl	801b330 <rcl_take_response>
 801cdde:	b148      	cbz	r0, 801cdf4 <rcl_action_take_cancel_response+0x64>
 801cde0:	280a      	cmp	r0, #10
 801cde2:	d007      	beq.n	801cdf4 <rcl_action_take_cancel_response+0x64>
 801cde4:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cde8:	f640 0337 	movw	r3, #2103	; 0x837
 801cdec:	4290      	cmp	r0, r2
 801cdee:	bf0c      	ite	eq
 801cdf0:	4618      	moveq	r0, r3
 801cdf2:	2001      	movne	r0, #1
 801cdf4:	bd70      	pop	{r4, r5, r6, pc}
 801cdf6:	f7f8 f947 	bl	8015088 <rcutils_reset_error>
 801cdfa:	f640 0036 	movw	r0, #2102	; 0x836
 801cdfe:	bd70      	pop	{r4, r5, r6, pc}
 801ce00:	f640 0036 	movw	r0, #2102	; 0x836
 801ce04:	bd70      	pop	{r4, r5, r6, pc}
 801ce06:	200b      	movs	r0, #11
 801ce08:	bd70      	pop	{r4, r5, r6, pc}
 801ce0a:	f640 0036 	movw	r0, #2102	; 0x836
 801ce0e:	4770      	bx	lr

0801ce10 <rcl_action_take_feedback>:
 801ce10:	2800      	cmp	r0, #0
 801ce12:	d038      	beq.n	801ce86 <rcl_action_take_feedback+0x76>
 801ce14:	b530      	push	{r4, r5, lr}
 801ce16:	4604      	mov	r4, r0
 801ce18:	6800      	ldr	r0, [r0, #0]
 801ce1a:	b091      	sub	sp, #68	; 0x44
 801ce1c:	b378      	cbz	r0, 801ce7e <rcl_action_take_feedback+0x6e>
 801ce1e:	460d      	mov	r5, r1
 801ce20:	f7fe face 	bl	801b3c0 <rcl_client_is_valid>
 801ce24:	b328      	cbz	r0, 801ce72 <rcl_action_take_feedback+0x62>
 801ce26:	6820      	ldr	r0, [r4, #0]
 801ce28:	3004      	adds	r0, #4
 801ce2a:	f7fe fac9 	bl	801b3c0 <rcl_client_is_valid>
 801ce2e:	b300      	cbz	r0, 801ce72 <rcl_action_take_feedback+0x62>
 801ce30:	6820      	ldr	r0, [r4, #0]
 801ce32:	3008      	adds	r0, #8
 801ce34:	f7fe fac4 	bl	801b3c0 <rcl_client_is_valid>
 801ce38:	b1d8      	cbz	r0, 801ce72 <rcl_action_take_feedback+0x62>
 801ce3a:	6820      	ldr	r0, [r4, #0]
 801ce3c:	300c      	adds	r0, #12
 801ce3e:	f7f7 f903 	bl	8014048 <rcl_subscription_is_valid>
 801ce42:	b1b0      	cbz	r0, 801ce72 <rcl_action_take_feedback+0x62>
 801ce44:	6820      	ldr	r0, [r4, #0]
 801ce46:	3010      	adds	r0, #16
 801ce48:	f7f7 f8fe 	bl	8014048 <rcl_subscription_is_valid>
 801ce4c:	b188      	cbz	r0, 801ce72 <rcl_action_take_feedback+0x62>
 801ce4e:	b1ed      	cbz	r5, 801ce8c <rcl_action_take_feedback+0x7c>
 801ce50:	6820      	ldr	r0, [r4, #0]
 801ce52:	2300      	movs	r3, #0
 801ce54:	466a      	mov	r2, sp
 801ce56:	4629      	mov	r1, r5
 801ce58:	300c      	adds	r0, #12
 801ce5a:	f7f7 f899 	bl	8013f90 <rcl_take>
 801ce5e:	b160      	cbz	r0, 801ce7a <rcl_action_take_feedback+0x6a>
 801ce60:	f240 1391 	movw	r3, #401	; 0x191
 801ce64:	4298      	cmp	r0, r3
 801ce66:	d014      	beq.n	801ce92 <rcl_action_take_feedback+0x82>
 801ce68:	280a      	cmp	r0, #10
 801ce6a:	bf18      	it	ne
 801ce6c:	2001      	movne	r0, #1
 801ce6e:	b011      	add	sp, #68	; 0x44
 801ce70:	bd30      	pop	{r4, r5, pc}
 801ce72:	f7f8 f909 	bl	8015088 <rcutils_reset_error>
 801ce76:	f640 0036 	movw	r0, #2102	; 0x836
 801ce7a:	b011      	add	sp, #68	; 0x44
 801ce7c:	bd30      	pop	{r4, r5, pc}
 801ce7e:	f640 0036 	movw	r0, #2102	; 0x836
 801ce82:	b011      	add	sp, #68	; 0x44
 801ce84:	bd30      	pop	{r4, r5, pc}
 801ce86:	f640 0036 	movw	r0, #2102	; 0x836
 801ce8a:	4770      	bx	lr
 801ce8c:	200b      	movs	r0, #11
 801ce8e:	b011      	add	sp, #68	; 0x44
 801ce90:	bd30      	pop	{r4, r5, pc}
 801ce92:	f640 0037 	movw	r0, #2103	; 0x837
 801ce96:	e7f0      	b.n	801ce7a <rcl_action_take_feedback+0x6a>

0801ce98 <rcl_action_wait_set_add_action_client>:
 801ce98:	2800      	cmp	r0, #0
 801ce9a:	d048      	beq.n	801cf2e <rcl_action_wait_set_add_action_client+0x96>
 801ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce9e:	460c      	mov	r4, r1
 801cea0:	2900      	cmp	r1, #0
 801cea2:	d03c      	beq.n	801cf1e <rcl_action_wait_set_add_action_client+0x86>
 801cea4:	4605      	mov	r5, r0
 801cea6:	6808      	ldr	r0, [r1, #0]
 801cea8:	2800      	cmp	r0, #0
 801ceaa:	d038      	beq.n	801cf1e <rcl_action_wait_set_add_action_client+0x86>
 801ceac:	4617      	mov	r7, r2
 801ceae:	461e      	mov	r6, r3
 801ceb0:	f7fe fa86 	bl	801b3c0 <rcl_client_is_valid>
 801ceb4:	b3b0      	cbz	r0, 801cf24 <rcl_action_wait_set_add_action_client+0x8c>
 801ceb6:	6820      	ldr	r0, [r4, #0]
 801ceb8:	3004      	adds	r0, #4
 801ceba:	f7fe fa81 	bl	801b3c0 <rcl_client_is_valid>
 801cebe:	b388      	cbz	r0, 801cf24 <rcl_action_wait_set_add_action_client+0x8c>
 801cec0:	6820      	ldr	r0, [r4, #0]
 801cec2:	3008      	adds	r0, #8
 801cec4:	f7fe fa7c 	bl	801b3c0 <rcl_client_is_valid>
 801cec8:	b360      	cbz	r0, 801cf24 <rcl_action_wait_set_add_action_client+0x8c>
 801ceca:	6820      	ldr	r0, [r4, #0]
 801cecc:	300c      	adds	r0, #12
 801cece:	f7f7 f8bb 	bl	8014048 <rcl_subscription_is_valid>
 801ced2:	b338      	cbz	r0, 801cf24 <rcl_action_wait_set_add_action_client+0x8c>
 801ced4:	6820      	ldr	r0, [r4, #0]
 801ced6:	3010      	adds	r0, #16
 801ced8:	f7f7 f8b6 	bl	8014048 <rcl_subscription_is_valid>
 801cedc:	b310      	cbz	r0, 801cf24 <rcl_action_wait_set_add_action_client+0x8c>
 801cede:	6821      	ldr	r1, [r4, #0]
 801cee0:	4628      	mov	r0, r5
 801cee2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801cee6:	f7ff fcd1 	bl	801c88c <rcl_wait_set_add_client>
 801ceea:	b9b8      	cbnz	r0, 801cf1c <rcl_action_wait_set_add_action_client+0x84>
 801ceec:	6821      	ldr	r1, [r4, #0]
 801ceee:	4628      	mov	r0, r5
 801cef0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801cef4:	3104      	adds	r1, #4
 801cef6:	f7ff fcc9 	bl	801c88c <rcl_wait_set_add_client>
 801cefa:	b978      	cbnz	r0, 801cf1c <rcl_action_wait_set_add_action_client+0x84>
 801cefc:	6821      	ldr	r1, [r4, #0]
 801cefe:	4628      	mov	r0, r5
 801cf00:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801cf04:	3108      	adds	r1, #8
 801cf06:	f7ff fcc1 	bl	801c88c <rcl_wait_set_add_client>
 801cf0a:	b938      	cbnz	r0, 801cf1c <rcl_action_wait_set_add_action_client+0x84>
 801cf0c:	6821      	ldr	r1, [r4, #0]
 801cf0e:	4628      	mov	r0, r5
 801cf10:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801cf14:	310c      	adds	r1, #12
 801cf16:	f7ff f969 	bl	801c1ec <rcl_wait_set_add_subscription>
 801cf1a:	b158      	cbz	r0, 801cf34 <rcl_action_wait_set_add_action_client+0x9c>
 801cf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf1e:	f640 0036 	movw	r0, #2102	; 0x836
 801cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf24:	f7f8 f8b0 	bl	8015088 <rcutils_reset_error>
 801cf28:	f640 0036 	movw	r0, #2102	; 0x836
 801cf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf2e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cf32:	4770      	bx	lr
 801cf34:	6821      	ldr	r1, [r4, #0]
 801cf36:	4628      	mov	r0, r5
 801cf38:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801cf3c:	3110      	adds	r1, #16
 801cf3e:	f7ff f955 	bl	801c1ec <rcl_wait_set_add_subscription>
 801cf42:	2800      	cmp	r0, #0
 801cf44:	d1ea      	bne.n	801cf1c <rcl_action_wait_set_add_action_client+0x84>
 801cf46:	b11f      	cbz	r7, 801cf50 <rcl_action_wait_set_add_action_client+0xb8>
 801cf48:	6823      	ldr	r3, [r4, #0]
 801cf4a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801cf4e:	603b      	str	r3, [r7, #0]
 801cf50:	2e00      	cmp	r6, #0
 801cf52:	d0e3      	beq.n	801cf1c <rcl_action_wait_set_add_action_client+0x84>
 801cf54:	6823      	ldr	r3, [r4, #0]
 801cf56:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801cf5a:	6033      	str	r3, [r6, #0]
 801cf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf5e:	bf00      	nop

0801cf60 <rcl_action_client_wait_set_get_entities_ready>:
 801cf60:	2800      	cmp	r0, #0
 801cf62:	d050      	beq.n	801d006 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf68:	460c      	mov	r4, r1
 801cf6a:	2900      	cmp	r1, #0
 801cf6c:	d03e      	beq.n	801cfec <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cf6e:	4605      	mov	r5, r0
 801cf70:	6808      	ldr	r0, [r1, #0]
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d03a      	beq.n	801cfec <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cf76:	4616      	mov	r6, r2
 801cf78:	461f      	mov	r7, r3
 801cf7a:	f7fe fa21 	bl	801b3c0 <rcl_client_is_valid>
 801cf7e:	2800      	cmp	r0, #0
 801cf80:	d038      	beq.n	801cff4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf82:	6820      	ldr	r0, [r4, #0]
 801cf84:	3004      	adds	r0, #4
 801cf86:	f7fe fa1b 	bl	801b3c0 <rcl_client_is_valid>
 801cf8a:	2800      	cmp	r0, #0
 801cf8c:	d032      	beq.n	801cff4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf8e:	6820      	ldr	r0, [r4, #0]
 801cf90:	3008      	adds	r0, #8
 801cf92:	f7fe fa15 	bl	801b3c0 <rcl_client_is_valid>
 801cf96:	b368      	cbz	r0, 801cff4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf98:	6820      	ldr	r0, [r4, #0]
 801cf9a:	300c      	adds	r0, #12
 801cf9c:	f7f7 f854 	bl	8014048 <rcl_subscription_is_valid>
 801cfa0:	b340      	cbz	r0, 801cff4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cfa2:	6820      	ldr	r0, [r4, #0]
 801cfa4:	3010      	adds	r0, #16
 801cfa6:	f7f7 f84f 	bl	8014048 <rcl_subscription_is_valid>
 801cfaa:	b318      	cbz	r0, 801cff4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cfac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cfb0:	2a00      	cmp	r2, #0
 801cfb2:	bf18      	it	ne
 801cfb4:	2b00      	cmpne	r3, #0
 801cfb6:	9b08      	ldr	r3, [sp, #32]
 801cfb8:	bf0c      	ite	eq
 801cfba:	2101      	moveq	r1, #1
 801cfbc:	2100      	movne	r1, #0
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	bf08      	it	eq
 801cfc2:	f041 0101 	orreq.w	r1, r1, #1
 801cfc6:	2f00      	cmp	r7, #0
 801cfc8:	bf08      	it	eq
 801cfca:	f041 0101 	orreq.w	r1, r1, #1
 801cfce:	b9b9      	cbnz	r1, 801d000 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801cfd0:	b1b6      	cbz	r6, 801d000 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801cfd2:	6823      	ldr	r3, [r4, #0]
 801cfd4:	686c      	ldr	r4, [r5, #4]
 801cfd6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801cfda:	428a      	cmp	r2, r1
 801cfdc:	4610      	mov	r0, r2
 801cfde:	bf38      	it	cc
 801cfe0:	4608      	movcc	r0, r1
 801cfe2:	4284      	cmp	r4, r0
 801cfe4:	d812      	bhi.n	801d00c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801cfe6:	2001      	movs	r0, #1
 801cfe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfec:	f640 0036 	movw	r0, #2102	; 0x836
 801cff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cff4:	f7f8 f848 	bl	8015088 <rcutils_reset_error>
 801cff8:	f640 0036 	movw	r0, #2102	; 0x836
 801cffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d000:	200b      	movs	r0, #11
 801d002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d006:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d00a:	4770      	bx	lr
 801d00c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d010:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d014:	45f0      	cmp	r8, lr
 801d016:	4640      	mov	r0, r8
 801d018:	69ec      	ldr	r4, [r5, #28]
 801d01a:	bf38      	it	cc
 801d01c:	4670      	movcc	r0, lr
 801d01e:	4560      	cmp	r0, ip
 801d020:	bf38      	it	cc
 801d022:	4660      	movcc	r0, ip
 801d024:	4284      	cmp	r4, r0
 801d026:	d9de      	bls.n	801cfe6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d028:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d02c:	682d      	ldr	r5, [r5, #0]
 801d02e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d032:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d036:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d03a:	1a18      	subs	r0, r3, r0
 801d03c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d040:	f103 0c0c 	add.w	ip, r3, #12
 801d044:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d048:	fab0 f080 	clz	r0, r0
 801d04c:	eba5 050c 	sub.w	r5, r5, ip
 801d050:	0940      	lsrs	r0, r0, #5
 801d052:	fab5 f585 	clz	r5, r5
 801d056:	096d      	lsrs	r5, r5, #5
 801d058:	7035      	strb	r5, [r6, #0]
 801d05a:	f103 0510 	add.w	r5, r3, #16
 801d05e:	1b64      	subs	r4, r4, r5
 801d060:	9d08      	ldr	r5, [sp, #32]
 801d062:	fab4 f484 	clz	r4, r4
 801d066:	0964      	lsrs	r4, r4, #5
 801d068:	703c      	strb	r4, [r7, #0]
 801d06a:	1d1c      	adds	r4, r3, #4
 801d06c:	3308      	adds	r3, #8
 801d06e:	7028      	strb	r0, [r5, #0]
 801d070:	1b09      	subs	r1, r1, r4
 801d072:	2000      	movs	r0, #0
 801d074:	1ad3      	subs	r3, r2, r3
 801d076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d078:	fab1 f181 	clz	r1, r1
 801d07c:	fab3 f383 	clz	r3, r3
 801d080:	0949      	lsrs	r1, r1, #5
 801d082:	095b      	lsrs	r3, r3, #5
 801d084:	7011      	strb	r1, [r2, #0]
 801d086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d088:	7013      	strb	r3, [r2, #0]
 801d08a:	e7b1      	b.n	801cff0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d08c <rcl_action_take_goal_request>:
 801d08c:	2800      	cmp	r0, #0
 801d08e:	d039      	beq.n	801d104 <rcl_action_take_goal_request+0x78>
 801d090:	b570      	push	{r4, r5, r6, lr}
 801d092:	4604      	mov	r4, r0
 801d094:	6800      	ldr	r0, [r0, #0]
 801d096:	b380      	cbz	r0, 801d0fa <rcl_action_take_goal_request+0x6e>
 801d098:	460e      	mov	r6, r1
 801d09a:	4615      	mov	r5, r2
 801d09c:	f7f6 fe8c 	bl	8013db8 <rcl_service_is_valid>
 801d0a0:	b330      	cbz	r0, 801d0f0 <rcl_action_take_goal_request+0x64>
 801d0a2:	6820      	ldr	r0, [r4, #0]
 801d0a4:	3004      	adds	r0, #4
 801d0a6:	f7f6 fe87 	bl	8013db8 <rcl_service_is_valid>
 801d0aa:	b308      	cbz	r0, 801d0f0 <rcl_action_take_goal_request+0x64>
 801d0ac:	6820      	ldr	r0, [r4, #0]
 801d0ae:	3008      	adds	r0, #8
 801d0b0:	f7f6 fe82 	bl	8013db8 <rcl_service_is_valid>
 801d0b4:	b1e0      	cbz	r0, 801d0f0 <rcl_action_take_goal_request+0x64>
 801d0b6:	6820      	ldr	r0, [r4, #0]
 801d0b8:	300c      	adds	r0, #12
 801d0ba:	f7f6 fd41 	bl	8013b40 <rcl_publisher_is_valid>
 801d0be:	b1b8      	cbz	r0, 801d0f0 <rcl_action_take_goal_request+0x64>
 801d0c0:	6820      	ldr	r0, [r4, #0]
 801d0c2:	3010      	adds	r0, #16
 801d0c4:	f7f6 fd3c 	bl	8013b40 <rcl_publisher_is_valid>
 801d0c8:	b190      	cbz	r0, 801d0f0 <rcl_action_take_goal_request+0x64>
 801d0ca:	b1cd      	cbz	r5, 801d100 <rcl_action_take_goal_request+0x74>
 801d0cc:	b1c6      	cbz	r6, 801d100 <rcl_action_take_goal_request+0x74>
 801d0ce:	462a      	mov	r2, r5
 801d0d0:	4631      	mov	r1, r6
 801d0d2:	6820      	ldr	r0, [r4, #0]
 801d0d4:	f7f6 fe18 	bl	8013d08 <rcl_take_request>
 801d0d8:	b148      	cbz	r0, 801d0ee <rcl_action_take_goal_request+0x62>
 801d0da:	280a      	cmp	r0, #10
 801d0dc:	d007      	beq.n	801d0ee <rcl_action_take_goal_request+0x62>
 801d0de:	f240 2259 	movw	r2, #601	; 0x259
 801d0e2:	f640 0399 	movw	r3, #2201	; 0x899
 801d0e6:	4290      	cmp	r0, r2
 801d0e8:	bf0c      	ite	eq
 801d0ea:	4618      	moveq	r0, r3
 801d0ec:	2001      	movne	r0, #1
 801d0ee:	bd70      	pop	{r4, r5, r6, pc}
 801d0f0:	f7f7 ffca 	bl	8015088 <rcutils_reset_error>
 801d0f4:	f640 0098 	movw	r0, #2200	; 0x898
 801d0f8:	bd70      	pop	{r4, r5, r6, pc}
 801d0fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d0fe:	bd70      	pop	{r4, r5, r6, pc}
 801d100:	200b      	movs	r0, #11
 801d102:	bd70      	pop	{r4, r5, r6, pc}
 801d104:	f640 0098 	movw	r0, #2200	; 0x898
 801d108:	4770      	bx	lr
 801d10a:	bf00      	nop

0801d10c <rcl_action_send_goal_response>:
 801d10c:	b388      	cbz	r0, 801d172 <rcl_action_send_goal_response+0x66>
 801d10e:	b570      	push	{r4, r5, r6, lr}
 801d110:	4604      	mov	r4, r0
 801d112:	6800      	ldr	r0, [r0, #0]
 801d114:	b340      	cbz	r0, 801d168 <rcl_action_send_goal_response+0x5c>
 801d116:	460e      	mov	r6, r1
 801d118:	4615      	mov	r5, r2
 801d11a:	f7f6 fe4d 	bl	8013db8 <rcl_service_is_valid>
 801d11e:	b1f0      	cbz	r0, 801d15e <rcl_action_send_goal_response+0x52>
 801d120:	6820      	ldr	r0, [r4, #0]
 801d122:	3004      	adds	r0, #4
 801d124:	f7f6 fe48 	bl	8013db8 <rcl_service_is_valid>
 801d128:	b1c8      	cbz	r0, 801d15e <rcl_action_send_goal_response+0x52>
 801d12a:	6820      	ldr	r0, [r4, #0]
 801d12c:	3008      	adds	r0, #8
 801d12e:	f7f6 fe43 	bl	8013db8 <rcl_service_is_valid>
 801d132:	b1a0      	cbz	r0, 801d15e <rcl_action_send_goal_response+0x52>
 801d134:	6820      	ldr	r0, [r4, #0]
 801d136:	300c      	adds	r0, #12
 801d138:	f7f6 fd02 	bl	8013b40 <rcl_publisher_is_valid>
 801d13c:	b178      	cbz	r0, 801d15e <rcl_action_send_goal_response+0x52>
 801d13e:	6820      	ldr	r0, [r4, #0]
 801d140:	3010      	adds	r0, #16
 801d142:	f7f6 fcfd 	bl	8013b40 <rcl_publisher_is_valid>
 801d146:	b150      	cbz	r0, 801d15e <rcl_action_send_goal_response+0x52>
 801d148:	b18d      	cbz	r5, 801d16e <rcl_action_send_goal_response+0x62>
 801d14a:	b186      	cbz	r6, 801d16e <rcl_action_send_goal_response+0x62>
 801d14c:	462a      	mov	r2, r5
 801d14e:	4631      	mov	r1, r6
 801d150:	6820      	ldr	r0, [r4, #0]
 801d152:	f7f6 fe19 	bl	8013d88 <rcl_send_response>
 801d156:	3800      	subs	r0, #0
 801d158:	bf18      	it	ne
 801d15a:	2001      	movne	r0, #1
 801d15c:	bd70      	pop	{r4, r5, r6, pc}
 801d15e:	f7f7 ff93 	bl	8015088 <rcutils_reset_error>
 801d162:	f640 0098 	movw	r0, #2200	; 0x898
 801d166:	bd70      	pop	{r4, r5, r6, pc}
 801d168:	f640 0098 	movw	r0, #2200	; 0x898
 801d16c:	bd70      	pop	{r4, r5, r6, pc}
 801d16e:	200b      	movs	r0, #11
 801d170:	bd70      	pop	{r4, r5, r6, pc}
 801d172:	f640 0098 	movw	r0, #2200	; 0x898
 801d176:	4770      	bx	lr

0801d178 <rcl_action_take_result_request>:
 801d178:	2800      	cmp	r0, #0
 801d17a:	d03a      	beq.n	801d1f2 <rcl_action_take_result_request+0x7a>
 801d17c:	b570      	push	{r4, r5, r6, lr}
 801d17e:	4604      	mov	r4, r0
 801d180:	6800      	ldr	r0, [r0, #0]
 801d182:	b388      	cbz	r0, 801d1e8 <rcl_action_take_result_request+0x70>
 801d184:	460e      	mov	r6, r1
 801d186:	4615      	mov	r5, r2
 801d188:	f7f6 fe16 	bl	8013db8 <rcl_service_is_valid>
 801d18c:	b338      	cbz	r0, 801d1de <rcl_action_take_result_request+0x66>
 801d18e:	6820      	ldr	r0, [r4, #0]
 801d190:	3004      	adds	r0, #4
 801d192:	f7f6 fe11 	bl	8013db8 <rcl_service_is_valid>
 801d196:	b310      	cbz	r0, 801d1de <rcl_action_take_result_request+0x66>
 801d198:	6820      	ldr	r0, [r4, #0]
 801d19a:	3008      	adds	r0, #8
 801d19c:	f7f6 fe0c 	bl	8013db8 <rcl_service_is_valid>
 801d1a0:	b1e8      	cbz	r0, 801d1de <rcl_action_take_result_request+0x66>
 801d1a2:	6820      	ldr	r0, [r4, #0]
 801d1a4:	300c      	adds	r0, #12
 801d1a6:	f7f6 fccb 	bl	8013b40 <rcl_publisher_is_valid>
 801d1aa:	b1c0      	cbz	r0, 801d1de <rcl_action_take_result_request+0x66>
 801d1ac:	6820      	ldr	r0, [r4, #0]
 801d1ae:	3010      	adds	r0, #16
 801d1b0:	f7f6 fcc6 	bl	8013b40 <rcl_publisher_is_valid>
 801d1b4:	b198      	cbz	r0, 801d1de <rcl_action_take_result_request+0x66>
 801d1b6:	b1d5      	cbz	r5, 801d1ee <rcl_action_take_result_request+0x76>
 801d1b8:	b1ce      	cbz	r6, 801d1ee <rcl_action_take_result_request+0x76>
 801d1ba:	6820      	ldr	r0, [r4, #0]
 801d1bc:	462a      	mov	r2, r5
 801d1be:	4631      	mov	r1, r6
 801d1c0:	3008      	adds	r0, #8
 801d1c2:	f7f6 fda1 	bl	8013d08 <rcl_take_request>
 801d1c6:	b148      	cbz	r0, 801d1dc <rcl_action_take_result_request+0x64>
 801d1c8:	280a      	cmp	r0, #10
 801d1ca:	d007      	beq.n	801d1dc <rcl_action_take_result_request+0x64>
 801d1cc:	f240 2259 	movw	r2, #601	; 0x259
 801d1d0:	f640 0399 	movw	r3, #2201	; 0x899
 801d1d4:	4290      	cmp	r0, r2
 801d1d6:	bf0c      	ite	eq
 801d1d8:	4618      	moveq	r0, r3
 801d1da:	2001      	movne	r0, #1
 801d1dc:	bd70      	pop	{r4, r5, r6, pc}
 801d1de:	f7f7 ff53 	bl	8015088 <rcutils_reset_error>
 801d1e2:	f640 0098 	movw	r0, #2200	; 0x898
 801d1e6:	bd70      	pop	{r4, r5, r6, pc}
 801d1e8:	f640 0098 	movw	r0, #2200	; 0x898
 801d1ec:	bd70      	pop	{r4, r5, r6, pc}
 801d1ee:	200b      	movs	r0, #11
 801d1f0:	bd70      	pop	{r4, r5, r6, pc}
 801d1f2:	f640 0098 	movw	r0, #2200	; 0x898
 801d1f6:	4770      	bx	lr

0801d1f8 <rcl_action_take_cancel_request>:
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	d03a      	beq.n	801d272 <rcl_action_take_cancel_request+0x7a>
 801d1fc:	b570      	push	{r4, r5, r6, lr}
 801d1fe:	4604      	mov	r4, r0
 801d200:	6800      	ldr	r0, [r0, #0]
 801d202:	b388      	cbz	r0, 801d268 <rcl_action_take_cancel_request+0x70>
 801d204:	460e      	mov	r6, r1
 801d206:	4615      	mov	r5, r2
 801d208:	f7f6 fdd6 	bl	8013db8 <rcl_service_is_valid>
 801d20c:	b338      	cbz	r0, 801d25e <rcl_action_take_cancel_request+0x66>
 801d20e:	6820      	ldr	r0, [r4, #0]
 801d210:	3004      	adds	r0, #4
 801d212:	f7f6 fdd1 	bl	8013db8 <rcl_service_is_valid>
 801d216:	b310      	cbz	r0, 801d25e <rcl_action_take_cancel_request+0x66>
 801d218:	6820      	ldr	r0, [r4, #0]
 801d21a:	3008      	adds	r0, #8
 801d21c:	f7f6 fdcc 	bl	8013db8 <rcl_service_is_valid>
 801d220:	b1e8      	cbz	r0, 801d25e <rcl_action_take_cancel_request+0x66>
 801d222:	6820      	ldr	r0, [r4, #0]
 801d224:	300c      	adds	r0, #12
 801d226:	f7f6 fc8b 	bl	8013b40 <rcl_publisher_is_valid>
 801d22a:	b1c0      	cbz	r0, 801d25e <rcl_action_take_cancel_request+0x66>
 801d22c:	6820      	ldr	r0, [r4, #0]
 801d22e:	3010      	adds	r0, #16
 801d230:	f7f6 fc86 	bl	8013b40 <rcl_publisher_is_valid>
 801d234:	b198      	cbz	r0, 801d25e <rcl_action_take_cancel_request+0x66>
 801d236:	b1d5      	cbz	r5, 801d26e <rcl_action_take_cancel_request+0x76>
 801d238:	b1ce      	cbz	r6, 801d26e <rcl_action_take_cancel_request+0x76>
 801d23a:	6820      	ldr	r0, [r4, #0]
 801d23c:	462a      	mov	r2, r5
 801d23e:	4631      	mov	r1, r6
 801d240:	3004      	adds	r0, #4
 801d242:	f7f6 fd61 	bl	8013d08 <rcl_take_request>
 801d246:	b148      	cbz	r0, 801d25c <rcl_action_take_cancel_request+0x64>
 801d248:	280a      	cmp	r0, #10
 801d24a:	d007      	beq.n	801d25c <rcl_action_take_cancel_request+0x64>
 801d24c:	f240 2259 	movw	r2, #601	; 0x259
 801d250:	f640 0399 	movw	r3, #2201	; 0x899
 801d254:	4290      	cmp	r0, r2
 801d256:	bf0c      	ite	eq
 801d258:	4618      	moveq	r0, r3
 801d25a:	2001      	movne	r0, #1
 801d25c:	bd70      	pop	{r4, r5, r6, pc}
 801d25e:	f7f7 ff13 	bl	8015088 <rcutils_reset_error>
 801d262:	f640 0098 	movw	r0, #2200	; 0x898
 801d266:	bd70      	pop	{r4, r5, r6, pc}
 801d268:	f640 0098 	movw	r0, #2200	; 0x898
 801d26c:	bd70      	pop	{r4, r5, r6, pc}
 801d26e:	200b      	movs	r0, #11
 801d270:	bd70      	pop	{r4, r5, r6, pc}
 801d272:	f640 0098 	movw	r0, #2200	; 0x898
 801d276:	4770      	bx	lr

0801d278 <rcl_action_send_cancel_response>:
 801d278:	b390      	cbz	r0, 801d2e0 <rcl_action_send_cancel_response+0x68>
 801d27a:	b570      	push	{r4, r5, r6, lr}
 801d27c:	4604      	mov	r4, r0
 801d27e:	6800      	ldr	r0, [r0, #0]
 801d280:	b348      	cbz	r0, 801d2d6 <rcl_action_send_cancel_response+0x5e>
 801d282:	460e      	mov	r6, r1
 801d284:	4615      	mov	r5, r2
 801d286:	f7f6 fd97 	bl	8013db8 <rcl_service_is_valid>
 801d28a:	b1f8      	cbz	r0, 801d2cc <rcl_action_send_cancel_response+0x54>
 801d28c:	6820      	ldr	r0, [r4, #0]
 801d28e:	3004      	adds	r0, #4
 801d290:	f7f6 fd92 	bl	8013db8 <rcl_service_is_valid>
 801d294:	b1d0      	cbz	r0, 801d2cc <rcl_action_send_cancel_response+0x54>
 801d296:	6820      	ldr	r0, [r4, #0]
 801d298:	3008      	adds	r0, #8
 801d29a:	f7f6 fd8d 	bl	8013db8 <rcl_service_is_valid>
 801d29e:	b1a8      	cbz	r0, 801d2cc <rcl_action_send_cancel_response+0x54>
 801d2a0:	6820      	ldr	r0, [r4, #0]
 801d2a2:	300c      	adds	r0, #12
 801d2a4:	f7f6 fc4c 	bl	8013b40 <rcl_publisher_is_valid>
 801d2a8:	b180      	cbz	r0, 801d2cc <rcl_action_send_cancel_response+0x54>
 801d2aa:	6820      	ldr	r0, [r4, #0]
 801d2ac:	3010      	adds	r0, #16
 801d2ae:	f7f6 fc47 	bl	8013b40 <rcl_publisher_is_valid>
 801d2b2:	b158      	cbz	r0, 801d2cc <rcl_action_send_cancel_response+0x54>
 801d2b4:	b195      	cbz	r5, 801d2dc <rcl_action_send_cancel_response+0x64>
 801d2b6:	b18e      	cbz	r6, 801d2dc <rcl_action_send_cancel_response+0x64>
 801d2b8:	6820      	ldr	r0, [r4, #0]
 801d2ba:	462a      	mov	r2, r5
 801d2bc:	4631      	mov	r1, r6
 801d2be:	3004      	adds	r0, #4
 801d2c0:	f7f6 fd62 	bl	8013d88 <rcl_send_response>
 801d2c4:	3800      	subs	r0, #0
 801d2c6:	bf18      	it	ne
 801d2c8:	2001      	movne	r0, #1
 801d2ca:	bd70      	pop	{r4, r5, r6, pc}
 801d2cc:	f7f7 fedc 	bl	8015088 <rcutils_reset_error>
 801d2d0:	f640 0098 	movw	r0, #2200	; 0x898
 801d2d4:	bd70      	pop	{r4, r5, r6, pc}
 801d2d6:	f640 0098 	movw	r0, #2200	; 0x898
 801d2da:	bd70      	pop	{r4, r5, r6, pc}
 801d2dc:	200b      	movs	r0, #11
 801d2de:	bd70      	pop	{r4, r5, r6, pc}
 801d2e0:	f640 0098 	movw	r0, #2200	; 0x898
 801d2e4:	4770      	bx	lr
 801d2e6:	bf00      	nop

0801d2e8 <rcl_action_wait_set_add_action_server>:
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	d04d      	beq.n	801d388 <rcl_action_wait_set_add_action_server+0xa0>
 801d2ec:	b570      	push	{r4, r5, r6, lr}
 801d2ee:	460c      	mov	r4, r1
 801d2f0:	b159      	cbz	r1, 801d30a <rcl_action_wait_set_add_action_server+0x22>
 801d2f2:	4605      	mov	r5, r0
 801d2f4:	6808      	ldr	r0, [r1, #0]
 801d2f6:	b140      	cbz	r0, 801d30a <rcl_action_wait_set_add_action_server+0x22>
 801d2f8:	4616      	mov	r6, r2
 801d2fa:	f7f6 fd5d 	bl	8013db8 <rcl_service_is_valid>
 801d2fe:	b120      	cbz	r0, 801d30a <rcl_action_wait_set_add_action_server+0x22>
 801d300:	6820      	ldr	r0, [r4, #0]
 801d302:	3004      	adds	r0, #4
 801d304:	f7f6 fd58 	bl	8013db8 <rcl_service_is_valid>
 801d308:	b910      	cbnz	r0, 801d310 <rcl_action_wait_set_add_action_server+0x28>
 801d30a:	f640 0098 	movw	r0, #2200	; 0x898
 801d30e:	bd70      	pop	{r4, r5, r6, pc}
 801d310:	6820      	ldr	r0, [r4, #0]
 801d312:	3008      	adds	r0, #8
 801d314:	f7f6 fd50 	bl	8013db8 <rcl_service_is_valid>
 801d318:	2800      	cmp	r0, #0
 801d31a:	d0f6      	beq.n	801d30a <rcl_action_wait_set_add_action_server+0x22>
 801d31c:	6820      	ldr	r0, [r4, #0]
 801d31e:	300c      	adds	r0, #12
 801d320:	f7f6 fc26 	bl	8013b70 <rcl_publisher_is_valid_except_context>
 801d324:	2800      	cmp	r0, #0
 801d326:	d0f0      	beq.n	801d30a <rcl_action_wait_set_add_action_server+0x22>
 801d328:	6820      	ldr	r0, [r4, #0]
 801d32a:	3010      	adds	r0, #16
 801d32c:	f7f6 fc20 	bl	8013b70 <rcl_publisher_is_valid_except_context>
 801d330:	2800      	cmp	r0, #0
 801d332:	d0ea      	beq.n	801d30a <rcl_action_wait_set_add_action_server+0x22>
 801d334:	6821      	ldr	r1, [r4, #0]
 801d336:	4628      	mov	r0, r5
 801d338:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d33c:	f7ff fad2 	bl	801c8e4 <rcl_wait_set_add_service>
 801d340:	2800      	cmp	r0, #0
 801d342:	d1e4      	bne.n	801d30e <rcl_action_wait_set_add_action_server+0x26>
 801d344:	6821      	ldr	r1, [r4, #0]
 801d346:	4628      	mov	r0, r5
 801d348:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d34c:	3104      	adds	r1, #4
 801d34e:	f7ff fac9 	bl	801c8e4 <rcl_wait_set_add_service>
 801d352:	2800      	cmp	r0, #0
 801d354:	d1db      	bne.n	801d30e <rcl_action_wait_set_add_action_server+0x26>
 801d356:	6821      	ldr	r1, [r4, #0]
 801d358:	4628      	mov	r0, r5
 801d35a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d35e:	3108      	adds	r1, #8
 801d360:	f7ff fac0 	bl	801c8e4 <rcl_wait_set_add_service>
 801d364:	2800      	cmp	r0, #0
 801d366:	d1d2      	bne.n	801d30e <rcl_action_wait_set_add_action_server+0x26>
 801d368:	6821      	ldr	r1, [r4, #0]
 801d36a:	4628      	mov	r0, r5
 801d36c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d370:	3114      	adds	r1, #20
 801d372:	f7ff fa5b 	bl	801c82c <rcl_wait_set_add_timer>
 801d376:	2800      	cmp	r0, #0
 801d378:	d1c9      	bne.n	801d30e <rcl_action_wait_set_add_action_server+0x26>
 801d37a:	2e00      	cmp	r6, #0
 801d37c:	d0c7      	beq.n	801d30e <rcl_action_wait_set_add_action_server+0x26>
 801d37e:	6823      	ldr	r3, [r4, #0]
 801d380:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d384:	6033      	str	r3, [r6, #0]
 801d386:	bd70      	pop	{r4, r5, r6, pc}
 801d388:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d38c:	4770      	bx	lr
 801d38e:	bf00      	nop

0801d390 <rcl_action_server_wait_set_get_entities_ready>:
 801d390:	2800      	cmp	r0, #0
 801d392:	d067      	beq.n	801d464 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d398:	460c      	mov	r4, r1
 801d39a:	b161      	cbz	r1, 801d3b6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d39c:	4605      	mov	r5, r0
 801d39e:	6808      	ldr	r0, [r1, #0]
 801d3a0:	b148      	cbz	r0, 801d3b6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3a2:	4616      	mov	r6, r2
 801d3a4:	4698      	mov	r8, r3
 801d3a6:	f7f6 fd07 	bl	8013db8 <rcl_service_is_valid>
 801d3aa:	b120      	cbz	r0, 801d3b6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3ac:	6820      	ldr	r0, [r4, #0]
 801d3ae:	3004      	adds	r0, #4
 801d3b0:	f7f6 fd02 	bl	8013db8 <rcl_service_is_valid>
 801d3b4:	b918      	cbnz	r0, 801d3be <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d3b6:	f640 0098 	movw	r0, #2200	; 0x898
 801d3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3be:	6820      	ldr	r0, [r4, #0]
 801d3c0:	3008      	adds	r0, #8
 801d3c2:	f7f6 fcf9 	bl	8013db8 <rcl_service_is_valid>
 801d3c6:	2800      	cmp	r0, #0
 801d3c8:	d0f5      	beq.n	801d3b6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3ca:	6820      	ldr	r0, [r4, #0]
 801d3cc:	300c      	adds	r0, #12
 801d3ce:	f7f6 fbcf 	bl	8013b70 <rcl_publisher_is_valid_except_context>
 801d3d2:	2800      	cmp	r0, #0
 801d3d4:	d0ef      	beq.n	801d3b6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3d6:	6820      	ldr	r0, [r4, #0]
 801d3d8:	3010      	adds	r0, #16
 801d3da:	f7f6 fbc9 	bl	8013b70 <rcl_publisher_is_valid_except_context>
 801d3de:	2800      	cmp	r0, #0
 801d3e0:	d0e9      	beq.n	801d3b6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d3e6:	2a00      	cmp	r2, #0
 801d3e8:	bf18      	it	ne
 801d3ea:	2b00      	cmpne	r3, #0
 801d3ec:	bf0c      	ite	eq
 801d3ee:	2101      	moveq	r1, #1
 801d3f0:	2100      	movne	r1, #0
 801d3f2:	f1b8 0f00 	cmp.w	r8, #0
 801d3f6:	bf08      	it	eq
 801d3f8:	f041 0101 	orreq.w	r1, r1, #1
 801d3fc:	bba9      	cbnz	r1, 801d46a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d3fe:	b3a6      	cbz	r6, 801d46a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d400:	6821      	ldr	r1, [r4, #0]
 801d402:	2000      	movs	r0, #0
 801d404:	692c      	ldr	r4, [r5, #16]
 801d406:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d40a:	6a2f      	ldr	r7, [r5, #32]
 801d40c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d410:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d414:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d418:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d41c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d420:	1a64      	subs	r4, r4, r1
 801d422:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d426:	fab4 f484 	clz	r4, r4
 801d42a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d42e:	0964      	lsrs	r4, r4, #5
 801d430:	7034      	strb	r4, [r6, #0]
 801d432:	1d0c      	adds	r4, r1, #4
 801d434:	1b2c      	subs	r4, r5, r4
 801d436:	fab4 f484 	clz	r4, r4
 801d43a:	0964      	lsrs	r4, r4, #5
 801d43c:	f888 4000 	strb.w	r4, [r8]
 801d440:	f101 0408 	add.w	r4, r1, #8
 801d444:	1b1b      	subs	r3, r3, r4
 801d446:	9c06      	ldr	r4, [sp, #24]
 801d448:	fab3 f383 	clz	r3, r3
 801d44c:	095b      	lsrs	r3, r3, #5
 801d44e:	7023      	strb	r3, [r4, #0]
 801d450:	f101 0314 	add.w	r3, r1, #20
 801d454:	1ad3      	subs	r3, r2, r3
 801d456:	9a07      	ldr	r2, [sp, #28]
 801d458:	fab3 f383 	clz	r3, r3
 801d45c:	095b      	lsrs	r3, r3, #5
 801d45e:	7013      	strb	r3, [r2, #0]
 801d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d464:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d468:	4770      	bx	lr
 801d46a:	200b      	movs	r0, #11
 801d46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d470 <_execute_event_handler>:
 801d470:	2002      	movs	r0, #2
 801d472:	4770      	bx	lr

0801d474 <_cancel_goal_event_handler>:
 801d474:	2003      	movs	r0, #3
 801d476:	4770      	bx	lr

0801d478 <_succeed_event_handler>:
 801d478:	2004      	movs	r0, #4
 801d47a:	4770      	bx	lr

0801d47c <_abort_event_handler>:
 801d47c:	2006      	movs	r0, #6
 801d47e:	4770      	bx	lr

0801d480 <_canceled_event_handler>:
 801d480:	2005      	movs	r0, #5
 801d482:	4770      	bx	lr

0801d484 <rcl_action_transition_goal_state>:
 801d484:	b2c2      	uxtb	r2, r0
 801d486:	2a06      	cmp	r2, #6
 801d488:	d810      	bhi.n	801d4ac <rcl_action_transition_goal_state+0x28>
 801d48a:	2904      	cmp	r1, #4
 801d48c:	d80e      	bhi.n	801d4ac <rcl_action_transition_goal_state+0x28>
 801d48e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d492:	b410      	push	{r4}
 801d494:	1853      	adds	r3, r2, r1
 801d496:	4c06      	ldr	r4, [pc, #24]	; (801d4b0 <rcl_action_transition_goal_state+0x2c>)
 801d498:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d49c:	b113      	cbz	r3, 801d4a4 <rcl_action_transition_goal_state+0x20>
 801d49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d4a2:	4718      	bx	r3
 801d4a4:	2000      	movs	r0, #0
 801d4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d4aa:	4770      	bx	lr
 801d4ac:	2000      	movs	r0, #0
 801d4ae:	4770      	bx	lr
 801d4b0:	0802593c 	.word	0x0802593c

0801d4b4 <rcl_action_get_zero_initialized_cancel_response>:
 801d4b4:	b510      	push	{r4, lr}
 801d4b6:	4c07      	ldr	r4, [pc, #28]	; (801d4d4 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d4b8:	4686      	mov	lr, r0
 801d4ba:	4684      	mov	ip, r0
 801d4bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d4be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d4c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d4c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d4c8:	6823      	ldr	r3, [r4, #0]
 801d4ca:	4670      	mov	r0, lr
 801d4cc:	f8cc 3000 	str.w	r3, [ip]
 801d4d0:	bd10      	pop	{r4, pc}
 801d4d2:	bf00      	nop
 801d4d4:	080259c8 	.word	0x080259c8

0801d4d8 <rclc_action_send_result_request>:
 801d4d8:	b1d0      	cbz	r0, 801d510 <rclc_action_send_result_request+0x38>
 801d4da:	4684      	mov	ip, r0
 801d4dc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d4e0:	b500      	push	{lr}
 801d4e2:	b087      	sub	sp, #28
 801d4e4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d4e8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d4ec:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d4f0:	f10d 0e08 	add.w	lr, sp, #8
 801d4f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d4f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d4fc:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d500:	a902      	add	r1, sp, #8
 801d502:	3010      	adds	r0, #16
 801d504:	f7ff fbcc 	bl	801cca0 <rcl_action_send_result_request>
 801d508:	b920      	cbnz	r0, 801d514 <rclc_action_send_result_request+0x3c>
 801d50a:	b007      	add	sp, #28
 801d50c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d510:	200b      	movs	r0, #11
 801d512:	4770      	bx	lr
 801d514:	9001      	str	r0, [sp, #4]
 801d516:	f7f7 fdb7 	bl	8015088 <rcutils_reset_error>
 801d51a:	9801      	ldr	r0, [sp, #4]
 801d51c:	b007      	add	sp, #28
 801d51e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d522:	bf00      	nop

0801d524 <rclc_action_take_goal_handle>:
 801d524:	b160      	cbz	r0, 801d540 <rclc_action_take_goal_handle+0x1c>
 801d526:	6883      	ldr	r3, [r0, #8]
 801d528:	b143      	cbz	r3, 801d53c <rclc_action_take_goal_handle+0x18>
 801d52a:	6819      	ldr	r1, [r3, #0]
 801d52c:	2200      	movs	r2, #0
 801d52e:	6081      	str	r1, [r0, #8]
 801d530:	721a      	strb	r2, [r3, #8]
 801d532:	68c1      	ldr	r1, [r0, #12]
 801d534:	621a      	str	r2, [r3, #32]
 801d536:	849a      	strh	r2, [r3, #36]	; 0x24
 801d538:	6019      	str	r1, [r3, #0]
 801d53a:	60c3      	str	r3, [r0, #12]
 801d53c:	4618      	mov	r0, r3
 801d53e:	4770      	bx	lr
 801d540:	4603      	mov	r3, r0
 801d542:	e7fb      	b.n	801d53c <rclc_action_take_goal_handle+0x18>

0801d544 <rclc_action_remove_used_goal_handle>:
 801d544:	b180      	cbz	r0, 801d568 <rclc_action_remove_used_goal_handle+0x24>
 801d546:	b179      	cbz	r1, 801d568 <rclc_action_remove_used_goal_handle+0x24>
 801d548:	68c3      	ldr	r3, [r0, #12]
 801d54a:	4299      	cmp	r1, r3
 801d54c:	d00d      	beq.n	801d56a <rclc_action_remove_used_goal_handle+0x26>
 801d54e:	b12b      	cbz	r3, 801d55c <rclc_action_remove_used_goal_handle+0x18>
 801d550:	681a      	ldr	r2, [r3, #0]
 801d552:	4291      	cmp	r1, r2
 801d554:	d003      	beq.n	801d55e <rclc_action_remove_used_goal_handle+0x1a>
 801d556:	4613      	mov	r3, r2
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d1f9      	bne.n	801d550 <rclc_action_remove_used_goal_handle+0xc>
 801d55c:	4770      	bx	lr
 801d55e:	680a      	ldr	r2, [r1, #0]
 801d560:	601a      	str	r2, [r3, #0]
 801d562:	6883      	ldr	r3, [r0, #8]
 801d564:	600b      	str	r3, [r1, #0]
 801d566:	6081      	str	r1, [r0, #8]
 801d568:	4770      	bx	lr
 801d56a:	680b      	ldr	r3, [r1, #0]
 801d56c:	60c3      	str	r3, [r0, #12]
 801d56e:	e7f8      	b.n	801d562 <rclc_action_remove_used_goal_handle+0x1e>

0801d570 <rclc_action_find_goal_handle_by_uuid>:
 801d570:	b538      	push	{r3, r4, r5, lr}
 801d572:	b181      	cbz	r1, 801d596 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d574:	b178      	cbz	r0, 801d596 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d576:	68c4      	ldr	r4, [r0, #12]
 801d578:	460d      	mov	r5, r1
 801d57a:	b914      	cbnz	r4, 801d582 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d57c:	e009      	b.n	801d592 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d57e:	6824      	ldr	r4, [r4, #0]
 801d580:	b13c      	cbz	r4, 801d592 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d582:	f104 0009 	add.w	r0, r4, #9
 801d586:	2210      	movs	r2, #16
 801d588:	4629      	mov	r1, r5
 801d58a:	f003 fba9 	bl	8020ce0 <memcmp>
 801d58e:	2800      	cmp	r0, #0
 801d590:	d1f5      	bne.n	801d57e <rclc_action_find_goal_handle_by_uuid+0xe>
 801d592:	4620      	mov	r0, r4
 801d594:	bd38      	pop	{r3, r4, r5, pc}
 801d596:	2400      	movs	r4, #0
 801d598:	4620      	mov	r0, r4
 801d59a:	bd38      	pop	{r3, r4, r5, pc}

0801d59c <rclc_action_find_first_handle_by_status>:
 801d59c:	b140      	cbz	r0, 801d5b0 <rclc_action_find_first_handle_by_status+0x14>
 801d59e:	68c0      	ldr	r0, [r0, #12]
 801d5a0:	b910      	cbnz	r0, 801d5a8 <rclc_action_find_first_handle_by_status+0xc>
 801d5a2:	e005      	b.n	801d5b0 <rclc_action_find_first_handle_by_status+0x14>
 801d5a4:	6800      	ldr	r0, [r0, #0]
 801d5a6:	b118      	cbz	r0, 801d5b0 <rclc_action_find_first_handle_by_status+0x14>
 801d5a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d5ac:	428b      	cmp	r3, r1
 801d5ae:	d1f9      	bne.n	801d5a4 <rclc_action_find_first_handle_by_status+0x8>
 801d5b0:	4770      	bx	lr
 801d5b2:	bf00      	nop

0801d5b4 <rclc_action_find_first_terminated_handle>:
 801d5b4:	b140      	cbz	r0, 801d5c8 <rclc_action_find_first_terminated_handle+0x14>
 801d5b6:	68c0      	ldr	r0, [r0, #12]
 801d5b8:	b910      	cbnz	r0, 801d5c0 <rclc_action_find_first_terminated_handle+0xc>
 801d5ba:	e005      	b.n	801d5c8 <rclc_action_find_first_terminated_handle+0x14>
 801d5bc:	6800      	ldr	r0, [r0, #0]
 801d5be:	b118      	cbz	r0, 801d5c8 <rclc_action_find_first_terminated_handle+0x14>
 801d5c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d5c4:	2b03      	cmp	r3, #3
 801d5c6:	ddf9      	ble.n	801d5bc <rclc_action_find_first_terminated_handle+0x8>
 801d5c8:	4770      	bx	lr
 801d5ca:	bf00      	nop

0801d5cc <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d5cc:	b170      	cbz	r0, 801d5ec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d5ce:	68c0      	ldr	r0, [r0, #12]
 801d5d0:	b160      	cbz	r0, 801d5ec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d5d2:	b410      	push	{r4}
 801d5d4:	e001      	b.n	801d5da <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d5d6:	6800      	ldr	r0, [r0, #0]
 801d5d8:	b128      	cbz	r0, 801d5e6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d5da:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d5de:	4299      	cmp	r1, r3
 801d5e0:	bf08      	it	eq
 801d5e2:	4294      	cmpeq	r4, r2
 801d5e4:	d1f7      	bne.n	801d5d6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5ea:	4770      	bx	lr
 801d5ec:	4770      	bx	lr
 801d5ee:	bf00      	nop

0801d5f0 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d5f0:	b170      	cbz	r0, 801d610 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d5f2:	68c0      	ldr	r0, [r0, #12]
 801d5f4:	b160      	cbz	r0, 801d610 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d5f6:	b410      	push	{r4}
 801d5f8:	e001      	b.n	801d5fe <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d5fa:	6800      	ldr	r0, [r0, #0]
 801d5fc:	b128      	cbz	r0, 801d60a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d5fe:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d602:	4299      	cmp	r1, r3
 801d604:	bf08      	it	eq
 801d606:	4294      	cmpeq	r4, r2
 801d608:	d1f7      	bne.n	801d5fa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d60e:	4770      	bx	lr
 801d610:	4770      	bx	lr
 801d612:	bf00      	nop

0801d614 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d614:	b170      	cbz	r0, 801d634 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d616:	68c0      	ldr	r0, [r0, #12]
 801d618:	b160      	cbz	r0, 801d634 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d61a:	b410      	push	{r4}
 801d61c:	e001      	b.n	801d622 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d61e:	6800      	ldr	r0, [r0, #0]
 801d620:	b128      	cbz	r0, 801d62e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d622:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d626:	4299      	cmp	r1, r3
 801d628:	bf08      	it	eq
 801d62a:	4294      	cmpeq	r4, r2
 801d62c:	d1f7      	bne.n	801d61e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d632:	4770      	bx	lr
 801d634:	4770      	bx	lr
 801d636:	bf00      	nop

0801d638 <rclc_action_find_first_handle_with_goal_response>:
 801d638:	b140      	cbz	r0, 801d64c <rclc_action_find_first_handle_with_goal_response+0x14>
 801d63a:	68c0      	ldr	r0, [r0, #12]
 801d63c:	b910      	cbnz	r0, 801d644 <rclc_action_find_first_handle_with_goal_response+0xc>
 801d63e:	e005      	b.n	801d64c <rclc_action_find_first_handle_with_goal_response+0x14>
 801d640:	6800      	ldr	r0, [r0, #0]
 801d642:	b118      	cbz	r0, 801d64c <rclc_action_find_first_handle_with_goal_response+0x14>
 801d644:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d0f9      	beq.n	801d640 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d64c:	4770      	bx	lr
 801d64e:	bf00      	nop

0801d650 <rclc_action_find_first_handle_with_result_response>:
 801d650:	b140      	cbz	r0, 801d664 <rclc_action_find_first_handle_with_result_response+0x14>
 801d652:	68c0      	ldr	r0, [r0, #12]
 801d654:	b910      	cbnz	r0, 801d65c <rclc_action_find_first_handle_with_result_response+0xc>
 801d656:	e005      	b.n	801d664 <rclc_action_find_first_handle_with_result_response+0x14>
 801d658:	6800      	ldr	r0, [r0, #0]
 801d65a:	b118      	cbz	r0, 801d664 <rclc_action_find_first_handle_with_result_response+0x14>
 801d65c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d660:	2b00      	cmp	r3, #0
 801d662:	d0f9      	beq.n	801d658 <rclc_action_find_first_handle_with_result_response+0x8>
 801d664:	4770      	bx	lr
 801d666:	bf00      	nop

0801d668 <rclc_action_server_response_goal_request>:
 801d668:	b198      	cbz	r0, 801d692 <rclc_action_server_response_goal_request+0x2a>
 801d66a:	2200      	movs	r2, #0
 801d66c:	460b      	mov	r3, r1
 801d66e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d672:	b510      	push	{r4, lr}
 801d674:	6844      	ldr	r4, [r0, #4]
 801d676:	b086      	sub	sp, #24
 801d678:	f104 0010 	add.w	r0, r4, #16
 801d67c:	9205      	str	r2, [sp, #20]
 801d67e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d682:	aa03      	add	r2, sp, #12
 801d684:	f88d 300c 	strb.w	r3, [sp, #12]
 801d688:	f7ff fd40 	bl	801d10c <rcl_action_send_goal_response>
 801d68c:	b918      	cbnz	r0, 801d696 <rclc_action_server_response_goal_request+0x2e>
 801d68e:	b006      	add	sp, #24
 801d690:	bd10      	pop	{r4, pc}
 801d692:	200b      	movs	r0, #11
 801d694:	4770      	bx	lr
 801d696:	9001      	str	r0, [sp, #4]
 801d698:	f7f7 fcf6 	bl	8015088 <rcutils_reset_error>
 801d69c:	9801      	ldr	r0, [sp, #4]
 801d69e:	b006      	add	sp, #24
 801d6a0:	bd10      	pop	{r4, pc}
 801d6a2:	bf00      	nop
 801d6a4:	0000      	movs	r0, r0
	...

0801d6a8 <rclc_action_server_goal_cancel_accept>:
 801d6a8:	b310      	cbz	r0, 801d6f0 <rclc_action_server_goal_cancel_accept+0x48>
 801d6aa:	b510      	push	{r4, lr}
 801d6ac:	b090      	sub	sp, #64	; 0x40
 801d6ae:	4604      	mov	r4, r0
 801d6b0:	a806      	add	r0, sp, #24
 801d6b2:	f7ff feff 	bl	801d4b4 <rcl_action_get_zero_initialized_cancel_response>
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d6bc:	46ec      	mov	ip, sp
 801d6be:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d6c2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d6c6:	f88d 3018 	strb.w	r3, [sp, #24]
 801d6ca:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d6ce:	f8cd d01c 	str.w	sp, [sp, #28]
 801d6d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d6d6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d6f8 <rclc_action_server_goal_cancel_accept+0x50>
 801d6da:	6860      	ldr	r0, [r4, #4]
 801d6dc:	aa06      	add	r2, sp, #24
 801d6de:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d6e2:	3010      	adds	r0, #16
 801d6e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d6e8:	f7ff fdc6 	bl	801d278 <rcl_action_send_cancel_response>
 801d6ec:	b010      	add	sp, #64	; 0x40
 801d6ee:	bd10      	pop	{r4, pc}
 801d6f0:	200b      	movs	r0, #11
 801d6f2:	4770      	bx	lr
 801d6f4:	f3af 8000 	nop.w
 801d6f8:	00000001 	.word	0x00000001
 801d6fc:	00000001 	.word	0x00000001

0801d700 <rclc_action_server_goal_cancel_reject>:
 801d700:	b082      	sub	sp, #8
 801d702:	b530      	push	{r4, r5, lr}
 801d704:	b08b      	sub	sp, #44	; 0x2c
 801d706:	ac0e      	add	r4, sp, #56	; 0x38
 801d708:	e884 000c 	stmia.w	r4, {r2, r3}
 801d70c:	b188      	cbz	r0, 801d732 <rclc_action_server_goal_cancel_reject+0x32>
 801d70e:	4604      	mov	r4, r0
 801d710:	a801      	add	r0, sp, #4
 801d712:	460d      	mov	r5, r1
 801d714:	f7ff fece 	bl	801d4b4 <rcl_action_get_zero_initialized_cancel_response>
 801d718:	aa01      	add	r2, sp, #4
 801d71a:	a90e      	add	r1, sp, #56	; 0x38
 801d71c:	f104 0010 	add.w	r0, r4, #16
 801d720:	f88d 5004 	strb.w	r5, [sp, #4]
 801d724:	f7ff fda8 	bl	801d278 <rcl_action_send_cancel_response>
 801d728:	b00b      	add	sp, #44	; 0x2c
 801d72a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d72e:	b002      	add	sp, #8
 801d730:	4770      	bx	lr
 801d732:	200b      	movs	r0, #11
 801d734:	b00b      	add	sp, #44	; 0x2c
 801d736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d73a:	b002      	add	sp, #8
 801d73c:	4770      	bx	lr
 801d73e:	bf00      	nop

0801d740 <__atomic_load_8>:
 801d740:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d744:	4a16      	ldr	r2, [pc, #88]	; (801d7a0 <__atomic_load_8+0x60>)
 801d746:	4b17      	ldr	r3, [pc, #92]	; (801d7a4 <__atomic_load_8+0x64>)
 801d748:	f04f 0c01 	mov.w	ip, #1
 801d74c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d750:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d754:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d758:	fb02 f101 	mul.w	r1, r2, r1
 801d75c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d760:	fba3 2301 	umull	r2, r3, r3, r1
 801d764:	091b      	lsrs	r3, r3, #4
 801d766:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d76a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d76e:	b4d0      	push	{r4, r6, r7}
 801d770:	1ac9      	subs	r1, r1, r3
 801d772:	4c0d      	ldr	r4, [pc, #52]	; (801d7a8 <__atomic_load_8+0x68>)
 801d774:	1862      	adds	r2, r4, r1
 801d776:	e8d2 3f4f 	ldrexb	r3, [r2]
 801d77a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801d77e:	2e00      	cmp	r6, #0
 801d780:	d1f9      	bne.n	801d776 <__atomic_load_8+0x36>
 801d782:	b2db      	uxtb	r3, r3
 801d784:	f3bf 8f5b 	dmb	ish
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d1f4      	bne.n	801d776 <__atomic_load_8+0x36>
 801d78c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801d790:	f3bf 8f5b 	dmb	ish
 801d794:	5463      	strb	r3, [r4, r1]
 801d796:	4630      	mov	r0, r6
 801d798:	4639      	mov	r1, r7
 801d79a:	bcd0      	pop	{r4, r6, r7}
 801d79c:	4770      	bx	lr
 801d79e:	bf00      	nop
 801d7a0:	27d4eb2d 	.word	0x27d4eb2d
 801d7a4:	b21642c9 	.word	0xb21642c9
 801d7a8:	20016f28 	.word	0x20016f28

0801d7ac <__atomic_store_8>:
 801d7ac:	b570      	push	{r4, r5, r6, lr}
 801d7ae:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801d7b2:	4916      	ldr	r1, [pc, #88]	; (801d80c <__atomic_store_8+0x60>)
 801d7b4:	4c16      	ldr	r4, [pc, #88]	; (801d810 <__atomic_store_8+0x64>)
 801d7b6:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801d7ba:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801d7be:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801d7c2:	fb01 fe0e 	mul.w	lr, r1, lr
 801d7c6:	4913      	ldr	r1, [pc, #76]	; (801d814 <__atomic_store_8+0x68>)
 801d7c8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801d7cc:	fba1 510e 	umull	r5, r1, r1, lr
 801d7d0:	f04f 0501 	mov.w	r5, #1
 801d7d4:	0909      	lsrs	r1, r1, #4
 801d7d6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801d7da:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801d7de:	ebae 0e01 	sub.w	lr, lr, r1
 801d7e2:	eb04 0c0e 	add.w	ip, r4, lr
 801d7e6:	e8dc 1f4f 	ldrexb	r1, [ip]
 801d7ea:	e8cc 5f46 	strexb	r6, r5, [ip]
 801d7ee:	2e00      	cmp	r6, #0
 801d7f0:	d1f9      	bne.n	801d7e6 <__atomic_store_8+0x3a>
 801d7f2:	b2c9      	uxtb	r1, r1
 801d7f4:	f3bf 8f5b 	dmb	ish
 801d7f8:	2900      	cmp	r1, #0
 801d7fa:	d1f4      	bne.n	801d7e6 <__atomic_store_8+0x3a>
 801d7fc:	e9c0 2300 	strd	r2, r3, [r0]
 801d800:	f3bf 8f5b 	dmb	ish
 801d804:	f804 100e 	strb.w	r1, [r4, lr]
 801d808:	bd70      	pop	{r4, r5, r6, pc}
 801d80a:	bf00      	nop
 801d80c:	27d4eb2d 	.word	0x27d4eb2d
 801d810:	20016f28 	.word	0x20016f28
 801d814:	b21642c9 	.word	0xb21642c9

0801d818 <__atomic_exchange_8>:
 801d818:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801d81c:	4917      	ldr	r1, [pc, #92]	; (801d87c <__atomic_exchange_8+0x64>)
 801d81e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801d822:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801d826:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801d82a:	fb01 fc0c 	mul.w	ip, r1, ip
 801d82e:	4914      	ldr	r1, [pc, #80]	; (801d880 <__atomic_exchange_8+0x68>)
 801d830:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801d834:	b570      	push	{r4, r5, r6, lr}
 801d836:	4686      	mov	lr, r0
 801d838:	fba1 010c 	umull	r0, r1, r1, ip
 801d83c:	4d11      	ldr	r5, [pc, #68]	; (801d884 <__atomic_exchange_8+0x6c>)
 801d83e:	f04f 0001 	mov.w	r0, #1
 801d842:	0909      	lsrs	r1, r1, #4
 801d844:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801d848:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801d84c:	ebac 0c01 	sub.w	ip, ip, r1
 801d850:	eb05 010c 	add.w	r1, r5, ip
 801d854:	e8d1 4f4f 	ldrexb	r4, [r1]
 801d858:	e8c1 0f46 	strexb	r6, r0, [r1]
 801d85c:	2e00      	cmp	r6, #0
 801d85e:	d1f9      	bne.n	801d854 <__atomic_exchange_8+0x3c>
 801d860:	b2e4      	uxtb	r4, r4
 801d862:	f3bf 8f5b 	dmb	ish
 801d866:	2c00      	cmp	r4, #0
 801d868:	d1f4      	bne.n	801d854 <__atomic_exchange_8+0x3c>
 801d86a:	e9de 0100 	ldrd	r0, r1, [lr]
 801d86e:	e9ce 2300 	strd	r2, r3, [lr]
 801d872:	f3bf 8f5b 	dmb	ish
 801d876:	f805 400c 	strb.w	r4, [r5, ip]
 801d87a:	bd70      	pop	{r4, r5, r6, pc}
 801d87c:	27d4eb2d 	.word	0x27d4eb2d
 801d880:	b21642c9 	.word	0xb21642c9
 801d884:	20016f28 	.word	0x20016f28

0801d888 <rcutils_is_directory>:
 801d888:	2000      	movs	r0, #0
 801d88a:	4770      	bx	lr

0801d88c <rcutils_join_path>:
 801d88c:	b082      	sub	sp, #8
 801d88e:	2000      	movs	r0, #0
 801d890:	e88d 000c 	stmia.w	sp, {r2, r3}
 801d894:	b002      	add	sp, #8
 801d896:	4770      	bx	lr

0801d898 <rcutils_to_native_path>:
 801d898:	b084      	sub	sp, #16
 801d89a:	2000      	movs	r0, #0
 801d89c:	f10d 0c04 	add.w	ip, sp, #4
 801d8a0:	b004      	add	sp, #16
 801d8a2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801d8a6:	4770      	bx	lr

0801d8a8 <rcutils_string_array_fini>:
 801d8a8:	b328      	cbz	r0, 801d8f6 <rcutils_string_array_fini+0x4e>
 801d8aa:	b570      	push	{r4, r5, r6, lr}
 801d8ac:	4604      	mov	r4, r0
 801d8ae:	6840      	ldr	r0, [r0, #4]
 801d8b0:	b1e0      	cbz	r0, 801d8ec <rcutils_string_array_fini+0x44>
 801d8b2:	f104 0008 	add.w	r0, r4, #8
 801d8b6:	f7f7 fba9 	bl	801500c <rcutils_allocator_is_valid>
 801d8ba:	b1c0      	cbz	r0, 801d8ee <rcutils_string_array_fini+0x46>
 801d8bc:	6823      	ldr	r3, [r4, #0]
 801d8be:	b1c3      	cbz	r3, 801d8f2 <rcutils_string_array_fini+0x4a>
 801d8c0:	2500      	movs	r5, #0
 801d8c2:	6860      	ldr	r0, [r4, #4]
 801d8c4:	462e      	mov	r6, r5
 801d8c6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d8ca:	68e3      	ldr	r3, [r4, #12]
 801d8cc:	69a1      	ldr	r1, [r4, #24]
 801d8ce:	4798      	blx	r3
 801d8d0:	e9d4 3000 	ldrd	r3, r0, [r4]
 801d8d4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801d8d8:	3501      	adds	r5, #1
 801d8da:	429d      	cmp	r5, r3
 801d8dc:	d3f3      	bcc.n	801d8c6 <rcutils_string_array_fini+0x1e>
 801d8de:	68e3      	ldr	r3, [r4, #12]
 801d8e0:	69a1      	ldr	r1, [r4, #24]
 801d8e2:	4798      	blx	r3
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	4618      	mov	r0, r3
 801d8e8:	e9c4 3300 	strd	r3, r3, [r4]
 801d8ec:	bd70      	pop	{r4, r5, r6, pc}
 801d8ee:	200b      	movs	r0, #11
 801d8f0:	bd70      	pop	{r4, r5, r6, pc}
 801d8f2:	6860      	ldr	r0, [r4, #4]
 801d8f4:	e7f3      	b.n	801d8de <rcutils_string_array_fini+0x36>
 801d8f6:	200b      	movs	r0, #11
 801d8f8:	4770      	bx	lr
 801d8fa:	bf00      	nop

0801d8fc <rcutils_get_zero_initialized_string_map>:
 801d8fc:	2000      	movs	r0, #0
 801d8fe:	4b01      	ldr	r3, [pc, #4]	; (801d904 <rcutils_get_zero_initialized_string_map+0x8>)
 801d900:	6018      	str	r0, [r3, #0]
 801d902:	4770      	bx	lr
 801d904:	20016f40 	.word	0x20016f40

0801d908 <rcutils_string_map_reserve>:
 801d908:	2800      	cmp	r0, #0
 801d90a:	d05e      	beq.n	801d9ca <rcutils_string_map_reserve+0xc2>
 801d90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d910:	460c      	mov	r4, r1
 801d912:	6801      	ldr	r1, [r0, #0]
 801d914:	b082      	sub	sp, #8
 801d916:	4605      	mov	r5, r0
 801d918:	b129      	cbz	r1, 801d926 <rcutils_string_map_reserve+0x1e>
 801d91a:	68cb      	ldr	r3, [r1, #12]
 801d91c:	42a3      	cmp	r3, r4
 801d91e:	d906      	bls.n	801d92e <rcutils_string_map_reserve+0x26>
 801d920:	461c      	mov	r4, r3
 801d922:	2900      	cmp	r1, #0
 801d924:	d1f9      	bne.n	801d91a <rcutils_string_map_reserve+0x12>
 801d926:	201f      	movs	r0, #31
 801d928:	b002      	add	sp, #8
 801d92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d92e:	688b      	ldr	r3, [r1, #8]
 801d930:	42a3      	cmp	r3, r4
 801d932:	d046      	beq.n	801d9c2 <rcutils_string_map_reserve+0xba>
 801d934:	6a0e      	ldr	r6, [r1, #32]
 801d936:	2c00      	cmp	r4, #0
 801d938:	d033      	beq.n	801d9a2 <rcutils_string_map_reserve+0x9a>
 801d93a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801d93e:	d242      	bcs.n	801d9c6 <rcutils_string_map_reserve+0xbe>
 801d940:	00a7      	lsls	r7, r4, #2
 801d942:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801d946:	6808      	ldr	r0, [r1, #0]
 801d948:	4632      	mov	r2, r6
 801d94a:	4639      	mov	r1, r7
 801d94c:	47c0      	blx	r8
 801d94e:	2800      	cmp	r0, #0
 801d950:	d039      	beq.n	801d9c6 <rcutils_string_map_reserve+0xbe>
 801d952:	682b      	ldr	r3, [r5, #0]
 801d954:	4632      	mov	r2, r6
 801d956:	4639      	mov	r1, r7
 801d958:	6018      	str	r0, [r3, #0]
 801d95a:	6858      	ldr	r0, [r3, #4]
 801d95c:	47c0      	blx	r8
 801d95e:	2800      	cmp	r0, #0
 801d960:	d031      	beq.n	801d9c6 <rcutils_string_map_reserve+0xbe>
 801d962:	682d      	ldr	r5, [r5, #0]
 801d964:	68ab      	ldr	r3, [r5, #8]
 801d966:	6068      	str	r0, [r5, #4]
 801d968:	42a3      	cmp	r3, r4
 801d96a:	d225      	bcs.n	801d9b8 <rcutils_string_map_reserve+0xb0>
 801d96c:	682a      	ldr	r2, [r5, #0]
 801d96e:	eb00 0c07 	add.w	ip, r0, r7
 801d972:	0099      	lsls	r1, r3, #2
 801d974:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801d978:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801d97c:	45e6      	cmp	lr, ip
 801d97e:	d203      	bcs.n	801d988 <rcutils_string_map_reserve+0x80>
 801d980:	eb02 0c07 	add.w	ip, r2, r7
 801d984:	4566      	cmp	r6, ip
 801d986:	d322      	bcc.n	801d9ce <rcutils_string_map_reserve+0xc6>
 801d988:	1ae3      	subs	r3, r4, r3
 801d98a:	4670      	mov	r0, lr
 801d98c:	2100      	movs	r1, #0
 801d98e:	009a      	lsls	r2, r3, #2
 801d990:	9201      	str	r2, [sp, #4]
 801d992:	f003 f9cf 	bl	8020d34 <memset>
 801d996:	9a01      	ldr	r2, [sp, #4]
 801d998:	2100      	movs	r1, #0
 801d99a:	4630      	mov	r0, r6
 801d99c:	f003 f9ca 	bl	8020d34 <memset>
 801d9a0:	e00a      	b.n	801d9b8 <rcutils_string_map_reserve+0xb0>
 801d9a2:	694f      	ldr	r7, [r1, #20]
 801d9a4:	6808      	ldr	r0, [r1, #0]
 801d9a6:	4631      	mov	r1, r6
 801d9a8:	47b8      	blx	r7
 801d9aa:	682b      	ldr	r3, [r5, #0]
 801d9ac:	4631      	mov	r1, r6
 801d9ae:	6858      	ldr	r0, [r3, #4]
 801d9b0:	601c      	str	r4, [r3, #0]
 801d9b2:	47b8      	blx	r7
 801d9b4:	682d      	ldr	r5, [r5, #0]
 801d9b6:	606c      	str	r4, [r5, #4]
 801d9b8:	2000      	movs	r0, #0
 801d9ba:	60ac      	str	r4, [r5, #8]
 801d9bc:	b002      	add	sp, #8
 801d9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9c2:	2000      	movs	r0, #0
 801d9c4:	e7b0      	b.n	801d928 <rcutils_string_map_reserve+0x20>
 801d9c6:	200a      	movs	r0, #10
 801d9c8:	e7ae      	b.n	801d928 <rcutils_string_map_reserve+0x20>
 801d9ca:	200b      	movs	r0, #11
 801d9cc:	4770      	bx	lr
 801d9ce:	1f0b      	subs	r3, r1, #4
 801d9d0:	4418      	add	r0, r3
 801d9d2:	4413      	add	r3, r2
 801d9d4:	3a04      	subs	r2, #4
 801d9d6:	4417      	add	r7, r2
 801d9d8:	2200      	movs	r2, #0
 801d9da:	f843 2f04 	str.w	r2, [r3, #4]!
 801d9de:	42bb      	cmp	r3, r7
 801d9e0:	f840 2f04 	str.w	r2, [r0, #4]!
 801d9e4:	d1f9      	bne.n	801d9da <rcutils_string_map_reserve+0xd2>
 801d9e6:	e7e7      	b.n	801d9b8 <rcutils_string_map_reserve+0xb0>

0801d9e8 <rcutils_string_map_init>:
 801d9e8:	b082      	sub	sp, #8
 801d9ea:	b570      	push	{r4, r5, r6, lr}
 801d9ec:	ac04      	add	r4, sp, #16
 801d9ee:	e884 000c 	stmia.w	r4, {r2, r3}
 801d9f2:	b380      	cbz	r0, 801da56 <rcutils_string_map_init+0x6e>
 801d9f4:	6806      	ldr	r6, [r0, #0]
 801d9f6:	4604      	mov	r4, r0
 801d9f8:	b12e      	cbz	r6, 801da06 <rcutils_string_map_init+0x1e>
 801d9fa:	251e      	movs	r5, #30
 801d9fc:	4628      	mov	r0, r5
 801d9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da02:	b002      	add	sp, #8
 801da04:	4770      	bx	lr
 801da06:	a804      	add	r0, sp, #16
 801da08:	460d      	mov	r5, r1
 801da0a:	f7f7 faff 	bl	801500c <rcutils_allocator_is_valid>
 801da0e:	b310      	cbz	r0, 801da56 <rcutils_string_map_init+0x6e>
 801da10:	9b04      	ldr	r3, [sp, #16]
 801da12:	2024      	movs	r0, #36	; 0x24
 801da14:	9908      	ldr	r1, [sp, #32]
 801da16:	4798      	blx	r3
 801da18:	6020      	str	r0, [r4, #0]
 801da1a:	b310      	cbz	r0, 801da62 <rcutils_string_map_init+0x7a>
 801da1c:	f10d 0e10 	add.w	lr, sp, #16
 801da20:	f100 0c10 	add.w	ip, r0, #16
 801da24:	e9c0 6600 	strd	r6, r6, [r0]
 801da28:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801da2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801da30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801da34:	f8de 3000 	ldr.w	r3, [lr]
 801da38:	4629      	mov	r1, r5
 801da3a:	4620      	mov	r0, r4
 801da3c:	f8cc 3000 	str.w	r3, [ip]
 801da40:	f7ff ff62 	bl	801d908 <rcutils_string_map_reserve>
 801da44:	4605      	mov	r5, r0
 801da46:	2800      	cmp	r0, #0
 801da48:	d0d8      	beq.n	801d9fc <rcutils_string_map_init+0x14>
 801da4a:	9b05      	ldr	r3, [sp, #20]
 801da4c:	9908      	ldr	r1, [sp, #32]
 801da4e:	6820      	ldr	r0, [r4, #0]
 801da50:	4798      	blx	r3
 801da52:	6026      	str	r6, [r4, #0]
 801da54:	e7d2      	b.n	801d9fc <rcutils_string_map_init+0x14>
 801da56:	250b      	movs	r5, #11
 801da58:	4628      	mov	r0, r5
 801da5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da5e:	b002      	add	sp, #8
 801da60:	4770      	bx	lr
 801da62:	250a      	movs	r5, #10
 801da64:	e7ca      	b.n	801d9fc <rcutils_string_map_init+0x14>
 801da66:	bf00      	nop

0801da68 <rcutils_string_map_fini>:
 801da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da6c:	b082      	sub	sp, #8
 801da6e:	2800      	cmp	r0, #0
 801da70:	d03a      	beq.n	801dae8 <rcutils_string_map_fini+0x80>
 801da72:	6804      	ldr	r4, [r0, #0]
 801da74:	4606      	mov	r6, r0
 801da76:	2c00      	cmp	r4, #0
 801da78:	d032      	beq.n	801dae0 <rcutils_string_map_fini+0x78>
 801da7a:	68a3      	ldr	r3, [r4, #8]
 801da7c:	b32b      	cbz	r3, 801daca <rcutils_string_map_fini+0x62>
 801da7e:	2500      	movs	r5, #0
 801da80:	6822      	ldr	r2, [r4, #0]
 801da82:	462f      	mov	r7, r5
 801da84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801da88:	b1e0      	cbz	r0, 801dac4 <rcutils_string_map_fini+0x5c>
 801da8a:	6a21      	ldr	r1, [r4, #32]
 801da8c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801da90:	9101      	str	r1, [sp, #4]
 801da92:	47c0      	blx	r8
 801da94:	9901      	ldr	r1, [sp, #4]
 801da96:	e9d4 3200 	ldrd	r3, r2, [r4]
 801da9a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801da9e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801daa2:	47c0      	blx	r8
 801daa4:	68e3      	ldr	r3, [r4, #12]
 801daa6:	6862      	ldr	r2, [r4, #4]
 801daa8:	3b01      	subs	r3, #1
 801daaa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801daae:	3501      	adds	r5, #1
 801dab0:	60e3      	str	r3, [r4, #12]
 801dab2:	6834      	ldr	r4, [r6, #0]
 801dab4:	68a3      	ldr	r3, [r4, #8]
 801dab6:	429d      	cmp	r5, r3
 801dab8:	d207      	bcs.n	801daca <rcutils_string_map_fini+0x62>
 801daba:	6822      	ldr	r2, [r4, #0]
 801dabc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dac0:	2800      	cmp	r0, #0
 801dac2:	d1e2      	bne.n	801da8a <rcutils_string_map_fini+0x22>
 801dac4:	3501      	adds	r5, #1
 801dac6:	429d      	cmp	r5, r3
 801dac8:	d3dc      	bcc.n	801da84 <rcutils_string_map_fini+0x1c>
 801daca:	2100      	movs	r1, #0
 801dacc:	4630      	mov	r0, r6
 801dace:	f7ff ff1b 	bl	801d908 <rcutils_string_map_reserve>
 801dad2:	4604      	mov	r4, r0
 801dad4:	b920      	cbnz	r0, 801dae0 <rcutils_string_map_fini+0x78>
 801dad6:	6830      	ldr	r0, [r6, #0]
 801dad8:	6943      	ldr	r3, [r0, #20]
 801dada:	6a01      	ldr	r1, [r0, #32]
 801dadc:	4798      	blx	r3
 801dade:	6034      	str	r4, [r6, #0]
 801dae0:	4620      	mov	r0, r4
 801dae2:	b002      	add	sp, #8
 801dae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dae8:	240b      	movs	r4, #11
 801daea:	4620      	mov	r0, r4
 801daec:	b002      	add	sp, #8
 801daee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daf2:	bf00      	nop

0801daf4 <rcutils_string_map_getn>:
 801daf4:	b378      	cbz	r0, 801db56 <rcutils_string_map_getn+0x62>
 801daf6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dafa:	f8d0 b000 	ldr.w	fp, [r0]
 801dafe:	f1bb 0f00 	cmp.w	fp, #0
 801db02:	d01f      	beq.n	801db44 <rcutils_string_map_getn+0x50>
 801db04:	fab1 f481 	clz	r4, r1
 801db08:	4688      	mov	r8, r1
 801db0a:	0964      	lsrs	r4, r4, #5
 801db0c:	b1d1      	cbz	r1, 801db44 <rcutils_string_map_getn+0x50>
 801db0e:	f8db 7008 	ldr.w	r7, [fp, #8]
 801db12:	f8db 6000 	ldr.w	r6, [fp]
 801db16:	b1af      	cbz	r7, 801db44 <rcutils_string_map_getn+0x50>
 801db18:	4691      	mov	r9, r2
 801db1a:	3e04      	subs	r6, #4
 801db1c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801db20:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801db24:	3401      	adds	r4, #1
 801db26:	4628      	mov	r0, r5
 801db28:	b155      	cbz	r5, 801db40 <rcutils_string_map_getn+0x4c>
 801db2a:	f7e2 fbe9 	bl	8000300 <strlen>
 801db2e:	4602      	mov	r2, r0
 801db30:	4629      	mov	r1, r5
 801db32:	4640      	mov	r0, r8
 801db34:	454a      	cmp	r2, r9
 801db36:	bf38      	it	cc
 801db38:	464a      	movcc	r2, r9
 801db3a:	f003 f910 	bl	8020d5e <strncmp>
 801db3e:	b120      	cbz	r0, 801db4a <rcutils_string_map_getn+0x56>
 801db40:	42a7      	cmp	r7, r4
 801db42:	d1eb      	bne.n	801db1c <rcutils_string_map_getn+0x28>
 801db44:	2000      	movs	r0, #0
 801db46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db4a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801db4e:	f853 000a 	ldr.w	r0, [r3, sl]
 801db52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db56:	4770      	bx	lr

0801db58 <rmw_get_zero_initialized_context>:
 801db58:	b510      	push	{r4, lr}
 801db5a:	4604      	mov	r4, r0
 801db5c:	3010      	adds	r0, #16
 801db5e:	f7f7 fc73 	bl	8015448 <rmw_get_zero_initialized_init_options>
 801db62:	2300      	movs	r3, #0
 801db64:	4620      	mov	r0, r4
 801db66:	60a3      	str	r3, [r4, #8]
 801db68:	64a3      	str	r3, [r4, #72]	; 0x48
 801db6a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801db6c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801db78 <rmw_get_zero_initialized_context+0x20>
 801db70:	ed84 7b00 	vstr	d7, [r4]
 801db74:	bd10      	pop	{r4, pc}
 801db76:	bf00      	nop
	...

0801db80 <rmw_time_equal>:
 801db80:	b4f0      	push	{r4, r5, r6, r7}
 801db82:	b084      	sub	sp, #16
 801db84:	ac04      	add	r4, sp, #16
 801db86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801db8a:	4603      	mov	r3, r0
 801db8c:	4925      	ldr	r1, [pc, #148]	; (801dc24 <rmw_time_equal+0xa4>)
 801db8e:	9d01      	ldr	r5, [sp, #4]
 801db90:	4610      	mov	r0, r2
 801db92:	4299      	cmp	r1, r3
 801db94:	f04f 0202 	mov.w	r2, #2
 801db98:	9e03      	ldr	r6, [sp, #12]
 801db9a:	41aa      	sbcs	r2, r5
 801db9c:	d330      	bcc.n	801dc00 <rmw_time_equal+0x80>
 801db9e:	4c22      	ldr	r4, [pc, #136]	; (801dc28 <rmw_time_equal+0xa8>)
 801dba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dba4:	fba3 3204 	umull	r3, r2, r3, r4
 801dba8:	fb04 2205 	mla	r2, r4, r5, r2
 801dbac:	43dd      	mvns	r5, r3
 801dbae:	1a8c      	subs	r4, r1, r2
 801dbb0:	4285      	cmp	r5, r0
 801dbb2:	41b4      	sbcs	r4, r6
 801dbb4:	d332      	bcc.n	801dc1c <rmw_time_equal+0x9c>
 801dbb6:	eb10 0c03 	adds.w	ip, r0, r3
 801dbba:	eb42 0106 	adc.w	r1, r2, r6
 801dbbe:	4819      	ldr	r0, [pc, #100]	; (801dc24 <rmw_time_equal+0xa4>)
 801dbc0:	2202      	movs	r2, #2
 801dbc2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dbc4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dbc6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801dbca:	4298      	cmp	r0, r3
 801dbcc:	41b2      	sbcs	r2, r6
 801dbce:	d31c      	bcc.n	801dc0a <rmw_time_equal+0x8a>
 801dbd0:	4c15      	ldr	r4, [pc, #84]	; (801dc28 <rmw_time_equal+0xa8>)
 801dbd2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801dbd6:	fba3 3204 	umull	r3, r2, r3, r4
 801dbda:	fb04 2206 	mla	r2, r4, r6, r2
 801dbde:	43de      	mvns	r6, r3
 801dbe0:	1a84      	subs	r4, r0, r2
 801dbe2:	42ae      	cmp	r6, r5
 801dbe4:	41bc      	sbcs	r4, r7
 801dbe6:	d315      	bcc.n	801dc14 <rmw_time_equal+0x94>
 801dbe8:	195b      	adds	r3, r3, r5
 801dbea:	eb42 0207 	adc.w	r2, r2, r7
 801dbee:	428a      	cmp	r2, r1
 801dbf0:	bf08      	it	eq
 801dbf2:	4563      	cmpeq	r3, ip
 801dbf4:	bf0c      	ite	eq
 801dbf6:	2001      	moveq	r0, #1
 801dbf8:	2000      	movne	r0, #0
 801dbfa:	b004      	add	sp, #16
 801dbfc:	bcf0      	pop	{r4, r5, r6, r7}
 801dbfe:	4770      	bx	lr
 801dc00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dc04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc08:	e7d9      	b.n	801dbbe <rmw_time_equal+0x3e>
 801dc0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801dc12:	e7ec      	b.n	801dbee <rmw_time_equal+0x6e>
 801dc14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc18:	4602      	mov	r2, r0
 801dc1a:	e7e8      	b.n	801dbee <rmw_time_equal+0x6e>
 801dc1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dc20:	e7cd      	b.n	801dbbe <rmw_time_equal+0x3e>
 801dc22:	bf00      	nop
 801dc24:	25c17d04 	.word	0x25c17d04
 801dc28:	3b9aca00 	.word	0x3b9aca00

0801dc2c <rmw_time_total_nsec>:
 801dc2c:	b470      	push	{r4, r5, r6}
 801dc2e:	b085      	sub	sp, #20
 801dc30:	ac04      	add	r4, sp, #16
 801dc32:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801dc36:	4603      	mov	r3, r0
 801dc38:	4913      	ldr	r1, [pc, #76]	; (801dc88 <rmw_time_total_nsec+0x5c>)
 801dc3a:	9d01      	ldr	r5, [sp, #4]
 801dc3c:	4610      	mov	r0, r2
 801dc3e:	4299      	cmp	r1, r3
 801dc40:	f04f 0202 	mov.w	r2, #2
 801dc44:	9e03      	ldr	r6, [sp, #12]
 801dc46:	41aa      	sbcs	r2, r5
 801dc48:	d311      	bcc.n	801dc6e <rmw_time_total_nsec+0x42>
 801dc4a:	4c10      	ldr	r4, [pc, #64]	; (801dc8c <rmw_time_total_nsec+0x60>)
 801dc4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc50:	fba3 3204 	umull	r3, r2, r3, r4
 801dc54:	fb04 2205 	mla	r2, r4, r5, r2
 801dc58:	43dd      	mvns	r5, r3
 801dc5a:	1a8c      	subs	r4, r1, r2
 801dc5c:	4285      	cmp	r5, r0
 801dc5e:	41b4      	sbcs	r4, r6
 801dc60:	d30c      	bcc.n	801dc7c <rmw_time_total_nsec+0x50>
 801dc62:	1818      	adds	r0, r3, r0
 801dc64:	eb42 0106 	adc.w	r1, r2, r6
 801dc68:	b005      	add	sp, #20
 801dc6a:	bc70      	pop	{r4, r5, r6}
 801dc6c:	4770      	bx	lr
 801dc6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc76:	b005      	add	sp, #20
 801dc78:	bc70      	pop	{r4, r5, r6}
 801dc7a:	4770      	bx	lr
 801dc7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc80:	b005      	add	sp, #20
 801dc82:	bc70      	pop	{r4, r5, r6}
 801dc84:	4770      	bx	lr
 801dc86:	bf00      	nop
 801dc88:	25c17d04 	.word	0x25c17d04
 801dc8c:	3b9aca00 	.word	0x3b9aca00

0801dc90 <rmw_validate_full_topic_name>:
 801dc90:	2800      	cmp	r0, #0
 801dc92:	d05d      	beq.n	801dd50 <rmw_validate_full_topic_name+0xc0>
 801dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc98:	460d      	mov	r5, r1
 801dc9a:	2900      	cmp	r1, #0
 801dc9c:	d05a      	beq.n	801dd54 <rmw_validate_full_topic_name+0xc4>
 801dc9e:	4604      	mov	r4, r0
 801dca0:	4616      	mov	r6, r2
 801dca2:	f7e2 fb2d 	bl	8000300 <strlen>
 801dca6:	b150      	cbz	r0, 801dcbe <rmw_validate_full_topic_name+0x2e>
 801dca8:	7823      	ldrb	r3, [r4, #0]
 801dcaa:	2b2f      	cmp	r3, #47	; 0x2f
 801dcac:	d00e      	beq.n	801dccc <rmw_validate_full_topic_name+0x3c>
 801dcae:	2302      	movs	r3, #2
 801dcb0:	602b      	str	r3, [r5, #0]
 801dcb2:	b146      	cbz	r6, 801dcc6 <rmw_validate_full_topic_name+0x36>
 801dcb4:	2300      	movs	r3, #0
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	6033      	str	r3, [r6, #0]
 801dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcbe:	2301      	movs	r3, #1
 801dcc0:	602b      	str	r3, [r5, #0]
 801dcc2:	2e00      	cmp	r6, #0
 801dcc4:	d1f6      	bne.n	801dcb4 <rmw_validate_full_topic_name+0x24>
 801dcc6:	2000      	movs	r0, #0
 801dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dccc:	1e43      	subs	r3, r0, #1
 801dcce:	5ce2      	ldrb	r2, [r4, r3]
 801dcd0:	2a2f      	cmp	r2, #47	; 0x2f
 801dcd2:	d041      	beq.n	801dd58 <rmw_validate_full_topic_name+0xc8>
 801dcd4:	1e62      	subs	r2, r4, #1
 801dcd6:	f1c4 0e01 	rsb	lr, r4, #1
 801dcda:	eb02 0800 	add.w	r8, r2, r0
 801dcde:	eb0e 0702 	add.w	r7, lr, r2
 801dce2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dce6:	f023 0120 	bic.w	r1, r3, #32
 801dcea:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801dcee:	3941      	subs	r1, #65	; 0x41
 801dcf0:	2919      	cmp	r1, #25
 801dcf2:	d90f      	bls.n	801dd14 <rmw_validate_full_topic_name+0x84>
 801dcf4:	f1bc 0f0a 	cmp.w	ip, #10
 801dcf8:	d90c      	bls.n	801dd14 <rmw_validate_full_topic_name+0x84>
 801dcfa:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801dcfe:	fab3 f383 	clz	r3, r3
 801dd02:	095b      	lsrs	r3, r3, #5
 801dd04:	b933      	cbnz	r3, 801dd14 <rmw_validate_full_topic_name+0x84>
 801dd06:	2204      	movs	r2, #4
 801dd08:	602a      	str	r2, [r5, #0]
 801dd0a:	2e00      	cmp	r6, #0
 801dd0c:	d0db      	beq.n	801dcc6 <rmw_validate_full_topic_name+0x36>
 801dd0e:	4618      	mov	r0, r3
 801dd10:	6037      	str	r7, [r6, #0]
 801dd12:	e7d2      	b.n	801dcba <rmw_validate_full_topic_name+0x2a>
 801dd14:	4542      	cmp	r2, r8
 801dd16:	d1e2      	bne.n	801dcde <rmw_validate_full_topic_name+0x4e>
 801dd18:	2301      	movs	r3, #1
 801dd1a:	4f1a      	ldr	r7, [pc, #104]	; (801dd84 <rmw_validate_full_topic_name+0xf4>)
 801dd1c:	e004      	b.n	801dd28 <rmw_validate_full_topic_name+0x98>
 801dd1e:	4298      	cmp	r0, r3
 801dd20:	f104 0401 	add.w	r4, r4, #1
 801dd24:	4613      	mov	r3, r2
 801dd26:	d91c      	bls.n	801dd62 <rmw_validate_full_topic_name+0xd2>
 801dd28:	4298      	cmp	r0, r3
 801dd2a:	f103 0201 	add.w	r2, r3, #1
 801dd2e:	d0f6      	beq.n	801dd1e <rmw_validate_full_topic_name+0x8e>
 801dd30:	7821      	ldrb	r1, [r4, #0]
 801dd32:	292f      	cmp	r1, #47	; 0x2f
 801dd34:	d1f3      	bne.n	801dd1e <rmw_validate_full_topic_name+0x8e>
 801dd36:	7861      	ldrb	r1, [r4, #1]
 801dd38:	292f      	cmp	r1, #47	; 0x2f
 801dd3a:	d01e      	beq.n	801dd7a <rmw_validate_full_topic_name+0xea>
 801dd3c:	5dc9      	ldrb	r1, [r1, r7]
 801dd3e:	0749      	lsls	r1, r1, #29
 801dd40:	d5ed      	bpl.n	801dd1e <rmw_validate_full_topic_name+0x8e>
 801dd42:	2206      	movs	r2, #6
 801dd44:	602a      	str	r2, [r5, #0]
 801dd46:	2e00      	cmp	r6, #0
 801dd48:	d0bd      	beq.n	801dcc6 <rmw_validate_full_topic_name+0x36>
 801dd4a:	2000      	movs	r0, #0
 801dd4c:	6033      	str	r3, [r6, #0]
 801dd4e:	e7b4      	b.n	801dcba <rmw_validate_full_topic_name+0x2a>
 801dd50:	200b      	movs	r0, #11
 801dd52:	4770      	bx	lr
 801dd54:	200b      	movs	r0, #11
 801dd56:	e7b0      	b.n	801dcba <rmw_validate_full_topic_name+0x2a>
 801dd58:	2203      	movs	r2, #3
 801dd5a:	602a      	str	r2, [r5, #0]
 801dd5c:	2e00      	cmp	r6, #0
 801dd5e:	d1f4      	bne.n	801dd4a <rmw_validate_full_topic_name+0xba>
 801dd60:	e7b1      	b.n	801dcc6 <rmw_validate_full_topic_name+0x36>
 801dd62:	28f7      	cmp	r0, #247	; 0xf7
 801dd64:	d803      	bhi.n	801dd6e <rmw_validate_full_topic_name+0xde>
 801dd66:	2300      	movs	r3, #0
 801dd68:	4618      	mov	r0, r3
 801dd6a:	602b      	str	r3, [r5, #0]
 801dd6c:	e7a5      	b.n	801dcba <rmw_validate_full_topic_name+0x2a>
 801dd6e:	2307      	movs	r3, #7
 801dd70:	602b      	str	r3, [r5, #0]
 801dd72:	2e00      	cmp	r6, #0
 801dd74:	d0a7      	beq.n	801dcc6 <rmw_validate_full_topic_name+0x36>
 801dd76:	23f6      	movs	r3, #246	; 0xf6
 801dd78:	e7e7      	b.n	801dd4a <rmw_validate_full_topic_name+0xba>
 801dd7a:	2205      	movs	r2, #5
 801dd7c:	602a      	str	r2, [r5, #0]
 801dd7e:	2e00      	cmp	r6, #0
 801dd80:	d1e3      	bne.n	801dd4a <rmw_validate_full_topic_name+0xba>
 801dd82:	e7a0      	b.n	801dcc6 <rmw_validate_full_topic_name+0x36>
 801dd84:	08025aac 	.word	0x08025aac

0801dd88 <on_status>:
 801dd88:	b082      	sub	sp, #8
 801dd8a:	b002      	add	sp, #8
 801dd8c:	4770      	bx	lr
 801dd8e:	bf00      	nop

0801dd90 <on_topic>:
 801dd90:	4a23      	ldr	r2, [pc, #140]	; (801de20 <on_topic+0x90>)
 801dd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd96:	6812      	ldr	r2, [r2, #0]
 801dd98:	b094      	sub	sp, #80	; 0x50
 801dd9a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801dd9c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801dda0:	9113      	str	r1, [sp, #76]	; 0x4c
 801dda2:	9312      	str	r3, [sp, #72]	; 0x48
 801dda4:	b3c2      	cbz	r2, 801de18 <on_topic+0x88>
 801dda6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801ddaa:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801ddae:	e001      	b.n	801ddb4 <on_topic+0x24>
 801ddb0:	6852      	ldr	r2, [r2, #4]
 801ddb2:	b38a      	cbz	r2, 801de18 <on_topic+0x88>
 801ddb4:	6894      	ldr	r4, [r2, #8]
 801ddb6:	8aa3      	ldrh	r3, [r4, #20]
 801ddb8:	428b      	cmp	r3, r1
 801ddba:	d1f9      	bne.n	801ddb0 <on_topic+0x20>
 801ddbc:	7da3      	ldrb	r3, [r4, #22]
 801ddbe:	4283      	cmp	r3, r0
 801ddc0:	d1f6      	bne.n	801ddb0 <on_topic+0x20>
 801ddc2:	2248      	movs	r2, #72	; 0x48
 801ddc4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ddc8:	4668      	mov	r0, sp
 801ddca:	f003 f880 	bl	8020ece <memcpy>
 801ddce:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801ddd2:	4620      	mov	r0, r4
 801ddd4:	cb0c      	ldmia	r3, {r2, r3}
 801ddd6:	f7f8 ffdb 	bl	8016d90 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ddda:	4607      	mov	r7, r0
 801dddc:	b1e0      	cbz	r0, 801de18 <on_topic+0x88>
 801ddde:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801dde2:	462a      	mov	r2, r5
 801dde4:	4630      	mov	r0, r6
 801dde6:	f108 0110 	add.w	r1, r8, #16
 801ddea:	f7f9 fc91 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801ddee:	b930      	cbnz	r0, 801ddfe <on_topic+0x6e>
 801ddf0:	4639      	mov	r1, r7
 801ddf2:	480c      	ldr	r0, [pc, #48]	; (801de24 <on_topic+0x94>)
 801ddf4:	b014      	add	sp, #80	; 0x50
 801ddf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddfa:	f000 b8bd 	b.w	801df78 <put_memory>
 801ddfe:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801de02:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801de06:	f000 fb33 	bl	801e470 <rmw_uros_epoch_nanos>
 801de0a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801de0e:	2305      	movs	r3, #5
 801de10:	e942 0102 	strd	r0, r1, [r2, #-8]
 801de14:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801de18:	b014      	add	sp, #80	; 0x50
 801de1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de1e:	bf00      	nop
 801de20:	20016edc 	.word	0x20016edc
 801de24:	20016ecc 	.word	0x20016ecc

0801de28 <on_request>:
 801de28:	4824      	ldr	r0, [pc, #144]	; (801debc <on_request+0x94>)
 801de2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de2e:	6800      	ldr	r0, [r0, #0]
 801de30:	b094      	sub	sp, #80	; 0x50
 801de32:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801de34:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801de38:	9113      	str	r1, [sp, #76]	; 0x4c
 801de3a:	2800      	cmp	r0, #0
 801de3c:	d03b      	beq.n	801deb6 <on_request+0x8e>
 801de3e:	461d      	mov	r5, r3
 801de40:	e001      	b.n	801de46 <on_request+0x1e>
 801de42:	6840      	ldr	r0, [r0, #4]
 801de44:	b3b8      	cbz	r0, 801deb6 <on_request+0x8e>
 801de46:	6884      	ldr	r4, [r0, #8]
 801de48:	8b21      	ldrh	r1, [r4, #24]
 801de4a:	4291      	cmp	r1, r2
 801de4c:	d1f9      	bne.n	801de42 <on_request+0x1a>
 801de4e:	2248      	movs	r2, #72	; 0x48
 801de50:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801de54:	4668      	mov	r0, sp
 801de56:	f003 f83a 	bl	8020ece <memcpy>
 801de5a:	f104 0320 	add.w	r3, r4, #32
 801de5e:	4620      	mov	r0, r4
 801de60:	cb0c      	ldmia	r3, {r2, r3}
 801de62:	f7f8 ff95 	bl	8016d90 <rmw_uxrce_get_static_input_buffer_for_entity>
 801de66:	4680      	mov	r8, r0
 801de68:	b328      	cbz	r0, 801deb6 <on_request+0x8e>
 801de6a:	4630      	mov	r0, r6
 801de6c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801de70:	463a      	mov	r2, r7
 801de72:	f106 0110 	add.w	r1, r6, #16
 801de76:	f7f9 fc4b 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801de7a:	b930      	cbnz	r0, 801de8a <on_request+0x62>
 801de7c:	4641      	mov	r1, r8
 801de7e:	4810      	ldr	r0, [pc, #64]	; (801dec0 <on_request+0x98>)
 801de80:	b014      	add	sp, #80	; 0x50
 801de82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de86:	f000 b877 	b.w	801df78 <put_memory>
 801de8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801de8c:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801de90:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801de94:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801de98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801de9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801dea0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801dea4:	f000 fae4 	bl	801e470 <rmw_uros_epoch_nanos>
 801dea8:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801deac:	2303      	movs	r3, #3
 801deae:	e942 0102 	strd	r0, r1, [r2, #-8]
 801deb2:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801deb6:	b014      	add	sp, #80	; 0x50
 801deb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801debc:	20016eac 	.word	0x20016eac
 801dec0:	20016ecc 	.word	0x20016ecc

0801dec4 <on_reply>:
 801dec4:	4822      	ldr	r0, [pc, #136]	; (801df50 <on_reply+0x8c>)
 801dec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801deca:	6800      	ldr	r0, [r0, #0]
 801decc:	b094      	sub	sp, #80	; 0x50
 801dece:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ded0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801ded4:	9113      	str	r1, [sp, #76]	; 0x4c
 801ded6:	b3b8      	cbz	r0, 801df48 <on_reply+0x84>
 801ded8:	461d      	mov	r5, r3
 801deda:	e001      	b.n	801dee0 <on_reply+0x1c>
 801dedc:	6840      	ldr	r0, [r0, #4]
 801dede:	b398      	cbz	r0, 801df48 <on_reply+0x84>
 801dee0:	6884      	ldr	r4, [r0, #8]
 801dee2:	8b21      	ldrh	r1, [r4, #24]
 801dee4:	4291      	cmp	r1, r2
 801dee6:	d1f9      	bne.n	801dedc <on_reply+0x18>
 801dee8:	2248      	movs	r2, #72	; 0x48
 801deea:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801deee:	4668      	mov	r0, sp
 801def0:	f002 ffed 	bl	8020ece <memcpy>
 801def4:	f104 0320 	add.w	r3, r4, #32
 801def8:	4620      	mov	r0, r4
 801defa:	cb0c      	ldmia	r3, {r2, r3}
 801defc:	f7f8 ff48 	bl	8016d90 <rmw_uxrce_get_static_input_buffer_for_entity>
 801df00:	4680      	mov	r8, r0
 801df02:	b308      	cbz	r0, 801df48 <on_reply+0x84>
 801df04:	4630      	mov	r0, r6
 801df06:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801df0a:	463a      	mov	r2, r7
 801df0c:	f106 0110 	add.w	r1, r6, #16
 801df10:	f7f9 fbfe 	bl	8017710 <ucdr_deserialize_array_uint8_t>
 801df14:	b930      	cbnz	r0, 801df24 <on_reply+0x60>
 801df16:	4641      	mov	r1, r8
 801df18:	480e      	ldr	r0, [pc, #56]	; (801df54 <on_reply+0x90>)
 801df1a:	b014      	add	sp, #80	; 0x50
 801df1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df20:	f000 b82a 	b.w	801df78 <put_memory>
 801df24:	2200      	movs	r2, #0
 801df26:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801df2a:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801df2e:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801df32:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801df36:	f000 fa9b 	bl	801e470 <rmw_uros_epoch_nanos>
 801df3a:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801df3e:	2304      	movs	r3, #4
 801df40:	e942 0102 	strd	r0, r1, [r2, #-8]
 801df44:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801df48:	b014      	add	sp, #80	; 0x50
 801df4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df4e:	bf00      	nop
 801df50:	200125bc 	.word	0x200125bc
 801df54:	20016ecc 	.word	0x20016ecc

0801df58 <get_memory>:
 801df58:	4603      	mov	r3, r0
 801df5a:	6840      	ldr	r0, [r0, #4]
 801df5c:	b158      	cbz	r0, 801df76 <get_memory+0x1e>
 801df5e:	6842      	ldr	r2, [r0, #4]
 801df60:	605a      	str	r2, [r3, #4]
 801df62:	b10a      	cbz	r2, 801df68 <get_memory+0x10>
 801df64:	2100      	movs	r1, #0
 801df66:	6011      	str	r1, [r2, #0]
 801df68:	681a      	ldr	r2, [r3, #0]
 801df6a:	6042      	str	r2, [r0, #4]
 801df6c:	b102      	cbz	r2, 801df70 <get_memory+0x18>
 801df6e:	6010      	str	r0, [r2, #0]
 801df70:	2200      	movs	r2, #0
 801df72:	6002      	str	r2, [r0, #0]
 801df74:	6018      	str	r0, [r3, #0]
 801df76:	4770      	bx	lr

0801df78 <put_memory>:
 801df78:	680b      	ldr	r3, [r1, #0]
 801df7a:	b10b      	cbz	r3, 801df80 <put_memory+0x8>
 801df7c:	684a      	ldr	r2, [r1, #4]
 801df7e:	605a      	str	r2, [r3, #4]
 801df80:	684a      	ldr	r2, [r1, #4]
 801df82:	b102      	cbz	r2, 801df86 <put_memory+0xe>
 801df84:	6013      	str	r3, [r2, #0]
 801df86:	6803      	ldr	r3, [r0, #0]
 801df88:	428b      	cmp	r3, r1
 801df8a:	6843      	ldr	r3, [r0, #4]
 801df8c:	bf08      	it	eq
 801df8e:	6002      	streq	r2, [r0, #0]
 801df90:	604b      	str	r3, [r1, #4]
 801df92:	b103      	cbz	r3, 801df96 <put_memory+0x1e>
 801df94:	6019      	str	r1, [r3, #0]
 801df96:	2300      	movs	r3, #0
 801df98:	600b      	str	r3, [r1, #0]
 801df9a:	6041      	str	r1, [r0, #4]
 801df9c:	4770      	bx	lr
 801df9e:	bf00      	nop

0801dfa0 <rmw_destroy_client>:
 801dfa0:	b570      	push	{r4, r5, r6, lr}
 801dfa2:	b128      	cbz	r0, 801dfb0 <rmw_destroy_client+0x10>
 801dfa4:	4604      	mov	r4, r0
 801dfa6:	6800      	ldr	r0, [r0, #0]
 801dfa8:	460d      	mov	r5, r1
 801dfaa:	f7f9 f905 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 801dfae:	b910      	cbnz	r0, 801dfb6 <rmw_destroy_client+0x16>
 801dfb0:	2401      	movs	r4, #1
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	bd70      	pop	{r4, r5, r6, pc}
 801dfb6:	6863      	ldr	r3, [r4, #4]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d0f9      	beq.n	801dfb0 <rmw_destroy_client+0x10>
 801dfbc:	2d00      	cmp	r5, #0
 801dfbe:	d0f7      	beq.n	801dfb0 <rmw_destroy_client+0x10>
 801dfc0:	6828      	ldr	r0, [r5, #0]
 801dfc2:	f7f9 f8f9 	bl	80171b8 <is_uxrce_rmw_identifier_valid>
 801dfc6:	2800      	cmp	r0, #0
 801dfc8:	d0f2      	beq.n	801dfb0 <rmw_destroy_client+0x10>
 801dfca:	686e      	ldr	r6, [r5, #4]
 801dfcc:	2e00      	cmp	r6, #0
 801dfce:	d0ef      	beq.n	801dfb0 <rmw_destroy_client+0x10>
 801dfd0:	6864      	ldr	r4, [r4, #4]
 801dfd2:	6932      	ldr	r2, [r6, #16]
 801dfd4:	6920      	ldr	r0, [r4, #16]
 801dfd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801dfda:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801dfde:	6819      	ldr	r1, [r3, #0]
 801dfe0:	f7f9 ff62 	bl	8017ea8 <uxr_buffer_cancel_data>
 801dfe4:	4602      	mov	r2, r0
 801dfe6:	6920      	ldr	r0, [r4, #16]
 801dfe8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801dfec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801dff0:	f7f8 ffd0 	bl	8016f94 <run_xrce_session>
 801dff4:	6920      	ldr	r0, [r4, #16]
 801dff6:	6932      	ldr	r2, [r6, #16]
 801dff8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801dffc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e000:	6819      	ldr	r1, [r3, #0]
 801e002:	f7f9 fbed 	bl	80177e0 <uxr_buffer_delete_entity>
 801e006:	4602      	mov	r2, r0
 801e008:	6920      	ldr	r0, [r4, #16]
 801e00a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e00e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e012:	f7f8 ffbf 	bl	8016f94 <run_xrce_session>
 801e016:	4603      	mov	r3, r0
 801e018:	4628      	mov	r0, r5
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	bf14      	ite	ne
 801e01e:	2400      	movne	r4, #0
 801e020:	2402      	moveq	r4, #2
 801e022:	f7f8 fe93 	bl	8016d4c <rmw_uxrce_fini_client_memory>
 801e026:	e7c4      	b.n	801dfb2 <rmw_destroy_client+0x12>

0801e028 <rmw_get_implementation_identifier>:
 801e028:	4b01      	ldr	r3, [pc, #4]	; (801e030 <rmw_get_implementation_identifier+0x8>)
 801e02a:	6818      	ldr	r0, [r3, #0]
 801e02c:	4770      	bx	lr
 801e02e:	bf00      	nop
 801e030:	08025a04 	.word	0x08025a04

0801e034 <rmw_create_guard_condition>:
 801e034:	b538      	push	{r3, r4, r5, lr}
 801e036:	4605      	mov	r5, r0
 801e038:	4808      	ldr	r0, [pc, #32]	; (801e05c <rmw_create_guard_condition+0x28>)
 801e03a:	f7ff ff8d 	bl	801df58 <get_memory>
 801e03e:	4603      	mov	r3, r0
 801e040:	b148      	cbz	r0, 801e056 <rmw_create_guard_condition+0x22>
 801e042:	6884      	ldr	r4, [r0, #8]
 801e044:	2300      	movs	r3, #0
 801e046:	61e5      	str	r5, [r4, #28]
 801e048:	7423      	strb	r3, [r4, #16]
 801e04a:	f7ff ffed 	bl	801e028 <rmw_get_implementation_identifier>
 801e04e:	f104 0314 	add.w	r3, r4, #20
 801e052:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e056:	4618      	mov	r0, r3
 801e058:	bd38      	pop	{r3, r4, r5, pc}
 801e05a:	bf00      	nop
 801e05c:	20016e6c 	.word	0x20016e6c

0801e060 <rmw_destroy_guard_condition>:
 801e060:	b508      	push	{r3, lr}
 801e062:	4b08      	ldr	r3, [pc, #32]	; (801e084 <rmw_destroy_guard_condition+0x24>)
 801e064:	6819      	ldr	r1, [r3, #0]
 801e066:	b911      	cbnz	r1, 801e06e <rmw_destroy_guard_condition+0xe>
 801e068:	e00a      	b.n	801e080 <rmw_destroy_guard_condition+0x20>
 801e06a:	6849      	ldr	r1, [r1, #4]
 801e06c:	b141      	cbz	r1, 801e080 <rmw_destroy_guard_condition+0x20>
 801e06e:	688b      	ldr	r3, [r1, #8]
 801e070:	3314      	adds	r3, #20
 801e072:	4298      	cmp	r0, r3
 801e074:	d1f9      	bne.n	801e06a <rmw_destroy_guard_condition+0xa>
 801e076:	4803      	ldr	r0, [pc, #12]	; (801e084 <rmw_destroy_guard_condition+0x24>)
 801e078:	f7ff ff7e 	bl	801df78 <put_memory>
 801e07c:	2000      	movs	r0, #0
 801e07e:	bd08      	pop	{r3, pc}
 801e080:	2001      	movs	r0, #1
 801e082:	bd08      	pop	{r3, pc}
 801e084:	20016e6c 	.word	0x20016e6c

0801e088 <create_topic>:
 801e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e08c:	4605      	mov	r5, r0
 801e08e:	b084      	sub	sp, #16
 801e090:	4822      	ldr	r0, [pc, #136]	; (801e11c <create_topic+0x94>)
 801e092:	460f      	mov	r7, r1
 801e094:	4616      	mov	r6, r2
 801e096:	f7ff ff5f 	bl	801df58 <get_memory>
 801e09a:	4604      	mov	r4, r0
 801e09c:	2800      	cmp	r0, #0
 801e09e:	d039      	beq.n	801e114 <create_topic+0x8c>
 801e0a0:	692b      	ldr	r3, [r5, #16]
 801e0a2:	2102      	movs	r1, #2
 801e0a4:	6884      	ldr	r4, [r0, #8]
 801e0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e0aa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e124 <create_topic+0x9c>
 801e0ae:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e0b2:	1c42      	adds	r2, r0, #1
 801e0b4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e0b8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e0bc:	f7f9 fe8a 	bl	8017dd4 <uxr_object_id>
 801e0c0:	223c      	movs	r2, #60	; 0x3c
 801e0c2:	6120      	str	r0, [r4, #16]
 801e0c4:	4641      	mov	r1, r8
 801e0c6:	4638      	mov	r0, r7
 801e0c8:	f7f9 f85e 	bl	8017188 <generate_topic_name>
 801e0cc:	b1f0      	cbz	r0, 801e10c <create_topic+0x84>
 801e0ce:	4f14      	ldr	r7, [pc, #80]	; (801e120 <create_topic+0x98>)
 801e0d0:	4630      	mov	r0, r6
 801e0d2:	2264      	movs	r2, #100	; 0x64
 801e0d4:	4639      	mov	r1, r7
 801e0d6:	f7f9 f829 	bl	801712c <generate_type_name>
 801e0da:	b1b8      	cbz	r0, 801e10c <create_topic+0x84>
 801e0dc:	6928      	ldr	r0, [r5, #16]
 801e0de:	2106      	movs	r1, #6
 801e0e0:	696b      	ldr	r3, [r5, #20]
 801e0e2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e0e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e0ea:	f8cd 8000 	str.w	r8, [sp]
 801e0ee:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e0f2:	6811      	ldr	r1, [r2, #0]
 801e0f4:	6922      	ldr	r2, [r4, #16]
 801e0f6:	f7f9 fbf1 	bl	80178dc <uxr_buffer_create_topic_bin>
 801e0fa:	4602      	mov	r2, r0
 801e0fc:	6928      	ldr	r0, [r5, #16]
 801e0fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e102:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e106:	f7f8 ff45 	bl	8016f94 <run_xrce_session>
 801e10a:	b918      	cbnz	r0, 801e114 <create_topic+0x8c>
 801e10c:	4620      	mov	r0, r4
 801e10e:	2400      	movs	r4, #0
 801e110:	f7f8 fe32 	bl	8016d78 <rmw_uxrce_fini_topic_memory>
 801e114:	4620      	mov	r0, r4
 801e116:	b004      	add	sp, #16
 801e118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e11c:	20016eec 	.word	0x20016eec
 801e120:	20016f80 	.word	0x20016f80
 801e124:	20016f44 	.word	0x20016f44

0801e128 <destroy_topic>:
 801e128:	b538      	push	{r3, r4, r5, lr}
 801e12a:	6985      	ldr	r5, [r0, #24]
 801e12c:	b1dd      	cbz	r5, 801e166 <destroy_topic+0x3e>
 801e12e:	4604      	mov	r4, r0
 801e130:	6928      	ldr	r0, [r5, #16]
 801e132:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e136:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e13a:	6922      	ldr	r2, [r4, #16]
 801e13c:	6819      	ldr	r1, [r3, #0]
 801e13e:	f7f9 fb4f 	bl	80177e0 <uxr_buffer_delete_entity>
 801e142:	4602      	mov	r2, r0
 801e144:	6928      	ldr	r0, [r5, #16]
 801e146:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e14a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e14e:	f7f8 ff21 	bl	8016f94 <run_xrce_session>
 801e152:	4603      	mov	r3, r0
 801e154:	4620      	mov	r0, r4
 801e156:	2b00      	cmp	r3, #0
 801e158:	bf14      	ite	ne
 801e15a:	2400      	movne	r4, #0
 801e15c:	2402      	moveq	r4, #2
 801e15e:	f7f8 fe0b 	bl	8016d78 <rmw_uxrce_fini_topic_memory>
 801e162:	4620      	mov	r0, r4
 801e164:	bd38      	pop	{r3, r4, r5, pc}
 801e166:	2401      	movs	r4, #1
 801e168:	4620      	mov	r0, r4
 801e16a:	bd38      	pop	{r3, r4, r5, pc}

0801e16c <rmw_wait>:
 801e16c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e170:	4698      	mov	r8, r3
 801e172:	ea40 0301 	orr.w	r3, r0, r1
 801e176:	b089      	sub	sp, #36	; 0x24
 801e178:	ea48 0303 	orr.w	r3, r8, r3
 801e17c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e17e:	4313      	orrs	r3, r2
 801e180:	f000 8106 	beq.w	801e390 <rmw_wait+0x224>
 801e184:	4605      	mov	r5, r0
 801e186:	460e      	mov	r6, r1
 801e188:	4691      	mov	r9, r2
 801e18a:	b16c      	cbz	r4, 801e1a8 <rmw_wait+0x3c>
 801e18c:	4ba6      	ldr	r3, [pc, #664]	; (801e428 <rmw_wait+0x2bc>)
 801e18e:	af04      	add	r7, sp, #16
 801e190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e192:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e196:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e19a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e19e:	f7ff fcef 	bl	801db80 <rmw_time_equal>
 801e1a2:	2800      	cmp	r0, #0
 801e1a4:	f000 810b 	beq.w	801e3be <rmw_wait+0x252>
 801e1a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e1ac:	f7f8 fe74 	bl	8016e98 <rmw_uxrce_clean_expired_static_input_buffer>
 801e1b0:	4b9e      	ldr	r3, [pc, #632]	; (801e42c <rmw_wait+0x2c0>)
 801e1b2:	681c      	ldr	r4, [r3, #0]
 801e1b4:	b14c      	cbz	r4, 801e1ca <rmw_wait+0x5e>
 801e1b6:	4623      	mov	r3, r4
 801e1b8:	2100      	movs	r1, #0
 801e1ba:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e1be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e1c2:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d1f7      	bne.n	801e1ba <rmw_wait+0x4e>
 801e1ca:	f1b9 0f00 	cmp.w	r9, #0
 801e1ce:	d011      	beq.n	801e1f4 <rmw_wait+0x88>
 801e1d0:	f8d9 1000 	ldr.w	r1, [r9]
 801e1d4:	b171      	cbz	r1, 801e1f4 <rmw_wait+0x88>
 801e1d6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e1da:	2300      	movs	r3, #0
 801e1dc:	2001      	movs	r0, #1
 801e1de:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e1e2:	3301      	adds	r3, #1
 801e1e4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e1e6:	4299      	cmp	r1, r3
 801e1e8:	6912      	ldr	r2, [r2, #16]
 801e1ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e1ee:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e1f2:	d1f4      	bne.n	801e1de <rmw_wait+0x72>
 801e1f4:	f1b8 0f00 	cmp.w	r8, #0
 801e1f8:	d011      	beq.n	801e21e <rmw_wait+0xb2>
 801e1fa:	f8d8 1000 	ldr.w	r1, [r8]
 801e1fe:	b171      	cbz	r1, 801e21e <rmw_wait+0xb2>
 801e200:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e204:	2300      	movs	r3, #0
 801e206:	2001      	movs	r0, #1
 801e208:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e20c:	3301      	adds	r3, #1
 801e20e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e210:	4299      	cmp	r1, r3
 801e212:	6912      	ldr	r2, [r2, #16]
 801e214:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e218:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e21c:	d1f4      	bne.n	801e208 <rmw_wait+0x9c>
 801e21e:	b185      	cbz	r5, 801e242 <rmw_wait+0xd6>
 801e220:	6829      	ldr	r1, [r5, #0]
 801e222:	b171      	cbz	r1, 801e242 <rmw_wait+0xd6>
 801e224:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e228:	2300      	movs	r3, #0
 801e22a:	2001      	movs	r0, #1
 801e22c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e230:	3301      	adds	r3, #1
 801e232:	6a12      	ldr	r2, [r2, #32]
 801e234:	4299      	cmp	r1, r3
 801e236:	6912      	ldr	r2, [r2, #16]
 801e238:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e23c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e240:	d1f4      	bne.n	801e22c <rmw_wait+0xc0>
 801e242:	b344      	cbz	r4, 801e296 <rmw_wait+0x12a>
 801e244:	4622      	mov	r2, r4
 801e246:	2300      	movs	r3, #0
 801e248:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e24c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e250:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e254:	440b      	add	r3, r1
 801e256:	b2db      	uxtb	r3, r3
 801e258:	2a00      	cmp	r2, #0
 801e25a:	d1f5      	bne.n	801e248 <rmw_wait+0xdc>
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d05f      	beq.n	801e320 <rmw_wait+0x1b4>
 801e260:	1c7a      	adds	r2, r7, #1
 801e262:	d00d      	beq.n	801e280 <rmw_wait+0x114>
 801e264:	ee07 7a90 	vmov	s15, r7
 801e268:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e26c:	ee07 3a90 	vmov	s15, r3
 801e270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e278:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e27c:	ee17 7a90 	vmov	r7, s15
 801e280:	68a0      	ldr	r0, [r4, #8]
 801e282:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e286:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	f040 808d 	bne.w	801e3aa <rmw_wait+0x23e>
 801e290:	6864      	ldr	r4, [r4, #4]
 801e292:	2c00      	cmp	r4, #0
 801e294:	d1f4      	bne.n	801e280 <rmw_wait+0x114>
 801e296:	f1b9 0f00 	cmp.w	r9, #0
 801e29a:	f000 80a1 	beq.w	801e3e0 <rmw_wait+0x274>
 801e29e:	f8d9 7000 	ldr.w	r7, [r9]
 801e2a2:	2f00      	cmp	r7, #0
 801e2a4:	f000 80a4 	beq.w	801e3f0 <rmw_wait+0x284>
 801e2a8:	2400      	movs	r4, #0
 801e2aa:	4627      	mov	r7, r4
 801e2ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e2b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e2b4:	f7f8 fdc6 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e2b8:	2800      	cmp	r0, #0
 801e2ba:	d03b      	beq.n	801e334 <rmw_wait+0x1c8>
 801e2bc:	3401      	adds	r4, #1
 801e2be:	f8d9 3000 	ldr.w	r3, [r9]
 801e2c2:	2701      	movs	r7, #1
 801e2c4:	42a3      	cmp	r3, r4
 801e2c6:	d8f1      	bhi.n	801e2ac <rmw_wait+0x140>
 801e2c8:	2701      	movs	r7, #1
 801e2ca:	f1b8 0f00 	cmp.w	r8, #0
 801e2ce:	d010      	beq.n	801e2f2 <rmw_wait+0x186>
 801e2d0:	f8d8 3000 	ldr.w	r3, [r8]
 801e2d4:	b16b      	cbz	r3, 801e2f2 <rmw_wait+0x186>
 801e2d6:	2400      	movs	r4, #0
 801e2d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e2dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e2e0:	f7f8 fdb0 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e2e4:	b370      	cbz	r0, 801e344 <rmw_wait+0x1d8>
 801e2e6:	3401      	adds	r4, #1
 801e2e8:	f8d8 3000 	ldr.w	r3, [r8]
 801e2ec:	2701      	movs	r7, #1
 801e2ee:	42a3      	cmp	r3, r4
 801e2f0:	d8f2      	bhi.n	801e2d8 <rmw_wait+0x16c>
 801e2f2:	2d00      	cmp	r5, #0
 801e2f4:	d035      	beq.n	801e362 <rmw_wait+0x1f6>
 801e2f6:	682b      	ldr	r3, [r5, #0]
 801e2f8:	b39b      	cbz	r3, 801e362 <rmw_wait+0x1f6>
 801e2fa:	2400      	movs	r4, #0
 801e2fc:	686b      	ldr	r3, [r5, #4]
 801e2fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e302:	f7f8 fd9f 	bl	8016e44 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e306:	b328      	cbz	r0, 801e354 <rmw_wait+0x1e8>
 801e308:	3401      	adds	r4, #1
 801e30a:	682b      	ldr	r3, [r5, #0]
 801e30c:	2701      	movs	r7, #1
 801e30e:	42a3      	cmp	r3, r4
 801e310:	d8f4      	bhi.n	801e2fc <rmw_wait+0x190>
 801e312:	2e00      	cmp	r6, #0
 801e314:	d03c      	beq.n	801e390 <rmw_wait+0x224>
 801e316:	6834      	ldr	r4, [r6, #0]
 801e318:	2c00      	cmp	r4, #0
 801e31a:	d039      	beq.n	801e390 <rmw_wait+0x224>
 801e31c:	2701      	movs	r7, #1
 801e31e:	e023      	b.n	801e368 <rmw_wait+0x1fc>
 801e320:	68a0      	ldr	r0, [r4, #8]
 801e322:	2100      	movs	r1, #0
 801e324:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e328:	f7fa fb54 	bl	80189d4 <uxr_run_session_timeout>
 801e32c:	6864      	ldr	r4, [r4, #4]
 801e32e:	2c00      	cmp	r4, #0
 801e330:	d1f6      	bne.n	801e320 <rmw_wait+0x1b4>
 801e332:	e7b0      	b.n	801e296 <rmw_wait+0x12a>
 801e334:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e338:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e33c:	3401      	adds	r4, #1
 801e33e:	42a3      	cmp	r3, r4
 801e340:	d8b4      	bhi.n	801e2ac <rmw_wait+0x140>
 801e342:	e7c2      	b.n	801e2ca <rmw_wait+0x15e>
 801e344:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e348:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e34c:	3401      	adds	r4, #1
 801e34e:	429c      	cmp	r4, r3
 801e350:	d3c2      	bcc.n	801e2d8 <rmw_wait+0x16c>
 801e352:	e7ce      	b.n	801e2f2 <rmw_wait+0x186>
 801e354:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e358:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e35c:	3401      	adds	r4, #1
 801e35e:	42a3      	cmp	r3, r4
 801e360:	d8cc      	bhi.n	801e2fc <rmw_wait+0x190>
 801e362:	b1a6      	cbz	r6, 801e38e <rmw_wait+0x222>
 801e364:	6834      	ldr	r4, [r6, #0]
 801e366:	b194      	cbz	r4, 801e38e <rmw_wait+0x222>
 801e368:	2300      	movs	r3, #0
 801e36a:	461d      	mov	r5, r3
 801e36c:	e004      	b.n	801e378 <rmw_wait+0x20c>
 801e36e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e372:	3301      	adds	r3, #1
 801e374:	42a3      	cmp	r3, r4
 801e376:	d00a      	beq.n	801e38e <rmw_wait+0x222>
 801e378:	6870      	ldr	r0, [r6, #4]
 801e37a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e37e:	7c0a      	ldrb	r2, [r1, #16]
 801e380:	2a00      	cmp	r2, #0
 801e382:	d0f4      	beq.n	801e36e <rmw_wait+0x202>
 801e384:	3301      	adds	r3, #1
 801e386:	4617      	mov	r7, r2
 801e388:	740d      	strb	r5, [r1, #16]
 801e38a:	42a3      	cmp	r3, r4
 801e38c:	d1f4      	bne.n	801e378 <rmw_wait+0x20c>
 801e38e:	b147      	cbz	r7, 801e3a2 <rmw_wait+0x236>
 801e390:	2000      	movs	r0, #0
 801e392:	b009      	add	sp, #36	; 0x24
 801e394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e398:	b11e      	cbz	r6, 801e3a2 <rmw_wait+0x236>
 801e39a:	6834      	ldr	r4, [r6, #0]
 801e39c:	462f      	mov	r7, r5
 801e39e:	2c00      	cmp	r4, #0
 801e3a0:	d1e2      	bne.n	801e368 <rmw_wait+0x1fc>
 801e3a2:	2002      	movs	r0, #2
 801e3a4:	b009      	add	sp, #36	; 0x24
 801e3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3aa:	4639      	mov	r1, r7
 801e3ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e3b0:	f7fa fb2a 	bl	8018a08 <uxr_run_session_until_data>
 801e3b4:	6864      	ldr	r4, [r4, #4]
 801e3b6:	2c00      	cmp	r4, #0
 801e3b8:	f47f af62 	bne.w	801e280 <rmw_wait+0x114>
 801e3bc:	e76b      	b.n	801e296 <rmw_wait+0x12a>
 801e3be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e3c2:	f7ff fc33 	bl	801dc2c <rmw_time_total_nsec>
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	4a19      	ldr	r2, [pc, #100]	; (801e430 <rmw_wait+0x2c4>)
 801e3ca:	f7e2 f9ad 	bl	8000728 <__aeabi_uldivmod>
 801e3ce:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e3d2:	4607      	mov	r7, r0
 801e3d4:	f171 0300 	sbcs.w	r3, r1, #0
 801e3d8:	bfa8      	it	ge
 801e3da:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e3de:	e6e5      	b.n	801e1ac <rmw_wait+0x40>
 801e3e0:	f1b8 0f00 	cmp.w	r8, #0
 801e3e4:	d00f      	beq.n	801e406 <rmw_wait+0x29a>
 801e3e6:	f8d8 3000 	ldr.w	r3, [r8]
 801e3ea:	b193      	cbz	r3, 801e412 <rmw_wait+0x2a6>
 801e3ec:	464f      	mov	r7, r9
 801e3ee:	e772      	b.n	801e2d6 <rmw_wait+0x16a>
 801e3f0:	f1b8 0f00 	cmp.w	r8, #0
 801e3f4:	d007      	beq.n	801e406 <rmw_wait+0x29a>
 801e3f6:	f8d8 3000 	ldr.w	r3, [r8]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	f47f af6b 	bne.w	801e2d6 <rmw_wait+0x16a>
 801e400:	b155      	cbz	r5, 801e418 <rmw_wait+0x2ac>
 801e402:	461f      	mov	r7, r3
 801e404:	e777      	b.n	801e2f6 <rmw_wait+0x18a>
 801e406:	2d00      	cmp	r5, #0
 801e408:	d0c6      	beq.n	801e398 <rmw_wait+0x22c>
 801e40a:	682b      	ldr	r3, [r5, #0]
 801e40c:	b143      	cbz	r3, 801e420 <rmw_wait+0x2b4>
 801e40e:	4647      	mov	r7, r8
 801e410:	e773      	b.n	801e2fa <rmw_wait+0x18e>
 801e412:	b10d      	cbz	r5, 801e418 <rmw_wait+0x2ac>
 801e414:	464f      	mov	r7, r9
 801e416:	e76e      	b.n	801e2f6 <rmw_wait+0x18a>
 801e418:	462f      	mov	r7, r5
 801e41a:	2e00      	cmp	r6, #0
 801e41c:	d1a2      	bne.n	801e364 <rmw_wait+0x1f8>
 801e41e:	e7c0      	b.n	801e3a2 <rmw_wait+0x236>
 801e420:	4647      	mov	r7, r8
 801e422:	2e00      	cmp	r6, #0
 801e424:	d19e      	bne.n	801e364 <rmw_wait+0x1f8>
 801e426:	e7bc      	b.n	801e3a2 <rmw_wait+0x236>
 801e428:	08024490 	.word	0x08024490
 801e42c:	20016ebc 	.word	0x20016ebc
 801e430:	000f4240 	.word	0x000f4240

0801e434 <rmw_create_wait_set>:
 801e434:	b508      	push	{r3, lr}
 801e436:	4803      	ldr	r0, [pc, #12]	; (801e444 <rmw_create_wait_set+0x10>)
 801e438:	f7ff fd8e 	bl	801df58 <get_memory>
 801e43c:	b108      	cbz	r0, 801e442 <rmw_create_wait_set+0xe>
 801e43e:	6880      	ldr	r0, [r0, #8]
 801e440:	3010      	adds	r0, #16
 801e442:	bd08      	pop	{r3, pc}
 801e444:	20016efc 	.word	0x20016efc

0801e448 <rmw_destroy_wait_set>:
 801e448:	b508      	push	{r3, lr}
 801e44a:	4b08      	ldr	r3, [pc, #32]	; (801e46c <rmw_destroy_wait_set+0x24>)
 801e44c:	6819      	ldr	r1, [r3, #0]
 801e44e:	b911      	cbnz	r1, 801e456 <rmw_destroy_wait_set+0xe>
 801e450:	e00a      	b.n	801e468 <rmw_destroy_wait_set+0x20>
 801e452:	6849      	ldr	r1, [r1, #4]
 801e454:	b141      	cbz	r1, 801e468 <rmw_destroy_wait_set+0x20>
 801e456:	688b      	ldr	r3, [r1, #8]
 801e458:	3310      	adds	r3, #16
 801e45a:	4298      	cmp	r0, r3
 801e45c:	d1f9      	bne.n	801e452 <rmw_destroy_wait_set+0xa>
 801e45e:	4803      	ldr	r0, [pc, #12]	; (801e46c <rmw_destroy_wait_set+0x24>)
 801e460:	f7ff fd8a 	bl	801df78 <put_memory>
 801e464:	2000      	movs	r0, #0
 801e466:	bd08      	pop	{r3, pc}
 801e468:	2001      	movs	r0, #1
 801e46a:	bd08      	pop	{r3, pc}
 801e46c:	20016efc 	.word	0x20016efc

0801e470 <rmw_uros_epoch_nanos>:
 801e470:	4b05      	ldr	r3, [pc, #20]	; (801e488 <rmw_uros_epoch_nanos+0x18>)
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	b123      	cbz	r3, 801e480 <rmw_uros_epoch_nanos+0x10>
 801e476:	6898      	ldr	r0, [r3, #8]
 801e478:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e47c:	f7f9 bf20 	b.w	80182c0 <uxr_epoch_nanos>
 801e480:	2000      	movs	r0, #0
 801e482:	2100      	movs	r1, #0
 801e484:	4770      	bx	lr
 801e486:	bf00      	nop
 801e488:	20016ebc 	.word	0x20016ebc

0801e48c <std_msgs__msg__String__init>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	4604      	mov	r4, r0
 801e490:	b128      	cbz	r0, 801e49e <std_msgs__msg__String__init+0x12>
 801e492:	f7f8 feb7 	bl	8017204 <rosidl_runtime_c__String__init>
 801e496:	4605      	mov	r5, r0
 801e498:	b120      	cbz	r0, 801e4a4 <std_msgs__msg__String__init+0x18>
 801e49a:	4628      	mov	r0, r5
 801e49c:	bd38      	pop	{r3, r4, r5, pc}
 801e49e:	4605      	mov	r5, r0
 801e4a0:	4628      	mov	r0, r5
 801e4a2:	bd38      	pop	{r3, r4, r5, pc}
 801e4a4:	4620      	mov	r0, r4
 801e4a6:	f7f8 fec3 	bl	8017230 <rosidl_runtime_c__String__fini>
 801e4aa:	4628      	mov	r0, r5
 801e4ac:	bd38      	pop	{r3, r4, r5, pc}
 801e4ae:	bf00      	nop

0801e4b0 <std_msgs__msg__String__fini>:
 801e4b0:	b108      	cbz	r0, 801e4b6 <std_msgs__msg__String__fini+0x6>
 801e4b2:	f7f8 bebd 	b.w	8017230 <rosidl_runtime_c__String__fini>
 801e4b6:	4770      	bx	lr

0801e4b8 <ucdr_serialize_string>:
 801e4b8:	b510      	push	{r4, lr}
 801e4ba:	b082      	sub	sp, #8
 801e4bc:	4604      	mov	r4, r0
 801e4be:	4608      	mov	r0, r1
 801e4c0:	9101      	str	r1, [sp, #4]
 801e4c2:	f7e1 ff1d 	bl	8000300 <strlen>
 801e4c6:	4602      	mov	r2, r0
 801e4c8:	9901      	ldr	r1, [sp, #4]
 801e4ca:	4620      	mov	r0, r4
 801e4cc:	3201      	adds	r2, #1
 801e4ce:	b002      	add	sp, #8
 801e4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4d4:	f7f4 bf38 	b.w	8013348 <ucdr_serialize_sequence_char>

0801e4d8 <ucdr_deserialize_string>:
 801e4d8:	b500      	push	{lr}
 801e4da:	b083      	sub	sp, #12
 801e4dc:	ab01      	add	r3, sp, #4
 801e4de:	f7f4 ff45 	bl	801336c <ucdr_deserialize_sequence_char>
 801e4e2:	b003      	add	sp, #12
 801e4e4:	f85d fb04 	ldr.w	pc, [sp], #4

0801e4e8 <uxr_init_input_best_effort_stream>:
 801e4e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e4ec:	8003      	strh	r3, [r0, #0]
 801e4ee:	4770      	bx	lr

0801e4f0 <uxr_reset_input_best_effort_stream>:
 801e4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e4f4:	8003      	strh	r3, [r0, #0]
 801e4f6:	4770      	bx	lr

0801e4f8 <uxr_receive_best_effort_message>:
 801e4f8:	b538      	push	{r3, r4, r5, lr}
 801e4fa:	4604      	mov	r4, r0
 801e4fc:	8800      	ldrh	r0, [r0, #0]
 801e4fe:	460d      	mov	r5, r1
 801e500:	f000 fd46 	bl	801ef90 <uxr_seq_num_cmp>
 801e504:	4603      	mov	r3, r0
 801e506:	0fc0      	lsrs	r0, r0, #31
 801e508:	2b00      	cmp	r3, #0
 801e50a:	bfb8      	it	lt
 801e50c:	8025      	strhlt	r5, [r4, #0]
 801e50e:	bd38      	pop	{r3, r4, r5, pc}

0801e510 <on_full_input_buffer>:
 801e510:	b570      	push	{r4, r5, r6, lr}
 801e512:	460c      	mov	r4, r1
 801e514:	4605      	mov	r5, r0
 801e516:	8908      	ldrh	r0, [r1, #8]
 801e518:	682b      	ldr	r3, [r5, #0]
 801e51a:	7d26      	ldrb	r6, [r4, #20]
 801e51c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e520:	fbb2 f2f0 	udiv	r2, r2, r0
 801e524:	eba3 0c01 	sub.w	ip, r3, r1
 801e528:	fbbc fcf2 	udiv	ip, ip, r2
 801e52c:	f10c 0c01 	add.w	ip, ip, #1
 801e530:	fa1f f38c 	uxth.w	r3, ip
 801e534:	fbb3 fcf0 	udiv	ip, r3, r0
 801e538:	fb00 331c 	mls	r3, r0, ip, r3
 801e53c:	b29b      	uxth	r3, r3
 801e53e:	fb02 f303 	mul.w	r3, r2, r3
 801e542:	1d18      	adds	r0, r3, #4
 801e544:	4408      	add	r0, r1
 801e546:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e54a:	b116      	cbz	r6, 801e552 <on_full_input_buffer+0x42>
 801e54c:	2600      	movs	r6, #0
 801e54e:	f840 6c04 	str.w	r6, [r0, #-4]
 801e552:	2a03      	cmp	r2, #3
 801e554:	d801      	bhi.n	801e55a <on_full_input_buffer+0x4a>
 801e556:	2001      	movs	r0, #1
 801e558:	bd70      	pop	{r4, r5, r6, pc}
 801e55a:	3308      	adds	r3, #8
 801e55c:	4628      	mov	r0, r5
 801e55e:	3a04      	subs	r2, #4
 801e560:	4419      	add	r1, r3
 801e562:	692b      	ldr	r3, [r5, #16]
 801e564:	f7f4 fe74 	bl	8013250 <ucdr_init_buffer_origin>
 801e568:	4628      	mov	r0, r5
 801e56a:	4622      	mov	r2, r4
 801e56c:	4902      	ldr	r1, [pc, #8]	; (801e578 <on_full_input_buffer+0x68>)
 801e56e:	f7f4 fe4b 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 801e572:	2000      	movs	r0, #0
 801e574:	bd70      	pop	{r4, r5, r6, pc}
 801e576:	bf00      	nop
 801e578:	0801e511 	.word	0x0801e511

0801e57c <uxr_init_input_reliable_stream>:
 801e57c:	b510      	push	{r4, lr}
 801e57e:	e9c0 1200 	strd	r1, r2, [r0]
 801e582:	2400      	movs	r4, #0
 801e584:	9a02      	ldr	r2, [sp, #8]
 801e586:	8103      	strh	r3, [r0, #8]
 801e588:	6102      	str	r2, [r0, #16]
 801e58a:	7504      	strb	r4, [r0, #20]
 801e58c:	b1c3      	cbz	r3, 801e5c0 <uxr_init_input_reliable_stream+0x44>
 801e58e:	600c      	str	r4, [r1, #0]
 801e590:	8901      	ldrh	r1, [r0, #8]
 801e592:	2901      	cmp	r1, #1
 801e594:	d914      	bls.n	801e5c0 <uxr_init_input_reliable_stream+0x44>
 801e596:	f04f 0c01 	mov.w	ip, #1
 801e59a:	6843      	ldr	r3, [r0, #4]
 801e59c:	f10c 0e01 	add.w	lr, ip, #1
 801e5a0:	fbbc f2f1 	udiv	r2, ip, r1
 801e5a4:	fbb3 f3f1 	udiv	r3, r3, r1
 801e5a8:	fb01 c212 	mls	r2, r1, r2, ip
 801e5ac:	fa1f fc8e 	uxth.w	ip, lr
 801e5b0:	b292      	uxth	r2, r2
 801e5b2:	fb02 f303 	mul.w	r3, r2, r3
 801e5b6:	6802      	ldr	r2, [r0, #0]
 801e5b8:	50d4      	str	r4, [r2, r3]
 801e5ba:	8901      	ldrh	r1, [r0, #8]
 801e5bc:	4561      	cmp	r1, ip
 801e5be:	d8ec      	bhi.n	801e59a <uxr_init_input_reliable_stream+0x1e>
 801e5c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e5c4:	60c3      	str	r3, [r0, #12]
 801e5c6:	bd10      	pop	{r4, pc}

0801e5c8 <uxr_reset_input_reliable_stream>:
 801e5c8:	8901      	ldrh	r1, [r0, #8]
 801e5ca:	b1d9      	cbz	r1, 801e604 <uxr_reset_input_reliable_stream+0x3c>
 801e5cc:	b510      	push	{r4, lr}
 801e5ce:	f04f 0e00 	mov.w	lr, #0
 801e5d2:	46f4      	mov	ip, lr
 801e5d4:	4674      	mov	r4, lr
 801e5d6:	6843      	ldr	r3, [r0, #4]
 801e5d8:	f10e 0e01 	add.w	lr, lr, #1
 801e5dc:	fbbc f2f1 	udiv	r2, ip, r1
 801e5e0:	fbb3 f3f1 	udiv	r3, r3, r1
 801e5e4:	fb01 c212 	mls	r2, r1, r2, ip
 801e5e8:	fa1f fc8e 	uxth.w	ip, lr
 801e5ec:	b292      	uxth	r2, r2
 801e5ee:	fb02 f303 	mul.w	r3, r2, r3
 801e5f2:	6802      	ldr	r2, [r0, #0]
 801e5f4:	50d4      	str	r4, [r2, r3]
 801e5f6:	8901      	ldrh	r1, [r0, #8]
 801e5f8:	4561      	cmp	r1, ip
 801e5fa:	d8ec      	bhi.n	801e5d6 <uxr_reset_input_reliable_stream+0xe>
 801e5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e600:	60c3      	str	r3, [r0, #12]
 801e602:	bd10      	pop	{r4, pc}
 801e604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e608:	60c3      	str	r3, [r0, #12]
 801e60a:	4770      	bx	lr

0801e60c <uxr_receive_reliable_message>:
 801e60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e610:	4604      	mov	r4, r0
 801e612:	460d      	mov	r5, r1
 801e614:	8901      	ldrh	r1, [r0, #8]
 801e616:	4617      	mov	r7, r2
 801e618:	8980      	ldrh	r0, [r0, #12]
 801e61a:	4698      	mov	r8, r3
 801e61c:	f000 fcb0 	bl	801ef80 <uxr_seq_num_add>
 801e620:	4629      	mov	r1, r5
 801e622:	4606      	mov	r6, r0
 801e624:	89a0      	ldrh	r0, [r4, #12]
 801e626:	f000 fcb3 	bl	801ef90 <uxr_seq_num_cmp>
 801e62a:	2800      	cmp	r0, #0
 801e62c:	db0a      	blt.n	801e644 <uxr_receive_reliable_message+0x38>
 801e62e:	2600      	movs	r6, #0
 801e630:	4629      	mov	r1, r5
 801e632:	89e0      	ldrh	r0, [r4, #14]
 801e634:	f000 fcac 	bl	801ef90 <uxr_seq_num_cmp>
 801e638:	2800      	cmp	r0, #0
 801e63a:	da00      	bge.n	801e63e <uxr_receive_reliable_message+0x32>
 801e63c:	81e5      	strh	r5, [r4, #14]
 801e63e:	4630      	mov	r0, r6
 801e640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e644:	4630      	mov	r0, r6
 801e646:	4629      	mov	r1, r5
 801e648:	f000 fca2 	bl	801ef90 <uxr_seq_num_cmp>
 801e64c:	2800      	cmp	r0, #0
 801e64e:	dbee      	blt.n	801e62e <uxr_receive_reliable_message+0x22>
 801e650:	6923      	ldr	r3, [r4, #16]
 801e652:	4638      	mov	r0, r7
 801e654:	4798      	blx	r3
 801e656:	4681      	mov	r9, r0
 801e658:	2101      	movs	r1, #1
 801e65a:	89a0      	ldrh	r0, [r4, #12]
 801e65c:	f000 fc90 	bl	801ef80 <uxr_seq_num_add>
 801e660:	f1b9 0f00 	cmp.w	r9, #0
 801e664:	bf08      	it	eq
 801e666:	4285      	cmpeq	r5, r0
 801e668:	bf0c      	ite	eq
 801e66a:	2601      	moveq	r6, #1
 801e66c:	2600      	movne	r6, #0
 801e66e:	d104      	bne.n	801e67a <uxr_receive_reliable_message+0x6e>
 801e670:	2300      	movs	r3, #0
 801e672:	9a08      	ldr	r2, [sp, #32]
 801e674:	81a0      	strh	r0, [r4, #12]
 801e676:	7013      	strb	r3, [r2, #0]
 801e678:	e7da      	b.n	801e630 <uxr_receive_reliable_message+0x24>
 801e67a:	8922      	ldrh	r2, [r4, #8]
 801e67c:	6863      	ldr	r3, [r4, #4]
 801e67e:	fbb5 f0f2 	udiv	r0, r5, r2
 801e682:	fbb3 f3f2 	udiv	r3, r3, r2
 801e686:	fb02 5010 	mls	r0, r2, r0, r5
 801e68a:	b280      	uxth	r0, r0
 801e68c:	fb03 f000 	mul.w	r0, r3, r0
 801e690:	6823      	ldr	r3, [r4, #0]
 801e692:	3004      	adds	r0, #4
 801e694:	4418      	add	r0, r3
 801e696:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d1c7      	bne.n	801e62e <uxr_receive_reliable_message+0x22>
 801e69e:	4639      	mov	r1, r7
 801e6a0:	4642      	mov	r2, r8
 801e6a2:	f002 fc14 	bl	8020ece <memcpy>
 801e6a6:	8921      	ldrh	r1, [r4, #8]
 801e6a8:	6863      	ldr	r3, [r4, #4]
 801e6aa:	fbb5 f2f1 	udiv	r2, r5, r1
 801e6ae:	fbb3 f3f1 	udiv	r3, r3, r1
 801e6b2:	fb01 5212 	mls	r2, r1, r2, r5
 801e6b6:	b292      	uxth	r2, r2
 801e6b8:	fb02 f303 	mul.w	r3, r2, r3
 801e6bc:	6822      	ldr	r2, [r4, #0]
 801e6be:	f842 8003 	str.w	r8, [r2, r3]
 801e6c2:	2301      	movs	r3, #1
 801e6c4:	9a08      	ldr	r2, [sp, #32]
 801e6c6:	7013      	strb	r3, [r2, #0]
 801e6c8:	f1b9 0f00 	cmp.w	r9, #0
 801e6cc:	d0af      	beq.n	801e62e <uxr_receive_reliable_message+0x22>
 801e6ce:	89a6      	ldrh	r6, [r4, #12]
 801e6d0:	2101      	movs	r1, #1
 801e6d2:	4630      	mov	r0, r6
 801e6d4:	f000 fc54 	bl	801ef80 <uxr_seq_num_add>
 801e6d8:	8921      	ldrh	r1, [r4, #8]
 801e6da:	6863      	ldr	r3, [r4, #4]
 801e6dc:	4606      	mov	r6, r0
 801e6de:	fbb0 f2f1 	udiv	r2, r0, r1
 801e6e2:	fbb3 f3f1 	udiv	r3, r3, r1
 801e6e6:	fb01 0212 	mls	r2, r1, r2, r0
 801e6ea:	6820      	ldr	r0, [r4, #0]
 801e6ec:	b292      	uxth	r2, r2
 801e6ee:	fb02 f303 	mul.w	r3, r2, r3
 801e6f2:	3304      	adds	r3, #4
 801e6f4:	4418      	add	r0, r3
 801e6f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d097      	beq.n	801e62e <uxr_receive_reliable_message+0x22>
 801e6fe:	6923      	ldr	r3, [r4, #16]
 801e700:	4798      	blx	r3
 801e702:	2802      	cmp	r0, #2
 801e704:	d002      	beq.n	801e70c <uxr_receive_reliable_message+0x100>
 801e706:	2801      	cmp	r0, #1
 801e708:	d0e2      	beq.n	801e6d0 <uxr_receive_reliable_message+0xc4>
 801e70a:	e790      	b.n	801e62e <uxr_receive_reliable_message+0x22>
 801e70c:	2601      	movs	r6, #1
 801e70e:	e78f      	b.n	801e630 <uxr_receive_reliable_message+0x24>

0801e710 <uxr_next_input_reliable_buffer_available>:
 801e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e714:	4604      	mov	r4, r0
 801e716:	460f      	mov	r7, r1
 801e718:	8980      	ldrh	r0, [r0, #12]
 801e71a:	2101      	movs	r1, #1
 801e71c:	4690      	mov	r8, r2
 801e71e:	f000 fc2f 	bl	801ef80 <uxr_seq_num_add>
 801e722:	8922      	ldrh	r2, [r4, #8]
 801e724:	6866      	ldr	r6, [r4, #4]
 801e726:	fbb0 f3f2 	udiv	r3, r0, r2
 801e72a:	fbb6 f6f2 	udiv	r6, r6, r2
 801e72e:	fb02 0313 	mls	r3, r2, r3, r0
 801e732:	b29b      	uxth	r3, r3
 801e734:	fb03 f606 	mul.w	r6, r3, r6
 801e738:	6823      	ldr	r3, [r4, #0]
 801e73a:	3604      	adds	r6, #4
 801e73c:	441e      	add	r6, r3
 801e73e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e742:	f1b9 0f00 	cmp.w	r9, #0
 801e746:	d023      	beq.n	801e790 <uxr_next_input_reliable_buffer_available+0x80>
 801e748:	4605      	mov	r5, r0
 801e74a:	6923      	ldr	r3, [r4, #16]
 801e74c:	4630      	mov	r0, r6
 801e74e:	4798      	blx	r3
 801e750:	4682      	mov	sl, r0
 801e752:	b300      	cbz	r0, 801e796 <uxr_next_input_reliable_buffer_available+0x86>
 801e754:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e758:	2101      	movs	r1, #1
 801e75a:	4650      	mov	r0, sl
 801e75c:	f000 fc10 	bl	801ef80 <uxr_seq_num_add>
 801e760:	8921      	ldrh	r1, [r4, #8]
 801e762:	4682      	mov	sl, r0
 801e764:	6863      	ldr	r3, [r4, #4]
 801e766:	6820      	ldr	r0, [r4, #0]
 801e768:	fbba f2f1 	udiv	r2, sl, r1
 801e76c:	fbb3 f3f1 	udiv	r3, r3, r1
 801e770:	fb01 a212 	mls	r2, r1, r2, sl
 801e774:	b292      	uxth	r2, r2
 801e776:	fb02 f303 	mul.w	r3, r2, r3
 801e77a:	3304      	adds	r3, #4
 801e77c:	4418      	add	r0, r3
 801e77e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e782:	b12b      	cbz	r3, 801e790 <uxr_next_input_reliable_buffer_available+0x80>
 801e784:	6923      	ldr	r3, [r4, #16]
 801e786:	4798      	blx	r3
 801e788:	2802      	cmp	r0, #2
 801e78a:	d01b      	beq.n	801e7c4 <uxr_next_input_reliable_buffer_available+0xb4>
 801e78c:	2801      	cmp	r0, #1
 801e78e:	d0e3      	beq.n	801e758 <uxr_next_input_reliable_buffer_available+0x48>
 801e790:	2000      	movs	r0, #0
 801e792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e796:	464a      	mov	r2, r9
 801e798:	4631      	mov	r1, r6
 801e79a:	4638      	mov	r0, r7
 801e79c:	f7f4 fd60 	bl	8013260 <ucdr_init_buffer>
 801e7a0:	8921      	ldrh	r1, [r4, #8]
 801e7a2:	6863      	ldr	r3, [r4, #4]
 801e7a4:	2001      	movs	r0, #1
 801e7a6:	fbb5 f2f1 	udiv	r2, r5, r1
 801e7aa:	fbb3 f3f1 	udiv	r3, r3, r1
 801e7ae:	fb01 5212 	mls	r2, r1, r2, r5
 801e7b2:	b292      	uxth	r2, r2
 801e7b4:	fb02 f303 	mul.w	r3, r2, r3
 801e7b8:	6822      	ldr	r2, [r4, #0]
 801e7ba:	f842 a003 	str.w	sl, [r2, r3]
 801e7be:	81a5      	strh	r5, [r4, #12]
 801e7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7c4:	8920      	ldrh	r0, [r4, #8]
 801e7c6:	eb06 0108 	add.w	r1, r6, r8
 801e7ca:	6863      	ldr	r3, [r4, #4]
 801e7cc:	eba9 0208 	sub.w	r2, r9, r8
 801e7d0:	fbb5 f6f0 	udiv	r6, r5, r0
 801e7d4:	fbb3 f3f0 	udiv	r3, r3, r0
 801e7d8:	fb00 5516 	mls	r5, r0, r6, r5
 801e7dc:	2000      	movs	r0, #0
 801e7de:	b2ad      	uxth	r5, r5
 801e7e0:	fb03 f505 	mul.w	r5, r3, r5
 801e7e4:	6823      	ldr	r3, [r4, #0]
 801e7e6:	5158      	str	r0, [r3, r5]
 801e7e8:	4638      	mov	r0, r7
 801e7ea:	f7f4 fd39 	bl	8013260 <ucdr_init_buffer>
 801e7ee:	4638      	mov	r0, r7
 801e7f0:	4622      	mov	r2, r4
 801e7f2:	4903      	ldr	r1, [pc, #12]	; (801e800 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e7f4:	f7f4 fd08 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 801e7f8:	2001      	movs	r0, #1
 801e7fa:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e7fe:	e7c8      	b.n	801e792 <uxr_next_input_reliable_buffer_available+0x82>
 801e800:	0801e511 	.word	0x0801e511

0801e804 <uxr_process_heartbeat>:
 801e804:	b538      	push	{r3, r4, r5, lr}
 801e806:	4611      	mov	r1, r2
 801e808:	4604      	mov	r4, r0
 801e80a:	89c0      	ldrh	r0, [r0, #14]
 801e80c:	4615      	mov	r5, r2
 801e80e:	f000 fbbf 	bl	801ef90 <uxr_seq_num_cmp>
 801e812:	2800      	cmp	r0, #0
 801e814:	bfb8      	it	lt
 801e816:	81e5      	strhlt	r5, [r4, #14]
 801e818:	bd38      	pop	{r3, r4, r5, pc}
 801e81a:	bf00      	nop

0801e81c <uxr_compute_acknack>:
 801e81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e820:	8903      	ldrh	r3, [r0, #8]
 801e822:	4604      	mov	r4, r0
 801e824:	460f      	mov	r7, r1
 801e826:	8985      	ldrh	r5, [r0, #12]
 801e828:	b1db      	cbz	r3, 801e862 <uxr_compute_acknack+0x46>
 801e82a:	4628      	mov	r0, r5
 801e82c:	2601      	movs	r6, #1
 801e82e:	e004      	b.n	801e83a <uxr_compute_acknack+0x1e>
 801e830:	4566      	cmp	r6, ip
 801e832:	f106 0601 	add.w	r6, r6, #1
 801e836:	d214      	bcs.n	801e862 <uxr_compute_acknack+0x46>
 801e838:	89a0      	ldrh	r0, [r4, #12]
 801e83a:	b2b1      	uxth	r1, r6
 801e83c:	f000 fba0 	bl	801ef80 <uxr_seq_num_add>
 801e840:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e844:	fbb0 f2fc 	udiv	r2, r0, ip
 801e848:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e84c:	fb0c 0212 	mls	r2, ip, r2, r0
 801e850:	fbb3 f3fc 	udiv	r3, r3, ip
 801e854:	b292      	uxth	r2, r2
 801e856:	fb02 f303 	mul.w	r3, r2, r3
 801e85a:	58cb      	ldr	r3, [r1, r3]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d1e7      	bne.n	801e830 <uxr_compute_acknack+0x14>
 801e860:	4605      	mov	r5, r0
 801e862:	803d      	strh	r5, [r7, #0]
 801e864:	2101      	movs	r1, #1
 801e866:	89e6      	ldrh	r6, [r4, #14]
 801e868:	4628      	mov	r0, r5
 801e86a:	f000 fb8d 	bl	801ef88 <uxr_seq_num_sub>
 801e86e:	4601      	mov	r1, r0
 801e870:	4630      	mov	r0, r6
 801e872:	f000 fb89 	bl	801ef88 <uxr_seq_num_sub>
 801e876:	4606      	mov	r6, r0
 801e878:	b328      	cbz	r0, 801e8c6 <uxr_compute_acknack+0xaa>
 801e87a:	f04f 0900 	mov.w	r9, #0
 801e87e:	f04f 0801 	mov.w	r8, #1
 801e882:	464d      	mov	r5, r9
 801e884:	fa1f f189 	uxth.w	r1, r9
 801e888:	8838      	ldrh	r0, [r7, #0]
 801e88a:	f000 fb79 	bl	801ef80 <uxr_seq_num_add>
 801e88e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e892:	6861      	ldr	r1, [r4, #4]
 801e894:	fa08 fe09 	lsl.w	lr, r8, r9
 801e898:	6822      	ldr	r2, [r4, #0]
 801e89a:	f109 0901 	add.w	r9, r9, #1
 801e89e:	ea4e 0e05 	orr.w	lr, lr, r5
 801e8a2:	fbb0 f3fc 	udiv	r3, r0, ip
 801e8a6:	fbb1 f1fc 	udiv	r1, r1, ip
 801e8aa:	fb03 001c 	mls	r0, r3, ip, r0
 801e8ae:	b283      	uxth	r3, r0
 801e8b0:	fb01 f303 	mul.w	r3, r1, r3
 801e8b4:	58d3      	ldr	r3, [r2, r3]
 801e8b6:	b90b      	cbnz	r3, 801e8bc <uxr_compute_acknack+0xa0>
 801e8b8:	fa1f f58e 	uxth.w	r5, lr
 801e8bc:	454e      	cmp	r6, r9
 801e8be:	d1e1      	bne.n	801e884 <uxr_compute_acknack+0x68>
 801e8c0:	4628      	mov	r0, r5
 801e8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8c6:	4605      	mov	r5, r0
 801e8c8:	4628      	mov	r0, r5
 801e8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8ce:	bf00      	nop

0801e8d0 <uxr_init_output_best_effort_stream>:
 801e8d0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801e8d4:	6001      	str	r1, [r0, #0]
 801e8d6:	7303      	strb	r3, [r0, #12]
 801e8d8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e8dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e8e0:	4770      	bx	lr
 801e8e2:	bf00      	nop

0801e8e4 <uxr_reset_output_best_effort_stream>:
 801e8e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e8e8:	7b03      	ldrb	r3, [r0, #12]
 801e8ea:	81c2      	strh	r2, [r0, #14]
 801e8ec:	6043      	str	r3, [r0, #4]
 801e8ee:	4770      	bx	lr

0801e8f0 <uxr_prepare_best_effort_buffer_to_write>:
 801e8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8f2:	4604      	mov	r4, r0
 801e8f4:	b083      	sub	sp, #12
 801e8f6:	6840      	ldr	r0, [r0, #4]
 801e8f8:	460d      	mov	r5, r1
 801e8fa:	4616      	mov	r6, r2
 801e8fc:	f7fb fa5c 	bl	8019db8 <uxr_submessage_padding>
 801e900:	6863      	ldr	r3, [r4, #4]
 801e902:	4418      	add	r0, r3
 801e904:	68a3      	ldr	r3, [r4, #8]
 801e906:	1942      	adds	r2, r0, r5
 801e908:	4293      	cmp	r3, r2
 801e90a:	bf2c      	ite	cs
 801e90c:	2701      	movcs	r7, #1
 801e90e:	2700      	movcc	r7, #0
 801e910:	d202      	bcs.n	801e918 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801e912:	4638      	mov	r0, r7
 801e914:	b003      	add	sp, #12
 801e916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e918:	9000      	str	r0, [sp, #0]
 801e91a:	2300      	movs	r3, #0
 801e91c:	4630      	mov	r0, r6
 801e91e:	6821      	ldr	r1, [r4, #0]
 801e920:	f7f4 fc8c 	bl	801323c <ucdr_init_buffer_origin_offset>
 801e924:	6861      	ldr	r1, [r4, #4]
 801e926:	4638      	mov	r0, r7
 801e928:	4429      	add	r1, r5
 801e92a:	6061      	str	r1, [r4, #4]
 801e92c:	b003      	add	sp, #12
 801e92e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e930 <uxr_prepare_best_effort_buffer_to_send>:
 801e930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e934:	4604      	mov	r4, r0
 801e936:	461d      	mov	r5, r3
 801e938:	6840      	ldr	r0, [r0, #4]
 801e93a:	7b23      	ldrb	r3, [r4, #12]
 801e93c:	4298      	cmp	r0, r3
 801e93e:	bf8c      	ite	hi
 801e940:	2601      	movhi	r6, #1
 801e942:	2600      	movls	r6, #0
 801e944:	d802      	bhi.n	801e94c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801e946:	4630      	mov	r0, r6
 801e948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e94c:	4688      	mov	r8, r1
 801e94e:	89e0      	ldrh	r0, [r4, #14]
 801e950:	2101      	movs	r1, #1
 801e952:	4617      	mov	r7, r2
 801e954:	f000 fb14 	bl	801ef80 <uxr_seq_num_add>
 801e958:	6823      	ldr	r3, [r4, #0]
 801e95a:	81e0      	strh	r0, [r4, #14]
 801e95c:	8028      	strh	r0, [r5, #0]
 801e95e:	4630      	mov	r0, r6
 801e960:	f8c8 3000 	str.w	r3, [r8]
 801e964:	6863      	ldr	r3, [r4, #4]
 801e966:	603b      	str	r3, [r7, #0]
 801e968:	7b23      	ldrb	r3, [r4, #12]
 801e96a:	6063      	str	r3, [r4, #4]
 801e96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e970 <on_full_output_buffer>:
 801e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e972:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801e976:	460c      	mov	r4, r1
 801e978:	6803      	ldr	r3, [r0, #0]
 801e97a:	4605      	mov	r5, r0
 801e97c:	7b26      	ldrb	r6, [r4, #12]
 801e97e:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e982:	fbb2 f2fc 	udiv	r2, r2, ip
 801e986:	eba3 0e01 	sub.w	lr, r3, r1
 801e98a:	6903      	ldr	r3, [r0, #16]
 801e98c:	fbbe fef2 	udiv	lr, lr, r2
 801e990:	f10e 0e01 	add.w	lr, lr, #1
 801e994:	fa1f fe8e 	uxth.w	lr, lr
 801e998:	fbbe f7fc 	udiv	r7, lr, ip
 801e99c:	fb0c ec17 	mls	ip, ip, r7, lr
 801e9a0:	fa1f fc8c 	uxth.w	ip, ip
 801e9a4:	fb02 fc0c 	mul.w	ip, r2, ip
 801e9a8:	f851 200c 	ldr.w	r2, [r1, ip]
 801e9ac:	44b4      	add	ip, r6
 801e9ae:	1b92      	subs	r2, r2, r6
 801e9b0:	f10c 0c08 	add.w	ip, ip, #8
 801e9b4:	3a04      	subs	r2, #4
 801e9b6:	4461      	add	r1, ip
 801e9b8:	f7f4 fc4a 	bl	8013250 <ucdr_init_buffer_origin>
 801e9bc:	4628      	mov	r0, r5
 801e9be:	4622      	mov	r2, r4
 801e9c0:	4902      	ldr	r1, [pc, #8]	; (801e9cc <on_full_output_buffer+0x5c>)
 801e9c2:	f7f4 fc21 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 801e9c6:	2000      	movs	r0, #0
 801e9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9ca:	bf00      	nop
 801e9cc:	0801e971 	.word	0x0801e971

0801e9d0 <uxr_init_output_reliable_stream>:
 801e9d0:	b530      	push	{r4, r5, lr}
 801e9d2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801e9d6:	8103      	strh	r3, [r0, #8]
 801e9d8:	7304      	strb	r4, [r0, #12]
 801e9da:	e9c0 1200 	strd	r1, r2, [r0]
 801e9de:	b1e3      	cbz	r3, 801ea1a <uxr_init_output_reliable_stream+0x4a>
 801e9e0:	600c      	str	r4, [r1, #0]
 801e9e2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e9e6:	f1bc 0f01 	cmp.w	ip, #1
 801e9ea:	d916      	bls.n	801ea1a <uxr_init_output_reliable_stream+0x4a>
 801e9ec:	f04f 0e01 	mov.w	lr, #1
 801e9f0:	6843      	ldr	r3, [r0, #4]
 801e9f2:	f10e 0501 	add.w	r5, lr, #1
 801e9f6:	7b04      	ldrb	r4, [r0, #12]
 801e9f8:	6801      	ldr	r1, [r0, #0]
 801e9fa:	fbbe f2fc 	udiv	r2, lr, ip
 801e9fe:	fbb3 f3fc 	udiv	r3, r3, ip
 801ea02:	fb0c e212 	mls	r2, ip, r2, lr
 801ea06:	fa1f fe85 	uxth.w	lr, r5
 801ea0a:	b292      	uxth	r2, r2
 801ea0c:	fb02 f303 	mul.w	r3, r2, r3
 801ea10:	50cc      	str	r4, [r1, r3]
 801ea12:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ea16:	45f4      	cmp	ip, lr
 801ea18:	d8ea      	bhi.n	801e9f0 <uxr_init_output_reliable_stream+0x20>
 801ea1a:	4b07      	ldr	r3, [pc, #28]	; (801ea38 <uxr_init_output_reliable_stream+0x68>)
 801ea1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ea24:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801ea28:	f8c0 300e 	str.w	r3, [r0, #14]
 801ea2c:	2300      	movs	r3, #0
 801ea2e:	8242      	strh	r2, [r0, #18]
 801ea30:	8403      	strh	r3, [r0, #32]
 801ea32:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801ea36:	bd30      	pop	{r4, r5, pc}
 801ea38:	ffff0000 	.word	0xffff0000
 801ea3c:	00000000 	.word	0x00000000

0801ea40 <uxr_reset_output_reliable_stream>:
 801ea40:	8901      	ldrh	r1, [r0, #8]
 801ea42:	b510      	push	{r4, lr}
 801ea44:	b1b1      	cbz	r1, 801ea74 <uxr_reset_output_reliable_stream+0x34>
 801ea46:	f04f 0e00 	mov.w	lr, #0
 801ea4a:	46f4      	mov	ip, lr
 801ea4c:	6843      	ldr	r3, [r0, #4]
 801ea4e:	f10e 0e01 	add.w	lr, lr, #1
 801ea52:	7b04      	ldrb	r4, [r0, #12]
 801ea54:	fbbc f2f1 	udiv	r2, ip, r1
 801ea58:	fbb3 f3f1 	udiv	r3, r3, r1
 801ea5c:	fb01 c212 	mls	r2, r1, r2, ip
 801ea60:	fa1f fc8e 	uxth.w	ip, lr
 801ea64:	b292      	uxth	r2, r2
 801ea66:	fb02 f303 	mul.w	r3, r2, r3
 801ea6a:	6802      	ldr	r2, [r0, #0]
 801ea6c:	50d4      	str	r4, [r2, r3]
 801ea6e:	8901      	ldrh	r1, [r0, #8]
 801ea70:	4561      	cmp	r1, ip
 801ea72:	d8eb      	bhi.n	801ea4c <uxr_reset_output_reliable_stream+0xc>
 801ea74:	4b08      	ldr	r3, [pc, #32]	; (801ea98 <uxr_reset_output_reliable_stream+0x58>)
 801ea76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea7a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801ea90 <uxr_reset_output_reliable_stream+0x50>
 801ea7e:	f8c0 300e 	str.w	r3, [r0, #14]
 801ea82:	2300      	movs	r3, #0
 801ea84:	8242      	strh	r2, [r0, #18]
 801ea86:	8403      	strh	r3, [r0, #32]
 801ea88:	ed80 7b06 	vstr	d7, [r0, #24]
 801ea8c:	bd10      	pop	{r4, pc}
 801ea8e:	bf00      	nop
 801ea90:	ffffffff 	.word	0xffffffff
 801ea94:	7fffffff 	.word	0x7fffffff
 801ea98:	ffff0000 	.word	0xffff0000

0801ea9c <uxr_prepare_reliable_buffer_to_write>:
 801ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa0:	4604      	mov	r4, r0
 801eaa2:	b091      	sub	sp, #68	; 0x44
 801eaa4:	8900      	ldrh	r0, [r0, #8]
 801eaa6:	468b      	mov	fp, r1
 801eaa8:	89e6      	ldrh	r6, [r4, #14]
 801eaaa:	9204      	str	r2, [sp, #16]
 801eaac:	6865      	ldr	r5, [r4, #4]
 801eaae:	6823      	ldr	r3, [r4, #0]
 801eab0:	f894 900c 	ldrb.w	r9, [r4, #12]
 801eab4:	fbb6 f2f0 	udiv	r2, r6, r0
 801eab8:	fbb5 f5f0 	udiv	r5, r5, r0
 801eabc:	fb00 6212 	mls	r2, r0, r2, r6
 801eac0:	1f2f      	subs	r7, r5, #4
 801eac2:	b292      	uxth	r2, r2
 801eac4:	fb05 3202 	mla	r2, r5, r2, r3
 801eac8:	1d11      	adds	r1, r2, #4
 801eaca:	f8d2 8000 	ldr.w	r8, [r2]
 801eace:	9103      	str	r1, [sp, #12]
 801ead0:	2800      	cmp	r0, #0
 801ead2:	f000 814a 	beq.w	801ed6a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801ead6:	f04f 0c00 	mov.w	ip, #0
 801eada:	46e2      	mov	sl, ip
 801eadc:	4661      	mov	r1, ip
 801eade:	f10c 0c01 	add.w	ip, ip, #1
 801eae2:	fbb1 f2f0 	udiv	r2, r1, r0
 801eae6:	fb00 1212 	mls	r2, r0, r2, r1
 801eaea:	fa1f f18c 	uxth.w	r1, ip
 801eaee:	b292      	uxth	r2, r2
 801eaf0:	fb05 f202 	mul.w	r2, r5, r2
 801eaf4:	589a      	ldr	r2, [r3, r2]
 801eaf6:	454a      	cmp	r2, r9
 801eaf8:	d103      	bne.n	801eb02 <uxr_prepare_reliable_buffer_to_write+0x66>
 801eafa:	f10a 0a01 	add.w	sl, sl, #1
 801eafe:	fa1f fa8a 	uxth.w	sl, sl
 801eb02:	4281      	cmp	r1, r0
 801eb04:	d3eb      	bcc.n	801eade <uxr_prepare_reliable_buffer_to_write+0x42>
 801eb06:	4640      	mov	r0, r8
 801eb08:	2104      	movs	r1, #4
 801eb0a:	f8cd a014 	str.w	sl, [sp, #20]
 801eb0e:	f7f4 fbab 	bl	8013268 <ucdr_alignment>
 801eb12:	4480      	add	r8, r0
 801eb14:	eb08 020b 	add.w	r2, r8, fp
 801eb18:	42ba      	cmp	r2, r7
 801eb1a:	f240 80ca 	bls.w	801ecb2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801eb1e:	7b22      	ldrb	r2, [r4, #12]
 801eb20:	445a      	add	r2, fp
 801eb22:	42ba      	cmp	r2, r7
 801eb24:	f240 80b2 	bls.w	801ec8c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801eb28:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801eb2c:	b2bb      	uxth	r3, r7
 801eb2e:	eba2 0209 	sub.w	r2, r2, r9
 801eb32:	441a      	add	r2, r3
 801eb34:	b292      	uxth	r2, r2
 801eb36:	fb0a f902 	mul.w	r9, sl, r2
 801eb3a:	9205      	str	r2, [sp, #20]
 801eb3c:	45d9      	cmp	r9, fp
 801eb3e:	9206      	str	r2, [sp, #24]
 801eb40:	f0c0 80b3 	bcc.w	801ecaa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801eb44:	f108 0204 	add.w	r2, r8, #4
 801eb48:	42ba      	cmp	r2, r7
 801eb4a:	f080 80da 	bcs.w	801ed02 <uxr_prepare_reliable_buffer_to_write+0x266>
 801eb4e:	f1a3 0904 	sub.w	r9, r3, #4
 801eb52:	9b05      	ldr	r3, [sp, #20]
 801eb54:	eba9 0908 	sub.w	r9, r9, r8
 801eb58:	fa1f f989 	uxth.w	r9, r9
 801eb5c:	ebab 0b09 	sub.w	fp, fp, r9
 801eb60:	fbbb f2f3 	udiv	r2, fp, r3
 801eb64:	fb03 b312 	mls	r3, r3, r2, fp
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	f040 80c4 	bne.w	801ecf6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801eb6e:	b293      	uxth	r3, r2
 801eb70:	4553      	cmp	r3, sl
 801eb72:	f200 809a 	bhi.w	801ecaa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	f000 80f9 	beq.w	801ed6e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801eb7c:	f8cd 801c 	str.w	r8, [sp, #28]
 801eb80:	f04f 0a00 	mov.w	sl, #0
 801eb84:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801eb88:	f10d 0b20 	add.w	fp, sp, #32
 801eb8c:	9505      	str	r5, [sp, #20]
 801eb8e:	461d      	mov	r5, r3
 801eb90:	e000      	b.n	801eb94 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801eb92:	46c1      	mov	r9, r8
 801eb94:	8922      	ldrh	r2, [r4, #8]
 801eb96:	4658      	mov	r0, fp
 801eb98:	6863      	ldr	r3, [r4, #4]
 801eb9a:	f10a 0a01 	add.w	sl, sl, #1
 801eb9e:	fbb6 f1f2 	udiv	r1, r6, r2
 801eba2:	fbb3 f3f2 	udiv	r3, r3, r2
 801eba6:	fb02 6111 	mls	r1, r2, r1, r6
 801ebaa:	463a      	mov	r2, r7
 801ebac:	b289      	uxth	r1, r1
 801ebae:	fb03 f101 	mul.w	r1, r3, r1
 801ebb2:	6823      	ldr	r3, [r4, #0]
 801ebb4:	3104      	adds	r1, #4
 801ebb6:	4419      	add	r1, r3
 801ebb8:	2300      	movs	r3, #0
 801ebba:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801ebbe:	f8cd c000 	str.w	ip, [sp]
 801ebc2:	f7f4 fb3b 	bl	801323c <ucdr_init_buffer_origin_offset>
 801ebc6:	464a      	mov	r2, r9
 801ebc8:	2300      	movs	r3, #0
 801ebca:	210d      	movs	r1, #13
 801ebcc:	4658      	mov	r0, fp
 801ebce:	f7fb f8b3 	bl	8019d38 <uxr_buffer_submessage_header>
 801ebd2:	8921      	ldrh	r1, [r4, #8]
 801ebd4:	6863      	ldr	r3, [r4, #4]
 801ebd6:	4630      	mov	r0, r6
 801ebd8:	fbb6 f2f1 	udiv	r2, r6, r1
 801ebdc:	fbb3 f3f1 	udiv	r3, r3, r1
 801ebe0:	fb01 6212 	mls	r2, r1, r2, r6
 801ebe4:	2101      	movs	r1, #1
 801ebe6:	b292      	uxth	r2, r2
 801ebe8:	fb02 f303 	mul.w	r3, r2, r3
 801ebec:	6822      	ldr	r2, [r4, #0]
 801ebee:	50d7      	str	r7, [r2, r3]
 801ebf0:	f000 f9c6 	bl	801ef80 <uxr_seq_num_add>
 801ebf4:	4606      	mov	r6, r0
 801ebf6:	fa1f f38a 	uxth.w	r3, sl
 801ebfa:	429d      	cmp	r5, r3
 801ebfc:	d8c9      	bhi.n	801eb92 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801ebfe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ec02:	9d05      	ldr	r5, [sp, #20]
 801ec04:	8920      	ldrh	r0, [r4, #8]
 801ec06:	463a      	mov	r2, r7
 801ec08:	6863      	ldr	r3, [r4, #4]
 801ec0a:	fbb6 f1f0 	udiv	r1, r6, r0
 801ec0e:	fbb3 f3f0 	udiv	r3, r3, r0
 801ec12:	fb00 6111 	mls	r1, r0, r1, r6
 801ec16:	4658      	mov	r0, fp
 801ec18:	b289      	uxth	r1, r1
 801ec1a:	fb01 f303 	mul.w	r3, r1, r3
 801ec1e:	6821      	ldr	r1, [r4, #0]
 801ec20:	3304      	adds	r3, #4
 801ec22:	4419      	add	r1, r3
 801ec24:	2300      	movs	r3, #0
 801ec26:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801ec2a:	9700      	str	r7, [sp, #0]
 801ec2c:	f7f4 fb06 	bl	801323c <ucdr_init_buffer_origin_offset>
 801ec30:	9f06      	ldr	r7, [sp, #24]
 801ec32:	4658      	mov	r0, fp
 801ec34:	2302      	movs	r3, #2
 801ec36:	b2ba      	uxth	r2, r7
 801ec38:	210d      	movs	r1, #13
 801ec3a:	f7fb f87d 	bl	8019d38 <uxr_buffer_submessage_header>
 801ec3e:	f108 0104 	add.w	r1, r8, #4
 801ec42:	9b03      	ldr	r3, [sp, #12]
 801ec44:	f1a5 0208 	sub.w	r2, r5, #8
 801ec48:	8925      	ldrh	r5, [r4, #8]
 801ec4a:	440b      	add	r3, r1
 801ec4c:	eba2 0208 	sub.w	r2, r2, r8
 801ec50:	fbb6 f0f5 	udiv	r0, r6, r5
 801ec54:	4619      	mov	r1, r3
 801ec56:	6863      	ldr	r3, [r4, #4]
 801ec58:	fb05 6010 	mls	r0, r5, r0, r6
 801ec5c:	fbb3 f3f5 	udiv	r3, r3, r5
 801ec60:	b280      	uxth	r0, r0
 801ec62:	6825      	ldr	r5, [r4, #0]
 801ec64:	fb00 f303 	mul.w	r3, r0, r3
 801ec68:	7b20      	ldrb	r0, [r4, #12]
 801ec6a:	3004      	adds	r0, #4
 801ec6c:	4438      	add	r0, r7
 801ec6e:	50e8      	str	r0, [r5, r3]
 801ec70:	9d04      	ldr	r5, [sp, #16]
 801ec72:	4628      	mov	r0, r5
 801ec74:	f7f4 faf4 	bl	8013260 <ucdr_init_buffer>
 801ec78:	4628      	mov	r0, r5
 801ec7a:	4622      	mov	r2, r4
 801ec7c:	493d      	ldr	r1, [pc, #244]	; (801ed74 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ec7e:	f7f4 fac3 	bl	8013208 <ucdr_set_on_full_buffer_callback>
 801ec82:	2001      	movs	r0, #1
 801ec84:	81e6      	strh	r6, [r4, #14]
 801ec86:	b011      	add	sp, #68	; 0x44
 801ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec8c:	2101      	movs	r1, #1
 801ec8e:	89e0      	ldrh	r0, [r4, #14]
 801ec90:	f000 f976 	bl	801ef80 <uxr_seq_num_add>
 801ec94:	4605      	mov	r5, r0
 801ec96:	8921      	ldrh	r1, [r4, #8]
 801ec98:	8a60      	ldrh	r0, [r4, #18]
 801ec9a:	f000 f971 	bl	801ef80 <uxr_seq_num_add>
 801ec9e:	4601      	mov	r1, r0
 801eca0:	4628      	mov	r0, r5
 801eca2:	f000 f975 	bl	801ef90 <uxr_seq_num_cmp>
 801eca6:	2800      	cmp	r0, #0
 801eca8:	dd44      	ble.n	801ed34 <uxr_prepare_reliable_buffer_to_write+0x298>
 801ecaa:	2000      	movs	r0, #0
 801ecac:	b011      	add	sp, #68	; 0x44
 801ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb2:	8921      	ldrh	r1, [r4, #8]
 801ecb4:	8a60      	ldrh	r0, [r4, #18]
 801ecb6:	9205      	str	r2, [sp, #20]
 801ecb8:	f000 f962 	bl	801ef80 <uxr_seq_num_add>
 801ecbc:	4601      	mov	r1, r0
 801ecbe:	4630      	mov	r0, r6
 801ecc0:	f000 f966 	bl	801ef90 <uxr_seq_num_cmp>
 801ecc4:	2800      	cmp	r0, #0
 801ecc6:	9a05      	ldr	r2, [sp, #20]
 801ecc8:	dcef      	bgt.n	801ecaa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ecca:	8925      	ldrh	r5, [r4, #8]
 801eccc:	e9d4 7300 	ldrd	r7, r3, [r4]
 801ecd0:	fbb6 f4f5 	udiv	r4, r6, r5
 801ecd4:	fbb3 f3f5 	udiv	r3, r3, r5
 801ecd8:	fb05 6414 	mls	r4, r5, r4, r6
 801ecdc:	b2a4      	uxth	r4, r4
 801ecde:	fb04 f303 	mul.w	r3, r4, r3
 801ece2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801ece6:	50fa      	str	r2, [r7, r3]
 801ece8:	2300      	movs	r3, #0
 801ecea:	f8cd 8000 	str.w	r8, [sp]
 801ecee:	f7f4 faa5 	bl	801323c <ucdr_init_buffer_origin_offset>
 801ecf2:	2001      	movs	r0, #1
 801ecf4:	e7da      	b.n	801ecac <uxr_prepare_reliable_buffer_to_write+0x210>
 801ecf6:	3201      	adds	r2, #1
 801ecf8:	9306      	str	r3, [sp, #24]
 801ecfa:	b293      	uxth	r3, r2
 801ecfc:	4553      	cmp	r3, sl
 801ecfe:	d8d4      	bhi.n	801ecaa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ed00:	e739      	b.n	801eb76 <uxr_prepare_reliable_buffer_to_write+0xda>
 801ed02:	4630      	mov	r0, r6
 801ed04:	2101      	movs	r1, #1
 801ed06:	9307      	str	r3, [sp, #28]
 801ed08:	f000 f93a 	bl	801ef80 <uxr_seq_num_add>
 801ed0c:	4606      	mov	r6, r0
 801ed0e:	8920      	ldrh	r0, [r4, #8]
 801ed10:	6862      	ldr	r2, [r4, #4]
 801ed12:	fbb6 f1f0 	udiv	r1, r6, r0
 801ed16:	fbb2 f2f0 	udiv	r2, r2, r0
 801ed1a:	fb00 6111 	mls	r1, r0, r1, r6
 801ed1e:	b289      	uxth	r1, r1
 801ed20:	fb01 f202 	mul.w	r2, r1, r2
 801ed24:	6821      	ldr	r1, [r4, #0]
 801ed26:	3204      	adds	r2, #4
 801ed28:	188b      	adds	r3, r1, r2
 801ed2a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ed2e:	9303      	str	r3, [sp, #12]
 801ed30:	9b07      	ldr	r3, [sp, #28]
 801ed32:	e70c      	b.n	801eb4e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ed34:	8921      	ldrh	r1, [r4, #8]
 801ed36:	6863      	ldr	r3, [r4, #4]
 801ed38:	9804      	ldr	r0, [sp, #16]
 801ed3a:	fbb5 f2f1 	udiv	r2, r5, r1
 801ed3e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ed42:	fb01 5212 	mls	r2, r1, r2, r5
 801ed46:	6821      	ldr	r1, [r4, #0]
 801ed48:	b292      	uxth	r2, r2
 801ed4a:	fb02 f303 	mul.w	r3, r2, r3
 801ed4e:	7b22      	ldrb	r2, [r4, #12]
 801ed50:	3304      	adds	r3, #4
 801ed52:	445a      	add	r2, fp
 801ed54:	4419      	add	r1, r3
 801ed56:	f841 2c04 	str.w	r2, [r1, #-4]
 801ed5a:	7b23      	ldrb	r3, [r4, #12]
 801ed5c:	9300      	str	r3, [sp, #0]
 801ed5e:	2300      	movs	r3, #0
 801ed60:	f7f4 fa6c 	bl	801323c <ucdr_init_buffer_origin_offset>
 801ed64:	2001      	movs	r0, #1
 801ed66:	81e5      	strh	r5, [r4, #14]
 801ed68:	e7a0      	b.n	801ecac <uxr_prepare_reliable_buffer_to_write+0x210>
 801ed6a:	4682      	mov	sl, r0
 801ed6c:	e6cb      	b.n	801eb06 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ed6e:	f10d 0b20 	add.w	fp, sp, #32
 801ed72:	e747      	b.n	801ec04 <uxr_prepare_reliable_buffer_to_write+0x168>
 801ed74:	0801e971 	.word	0x0801e971

0801ed78 <uxr_prepare_next_reliable_buffer_to_send>:
 801ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed7a:	4604      	mov	r4, r0
 801ed7c:	461d      	mov	r5, r3
 801ed7e:	460f      	mov	r7, r1
 801ed80:	8a00      	ldrh	r0, [r0, #16]
 801ed82:	2101      	movs	r1, #1
 801ed84:	4616      	mov	r6, r2
 801ed86:	f000 f8fb 	bl	801ef80 <uxr_seq_num_add>
 801ed8a:	8028      	strh	r0, [r5, #0]
 801ed8c:	8922      	ldrh	r2, [r4, #8]
 801ed8e:	6863      	ldr	r3, [r4, #4]
 801ed90:	fbb0 f1f2 	udiv	r1, r0, r2
 801ed94:	fbb3 f3f2 	udiv	r3, r3, r2
 801ed98:	fb02 0c11 	mls	ip, r2, r1, r0
 801ed9c:	89e1      	ldrh	r1, [r4, #14]
 801ed9e:	fa1f fc8c 	uxth.w	ip, ip
 801eda2:	fb0c fc03 	mul.w	ip, ip, r3
 801eda6:	6823      	ldr	r3, [r4, #0]
 801eda8:	f10c 0c04 	add.w	ip, ip, #4
 801edac:	4463      	add	r3, ip
 801edae:	603b      	str	r3, [r7, #0]
 801edb0:	6823      	ldr	r3, [r4, #0]
 801edb2:	449c      	add	ip, r3
 801edb4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801edb8:	6033      	str	r3, [r6, #0]
 801edba:	f000 f8e9 	bl	801ef90 <uxr_seq_num_cmp>
 801edbe:	2800      	cmp	r0, #0
 801edc0:	dd01      	ble.n	801edc6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801edc2:	2000      	movs	r0, #0
 801edc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edc6:	7b23      	ldrb	r3, [r4, #12]
 801edc8:	6832      	ldr	r2, [r6, #0]
 801edca:	429a      	cmp	r2, r3
 801edcc:	d9f9      	bls.n	801edc2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801edce:	8a61      	ldrh	r1, [r4, #18]
 801edd0:	8a20      	ldrh	r0, [r4, #16]
 801edd2:	f000 f8d9 	bl	801ef88 <uxr_seq_num_sub>
 801edd6:	8923      	ldrh	r3, [r4, #8]
 801edd8:	4283      	cmp	r3, r0
 801edda:	d0f2      	beq.n	801edc2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801eddc:	8828      	ldrh	r0, [r5, #0]
 801edde:	89e3      	ldrh	r3, [r4, #14]
 801ede0:	8220      	strh	r0, [r4, #16]
 801ede2:	4298      	cmp	r0, r3
 801ede4:	d001      	beq.n	801edea <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801ede6:	2001      	movs	r0, #1
 801ede8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edea:	2101      	movs	r1, #1
 801edec:	f000 f8c8 	bl	801ef80 <uxr_seq_num_add>
 801edf0:	4603      	mov	r3, r0
 801edf2:	2001      	movs	r0, #1
 801edf4:	81e3      	strh	r3, [r4, #14]
 801edf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801edf8 <uxr_update_output_stream_heartbeat_timestamp>:
 801edf8:	b570      	push	{r4, r5, r6, lr}
 801edfa:	8a01      	ldrh	r1, [r0, #16]
 801edfc:	4604      	mov	r4, r0
 801edfe:	8a40      	ldrh	r0, [r0, #18]
 801ee00:	4615      	mov	r5, r2
 801ee02:	461e      	mov	r6, r3
 801ee04:	f000 f8c4 	bl	801ef90 <uxr_seq_num_cmp>
 801ee08:	2800      	cmp	r0, #0
 801ee0a:	db07      	blt.n	801ee1c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ee0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ee10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ee14:	2000      	movs	r0, #0
 801ee16:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ee1a:	bd70      	pop	{r4, r5, r6, pc}
 801ee1c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ee20:	b940      	cbnz	r0, 801ee34 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ee22:	2301      	movs	r3, #1
 801ee24:	f884 3020 	strb.w	r3, [r4, #32]
 801ee28:	3564      	adds	r5, #100	; 0x64
 801ee2a:	f146 0600 	adc.w	r6, r6, #0
 801ee2e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ee32:	bd70      	pop	{r4, r5, r6, pc}
 801ee34:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ee38:	4295      	cmp	r5, r2
 801ee3a:	eb76 0303 	sbcs.w	r3, r6, r3
 801ee3e:	db04      	blt.n	801ee4a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801ee40:	1c43      	adds	r3, r0, #1
 801ee42:	2001      	movs	r0, #1
 801ee44:	f884 3020 	strb.w	r3, [r4, #32]
 801ee48:	e7ee      	b.n	801ee28 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ee4a:	2000      	movs	r0, #0
 801ee4c:	e7ec      	b.n	801ee28 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ee4e:	bf00      	nop

0801ee50 <uxr_begin_output_nack_buffer_it>:
 801ee50:	8a40      	ldrh	r0, [r0, #18]
 801ee52:	4770      	bx	lr

0801ee54 <uxr_next_reliable_nack_buffer_to_send>:
 801ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee58:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801ee5c:	b197      	cbz	r7, 801ee84 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801ee5e:	4680      	mov	r8, r0
 801ee60:	460d      	mov	r5, r1
 801ee62:	4616      	mov	r6, r2
 801ee64:	461c      	mov	r4, r3
 801ee66:	8818      	ldrh	r0, [r3, #0]
 801ee68:	2101      	movs	r1, #1
 801ee6a:	f000 f889 	bl	801ef80 <uxr_seq_num_add>
 801ee6e:	8020      	strh	r0, [r4, #0]
 801ee70:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ee74:	f000 f88c 	bl	801ef90 <uxr_seq_num_cmp>
 801ee78:	2800      	cmp	r0, #0
 801ee7a:	dd06      	ble.n	801ee8a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	461f      	mov	r7, r3
 801ee80:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801ee84:	4638      	mov	r0, r7
 801ee86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee8a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ee8e:	8820      	ldrh	r0, [r4, #0]
 801ee90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ee94:	fbb0 f3f2 	udiv	r3, r0, r2
 801ee98:	fbb1 fcf2 	udiv	ip, r1, r2
 801ee9c:	fb02 0313 	mls	r3, r2, r3, r0
 801eea0:	b29b      	uxth	r3, r3
 801eea2:	fb03 fc0c 	mul.w	ip, r3, ip
 801eea6:	f8d8 3000 	ldr.w	r3, [r8]
 801eeaa:	f10c 0c04 	add.w	ip, ip, #4
 801eeae:	4463      	add	r3, ip
 801eeb0:	602b      	str	r3, [r5, #0]
 801eeb2:	f8d8 3000 	ldr.w	r3, [r8]
 801eeb6:	4463      	add	r3, ip
 801eeb8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801eebc:	6033      	str	r3, [r6, #0]
 801eebe:	f898 200c 	ldrb.w	r2, [r8, #12]
 801eec2:	429a      	cmp	r2, r3
 801eec4:	d0d0      	beq.n	801ee68 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801eec6:	e7dd      	b.n	801ee84 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801eec8 <uxr_process_acknack>:
 801eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeca:	4604      	mov	r4, r0
 801eecc:	460e      	mov	r6, r1
 801eece:	4610      	mov	r0, r2
 801eed0:	2101      	movs	r1, #1
 801eed2:	f000 f859 	bl	801ef88 <uxr_seq_num_sub>
 801eed6:	8a61      	ldrh	r1, [r4, #18]
 801eed8:	f000 f856 	bl	801ef88 <uxr_seq_num_sub>
 801eedc:	b1c8      	cbz	r0, 801ef12 <uxr_process_acknack+0x4a>
 801eede:	4605      	mov	r5, r0
 801eee0:	2700      	movs	r7, #0
 801eee2:	2101      	movs	r1, #1
 801eee4:	8a60      	ldrh	r0, [r4, #18]
 801eee6:	f000 f84b 	bl	801ef80 <uxr_seq_num_add>
 801eeea:	8923      	ldrh	r3, [r4, #8]
 801eeec:	6862      	ldr	r2, [r4, #4]
 801eeee:	3701      	adds	r7, #1
 801eef0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801eef4:	6821      	ldr	r1, [r4, #0]
 801eef6:	42bd      	cmp	r5, r7
 801eef8:	8260      	strh	r0, [r4, #18]
 801eefa:	fbb0 fef3 	udiv	lr, r0, r3
 801eefe:	fbb2 f2f3 	udiv	r2, r2, r3
 801ef02:	fb03 031e 	mls	r3, r3, lr, r0
 801ef06:	b29b      	uxth	r3, r3
 801ef08:	fb02 f303 	mul.w	r3, r2, r3
 801ef0c:	f841 c003 	str.w	ip, [r1, r3]
 801ef10:	d1e7      	bne.n	801eee2 <uxr_process_acknack+0x1a>
 801ef12:	3e00      	subs	r6, #0
 801ef14:	f04f 0300 	mov.w	r3, #0
 801ef18:	bf18      	it	ne
 801ef1a:	2601      	movne	r6, #1
 801ef1c:	f884 3020 	strb.w	r3, [r4, #32]
 801ef20:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801ef24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef26:	bf00      	nop

0801ef28 <uxr_is_output_up_to_date>:
 801ef28:	8a01      	ldrh	r1, [r0, #16]
 801ef2a:	8a40      	ldrh	r0, [r0, #18]
 801ef2c:	b508      	push	{r3, lr}
 801ef2e:	f000 f82f 	bl	801ef90 <uxr_seq_num_cmp>
 801ef32:	fab0 f080 	clz	r0, r0
 801ef36:	0940      	lsrs	r0, r0, #5
 801ef38:	bd08      	pop	{r3, pc}
 801ef3a:	bf00      	nop

0801ef3c <get_available_free_slots>:
 801ef3c:	8901      	ldrh	r1, [r0, #8]
 801ef3e:	b1e1      	cbz	r1, 801ef7a <get_available_free_slots+0x3e>
 801ef40:	6843      	ldr	r3, [r0, #4]
 801ef42:	f04f 0c00 	mov.w	ip, #0
 801ef46:	b530      	push	{r4, r5, lr}
 801ef48:	fbb3 fef1 	udiv	lr, r3, r1
 801ef4c:	6805      	ldr	r5, [r0, #0]
 801ef4e:	4662      	mov	r2, ip
 801ef50:	7b04      	ldrb	r4, [r0, #12]
 801ef52:	4660      	mov	r0, ip
 801ef54:	f10c 0c01 	add.w	ip, ip, #1
 801ef58:	fbb2 f3f1 	udiv	r3, r2, r1
 801ef5c:	fb01 2313 	mls	r3, r1, r3, r2
 801ef60:	fa1f f28c 	uxth.w	r2, ip
 801ef64:	b29b      	uxth	r3, r3
 801ef66:	fb0e f303 	mul.w	r3, lr, r3
 801ef6a:	58eb      	ldr	r3, [r5, r3]
 801ef6c:	429c      	cmp	r4, r3
 801ef6e:	d101      	bne.n	801ef74 <get_available_free_slots+0x38>
 801ef70:	3001      	adds	r0, #1
 801ef72:	b280      	uxth	r0, r0
 801ef74:	428a      	cmp	r2, r1
 801ef76:	d3ed      	bcc.n	801ef54 <get_available_free_slots+0x18>
 801ef78:	bd30      	pop	{r4, r5, pc}
 801ef7a:	4608      	mov	r0, r1
 801ef7c:	4770      	bx	lr
 801ef7e:	bf00      	nop

0801ef80 <uxr_seq_num_add>:
 801ef80:	4408      	add	r0, r1
 801ef82:	b280      	uxth	r0, r0
 801ef84:	4770      	bx	lr
 801ef86:	bf00      	nop

0801ef88 <uxr_seq_num_sub>:
 801ef88:	1a40      	subs	r0, r0, r1
 801ef8a:	b280      	uxth	r0, r0
 801ef8c:	4770      	bx	lr
 801ef8e:	bf00      	nop

0801ef90 <uxr_seq_num_cmp>:
 801ef90:	4288      	cmp	r0, r1
 801ef92:	d011      	beq.n	801efb8 <uxr_seq_num_cmp+0x28>
 801ef94:	d309      	bcc.n	801efaa <uxr_seq_num_cmp+0x1a>
 801ef96:	4288      	cmp	r0, r1
 801ef98:	d910      	bls.n	801efbc <uxr_seq_num_cmp+0x2c>
 801ef9a:	1a40      	subs	r0, r0, r1
 801ef9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801efa0:	bfd4      	ite	le
 801efa2:	2001      	movle	r0, #1
 801efa4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801efa8:	4770      	bx	lr
 801efaa:	1a0b      	subs	r3, r1, r0
 801efac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801efb0:	daf1      	bge.n	801ef96 <uxr_seq_num_cmp+0x6>
 801efb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801efb6:	4770      	bx	lr
 801efb8:	2000      	movs	r0, #0
 801efba:	4770      	bx	lr
 801efbc:	2001      	movs	r0, #1
 801efbe:	4770      	bx	lr

0801efc0 <rcl_get_default_domain_id>:
 801efc0:	b530      	push	{r4, r5, lr}
 801efc2:	2300      	movs	r3, #0
 801efc4:	b083      	sub	sp, #12
 801efc6:	9300      	str	r3, [sp, #0]
 801efc8:	b1d0      	cbz	r0, 801f000 <rcl_get_default_domain_id+0x40>
 801efca:	4604      	mov	r4, r0
 801efcc:	4669      	mov	r1, sp
 801efce:	4815      	ldr	r0, [pc, #84]	; (801f024 <rcl_get_default_domain_id+0x64>)
 801efd0:	f7f6 f82a 	bl	8015028 <rcutils_get_env>
 801efd4:	4602      	mov	r2, r0
 801efd6:	b110      	cbz	r0, 801efde <rcl_get_default_domain_id+0x1e>
 801efd8:	2001      	movs	r0, #1
 801efda:	b003      	add	sp, #12
 801efdc:	bd30      	pop	{r4, r5, pc}
 801efde:	9b00      	ldr	r3, [sp, #0]
 801efe0:	b18b      	cbz	r3, 801f006 <rcl_get_default_domain_id+0x46>
 801efe2:	7818      	ldrb	r0, [r3, #0]
 801efe4:	2800      	cmp	r0, #0
 801efe6:	d0f8      	beq.n	801efda <rcl_get_default_domain_id+0x1a>
 801efe8:	a901      	add	r1, sp, #4
 801efea:	4618      	mov	r0, r3
 801efec:	9201      	str	r2, [sp, #4]
 801efee:	f000 fc8f 	bl	801f910 <strtoul>
 801eff2:	4605      	mov	r5, r0
 801eff4:	b150      	cbz	r0, 801f00c <rcl_get_default_domain_id+0x4c>
 801eff6:	1c43      	adds	r3, r0, #1
 801eff8:	d00d      	beq.n	801f016 <rcl_get_default_domain_id+0x56>
 801effa:	2000      	movs	r0, #0
 801effc:	6025      	str	r5, [r4, #0]
 801effe:	e7ec      	b.n	801efda <rcl_get_default_domain_id+0x1a>
 801f000:	200b      	movs	r0, #11
 801f002:	b003      	add	sp, #12
 801f004:	bd30      	pop	{r4, r5, pc}
 801f006:	4618      	mov	r0, r3
 801f008:	b003      	add	sp, #12
 801f00a:	bd30      	pop	{r4, r5, pc}
 801f00c:	9b01      	ldr	r3, [sp, #4]
 801f00e:	781b      	ldrb	r3, [r3, #0]
 801f010:	2b00      	cmp	r3, #0
 801f012:	d0f2      	beq.n	801effa <rcl_get_default_domain_id+0x3a>
 801f014:	e7e0      	b.n	801efd8 <rcl_get_default_domain_id+0x18>
 801f016:	f001 ff25 	bl	8020e64 <__errno>
 801f01a:	6803      	ldr	r3, [r0, #0]
 801f01c:	2b22      	cmp	r3, #34	; 0x22
 801f01e:	d1ec      	bne.n	801effa <rcl_get_default_domain_id+0x3a>
 801f020:	e7da      	b.n	801efd8 <rcl_get_default_domain_id+0x18>
 801f022:	bf00      	nop
 801f024:	08025a08 	.word	0x08025a08

0801f028 <rcl_expand_topic_name>:
 801f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f02c:	b08d      	sub	sp, #52	; 0x34
 801f02e:	4698      	mov	r8, r3
 801f030:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f032:	9207      	str	r2, [sp, #28]
 801f034:	2b00      	cmp	r3, #0
 801f036:	bf18      	it	ne
 801f038:	f1b8 0f00 	cmpne.w	r8, #0
 801f03c:	bf0c      	ite	eq
 801f03e:	2301      	moveq	r3, #1
 801f040:	2300      	movne	r3, #0
 801f042:	2a00      	cmp	r2, #0
 801f044:	bf08      	it	eq
 801f046:	f043 0301 	orreq.w	r3, r3, #1
 801f04a:	2900      	cmp	r1, #0
 801f04c:	bf08      	it	eq
 801f04e:	f043 0301 	orreq.w	r3, r3, #1
 801f052:	2b00      	cmp	r3, #0
 801f054:	d13d      	bne.n	801f0d2 <rcl_expand_topic_name+0xaa>
 801f056:	fab0 f280 	clz	r2, r0
 801f05a:	4604      	mov	r4, r0
 801f05c:	0952      	lsrs	r2, r2, #5
 801f05e:	2800      	cmp	r0, #0
 801f060:	d037      	beq.n	801f0d2 <rcl_expand_topic_name+0xaa>
 801f062:	460f      	mov	r7, r1
 801f064:	a90b      	add	r1, sp, #44	; 0x2c
 801f066:	f000 f945 	bl	801f2f4 <rcl_validate_topic_name>
 801f06a:	4605      	mov	r5, r0
 801f06c:	bb68      	cbnz	r0, 801f0ca <rcl_expand_topic_name+0xa2>
 801f06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f070:	2b00      	cmp	r3, #0
 801f072:	d137      	bne.n	801f0e4 <rcl_expand_topic_name+0xbc>
 801f074:	4602      	mov	r2, r0
 801f076:	a90b      	add	r1, sp, #44	; 0x2c
 801f078:	4638      	mov	r0, r7
 801f07a:	f7f6 fa97 	bl	80155ac <rmw_validate_node_name>
 801f07e:	bb68      	cbnz	r0, 801f0dc <rcl_expand_topic_name+0xb4>
 801f080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f082:	2b00      	cmp	r3, #0
 801f084:	d133      	bne.n	801f0ee <rcl_expand_topic_name+0xc6>
 801f086:	462a      	mov	r2, r5
 801f088:	a90b      	add	r1, sp, #44	; 0x2c
 801f08a:	9807      	ldr	r0, [sp, #28]
 801f08c:	f7f6 fa70 	bl	8015570 <rmw_validate_namespace>
 801f090:	bb20      	cbnz	r0, 801f0dc <rcl_expand_topic_name+0xb4>
 801f092:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f094:	2d00      	cmp	r5, #0
 801f096:	f040 80a2 	bne.w	801f1de <rcl_expand_topic_name+0x1b6>
 801f09a:	217b      	movs	r1, #123	; 0x7b
 801f09c:	4620      	mov	r0, r4
 801f09e:	f001 fe51 	bl	8020d44 <strchr>
 801f0a2:	7823      	ldrb	r3, [r4, #0]
 801f0a4:	4681      	mov	r9, r0
 801f0a6:	bb20      	cbnz	r0, 801f0f2 <rcl_expand_topic_name+0xca>
 801f0a8:	2b2f      	cmp	r3, #47	; 0x2f
 801f0aa:	d122      	bne.n	801f0f2 <rcl_expand_topic_name+0xca>
 801f0ac:	ab19      	add	r3, sp, #100	; 0x64
 801f0ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f0b2:	ab16      	add	r3, sp, #88	; 0x58
 801f0b4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f0b8:	4620      	mov	r0, r4
 801f0ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f0bc:	f7f6 f93a 	bl	8015334 <rcutils_strdup>
 801f0c0:	2800      	cmp	r0, #0
 801f0c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f0c4:	bf08      	it	eq
 801f0c6:	250a      	moveq	r5, #10
 801f0c8:	6018      	str	r0, [r3, #0]
 801f0ca:	4628      	mov	r0, r5
 801f0cc:	b00d      	add	sp, #52	; 0x34
 801f0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0d2:	250b      	movs	r5, #11
 801f0d4:	4628      	mov	r0, r5
 801f0d6:	b00d      	add	sp, #52	; 0x34
 801f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0dc:	f7fc f97a 	bl	801b3d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801f0e0:	4605      	mov	r5, r0
 801f0e2:	e7f2      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f0e4:	2567      	movs	r5, #103	; 0x67
 801f0e6:	4628      	mov	r0, r5
 801f0e8:	b00d      	add	sp, #52	; 0x34
 801f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ee:	25c9      	movs	r5, #201	; 0xc9
 801f0f0:	e7eb      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f0f2:	2b7e      	cmp	r3, #126	; 0x7e
 801f0f4:	d075      	beq.n	801f1e2 <rcl_expand_topic_name+0x1ba>
 801f0f6:	f1b9 0f00 	cmp.w	r9, #0
 801f0fa:	f000 80c2 	beq.w	801f282 <rcl_expand_topic_name+0x25a>
 801f0fe:	2300      	movs	r3, #0
 801f100:	46a2      	mov	sl, r4
 801f102:	461e      	mov	r6, r3
 801f104:	9508      	str	r5, [sp, #32]
 801f106:	4655      	mov	r5, sl
 801f108:	9409      	str	r4, [sp, #36]	; 0x24
 801f10a:	46b2      	mov	sl, r6
 801f10c:	464c      	mov	r4, r9
 801f10e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f112:	2c00      	cmp	r4, #0
 801f114:	f000 80ae 	beq.w	801f274 <rcl_expand_topic_name+0x24c>
 801f118:	217d      	movs	r1, #125	; 0x7d
 801f11a:	4628      	mov	r0, r5
 801f11c:	f001 fe12 	bl	8020d44 <strchr>
 801f120:	eba0 0904 	sub.w	r9, r0, r4
 801f124:	4621      	mov	r1, r4
 801f126:	4869      	ldr	r0, [pc, #420]	; (801f2cc <rcl_expand_topic_name+0x2a4>)
 801f128:	f109 0601 	add.w	r6, r9, #1
 801f12c:	4632      	mov	r2, r6
 801f12e:	f001 fe16 	bl	8020d5e <strncmp>
 801f132:	2800      	cmp	r0, #0
 801f134:	d051      	beq.n	801f1da <rcl_expand_topic_name+0x1b2>
 801f136:	4632      	mov	r2, r6
 801f138:	4621      	mov	r1, r4
 801f13a:	4865      	ldr	r0, [pc, #404]	; (801f2d0 <rcl_expand_topic_name+0x2a8>)
 801f13c:	f001 fe0f 	bl	8020d5e <strncmp>
 801f140:	b128      	cbz	r0, 801f14e <rcl_expand_topic_name+0x126>
 801f142:	4632      	mov	r2, r6
 801f144:	4621      	mov	r1, r4
 801f146:	4863      	ldr	r0, [pc, #396]	; (801f2d4 <rcl_expand_topic_name+0x2ac>)
 801f148:	f001 fe09 	bl	8020d5e <strncmp>
 801f14c:	bb38      	cbnz	r0, 801f19e <rcl_expand_topic_name+0x176>
 801f14e:	46d9      	mov	r9, fp
 801f150:	ab18      	add	r3, sp, #96	; 0x60
 801f152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f156:	ab16      	add	r3, sp, #88	; 0x58
 801f158:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f15c:	4620      	mov	r0, r4
 801f15e:	4631      	mov	r1, r6
 801f160:	cb0c      	ldmia	r3, {r2, r3}
 801f162:	f7f6 f909 	bl	8015378 <rcutils_strndup>
 801f166:	4604      	mov	r4, r0
 801f168:	2800      	cmp	r0, #0
 801f16a:	f000 80a3 	beq.w	801f2b4 <rcl_expand_topic_name+0x28c>
 801f16e:	464a      	mov	r2, r9
 801f170:	4628      	mov	r0, r5
 801f172:	ab16      	add	r3, sp, #88	; 0x58
 801f174:	4621      	mov	r1, r4
 801f176:	f7f5 ffdd 	bl	8015134 <rcutils_repl_str>
 801f17a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f17c:	4605      	mov	r5, r0
 801f17e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f180:	4620      	mov	r0, r4
 801f182:	4798      	blx	r3
 801f184:	4650      	mov	r0, sl
 801f186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f188:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f18a:	4798      	blx	r3
 801f18c:	2d00      	cmp	r5, #0
 801f18e:	d06c      	beq.n	801f26a <rcl_expand_topic_name+0x242>
 801f190:	217b      	movs	r1, #123	; 0x7b
 801f192:	4628      	mov	r0, r5
 801f194:	f001 fdd6 	bl	8020d44 <strchr>
 801f198:	46aa      	mov	sl, r5
 801f19a:	4604      	mov	r4, r0
 801f19c:	e7b9      	b.n	801f112 <rcl_expand_topic_name+0xea>
 801f19e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801f1a2:	1c61      	adds	r1, r4, #1
 801f1a4:	4640      	mov	r0, r8
 801f1a6:	f7fe fca5 	bl	801daf4 <rcutils_string_map_getn>
 801f1aa:	4681      	mov	r9, r0
 801f1ac:	2800      	cmp	r0, #0
 801f1ae:	d1cf      	bne.n	801f150 <rcl_expand_topic_name+0x128>
 801f1b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f1b2:	aa18      	add	r2, sp, #96	; 0x60
 801f1b4:	2569      	movs	r5, #105	; 0x69
 801f1b6:	6018      	str	r0, [r3, #0]
 801f1b8:	ab16      	add	r3, sp, #88	; 0x58
 801f1ba:	ca07      	ldmia	r2, {r0, r1, r2}
 801f1bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f1c0:	4631      	mov	r1, r6
 801f1c2:	4620      	mov	r0, r4
 801f1c4:	cb0c      	ldmia	r3, {r2, r3}
 801f1c6:	f7f6 f8d7 	bl	8015378 <rcutils_strndup>
 801f1ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f1cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f1ce:	4798      	blx	r3
 801f1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f1d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f1d4:	4650      	mov	r0, sl
 801f1d6:	4798      	blx	r3
 801f1d8:	e777      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f1da:	46b9      	mov	r9, r7
 801f1dc:	e7b8      	b.n	801f150 <rcl_expand_topic_name+0x128>
 801f1de:	25ca      	movs	r5, #202	; 0xca
 801f1e0:	e773      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f1e2:	9e07      	ldr	r6, [sp, #28]
 801f1e4:	4630      	mov	r0, r6
 801f1e6:	f7e1 f88b 	bl	8000300 <strlen>
 801f1ea:	4a3b      	ldr	r2, [pc, #236]	; (801f2d8 <rcl_expand_topic_name+0x2b0>)
 801f1ec:	4b3b      	ldr	r3, [pc, #236]	; (801f2dc <rcl_expand_topic_name+0x2b4>)
 801f1ee:	9603      	str	r6, [sp, #12]
 801f1f0:	2801      	cmp	r0, #1
 801f1f2:	bf18      	it	ne
 801f1f4:	4613      	movne	r3, r2
 801f1f6:	9704      	str	r7, [sp, #16]
 801f1f8:	9302      	str	r3, [sp, #8]
 801f1fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f1fc:	9300      	str	r3, [sp, #0]
 801f1fe:	1c63      	adds	r3, r4, #1
 801f200:	9305      	str	r3, [sp, #20]
 801f202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f206:	9301      	str	r3, [sp, #4]
 801f208:	ab16      	add	r3, sp, #88	; 0x58
 801f20a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f20c:	f7f5 ff58 	bl	80150c0 <rcutils_format_string_limit>
 801f210:	4606      	mov	r6, r0
 801f212:	b350      	cbz	r0, 801f26a <rcl_expand_topic_name+0x242>
 801f214:	f1b9 0f00 	cmp.w	r9, #0
 801f218:	d005      	beq.n	801f226 <rcl_expand_topic_name+0x1fe>
 801f21a:	217b      	movs	r1, #123	; 0x7b
 801f21c:	46b2      	mov	sl, r6
 801f21e:	f001 fd91 	bl	8020d44 <strchr>
 801f222:	4681      	mov	r9, r0
 801f224:	e76e      	b.n	801f104 <rcl_expand_topic_name+0xdc>
 801f226:	7833      	ldrb	r3, [r6, #0]
 801f228:	2b2f      	cmp	r3, #47	; 0x2f
 801f22a:	d01b      	beq.n	801f264 <rcl_expand_topic_name+0x23c>
 801f22c:	9c07      	ldr	r4, [sp, #28]
 801f22e:	4620      	mov	r0, r4
 801f230:	f7e1 f866 	bl	8000300 <strlen>
 801f234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f238:	4a29      	ldr	r2, [pc, #164]	; (801f2e0 <rcl_expand_topic_name+0x2b8>)
 801f23a:	9301      	str	r3, [sp, #4]
 801f23c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f23e:	9604      	str	r6, [sp, #16]
 801f240:	9300      	str	r3, [sp, #0]
 801f242:	4b28      	ldr	r3, [pc, #160]	; (801f2e4 <rcl_expand_topic_name+0x2bc>)
 801f244:	9403      	str	r4, [sp, #12]
 801f246:	2801      	cmp	r0, #1
 801f248:	bf18      	it	ne
 801f24a:	4613      	movne	r3, r2
 801f24c:	9302      	str	r3, [sp, #8]
 801f24e:	ab16      	add	r3, sp, #88	; 0x58
 801f250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f252:	f7f5 ff35 	bl	80150c0 <rcutils_format_string_limit>
 801f256:	4603      	mov	r3, r0
 801f258:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f25a:	4630      	mov	r0, r6
 801f25c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f25e:	461e      	mov	r6, r3
 801f260:	4790      	blx	r2
 801f262:	b116      	cbz	r6, 801f26a <rcl_expand_topic_name+0x242>
 801f264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f266:	601e      	str	r6, [r3, #0]
 801f268:	e72f      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f26a:	2300      	movs	r3, #0
 801f26c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f26e:	250a      	movs	r5, #10
 801f270:	6013      	str	r3, [r2, #0]
 801f272:	e72a      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f274:	4653      	mov	r3, sl
 801f276:	4656      	mov	r6, sl
 801f278:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d1d2      	bne.n	801f226 <rcl_expand_topic_name+0x1fe>
 801f280:	7823      	ldrb	r3, [r4, #0]
 801f282:	2b2f      	cmp	r3, #47	; 0x2f
 801f284:	d01e      	beq.n	801f2c4 <rcl_expand_topic_name+0x29c>
 801f286:	9e07      	ldr	r6, [sp, #28]
 801f288:	4630      	mov	r0, r6
 801f28a:	f7e1 f839 	bl	8000300 <strlen>
 801f28e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f294:	9603      	str	r6, [sp, #12]
 801f296:	9404      	str	r4, [sp, #16]
 801f298:	e9cd 2300 	strd	r2, r3, [sp]
 801f29c:	4a10      	ldr	r2, [pc, #64]	; (801f2e0 <rcl_expand_topic_name+0x2b8>)
 801f29e:	4b11      	ldr	r3, [pc, #68]	; (801f2e4 <rcl_expand_topic_name+0x2bc>)
 801f2a0:	2801      	cmp	r0, #1
 801f2a2:	bf18      	it	ne
 801f2a4:	4613      	movne	r3, r2
 801f2a6:	9302      	str	r3, [sp, #8]
 801f2a8:	ab16      	add	r3, sp, #88	; 0x58
 801f2aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f2ac:	f7f5 ff08 	bl	80150c0 <rcutils_format_string_limit>
 801f2b0:	4606      	mov	r6, r0
 801f2b2:	e7d6      	b.n	801f262 <rcl_expand_topic_name+0x23a>
 801f2b4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f2b8:	4650      	mov	r0, sl
 801f2ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f2bc:	6014      	str	r4, [r2, #0]
 801f2be:	250a      	movs	r5, #10
 801f2c0:	4798      	blx	r3
 801f2c2:	e702      	b.n	801f0ca <rcl_expand_topic_name+0xa2>
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	461e      	mov	r6, r3
 801f2c8:	e7cc      	b.n	801f264 <rcl_expand_topic_name+0x23c>
 801f2ca:	bf00      	nop
 801f2cc:	08025a20 	.word	0x08025a20
 801f2d0:	08025a28 	.word	0x08025a28
 801f2d4:	08025a30 	.word	0x08025a30
 801f2d8:	08025a18 	.word	0x08025a18
 801f2dc:	080253a0 	.word	0x080253a0
 801f2e0:	08024da0 	.word	0x08024da0
 801f2e4:	08024d98 	.word	0x08024d98

0801f2e8 <rcl_get_default_topic_name_substitutions>:
 801f2e8:	2800      	cmp	r0, #0
 801f2ea:	bf0c      	ite	eq
 801f2ec:	200b      	moveq	r0, #11
 801f2ee:	2000      	movne	r0, #0
 801f2f0:	4770      	bx	lr
 801f2f2:	bf00      	nop

0801f2f4 <rcl_validate_topic_name>:
 801f2f4:	2800      	cmp	r0, #0
 801f2f6:	f000 8089 	beq.w	801f40c <rcl_validate_topic_name+0x118>
 801f2fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f2fe:	460e      	mov	r6, r1
 801f300:	2900      	cmp	r1, #0
 801f302:	f000 8085 	beq.w	801f410 <rcl_validate_topic_name+0x11c>
 801f306:	4604      	mov	r4, r0
 801f308:	4617      	mov	r7, r2
 801f30a:	f7e0 fff9 	bl	8000300 <strlen>
 801f30e:	b1b0      	cbz	r0, 801f33e <rcl_validate_topic_name+0x4a>
 801f310:	f894 e000 	ldrb.w	lr, [r4]
 801f314:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f478 <rcl_validate_topic_name+0x184>
 801f318:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f31c:	f013 0304 	ands.w	r3, r3, #4
 801f320:	d139      	bne.n	801f396 <rcl_validate_topic_name+0xa2>
 801f322:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f326:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f32a:	2a2f      	cmp	r2, #47	; 0x2f
 801f32c:	d10f      	bne.n	801f34e <rcl_validate_topic_name+0x5a>
 801f32e:	2202      	movs	r2, #2
 801f330:	6032      	str	r2, [r6, #0]
 801f332:	b3a7      	cbz	r7, 801f39e <rcl_validate_topic_name+0xaa>
 801f334:	4618      	mov	r0, r3
 801f336:	f8c7 8000 	str.w	r8, [r7]
 801f33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f33e:	2301      	movs	r3, #1
 801f340:	6033      	str	r3, [r6, #0]
 801f342:	b367      	cbz	r7, 801f39e <rcl_validate_topic_name+0xaa>
 801f344:	2300      	movs	r3, #0
 801f346:	4618      	mov	r0, r3
 801f348:	603b      	str	r3, [r7, #0]
 801f34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f34e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f352:	461d      	mov	r5, r3
 801f354:	4619      	mov	r1, r3
 801f356:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f35a:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f35e:	f1b9 0f09 	cmp.w	r9, #9
 801f362:	d91f      	bls.n	801f3a4 <rcl_validate_topic_name+0xb0>
 801f364:	f022 0920 	bic.w	r9, r2, #32
 801f368:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f36c:	f1b9 0f19 	cmp.w	r9, #25
 801f370:	d918      	bls.n	801f3a4 <rcl_validate_topic_name+0xb0>
 801f372:	2a5f      	cmp	r2, #95	; 0x5f
 801f374:	d024      	beq.n	801f3c0 <rcl_validate_topic_name+0xcc>
 801f376:	2a2f      	cmp	r2, #47	; 0x2f
 801f378:	d058      	beq.n	801f42c <rcl_validate_topic_name+0x138>
 801f37a:	2a7e      	cmp	r2, #126	; 0x7e
 801f37c:	d04a      	beq.n	801f414 <rcl_validate_topic_name+0x120>
 801f37e:	2a7b      	cmp	r2, #123	; 0x7b
 801f380:	d05b      	beq.n	801f43a <rcl_validate_topic_name+0x146>
 801f382:	2a7d      	cmp	r2, #125	; 0x7d
 801f384:	d169      	bne.n	801f45a <rcl_validate_topic_name+0x166>
 801f386:	2d00      	cmp	r5, #0
 801f388:	d15c      	bne.n	801f444 <rcl_validate_topic_name+0x150>
 801f38a:	2305      	movs	r3, #5
 801f38c:	6033      	str	r3, [r6, #0]
 801f38e:	b137      	cbz	r7, 801f39e <rcl_validate_topic_name+0xaa>
 801f390:	2000      	movs	r0, #0
 801f392:	6039      	str	r1, [r7, #0]
 801f394:	e7d9      	b.n	801f34a <rcl_validate_topic_name+0x56>
 801f396:	2304      	movs	r3, #4
 801f398:	6033      	str	r3, [r6, #0]
 801f39a:	2f00      	cmp	r7, #0
 801f39c:	d1d2      	bne.n	801f344 <rcl_validate_topic_name+0x50>
 801f39e:	2000      	movs	r0, #0
 801f3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3a4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f3a8:	0752      	lsls	r2, r2, #29
 801f3aa:	d509      	bpl.n	801f3c0 <rcl_validate_topic_name+0xcc>
 801f3ac:	2900      	cmp	r1, #0
 801f3ae:	bf0c      	ite	eq
 801f3b0:	2200      	moveq	r2, #0
 801f3b2:	f005 0201 	andne.w	r2, r5, #1
 801f3b6:	b11a      	cbz	r2, 801f3c0 <rcl_validate_topic_name+0xcc>
 801f3b8:	1e4d      	subs	r5, r1, #1
 801f3ba:	429d      	cmp	r5, r3
 801f3bc:	d031      	beq.n	801f422 <rcl_validate_topic_name+0x12e>
 801f3be:	4615      	mov	r5, r2
 801f3c0:	3101      	adds	r1, #1
 801f3c2:	4288      	cmp	r0, r1
 801f3c4:	d1c7      	bne.n	801f356 <rcl_validate_topic_name+0x62>
 801f3c6:	2d00      	cmp	r5, #0
 801f3c8:	d142      	bne.n	801f450 <rcl_validate_topic_name+0x15c>
 801f3ca:	4628      	mov	r0, r5
 801f3cc:	2301      	movs	r3, #1
 801f3ce:	e00c      	b.n	801f3ea <rcl_validate_topic_name+0xf6>
 801f3d0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f3d4:	d101      	bne.n	801f3da <rcl_validate_topic_name+0xe6>
 801f3d6:	2801      	cmp	r0, #1
 801f3d8:	d047      	beq.n	801f46a <rcl_validate_topic_name+0x176>
 801f3da:	1c5a      	adds	r2, r3, #1
 801f3dc:	428b      	cmp	r3, r1
 801f3de:	f100 0001 	add.w	r0, r0, #1
 801f3e2:	f104 0401 	add.w	r4, r4, #1
 801f3e6:	4613      	mov	r3, r2
 801f3e8:	d22e      	bcs.n	801f448 <rcl_validate_topic_name+0x154>
 801f3ea:	4580      	cmp	r8, r0
 801f3ec:	d0f5      	beq.n	801f3da <rcl_validate_topic_name+0xe6>
 801f3ee:	7822      	ldrb	r2, [r4, #0]
 801f3f0:	2a2f      	cmp	r2, #47	; 0x2f
 801f3f2:	d1ed      	bne.n	801f3d0 <rcl_validate_topic_name+0xdc>
 801f3f4:	7862      	ldrb	r2, [r4, #1]
 801f3f6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f3fa:	0752      	lsls	r2, r2, #29
 801f3fc:	d5ed      	bpl.n	801f3da <rcl_validate_topic_name+0xe6>
 801f3fe:	2204      	movs	r2, #4
 801f400:	6032      	str	r2, [r6, #0]
 801f402:	2f00      	cmp	r7, #0
 801f404:	d0cb      	beq.n	801f39e <rcl_validate_topic_name+0xaa>
 801f406:	2000      	movs	r0, #0
 801f408:	603b      	str	r3, [r7, #0]
 801f40a:	e79e      	b.n	801f34a <rcl_validate_topic_name+0x56>
 801f40c:	200b      	movs	r0, #11
 801f40e:	4770      	bx	lr
 801f410:	200b      	movs	r0, #11
 801f412:	e79a      	b.n	801f34a <rcl_validate_topic_name+0x56>
 801f414:	2900      	cmp	r1, #0
 801f416:	d0d3      	beq.n	801f3c0 <rcl_validate_topic_name+0xcc>
 801f418:	2306      	movs	r3, #6
 801f41a:	6033      	str	r3, [r6, #0]
 801f41c:	2f00      	cmp	r7, #0
 801f41e:	d1b7      	bne.n	801f390 <rcl_validate_topic_name+0x9c>
 801f420:	e7bd      	b.n	801f39e <rcl_validate_topic_name+0xaa>
 801f422:	2309      	movs	r3, #9
 801f424:	6033      	str	r3, [r6, #0]
 801f426:	2f00      	cmp	r7, #0
 801f428:	d1b2      	bne.n	801f390 <rcl_validate_topic_name+0x9c>
 801f42a:	e7b8      	b.n	801f39e <rcl_validate_topic_name+0xaa>
 801f42c:	2d00      	cmp	r5, #0
 801f42e:	d0c7      	beq.n	801f3c0 <rcl_validate_topic_name+0xcc>
 801f430:	2308      	movs	r3, #8
 801f432:	6033      	str	r3, [r6, #0]
 801f434:	2f00      	cmp	r7, #0
 801f436:	d1ab      	bne.n	801f390 <rcl_validate_topic_name+0x9c>
 801f438:	e7b1      	b.n	801f39e <rcl_validate_topic_name+0xaa>
 801f43a:	2d00      	cmp	r5, #0
 801f43c:	d1f8      	bne.n	801f430 <rcl_validate_topic_name+0x13c>
 801f43e:	460b      	mov	r3, r1
 801f440:	2501      	movs	r5, #1
 801f442:	e7bd      	b.n	801f3c0 <rcl_validate_topic_name+0xcc>
 801f444:	2500      	movs	r5, #0
 801f446:	e7bb      	b.n	801f3c0 <rcl_validate_topic_name+0xcc>
 801f448:	2300      	movs	r3, #0
 801f44a:	4618      	mov	r0, r3
 801f44c:	6033      	str	r3, [r6, #0]
 801f44e:	e77c      	b.n	801f34a <rcl_validate_topic_name+0x56>
 801f450:	2205      	movs	r2, #5
 801f452:	6032      	str	r2, [r6, #0]
 801f454:	2f00      	cmp	r7, #0
 801f456:	d1d6      	bne.n	801f406 <rcl_validate_topic_name+0x112>
 801f458:	e7a1      	b.n	801f39e <rcl_validate_topic_name+0xaa>
 801f45a:	2d00      	cmp	r5, #0
 801f45c:	bf14      	ite	ne
 801f45e:	2308      	movne	r3, #8
 801f460:	2303      	moveq	r3, #3
 801f462:	6033      	str	r3, [r6, #0]
 801f464:	2f00      	cmp	r7, #0
 801f466:	d193      	bne.n	801f390 <rcl_validate_topic_name+0x9c>
 801f468:	e799      	b.n	801f39e <rcl_validate_topic_name+0xaa>
 801f46a:	2307      	movs	r3, #7
 801f46c:	6033      	str	r3, [r6, #0]
 801f46e:	2f00      	cmp	r7, #0
 801f470:	d095      	beq.n	801f39e <rcl_validate_topic_name+0xaa>
 801f472:	2301      	movs	r3, #1
 801f474:	e7c7      	b.n	801f406 <rcl_validate_topic_name+0x112>
 801f476:	bf00      	nop
 801f478:	08025aac 	.word	0x08025aac

0801f47c <calloc>:
 801f47c:	4b02      	ldr	r3, [pc, #8]	; (801f488 <calloc+0xc>)
 801f47e:	460a      	mov	r2, r1
 801f480:	4601      	mov	r1, r0
 801f482:	6818      	ldr	r0, [r3, #0]
 801f484:	f000 b802 	b.w	801f48c <_calloc_r>
 801f488:	2000099c 	.word	0x2000099c

0801f48c <_calloc_r>:
 801f48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f48e:	fba1 2402 	umull	r2, r4, r1, r2
 801f492:	b94c      	cbnz	r4, 801f4a8 <_calloc_r+0x1c>
 801f494:	4611      	mov	r1, r2
 801f496:	9201      	str	r2, [sp, #4]
 801f498:	f000 f898 	bl	801f5cc <_malloc_r>
 801f49c:	9a01      	ldr	r2, [sp, #4]
 801f49e:	4605      	mov	r5, r0
 801f4a0:	b930      	cbnz	r0, 801f4b0 <_calloc_r+0x24>
 801f4a2:	4628      	mov	r0, r5
 801f4a4:	b003      	add	sp, #12
 801f4a6:	bd30      	pop	{r4, r5, pc}
 801f4a8:	220c      	movs	r2, #12
 801f4aa:	6002      	str	r2, [r0, #0]
 801f4ac:	2500      	movs	r5, #0
 801f4ae:	e7f8      	b.n	801f4a2 <_calloc_r+0x16>
 801f4b0:	4621      	mov	r1, r4
 801f4b2:	f001 fc3f 	bl	8020d34 <memset>
 801f4b6:	e7f4      	b.n	801f4a2 <_calloc_r+0x16>

0801f4b8 <exit>:
 801f4b8:	b508      	push	{r3, lr}
 801f4ba:	4b06      	ldr	r3, [pc, #24]	; (801f4d4 <exit+0x1c>)
 801f4bc:	4604      	mov	r4, r0
 801f4be:	b113      	cbz	r3, 801f4c6 <exit+0xe>
 801f4c0:	2100      	movs	r1, #0
 801f4c2:	f3af 8000 	nop.w
 801f4c6:	4b04      	ldr	r3, [pc, #16]	; (801f4d8 <exit+0x20>)
 801f4c8:	681b      	ldr	r3, [r3, #0]
 801f4ca:	b103      	cbz	r3, 801f4ce <exit+0x16>
 801f4cc:	4798      	blx	r3
 801f4ce:	4620      	mov	r0, r4
 801f4d0:	f7e4 fa6a 	bl	80039a8 <_exit>
 801f4d4:	00000000 	.word	0x00000000
 801f4d8:	20017124 	.word	0x20017124

0801f4dc <getenv>:
 801f4dc:	b507      	push	{r0, r1, r2, lr}
 801f4de:	4b04      	ldr	r3, [pc, #16]	; (801f4f0 <getenv+0x14>)
 801f4e0:	4601      	mov	r1, r0
 801f4e2:	aa01      	add	r2, sp, #4
 801f4e4:	6818      	ldr	r0, [r3, #0]
 801f4e6:	f000 f805 	bl	801f4f4 <_findenv_r>
 801f4ea:	b003      	add	sp, #12
 801f4ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801f4f0:	2000099c 	.word	0x2000099c

0801f4f4 <_findenv_r>:
 801f4f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4f8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f568 <_findenv_r+0x74>
 801f4fc:	4607      	mov	r7, r0
 801f4fe:	4689      	mov	r9, r1
 801f500:	4616      	mov	r6, r2
 801f502:	f002 fb0d 	bl	8021b20 <__env_lock>
 801f506:	f8da 4000 	ldr.w	r4, [sl]
 801f50a:	b134      	cbz	r4, 801f51a <_findenv_r+0x26>
 801f50c:	464b      	mov	r3, r9
 801f50e:	4698      	mov	r8, r3
 801f510:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f514:	b13a      	cbz	r2, 801f526 <_findenv_r+0x32>
 801f516:	2a3d      	cmp	r2, #61	; 0x3d
 801f518:	d1f9      	bne.n	801f50e <_findenv_r+0x1a>
 801f51a:	4638      	mov	r0, r7
 801f51c:	f002 fb06 	bl	8021b2c <__env_unlock>
 801f520:	2000      	movs	r0, #0
 801f522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f526:	eba8 0809 	sub.w	r8, r8, r9
 801f52a:	46a3      	mov	fp, r4
 801f52c:	f854 0b04 	ldr.w	r0, [r4], #4
 801f530:	2800      	cmp	r0, #0
 801f532:	d0f2      	beq.n	801f51a <_findenv_r+0x26>
 801f534:	4642      	mov	r2, r8
 801f536:	4649      	mov	r1, r9
 801f538:	f001 fc11 	bl	8020d5e <strncmp>
 801f53c:	2800      	cmp	r0, #0
 801f53e:	d1f4      	bne.n	801f52a <_findenv_r+0x36>
 801f540:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f544:	eb03 0508 	add.w	r5, r3, r8
 801f548:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f54c:	2b3d      	cmp	r3, #61	; 0x3d
 801f54e:	d1ec      	bne.n	801f52a <_findenv_r+0x36>
 801f550:	f8da 3000 	ldr.w	r3, [sl]
 801f554:	ebab 0303 	sub.w	r3, fp, r3
 801f558:	109b      	asrs	r3, r3, #2
 801f55a:	4638      	mov	r0, r7
 801f55c:	6033      	str	r3, [r6, #0]
 801f55e:	f002 fae5 	bl	8021b2c <__env_unlock>
 801f562:	1c68      	adds	r0, r5, #1
 801f564:	e7dd      	b.n	801f522 <_findenv_r+0x2e>
 801f566:	bf00      	nop
 801f568:	20000000 	.word	0x20000000

0801f56c <malloc>:
 801f56c:	4b02      	ldr	r3, [pc, #8]	; (801f578 <malloc+0xc>)
 801f56e:	4601      	mov	r1, r0
 801f570:	6818      	ldr	r0, [r3, #0]
 801f572:	f000 b82b 	b.w	801f5cc <_malloc_r>
 801f576:	bf00      	nop
 801f578:	2000099c 	.word	0x2000099c

0801f57c <free>:
 801f57c:	4b02      	ldr	r3, [pc, #8]	; (801f588 <free+0xc>)
 801f57e:	4601      	mov	r1, r0
 801f580:	6818      	ldr	r0, [r3, #0]
 801f582:	f002 bad9 	b.w	8021b38 <_free_r>
 801f586:	bf00      	nop
 801f588:	2000099c 	.word	0x2000099c

0801f58c <sbrk_aligned>:
 801f58c:	b570      	push	{r4, r5, r6, lr}
 801f58e:	4e0e      	ldr	r6, [pc, #56]	; (801f5c8 <sbrk_aligned+0x3c>)
 801f590:	460c      	mov	r4, r1
 801f592:	6831      	ldr	r1, [r6, #0]
 801f594:	4605      	mov	r5, r0
 801f596:	b911      	cbnz	r1, 801f59e <sbrk_aligned+0x12>
 801f598:	f001 fc42 	bl	8020e20 <_sbrk_r>
 801f59c:	6030      	str	r0, [r6, #0]
 801f59e:	4621      	mov	r1, r4
 801f5a0:	4628      	mov	r0, r5
 801f5a2:	f001 fc3d 	bl	8020e20 <_sbrk_r>
 801f5a6:	1c43      	adds	r3, r0, #1
 801f5a8:	d00a      	beq.n	801f5c0 <sbrk_aligned+0x34>
 801f5aa:	1cc4      	adds	r4, r0, #3
 801f5ac:	f024 0403 	bic.w	r4, r4, #3
 801f5b0:	42a0      	cmp	r0, r4
 801f5b2:	d007      	beq.n	801f5c4 <sbrk_aligned+0x38>
 801f5b4:	1a21      	subs	r1, r4, r0
 801f5b6:	4628      	mov	r0, r5
 801f5b8:	f001 fc32 	bl	8020e20 <_sbrk_r>
 801f5bc:	3001      	adds	r0, #1
 801f5be:	d101      	bne.n	801f5c4 <sbrk_aligned+0x38>
 801f5c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f5c4:	4620      	mov	r0, r4
 801f5c6:	bd70      	pop	{r4, r5, r6, pc}
 801f5c8:	20016fe8 	.word	0x20016fe8

0801f5cc <_malloc_r>:
 801f5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f5d0:	1ccd      	adds	r5, r1, #3
 801f5d2:	f025 0503 	bic.w	r5, r5, #3
 801f5d6:	3508      	adds	r5, #8
 801f5d8:	2d0c      	cmp	r5, #12
 801f5da:	bf38      	it	cc
 801f5dc:	250c      	movcc	r5, #12
 801f5de:	2d00      	cmp	r5, #0
 801f5e0:	4607      	mov	r7, r0
 801f5e2:	db01      	blt.n	801f5e8 <_malloc_r+0x1c>
 801f5e4:	42a9      	cmp	r1, r5
 801f5e6:	d905      	bls.n	801f5f4 <_malloc_r+0x28>
 801f5e8:	230c      	movs	r3, #12
 801f5ea:	603b      	str	r3, [r7, #0]
 801f5ec:	2600      	movs	r6, #0
 801f5ee:	4630      	mov	r0, r6
 801f5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f5f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f6c8 <_malloc_r+0xfc>
 801f5f8:	f000 f868 	bl	801f6cc <__malloc_lock>
 801f5fc:	f8d8 3000 	ldr.w	r3, [r8]
 801f600:	461c      	mov	r4, r3
 801f602:	bb5c      	cbnz	r4, 801f65c <_malloc_r+0x90>
 801f604:	4629      	mov	r1, r5
 801f606:	4638      	mov	r0, r7
 801f608:	f7ff ffc0 	bl	801f58c <sbrk_aligned>
 801f60c:	1c43      	adds	r3, r0, #1
 801f60e:	4604      	mov	r4, r0
 801f610:	d155      	bne.n	801f6be <_malloc_r+0xf2>
 801f612:	f8d8 4000 	ldr.w	r4, [r8]
 801f616:	4626      	mov	r6, r4
 801f618:	2e00      	cmp	r6, #0
 801f61a:	d145      	bne.n	801f6a8 <_malloc_r+0xdc>
 801f61c:	2c00      	cmp	r4, #0
 801f61e:	d048      	beq.n	801f6b2 <_malloc_r+0xe6>
 801f620:	6823      	ldr	r3, [r4, #0]
 801f622:	4631      	mov	r1, r6
 801f624:	4638      	mov	r0, r7
 801f626:	eb04 0903 	add.w	r9, r4, r3
 801f62a:	f001 fbf9 	bl	8020e20 <_sbrk_r>
 801f62e:	4581      	cmp	r9, r0
 801f630:	d13f      	bne.n	801f6b2 <_malloc_r+0xe6>
 801f632:	6821      	ldr	r1, [r4, #0]
 801f634:	1a6d      	subs	r5, r5, r1
 801f636:	4629      	mov	r1, r5
 801f638:	4638      	mov	r0, r7
 801f63a:	f7ff ffa7 	bl	801f58c <sbrk_aligned>
 801f63e:	3001      	adds	r0, #1
 801f640:	d037      	beq.n	801f6b2 <_malloc_r+0xe6>
 801f642:	6823      	ldr	r3, [r4, #0]
 801f644:	442b      	add	r3, r5
 801f646:	6023      	str	r3, [r4, #0]
 801f648:	f8d8 3000 	ldr.w	r3, [r8]
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	d038      	beq.n	801f6c2 <_malloc_r+0xf6>
 801f650:	685a      	ldr	r2, [r3, #4]
 801f652:	42a2      	cmp	r2, r4
 801f654:	d12b      	bne.n	801f6ae <_malloc_r+0xe2>
 801f656:	2200      	movs	r2, #0
 801f658:	605a      	str	r2, [r3, #4]
 801f65a:	e00f      	b.n	801f67c <_malloc_r+0xb0>
 801f65c:	6822      	ldr	r2, [r4, #0]
 801f65e:	1b52      	subs	r2, r2, r5
 801f660:	d41f      	bmi.n	801f6a2 <_malloc_r+0xd6>
 801f662:	2a0b      	cmp	r2, #11
 801f664:	d917      	bls.n	801f696 <_malloc_r+0xca>
 801f666:	1961      	adds	r1, r4, r5
 801f668:	42a3      	cmp	r3, r4
 801f66a:	6025      	str	r5, [r4, #0]
 801f66c:	bf18      	it	ne
 801f66e:	6059      	strne	r1, [r3, #4]
 801f670:	6863      	ldr	r3, [r4, #4]
 801f672:	bf08      	it	eq
 801f674:	f8c8 1000 	streq.w	r1, [r8]
 801f678:	5162      	str	r2, [r4, r5]
 801f67a:	604b      	str	r3, [r1, #4]
 801f67c:	4638      	mov	r0, r7
 801f67e:	f104 060b 	add.w	r6, r4, #11
 801f682:	f000 f829 	bl	801f6d8 <__malloc_unlock>
 801f686:	f026 0607 	bic.w	r6, r6, #7
 801f68a:	1d23      	adds	r3, r4, #4
 801f68c:	1af2      	subs	r2, r6, r3
 801f68e:	d0ae      	beq.n	801f5ee <_malloc_r+0x22>
 801f690:	1b9b      	subs	r3, r3, r6
 801f692:	50a3      	str	r3, [r4, r2]
 801f694:	e7ab      	b.n	801f5ee <_malloc_r+0x22>
 801f696:	42a3      	cmp	r3, r4
 801f698:	6862      	ldr	r2, [r4, #4]
 801f69a:	d1dd      	bne.n	801f658 <_malloc_r+0x8c>
 801f69c:	f8c8 2000 	str.w	r2, [r8]
 801f6a0:	e7ec      	b.n	801f67c <_malloc_r+0xb0>
 801f6a2:	4623      	mov	r3, r4
 801f6a4:	6864      	ldr	r4, [r4, #4]
 801f6a6:	e7ac      	b.n	801f602 <_malloc_r+0x36>
 801f6a8:	4634      	mov	r4, r6
 801f6aa:	6876      	ldr	r6, [r6, #4]
 801f6ac:	e7b4      	b.n	801f618 <_malloc_r+0x4c>
 801f6ae:	4613      	mov	r3, r2
 801f6b0:	e7cc      	b.n	801f64c <_malloc_r+0x80>
 801f6b2:	230c      	movs	r3, #12
 801f6b4:	603b      	str	r3, [r7, #0]
 801f6b6:	4638      	mov	r0, r7
 801f6b8:	f000 f80e 	bl	801f6d8 <__malloc_unlock>
 801f6bc:	e797      	b.n	801f5ee <_malloc_r+0x22>
 801f6be:	6025      	str	r5, [r4, #0]
 801f6c0:	e7dc      	b.n	801f67c <_malloc_r+0xb0>
 801f6c2:	605b      	str	r3, [r3, #4]
 801f6c4:	deff      	udf	#255	; 0xff
 801f6c6:	bf00      	nop
 801f6c8:	20016fe4 	.word	0x20016fe4

0801f6cc <__malloc_lock>:
 801f6cc:	4801      	ldr	r0, [pc, #4]	; (801f6d4 <__malloc_lock+0x8>)
 801f6ce:	f001 bbf4 	b.w	8020eba <__retarget_lock_acquire_recursive>
 801f6d2:	bf00      	nop
 801f6d4:	2001712d 	.word	0x2001712d

0801f6d8 <__malloc_unlock>:
 801f6d8:	4801      	ldr	r0, [pc, #4]	; (801f6e0 <__malloc_unlock+0x8>)
 801f6da:	f001 bbef 	b.w	8020ebc <__retarget_lock_release_recursive>
 801f6de:	bf00      	nop
 801f6e0:	2001712d 	.word	0x2001712d

0801f6e4 <srand>:
 801f6e4:	b538      	push	{r3, r4, r5, lr}
 801f6e6:	4b10      	ldr	r3, [pc, #64]	; (801f728 <srand+0x44>)
 801f6e8:	681d      	ldr	r5, [r3, #0]
 801f6ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f6ec:	4604      	mov	r4, r0
 801f6ee:	b9b3      	cbnz	r3, 801f71e <srand+0x3a>
 801f6f0:	2018      	movs	r0, #24
 801f6f2:	f7ff ff3b 	bl	801f56c <malloc>
 801f6f6:	4602      	mov	r2, r0
 801f6f8:	6328      	str	r0, [r5, #48]	; 0x30
 801f6fa:	b920      	cbnz	r0, 801f706 <srand+0x22>
 801f6fc:	4b0b      	ldr	r3, [pc, #44]	; (801f72c <srand+0x48>)
 801f6fe:	480c      	ldr	r0, [pc, #48]	; (801f730 <srand+0x4c>)
 801f700:	2146      	movs	r1, #70	; 0x46
 801f702:	f001 fbf9 	bl	8020ef8 <__assert_func>
 801f706:	490b      	ldr	r1, [pc, #44]	; (801f734 <srand+0x50>)
 801f708:	4b0b      	ldr	r3, [pc, #44]	; (801f738 <srand+0x54>)
 801f70a:	e9c0 1300 	strd	r1, r3, [r0]
 801f70e:	4b0b      	ldr	r3, [pc, #44]	; (801f73c <srand+0x58>)
 801f710:	6083      	str	r3, [r0, #8]
 801f712:	230b      	movs	r3, #11
 801f714:	8183      	strh	r3, [r0, #12]
 801f716:	2100      	movs	r1, #0
 801f718:	2001      	movs	r0, #1
 801f71a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f71e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f720:	2200      	movs	r2, #0
 801f722:	611c      	str	r4, [r3, #16]
 801f724:	615a      	str	r2, [r3, #20]
 801f726:	bd38      	pop	{r3, r4, r5, pc}
 801f728:	2000099c 	.word	0x2000099c
 801f72c:	08025a3c 	.word	0x08025a3c
 801f730:	08025a53 	.word	0x08025a53
 801f734:	abcd330e 	.word	0xabcd330e
 801f738:	e66d1234 	.word	0xe66d1234
 801f73c:	0005deec 	.word	0x0005deec

0801f740 <rand>:
 801f740:	4b16      	ldr	r3, [pc, #88]	; (801f79c <rand+0x5c>)
 801f742:	b510      	push	{r4, lr}
 801f744:	681c      	ldr	r4, [r3, #0]
 801f746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f748:	b9b3      	cbnz	r3, 801f778 <rand+0x38>
 801f74a:	2018      	movs	r0, #24
 801f74c:	f7ff ff0e 	bl	801f56c <malloc>
 801f750:	4602      	mov	r2, r0
 801f752:	6320      	str	r0, [r4, #48]	; 0x30
 801f754:	b920      	cbnz	r0, 801f760 <rand+0x20>
 801f756:	4b12      	ldr	r3, [pc, #72]	; (801f7a0 <rand+0x60>)
 801f758:	4812      	ldr	r0, [pc, #72]	; (801f7a4 <rand+0x64>)
 801f75a:	2152      	movs	r1, #82	; 0x52
 801f75c:	f001 fbcc 	bl	8020ef8 <__assert_func>
 801f760:	4911      	ldr	r1, [pc, #68]	; (801f7a8 <rand+0x68>)
 801f762:	4b12      	ldr	r3, [pc, #72]	; (801f7ac <rand+0x6c>)
 801f764:	e9c0 1300 	strd	r1, r3, [r0]
 801f768:	4b11      	ldr	r3, [pc, #68]	; (801f7b0 <rand+0x70>)
 801f76a:	6083      	str	r3, [r0, #8]
 801f76c:	230b      	movs	r3, #11
 801f76e:	8183      	strh	r3, [r0, #12]
 801f770:	2100      	movs	r1, #0
 801f772:	2001      	movs	r0, #1
 801f774:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f778:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f77a:	480e      	ldr	r0, [pc, #56]	; (801f7b4 <rand+0x74>)
 801f77c:	690b      	ldr	r3, [r1, #16]
 801f77e:	694c      	ldr	r4, [r1, #20]
 801f780:	4a0d      	ldr	r2, [pc, #52]	; (801f7b8 <rand+0x78>)
 801f782:	4358      	muls	r0, r3
 801f784:	fb02 0004 	mla	r0, r2, r4, r0
 801f788:	fba3 3202 	umull	r3, r2, r3, r2
 801f78c:	3301      	adds	r3, #1
 801f78e:	eb40 0002 	adc.w	r0, r0, r2
 801f792:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f796:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f79a:	bd10      	pop	{r4, pc}
 801f79c:	2000099c 	.word	0x2000099c
 801f7a0:	08025a3c 	.word	0x08025a3c
 801f7a4:	08025a53 	.word	0x08025a53
 801f7a8:	abcd330e 	.word	0xabcd330e
 801f7ac:	e66d1234 	.word	0xe66d1234
 801f7b0:	0005deec 	.word	0x0005deec
 801f7b4:	5851f42d 	.word	0x5851f42d
 801f7b8:	4c957f2d 	.word	0x4c957f2d

0801f7bc <realloc>:
 801f7bc:	4b02      	ldr	r3, [pc, #8]	; (801f7c8 <realloc+0xc>)
 801f7be:	460a      	mov	r2, r1
 801f7c0:	4601      	mov	r1, r0
 801f7c2:	6818      	ldr	r0, [r3, #0]
 801f7c4:	f000 b802 	b.w	801f7cc <_realloc_r>
 801f7c8:	2000099c 	.word	0x2000099c

0801f7cc <_realloc_r>:
 801f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7d0:	4680      	mov	r8, r0
 801f7d2:	4614      	mov	r4, r2
 801f7d4:	460e      	mov	r6, r1
 801f7d6:	b921      	cbnz	r1, 801f7e2 <_realloc_r+0x16>
 801f7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f7dc:	4611      	mov	r1, r2
 801f7de:	f7ff bef5 	b.w	801f5cc <_malloc_r>
 801f7e2:	b92a      	cbnz	r2, 801f7f0 <_realloc_r+0x24>
 801f7e4:	f002 f9a8 	bl	8021b38 <_free_r>
 801f7e8:	4625      	mov	r5, r4
 801f7ea:	4628      	mov	r0, r5
 801f7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7f0:	f002 fe98 	bl	8022524 <_malloc_usable_size_r>
 801f7f4:	4284      	cmp	r4, r0
 801f7f6:	4607      	mov	r7, r0
 801f7f8:	d802      	bhi.n	801f800 <_realloc_r+0x34>
 801f7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f7fe:	d812      	bhi.n	801f826 <_realloc_r+0x5a>
 801f800:	4621      	mov	r1, r4
 801f802:	4640      	mov	r0, r8
 801f804:	f7ff fee2 	bl	801f5cc <_malloc_r>
 801f808:	4605      	mov	r5, r0
 801f80a:	2800      	cmp	r0, #0
 801f80c:	d0ed      	beq.n	801f7ea <_realloc_r+0x1e>
 801f80e:	42bc      	cmp	r4, r7
 801f810:	4622      	mov	r2, r4
 801f812:	4631      	mov	r1, r6
 801f814:	bf28      	it	cs
 801f816:	463a      	movcs	r2, r7
 801f818:	f001 fb59 	bl	8020ece <memcpy>
 801f81c:	4631      	mov	r1, r6
 801f81e:	4640      	mov	r0, r8
 801f820:	f002 f98a 	bl	8021b38 <_free_r>
 801f824:	e7e1      	b.n	801f7ea <_realloc_r+0x1e>
 801f826:	4635      	mov	r5, r6
 801f828:	e7df      	b.n	801f7ea <_realloc_r+0x1e>
	...

0801f82c <_strtoul_l.constprop.0>:
 801f82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f830:	4f36      	ldr	r7, [pc, #216]	; (801f90c <_strtoul_l.constprop.0+0xe0>)
 801f832:	4686      	mov	lr, r0
 801f834:	460d      	mov	r5, r1
 801f836:	4628      	mov	r0, r5
 801f838:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f83c:	5d3e      	ldrb	r6, [r7, r4]
 801f83e:	f016 0608 	ands.w	r6, r6, #8
 801f842:	d1f8      	bne.n	801f836 <_strtoul_l.constprop.0+0xa>
 801f844:	2c2d      	cmp	r4, #45	; 0x2d
 801f846:	d130      	bne.n	801f8aa <_strtoul_l.constprop.0+0x7e>
 801f848:	782c      	ldrb	r4, [r5, #0]
 801f84a:	2601      	movs	r6, #1
 801f84c:	1c85      	adds	r5, r0, #2
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d057      	beq.n	801f902 <_strtoul_l.constprop.0+0xd6>
 801f852:	2b10      	cmp	r3, #16
 801f854:	d109      	bne.n	801f86a <_strtoul_l.constprop.0+0x3e>
 801f856:	2c30      	cmp	r4, #48	; 0x30
 801f858:	d107      	bne.n	801f86a <_strtoul_l.constprop.0+0x3e>
 801f85a:	7828      	ldrb	r0, [r5, #0]
 801f85c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f860:	2858      	cmp	r0, #88	; 0x58
 801f862:	d149      	bne.n	801f8f8 <_strtoul_l.constprop.0+0xcc>
 801f864:	786c      	ldrb	r4, [r5, #1]
 801f866:	2310      	movs	r3, #16
 801f868:	3502      	adds	r5, #2
 801f86a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f86e:	2700      	movs	r7, #0
 801f870:	fbb8 f8f3 	udiv	r8, r8, r3
 801f874:	fb03 f908 	mul.w	r9, r3, r8
 801f878:	ea6f 0909 	mvn.w	r9, r9
 801f87c:	4638      	mov	r0, r7
 801f87e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f882:	f1bc 0f09 	cmp.w	ip, #9
 801f886:	d815      	bhi.n	801f8b4 <_strtoul_l.constprop.0+0x88>
 801f888:	4664      	mov	r4, ip
 801f88a:	42a3      	cmp	r3, r4
 801f88c:	dd23      	ble.n	801f8d6 <_strtoul_l.constprop.0+0xaa>
 801f88e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801f892:	d007      	beq.n	801f8a4 <_strtoul_l.constprop.0+0x78>
 801f894:	4580      	cmp	r8, r0
 801f896:	d31b      	bcc.n	801f8d0 <_strtoul_l.constprop.0+0xa4>
 801f898:	d101      	bne.n	801f89e <_strtoul_l.constprop.0+0x72>
 801f89a:	45a1      	cmp	r9, r4
 801f89c:	db18      	blt.n	801f8d0 <_strtoul_l.constprop.0+0xa4>
 801f89e:	fb00 4003 	mla	r0, r0, r3, r4
 801f8a2:	2701      	movs	r7, #1
 801f8a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f8a8:	e7e9      	b.n	801f87e <_strtoul_l.constprop.0+0x52>
 801f8aa:	2c2b      	cmp	r4, #43	; 0x2b
 801f8ac:	bf04      	itt	eq
 801f8ae:	782c      	ldrbeq	r4, [r5, #0]
 801f8b0:	1c85      	addeq	r5, r0, #2
 801f8b2:	e7cc      	b.n	801f84e <_strtoul_l.constprop.0+0x22>
 801f8b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f8b8:	f1bc 0f19 	cmp.w	ip, #25
 801f8bc:	d801      	bhi.n	801f8c2 <_strtoul_l.constprop.0+0x96>
 801f8be:	3c37      	subs	r4, #55	; 0x37
 801f8c0:	e7e3      	b.n	801f88a <_strtoul_l.constprop.0+0x5e>
 801f8c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f8c6:	f1bc 0f19 	cmp.w	ip, #25
 801f8ca:	d804      	bhi.n	801f8d6 <_strtoul_l.constprop.0+0xaa>
 801f8cc:	3c57      	subs	r4, #87	; 0x57
 801f8ce:	e7dc      	b.n	801f88a <_strtoul_l.constprop.0+0x5e>
 801f8d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f8d4:	e7e6      	b.n	801f8a4 <_strtoul_l.constprop.0+0x78>
 801f8d6:	1c7b      	adds	r3, r7, #1
 801f8d8:	d106      	bne.n	801f8e8 <_strtoul_l.constprop.0+0xbc>
 801f8da:	2322      	movs	r3, #34	; 0x22
 801f8dc:	f8ce 3000 	str.w	r3, [lr]
 801f8e0:	4638      	mov	r0, r7
 801f8e2:	b932      	cbnz	r2, 801f8f2 <_strtoul_l.constprop.0+0xc6>
 801f8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f8e8:	b106      	cbz	r6, 801f8ec <_strtoul_l.constprop.0+0xc0>
 801f8ea:	4240      	negs	r0, r0
 801f8ec:	2a00      	cmp	r2, #0
 801f8ee:	d0f9      	beq.n	801f8e4 <_strtoul_l.constprop.0+0xb8>
 801f8f0:	b107      	cbz	r7, 801f8f4 <_strtoul_l.constprop.0+0xc8>
 801f8f2:	1e69      	subs	r1, r5, #1
 801f8f4:	6011      	str	r1, [r2, #0]
 801f8f6:	e7f5      	b.n	801f8e4 <_strtoul_l.constprop.0+0xb8>
 801f8f8:	2430      	movs	r4, #48	; 0x30
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d1b5      	bne.n	801f86a <_strtoul_l.constprop.0+0x3e>
 801f8fe:	2308      	movs	r3, #8
 801f900:	e7b3      	b.n	801f86a <_strtoul_l.constprop.0+0x3e>
 801f902:	2c30      	cmp	r4, #48	; 0x30
 801f904:	d0a9      	beq.n	801f85a <_strtoul_l.constprop.0+0x2e>
 801f906:	230a      	movs	r3, #10
 801f908:	e7af      	b.n	801f86a <_strtoul_l.constprop.0+0x3e>
 801f90a:	bf00      	nop
 801f90c:	08025aac 	.word	0x08025aac

0801f910 <strtoul>:
 801f910:	4613      	mov	r3, r2
 801f912:	460a      	mov	r2, r1
 801f914:	4601      	mov	r1, r0
 801f916:	4802      	ldr	r0, [pc, #8]	; (801f920 <strtoul+0x10>)
 801f918:	6800      	ldr	r0, [r0, #0]
 801f91a:	f7ff bf87 	b.w	801f82c <_strtoul_l.constprop.0>
 801f91e:	bf00      	nop
 801f920:	2000099c 	.word	0x2000099c

0801f924 <__cvt>:
 801f924:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f926:	ed2d 8b02 	vpush	{d8}
 801f92a:	eeb0 8b40 	vmov.f64	d8, d0
 801f92e:	b085      	sub	sp, #20
 801f930:	4617      	mov	r7, r2
 801f932:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f934:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f936:	ee18 2a90 	vmov	r2, s17
 801f93a:	f025 0520 	bic.w	r5, r5, #32
 801f93e:	2a00      	cmp	r2, #0
 801f940:	bfb6      	itet	lt
 801f942:	222d      	movlt	r2, #45	; 0x2d
 801f944:	2200      	movge	r2, #0
 801f946:	eeb1 8b40 	vneglt.f64	d8, d0
 801f94a:	2d46      	cmp	r5, #70	; 0x46
 801f94c:	460c      	mov	r4, r1
 801f94e:	701a      	strb	r2, [r3, #0]
 801f950:	d004      	beq.n	801f95c <__cvt+0x38>
 801f952:	2d45      	cmp	r5, #69	; 0x45
 801f954:	d100      	bne.n	801f958 <__cvt+0x34>
 801f956:	3401      	adds	r4, #1
 801f958:	2102      	movs	r1, #2
 801f95a:	e000      	b.n	801f95e <__cvt+0x3a>
 801f95c:	2103      	movs	r1, #3
 801f95e:	ab03      	add	r3, sp, #12
 801f960:	9301      	str	r3, [sp, #4]
 801f962:	ab02      	add	r3, sp, #8
 801f964:	9300      	str	r3, [sp, #0]
 801f966:	4622      	mov	r2, r4
 801f968:	4633      	mov	r3, r6
 801f96a:	eeb0 0b48 	vmov.f64	d0, d8
 801f96e:	f001 fb6b 	bl	8021048 <_dtoa_r>
 801f972:	2d47      	cmp	r5, #71	; 0x47
 801f974:	d101      	bne.n	801f97a <__cvt+0x56>
 801f976:	07fb      	lsls	r3, r7, #31
 801f978:	d51a      	bpl.n	801f9b0 <__cvt+0x8c>
 801f97a:	2d46      	cmp	r5, #70	; 0x46
 801f97c:	eb00 0204 	add.w	r2, r0, r4
 801f980:	d10c      	bne.n	801f99c <__cvt+0x78>
 801f982:	7803      	ldrb	r3, [r0, #0]
 801f984:	2b30      	cmp	r3, #48	; 0x30
 801f986:	d107      	bne.n	801f998 <__cvt+0x74>
 801f988:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f990:	bf1c      	itt	ne
 801f992:	f1c4 0401 	rsbne	r4, r4, #1
 801f996:	6034      	strne	r4, [r6, #0]
 801f998:	6833      	ldr	r3, [r6, #0]
 801f99a:	441a      	add	r2, r3
 801f99c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9a4:	bf08      	it	eq
 801f9a6:	9203      	streq	r2, [sp, #12]
 801f9a8:	2130      	movs	r1, #48	; 0x30
 801f9aa:	9b03      	ldr	r3, [sp, #12]
 801f9ac:	4293      	cmp	r3, r2
 801f9ae:	d307      	bcc.n	801f9c0 <__cvt+0x9c>
 801f9b0:	9b03      	ldr	r3, [sp, #12]
 801f9b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f9b4:	1a1b      	subs	r3, r3, r0
 801f9b6:	6013      	str	r3, [r2, #0]
 801f9b8:	b005      	add	sp, #20
 801f9ba:	ecbd 8b02 	vpop	{d8}
 801f9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9c0:	1c5c      	adds	r4, r3, #1
 801f9c2:	9403      	str	r4, [sp, #12]
 801f9c4:	7019      	strb	r1, [r3, #0]
 801f9c6:	e7f0      	b.n	801f9aa <__cvt+0x86>

0801f9c8 <__exponent>:
 801f9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f9ca:	4603      	mov	r3, r0
 801f9cc:	2900      	cmp	r1, #0
 801f9ce:	bfb8      	it	lt
 801f9d0:	4249      	neglt	r1, r1
 801f9d2:	f803 2b02 	strb.w	r2, [r3], #2
 801f9d6:	bfb4      	ite	lt
 801f9d8:	222d      	movlt	r2, #45	; 0x2d
 801f9da:	222b      	movge	r2, #43	; 0x2b
 801f9dc:	2909      	cmp	r1, #9
 801f9de:	7042      	strb	r2, [r0, #1]
 801f9e0:	dd2a      	ble.n	801fa38 <__exponent+0x70>
 801f9e2:	f10d 0207 	add.w	r2, sp, #7
 801f9e6:	4617      	mov	r7, r2
 801f9e8:	260a      	movs	r6, #10
 801f9ea:	4694      	mov	ip, r2
 801f9ec:	fb91 f5f6 	sdiv	r5, r1, r6
 801f9f0:	fb06 1415 	mls	r4, r6, r5, r1
 801f9f4:	3430      	adds	r4, #48	; 0x30
 801f9f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801f9fa:	460c      	mov	r4, r1
 801f9fc:	2c63      	cmp	r4, #99	; 0x63
 801f9fe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801fa02:	4629      	mov	r1, r5
 801fa04:	dcf1      	bgt.n	801f9ea <__exponent+0x22>
 801fa06:	3130      	adds	r1, #48	; 0x30
 801fa08:	f1ac 0402 	sub.w	r4, ip, #2
 801fa0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801fa10:	1c41      	adds	r1, r0, #1
 801fa12:	4622      	mov	r2, r4
 801fa14:	42ba      	cmp	r2, r7
 801fa16:	d30a      	bcc.n	801fa2e <__exponent+0x66>
 801fa18:	f10d 0209 	add.w	r2, sp, #9
 801fa1c:	eba2 020c 	sub.w	r2, r2, ip
 801fa20:	42bc      	cmp	r4, r7
 801fa22:	bf88      	it	hi
 801fa24:	2200      	movhi	r2, #0
 801fa26:	4413      	add	r3, r2
 801fa28:	1a18      	subs	r0, r3, r0
 801fa2a:	b003      	add	sp, #12
 801fa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801fa32:	f801 5f01 	strb.w	r5, [r1, #1]!
 801fa36:	e7ed      	b.n	801fa14 <__exponent+0x4c>
 801fa38:	2330      	movs	r3, #48	; 0x30
 801fa3a:	3130      	adds	r1, #48	; 0x30
 801fa3c:	7083      	strb	r3, [r0, #2]
 801fa3e:	70c1      	strb	r1, [r0, #3]
 801fa40:	1d03      	adds	r3, r0, #4
 801fa42:	e7f1      	b.n	801fa28 <__exponent+0x60>
 801fa44:	0000      	movs	r0, r0
	...

0801fa48 <_printf_float>:
 801fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa4c:	b08b      	sub	sp, #44	; 0x2c
 801fa4e:	460c      	mov	r4, r1
 801fa50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801fa54:	4616      	mov	r6, r2
 801fa56:	461f      	mov	r7, r3
 801fa58:	4605      	mov	r5, r0
 801fa5a:	f001 f9a9 	bl	8020db0 <_localeconv_r>
 801fa5e:	f8d0 b000 	ldr.w	fp, [r0]
 801fa62:	4658      	mov	r0, fp
 801fa64:	f7e0 fc4c 	bl	8000300 <strlen>
 801fa68:	2300      	movs	r3, #0
 801fa6a:	9308      	str	r3, [sp, #32]
 801fa6c:	f8d8 3000 	ldr.w	r3, [r8]
 801fa70:	f894 9018 	ldrb.w	r9, [r4, #24]
 801fa74:	6822      	ldr	r2, [r4, #0]
 801fa76:	3307      	adds	r3, #7
 801fa78:	f023 0307 	bic.w	r3, r3, #7
 801fa7c:	f103 0108 	add.w	r1, r3, #8
 801fa80:	f8c8 1000 	str.w	r1, [r8]
 801fa84:	ed93 0b00 	vldr	d0, [r3]
 801fa88:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801fce8 <_printf_float+0x2a0>
 801fa8c:	eeb0 7bc0 	vabs.f64	d7, d0
 801fa90:	eeb4 7b46 	vcmp.f64	d7, d6
 801fa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa98:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801fa9c:	4682      	mov	sl, r0
 801fa9e:	dd24      	ble.n	801faea <_printf_float+0xa2>
 801faa0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801faa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faa8:	d502      	bpl.n	801fab0 <_printf_float+0x68>
 801faaa:	232d      	movs	r3, #45	; 0x2d
 801faac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fab0:	498f      	ldr	r1, [pc, #572]	; (801fcf0 <_printf_float+0x2a8>)
 801fab2:	4b90      	ldr	r3, [pc, #576]	; (801fcf4 <_printf_float+0x2ac>)
 801fab4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fab8:	bf94      	ite	ls
 801faba:	4688      	movls	r8, r1
 801fabc:	4698      	movhi	r8, r3
 801fabe:	2303      	movs	r3, #3
 801fac0:	6123      	str	r3, [r4, #16]
 801fac2:	f022 0204 	bic.w	r2, r2, #4
 801fac6:	2300      	movs	r3, #0
 801fac8:	6022      	str	r2, [r4, #0]
 801faca:	9304      	str	r3, [sp, #16]
 801facc:	9700      	str	r7, [sp, #0]
 801face:	4633      	mov	r3, r6
 801fad0:	aa09      	add	r2, sp, #36	; 0x24
 801fad2:	4621      	mov	r1, r4
 801fad4:	4628      	mov	r0, r5
 801fad6:	f000 f9d1 	bl	801fe7c <_printf_common>
 801fada:	3001      	adds	r0, #1
 801fadc:	f040 808a 	bne.w	801fbf4 <_printf_float+0x1ac>
 801fae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fae4:	b00b      	add	sp, #44	; 0x2c
 801fae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faea:	eeb4 0b40 	vcmp.f64	d0, d0
 801faee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faf2:	d709      	bvc.n	801fb08 <_printf_float+0xc0>
 801faf4:	ee10 3a90 	vmov	r3, s1
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	bfbc      	itt	lt
 801fafc:	232d      	movlt	r3, #45	; 0x2d
 801fafe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801fb02:	497d      	ldr	r1, [pc, #500]	; (801fcf8 <_printf_float+0x2b0>)
 801fb04:	4b7d      	ldr	r3, [pc, #500]	; (801fcfc <_printf_float+0x2b4>)
 801fb06:	e7d5      	b.n	801fab4 <_printf_float+0x6c>
 801fb08:	6863      	ldr	r3, [r4, #4]
 801fb0a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801fb0e:	9104      	str	r1, [sp, #16]
 801fb10:	1c59      	adds	r1, r3, #1
 801fb12:	d13c      	bne.n	801fb8e <_printf_float+0x146>
 801fb14:	2306      	movs	r3, #6
 801fb16:	6063      	str	r3, [r4, #4]
 801fb18:	2300      	movs	r3, #0
 801fb1a:	9303      	str	r3, [sp, #12]
 801fb1c:	ab08      	add	r3, sp, #32
 801fb1e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fb22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fb26:	ab07      	add	r3, sp, #28
 801fb28:	6861      	ldr	r1, [r4, #4]
 801fb2a:	9300      	str	r3, [sp, #0]
 801fb2c:	6022      	str	r2, [r4, #0]
 801fb2e:	f10d 031b 	add.w	r3, sp, #27
 801fb32:	4628      	mov	r0, r5
 801fb34:	f7ff fef6 	bl	801f924 <__cvt>
 801fb38:	9b04      	ldr	r3, [sp, #16]
 801fb3a:	9907      	ldr	r1, [sp, #28]
 801fb3c:	2b47      	cmp	r3, #71	; 0x47
 801fb3e:	4680      	mov	r8, r0
 801fb40:	d108      	bne.n	801fb54 <_printf_float+0x10c>
 801fb42:	1cc8      	adds	r0, r1, #3
 801fb44:	db02      	blt.n	801fb4c <_printf_float+0x104>
 801fb46:	6863      	ldr	r3, [r4, #4]
 801fb48:	4299      	cmp	r1, r3
 801fb4a:	dd41      	ble.n	801fbd0 <_printf_float+0x188>
 801fb4c:	f1a9 0902 	sub.w	r9, r9, #2
 801fb50:	fa5f f989 	uxtb.w	r9, r9
 801fb54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fb58:	d820      	bhi.n	801fb9c <_printf_float+0x154>
 801fb5a:	3901      	subs	r1, #1
 801fb5c:	464a      	mov	r2, r9
 801fb5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801fb62:	9107      	str	r1, [sp, #28]
 801fb64:	f7ff ff30 	bl	801f9c8 <__exponent>
 801fb68:	9a08      	ldr	r2, [sp, #32]
 801fb6a:	9004      	str	r0, [sp, #16]
 801fb6c:	1813      	adds	r3, r2, r0
 801fb6e:	2a01      	cmp	r2, #1
 801fb70:	6123      	str	r3, [r4, #16]
 801fb72:	dc02      	bgt.n	801fb7a <_printf_float+0x132>
 801fb74:	6822      	ldr	r2, [r4, #0]
 801fb76:	07d2      	lsls	r2, r2, #31
 801fb78:	d501      	bpl.n	801fb7e <_printf_float+0x136>
 801fb7a:	3301      	adds	r3, #1
 801fb7c:	6123      	str	r3, [r4, #16]
 801fb7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d0a2      	beq.n	801facc <_printf_float+0x84>
 801fb86:	232d      	movs	r3, #45	; 0x2d
 801fb88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fb8c:	e79e      	b.n	801facc <_printf_float+0x84>
 801fb8e:	9904      	ldr	r1, [sp, #16]
 801fb90:	2947      	cmp	r1, #71	; 0x47
 801fb92:	d1c1      	bne.n	801fb18 <_printf_float+0xd0>
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d1bf      	bne.n	801fb18 <_printf_float+0xd0>
 801fb98:	2301      	movs	r3, #1
 801fb9a:	e7bc      	b.n	801fb16 <_printf_float+0xce>
 801fb9c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801fba0:	d118      	bne.n	801fbd4 <_printf_float+0x18c>
 801fba2:	2900      	cmp	r1, #0
 801fba4:	6863      	ldr	r3, [r4, #4]
 801fba6:	dd0b      	ble.n	801fbc0 <_printf_float+0x178>
 801fba8:	6121      	str	r1, [r4, #16]
 801fbaa:	b913      	cbnz	r3, 801fbb2 <_printf_float+0x16a>
 801fbac:	6822      	ldr	r2, [r4, #0]
 801fbae:	07d0      	lsls	r0, r2, #31
 801fbb0:	d502      	bpl.n	801fbb8 <_printf_float+0x170>
 801fbb2:	3301      	adds	r3, #1
 801fbb4:	440b      	add	r3, r1
 801fbb6:	6123      	str	r3, [r4, #16]
 801fbb8:	2300      	movs	r3, #0
 801fbba:	65a1      	str	r1, [r4, #88]	; 0x58
 801fbbc:	9304      	str	r3, [sp, #16]
 801fbbe:	e7de      	b.n	801fb7e <_printf_float+0x136>
 801fbc0:	b913      	cbnz	r3, 801fbc8 <_printf_float+0x180>
 801fbc2:	6822      	ldr	r2, [r4, #0]
 801fbc4:	07d2      	lsls	r2, r2, #31
 801fbc6:	d501      	bpl.n	801fbcc <_printf_float+0x184>
 801fbc8:	3302      	adds	r3, #2
 801fbca:	e7f4      	b.n	801fbb6 <_printf_float+0x16e>
 801fbcc:	2301      	movs	r3, #1
 801fbce:	e7f2      	b.n	801fbb6 <_printf_float+0x16e>
 801fbd0:	f04f 0967 	mov.w	r9, #103	; 0x67
 801fbd4:	9b08      	ldr	r3, [sp, #32]
 801fbd6:	4299      	cmp	r1, r3
 801fbd8:	db05      	blt.n	801fbe6 <_printf_float+0x19e>
 801fbda:	6823      	ldr	r3, [r4, #0]
 801fbdc:	6121      	str	r1, [r4, #16]
 801fbde:	07d8      	lsls	r0, r3, #31
 801fbe0:	d5ea      	bpl.n	801fbb8 <_printf_float+0x170>
 801fbe2:	1c4b      	adds	r3, r1, #1
 801fbe4:	e7e7      	b.n	801fbb6 <_printf_float+0x16e>
 801fbe6:	2900      	cmp	r1, #0
 801fbe8:	bfd4      	ite	le
 801fbea:	f1c1 0202 	rsble	r2, r1, #2
 801fbee:	2201      	movgt	r2, #1
 801fbf0:	4413      	add	r3, r2
 801fbf2:	e7e0      	b.n	801fbb6 <_printf_float+0x16e>
 801fbf4:	6823      	ldr	r3, [r4, #0]
 801fbf6:	055a      	lsls	r2, r3, #21
 801fbf8:	d407      	bmi.n	801fc0a <_printf_float+0x1c2>
 801fbfa:	6923      	ldr	r3, [r4, #16]
 801fbfc:	4642      	mov	r2, r8
 801fbfe:	4631      	mov	r1, r6
 801fc00:	4628      	mov	r0, r5
 801fc02:	47b8      	blx	r7
 801fc04:	3001      	adds	r0, #1
 801fc06:	d12a      	bne.n	801fc5e <_printf_float+0x216>
 801fc08:	e76a      	b.n	801fae0 <_printf_float+0x98>
 801fc0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fc0e:	f240 80e0 	bls.w	801fdd2 <_printf_float+0x38a>
 801fc12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fc16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc1e:	d133      	bne.n	801fc88 <_printf_float+0x240>
 801fc20:	4a37      	ldr	r2, [pc, #220]	; (801fd00 <_printf_float+0x2b8>)
 801fc22:	2301      	movs	r3, #1
 801fc24:	4631      	mov	r1, r6
 801fc26:	4628      	mov	r0, r5
 801fc28:	47b8      	blx	r7
 801fc2a:	3001      	adds	r0, #1
 801fc2c:	f43f af58 	beq.w	801fae0 <_printf_float+0x98>
 801fc30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fc34:	429a      	cmp	r2, r3
 801fc36:	db02      	blt.n	801fc3e <_printf_float+0x1f6>
 801fc38:	6823      	ldr	r3, [r4, #0]
 801fc3a:	07d8      	lsls	r0, r3, #31
 801fc3c:	d50f      	bpl.n	801fc5e <_printf_float+0x216>
 801fc3e:	4653      	mov	r3, sl
 801fc40:	465a      	mov	r2, fp
 801fc42:	4631      	mov	r1, r6
 801fc44:	4628      	mov	r0, r5
 801fc46:	47b8      	blx	r7
 801fc48:	3001      	adds	r0, #1
 801fc4a:	f43f af49 	beq.w	801fae0 <_printf_float+0x98>
 801fc4e:	f04f 0800 	mov.w	r8, #0
 801fc52:	f104 091a 	add.w	r9, r4, #26
 801fc56:	9b08      	ldr	r3, [sp, #32]
 801fc58:	3b01      	subs	r3, #1
 801fc5a:	4543      	cmp	r3, r8
 801fc5c:	dc09      	bgt.n	801fc72 <_printf_float+0x22a>
 801fc5e:	6823      	ldr	r3, [r4, #0]
 801fc60:	079b      	lsls	r3, r3, #30
 801fc62:	f100 8106 	bmi.w	801fe72 <_printf_float+0x42a>
 801fc66:	68e0      	ldr	r0, [r4, #12]
 801fc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc6a:	4298      	cmp	r0, r3
 801fc6c:	bfb8      	it	lt
 801fc6e:	4618      	movlt	r0, r3
 801fc70:	e738      	b.n	801fae4 <_printf_float+0x9c>
 801fc72:	2301      	movs	r3, #1
 801fc74:	464a      	mov	r2, r9
 801fc76:	4631      	mov	r1, r6
 801fc78:	4628      	mov	r0, r5
 801fc7a:	47b8      	blx	r7
 801fc7c:	3001      	adds	r0, #1
 801fc7e:	f43f af2f 	beq.w	801fae0 <_printf_float+0x98>
 801fc82:	f108 0801 	add.w	r8, r8, #1
 801fc86:	e7e6      	b.n	801fc56 <_printf_float+0x20e>
 801fc88:	9b07      	ldr	r3, [sp, #28]
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	dc3a      	bgt.n	801fd04 <_printf_float+0x2bc>
 801fc8e:	4a1c      	ldr	r2, [pc, #112]	; (801fd00 <_printf_float+0x2b8>)
 801fc90:	2301      	movs	r3, #1
 801fc92:	4631      	mov	r1, r6
 801fc94:	4628      	mov	r0, r5
 801fc96:	47b8      	blx	r7
 801fc98:	3001      	adds	r0, #1
 801fc9a:	f43f af21 	beq.w	801fae0 <_printf_float+0x98>
 801fc9e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fca2:	4313      	orrs	r3, r2
 801fca4:	d102      	bne.n	801fcac <_printf_float+0x264>
 801fca6:	6823      	ldr	r3, [r4, #0]
 801fca8:	07d9      	lsls	r1, r3, #31
 801fcaa:	d5d8      	bpl.n	801fc5e <_printf_float+0x216>
 801fcac:	4653      	mov	r3, sl
 801fcae:	465a      	mov	r2, fp
 801fcb0:	4631      	mov	r1, r6
 801fcb2:	4628      	mov	r0, r5
 801fcb4:	47b8      	blx	r7
 801fcb6:	3001      	adds	r0, #1
 801fcb8:	f43f af12 	beq.w	801fae0 <_printf_float+0x98>
 801fcbc:	f04f 0900 	mov.w	r9, #0
 801fcc0:	f104 0a1a 	add.w	sl, r4, #26
 801fcc4:	9b07      	ldr	r3, [sp, #28]
 801fcc6:	425b      	negs	r3, r3
 801fcc8:	454b      	cmp	r3, r9
 801fcca:	dc01      	bgt.n	801fcd0 <_printf_float+0x288>
 801fccc:	9b08      	ldr	r3, [sp, #32]
 801fcce:	e795      	b.n	801fbfc <_printf_float+0x1b4>
 801fcd0:	2301      	movs	r3, #1
 801fcd2:	4652      	mov	r2, sl
 801fcd4:	4631      	mov	r1, r6
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	47b8      	blx	r7
 801fcda:	3001      	adds	r0, #1
 801fcdc:	f43f af00 	beq.w	801fae0 <_printf_float+0x98>
 801fce0:	f109 0901 	add.w	r9, r9, #1
 801fce4:	e7ee      	b.n	801fcc4 <_printf_float+0x27c>
 801fce6:	bf00      	nop
 801fce8:	ffffffff 	.word	0xffffffff
 801fcec:	7fefffff 	.word	0x7fefffff
 801fcf0:	08025bac 	.word	0x08025bac
 801fcf4:	08025bb0 	.word	0x08025bb0
 801fcf8:	08025bb4 	.word	0x08025bb4
 801fcfc:	08025bb8 	.word	0x08025bb8
 801fd00:	08025bbc 	.word	0x08025bbc
 801fd04:	9a08      	ldr	r2, [sp, #32]
 801fd06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fd08:	429a      	cmp	r2, r3
 801fd0a:	bfa8      	it	ge
 801fd0c:	461a      	movge	r2, r3
 801fd0e:	2a00      	cmp	r2, #0
 801fd10:	4691      	mov	r9, r2
 801fd12:	dc38      	bgt.n	801fd86 <_printf_float+0x33e>
 801fd14:	2300      	movs	r3, #0
 801fd16:	9305      	str	r3, [sp, #20]
 801fd18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fd1c:	f104 021a 	add.w	r2, r4, #26
 801fd20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fd22:	9905      	ldr	r1, [sp, #20]
 801fd24:	9304      	str	r3, [sp, #16]
 801fd26:	eba3 0309 	sub.w	r3, r3, r9
 801fd2a:	428b      	cmp	r3, r1
 801fd2c:	dc33      	bgt.n	801fd96 <_printf_float+0x34e>
 801fd2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fd32:	429a      	cmp	r2, r3
 801fd34:	db3c      	blt.n	801fdb0 <_printf_float+0x368>
 801fd36:	6823      	ldr	r3, [r4, #0]
 801fd38:	07da      	lsls	r2, r3, #31
 801fd3a:	d439      	bmi.n	801fdb0 <_printf_float+0x368>
 801fd3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fd40:	eba2 0903 	sub.w	r9, r2, r3
 801fd44:	9b04      	ldr	r3, [sp, #16]
 801fd46:	1ad2      	subs	r2, r2, r3
 801fd48:	4591      	cmp	r9, r2
 801fd4a:	bfa8      	it	ge
 801fd4c:	4691      	movge	r9, r2
 801fd4e:	f1b9 0f00 	cmp.w	r9, #0
 801fd52:	dc35      	bgt.n	801fdc0 <_printf_float+0x378>
 801fd54:	f04f 0800 	mov.w	r8, #0
 801fd58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fd5c:	f104 0a1a 	add.w	sl, r4, #26
 801fd60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fd64:	1a9b      	subs	r3, r3, r2
 801fd66:	eba3 0309 	sub.w	r3, r3, r9
 801fd6a:	4543      	cmp	r3, r8
 801fd6c:	f77f af77 	ble.w	801fc5e <_printf_float+0x216>
 801fd70:	2301      	movs	r3, #1
 801fd72:	4652      	mov	r2, sl
 801fd74:	4631      	mov	r1, r6
 801fd76:	4628      	mov	r0, r5
 801fd78:	47b8      	blx	r7
 801fd7a:	3001      	adds	r0, #1
 801fd7c:	f43f aeb0 	beq.w	801fae0 <_printf_float+0x98>
 801fd80:	f108 0801 	add.w	r8, r8, #1
 801fd84:	e7ec      	b.n	801fd60 <_printf_float+0x318>
 801fd86:	4613      	mov	r3, r2
 801fd88:	4631      	mov	r1, r6
 801fd8a:	4642      	mov	r2, r8
 801fd8c:	4628      	mov	r0, r5
 801fd8e:	47b8      	blx	r7
 801fd90:	3001      	adds	r0, #1
 801fd92:	d1bf      	bne.n	801fd14 <_printf_float+0x2cc>
 801fd94:	e6a4      	b.n	801fae0 <_printf_float+0x98>
 801fd96:	2301      	movs	r3, #1
 801fd98:	4631      	mov	r1, r6
 801fd9a:	4628      	mov	r0, r5
 801fd9c:	9204      	str	r2, [sp, #16]
 801fd9e:	47b8      	blx	r7
 801fda0:	3001      	adds	r0, #1
 801fda2:	f43f ae9d 	beq.w	801fae0 <_printf_float+0x98>
 801fda6:	9b05      	ldr	r3, [sp, #20]
 801fda8:	9a04      	ldr	r2, [sp, #16]
 801fdaa:	3301      	adds	r3, #1
 801fdac:	9305      	str	r3, [sp, #20]
 801fdae:	e7b7      	b.n	801fd20 <_printf_float+0x2d8>
 801fdb0:	4653      	mov	r3, sl
 801fdb2:	465a      	mov	r2, fp
 801fdb4:	4631      	mov	r1, r6
 801fdb6:	4628      	mov	r0, r5
 801fdb8:	47b8      	blx	r7
 801fdba:	3001      	adds	r0, #1
 801fdbc:	d1be      	bne.n	801fd3c <_printf_float+0x2f4>
 801fdbe:	e68f      	b.n	801fae0 <_printf_float+0x98>
 801fdc0:	9a04      	ldr	r2, [sp, #16]
 801fdc2:	464b      	mov	r3, r9
 801fdc4:	4442      	add	r2, r8
 801fdc6:	4631      	mov	r1, r6
 801fdc8:	4628      	mov	r0, r5
 801fdca:	47b8      	blx	r7
 801fdcc:	3001      	adds	r0, #1
 801fdce:	d1c1      	bne.n	801fd54 <_printf_float+0x30c>
 801fdd0:	e686      	b.n	801fae0 <_printf_float+0x98>
 801fdd2:	9a08      	ldr	r2, [sp, #32]
 801fdd4:	2a01      	cmp	r2, #1
 801fdd6:	dc01      	bgt.n	801fddc <_printf_float+0x394>
 801fdd8:	07db      	lsls	r3, r3, #31
 801fdda:	d537      	bpl.n	801fe4c <_printf_float+0x404>
 801fddc:	2301      	movs	r3, #1
 801fdde:	4642      	mov	r2, r8
 801fde0:	4631      	mov	r1, r6
 801fde2:	4628      	mov	r0, r5
 801fde4:	47b8      	blx	r7
 801fde6:	3001      	adds	r0, #1
 801fde8:	f43f ae7a 	beq.w	801fae0 <_printf_float+0x98>
 801fdec:	4653      	mov	r3, sl
 801fdee:	465a      	mov	r2, fp
 801fdf0:	4631      	mov	r1, r6
 801fdf2:	4628      	mov	r0, r5
 801fdf4:	47b8      	blx	r7
 801fdf6:	3001      	adds	r0, #1
 801fdf8:	f43f ae72 	beq.w	801fae0 <_printf_float+0x98>
 801fdfc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fe00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fe04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe08:	9b08      	ldr	r3, [sp, #32]
 801fe0a:	d01a      	beq.n	801fe42 <_printf_float+0x3fa>
 801fe0c:	3b01      	subs	r3, #1
 801fe0e:	f108 0201 	add.w	r2, r8, #1
 801fe12:	4631      	mov	r1, r6
 801fe14:	4628      	mov	r0, r5
 801fe16:	47b8      	blx	r7
 801fe18:	3001      	adds	r0, #1
 801fe1a:	d10e      	bne.n	801fe3a <_printf_float+0x3f2>
 801fe1c:	e660      	b.n	801fae0 <_printf_float+0x98>
 801fe1e:	2301      	movs	r3, #1
 801fe20:	464a      	mov	r2, r9
 801fe22:	4631      	mov	r1, r6
 801fe24:	4628      	mov	r0, r5
 801fe26:	47b8      	blx	r7
 801fe28:	3001      	adds	r0, #1
 801fe2a:	f43f ae59 	beq.w	801fae0 <_printf_float+0x98>
 801fe2e:	f108 0801 	add.w	r8, r8, #1
 801fe32:	9b08      	ldr	r3, [sp, #32]
 801fe34:	3b01      	subs	r3, #1
 801fe36:	4543      	cmp	r3, r8
 801fe38:	dcf1      	bgt.n	801fe1e <_printf_float+0x3d6>
 801fe3a:	9b04      	ldr	r3, [sp, #16]
 801fe3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fe40:	e6dd      	b.n	801fbfe <_printf_float+0x1b6>
 801fe42:	f04f 0800 	mov.w	r8, #0
 801fe46:	f104 091a 	add.w	r9, r4, #26
 801fe4a:	e7f2      	b.n	801fe32 <_printf_float+0x3ea>
 801fe4c:	2301      	movs	r3, #1
 801fe4e:	4642      	mov	r2, r8
 801fe50:	e7df      	b.n	801fe12 <_printf_float+0x3ca>
 801fe52:	2301      	movs	r3, #1
 801fe54:	464a      	mov	r2, r9
 801fe56:	4631      	mov	r1, r6
 801fe58:	4628      	mov	r0, r5
 801fe5a:	47b8      	blx	r7
 801fe5c:	3001      	adds	r0, #1
 801fe5e:	f43f ae3f 	beq.w	801fae0 <_printf_float+0x98>
 801fe62:	f108 0801 	add.w	r8, r8, #1
 801fe66:	68e3      	ldr	r3, [r4, #12]
 801fe68:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fe6a:	1a5b      	subs	r3, r3, r1
 801fe6c:	4543      	cmp	r3, r8
 801fe6e:	dcf0      	bgt.n	801fe52 <_printf_float+0x40a>
 801fe70:	e6f9      	b.n	801fc66 <_printf_float+0x21e>
 801fe72:	f04f 0800 	mov.w	r8, #0
 801fe76:	f104 0919 	add.w	r9, r4, #25
 801fe7a:	e7f4      	b.n	801fe66 <_printf_float+0x41e>

0801fe7c <_printf_common>:
 801fe7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe80:	4616      	mov	r6, r2
 801fe82:	4699      	mov	r9, r3
 801fe84:	688a      	ldr	r2, [r1, #8]
 801fe86:	690b      	ldr	r3, [r1, #16]
 801fe88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fe8c:	4293      	cmp	r3, r2
 801fe8e:	bfb8      	it	lt
 801fe90:	4613      	movlt	r3, r2
 801fe92:	6033      	str	r3, [r6, #0]
 801fe94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fe98:	4607      	mov	r7, r0
 801fe9a:	460c      	mov	r4, r1
 801fe9c:	b10a      	cbz	r2, 801fea2 <_printf_common+0x26>
 801fe9e:	3301      	adds	r3, #1
 801fea0:	6033      	str	r3, [r6, #0]
 801fea2:	6823      	ldr	r3, [r4, #0]
 801fea4:	0699      	lsls	r1, r3, #26
 801fea6:	bf42      	ittt	mi
 801fea8:	6833      	ldrmi	r3, [r6, #0]
 801feaa:	3302      	addmi	r3, #2
 801feac:	6033      	strmi	r3, [r6, #0]
 801feae:	6825      	ldr	r5, [r4, #0]
 801feb0:	f015 0506 	ands.w	r5, r5, #6
 801feb4:	d106      	bne.n	801fec4 <_printf_common+0x48>
 801feb6:	f104 0a19 	add.w	sl, r4, #25
 801feba:	68e3      	ldr	r3, [r4, #12]
 801febc:	6832      	ldr	r2, [r6, #0]
 801febe:	1a9b      	subs	r3, r3, r2
 801fec0:	42ab      	cmp	r3, r5
 801fec2:	dc26      	bgt.n	801ff12 <_printf_common+0x96>
 801fec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fec8:	1e13      	subs	r3, r2, #0
 801feca:	6822      	ldr	r2, [r4, #0]
 801fecc:	bf18      	it	ne
 801fece:	2301      	movne	r3, #1
 801fed0:	0692      	lsls	r2, r2, #26
 801fed2:	d42b      	bmi.n	801ff2c <_printf_common+0xb0>
 801fed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fed8:	4649      	mov	r1, r9
 801feda:	4638      	mov	r0, r7
 801fedc:	47c0      	blx	r8
 801fede:	3001      	adds	r0, #1
 801fee0:	d01e      	beq.n	801ff20 <_printf_common+0xa4>
 801fee2:	6823      	ldr	r3, [r4, #0]
 801fee4:	6922      	ldr	r2, [r4, #16]
 801fee6:	f003 0306 	and.w	r3, r3, #6
 801feea:	2b04      	cmp	r3, #4
 801feec:	bf02      	ittt	eq
 801feee:	68e5      	ldreq	r5, [r4, #12]
 801fef0:	6833      	ldreq	r3, [r6, #0]
 801fef2:	1aed      	subeq	r5, r5, r3
 801fef4:	68a3      	ldr	r3, [r4, #8]
 801fef6:	bf0c      	ite	eq
 801fef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fefc:	2500      	movne	r5, #0
 801fefe:	4293      	cmp	r3, r2
 801ff00:	bfc4      	itt	gt
 801ff02:	1a9b      	subgt	r3, r3, r2
 801ff04:	18ed      	addgt	r5, r5, r3
 801ff06:	2600      	movs	r6, #0
 801ff08:	341a      	adds	r4, #26
 801ff0a:	42b5      	cmp	r5, r6
 801ff0c:	d11a      	bne.n	801ff44 <_printf_common+0xc8>
 801ff0e:	2000      	movs	r0, #0
 801ff10:	e008      	b.n	801ff24 <_printf_common+0xa8>
 801ff12:	2301      	movs	r3, #1
 801ff14:	4652      	mov	r2, sl
 801ff16:	4649      	mov	r1, r9
 801ff18:	4638      	mov	r0, r7
 801ff1a:	47c0      	blx	r8
 801ff1c:	3001      	adds	r0, #1
 801ff1e:	d103      	bne.n	801ff28 <_printf_common+0xac>
 801ff20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ff24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff28:	3501      	adds	r5, #1
 801ff2a:	e7c6      	b.n	801feba <_printf_common+0x3e>
 801ff2c:	18e1      	adds	r1, r4, r3
 801ff2e:	1c5a      	adds	r2, r3, #1
 801ff30:	2030      	movs	r0, #48	; 0x30
 801ff32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ff36:	4422      	add	r2, r4
 801ff38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ff3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ff40:	3302      	adds	r3, #2
 801ff42:	e7c7      	b.n	801fed4 <_printf_common+0x58>
 801ff44:	2301      	movs	r3, #1
 801ff46:	4622      	mov	r2, r4
 801ff48:	4649      	mov	r1, r9
 801ff4a:	4638      	mov	r0, r7
 801ff4c:	47c0      	blx	r8
 801ff4e:	3001      	adds	r0, #1
 801ff50:	d0e6      	beq.n	801ff20 <_printf_common+0xa4>
 801ff52:	3601      	adds	r6, #1
 801ff54:	e7d9      	b.n	801ff0a <_printf_common+0x8e>
	...

0801ff58 <_printf_i>:
 801ff58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ff5c:	7e0f      	ldrb	r7, [r1, #24]
 801ff5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ff60:	2f78      	cmp	r7, #120	; 0x78
 801ff62:	4691      	mov	r9, r2
 801ff64:	4680      	mov	r8, r0
 801ff66:	460c      	mov	r4, r1
 801ff68:	469a      	mov	sl, r3
 801ff6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ff6e:	d807      	bhi.n	801ff80 <_printf_i+0x28>
 801ff70:	2f62      	cmp	r7, #98	; 0x62
 801ff72:	d80a      	bhi.n	801ff8a <_printf_i+0x32>
 801ff74:	2f00      	cmp	r7, #0
 801ff76:	f000 80d4 	beq.w	8020122 <_printf_i+0x1ca>
 801ff7a:	2f58      	cmp	r7, #88	; 0x58
 801ff7c:	f000 80c0 	beq.w	8020100 <_printf_i+0x1a8>
 801ff80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ff84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ff88:	e03a      	b.n	8020000 <_printf_i+0xa8>
 801ff8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ff8e:	2b15      	cmp	r3, #21
 801ff90:	d8f6      	bhi.n	801ff80 <_printf_i+0x28>
 801ff92:	a101      	add	r1, pc, #4	; (adr r1, 801ff98 <_printf_i+0x40>)
 801ff94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ff98:	0801fff1 	.word	0x0801fff1
 801ff9c:	08020005 	.word	0x08020005
 801ffa0:	0801ff81 	.word	0x0801ff81
 801ffa4:	0801ff81 	.word	0x0801ff81
 801ffa8:	0801ff81 	.word	0x0801ff81
 801ffac:	0801ff81 	.word	0x0801ff81
 801ffb0:	08020005 	.word	0x08020005
 801ffb4:	0801ff81 	.word	0x0801ff81
 801ffb8:	0801ff81 	.word	0x0801ff81
 801ffbc:	0801ff81 	.word	0x0801ff81
 801ffc0:	0801ff81 	.word	0x0801ff81
 801ffc4:	08020109 	.word	0x08020109
 801ffc8:	08020031 	.word	0x08020031
 801ffcc:	080200c3 	.word	0x080200c3
 801ffd0:	0801ff81 	.word	0x0801ff81
 801ffd4:	0801ff81 	.word	0x0801ff81
 801ffd8:	0802012b 	.word	0x0802012b
 801ffdc:	0801ff81 	.word	0x0801ff81
 801ffe0:	08020031 	.word	0x08020031
 801ffe4:	0801ff81 	.word	0x0801ff81
 801ffe8:	0801ff81 	.word	0x0801ff81
 801ffec:	080200cb 	.word	0x080200cb
 801fff0:	682b      	ldr	r3, [r5, #0]
 801fff2:	1d1a      	adds	r2, r3, #4
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	602a      	str	r2, [r5, #0]
 801fff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020000:	2301      	movs	r3, #1
 8020002:	e09f      	b.n	8020144 <_printf_i+0x1ec>
 8020004:	6820      	ldr	r0, [r4, #0]
 8020006:	682b      	ldr	r3, [r5, #0]
 8020008:	0607      	lsls	r7, r0, #24
 802000a:	f103 0104 	add.w	r1, r3, #4
 802000e:	6029      	str	r1, [r5, #0]
 8020010:	d501      	bpl.n	8020016 <_printf_i+0xbe>
 8020012:	681e      	ldr	r6, [r3, #0]
 8020014:	e003      	b.n	802001e <_printf_i+0xc6>
 8020016:	0646      	lsls	r6, r0, #25
 8020018:	d5fb      	bpl.n	8020012 <_printf_i+0xba>
 802001a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802001e:	2e00      	cmp	r6, #0
 8020020:	da03      	bge.n	802002a <_printf_i+0xd2>
 8020022:	232d      	movs	r3, #45	; 0x2d
 8020024:	4276      	negs	r6, r6
 8020026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802002a:	485a      	ldr	r0, [pc, #360]	; (8020194 <_printf_i+0x23c>)
 802002c:	230a      	movs	r3, #10
 802002e:	e012      	b.n	8020056 <_printf_i+0xfe>
 8020030:	682b      	ldr	r3, [r5, #0]
 8020032:	6820      	ldr	r0, [r4, #0]
 8020034:	1d19      	adds	r1, r3, #4
 8020036:	6029      	str	r1, [r5, #0]
 8020038:	0605      	lsls	r5, r0, #24
 802003a:	d501      	bpl.n	8020040 <_printf_i+0xe8>
 802003c:	681e      	ldr	r6, [r3, #0]
 802003e:	e002      	b.n	8020046 <_printf_i+0xee>
 8020040:	0641      	lsls	r1, r0, #25
 8020042:	d5fb      	bpl.n	802003c <_printf_i+0xe4>
 8020044:	881e      	ldrh	r6, [r3, #0]
 8020046:	4853      	ldr	r0, [pc, #332]	; (8020194 <_printf_i+0x23c>)
 8020048:	2f6f      	cmp	r7, #111	; 0x6f
 802004a:	bf0c      	ite	eq
 802004c:	2308      	moveq	r3, #8
 802004e:	230a      	movne	r3, #10
 8020050:	2100      	movs	r1, #0
 8020052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020056:	6865      	ldr	r5, [r4, #4]
 8020058:	60a5      	str	r5, [r4, #8]
 802005a:	2d00      	cmp	r5, #0
 802005c:	bfa2      	ittt	ge
 802005e:	6821      	ldrge	r1, [r4, #0]
 8020060:	f021 0104 	bicge.w	r1, r1, #4
 8020064:	6021      	strge	r1, [r4, #0]
 8020066:	b90e      	cbnz	r6, 802006c <_printf_i+0x114>
 8020068:	2d00      	cmp	r5, #0
 802006a:	d04b      	beq.n	8020104 <_printf_i+0x1ac>
 802006c:	4615      	mov	r5, r2
 802006e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020072:	fb03 6711 	mls	r7, r3, r1, r6
 8020076:	5dc7      	ldrb	r7, [r0, r7]
 8020078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802007c:	4637      	mov	r7, r6
 802007e:	42bb      	cmp	r3, r7
 8020080:	460e      	mov	r6, r1
 8020082:	d9f4      	bls.n	802006e <_printf_i+0x116>
 8020084:	2b08      	cmp	r3, #8
 8020086:	d10b      	bne.n	80200a0 <_printf_i+0x148>
 8020088:	6823      	ldr	r3, [r4, #0]
 802008a:	07de      	lsls	r6, r3, #31
 802008c:	d508      	bpl.n	80200a0 <_printf_i+0x148>
 802008e:	6923      	ldr	r3, [r4, #16]
 8020090:	6861      	ldr	r1, [r4, #4]
 8020092:	4299      	cmp	r1, r3
 8020094:	bfde      	ittt	le
 8020096:	2330      	movle	r3, #48	; 0x30
 8020098:	f805 3c01 	strble.w	r3, [r5, #-1]
 802009c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80200a0:	1b52      	subs	r2, r2, r5
 80200a2:	6122      	str	r2, [r4, #16]
 80200a4:	f8cd a000 	str.w	sl, [sp]
 80200a8:	464b      	mov	r3, r9
 80200aa:	aa03      	add	r2, sp, #12
 80200ac:	4621      	mov	r1, r4
 80200ae:	4640      	mov	r0, r8
 80200b0:	f7ff fee4 	bl	801fe7c <_printf_common>
 80200b4:	3001      	adds	r0, #1
 80200b6:	d14a      	bne.n	802014e <_printf_i+0x1f6>
 80200b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80200bc:	b004      	add	sp, #16
 80200be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200c2:	6823      	ldr	r3, [r4, #0]
 80200c4:	f043 0320 	orr.w	r3, r3, #32
 80200c8:	6023      	str	r3, [r4, #0]
 80200ca:	4833      	ldr	r0, [pc, #204]	; (8020198 <_printf_i+0x240>)
 80200cc:	2778      	movs	r7, #120	; 0x78
 80200ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80200d2:	6823      	ldr	r3, [r4, #0]
 80200d4:	6829      	ldr	r1, [r5, #0]
 80200d6:	061f      	lsls	r7, r3, #24
 80200d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80200dc:	d402      	bmi.n	80200e4 <_printf_i+0x18c>
 80200de:	065f      	lsls	r7, r3, #25
 80200e0:	bf48      	it	mi
 80200e2:	b2b6      	uxthmi	r6, r6
 80200e4:	07df      	lsls	r7, r3, #31
 80200e6:	bf48      	it	mi
 80200e8:	f043 0320 	orrmi.w	r3, r3, #32
 80200ec:	6029      	str	r1, [r5, #0]
 80200ee:	bf48      	it	mi
 80200f0:	6023      	strmi	r3, [r4, #0]
 80200f2:	b91e      	cbnz	r6, 80200fc <_printf_i+0x1a4>
 80200f4:	6823      	ldr	r3, [r4, #0]
 80200f6:	f023 0320 	bic.w	r3, r3, #32
 80200fa:	6023      	str	r3, [r4, #0]
 80200fc:	2310      	movs	r3, #16
 80200fe:	e7a7      	b.n	8020050 <_printf_i+0xf8>
 8020100:	4824      	ldr	r0, [pc, #144]	; (8020194 <_printf_i+0x23c>)
 8020102:	e7e4      	b.n	80200ce <_printf_i+0x176>
 8020104:	4615      	mov	r5, r2
 8020106:	e7bd      	b.n	8020084 <_printf_i+0x12c>
 8020108:	682b      	ldr	r3, [r5, #0]
 802010a:	6826      	ldr	r6, [r4, #0]
 802010c:	6961      	ldr	r1, [r4, #20]
 802010e:	1d18      	adds	r0, r3, #4
 8020110:	6028      	str	r0, [r5, #0]
 8020112:	0635      	lsls	r5, r6, #24
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	d501      	bpl.n	802011c <_printf_i+0x1c4>
 8020118:	6019      	str	r1, [r3, #0]
 802011a:	e002      	b.n	8020122 <_printf_i+0x1ca>
 802011c:	0670      	lsls	r0, r6, #25
 802011e:	d5fb      	bpl.n	8020118 <_printf_i+0x1c0>
 8020120:	8019      	strh	r1, [r3, #0]
 8020122:	2300      	movs	r3, #0
 8020124:	6123      	str	r3, [r4, #16]
 8020126:	4615      	mov	r5, r2
 8020128:	e7bc      	b.n	80200a4 <_printf_i+0x14c>
 802012a:	682b      	ldr	r3, [r5, #0]
 802012c:	1d1a      	adds	r2, r3, #4
 802012e:	602a      	str	r2, [r5, #0]
 8020130:	681d      	ldr	r5, [r3, #0]
 8020132:	6862      	ldr	r2, [r4, #4]
 8020134:	2100      	movs	r1, #0
 8020136:	4628      	mov	r0, r5
 8020138:	f7e0 f892 	bl	8000260 <memchr>
 802013c:	b108      	cbz	r0, 8020142 <_printf_i+0x1ea>
 802013e:	1b40      	subs	r0, r0, r5
 8020140:	6060      	str	r0, [r4, #4]
 8020142:	6863      	ldr	r3, [r4, #4]
 8020144:	6123      	str	r3, [r4, #16]
 8020146:	2300      	movs	r3, #0
 8020148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802014c:	e7aa      	b.n	80200a4 <_printf_i+0x14c>
 802014e:	6923      	ldr	r3, [r4, #16]
 8020150:	462a      	mov	r2, r5
 8020152:	4649      	mov	r1, r9
 8020154:	4640      	mov	r0, r8
 8020156:	47d0      	blx	sl
 8020158:	3001      	adds	r0, #1
 802015a:	d0ad      	beq.n	80200b8 <_printf_i+0x160>
 802015c:	6823      	ldr	r3, [r4, #0]
 802015e:	079b      	lsls	r3, r3, #30
 8020160:	d413      	bmi.n	802018a <_printf_i+0x232>
 8020162:	68e0      	ldr	r0, [r4, #12]
 8020164:	9b03      	ldr	r3, [sp, #12]
 8020166:	4298      	cmp	r0, r3
 8020168:	bfb8      	it	lt
 802016a:	4618      	movlt	r0, r3
 802016c:	e7a6      	b.n	80200bc <_printf_i+0x164>
 802016e:	2301      	movs	r3, #1
 8020170:	4632      	mov	r2, r6
 8020172:	4649      	mov	r1, r9
 8020174:	4640      	mov	r0, r8
 8020176:	47d0      	blx	sl
 8020178:	3001      	adds	r0, #1
 802017a:	d09d      	beq.n	80200b8 <_printf_i+0x160>
 802017c:	3501      	adds	r5, #1
 802017e:	68e3      	ldr	r3, [r4, #12]
 8020180:	9903      	ldr	r1, [sp, #12]
 8020182:	1a5b      	subs	r3, r3, r1
 8020184:	42ab      	cmp	r3, r5
 8020186:	dcf2      	bgt.n	802016e <_printf_i+0x216>
 8020188:	e7eb      	b.n	8020162 <_printf_i+0x20a>
 802018a:	2500      	movs	r5, #0
 802018c:	f104 0619 	add.w	r6, r4, #25
 8020190:	e7f5      	b.n	802017e <_printf_i+0x226>
 8020192:	bf00      	nop
 8020194:	08025bbe 	.word	0x08025bbe
 8020198:	08025bcf 	.word	0x08025bcf

0802019c <_scanf_float>:
 802019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a0:	b087      	sub	sp, #28
 80201a2:	4617      	mov	r7, r2
 80201a4:	9303      	str	r3, [sp, #12]
 80201a6:	688b      	ldr	r3, [r1, #8]
 80201a8:	1e5a      	subs	r2, r3, #1
 80201aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80201ae:	bf83      	ittte	hi
 80201b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80201b4:	195b      	addhi	r3, r3, r5
 80201b6:	9302      	strhi	r3, [sp, #8]
 80201b8:	2300      	movls	r3, #0
 80201ba:	bf86      	itte	hi
 80201bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80201c0:	608b      	strhi	r3, [r1, #8]
 80201c2:	9302      	strls	r3, [sp, #8]
 80201c4:	680b      	ldr	r3, [r1, #0]
 80201c6:	468b      	mov	fp, r1
 80201c8:	2500      	movs	r5, #0
 80201ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80201ce:	f84b 3b1c 	str.w	r3, [fp], #28
 80201d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80201d6:	4680      	mov	r8, r0
 80201d8:	460c      	mov	r4, r1
 80201da:	465e      	mov	r6, fp
 80201dc:	46aa      	mov	sl, r5
 80201de:	46a9      	mov	r9, r5
 80201e0:	9501      	str	r5, [sp, #4]
 80201e2:	68a2      	ldr	r2, [r4, #8]
 80201e4:	b152      	cbz	r2, 80201fc <_scanf_float+0x60>
 80201e6:	683b      	ldr	r3, [r7, #0]
 80201e8:	781b      	ldrb	r3, [r3, #0]
 80201ea:	2b4e      	cmp	r3, #78	; 0x4e
 80201ec:	d864      	bhi.n	80202b8 <_scanf_float+0x11c>
 80201ee:	2b40      	cmp	r3, #64	; 0x40
 80201f0:	d83c      	bhi.n	802026c <_scanf_float+0xd0>
 80201f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80201f6:	b2c8      	uxtb	r0, r1
 80201f8:	280e      	cmp	r0, #14
 80201fa:	d93a      	bls.n	8020272 <_scanf_float+0xd6>
 80201fc:	f1b9 0f00 	cmp.w	r9, #0
 8020200:	d003      	beq.n	802020a <_scanf_float+0x6e>
 8020202:	6823      	ldr	r3, [r4, #0]
 8020204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020208:	6023      	str	r3, [r4, #0]
 802020a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802020e:	f1ba 0f01 	cmp.w	sl, #1
 8020212:	f200 8113 	bhi.w	802043c <_scanf_float+0x2a0>
 8020216:	455e      	cmp	r6, fp
 8020218:	f200 8105 	bhi.w	8020426 <_scanf_float+0x28a>
 802021c:	2501      	movs	r5, #1
 802021e:	4628      	mov	r0, r5
 8020220:	b007      	add	sp, #28
 8020222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802022a:	2a0d      	cmp	r2, #13
 802022c:	d8e6      	bhi.n	80201fc <_scanf_float+0x60>
 802022e:	a101      	add	r1, pc, #4	; (adr r1, 8020234 <_scanf_float+0x98>)
 8020230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020234:	08020373 	.word	0x08020373
 8020238:	080201fd 	.word	0x080201fd
 802023c:	080201fd 	.word	0x080201fd
 8020240:	080201fd 	.word	0x080201fd
 8020244:	080203d3 	.word	0x080203d3
 8020248:	080203ab 	.word	0x080203ab
 802024c:	080201fd 	.word	0x080201fd
 8020250:	080201fd 	.word	0x080201fd
 8020254:	08020381 	.word	0x08020381
 8020258:	080201fd 	.word	0x080201fd
 802025c:	080201fd 	.word	0x080201fd
 8020260:	080201fd 	.word	0x080201fd
 8020264:	080201fd 	.word	0x080201fd
 8020268:	08020339 	.word	0x08020339
 802026c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020270:	e7db      	b.n	802022a <_scanf_float+0x8e>
 8020272:	290e      	cmp	r1, #14
 8020274:	d8c2      	bhi.n	80201fc <_scanf_float+0x60>
 8020276:	a001      	add	r0, pc, #4	; (adr r0, 802027c <_scanf_float+0xe0>)
 8020278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802027c:	0802032b 	.word	0x0802032b
 8020280:	080201fd 	.word	0x080201fd
 8020284:	0802032b 	.word	0x0802032b
 8020288:	080203bf 	.word	0x080203bf
 802028c:	080201fd 	.word	0x080201fd
 8020290:	080202d9 	.word	0x080202d9
 8020294:	08020315 	.word	0x08020315
 8020298:	08020315 	.word	0x08020315
 802029c:	08020315 	.word	0x08020315
 80202a0:	08020315 	.word	0x08020315
 80202a4:	08020315 	.word	0x08020315
 80202a8:	08020315 	.word	0x08020315
 80202ac:	08020315 	.word	0x08020315
 80202b0:	08020315 	.word	0x08020315
 80202b4:	08020315 	.word	0x08020315
 80202b8:	2b6e      	cmp	r3, #110	; 0x6e
 80202ba:	d809      	bhi.n	80202d0 <_scanf_float+0x134>
 80202bc:	2b60      	cmp	r3, #96	; 0x60
 80202be:	d8b2      	bhi.n	8020226 <_scanf_float+0x8a>
 80202c0:	2b54      	cmp	r3, #84	; 0x54
 80202c2:	d077      	beq.n	80203b4 <_scanf_float+0x218>
 80202c4:	2b59      	cmp	r3, #89	; 0x59
 80202c6:	d199      	bne.n	80201fc <_scanf_float+0x60>
 80202c8:	2d07      	cmp	r5, #7
 80202ca:	d197      	bne.n	80201fc <_scanf_float+0x60>
 80202cc:	2508      	movs	r5, #8
 80202ce:	e029      	b.n	8020324 <_scanf_float+0x188>
 80202d0:	2b74      	cmp	r3, #116	; 0x74
 80202d2:	d06f      	beq.n	80203b4 <_scanf_float+0x218>
 80202d4:	2b79      	cmp	r3, #121	; 0x79
 80202d6:	e7f6      	b.n	80202c6 <_scanf_float+0x12a>
 80202d8:	6821      	ldr	r1, [r4, #0]
 80202da:	05c8      	lsls	r0, r1, #23
 80202dc:	d51a      	bpl.n	8020314 <_scanf_float+0x178>
 80202de:	9b02      	ldr	r3, [sp, #8]
 80202e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80202e4:	6021      	str	r1, [r4, #0]
 80202e6:	f109 0901 	add.w	r9, r9, #1
 80202ea:	b11b      	cbz	r3, 80202f4 <_scanf_float+0x158>
 80202ec:	3b01      	subs	r3, #1
 80202ee:	3201      	adds	r2, #1
 80202f0:	9302      	str	r3, [sp, #8]
 80202f2:	60a2      	str	r2, [r4, #8]
 80202f4:	68a3      	ldr	r3, [r4, #8]
 80202f6:	3b01      	subs	r3, #1
 80202f8:	60a3      	str	r3, [r4, #8]
 80202fa:	6923      	ldr	r3, [r4, #16]
 80202fc:	3301      	adds	r3, #1
 80202fe:	6123      	str	r3, [r4, #16]
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	3b01      	subs	r3, #1
 8020304:	2b00      	cmp	r3, #0
 8020306:	607b      	str	r3, [r7, #4]
 8020308:	f340 8084 	ble.w	8020414 <_scanf_float+0x278>
 802030c:	683b      	ldr	r3, [r7, #0]
 802030e:	3301      	adds	r3, #1
 8020310:	603b      	str	r3, [r7, #0]
 8020312:	e766      	b.n	80201e2 <_scanf_float+0x46>
 8020314:	eb1a 0f05 	cmn.w	sl, r5
 8020318:	f47f af70 	bne.w	80201fc <_scanf_float+0x60>
 802031c:	6822      	ldr	r2, [r4, #0]
 802031e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8020322:	6022      	str	r2, [r4, #0]
 8020324:	f806 3b01 	strb.w	r3, [r6], #1
 8020328:	e7e4      	b.n	80202f4 <_scanf_float+0x158>
 802032a:	6822      	ldr	r2, [r4, #0]
 802032c:	0610      	lsls	r0, r2, #24
 802032e:	f57f af65 	bpl.w	80201fc <_scanf_float+0x60>
 8020332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020336:	e7f4      	b.n	8020322 <_scanf_float+0x186>
 8020338:	f1ba 0f00 	cmp.w	sl, #0
 802033c:	d10e      	bne.n	802035c <_scanf_float+0x1c0>
 802033e:	f1b9 0f00 	cmp.w	r9, #0
 8020342:	d10e      	bne.n	8020362 <_scanf_float+0x1c6>
 8020344:	6822      	ldr	r2, [r4, #0]
 8020346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802034a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802034e:	d108      	bne.n	8020362 <_scanf_float+0x1c6>
 8020350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020354:	6022      	str	r2, [r4, #0]
 8020356:	f04f 0a01 	mov.w	sl, #1
 802035a:	e7e3      	b.n	8020324 <_scanf_float+0x188>
 802035c:	f1ba 0f02 	cmp.w	sl, #2
 8020360:	d055      	beq.n	802040e <_scanf_float+0x272>
 8020362:	2d01      	cmp	r5, #1
 8020364:	d002      	beq.n	802036c <_scanf_float+0x1d0>
 8020366:	2d04      	cmp	r5, #4
 8020368:	f47f af48 	bne.w	80201fc <_scanf_float+0x60>
 802036c:	3501      	adds	r5, #1
 802036e:	b2ed      	uxtb	r5, r5
 8020370:	e7d8      	b.n	8020324 <_scanf_float+0x188>
 8020372:	f1ba 0f01 	cmp.w	sl, #1
 8020376:	f47f af41 	bne.w	80201fc <_scanf_float+0x60>
 802037a:	f04f 0a02 	mov.w	sl, #2
 802037e:	e7d1      	b.n	8020324 <_scanf_float+0x188>
 8020380:	b97d      	cbnz	r5, 80203a2 <_scanf_float+0x206>
 8020382:	f1b9 0f00 	cmp.w	r9, #0
 8020386:	f47f af3c 	bne.w	8020202 <_scanf_float+0x66>
 802038a:	6822      	ldr	r2, [r4, #0]
 802038c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020394:	f47f af39 	bne.w	802020a <_scanf_float+0x6e>
 8020398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802039c:	6022      	str	r2, [r4, #0]
 802039e:	2501      	movs	r5, #1
 80203a0:	e7c0      	b.n	8020324 <_scanf_float+0x188>
 80203a2:	2d03      	cmp	r5, #3
 80203a4:	d0e2      	beq.n	802036c <_scanf_float+0x1d0>
 80203a6:	2d05      	cmp	r5, #5
 80203a8:	e7de      	b.n	8020368 <_scanf_float+0x1cc>
 80203aa:	2d02      	cmp	r5, #2
 80203ac:	f47f af26 	bne.w	80201fc <_scanf_float+0x60>
 80203b0:	2503      	movs	r5, #3
 80203b2:	e7b7      	b.n	8020324 <_scanf_float+0x188>
 80203b4:	2d06      	cmp	r5, #6
 80203b6:	f47f af21 	bne.w	80201fc <_scanf_float+0x60>
 80203ba:	2507      	movs	r5, #7
 80203bc:	e7b2      	b.n	8020324 <_scanf_float+0x188>
 80203be:	6822      	ldr	r2, [r4, #0]
 80203c0:	0591      	lsls	r1, r2, #22
 80203c2:	f57f af1b 	bpl.w	80201fc <_scanf_float+0x60>
 80203c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80203ca:	6022      	str	r2, [r4, #0]
 80203cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80203d0:	e7a8      	b.n	8020324 <_scanf_float+0x188>
 80203d2:	6822      	ldr	r2, [r4, #0]
 80203d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80203d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80203dc:	d006      	beq.n	80203ec <_scanf_float+0x250>
 80203de:	0550      	lsls	r0, r2, #21
 80203e0:	f57f af0c 	bpl.w	80201fc <_scanf_float+0x60>
 80203e4:	f1b9 0f00 	cmp.w	r9, #0
 80203e8:	f43f af0f 	beq.w	802020a <_scanf_float+0x6e>
 80203ec:	0591      	lsls	r1, r2, #22
 80203ee:	bf58      	it	pl
 80203f0:	9901      	ldrpl	r1, [sp, #4]
 80203f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80203f6:	bf58      	it	pl
 80203f8:	eba9 0101 	subpl.w	r1, r9, r1
 80203fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020400:	bf58      	it	pl
 8020402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8020406:	6022      	str	r2, [r4, #0]
 8020408:	f04f 0900 	mov.w	r9, #0
 802040c:	e78a      	b.n	8020324 <_scanf_float+0x188>
 802040e:	f04f 0a03 	mov.w	sl, #3
 8020412:	e787      	b.n	8020324 <_scanf_float+0x188>
 8020414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020418:	4639      	mov	r1, r7
 802041a:	4640      	mov	r0, r8
 802041c:	4798      	blx	r3
 802041e:	2800      	cmp	r0, #0
 8020420:	f43f aedf 	beq.w	80201e2 <_scanf_float+0x46>
 8020424:	e6ea      	b.n	80201fc <_scanf_float+0x60>
 8020426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802042a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802042e:	463a      	mov	r2, r7
 8020430:	4640      	mov	r0, r8
 8020432:	4798      	blx	r3
 8020434:	6923      	ldr	r3, [r4, #16]
 8020436:	3b01      	subs	r3, #1
 8020438:	6123      	str	r3, [r4, #16]
 802043a:	e6ec      	b.n	8020216 <_scanf_float+0x7a>
 802043c:	1e6b      	subs	r3, r5, #1
 802043e:	2b06      	cmp	r3, #6
 8020440:	d825      	bhi.n	802048e <_scanf_float+0x2f2>
 8020442:	2d02      	cmp	r5, #2
 8020444:	d836      	bhi.n	80204b4 <_scanf_float+0x318>
 8020446:	455e      	cmp	r6, fp
 8020448:	f67f aee8 	bls.w	802021c <_scanf_float+0x80>
 802044c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020454:	463a      	mov	r2, r7
 8020456:	4640      	mov	r0, r8
 8020458:	4798      	blx	r3
 802045a:	6923      	ldr	r3, [r4, #16]
 802045c:	3b01      	subs	r3, #1
 802045e:	6123      	str	r3, [r4, #16]
 8020460:	e7f1      	b.n	8020446 <_scanf_float+0x2aa>
 8020462:	9802      	ldr	r0, [sp, #8]
 8020464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802046c:	9002      	str	r0, [sp, #8]
 802046e:	463a      	mov	r2, r7
 8020470:	4640      	mov	r0, r8
 8020472:	4798      	blx	r3
 8020474:	6923      	ldr	r3, [r4, #16]
 8020476:	3b01      	subs	r3, #1
 8020478:	6123      	str	r3, [r4, #16]
 802047a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802047e:	fa5f fa8a 	uxtb.w	sl, sl
 8020482:	f1ba 0f02 	cmp.w	sl, #2
 8020486:	d1ec      	bne.n	8020462 <_scanf_float+0x2c6>
 8020488:	3d03      	subs	r5, #3
 802048a:	b2ed      	uxtb	r5, r5
 802048c:	1b76      	subs	r6, r6, r5
 802048e:	6823      	ldr	r3, [r4, #0]
 8020490:	05da      	lsls	r2, r3, #23
 8020492:	d52f      	bpl.n	80204f4 <_scanf_float+0x358>
 8020494:	055b      	lsls	r3, r3, #21
 8020496:	d510      	bpl.n	80204ba <_scanf_float+0x31e>
 8020498:	455e      	cmp	r6, fp
 802049a:	f67f aebf 	bls.w	802021c <_scanf_float+0x80>
 802049e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80204a6:	463a      	mov	r2, r7
 80204a8:	4640      	mov	r0, r8
 80204aa:	4798      	blx	r3
 80204ac:	6923      	ldr	r3, [r4, #16]
 80204ae:	3b01      	subs	r3, #1
 80204b0:	6123      	str	r3, [r4, #16]
 80204b2:	e7f1      	b.n	8020498 <_scanf_float+0x2fc>
 80204b4:	46aa      	mov	sl, r5
 80204b6:	9602      	str	r6, [sp, #8]
 80204b8:	e7df      	b.n	802047a <_scanf_float+0x2de>
 80204ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80204be:	6923      	ldr	r3, [r4, #16]
 80204c0:	2965      	cmp	r1, #101	; 0x65
 80204c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80204c6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80204ca:	6123      	str	r3, [r4, #16]
 80204cc:	d00c      	beq.n	80204e8 <_scanf_float+0x34c>
 80204ce:	2945      	cmp	r1, #69	; 0x45
 80204d0:	d00a      	beq.n	80204e8 <_scanf_float+0x34c>
 80204d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204d6:	463a      	mov	r2, r7
 80204d8:	4640      	mov	r0, r8
 80204da:	4798      	blx	r3
 80204dc:	6923      	ldr	r3, [r4, #16]
 80204de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80204e2:	3b01      	subs	r3, #1
 80204e4:	1eb5      	subs	r5, r6, #2
 80204e6:	6123      	str	r3, [r4, #16]
 80204e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204ec:	463a      	mov	r2, r7
 80204ee:	4640      	mov	r0, r8
 80204f0:	4798      	blx	r3
 80204f2:	462e      	mov	r6, r5
 80204f4:	6825      	ldr	r5, [r4, #0]
 80204f6:	f015 0510 	ands.w	r5, r5, #16
 80204fa:	d14d      	bne.n	8020598 <_scanf_float+0x3fc>
 80204fc:	7035      	strb	r5, [r6, #0]
 80204fe:	6823      	ldr	r3, [r4, #0]
 8020500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020508:	d11a      	bne.n	8020540 <_scanf_float+0x3a4>
 802050a:	9b01      	ldr	r3, [sp, #4]
 802050c:	454b      	cmp	r3, r9
 802050e:	eba3 0209 	sub.w	r2, r3, r9
 8020512:	d122      	bne.n	802055a <_scanf_float+0x3be>
 8020514:	2200      	movs	r2, #0
 8020516:	4659      	mov	r1, fp
 8020518:	4640      	mov	r0, r8
 802051a:	f002 fdd7 	bl	80230cc <_strtod_r>
 802051e:	9b03      	ldr	r3, [sp, #12]
 8020520:	6821      	ldr	r1, [r4, #0]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	f011 0f02 	tst.w	r1, #2
 8020528:	f103 0204 	add.w	r2, r3, #4
 802052c:	d020      	beq.n	8020570 <_scanf_float+0x3d4>
 802052e:	9903      	ldr	r1, [sp, #12]
 8020530:	600a      	str	r2, [r1, #0]
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	ed83 0b00 	vstr	d0, [r3]
 8020538:	68e3      	ldr	r3, [r4, #12]
 802053a:	3301      	adds	r3, #1
 802053c:	60e3      	str	r3, [r4, #12]
 802053e:	e66e      	b.n	802021e <_scanf_float+0x82>
 8020540:	9b04      	ldr	r3, [sp, #16]
 8020542:	2b00      	cmp	r3, #0
 8020544:	d0e6      	beq.n	8020514 <_scanf_float+0x378>
 8020546:	9905      	ldr	r1, [sp, #20]
 8020548:	230a      	movs	r3, #10
 802054a:	462a      	mov	r2, r5
 802054c:	3101      	adds	r1, #1
 802054e:	4640      	mov	r0, r8
 8020550:	f002 fe44 	bl	80231dc <_strtol_r>
 8020554:	9b04      	ldr	r3, [sp, #16]
 8020556:	9e05      	ldr	r6, [sp, #20]
 8020558:	1ac2      	subs	r2, r0, r3
 802055a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802055e:	429e      	cmp	r6, r3
 8020560:	bf28      	it	cs
 8020562:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020566:	490d      	ldr	r1, [pc, #52]	; (802059c <_scanf_float+0x400>)
 8020568:	4630      	mov	r0, r6
 802056a:	f000 fa87 	bl	8020a7c <siprintf>
 802056e:	e7d1      	b.n	8020514 <_scanf_float+0x378>
 8020570:	f011 0f04 	tst.w	r1, #4
 8020574:	9903      	ldr	r1, [sp, #12]
 8020576:	600a      	str	r2, [r1, #0]
 8020578:	d1db      	bne.n	8020532 <_scanf_float+0x396>
 802057a:	eeb4 0b40 	vcmp.f64	d0, d0
 802057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020582:	681e      	ldr	r6, [r3, #0]
 8020584:	d705      	bvc.n	8020592 <_scanf_float+0x3f6>
 8020586:	4806      	ldr	r0, [pc, #24]	; (80205a0 <_scanf_float+0x404>)
 8020588:	f000 fcb0 	bl	8020eec <nanf>
 802058c:	ed86 0a00 	vstr	s0, [r6]
 8020590:	e7d2      	b.n	8020538 <_scanf_float+0x39c>
 8020592:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020596:	e7f9      	b.n	802058c <_scanf_float+0x3f0>
 8020598:	2500      	movs	r5, #0
 802059a:	e640      	b.n	802021e <_scanf_float+0x82>
 802059c:	08025be0 	.word	0x08025be0
 80205a0:	08025c20 	.word	0x08025c20

080205a4 <std>:
 80205a4:	2300      	movs	r3, #0
 80205a6:	b510      	push	{r4, lr}
 80205a8:	4604      	mov	r4, r0
 80205aa:	e9c0 3300 	strd	r3, r3, [r0]
 80205ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80205b2:	6083      	str	r3, [r0, #8]
 80205b4:	8181      	strh	r1, [r0, #12]
 80205b6:	6643      	str	r3, [r0, #100]	; 0x64
 80205b8:	81c2      	strh	r2, [r0, #14]
 80205ba:	6183      	str	r3, [r0, #24]
 80205bc:	4619      	mov	r1, r3
 80205be:	2208      	movs	r2, #8
 80205c0:	305c      	adds	r0, #92	; 0x5c
 80205c2:	f000 fbb7 	bl	8020d34 <memset>
 80205c6:	4b0d      	ldr	r3, [pc, #52]	; (80205fc <std+0x58>)
 80205c8:	6263      	str	r3, [r4, #36]	; 0x24
 80205ca:	4b0d      	ldr	r3, [pc, #52]	; (8020600 <std+0x5c>)
 80205cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80205ce:	4b0d      	ldr	r3, [pc, #52]	; (8020604 <std+0x60>)
 80205d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80205d2:	4b0d      	ldr	r3, [pc, #52]	; (8020608 <std+0x64>)
 80205d4:	6323      	str	r3, [r4, #48]	; 0x30
 80205d6:	4b0d      	ldr	r3, [pc, #52]	; (802060c <std+0x68>)
 80205d8:	6224      	str	r4, [r4, #32]
 80205da:	429c      	cmp	r4, r3
 80205dc:	d006      	beq.n	80205ec <std+0x48>
 80205de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80205e2:	4294      	cmp	r4, r2
 80205e4:	d002      	beq.n	80205ec <std+0x48>
 80205e6:	33d0      	adds	r3, #208	; 0xd0
 80205e8:	429c      	cmp	r4, r3
 80205ea:	d105      	bne.n	80205f8 <std+0x54>
 80205ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80205f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205f4:	f000 bc60 	b.w	8020eb8 <__retarget_lock_init_recursive>
 80205f8:	bd10      	pop	{r4, pc}
 80205fa:	bf00      	nop
 80205fc:	08020abd 	.word	0x08020abd
 8020600:	08020adf 	.word	0x08020adf
 8020604:	08020b17 	.word	0x08020b17
 8020608:	08020b3b 	.word	0x08020b3b
 802060c:	20016fec 	.word	0x20016fec

08020610 <stdio_exit_handler>:
 8020610:	4a02      	ldr	r2, [pc, #8]	; (802061c <stdio_exit_handler+0xc>)
 8020612:	4903      	ldr	r1, [pc, #12]	; (8020620 <stdio_exit_handler+0x10>)
 8020614:	4803      	ldr	r0, [pc, #12]	; (8020624 <stdio_exit_handler+0x14>)
 8020616:	f000 b869 	b.w	80206ec <_fwalk_sglue>
 802061a:	bf00      	nop
 802061c:	20000944 	.word	0x20000944
 8020620:	08023825 	.word	0x08023825
 8020624:	20000950 	.word	0x20000950

08020628 <cleanup_stdio>:
 8020628:	6841      	ldr	r1, [r0, #4]
 802062a:	4b0c      	ldr	r3, [pc, #48]	; (802065c <cleanup_stdio+0x34>)
 802062c:	4299      	cmp	r1, r3
 802062e:	b510      	push	{r4, lr}
 8020630:	4604      	mov	r4, r0
 8020632:	d001      	beq.n	8020638 <cleanup_stdio+0x10>
 8020634:	f003 f8f6 	bl	8023824 <_fflush_r>
 8020638:	68a1      	ldr	r1, [r4, #8]
 802063a:	4b09      	ldr	r3, [pc, #36]	; (8020660 <cleanup_stdio+0x38>)
 802063c:	4299      	cmp	r1, r3
 802063e:	d002      	beq.n	8020646 <cleanup_stdio+0x1e>
 8020640:	4620      	mov	r0, r4
 8020642:	f003 f8ef 	bl	8023824 <_fflush_r>
 8020646:	68e1      	ldr	r1, [r4, #12]
 8020648:	4b06      	ldr	r3, [pc, #24]	; (8020664 <cleanup_stdio+0x3c>)
 802064a:	4299      	cmp	r1, r3
 802064c:	d004      	beq.n	8020658 <cleanup_stdio+0x30>
 802064e:	4620      	mov	r0, r4
 8020650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020654:	f003 b8e6 	b.w	8023824 <_fflush_r>
 8020658:	bd10      	pop	{r4, pc}
 802065a:	bf00      	nop
 802065c:	20016fec 	.word	0x20016fec
 8020660:	20017054 	.word	0x20017054
 8020664:	200170bc 	.word	0x200170bc

08020668 <global_stdio_init.part.0>:
 8020668:	b510      	push	{r4, lr}
 802066a:	4b0b      	ldr	r3, [pc, #44]	; (8020698 <global_stdio_init.part.0+0x30>)
 802066c:	4c0b      	ldr	r4, [pc, #44]	; (802069c <global_stdio_init.part.0+0x34>)
 802066e:	4a0c      	ldr	r2, [pc, #48]	; (80206a0 <global_stdio_init.part.0+0x38>)
 8020670:	601a      	str	r2, [r3, #0]
 8020672:	4620      	mov	r0, r4
 8020674:	2200      	movs	r2, #0
 8020676:	2104      	movs	r1, #4
 8020678:	f7ff ff94 	bl	80205a4 <std>
 802067c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020680:	2201      	movs	r2, #1
 8020682:	2109      	movs	r1, #9
 8020684:	f7ff ff8e 	bl	80205a4 <std>
 8020688:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802068c:	2202      	movs	r2, #2
 802068e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020692:	2112      	movs	r1, #18
 8020694:	f7ff bf86 	b.w	80205a4 <std>
 8020698:	20017124 	.word	0x20017124
 802069c:	20016fec 	.word	0x20016fec
 80206a0:	08020611 	.word	0x08020611

080206a4 <__sfp_lock_acquire>:
 80206a4:	4801      	ldr	r0, [pc, #4]	; (80206ac <__sfp_lock_acquire+0x8>)
 80206a6:	f000 bc08 	b.w	8020eba <__retarget_lock_acquire_recursive>
 80206aa:	bf00      	nop
 80206ac:	2001712e 	.word	0x2001712e

080206b0 <__sfp_lock_release>:
 80206b0:	4801      	ldr	r0, [pc, #4]	; (80206b8 <__sfp_lock_release+0x8>)
 80206b2:	f000 bc03 	b.w	8020ebc <__retarget_lock_release_recursive>
 80206b6:	bf00      	nop
 80206b8:	2001712e 	.word	0x2001712e

080206bc <__sinit>:
 80206bc:	b510      	push	{r4, lr}
 80206be:	4604      	mov	r4, r0
 80206c0:	f7ff fff0 	bl	80206a4 <__sfp_lock_acquire>
 80206c4:	6a23      	ldr	r3, [r4, #32]
 80206c6:	b11b      	cbz	r3, 80206d0 <__sinit+0x14>
 80206c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206cc:	f7ff bff0 	b.w	80206b0 <__sfp_lock_release>
 80206d0:	4b04      	ldr	r3, [pc, #16]	; (80206e4 <__sinit+0x28>)
 80206d2:	6223      	str	r3, [r4, #32]
 80206d4:	4b04      	ldr	r3, [pc, #16]	; (80206e8 <__sinit+0x2c>)
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	2b00      	cmp	r3, #0
 80206da:	d1f5      	bne.n	80206c8 <__sinit+0xc>
 80206dc:	f7ff ffc4 	bl	8020668 <global_stdio_init.part.0>
 80206e0:	e7f2      	b.n	80206c8 <__sinit+0xc>
 80206e2:	bf00      	nop
 80206e4:	08020629 	.word	0x08020629
 80206e8:	20017124 	.word	0x20017124

080206ec <_fwalk_sglue>:
 80206ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206f0:	4607      	mov	r7, r0
 80206f2:	4688      	mov	r8, r1
 80206f4:	4614      	mov	r4, r2
 80206f6:	2600      	movs	r6, #0
 80206f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80206fc:	f1b9 0901 	subs.w	r9, r9, #1
 8020700:	d505      	bpl.n	802070e <_fwalk_sglue+0x22>
 8020702:	6824      	ldr	r4, [r4, #0]
 8020704:	2c00      	cmp	r4, #0
 8020706:	d1f7      	bne.n	80206f8 <_fwalk_sglue+0xc>
 8020708:	4630      	mov	r0, r6
 802070a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802070e:	89ab      	ldrh	r3, [r5, #12]
 8020710:	2b01      	cmp	r3, #1
 8020712:	d907      	bls.n	8020724 <_fwalk_sglue+0x38>
 8020714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020718:	3301      	adds	r3, #1
 802071a:	d003      	beq.n	8020724 <_fwalk_sglue+0x38>
 802071c:	4629      	mov	r1, r5
 802071e:	4638      	mov	r0, r7
 8020720:	47c0      	blx	r8
 8020722:	4306      	orrs	r6, r0
 8020724:	3568      	adds	r5, #104	; 0x68
 8020726:	e7e9      	b.n	80206fc <_fwalk_sglue+0x10>

08020728 <_fwrite_r>:
 8020728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802072c:	9c08      	ldr	r4, [sp, #32]
 802072e:	468a      	mov	sl, r1
 8020730:	4690      	mov	r8, r2
 8020732:	fb02 f903 	mul.w	r9, r2, r3
 8020736:	4606      	mov	r6, r0
 8020738:	b118      	cbz	r0, 8020742 <_fwrite_r+0x1a>
 802073a:	6a03      	ldr	r3, [r0, #32]
 802073c:	b90b      	cbnz	r3, 8020742 <_fwrite_r+0x1a>
 802073e:	f7ff ffbd 	bl	80206bc <__sinit>
 8020742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020744:	07dd      	lsls	r5, r3, #31
 8020746:	d405      	bmi.n	8020754 <_fwrite_r+0x2c>
 8020748:	89a3      	ldrh	r3, [r4, #12]
 802074a:	0598      	lsls	r0, r3, #22
 802074c:	d402      	bmi.n	8020754 <_fwrite_r+0x2c>
 802074e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020750:	f000 fbb3 	bl	8020eba <__retarget_lock_acquire_recursive>
 8020754:	89a3      	ldrh	r3, [r4, #12]
 8020756:	0719      	lsls	r1, r3, #28
 8020758:	d516      	bpl.n	8020788 <_fwrite_r+0x60>
 802075a:	6923      	ldr	r3, [r4, #16]
 802075c:	b1a3      	cbz	r3, 8020788 <_fwrite_r+0x60>
 802075e:	2500      	movs	r5, #0
 8020760:	454d      	cmp	r5, r9
 8020762:	d01f      	beq.n	80207a4 <_fwrite_r+0x7c>
 8020764:	68a7      	ldr	r7, [r4, #8]
 8020766:	f81a 1005 	ldrb.w	r1, [sl, r5]
 802076a:	3f01      	subs	r7, #1
 802076c:	2f00      	cmp	r7, #0
 802076e:	60a7      	str	r7, [r4, #8]
 8020770:	da04      	bge.n	802077c <_fwrite_r+0x54>
 8020772:	69a3      	ldr	r3, [r4, #24]
 8020774:	429f      	cmp	r7, r3
 8020776:	db0f      	blt.n	8020798 <_fwrite_r+0x70>
 8020778:	290a      	cmp	r1, #10
 802077a:	d00d      	beq.n	8020798 <_fwrite_r+0x70>
 802077c:	6823      	ldr	r3, [r4, #0]
 802077e:	1c5a      	adds	r2, r3, #1
 8020780:	6022      	str	r2, [r4, #0]
 8020782:	7019      	strb	r1, [r3, #0]
 8020784:	3501      	adds	r5, #1
 8020786:	e7eb      	b.n	8020760 <_fwrite_r+0x38>
 8020788:	4621      	mov	r1, r4
 802078a:	4630      	mov	r0, r6
 802078c:	f000 fa50 	bl	8020c30 <__swsetup_r>
 8020790:	2800      	cmp	r0, #0
 8020792:	d0e4      	beq.n	802075e <_fwrite_r+0x36>
 8020794:	2500      	movs	r5, #0
 8020796:	e005      	b.n	80207a4 <_fwrite_r+0x7c>
 8020798:	4622      	mov	r2, r4
 802079a:	4630      	mov	r0, r6
 802079c:	f000 fa0a 	bl	8020bb4 <__swbuf_r>
 80207a0:	3001      	adds	r0, #1
 80207a2:	d1ef      	bne.n	8020784 <_fwrite_r+0x5c>
 80207a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207a6:	07da      	lsls	r2, r3, #31
 80207a8:	d405      	bmi.n	80207b6 <_fwrite_r+0x8e>
 80207aa:	89a3      	ldrh	r3, [r4, #12]
 80207ac:	059b      	lsls	r3, r3, #22
 80207ae:	d402      	bmi.n	80207b6 <_fwrite_r+0x8e>
 80207b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207b2:	f000 fb83 	bl	8020ebc <__retarget_lock_release_recursive>
 80207b6:	fbb5 f0f8 	udiv	r0, r5, r8
 80207ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080207c0 <fwrite>:
 80207c0:	b507      	push	{r0, r1, r2, lr}
 80207c2:	9300      	str	r3, [sp, #0]
 80207c4:	4613      	mov	r3, r2
 80207c6:	460a      	mov	r2, r1
 80207c8:	4601      	mov	r1, r0
 80207ca:	4803      	ldr	r0, [pc, #12]	; (80207d8 <fwrite+0x18>)
 80207cc:	6800      	ldr	r0, [r0, #0]
 80207ce:	f7ff ffab 	bl	8020728 <_fwrite_r>
 80207d2:	b003      	add	sp, #12
 80207d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80207d8:	2000099c 	.word	0x2000099c

080207dc <iprintf>:
 80207dc:	b40f      	push	{r0, r1, r2, r3}
 80207de:	b507      	push	{r0, r1, r2, lr}
 80207e0:	4906      	ldr	r1, [pc, #24]	; (80207fc <iprintf+0x20>)
 80207e2:	ab04      	add	r3, sp, #16
 80207e4:	6808      	ldr	r0, [r1, #0]
 80207e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80207ea:	6881      	ldr	r1, [r0, #8]
 80207ec:	9301      	str	r3, [sp, #4]
 80207ee:	f002 fe79 	bl	80234e4 <_vfiprintf_r>
 80207f2:	b003      	add	sp, #12
 80207f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80207f8:	b004      	add	sp, #16
 80207fa:	4770      	bx	lr
 80207fc:	2000099c 	.word	0x2000099c

08020800 <_puts_r>:
 8020800:	6a03      	ldr	r3, [r0, #32]
 8020802:	b570      	push	{r4, r5, r6, lr}
 8020804:	6884      	ldr	r4, [r0, #8]
 8020806:	4605      	mov	r5, r0
 8020808:	460e      	mov	r6, r1
 802080a:	b90b      	cbnz	r3, 8020810 <_puts_r+0x10>
 802080c:	f7ff ff56 	bl	80206bc <__sinit>
 8020810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020812:	07db      	lsls	r3, r3, #31
 8020814:	d405      	bmi.n	8020822 <_puts_r+0x22>
 8020816:	89a3      	ldrh	r3, [r4, #12]
 8020818:	0598      	lsls	r0, r3, #22
 802081a:	d402      	bmi.n	8020822 <_puts_r+0x22>
 802081c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802081e:	f000 fb4c 	bl	8020eba <__retarget_lock_acquire_recursive>
 8020822:	89a3      	ldrh	r3, [r4, #12]
 8020824:	0719      	lsls	r1, r3, #28
 8020826:	d513      	bpl.n	8020850 <_puts_r+0x50>
 8020828:	6923      	ldr	r3, [r4, #16]
 802082a:	b18b      	cbz	r3, 8020850 <_puts_r+0x50>
 802082c:	3e01      	subs	r6, #1
 802082e:	68a3      	ldr	r3, [r4, #8]
 8020830:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020834:	3b01      	subs	r3, #1
 8020836:	60a3      	str	r3, [r4, #8]
 8020838:	b9e9      	cbnz	r1, 8020876 <_puts_r+0x76>
 802083a:	2b00      	cmp	r3, #0
 802083c:	da2e      	bge.n	802089c <_puts_r+0x9c>
 802083e:	4622      	mov	r2, r4
 8020840:	210a      	movs	r1, #10
 8020842:	4628      	mov	r0, r5
 8020844:	f000 f9b6 	bl	8020bb4 <__swbuf_r>
 8020848:	3001      	adds	r0, #1
 802084a:	d007      	beq.n	802085c <_puts_r+0x5c>
 802084c:	250a      	movs	r5, #10
 802084e:	e007      	b.n	8020860 <_puts_r+0x60>
 8020850:	4621      	mov	r1, r4
 8020852:	4628      	mov	r0, r5
 8020854:	f000 f9ec 	bl	8020c30 <__swsetup_r>
 8020858:	2800      	cmp	r0, #0
 802085a:	d0e7      	beq.n	802082c <_puts_r+0x2c>
 802085c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020862:	07da      	lsls	r2, r3, #31
 8020864:	d405      	bmi.n	8020872 <_puts_r+0x72>
 8020866:	89a3      	ldrh	r3, [r4, #12]
 8020868:	059b      	lsls	r3, r3, #22
 802086a:	d402      	bmi.n	8020872 <_puts_r+0x72>
 802086c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802086e:	f000 fb25 	bl	8020ebc <__retarget_lock_release_recursive>
 8020872:	4628      	mov	r0, r5
 8020874:	bd70      	pop	{r4, r5, r6, pc}
 8020876:	2b00      	cmp	r3, #0
 8020878:	da04      	bge.n	8020884 <_puts_r+0x84>
 802087a:	69a2      	ldr	r2, [r4, #24]
 802087c:	429a      	cmp	r2, r3
 802087e:	dc06      	bgt.n	802088e <_puts_r+0x8e>
 8020880:	290a      	cmp	r1, #10
 8020882:	d004      	beq.n	802088e <_puts_r+0x8e>
 8020884:	6823      	ldr	r3, [r4, #0]
 8020886:	1c5a      	adds	r2, r3, #1
 8020888:	6022      	str	r2, [r4, #0]
 802088a:	7019      	strb	r1, [r3, #0]
 802088c:	e7cf      	b.n	802082e <_puts_r+0x2e>
 802088e:	4622      	mov	r2, r4
 8020890:	4628      	mov	r0, r5
 8020892:	f000 f98f 	bl	8020bb4 <__swbuf_r>
 8020896:	3001      	adds	r0, #1
 8020898:	d1c9      	bne.n	802082e <_puts_r+0x2e>
 802089a:	e7df      	b.n	802085c <_puts_r+0x5c>
 802089c:	6823      	ldr	r3, [r4, #0]
 802089e:	250a      	movs	r5, #10
 80208a0:	1c5a      	adds	r2, r3, #1
 80208a2:	6022      	str	r2, [r4, #0]
 80208a4:	701d      	strb	r5, [r3, #0]
 80208a6:	e7db      	b.n	8020860 <_puts_r+0x60>

080208a8 <puts>:
 80208a8:	4b02      	ldr	r3, [pc, #8]	; (80208b4 <puts+0xc>)
 80208aa:	4601      	mov	r1, r0
 80208ac:	6818      	ldr	r0, [r3, #0]
 80208ae:	f7ff bfa7 	b.w	8020800 <_puts_r>
 80208b2:	bf00      	nop
 80208b4:	2000099c 	.word	0x2000099c

080208b8 <setvbuf>:
 80208b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80208bc:	461d      	mov	r5, r3
 80208be:	4b54      	ldr	r3, [pc, #336]	; (8020a10 <setvbuf+0x158>)
 80208c0:	681f      	ldr	r7, [r3, #0]
 80208c2:	4604      	mov	r4, r0
 80208c4:	460e      	mov	r6, r1
 80208c6:	4690      	mov	r8, r2
 80208c8:	b127      	cbz	r7, 80208d4 <setvbuf+0x1c>
 80208ca:	6a3b      	ldr	r3, [r7, #32]
 80208cc:	b913      	cbnz	r3, 80208d4 <setvbuf+0x1c>
 80208ce:	4638      	mov	r0, r7
 80208d0:	f7ff fef4 	bl	80206bc <__sinit>
 80208d4:	f1b8 0f02 	cmp.w	r8, #2
 80208d8:	d006      	beq.n	80208e8 <setvbuf+0x30>
 80208da:	f1b8 0f01 	cmp.w	r8, #1
 80208de:	f200 8094 	bhi.w	8020a0a <setvbuf+0x152>
 80208e2:	2d00      	cmp	r5, #0
 80208e4:	f2c0 8091 	blt.w	8020a0a <setvbuf+0x152>
 80208e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80208ea:	07da      	lsls	r2, r3, #31
 80208ec:	d405      	bmi.n	80208fa <setvbuf+0x42>
 80208ee:	89a3      	ldrh	r3, [r4, #12]
 80208f0:	059b      	lsls	r3, r3, #22
 80208f2:	d402      	bmi.n	80208fa <setvbuf+0x42>
 80208f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208f6:	f000 fae0 	bl	8020eba <__retarget_lock_acquire_recursive>
 80208fa:	4621      	mov	r1, r4
 80208fc:	4638      	mov	r0, r7
 80208fe:	f002 ff91 	bl	8023824 <_fflush_r>
 8020902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020904:	b141      	cbz	r1, 8020918 <setvbuf+0x60>
 8020906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802090a:	4299      	cmp	r1, r3
 802090c:	d002      	beq.n	8020914 <setvbuf+0x5c>
 802090e:	4638      	mov	r0, r7
 8020910:	f001 f912 	bl	8021b38 <_free_r>
 8020914:	2300      	movs	r3, #0
 8020916:	6363      	str	r3, [r4, #52]	; 0x34
 8020918:	2300      	movs	r3, #0
 802091a:	61a3      	str	r3, [r4, #24]
 802091c:	6063      	str	r3, [r4, #4]
 802091e:	89a3      	ldrh	r3, [r4, #12]
 8020920:	0618      	lsls	r0, r3, #24
 8020922:	d503      	bpl.n	802092c <setvbuf+0x74>
 8020924:	6921      	ldr	r1, [r4, #16]
 8020926:	4638      	mov	r0, r7
 8020928:	f001 f906 	bl	8021b38 <_free_r>
 802092c:	89a3      	ldrh	r3, [r4, #12]
 802092e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8020932:	f023 0303 	bic.w	r3, r3, #3
 8020936:	f1b8 0f02 	cmp.w	r8, #2
 802093a:	81a3      	strh	r3, [r4, #12]
 802093c:	d05f      	beq.n	80209fe <setvbuf+0x146>
 802093e:	ab01      	add	r3, sp, #4
 8020940:	466a      	mov	r2, sp
 8020942:	4621      	mov	r1, r4
 8020944:	4638      	mov	r0, r7
 8020946:	f002 ffa7 	bl	8023898 <__swhatbuf_r>
 802094a:	89a3      	ldrh	r3, [r4, #12]
 802094c:	4318      	orrs	r0, r3
 802094e:	81a0      	strh	r0, [r4, #12]
 8020950:	bb2d      	cbnz	r5, 802099e <setvbuf+0xe6>
 8020952:	9d00      	ldr	r5, [sp, #0]
 8020954:	4628      	mov	r0, r5
 8020956:	f7fe fe09 	bl	801f56c <malloc>
 802095a:	4606      	mov	r6, r0
 802095c:	2800      	cmp	r0, #0
 802095e:	d150      	bne.n	8020a02 <setvbuf+0x14a>
 8020960:	f8dd 9000 	ldr.w	r9, [sp]
 8020964:	45a9      	cmp	r9, r5
 8020966:	d13e      	bne.n	80209e6 <setvbuf+0x12e>
 8020968:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802096c:	2200      	movs	r2, #0
 802096e:	60a2      	str	r2, [r4, #8]
 8020970:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020974:	6022      	str	r2, [r4, #0]
 8020976:	6122      	str	r2, [r4, #16]
 8020978:	2201      	movs	r2, #1
 802097a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802097e:	6162      	str	r2, [r4, #20]
 8020980:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020982:	f043 0302 	orr.w	r3, r3, #2
 8020986:	07d1      	lsls	r1, r2, #31
 8020988:	81a3      	strh	r3, [r4, #12]
 802098a:	d404      	bmi.n	8020996 <setvbuf+0xde>
 802098c:	059b      	lsls	r3, r3, #22
 802098e:	d402      	bmi.n	8020996 <setvbuf+0xde>
 8020990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020992:	f000 fa93 	bl	8020ebc <__retarget_lock_release_recursive>
 8020996:	4628      	mov	r0, r5
 8020998:	b003      	add	sp, #12
 802099a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802099e:	2e00      	cmp	r6, #0
 80209a0:	d0d8      	beq.n	8020954 <setvbuf+0x9c>
 80209a2:	6a3b      	ldr	r3, [r7, #32]
 80209a4:	b913      	cbnz	r3, 80209ac <setvbuf+0xf4>
 80209a6:	4638      	mov	r0, r7
 80209a8:	f7ff fe88 	bl	80206bc <__sinit>
 80209ac:	f1b8 0f01 	cmp.w	r8, #1
 80209b0:	bf08      	it	eq
 80209b2:	89a3      	ldrheq	r3, [r4, #12]
 80209b4:	6026      	str	r6, [r4, #0]
 80209b6:	bf04      	itt	eq
 80209b8:	f043 0301 	orreq.w	r3, r3, #1
 80209bc:	81a3      	strheq	r3, [r4, #12]
 80209be:	89a3      	ldrh	r3, [r4, #12]
 80209c0:	f013 0208 	ands.w	r2, r3, #8
 80209c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80209c8:	d01d      	beq.n	8020a06 <setvbuf+0x14e>
 80209ca:	07da      	lsls	r2, r3, #31
 80209cc:	bf41      	itttt	mi
 80209ce:	2200      	movmi	r2, #0
 80209d0:	426d      	negmi	r5, r5
 80209d2:	60a2      	strmi	r2, [r4, #8]
 80209d4:	61a5      	strmi	r5, [r4, #24]
 80209d6:	bf58      	it	pl
 80209d8:	60a5      	strpl	r5, [r4, #8]
 80209da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80209dc:	f015 0501 	ands.w	r5, r5, #1
 80209e0:	d0d4      	beq.n	802098c <setvbuf+0xd4>
 80209e2:	2500      	movs	r5, #0
 80209e4:	e7d7      	b.n	8020996 <setvbuf+0xde>
 80209e6:	4648      	mov	r0, r9
 80209e8:	f7fe fdc0 	bl	801f56c <malloc>
 80209ec:	4606      	mov	r6, r0
 80209ee:	2800      	cmp	r0, #0
 80209f0:	d0ba      	beq.n	8020968 <setvbuf+0xb0>
 80209f2:	89a3      	ldrh	r3, [r4, #12]
 80209f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80209f8:	81a3      	strh	r3, [r4, #12]
 80209fa:	464d      	mov	r5, r9
 80209fc:	e7d1      	b.n	80209a2 <setvbuf+0xea>
 80209fe:	2500      	movs	r5, #0
 8020a00:	e7b4      	b.n	802096c <setvbuf+0xb4>
 8020a02:	46a9      	mov	r9, r5
 8020a04:	e7f5      	b.n	80209f2 <setvbuf+0x13a>
 8020a06:	60a2      	str	r2, [r4, #8]
 8020a08:	e7e7      	b.n	80209da <setvbuf+0x122>
 8020a0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020a0e:	e7c2      	b.n	8020996 <setvbuf+0xde>
 8020a10:	2000099c 	.word	0x2000099c

08020a14 <sniprintf>:
 8020a14:	b40c      	push	{r2, r3}
 8020a16:	b530      	push	{r4, r5, lr}
 8020a18:	4b17      	ldr	r3, [pc, #92]	; (8020a78 <sniprintf+0x64>)
 8020a1a:	1e0c      	subs	r4, r1, #0
 8020a1c:	681d      	ldr	r5, [r3, #0]
 8020a1e:	b09d      	sub	sp, #116	; 0x74
 8020a20:	da08      	bge.n	8020a34 <sniprintf+0x20>
 8020a22:	238b      	movs	r3, #139	; 0x8b
 8020a24:	602b      	str	r3, [r5, #0]
 8020a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a2a:	b01d      	add	sp, #116	; 0x74
 8020a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020a30:	b002      	add	sp, #8
 8020a32:	4770      	bx	lr
 8020a34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020a38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020a3c:	bf14      	ite	ne
 8020a3e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020a42:	4623      	moveq	r3, r4
 8020a44:	9304      	str	r3, [sp, #16]
 8020a46:	9307      	str	r3, [sp, #28]
 8020a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020a4c:	9002      	str	r0, [sp, #8]
 8020a4e:	9006      	str	r0, [sp, #24]
 8020a50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020a54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020a56:	ab21      	add	r3, sp, #132	; 0x84
 8020a58:	a902      	add	r1, sp, #8
 8020a5a:	4628      	mov	r0, r5
 8020a5c:	9301      	str	r3, [sp, #4]
 8020a5e:	f002 fc19 	bl	8023294 <_svfiprintf_r>
 8020a62:	1c43      	adds	r3, r0, #1
 8020a64:	bfbc      	itt	lt
 8020a66:	238b      	movlt	r3, #139	; 0x8b
 8020a68:	602b      	strlt	r3, [r5, #0]
 8020a6a:	2c00      	cmp	r4, #0
 8020a6c:	d0dd      	beq.n	8020a2a <sniprintf+0x16>
 8020a6e:	9b02      	ldr	r3, [sp, #8]
 8020a70:	2200      	movs	r2, #0
 8020a72:	701a      	strb	r2, [r3, #0]
 8020a74:	e7d9      	b.n	8020a2a <sniprintf+0x16>
 8020a76:	bf00      	nop
 8020a78:	2000099c 	.word	0x2000099c

08020a7c <siprintf>:
 8020a7c:	b40e      	push	{r1, r2, r3}
 8020a7e:	b500      	push	{lr}
 8020a80:	b09c      	sub	sp, #112	; 0x70
 8020a82:	ab1d      	add	r3, sp, #116	; 0x74
 8020a84:	9002      	str	r0, [sp, #8]
 8020a86:	9006      	str	r0, [sp, #24]
 8020a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020a8c:	4809      	ldr	r0, [pc, #36]	; (8020ab4 <siprintf+0x38>)
 8020a8e:	9107      	str	r1, [sp, #28]
 8020a90:	9104      	str	r1, [sp, #16]
 8020a92:	4909      	ldr	r1, [pc, #36]	; (8020ab8 <siprintf+0x3c>)
 8020a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a98:	9105      	str	r1, [sp, #20]
 8020a9a:	6800      	ldr	r0, [r0, #0]
 8020a9c:	9301      	str	r3, [sp, #4]
 8020a9e:	a902      	add	r1, sp, #8
 8020aa0:	f002 fbf8 	bl	8023294 <_svfiprintf_r>
 8020aa4:	9b02      	ldr	r3, [sp, #8]
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	701a      	strb	r2, [r3, #0]
 8020aaa:	b01c      	add	sp, #112	; 0x70
 8020aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ab0:	b003      	add	sp, #12
 8020ab2:	4770      	bx	lr
 8020ab4:	2000099c 	.word	0x2000099c
 8020ab8:	ffff0208 	.word	0xffff0208

08020abc <__sread>:
 8020abc:	b510      	push	{r4, lr}
 8020abe:	460c      	mov	r4, r1
 8020ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ac4:	f000 f99a 	bl	8020dfc <_read_r>
 8020ac8:	2800      	cmp	r0, #0
 8020aca:	bfab      	itete	ge
 8020acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020ace:	89a3      	ldrhlt	r3, [r4, #12]
 8020ad0:	181b      	addge	r3, r3, r0
 8020ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020ad6:	bfac      	ite	ge
 8020ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8020ada:	81a3      	strhlt	r3, [r4, #12]
 8020adc:	bd10      	pop	{r4, pc}

08020ade <__swrite>:
 8020ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ae2:	461f      	mov	r7, r3
 8020ae4:	898b      	ldrh	r3, [r1, #12]
 8020ae6:	05db      	lsls	r3, r3, #23
 8020ae8:	4605      	mov	r5, r0
 8020aea:	460c      	mov	r4, r1
 8020aec:	4616      	mov	r6, r2
 8020aee:	d505      	bpl.n	8020afc <__swrite+0x1e>
 8020af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020af4:	2302      	movs	r3, #2
 8020af6:	2200      	movs	r2, #0
 8020af8:	f000 f96e 	bl	8020dd8 <_lseek_r>
 8020afc:	89a3      	ldrh	r3, [r4, #12]
 8020afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020b06:	81a3      	strh	r3, [r4, #12]
 8020b08:	4632      	mov	r2, r6
 8020b0a:	463b      	mov	r3, r7
 8020b0c:	4628      	mov	r0, r5
 8020b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020b12:	f000 b995 	b.w	8020e40 <_write_r>

08020b16 <__sseek>:
 8020b16:	b510      	push	{r4, lr}
 8020b18:	460c      	mov	r4, r1
 8020b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b1e:	f000 f95b 	bl	8020dd8 <_lseek_r>
 8020b22:	1c43      	adds	r3, r0, #1
 8020b24:	89a3      	ldrh	r3, [r4, #12]
 8020b26:	bf15      	itete	ne
 8020b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8020b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020b32:	81a3      	strheq	r3, [r4, #12]
 8020b34:	bf18      	it	ne
 8020b36:	81a3      	strhne	r3, [r4, #12]
 8020b38:	bd10      	pop	{r4, pc}

08020b3a <__sclose>:
 8020b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b3e:	f000 b93b 	b.w	8020db8 <_close_r>

08020b42 <_vsniprintf_r>:
 8020b42:	b530      	push	{r4, r5, lr}
 8020b44:	4614      	mov	r4, r2
 8020b46:	2c00      	cmp	r4, #0
 8020b48:	b09b      	sub	sp, #108	; 0x6c
 8020b4a:	4605      	mov	r5, r0
 8020b4c:	461a      	mov	r2, r3
 8020b4e:	da05      	bge.n	8020b5c <_vsniprintf_r+0x1a>
 8020b50:	238b      	movs	r3, #139	; 0x8b
 8020b52:	6003      	str	r3, [r0, #0]
 8020b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b58:	b01b      	add	sp, #108	; 0x6c
 8020b5a:	bd30      	pop	{r4, r5, pc}
 8020b5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020b60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020b64:	bf14      	ite	ne
 8020b66:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020b6a:	4623      	moveq	r3, r4
 8020b6c:	9302      	str	r3, [sp, #8]
 8020b6e:	9305      	str	r3, [sp, #20]
 8020b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020b74:	9100      	str	r1, [sp, #0]
 8020b76:	9104      	str	r1, [sp, #16]
 8020b78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020b7c:	4669      	mov	r1, sp
 8020b7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020b80:	f002 fb88 	bl	8023294 <_svfiprintf_r>
 8020b84:	1c43      	adds	r3, r0, #1
 8020b86:	bfbc      	itt	lt
 8020b88:	238b      	movlt	r3, #139	; 0x8b
 8020b8a:	602b      	strlt	r3, [r5, #0]
 8020b8c:	2c00      	cmp	r4, #0
 8020b8e:	d0e3      	beq.n	8020b58 <_vsniprintf_r+0x16>
 8020b90:	9b00      	ldr	r3, [sp, #0]
 8020b92:	2200      	movs	r2, #0
 8020b94:	701a      	strb	r2, [r3, #0]
 8020b96:	e7df      	b.n	8020b58 <_vsniprintf_r+0x16>

08020b98 <vsniprintf>:
 8020b98:	b507      	push	{r0, r1, r2, lr}
 8020b9a:	9300      	str	r3, [sp, #0]
 8020b9c:	4613      	mov	r3, r2
 8020b9e:	460a      	mov	r2, r1
 8020ba0:	4601      	mov	r1, r0
 8020ba2:	4803      	ldr	r0, [pc, #12]	; (8020bb0 <vsniprintf+0x18>)
 8020ba4:	6800      	ldr	r0, [r0, #0]
 8020ba6:	f7ff ffcc 	bl	8020b42 <_vsniprintf_r>
 8020baa:	b003      	add	sp, #12
 8020bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8020bb0:	2000099c 	.word	0x2000099c

08020bb4 <__swbuf_r>:
 8020bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bb6:	460e      	mov	r6, r1
 8020bb8:	4614      	mov	r4, r2
 8020bba:	4605      	mov	r5, r0
 8020bbc:	b118      	cbz	r0, 8020bc6 <__swbuf_r+0x12>
 8020bbe:	6a03      	ldr	r3, [r0, #32]
 8020bc0:	b90b      	cbnz	r3, 8020bc6 <__swbuf_r+0x12>
 8020bc2:	f7ff fd7b 	bl	80206bc <__sinit>
 8020bc6:	69a3      	ldr	r3, [r4, #24]
 8020bc8:	60a3      	str	r3, [r4, #8]
 8020bca:	89a3      	ldrh	r3, [r4, #12]
 8020bcc:	071a      	lsls	r2, r3, #28
 8020bce:	d525      	bpl.n	8020c1c <__swbuf_r+0x68>
 8020bd0:	6923      	ldr	r3, [r4, #16]
 8020bd2:	b31b      	cbz	r3, 8020c1c <__swbuf_r+0x68>
 8020bd4:	6823      	ldr	r3, [r4, #0]
 8020bd6:	6922      	ldr	r2, [r4, #16]
 8020bd8:	1a98      	subs	r0, r3, r2
 8020bda:	6963      	ldr	r3, [r4, #20]
 8020bdc:	b2f6      	uxtb	r6, r6
 8020bde:	4283      	cmp	r3, r0
 8020be0:	4637      	mov	r7, r6
 8020be2:	dc04      	bgt.n	8020bee <__swbuf_r+0x3a>
 8020be4:	4621      	mov	r1, r4
 8020be6:	4628      	mov	r0, r5
 8020be8:	f002 fe1c 	bl	8023824 <_fflush_r>
 8020bec:	b9e0      	cbnz	r0, 8020c28 <__swbuf_r+0x74>
 8020bee:	68a3      	ldr	r3, [r4, #8]
 8020bf0:	3b01      	subs	r3, #1
 8020bf2:	60a3      	str	r3, [r4, #8]
 8020bf4:	6823      	ldr	r3, [r4, #0]
 8020bf6:	1c5a      	adds	r2, r3, #1
 8020bf8:	6022      	str	r2, [r4, #0]
 8020bfa:	701e      	strb	r6, [r3, #0]
 8020bfc:	6962      	ldr	r2, [r4, #20]
 8020bfe:	1c43      	adds	r3, r0, #1
 8020c00:	429a      	cmp	r2, r3
 8020c02:	d004      	beq.n	8020c0e <__swbuf_r+0x5a>
 8020c04:	89a3      	ldrh	r3, [r4, #12]
 8020c06:	07db      	lsls	r3, r3, #31
 8020c08:	d506      	bpl.n	8020c18 <__swbuf_r+0x64>
 8020c0a:	2e0a      	cmp	r6, #10
 8020c0c:	d104      	bne.n	8020c18 <__swbuf_r+0x64>
 8020c0e:	4621      	mov	r1, r4
 8020c10:	4628      	mov	r0, r5
 8020c12:	f002 fe07 	bl	8023824 <_fflush_r>
 8020c16:	b938      	cbnz	r0, 8020c28 <__swbuf_r+0x74>
 8020c18:	4638      	mov	r0, r7
 8020c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c1c:	4621      	mov	r1, r4
 8020c1e:	4628      	mov	r0, r5
 8020c20:	f000 f806 	bl	8020c30 <__swsetup_r>
 8020c24:	2800      	cmp	r0, #0
 8020c26:	d0d5      	beq.n	8020bd4 <__swbuf_r+0x20>
 8020c28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020c2c:	e7f4      	b.n	8020c18 <__swbuf_r+0x64>
	...

08020c30 <__swsetup_r>:
 8020c30:	b538      	push	{r3, r4, r5, lr}
 8020c32:	4b2a      	ldr	r3, [pc, #168]	; (8020cdc <__swsetup_r+0xac>)
 8020c34:	4605      	mov	r5, r0
 8020c36:	6818      	ldr	r0, [r3, #0]
 8020c38:	460c      	mov	r4, r1
 8020c3a:	b118      	cbz	r0, 8020c44 <__swsetup_r+0x14>
 8020c3c:	6a03      	ldr	r3, [r0, #32]
 8020c3e:	b90b      	cbnz	r3, 8020c44 <__swsetup_r+0x14>
 8020c40:	f7ff fd3c 	bl	80206bc <__sinit>
 8020c44:	89a3      	ldrh	r3, [r4, #12]
 8020c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020c4a:	0718      	lsls	r0, r3, #28
 8020c4c:	d422      	bmi.n	8020c94 <__swsetup_r+0x64>
 8020c4e:	06d9      	lsls	r1, r3, #27
 8020c50:	d407      	bmi.n	8020c62 <__swsetup_r+0x32>
 8020c52:	2309      	movs	r3, #9
 8020c54:	602b      	str	r3, [r5, #0]
 8020c56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020c5a:	81a3      	strh	r3, [r4, #12]
 8020c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c60:	e034      	b.n	8020ccc <__swsetup_r+0x9c>
 8020c62:	0758      	lsls	r0, r3, #29
 8020c64:	d512      	bpl.n	8020c8c <__swsetup_r+0x5c>
 8020c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020c68:	b141      	cbz	r1, 8020c7c <__swsetup_r+0x4c>
 8020c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020c6e:	4299      	cmp	r1, r3
 8020c70:	d002      	beq.n	8020c78 <__swsetup_r+0x48>
 8020c72:	4628      	mov	r0, r5
 8020c74:	f000 ff60 	bl	8021b38 <_free_r>
 8020c78:	2300      	movs	r3, #0
 8020c7a:	6363      	str	r3, [r4, #52]	; 0x34
 8020c7c:	89a3      	ldrh	r3, [r4, #12]
 8020c7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020c82:	81a3      	strh	r3, [r4, #12]
 8020c84:	2300      	movs	r3, #0
 8020c86:	6063      	str	r3, [r4, #4]
 8020c88:	6923      	ldr	r3, [r4, #16]
 8020c8a:	6023      	str	r3, [r4, #0]
 8020c8c:	89a3      	ldrh	r3, [r4, #12]
 8020c8e:	f043 0308 	orr.w	r3, r3, #8
 8020c92:	81a3      	strh	r3, [r4, #12]
 8020c94:	6923      	ldr	r3, [r4, #16]
 8020c96:	b94b      	cbnz	r3, 8020cac <__swsetup_r+0x7c>
 8020c98:	89a3      	ldrh	r3, [r4, #12]
 8020c9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ca2:	d003      	beq.n	8020cac <__swsetup_r+0x7c>
 8020ca4:	4621      	mov	r1, r4
 8020ca6:	4628      	mov	r0, r5
 8020ca8:	f002 fe1c 	bl	80238e4 <__smakebuf_r>
 8020cac:	89a0      	ldrh	r0, [r4, #12]
 8020cae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020cb2:	f010 0301 	ands.w	r3, r0, #1
 8020cb6:	d00a      	beq.n	8020cce <__swsetup_r+0x9e>
 8020cb8:	2300      	movs	r3, #0
 8020cba:	60a3      	str	r3, [r4, #8]
 8020cbc:	6963      	ldr	r3, [r4, #20]
 8020cbe:	425b      	negs	r3, r3
 8020cc0:	61a3      	str	r3, [r4, #24]
 8020cc2:	6923      	ldr	r3, [r4, #16]
 8020cc4:	b943      	cbnz	r3, 8020cd8 <__swsetup_r+0xa8>
 8020cc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020cca:	d1c4      	bne.n	8020c56 <__swsetup_r+0x26>
 8020ccc:	bd38      	pop	{r3, r4, r5, pc}
 8020cce:	0781      	lsls	r1, r0, #30
 8020cd0:	bf58      	it	pl
 8020cd2:	6963      	ldrpl	r3, [r4, #20]
 8020cd4:	60a3      	str	r3, [r4, #8]
 8020cd6:	e7f4      	b.n	8020cc2 <__swsetup_r+0x92>
 8020cd8:	2000      	movs	r0, #0
 8020cda:	e7f7      	b.n	8020ccc <__swsetup_r+0x9c>
 8020cdc:	2000099c 	.word	0x2000099c

08020ce0 <memcmp>:
 8020ce0:	b510      	push	{r4, lr}
 8020ce2:	3901      	subs	r1, #1
 8020ce4:	4402      	add	r2, r0
 8020ce6:	4290      	cmp	r0, r2
 8020ce8:	d101      	bne.n	8020cee <memcmp+0xe>
 8020cea:	2000      	movs	r0, #0
 8020cec:	e005      	b.n	8020cfa <memcmp+0x1a>
 8020cee:	7803      	ldrb	r3, [r0, #0]
 8020cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020cf4:	42a3      	cmp	r3, r4
 8020cf6:	d001      	beq.n	8020cfc <memcmp+0x1c>
 8020cf8:	1b18      	subs	r0, r3, r4
 8020cfa:	bd10      	pop	{r4, pc}
 8020cfc:	3001      	adds	r0, #1
 8020cfe:	e7f2      	b.n	8020ce6 <memcmp+0x6>

08020d00 <memmove>:
 8020d00:	4288      	cmp	r0, r1
 8020d02:	b510      	push	{r4, lr}
 8020d04:	eb01 0402 	add.w	r4, r1, r2
 8020d08:	d902      	bls.n	8020d10 <memmove+0x10>
 8020d0a:	4284      	cmp	r4, r0
 8020d0c:	4623      	mov	r3, r4
 8020d0e:	d807      	bhi.n	8020d20 <memmove+0x20>
 8020d10:	1e43      	subs	r3, r0, #1
 8020d12:	42a1      	cmp	r1, r4
 8020d14:	d008      	beq.n	8020d28 <memmove+0x28>
 8020d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020d1e:	e7f8      	b.n	8020d12 <memmove+0x12>
 8020d20:	4402      	add	r2, r0
 8020d22:	4601      	mov	r1, r0
 8020d24:	428a      	cmp	r2, r1
 8020d26:	d100      	bne.n	8020d2a <memmove+0x2a>
 8020d28:	bd10      	pop	{r4, pc}
 8020d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d32:	e7f7      	b.n	8020d24 <memmove+0x24>

08020d34 <memset>:
 8020d34:	4402      	add	r2, r0
 8020d36:	4603      	mov	r3, r0
 8020d38:	4293      	cmp	r3, r2
 8020d3a:	d100      	bne.n	8020d3e <memset+0xa>
 8020d3c:	4770      	bx	lr
 8020d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8020d42:	e7f9      	b.n	8020d38 <memset+0x4>

08020d44 <strchr>:
 8020d44:	b2c9      	uxtb	r1, r1
 8020d46:	4603      	mov	r3, r0
 8020d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d4c:	b11a      	cbz	r2, 8020d56 <strchr+0x12>
 8020d4e:	428a      	cmp	r2, r1
 8020d50:	d1f9      	bne.n	8020d46 <strchr+0x2>
 8020d52:	4618      	mov	r0, r3
 8020d54:	4770      	bx	lr
 8020d56:	2900      	cmp	r1, #0
 8020d58:	bf18      	it	ne
 8020d5a:	2300      	movne	r3, #0
 8020d5c:	e7f9      	b.n	8020d52 <strchr+0xe>

08020d5e <strncmp>:
 8020d5e:	b510      	push	{r4, lr}
 8020d60:	b16a      	cbz	r2, 8020d7e <strncmp+0x20>
 8020d62:	3901      	subs	r1, #1
 8020d64:	1884      	adds	r4, r0, r2
 8020d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020d6e:	429a      	cmp	r2, r3
 8020d70:	d103      	bne.n	8020d7a <strncmp+0x1c>
 8020d72:	42a0      	cmp	r0, r4
 8020d74:	d001      	beq.n	8020d7a <strncmp+0x1c>
 8020d76:	2a00      	cmp	r2, #0
 8020d78:	d1f5      	bne.n	8020d66 <strncmp+0x8>
 8020d7a:	1ad0      	subs	r0, r2, r3
 8020d7c:	bd10      	pop	{r4, pc}
 8020d7e:	4610      	mov	r0, r2
 8020d80:	e7fc      	b.n	8020d7c <strncmp+0x1e>

08020d82 <strstr>:
 8020d82:	780a      	ldrb	r2, [r1, #0]
 8020d84:	b570      	push	{r4, r5, r6, lr}
 8020d86:	b96a      	cbnz	r2, 8020da4 <strstr+0x22>
 8020d88:	bd70      	pop	{r4, r5, r6, pc}
 8020d8a:	429a      	cmp	r2, r3
 8020d8c:	d109      	bne.n	8020da2 <strstr+0x20>
 8020d8e:	460c      	mov	r4, r1
 8020d90:	4605      	mov	r5, r0
 8020d92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d0f6      	beq.n	8020d88 <strstr+0x6>
 8020d9a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8020d9e:	429e      	cmp	r6, r3
 8020da0:	d0f7      	beq.n	8020d92 <strstr+0x10>
 8020da2:	3001      	adds	r0, #1
 8020da4:	7803      	ldrb	r3, [r0, #0]
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	d1ef      	bne.n	8020d8a <strstr+0x8>
 8020daa:	4618      	mov	r0, r3
 8020dac:	e7ec      	b.n	8020d88 <strstr+0x6>
	...

08020db0 <_localeconv_r>:
 8020db0:	4800      	ldr	r0, [pc, #0]	; (8020db4 <_localeconv_r+0x4>)
 8020db2:	4770      	bx	lr
 8020db4:	20000a90 	.word	0x20000a90

08020db8 <_close_r>:
 8020db8:	b538      	push	{r3, r4, r5, lr}
 8020dba:	4d06      	ldr	r5, [pc, #24]	; (8020dd4 <_close_r+0x1c>)
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	4604      	mov	r4, r0
 8020dc0:	4608      	mov	r0, r1
 8020dc2:	602b      	str	r3, [r5, #0]
 8020dc4:	f7e2 fe33 	bl	8003a2e <_close>
 8020dc8:	1c43      	adds	r3, r0, #1
 8020dca:	d102      	bne.n	8020dd2 <_close_r+0x1a>
 8020dcc:	682b      	ldr	r3, [r5, #0]
 8020dce:	b103      	cbz	r3, 8020dd2 <_close_r+0x1a>
 8020dd0:	6023      	str	r3, [r4, #0]
 8020dd2:	bd38      	pop	{r3, r4, r5, pc}
 8020dd4:	20017128 	.word	0x20017128

08020dd8 <_lseek_r>:
 8020dd8:	b538      	push	{r3, r4, r5, lr}
 8020dda:	4d07      	ldr	r5, [pc, #28]	; (8020df8 <_lseek_r+0x20>)
 8020ddc:	4604      	mov	r4, r0
 8020dde:	4608      	mov	r0, r1
 8020de0:	4611      	mov	r1, r2
 8020de2:	2200      	movs	r2, #0
 8020de4:	602a      	str	r2, [r5, #0]
 8020de6:	461a      	mov	r2, r3
 8020de8:	f7e2 fe48 	bl	8003a7c <_lseek>
 8020dec:	1c43      	adds	r3, r0, #1
 8020dee:	d102      	bne.n	8020df6 <_lseek_r+0x1e>
 8020df0:	682b      	ldr	r3, [r5, #0]
 8020df2:	b103      	cbz	r3, 8020df6 <_lseek_r+0x1e>
 8020df4:	6023      	str	r3, [r4, #0]
 8020df6:	bd38      	pop	{r3, r4, r5, pc}
 8020df8:	20017128 	.word	0x20017128

08020dfc <_read_r>:
 8020dfc:	b538      	push	{r3, r4, r5, lr}
 8020dfe:	4d07      	ldr	r5, [pc, #28]	; (8020e1c <_read_r+0x20>)
 8020e00:	4604      	mov	r4, r0
 8020e02:	4608      	mov	r0, r1
 8020e04:	4611      	mov	r1, r2
 8020e06:	2200      	movs	r2, #0
 8020e08:	602a      	str	r2, [r5, #0]
 8020e0a:	461a      	mov	r2, r3
 8020e0c:	f7e2 fdd6 	bl	80039bc <_read>
 8020e10:	1c43      	adds	r3, r0, #1
 8020e12:	d102      	bne.n	8020e1a <_read_r+0x1e>
 8020e14:	682b      	ldr	r3, [r5, #0]
 8020e16:	b103      	cbz	r3, 8020e1a <_read_r+0x1e>
 8020e18:	6023      	str	r3, [r4, #0]
 8020e1a:	bd38      	pop	{r3, r4, r5, pc}
 8020e1c:	20017128 	.word	0x20017128

08020e20 <_sbrk_r>:
 8020e20:	b538      	push	{r3, r4, r5, lr}
 8020e22:	4d06      	ldr	r5, [pc, #24]	; (8020e3c <_sbrk_r+0x1c>)
 8020e24:	2300      	movs	r3, #0
 8020e26:	4604      	mov	r4, r0
 8020e28:	4608      	mov	r0, r1
 8020e2a:	602b      	str	r3, [r5, #0]
 8020e2c:	f7e2 fe34 	bl	8003a98 <_sbrk>
 8020e30:	1c43      	adds	r3, r0, #1
 8020e32:	d102      	bne.n	8020e3a <_sbrk_r+0x1a>
 8020e34:	682b      	ldr	r3, [r5, #0]
 8020e36:	b103      	cbz	r3, 8020e3a <_sbrk_r+0x1a>
 8020e38:	6023      	str	r3, [r4, #0]
 8020e3a:	bd38      	pop	{r3, r4, r5, pc}
 8020e3c:	20017128 	.word	0x20017128

08020e40 <_write_r>:
 8020e40:	b538      	push	{r3, r4, r5, lr}
 8020e42:	4d07      	ldr	r5, [pc, #28]	; (8020e60 <_write_r+0x20>)
 8020e44:	4604      	mov	r4, r0
 8020e46:	4608      	mov	r0, r1
 8020e48:	4611      	mov	r1, r2
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	602a      	str	r2, [r5, #0]
 8020e4e:	461a      	mov	r2, r3
 8020e50:	f7e2 fdd1 	bl	80039f6 <_write>
 8020e54:	1c43      	adds	r3, r0, #1
 8020e56:	d102      	bne.n	8020e5e <_write_r+0x1e>
 8020e58:	682b      	ldr	r3, [r5, #0]
 8020e5a:	b103      	cbz	r3, 8020e5e <_write_r+0x1e>
 8020e5c:	6023      	str	r3, [r4, #0]
 8020e5e:	bd38      	pop	{r3, r4, r5, pc}
 8020e60:	20017128 	.word	0x20017128

08020e64 <__errno>:
 8020e64:	4b01      	ldr	r3, [pc, #4]	; (8020e6c <__errno+0x8>)
 8020e66:	6818      	ldr	r0, [r3, #0]
 8020e68:	4770      	bx	lr
 8020e6a:	bf00      	nop
 8020e6c:	2000099c 	.word	0x2000099c

08020e70 <__libc_init_array>:
 8020e70:	b570      	push	{r4, r5, r6, lr}
 8020e72:	4d0d      	ldr	r5, [pc, #52]	; (8020ea8 <__libc_init_array+0x38>)
 8020e74:	4c0d      	ldr	r4, [pc, #52]	; (8020eac <__libc_init_array+0x3c>)
 8020e76:	1b64      	subs	r4, r4, r5
 8020e78:	10a4      	asrs	r4, r4, #2
 8020e7a:	2600      	movs	r6, #0
 8020e7c:	42a6      	cmp	r6, r4
 8020e7e:	d109      	bne.n	8020e94 <__libc_init_array+0x24>
 8020e80:	4d0b      	ldr	r5, [pc, #44]	; (8020eb0 <__libc_init_array+0x40>)
 8020e82:	4c0c      	ldr	r4, [pc, #48]	; (8020eb4 <__libc_init_array+0x44>)
 8020e84:	f003 f954 	bl	8024130 <_init>
 8020e88:	1b64      	subs	r4, r4, r5
 8020e8a:	10a4      	asrs	r4, r4, #2
 8020e8c:	2600      	movs	r6, #0
 8020e8e:	42a6      	cmp	r6, r4
 8020e90:	d105      	bne.n	8020e9e <__libc_init_array+0x2e>
 8020e92:	bd70      	pop	{r4, r5, r6, pc}
 8020e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e98:	4798      	blx	r3
 8020e9a:	3601      	adds	r6, #1
 8020e9c:	e7ee      	b.n	8020e7c <__libc_init_array+0xc>
 8020e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020ea2:	4798      	blx	r3
 8020ea4:	3601      	adds	r6, #1
 8020ea6:	e7f2      	b.n	8020e8e <__libc_init_array+0x1e>
 8020ea8:	08025ec4 	.word	0x08025ec4
 8020eac:	08025ec4 	.word	0x08025ec4
 8020eb0:	08025ec4 	.word	0x08025ec4
 8020eb4:	08025edc 	.word	0x08025edc

08020eb8 <__retarget_lock_init_recursive>:
 8020eb8:	4770      	bx	lr

08020eba <__retarget_lock_acquire_recursive>:
 8020eba:	4770      	bx	lr

08020ebc <__retarget_lock_release_recursive>:
 8020ebc:	4770      	bx	lr

08020ebe <strcpy>:
 8020ebe:	4603      	mov	r3, r0
 8020ec0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020ec4:	f803 2b01 	strb.w	r2, [r3], #1
 8020ec8:	2a00      	cmp	r2, #0
 8020eca:	d1f9      	bne.n	8020ec0 <strcpy+0x2>
 8020ecc:	4770      	bx	lr

08020ece <memcpy>:
 8020ece:	440a      	add	r2, r1
 8020ed0:	4291      	cmp	r1, r2
 8020ed2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020ed6:	d100      	bne.n	8020eda <memcpy+0xc>
 8020ed8:	4770      	bx	lr
 8020eda:	b510      	push	{r4, lr}
 8020edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020ee4:	4291      	cmp	r1, r2
 8020ee6:	d1f9      	bne.n	8020edc <memcpy+0xe>
 8020ee8:	bd10      	pop	{r4, pc}
	...

08020eec <nanf>:
 8020eec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020ef4 <nanf+0x8>
 8020ef0:	4770      	bx	lr
 8020ef2:	bf00      	nop
 8020ef4:	7fc00000 	.word	0x7fc00000

08020ef8 <__assert_func>:
 8020ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020efa:	4614      	mov	r4, r2
 8020efc:	461a      	mov	r2, r3
 8020efe:	4b09      	ldr	r3, [pc, #36]	; (8020f24 <__assert_func+0x2c>)
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	4605      	mov	r5, r0
 8020f04:	68d8      	ldr	r0, [r3, #12]
 8020f06:	b14c      	cbz	r4, 8020f1c <__assert_func+0x24>
 8020f08:	4b07      	ldr	r3, [pc, #28]	; (8020f28 <__assert_func+0x30>)
 8020f0a:	9100      	str	r1, [sp, #0]
 8020f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020f10:	4906      	ldr	r1, [pc, #24]	; (8020f2c <__assert_func+0x34>)
 8020f12:	462b      	mov	r3, r5
 8020f14:	f002 fcae 	bl	8023874 <fiprintf>
 8020f18:	f002 fd4a 	bl	80239b0 <abort>
 8020f1c:	4b04      	ldr	r3, [pc, #16]	; (8020f30 <__assert_func+0x38>)
 8020f1e:	461c      	mov	r4, r3
 8020f20:	e7f3      	b.n	8020f0a <__assert_func+0x12>
 8020f22:	bf00      	nop
 8020f24:	2000099c 	.word	0x2000099c
 8020f28:	08025be5 	.word	0x08025be5
 8020f2c:	08025bf2 	.word	0x08025bf2
 8020f30:	08025c20 	.word	0x08025c20

08020f34 <quorem>:
 8020f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f38:	6903      	ldr	r3, [r0, #16]
 8020f3a:	690c      	ldr	r4, [r1, #16]
 8020f3c:	42a3      	cmp	r3, r4
 8020f3e:	4607      	mov	r7, r0
 8020f40:	db7e      	blt.n	8021040 <quorem+0x10c>
 8020f42:	3c01      	subs	r4, #1
 8020f44:	f101 0814 	add.w	r8, r1, #20
 8020f48:	f100 0514 	add.w	r5, r0, #20
 8020f4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020f50:	9301      	str	r3, [sp, #4]
 8020f52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020f5a:	3301      	adds	r3, #1
 8020f5c:	429a      	cmp	r2, r3
 8020f5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020f62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020f66:	fbb2 f6f3 	udiv	r6, r2, r3
 8020f6a:	d331      	bcc.n	8020fd0 <quorem+0x9c>
 8020f6c:	f04f 0e00 	mov.w	lr, #0
 8020f70:	4640      	mov	r0, r8
 8020f72:	46ac      	mov	ip, r5
 8020f74:	46f2      	mov	sl, lr
 8020f76:	f850 2b04 	ldr.w	r2, [r0], #4
 8020f7a:	b293      	uxth	r3, r2
 8020f7c:	fb06 e303 	mla	r3, r6, r3, lr
 8020f80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020f84:	0c1a      	lsrs	r2, r3, #16
 8020f86:	b29b      	uxth	r3, r3
 8020f88:	ebaa 0303 	sub.w	r3, sl, r3
 8020f8c:	f8dc a000 	ldr.w	sl, [ip]
 8020f90:	fa13 f38a 	uxtah	r3, r3, sl
 8020f94:	fb06 220e 	mla	r2, r6, lr, r2
 8020f98:	9300      	str	r3, [sp, #0]
 8020f9a:	9b00      	ldr	r3, [sp, #0]
 8020f9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020fa0:	b292      	uxth	r2, r2
 8020fa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020faa:	f8bd 3000 	ldrh.w	r3, [sp]
 8020fae:	4581      	cmp	r9, r0
 8020fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020fb4:	f84c 3b04 	str.w	r3, [ip], #4
 8020fb8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020fbc:	d2db      	bcs.n	8020f76 <quorem+0x42>
 8020fbe:	f855 300b 	ldr.w	r3, [r5, fp]
 8020fc2:	b92b      	cbnz	r3, 8020fd0 <quorem+0x9c>
 8020fc4:	9b01      	ldr	r3, [sp, #4]
 8020fc6:	3b04      	subs	r3, #4
 8020fc8:	429d      	cmp	r5, r3
 8020fca:	461a      	mov	r2, r3
 8020fcc:	d32c      	bcc.n	8021028 <quorem+0xf4>
 8020fce:	613c      	str	r4, [r7, #16]
 8020fd0:	4638      	mov	r0, r7
 8020fd2:	f001 f8c3 	bl	802215c <__mcmp>
 8020fd6:	2800      	cmp	r0, #0
 8020fd8:	db22      	blt.n	8021020 <quorem+0xec>
 8020fda:	3601      	adds	r6, #1
 8020fdc:	4629      	mov	r1, r5
 8020fde:	2000      	movs	r0, #0
 8020fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8020fe4:	f8d1 c000 	ldr.w	ip, [r1]
 8020fe8:	b293      	uxth	r3, r2
 8020fea:	1ac3      	subs	r3, r0, r3
 8020fec:	0c12      	lsrs	r2, r2, #16
 8020fee:	fa13 f38c 	uxtah	r3, r3, ip
 8020ff2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8020ff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020ffa:	b29b      	uxth	r3, r3
 8020ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021000:	45c1      	cmp	r9, r8
 8021002:	f841 3b04 	str.w	r3, [r1], #4
 8021006:	ea4f 4022 	mov.w	r0, r2, asr #16
 802100a:	d2e9      	bcs.n	8020fe0 <quorem+0xac>
 802100c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021014:	b922      	cbnz	r2, 8021020 <quorem+0xec>
 8021016:	3b04      	subs	r3, #4
 8021018:	429d      	cmp	r5, r3
 802101a:	461a      	mov	r2, r3
 802101c:	d30a      	bcc.n	8021034 <quorem+0x100>
 802101e:	613c      	str	r4, [r7, #16]
 8021020:	4630      	mov	r0, r6
 8021022:	b003      	add	sp, #12
 8021024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021028:	6812      	ldr	r2, [r2, #0]
 802102a:	3b04      	subs	r3, #4
 802102c:	2a00      	cmp	r2, #0
 802102e:	d1ce      	bne.n	8020fce <quorem+0x9a>
 8021030:	3c01      	subs	r4, #1
 8021032:	e7c9      	b.n	8020fc8 <quorem+0x94>
 8021034:	6812      	ldr	r2, [r2, #0]
 8021036:	3b04      	subs	r3, #4
 8021038:	2a00      	cmp	r2, #0
 802103a:	d1f0      	bne.n	802101e <quorem+0xea>
 802103c:	3c01      	subs	r4, #1
 802103e:	e7eb      	b.n	8021018 <quorem+0xe4>
 8021040:	2000      	movs	r0, #0
 8021042:	e7ee      	b.n	8021022 <quorem+0xee>
 8021044:	0000      	movs	r0, r0
	...

08021048 <_dtoa_r>:
 8021048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802104c:	ed2d 8b02 	vpush	{d8}
 8021050:	69c5      	ldr	r5, [r0, #28]
 8021052:	b091      	sub	sp, #68	; 0x44
 8021054:	ed8d 0b02 	vstr	d0, [sp, #8]
 8021058:	ec59 8b10 	vmov	r8, r9, d0
 802105c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802105e:	9106      	str	r1, [sp, #24]
 8021060:	4606      	mov	r6, r0
 8021062:	9208      	str	r2, [sp, #32]
 8021064:	930c      	str	r3, [sp, #48]	; 0x30
 8021066:	b975      	cbnz	r5, 8021086 <_dtoa_r+0x3e>
 8021068:	2010      	movs	r0, #16
 802106a:	f7fe fa7f 	bl	801f56c <malloc>
 802106e:	4602      	mov	r2, r0
 8021070:	61f0      	str	r0, [r6, #28]
 8021072:	b920      	cbnz	r0, 802107e <_dtoa_r+0x36>
 8021074:	4ba6      	ldr	r3, [pc, #664]	; (8021310 <_dtoa_r+0x2c8>)
 8021076:	21ef      	movs	r1, #239	; 0xef
 8021078:	48a6      	ldr	r0, [pc, #664]	; (8021314 <_dtoa_r+0x2cc>)
 802107a:	f7ff ff3d 	bl	8020ef8 <__assert_func>
 802107e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021082:	6005      	str	r5, [r0, #0]
 8021084:	60c5      	str	r5, [r0, #12]
 8021086:	69f3      	ldr	r3, [r6, #28]
 8021088:	6819      	ldr	r1, [r3, #0]
 802108a:	b151      	cbz	r1, 80210a2 <_dtoa_r+0x5a>
 802108c:	685a      	ldr	r2, [r3, #4]
 802108e:	604a      	str	r2, [r1, #4]
 8021090:	2301      	movs	r3, #1
 8021092:	4093      	lsls	r3, r2
 8021094:	608b      	str	r3, [r1, #8]
 8021096:	4630      	mov	r0, r6
 8021098:	f000 fdda 	bl	8021c50 <_Bfree>
 802109c:	69f3      	ldr	r3, [r6, #28]
 802109e:	2200      	movs	r2, #0
 80210a0:	601a      	str	r2, [r3, #0]
 80210a2:	f1b9 0300 	subs.w	r3, r9, #0
 80210a6:	bfbb      	ittet	lt
 80210a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80210ac:	9303      	strlt	r3, [sp, #12]
 80210ae:	2300      	movge	r3, #0
 80210b0:	2201      	movlt	r2, #1
 80210b2:	bfac      	ite	ge
 80210b4:	6023      	strge	r3, [r4, #0]
 80210b6:	6022      	strlt	r2, [r4, #0]
 80210b8:	4b97      	ldr	r3, [pc, #604]	; (8021318 <_dtoa_r+0x2d0>)
 80210ba:	9c03      	ldr	r4, [sp, #12]
 80210bc:	43a3      	bics	r3, r4
 80210be:	d11c      	bne.n	80210fa <_dtoa_r+0xb2>
 80210c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80210c6:	6013      	str	r3, [r2, #0]
 80210c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80210cc:	ea53 0308 	orrs.w	r3, r3, r8
 80210d0:	f000 84fb 	beq.w	8021aca <_dtoa_r+0xa82>
 80210d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80210d6:	b963      	cbnz	r3, 80210f2 <_dtoa_r+0xaa>
 80210d8:	4b90      	ldr	r3, [pc, #576]	; (802131c <_dtoa_r+0x2d4>)
 80210da:	e020      	b.n	802111e <_dtoa_r+0xd6>
 80210dc:	4b90      	ldr	r3, [pc, #576]	; (8021320 <_dtoa_r+0x2d8>)
 80210de:	9301      	str	r3, [sp, #4]
 80210e0:	3308      	adds	r3, #8
 80210e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80210e4:	6013      	str	r3, [r2, #0]
 80210e6:	9801      	ldr	r0, [sp, #4]
 80210e8:	b011      	add	sp, #68	; 0x44
 80210ea:	ecbd 8b02 	vpop	{d8}
 80210ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210f2:	4b8a      	ldr	r3, [pc, #552]	; (802131c <_dtoa_r+0x2d4>)
 80210f4:	9301      	str	r3, [sp, #4]
 80210f6:	3303      	adds	r3, #3
 80210f8:	e7f3      	b.n	80210e2 <_dtoa_r+0x9a>
 80210fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80210fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021106:	d10c      	bne.n	8021122 <_dtoa_r+0xda>
 8021108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802110a:	2301      	movs	r3, #1
 802110c:	6013      	str	r3, [r2, #0]
 802110e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021110:	2b00      	cmp	r3, #0
 8021112:	f000 84d7 	beq.w	8021ac4 <_dtoa_r+0xa7c>
 8021116:	4b83      	ldr	r3, [pc, #524]	; (8021324 <_dtoa_r+0x2dc>)
 8021118:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802111a:	6013      	str	r3, [r2, #0]
 802111c:	3b01      	subs	r3, #1
 802111e:	9301      	str	r3, [sp, #4]
 8021120:	e7e1      	b.n	80210e6 <_dtoa_r+0x9e>
 8021122:	aa0e      	add	r2, sp, #56	; 0x38
 8021124:	a90f      	add	r1, sp, #60	; 0x3c
 8021126:	4630      	mov	r0, r6
 8021128:	eeb0 0b48 	vmov.f64	d0, d8
 802112c:	f001 f92c 	bl	8022388 <__d2b>
 8021130:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021136:	4605      	mov	r5, r0
 8021138:	2b00      	cmp	r3, #0
 802113a:	d046      	beq.n	80211ca <_dtoa_r+0x182>
 802113c:	eeb0 7b48 	vmov.f64	d7, d8
 8021140:	ee18 1a90 	vmov	r1, s17
 8021144:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021148:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802114c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8021150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021154:	2000      	movs	r0, #0
 8021156:	ee07 1a90 	vmov	s15, r1
 802115a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 802115e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80212f8 <_dtoa_r+0x2b0>
 8021162:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021166:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8021300 <_dtoa_r+0x2b8>
 802116a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802116e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021308 <_dtoa_r+0x2c0>
 8021172:	ee07 3a90 	vmov	s15, r3
 8021176:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802117a:	eeb0 7b46 	vmov.f64	d7, d6
 802117e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8021182:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021186:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802118e:	ee16 ba90 	vmov	fp, s13
 8021192:	9009      	str	r0, [sp, #36]	; 0x24
 8021194:	d508      	bpl.n	80211a8 <_dtoa_r+0x160>
 8021196:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802119a:	eeb4 6b47 	vcmp.f64	d6, d7
 802119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211a2:	bf18      	it	ne
 80211a4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80211a8:	f1bb 0f16 	cmp.w	fp, #22
 80211ac:	d82b      	bhi.n	8021206 <_dtoa_r+0x1be>
 80211ae:	495e      	ldr	r1, [pc, #376]	; (8021328 <_dtoa_r+0x2e0>)
 80211b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80211b4:	ed91 7b00 	vldr	d7, [r1]
 80211b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80211bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211c0:	d501      	bpl.n	80211c6 <_dtoa_r+0x17e>
 80211c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80211c6:	2100      	movs	r1, #0
 80211c8:	e01e      	b.n	8021208 <_dtoa_r+0x1c0>
 80211ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80211cc:	4413      	add	r3, r2
 80211ce:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80211d2:	2920      	cmp	r1, #32
 80211d4:	bfc1      	itttt	gt
 80211d6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80211da:	408c      	lslgt	r4, r1
 80211dc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80211e0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80211e4:	bfd6      	itet	le
 80211e6:	f1c1 0120 	rsble	r1, r1, #32
 80211ea:	4321      	orrgt	r1, r4
 80211ec:	fa08 f101 	lslle.w	r1, r8, r1
 80211f0:	ee07 1a90 	vmov	s15, r1
 80211f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80211f8:	3b01      	subs	r3, #1
 80211fa:	ee17 1a90 	vmov	r1, s15
 80211fe:	2001      	movs	r0, #1
 8021200:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8021204:	e7a7      	b.n	8021156 <_dtoa_r+0x10e>
 8021206:	2101      	movs	r1, #1
 8021208:	1ad2      	subs	r2, r2, r3
 802120a:	1e53      	subs	r3, r2, #1
 802120c:	9305      	str	r3, [sp, #20]
 802120e:	bf45      	ittet	mi
 8021210:	f1c2 0301 	rsbmi	r3, r2, #1
 8021214:	9304      	strmi	r3, [sp, #16]
 8021216:	2300      	movpl	r3, #0
 8021218:	2300      	movmi	r3, #0
 802121a:	bf4c      	ite	mi
 802121c:	9305      	strmi	r3, [sp, #20]
 802121e:	9304      	strpl	r3, [sp, #16]
 8021220:	f1bb 0f00 	cmp.w	fp, #0
 8021224:	910b      	str	r1, [sp, #44]	; 0x2c
 8021226:	db18      	blt.n	802125a <_dtoa_r+0x212>
 8021228:	9b05      	ldr	r3, [sp, #20]
 802122a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802122e:	445b      	add	r3, fp
 8021230:	9305      	str	r3, [sp, #20]
 8021232:	2300      	movs	r3, #0
 8021234:	9a06      	ldr	r2, [sp, #24]
 8021236:	2a09      	cmp	r2, #9
 8021238:	d848      	bhi.n	80212cc <_dtoa_r+0x284>
 802123a:	2a05      	cmp	r2, #5
 802123c:	bfc4      	itt	gt
 802123e:	3a04      	subgt	r2, #4
 8021240:	9206      	strgt	r2, [sp, #24]
 8021242:	9a06      	ldr	r2, [sp, #24]
 8021244:	f1a2 0202 	sub.w	r2, r2, #2
 8021248:	bfcc      	ite	gt
 802124a:	2400      	movgt	r4, #0
 802124c:	2401      	movle	r4, #1
 802124e:	2a03      	cmp	r2, #3
 8021250:	d847      	bhi.n	80212e2 <_dtoa_r+0x29a>
 8021252:	e8df f002 	tbb	[pc, r2]
 8021256:	2d0b      	.short	0x2d0b
 8021258:	392b      	.short	0x392b
 802125a:	9b04      	ldr	r3, [sp, #16]
 802125c:	2200      	movs	r2, #0
 802125e:	eba3 030b 	sub.w	r3, r3, fp
 8021262:	9304      	str	r3, [sp, #16]
 8021264:	920a      	str	r2, [sp, #40]	; 0x28
 8021266:	f1cb 0300 	rsb	r3, fp, #0
 802126a:	e7e3      	b.n	8021234 <_dtoa_r+0x1ec>
 802126c:	2200      	movs	r2, #0
 802126e:	9207      	str	r2, [sp, #28]
 8021270:	9a08      	ldr	r2, [sp, #32]
 8021272:	2a00      	cmp	r2, #0
 8021274:	dc38      	bgt.n	80212e8 <_dtoa_r+0x2a0>
 8021276:	f04f 0a01 	mov.w	sl, #1
 802127a:	46d1      	mov	r9, sl
 802127c:	4652      	mov	r2, sl
 802127e:	f8cd a020 	str.w	sl, [sp, #32]
 8021282:	69f7      	ldr	r7, [r6, #28]
 8021284:	2100      	movs	r1, #0
 8021286:	2004      	movs	r0, #4
 8021288:	f100 0c14 	add.w	ip, r0, #20
 802128c:	4594      	cmp	ip, r2
 802128e:	d930      	bls.n	80212f2 <_dtoa_r+0x2aa>
 8021290:	6079      	str	r1, [r7, #4]
 8021292:	4630      	mov	r0, r6
 8021294:	930d      	str	r3, [sp, #52]	; 0x34
 8021296:	f000 fc9b 	bl	8021bd0 <_Balloc>
 802129a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802129c:	9001      	str	r0, [sp, #4]
 802129e:	4602      	mov	r2, r0
 80212a0:	2800      	cmp	r0, #0
 80212a2:	d145      	bne.n	8021330 <_dtoa_r+0x2e8>
 80212a4:	4b21      	ldr	r3, [pc, #132]	; (802132c <_dtoa_r+0x2e4>)
 80212a6:	f240 11af 	movw	r1, #431	; 0x1af
 80212aa:	e6e5      	b.n	8021078 <_dtoa_r+0x30>
 80212ac:	2201      	movs	r2, #1
 80212ae:	e7de      	b.n	802126e <_dtoa_r+0x226>
 80212b0:	2200      	movs	r2, #0
 80212b2:	9207      	str	r2, [sp, #28]
 80212b4:	9a08      	ldr	r2, [sp, #32]
 80212b6:	eb0b 0a02 	add.w	sl, fp, r2
 80212ba:	f10a 0901 	add.w	r9, sl, #1
 80212be:	464a      	mov	r2, r9
 80212c0:	2a01      	cmp	r2, #1
 80212c2:	bfb8      	it	lt
 80212c4:	2201      	movlt	r2, #1
 80212c6:	e7dc      	b.n	8021282 <_dtoa_r+0x23a>
 80212c8:	2201      	movs	r2, #1
 80212ca:	e7f2      	b.n	80212b2 <_dtoa_r+0x26a>
 80212cc:	2401      	movs	r4, #1
 80212ce:	2200      	movs	r2, #0
 80212d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80212d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80212d8:	2100      	movs	r1, #0
 80212da:	46d1      	mov	r9, sl
 80212dc:	2212      	movs	r2, #18
 80212de:	9108      	str	r1, [sp, #32]
 80212e0:	e7cf      	b.n	8021282 <_dtoa_r+0x23a>
 80212e2:	2201      	movs	r2, #1
 80212e4:	9207      	str	r2, [sp, #28]
 80212e6:	e7f5      	b.n	80212d4 <_dtoa_r+0x28c>
 80212e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80212ec:	46d1      	mov	r9, sl
 80212ee:	4652      	mov	r2, sl
 80212f0:	e7c7      	b.n	8021282 <_dtoa_r+0x23a>
 80212f2:	3101      	adds	r1, #1
 80212f4:	0040      	lsls	r0, r0, #1
 80212f6:	e7c7      	b.n	8021288 <_dtoa_r+0x240>
 80212f8:	636f4361 	.word	0x636f4361
 80212fc:	3fd287a7 	.word	0x3fd287a7
 8021300:	8b60c8b3 	.word	0x8b60c8b3
 8021304:	3fc68a28 	.word	0x3fc68a28
 8021308:	509f79fb 	.word	0x509f79fb
 802130c:	3fd34413 	.word	0x3fd34413
 8021310:	08025a3c 	.word	0x08025a3c
 8021314:	08025c2e 	.word	0x08025c2e
 8021318:	7ff00000 	.word	0x7ff00000
 802131c:	08025c2a 	.word	0x08025c2a
 8021320:	08025c21 	.word	0x08025c21
 8021324:	08025bbd 	.word	0x08025bbd
 8021328:	08025d18 	.word	0x08025d18
 802132c:	08025c86 	.word	0x08025c86
 8021330:	69f2      	ldr	r2, [r6, #28]
 8021332:	9901      	ldr	r1, [sp, #4]
 8021334:	6011      	str	r1, [r2, #0]
 8021336:	f1b9 0f0e 	cmp.w	r9, #14
 802133a:	d86c      	bhi.n	8021416 <_dtoa_r+0x3ce>
 802133c:	2c00      	cmp	r4, #0
 802133e:	d06a      	beq.n	8021416 <_dtoa_r+0x3ce>
 8021340:	f1bb 0f00 	cmp.w	fp, #0
 8021344:	f340 80a0 	ble.w	8021488 <_dtoa_r+0x440>
 8021348:	4ac1      	ldr	r2, [pc, #772]	; (8021650 <_dtoa_r+0x608>)
 802134a:	f00b 010f 	and.w	r1, fp, #15
 802134e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8021352:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8021356:	ed92 7b00 	vldr	d7, [r2]
 802135a:	ea4f 122b 	mov.w	r2, fp, asr #4
 802135e:	f000 8087 	beq.w	8021470 <_dtoa_r+0x428>
 8021362:	49bc      	ldr	r1, [pc, #752]	; (8021654 <_dtoa_r+0x60c>)
 8021364:	ed91 6b08 	vldr	d6, [r1, #32]
 8021368:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802136c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021370:	f002 020f 	and.w	r2, r2, #15
 8021374:	2103      	movs	r1, #3
 8021376:	48b7      	ldr	r0, [pc, #732]	; (8021654 <_dtoa_r+0x60c>)
 8021378:	2a00      	cmp	r2, #0
 802137a:	d17b      	bne.n	8021474 <_dtoa_r+0x42c>
 802137c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021380:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021384:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802138a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802138e:	2a00      	cmp	r2, #0
 8021390:	f000 80a0 	beq.w	80214d4 <_dtoa_r+0x48c>
 8021394:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021398:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213a0:	f140 8098 	bpl.w	80214d4 <_dtoa_r+0x48c>
 80213a4:	f1b9 0f00 	cmp.w	r9, #0
 80213a8:	f000 8094 	beq.w	80214d4 <_dtoa_r+0x48c>
 80213ac:	f1ba 0f00 	cmp.w	sl, #0
 80213b0:	dd2f      	ble.n	8021412 <_dtoa_r+0x3ca>
 80213b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80213b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80213ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80213be:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80213c2:	3101      	adds	r1, #1
 80213c4:	4654      	mov	r4, sl
 80213c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80213ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80213ce:	ee07 1a90 	vmov	s15, r1
 80213d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80213d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80213da:	ee15 7a90 	vmov	r7, s11
 80213de:	ec51 0b15 	vmov	r0, r1, d5
 80213e2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80213e6:	2c00      	cmp	r4, #0
 80213e8:	d177      	bne.n	80214da <_dtoa_r+0x492>
 80213ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80213ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80213f2:	ec41 0b17 	vmov	d7, r0, r1
 80213f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80213fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213fe:	f300 826a 	bgt.w	80218d6 <_dtoa_r+0x88e>
 8021402:	eeb1 7b47 	vneg.f64	d7, d7
 8021406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802140e:	f100 8260 	bmi.w	80218d2 <_dtoa_r+0x88a>
 8021412:	ed8d 8b02 	vstr	d8, [sp, #8]
 8021416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021418:	2a00      	cmp	r2, #0
 802141a:	f2c0 811d 	blt.w	8021658 <_dtoa_r+0x610>
 802141e:	f1bb 0f0e 	cmp.w	fp, #14
 8021422:	f300 8119 	bgt.w	8021658 <_dtoa_r+0x610>
 8021426:	4b8a      	ldr	r3, [pc, #552]	; (8021650 <_dtoa_r+0x608>)
 8021428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802142c:	ed93 6b00 	vldr	d6, [r3]
 8021430:	9b08      	ldr	r3, [sp, #32]
 8021432:	2b00      	cmp	r3, #0
 8021434:	f280 80b7 	bge.w	80215a6 <_dtoa_r+0x55e>
 8021438:	f1b9 0f00 	cmp.w	r9, #0
 802143c:	f300 80b3 	bgt.w	80215a6 <_dtoa_r+0x55e>
 8021440:	f040 8246 	bne.w	80218d0 <_dtoa_r+0x888>
 8021444:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021448:	ee26 6b07 	vmul.f64	d6, d6, d7
 802144c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021450:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021458:	464c      	mov	r4, r9
 802145a:	464f      	mov	r7, r9
 802145c:	f280 821c 	bge.w	8021898 <_dtoa_r+0x850>
 8021460:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021464:	2331      	movs	r3, #49	; 0x31
 8021466:	f808 3b01 	strb.w	r3, [r8], #1
 802146a:	f10b 0b01 	add.w	fp, fp, #1
 802146e:	e218      	b.n	80218a2 <_dtoa_r+0x85a>
 8021470:	2102      	movs	r1, #2
 8021472:	e780      	b.n	8021376 <_dtoa_r+0x32e>
 8021474:	07d4      	lsls	r4, r2, #31
 8021476:	d504      	bpl.n	8021482 <_dtoa_r+0x43a>
 8021478:	ed90 6b00 	vldr	d6, [r0]
 802147c:	3101      	adds	r1, #1
 802147e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021482:	1052      	asrs	r2, r2, #1
 8021484:	3008      	adds	r0, #8
 8021486:	e777      	b.n	8021378 <_dtoa_r+0x330>
 8021488:	d022      	beq.n	80214d0 <_dtoa_r+0x488>
 802148a:	f1cb 0200 	rsb	r2, fp, #0
 802148e:	4970      	ldr	r1, [pc, #448]	; (8021650 <_dtoa_r+0x608>)
 8021490:	f002 000f 	and.w	r0, r2, #15
 8021494:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021498:	ed91 7b00 	vldr	d7, [r1]
 802149c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80214a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80214a4:	486b      	ldr	r0, [pc, #428]	; (8021654 <_dtoa_r+0x60c>)
 80214a6:	1112      	asrs	r2, r2, #4
 80214a8:	2400      	movs	r4, #0
 80214aa:	2102      	movs	r1, #2
 80214ac:	b92a      	cbnz	r2, 80214ba <_dtoa_r+0x472>
 80214ae:	2c00      	cmp	r4, #0
 80214b0:	f43f af6a 	beq.w	8021388 <_dtoa_r+0x340>
 80214b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80214b8:	e766      	b.n	8021388 <_dtoa_r+0x340>
 80214ba:	07d7      	lsls	r7, r2, #31
 80214bc:	d505      	bpl.n	80214ca <_dtoa_r+0x482>
 80214be:	ed90 6b00 	vldr	d6, [r0]
 80214c2:	3101      	adds	r1, #1
 80214c4:	2401      	movs	r4, #1
 80214c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214ca:	1052      	asrs	r2, r2, #1
 80214cc:	3008      	adds	r0, #8
 80214ce:	e7ed      	b.n	80214ac <_dtoa_r+0x464>
 80214d0:	2102      	movs	r1, #2
 80214d2:	e759      	b.n	8021388 <_dtoa_r+0x340>
 80214d4:	465a      	mov	r2, fp
 80214d6:	464c      	mov	r4, r9
 80214d8:	e775      	b.n	80213c6 <_dtoa_r+0x37e>
 80214da:	ec41 0b17 	vmov	d7, r0, r1
 80214de:	495c      	ldr	r1, [pc, #368]	; (8021650 <_dtoa_r+0x608>)
 80214e0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80214e4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80214e8:	9901      	ldr	r1, [sp, #4]
 80214ea:	440c      	add	r4, r1
 80214ec:	9907      	ldr	r1, [sp, #28]
 80214ee:	b351      	cbz	r1, 8021546 <_dtoa_r+0x4fe>
 80214f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80214f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80214f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80214fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021500:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021504:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021508:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802150c:	ee14 1a90 	vmov	r1, s9
 8021510:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021514:	3130      	adds	r1, #48	; 0x30
 8021516:	ee36 6b45 	vsub.f64	d6, d6, d5
 802151a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021522:	f808 1b01 	strb.w	r1, [r8], #1
 8021526:	d439      	bmi.n	802159c <_dtoa_r+0x554>
 8021528:	ee32 5b46 	vsub.f64	d5, d2, d6
 802152c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021534:	d472      	bmi.n	802161c <_dtoa_r+0x5d4>
 8021536:	45a0      	cmp	r8, r4
 8021538:	f43f af6b 	beq.w	8021412 <_dtoa_r+0x3ca>
 802153c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021540:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021544:	e7e0      	b.n	8021508 <_dtoa_r+0x4c0>
 8021546:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802154a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802154e:	4620      	mov	r0, r4
 8021550:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021554:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021558:	ee14 1a90 	vmov	r1, s9
 802155c:	3130      	adds	r1, #48	; 0x30
 802155e:	f808 1b01 	strb.w	r1, [r8], #1
 8021562:	45a0      	cmp	r8, r4
 8021564:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021568:	ee36 6b45 	vsub.f64	d6, d6, d5
 802156c:	d118      	bne.n	80215a0 <_dtoa_r+0x558>
 802156e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021572:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021576:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157e:	dc4d      	bgt.n	802161c <_dtoa_r+0x5d4>
 8021580:	ee35 5b47 	vsub.f64	d5, d5, d7
 8021584:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802158c:	f57f af41 	bpl.w	8021412 <_dtoa_r+0x3ca>
 8021590:	4680      	mov	r8, r0
 8021592:	3801      	subs	r0, #1
 8021594:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021598:	2b30      	cmp	r3, #48	; 0x30
 802159a:	d0f9      	beq.n	8021590 <_dtoa_r+0x548>
 802159c:	4693      	mov	fp, r2
 802159e:	e02a      	b.n	80215f6 <_dtoa_r+0x5ae>
 80215a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80215a4:	e7d6      	b.n	8021554 <_dtoa_r+0x50c>
 80215a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80215aa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80215ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80215b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80215b6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80215ba:	ee15 3a10 	vmov	r3, s10
 80215be:	3330      	adds	r3, #48	; 0x30
 80215c0:	f808 3b01 	strb.w	r3, [r8], #1
 80215c4:	9b01      	ldr	r3, [sp, #4]
 80215c6:	eba8 0303 	sub.w	r3, r8, r3
 80215ca:	4599      	cmp	r9, r3
 80215cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80215d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80215d4:	d133      	bne.n	802163e <_dtoa_r+0x5f6>
 80215d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80215da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80215de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215e2:	dc1a      	bgt.n	802161a <_dtoa_r+0x5d2>
 80215e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80215e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ec:	d103      	bne.n	80215f6 <_dtoa_r+0x5ae>
 80215ee:	ee15 3a10 	vmov	r3, s10
 80215f2:	07d9      	lsls	r1, r3, #31
 80215f4:	d411      	bmi.n	802161a <_dtoa_r+0x5d2>
 80215f6:	4629      	mov	r1, r5
 80215f8:	4630      	mov	r0, r6
 80215fa:	f000 fb29 	bl	8021c50 <_Bfree>
 80215fe:	2300      	movs	r3, #0
 8021600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021602:	f888 3000 	strb.w	r3, [r8]
 8021606:	f10b 0301 	add.w	r3, fp, #1
 802160a:	6013      	str	r3, [r2, #0]
 802160c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802160e:	2b00      	cmp	r3, #0
 8021610:	f43f ad69 	beq.w	80210e6 <_dtoa_r+0x9e>
 8021614:	f8c3 8000 	str.w	r8, [r3]
 8021618:	e565      	b.n	80210e6 <_dtoa_r+0x9e>
 802161a:	465a      	mov	r2, fp
 802161c:	4643      	mov	r3, r8
 802161e:	4698      	mov	r8, r3
 8021620:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8021624:	2939      	cmp	r1, #57	; 0x39
 8021626:	d106      	bne.n	8021636 <_dtoa_r+0x5ee>
 8021628:	9901      	ldr	r1, [sp, #4]
 802162a:	4299      	cmp	r1, r3
 802162c:	d1f7      	bne.n	802161e <_dtoa_r+0x5d6>
 802162e:	9801      	ldr	r0, [sp, #4]
 8021630:	2130      	movs	r1, #48	; 0x30
 8021632:	3201      	adds	r2, #1
 8021634:	7001      	strb	r1, [r0, #0]
 8021636:	7819      	ldrb	r1, [r3, #0]
 8021638:	3101      	adds	r1, #1
 802163a:	7019      	strb	r1, [r3, #0]
 802163c:	e7ae      	b.n	802159c <_dtoa_r+0x554>
 802163e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802164a:	d1b2      	bne.n	80215b2 <_dtoa_r+0x56a>
 802164c:	e7d3      	b.n	80215f6 <_dtoa_r+0x5ae>
 802164e:	bf00      	nop
 8021650:	08025d18 	.word	0x08025d18
 8021654:	08025cf0 	.word	0x08025cf0
 8021658:	9907      	ldr	r1, [sp, #28]
 802165a:	2900      	cmp	r1, #0
 802165c:	f000 80d0 	beq.w	8021800 <_dtoa_r+0x7b8>
 8021660:	9906      	ldr	r1, [sp, #24]
 8021662:	2901      	cmp	r1, #1
 8021664:	f300 80b4 	bgt.w	80217d0 <_dtoa_r+0x788>
 8021668:	9909      	ldr	r1, [sp, #36]	; 0x24
 802166a:	2900      	cmp	r1, #0
 802166c:	f000 80ac 	beq.w	80217c8 <_dtoa_r+0x780>
 8021670:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021674:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021678:	461c      	mov	r4, r3
 802167a:	9309      	str	r3, [sp, #36]	; 0x24
 802167c:	9b04      	ldr	r3, [sp, #16]
 802167e:	4413      	add	r3, r2
 8021680:	9304      	str	r3, [sp, #16]
 8021682:	9b05      	ldr	r3, [sp, #20]
 8021684:	2101      	movs	r1, #1
 8021686:	4413      	add	r3, r2
 8021688:	4630      	mov	r0, r6
 802168a:	9305      	str	r3, [sp, #20]
 802168c:	f000 fbe0 	bl	8021e50 <__i2b>
 8021690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021692:	4607      	mov	r7, r0
 8021694:	f1b8 0f00 	cmp.w	r8, #0
 8021698:	d00d      	beq.n	80216b6 <_dtoa_r+0x66e>
 802169a:	9a05      	ldr	r2, [sp, #20]
 802169c:	2a00      	cmp	r2, #0
 802169e:	dd0a      	ble.n	80216b6 <_dtoa_r+0x66e>
 80216a0:	4542      	cmp	r2, r8
 80216a2:	9904      	ldr	r1, [sp, #16]
 80216a4:	bfa8      	it	ge
 80216a6:	4642      	movge	r2, r8
 80216a8:	1a89      	subs	r1, r1, r2
 80216aa:	9104      	str	r1, [sp, #16]
 80216ac:	9905      	ldr	r1, [sp, #20]
 80216ae:	eba8 0802 	sub.w	r8, r8, r2
 80216b2:	1a8a      	subs	r2, r1, r2
 80216b4:	9205      	str	r2, [sp, #20]
 80216b6:	b303      	cbz	r3, 80216fa <_dtoa_r+0x6b2>
 80216b8:	9a07      	ldr	r2, [sp, #28]
 80216ba:	2a00      	cmp	r2, #0
 80216bc:	f000 80a5 	beq.w	802180a <_dtoa_r+0x7c2>
 80216c0:	2c00      	cmp	r4, #0
 80216c2:	dd13      	ble.n	80216ec <_dtoa_r+0x6a4>
 80216c4:	4639      	mov	r1, r7
 80216c6:	4622      	mov	r2, r4
 80216c8:	4630      	mov	r0, r6
 80216ca:	930d      	str	r3, [sp, #52]	; 0x34
 80216cc:	f000 fc80 	bl	8021fd0 <__pow5mult>
 80216d0:	462a      	mov	r2, r5
 80216d2:	4601      	mov	r1, r0
 80216d4:	4607      	mov	r7, r0
 80216d6:	4630      	mov	r0, r6
 80216d8:	f000 fbd0 	bl	8021e7c <__multiply>
 80216dc:	4629      	mov	r1, r5
 80216de:	9009      	str	r0, [sp, #36]	; 0x24
 80216e0:	4630      	mov	r0, r6
 80216e2:	f000 fab5 	bl	8021c50 <_Bfree>
 80216e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80216e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216ea:	4615      	mov	r5, r2
 80216ec:	1b1a      	subs	r2, r3, r4
 80216ee:	d004      	beq.n	80216fa <_dtoa_r+0x6b2>
 80216f0:	4629      	mov	r1, r5
 80216f2:	4630      	mov	r0, r6
 80216f4:	f000 fc6c 	bl	8021fd0 <__pow5mult>
 80216f8:	4605      	mov	r5, r0
 80216fa:	2101      	movs	r1, #1
 80216fc:	4630      	mov	r0, r6
 80216fe:	f000 fba7 	bl	8021e50 <__i2b>
 8021702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021704:	2b00      	cmp	r3, #0
 8021706:	4604      	mov	r4, r0
 8021708:	f340 8081 	ble.w	802180e <_dtoa_r+0x7c6>
 802170c:	461a      	mov	r2, r3
 802170e:	4601      	mov	r1, r0
 8021710:	4630      	mov	r0, r6
 8021712:	f000 fc5d 	bl	8021fd0 <__pow5mult>
 8021716:	9b06      	ldr	r3, [sp, #24]
 8021718:	2b01      	cmp	r3, #1
 802171a:	4604      	mov	r4, r0
 802171c:	dd7a      	ble.n	8021814 <_dtoa_r+0x7cc>
 802171e:	2300      	movs	r3, #0
 8021720:	9309      	str	r3, [sp, #36]	; 0x24
 8021722:	6922      	ldr	r2, [r4, #16]
 8021724:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021728:	6910      	ldr	r0, [r2, #16]
 802172a:	f000 fb43 	bl	8021db4 <__hi0bits>
 802172e:	f1c0 0020 	rsb	r0, r0, #32
 8021732:	9b05      	ldr	r3, [sp, #20]
 8021734:	4418      	add	r0, r3
 8021736:	f010 001f 	ands.w	r0, r0, #31
 802173a:	f000 8093 	beq.w	8021864 <_dtoa_r+0x81c>
 802173e:	f1c0 0220 	rsb	r2, r0, #32
 8021742:	2a04      	cmp	r2, #4
 8021744:	f340 8085 	ble.w	8021852 <_dtoa_r+0x80a>
 8021748:	9b04      	ldr	r3, [sp, #16]
 802174a:	f1c0 001c 	rsb	r0, r0, #28
 802174e:	4403      	add	r3, r0
 8021750:	9304      	str	r3, [sp, #16]
 8021752:	9b05      	ldr	r3, [sp, #20]
 8021754:	4480      	add	r8, r0
 8021756:	4403      	add	r3, r0
 8021758:	9305      	str	r3, [sp, #20]
 802175a:	9b04      	ldr	r3, [sp, #16]
 802175c:	2b00      	cmp	r3, #0
 802175e:	dd05      	ble.n	802176c <_dtoa_r+0x724>
 8021760:	4629      	mov	r1, r5
 8021762:	461a      	mov	r2, r3
 8021764:	4630      	mov	r0, r6
 8021766:	f000 fc8d 	bl	8022084 <__lshift>
 802176a:	4605      	mov	r5, r0
 802176c:	9b05      	ldr	r3, [sp, #20]
 802176e:	2b00      	cmp	r3, #0
 8021770:	dd05      	ble.n	802177e <_dtoa_r+0x736>
 8021772:	4621      	mov	r1, r4
 8021774:	461a      	mov	r2, r3
 8021776:	4630      	mov	r0, r6
 8021778:	f000 fc84 	bl	8022084 <__lshift>
 802177c:	4604      	mov	r4, r0
 802177e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021780:	2b00      	cmp	r3, #0
 8021782:	d071      	beq.n	8021868 <_dtoa_r+0x820>
 8021784:	4621      	mov	r1, r4
 8021786:	4628      	mov	r0, r5
 8021788:	f000 fce8 	bl	802215c <__mcmp>
 802178c:	2800      	cmp	r0, #0
 802178e:	da6b      	bge.n	8021868 <_dtoa_r+0x820>
 8021790:	2300      	movs	r3, #0
 8021792:	4629      	mov	r1, r5
 8021794:	220a      	movs	r2, #10
 8021796:	4630      	mov	r0, r6
 8021798:	f000 fa7c 	bl	8021c94 <__multadd>
 802179c:	9b07      	ldr	r3, [sp, #28]
 802179e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80217a2:	4605      	mov	r5, r0
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	f000 8197 	beq.w	8021ad8 <_dtoa_r+0xa90>
 80217aa:	4639      	mov	r1, r7
 80217ac:	2300      	movs	r3, #0
 80217ae:	220a      	movs	r2, #10
 80217b0:	4630      	mov	r0, r6
 80217b2:	f000 fa6f 	bl	8021c94 <__multadd>
 80217b6:	f1ba 0f00 	cmp.w	sl, #0
 80217ba:	4607      	mov	r7, r0
 80217bc:	f300 8093 	bgt.w	80218e6 <_dtoa_r+0x89e>
 80217c0:	9b06      	ldr	r3, [sp, #24]
 80217c2:	2b02      	cmp	r3, #2
 80217c4:	dc57      	bgt.n	8021876 <_dtoa_r+0x82e>
 80217c6:	e08e      	b.n	80218e6 <_dtoa_r+0x89e>
 80217c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80217ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80217ce:	e751      	b.n	8021674 <_dtoa_r+0x62c>
 80217d0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80217d4:	42a3      	cmp	r3, r4
 80217d6:	bfbf      	itttt	lt
 80217d8:	1ae2      	sublt	r2, r4, r3
 80217da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80217dc:	189b      	addlt	r3, r3, r2
 80217de:	930a      	strlt	r3, [sp, #40]	; 0x28
 80217e0:	bfae      	itee	ge
 80217e2:	1b1c      	subge	r4, r3, r4
 80217e4:	4623      	movlt	r3, r4
 80217e6:	2400      	movlt	r4, #0
 80217e8:	f1b9 0f00 	cmp.w	r9, #0
 80217ec:	bfb5      	itete	lt
 80217ee:	9a04      	ldrlt	r2, [sp, #16]
 80217f0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80217f4:	eba2 0809 	sublt.w	r8, r2, r9
 80217f8:	464a      	movge	r2, r9
 80217fa:	bfb8      	it	lt
 80217fc:	2200      	movlt	r2, #0
 80217fe:	e73c      	b.n	802167a <_dtoa_r+0x632>
 8021800:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021804:	9f07      	ldr	r7, [sp, #28]
 8021806:	461c      	mov	r4, r3
 8021808:	e744      	b.n	8021694 <_dtoa_r+0x64c>
 802180a:	461a      	mov	r2, r3
 802180c:	e770      	b.n	80216f0 <_dtoa_r+0x6a8>
 802180e:	9b06      	ldr	r3, [sp, #24]
 8021810:	2b01      	cmp	r3, #1
 8021812:	dc18      	bgt.n	8021846 <_dtoa_r+0x7fe>
 8021814:	9b02      	ldr	r3, [sp, #8]
 8021816:	b9b3      	cbnz	r3, 8021846 <_dtoa_r+0x7fe>
 8021818:	9b03      	ldr	r3, [sp, #12]
 802181a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802181e:	b9a2      	cbnz	r2, 802184a <_dtoa_r+0x802>
 8021820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021824:	0d12      	lsrs	r2, r2, #20
 8021826:	0512      	lsls	r2, r2, #20
 8021828:	b18a      	cbz	r2, 802184e <_dtoa_r+0x806>
 802182a:	9b04      	ldr	r3, [sp, #16]
 802182c:	3301      	adds	r3, #1
 802182e:	9304      	str	r3, [sp, #16]
 8021830:	9b05      	ldr	r3, [sp, #20]
 8021832:	3301      	adds	r3, #1
 8021834:	9305      	str	r3, [sp, #20]
 8021836:	2301      	movs	r3, #1
 8021838:	9309      	str	r3, [sp, #36]	; 0x24
 802183a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802183c:	2b00      	cmp	r3, #0
 802183e:	f47f af70 	bne.w	8021722 <_dtoa_r+0x6da>
 8021842:	2001      	movs	r0, #1
 8021844:	e775      	b.n	8021732 <_dtoa_r+0x6ea>
 8021846:	2300      	movs	r3, #0
 8021848:	e7f6      	b.n	8021838 <_dtoa_r+0x7f0>
 802184a:	9b02      	ldr	r3, [sp, #8]
 802184c:	e7f4      	b.n	8021838 <_dtoa_r+0x7f0>
 802184e:	9209      	str	r2, [sp, #36]	; 0x24
 8021850:	e7f3      	b.n	802183a <_dtoa_r+0x7f2>
 8021852:	d082      	beq.n	802175a <_dtoa_r+0x712>
 8021854:	9b04      	ldr	r3, [sp, #16]
 8021856:	321c      	adds	r2, #28
 8021858:	4413      	add	r3, r2
 802185a:	9304      	str	r3, [sp, #16]
 802185c:	9b05      	ldr	r3, [sp, #20]
 802185e:	4490      	add	r8, r2
 8021860:	4413      	add	r3, r2
 8021862:	e779      	b.n	8021758 <_dtoa_r+0x710>
 8021864:	4602      	mov	r2, r0
 8021866:	e7f5      	b.n	8021854 <_dtoa_r+0x80c>
 8021868:	f1b9 0f00 	cmp.w	r9, #0
 802186c:	dc36      	bgt.n	80218dc <_dtoa_r+0x894>
 802186e:	9b06      	ldr	r3, [sp, #24]
 8021870:	2b02      	cmp	r3, #2
 8021872:	dd33      	ble.n	80218dc <_dtoa_r+0x894>
 8021874:	46ca      	mov	sl, r9
 8021876:	f1ba 0f00 	cmp.w	sl, #0
 802187a:	d10d      	bne.n	8021898 <_dtoa_r+0x850>
 802187c:	4621      	mov	r1, r4
 802187e:	4653      	mov	r3, sl
 8021880:	2205      	movs	r2, #5
 8021882:	4630      	mov	r0, r6
 8021884:	f000 fa06 	bl	8021c94 <__multadd>
 8021888:	4601      	mov	r1, r0
 802188a:	4604      	mov	r4, r0
 802188c:	4628      	mov	r0, r5
 802188e:	f000 fc65 	bl	802215c <__mcmp>
 8021892:	2800      	cmp	r0, #0
 8021894:	f73f ade4 	bgt.w	8021460 <_dtoa_r+0x418>
 8021898:	9b08      	ldr	r3, [sp, #32]
 802189a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802189e:	ea6f 0b03 	mvn.w	fp, r3
 80218a2:	f04f 0900 	mov.w	r9, #0
 80218a6:	4621      	mov	r1, r4
 80218a8:	4630      	mov	r0, r6
 80218aa:	f000 f9d1 	bl	8021c50 <_Bfree>
 80218ae:	2f00      	cmp	r7, #0
 80218b0:	f43f aea1 	beq.w	80215f6 <_dtoa_r+0x5ae>
 80218b4:	f1b9 0f00 	cmp.w	r9, #0
 80218b8:	d005      	beq.n	80218c6 <_dtoa_r+0x87e>
 80218ba:	45b9      	cmp	r9, r7
 80218bc:	d003      	beq.n	80218c6 <_dtoa_r+0x87e>
 80218be:	4649      	mov	r1, r9
 80218c0:	4630      	mov	r0, r6
 80218c2:	f000 f9c5 	bl	8021c50 <_Bfree>
 80218c6:	4639      	mov	r1, r7
 80218c8:	4630      	mov	r0, r6
 80218ca:	f000 f9c1 	bl	8021c50 <_Bfree>
 80218ce:	e692      	b.n	80215f6 <_dtoa_r+0x5ae>
 80218d0:	2400      	movs	r4, #0
 80218d2:	4627      	mov	r7, r4
 80218d4:	e7e0      	b.n	8021898 <_dtoa_r+0x850>
 80218d6:	4693      	mov	fp, r2
 80218d8:	4627      	mov	r7, r4
 80218da:	e5c1      	b.n	8021460 <_dtoa_r+0x418>
 80218dc:	9b07      	ldr	r3, [sp, #28]
 80218de:	46ca      	mov	sl, r9
 80218e0:	2b00      	cmp	r3, #0
 80218e2:	f000 8100 	beq.w	8021ae6 <_dtoa_r+0xa9e>
 80218e6:	f1b8 0f00 	cmp.w	r8, #0
 80218ea:	dd05      	ble.n	80218f8 <_dtoa_r+0x8b0>
 80218ec:	4639      	mov	r1, r7
 80218ee:	4642      	mov	r2, r8
 80218f0:	4630      	mov	r0, r6
 80218f2:	f000 fbc7 	bl	8022084 <__lshift>
 80218f6:	4607      	mov	r7, r0
 80218f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	d05d      	beq.n	80219ba <_dtoa_r+0x972>
 80218fe:	6879      	ldr	r1, [r7, #4]
 8021900:	4630      	mov	r0, r6
 8021902:	f000 f965 	bl	8021bd0 <_Balloc>
 8021906:	4680      	mov	r8, r0
 8021908:	b928      	cbnz	r0, 8021916 <_dtoa_r+0x8ce>
 802190a:	4b82      	ldr	r3, [pc, #520]	; (8021b14 <_dtoa_r+0xacc>)
 802190c:	4602      	mov	r2, r0
 802190e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8021912:	f7ff bbb1 	b.w	8021078 <_dtoa_r+0x30>
 8021916:	693a      	ldr	r2, [r7, #16]
 8021918:	3202      	adds	r2, #2
 802191a:	0092      	lsls	r2, r2, #2
 802191c:	f107 010c 	add.w	r1, r7, #12
 8021920:	300c      	adds	r0, #12
 8021922:	f7ff fad4 	bl	8020ece <memcpy>
 8021926:	2201      	movs	r2, #1
 8021928:	4641      	mov	r1, r8
 802192a:	4630      	mov	r0, r6
 802192c:	f000 fbaa 	bl	8022084 <__lshift>
 8021930:	9b01      	ldr	r3, [sp, #4]
 8021932:	3301      	adds	r3, #1
 8021934:	9304      	str	r3, [sp, #16]
 8021936:	9b01      	ldr	r3, [sp, #4]
 8021938:	4453      	add	r3, sl
 802193a:	9308      	str	r3, [sp, #32]
 802193c:	9b02      	ldr	r3, [sp, #8]
 802193e:	f003 0301 	and.w	r3, r3, #1
 8021942:	46b9      	mov	r9, r7
 8021944:	9307      	str	r3, [sp, #28]
 8021946:	4607      	mov	r7, r0
 8021948:	9b04      	ldr	r3, [sp, #16]
 802194a:	4621      	mov	r1, r4
 802194c:	3b01      	subs	r3, #1
 802194e:	4628      	mov	r0, r5
 8021950:	9302      	str	r3, [sp, #8]
 8021952:	f7ff faef 	bl	8020f34 <quorem>
 8021956:	4603      	mov	r3, r0
 8021958:	3330      	adds	r3, #48	; 0x30
 802195a:	9005      	str	r0, [sp, #20]
 802195c:	4649      	mov	r1, r9
 802195e:	4628      	mov	r0, r5
 8021960:	9309      	str	r3, [sp, #36]	; 0x24
 8021962:	f000 fbfb 	bl	802215c <__mcmp>
 8021966:	463a      	mov	r2, r7
 8021968:	4682      	mov	sl, r0
 802196a:	4621      	mov	r1, r4
 802196c:	4630      	mov	r0, r6
 802196e:	f000 fc11 	bl	8022194 <__mdiff>
 8021972:	68c2      	ldr	r2, [r0, #12]
 8021974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021976:	4680      	mov	r8, r0
 8021978:	bb0a      	cbnz	r2, 80219be <_dtoa_r+0x976>
 802197a:	4601      	mov	r1, r0
 802197c:	4628      	mov	r0, r5
 802197e:	f000 fbed 	bl	802215c <__mcmp>
 8021982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021984:	4602      	mov	r2, r0
 8021986:	4641      	mov	r1, r8
 8021988:	4630      	mov	r0, r6
 802198a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802198e:	f000 f95f 	bl	8021c50 <_Bfree>
 8021992:	9b06      	ldr	r3, [sp, #24]
 8021994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021996:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802199a:	ea43 0102 	orr.w	r1, r3, r2
 802199e:	9b07      	ldr	r3, [sp, #28]
 80219a0:	4319      	orrs	r1, r3
 80219a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219a4:	d10d      	bne.n	80219c2 <_dtoa_r+0x97a>
 80219a6:	2b39      	cmp	r3, #57	; 0x39
 80219a8:	d029      	beq.n	80219fe <_dtoa_r+0x9b6>
 80219aa:	f1ba 0f00 	cmp.w	sl, #0
 80219ae:	dd01      	ble.n	80219b4 <_dtoa_r+0x96c>
 80219b0:	9b05      	ldr	r3, [sp, #20]
 80219b2:	3331      	adds	r3, #49	; 0x31
 80219b4:	9a02      	ldr	r2, [sp, #8]
 80219b6:	7013      	strb	r3, [r2, #0]
 80219b8:	e775      	b.n	80218a6 <_dtoa_r+0x85e>
 80219ba:	4638      	mov	r0, r7
 80219bc:	e7b8      	b.n	8021930 <_dtoa_r+0x8e8>
 80219be:	2201      	movs	r2, #1
 80219c0:	e7e1      	b.n	8021986 <_dtoa_r+0x93e>
 80219c2:	f1ba 0f00 	cmp.w	sl, #0
 80219c6:	db06      	blt.n	80219d6 <_dtoa_r+0x98e>
 80219c8:	9906      	ldr	r1, [sp, #24]
 80219ca:	ea41 0a0a 	orr.w	sl, r1, sl
 80219ce:	9907      	ldr	r1, [sp, #28]
 80219d0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80219d4:	d120      	bne.n	8021a18 <_dtoa_r+0x9d0>
 80219d6:	2a00      	cmp	r2, #0
 80219d8:	ddec      	ble.n	80219b4 <_dtoa_r+0x96c>
 80219da:	4629      	mov	r1, r5
 80219dc:	2201      	movs	r2, #1
 80219de:	4630      	mov	r0, r6
 80219e0:	9304      	str	r3, [sp, #16]
 80219e2:	f000 fb4f 	bl	8022084 <__lshift>
 80219e6:	4621      	mov	r1, r4
 80219e8:	4605      	mov	r5, r0
 80219ea:	f000 fbb7 	bl	802215c <__mcmp>
 80219ee:	2800      	cmp	r0, #0
 80219f0:	9b04      	ldr	r3, [sp, #16]
 80219f2:	dc02      	bgt.n	80219fa <_dtoa_r+0x9b2>
 80219f4:	d1de      	bne.n	80219b4 <_dtoa_r+0x96c>
 80219f6:	07da      	lsls	r2, r3, #31
 80219f8:	d5dc      	bpl.n	80219b4 <_dtoa_r+0x96c>
 80219fa:	2b39      	cmp	r3, #57	; 0x39
 80219fc:	d1d8      	bne.n	80219b0 <_dtoa_r+0x968>
 80219fe:	9a02      	ldr	r2, [sp, #8]
 8021a00:	2339      	movs	r3, #57	; 0x39
 8021a02:	7013      	strb	r3, [r2, #0]
 8021a04:	4643      	mov	r3, r8
 8021a06:	4698      	mov	r8, r3
 8021a08:	3b01      	subs	r3, #1
 8021a0a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8021a0e:	2a39      	cmp	r2, #57	; 0x39
 8021a10:	d051      	beq.n	8021ab6 <_dtoa_r+0xa6e>
 8021a12:	3201      	adds	r2, #1
 8021a14:	701a      	strb	r2, [r3, #0]
 8021a16:	e746      	b.n	80218a6 <_dtoa_r+0x85e>
 8021a18:	2a00      	cmp	r2, #0
 8021a1a:	dd03      	ble.n	8021a24 <_dtoa_r+0x9dc>
 8021a1c:	2b39      	cmp	r3, #57	; 0x39
 8021a1e:	d0ee      	beq.n	80219fe <_dtoa_r+0x9b6>
 8021a20:	3301      	adds	r3, #1
 8021a22:	e7c7      	b.n	80219b4 <_dtoa_r+0x96c>
 8021a24:	9a04      	ldr	r2, [sp, #16]
 8021a26:	9908      	ldr	r1, [sp, #32]
 8021a28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021a2c:	428a      	cmp	r2, r1
 8021a2e:	d02b      	beq.n	8021a88 <_dtoa_r+0xa40>
 8021a30:	4629      	mov	r1, r5
 8021a32:	2300      	movs	r3, #0
 8021a34:	220a      	movs	r2, #10
 8021a36:	4630      	mov	r0, r6
 8021a38:	f000 f92c 	bl	8021c94 <__multadd>
 8021a3c:	45b9      	cmp	r9, r7
 8021a3e:	4605      	mov	r5, r0
 8021a40:	f04f 0300 	mov.w	r3, #0
 8021a44:	f04f 020a 	mov.w	r2, #10
 8021a48:	4649      	mov	r1, r9
 8021a4a:	4630      	mov	r0, r6
 8021a4c:	d107      	bne.n	8021a5e <_dtoa_r+0xa16>
 8021a4e:	f000 f921 	bl	8021c94 <__multadd>
 8021a52:	4681      	mov	r9, r0
 8021a54:	4607      	mov	r7, r0
 8021a56:	9b04      	ldr	r3, [sp, #16]
 8021a58:	3301      	adds	r3, #1
 8021a5a:	9304      	str	r3, [sp, #16]
 8021a5c:	e774      	b.n	8021948 <_dtoa_r+0x900>
 8021a5e:	f000 f919 	bl	8021c94 <__multadd>
 8021a62:	4639      	mov	r1, r7
 8021a64:	4681      	mov	r9, r0
 8021a66:	2300      	movs	r3, #0
 8021a68:	220a      	movs	r2, #10
 8021a6a:	4630      	mov	r0, r6
 8021a6c:	f000 f912 	bl	8021c94 <__multadd>
 8021a70:	4607      	mov	r7, r0
 8021a72:	e7f0      	b.n	8021a56 <_dtoa_r+0xa0e>
 8021a74:	f1ba 0f00 	cmp.w	sl, #0
 8021a78:	9a01      	ldr	r2, [sp, #4]
 8021a7a:	bfcc      	ite	gt
 8021a7c:	46d0      	movgt	r8, sl
 8021a7e:	f04f 0801 	movle.w	r8, #1
 8021a82:	4490      	add	r8, r2
 8021a84:	f04f 0900 	mov.w	r9, #0
 8021a88:	4629      	mov	r1, r5
 8021a8a:	2201      	movs	r2, #1
 8021a8c:	4630      	mov	r0, r6
 8021a8e:	9302      	str	r3, [sp, #8]
 8021a90:	f000 faf8 	bl	8022084 <__lshift>
 8021a94:	4621      	mov	r1, r4
 8021a96:	4605      	mov	r5, r0
 8021a98:	f000 fb60 	bl	802215c <__mcmp>
 8021a9c:	2800      	cmp	r0, #0
 8021a9e:	dcb1      	bgt.n	8021a04 <_dtoa_r+0x9bc>
 8021aa0:	d102      	bne.n	8021aa8 <_dtoa_r+0xa60>
 8021aa2:	9b02      	ldr	r3, [sp, #8]
 8021aa4:	07db      	lsls	r3, r3, #31
 8021aa6:	d4ad      	bmi.n	8021a04 <_dtoa_r+0x9bc>
 8021aa8:	4643      	mov	r3, r8
 8021aaa:	4698      	mov	r8, r3
 8021aac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021ab0:	2a30      	cmp	r2, #48	; 0x30
 8021ab2:	d0fa      	beq.n	8021aaa <_dtoa_r+0xa62>
 8021ab4:	e6f7      	b.n	80218a6 <_dtoa_r+0x85e>
 8021ab6:	9a01      	ldr	r2, [sp, #4]
 8021ab8:	429a      	cmp	r2, r3
 8021aba:	d1a4      	bne.n	8021a06 <_dtoa_r+0x9be>
 8021abc:	f10b 0b01 	add.w	fp, fp, #1
 8021ac0:	2331      	movs	r3, #49	; 0x31
 8021ac2:	e778      	b.n	80219b6 <_dtoa_r+0x96e>
 8021ac4:	4b14      	ldr	r3, [pc, #80]	; (8021b18 <_dtoa_r+0xad0>)
 8021ac6:	f7ff bb2a 	b.w	802111e <_dtoa_r+0xd6>
 8021aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	f47f ab05 	bne.w	80210dc <_dtoa_r+0x94>
 8021ad2:	4b12      	ldr	r3, [pc, #72]	; (8021b1c <_dtoa_r+0xad4>)
 8021ad4:	f7ff bb23 	b.w	802111e <_dtoa_r+0xd6>
 8021ad8:	f1ba 0f00 	cmp.w	sl, #0
 8021adc:	dc03      	bgt.n	8021ae6 <_dtoa_r+0xa9e>
 8021ade:	9b06      	ldr	r3, [sp, #24]
 8021ae0:	2b02      	cmp	r3, #2
 8021ae2:	f73f aec8 	bgt.w	8021876 <_dtoa_r+0x82e>
 8021ae6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021aea:	4621      	mov	r1, r4
 8021aec:	4628      	mov	r0, r5
 8021aee:	f7ff fa21 	bl	8020f34 <quorem>
 8021af2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021af6:	f808 3b01 	strb.w	r3, [r8], #1
 8021afa:	9a01      	ldr	r2, [sp, #4]
 8021afc:	eba8 0202 	sub.w	r2, r8, r2
 8021b00:	4592      	cmp	sl, r2
 8021b02:	ddb7      	ble.n	8021a74 <_dtoa_r+0xa2c>
 8021b04:	4629      	mov	r1, r5
 8021b06:	2300      	movs	r3, #0
 8021b08:	220a      	movs	r2, #10
 8021b0a:	4630      	mov	r0, r6
 8021b0c:	f000 f8c2 	bl	8021c94 <__multadd>
 8021b10:	4605      	mov	r5, r0
 8021b12:	e7ea      	b.n	8021aea <_dtoa_r+0xaa2>
 8021b14:	08025c86 	.word	0x08025c86
 8021b18:	08025bbc 	.word	0x08025bbc
 8021b1c:	08025c21 	.word	0x08025c21

08021b20 <__env_lock>:
 8021b20:	4801      	ldr	r0, [pc, #4]	; (8021b28 <__env_lock+0x8>)
 8021b22:	f7ff b9ca 	b.w	8020eba <__retarget_lock_acquire_recursive>
 8021b26:	bf00      	nop
 8021b28:	2001712c 	.word	0x2001712c

08021b2c <__env_unlock>:
 8021b2c:	4801      	ldr	r0, [pc, #4]	; (8021b34 <__env_unlock+0x8>)
 8021b2e:	f7ff b9c5 	b.w	8020ebc <__retarget_lock_release_recursive>
 8021b32:	bf00      	nop
 8021b34:	2001712c 	.word	0x2001712c

08021b38 <_free_r>:
 8021b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021b3a:	2900      	cmp	r1, #0
 8021b3c:	d044      	beq.n	8021bc8 <_free_r+0x90>
 8021b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021b42:	9001      	str	r0, [sp, #4]
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	f1a1 0404 	sub.w	r4, r1, #4
 8021b4a:	bfb8      	it	lt
 8021b4c:	18e4      	addlt	r4, r4, r3
 8021b4e:	f7fd fdbd 	bl	801f6cc <__malloc_lock>
 8021b52:	4a1e      	ldr	r2, [pc, #120]	; (8021bcc <_free_r+0x94>)
 8021b54:	9801      	ldr	r0, [sp, #4]
 8021b56:	6813      	ldr	r3, [r2, #0]
 8021b58:	b933      	cbnz	r3, 8021b68 <_free_r+0x30>
 8021b5a:	6063      	str	r3, [r4, #4]
 8021b5c:	6014      	str	r4, [r2, #0]
 8021b5e:	b003      	add	sp, #12
 8021b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b64:	f7fd bdb8 	b.w	801f6d8 <__malloc_unlock>
 8021b68:	42a3      	cmp	r3, r4
 8021b6a:	d908      	bls.n	8021b7e <_free_r+0x46>
 8021b6c:	6825      	ldr	r5, [r4, #0]
 8021b6e:	1961      	adds	r1, r4, r5
 8021b70:	428b      	cmp	r3, r1
 8021b72:	bf01      	itttt	eq
 8021b74:	6819      	ldreq	r1, [r3, #0]
 8021b76:	685b      	ldreq	r3, [r3, #4]
 8021b78:	1949      	addeq	r1, r1, r5
 8021b7a:	6021      	streq	r1, [r4, #0]
 8021b7c:	e7ed      	b.n	8021b5a <_free_r+0x22>
 8021b7e:	461a      	mov	r2, r3
 8021b80:	685b      	ldr	r3, [r3, #4]
 8021b82:	b10b      	cbz	r3, 8021b88 <_free_r+0x50>
 8021b84:	42a3      	cmp	r3, r4
 8021b86:	d9fa      	bls.n	8021b7e <_free_r+0x46>
 8021b88:	6811      	ldr	r1, [r2, #0]
 8021b8a:	1855      	adds	r5, r2, r1
 8021b8c:	42a5      	cmp	r5, r4
 8021b8e:	d10b      	bne.n	8021ba8 <_free_r+0x70>
 8021b90:	6824      	ldr	r4, [r4, #0]
 8021b92:	4421      	add	r1, r4
 8021b94:	1854      	adds	r4, r2, r1
 8021b96:	42a3      	cmp	r3, r4
 8021b98:	6011      	str	r1, [r2, #0]
 8021b9a:	d1e0      	bne.n	8021b5e <_free_r+0x26>
 8021b9c:	681c      	ldr	r4, [r3, #0]
 8021b9e:	685b      	ldr	r3, [r3, #4]
 8021ba0:	6053      	str	r3, [r2, #4]
 8021ba2:	440c      	add	r4, r1
 8021ba4:	6014      	str	r4, [r2, #0]
 8021ba6:	e7da      	b.n	8021b5e <_free_r+0x26>
 8021ba8:	d902      	bls.n	8021bb0 <_free_r+0x78>
 8021baa:	230c      	movs	r3, #12
 8021bac:	6003      	str	r3, [r0, #0]
 8021bae:	e7d6      	b.n	8021b5e <_free_r+0x26>
 8021bb0:	6825      	ldr	r5, [r4, #0]
 8021bb2:	1961      	adds	r1, r4, r5
 8021bb4:	428b      	cmp	r3, r1
 8021bb6:	bf04      	itt	eq
 8021bb8:	6819      	ldreq	r1, [r3, #0]
 8021bba:	685b      	ldreq	r3, [r3, #4]
 8021bbc:	6063      	str	r3, [r4, #4]
 8021bbe:	bf04      	itt	eq
 8021bc0:	1949      	addeq	r1, r1, r5
 8021bc2:	6021      	streq	r1, [r4, #0]
 8021bc4:	6054      	str	r4, [r2, #4]
 8021bc6:	e7ca      	b.n	8021b5e <_free_r+0x26>
 8021bc8:	b003      	add	sp, #12
 8021bca:	bd30      	pop	{r4, r5, pc}
 8021bcc:	20016fe4 	.word	0x20016fe4

08021bd0 <_Balloc>:
 8021bd0:	b570      	push	{r4, r5, r6, lr}
 8021bd2:	69c6      	ldr	r6, [r0, #28]
 8021bd4:	4604      	mov	r4, r0
 8021bd6:	460d      	mov	r5, r1
 8021bd8:	b976      	cbnz	r6, 8021bf8 <_Balloc+0x28>
 8021bda:	2010      	movs	r0, #16
 8021bdc:	f7fd fcc6 	bl	801f56c <malloc>
 8021be0:	4602      	mov	r2, r0
 8021be2:	61e0      	str	r0, [r4, #28]
 8021be4:	b920      	cbnz	r0, 8021bf0 <_Balloc+0x20>
 8021be6:	4b18      	ldr	r3, [pc, #96]	; (8021c48 <_Balloc+0x78>)
 8021be8:	4818      	ldr	r0, [pc, #96]	; (8021c4c <_Balloc+0x7c>)
 8021bea:	216b      	movs	r1, #107	; 0x6b
 8021bec:	f7ff f984 	bl	8020ef8 <__assert_func>
 8021bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021bf4:	6006      	str	r6, [r0, #0]
 8021bf6:	60c6      	str	r6, [r0, #12]
 8021bf8:	69e6      	ldr	r6, [r4, #28]
 8021bfa:	68f3      	ldr	r3, [r6, #12]
 8021bfc:	b183      	cbz	r3, 8021c20 <_Balloc+0x50>
 8021bfe:	69e3      	ldr	r3, [r4, #28]
 8021c00:	68db      	ldr	r3, [r3, #12]
 8021c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021c06:	b9b8      	cbnz	r0, 8021c38 <_Balloc+0x68>
 8021c08:	2101      	movs	r1, #1
 8021c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8021c0e:	1d72      	adds	r2, r6, #5
 8021c10:	0092      	lsls	r2, r2, #2
 8021c12:	4620      	mov	r0, r4
 8021c14:	f7fd fc3a 	bl	801f48c <_calloc_r>
 8021c18:	b160      	cbz	r0, 8021c34 <_Balloc+0x64>
 8021c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021c1e:	e00e      	b.n	8021c3e <_Balloc+0x6e>
 8021c20:	2221      	movs	r2, #33	; 0x21
 8021c22:	2104      	movs	r1, #4
 8021c24:	4620      	mov	r0, r4
 8021c26:	f7fd fc31 	bl	801f48c <_calloc_r>
 8021c2a:	69e3      	ldr	r3, [r4, #28]
 8021c2c:	60f0      	str	r0, [r6, #12]
 8021c2e:	68db      	ldr	r3, [r3, #12]
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d1e4      	bne.n	8021bfe <_Balloc+0x2e>
 8021c34:	2000      	movs	r0, #0
 8021c36:	bd70      	pop	{r4, r5, r6, pc}
 8021c38:	6802      	ldr	r2, [r0, #0]
 8021c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021c3e:	2300      	movs	r3, #0
 8021c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021c44:	e7f7      	b.n	8021c36 <_Balloc+0x66>
 8021c46:	bf00      	nop
 8021c48:	08025a3c 	.word	0x08025a3c
 8021c4c:	08025c97 	.word	0x08025c97

08021c50 <_Bfree>:
 8021c50:	b570      	push	{r4, r5, r6, lr}
 8021c52:	69c6      	ldr	r6, [r0, #28]
 8021c54:	4605      	mov	r5, r0
 8021c56:	460c      	mov	r4, r1
 8021c58:	b976      	cbnz	r6, 8021c78 <_Bfree+0x28>
 8021c5a:	2010      	movs	r0, #16
 8021c5c:	f7fd fc86 	bl	801f56c <malloc>
 8021c60:	4602      	mov	r2, r0
 8021c62:	61e8      	str	r0, [r5, #28]
 8021c64:	b920      	cbnz	r0, 8021c70 <_Bfree+0x20>
 8021c66:	4b09      	ldr	r3, [pc, #36]	; (8021c8c <_Bfree+0x3c>)
 8021c68:	4809      	ldr	r0, [pc, #36]	; (8021c90 <_Bfree+0x40>)
 8021c6a:	218f      	movs	r1, #143	; 0x8f
 8021c6c:	f7ff f944 	bl	8020ef8 <__assert_func>
 8021c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021c74:	6006      	str	r6, [r0, #0]
 8021c76:	60c6      	str	r6, [r0, #12]
 8021c78:	b13c      	cbz	r4, 8021c8a <_Bfree+0x3a>
 8021c7a:	69eb      	ldr	r3, [r5, #28]
 8021c7c:	6862      	ldr	r2, [r4, #4]
 8021c7e:	68db      	ldr	r3, [r3, #12]
 8021c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021c84:	6021      	str	r1, [r4, #0]
 8021c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021c8a:	bd70      	pop	{r4, r5, r6, pc}
 8021c8c:	08025a3c 	.word	0x08025a3c
 8021c90:	08025c97 	.word	0x08025c97

08021c94 <__multadd>:
 8021c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c98:	690d      	ldr	r5, [r1, #16]
 8021c9a:	4607      	mov	r7, r0
 8021c9c:	460c      	mov	r4, r1
 8021c9e:	461e      	mov	r6, r3
 8021ca0:	f101 0c14 	add.w	ip, r1, #20
 8021ca4:	2000      	movs	r0, #0
 8021ca6:	f8dc 3000 	ldr.w	r3, [ip]
 8021caa:	b299      	uxth	r1, r3
 8021cac:	fb02 6101 	mla	r1, r2, r1, r6
 8021cb0:	0c1e      	lsrs	r6, r3, #16
 8021cb2:	0c0b      	lsrs	r3, r1, #16
 8021cb4:	fb02 3306 	mla	r3, r2, r6, r3
 8021cb8:	b289      	uxth	r1, r1
 8021cba:	3001      	adds	r0, #1
 8021cbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021cc0:	4285      	cmp	r5, r0
 8021cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8021cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021cca:	dcec      	bgt.n	8021ca6 <__multadd+0x12>
 8021ccc:	b30e      	cbz	r6, 8021d12 <__multadd+0x7e>
 8021cce:	68a3      	ldr	r3, [r4, #8]
 8021cd0:	42ab      	cmp	r3, r5
 8021cd2:	dc19      	bgt.n	8021d08 <__multadd+0x74>
 8021cd4:	6861      	ldr	r1, [r4, #4]
 8021cd6:	4638      	mov	r0, r7
 8021cd8:	3101      	adds	r1, #1
 8021cda:	f7ff ff79 	bl	8021bd0 <_Balloc>
 8021cde:	4680      	mov	r8, r0
 8021ce0:	b928      	cbnz	r0, 8021cee <__multadd+0x5a>
 8021ce2:	4602      	mov	r2, r0
 8021ce4:	4b0c      	ldr	r3, [pc, #48]	; (8021d18 <__multadd+0x84>)
 8021ce6:	480d      	ldr	r0, [pc, #52]	; (8021d1c <__multadd+0x88>)
 8021ce8:	21ba      	movs	r1, #186	; 0xba
 8021cea:	f7ff f905 	bl	8020ef8 <__assert_func>
 8021cee:	6922      	ldr	r2, [r4, #16]
 8021cf0:	3202      	adds	r2, #2
 8021cf2:	f104 010c 	add.w	r1, r4, #12
 8021cf6:	0092      	lsls	r2, r2, #2
 8021cf8:	300c      	adds	r0, #12
 8021cfa:	f7ff f8e8 	bl	8020ece <memcpy>
 8021cfe:	4621      	mov	r1, r4
 8021d00:	4638      	mov	r0, r7
 8021d02:	f7ff ffa5 	bl	8021c50 <_Bfree>
 8021d06:	4644      	mov	r4, r8
 8021d08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021d0c:	3501      	adds	r5, #1
 8021d0e:	615e      	str	r6, [r3, #20]
 8021d10:	6125      	str	r5, [r4, #16]
 8021d12:	4620      	mov	r0, r4
 8021d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d18:	08025c86 	.word	0x08025c86
 8021d1c:	08025c97 	.word	0x08025c97

08021d20 <__s2b>:
 8021d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d24:	460c      	mov	r4, r1
 8021d26:	4615      	mov	r5, r2
 8021d28:	461f      	mov	r7, r3
 8021d2a:	2209      	movs	r2, #9
 8021d2c:	3308      	adds	r3, #8
 8021d2e:	4606      	mov	r6, r0
 8021d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8021d34:	2100      	movs	r1, #0
 8021d36:	2201      	movs	r2, #1
 8021d38:	429a      	cmp	r2, r3
 8021d3a:	db09      	blt.n	8021d50 <__s2b+0x30>
 8021d3c:	4630      	mov	r0, r6
 8021d3e:	f7ff ff47 	bl	8021bd0 <_Balloc>
 8021d42:	b940      	cbnz	r0, 8021d56 <__s2b+0x36>
 8021d44:	4602      	mov	r2, r0
 8021d46:	4b19      	ldr	r3, [pc, #100]	; (8021dac <__s2b+0x8c>)
 8021d48:	4819      	ldr	r0, [pc, #100]	; (8021db0 <__s2b+0x90>)
 8021d4a:	21d3      	movs	r1, #211	; 0xd3
 8021d4c:	f7ff f8d4 	bl	8020ef8 <__assert_func>
 8021d50:	0052      	lsls	r2, r2, #1
 8021d52:	3101      	adds	r1, #1
 8021d54:	e7f0      	b.n	8021d38 <__s2b+0x18>
 8021d56:	9b08      	ldr	r3, [sp, #32]
 8021d58:	6143      	str	r3, [r0, #20]
 8021d5a:	2d09      	cmp	r5, #9
 8021d5c:	f04f 0301 	mov.w	r3, #1
 8021d60:	6103      	str	r3, [r0, #16]
 8021d62:	dd16      	ble.n	8021d92 <__s2b+0x72>
 8021d64:	f104 0909 	add.w	r9, r4, #9
 8021d68:	46c8      	mov	r8, r9
 8021d6a:	442c      	add	r4, r5
 8021d6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021d70:	4601      	mov	r1, r0
 8021d72:	3b30      	subs	r3, #48	; 0x30
 8021d74:	220a      	movs	r2, #10
 8021d76:	4630      	mov	r0, r6
 8021d78:	f7ff ff8c 	bl	8021c94 <__multadd>
 8021d7c:	45a0      	cmp	r8, r4
 8021d7e:	d1f5      	bne.n	8021d6c <__s2b+0x4c>
 8021d80:	f1a5 0408 	sub.w	r4, r5, #8
 8021d84:	444c      	add	r4, r9
 8021d86:	1b2d      	subs	r5, r5, r4
 8021d88:	1963      	adds	r3, r4, r5
 8021d8a:	42bb      	cmp	r3, r7
 8021d8c:	db04      	blt.n	8021d98 <__s2b+0x78>
 8021d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d92:	340a      	adds	r4, #10
 8021d94:	2509      	movs	r5, #9
 8021d96:	e7f6      	b.n	8021d86 <__s2b+0x66>
 8021d98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021d9c:	4601      	mov	r1, r0
 8021d9e:	3b30      	subs	r3, #48	; 0x30
 8021da0:	220a      	movs	r2, #10
 8021da2:	4630      	mov	r0, r6
 8021da4:	f7ff ff76 	bl	8021c94 <__multadd>
 8021da8:	e7ee      	b.n	8021d88 <__s2b+0x68>
 8021daa:	bf00      	nop
 8021dac:	08025c86 	.word	0x08025c86
 8021db0:	08025c97 	.word	0x08025c97

08021db4 <__hi0bits>:
 8021db4:	0c03      	lsrs	r3, r0, #16
 8021db6:	041b      	lsls	r3, r3, #16
 8021db8:	b9d3      	cbnz	r3, 8021df0 <__hi0bits+0x3c>
 8021dba:	0400      	lsls	r0, r0, #16
 8021dbc:	2310      	movs	r3, #16
 8021dbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021dc2:	bf04      	itt	eq
 8021dc4:	0200      	lsleq	r0, r0, #8
 8021dc6:	3308      	addeq	r3, #8
 8021dc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021dcc:	bf04      	itt	eq
 8021dce:	0100      	lsleq	r0, r0, #4
 8021dd0:	3304      	addeq	r3, #4
 8021dd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021dd6:	bf04      	itt	eq
 8021dd8:	0080      	lsleq	r0, r0, #2
 8021dda:	3302      	addeq	r3, #2
 8021ddc:	2800      	cmp	r0, #0
 8021dde:	db05      	blt.n	8021dec <__hi0bits+0x38>
 8021de0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021de4:	f103 0301 	add.w	r3, r3, #1
 8021de8:	bf08      	it	eq
 8021dea:	2320      	moveq	r3, #32
 8021dec:	4618      	mov	r0, r3
 8021dee:	4770      	bx	lr
 8021df0:	2300      	movs	r3, #0
 8021df2:	e7e4      	b.n	8021dbe <__hi0bits+0xa>

08021df4 <__lo0bits>:
 8021df4:	6803      	ldr	r3, [r0, #0]
 8021df6:	f013 0207 	ands.w	r2, r3, #7
 8021dfa:	d00c      	beq.n	8021e16 <__lo0bits+0x22>
 8021dfc:	07d9      	lsls	r1, r3, #31
 8021dfe:	d422      	bmi.n	8021e46 <__lo0bits+0x52>
 8021e00:	079a      	lsls	r2, r3, #30
 8021e02:	bf49      	itett	mi
 8021e04:	085b      	lsrmi	r3, r3, #1
 8021e06:	089b      	lsrpl	r3, r3, #2
 8021e08:	6003      	strmi	r3, [r0, #0]
 8021e0a:	2201      	movmi	r2, #1
 8021e0c:	bf5c      	itt	pl
 8021e0e:	6003      	strpl	r3, [r0, #0]
 8021e10:	2202      	movpl	r2, #2
 8021e12:	4610      	mov	r0, r2
 8021e14:	4770      	bx	lr
 8021e16:	b299      	uxth	r1, r3
 8021e18:	b909      	cbnz	r1, 8021e1e <__lo0bits+0x2a>
 8021e1a:	0c1b      	lsrs	r3, r3, #16
 8021e1c:	2210      	movs	r2, #16
 8021e1e:	b2d9      	uxtb	r1, r3
 8021e20:	b909      	cbnz	r1, 8021e26 <__lo0bits+0x32>
 8021e22:	3208      	adds	r2, #8
 8021e24:	0a1b      	lsrs	r3, r3, #8
 8021e26:	0719      	lsls	r1, r3, #28
 8021e28:	bf04      	itt	eq
 8021e2a:	091b      	lsreq	r3, r3, #4
 8021e2c:	3204      	addeq	r2, #4
 8021e2e:	0799      	lsls	r1, r3, #30
 8021e30:	bf04      	itt	eq
 8021e32:	089b      	lsreq	r3, r3, #2
 8021e34:	3202      	addeq	r2, #2
 8021e36:	07d9      	lsls	r1, r3, #31
 8021e38:	d403      	bmi.n	8021e42 <__lo0bits+0x4e>
 8021e3a:	085b      	lsrs	r3, r3, #1
 8021e3c:	f102 0201 	add.w	r2, r2, #1
 8021e40:	d003      	beq.n	8021e4a <__lo0bits+0x56>
 8021e42:	6003      	str	r3, [r0, #0]
 8021e44:	e7e5      	b.n	8021e12 <__lo0bits+0x1e>
 8021e46:	2200      	movs	r2, #0
 8021e48:	e7e3      	b.n	8021e12 <__lo0bits+0x1e>
 8021e4a:	2220      	movs	r2, #32
 8021e4c:	e7e1      	b.n	8021e12 <__lo0bits+0x1e>
	...

08021e50 <__i2b>:
 8021e50:	b510      	push	{r4, lr}
 8021e52:	460c      	mov	r4, r1
 8021e54:	2101      	movs	r1, #1
 8021e56:	f7ff febb 	bl	8021bd0 <_Balloc>
 8021e5a:	4602      	mov	r2, r0
 8021e5c:	b928      	cbnz	r0, 8021e6a <__i2b+0x1a>
 8021e5e:	4b05      	ldr	r3, [pc, #20]	; (8021e74 <__i2b+0x24>)
 8021e60:	4805      	ldr	r0, [pc, #20]	; (8021e78 <__i2b+0x28>)
 8021e62:	f240 1145 	movw	r1, #325	; 0x145
 8021e66:	f7ff f847 	bl	8020ef8 <__assert_func>
 8021e6a:	2301      	movs	r3, #1
 8021e6c:	6144      	str	r4, [r0, #20]
 8021e6e:	6103      	str	r3, [r0, #16]
 8021e70:	bd10      	pop	{r4, pc}
 8021e72:	bf00      	nop
 8021e74:	08025c86 	.word	0x08025c86
 8021e78:	08025c97 	.word	0x08025c97

08021e7c <__multiply>:
 8021e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e80:	4691      	mov	r9, r2
 8021e82:	690a      	ldr	r2, [r1, #16]
 8021e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021e88:	429a      	cmp	r2, r3
 8021e8a:	bfb8      	it	lt
 8021e8c:	460b      	movlt	r3, r1
 8021e8e:	460c      	mov	r4, r1
 8021e90:	bfbc      	itt	lt
 8021e92:	464c      	movlt	r4, r9
 8021e94:	4699      	movlt	r9, r3
 8021e96:	6927      	ldr	r7, [r4, #16]
 8021e98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021e9c:	68a3      	ldr	r3, [r4, #8]
 8021e9e:	6861      	ldr	r1, [r4, #4]
 8021ea0:	eb07 060a 	add.w	r6, r7, sl
 8021ea4:	42b3      	cmp	r3, r6
 8021ea6:	b085      	sub	sp, #20
 8021ea8:	bfb8      	it	lt
 8021eaa:	3101      	addlt	r1, #1
 8021eac:	f7ff fe90 	bl	8021bd0 <_Balloc>
 8021eb0:	b930      	cbnz	r0, 8021ec0 <__multiply+0x44>
 8021eb2:	4602      	mov	r2, r0
 8021eb4:	4b44      	ldr	r3, [pc, #272]	; (8021fc8 <__multiply+0x14c>)
 8021eb6:	4845      	ldr	r0, [pc, #276]	; (8021fcc <__multiply+0x150>)
 8021eb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021ebc:	f7ff f81c 	bl	8020ef8 <__assert_func>
 8021ec0:	f100 0514 	add.w	r5, r0, #20
 8021ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021ec8:	462b      	mov	r3, r5
 8021eca:	2200      	movs	r2, #0
 8021ecc:	4543      	cmp	r3, r8
 8021ece:	d321      	bcc.n	8021f14 <__multiply+0x98>
 8021ed0:	f104 0314 	add.w	r3, r4, #20
 8021ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021ed8:	f109 0314 	add.w	r3, r9, #20
 8021edc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021ee0:	9202      	str	r2, [sp, #8]
 8021ee2:	1b3a      	subs	r2, r7, r4
 8021ee4:	3a15      	subs	r2, #21
 8021ee6:	f022 0203 	bic.w	r2, r2, #3
 8021eea:	3204      	adds	r2, #4
 8021eec:	f104 0115 	add.w	r1, r4, #21
 8021ef0:	428f      	cmp	r7, r1
 8021ef2:	bf38      	it	cc
 8021ef4:	2204      	movcc	r2, #4
 8021ef6:	9201      	str	r2, [sp, #4]
 8021ef8:	9a02      	ldr	r2, [sp, #8]
 8021efa:	9303      	str	r3, [sp, #12]
 8021efc:	429a      	cmp	r2, r3
 8021efe:	d80c      	bhi.n	8021f1a <__multiply+0x9e>
 8021f00:	2e00      	cmp	r6, #0
 8021f02:	dd03      	ble.n	8021f0c <__multiply+0x90>
 8021f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d05b      	beq.n	8021fc4 <__multiply+0x148>
 8021f0c:	6106      	str	r6, [r0, #16]
 8021f0e:	b005      	add	sp, #20
 8021f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f14:	f843 2b04 	str.w	r2, [r3], #4
 8021f18:	e7d8      	b.n	8021ecc <__multiply+0x50>
 8021f1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8021f1e:	f1ba 0f00 	cmp.w	sl, #0
 8021f22:	d024      	beq.n	8021f6e <__multiply+0xf2>
 8021f24:	f104 0e14 	add.w	lr, r4, #20
 8021f28:	46a9      	mov	r9, r5
 8021f2a:	f04f 0c00 	mov.w	ip, #0
 8021f2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021f32:	f8d9 1000 	ldr.w	r1, [r9]
 8021f36:	fa1f fb82 	uxth.w	fp, r2
 8021f3a:	b289      	uxth	r1, r1
 8021f3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8021f40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021f44:	f8d9 2000 	ldr.w	r2, [r9]
 8021f48:	4461      	add	r1, ip
 8021f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021f4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8021f52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021f56:	b289      	uxth	r1, r1
 8021f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021f5c:	4577      	cmp	r7, lr
 8021f5e:	f849 1b04 	str.w	r1, [r9], #4
 8021f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021f66:	d8e2      	bhi.n	8021f2e <__multiply+0xb2>
 8021f68:	9a01      	ldr	r2, [sp, #4]
 8021f6a:	f845 c002 	str.w	ip, [r5, r2]
 8021f6e:	9a03      	ldr	r2, [sp, #12]
 8021f70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021f74:	3304      	adds	r3, #4
 8021f76:	f1b9 0f00 	cmp.w	r9, #0
 8021f7a:	d021      	beq.n	8021fc0 <__multiply+0x144>
 8021f7c:	6829      	ldr	r1, [r5, #0]
 8021f7e:	f104 0c14 	add.w	ip, r4, #20
 8021f82:	46ae      	mov	lr, r5
 8021f84:	f04f 0a00 	mov.w	sl, #0
 8021f88:	f8bc b000 	ldrh.w	fp, [ip]
 8021f8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021f90:	fb09 220b 	mla	r2, r9, fp, r2
 8021f94:	4452      	add	r2, sl
 8021f96:	b289      	uxth	r1, r1
 8021f98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021f9c:	f84e 1b04 	str.w	r1, [lr], #4
 8021fa0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021fa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021fa8:	f8be 1000 	ldrh.w	r1, [lr]
 8021fac:	fb09 110a 	mla	r1, r9, sl, r1
 8021fb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8021fb4:	4567      	cmp	r7, ip
 8021fb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021fba:	d8e5      	bhi.n	8021f88 <__multiply+0x10c>
 8021fbc:	9a01      	ldr	r2, [sp, #4]
 8021fbe:	50a9      	str	r1, [r5, r2]
 8021fc0:	3504      	adds	r5, #4
 8021fc2:	e799      	b.n	8021ef8 <__multiply+0x7c>
 8021fc4:	3e01      	subs	r6, #1
 8021fc6:	e79b      	b.n	8021f00 <__multiply+0x84>
 8021fc8:	08025c86 	.word	0x08025c86
 8021fcc:	08025c97 	.word	0x08025c97

08021fd0 <__pow5mult>:
 8021fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021fd4:	4615      	mov	r5, r2
 8021fd6:	f012 0203 	ands.w	r2, r2, #3
 8021fda:	4606      	mov	r6, r0
 8021fdc:	460f      	mov	r7, r1
 8021fde:	d007      	beq.n	8021ff0 <__pow5mult+0x20>
 8021fe0:	4c25      	ldr	r4, [pc, #148]	; (8022078 <__pow5mult+0xa8>)
 8021fe2:	3a01      	subs	r2, #1
 8021fe4:	2300      	movs	r3, #0
 8021fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021fea:	f7ff fe53 	bl	8021c94 <__multadd>
 8021fee:	4607      	mov	r7, r0
 8021ff0:	10ad      	asrs	r5, r5, #2
 8021ff2:	d03d      	beq.n	8022070 <__pow5mult+0xa0>
 8021ff4:	69f4      	ldr	r4, [r6, #28]
 8021ff6:	b97c      	cbnz	r4, 8022018 <__pow5mult+0x48>
 8021ff8:	2010      	movs	r0, #16
 8021ffa:	f7fd fab7 	bl	801f56c <malloc>
 8021ffe:	4602      	mov	r2, r0
 8022000:	61f0      	str	r0, [r6, #28]
 8022002:	b928      	cbnz	r0, 8022010 <__pow5mult+0x40>
 8022004:	4b1d      	ldr	r3, [pc, #116]	; (802207c <__pow5mult+0xac>)
 8022006:	481e      	ldr	r0, [pc, #120]	; (8022080 <__pow5mult+0xb0>)
 8022008:	f240 11b3 	movw	r1, #435	; 0x1b3
 802200c:	f7fe ff74 	bl	8020ef8 <__assert_func>
 8022010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022014:	6004      	str	r4, [r0, #0]
 8022016:	60c4      	str	r4, [r0, #12]
 8022018:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802201c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022020:	b94c      	cbnz	r4, 8022036 <__pow5mult+0x66>
 8022022:	f240 2171 	movw	r1, #625	; 0x271
 8022026:	4630      	mov	r0, r6
 8022028:	f7ff ff12 	bl	8021e50 <__i2b>
 802202c:	2300      	movs	r3, #0
 802202e:	f8c8 0008 	str.w	r0, [r8, #8]
 8022032:	4604      	mov	r4, r0
 8022034:	6003      	str	r3, [r0, #0]
 8022036:	f04f 0900 	mov.w	r9, #0
 802203a:	07eb      	lsls	r3, r5, #31
 802203c:	d50a      	bpl.n	8022054 <__pow5mult+0x84>
 802203e:	4639      	mov	r1, r7
 8022040:	4622      	mov	r2, r4
 8022042:	4630      	mov	r0, r6
 8022044:	f7ff ff1a 	bl	8021e7c <__multiply>
 8022048:	4639      	mov	r1, r7
 802204a:	4680      	mov	r8, r0
 802204c:	4630      	mov	r0, r6
 802204e:	f7ff fdff 	bl	8021c50 <_Bfree>
 8022052:	4647      	mov	r7, r8
 8022054:	106d      	asrs	r5, r5, #1
 8022056:	d00b      	beq.n	8022070 <__pow5mult+0xa0>
 8022058:	6820      	ldr	r0, [r4, #0]
 802205a:	b938      	cbnz	r0, 802206c <__pow5mult+0x9c>
 802205c:	4622      	mov	r2, r4
 802205e:	4621      	mov	r1, r4
 8022060:	4630      	mov	r0, r6
 8022062:	f7ff ff0b 	bl	8021e7c <__multiply>
 8022066:	6020      	str	r0, [r4, #0]
 8022068:	f8c0 9000 	str.w	r9, [r0]
 802206c:	4604      	mov	r4, r0
 802206e:	e7e4      	b.n	802203a <__pow5mult+0x6a>
 8022070:	4638      	mov	r0, r7
 8022072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022076:	bf00      	nop
 8022078:	08025de0 	.word	0x08025de0
 802207c:	08025a3c 	.word	0x08025a3c
 8022080:	08025c97 	.word	0x08025c97

08022084 <__lshift>:
 8022084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022088:	460c      	mov	r4, r1
 802208a:	6849      	ldr	r1, [r1, #4]
 802208c:	6923      	ldr	r3, [r4, #16]
 802208e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022092:	68a3      	ldr	r3, [r4, #8]
 8022094:	4607      	mov	r7, r0
 8022096:	4691      	mov	r9, r2
 8022098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802209c:	f108 0601 	add.w	r6, r8, #1
 80220a0:	42b3      	cmp	r3, r6
 80220a2:	db0b      	blt.n	80220bc <__lshift+0x38>
 80220a4:	4638      	mov	r0, r7
 80220a6:	f7ff fd93 	bl	8021bd0 <_Balloc>
 80220aa:	4605      	mov	r5, r0
 80220ac:	b948      	cbnz	r0, 80220c2 <__lshift+0x3e>
 80220ae:	4602      	mov	r2, r0
 80220b0:	4b28      	ldr	r3, [pc, #160]	; (8022154 <__lshift+0xd0>)
 80220b2:	4829      	ldr	r0, [pc, #164]	; (8022158 <__lshift+0xd4>)
 80220b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80220b8:	f7fe ff1e 	bl	8020ef8 <__assert_func>
 80220bc:	3101      	adds	r1, #1
 80220be:	005b      	lsls	r3, r3, #1
 80220c0:	e7ee      	b.n	80220a0 <__lshift+0x1c>
 80220c2:	2300      	movs	r3, #0
 80220c4:	f100 0114 	add.w	r1, r0, #20
 80220c8:	f100 0210 	add.w	r2, r0, #16
 80220cc:	4618      	mov	r0, r3
 80220ce:	4553      	cmp	r3, sl
 80220d0:	db33      	blt.n	802213a <__lshift+0xb6>
 80220d2:	6920      	ldr	r0, [r4, #16]
 80220d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80220d8:	f104 0314 	add.w	r3, r4, #20
 80220dc:	f019 091f 	ands.w	r9, r9, #31
 80220e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80220e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80220e8:	d02b      	beq.n	8022142 <__lshift+0xbe>
 80220ea:	f1c9 0e20 	rsb	lr, r9, #32
 80220ee:	468a      	mov	sl, r1
 80220f0:	2200      	movs	r2, #0
 80220f2:	6818      	ldr	r0, [r3, #0]
 80220f4:	fa00 f009 	lsl.w	r0, r0, r9
 80220f8:	4310      	orrs	r0, r2
 80220fa:	f84a 0b04 	str.w	r0, [sl], #4
 80220fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8022102:	459c      	cmp	ip, r3
 8022104:	fa22 f20e 	lsr.w	r2, r2, lr
 8022108:	d8f3      	bhi.n	80220f2 <__lshift+0x6e>
 802210a:	ebac 0304 	sub.w	r3, ip, r4
 802210e:	3b15      	subs	r3, #21
 8022110:	f023 0303 	bic.w	r3, r3, #3
 8022114:	3304      	adds	r3, #4
 8022116:	f104 0015 	add.w	r0, r4, #21
 802211a:	4584      	cmp	ip, r0
 802211c:	bf38      	it	cc
 802211e:	2304      	movcc	r3, #4
 8022120:	50ca      	str	r2, [r1, r3]
 8022122:	b10a      	cbz	r2, 8022128 <__lshift+0xa4>
 8022124:	f108 0602 	add.w	r6, r8, #2
 8022128:	3e01      	subs	r6, #1
 802212a:	4638      	mov	r0, r7
 802212c:	612e      	str	r6, [r5, #16]
 802212e:	4621      	mov	r1, r4
 8022130:	f7ff fd8e 	bl	8021c50 <_Bfree>
 8022134:	4628      	mov	r0, r5
 8022136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802213a:	f842 0f04 	str.w	r0, [r2, #4]!
 802213e:	3301      	adds	r3, #1
 8022140:	e7c5      	b.n	80220ce <__lshift+0x4a>
 8022142:	3904      	subs	r1, #4
 8022144:	f853 2b04 	ldr.w	r2, [r3], #4
 8022148:	f841 2f04 	str.w	r2, [r1, #4]!
 802214c:	459c      	cmp	ip, r3
 802214e:	d8f9      	bhi.n	8022144 <__lshift+0xc0>
 8022150:	e7ea      	b.n	8022128 <__lshift+0xa4>
 8022152:	bf00      	nop
 8022154:	08025c86 	.word	0x08025c86
 8022158:	08025c97 	.word	0x08025c97

0802215c <__mcmp>:
 802215c:	b530      	push	{r4, r5, lr}
 802215e:	6902      	ldr	r2, [r0, #16]
 8022160:	690c      	ldr	r4, [r1, #16]
 8022162:	1b12      	subs	r2, r2, r4
 8022164:	d10e      	bne.n	8022184 <__mcmp+0x28>
 8022166:	f100 0314 	add.w	r3, r0, #20
 802216a:	3114      	adds	r1, #20
 802216c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802217c:	42a5      	cmp	r5, r4
 802217e:	d003      	beq.n	8022188 <__mcmp+0x2c>
 8022180:	d305      	bcc.n	802218e <__mcmp+0x32>
 8022182:	2201      	movs	r2, #1
 8022184:	4610      	mov	r0, r2
 8022186:	bd30      	pop	{r4, r5, pc}
 8022188:	4283      	cmp	r3, r0
 802218a:	d3f3      	bcc.n	8022174 <__mcmp+0x18>
 802218c:	e7fa      	b.n	8022184 <__mcmp+0x28>
 802218e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022192:	e7f7      	b.n	8022184 <__mcmp+0x28>

08022194 <__mdiff>:
 8022194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022198:	460c      	mov	r4, r1
 802219a:	4606      	mov	r6, r0
 802219c:	4611      	mov	r1, r2
 802219e:	4620      	mov	r0, r4
 80221a0:	4690      	mov	r8, r2
 80221a2:	f7ff ffdb 	bl	802215c <__mcmp>
 80221a6:	1e05      	subs	r5, r0, #0
 80221a8:	d110      	bne.n	80221cc <__mdiff+0x38>
 80221aa:	4629      	mov	r1, r5
 80221ac:	4630      	mov	r0, r6
 80221ae:	f7ff fd0f 	bl	8021bd0 <_Balloc>
 80221b2:	b930      	cbnz	r0, 80221c2 <__mdiff+0x2e>
 80221b4:	4b3a      	ldr	r3, [pc, #232]	; (80222a0 <__mdiff+0x10c>)
 80221b6:	4602      	mov	r2, r0
 80221b8:	f240 2137 	movw	r1, #567	; 0x237
 80221bc:	4839      	ldr	r0, [pc, #228]	; (80222a4 <__mdiff+0x110>)
 80221be:	f7fe fe9b 	bl	8020ef8 <__assert_func>
 80221c2:	2301      	movs	r3, #1
 80221c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80221c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221cc:	bfa4      	itt	ge
 80221ce:	4643      	movge	r3, r8
 80221d0:	46a0      	movge	r8, r4
 80221d2:	4630      	mov	r0, r6
 80221d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80221d8:	bfa6      	itte	ge
 80221da:	461c      	movge	r4, r3
 80221dc:	2500      	movge	r5, #0
 80221de:	2501      	movlt	r5, #1
 80221e0:	f7ff fcf6 	bl	8021bd0 <_Balloc>
 80221e4:	b920      	cbnz	r0, 80221f0 <__mdiff+0x5c>
 80221e6:	4b2e      	ldr	r3, [pc, #184]	; (80222a0 <__mdiff+0x10c>)
 80221e8:	4602      	mov	r2, r0
 80221ea:	f240 2145 	movw	r1, #581	; 0x245
 80221ee:	e7e5      	b.n	80221bc <__mdiff+0x28>
 80221f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80221f4:	6926      	ldr	r6, [r4, #16]
 80221f6:	60c5      	str	r5, [r0, #12]
 80221f8:	f104 0914 	add.w	r9, r4, #20
 80221fc:	f108 0514 	add.w	r5, r8, #20
 8022200:	f100 0e14 	add.w	lr, r0, #20
 8022204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802220c:	f108 0210 	add.w	r2, r8, #16
 8022210:	46f2      	mov	sl, lr
 8022212:	2100      	movs	r1, #0
 8022214:	f859 3b04 	ldr.w	r3, [r9], #4
 8022218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802221c:	fa11 f88b 	uxtah	r8, r1, fp
 8022220:	b299      	uxth	r1, r3
 8022222:	0c1b      	lsrs	r3, r3, #16
 8022224:	eba8 0801 	sub.w	r8, r8, r1
 8022228:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802222c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022230:	fa1f f888 	uxth.w	r8, r8
 8022234:	1419      	asrs	r1, r3, #16
 8022236:	454e      	cmp	r6, r9
 8022238:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802223c:	f84a 3b04 	str.w	r3, [sl], #4
 8022240:	d8e8      	bhi.n	8022214 <__mdiff+0x80>
 8022242:	1b33      	subs	r3, r6, r4
 8022244:	3b15      	subs	r3, #21
 8022246:	f023 0303 	bic.w	r3, r3, #3
 802224a:	3304      	adds	r3, #4
 802224c:	3415      	adds	r4, #21
 802224e:	42a6      	cmp	r6, r4
 8022250:	bf38      	it	cc
 8022252:	2304      	movcc	r3, #4
 8022254:	441d      	add	r5, r3
 8022256:	4473      	add	r3, lr
 8022258:	469e      	mov	lr, r3
 802225a:	462e      	mov	r6, r5
 802225c:	4566      	cmp	r6, ip
 802225e:	d30e      	bcc.n	802227e <__mdiff+0xea>
 8022260:	f10c 0203 	add.w	r2, ip, #3
 8022264:	1b52      	subs	r2, r2, r5
 8022266:	f022 0203 	bic.w	r2, r2, #3
 802226a:	3d03      	subs	r5, #3
 802226c:	45ac      	cmp	ip, r5
 802226e:	bf38      	it	cc
 8022270:	2200      	movcc	r2, #0
 8022272:	4413      	add	r3, r2
 8022274:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022278:	b17a      	cbz	r2, 802229a <__mdiff+0x106>
 802227a:	6107      	str	r7, [r0, #16]
 802227c:	e7a4      	b.n	80221c8 <__mdiff+0x34>
 802227e:	f856 8b04 	ldr.w	r8, [r6], #4
 8022282:	fa11 f288 	uxtah	r2, r1, r8
 8022286:	1414      	asrs	r4, r2, #16
 8022288:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802228c:	b292      	uxth	r2, r2
 802228e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022292:	f84e 2b04 	str.w	r2, [lr], #4
 8022296:	1421      	asrs	r1, r4, #16
 8022298:	e7e0      	b.n	802225c <__mdiff+0xc8>
 802229a:	3f01      	subs	r7, #1
 802229c:	e7ea      	b.n	8022274 <__mdiff+0xe0>
 802229e:	bf00      	nop
 80222a0:	08025c86 	.word	0x08025c86
 80222a4:	08025c97 	.word	0x08025c97

080222a8 <__ulp>:
 80222a8:	b082      	sub	sp, #8
 80222aa:	ed8d 0b00 	vstr	d0, [sp]
 80222ae:	9a01      	ldr	r2, [sp, #4]
 80222b0:	4b0f      	ldr	r3, [pc, #60]	; (80222f0 <__ulp+0x48>)
 80222b2:	4013      	ands	r3, r2
 80222b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80222b8:	2b00      	cmp	r3, #0
 80222ba:	dc08      	bgt.n	80222ce <__ulp+0x26>
 80222bc:	425b      	negs	r3, r3
 80222be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80222c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80222c6:	da04      	bge.n	80222d2 <__ulp+0x2a>
 80222c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80222cc:	4113      	asrs	r3, r2
 80222ce:	2200      	movs	r2, #0
 80222d0:	e008      	b.n	80222e4 <__ulp+0x3c>
 80222d2:	f1a2 0314 	sub.w	r3, r2, #20
 80222d6:	2b1e      	cmp	r3, #30
 80222d8:	bfda      	itte	le
 80222da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80222de:	40da      	lsrle	r2, r3
 80222e0:	2201      	movgt	r2, #1
 80222e2:	2300      	movs	r3, #0
 80222e4:	4619      	mov	r1, r3
 80222e6:	4610      	mov	r0, r2
 80222e8:	ec41 0b10 	vmov	d0, r0, r1
 80222ec:	b002      	add	sp, #8
 80222ee:	4770      	bx	lr
 80222f0:	7ff00000 	.word	0x7ff00000

080222f4 <__b2d>:
 80222f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222f8:	6906      	ldr	r6, [r0, #16]
 80222fa:	f100 0814 	add.w	r8, r0, #20
 80222fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8022302:	1f37      	subs	r7, r6, #4
 8022304:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022308:	4610      	mov	r0, r2
 802230a:	f7ff fd53 	bl	8021db4 <__hi0bits>
 802230e:	f1c0 0320 	rsb	r3, r0, #32
 8022312:	280a      	cmp	r0, #10
 8022314:	600b      	str	r3, [r1, #0]
 8022316:	491b      	ldr	r1, [pc, #108]	; (8022384 <__b2d+0x90>)
 8022318:	dc15      	bgt.n	8022346 <__b2d+0x52>
 802231a:	f1c0 0c0b 	rsb	ip, r0, #11
 802231e:	fa22 f30c 	lsr.w	r3, r2, ip
 8022322:	45b8      	cmp	r8, r7
 8022324:	ea43 0501 	orr.w	r5, r3, r1
 8022328:	bf34      	ite	cc
 802232a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802232e:	2300      	movcs	r3, #0
 8022330:	3015      	adds	r0, #21
 8022332:	fa02 f000 	lsl.w	r0, r2, r0
 8022336:	fa23 f30c 	lsr.w	r3, r3, ip
 802233a:	4303      	orrs	r3, r0
 802233c:	461c      	mov	r4, r3
 802233e:	ec45 4b10 	vmov	d0, r4, r5
 8022342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022346:	45b8      	cmp	r8, r7
 8022348:	bf3a      	itte	cc
 802234a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802234e:	f1a6 0708 	subcc.w	r7, r6, #8
 8022352:	2300      	movcs	r3, #0
 8022354:	380b      	subs	r0, #11
 8022356:	d012      	beq.n	802237e <__b2d+0x8a>
 8022358:	f1c0 0120 	rsb	r1, r0, #32
 802235c:	fa23 f401 	lsr.w	r4, r3, r1
 8022360:	4082      	lsls	r2, r0
 8022362:	4322      	orrs	r2, r4
 8022364:	4547      	cmp	r7, r8
 8022366:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802236a:	bf8c      	ite	hi
 802236c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8022370:	2200      	movls	r2, #0
 8022372:	4083      	lsls	r3, r0
 8022374:	40ca      	lsrs	r2, r1
 8022376:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802237a:	4313      	orrs	r3, r2
 802237c:	e7de      	b.n	802233c <__b2d+0x48>
 802237e:	ea42 0501 	orr.w	r5, r2, r1
 8022382:	e7db      	b.n	802233c <__b2d+0x48>
 8022384:	3ff00000 	.word	0x3ff00000

08022388 <__d2b>:
 8022388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802238c:	460f      	mov	r7, r1
 802238e:	2101      	movs	r1, #1
 8022390:	ec59 8b10 	vmov	r8, r9, d0
 8022394:	4616      	mov	r6, r2
 8022396:	f7ff fc1b 	bl	8021bd0 <_Balloc>
 802239a:	4604      	mov	r4, r0
 802239c:	b930      	cbnz	r0, 80223ac <__d2b+0x24>
 802239e:	4602      	mov	r2, r0
 80223a0:	4b24      	ldr	r3, [pc, #144]	; (8022434 <__d2b+0xac>)
 80223a2:	4825      	ldr	r0, [pc, #148]	; (8022438 <__d2b+0xb0>)
 80223a4:	f240 310f 	movw	r1, #783	; 0x30f
 80223a8:	f7fe fda6 	bl	8020ef8 <__assert_func>
 80223ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80223b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80223b4:	bb2d      	cbnz	r5, 8022402 <__d2b+0x7a>
 80223b6:	9301      	str	r3, [sp, #4]
 80223b8:	f1b8 0300 	subs.w	r3, r8, #0
 80223bc:	d026      	beq.n	802240c <__d2b+0x84>
 80223be:	4668      	mov	r0, sp
 80223c0:	9300      	str	r3, [sp, #0]
 80223c2:	f7ff fd17 	bl	8021df4 <__lo0bits>
 80223c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80223ca:	b1e8      	cbz	r0, 8022408 <__d2b+0x80>
 80223cc:	f1c0 0320 	rsb	r3, r0, #32
 80223d0:	fa02 f303 	lsl.w	r3, r2, r3
 80223d4:	430b      	orrs	r3, r1
 80223d6:	40c2      	lsrs	r2, r0
 80223d8:	6163      	str	r3, [r4, #20]
 80223da:	9201      	str	r2, [sp, #4]
 80223dc:	9b01      	ldr	r3, [sp, #4]
 80223de:	61a3      	str	r3, [r4, #24]
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	bf14      	ite	ne
 80223e4:	2202      	movne	r2, #2
 80223e6:	2201      	moveq	r2, #1
 80223e8:	6122      	str	r2, [r4, #16]
 80223ea:	b1bd      	cbz	r5, 802241c <__d2b+0x94>
 80223ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80223f0:	4405      	add	r5, r0
 80223f2:	603d      	str	r5, [r7, #0]
 80223f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80223f8:	6030      	str	r0, [r6, #0]
 80223fa:	4620      	mov	r0, r4
 80223fc:	b003      	add	sp, #12
 80223fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022406:	e7d6      	b.n	80223b6 <__d2b+0x2e>
 8022408:	6161      	str	r1, [r4, #20]
 802240a:	e7e7      	b.n	80223dc <__d2b+0x54>
 802240c:	a801      	add	r0, sp, #4
 802240e:	f7ff fcf1 	bl	8021df4 <__lo0bits>
 8022412:	9b01      	ldr	r3, [sp, #4]
 8022414:	6163      	str	r3, [r4, #20]
 8022416:	3020      	adds	r0, #32
 8022418:	2201      	movs	r2, #1
 802241a:	e7e5      	b.n	80223e8 <__d2b+0x60>
 802241c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022420:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022424:	6038      	str	r0, [r7, #0]
 8022426:	6918      	ldr	r0, [r3, #16]
 8022428:	f7ff fcc4 	bl	8021db4 <__hi0bits>
 802242c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022430:	e7e2      	b.n	80223f8 <__d2b+0x70>
 8022432:	bf00      	nop
 8022434:	08025c86 	.word	0x08025c86
 8022438:	08025c97 	.word	0x08025c97

0802243c <__ratio>:
 802243c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022440:	4688      	mov	r8, r1
 8022442:	4669      	mov	r1, sp
 8022444:	4681      	mov	r9, r0
 8022446:	f7ff ff55 	bl	80222f4 <__b2d>
 802244a:	a901      	add	r1, sp, #4
 802244c:	4640      	mov	r0, r8
 802244e:	ec55 4b10 	vmov	r4, r5, d0
 8022452:	ee10 aa10 	vmov	sl, s0
 8022456:	f7ff ff4d 	bl	80222f4 <__b2d>
 802245a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802245e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8022462:	1ad2      	subs	r2, r2, r3
 8022464:	e9dd 3100 	ldrd	r3, r1, [sp]
 8022468:	1a5b      	subs	r3, r3, r1
 802246a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802246e:	ec57 6b10 	vmov	r6, r7, d0
 8022472:	2b00      	cmp	r3, #0
 8022474:	bfd6      	itet	le
 8022476:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802247a:	462a      	movgt	r2, r5
 802247c:	463a      	movle	r2, r7
 802247e:	46ab      	mov	fp, r5
 8022480:	bfd6      	itet	le
 8022482:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8022486:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 802248a:	ee00 3a90 	vmovle	s1, r3
 802248e:	ec4b ab17 	vmov	d7, sl, fp
 8022492:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8022496:	b003      	add	sp, #12
 8022498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802249c <__copybits>:
 802249c:	3901      	subs	r1, #1
 802249e:	b570      	push	{r4, r5, r6, lr}
 80224a0:	1149      	asrs	r1, r1, #5
 80224a2:	6914      	ldr	r4, [r2, #16]
 80224a4:	3101      	adds	r1, #1
 80224a6:	f102 0314 	add.w	r3, r2, #20
 80224aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80224ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80224b2:	1f05      	subs	r5, r0, #4
 80224b4:	42a3      	cmp	r3, r4
 80224b6:	d30c      	bcc.n	80224d2 <__copybits+0x36>
 80224b8:	1aa3      	subs	r3, r4, r2
 80224ba:	3b11      	subs	r3, #17
 80224bc:	f023 0303 	bic.w	r3, r3, #3
 80224c0:	3211      	adds	r2, #17
 80224c2:	42a2      	cmp	r2, r4
 80224c4:	bf88      	it	hi
 80224c6:	2300      	movhi	r3, #0
 80224c8:	4418      	add	r0, r3
 80224ca:	2300      	movs	r3, #0
 80224cc:	4288      	cmp	r0, r1
 80224ce:	d305      	bcc.n	80224dc <__copybits+0x40>
 80224d0:	bd70      	pop	{r4, r5, r6, pc}
 80224d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80224d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80224da:	e7eb      	b.n	80224b4 <__copybits+0x18>
 80224dc:	f840 3b04 	str.w	r3, [r0], #4
 80224e0:	e7f4      	b.n	80224cc <__copybits+0x30>

080224e2 <__any_on>:
 80224e2:	f100 0214 	add.w	r2, r0, #20
 80224e6:	6900      	ldr	r0, [r0, #16]
 80224e8:	114b      	asrs	r3, r1, #5
 80224ea:	4298      	cmp	r0, r3
 80224ec:	b510      	push	{r4, lr}
 80224ee:	db11      	blt.n	8022514 <__any_on+0x32>
 80224f0:	dd0a      	ble.n	8022508 <__any_on+0x26>
 80224f2:	f011 011f 	ands.w	r1, r1, #31
 80224f6:	d007      	beq.n	8022508 <__any_on+0x26>
 80224f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80224fc:	fa24 f001 	lsr.w	r0, r4, r1
 8022500:	fa00 f101 	lsl.w	r1, r0, r1
 8022504:	428c      	cmp	r4, r1
 8022506:	d10b      	bne.n	8022520 <__any_on+0x3e>
 8022508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802250c:	4293      	cmp	r3, r2
 802250e:	d803      	bhi.n	8022518 <__any_on+0x36>
 8022510:	2000      	movs	r0, #0
 8022512:	bd10      	pop	{r4, pc}
 8022514:	4603      	mov	r3, r0
 8022516:	e7f7      	b.n	8022508 <__any_on+0x26>
 8022518:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802251c:	2900      	cmp	r1, #0
 802251e:	d0f5      	beq.n	802250c <__any_on+0x2a>
 8022520:	2001      	movs	r0, #1
 8022522:	e7f6      	b.n	8022512 <__any_on+0x30>

08022524 <_malloc_usable_size_r>:
 8022524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022528:	1f18      	subs	r0, r3, #4
 802252a:	2b00      	cmp	r3, #0
 802252c:	bfbc      	itt	lt
 802252e:	580b      	ldrlt	r3, [r1, r0]
 8022530:	18c0      	addlt	r0, r0, r3
 8022532:	4770      	bx	lr

08022534 <sulp>:
 8022534:	b570      	push	{r4, r5, r6, lr}
 8022536:	4604      	mov	r4, r0
 8022538:	460d      	mov	r5, r1
 802253a:	4616      	mov	r6, r2
 802253c:	ec45 4b10 	vmov	d0, r4, r5
 8022540:	f7ff feb2 	bl	80222a8 <__ulp>
 8022544:	b17e      	cbz	r6, 8022566 <sulp+0x32>
 8022546:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802254a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802254e:	2b00      	cmp	r3, #0
 8022550:	dd09      	ble.n	8022566 <sulp+0x32>
 8022552:	051b      	lsls	r3, r3, #20
 8022554:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8022558:	2000      	movs	r0, #0
 802255a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802255e:	ec41 0b17 	vmov	d7, r0, r1
 8022562:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022566:	bd70      	pop	{r4, r5, r6, pc}

08022568 <_strtod_l>:
 8022568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802256c:	ed2d 8b0e 	vpush	{d8-d14}
 8022570:	b097      	sub	sp, #92	; 0x5c
 8022572:	4604      	mov	r4, r0
 8022574:	920d      	str	r2, [sp, #52]	; 0x34
 8022576:	2200      	movs	r2, #0
 8022578:	9212      	str	r2, [sp, #72]	; 0x48
 802257a:	468a      	mov	sl, r1
 802257c:	f04f 0800 	mov.w	r8, #0
 8022580:	f04f 0900 	mov.w	r9, #0
 8022584:	460a      	mov	r2, r1
 8022586:	9211      	str	r2, [sp, #68]	; 0x44
 8022588:	7811      	ldrb	r1, [r2, #0]
 802258a:	292b      	cmp	r1, #43	; 0x2b
 802258c:	d04c      	beq.n	8022628 <_strtod_l+0xc0>
 802258e:	d839      	bhi.n	8022604 <_strtod_l+0x9c>
 8022590:	290d      	cmp	r1, #13
 8022592:	d833      	bhi.n	80225fc <_strtod_l+0x94>
 8022594:	2908      	cmp	r1, #8
 8022596:	d833      	bhi.n	8022600 <_strtod_l+0x98>
 8022598:	2900      	cmp	r1, #0
 802259a:	d03c      	beq.n	8022616 <_strtod_l+0xae>
 802259c:	2200      	movs	r2, #0
 802259e:	9208      	str	r2, [sp, #32]
 80225a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80225a2:	7832      	ldrb	r2, [r6, #0]
 80225a4:	2a30      	cmp	r2, #48	; 0x30
 80225a6:	f040 80b8 	bne.w	802271a <_strtod_l+0x1b2>
 80225aa:	7872      	ldrb	r2, [r6, #1]
 80225ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80225b0:	2a58      	cmp	r2, #88	; 0x58
 80225b2:	d170      	bne.n	8022696 <_strtod_l+0x12e>
 80225b4:	9302      	str	r3, [sp, #8]
 80225b6:	9b08      	ldr	r3, [sp, #32]
 80225b8:	9301      	str	r3, [sp, #4]
 80225ba:	ab12      	add	r3, sp, #72	; 0x48
 80225bc:	9300      	str	r3, [sp, #0]
 80225be:	4a91      	ldr	r2, [pc, #580]	; (8022804 <_strtod_l+0x29c>)
 80225c0:	ab13      	add	r3, sp, #76	; 0x4c
 80225c2:	a911      	add	r1, sp, #68	; 0x44
 80225c4:	4620      	mov	r0, r4
 80225c6:	f001 fa61 	bl	8023a8c <__gethex>
 80225ca:	f010 070f 	ands.w	r7, r0, #15
 80225ce:	4605      	mov	r5, r0
 80225d0:	d005      	beq.n	80225de <_strtod_l+0x76>
 80225d2:	2f06      	cmp	r7, #6
 80225d4:	d12a      	bne.n	802262c <_strtod_l+0xc4>
 80225d6:	3601      	adds	r6, #1
 80225d8:	2300      	movs	r3, #0
 80225da:	9611      	str	r6, [sp, #68]	; 0x44
 80225dc:	9308      	str	r3, [sp, #32]
 80225de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	f040 8555 	bne.w	8023090 <_strtod_l+0xb28>
 80225e6:	9b08      	ldr	r3, [sp, #32]
 80225e8:	ec49 8b10 	vmov	d0, r8, r9
 80225ec:	b1cb      	cbz	r3, 8022622 <_strtod_l+0xba>
 80225ee:	eeb1 0b40 	vneg.f64	d0, d0
 80225f2:	b017      	add	sp, #92	; 0x5c
 80225f4:	ecbd 8b0e 	vpop	{d8-d14}
 80225f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225fc:	2920      	cmp	r1, #32
 80225fe:	d1cd      	bne.n	802259c <_strtod_l+0x34>
 8022600:	3201      	adds	r2, #1
 8022602:	e7c0      	b.n	8022586 <_strtod_l+0x1e>
 8022604:	292d      	cmp	r1, #45	; 0x2d
 8022606:	d1c9      	bne.n	802259c <_strtod_l+0x34>
 8022608:	2101      	movs	r1, #1
 802260a:	9108      	str	r1, [sp, #32]
 802260c:	1c51      	adds	r1, r2, #1
 802260e:	9111      	str	r1, [sp, #68]	; 0x44
 8022610:	7852      	ldrb	r2, [r2, #1]
 8022612:	2a00      	cmp	r2, #0
 8022614:	d1c4      	bne.n	80225a0 <_strtod_l+0x38>
 8022616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022618:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 802261c:	2b00      	cmp	r3, #0
 802261e:	f040 8535 	bne.w	802308c <_strtod_l+0xb24>
 8022622:	ec49 8b10 	vmov	d0, r8, r9
 8022626:	e7e4      	b.n	80225f2 <_strtod_l+0x8a>
 8022628:	2100      	movs	r1, #0
 802262a:	e7ee      	b.n	802260a <_strtod_l+0xa2>
 802262c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802262e:	b13a      	cbz	r2, 8022640 <_strtod_l+0xd8>
 8022630:	2135      	movs	r1, #53	; 0x35
 8022632:	a814      	add	r0, sp, #80	; 0x50
 8022634:	f7ff ff32 	bl	802249c <__copybits>
 8022638:	9912      	ldr	r1, [sp, #72]	; 0x48
 802263a:	4620      	mov	r0, r4
 802263c:	f7ff fb08 	bl	8021c50 <_Bfree>
 8022640:	1e7b      	subs	r3, r7, #1
 8022642:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022644:	2b04      	cmp	r3, #4
 8022646:	d806      	bhi.n	8022656 <_strtod_l+0xee>
 8022648:	e8df f003 	tbb	[pc, r3]
 802264c:	201d0314 	.word	0x201d0314
 8022650:	14          	.byte	0x14
 8022651:	00          	.byte	0x00
 8022652:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8022656:	05eb      	lsls	r3, r5, #23
 8022658:	bf48      	it	mi
 802265a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802265e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022662:	0d1b      	lsrs	r3, r3, #20
 8022664:	051b      	lsls	r3, r3, #20
 8022666:	2b00      	cmp	r3, #0
 8022668:	d1b9      	bne.n	80225de <_strtod_l+0x76>
 802266a:	f7fe fbfb 	bl	8020e64 <__errno>
 802266e:	2322      	movs	r3, #34	; 0x22
 8022670:	6003      	str	r3, [r0, #0]
 8022672:	e7b4      	b.n	80225de <_strtod_l+0x76>
 8022674:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8022678:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802267c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022680:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8022684:	e7e7      	b.n	8022656 <_strtod_l+0xee>
 8022686:	f8df 9184 	ldr.w	r9, [pc, #388]	; 802280c <_strtod_l+0x2a4>
 802268a:	e7e4      	b.n	8022656 <_strtod_l+0xee>
 802268c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8022690:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022694:	e7df      	b.n	8022656 <_strtod_l+0xee>
 8022696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022698:	1c5a      	adds	r2, r3, #1
 802269a:	9211      	str	r2, [sp, #68]	; 0x44
 802269c:	785b      	ldrb	r3, [r3, #1]
 802269e:	2b30      	cmp	r3, #48	; 0x30
 80226a0:	d0f9      	beq.n	8022696 <_strtod_l+0x12e>
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	d09b      	beq.n	80225de <_strtod_l+0x76>
 80226a6:	2301      	movs	r3, #1
 80226a8:	9306      	str	r3, [sp, #24]
 80226aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226ac:	9309      	str	r3, [sp, #36]	; 0x24
 80226ae:	2300      	movs	r3, #0
 80226b0:	9305      	str	r3, [sp, #20]
 80226b2:	9307      	str	r3, [sp, #28]
 80226b4:	461e      	mov	r6, r3
 80226b6:	220a      	movs	r2, #10
 80226b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80226ba:	7805      	ldrb	r5, [r0, #0]
 80226bc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80226c0:	b2d9      	uxtb	r1, r3
 80226c2:	2909      	cmp	r1, #9
 80226c4:	d92b      	bls.n	802271e <_strtod_l+0x1b6>
 80226c6:	4950      	ldr	r1, [pc, #320]	; (8022808 <_strtod_l+0x2a0>)
 80226c8:	2201      	movs	r2, #1
 80226ca:	f7fe fb48 	bl	8020d5e <strncmp>
 80226ce:	2800      	cmp	r0, #0
 80226d0:	d035      	beq.n	802273e <_strtod_l+0x1d6>
 80226d2:	2000      	movs	r0, #0
 80226d4:	462a      	mov	r2, r5
 80226d6:	4633      	mov	r3, r6
 80226d8:	4683      	mov	fp, r0
 80226da:	4601      	mov	r1, r0
 80226dc:	2a65      	cmp	r2, #101	; 0x65
 80226de:	d001      	beq.n	80226e4 <_strtod_l+0x17c>
 80226e0:	2a45      	cmp	r2, #69	; 0x45
 80226e2:	d118      	bne.n	8022716 <_strtod_l+0x1ae>
 80226e4:	b91b      	cbnz	r3, 80226ee <_strtod_l+0x186>
 80226e6:	9b06      	ldr	r3, [sp, #24]
 80226e8:	4303      	orrs	r3, r0
 80226ea:	d094      	beq.n	8022616 <_strtod_l+0xae>
 80226ec:	2300      	movs	r3, #0
 80226ee:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80226f2:	f10a 0201 	add.w	r2, sl, #1
 80226f6:	9211      	str	r2, [sp, #68]	; 0x44
 80226f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80226fc:	2a2b      	cmp	r2, #43	; 0x2b
 80226fe:	d075      	beq.n	80227ec <_strtod_l+0x284>
 8022700:	2a2d      	cmp	r2, #45	; 0x2d
 8022702:	d07b      	beq.n	80227fc <_strtod_l+0x294>
 8022704:	f04f 0e00 	mov.w	lr, #0
 8022708:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802270c:	2d09      	cmp	r5, #9
 802270e:	f240 8083 	bls.w	8022818 <_strtod_l+0x2b0>
 8022712:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8022716:	2500      	movs	r5, #0
 8022718:	e09e      	b.n	8022858 <_strtod_l+0x2f0>
 802271a:	2300      	movs	r3, #0
 802271c:	e7c4      	b.n	80226a8 <_strtod_l+0x140>
 802271e:	2e08      	cmp	r6, #8
 8022720:	bfd5      	itete	le
 8022722:	9907      	ldrle	r1, [sp, #28]
 8022724:	9905      	ldrgt	r1, [sp, #20]
 8022726:	fb02 3301 	mlale	r3, r2, r1, r3
 802272a:	fb02 3301 	mlagt	r3, r2, r1, r3
 802272e:	f100 0001 	add.w	r0, r0, #1
 8022732:	bfd4      	ite	le
 8022734:	9307      	strle	r3, [sp, #28]
 8022736:	9305      	strgt	r3, [sp, #20]
 8022738:	3601      	adds	r6, #1
 802273a:	9011      	str	r0, [sp, #68]	; 0x44
 802273c:	e7bc      	b.n	80226b8 <_strtod_l+0x150>
 802273e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022740:	1c5a      	adds	r2, r3, #1
 8022742:	9211      	str	r2, [sp, #68]	; 0x44
 8022744:	785a      	ldrb	r2, [r3, #1]
 8022746:	b3ae      	cbz	r6, 80227b4 <_strtod_l+0x24c>
 8022748:	4683      	mov	fp, r0
 802274a:	4633      	mov	r3, r6
 802274c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8022750:	2909      	cmp	r1, #9
 8022752:	d912      	bls.n	802277a <_strtod_l+0x212>
 8022754:	2101      	movs	r1, #1
 8022756:	e7c1      	b.n	80226dc <_strtod_l+0x174>
 8022758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802275a:	1c5a      	adds	r2, r3, #1
 802275c:	9211      	str	r2, [sp, #68]	; 0x44
 802275e:	785a      	ldrb	r2, [r3, #1]
 8022760:	3001      	adds	r0, #1
 8022762:	2a30      	cmp	r2, #48	; 0x30
 8022764:	d0f8      	beq.n	8022758 <_strtod_l+0x1f0>
 8022766:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802276a:	2b08      	cmp	r3, #8
 802276c:	f200 8495 	bhi.w	802309a <_strtod_l+0xb32>
 8022770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022772:	9309      	str	r3, [sp, #36]	; 0x24
 8022774:	4683      	mov	fp, r0
 8022776:	2000      	movs	r0, #0
 8022778:	4603      	mov	r3, r0
 802277a:	3a30      	subs	r2, #48	; 0x30
 802277c:	f100 0101 	add.w	r1, r0, #1
 8022780:	d012      	beq.n	80227a8 <_strtod_l+0x240>
 8022782:	448b      	add	fp, r1
 8022784:	eb00 0c03 	add.w	ip, r0, r3
 8022788:	4619      	mov	r1, r3
 802278a:	250a      	movs	r5, #10
 802278c:	4561      	cmp	r1, ip
 802278e:	d113      	bne.n	80227b8 <_strtod_l+0x250>
 8022790:	1819      	adds	r1, r3, r0
 8022792:	2908      	cmp	r1, #8
 8022794:	f103 0301 	add.w	r3, r3, #1
 8022798:	4403      	add	r3, r0
 802279a:	dc1b      	bgt.n	80227d4 <_strtod_l+0x26c>
 802279c:	9807      	ldr	r0, [sp, #28]
 802279e:	210a      	movs	r1, #10
 80227a0:	fb01 2200 	mla	r2, r1, r0, r2
 80227a4:	9207      	str	r2, [sp, #28]
 80227a6:	2100      	movs	r1, #0
 80227a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80227aa:	1c50      	adds	r0, r2, #1
 80227ac:	9011      	str	r0, [sp, #68]	; 0x44
 80227ae:	7852      	ldrb	r2, [r2, #1]
 80227b0:	4608      	mov	r0, r1
 80227b2:	e7cb      	b.n	802274c <_strtod_l+0x1e4>
 80227b4:	4630      	mov	r0, r6
 80227b6:	e7d4      	b.n	8022762 <_strtod_l+0x1fa>
 80227b8:	2908      	cmp	r1, #8
 80227ba:	f101 0101 	add.w	r1, r1, #1
 80227be:	dc03      	bgt.n	80227c8 <_strtod_l+0x260>
 80227c0:	9f07      	ldr	r7, [sp, #28]
 80227c2:	436f      	muls	r7, r5
 80227c4:	9707      	str	r7, [sp, #28]
 80227c6:	e7e1      	b.n	802278c <_strtod_l+0x224>
 80227c8:	2910      	cmp	r1, #16
 80227ca:	bfde      	ittt	le
 80227cc:	9f05      	ldrle	r7, [sp, #20]
 80227ce:	436f      	mulle	r7, r5
 80227d0:	9705      	strle	r7, [sp, #20]
 80227d2:	e7db      	b.n	802278c <_strtod_l+0x224>
 80227d4:	2b10      	cmp	r3, #16
 80227d6:	bfdf      	itttt	le
 80227d8:	9805      	ldrle	r0, [sp, #20]
 80227da:	210a      	movle	r1, #10
 80227dc:	fb01 2200 	mlale	r2, r1, r0, r2
 80227e0:	9205      	strle	r2, [sp, #20]
 80227e2:	e7e0      	b.n	80227a6 <_strtod_l+0x23e>
 80227e4:	f04f 0b00 	mov.w	fp, #0
 80227e8:	2101      	movs	r1, #1
 80227ea:	e77c      	b.n	80226e6 <_strtod_l+0x17e>
 80227ec:	f04f 0e00 	mov.w	lr, #0
 80227f0:	f10a 0202 	add.w	r2, sl, #2
 80227f4:	9211      	str	r2, [sp, #68]	; 0x44
 80227f6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80227fa:	e785      	b.n	8022708 <_strtod_l+0x1a0>
 80227fc:	f04f 0e01 	mov.w	lr, #1
 8022800:	e7f6      	b.n	80227f0 <_strtod_l+0x288>
 8022802:	bf00      	nop
 8022804:	08025df0 	.word	0x08025df0
 8022808:	08025dec 	.word	0x08025dec
 802280c:	7ff00000 	.word	0x7ff00000
 8022810:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022812:	1c55      	adds	r5, r2, #1
 8022814:	9511      	str	r5, [sp, #68]	; 0x44
 8022816:	7852      	ldrb	r2, [r2, #1]
 8022818:	2a30      	cmp	r2, #48	; 0x30
 802281a:	d0f9      	beq.n	8022810 <_strtod_l+0x2a8>
 802281c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8022820:	2d08      	cmp	r5, #8
 8022822:	f63f af78 	bhi.w	8022716 <_strtod_l+0x1ae>
 8022826:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 802282a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802282c:	920a      	str	r2, [sp, #40]	; 0x28
 802282e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022830:	1c55      	adds	r5, r2, #1
 8022832:	9511      	str	r5, [sp, #68]	; 0x44
 8022834:	7852      	ldrb	r2, [r2, #1]
 8022836:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 802283a:	2f09      	cmp	r7, #9
 802283c:	d937      	bls.n	80228ae <_strtod_l+0x346>
 802283e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022840:	1bed      	subs	r5, r5, r7
 8022842:	2d08      	cmp	r5, #8
 8022844:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8022848:	dc02      	bgt.n	8022850 <_strtod_l+0x2e8>
 802284a:	4565      	cmp	r5, ip
 802284c:	bfa8      	it	ge
 802284e:	4665      	movge	r5, ip
 8022850:	f1be 0f00 	cmp.w	lr, #0
 8022854:	d000      	beq.n	8022858 <_strtod_l+0x2f0>
 8022856:	426d      	negs	r5, r5
 8022858:	2b00      	cmp	r3, #0
 802285a:	d14d      	bne.n	80228f8 <_strtod_l+0x390>
 802285c:	9b06      	ldr	r3, [sp, #24]
 802285e:	4303      	orrs	r3, r0
 8022860:	f47f aebd 	bne.w	80225de <_strtod_l+0x76>
 8022864:	2900      	cmp	r1, #0
 8022866:	f47f aed6 	bne.w	8022616 <_strtod_l+0xae>
 802286a:	2a69      	cmp	r2, #105	; 0x69
 802286c:	d027      	beq.n	80228be <_strtod_l+0x356>
 802286e:	dc24      	bgt.n	80228ba <_strtod_l+0x352>
 8022870:	2a49      	cmp	r2, #73	; 0x49
 8022872:	d024      	beq.n	80228be <_strtod_l+0x356>
 8022874:	2a4e      	cmp	r2, #78	; 0x4e
 8022876:	f47f aece 	bne.w	8022616 <_strtod_l+0xae>
 802287a:	4995      	ldr	r1, [pc, #596]	; (8022ad0 <_strtod_l+0x568>)
 802287c:	a811      	add	r0, sp, #68	; 0x44
 802287e:	f001 fb45 	bl	8023f0c <__match>
 8022882:	2800      	cmp	r0, #0
 8022884:	f43f aec7 	beq.w	8022616 <_strtod_l+0xae>
 8022888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802288a:	781b      	ldrb	r3, [r3, #0]
 802288c:	2b28      	cmp	r3, #40	; 0x28
 802288e:	d12d      	bne.n	80228ec <_strtod_l+0x384>
 8022890:	4990      	ldr	r1, [pc, #576]	; (8022ad4 <_strtod_l+0x56c>)
 8022892:	aa14      	add	r2, sp, #80	; 0x50
 8022894:	a811      	add	r0, sp, #68	; 0x44
 8022896:	f001 fb4d 	bl	8023f34 <__hexnan>
 802289a:	2805      	cmp	r0, #5
 802289c:	d126      	bne.n	80228ec <_strtod_l+0x384>
 802289e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80228a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80228a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80228a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80228ac:	e697      	b.n	80225de <_strtod_l+0x76>
 80228ae:	250a      	movs	r5, #10
 80228b0:	fb05 2c0c 	mla	ip, r5, ip, r2
 80228b4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80228b8:	e7b9      	b.n	802282e <_strtod_l+0x2c6>
 80228ba:	2a6e      	cmp	r2, #110	; 0x6e
 80228bc:	e7db      	b.n	8022876 <_strtod_l+0x30e>
 80228be:	4986      	ldr	r1, [pc, #536]	; (8022ad8 <_strtod_l+0x570>)
 80228c0:	a811      	add	r0, sp, #68	; 0x44
 80228c2:	f001 fb23 	bl	8023f0c <__match>
 80228c6:	2800      	cmp	r0, #0
 80228c8:	f43f aea5 	beq.w	8022616 <_strtod_l+0xae>
 80228cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228ce:	4983      	ldr	r1, [pc, #524]	; (8022adc <_strtod_l+0x574>)
 80228d0:	3b01      	subs	r3, #1
 80228d2:	a811      	add	r0, sp, #68	; 0x44
 80228d4:	9311      	str	r3, [sp, #68]	; 0x44
 80228d6:	f001 fb19 	bl	8023f0c <__match>
 80228da:	b910      	cbnz	r0, 80228e2 <_strtod_l+0x37a>
 80228dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228de:	3301      	adds	r3, #1
 80228e0:	9311      	str	r3, [sp, #68]	; 0x44
 80228e2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8022af0 <_strtod_l+0x588>
 80228e6:	f04f 0800 	mov.w	r8, #0
 80228ea:	e678      	b.n	80225de <_strtod_l+0x76>
 80228ec:	487c      	ldr	r0, [pc, #496]	; (8022ae0 <_strtod_l+0x578>)
 80228ee:	f001 f857 	bl	80239a0 <nan>
 80228f2:	ec59 8b10 	vmov	r8, r9, d0
 80228f6:	e672      	b.n	80225de <_strtod_l+0x76>
 80228f8:	eddd 7a07 	vldr	s15, [sp, #28]
 80228fc:	eba5 020b 	sub.w	r2, r5, fp
 8022900:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022904:	2e00      	cmp	r6, #0
 8022906:	bf08      	it	eq
 8022908:	461e      	moveq	r6, r3
 802290a:	2b10      	cmp	r3, #16
 802290c:	9206      	str	r2, [sp, #24]
 802290e:	461a      	mov	r2, r3
 8022910:	bfa8      	it	ge
 8022912:	2210      	movge	r2, #16
 8022914:	2b09      	cmp	r3, #9
 8022916:	ec59 8b17 	vmov	r8, r9, d7
 802291a:	dd0c      	ble.n	8022936 <_strtod_l+0x3ce>
 802291c:	4971      	ldr	r1, [pc, #452]	; (8022ae4 <_strtod_l+0x57c>)
 802291e:	eddd 6a05 	vldr	s13, [sp, #20]
 8022922:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8022926:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 802292a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802292e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022932:	ec59 8b16 	vmov	r8, r9, d6
 8022936:	2b0f      	cmp	r3, #15
 8022938:	dc37      	bgt.n	80229aa <_strtod_l+0x442>
 802293a:	9906      	ldr	r1, [sp, #24]
 802293c:	2900      	cmp	r1, #0
 802293e:	f43f ae4e 	beq.w	80225de <_strtod_l+0x76>
 8022942:	dd23      	ble.n	802298c <_strtod_l+0x424>
 8022944:	2916      	cmp	r1, #22
 8022946:	dc0b      	bgt.n	8022960 <_strtod_l+0x3f8>
 8022948:	4b66      	ldr	r3, [pc, #408]	; (8022ae4 <_strtod_l+0x57c>)
 802294a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802294e:	ed93 7b00 	vldr	d7, [r3]
 8022952:	ec49 8b16 	vmov	d6, r8, r9
 8022956:	ee27 7b06 	vmul.f64	d7, d7, d6
 802295a:	ec59 8b17 	vmov	r8, r9, d7
 802295e:	e63e      	b.n	80225de <_strtod_l+0x76>
 8022960:	9806      	ldr	r0, [sp, #24]
 8022962:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8022966:	4281      	cmp	r1, r0
 8022968:	db1f      	blt.n	80229aa <_strtod_l+0x442>
 802296a:	4a5e      	ldr	r2, [pc, #376]	; (8022ae4 <_strtod_l+0x57c>)
 802296c:	f1c3 030f 	rsb	r3, r3, #15
 8022970:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8022974:	ed91 7b00 	vldr	d7, [r1]
 8022978:	ec49 8b16 	vmov	d6, r8, r9
 802297c:	1ac3      	subs	r3, r0, r3
 802297e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022982:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022986:	ed92 6b00 	vldr	d6, [r2]
 802298a:	e7e4      	b.n	8022956 <_strtod_l+0x3ee>
 802298c:	9906      	ldr	r1, [sp, #24]
 802298e:	3116      	adds	r1, #22
 8022990:	db0b      	blt.n	80229aa <_strtod_l+0x442>
 8022992:	4b54      	ldr	r3, [pc, #336]	; (8022ae4 <_strtod_l+0x57c>)
 8022994:	ebab 0505 	sub.w	r5, fp, r5
 8022998:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802299c:	ed95 7b00 	vldr	d7, [r5]
 80229a0:	ec49 8b16 	vmov	d6, r8, r9
 80229a4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80229a8:	e7d7      	b.n	802295a <_strtod_l+0x3f2>
 80229aa:	9906      	ldr	r1, [sp, #24]
 80229ac:	1a9a      	subs	r2, r3, r2
 80229ae:	440a      	add	r2, r1
 80229b0:	2a00      	cmp	r2, #0
 80229b2:	dd6e      	ble.n	8022a92 <_strtod_l+0x52a>
 80229b4:	f012 000f 	ands.w	r0, r2, #15
 80229b8:	d00a      	beq.n	80229d0 <_strtod_l+0x468>
 80229ba:	494a      	ldr	r1, [pc, #296]	; (8022ae4 <_strtod_l+0x57c>)
 80229bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80229c0:	ed91 7b00 	vldr	d7, [r1]
 80229c4:	ec49 8b16 	vmov	d6, r8, r9
 80229c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80229cc:	ec59 8b17 	vmov	r8, r9, d7
 80229d0:	f032 020f 	bics.w	r2, r2, #15
 80229d4:	d04e      	beq.n	8022a74 <_strtod_l+0x50c>
 80229d6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80229da:	dd22      	ble.n	8022a22 <_strtod_l+0x4ba>
 80229dc:	2500      	movs	r5, #0
 80229de:	462e      	mov	r6, r5
 80229e0:	9507      	str	r5, [sp, #28]
 80229e2:	462f      	mov	r7, r5
 80229e4:	2322      	movs	r3, #34	; 0x22
 80229e6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8022af0 <_strtod_l+0x588>
 80229ea:	6023      	str	r3, [r4, #0]
 80229ec:	f04f 0800 	mov.w	r8, #0
 80229f0:	9b07      	ldr	r3, [sp, #28]
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	f43f adf3 	beq.w	80225de <_strtod_l+0x76>
 80229f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80229fa:	4620      	mov	r0, r4
 80229fc:	f7ff f928 	bl	8021c50 <_Bfree>
 8022a00:	4639      	mov	r1, r7
 8022a02:	4620      	mov	r0, r4
 8022a04:	f7ff f924 	bl	8021c50 <_Bfree>
 8022a08:	4631      	mov	r1, r6
 8022a0a:	4620      	mov	r0, r4
 8022a0c:	f7ff f920 	bl	8021c50 <_Bfree>
 8022a10:	9907      	ldr	r1, [sp, #28]
 8022a12:	4620      	mov	r0, r4
 8022a14:	f7ff f91c 	bl	8021c50 <_Bfree>
 8022a18:	4629      	mov	r1, r5
 8022a1a:	4620      	mov	r0, r4
 8022a1c:	f7ff f918 	bl	8021c50 <_Bfree>
 8022a20:	e5dd      	b.n	80225de <_strtod_l+0x76>
 8022a22:	2000      	movs	r0, #0
 8022a24:	ec49 8b17 	vmov	d7, r8, r9
 8022a28:	4f2f      	ldr	r7, [pc, #188]	; (8022ae8 <_strtod_l+0x580>)
 8022a2a:	1112      	asrs	r2, r2, #4
 8022a2c:	4601      	mov	r1, r0
 8022a2e:	2a01      	cmp	r2, #1
 8022a30:	dc23      	bgt.n	8022a7a <_strtod_l+0x512>
 8022a32:	b108      	cbz	r0, 8022a38 <_strtod_l+0x4d0>
 8022a34:	ec59 8b17 	vmov	r8, r9, d7
 8022a38:	4a2b      	ldr	r2, [pc, #172]	; (8022ae8 <_strtod_l+0x580>)
 8022a3a:	482c      	ldr	r0, [pc, #176]	; (8022aec <_strtod_l+0x584>)
 8022a3c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8022a40:	ed92 7b00 	vldr	d7, [r2]
 8022a44:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022a48:	ec49 8b16 	vmov	d6, r8, r9
 8022a4c:	4a28      	ldr	r2, [pc, #160]	; (8022af0 <_strtod_l+0x588>)
 8022a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a52:	ee17 1a90 	vmov	r1, s15
 8022a56:	400a      	ands	r2, r1
 8022a58:	4282      	cmp	r2, r0
 8022a5a:	ec59 8b17 	vmov	r8, r9, d7
 8022a5e:	d8bd      	bhi.n	80229dc <_strtod_l+0x474>
 8022a60:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8022a64:	4282      	cmp	r2, r0
 8022a66:	bf86      	itte	hi
 8022a68:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8022af4 <_strtod_l+0x58c>
 8022a6c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022a70:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8022a74:	2200      	movs	r2, #0
 8022a76:	9205      	str	r2, [sp, #20]
 8022a78:	e076      	b.n	8022b68 <_strtod_l+0x600>
 8022a7a:	f012 0f01 	tst.w	r2, #1
 8022a7e:	d004      	beq.n	8022a8a <_strtod_l+0x522>
 8022a80:	ed97 6b00 	vldr	d6, [r7]
 8022a84:	2001      	movs	r0, #1
 8022a86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a8a:	3101      	adds	r1, #1
 8022a8c:	1052      	asrs	r2, r2, #1
 8022a8e:	3708      	adds	r7, #8
 8022a90:	e7cd      	b.n	8022a2e <_strtod_l+0x4c6>
 8022a92:	d0ef      	beq.n	8022a74 <_strtod_l+0x50c>
 8022a94:	4252      	negs	r2, r2
 8022a96:	f012 000f 	ands.w	r0, r2, #15
 8022a9a:	d00a      	beq.n	8022ab2 <_strtod_l+0x54a>
 8022a9c:	4911      	ldr	r1, [pc, #68]	; (8022ae4 <_strtod_l+0x57c>)
 8022a9e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022aa2:	ed91 7b00 	vldr	d7, [r1]
 8022aa6:	ec49 8b16 	vmov	d6, r8, r9
 8022aaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022aae:	ec59 8b17 	vmov	r8, r9, d7
 8022ab2:	1112      	asrs	r2, r2, #4
 8022ab4:	d0de      	beq.n	8022a74 <_strtod_l+0x50c>
 8022ab6:	2a1f      	cmp	r2, #31
 8022ab8:	dd1e      	ble.n	8022af8 <_strtod_l+0x590>
 8022aba:	2500      	movs	r5, #0
 8022abc:	462e      	mov	r6, r5
 8022abe:	9507      	str	r5, [sp, #28]
 8022ac0:	462f      	mov	r7, r5
 8022ac2:	2322      	movs	r3, #34	; 0x22
 8022ac4:	f04f 0800 	mov.w	r8, #0
 8022ac8:	f04f 0900 	mov.w	r9, #0
 8022acc:	6023      	str	r3, [r4, #0]
 8022ace:	e78f      	b.n	80229f0 <_strtod_l+0x488>
 8022ad0:	08025bb9 	.word	0x08025bb9
 8022ad4:	08025e04 	.word	0x08025e04
 8022ad8:	08025bb1 	.word	0x08025bb1
 8022adc:	08025c24 	.word	0x08025c24
 8022ae0:	08025c20 	.word	0x08025c20
 8022ae4:	08025d18 	.word	0x08025d18
 8022ae8:	08025cf0 	.word	0x08025cf0
 8022aec:	7ca00000 	.word	0x7ca00000
 8022af0:	7ff00000 	.word	0x7ff00000
 8022af4:	7fefffff 	.word	0x7fefffff
 8022af8:	f012 0110 	ands.w	r1, r2, #16
 8022afc:	bf18      	it	ne
 8022afe:	216a      	movne	r1, #106	; 0x6a
 8022b00:	9105      	str	r1, [sp, #20]
 8022b02:	ec49 8b17 	vmov	d7, r8, r9
 8022b06:	49be      	ldr	r1, [pc, #760]	; (8022e00 <_strtod_l+0x898>)
 8022b08:	2000      	movs	r0, #0
 8022b0a:	07d7      	lsls	r7, r2, #31
 8022b0c:	d504      	bpl.n	8022b18 <_strtod_l+0x5b0>
 8022b0e:	ed91 6b00 	vldr	d6, [r1]
 8022b12:	2001      	movs	r0, #1
 8022b14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022b18:	1052      	asrs	r2, r2, #1
 8022b1a:	f101 0108 	add.w	r1, r1, #8
 8022b1e:	d1f4      	bne.n	8022b0a <_strtod_l+0x5a2>
 8022b20:	b108      	cbz	r0, 8022b26 <_strtod_l+0x5be>
 8022b22:	ec59 8b17 	vmov	r8, r9, d7
 8022b26:	9a05      	ldr	r2, [sp, #20]
 8022b28:	b1ba      	cbz	r2, 8022b5a <_strtod_l+0x5f2>
 8022b2a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022b2e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8022b32:	2a00      	cmp	r2, #0
 8022b34:	4648      	mov	r0, r9
 8022b36:	dd10      	ble.n	8022b5a <_strtod_l+0x5f2>
 8022b38:	2a1f      	cmp	r2, #31
 8022b3a:	f340 812c 	ble.w	8022d96 <_strtod_l+0x82e>
 8022b3e:	2a34      	cmp	r2, #52	; 0x34
 8022b40:	bfde      	ittt	le
 8022b42:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8022b46:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022b4a:	408a      	lslle	r2, r1
 8022b4c:	f04f 0800 	mov.w	r8, #0
 8022b50:	bfcc      	ite	gt
 8022b52:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8022b56:	ea02 0900 	andle.w	r9, r2, r0
 8022b5a:	ec49 8b17 	vmov	d7, r8, r9
 8022b5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b66:	d0a8      	beq.n	8022aba <_strtod_l+0x552>
 8022b68:	9a07      	ldr	r2, [sp, #28]
 8022b6a:	9200      	str	r2, [sp, #0]
 8022b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022b6e:	4632      	mov	r2, r6
 8022b70:	4620      	mov	r0, r4
 8022b72:	f7ff f8d5 	bl	8021d20 <__s2b>
 8022b76:	9007      	str	r0, [sp, #28]
 8022b78:	2800      	cmp	r0, #0
 8022b7a:	f43f af2f 	beq.w	80229dc <_strtod_l+0x474>
 8022b7e:	9a06      	ldr	r2, [sp, #24]
 8022b80:	2a00      	cmp	r2, #0
 8022b82:	ebab 0305 	sub.w	r3, fp, r5
 8022b86:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8022de0 <_strtod_l+0x878>
 8022b8a:	bfa8      	it	ge
 8022b8c:	2300      	movge	r3, #0
 8022b8e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8022de8 <_strtod_l+0x880>
 8022b92:	ed9f bb97 	vldr	d11, [pc, #604]	; 8022df0 <_strtod_l+0x888>
 8022b96:	9309      	str	r3, [sp, #36]	; 0x24
 8022b98:	2500      	movs	r5, #0
 8022b9a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8022ba0:	462e      	mov	r6, r5
 8022ba2:	9b07      	ldr	r3, [sp, #28]
 8022ba4:	4620      	mov	r0, r4
 8022ba6:	6859      	ldr	r1, [r3, #4]
 8022ba8:	f7ff f812 	bl	8021bd0 <_Balloc>
 8022bac:	4607      	mov	r7, r0
 8022bae:	2800      	cmp	r0, #0
 8022bb0:	f43f af18 	beq.w	80229e4 <_strtod_l+0x47c>
 8022bb4:	9b07      	ldr	r3, [sp, #28]
 8022bb6:	691a      	ldr	r2, [r3, #16]
 8022bb8:	3202      	adds	r2, #2
 8022bba:	f103 010c 	add.w	r1, r3, #12
 8022bbe:	0092      	lsls	r2, r2, #2
 8022bc0:	300c      	adds	r0, #12
 8022bc2:	f7fe f984 	bl	8020ece <memcpy>
 8022bc6:	ec49 8b10 	vmov	d0, r8, r9
 8022bca:	aa14      	add	r2, sp, #80	; 0x50
 8022bcc:	a913      	add	r1, sp, #76	; 0x4c
 8022bce:	4620      	mov	r0, r4
 8022bd0:	f7ff fbda 	bl	8022388 <__d2b>
 8022bd4:	ec49 8b18 	vmov	d8, r8, r9
 8022bd8:	9012      	str	r0, [sp, #72]	; 0x48
 8022bda:	2800      	cmp	r0, #0
 8022bdc:	f43f af02 	beq.w	80229e4 <_strtod_l+0x47c>
 8022be0:	2101      	movs	r1, #1
 8022be2:	4620      	mov	r0, r4
 8022be4:	f7ff f934 	bl	8021e50 <__i2b>
 8022be8:	4606      	mov	r6, r0
 8022bea:	2800      	cmp	r0, #0
 8022bec:	f43f aefa 	beq.w	80229e4 <_strtod_l+0x47c>
 8022bf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022bf2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	bfab      	itete	ge
 8022bf8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8022bfa:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8022bfc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8022c00:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8022c04:	bfac      	ite	ge
 8022c06:	eb03 0b02 	addge.w	fp, r3, r2
 8022c0a:	eba2 0a03 	sublt.w	sl, r2, r3
 8022c0e:	9a05      	ldr	r2, [sp, #20]
 8022c10:	1a9b      	subs	r3, r3, r2
 8022c12:	440b      	add	r3, r1
 8022c14:	4a7b      	ldr	r2, [pc, #492]	; (8022e04 <_strtod_l+0x89c>)
 8022c16:	3b01      	subs	r3, #1
 8022c18:	4293      	cmp	r3, r2
 8022c1a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8022c1e:	f280 80cd 	bge.w	8022dbc <_strtod_l+0x854>
 8022c22:	1ad2      	subs	r2, r2, r3
 8022c24:	2a1f      	cmp	r2, #31
 8022c26:	eba1 0102 	sub.w	r1, r1, r2
 8022c2a:	f04f 0001 	mov.w	r0, #1
 8022c2e:	f300 80b9 	bgt.w	8022da4 <_strtod_l+0x83c>
 8022c32:	fa00 f302 	lsl.w	r3, r0, r2
 8022c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c38:	2300      	movs	r3, #0
 8022c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8022c3c:	eb0b 0301 	add.w	r3, fp, r1
 8022c40:	9a05      	ldr	r2, [sp, #20]
 8022c42:	459b      	cmp	fp, r3
 8022c44:	448a      	add	sl, r1
 8022c46:	4492      	add	sl, r2
 8022c48:	465a      	mov	r2, fp
 8022c4a:	bfa8      	it	ge
 8022c4c:	461a      	movge	r2, r3
 8022c4e:	4552      	cmp	r2, sl
 8022c50:	bfa8      	it	ge
 8022c52:	4652      	movge	r2, sl
 8022c54:	2a00      	cmp	r2, #0
 8022c56:	bfc2      	ittt	gt
 8022c58:	1a9b      	subgt	r3, r3, r2
 8022c5a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8022c5e:	ebab 0b02 	subgt.w	fp, fp, r2
 8022c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c64:	2a00      	cmp	r2, #0
 8022c66:	dd18      	ble.n	8022c9a <_strtod_l+0x732>
 8022c68:	4631      	mov	r1, r6
 8022c6a:	4620      	mov	r0, r4
 8022c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c6e:	f7ff f9af 	bl	8021fd0 <__pow5mult>
 8022c72:	4606      	mov	r6, r0
 8022c74:	2800      	cmp	r0, #0
 8022c76:	f43f aeb5 	beq.w	80229e4 <_strtod_l+0x47c>
 8022c7a:	4601      	mov	r1, r0
 8022c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c7e:	4620      	mov	r0, r4
 8022c80:	f7ff f8fc 	bl	8021e7c <__multiply>
 8022c84:	900e      	str	r0, [sp, #56]	; 0x38
 8022c86:	2800      	cmp	r0, #0
 8022c88:	f43f aeac 	beq.w	80229e4 <_strtod_l+0x47c>
 8022c8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022c8e:	4620      	mov	r0, r4
 8022c90:	f7fe ffde 	bl	8021c50 <_Bfree>
 8022c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c98:	9212      	str	r2, [sp, #72]	; 0x48
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	f300 8093 	bgt.w	8022dc6 <_strtod_l+0x85e>
 8022ca0:	9b06      	ldr	r3, [sp, #24]
 8022ca2:	2b00      	cmp	r3, #0
 8022ca4:	dd08      	ble.n	8022cb8 <_strtod_l+0x750>
 8022ca6:	4639      	mov	r1, r7
 8022ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022caa:	4620      	mov	r0, r4
 8022cac:	f7ff f990 	bl	8021fd0 <__pow5mult>
 8022cb0:	4607      	mov	r7, r0
 8022cb2:	2800      	cmp	r0, #0
 8022cb4:	f43f ae96 	beq.w	80229e4 <_strtod_l+0x47c>
 8022cb8:	f1ba 0f00 	cmp.w	sl, #0
 8022cbc:	dd08      	ble.n	8022cd0 <_strtod_l+0x768>
 8022cbe:	4639      	mov	r1, r7
 8022cc0:	4652      	mov	r2, sl
 8022cc2:	4620      	mov	r0, r4
 8022cc4:	f7ff f9de 	bl	8022084 <__lshift>
 8022cc8:	4607      	mov	r7, r0
 8022cca:	2800      	cmp	r0, #0
 8022ccc:	f43f ae8a 	beq.w	80229e4 <_strtod_l+0x47c>
 8022cd0:	f1bb 0f00 	cmp.w	fp, #0
 8022cd4:	dd08      	ble.n	8022ce8 <_strtod_l+0x780>
 8022cd6:	4631      	mov	r1, r6
 8022cd8:	465a      	mov	r2, fp
 8022cda:	4620      	mov	r0, r4
 8022cdc:	f7ff f9d2 	bl	8022084 <__lshift>
 8022ce0:	4606      	mov	r6, r0
 8022ce2:	2800      	cmp	r0, #0
 8022ce4:	f43f ae7e 	beq.w	80229e4 <_strtod_l+0x47c>
 8022ce8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022cea:	463a      	mov	r2, r7
 8022cec:	4620      	mov	r0, r4
 8022cee:	f7ff fa51 	bl	8022194 <__mdiff>
 8022cf2:	4605      	mov	r5, r0
 8022cf4:	2800      	cmp	r0, #0
 8022cf6:	f43f ae75 	beq.w	80229e4 <_strtod_l+0x47c>
 8022cfa:	2300      	movs	r3, #0
 8022cfc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022d00:	60c3      	str	r3, [r0, #12]
 8022d02:	4631      	mov	r1, r6
 8022d04:	f7ff fa2a 	bl	802215c <__mcmp>
 8022d08:	2800      	cmp	r0, #0
 8022d0a:	da7f      	bge.n	8022e0c <_strtod_l+0x8a4>
 8022d0c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8022d10:	f040 80a5 	bne.w	8022e5e <_strtod_l+0x8f6>
 8022d14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	f040 80a0 	bne.w	8022e5e <_strtod_l+0x8f6>
 8022d1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022d22:	0d1b      	lsrs	r3, r3, #20
 8022d24:	051b      	lsls	r3, r3, #20
 8022d26:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022d2a:	f240 8098 	bls.w	8022e5e <_strtod_l+0x8f6>
 8022d2e:	696b      	ldr	r3, [r5, #20]
 8022d30:	b91b      	cbnz	r3, 8022d3a <_strtod_l+0x7d2>
 8022d32:	692b      	ldr	r3, [r5, #16]
 8022d34:	2b01      	cmp	r3, #1
 8022d36:	f340 8092 	ble.w	8022e5e <_strtod_l+0x8f6>
 8022d3a:	4629      	mov	r1, r5
 8022d3c:	2201      	movs	r2, #1
 8022d3e:	4620      	mov	r0, r4
 8022d40:	f7ff f9a0 	bl	8022084 <__lshift>
 8022d44:	4631      	mov	r1, r6
 8022d46:	4605      	mov	r5, r0
 8022d48:	f7ff fa08 	bl	802215c <__mcmp>
 8022d4c:	2800      	cmp	r0, #0
 8022d4e:	f340 8086 	ble.w	8022e5e <_strtod_l+0x8f6>
 8022d52:	9905      	ldr	r1, [sp, #20]
 8022d54:	4a2c      	ldr	r2, [pc, #176]	; (8022e08 <_strtod_l+0x8a0>)
 8022d56:	464b      	mov	r3, r9
 8022d58:	2900      	cmp	r1, #0
 8022d5a:	f000 809f 	beq.w	8022e9c <_strtod_l+0x934>
 8022d5e:	ea02 0109 	and.w	r1, r2, r9
 8022d62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022d66:	f300 8099 	bgt.w	8022e9c <_strtod_l+0x934>
 8022d6a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022d6e:	f77f aea8 	ble.w	8022ac2 <_strtod_l+0x55a>
 8022d72:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8022df8 <_strtod_l+0x890>
 8022d76:	ec49 8b16 	vmov	d6, r8, r9
 8022d7a:	4b23      	ldr	r3, [pc, #140]	; (8022e08 <_strtod_l+0x8a0>)
 8022d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022d80:	ee17 2a90 	vmov	r2, s15
 8022d84:	4013      	ands	r3, r2
 8022d86:	ec59 8b17 	vmov	r8, r9, d7
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	f47f ae34 	bne.w	80229f8 <_strtod_l+0x490>
 8022d90:	2322      	movs	r3, #34	; 0x22
 8022d92:	6023      	str	r3, [r4, #0]
 8022d94:	e630      	b.n	80229f8 <_strtod_l+0x490>
 8022d96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8022d9e:	ea02 0808 	and.w	r8, r2, r8
 8022da2:	e6da      	b.n	8022b5a <_strtod_l+0x5f2>
 8022da4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8022da8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8022dac:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8022db0:	33e2      	adds	r3, #226	; 0xe2
 8022db2:	fa00 f303 	lsl.w	r3, r0, r3
 8022db6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8022dba:	e73f      	b.n	8022c3c <_strtod_l+0x6d4>
 8022dbc:	2200      	movs	r2, #0
 8022dbe:	2301      	movs	r3, #1
 8022dc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8022dc4:	e73a      	b.n	8022c3c <_strtod_l+0x6d4>
 8022dc6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022dc8:	461a      	mov	r2, r3
 8022dca:	4620      	mov	r0, r4
 8022dcc:	f7ff f95a 	bl	8022084 <__lshift>
 8022dd0:	9012      	str	r0, [sp, #72]	; 0x48
 8022dd2:	2800      	cmp	r0, #0
 8022dd4:	f47f af64 	bne.w	8022ca0 <_strtod_l+0x738>
 8022dd8:	e604      	b.n	80229e4 <_strtod_l+0x47c>
 8022dda:	bf00      	nop
 8022ddc:	f3af 8000 	nop.w
 8022de0:	94a03595 	.word	0x94a03595
 8022de4:	3fcfffff 	.word	0x3fcfffff
 8022de8:	94a03595 	.word	0x94a03595
 8022dec:	3fdfffff 	.word	0x3fdfffff
 8022df0:	35afe535 	.word	0x35afe535
 8022df4:	3fe00000 	.word	0x3fe00000
 8022df8:	00000000 	.word	0x00000000
 8022dfc:	39500000 	.word	0x39500000
 8022e00:	08025e18 	.word	0x08025e18
 8022e04:	fffffc02 	.word	0xfffffc02
 8022e08:	7ff00000 	.word	0x7ff00000
 8022e0c:	46cb      	mov	fp, r9
 8022e0e:	d15f      	bne.n	8022ed0 <_strtod_l+0x968>
 8022e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022e14:	f1ba 0f00 	cmp.w	sl, #0
 8022e18:	d02a      	beq.n	8022e70 <_strtod_l+0x908>
 8022e1a:	4aa7      	ldr	r2, [pc, #668]	; (80230b8 <_strtod_l+0xb50>)
 8022e1c:	4293      	cmp	r3, r2
 8022e1e:	d12b      	bne.n	8022e78 <_strtod_l+0x910>
 8022e20:	9b05      	ldr	r3, [sp, #20]
 8022e22:	4642      	mov	r2, r8
 8022e24:	b1fb      	cbz	r3, 8022e66 <_strtod_l+0x8fe>
 8022e26:	4ba5      	ldr	r3, [pc, #660]	; (80230bc <_strtod_l+0xb54>)
 8022e28:	ea09 0303 	and.w	r3, r9, r3
 8022e2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022e34:	d81a      	bhi.n	8022e6c <_strtod_l+0x904>
 8022e36:	0d1b      	lsrs	r3, r3, #20
 8022e38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8022e40:	429a      	cmp	r2, r3
 8022e42:	d119      	bne.n	8022e78 <_strtod_l+0x910>
 8022e44:	4b9e      	ldr	r3, [pc, #632]	; (80230c0 <_strtod_l+0xb58>)
 8022e46:	459b      	cmp	fp, r3
 8022e48:	d102      	bne.n	8022e50 <_strtod_l+0x8e8>
 8022e4a:	3201      	adds	r2, #1
 8022e4c:	f43f adca 	beq.w	80229e4 <_strtod_l+0x47c>
 8022e50:	4b9a      	ldr	r3, [pc, #616]	; (80230bc <_strtod_l+0xb54>)
 8022e52:	ea0b 0303 	and.w	r3, fp, r3
 8022e56:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8022e5a:	f04f 0800 	mov.w	r8, #0
 8022e5e:	9b05      	ldr	r3, [sp, #20]
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	d186      	bne.n	8022d72 <_strtod_l+0x80a>
 8022e64:	e5c8      	b.n	80229f8 <_strtod_l+0x490>
 8022e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022e6a:	e7e9      	b.n	8022e40 <_strtod_l+0x8d8>
 8022e6c:	460b      	mov	r3, r1
 8022e6e:	e7e7      	b.n	8022e40 <_strtod_l+0x8d8>
 8022e70:	ea53 0308 	orrs.w	r3, r3, r8
 8022e74:	f43f af6d 	beq.w	8022d52 <_strtod_l+0x7ea>
 8022e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e7a:	b1cb      	cbz	r3, 8022eb0 <_strtod_l+0x948>
 8022e7c:	ea13 0f0b 	tst.w	r3, fp
 8022e80:	d0ed      	beq.n	8022e5e <_strtod_l+0x8f6>
 8022e82:	9a05      	ldr	r2, [sp, #20]
 8022e84:	4640      	mov	r0, r8
 8022e86:	4649      	mov	r1, r9
 8022e88:	f1ba 0f00 	cmp.w	sl, #0
 8022e8c:	d014      	beq.n	8022eb8 <_strtod_l+0x950>
 8022e8e:	f7ff fb51 	bl	8022534 <sulp>
 8022e92:	ee38 7b00 	vadd.f64	d7, d8, d0
 8022e96:	ec59 8b17 	vmov	r8, r9, d7
 8022e9a:	e7e0      	b.n	8022e5e <_strtod_l+0x8f6>
 8022e9c:	4013      	ands	r3, r2
 8022e9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8022ea2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8022ea6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8022eaa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022eae:	e7d6      	b.n	8022e5e <_strtod_l+0x8f6>
 8022eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022eb2:	ea13 0f08 	tst.w	r3, r8
 8022eb6:	e7e3      	b.n	8022e80 <_strtod_l+0x918>
 8022eb8:	f7ff fb3c 	bl	8022534 <sulp>
 8022ebc:	ee38 0b40 	vsub.f64	d0, d8, d0
 8022ec0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8022ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ec8:	ec59 8b10 	vmov	r8, r9, d0
 8022ecc:	d1c7      	bne.n	8022e5e <_strtod_l+0x8f6>
 8022ece:	e5f8      	b.n	8022ac2 <_strtod_l+0x55a>
 8022ed0:	4631      	mov	r1, r6
 8022ed2:	4628      	mov	r0, r5
 8022ed4:	f7ff fab2 	bl	802243c <__ratio>
 8022ed8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8022edc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8022ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ee4:	d85f      	bhi.n	8022fa6 <_strtod_l+0xa3e>
 8022ee6:	f1ba 0f00 	cmp.w	sl, #0
 8022eea:	d166      	bne.n	8022fba <_strtod_l+0xa52>
 8022eec:	f1b8 0f00 	cmp.w	r8, #0
 8022ef0:	d14d      	bne.n	8022f8e <_strtod_l+0xa26>
 8022ef2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022ef6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d162      	bne.n	8022fc4 <_strtod_l+0xa5c>
 8022efe:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8022f02:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f0a:	d401      	bmi.n	8022f10 <_strtod_l+0x9a8>
 8022f0c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022f10:	eeb1 cb4d 	vneg.f64	d12, d13
 8022f14:	4869      	ldr	r0, [pc, #420]	; (80230bc <_strtod_l+0xb54>)
 8022f16:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80230c8 <_strtod_l+0xb60>
 8022f1a:	ea0b 0100 	and.w	r1, fp, r0
 8022f1e:	4561      	cmp	r1, ip
 8022f20:	ec53 2b1c 	vmov	r2, r3, d12
 8022f24:	d17a      	bne.n	802301c <_strtod_l+0xab4>
 8022f26:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8022f2a:	ec49 8b10 	vmov	d0, r8, r9
 8022f2e:	910a      	str	r1, [sp, #40]	; 0x28
 8022f30:	f7ff f9ba 	bl	80222a8 <__ulp>
 8022f34:	ec49 8b1e 	vmov	d14, r8, r9
 8022f38:	4860      	ldr	r0, [pc, #384]	; (80230bc <_strtod_l+0xb54>)
 8022f3a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8022f3e:	ee1e 3a90 	vmov	r3, s29
 8022f42:	4a60      	ldr	r2, [pc, #384]	; (80230c4 <_strtod_l+0xb5c>)
 8022f44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022f46:	4018      	ands	r0, r3
 8022f48:	4290      	cmp	r0, r2
 8022f4a:	ec59 8b1e 	vmov	r8, r9, d14
 8022f4e:	d93c      	bls.n	8022fca <_strtod_l+0xa62>
 8022f50:	ee18 2a90 	vmov	r2, s17
 8022f54:	4b5a      	ldr	r3, [pc, #360]	; (80230c0 <_strtod_l+0xb58>)
 8022f56:	429a      	cmp	r2, r3
 8022f58:	d104      	bne.n	8022f64 <_strtod_l+0x9fc>
 8022f5a:	ee18 3a10 	vmov	r3, s16
 8022f5e:	3301      	adds	r3, #1
 8022f60:	f43f ad40 	beq.w	80229e4 <_strtod_l+0x47c>
 8022f64:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80230c0 <_strtod_l+0xb58>
 8022f68:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022f6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022f6e:	4620      	mov	r0, r4
 8022f70:	f7fe fe6e 	bl	8021c50 <_Bfree>
 8022f74:	4639      	mov	r1, r7
 8022f76:	4620      	mov	r0, r4
 8022f78:	f7fe fe6a 	bl	8021c50 <_Bfree>
 8022f7c:	4631      	mov	r1, r6
 8022f7e:	4620      	mov	r0, r4
 8022f80:	f7fe fe66 	bl	8021c50 <_Bfree>
 8022f84:	4629      	mov	r1, r5
 8022f86:	4620      	mov	r0, r4
 8022f88:	f7fe fe62 	bl	8021c50 <_Bfree>
 8022f8c:	e609      	b.n	8022ba2 <_strtod_l+0x63a>
 8022f8e:	f1b8 0f01 	cmp.w	r8, #1
 8022f92:	d103      	bne.n	8022f9c <_strtod_l+0xa34>
 8022f94:	f1b9 0f00 	cmp.w	r9, #0
 8022f98:	f43f ad93 	beq.w	8022ac2 <_strtod_l+0x55a>
 8022f9c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022fa0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022fa4:	e7b6      	b.n	8022f14 <_strtod_l+0x9ac>
 8022fa6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022faa:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022fae:	f1ba 0f00 	cmp.w	sl, #0
 8022fb2:	d0ad      	beq.n	8022f10 <_strtod_l+0x9a8>
 8022fb4:	eeb0 cb4d 	vmov.f64	d12, d13
 8022fb8:	e7ac      	b.n	8022f14 <_strtod_l+0x9ac>
 8022fba:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8022fbe:	eeb0 db4c 	vmov.f64	d13, d12
 8022fc2:	e7a7      	b.n	8022f14 <_strtod_l+0x9ac>
 8022fc4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022fc8:	e7a4      	b.n	8022f14 <_strtod_l+0x9ac>
 8022fca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8022fce:	9b05      	ldr	r3, [sp, #20]
 8022fd0:	46cb      	mov	fp, r9
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d1ca      	bne.n	8022f6c <_strtod_l+0xa04>
 8022fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022fda:	0d1b      	lsrs	r3, r3, #20
 8022fdc:	051b      	lsls	r3, r3, #20
 8022fde:	4299      	cmp	r1, r3
 8022fe0:	d1c4      	bne.n	8022f6c <_strtod_l+0xa04>
 8022fe2:	ec51 0b1d 	vmov	r0, r1, d13
 8022fe6:	f7dd fbb7 	bl	8000758 <__aeabi_d2lz>
 8022fea:	f7dd fb1f 	bl	800062c <__aeabi_l2d>
 8022fee:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8022ff2:	ec41 0b17 	vmov	d7, r0, r1
 8022ff6:	ea4b 0b08 	orr.w	fp, fp, r8
 8022ffa:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8022ffe:	ee3d db47 	vsub.f64	d13, d13, d7
 8023002:	d03c      	beq.n	802307e <_strtod_l+0xb16>
 8023004:	eeb4 dbca 	vcmpe.f64	d13, d10
 8023008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802300c:	f53f acf4 	bmi.w	80229f8 <_strtod_l+0x490>
 8023010:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8023014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023018:	dda8      	ble.n	8022f6c <_strtod_l+0xa04>
 802301a:	e4ed      	b.n	80229f8 <_strtod_l+0x490>
 802301c:	9805      	ldr	r0, [sp, #20]
 802301e:	b1f0      	cbz	r0, 802305e <_strtod_l+0xaf6>
 8023020:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8023024:	d81b      	bhi.n	802305e <_strtod_l+0xaf6>
 8023026:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80230b0 <_strtod_l+0xb48>
 802302a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 802302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023032:	d811      	bhi.n	8023058 <_strtod_l+0xaf0>
 8023034:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8023038:	ee1d 3a10 	vmov	r3, s26
 802303c:	2b01      	cmp	r3, #1
 802303e:	bf38      	it	cc
 8023040:	2301      	movcc	r3, #1
 8023042:	ee0d 3a10 	vmov	s26, r3
 8023046:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 802304a:	f1ba 0f00 	cmp.w	sl, #0
 802304e:	d113      	bne.n	8023078 <_strtod_l+0xb10>
 8023050:	eeb1 7b4d 	vneg.f64	d7, d13
 8023054:	ec53 2b17 	vmov	r2, r3, d7
 8023058:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 802305c:	1a43      	subs	r3, r0, r1
 802305e:	eeb0 0b48 	vmov.f64	d0, d8
 8023062:	ec43 2b1c 	vmov	d12, r2, r3
 8023066:	910a      	str	r1, [sp, #40]	; 0x28
 8023068:	f7ff f91e 	bl	80222a8 <__ulp>
 802306c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802306e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8023072:	ec59 8b18 	vmov	r8, r9, d8
 8023076:	e7aa      	b.n	8022fce <_strtod_l+0xa66>
 8023078:	eeb0 7b4d 	vmov.f64	d7, d13
 802307c:	e7ea      	b.n	8023054 <_strtod_l+0xaec>
 802307e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8023082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023086:	f57f af71 	bpl.w	8022f6c <_strtod_l+0xa04>
 802308a:	e4b5      	b.n	80229f8 <_strtod_l+0x490>
 802308c:	2300      	movs	r3, #0
 802308e:	9308      	str	r3, [sp, #32]
 8023090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023094:	6013      	str	r3, [r2, #0]
 8023096:	f7ff baa6 	b.w	80225e6 <_strtod_l+0x7e>
 802309a:	2a65      	cmp	r2, #101	; 0x65
 802309c:	f43f aba2 	beq.w	80227e4 <_strtod_l+0x27c>
 80230a0:	2a45      	cmp	r2, #69	; 0x45
 80230a2:	f43f ab9f 	beq.w	80227e4 <_strtod_l+0x27c>
 80230a6:	2101      	movs	r1, #1
 80230a8:	f7ff bbd8 	b.w	802285c <_strtod_l+0x2f4>
 80230ac:	f3af 8000 	nop.w
 80230b0:	ffc00000 	.word	0xffc00000
 80230b4:	41dfffff 	.word	0x41dfffff
 80230b8:	000fffff 	.word	0x000fffff
 80230bc:	7ff00000 	.word	0x7ff00000
 80230c0:	7fefffff 	.word	0x7fefffff
 80230c4:	7c9fffff 	.word	0x7c9fffff
 80230c8:	7fe00000 	.word	0x7fe00000

080230cc <_strtod_r>:
 80230cc:	4b01      	ldr	r3, [pc, #4]	; (80230d4 <_strtod_r+0x8>)
 80230ce:	f7ff ba4b 	b.w	8022568 <_strtod_l>
 80230d2:	bf00      	nop
 80230d4:	200009a0 	.word	0x200009a0

080230d8 <_strtol_l.constprop.0>:
 80230d8:	2b01      	cmp	r3, #1
 80230da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230de:	d001      	beq.n	80230e4 <_strtol_l.constprop.0+0xc>
 80230e0:	2b24      	cmp	r3, #36	; 0x24
 80230e2:	d906      	bls.n	80230f2 <_strtol_l.constprop.0+0x1a>
 80230e4:	f7fd febe 	bl	8020e64 <__errno>
 80230e8:	2316      	movs	r3, #22
 80230ea:	6003      	str	r3, [r0, #0]
 80230ec:	2000      	movs	r0, #0
 80230ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80231d8 <_strtol_l.constprop.0+0x100>
 80230f6:	460d      	mov	r5, r1
 80230f8:	462e      	mov	r6, r5
 80230fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80230fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8023102:	f017 0708 	ands.w	r7, r7, #8
 8023106:	d1f7      	bne.n	80230f8 <_strtol_l.constprop.0+0x20>
 8023108:	2c2d      	cmp	r4, #45	; 0x2d
 802310a:	d132      	bne.n	8023172 <_strtol_l.constprop.0+0x9a>
 802310c:	782c      	ldrb	r4, [r5, #0]
 802310e:	2701      	movs	r7, #1
 8023110:	1cb5      	adds	r5, r6, #2
 8023112:	2b00      	cmp	r3, #0
 8023114:	d05b      	beq.n	80231ce <_strtol_l.constprop.0+0xf6>
 8023116:	2b10      	cmp	r3, #16
 8023118:	d109      	bne.n	802312e <_strtol_l.constprop.0+0x56>
 802311a:	2c30      	cmp	r4, #48	; 0x30
 802311c:	d107      	bne.n	802312e <_strtol_l.constprop.0+0x56>
 802311e:	782c      	ldrb	r4, [r5, #0]
 8023120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023124:	2c58      	cmp	r4, #88	; 0x58
 8023126:	d14d      	bne.n	80231c4 <_strtol_l.constprop.0+0xec>
 8023128:	786c      	ldrb	r4, [r5, #1]
 802312a:	2310      	movs	r3, #16
 802312c:	3502      	adds	r5, #2
 802312e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023132:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8023136:	f04f 0e00 	mov.w	lr, #0
 802313a:	fbb8 f9f3 	udiv	r9, r8, r3
 802313e:	4676      	mov	r6, lr
 8023140:	fb03 8a19 	mls	sl, r3, r9, r8
 8023144:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8023148:	f1bc 0f09 	cmp.w	ip, #9
 802314c:	d816      	bhi.n	802317c <_strtol_l.constprop.0+0xa4>
 802314e:	4664      	mov	r4, ip
 8023150:	42a3      	cmp	r3, r4
 8023152:	dd24      	ble.n	802319e <_strtol_l.constprop.0+0xc6>
 8023154:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8023158:	d008      	beq.n	802316c <_strtol_l.constprop.0+0x94>
 802315a:	45b1      	cmp	r9, r6
 802315c:	d31c      	bcc.n	8023198 <_strtol_l.constprop.0+0xc0>
 802315e:	d101      	bne.n	8023164 <_strtol_l.constprop.0+0x8c>
 8023160:	45a2      	cmp	sl, r4
 8023162:	db19      	blt.n	8023198 <_strtol_l.constprop.0+0xc0>
 8023164:	fb06 4603 	mla	r6, r6, r3, r4
 8023168:	f04f 0e01 	mov.w	lr, #1
 802316c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023170:	e7e8      	b.n	8023144 <_strtol_l.constprop.0+0x6c>
 8023172:	2c2b      	cmp	r4, #43	; 0x2b
 8023174:	bf04      	itt	eq
 8023176:	782c      	ldrbeq	r4, [r5, #0]
 8023178:	1cb5      	addeq	r5, r6, #2
 802317a:	e7ca      	b.n	8023112 <_strtol_l.constprop.0+0x3a>
 802317c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023180:	f1bc 0f19 	cmp.w	ip, #25
 8023184:	d801      	bhi.n	802318a <_strtol_l.constprop.0+0xb2>
 8023186:	3c37      	subs	r4, #55	; 0x37
 8023188:	e7e2      	b.n	8023150 <_strtol_l.constprop.0+0x78>
 802318a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802318e:	f1bc 0f19 	cmp.w	ip, #25
 8023192:	d804      	bhi.n	802319e <_strtol_l.constprop.0+0xc6>
 8023194:	3c57      	subs	r4, #87	; 0x57
 8023196:	e7db      	b.n	8023150 <_strtol_l.constprop.0+0x78>
 8023198:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 802319c:	e7e6      	b.n	802316c <_strtol_l.constprop.0+0x94>
 802319e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80231a2:	d105      	bne.n	80231b0 <_strtol_l.constprop.0+0xd8>
 80231a4:	2322      	movs	r3, #34	; 0x22
 80231a6:	6003      	str	r3, [r0, #0]
 80231a8:	4646      	mov	r6, r8
 80231aa:	b942      	cbnz	r2, 80231be <_strtol_l.constprop.0+0xe6>
 80231ac:	4630      	mov	r0, r6
 80231ae:	e79e      	b.n	80230ee <_strtol_l.constprop.0+0x16>
 80231b0:	b107      	cbz	r7, 80231b4 <_strtol_l.constprop.0+0xdc>
 80231b2:	4276      	negs	r6, r6
 80231b4:	2a00      	cmp	r2, #0
 80231b6:	d0f9      	beq.n	80231ac <_strtol_l.constprop.0+0xd4>
 80231b8:	f1be 0f00 	cmp.w	lr, #0
 80231bc:	d000      	beq.n	80231c0 <_strtol_l.constprop.0+0xe8>
 80231be:	1e69      	subs	r1, r5, #1
 80231c0:	6011      	str	r1, [r2, #0]
 80231c2:	e7f3      	b.n	80231ac <_strtol_l.constprop.0+0xd4>
 80231c4:	2430      	movs	r4, #48	; 0x30
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d1b1      	bne.n	802312e <_strtol_l.constprop.0+0x56>
 80231ca:	2308      	movs	r3, #8
 80231cc:	e7af      	b.n	802312e <_strtol_l.constprop.0+0x56>
 80231ce:	2c30      	cmp	r4, #48	; 0x30
 80231d0:	d0a5      	beq.n	802311e <_strtol_l.constprop.0+0x46>
 80231d2:	230a      	movs	r3, #10
 80231d4:	e7ab      	b.n	802312e <_strtol_l.constprop.0+0x56>
 80231d6:	bf00      	nop
 80231d8:	08025aac 	.word	0x08025aac

080231dc <_strtol_r>:
 80231dc:	f7ff bf7c 	b.w	80230d8 <_strtol_l.constprop.0>

080231e0 <__ssputs_r>:
 80231e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231e4:	688e      	ldr	r6, [r1, #8]
 80231e6:	461f      	mov	r7, r3
 80231e8:	42be      	cmp	r6, r7
 80231ea:	680b      	ldr	r3, [r1, #0]
 80231ec:	4682      	mov	sl, r0
 80231ee:	460c      	mov	r4, r1
 80231f0:	4690      	mov	r8, r2
 80231f2:	d82c      	bhi.n	802324e <__ssputs_r+0x6e>
 80231f4:	898a      	ldrh	r2, [r1, #12]
 80231f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80231fa:	d026      	beq.n	802324a <__ssputs_r+0x6a>
 80231fc:	6965      	ldr	r5, [r4, #20]
 80231fe:	6909      	ldr	r1, [r1, #16]
 8023200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023204:	eba3 0901 	sub.w	r9, r3, r1
 8023208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802320c:	1c7b      	adds	r3, r7, #1
 802320e:	444b      	add	r3, r9
 8023210:	106d      	asrs	r5, r5, #1
 8023212:	429d      	cmp	r5, r3
 8023214:	bf38      	it	cc
 8023216:	461d      	movcc	r5, r3
 8023218:	0553      	lsls	r3, r2, #21
 802321a:	d527      	bpl.n	802326c <__ssputs_r+0x8c>
 802321c:	4629      	mov	r1, r5
 802321e:	f7fc f9d5 	bl	801f5cc <_malloc_r>
 8023222:	4606      	mov	r6, r0
 8023224:	b360      	cbz	r0, 8023280 <__ssputs_r+0xa0>
 8023226:	6921      	ldr	r1, [r4, #16]
 8023228:	464a      	mov	r2, r9
 802322a:	f7fd fe50 	bl	8020ece <memcpy>
 802322e:	89a3      	ldrh	r3, [r4, #12]
 8023230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023238:	81a3      	strh	r3, [r4, #12]
 802323a:	6126      	str	r6, [r4, #16]
 802323c:	6165      	str	r5, [r4, #20]
 802323e:	444e      	add	r6, r9
 8023240:	eba5 0509 	sub.w	r5, r5, r9
 8023244:	6026      	str	r6, [r4, #0]
 8023246:	60a5      	str	r5, [r4, #8]
 8023248:	463e      	mov	r6, r7
 802324a:	42be      	cmp	r6, r7
 802324c:	d900      	bls.n	8023250 <__ssputs_r+0x70>
 802324e:	463e      	mov	r6, r7
 8023250:	6820      	ldr	r0, [r4, #0]
 8023252:	4632      	mov	r2, r6
 8023254:	4641      	mov	r1, r8
 8023256:	f7fd fd53 	bl	8020d00 <memmove>
 802325a:	68a3      	ldr	r3, [r4, #8]
 802325c:	1b9b      	subs	r3, r3, r6
 802325e:	60a3      	str	r3, [r4, #8]
 8023260:	6823      	ldr	r3, [r4, #0]
 8023262:	4433      	add	r3, r6
 8023264:	6023      	str	r3, [r4, #0]
 8023266:	2000      	movs	r0, #0
 8023268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802326c:	462a      	mov	r2, r5
 802326e:	f7fc faad 	bl	801f7cc <_realloc_r>
 8023272:	4606      	mov	r6, r0
 8023274:	2800      	cmp	r0, #0
 8023276:	d1e0      	bne.n	802323a <__ssputs_r+0x5a>
 8023278:	6921      	ldr	r1, [r4, #16]
 802327a:	4650      	mov	r0, sl
 802327c:	f7fe fc5c 	bl	8021b38 <_free_r>
 8023280:	230c      	movs	r3, #12
 8023282:	f8ca 3000 	str.w	r3, [sl]
 8023286:	89a3      	ldrh	r3, [r4, #12]
 8023288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802328c:	81a3      	strh	r3, [r4, #12]
 802328e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023292:	e7e9      	b.n	8023268 <__ssputs_r+0x88>

08023294 <_svfiprintf_r>:
 8023294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023298:	4698      	mov	r8, r3
 802329a:	898b      	ldrh	r3, [r1, #12]
 802329c:	061b      	lsls	r3, r3, #24
 802329e:	b09d      	sub	sp, #116	; 0x74
 80232a0:	4607      	mov	r7, r0
 80232a2:	460d      	mov	r5, r1
 80232a4:	4614      	mov	r4, r2
 80232a6:	d50e      	bpl.n	80232c6 <_svfiprintf_r+0x32>
 80232a8:	690b      	ldr	r3, [r1, #16]
 80232aa:	b963      	cbnz	r3, 80232c6 <_svfiprintf_r+0x32>
 80232ac:	2140      	movs	r1, #64	; 0x40
 80232ae:	f7fc f98d 	bl	801f5cc <_malloc_r>
 80232b2:	6028      	str	r0, [r5, #0]
 80232b4:	6128      	str	r0, [r5, #16]
 80232b6:	b920      	cbnz	r0, 80232c2 <_svfiprintf_r+0x2e>
 80232b8:	230c      	movs	r3, #12
 80232ba:	603b      	str	r3, [r7, #0]
 80232bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80232c0:	e0d0      	b.n	8023464 <_svfiprintf_r+0x1d0>
 80232c2:	2340      	movs	r3, #64	; 0x40
 80232c4:	616b      	str	r3, [r5, #20]
 80232c6:	2300      	movs	r3, #0
 80232c8:	9309      	str	r3, [sp, #36]	; 0x24
 80232ca:	2320      	movs	r3, #32
 80232cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80232d4:	2330      	movs	r3, #48	; 0x30
 80232d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802347c <_svfiprintf_r+0x1e8>
 80232da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232de:	f04f 0901 	mov.w	r9, #1
 80232e2:	4623      	mov	r3, r4
 80232e4:	469a      	mov	sl, r3
 80232e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80232ea:	b10a      	cbz	r2, 80232f0 <_svfiprintf_r+0x5c>
 80232ec:	2a25      	cmp	r2, #37	; 0x25
 80232ee:	d1f9      	bne.n	80232e4 <_svfiprintf_r+0x50>
 80232f0:	ebba 0b04 	subs.w	fp, sl, r4
 80232f4:	d00b      	beq.n	802330e <_svfiprintf_r+0x7a>
 80232f6:	465b      	mov	r3, fp
 80232f8:	4622      	mov	r2, r4
 80232fa:	4629      	mov	r1, r5
 80232fc:	4638      	mov	r0, r7
 80232fe:	f7ff ff6f 	bl	80231e0 <__ssputs_r>
 8023302:	3001      	adds	r0, #1
 8023304:	f000 80a9 	beq.w	802345a <_svfiprintf_r+0x1c6>
 8023308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802330a:	445a      	add	r2, fp
 802330c:	9209      	str	r2, [sp, #36]	; 0x24
 802330e:	f89a 3000 	ldrb.w	r3, [sl]
 8023312:	2b00      	cmp	r3, #0
 8023314:	f000 80a1 	beq.w	802345a <_svfiprintf_r+0x1c6>
 8023318:	2300      	movs	r3, #0
 802331a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802331e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023322:	f10a 0a01 	add.w	sl, sl, #1
 8023326:	9304      	str	r3, [sp, #16]
 8023328:	9307      	str	r3, [sp, #28]
 802332a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802332e:	931a      	str	r3, [sp, #104]	; 0x68
 8023330:	4654      	mov	r4, sl
 8023332:	2205      	movs	r2, #5
 8023334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023338:	4850      	ldr	r0, [pc, #320]	; (802347c <_svfiprintf_r+0x1e8>)
 802333a:	f7dc ff91 	bl	8000260 <memchr>
 802333e:	9a04      	ldr	r2, [sp, #16]
 8023340:	b9d8      	cbnz	r0, 802337a <_svfiprintf_r+0xe6>
 8023342:	06d0      	lsls	r0, r2, #27
 8023344:	bf44      	itt	mi
 8023346:	2320      	movmi	r3, #32
 8023348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802334c:	0711      	lsls	r1, r2, #28
 802334e:	bf44      	itt	mi
 8023350:	232b      	movmi	r3, #43	; 0x2b
 8023352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023356:	f89a 3000 	ldrb.w	r3, [sl]
 802335a:	2b2a      	cmp	r3, #42	; 0x2a
 802335c:	d015      	beq.n	802338a <_svfiprintf_r+0xf6>
 802335e:	9a07      	ldr	r2, [sp, #28]
 8023360:	4654      	mov	r4, sl
 8023362:	2000      	movs	r0, #0
 8023364:	f04f 0c0a 	mov.w	ip, #10
 8023368:	4621      	mov	r1, r4
 802336a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802336e:	3b30      	subs	r3, #48	; 0x30
 8023370:	2b09      	cmp	r3, #9
 8023372:	d94d      	bls.n	8023410 <_svfiprintf_r+0x17c>
 8023374:	b1b0      	cbz	r0, 80233a4 <_svfiprintf_r+0x110>
 8023376:	9207      	str	r2, [sp, #28]
 8023378:	e014      	b.n	80233a4 <_svfiprintf_r+0x110>
 802337a:	eba0 0308 	sub.w	r3, r0, r8
 802337e:	fa09 f303 	lsl.w	r3, r9, r3
 8023382:	4313      	orrs	r3, r2
 8023384:	9304      	str	r3, [sp, #16]
 8023386:	46a2      	mov	sl, r4
 8023388:	e7d2      	b.n	8023330 <_svfiprintf_r+0x9c>
 802338a:	9b03      	ldr	r3, [sp, #12]
 802338c:	1d19      	adds	r1, r3, #4
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	9103      	str	r1, [sp, #12]
 8023392:	2b00      	cmp	r3, #0
 8023394:	bfbb      	ittet	lt
 8023396:	425b      	neglt	r3, r3
 8023398:	f042 0202 	orrlt.w	r2, r2, #2
 802339c:	9307      	strge	r3, [sp, #28]
 802339e:	9307      	strlt	r3, [sp, #28]
 80233a0:	bfb8      	it	lt
 80233a2:	9204      	strlt	r2, [sp, #16]
 80233a4:	7823      	ldrb	r3, [r4, #0]
 80233a6:	2b2e      	cmp	r3, #46	; 0x2e
 80233a8:	d10c      	bne.n	80233c4 <_svfiprintf_r+0x130>
 80233aa:	7863      	ldrb	r3, [r4, #1]
 80233ac:	2b2a      	cmp	r3, #42	; 0x2a
 80233ae:	d134      	bne.n	802341a <_svfiprintf_r+0x186>
 80233b0:	9b03      	ldr	r3, [sp, #12]
 80233b2:	1d1a      	adds	r2, r3, #4
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	9203      	str	r2, [sp, #12]
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	bfb8      	it	lt
 80233bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80233c0:	3402      	adds	r4, #2
 80233c2:	9305      	str	r3, [sp, #20]
 80233c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802348c <_svfiprintf_r+0x1f8>
 80233c8:	7821      	ldrb	r1, [r4, #0]
 80233ca:	2203      	movs	r2, #3
 80233cc:	4650      	mov	r0, sl
 80233ce:	f7dc ff47 	bl	8000260 <memchr>
 80233d2:	b138      	cbz	r0, 80233e4 <_svfiprintf_r+0x150>
 80233d4:	9b04      	ldr	r3, [sp, #16]
 80233d6:	eba0 000a 	sub.w	r0, r0, sl
 80233da:	2240      	movs	r2, #64	; 0x40
 80233dc:	4082      	lsls	r2, r0
 80233de:	4313      	orrs	r3, r2
 80233e0:	3401      	adds	r4, #1
 80233e2:	9304      	str	r3, [sp, #16]
 80233e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233e8:	4825      	ldr	r0, [pc, #148]	; (8023480 <_svfiprintf_r+0x1ec>)
 80233ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80233ee:	2206      	movs	r2, #6
 80233f0:	f7dc ff36 	bl	8000260 <memchr>
 80233f4:	2800      	cmp	r0, #0
 80233f6:	d038      	beq.n	802346a <_svfiprintf_r+0x1d6>
 80233f8:	4b22      	ldr	r3, [pc, #136]	; (8023484 <_svfiprintf_r+0x1f0>)
 80233fa:	bb1b      	cbnz	r3, 8023444 <_svfiprintf_r+0x1b0>
 80233fc:	9b03      	ldr	r3, [sp, #12]
 80233fe:	3307      	adds	r3, #7
 8023400:	f023 0307 	bic.w	r3, r3, #7
 8023404:	3308      	adds	r3, #8
 8023406:	9303      	str	r3, [sp, #12]
 8023408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802340a:	4433      	add	r3, r6
 802340c:	9309      	str	r3, [sp, #36]	; 0x24
 802340e:	e768      	b.n	80232e2 <_svfiprintf_r+0x4e>
 8023410:	fb0c 3202 	mla	r2, ip, r2, r3
 8023414:	460c      	mov	r4, r1
 8023416:	2001      	movs	r0, #1
 8023418:	e7a6      	b.n	8023368 <_svfiprintf_r+0xd4>
 802341a:	2300      	movs	r3, #0
 802341c:	3401      	adds	r4, #1
 802341e:	9305      	str	r3, [sp, #20]
 8023420:	4619      	mov	r1, r3
 8023422:	f04f 0c0a 	mov.w	ip, #10
 8023426:	4620      	mov	r0, r4
 8023428:	f810 2b01 	ldrb.w	r2, [r0], #1
 802342c:	3a30      	subs	r2, #48	; 0x30
 802342e:	2a09      	cmp	r2, #9
 8023430:	d903      	bls.n	802343a <_svfiprintf_r+0x1a6>
 8023432:	2b00      	cmp	r3, #0
 8023434:	d0c6      	beq.n	80233c4 <_svfiprintf_r+0x130>
 8023436:	9105      	str	r1, [sp, #20]
 8023438:	e7c4      	b.n	80233c4 <_svfiprintf_r+0x130>
 802343a:	fb0c 2101 	mla	r1, ip, r1, r2
 802343e:	4604      	mov	r4, r0
 8023440:	2301      	movs	r3, #1
 8023442:	e7f0      	b.n	8023426 <_svfiprintf_r+0x192>
 8023444:	ab03      	add	r3, sp, #12
 8023446:	9300      	str	r3, [sp, #0]
 8023448:	462a      	mov	r2, r5
 802344a:	4b0f      	ldr	r3, [pc, #60]	; (8023488 <_svfiprintf_r+0x1f4>)
 802344c:	a904      	add	r1, sp, #16
 802344e:	4638      	mov	r0, r7
 8023450:	f7fc fafa 	bl	801fa48 <_printf_float>
 8023454:	1c42      	adds	r2, r0, #1
 8023456:	4606      	mov	r6, r0
 8023458:	d1d6      	bne.n	8023408 <_svfiprintf_r+0x174>
 802345a:	89ab      	ldrh	r3, [r5, #12]
 802345c:	065b      	lsls	r3, r3, #25
 802345e:	f53f af2d 	bmi.w	80232bc <_svfiprintf_r+0x28>
 8023462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023464:	b01d      	add	sp, #116	; 0x74
 8023466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802346a:	ab03      	add	r3, sp, #12
 802346c:	9300      	str	r3, [sp, #0]
 802346e:	462a      	mov	r2, r5
 8023470:	4b05      	ldr	r3, [pc, #20]	; (8023488 <_svfiprintf_r+0x1f4>)
 8023472:	a904      	add	r1, sp, #16
 8023474:	4638      	mov	r0, r7
 8023476:	f7fc fd6f 	bl	801ff58 <_printf_i>
 802347a:	e7eb      	b.n	8023454 <_svfiprintf_r+0x1c0>
 802347c:	08025e40 	.word	0x08025e40
 8023480:	08025e4a 	.word	0x08025e4a
 8023484:	0801fa49 	.word	0x0801fa49
 8023488:	080231e1 	.word	0x080231e1
 802348c:	08025e46 	.word	0x08025e46

08023490 <__sfputc_r>:
 8023490:	6893      	ldr	r3, [r2, #8]
 8023492:	3b01      	subs	r3, #1
 8023494:	2b00      	cmp	r3, #0
 8023496:	b410      	push	{r4}
 8023498:	6093      	str	r3, [r2, #8]
 802349a:	da08      	bge.n	80234ae <__sfputc_r+0x1e>
 802349c:	6994      	ldr	r4, [r2, #24]
 802349e:	42a3      	cmp	r3, r4
 80234a0:	db01      	blt.n	80234a6 <__sfputc_r+0x16>
 80234a2:	290a      	cmp	r1, #10
 80234a4:	d103      	bne.n	80234ae <__sfputc_r+0x1e>
 80234a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234aa:	f7fd bb83 	b.w	8020bb4 <__swbuf_r>
 80234ae:	6813      	ldr	r3, [r2, #0]
 80234b0:	1c58      	adds	r0, r3, #1
 80234b2:	6010      	str	r0, [r2, #0]
 80234b4:	7019      	strb	r1, [r3, #0]
 80234b6:	4608      	mov	r0, r1
 80234b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234bc:	4770      	bx	lr

080234be <__sfputs_r>:
 80234be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234c0:	4606      	mov	r6, r0
 80234c2:	460f      	mov	r7, r1
 80234c4:	4614      	mov	r4, r2
 80234c6:	18d5      	adds	r5, r2, r3
 80234c8:	42ac      	cmp	r4, r5
 80234ca:	d101      	bne.n	80234d0 <__sfputs_r+0x12>
 80234cc:	2000      	movs	r0, #0
 80234ce:	e007      	b.n	80234e0 <__sfputs_r+0x22>
 80234d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234d4:	463a      	mov	r2, r7
 80234d6:	4630      	mov	r0, r6
 80234d8:	f7ff ffda 	bl	8023490 <__sfputc_r>
 80234dc:	1c43      	adds	r3, r0, #1
 80234de:	d1f3      	bne.n	80234c8 <__sfputs_r+0xa>
 80234e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080234e4 <_vfiprintf_r>:
 80234e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234e8:	460d      	mov	r5, r1
 80234ea:	b09d      	sub	sp, #116	; 0x74
 80234ec:	4614      	mov	r4, r2
 80234ee:	4698      	mov	r8, r3
 80234f0:	4606      	mov	r6, r0
 80234f2:	b118      	cbz	r0, 80234fc <_vfiprintf_r+0x18>
 80234f4:	6a03      	ldr	r3, [r0, #32]
 80234f6:	b90b      	cbnz	r3, 80234fc <_vfiprintf_r+0x18>
 80234f8:	f7fd f8e0 	bl	80206bc <__sinit>
 80234fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234fe:	07d9      	lsls	r1, r3, #31
 8023500:	d405      	bmi.n	802350e <_vfiprintf_r+0x2a>
 8023502:	89ab      	ldrh	r3, [r5, #12]
 8023504:	059a      	lsls	r2, r3, #22
 8023506:	d402      	bmi.n	802350e <_vfiprintf_r+0x2a>
 8023508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802350a:	f7fd fcd6 	bl	8020eba <__retarget_lock_acquire_recursive>
 802350e:	89ab      	ldrh	r3, [r5, #12]
 8023510:	071b      	lsls	r3, r3, #28
 8023512:	d501      	bpl.n	8023518 <_vfiprintf_r+0x34>
 8023514:	692b      	ldr	r3, [r5, #16]
 8023516:	b99b      	cbnz	r3, 8023540 <_vfiprintf_r+0x5c>
 8023518:	4629      	mov	r1, r5
 802351a:	4630      	mov	r0, r6
 802351c:	f7fd fb88 	bl	8020c30 <__swsetup_r>
 8023520:	b170      	cbz	r0, 8023540 <_vfiprintf_r+0x5c>
 8023522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023524:	07dc      	lsls	r4, r3, #31
 8023526:	d504      	bpl.n	8023532 <_vfiprintf_r+0x4e>
 8023528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802352c:	b01d      	add	sp, #116	; 0x74
 802352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023532:	89ab      	ldrh	r3, [r5, #12]
 8023534:	0598      	lsls	r0, r3, #22
 8023536:	d4f7      	bmi.n	8023528 <_vfiprintf_r+0x44>
 8023538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802353a:	f7fd fcbf 	bl	8020ebc <__retarget_lock_release_recursive>
 802353e:	e7f3      	b.n	8023528 <_vfiprintf_r+0x44>
 8023540:	2300      	movs	r3, #0
 8023542:	9309      	str	r3, [sp, #36]	; 0x24
 8023544:	2320      	movs	r3, #32
 8023546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802354a:	f8cd 800c 	str.w	r8, [sp, #12]
 802354e:	2330      	movs	r3, #48	; 0x30
 8023550:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8023704 <_vfiprintf_r+0x220>
 8023554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023558:	f04f 0901 	mov.w	r9, #1
 802355c:	4623      	mov	r3, r4
 802355e:	469a      	mov	sl, r3
 8023560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023564:	b10a      	cbz	r2, 802356a <_vfiprintf_r+0x86>
 8023566:	2a25      	cmp	r2, #37	; 0x25
 8023568:	d1f9      	bne.n	802355e <_vfiprintf_r+0x7a>
 802356a:	ebba 0b04 	subs.w	fp, sl, r4
 802356e:	d00b      	beq.n	8023588 <_vfiprintf_r+0xa4>
 8023570:	465b      	mov	r3, fp
 8023572:	4622      	mov	r2, r4
 8023574:	4629      	mov	r1, r5
 8023576:	4630      	mov	r0, r6
 8023578:	f7ff ffa1 	bl	80234be <__sfputs_r>
 802357c:	3001      	adds	r0, #1
 802357e:	f000 80a9 	beq.w	80236d4 <_vfiprintf_r+0x1f0>
 8023582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023584:	445a      	add	r2, fp
 8023586:	9209      	str	r2, [sp, #36]	; 0x24
 8023588:	f89a 3000 	ldrb.w	r3, [sl]
 802358c:	2b00      	cmp	r3, #0
 802358e:	f000 80a1 	beq.w	80236d4 <_vfiprintf_r+0x1f0>
 8023592:	2300      	movs	r3, #0
 8023594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802359c:	f10a 0a01 	add.w	sl, sl, #1
 80235a0:	9304      	str	r3, [sp, #16]
 80235a2:	9307      	str	r3, [sp, #28]
 80235a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80235a8:	931a      	str	r3, [sp, #104]	; 0x68
 80235aa:	4654      	mov	r4, sl
 80235ac:	2205      	movs	r2, #5
 80235ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235b2:	4854      	ldr	r0, [pc, #336]	; (8023704 <_vfiprintf_r+0x220>)
 80235b4:	f7dc fe54 	bl	8000260 <memchr>
 80235b8:	9a04      	ldr	r2, [sp, #16]
 80235ba:	b9d8      	cbnz	r0, 80235f4 <_vfiprintf_r+0x110>
 80235bc:	06d1      	lsls	r1, r2, #27
 80235be:	bf44      	itt	mi
 80235c0:	2320      	movmi	r3, #32
 80235c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235c6:	0713      	lsls	r3, r2, #28
 80235c8:	bf44      	itt	mi
 80235ca:	232b      	movmi	r3, #43	; 0x2b
 80235cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235d0:	f89a 3000 	ldrb.w	r3, [sl]
 80235d4:	2b2a      	cmp	r3, #42	; 0x2a
 80235d6:	d015      	beq.n	8023604 <_vfiprintf_r+0x120>
 80235d8:	9a07      	ldr	r2, [sp, #28]
 80235da:	4654      	mov	r4, sl
 80235dc:	2000      	movs	r0, #0
 80235de:	f04f 0c0a 	mov.w	ip, #10
 80235e2:	4621      	mov	r1, r4
 80235e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80235e8:	3b30      	subs	r3, #48	; 0x30
 80235ea:	2b09      	cmp	r3, #9
 80235ec:	d94d      	bls.n	802368a <_vfiprintf_r+0x1a6>
 80235ee:	b1b0      	cbz	r0, 802361e <_vfiprintf_r+0x13a>
 80235f0:	9207      	str	r2, [sp, #28]
 80235f2:	e014      	b.n	802361e <_vfiprintf_r+0x13a>
 80235f4:	eba0 0308 	sub.w	r3, r0, r8
 80235f8:	fa09 f303 	lsl.w	r3, r9, r3
 80235fc:	4313      	orrs	r3, r2
 80235fe:	9304      	str	r3, [sp, #16]
 8023600:	46a2      	mov	sl, r4
 8023602:	e7d2      	b.n	80235aa <_vfiprintf_r+0xc6>
 8023604:	9b03      	ldr	r3, [sp, #12]
 8023606:	1d19      	adds	r1, r3, #4
 8023608:	681b      	ldr	r3, [r3, #0]
 802360a:	9103      	str	r1, [sp, #12]
 802360c:	2b00      	cmp	r3, #0
 802360e:	bfbb      	ittet	lt
 8023610:	425b      	neglt	r3, r3
 8023612:	f042 0202 	orrlt.w	r2, r2, #2
 8023616:	9307      	strge	r3, [sp, #28]
 8023618:	9307      	strlt	r3, [sp, #28]
 802361a:	bfb8      	it	lt
 802361c:	9204      	strlt	r2, [sp, #16]
 802361e:	7823      	ldrb	r3, [r4, #0]
 8023620:	2b2e      	cmp	r3, #46	; 0x2e
 8023622:	d10c      	bne.n	802363e <_vfiprintf_r+0x15a>
 8023624:	7863      	ldrb	r3, [r4, #1]
 8023626:	2b2a      	cmp	r3, #42	; 0x2a
 8023628:	d134      	bne.n	8023694 <_vfiprintf_r+0x1b0>
 802362a:	9b03      	ldr	r3, [sp, #12]
 802362c:	1d1a      	adds	r2, r3, #4
 802362e:	681b      	ldr	r3, [r3, #0]
 8023630:	9203      	str	r2, [sp, #12]
 8023632:	2b00      	cmp	r3, #0
 8023634:	bfb8      	it	lt
 8023636:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802363a:	3402      	adds	r4, #2
 802363c:	9305      	str	r3, [sp, #20]
 802363e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8023714 <_vfiprintf_r+0x230>
 8023642:	7821      	ldrb	r1, [r4, #0]
 8023644:	2203      	movs	r2, #3
 8023646:	4650      	mov	r0, sl
 8023648:	f7dc fe0a 	bl	8000260 <memchr>
 802364c:	b138      	cbz	r0, 802365e <_vfiprintf_r+0x17a>
 802364e:	9b04      	ldr	r3, [sp, #16]
 8023650:	eba0 000a 	sub.w	r0, r0, sl
 8023654:	2240      	movs	r2, #64	; 0x40
 8023656:	4082      	lsls	r2, r0
 8023658:	4313      	orrs	r3, r2
 802365a:	3401      	adds	r4, #1
 802365c:	9304      	str	r3, [sp, #16]
 802365e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023662:	4829      	ldr	r0, [pc, #164]	; (8023708 <_vfiprintf_r+0x224>)
 8023664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023668:	2206      	movs	r2, #6
 802366a:	f7dc fdf9 	bl	8000260 <memchr>
 802366e:	2800      	cmp	r0, #0
 8023670:	d03f      	beq.n	80236f2 <_vfiprintf_r+0x20e>
 8023672:	4b26      	ldr	r3, [pc, #152]	; (802370c <_vfiprintf_r+0x228>)
 8023674:	bb1b      	cbnz	r3, 80236be <_vfiprintf_r+0x1da>
 8023676:	9b03      	ldr	r3, [sp, #12]
 8023678:	3307      	adds	r3, #7
 802367a:	f023 0307 	bic.w	r3, r3, #7
 802367e:	3308      	adds	r3, #8
 8023680:	9303      	str	r3, [sp, #12]
 8023682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023684:	443b      	add	r3, r7
 8023686:	9309      	str	r3, [sp, #36]	; 0x24
 8023688:	e768      	b.n	802355c <_vfiprintf_r+0x78>
 802368a:	fb0c 3202 	mla	r2, ip, r2, r3
 802368e:	460c      	mov	r4, r1
 8023690:	2001      	movs	r0, #1
 8023692:	e7a6      	b.n	80235e2 <_vfiprintf_r+0xfe>
 8023694:	2300      	movs	r3, #0
 8023696:	3401      	adds	r4, #1
 8023698:	9305      	str	r3, [sp, #20]
 802369a:	4619      	mov	r1, r3
 802369c:	f04f 0c0a 	mov.w	ip, #10
 80236a0:	4620      	mov	r0, r4
 80236a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236a6:	3a30      	subs	r2, #48	; 0x30
 80236a8:	2a09      	cmp	r2, #9
 80236aa:	d903      	bls.n	80236b4 <_vfiprintf_r+0x1d0>
 80236ac:	2b00      	cmp	r3, #0
 80236ae:	d0c6      	beq.n	802363e <_vfiprintf_r+0x15a>
 80236b0:	9105      	str	r1, [sp, #20]
 80236b2:	e7c4      	b.n	802363e <_vfiprintf_r+0x15a>
 80236b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80236b8:	4604      	mov	r4, r0
 80236ba:	2301      	movs	r3, #1
 80236bc:	e7f0      	b.n	80236a0 <_vfiprintf_r+0x1bc>
 80236be:	ab03      	add	r3, sp, #12
 80236c0:	9300      	str	r3, [sp, #0]
 80236c2:	462a      	mov	r2, r5
 80236c4:	4b12      	ldr	r3, [pc, #72]	; (8023710 <_vfiprintf_r+0x22c>)
 80236c6:	a904      	add	r1, sp, #16
 80236c8:	4630      	mov	r0, r6
 80236ca:	f7fc f9bd 	bl	801fa48 <_printf_float>
 80236ce:	4607      	mov	r7, r0
 80236d0:	1c78      	adds	r0, r7, #1
 80236d2:	d1d6      	bne.n	8023682 <_vfiprintf_r+0x19e>
 80236d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236d6:	07d9      	lsls	r1, r3, #31
 80236d8:	d405      	bmi.n	80236e6 <_vfiprintf_r+0x202>
 80236da:	89ab      	ldrh	r3, [r5, #12]
 80236dc:	059a      	lsls	r2, r3, #22
 80236de:	d402      	bmi.n	80236e6 <_vfiprintf_r+0x202>
 80236e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80236e2:	f7fd fbeb 	bl	8020ebc <__retarget_lock_release_recursive>
 80236e6:	89ab      	ldrh	r3, [r5, #12]
 80236e8:	065b      	lsls	r3, r3, #25
 80236ea:	f53f af1d 	bmi.w	8023528 <_vfiprintf_r+0x44>
 80236ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236f0:	e71c      	b.n	802352c <_vfiprintf_r+0x48>
 80236f2:	ab03      	add	r3, sp, #12
 80236f4:	9300      	str	r3, [sp, #0]
 80236f6:	462a      	mov	r2, r5
 80236f8:	4b05      	ldr	r3, [pc, #20]	; (8023710 <_vfiprintf_r+0x22c>)
 80236fa:	a904      	add	r1, sp, #16
 80236fc:	4630      	mov	r0, r6
 80236fe:	f7fc fc2b 	bl	801ff58 <_printf_i>
 8023702:	e7e4      	b.n	80236ce <_vfiprintf_r+0x1ea>
 8023704:	08025e40 	.word	0x08025e40
 8023708:	08025e4a 	.word	0x08025e4a
 802370c:	0801fa49 	.word	0x0801fa49
 8023710:	080234bf 	.word	0x080234bf
 8023714:	08025e46 	.word	0x08025e46

08023718 <__sflush_r>:
 8023718:	898a      	ldrh	r2, [r1, #12]
 802371a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802371e:	4605      	mov	r5, r0
 8023720:	0710      	lsls	r0, r2, #28
 8023722:	460c      	mov	r4, r1
 8023724:	d458      	bmi.n	80237d8 <__sflush_r+0xc0>
 8023726:	684b      	ldr	r3, [r1, #4]
 8023728:	2b00      	cmp	r3, #0
 802372a:	dc05      	bgt.n	8023738 <__sflush_r+0x20>
 802372c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802372e:	2b00      	cmp	r3, #0
 8023730:	dc02      	bgt.n	8023738 <__sflush_r+0x20>
 8023732:	2000      	movs	r0, #0
 8023734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802373a:	2e00      	cmp	r6, #0
 802373c:	d0f9      	beq.n	8023732 <__sflush_r+0x1a>
 802373e:	2300      	movs	r3, #0
 8023740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023744:	682f      	ldr	r7, [r5, #0]
 8023746:	6a21      	ldr	r1, [r4, #32]
 8023748:	602b      	str	r3, [r5, #0]
 802374a:	d032      	beq.n	80237b2 <__sflush_r+0x9a>
 802374c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802374e:	89a3      	ldrh	r3, [r4, #12]
 8023750:	075a      	lsls	r2, r3, #29
 8023752:	d505      	bpl.n	8023760 <__sflush_r+0x48>
 8023754:	6863      	ldr	r3, [r4, #4]
 8023756:	1ac0      	subs	r0, r0, r3
 8023758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802375a:	b10b      	cbz	r3, 8023760 <__sflush_r+0x48>
 802375c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802375e:	1ac0      	subs	r0, r0, r3
 8023760:	2300      	movs	r3, #0
 8023762:	4602      	mov	r2, r0
 8023764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023766:	6a21      	ldr	r1, [r4, #32]
 8023768:	4628      	mov	r0, r5
 802376a:	47b0      	blx	r6
 802376c:	1c43      	adds	r3, r0, #1
 802376e:	89a3      	ldrh	r3, [r4, #12]
 8023770:	d106      	bne.n	8023780 <__sflush_r+0x68>
 8023772:	6829      	ldr	r1, [r5, #0]
 8023774:	291d      	cmp	r1, #29
 8023776:	d82b      	bhi.n	80237d0 <__sflush_r+0xb8>
 8023778:	4a29      	ldr	r2, [pc, #164]	; (8023820 <__sflush_r+0x108>)
 802377a:	410a      	asrs	r2, r1
 802377c:	07d6      	lsls	r6, r2, #31
 802377e:	d427      	bmi.n	80237d0 <__sflush_r+0xb8>
 8023780:	2200      	movs	r2, #0
 8023782:	6062      	str	r2, [r4, #4]
 8023784:	04d9      	lsls	r1, r3, #19
 8023786:	6922      	ldr	r2, [r4, #16]
 8023788:	6022      	str	r2, [r4, #0]
 802378a:	d504      	bpl.n	8023796 <__sflush_r+0x7e>
 802378c:	1c42      	adds	r2, r0, #1
 802378e:	d101      	bne.n	8023794 <__sflush_r+0x7c>
 8023790:	682b      	ldr	r3, [r5, #0]
 8023792:	b903      	cbnz	r3, 8023796 <__sflush_r+0x7e>
 8023794:	6560      	str	r0, [r4, #84]	; 0x54
 8023796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023798:	602f      	str	r7, [r5, #0]
 802379a:	2900      	cmp	r1, #0
 802379c:	d0c9      	beq.n	8023732 <__sflush_r+0x1a>
 802379e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80237a2:	4299      	cmp	r1, r3
 80237a4:	d002      	beq.n	80237ac <__sflush_r+0x94>
 80237a6:	4628      	mov	r0, r5
 80237a8:	f7fe f9c6 	bl	8021b38 <_free_r>
 80237ac:	2000      	movs	r0, #0
 80237ae:	6360      	str	r0, [r4, #52]	; 0x34
 80237b0:	e7c0      	b.n	8023734 <__sflush_r+0x1c>
 80237b2:	2301      	movs	r3, #1
 80237b4:	4628      	mov	r0, r5
 80237b6:	47b0      	blx	r6
 80237b8:	1c41      	adds	r1, r0, #1
 80237ba:	d1c8      	bne.n	802374e <__sflush_r+0x36>
 80237bc:	682b      	ldr	r3, [r5, #0]
 80237be:	2b00      	cmp	r3, #0
 80237c0:	d0c5      	beq.n	802374e <__sflush_r+0x36>
 80237c2:	2b1d      	cmp	r3, #29
 80237c4:	d001      	beq.n	80237ca <__sflush_r+0xb2>
 80237c6:	2b16      	cmp	r3, #22
 80237c8:	d101      	bne.n	80237ce <__sflush_r+0xb6>
 80237ca:	602f      	str	r7, [r5, #0]
 80237cc:	e7b1      	b.n	8023732 <__sflush_r+0x1a>
 80237ce:	89a3      	ldrh	r3, [r4, #12]
 80237d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80237d4:	81a3      	strh	r3, [r4, #12]
 80237d6:	e7ad      	b.n	8023734 <__sflush_r+0x1c>
 80237d8:	690f      	ldr	r7, [r1, #16]
 80237da:	2f00      	cmp	r7, #0
 80237dc:	d0a9      	beq.n	8023732 <__sflush_r+0x1a>
 80237de:	0793      	lsls	r3, r2, #30
 80237e0:	680e      	ldr	r6, [r1, #0]
 80237e2:	bf08      	it	eq
 80237e4:	694b      	ldreq	r3, [r1, #20]
 80237e6:	600f      	str	r7, [r1, #0]
 80237e8:	bf18      	it	ne
 80237ea:	2300      	movne	r3, #0
 80237ec:	eba6 0807 	sub.w	r8, r6, r7
 80237f0:	608b      	str	r3, [r1, #8]
 80237f2:	f1b8 0f00 	cmp.w	r8, #0
 80237f6:	dd9c      	ble.n	8023732 <__sflush_r+0x1a>
 80237f8:	6a21      	ldr	r1, [r4, #32]
 80237fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80237fc:	4643      	mov	r3, r8
 80237fe:	463a      	mov	r2, r7
 8023800:	4628      	mov	r0, r5
 8023802:	47b0      	blx	r6
 8023804:	2800      	cmp	r0, #0
 8023806:	dc06      	bgt.n	8023816 <__sflush_r+0xfe>
 8023808:	89a3      	ldrh	r3, [r4, #12]
 802380a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802380e:	81a3      	strh	r3, [r4, #12]
 8023810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023814:	e78e      	b.n	8023734 <__sflush_r+0x1c>
 8023816:	4407      	add	r7, r0
 8023818:	eba8 0800 	sub.w	r8, r8, r0
 802381c:	e7e9      	b.n	80237f2 <__sflush_r+0xda>
 802381e:	bf00      	nop
 8023820:	dfbffffe 	.word	0xdfbffffe

08023824 <_fflush_r>:
 8023824:	b538      	push	{r3, r4, r5, lr}
 8023826:	690b      	ldr	r3, [r1, #16]
 8023828:	4605      	mov	r5, r0
 802382a:	460c      	mov	r4, r1
 802382c:	b913      	cbnz	r3, 8023834 <_fflush_r+0x10>
 802382e:	2500      	movs	r5, #0
 8023830:	4628      	mov	r0, r5
 8023832:	bd38      	pop	{r3, r4, r5, pc}
 8023834:	b118      	cbz	r0, 802383e <_fflush_r+0x1a>
 8023836:	6a03      	ldr	r3, [r0, #32]
 8023838:	b90b      	cbnz	r3, 802383e <_fflush_r+0x1a>
 802383a:	f7fc ff3f 	bl	80206bc <__sinit>
 802383e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023842:	2b00      	cmp	r3, #0
 8023844:	d0f3      	beq.n	802382e <_fflush_r+0xa>
 8023846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023848:	07d0      	lsls	r0, r2, #31
 802384a:	d404      	bmi.n	8023856 <_fflush_r+0x32>
 802384c:	0599      	lsls	r1, r3, #22
 802384e:	d402      	bmi.n	8023856 <_fflush_r+0x32>
 8023850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023852:	f7fd fb32 	bl	8020eba <__retarget_lock_acquire_recursive>
 8023856:	4628      	mov	r0, r5
 8023858:	4621      	mov	r1, r4
 802385a:	f7ff ff5d 	bl	8023718 <__sflush_r>
 802385e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023860:	07da      	lsls	r2, r3, #31
 8023862:	4605      	mov	r5, r0
 8023864:	d4e4      	bmi.n	8023830 <_fflush_r+0xc>
 8023866:	89a3      	ldrh	r3, [r4, #12]
 8023868:	059b      	lsls	r3, r3, #22
 802386a:	d4e1      	bmi.n	8023830 <_fflush_r+0xc>
 802386c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802386e:	f7fd fb25 	bl	8020ebc <__retarget_lock_release_recursive>
 8023872:	e7dd      	b.n	8023830 <_fflush_r+0xc>

08023874 <fiprintf>:
 8023874:	b40e      	push	{r1, r2, r3}
 8023876:	b503      	push	{r0, r1, lr}
 8023878:	4601      	mov	r1, r0
 802387a:	ab03      	add	r3, sp, #12
 802387c:	4805      	ldr	r0, [pc, #20]	; (8023894 <fiprintf+0x20>)
 802387e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023882:	6800      	ldr	r0, [r0, #0]
 8023884:	9301      	str	r3, [sp, #4]
 8023886:	f7ff fe2d 	bl	80234e4 <_vfiprintf_r>
 802388a:	b002      	add	sp, #8
 802388c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023890:	b003      	add	sp, #12
 8023892:	4770      	bx	lr
 8023894:	2000099c 	.word	0x2000099c

08023898 <__swhatbuf_r>:
 8023898:	b570      	push	{r4, r5, r6, lr}
 802389a:	460c      	mov	r4, r1
 802389c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238a0:	2900      	cmp	r1, #0
 80238a2:	b096      	sub	sp, #88	; 0x58
 80238a4:	4615      	mov	r5, r2
 80238a6:	461e      	mov	r6, r3
 80238a8:	da0d      	bge.n	80238c6 <__swhatbuf_r+0x2e>
 80238aa:	89a3      	ldrh	r3, [r4, #12]
 80238ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80238b0:	f04f 0100 	mov.w	r1, #0
 80238b4:	bf0c      	ite	eq
 80238b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80238ba:	2340      	movne	r3, #64	; 0x40
 80238bc:	2000      	movs	r0, #0
 80238be:	6031      	str	r1, [r6, #0]
 80238c0:	602b      	str	r3, [r5, #0]
 80238c2:	b016      	add	sp, #88	; 0x58
 80238c4:	bd70      	pop	{r4, r5, r6, pc}
 80238c6:	466a      	mov	r2, sp
 80238c8:	f000 f848 	bl	802395c <_fstat_r>
 80238cc:	2800      	cmp	r0, #0
 80238ce:	dbec      	blt.n	80238aa <__swhatbuf_r+0x12>
 80238d0:	9901      	ldr	r1, [sp, #4]
 80238d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80238d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80238da:	4259      	negs	r1, r3
 80238dc:	4159      	adcs	r1, r3
 80238de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80238e2:	e7eb      	b.n	80238bc <__swhatbuf_r+0x24>

080238e4 <__smakebuf_r>:
 80238e4:	898b      	ldrh	r3, [r1, #12]
 80238e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80238e8:	079d      	lsls	r5, r3, #30
 80238ea:	4606      	mov	r6, r0
 80238ec:	460c      	mov	r4, r1
 80238ee:	d507      	bpl.n	8023900 <__smakebuf_r+0x1c>
 80238f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80238f4:	6023      	str	r3, [r4, #0]
 80238f6:	6123      	str	r3, [r4, #16]
 80238f8:	2301      	movs	r3, #1
 80238fa:	6163      	str	r3, [r4, #20]
 80238fc:	b002      	add	sp, #8
 80238fe:	bd70      	pop	{r4, r5, r6, pc}
 8023900:	ab01      	add	r3, sp, #4
 8023902:	466a      	mov	r2, sp
 8023904:	f7ff ffc8 	bl	8023898 <__swhatbuf_r>
 8023908:	9900      	ldr	r1, [sp, #0]
 802390a:	4605      	mov	r5, r0
 802390c:	4630      	mov	r0, r6
 802390e:	f7fb fe5d 	bl	801f5cc <_malloc_r>
 8023912:	b948      	cbnz	r0, 8023928 <__smakebuf_r+0x44>
 8023914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023918:	059a      	lsls	r2, r3, #22
 802391a:	d4ef      	bmi.n	80238fc <__smakebuf_r+0x18>
 802391c:	f023 0303 	bic.w	r3, r3, #3
 8023920:	f043 0302 	orr.w	r3, r3, #2
 8023924:	81a3      	strh	r3, [r4, #12]
 8023926:	e7e3      	b.n	80238f0 <__smakebuf_r+0xc>
 8023928:	89a3      	ldrh	r3, [r4, #12]
 802392a:	6020      	str	r0, [r4, #0]
 802392c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023930:	81a3      	strh	r3, [r4, #12]
 8023932:	9b00      	ldr	r3, [sp, #0]
 8023934:	6163      	str	r3, [r4, #20]
 8023936:	9b01      	ldr	r3, [sp, #4]
 8023938:	6120      	str	r0, [r4, #16]
 802393a:	b15b      	cbz	r3, 8023954 <__smakebuf_r+0x70>
 802393c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023940:	4630      	mov	r0, r6
 8023942:	f000 f81d 	bl	8023980 <_isatty_r>
 8023946:	b128      	cbz	r0, 8023954 <__smakebuf_r+0x70>
 8023948:	89a3      	ldrh	r3, [r4, #12]
 802394a:	f023 0303 	bic.w	r3, r3, #3
 802394e:	f043 0301 	orr.w	r3, r3, #1
 8023952:	81a3      	strh	r3, [r4, #12]
 8023954:	89a3      	ldrh	r3, [r4, #12]
 8023956:	431d      	orrs	r5, r3
 8023958:	81a5      	strh	r5, [r4, #12]
 802395a:	e7cf      	b.n	80238fc <__smakebuf_r+0x18>

0802395c <_fstat_r>:
 802395c:	b538      	push	{r3, r4, r5, lr}
 802395e:	4d07      	ldr	r5, [pc, #28]	; (802397c <_fstat_r+0x20>)
 8023960:	2300      	movs	r3, #0
 8023962:	4604      	mov	r4, r0
 8023964:	4608      	mov	r0, r1
 8023966:	4611      	mov	r1, r2
 8023968:	602b      	str	r3, [r5, #0]
 802396a:	f7e0 f86c 	bl	8003a46 <_fstat>
 802396e:	1c43      	adds	r3, r0, #1
 8023970:	d102      	bne.n	8023978 <_fstat_r+0x1c>
 8023972:	682b      	ldr	r3, [r5, #0]
 8023974:	b103      	cbz	r3, 8023978 <_fstat_r+0x1c>
 8023976:	6023      	str	r3, [r4, #0]
 8023978:	bd38      	pop	{r3, r4, r5, pc}
 802397a:	bf00      	nop
 802397c:	20017128 	.word	0x20017128

08023980 <_isatty_r>:
 8023980:	b538      	push	{r3, r4, r5, lr}
 8023982:	4d06      	ldr	r5, [pc, #24]	; (802399c <_isatty_r+0x1c>)
 8023984:	2300      	movs	r3, #0
 8023986:	4604      	mov	r4, r0
 8023988:	4608      	mov	r0, r1
 802398a:	602b      	str	r3, [r5, #0]
 802398c:	f7e0 f86b 	bl	8003a66 <_isatty>
 8023990:	1c43      	adds	r3, r0, #1
 8023992:	d102      	bne.n	802399a <_isatty_r+0x1a>
 8023994:	682b      	ldr	r3, [r5, #0]
 8023996:	b103      	cbz	r3, 802399a <_isatty_r+0x1a>
 8023998:	6023      	str	r3, [r4, #0]
 802399a:	bd38      	pop	{r3, r4, r5, pc}
 802399c:	20017128 	.word	0x20017128

080239a0 <nan>:
 80239a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80239a8 <nan+0x8>
 80239a4:	4770      	bx	lr
 80239a6:	bf00      	nop
 80239a8:	00000000 	.word	0x00000000
 80239ac:	7ff80000 	.word	0x7ff80000

080239b0 <abort>:
 80239b0:	b508      	push	{r3, lr}
 80239b2:	2006      	movs	r0, #6
 80239b4:	f000 fba0 	bl	80240f8 <raise>
 80239b8:	2001      	movs	r0, #1
 80239ba:	f7df fff5 	bl	80039a8 <_exit>

080239be <rshift>:
 80239be:	6903      	ldr	r3, [r0, #16]
 80239c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80239c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80239c8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80239cc:	f100 0414 	add.w	r4, r0, #20
 80239d0:	dd45      	ble.n	8023a5e <rshift+0xa0>
 80239d2:	f011 011f 	ands.w	r1, r1, #31
 80239d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80239da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80239de:	d10c      	bne.n	80239fa <rshift+0x3c>
 80239e0:	f100 0710 	add.w	r7, r0, #16
 80239e4:	4629      	mov	r1, r5
 80239e6:	42b1      	cmp	r1, r6
 80239e8:	d334      	bcc.n	8023a54 <rshift+0x96>
 80239ea:	1a9b      	subs	r3, r3, r2
 80239ec:	009b      	lsls	r3, r3, #2
 80239ee:	1eea      	subs	r2, r5, #3
 80239f0:	4296      	cmp	r6, r2
 80239f2:	bf38      	it	cc
 80239f4:	2300      	movcc	r3, #0
 80239f6:	4423      	add	r3, r4
 80239f8:	e015      	b.n	8023a26 <rshift+0x68>
 80239fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80239fe:	f1c1 0820 	rsb	r8, r1, #32
 8023a02:	40cf      	lsrs	r7, r1
 8023a04:	f105 0e04 	add.w	lr, r5, #4
 8023a08:	46a1      	mov	r9, r4
 8023a0a:	4576      	cmp	r6, lr
 8023a0c:	46f4      	mov	ip, lr
 8023a0e:	d815      	bhi.n	8023a3c <rshift+0x7e>
 8023a10:	1a9a      	subs	r2, r3, r2
 8023a12:	0092      	lsls	r2, r2, #2
 8023a14:	3a04      	subs	r2, #4
 8023a16:	3501      	adds	r5, #1
 8023a18:	42ae      	cmp	r6, r5
 8023a1a:	bf38      	it	cc
 8023a1c:	2200      	movcc	r2, #0
 8023a1e:	18a3      	adds	r3, r4, r2
 8023a20:	50a7      	str	r7, [r4, r2]
 8023a22:	b107      	cbz	r7, 8023a26 <rshift+0x68>
 8023a24:	3304      	adds	r3, #4
 8023a26:	1b1a      	subs	r2, r3, r4
 8023a28:	42a3      	cmp	r3, r4
 8023a2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8023a2e:	bf08      	it	eq
 8023a30:	2300      	moveq	r3, #0
 8023a32:	6102      	str	r2, [r0, #16]
 8023a34:	bf08      	it	eq
 8023a36:	6143      	streq	r3, [r0, #20]
 8023a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023a3c:	f8dc c000 	ldr.w	ip, [ip]
 8023a40:	fa0c fc08 	lsl.w	ip, ip, r8
 8023a44:	ea4c 0707 	orr.w	r7, ip, r7
 8023a48:	f849 7b04 	str.w	r7, [r9], #4
 8023a4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023a50:	40cf      	lsrs	r7, r1
 8023a52:	e7da      	b.n	8023a0a <rshift+0x4c>
 8023a54:	f851 cb04 	ldr.w	ip, [r1], #4
 8023a58:	f847 cf04 	str.w	ip, [r7, #4]!
 8023a5c:	e7c3      	b.n	80239e6 <rshift+0x28>
 8023a5e:	4623      	mov	r3, r4
 8023a60:	e7e1      	b.n	8023a26 <rshift+0x68>

08023a62 <__hexdig_fun>:
 8023a62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8023a66:	2b09      	cmp	r3, #9
 8023a68:	d802      	bhi.n	8023a70 <__hexdig_fun+0xe>
 8023a6a:	3820      	subs	r0, #32
 8023a6c:	b2c0      	uxtb	r0, r0
 8023a6e:	4770      	bx	lr
 8023a70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8023a74:	2b05      	cmp	r3, #5
 8023a76:	d801      	bhi.n	8023a7c <__hexdig_fun+0x1a>
 8023a78:	3847      	subs	r0, #71	; 0x47
 8023a7a:	e7f7      	b.n	8023a6c <__hexdig_fun+0xa>
 8023a7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023a80:	2b05      	cmp	r3, #5
 8023a82:	d801      	bhi.n	8023a88 <__hexdig_fun+0x26>
 8023a84:	3827      	subs	r0, #39	; 0x27
 8023a86:	e7f1      	b.n	8023a6c <__hexdig_fun+0xa>
 8023a88:	2000      	movs	r0, #0
 8023a8a:	4770      	bx	lr

08023a8c <__gethex>:
 8023a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a90:	4617      	mov	r7, r2
 8023a92:	680a      	ldr	r2, [r1, #0]
 8023a94:	b085      	sub	sp, #20
 8023a96:	f102 0b02 	add.w	fp, r2, #2
 8023a9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023a9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023aa2:	4681      	mov	r9, r0
 8023aa4:	468a      	mov	sl, r1
 8023aa6:	9302      	str	r3, [sp, #8]
 8023aa8:	32fe      	adds	r2, #254	; 0xfe
 8023aaa:	eb02 030b 	add.w	r3, r2, fp
 8023aae:	46d8      	mov	r8, fp
 8023ab0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8023ab4:	9301      	str	r3, [sp, #4]
 8023ab6:	2830      	cmp	r0, #48	; 0x30
 8023ab8:	d0f7      	beq.n	8023aaa <__gethex+0x1e>
 8023aba:	f7ff ffd2 	bl	8023a62 <__hexdig_fun>
 8023abe:	4604      	mov	r4, r0
 8023ac0:	2800      	cmp	r0, #0
 8023ac2:	d138      	bne.n	8023b36 <__gethex+0xaa>
 8023ac4:	49a7      	ldr	r1, [pc, #668]	; (8023d64 <__gethex+0x2d8>)
 8023ac6:	2201      	movs	r2, #1
 8023ac8:	4640      	mov	r0, r8
 8023aca:	f7fd f948 	bl	8020d5e <strncmp>
 8023ace:	4606      	mov	r6, r0
 8023ad0:	2800      	cmp	r0, #0
 8023ad2:	d169      	bne.n	8023ba8 <__gethex+0x11c>
 8023ad4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023ad8:	465d      	mov	r5, fp
 8023ada:	f7ff ffc2 	bl	8023a62 <__hexdig_fun>
 8023ade:	2800      	cmp	r0, #0
 8023ae0:	d064      	beq.n	8023bac <__gethex+0x120>
 8023ae2:	465a      	mov	r2, fp
 8023ae4:	7810      	ldrb	r0, [r2, #0]
 8023ae6:	2830      	cmp	r0, #48	; 0x30
 8023ae8:	4690      	mov	r8, r2
 8023aea:	f102 0201 	add.w	r2, r2, #1
 8023aee:	d0f9      	beq.n	8023ae4 <__gethex+0x58>
 8023af0:	f7ff ffb7 	bl	8023a62 <__hexdig_fun>
 8023af4:	2301      	movs	r3, #1
 8023af6:	fab0 f480 	clz	r4, r0
 8023afa:	0964      	lsrs	r4, r4, #5
 8023afc:	465e      	mov	r6, fp
 8023afe:	9301      	str	r3, [sp, #4]
 8023b00:	4642      	mov	r2, r8
 8023b02:	4615      	mov	r5, r2
 8023b04:	3201      	adds	r2, #1
 8023b06:	7828      	ldrb	r0, [r5, #0]
 8023b08:	f7ff ffab 	bl	8023a62 <__hexdig_fun>
 8023b0c:	2800      	cmp	r0, #0
 8023b0e:	d1f8      	bne.n	8023b02 <__gethex+0x76>
 8023b10:	4994      	ldr	r1, [pc, #592]	; (8023d64 <__gethex+0x2d8>)
 8023b12:	2201      	movs	r2, #1
 8023b14:	4628      	mov	r0, r5
 8023b16:	f7fd f922 	bl	8020d5e <strncmp>
 8023b1a:	b978      	cbnz	r0, 8023b3c <__gethex+0xb0>
 8023b1c:	b946      	cbnz	r6, 8023b30 <__gethex+0xa4>
 8023b1e:	1c6e      	adds	r6, r5, #1
 8023b20:	4632      	mov	r2, r6
 8023b22:	4615      	mov	r5, r2
 8023b24:	3201      	adds	r2, #1
 8023b26:	7828      	ldrb	r0, [r5, #0]
 8023b28:	f7ff ff9b 	bl	8023a62 <__hexdig_fun>
 8023b2c:	2800      	cmp	r0, #0
 8023b2e:	d1f8      	bne.n	8023b22 <__gethex+0x96>
 8023b30:	1b73      	subs	r3, r6, r5
 8023b32:	009e      	lsls	r6, r3, #2
 8023b34:	e004      	b.n	8023b40 <__gethex+0xb4>
 8023b36:	2400      	movs	r4, #0
 8023b38:	4626      	mov	r6, r4
 8023b3a:	e7e1      	b.n	8023b00 <__gethex+0x74>
 8023b3c:	2e00      	cmp	r6, #0
 8023b3e:	d1f7      	bne.n	8023b30 <__gethex+0xa4>
 8023b40:	782b      	ldrb	r3, [r5, #0]
 8023b42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023b46:	2b50      	cmp	r3, #80	; 0x50
 8023b48:	d13d      	bne.n	8023bc6 <__gethex+0x13a>
 8023b4a:	786b      	ldrb	r3, [r5, #1]
 8023b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8023b4e:	d02f      	beq.n	8023bb0 <__gethex+0x124>
 8023b50:	2b2d      	cmp	r3, #45	; 0x2d
 8023b52:	d031      	beq.n	8023bb8 <__gethex+0x12c>
 8023b54:	1c69      	adds	r1, r5, #1
 8023b56:	f04f 0b00 	mov.w	fp, #0
 8023b5a:	7808      	ldrb	r0, [r1, #0]
 8023b5c:	f7ff ff81 	bl	8023a62 <__hexdig_fun>
 8023b60:	1e42      	subs	r2, r0, #1
 8023b62:	b2d2      	uxtb	r2, r2
 8023b64:	2a18      	cmp	r2, #24
 8023b66:	d82e      	bhi.n	8023bc6 <__gethex+0x13a>
 8023b68:	f1a0 0210 	sub.w	r2, r0, #16
 8023b6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023b70:	f7ff ff77 	bl	8023a62 <__hexdig_fun>
 8023b74:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023b78:	fa5f fc8c 	uxtb.w	ip, ip
 8023b7c:	f1bc 0f18 	cmp.w	ip, #24
 8023b80:	d91d      	bls.n	8023bbe <__gethex+0x132>
 8023b82:	f1bb 0f00 	cmp.w	fp, #0
 8023b86:	d000      	beq.n	8023b8a <__gethex+0xfe>
 8023b88:	4252      	negs	r2, r2
 8023b8a:	4416      	add	r6, r2
 8023b8c:	f8ca 1000 	str.w	r1, [sl]
 8023b90:	b1dc      	cbz	r4, 8023bca <__gethex+0x13e>
 8023b92:	9b01      	ldr	r3, [sp, #4]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	bf14      	ite	ne
 8023b98:	f04f 0800 	movne.w	r8, #0
 8023b9c:	f04f 0806 	moveq.w	r8, #6
 8023ba0:	4640      	mov	r0, r8
 8023ba2:	b005      	add	sp, #20
 8023ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ba8:	4645      	mov	r5, r8
 8023baa:	4626      	mov	r6, r4
 8023bac:	2401      	movs	r4, #1
 8023bae:	e7c7      	b.n	8023b40 <__gethex+0xb4>
 8023bb0:	f04f 0b00 	mov.w	fp, #0
 8023bb4:	1ca9      	adds	r1, r5, #2
 8023bb6:	e7d0      	b.n	8023b5a <__gethex+0xce>
 8023bb8:	f04f 0b01 	mov.w	fp, #1
 8023bbc:	e7fa      	b.n	8023bb4 <__gethex+0x128>
 8023bbe:	230a      	movs	r3, #10
 8023bc0:	fb03 0002 	mla	r0, r3, r2, r0
 8023bc4:	e7d0      	b.n	8023b68 <__gethex+0xdc>
 8023bc6:	4629      	mov	r1, r5
 8023bc8:	e7e0      	b.n	8023b8c <__gethex+0x100>
 8023bca:	eba5 0308 	sub.w	r3, r5, r8
 8023bce:	3b01      	subs	r3, #1
 8023bd0:	4621      	mov	r1, r4
 8023bd2:	2b07      	cmp	r3, #7
 8023bd4:	dc0a      	bgt.n	8023bec <__gethex+0x160>
 8023bd6:	4648      	mov	r0, r9
 8023bd8:	f7fd fffa 	bl	8021bd0 <_Balloc>
 8023bdc:	4604      	mov	r4, r0
 8023bde:	b940      	cbnz	r0, 8023bf2 <__gethex+0x166>
 8023be0:	4b61      	ldr	r3, [pc, #388]	; (8023d68 <__gethex+0x2dc>)
 8023be2:	4602      	mov	r2, r0
 8023be4:	21e4      	movs	r1, #228	; 0xe4
 8023be6:	4861      	ldr	r0, [pc, #388]	; (8023d6c <__gethex+0x2e0>)
 8023be8:	f7fd f986 	bl	8020ef8 <__assert_func>
 8023bec:	3101      	adds	r1, #1
 8023bee:	105b      	asrs	r3, r3, #1
 8023bf0:	e7ef      	b.n	8023bd2 <__gethex+0x146>
 8023bf2:	f100 0a14 	add.w	sl, r0, #20
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	495a      	ldr	r1, [pc, #360]	; (8023d64 <__gethex+0x2d8>)
 8023bfa:	f8cd a004 	str.w	sl, [sp, #4]
 8023bfe:	469b      	mov	fp, r3
 8023c00:	45a8      	cmp	r8, r5
 8023c02:	d342      	bcc.n	8023c8a <__gethex+0x1fe>
 8023c04:	9801      	ldr	r0, [sp, #4]
 8023c06:	f840 bb04 	str.w	fp, [r0], #4
 8023c0a:	eba0 000a 	sub.w	r0, r0, sl
 8023c0e:	1080      	asrs	r0, r0, #2
 8023c10:	6120      	str	r0, [r4, #16]
 8023c12:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8023c16:	4658      	mov	r0, fp
 8023c18:	f7fe f8cc 	bl	8021db4 <__hi0bits>
 8023c1c:	683d      	ldr	r5, [r7, #0]
 8023c1e:	eba8 0000 	sub.w	r0, r8, r0
 8023c22:	42a8      	cmp	r0, r5
 8023c24:	dd59      	ble.n	8023cda <__gethex+0x24e>
 8023c26:	eba0 0805 	sub.w	r8, r0, r5
 8023c2a:	4641      	mov	r1, r8
 8023c2c:	4620      	mov	r0, r4
 8023c2e:	f7fe fc58 	bl	80224e2 <__any_on>
 8023c32:	4683      	mov	fp, r0
 8023c34:	b1b8      	cbz	r0, 8023c66 <__gethex+0x1da>
 8023c36:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8023c3a:	1159      	asrs	r1, r3, #5
 8023c3c:	f003 021f 	and.w	r2, r3, #31
 8023c40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023c44:	f04f 0b01 	mov.w	fp, #1
 8023c48:	fa0b f202 	lsl.w	r2, fp, r2
 8023c4c:	420a      	tst	r2, r1
 8023c4e:	d00a      	beq.n	8023c66 <__gethex+0x1da>
 8023c50:	455b      	cmp	r3, fp
 8023c52:	dd06      	ble.n	8023c62 <__gethex+0x1d6>
 8023c54:	f1a8 0102 	sub.w	r1, r8, #2
 8023c58:	4620      	mov	r0, r4
 8023c5a:	f7fe fc42 	bl	80224e2 <__any_on>
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	d138      	bne.n	8023cd4 <__gethex+0x248>
 8023c62:	f04f 0b02 	mov.w	fp, #2
 8023c66:	4641      	mov	r1, r8
 8023c68:	4620      	mov	r0, r4
 8023c6a:	f7ff fea8 	bl	80239be <rshift>
 8023c6e:	4446      	add	r6, r8
 8023c70:	68bb      	ldr	r3, [r7, #8]
 8023c72:	42b3      	cmp	r3, r6
 8023c74:	da41      	bge.n	8023cfa <__gethex+0x26e>
 8023c76:	4621      	mov	r1, r4
 8023c78:	4648      	mov	r0, r9
 8023c7a:	f7fd ffe9 	bl	8021c50 <_Bfree>
 8023c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c80:	2300      	movs	r3, #0
 8023c82:	6013      	str	r3, [r2, #0]
 8023c84:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8023c88:	e78a      	b.n	8023ba0 <__gethex+0x114>
 8023c8a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8023c8e:	2a2e      	cmp	r2, #46	; 0x2e
 8023c90:	d014      	beq.n	8023cbc <__gethex+0x230>
 8023c92:	2b20      	cmp	r3, #32
 8023c94:	d106      	bne.n	8023ca4 <__gethex+0x218>
 8023c96:	9b01      	ldr	r3, [sp, #4]
 8023c98:	f843 bb04 	str.w	fp, [r3], #4
 8023c9c:	f04f 0b00 	mov.w	fp, #0
 8023ca0:	9301      	str	r3, [sp, #4]
 8023ca2:	465b      	mov	r3, fp
 8023ca4:	7828      	ldrb	r0, [r5, #0]
 8023ca6:	9303      	str	r3, [sp, #12]
 8023ca8:	f7ff fedb 	bl	8023a62 <__hexdig_fun>
 8023cac:	9b03      	ldr	r3, [sp, #12]
 8023cae:	f000 000f 	and.w	r0, r0, #15
 8023cb2:	4098      	lsls	r0, r3
 8023cb4:	ea4b 0b00 	orr.w	fp, fp, r0
 8023cb8:	3304      	adds	r3, #4
 8023cba:	e7a1      	b.n	8023c00 <__gethex+0x174>
 8023cbc:	45a8      	cmp	r8, r5
 8023cbe:	d8e8      	bhi.n	8023c92 <__gethex+0x206>
 8023cc0:	2201      	movs	r2, #1
 8023cc2:	4628      	mov	r0, r5
 8023cc4:	9303      	str	r3, [sp, #12]
 8023cc6:	f7fd f84a 	bl	8020d5e <strncmp>
 8023cca:	4926      	ldr	r1, [pc, #152]	; (8023d64 <__gethex+0x2d8>)
 8023ccc:	9b03      	ldr	r3, [sp, #12]
 8023cce:	2800      	cmp	r0, #0
 8023cd0:	d1df      	bne.n	8023c92 <__gethex+0x206>
 8023cd2:	e795      	b.n	8023c00 <__gethex+0x174>
 8023cd4:	f04f 0b03 	mov.w	fp, #3
 8023cd8:	e7c5      	b.n	8023c66 <__gethex+0x1da>
 8023cda:	da0b      	bge.n	8023cf4 <__gethex+0x268>
 8023cdc:	eba5 0800 	sub.w	r8, r5, r0
 8023ce0:	4621      	mov	r1, r4
 8023ce2:	4642      	mov	r2, r8
 8023ce4:	4648      	mov	r0, r9
 8023ce6:	f7fe f9cd 	bl	8022084 <__lshift>
 8023cea:	eba6 0608 	sub.w	r6, r6, r8
 8023cee:	4604      	mov	r4, r0
 8023cf0:	f100 0a14 	add.w	sl, r0, #20
 8023cf4:	f04f 0b00 	mov.w	fp, #0
 8023cf8:	e7ba      	b.n	8023c70 <__gethex+0x1e4>
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	42b3      	cmp	r3, r6
 8023cfe:	dd73      	ble.n	8023de8 <__gethex+0x35c>
 8023d00:	1b9e      	subs	r6, r3, r6
 8023d02:	42b5      	cmp	r5, r6
 8023d04:	dc34      	bgt.n	8023d70 <__gethex+0x2e4>
 8023d06:	68fb      	ldr	r3, [r7, #12]
 8023d08:	2b02      	cmp	r3, #2
 8023d0a:	d023      	beq.n	8023d54 <__gethex+0x2c8>
 8023d0c:	2b03      	cmp	r3, #3
 8023d0e:	d025      	beq.n	8023d5c <__gethex+0x2d0>
 8023d10:	2b01      	cmp	r3, #1
 8023d12:	d115      	bne.n	8023d40 <__gethex+0x2b4>
 8023d14:	42b5      	cmp	r5, r6
 8023d16:	d113      	bne.n	8023d40 <__gethex+0x2b4>
 8023d18:	2d01      	cmp	r5, #1
 8023d1a:	d10b      	bne.n	8023d34 <__gethex+0x2a8>
 8023d1c:	9a02      	ldr	r2, [sp, #8]
 8023d1e:	687b      	ldr	r3, [r7, #4]
 8023d20:	6013      	str	r3, [r2, #0]
 8023d22:	2301      	movs	r3, #1
 8023d24:	6123      	str	r3, [r4, #16]
 8023d26:	f8ca 3000 	str.w	r3, [sl]
 8023d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d2c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8023d30:	601c      	str	r4, [r3, #0]
 8023d32:	e735      	b.n	8023ba0 <__gethex+0x114>
 8023d34:	1e69      	subs	r1, r5, #1
 8023d36:	4620      	mov	r0, r4
 8023d38:	f7fe fbd3 	bl	80224e2 <__any_on>
 8023d3c:	2800      	cmp	r0, #0
 8023d3e:	d1ed      	bne.n	8023d1c <__gethex+0x290>
 8023d40:	4621      	mov	r1, r4
 8023d42:	4648      	mov	r0, r9
 8023d44:	f7fd ff84 	bl	8021c50 <_Bfree>
 8023d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d4a:	2300      	movs	r3, #0
 8023d4c:	6013      	str	r3, [r2, #0]
 8023d4e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8023d52:	e725      	b.n	8023ba0 <__gethex+0x114>
 8023d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	d1f2      	bne.n	8023d40 <__gethex+0x2b4>
 8023d5a:	e7df      	b.n	8023d1c <__gethex+0x290>
 8023d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d1dc      	bne.n	8023d1c <__gethex+0x290>
 8023d62:	e7ed      	b.n	8023d40 <__gethex+0x2b4>
 8023d64:	08025dec 	.word	0x08025dec
 8023d68:	08025c86 	.word	0x08025c86
 8023d6c:	08025e59 	.word	0x08025e59
 8023d70:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8023d74:	f1bb 0f00 	cmp.w	fp, #0
 8023d78:	d133      	bne.n	8023de2 <__gethex+0x356>
 8023d7a:	f1b8 0f00 	cmp.w	r8, #0
 8023d7e:	d004      	beq.n	8023d8a <__gethex+0x2fe>
 8023d80:	4641      	mov	r1, r8
 8023d82:	4620      	mov	r0, r4
 8023d84:	f7fe fbad 	bl	80224e2 <__any_on>
 8023d88:	4683      	mov	fp, r0
 8023d8a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8023d8e:	2301      	movs	r3, #1
 8023d90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023d94:	f008 081f 	and.w	r8, r8, #31
 8023d98:	fa03 f308 	lsl.w	r3, r3, r8
 8023d9c:	4213      	tst	r3, r2
 8023d9e:	4631      	mov	r1, r6
 8023da0:	4620      	mov	r0, r4
 8023da2:	bf18      	it	ne
 8023da4:	f04b 0b02 	orrne.w	fp, fp, #2
 8023da8:	1bad      	subs	r5, r5, r6
 8023daa:	f7ff fe08 	bl	80239be <rshift>
 8023dae:	687e      	ldr	r6, [r7, #4]
 8023db0:	f04f 0802 	mov.w	r8, #2
 8023db4:	f1bb 0f00 	cmp.w	fp, #0
 8023db8:	d04a      	beq.n	8023e50 <__gethex+0x3c4>
 8023dba:	68fb      	ldr	r3, [r7, #12]
 8023dbc:	2b02      	cmp	r3, #2
 8023dbe:	d016      	beq.n	8023dee <__gethex+0x362>
 8023dc0:	2b03      	cmp	r3, #3
 8023dc2:	d018      	beq.n	8023df6 <__gethex+0x36a>
 8023dc4:	2b01      	cmp	r3, #1
 8023dc6:	d109      	bne.n	8023ddc <__gethex+0x350>
 8023dc8:	f01b 0f02 	tst.w	fp, #2
 8023dcc:	d006      	beq.n	8023ddc <__gethex+0x350>
 8023dce:	f8da 3000 	ldr.w	r3, [sl]
 8023dd2:	ea4b 0b03 	orr.w	fp, fp, r3
 8023dd6:	f01b 0f01 	tst.w	fp, #1
 8023dda:	d10f      	bne.n	8023dfc <__gethex+0x370>
 8023ddc:	f048 0810 	orr.w	r8, r8, #16
 8023de0:	e036      	b.n	8023e50 <__gethex+0x3c4>
 8023de2:	f04f 0b01 	mov.w	fp, #1
 8023de6:	e7d0      	b.n	8023d8a <__gethex+0x2fe>
 8023de8:	f04f 0801 	mov.w	r8, #1
 8023dec:	e7e2      	b.n	8023db4 <__gethex+0x328>
 8023dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023df0:	f1c3 0301 	rsb	r3, r3, #1
 8023df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8023df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023df8:	2b00      	cmp	r3, #0
 8023dfa:	d0ef      	beq.n	8023ddc <__gethex+0x350>
 8023dfc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023e00:	f104 0214 	add.w	r2, r4, #20
 8023e04:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023e08:	9301      	str	r3, [sp, #4]
 8023e0a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8023e0e:	2300      	movs	r3, #0
 8023e10:	4694      	mov	ip, r2
 8023e12:	f852 1b04 	ldr.w	r1, [r2], #4
 8023e16:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8023e1a:	d01e      	beq.n	8023e5a <__gethex+0x3ce>
 8023e1c:	3101      	adds	r1, #1
 8023e1e:	f8cc 1000 	str.w	r1, [ip]
 8023e22:	f1b8 0f02 	cmp.w	r8, #2
 8023e26:	f104 0214 	add.w	r2, r4, #20
 8023e2a:	d13d      	bne.n	8023ea8 <__gethex+0x41c>
 8023e2c:	683b      	ldr	r3, [r7, #0]
 8023e2e:	3b01      	subs	r3, #1
 8023e30:	42ab      	cmp	r3, r5
 8023e32:	d10b      	bne.n	8023e4c <__gethex+0x3c0>
 8023e34:	1169      	asrs	r1, r5, #5
 8023e36:	2301      	movs	r3, #1
 8023e38:	f005 051f 	and.w	r5, r5, #31
 8023e3c:	fa03 f505 	lsl.w	r5, r3, r5
 8023e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e44:	421d      	tst	r5, r3
 8023e46:	bf18      	it	ne
 8023e48:	f04f 0801 	movne.w	r8, #1
 8023e4c:	f048 0820 	orr.w	r8, r8, #32
 8023e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e52:	601c      	str	r4, [r3, #0]
 8023e54:	9b02      	ldr	r3, [sp, #8]
 8023e56:	601e      	str	r6, [r3, #0]
 8023e58:	e6a2      	b.n	8023ba0 <__gethex+0x114>
 8023e5a:	4290      	cmp	r0, r2
 8023e5c:	f842 3c04 	str.w	r3, [r2, #-4]
 8023e60:	d8d6      	bhi.n	8023e10 <__gethex+0x384>
 8023e62:	68a2      	ldr	r2, [r4, #8]
 8023e64:	4593      	cmp	fp, r2
 8023e66:	db17      	blt.n	8023e98 <__gethex+0x40c>
 8023e68:	6861      	ldr	r1, [r4, #4]
 8023e6a:	4648      	mov	r0, r9
 8023e6c:	3101      	adds	r1, #1
 8023e6e:	f7fd feaf 	bl	8021bd0 <_Balloc>
 8023e72:	4682      	mov	sl, r0
 8023e74:	b918      	cbnz	r0, 8023e7e <__gethex+0x3f2>
 8023e76:	4b1b      	ldr	r3, [pc, #108]	; (8023ee4 <__gethex+0x458>)
 8023e78:	4602      	mov	r2, r0
 8023e7a:	2184      	movs	r1, #132	; 0x84
 8023e7c:	e6b3      	b.n	8023be6 <__gethex+0x15a>
 8023e7e:	6922      	ldr	r2, [r4, #16]
 8023e80:	3202      	adds	r2, #2
 8023e82:	f104 010c 	add.w	r1, r4, #12
 8023e86:	0092      	lsls	r2, r2, #2
 8023e88:	300c      	adds	r0, #12
 8023e8a:	f7fd f820 	bl	8020ece <memcpy>
 8023e8e:	4621      	mov	r1, r4
 8023e90:	4648      	mov	r0, r9
 8023e92:	f7fd fedd 	bl	8021c50 <_Bfree>
 8023e96:	4654      	mov	r4, sl
 8023e98:	6922      	ldr	r2, [r4, #16]
 8023e9a:	1c51      	adds	r1, r2, #1
 8023e9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023ea0:	6121      	str	r1, [r4, #16]
 8023ea2:	2101      	movs	r1, #1
 8023ea4:	6151      	str	r1, [r2, #20]
 8023ea6:	e7bc      	b.n	8023e22 <__gethex+0x396>
 8023ea8:	6921      	ldr	r1, [r4, #16]
 8023eaa:	4559      	cmp	r1, fp
 8023eac:	dd0b      	ble.n	8023ec6 <__gethex+0x43a>
 8023eae:	2101      	movs	r1, #1
 8023eb0:	4620      	mov	r0, r4
 8023eb2:	f7ff fd84 	bl	80239be <rshift>
 8023eb6:	68bb      	ldr	r3, [r7, #8]
 8023eb8:	3601      	adds	r6, #1
 8023eba:	42b3      	cmp	r3, r6
 8023ebc:	f6ff aedb 	blt.w	8023c76 <__gethex+0x1ea>
 8023ec0:	f04f 0801 	mov.w	r8, #1
 8023ec4:	e7c2      	b.n	8023e4c <__gethex+0x3c0>
 8023ec6:	f015 051f 	ands.w	r5, r5, #31
 8023eca:	d0f9      	beq.n	8023ec0 <__gethex+0x434>
 8023ecc:	9b01      	ldr	r3, [sp, #4]
 8023ece:	441a      	add	r2, r3
 8023ed0:	f1c5 0520 	rsb	r5, r5, #32
 8023ed4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8023ed8:	f7fd ff6c 	bl	8021db4 <__hi0bits>
 8023edc:	42a8      	cmp	r0, r5
 8023ede:	dbe6      	blt.n	8023eae <__gethex+0x422>
 8023ee0:	e7ee      	b.n	8023ec0 <__gethex+0x434>
 8023ee2:	bf00      	nop
 8023ee4:	08025c86 	.word	0x08025c86

08023ee8 <L_shift>:
 8023ee8:	f1c2 0208 	rsb	r2, r2, #8
 8023eec:	0092      	lsls	r2, r2, #2
 8023eee:	b570      	push	{r4, r5, r6, lr}
 8023ef0:	f1c2 0620 	rsb	r6, r2, #32
 8023ef4:	6843      	ldr	r3, [r0, #4]
 8023ef6:	6804      	ldr	r4, [r0, #0]
 8023ef8:	fa03 f506 	lsl.w	r5, r3, r6
 8023efc:	432c      	orrs	r4, r5
 8023efe:	40d3      	lsrs	r3, r2
 8023f00:	6004      	str	r4, [r0, #0]
 8023f02:	f840 3f04 	str.w	r3, [r0, #4]!
 8023f06:	4288      	cmp	r0, r1
 8023f08:	d3f4      	bcc.n	8023ef4 <L_shift+0xc>
 8023f0a:	bd70      	pop	{r4, r5, r6, pc}

08023f0c <__match>:
 8023f0c:	b530      	push	{r4, r5, lr}
 8023f0e:	6803      	ldr	r3, [r0, #0]
 8023f10:	3301      	adds	r3, #1
 8023f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023f16:	b914      	cbnz	r4, 8023f1e <__match+0x12>
 8023f18:	6003      	str	r3, [r0, #0]
 8023f1a:	2001      	movs	r0, #1
 8023f1c:	bd30      	pop	{r4, r5, pc}
 8023f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023f22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8023f26:	2d19      	cmp	r5, #25
 8023f28:	bf98      	it	ls
 8023f2a:	3220      	addls	r2, #32
 8023f2c:	42a2      	cmp	r2, r4
 8023f2e:	d0f0      	beq.n	8023f12 <__match+0x6>
 8023f30:	2000      	movs	r0, #0
 8023f32:	e7f3      	b.n	8023f1c <__match+0x10>

08023f34 <__hexnan>:
 8023f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f38:	680b      	ldr	r3, [r1, #0]
 8023f3a:	6801      	ldr	r1, [r0, #0]
 8023f3c:	115e      	asrs	r6, r3, #5
 8023f3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8023f42:	f013 031f 	ands.w	r3, r3, #31
 8023f46:	b087      	sub	sp, #28
 8023f48:	bf18      	it	ne
 8023f4a:	3604      	addne	r6, #4
 8023f4c:	2500      	movs	r5, #0
 8023f4e:	1f37      	subs	r7, r6, #4
 8023f50:	4682      	mov	sl, r0
 8023f52:	4690      	mov	r8, r2
 8023f54:	9301      	str	r3, [sp, #4]
 8023f56:	f846 5c04 	str.w	r5, [r6, #-4]
 8023f5a:	46b9      	mov	r9, r7
 8023f5c:	463c      	mov	r4, r7
 8023f5e:	9502      	str	r5, [sp, #8]
 8023f60:	46ab      	mov	fp, r5
 8023f62:	784a      	ldrb	r2, [r1, #1]
 8023f64:	1c4b      	adds	r3, r1, #1
 8023f66:	9303      	str	r3, [sp, #12]
 8023f68:	b342      	cbz	r2, 8023fbc <__hexnan+0x88>
 8023f6a:	4610      	mov	r0, r2
 8023f6c:	9105      	str	r1, [sp, #20]
 8023f6e:	9204      	str	r2, [sp, #16]
 8023f70:	f7ff fd77 	bl	8023a62 <__hexdig_fun>
 8023f74:	2800      	cmp	r0, #0
 8023f76:	d14f      	bne.n	8024018 <__hexnan+0xe4>
 8023f78:	9a04      	ldr	r2, [sp, #16]
 8023f7a:	9905      	ldr	r1, [sp, #20]
 8023f7c:	2a20      	cmp	r2, #32
 8023f7e:	d818      	bhi.n	8023fb2 <__hexnan+0x7e>
 8023f80:	9b02      	ldr	r3, [sp, #8]
 8023f82:	459b      	cmp	fp, r3
 8023f84:	dd13      	ble.n	8023fae <__hexnan+0x7a>
 8023f86:	454c      	cmp	r4, r9
 8023f88:	d206      	bcs.n	8023f98 <__hexnan+0x64>
 8023f8a:	2d07      	cmp	r5, #7
 8023f8c:	dc04      	bgt.n	8023f98 <__hexnan+0x64>
 8023f8e:	462a      	mov	r2, r5
 8023f90:	4649      	mov	r1, r9
 8023f92:	4620      	mov	r0, r4
 8023f94:	f7ff ffa8 	bl	8023ee8 <L_shift>
 8023f98:	4544      	cmp	r4, r8
 8023f9a:	d950      	bls.n	802403e <__hexnan+0x10a>
 8023f9c:	2300      	movs	r3, #0
 8023f9e:	f1a4 0904 	sub.w	r9, r4, #4
 8023fa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8023fa6:	f8cd b008 	str.w	fp, [sp, #8]
 8023faa:	464c      	mov	r4, r9
 8023fac:	461d      	mov	r5, r3
 8023fae:	9903      	ldr	r1, [sp, #12]
 8023fb0:	e7d7      	b.n	8023f62 <__hexnan+0x2e>
 8023fb2:	2a29      	cmp	r2, #41	; 0x29
 8023fb4:	d155      	bne.n	8024062 <__hexnan+0x12e>
 8023fb6:	3102      	adds	r1, #2
 8023fb8:	f8ca 1000 	str.w	r1, [sl]
 8023fbc:	f1bb 0f00 	cmp.w	fp, #0
 8023fc0:	d04f      	beq.n	8024062 <__hexnan+0x12e>
 8023fc2:	454c      	cmp	r4, r9
 8023fc4:	d206      	bcs.n	8023fd4 <__hexnan+0xa0>
 8023fc6:	2d07      	cmp	r5, #7
 8023fc8:	dc04      	bgt.n	8023fd4 <__hexnan+0xa0>
 8023fca:	462a      	mov	r2, r5
 8023fcc:	4649      	mov	r1, r9
 8023fce:	4620      	mov	r0, r4
 8023fd0:	f7ff ff8a 	bl	8023ee8 <L_shift>
 8023fd4:	4544      	cmp	r4, r8
 8023fd6:	d934      	bls.n	8024042 <__hexnan+0x10e>
 8023fd8:	f1a8 0204 	sub.w	r2, r8, #4
 8023fdc:	4623      	mov	r3, r4
 8023fde:	f853 1b04 	ldr.w	r1, [r3], #4
 8023fe2:	f842 1f04 	str.w	r1, [r2, #4]!
 8023fe6:	429f      	cmp	r7, r3
 8023fe8:	d2f9      	bcs.n	8023fde <__hexnan+0xaa>
 8023fea:	1b3b      	subs	r3, r7, r4
 8023fec:	f023 0303 	bic.w	r3, r3, #3
 8023ff0:	3304      	adds	r3, #4
 8023ff2:	3e03      	subs	r6, #3
 8023ff4:	3401      	adds	r4, #1
 8023ff6:	42a6      	cmp	r6, r4
 8023ff8:	bf38      	it	cc
 8023ffa:	2304      	movcc	r3, #4
 8023ffc:	4443      	add	r3, r8
 8023ffe:	2200      	movs	r2, #0
 8024000:	f843 2b04 	str.w	r2, [r3], #4
 8024004:	429f      	cmp	r7, r3
 8024006:	d2fb      	bcs.n	8024000 <__hexnan+0xcc>
 8024008:	683b      	ldr	r3, [r7, #0]
 802400a:	b91b      	cbnz	r3, 8024014 <__hexnan+0xe0>
 802400c:	4547      	cmp	r7, r8
 802400e:	d126      	bne.n	802405e <__hexnan+0x12a>
 8024010:	2301      	movs	r3, #1
 8024012:	603b      	str	r3, [r7, #0]
 8024014:	2005      	movs	r0, #5
 8024016:	e025      	b.n	8024064 <__hexnan+0x130>
 8024018:	3501      	adds	r5, #1
 802401a:	2d08      	cmp	r5, #8
 802401c:	f10b 0b01 	add.w	fp, fp, #1
 8024020:	dd06      	ble.n	8024030 <__hexnan+0xfc>
 8024022:	4544      	cmp	r4, r8
 8024024:	d9c3      	bls.n	8023fae <__hexnan+0x7a>
 8024026:	2300      	movs	r3, #0
 8024028:	f844 3c04 	str.w	r3, [r4, #-4]
 802402c:	2501      	movs	r5, #1
 802402e:	3c04      	subs	r4, #4
 8024030:	6822      	ldr	r2, [r4, #0]
 8024032:	f000 000f 	and.w	r0, r0, #15
 8024036:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802403a:	6020      	str	r0, [r4, #0]
 802403c:	e7b7      	b.n	8023fae <__hexnan+0x7a>
 802403e:	2508      	movs	r5, #8
 8024040:	e7b5      	b.n	8023fae <__hexnan+0x7a>
 8024042:	9b01      	ldr	r3, [sp, #4]
 8024044:	2b00      	cmp	r3, #0
 8024046:	d0df      	beq.n	8024008 <__hexnan+0xd4>
 8024048:	f1c3 0320 	rsb	r3, r3, #32
 802404c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024050:	40da      	lsrs	r2, r3
 8024052:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8024056:	4013      	ands	r3, r2
 8024058:	f846 3c04 	str.w	r3, [r6, #-4]
 802405c:	e7d4      	b.n	8024008 <__hexnan+0xd4>
 802405e:	3f04      	subs	r7, #4
 8024060:	e7d2      	b.n	8024008 <__hexnan+0xd4>
 8024062:	2004      	movs	r0, #4
 8024064:	b007      	add	sp, #28
 8024066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802406a <__ascii_mbtowc>:
 802406a:	b082      	sub	sp, #8
 802406c:	b901      	cbnz	r1, 8024070 <__ascii_mbtowc+0x6>
 802406e:	a901      	add	r1, sp, #4
 8024070:	b142      	cbz	r2, 8024084 <__ascii_mbtowc+0x1a>
 8024072:	b14b      	cbz	r3, 8024088 <__ascii_mbtowc+0x1e>
 8024074:	7813      	ldrb	r3, [r2, #0]
 8024076:	600b      	str	r3, [r1, #0]
 8024078:	7812      	ldrb	r2, [r2, #0]
 802407a:	1e10      	subs	r0, r2, #0
 802407c:	bf18      	it	ne
 802407e:	2001      	movne	r0, #1
 8024080:	b002      	add	sp, #8
 8024082:	4770      	bx	lr
 8024084:	4610      	mov	r0, r2
 8024086:	e7fb      	b.n	8024080 <__ascii_mbtowc+0x16>
 8024088:	f06f 0001 	mvn.w	r0, #1
 802408c:	e7f8      	b.n	8024080 <__ascii_mbtowc+0x16>

0802408e <__ascii_wctomb>:
 802408e:	b149      	cbz	r1, 80240a4 <__ascii_wctomb+0x16>
 8024090:	2aff      	cmp	r2, #255	; 0xff
 8024092:	bf85      	ittet	hi
 8024094:	238a      	movhi	r3, #138	; 0x8a
 8024096:	6003      	strhi	r3, [r0, #0]
 8024098:	700a      	strbls	r2, [r1, #0]
 802409a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802409e:	bf98      	it	ls
 80240a0:	2001      	movls	r0, #1
 80240a2:	4770      	bx	lr
 80240a4:	4608      	mov	r0, r1
 80240a6:	4770      	bx	lr

080240a8 <_raise_r>:
 80240a8:	291f      	cmp	r1, #31
 80240aa:	b538      	push	{r3, r4, r5, lr}
 80240ac:	4604      	mov	r4, r0
 80240ae:	460d      	mov	r5, r1
 80240b0:	d904      	bls.n	80240bc <_raise_r+0x14>
 80240b2:	2316      	movs	r3, #22
 80240b4:	6003      	str	r3, [r0, #0]
 80240b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80240ba:	bd38      	pop	{r3, r4, r5, pc}
 80240bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80240be:	b112      	cbz	r2, 80240c6 <_raise_r+0x1e>
 80240c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80240c4:	b94b      	cbnz	r3, 80240da <_raise_r+0x32>
 80240c6:	4620      	mov	r0, r4
 80240c8:	f000 f830 	bl	802412c <_getpid_r>
 80240cc:	462a      	mov	r2, r5
 80240ce:	4601      	mov	r1, r0
 80240d0:	4620      	mov	r0, r4
 80240d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80240d6:	f000 b817 	b.w	8024108 <_kill_r>
 80240da:	2b01      	cmp	r3, #1
 80240dc:	d00a      	beq.n	80240f4 <_raise_r+0x4c>
 80240de:	1c59      	adds	r1, r3, #1
 80240e0:	d103      	bne.n	80240ea <_raise_r+0x42>
 80240e2:	2316      	movs	r3, #22
 80240e4:	6003      	str	r3, [r0, #0]
 80240e6:	2001      	movs	r0, #1
 80240e8:	e7e7      	b.n	80240ba <_raise_r+0x12>
 80240ea:	2400      	movs	r4, #0
 80240ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80240f0:	4628      	mov	r0, r5
 80240f2:	4798      	blx	r3
 80240f4:	2000      	movs	r0, #0
 80240f6:	e7e0      	b.n	80240ba <_raise_r+0x12>

080240f8 <raise>:
 80240f8:	4b02      	ldr	r3, [pc, #8]	; (8024104 <raise+0xc>)
 80240fa:	4601      	mov	r1, r0
 80240fc:	6818      	ldr	r0, [r3, #0]
 80240fe:	f7ff bfd3 	b.w	80240a8 <_raise_r>
 8024102:	bf00      	nop
 8024104:	2000099c 	.word	0x2000099c

08024108 <_kill_r>:
 8024108:	b538      	push	{r3, r4, r5, lr}
 802410a:	4d07      	ldr	r5, [pc, #28]	; (8024128 <_kill_r+0x20>)
 802410c:	2300      	movs	r3, #0
 802410e:	4604      	mov	r4, r0
 8024110:	4608      	mov	r0, r1
 8024112:	4611      	mov	r1, r2
 8024114:	602b      	str	r3, [r5, #0]
 8024116:	f7df fc37 	bl	8003988 <_kill>
 802411a:	1c43      	adds	r3, r0, #1
 802411c:	d102      	bne.n	8024124 <_kill_r+0x1c>
 802411e:	682b      	ldr	r3, [r5, #0]
 8024120:	b103      	cbz	r3, 8024124 <_kill_r+0x1c>
 8024122:	6023      	str	r3, [r4, #0]
 8024124:	bd38      	pop	{r3, r4, r5, pc}
 8024126:	bf00      	nop
 8024128:	20017128 	.word	0x20017128

0802412c <_getpid_r>:
 802412c:	f7df bc24 	b.w	8003978 <_getpid>

08024130 <_init>:
 8024130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024132:	bf00      	nop
 8024134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024136:	bc08      	pop	{r3}
 8024138:	469e      	mov	lr, r3
 802413a:	4770      	bx	lr

0802413c <_fini>:
 802413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802413e:	bf00      	nop
 8024140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024142:	bc08      	pop	{r3}
 8024144:	469e      	mov	lr, r3
 8024146:	4770      	bx	lr
