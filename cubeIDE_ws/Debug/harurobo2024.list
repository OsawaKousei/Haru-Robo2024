
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024008  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08024208  08024208  00034208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025f7c  08025f7c  00040b0c  2**0
                  CONTENTS
  4 .ARM          00000008  08025f7c  08025f7c  00035f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025f84  08025f84  00040b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08025f84  08025f84  00035f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025f9c  08025f9c  00035f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b0c  20000000  08025fa0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016500  20000b10  08026aac  00040b10  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017010  08026aac  00047010  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b0c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b3a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002efee  00000000  00000000  00040bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c47  00000000  00000000  0006fb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002260  00000000  00000000  000767e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a5a  00000000  00000000  00078a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d91d  00000000  00000000  000ac79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119c87  00000000  00000000  000da0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a4d0  00000000  00000000  001f3d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fe210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b10 	.word	0x20000b10
 800021c:	00000000 	.word	0x00000000
 8000220:	080241f0 	.word	0x080241f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b14 	.word	0x20000b14
 800023c:	080241f0 	.word	0x080241f0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002e04 	.word	0x20002e04
 8000b38:	20000e00 	.word	0x20000e00
 8000b3c:	20002e08 	.word	0x20002e08
 8000b40:	20002e00 	.word	0x20002e00

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fa05 	bl	8003fac <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fabf 	bl	800414c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002e08 	.word	0x20002e08
 8000be8:	20002e00 	.word	0x20002e00
 8000bec:	20002e04 	.word	0x20002e04
 8000bf0:	20000e00 	.word	0x20000e00
 8000bf4:	20000b2c 	.word	0x20000b2c

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 fac5 	bl	80041b6 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f fe32 	bl	802089c <iprintf>
		Error_Handler();
 8000c38:	f002 f9d3 	bl	8002fe2 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 fe70 	bl	800192c <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 feab 	bl	80019c4 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f fd8b 	bl	802089c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	08024208 	.word	0x08024208
 8000df0:	20000b40 	.word	0x20000b40
 8000df4:	20000b34 	.word	0x20000b34
 8000df8:	20000b80 	.word	0x20000b80
 8000dfc:	20000c20 	.word	0x20000c20
 8000e00:	20000cc0 	.word	0x20000cc0
 8000e04:	20000d60 	.word	0x20000d60
 8000e08:	08024220 	.word	0x08024220
 8000e0c:	20000b30 	.word	0x20000b30

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 f8c7 	bl	8002fe2 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 f8ab 	bl	8002fe2 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 f8a0 	bl	8002fe2 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000b2c 	.word	0x20000b2c
 8000ee4:	20000b30 	.word	0x20000b30
 8000ee8:	20000b34 	.word	0x20000b34
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fcc3 	bl	80018d2 <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fcb3 	bl	80018d2 <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fca3 	bl	80018d2 <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fc93 	bl	80018d2 <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 febe 	bl	8003d4c <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 f804 	bl	8002fe2 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fc74 	bl	80018d2 <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fc64 	bl	80018d2 <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fc54 	bl	80018d2 <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fc44 	bl	80018d2 <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fe6f 	bl	8003d4c <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f001 ffb5 	bl	8002fe2 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fc25 	bl	80018d2 <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fc15 	bl	80018d2 <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fc05 	bl	80018d2 <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fbf5 	bl	80018d2 <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fe20 	bl	8003d4c <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f001 ff66 	bl	8002fe2 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fbd6 	bl	80018d2 <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fbc6 	bl	80018d2 <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fbb6 	bl	80018d2 <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fba6 	bl	80018d2 <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fdd1 	bl	8003d4c <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f001 ff17 	bl	8002fe2 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fb87 	bl	80018d2 <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fb77 	bl	80018d2 <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fb67 	bl	80018d2 <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fb57 	bl	80018d2 <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fd82 	bl	8003d4c <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f001 fec8 	bl	8002fe2 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000b40 	.word	0x20000b40
 8001258:	20000b2c 	.word	0x20000b2c
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fb33 	bl	80018d2 <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fb23 	bl	80018d2 <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fb13 	bl	80018d2 <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fb03 	bl	80018d2 <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fd2e 	bl	8003d4c <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f001 fe74 	bl	8002fe2 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fae4 	bl	80018d2 <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fad4 	bl	80018d2 <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fac4 	bl	80018d2 <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fab4 	bl	80018d2 <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fcdf 	bl	8003d4c <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f001 fe25 	bl	8002fe2 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fdc1 	bl	8003f24 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f fadd 	bl	8020968 <puts>
		Error_Handler();
 80013ae:	f001 fe18 	bl	8002fe2 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 f80e 	bl	80043da <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f fa69 	bl	802089c <iprintf>
		Error_Handler();
 80013ca:	f001 fe0a 	bl	8002fe2 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 f800 	bl	80043da <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f fa5b 	bl	802089c <iprintf>
		Error_Handler();
 80013e6:	f001 fdfc 	bl	8002fe2 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b2c 	.word	0x20000b2c
 80013f8:	08024228 	.word	0x08024228
 80013fc:	08024238 	.word	0x08024238

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f fa46 	bl	802089c <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 fb7a 	bl	8003b0c <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f fa32 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f fa1f 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f fa0c 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f f9f8 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f f9e5 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f f9d1 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f f9bd 	bl	802089c <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0802425c 	.word	0x0802425c
 8001540:	20000b30 	.word	0x20000b30
 8001544:	20000b40 	.word	0x20000b40
 8001548:	0802427c 	.word	0x0802427c
 800154c:	0802428c 	.word	0x0802428c
 8001550:	0802429c 	.word	0x0802429c
 8001554:	080242ac 	.word	0x080242ac
 8001558:	080242bc 	.word	0x080242bc
 800155c:	080242cc 	.word	0x080242cc
 8001560:	080242d8 	.word	0x080242d8

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f97f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f96b 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f957 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f933 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f911 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8fd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f8e9 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fa23 	bl	8003b0c <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8cd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8b7 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f89f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ServoDriver_Init>:
		return ans;
	}
}

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f884 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2208      	movs	r2, #8
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fb43 	bl	8000e10 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 8001796:	2102      	movs	r1, #2
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f871 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2208      	movs	r2, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fb30 	bl	8000e10 <SendBytes>
	fdata[0] = param->angle_offset;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 80017bc:	2103      	movs	r1, #3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f85e 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2208      	movs	r2, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fb1d 	bl	8000e10 <SendBytes>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 80017ea:	2104      	movs	r1, #4
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f847 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	463b      	mov	r3, r7
 80017fa:	2204      	movs	r2, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fb07 	bl	8000e10 <SendBytes>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <ServoDriver_SendValue+0x2e>
		Error_Handler();
 8001808:	f001 fbeb 	bl	8002fe2 <Error_Handler>
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001820:	2101      	movs	r1, #1
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f82c 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff faec 	bl	8000e10 <SendBytes>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <AirCylinder_Init+0x2e>
		Error_Handler();
 800183e:	f001 fbd0 	bl	8002fe2 <Error_Handler>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001856:	2102      	movs	r1, #2
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f811 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff fad1 	bl	8000e10 <SendBytes>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001874:	f001 fbb5 	bl	8002fe2 <Error_Handler>
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001880:	b4b0      	push	{r4, r5, r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	02db      	lsls	r3, r3, #11
 800189a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	4313      	orrs	r3, r2
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	461c      	mov	r4, r3
 80018c0:	4615      	mov	r5, r2
 80018c2:	4622      	mov	r2, r4
 80018c4:	462b      	mov	r3, r5
}
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bcb0      	pop	{r4, r5, r7}
 80018d0:	4770      	bx	lr

080018d2 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80018d2:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	02db      	lsls	r3, r3, #11
 80018f6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001902:	431a      	orrs	r2, r3
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	4698      	mov	r8, r3
 8001918:	4691      	mov	r9, r2
 800191a:	4642      	mov	r2, r8
 800191c:	464b      	mov	r3, r9
}
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800192a:	4770      	bx	lr

0800192c <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	0942      	lsrs	r2, r0, #5
 8001944:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001948:	094b      	lsrs	r3, r1, #5
 800194a:	b2d3      	uxtb	r3, r2
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2db      	uxtb	r3, r3
 8001952:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	0a02      	lsrs	r2, r0, #8
 8001962:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001966:	0a0b      	lsrs	r3, r1, #8
 8001968:	b2d3      	uxtb	r3, r2
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2db      	uxtb	r3, r3
 8001970:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	0ac2      	lsrs	r2, r0, #11
 8001980:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001984:	0acb      	lsrs	r3, r1, #11
 8001986:	b2d3      	uxtb	r3, r2
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4611      	mov	r1, r2
 800199c:	8019      	strh	r1, [r3, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	0c12      	lsrs	r2, r2, #16
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	7b3a      	ldrb	r2, [r7, #12]
 80019a8:	f362 0307 	bfi	r3, r2, #0, #8
 80019ac:	7b7a      	ldrb	r2, [r7, #13]
 80019ae:	f362 230f 	bfi	r3, r2, #8, #8
 80019b2:	7bba      	ldrb	r2, [r7, #14]
 80019b4:	f362 4317 	bfi	r3, r2, #16, #8
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	e9c7 0100 	strd	r0, r1, [r7]
 80019ce:	783b      	ldrb	r3, [r7, #0]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <MX_CAN1_Init+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a02:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a34:	f002 f88e 	bl	8003b54 <HAL_CAN_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a3e:	f001 fad0 	bl	8002fe2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20002e0c 	.word	0x20002e0c
 8001a4c:	40006400 	.word	0x40006400

08001a50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_CAN_MspInit+0xac>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d13f      	bne.n	8001af2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <HAL_CAN_MspInit+0xb4>)
 8001abe:	f003 fb9d 	bl	80051fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	2013      	movs	r0, #19
 8001ac8:	f002 ff58 	bl	800497c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001acc:	2013      	movs	r0, #19
 8001ace:	f002 ff71 	bl	80049b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f002 ff50 	bl	800497c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001adc:	2014      	movs	r0, #20
 8001ade:	f002 ff69 	bl	80049b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2015      	movs	r0, #21
 8001ae8:	f002 ff48 	bl	800497c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001aec:	2015      	movs	r0, #21
 8001aee:	f002 ff61 	bl	80049b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40006400 	.word	0x40006400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b14:	f00d fada 	bl	800f0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b20:	f000 f98a 	bl	8001e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 8092 	bne.w	8001c56 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01f      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001b38:	2208      	movs	r2, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f023 0307 	bic.w	r3, r3, #7
 8001b50:	3308      	adds	r3, #8
 8001b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	b672      	cpsid	i
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	b662      	cpsie	i
 8001b72:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b74:	bf00      	nop
 8001b76:	e7fe      	b.n	8001b76 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06b      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d866      	bhi.n	8001c56 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b92:	e004      	b.n	8001b9e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d903      	bls.n	8001bb0 <pvPortMallocMicroROS+0xa8>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f1      	bne.n	8001b94 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d04d      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4413      	add	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d921      	bls.n	8001c20 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	b672      	cpsid	i
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	b662      	cpsie	i
 8001c02:	613b      	str	r3, [r7, #16]
}
 8001c04:	bf00      	nop
 8001c06:	e7fe      	b.n	8001c06 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c1a:	69b8      	ldr	r0, [r7, #24]
 8001c1c:	f000 f96e 	bl	8001efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d203      	bcs.n	8001c42 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c56:	f00d fa47 	bl	800f0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	b672      	cpsid	i
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	b662      	cpsie	i
 8001c78:	60fb      	str	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20006a3c 	.word	0x20006a3c
 8001c8c:	20006a48 	.word	0x20006a48
 8001c90:	20006a40 	.word	0x20006a40
 8001c94:	20006a34 	.word	0x20006a34
 8001c98:	20006a44 	.word	0x20006a44

08001c9c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	b672      	cpsid	i
 8001cd0:	f383 8811 	msr	BASEPRI, r3
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	f3bf 8f4f 	dsb	sy
 8001cdc:	b662      	cpsie	i
 8001cde:	60fb      	str	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	e7fe      	b.n	8001ce2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	b672      	cpsid	i
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	b662      	cpsie	i
 8001d00:	60bb      	str	r3, [r7, #8]
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d2c:	f00d f9ce 	bl	800f0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d3e:	6938      	ldr	r0, [r7, #16]
 8001d40:	f000 f8dc 	bl	8001efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d44:	f00d f9d0 	bl	800f0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20006a48 	.word	0x20006a48
 8001d54:	20006a40 	.word	0x20006a40

08001d58 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d64:	2308      	movs	r3, #8
 8001d66:	425b      	negs	r3, r3
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <getBlockSize+0x38>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

	return count;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20006a48 	.word	0x20006a48

08001d94 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d9e:	f00d f995 	bl	800f0cc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff feb0 	bl	8001b08 <pvPortMallocMicroROS>
 8001da8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d014      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffce 	bl	8001d58 <getBlockSize>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d201      	bcs.n	8001dd0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	f01f f8da 	bl	8020f8e <memcpy>

		vPortFreeMicroROS(pv);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff5e 	bl	8001c9c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001de0:	f00d f982 	bl	800f0e8 <xTaskResumeAll>

	return newmem;
 8001de4:	68bb      	ldr	r3, [r7, #8]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001df8:	f00d f968 	bl	800f0cc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff fe7e 	bl	8001b08 <pvPortMallocMicroROS>
 8001e0c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e12:	e004      	b.n	8001e1e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	613a      	str	r2, [r7, #16]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	617a      	str	r2, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f5      	bne.n	8001e14 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e28:	f00d f95e 	bl	800f0e8 <xTaskResumeAll>
  	return mem;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <prvHeapInit+0xac>)
 8001e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3307      	adds	r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0307 	bic.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <prvHeapInit+0xac>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e84:	2208      	movs	r2, #8
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <prvHeapInit+0xb4>)
 8001e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <prvHeapInit+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <prvHeapInit+0xb4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <prvHeapInit+0xb4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <prvHeapInit+0xb8>)
 8001ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <prvHeapInit+0xbc>)
 8001ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <prvHeapInit+0xc0>)
 8001ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20002e34 	.word	0x20002e34
 8001ee8:	20006a34 	.word	0x20006a34
 8001eec:	20006a3c 	.word	0x20006a3c
 8001ef0:	20006a44 	.word	0x20006a44
 8001ef4:	20006a40 	.word	0x20006a40
 8001ef8:	20006a48 	.word	0x20006a48

08001efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <prvInsertBlockIntoFreeList+0xac>)
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e002      	b.n	8001f10 <prvInsertBlockIntoFreeList+0x14>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d108      	bne.n	8001f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	441a      	add	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d118      	bne.n	8001f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d00d      	beq.n	8001f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e008      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e003      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d002      	beq.n	8001f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20006a34 	.word	0x20006a34
 8001fac:	20006a3c 	.word	0x20006a3c

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f002 fcd2 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fd8:	200c      	movs	r0, #12
 8001fda:	f002 fceb 	bl	80049b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200e      	movs	r0, #14
 8001fe4:	f002 fcca 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001fe8:	200e      	movs	r0, #14
 8001fea:	f002 fce3 	bl	80049b4 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800200a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <cubemx_transport_open+0x28>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f007 f80a 	bl	800902c <HAL_UART_Receive_DMA>
    return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20006a4c 	.word	0x20006a4c

08002028 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002036:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f007 f83b 	bl	80090b4 <HAL_UART_DMAStop>
    return true;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800205c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002062:	2b20      	cmp	r3, #32
 8002064:	d11a      	bne.n	800209c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f006 ff60 	bl	8008f34 <HAL_UART_Transmit_DMA>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002078:	e002      	b.n	8002080 <cubemx_transport_write+0x38>
            osDelay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f00b ffbc 	bl	800dff8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <cubemx_transport_write+0x46>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800208a:	2b20      	cmp	r3, #32
 800208c:	d1f5      	bne.n	800207a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <cubemx_transport_write+0x50>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	e002      	b.n	800209e <cubemx_transport_write+0x56>
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800209c:	2300      	movs	r3, #0
    }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020bc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <cubemx_transport_read+0x9c>)
 80020d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f00b ff89 	bl	800dff8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <cubemx_transport_read+0xa0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <cubemx_transport_read+0x9c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <cubemx_transport_read+0x52>
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbe3      	blt.n	80020c2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80020fe:	e011      	b.n	8002124 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <cubemx_transport_read+0xa0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	440b      	add	r3, r1
 800210a:	4910      	ldr	r1, [pc, #64]	; (800214c <cubemx_transport_read+0xa4>)
 800210c:	5c8a      	ldrb	r2, [r1, r2]
 800210e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <cubemx_transport_read+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <cubemx_transport_read+0xa0>)
 800211c:	6013      	str	r3, [r2, #0]
        wrote++;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <cubemx_transport_read+0xa0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <cubemx_transport_read+0x9c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d003      	beq.n	8002138 <cubemx_transport_read+0x90>
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3e3      	bcc.n	8002100 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002138:	69bb      	ldr	r3, [r7, #24]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20007250 	.word	0x20007250
 8002148:	2000724c 	.word	0x2000724c
 800214c:	20006a4c 	.word	0x20006a4c

08002150 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002158:	f7fe fd4e 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800216c:	f7fe fd4a 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002180:	f7fe fd3a 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002194:	f7fe fd36 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80021a8:	f7fe fd26 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80021bc:	f7fe fd22 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fd1c 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20007340 	.word	0x20007340

080021e4 <canSetting>:
//can通信の設定
void canSetting(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 80021e8:	480f      	ldr	r0, [pc, #60]	; (8002228 <canSetting+0x44>)
 80021ea:	f01e fb57 	bl	802089c <iprintf>
	HAL_Delay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f001 fc8c 	bl	8003b0c <HAL_Delay>

	CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <canSetting+0x48>)
 80021f6:	f7fe fe5b 	bl	8000eb0 <CAN_SystemInit>

	// デバイス数の設定
//	num_of_devices.mcmd3 = 1;
	num_of_devices.mcmd3 = 3;
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <canSetting+0x4c>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <canSetting+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <canSetting+0x4c>)
 8002208:	2201      	movs	r2, #1
 800220a:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 1;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <canSetting+0x4c>)
 800220e:	2201      	movs	r2, #1
 8002210:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <canSetting+0x50>)
 8002214:	f01e fb42 	bl	802089c <iprintf>
	HAL_Delay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f001 fc77 	bl	8003b0c <HAL_Delay>
	CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <canSetting+0x4c>)
 8002220:	f7ff f8ee 	bl	8001400 <CAN_WaitConnect>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08024338 	.word	0x08024338
 800222c:	20002e0c 	.word	0x20002e0c
 8002230:	20007340 	.word	0x20007340
 8002234:	08024360 	.word	0x08024360

08002238 <mcmdMoter5Setting>:
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);  // 目標値を設定
		 MCMD_Control_Enable(&mcmd4M4_struct);  // 制御開始
}

void mcmdMoter5Setting(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M5_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 800223e:	2203      	movs	r2, #3
 8002240:	701a      	strb	r2, [r3, #0]
	    mcmd4M5_struct.device.node_id =5;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002244:	2205      	movs	r2, #5
 8002246:	705a      	strb	r2, [r3, #1]
	    mcmd4M5_struct.device.device_num = 0;  // モーターの番号(0→M1,1→M2)
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 800224a:	2200      	movs	r2, #0
 800224c:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M5_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;  //制御タイプを設定
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002250:	2200      	movs	r2, #0
 8002252:	751a      	strb	r2, [r3, #20]
	    mcmd4M5_struct.ctrl_param.PID_param.kp = 0.2f;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002256:	4a25      	ldr	r2, [pc, #148]	; (80022ec <mcmdMoter5Setting+0xb4>)
 8002258:	619a      	str	r2, [r3, #24]
	    mcmd4M5_struct.ctrl_param.PID_param.ki = 0.05f;
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <mcmdMoter5Setting+0xb8>)
 800225e:	61da      	str	r2, [r3, #28]
	    mcmd4M5_struct.ctrl_param.PID_param.kd = 0.01f;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002262:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <mcmdMoter5Setting+0xbc>)
 8002264:	621a      	str	r2, [r3, #32]
	    mcmd4M5_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M5_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002274:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M5_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M5_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M5_struct.enc_dir = MCMD_DIR_BC;  // Encoderの回転方向設定
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002288:	2201      	movs	r2, #1
 800228a:	711a      	strb	r2, [r3, #4]
	    mcmd4M5_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 800228e:	2201      	movs	r2, #1
 8002290:	715a      	strb	r2, [r3, #5]
	    mcmd4M5_struct.quant_per_unit = 1.0/1024.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 8002294:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002298:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M5_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 800229c:	2201      	movs	r2, #1
 800229e:	719a      	strb	r2, [r3, #6]
	    mcmd4M5_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	71da      	strb	r2, [r3, #7]
	    mcmd4M5_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <mcmdMoter5Setting+0xc0>)
 80022aa:	609a      	str	r2, [r3, #8]
	    mcmd4M5_struct.offset = 0.0f;  // 原点のオフセット
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
	    mcmd4M5_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M5_struct);
 80022ba:	480b      	ldr	r0, [pc, #44]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022bc:	f7ff f9ba 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 80022c0:	200a      	movs	r0, #10
 80022c2:	f001 fc23 	bl	8003b0c <HAL_Delay>
		 MCMD_Calib(&mcmd4M5_struct);  // キャリブレーションを行う
 80022c6:	4808      	ldr	r0, [pc, #32]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022c8:	f7ff fa04 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 80022cc:	2032      	movs	r0, #50	; 0x32
 80022ce:	f001 fc1d 	bl	8003b0c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M5_struct, 0.00f);  // 目標値を設定
 80022d2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80022fc <mcmdMoter5Setting+0xc4>
 80022d6:	4804      	ldr	r0, [pc, #16]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022d8:	f7ff fa28 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M5_struct);  // 制御開始
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <mcmdMoter5Setting+0xb0>)
 80022de:	f7ff fa0f 	bl	8001700 <MCMD_Control_Enable>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20007348 	.word	0x20007348
 80022ec:	3e4ccccd 	.word	0x3e4ccccd
 80022f0:	3d4ccccd 	.word	0x3d4ccccd
 80022f4:	3c23d70a 	.word	0x3c23d70a
 80022f8:	be4ccccd 	.word	0xbe4ccccd
 80022fc:	00000000 	.word	0x00000000

08002300 <mcmdMoter6Setting>:

void mcmdMoter6Setting(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	    mcmd4M6_struct.device.node_type = NODE_MCMD3;
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002306:	2203      	movs	r2, #3
 8002308:	701a      	strb	r2, [r3, #0]
	    mcmd4M6_struct.device.node_id =5;
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 800230c:	2205      	movs	r2, #5
 800230e:	705a      	strb	r2, [r3, #1]
	    mcmd4M6_struct.device.device_num = 1;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002312:	2201      	movs	r2, #1
 8002314:	709a      	strb	r2, [r3, #2]

	    mcmd4M6_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002318:	2200      	movs	r2, #0
 800231a:	751a      	strb	r2, [r3, #20]
	    mcmd4M6_struct.ctrl_param.PID_param.kp = 0.2f;
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 800231e:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <mcmdMoter6Setting+0xb4>)
 8002320:	619a      	str	r2, [r3, #24]
	    mcmd4M6_struct.ctrl_param.PID_param.ki = 0.05f;
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <mcmdMoter6Setting+0xb8>)
 8002326:	61da      	str	r2, [r3, #28]
	    mcmd4M6_struct.ctrl_param.PID_param.kd = 0.01f;
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 800232a:	4a24      	ldr	r2, [pc, #144]	; (80023bc <mcmdMoter6Setting+0xbc>)
 800232c:	621a      	str	r2, [r3, #32]
	    mcmd4M6_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M6_struct.ctrl_param.accel_limit_size = 2.0f;
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M6_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M6_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M6_struct.enc_dir = MCMD_DIR_FW;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002350:	2200      	movs	r2, #0
 8002352:	711a      	strb	r2, [r3, #4]
	    mcmd4M6_struct.rot_dir = MCMD_DIR_FW;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002356:	2200      	movs	r2, #0
 8002358:	715a      	strb	r2, [r3, #5]
	    mcmd4M6_struct.quant_per_unit = 1.0/1024.0f;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 800235c:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002360:	611a      	str	r2, [r3, #16]

	    mcmd4M6_struct.limit_sw_type = LIMIT_SW_NO;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002364:	2201      	movs	r2, #1
 8002366:	719a      	strb	r2, [r3, #6]
	    mcmd4M6_struct.calib = CALIBRATION_DISABLE;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 800236a:	2201      	movs	r2, #1
 800236c:	71da      	strb	r2, [r3, #7]
	    mcmd4M6_struct.calib_duty = -0.2f;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <mcmdMoter6Setting+0xc0>)
 8002372:	609a      	str	r2, [r3, #8]
	    mcmd4M6_struct.offset = 0.0f;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
	    mcmd4M6_struct.fb_type = MCMD_FB_POS;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 800237e:	2200      	movs	r2, #0
 8002380:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M6_struct);
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002384:	f7ff f956 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 8002388:	200a      	movs	r0, #10
 800238a:	f001 fbbf 	bl	8003b0c <HAL_Delay>
		 MCMD_Calib(&mcmd4M6_struct);
 800238e:	4808      	ldr	r0, [pc, #32]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 8002390:	f7ff f9a0 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);
 8002394:	2032      	movs	r0, #50	; 0x32
 8002396:	f001 fbb9 	bl	8003b0c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M6_struct, 0.00f);
 800239a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80023c4 <mcmdMoter6Setting+0xc4>
 800239e:	4804      	ldr	r0, [pc, #16]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 80023a0:	f7ff f9c4 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M6_struct);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <mcmdMoter6Setting+0xb0>)
 80023a6:	f7ff f9ab 	bl	8001700 <MCMD_Control_Enable>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20007388 	.word	0x20007388
 80023b4:	3e4ccccd 	.word	0x3e4ccccd
 80023b8:	3d4ccccd 	.word	0x3d4ccccd
 80023bc:	3c23d70a 	.word	0x3c23d70a
 80023c0:	be4ccccd 	.word	0xbe4ccccd
 80023c4:	00000000 	.word	0x00000000

080023c8 <servo1Setting>:
		 MCMD_SetTarget(&mcmd4M8_struct, 0.00f);
		 MCMD_Control_Enable(&mcmd4M8_struct);
}

//サーボ基盤設定
void servo1Setting(){
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	// Servo基板のdevice設定
	servo_device1.node_type = NODE_SERVO;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <servo1Setting+0x44>)
 80023ce:	2204      	movs	r2, #4
 80023d0:	701a      	strb	r2, [r3, #0]
	servo_device1.node_id = 1;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <servo1Setting+0x44>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	705a      	strb	r2, [r3, #1]
	servo_device1.device_num = 0;//0~3を指定する
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <servo1Setting+0x44>)
 80023da:	2200      	movs	r2, #0
 80023dc:	709a      	strb	r2, [r3, #2]

	// Servo基板のパラメータ (offset以外はあまり変更しない)
	servo_param1.angle_range=270.0f;//サーボの動作範囲
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <servo1Setting+0x48>)
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <servo1Setting+0x4c>)
 80023e2:	60da      	str	r2, [r3, #12]
	servo_param1.angle_offset=0.0f;//原点の位置
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <servo1Setting+0x48>)
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
	servo_param1.pulse_width_max=2.4f;//サーボの制御のPWM信号のパルス幅の最大値
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <servo1Setting+0x48>)
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <servo1Setting+0x50>)
 80023f0:	605a      	str	r2, [r3, #4]
	servo_param1.pulse_width_min=0.5f;//サーボの制御のPWM信号のパルス幅の最小値
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <servo1Setting+0x48>)
 80023f4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80023f8:	601a      	str	r2, [r3, #0]
	servo_param1.pwm_frequency=50;//PWM周波数（この変更は未実装
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <servo1Setting+0x48>)
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <servo1Setting+0x54>)
 80023fe:	609a      	str	r2, [r3, #8]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200073dc 	.word	0x200073dc
 8002410:	200073c8 	.word	0x200073c8
 8002414:	43870000 	.word	0x43870000
 8002418:	4019999a 	.word	0x4019999a
 800241c:	42480000 	.word	0x42480000

08002420 <servo2Setting>:

void servo2Setting(){
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	// Servo基板のdevice設定
	servo_device2.node_type = NODE_SERVO;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <servo2Setting+0x44>)
 8002426:	2204      	movs	r2, #4
 8002428:	701a      	strb	r2, [r3, #0]
	servo_device2.node_id = 1;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <servo2Setting+0x44>)
 800242c:	2201      	movs	r2, #1
 800242e:	705a      	strb	r2, [r3, #1]
	servo_device2.device_num = 1;//0~3を指定する
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <servo2Setting+0x44>)
 8002432:	2201      	movs	r2, #1
 8002434:	709a      	strb	r2, [r3, #2]

	// Servo基板のパラメータ (offset以外はあまり変更しない)
	servo_param2.angle_range=270.0f;//サーボの動作範囲
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <servo2Setting+0x48>)
 8002438:	4a0c      	ldr	r2, [pc, #48]	; (800246c <servo2Setting+0x4c>)
 800243a:	60da      	str	r2, [r3, #12]
	servo_param2.angle_offset=0.0f;//原点の位置
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <servo2Setting+0x48>)
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
	servo_param2.pulse_width_max=2.4f;//サーボの制御のPWM信号のパルス幅の最大値
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <servo2Setting+0x48>)
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <servo2Setting+0x50>)
 8002448:	605a      	str	r2, [r3, #4]
	servo_param2.pulse_width_min=0.5f;//サーボの制御のPWM信号のパルス幅の最小値
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <servo2Setting+0x48>)
 800244c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002450:	601a      	str	r2, [r3, #0]
	servo_param2.pwm_frequency=50;//PWM周波数（この変更は未実装
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <servo2Setting+0x48>)
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <servo2Setting+0x54>)
 8002456:	609a      	str	r2, [r3, #8]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200073f4 	.word	0x200073f4
 8002468:	200073e0 	.word	0x200073e0
 800246c:	43870000 	.word	0x43870000
 8002470:	4019999a 	.word	0x4019999a
 8002474:	42480000 	.word	0x42480000

08002478 <airSetting>:

//エアシリ基盤設定
void airSetting(){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR; //エアシリンダ基盤であることを示す
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <airSetting+0x44>)
 8002480:	2205      	movs	r2, #5
 8002482:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0; //基板の番号
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <airSetting+0x44>)
 8002486:	2200      	movs	r2, #0
 8002488:	705a      	strb	r2, [r3, #1]

	//初期化
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 800248a:	2300      	movs	r3, #0
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	e00c      	b.n	80024aa <airSetting+0x32>
		air_device.device_num = i; // (i番ポートを指定)
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <airSetting+0x44>)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	7093      	strb	r3, [r2, #2]
		AirCylinder_Init(&air_device, AIR_OFF);
 8002496:	2100      	movs	r1, #0
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <airSetting+0x44>)
 800249a:	f7ff f9bb 	bl	8001814 <AirCylinder_Init>
		HAL_Delay(10);  // このdelayは必要
 800249e:	200a      	movs	r0, #10
 80024a0:	f001 fb34 	bl	8003b0c <HAL_Delay>
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	3301      	adds	r3, #1
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b07      	cmp	r3, #7
 80024ae:	d9ef      	bls.n	8002490 <airSetting+0x18>
	 }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200073f8 	.word	0x200073f8

080024c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <MX_FREERTOS_Init+0x48>)
 80024c6:	2100      	movs	r1, #0
 80024c8:	4810      	ldr	r0, [pc, #64]	; (800250c <MX_FREERTOS_Init+0x4c>)
 80024ca:	f00b fcef 	bl	800deac <osThreadNew>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <MX_FREERTOS_Init+0x50>)
 80024d2:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <MX_FREERTOS_Init+0x54>)
 80024d6:	2100      	movs	r1, #0
 80024d8:	480f      	ldr	r0, [pc, #60]	; (8002518 <MX_FREERTOS_Init+0x58>)
 80024da:	f00b fce7 	bl	800deac <osThreadNew>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a0e      	ldr	r2, [pc, #56]	; (800251c <MX_FREERTOS_Init+0x5c>)
 80024e2:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <MX_FREERTOS_Init+0x60>)
 80024e6:	2100      	movs	r1, #0
 80024e8:	480e      	ldr	r0, [pc, #56]	; (8002524 <MX_FREERTOS_Init+0x64>)
 80024ea:	f00b fcdf 	bl	800deac <osThreadNew>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <MX_FREERTOS_Init+0x68>)
 80024f2:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <MX_FREERTOS_Init+0x6c>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_FREERTOS_Init+0x70>)
 80024fa:	f00b fcd7 	bl	800deac <osThreadNew>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <MX_FREERTOS_Init+0x74>)
 8002502:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	08024560 	.word	0x08024560
 800250c:	08002901 	.word	0x08002901
 8002510:	20007404 	.word	0x20007404
 8002514:	08024584 	.word	0x08024584
 8002518:	08002d71 	.word	0x08002d71
 800251c:	2000a344 	.word	0x2000a344
 8002520:	080245a8 	.word	0x080245a8
 8002524:	08002da5 	.word	0x08002da5
 8002528:	2000aba4 	.word	0x2000aba4
 800252c:	080245cc 	.word	0x080245cc
 8002530:	08002db5 	.word	0x08002db5
 8002534:	2000b404 	.word	0x2000b404

08002538 <service_callback>:
  */
int count = 1;

// サービスのコールバック関数を定義
void service_callback(const void *request, void *response)
{
 8002538:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
	// リクエストとレスポンスを適切な型にキャスト
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	60bb      	str	r3, [r7, #8]
	// 1秒スリープ（重い処理の代わり）
	osDelay(1000);
 800254c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002550:	f00b fd52 	bl	800dff8 <osDelay>
	// レスポンスに合計値をセット
	_res->sum = _req->a + _req->b + _req->c;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002560:	1884      	adds	r4, r0, r2
 8002562:	eb41 0503 	adc.w	r5, r1, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800256c:	eb14 0802 	adds.w	r8, r4, r2
 8002570:	eb45 0903 	adc.w	r9, r5, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	e9c3 8900 	strd	r8, r9, [r3]
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002584 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	ed93 7b04 	vldr	d7, [r3, #16]
 8002596:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <subscription_callback+0x58>)
 800259c:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	ed93 7b06 	vldr	d7, [r3, #24]
 80025a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <subscription_callback+0x58>)
 80025ac:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	ed93 7b08 	vldr	d7, [r3, #32]
 80025b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <subscription_callback+0x58>)
 80025bc:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80025c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <subscription_callback+0x58>)
 80025cc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	2000bc68 	.word	0x2000bc68

080025e0 <print_int>:

void print_int(int num){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 80025e8:	4811      	ldr	r0, [pc, #68]	; (8002630 <print_int+0x50>)
 80025ea:	f014 fe6b 	bl	80172c4 <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 80025ee:	f107 0008 	add.w	r0, r7, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <print_int+0x54>)
 80025f6:	210c      	movs	r1, #12
 80025f8:	f01e fa6c 	bl	8020ad4 <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	220c      	movs	r2, #12
 8002602:	4619      	mov	r1, r3
 8002604:	480a      	ldr	r0, [pc, #40]	; (8002630 <print_int+0x50>)
 8002606:	f014 febb 	bl	8017380 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 800260a:	2200      	movs	r2, #0
 800260c:	4908      	ldr	r1, [pc, #32]	; (8002630 <print_int+0x50>)
 800260e:	480a      	ldr	r0, [pc, #40]	; (8002638 <print_int+0x58>)
 8002610:	f011 fad2 	bl	8013bb8 <rcl_publish>
 8002614:	6178      	str	r0, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <print_int+0x48>
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	f44f 711e 	mov.w	r1, #632	; 0x278
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <print_int+0x5c>)
 8002624:	f01e f93a 	bl	802089c <iprintf>
}
 8002628:	bf00      	nop
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200072e8 	.word	0x200072e8
 8002634:	08024384 	.word	0x08024384
 8002638:	200073fc 	.word	0x200073fc
 800263c:	08024388 	.word	0x08024388

08002640 <manipsub_callback>:

void manipsub_callback(const void * msgin)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002652:	4613      	mov	r3, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ffc3 	bl	80025e0 <print_int>
	  print_int(msub->top_base_arm);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	4613      	mov	r3, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ffbc 	bl	80025e0 <print_int>
	  print_int(msub->top_base_hand);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ffb5 	bl	80025e0 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f000 f834 	bl	80026ec <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f000 f899 	bl	80027c4 <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f000 f872 	bl	8002784 <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f000 f8ab 	bl	8002804 <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f000 f8c2 	bl	8002840 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f000 f8db 	bl	8002880 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f000 f8f2 	bl	80028bc <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	4803      	ldr	r0, [pc, #12]	; (80026e8 <manipsub_callback+0xa8>)
 80026dc:	f002 ff53 	bl	8005586 <HAL_GPIO_TogglePin>
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40020400 	.word	0x40020400

080026ec <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 80026fa:	491c      	ldr	r1, [pc, #112]	; (800276c <work_arm_deployer+0x80>)
 80026fc:	481c      	ldr	r0, [pc, #112]	; (8002770 <work_arm_deployer+0x84>)
 80026fe:	f7ff f82c 	bl	800175a <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f00b fc78 	bl	800dff8 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8002708:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002774 <work_arm_deployer+0x88>
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <work_arm_deployer+0x84>)
 800270e:	f7ff f866 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002712:	4919      	ldr	r1, [pc, #100]	; (8002778 <work_arm_deployer+0x8c>)
 8002714:	4819      	ldr	r0, [pc, #100]	; (800277c <work_arm_deployer+0x90>)
 8002716:	f7ff f820 	bl	800175a <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 800271a:	2064      	movs	r0, #100	; 0x64
 800271c:	f00b fc6c 	bl	800dff8 <osDelay>
		ServoDriver_SendValue(&servo_device2, 135.0f);
 8002720:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002780 <work_arm_deployer+0x94>
 8002724:	4815      	ldr	r0, [pc, #84]	; (800277c <work_arm_deployer+0x90>)
 8002726:	f7ff f85a 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 45.0f);
		ServoDriver_Init(&servo_device1, &servo_param1);
		osDelay(100);
		ServoDriver_SendValue(&servo_device1, 135.0f);
	}
}
 800272a:	e01a      	b.n	8002762 <work_arm_deployer+0x76>
	}else if(state == 1){
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d117      	bne.n	8002762 <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002732:	4911      	ldr	r1, [pc, #68]	; (8002778 <work_arm_deployer+0x8c>)
 8002734:	4811      	ldr	r0, [pc, #68]	; (800277c <work_arm_deployer+0x90>)
 8002736:	f7ff f810 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 800273a:	2064      	movs	r0, #100	; 0x64
 800273c:	f00b fc5c 	bl	800dff8 <osDelay>
		ServoDriver_SendValue(&servo_device2, 45.0f);
 8002740:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002774 <work_arm_deployer+0x88>
 8002744:	480d      	ldr	r0, [pc, #52]	; (800277c <work_arm_deployer+0x90>)
 8002746:	f7ff f84a 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device1, &servo_param1);
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <work_arm_deployer+0x80>)
 800274c:	4808      	ldr	r0, [pc, #32]	; (8002770 <work_arm_deployer+0x84>)
 800274e:	f7ff f804 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002752:	2064      	movs	r0, #100	; 0x64
 8002754:	f00b fc50 	bl	800dff8 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8002758:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002780 <work_arm_deployer+0x94>
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <work_arm_deployer+0x84>)
 800275e:	f7ff f83e 	bl	80017de <ServoDriver_SendValue>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200073c8 	.word	0x200073c8
 8002770:	200073dc 	.word	0x200073dc
 8002774:	42340000 	.word	0x42340000
 8002778:	200073e0 	.word	0x200073e0
 800277c:	200073f4 	.word	0x200073f4
 8002780:	43070000 	.word	0x43070000

08002784 <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d107      	bne.n	80027a2 <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <work_hand_setter+0x3c>)
 8002794:	2201      	movs	r2, #1
 8002796:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002798:	2100      	movs	r1, #0
 800279a:	4809      	ldr	r0, [pc, #36]	; (80027c0 <work_hand_setter+0x3c>)
 800279c:	f7ff f855 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 80027a0:	e009      	b.n	80027b6 <work_hand_setter+0x32>
	  }else if(state == 1){
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <work_hand_setter+0x32>
		  air_device.device_num=1;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <work_hand_setter+0x3c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 80027ae:	2101      	movs	r1, #1
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <work_hand_setter+0x3c>)
 80027b2:	f7ff f84a 	bl	800184a <AirCylinder_SendOutput>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200073f8 	.word	0x200073f8

080027c4 <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <work_arm_setter+0x1e>
		  air_device.device_num=0;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <work_arm_setter+0x3c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 80027d8:	2100      	movs	r1, #0
 80027da:	4809      	ldr	r0, [pc, #36]	; (8002800 <work_arm_setter+0x3c>)
 80027dc:	f7ff f835 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 80027e0:	e009      	b.n	80027f6 <work_arm_setter+0x32>
	  }else if(state == 1){
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <work_arm_setter+0x32>
		  air_device.device_num=0;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <work_arm_setter+0x3c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 80027ee:	2101      	movs	r1, #1
 80027f0:	4803      	ldr	r0, [pc, #12]	; (8002800 <work_arm_setter+0x3c>)
 80027f2:	f7ff f82a 	bl	800184a <AirCylinder_SendOutput>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200073f8 	.word	0x200073f8

08002804 <base1_arm_setter>:

void base1_arm_setter(int state){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	if(state == 0){
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8002812:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002838 <base1_arm_setter+0x34>
 8002816:	4809      	ldr	r0, [pc, #36]	; (800283c <base1_arm_setter+0x38>)
 8002818:	f7fe ff88 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
	}
}
 800281c:	e007      	b.n	800282e <base1_arm_setter+0x2a>
	}else if(state == 1){
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d104      	bne.n	800282e <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
 8002824:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <base1_arm_setter+0x38>)
 800282a:	f7fe ff7f 	bl	800172c <MCMD_SetTarget>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	00000000 	.word	0x00000000
 800283c:	20007348 	.word	0x20007348

08002840 <base1_hand_setter>:

void base1_hand_setter(int state){
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <base1_hand_setter+0x1e>
		air_device.device_num=3;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <base1_hand_setter+0x3c>)
 8002850:	2203      	movs	r2, #3
 8002852:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002854:	2100      	movs	r1, #0
 8002856:	4809      	ldr	r0, [pc, #36]	; (800287c <base1_hand_setter+0x3c>)
 8002858:	f7fe fff7 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 800285c:	e009      	b.n	8002872 <base1_hand_setter+0x32>
		}else if(state == 1){
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <base1_hand_setter+0x32>
			air_device.device_num=3;
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <base1_hand_setter+0x3c>)
 8002866:	2203      	movs	r2, #3
 8002868:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 800286a:	2101      	movs	r1, #1
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <base1_hand_setter+0x3c>)
 800286e:	f7fe ffec 	bl	800184a <AirCylinder_SendOutput>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200073f8 	.word	0x200073f8

08002880 <base2_arm_setter>:

void base2_arm_setter(int state){
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 800288e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80028b4 <base2_arm_setter+0x34>
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <base2_arm_setter+0x38>)
 8002894:	f7fe ff4a 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
	}
}
 8002898:	e007      	b.n	80028aa <base2_arm_setter+0x2a>
	}else if(state == 1){
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d104      	bne.n	80028aa <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
 80028a0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <base2_arm_setter+0x38>)
 80028a6:	f7fe ff41 	bl	800172c <MCMD_SetTarget>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	00000000 	.word	0x00000000
 80028b8:	20007388 	.word	0x20007388

080028bc <base2_hand_setter>:

void base2_hand_setter(int state){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <base2_hand_setter+0x1e>
		air_device.device_num=2;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <base2_hand_setter+0x3c>)
 80028cc:	2202      	movs	r2, #2
 80028ce:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 80028d0:	2100      	movs	r1, #0
 80028d2:	4809      	ldr	r0, [pc, #36]	; (80028f8 <base2_hand_setter+0x3c>)
 80028d4:	f7fe ffb9 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 80028d8:	e009      	b.n	80028ee <base2_hand_setter+0x32>
		}else if(state == 1){
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <base2_hand_setter+0x32>
			air_device.device_num=2;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <base2_hand_setter+0x3c>)
 80028e2:	2202      	movs	r2, #2
 80028e4:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 80028e6:	2101      	movs	r1, #1
 80028e8:	4803      	ldr	r0, [pc, #12]	; (80028f8 <base2_hand_setter+0x3c>)
 80028ea:	f7fe ffae 	bl	800184a <AirCylinder_SendOutput>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200073f8 	.word	0x200073f8
 80028fc:	00000000 	.word	0x00000000

08002900 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b0f2      	sub	sp, #456	; 0x1c8
 8002904:	af02      	add	r7, sp, #8
 8002906:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800290a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800290e:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002910:	f00e f854 	bl	80109bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの初期化
  	rmw_uros_set_custom_transport(
 8002914:	4bd1      	ldr	r3, [pc, #836]	; (8002c5c <StartDefaultTask+0x35c>)
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	4bd1      	ldr	r3, [pc, #836]	; (8002c60 <StartDefaultTask+0x360>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4bd1      	ldr	r3, [pc, #836]	; (8002c64 <StartDefaultTask+0x364>)
 800291e:	4ad2      	ldr	r2, [pc, #840]	; (8002c68 <StartDefaultTask+0x368>)
 8002920:	49d2      	ldr	r1, [pc, #840]	; (8002c6c <StartDefaultTask+0x36c>)
 8002922:	2001      	movs	r0, #1
 8002924:	f012 ff02 	bl	801572c <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002928:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800292c:	4618      	mov	r0, r3
 800292e:	f012 fb93 	bl	8015058 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8002932:	4bcf      	ldr	r3, [pc, #828]	; (8002c70 <StartDefaultTask+0x370>)
 8002934:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8002938:	4bce      	ldr	r3, [pc, #824]	; (8002c74 <StartDefaultTask+0x374>)
 800293a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.reallocate = microros_reallocate;
 800293e:	4bce      	ldr	r3, [pc, #824]	; (8002c78 <StartDefaultTask+0x378>)
 8002940:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002944:	4bcd      	ldr	r3, [pc, #820]	; (8002c7c <StartDefaultTask+0x37c>)
 8002946:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800294a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800294e:	4618      	mov	r0, r3
 8002950:	f012 fb90 	bl	8015074 <rcutils_set_default_allocator>
 8002954:	4603      	mov	r3, r0
 8002956:	f083 0301 	eor.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8002960:	f240 21ef 	movw	r1, #751	; 0x2ef
 8002964:	48c6      	ldr	r0, [pc, #792]	; (8002c80 <StartDefaultTask+0x380>)
 8002966:	f01d ff99 	bl	802089c <iprintf>
  	}

      // ここからサービスサーバの実装
  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 800296a:	4bc6      	ldr	r3, [pc, #792]	; (8002c84 <StartDefaultTask+0x384>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6898      	ldr	r0, [r3, #8]
 8002970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002974:	2202      	movs	r2, #2
 8002976:	2100      	movs	r1, #0
 8002978:	f01d fffe 	bl	8020978 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800297c:	f010 fd9c 	bl	80134b8 <rcl_get_zero_initialized_init_options>
 8002980:	4603      	mov	r3, r0
 8002982:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8002986:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800298a:	4618      	mov	r0, r3
 800298c:	f012 fb90 	bl	80150b0 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8002990:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002994:	4618      	mov	r0, r3
 8002996:	f010 fe97 	bl	80136c8 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 800299a:	f011 f953 	bl	8013c44 <rcl_get_zero_initialized_service>
 800299e:	4603      	mov	r3, r0
 80029a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  	publisher = rcl_get_zero_initialized_publisher();
 80029a4:	f011 f83a 	bl	8013a1c <rcl_get_zero_initialized_publisher>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4ab7      	ldr	r2, [pc, #732]	; (8002c88 <StartDefaultTask+0x388>)
 80029ac:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 80029ae:	f011 fa6d 	bl	8013e8c <rcl_get_zero_initialized_subscription>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 80029b8:	f011 fa68 	bl	8013e8c <rcl_get_zero_initialized_subscription>
 80029bc:	4603      	mov	r3, r0
 80029be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 80029c2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029ca:	4618      	mov	r0, r3
 80029cc:	f011 feee 	bl	80147ac <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 80029d0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029d4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80029d8:	4618      	mov	r0, r3
 80029da:	f010 ffef 	bl	80139bc <rcl_node_get_default_options>

  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 80029de:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 80029e2:	466a      	mov	r2, sp
 80029e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80029e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80029f0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80029f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f6:	4620      	mov	r0, r4
 80029f8:	f010 fd60 	bl	80134bc <rcl_init_options_init>
 80029fc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8002a00:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <StartDefaultTask+0x116>
 8002a08:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002a0c:	f240 21ff 	movw	r1, #767	; 0x2ff
 8002a10:	489e      	ldr	r0, [pc, #632]	; (8002c8c <StartDefaultTask+0x38c>)
 8002a12:	f01d ff43 	bl	802089c <iprintf>

      // ROS_DOMAIN_IDの設定。
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8002a16:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f010 fe4b 	bl	80136b8 <rcl_init_options_set_domain_id>
 8002a22:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 8002a26:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <StartDefaultTask+0x13c>
 8002a2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a32:	f240 3102 	movw	r1, #770	; 0x302
 8002a36:	4895      	ldr	r0, [pc, #596]	; (8002c8c <StartDefaultTask+0x38c>)
 8002a38:	f01d ff30 	bl	802089c <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002a3c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002a40:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8002a44:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f012 f9da 	bl	8014e08 <rclc_support_init_with_options>

      // ノードの作成
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002a54:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002a58:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8002a5c:	f107 0320 	add.w	r3, r7, #32
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	4a8a      	ldr	r2, [pc, #552]	; (8002c90 <StartDefaultTask+0x390>)
 8002a66:	498b      	ldr	r1, [pc, #556]	; (8002c94 <StartDefaultTask+0x394>)
 8002a68:	f012 fa04 	bl	8014e74 <rclc_node_init_with_options>
 8002a6c:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8002a70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <StartDefaultTask+0x186>
 8002a78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a7c:	f240 3106 	movw	r1, #774	; 0x306
 8002a80:	4882      	ldr	r0, [pc, #520]	; (8002c8c <StartDefaultTask+0x38c>)
 8002a82:	f01d ff0b 	bl	802089c <iprintf>

      // サービスの作成
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8002a86:	f00e fcf9 	bl	801147c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002a90:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8002a94:	4b80      	ldr	r3, [pc, #512]	; (8002c98 <StartDefaultTask+0x398>)
 8002a96:	f012 fa63 	bl	8014f60 <rclc_service_init_default>
 8002a9a:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8002a9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <StartDefaultTask+0x1b4>
 8002aa6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002aaa:	f240 3109 	movw	r1, #777	; 0x309
 8002aae:	4877      	ldr	r0, [pc, #476]	; (8002c8c <StartDefaultTask+0x38c>)
 8002ab0:	f01d fef4 	bl	802089c <iprintf>

  	 //publisherの作成
	RCCHECK(rclc_publisher_init_default(
 8002ab4:	f014 fcf4 	bl	80174a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002abe:	4b77      	ldr	r3, [pc, #476]	; (8002c9c <StartDefaultTask+0x39c>)
 8002ac0:	4871      	ldr	r0, [pc, #452]	; (8002c88 <StartDefaultTask+0x388>)
 8002ac2:	f012 fa13 	bl	8014eec <rclc_publisher_init_default>
 8002ac6:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8002aca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <StartDefaultTask+0x1e0>
 8002ad2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002ad6:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8002ada:	486c      	ldr	r0, [pc, #432]	; (8002c8c <StartDefaultTask+0x38c>)
 8002adc:	f01d fede 	bl	802089c <iprintf>
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

	 //publisherの作成
		RCCHECK(rclc_publisher_init_default(
 8002ae0:	f00e fdfc 	bl	80116dc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002aea:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <StartDefaultTask+0x3a0>)
 8002aec:	486d      	ldr	r0, [pc, #436]	; (8002ca4 <StartDefaultTask+0x3a4>)
 8002aee:	f012 f9fd 	bl	8014eec <rclc_publisher_init_default>
 8002af2:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8002af6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <StartDefaultTask+0x20c>
 8002afe:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002b02:	f240 3113 	movw	r1, #787	; 0x313
 8002b06:	4861      	ldr	r0, [pc, #388]	; (8002c8c <StartDefaultTask+0x38c>)
 8002b08:	f01d fec8 	bl	802089c <iprintf>
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));


	 //subscriberの作成
		RCCHECK(rclc_subscription_init_default(
 8002b0c:	f00e fdce 	bl	80116ac <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002b16:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002b1a:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <StartDefaultTask+0x3a8>)
 8002b1c:	f012 fa5a 	bl	8014fd4 <rclc_subscription_init_default>
 8002b20:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002b24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <StartDefaultTask+0x23a>
 8002b2c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b30:	f240 311b 	movw	r1, #795	; 0x31b
 8002b34:	4855      	ldr	r0, [pc, #340]	; (8002c8c <StartDefaultTask+0x38c>)
 8002b36:	f01d feb1 	bl	802089c <iprintf>
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

//		//subscriberの作成
		RCCHECK(rclc_subscription_init_default(
 8002b3a:	f00e ffdd 	bl	8011af8 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002b44:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <StartDefaultTask+0x3ac>)
 8002b4a:	f012 fa43 	bl	8014fd4 <rclc_subscription_init_default>
 8002b4e:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002b52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <StartDefaultTask+0x268>
 8002b5a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002b5e:	f240 3122 	movw	r1, #802	; 0x322
 8002b62:	484a      	ldr	r0, [pc, #296]	; (8002c8c <StartDefaultTask+0x38c>)
 8002b64:	f01d fe9a 	bl	802089c <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));
      // エグゼキューターの作成。三番目の引数はextecuterに登録するコールバック関数の数。
  	RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 8002b68:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002b6c:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002b70:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002b74:	2203      	movs	r2, #3
 8002b76:	f011 fe23 	bl	80147c0 <rclc_executor_init>
 8002b7a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8002b7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <StartDefaultTask+0x294>
 8002b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b8a:	f44f 714a 	mov.w	r1, #808	; 0x328
 8002b8e:	483f      	ldr	r0, [pc, #252]	; (8002c8c <StartDefaultTask+0x38c>)
 8002b90:	f01d fe84 	bl	802089c <iprintf>

      // エグゼキューターにサービスを追加
  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8002b94:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002b98:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002b9c:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <StartDefaultTask+0x3b0>)
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <StartDefaultTask+0x3b4>)
 8002ba2:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <StartDefaultTask+0x3b8>)
 8002ba4:	f011 fec6 	bl	8014934 <rclc_executor_add_service>
 8002ba8:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8002bac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <StartDefaultTask+0x2c2>
 8002bb4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bb8:	f240 312b 	movw	r1, #811	; 0x32b
 8002bbc:	4833      	ldr	r0, [pc, #204]	; (8002c8c <StartDefaultTask+0x38c>)
 8002bbe:	f01d fe6d 	bl	802089c <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002bc2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002bc6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <StartDefaultTask+0x3bc>)
 8002bd0:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <StartDefaultTask+0x3c0>)
 8002bd2:	f011 fe71 	bl	80148b8 <rclc_executor_add_subscription>
 8002bd6:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8002bda:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <StartDefaultTask+0x2f0>
 8002be2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002be6:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8002bea:	4828      	ldr	r0, [pc, #160]	; (8002c8c <StartDefaultTask+0x38c>)
 8002bec:	f01d fe56 	bl	802089c <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 8002bf0:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002bf4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <StartDefaultTask+0x3c4>)
 8002bfe:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <StartDefaultTask+0x3c8>)
 8002c00:	f011 fe5a 	bl	80148b8 <rclc_executor_add_subscription>
 8002c04:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8002c08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <StartDefaultTask+0x31e>
 8002c10:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002c14:	f240 312f 	movw	r1, #815	; 0x32f
 8002c18:	481c      	ldr	r0, [pc, #112]	; (8002c8c <StartDefaultTask+0x38c>)
 8002c1a:	f01d fe3f 	bl	802089c <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002c1e:	482b      	ldr	r0, [pc, #172]	; (8002ccc <StartDefaultTask+0x3cc>)
 8002c20:	f014 fb50 	bl	80172c4 <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8002c24:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002c28:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c2c:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <StartDefaultTask+0x3d0>)
 8002c2e:	461c      	mov	r4, r3
 8002c30:	4615      	mov	r5, r2
 8002c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002c3a:	f107 030c 	add.w	r3, r7, #12
 8002c3e:	2214      	movs	r2, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	4822      	ldr	r0, [pc, #136]	; (8002ccc <StartDefaultTask+0x3cc>)
 8002c44:	f014 fb9c 	bl	8017380 <rosidl_runtime_c__String__assignn>

    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4920      	ldr	r1, [pc, #128]	; (8002ccc <StartDefaultTask+0x3cc>)
 8002c4c:	480e      	ldr	r0, [pc, #56]	; (8002c88 <StartDefaultTask+0x388>)
 8002c4e:	f010 ffb3 	bl	8013bb8 <rcl_publish>
 8002c52:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8002c56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c5a:	e03b      	b.n	8002cd4 <StartDefaultTask+0x3d4>
 8002c5c:	080020a9 	.word	0x080020a9
 8002c60:	08002049 	.word	0x08002049
 8002c64:	08002029 	.word	0x08002029
 8002c68:	08001ffd 	.word	0x08001ffd
 8002c6c:	2000bd24 	.word	0x2000bd24
 8002c70:	08002fed 	.word	0x08002fed
 8002c74:	08003031 	.word	0x08003031
 8002c78:	08003069 	.word	0x08003069
 8002c7c:	080030d5 	.word	0x080030d5
 8002c80:	080243b4 	.word	0x080243b4
 8002c84:	2000099c 	.word	0x2000099c
 8002c88:	200073fc 	.word	0x200073fc
 8002c8c:	080243dc 	.word	0x080243dc
 8002c90:	08024408 	.word	0x08024408
 8002c94:	0802440c 	.word	0x0802440c
 8002c98:	08024414 	.word	0x08024414
 8002c9c:	08024424 	.word	0x08024424
 8002ca0:	08024434 	.word	0x08024434
 8002ca4:	20007400 	.word	0x20007400
 8002ca8:	08024440 	.word	0x08024440
 8002cac:	08024450 	.word	0x08024450
 8002cb0:	08002539 	.word	0x08002539
 8002cb4:	20007270 	.word	0x20007270
 8002cb8:	20007258 	.word	0x20007258
 8002cbc:	08002585 	.word	0x08002585
 8002cc0:	20007278 	.word	0x20007278
 8002cc4:	08002641 	.word	0x08002641
 8002cc8:	200072a8 	.word	0x200072a8
 8002ccc:	200072e8 	.word	0x200072e8
 8002cd0:	08024478 	.word	0x08024478
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <StartDefaultTask+0x3e6>
 8002cd8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002cdc:	f44f 714e 	mov.w	r1, #824	; 0x338
 8002ce0:	481d      	ldr	r0, [pc, #116]	; (8002d58 <StartDefaultTask+0x458>)
 8002ce2:	f01d fddb 	bl	802089c <iprintf>

    //初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	481c      	ldr	r0, [pc, #112]	; (8002d5c <StartDefaultTask+0x45c>)
 8002cec:	f002 fc32 	bl	8005554 <HAL_GPIO_WritePin>

	//記事ではmcmdなどの初期化コードを描くことになっている場所
	canSetting();
 8002cf0:	f7ff fa78 	bl	80021e4 <canSetting>

//	mcmdMoter1Setting();
//	mcmdMoter2Setting();
//	mcmdMoter3Setting();
//	mcmdMoter4Setting();
	mcmdMoter5Setting();
 8002cf4:	f7ff faa0 	bl	8002238 <mcmdMoter5Setting>
	mcmdMoter6Setting();
 8002cf8:	f7ff fb02 	bl	8002300 <mcmdMoter6Setting>
//	mcmdMoter7Setting();
//	mcmdMoter8Setting();
	servo1Setting();
 8002cfc:	f7ff fb64 	bl	80023c8 <servo1Setting>
	servo2Setting();
 8002d00:	f7ff fb8e 	bl	8002420 <servo2Setting>
	airSetting();
 8002d04:	f7ff fbb8 	bl	8002478 <airSetting>
	printf("calibrationFinished\r\n");
 8002d08:	4815      	ldr	r0, [pc, #84]	; (8002d60 <StartDefaultTask+0x460>)
 8002d0a:	f01d fe2d 	bl	8020968 <puts>

	finishCANsetting = true;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <StartDefaultTask+0x464>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002d14:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d18:	a30d      	add	r3, pc, #52	; (adr r3, 8002d50 <StartDefaultTask+0x450>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	4608      	mov	r0, r1
 8002d20:	f012 f838 	bl	8014d94 <rclc_executor_spin_some>
	  RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));
 8002d24:	2200      	movs	r2, #0
 8002d26:	4910      	ldr	r1, [pc, #64]	; (8002d68 <StartDefaultTask+0x468>)
 8002d28:	4810      	ldr	r0, [pc, #64]	; (8002d6c <StartDefaultTask+0x46c>)
 8002d2a:	f010 ff45 	bl	8013bb8 <rcl_publish>
 8002d2e:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8002d32:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <StartDefaultTask+0x448>
 8002d3a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002d3e:	f44f 7155 	mov.w	r1, #852	; 0x354
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <StartDefaultTask+0x458>)
 8002d44:	f01d fdaa 	bl	802089c <iprintf>

	  osDelay(10);
 8002d48:	200a      	movs	r0, #10
 8002d4a:	f00b f955 	bl	800dff8 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002d4e:	e7e1      	b.n	8002d14 <StartDefaultTask+0x414>
 8002d50:	05f5e100 	.word	0x05f5e100
 8002d54:	00000000 	.word	0x00000000
 8002d58:	08024388 	.word	0x08024388
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	08024460 	.word	0x08024460
 8002d64:	2000bc64 	.word	0x2000bc64
 8002d68:	200072f8 	.word	0x200072f8
 8002d6c:	20007400 	.word	0x20007400

08002d70 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <StartSysCheckTask+0x2c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <StartSysCheckTask+0x24>
		  if(!finishCheck){
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <StartSysCheckTask+0x30>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <StartSysCheckTask+0x24>
//			  mcmdMotorDutyCecker(&mcmd4M3_struct,0.3f,2000,0.0f);
//			  mcmdMotorDutyCecker(&mcmd4M4_struct,0.3f,2000,0.0f);
//			  mcmdMotorDutyCecker(&mcmd4M5_struct,0.3f,500,0.0f);
//			  mcmdMotorDutyCecker(&mcmd4M6_struct,0.3f,500,0.0f);

			  finishCheck = true;
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <StartSysCheckTask+0x30>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,10);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,10);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,10);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,10);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,10);
	  osDelay(10);
 8002d94:	200a      	movs	r0, #10
 8002d96:	f00b f92f 	bl	800dff8 <osDelay>
	  if(finishCANsetting){
 8002d9a:	e7ed      	b.n	8002d78 <StartSysCheckTask+0x8>
 8002d9c:	2000bc64 	.word	0x2000bc64
 8002da0:	2000bc78 	.word	0x2000bc78

08002da4 <StartMotorRunTask>:
	MCMD_SetTarget(&mcmd4M4_struct, velLimmiter(cmd_motor[3]));
	//MCMD_SetTarget(&mcmd4M5_struct, velLimmiter(cmd_motor[3]));
	//MCMD_SetTarget(&mcmd4M4_struct, velLimmiter(cmd_motor[3]));
}
void StartMotorRunTask(void *argument)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //motorRun();

    osDelay(10);
 8002dac:	200a      	movs	r0, #10
 8002dae:	f00b f923 	bl	800dff8 <osDelay>
 8002db2:	e7fb      	b.n	8002dac <StartMotorRunTask+0x8>

08002db4 <StartEncorderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
//	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
//	  enc.enclx = Get_MCMD_Feedback(&(mcmd4M5_struct.device)).value;
//	  enc.encly = 0.0f;
//	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;

    osDelay(10);
 8002dbc:	200a      	movs	r0, #10
 8002dbe:	f00b f91b 	bl	800dff8 <osDelay>
 8002dc2:	e7fb      	b.n	8002dbc <StartEncorderTask+0x8>

08002dc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_GPIO_Init+0xc0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8002e58:	480b      	ldr	r0, [pc, #44]	; (8002e88 <MX_GPIO_Init+0xc4>)
 8002e5a:	f002 fb7b 	bl	8005554 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8002e5e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8002e62:	617b      	str	r3, [r7, #20]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e64:	2301      	movs	r3, #1
 8002e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4619      	mov	r1, r3
 8002e76:	4804      	ldr	r0, [pc, #16]	; (8002e88 <MX_GPIO_Init+0xc4>)
 8002e78:	f002 f9c0 	bl	80051fc <HAL_GPIO_Init>

}
 8002e7c:	bf00      	nop
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020400 	.word	0x40020400

08002e8c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8002e96:	1df9      	adds	r1, r7, #7
 8002e98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <__io_putchar+0x24>)
 8002ea0:	f005 ffc4 	bl	8008e2c <HAL_UART_Transmit>
    return ch;
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000bd24 	.word	0x2000bd24

08002eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eb8:	f000 fdfb 	bl	8003ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ebc:	f000 f812 	bl	8002ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec0:	f7ff ff80 	bl	8002dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ec4:	f7ff f874 	bl	8001fb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002ec8:	f000 fcca 	bl	8003860 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002ecc:	f000 fbd4 	bl	8003678 <MX_TIM1_Init>
  MX_CAN1_Init();
 8002ed0:	f7fe fd88 	bl	80019e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ed4:	f00a ff80 	bl	800ddd8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002ed8:	f7ff faf2 	bl	80024c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002edc:	f00a ffb0 	bl	800de40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <main+0x2c>
	...

08002ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b094      	sub	sp, #80	; 0x50
 8002ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eea:	f107 031c 	add.w	r3, r7, #28
 8002eee:	2234      	movs	r2, #52	; 0x34
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f01d ff7e 	bl	8020df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef8:	f107 0308 	add.w	r3, r7, #8
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <SystemClock_Config+0xd8>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <SystemClock_Config+0xd8>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <SystemClock_Config+0xd8>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <SystemClock_Config+0xdc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <SystemClock_Config+0xdc>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <SystemClock_Config+0xdc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f46:	2302      	movs	r3, #2
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f50:	2304      	movs	r3, #4
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002f54:	2360      	movs	r3, #96	; 0x60
 8002f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f60:	2302      	movs	r3, #2
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fe2f 	bl	8006bcc <HAL_RCC_OscConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f74:	f000 f835 	bl	8002fe2 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f78:	f003 fdd8 	bl	8006b2c <HAL_PWREx_EnableOverDrive>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002f82:	f000 f82e 	bl	8002fe2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f86:	230f      	movs	r3, #15
 8002f88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 f8bf 	bl	8007128 <HAL_RCC_ClockConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002fb0:	f000 f817 	bl	8002fe2 <Error_Handler>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3750      	adds	r7, #80	; 0x50
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fd6:	f000 fd79 	bl	8003acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe6:	b672      	cpsid	i
}
 8002fe8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fea:	e7fe      	b.n	8002fea <Error_Handler+0x8>

08002fec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <microros_allocate+0x3c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <microros_allocate+0x3c>)
 8003004:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <microros_allocate+0x40>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <microros_allocate+0x40>)
 8003014:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe fd76 	bl	8001b08 <pvPortMallocMicroROS>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000bc7c 	.word	0x2000bc7c
 800302c:	2000bc80 	.word	0x2000bc80

08003030 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fe fe89 	bl	8001d58 <getBlockSize>
 8003046:	4603      	mov	r3, r0
 8003048:	4a06      	ldr	r2, [pc, #24]	; (8003064 <microros_deallocate+0x34>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	461a      	mov	r2, r3
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <microros_deallocate+0x34>)
 8003052:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fe fe21 	bl	8001c9c <vPortFreeMicroROS>
  }
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000bc80 	.word	0x2000bc80

08003068 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <microros_reallocate+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4413      	add	r3, r2
 800307e:	461a      	mov	r2, r3
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <microros_reallocate+0x64>)
 8003082:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <microros_reallocate+0x68>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4413      	add	r3, r2
 800308e:	461a      	mov	r2, r3
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <microros_reallocate+0x68>)
 8003092:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800309a:	68b8      	ldr	r0, [r7, #8]
 800309c:	f7fe fd34 	bl	8001b08 <pvPortMallocMicroROS>
 80030a0:	4603      	mov	r3, r0
 80030a2:	e00e      	b.n	80030c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7fe fe57 	bl	8001d58 <getBlockSize>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <microros_reallocate+0x68>)
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <microros_reallocate+0x68>)
 80030b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7fe fe6a 	bl	8001d94 <pvPortReallocMicroROS>
 80030c0:	4603      	mov	r3, r0
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000bc7c 	.word	0x2000bc7c
 80030d0:	2000bc80 	.word	0x2000bc80

080030d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	4a0c      	ldr	r2, [pc, #48]	; (800311c <microros_zero_allocate+0x48>)
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <microros_zero_allocate+0x48>)
 80030f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <microros_zero_allocate+0x4c>)
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4413      	add	r3, r2
 8003102:	461a      	mov	r2, r3
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <microros_zero_allocate+0x4c>)
 8003106:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fe fe6f 	bl	8001dee <pvPortCallocMicroROS>
 8003110:	4603      	mov	r3, r0
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000bc7c 	.word	0x2000bc7c
 8003120:	2000bc80 	.word	0x2000bc80
 8003124:	00000000 	.word	0x00000000

08003128 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800313a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800313e:	a320      	add	r3, pc, #128	; (adr r3, 80031c0 <UTILS_NanosecondsToTimespec+0x98>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd faa0 	bl	8000688 <__aeabi_ldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003156:	a31a      	add	r3, pc, #104	; (adr r3, 80031c0 <UTILS_NanosecondsToTimespec+0x98>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fa94 	bl	8000688 <__aeabi_ldivmod>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da20      	bge.n	80031ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <UTILS_NanosecondsToTimespec+0x90>)
 8003172:	fb82 1203 	smull	r1, r2, r2, r3
 8003176:	1712      	asrs	r2, r2, #28
 8003178:	17db      	asrs	r3, r3, #31
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	3301      	adds	r3, #1
 800317e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	17c8      	asrs	r0, r1, #31
 800318a:	460c      	mov	r4, r1
 800318c:	4605      	mov	r5, r0
 800318e:	ebb2 0804 	subs.w	r8, r2, r4
 8003192:	eb63 0905 	sbc.w	r9, r3, r5
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	4906      	ldr	r1, [pc, #24]	; (80031bc <UTILS_NanosecondsToTimespec+0x94>)
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	609a      	str	r2, [r3, #8]
    }
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031b8:	44b82fa1 	.word	0x44b82fa1
 80031bc:	3b9aca00 	.word	0x3b9aca00
 80031c0:	3b9aca00 	.word	0x3b9aca00
 80031c4:	00000000 	.word	0x00000000

080031c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b08e      	sub	sp, #56	; 0x38
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6278      	str	r0, [r7, #36]	; 0x24
 80031d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80031d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031d8:	2300      	movs	r3, #0
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80031ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ee:	4618      	mov	r0, r3
 80031f0:	f00c fa00 	bl	800f5f4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	17da      	asrs	r2, r3, #31
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	61fa      	str	r2, [r7, #28]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	000b      	movs	r3, r1
 8003208:	2200      	movs	r2, #0
 800320a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2200      	movs	r2, #0
 8003212:	461c      	mov	r4, r3
 8003214:	4615      	mov	r5, r2
 8003216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800321a:	1911      	adds	r1, r2, r4
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	416b      	adcs	r3, r5
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003226:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800322a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	f04f 0400 	mov.w	r4, #0
 8003236:	f04f 0500 	mov.w	r5, #0
 800323a:	015d      	lsls	r5, r3, #5
 800323c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003240:	0154      	lsls	r4, r2, #5
 8003242:	4622      	mov	r2, r4
 8003244:	462b      	mov	r3, r5
 8003246:	ebb2 0800 	subs.w	r8, r2, r0
 800324a:	eb63 0901 	sbc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800325a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800325e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	eb18 0a00 	adds.w	sl, r8, r0
 800326a:	eb49 0b01 	adc.w	fp, r9, r1
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800327a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800327e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003282:	ebb2 040a 	subs.w	r4, r2, sl
 8003286:	603c      	str	r4, [r7, #0]
 8003288:	eb63 030b 	sbc.w	r3, r3, fp
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003292:	4623      	mov	r3, r4
 8003294:	181b      	adds	r3, r3, r0
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	462b      	mov	r3, r5
 800329a:	eb41 0303 	adc.w	r3, r1, r3
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032a6:	f7ff ff3f 	bl	8003128 <UTILS_NanosecondsToTimespec>

    return 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	3738      	adds	r7, #56	; 0x38
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080032b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_MspInit+0x4c>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <HAL_MspInit+0x4c>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_MspInit+0x4c>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_MspInit+0x4c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_MspInit+0x4c>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e0:	6453      	str	r3, [r2, #68]	; 0x44
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_MspInit+0x4c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	210f      	movs	r1, #15
 80032f2:	f06f 0001 	mvn.w	r0, #1
 80032f6:	f001 fb41 	bl	800497c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800

08003308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08e      	sub	sp, #56	; 0x38
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003318:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_InitTick+0xe4>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	4a33      	ldr	r2, [pc, #204]	; (80033ec <HAL_InitTick+0xe4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6413      	str	r3, [r2, #64]	; 0x40
 8003324:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_InitTick+0xe4>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003330:	f107 0210 	add.w	r2, r7, #16
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f004 f91a 	bl	8007574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800334a:	f004 f8eb 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 800334e:	6378      	str	r0, [r7, #52]	; 0x34
 8003350:	e004      	b.n	800335c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003352:	f004 f8e7 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 8003356:	4603      	mov	r3, r0
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335e:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_InitTick+0xe8>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	0c9b      	lsrs	r3, r3, #18
 8003366:	3b01      	subs	r3, #1
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_InitTick+0xec>)
 800336c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003370:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_InitTick+0xec>)
 8003374:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003378:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800337a:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_InitTick+0xec>)
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <HAL_InitTick+0xec>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_InitTick+0xec>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_InitTick+0xec>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003392:	4818      	ldr	r0, [pc, #96]	; (80033f4 <HAL_InitTick+0xec>)
 8003394:	f004 fd48 	bl	8007e28 <HAL_TIM_Base_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800339e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11b      	bne.n	80033de <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80033a6:	4813      	ldr	r0, [pc, #76]	; (80033f4 <HAL_InitTick+0xec>)
 80033a8:	f004 fda0 	bl	8007eec <HAL_TIM_Base_Start_IT>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80033b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d111      	bne.n	80033de <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033ba:	201c      	movs	r0, #28
 80033bc:	f001 fafa 	bl	80049b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	d808      	bhi.n	80033d8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80033c6:	2200      	movs	r2, #0
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	201c      	movs	r0, #28
 80033cc:	f001 fad6 	bl	800497c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_InitTick+0xf0>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e002      	b.n	80033de <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3738      	adds	r7, #56	; 0x38
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	431bde83 	.word	0x431bde83
 80033f4:	2000bc84 	.word	0x2000bc84
 80033f8:	20000008 	.word	0x20000008

080033fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <NMI_Handler+0x4>

08003402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003406:	e7fe      	b.n	8003406 <HardFault_Handler+0x4>

08003408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800340c:	e7fe      	b.n	800340c <MemManage_Handler+0x4>

0800340e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003412:	e7fe      	b.n	8003412 <BusFault_Handler+0x4>

08003414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003418:	e7fe      	b.n	8003418 <UsageFault_Handler+0x4>

0800341a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <DMA1_Stream1_IRQHandler+0x10>)
 800342e:	f001 fc6f 	bl	8004d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	2000bdac 	.word	0x2000bdac

0800343c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <DMA1_Stream3_IRQHandler+0x10>)
 8003442:	f001 fc65 	bl	8004d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000be0c 	.word	0x2000be0c

08003450 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <CAN1_TX_IRQHandler+0x10>)
 8003456:	f000 ffe6 	bl	8004426 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20002e0c 	.word	0x20002e0c

08003464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <CAN1_RX0_IRQHandler+0x10>)
 800346a:	f000 ffdc 	bl	8004426 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20002e0c 	.word	0x20002e0c

08003478 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <CAN1_RX1_IRQHandler+0x10>)
 800347e:	f000 ffd2 	bl	8004426 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20002e0c 	.word	0x20002e0c

0800348c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <TIM2_IRQHandler+0x10>)
 8003492:	f004 fdfa 	bl	800808a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000bc84 	.word	0x2000bc84

080034a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <USART3_IRQHandler+0x10>)
 80034a6:	f005 fe97 	bl	80091d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2000bd24 	.word	0x2000bd24

080034b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80034b8:	4802      	ldr	r0, [pc, #8]	; (80034c4 <OTG_FS_IRQHandler+0x10>)
 80034ba:	f002 f9c4 	bl	8005846 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20011c98 	.word	0x20011c98

080034c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return 1;
 80034cc:	2301      	movs	r3, #1
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <_kill>:

int _kill(int pid, int sig)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034e2:	f01d fd1f 	bl	8020f24 <__errno>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2216      	movs	r2, #22
 80034ea:	601a      	str	r2, [r3, #0]
  return -1;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_exit>:

void _exit (int status)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ffe7 	bl	80034d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800350a:	e7fe      	b.n	800350a <_exit+0x12>

0800350c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e00a      	b.n	8003534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800351e:	f3af 8000 	nop.w
 8003522:	4601      	mov	r1, r0
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	60ba      	str	r2, [r7, #8]
 800352a:	b2ca      	uxtb	r2, r1
 800352c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	dbf0      	blt.n	800351e <_read+0x12>
  }

  return len;
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e009      	b.n	800356c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	60ba      	str	r2, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fc93 	bl	8002e8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	dbf1      	blt.n	8003558 <_write+0x12>
  }
  return len;
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_close>:

int _close(int file)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035a6:	605a      	str	r2, [r3, #4]
  return 0;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <_isatty>:

int _isatty(int file)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035be:	2301      	movs	r3, #1
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <_sbrk+0x5c>)
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <_sbrk+0x60>)
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <_sbrk+0x64>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <_sbrk+0x64>)
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <_sbrk+0x68>)
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <_sbrk+0x64>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d207      	bcs.n	8003628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003618:	f01d fc84 	bl	8020f24 <__errno>
 800361c:	4603      	mov	r3, r0
 800361e:	220c      	movs	r2, #12
 8003620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003626:	e009      	b.n	800363c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <_sbrk+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <_sbrk+0x64>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	4a05      	ldr	r2, [pc, #20]	; (800364c <_sbrk+0x64>)
 8003638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20080000 	.word	0x20080000
 8003648:	00000400 	.word	0x00000400
 800364c:	2000bcd4 	.word	0x2000bcd4
 8003650:	20017010 	.word	0x20017010

08003654 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SystemInit+0x20>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <SystemInit+0x20>)
 8003660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b096      	sub	sp, #88	; 0x58
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800368a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	615a      	str	r2, [r3, #20]
 800369c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	222c      	movs	r2, #44	; 0x2c
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f01d fba5 	bl	8020df4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036ac:	4a3f      	ldr	r2, [pc, #252]	; (80037ac <MX_TIM1_Init+0x134>)
 80036ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036d6:	4834      	ldr	r0, [pc, #208]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036d8:	f004 fc80 	bl	8007fdc <HAL_TIM_PWM_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80036e2:	f7ff fc7e 	bl	8002fe2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036f6:	4619      	mov	r1, r3
 80036f8:	482b      	ldr	r0, [pc, #172]	; (80037a8 <MX_TIM1_Init+0x130>)
 80036fa:	f005 fa1f 	bl	8008b3c <HAL_TIMEx_MasterConfigSynchronization>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003704:	f7ff fc6d 	bl	8002fe2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003708:	2360      	movs	r3, #96	; 0x60
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003710:	2300      	movs	r3, #0
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003714:	2300      	movs	r3, #0
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	4619      	mov	r1, r3
 800372c:	481e      	ldr	r0, [pc, #120]	; (80037a8 <MX_TIM1_Init+0x130>)
 800372e:	f004 fdcb 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003738:	f7ff fc53 	bl	8002fe2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800373c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003740:	2204      	movs	r2, #4
 8003742:	4619      	mov	r1, r3
 8003744:	4818      	ldr	r0, [pc, #96]	; (80037a8 <MX_TIM1_Init+0x130>)
 8003746:	f004 fdbf 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003750:	f7ff fc47 	bl	8002fe2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800376c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4807      	ldr	r0, [pc, #28]	; (80037a8 <MX_TIM1_Init+0x130>)
 800378a:	f005 fa65 	bl	8008c58 <HAL_TIMEx_ConfigBreakDeadTime>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8003794:	f7ff fc25 	bl	8002fe2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <MX_TIM1_Init+0x130>)
 800379a:	f000 f829 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 800379e:	bf00      	nop
 80037a0:	3758      	adds	r7, #88	; 0x58
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000bcd8 	.word	0x2000bcd8
 80037ac:	40010000 	.word	0x40010000

080037b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10b      	bne.n	80037da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_TIM_PWM_MspInit+0x3c>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_TIM_PWM_MspInit+0x3c>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6453      	str	r3, [r2, #68]	; 0x44
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_TIM_PWM_MspInit+0x3c>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a11      	ldr	r2, [pc, #68]	; (8003854 <HAL_TIM_MspPostInit+0x64>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d11c      	bne.n	800384c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_TIM_MspPostInit+0x68>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_TIM_MspPostInit+0x68>)
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_TIM_MspPostInit+0x68>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800382a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800382e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800383c:	2301      	movs	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	4619      	mov	r1, r3
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <HAL_TIM_MspPostInit+0x6c>)
 8003848:	f001 fcd8 	bl	80051fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800384c:	bf00      	nop
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40010000 	.word	0x40010000
 8003858:	40023800 	.word	0x40023800
 800385c:	40021000 	.word	0x40021000

08003860 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003864:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 8003866:	4a15      	ldr	r2, [pc, #84]	; (80038bc <MX_USART3_UART_Init+0x5c>)
 8003868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800386a:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 800386c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 8003886:	220c      	movs	r2, #12
 8003888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 8003898:	2200      	movs	r2, #0
 800389a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 800389e:	2200      	movs	r2, #0
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038a2:	4805      	ldr	r0, [pc, #20]	; (80038b8 <MX_USART3_UART_Init+0x58>)
 80038a4:	f005 fa74 	bl	8008d90 <HAL_UART_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038ae:	f7ff fb98 	bl	8002fe2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000bd24 	.word	0x2000bd24
 80038bc:	40004800 	.word	0x40004800

080038c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ae      	sub	sp, #184	; 0xb8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	2290      	movs	r2, #144	; 0x90
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f01d fa87 	bl	8020df4 <memset>
  if(uartHandle->Instance==USART3)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_UART_MspInit+0x184>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 80a4 	bne.w	8003a3a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038f8:	2300      	movs	r3, #0
 80038fa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fe69 	bl	80075d8 <HAL_RCCEx_PeriphCLKConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800390c:	f7ff fb69 	bl	8002fe2 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003910:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <HAL_UART_MspInit+0x188>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_UART_MspInit+0x188>)
 8003916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391a:	6413      	str	r3, [r2, #64]	; 0x40
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_UART_MspInit+0x188>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HAL_UART_MspInit+0x188>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_UART_MspInit+0x188>)
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	6313      	str	r3, [r2, #48]	; 0x30
 8003934:	4b44      	ldr	r3, [pc, #272]	; (8003a48 <HAL_UART_MspInit+0x188>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003940:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800395a:	2307      	movs	r3, #7
 800395c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003960:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003964:	4619      	mov	r1, r3
 8003966:	4839      	ldr	r0, [pc, #228]	; (8003a4c <HAL_UART_MspInit+0x18c>)
 8003968:	f001 fc48 	bl	80051fc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800396c:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_UART_MspInit+0x190>)
 800396e:	4a39      	ldr	r2, [pc, #228]	; (8003a54 <HAL_UART_MspInit+0x194>)
 8003970:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003972:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_UART_MspInit+0x190>)
 8003974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003978:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800397a:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <HAL_UART_MspInit+0x190>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_UART_MspInit+0x190>)
 8003982:	2200      	movs	r2, #0
 8003984:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_UART_MspInit+0x190>)
 8003988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_UART_MspInit+0x190>)
 8003990:	2200      	movs	r2, #0
 8003992:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_UART_MspInit+0x190>)
 8003996:	2200      	movs	r2, #0
 8003998:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800399a:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_UART_MspInit+0x190>)
 800399c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_UART_MspInit+0x190>)
 80039a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039aa:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <HAL_UART_MspInit+0x190>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039b0:	4827      	ldr	r0, [pc, #156]	; (8003a50 <HAL_UART_MspInit+0x190>)
 80039b2:	f001 f80d 	bl	80049d0 <HAL_DMA_Init>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80039bc:	f7ff fb11 	bl	8002fe2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <HAL_UART_MspInit+0x190>)
 80039c4:	675a      	str	r2, [r3, #116]	; 0x74
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_UART_MspInit+0x190>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80039cc:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039ce:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <HAL_UART_MspInit+0x19c>)
 80039d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039d8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039da:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039dc:	2240      	movs	r2, #64	; 0x40
 80039de:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039e6:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f4:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_UART_MspInit+0x198>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_UART_MspInit+0x198>)
 8003a02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a06:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_UART_MspInit+0x198>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003a0e:	4812      	ldr	r0, [pc, #72]	; (8003a58 <HAL_UART_MspInit+0x198>)
 8003a10:	f000 ffde 	bl	80049d0 <HAL_DMA_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003a1a:	f7ff fae2 	bl	8002fe2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <HAL_UART_MspInit+0x198>)
 8003a22:	671a      	str	r2, [r3, #112]	; 0x70
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <HAL_UART_MspInit+0x198>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2105      	movs	r1, #5
 8003a2e:	2027      	movs	r0, #39	; 0x27
 8003a30:	f000 ffa4 	bl	800497c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a34:	2027      	movs	r0, #39	; 0x27
 8003a36:	f000 ffbd 	bl	80049b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	37b8      	adds	r7, #184	; 0xb8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40004800 	.word	0x40004800
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	2000bdac 	.word	0x2000bdac
 8003a54:	40026028 	.word	0x40026028
 8003a58:	2000be0c 	.word	0x2000be0c
 8003a5c:	40026058 	.word	0x40026058

08003a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a64:	480d      	ldr	r0, [pc, #52]	; (8003a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a66:	490e      	ldr	r1, [pc, #56]	; (8003aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a68:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a6c:	e002      	b.n	8003a74 <LoopCopyDataInit>

08003a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a72:	3304      	adds	r3, #4

08003a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a78:	d3f9      	bcc.n	8003a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7a:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a7c:	4c0b      	ldr	r4, [pc, #44]	; (8003aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a80:	e001      	b.n	8003a86 <LoopFillZerobss>

08003a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a84:	3204      	adds	r2, #4

08003a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a88:	d3fb      	bcc.n	8003a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a8a:	f7ff fde3 	bl	8003654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a8e:	f01d fa4f 	bl	8020f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a92:	f7ff fa0f 	bl	8002eb4 <main>
  bx  lr    
 8003a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa0:	20000b0c 	.word	0x20000b0c
  ldr r2, =_sidata
 8003aa4:	08025fa0 	.word	0x08025fa0
  ldr r2, =_sbss
 8003aa8:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 8003aac:	20017010 	.word	0x20017010

08003ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ab0:	e7fe      	b.n	8003ab0 <ADC_IRQHandler>

08003ab2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab6:	2003      	movs	r0, #3
 8003ab8:	f000 ff55 	bl	8004966 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003abc:	200f      	movs	r0, #15
 8003abe:	f7ff fc23 	bl	8003308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac2:	f7ff fbf9 	bl	80032b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_IncTick+0x20>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_IncTick+0x24>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <HAL_IncTick+0x24>)
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	2000000c 	.word	0x2000000c
 8003af0:	2000be6c 	.word	0x2000be6c

08003af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return uwTick;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_GetTick+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	2000be6c 	.word	0x2000be6c

08003b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7ff ffee 	bl	8003af4 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b24:	d005      	beq.n	8003b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_Delay+0x44>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b32:	bf00      	nop
 8003b34:	f7ff ffde 	bl	8003af4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d8f7      	bhi.n	8003b34 <HAL_Delay+0x28>
  {
  }
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0ed      	b.n	8003d42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd ff6c 	bl	8001a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b88:	f7ff ffb4 	bl	8003af4 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b8e:	e012      	b.n	8003bb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b90:	f7ff ffb0 	bl	8003af4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d90b      	bls.n	8003bb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2205      	movs	r2, #5
 8003bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0c5      	b.n	8003d42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0e5      	beq.n	8003b90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0202 	bic.w	r2, r2, #2
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd4:	f7ff ff8e 	bl	8003af4 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bda:	e012      	b.n	8003c02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bdc:	f7ff ff8a 	bl	8003af4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b0a      	cmp	r3, #10
 8003be8:	d90b      	bls.n	8003c02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2205      	movs	r2, #5
 8003bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e09f      	b.n	8003d42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d108      	bne.n	8003c2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e007      	b.n	8003c3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7e5b      	ldrb	r3, [r3, #25]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d108      	bne.n	8003c54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e007      	b.n	8003c64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7e9b      	ldrb	r3, [r3, #26]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d108      	bne.n	8003c7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0220 	orr.w	r2, r2, #32
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e007      	b.n	8003c8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0220 	bic.w	r2, r2, #32
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7edb      	ldrb	r3, [r3, #27]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0210 	bic.w	r2, r2, #16
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e007      	b.n	8003cb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0210 	orr.w	r2, r2, #16
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7f1b      	ldrb	r3, [r3, #28]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d108      	bne.n	8003cd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e007      	b.n	8003ce2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0208 	bic.w	r2, r2, #8
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7f5b      	ldrb	r3, [r3, #29]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d108      	bne.n	8003cfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0204 	orr.w	r2, r2, #4
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e007      	b.n	8003d0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d003      	beq.n	8003d72 <HAL_CAN_ConfigFilter+0x26>
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f040 80c7 	bne.w	8003f00 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <HAL_CAN_ConfigFilter+0x1d0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d001      	beq.n	8003d80 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_CAN_ConfigFilter+0x1d4>)
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4a63      	ldr	r2, [pc, #396]	; (8003f20 <HAL_CAN_ConfigFilter+0x1d4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d111      	bne.n	8003dbc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d9e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	431a      	orrs	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d123      	bne.n	8003e2e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3248      	adds	r2, #72	; 0x48
 8003e0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	3348      	adds	r3, #72	; 0x48
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d122      	bne.n	8003e7c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3248      	adds	r2, #72	; 0x48
 8003e5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	3348      	adds	r3, #72	; 0x48
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e96:	e007      	b.n	8003ea8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ec2:	e007      	b.n	8003ed4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ef2:	f023 0201 	bic.w	r2, r3, #1
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e006      	b.n	8003f0e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40003400 	.word	0x40003400
 8003f20:	40006400 	.word	0x40006400

08003f24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d12e      	bne.n	8003f96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f50:	f7ff fdd0 	bl	8003af4 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f56:	e012      	b.n	8003f7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f58:	f7ff fdcc 	bl	8003af4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d90b      	bls.n	8003f7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e012      	b.n	8003fa4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e006      	b.n	8003fa4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d003      	beq.n	8003fd8 <HAL_CAN_AddTxMessage+0x2c>
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f040 80ad 	bne.w	8004132 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8095 	beq.w	8004122 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	0e1b      	lsrs	r3, r3, #24
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004002:	2201      	movs	r2, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	409a      	lsls	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10d      	bne.n	8004030 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	6809      	ldr	r1, [r1, #0]
 8004022:	431a      	orrs	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3318      	adds	r3, #24
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	440b      	add	r3, r1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e00f      	b.n	8004050 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800403a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004040:	68f9      	ldr	r1, [r7, #12]
 8004042:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004044:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	3318      	adds	r3, #24
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	440b      	add	r3, r1
 800404e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3318      	adds	r3, #24
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	440b      	add	r3, r1
 8004060:	3304      	adds	r3, #4
 8004062:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	7d1b      	ldrb	r3, [r3, #20]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d111      	bne.n	8004090 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3318      	adds	r3, #24
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	6811      	ldr	r1, [r2, #0]
 8004080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3318      	adds	r3, #24
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	440b      	add	r3, r1
 800408c:	3304      	adds	r3, #4
 800408e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3307      	adds	r3, #7
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	061a      	lsls	r2, r3, #24
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3306      	adds	r3, #6
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3305      	adds	r3, #5
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	4313      	orrs	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	3204      	adds	r2, #4
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	4610      	mov	r0, r2
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	6811      	ldr	r1, [r2, #0]
 80040b8:	ea43 0200 	orr.w	r2, r3, r0
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	440b      	add	r3, r1
 80040c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80040c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3303      	adds	r3, #3
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	061a      	lsls	r2, r3, #24
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3302      	adds	r3, #2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3301      	adds	r3, #1
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	4313      	orrs	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	4610      	mov	r0, r2
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6811      	ldr	r1, [r2, #0]
 80040ee:	ea43 0200 	orr.w	r2, r3, r0
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80040fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3318      	adds	r3, #24
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	4413      	add	r3, r2
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6811      	ldr	r1, [r2, #0]
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3318      	adds	r3, #24
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	440b      	add	r3, r1
 800411c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e00e      	b.n	8004140 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e006      	b.n	8004140 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3724      	adds	r7, #36	; 0x24
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800415e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004160:	7afb      	ldrb	r3, [r7, #11]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11d      	bne.n	80041a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d003      	beq.n	80041da <HAL_CAN_GetRxMessage+0x24>
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f040 80f3 	bne.w	80043c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10e      	bne.n	80041fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d116      	bne.n	800421c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0e7      	b.n	80043ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0d8      	b.n	80043ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	331b      	adds	r3, #27
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0204 	and.w	r2, r3, #4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10c      	bne.n	8004254 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	331b      	adds	r3, #27
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	4413      	add	r3, r2
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0d5b      	lsrs	r3, r3, #21
 800424a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e00b      	b.n	800426c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	331b      	adds	r3, #27
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4413      	add	r3, r2
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	331b      	adds	r3, #27
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4413      	add	r3, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0202 	and.w	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	331b      	adds	r3, #27
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 020f 	and.w	r2, r3, #15
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	331b      	adds	r3, #27
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	331b      	adds	r3, #27
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	3304      	adds	r3, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0a1a      	lsrs	r2, r3, #8
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0c1a      	lsrs	r2, r3, #16
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3302      	adds	r3, #2
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	4413      	add	r3, r2
 800431e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e1a      	lsrs	r2, r3, #24
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	3303      	adds	r3, #3
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4413      	add	r3, r2
 8004338:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	3304      	adds	r3, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4413      	add	r3, r2
 8004350:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	0a1a      	lsrs	r2, r3, #8
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3305      	adds	r3, #5
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4413      	add	r3, r2
 800436a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0c1a      	lsrs	r2, r3, #16
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	3306      	adds	r3, #6
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	0e1a      	lsrs	r2, r3, #24
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3307      	adds	r3, #7
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0220 	orr.w	r2, r2, #32
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e007      	b.n	80043bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0220 	orr.w	r2, r2, #32
 80043ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e006      	b.n	80043ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d002      	beq.n	80043f8 <HAL_CAN_ActivateNotification+0x1e>
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d109      	bne.n	800440c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6959      	ldr	r1, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e006      	b.n	800441a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08a      	sub	sp, #40	; 0x28
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d07c      	beq.n	8004566 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d023      	beq.n	80044be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2201      	movs	r2, #1
 800447c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fd fe61 	bl	8002150 <HAL_CAN_TxMailbox0CompleteCallback>
 800448e:	e016      	b.n	80044be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	e00c      	b.n	80044be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e002      	b.n	80044be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fd fe53 	bl	8002164 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d024      	beq.n	8004512 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fd fe4b 	bl	8002178 <HAL_CAN_TxMailbox1CompleteCallback>
 80044e2:	e016      	b.n	8004512 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
 80044f6:	e00c      	b.n	8004512 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	e002      	b.n	8004512 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fd fe3d 	bl	800218c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d024      	beq.n	8004566 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004524:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fd fe35 	bl	80021a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004536:	e016      	b.n	8004566 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	e00c      	b.n	8004566 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	e002      	b.n	8004566 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fd fe27 	bl	80021b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00c      	beq.n	800458a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004580:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2210      	movs	r2, #16
 8004588:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2208      	movs	r2, #8
 80045a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8f4 	bl	8004794 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fd fdff 	bl	80021c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00c      	beq.n	80045ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d006      	beq.n	8004610 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2208      	movs	r2, #8
 8004608:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8d6 	bl	80047bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8bd 	bl	80047a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2210      	movs	r2, #16
 8004648:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8c0 	bl	80047d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d006      	beq.n	8004672 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2208      	movs	r2, #8
 800466a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8b9 	bl	80047e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d07b      	beq.n	8004774 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d072      	beq.n	800476c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d043      	beq.n	800476c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d03e      	beq.n	800476c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046f4:	2b60      	cmp	r3, #96	; 0x60
 80046f6:	d02b      	beq.n	8004750 <HAL_CAN_IRQHandler+0x32a>
 80046f8:	2b60      	cmp	r3, #96	; 0x60
 80046fa:	d82e      	bhi.n	800475a <HAL_CAN_IRQHandler+0x334>
 80046fc:	2b50      	cmp	r3, #80	; 0x50
 80046fe:	d022      	beq.n	8004746 <HAL_CAN_IRQHandler+0x320>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d82a      	bhi.n	800475a <HAL_CAN_IRQHandler+0x334>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d019      	beq.n	800473c <HAL_CAN_IRQHandler+0x316>
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d826      	bhi.n	800475a <HAL_CAN_IRQHandler+0x334>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d010      	beq.n	8004732 <HAL_CAN_IRQHandler+0x30c>
 8004710:	2b30      	cmp	r3, #48	; 0x30
 8004712:	d822      	bhi.n	800475a <HAL_CAN_IRQHandler+0x334>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d002      	beq.n	800471e <HAL_CAN_IRQHandler+0x2f8>
 8004718:	2b20      	cmp	r3, #32
 800471a:	d005      	beq.n	8004728 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800471c:	e01d      	b.n	800475a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004726:	e019      	b.n	800475c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f043 0310 	orr.w	r3, r3, #16
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004730:	e014      	b.n	800475c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	f043 0320 	orr.w	r3, r3, #32
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800473a:	e00f      	b.n	800475c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004744:	e00a      	b.n	800475c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800474e:	e005      	b.n	800475c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004758:	e000      	b.n	800475c <HAL_CAN_IRQHandler+0x336>
            break;
 800475a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800476a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2204      	movs	r2, #4
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f836 	bl	80047f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800478c:	bf00      	nop
 800478e:	3728      	adds	r7, #40	; 0x28
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <__NVIC_SetPriorityGrouping+0x40>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004828:	4013      	ands	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	4313      	orrs	r3, r2
 8004838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483a:	4a04      	ldr	r2, [pc, #16]	; (800484c <__NVIC_SetPriorityGrouping+0x40>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	60d3      	str	r3, [r2, #12]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00
 8004850:	05fa0000 	.word	0x05fa0000

08004854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <__NVIC_GetPriorityGrouping+0x18>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0307 	and.w	r3, r3, #7
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db0b      	blt.n	800489a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4907      	ldr	r1, [pc, #28]	; (80048a8 <__NVIC_EnableIRQ+0x38>)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2001      	movs	r0, #1
 8004892:	fa00 f202 	lsl.w	r2, r0, r2
 8004896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000e100 	.word	0xe000e100

080048ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	; (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	; (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf28      	it	cs
 800491e:	2304      	movcs	r3, #4
 8004920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	2b06      	cmp	r3, #6
 8004928:	d902      	bls.n	8004930 <NVIC_EncodePriority+0x30>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b03      	subs	r3, #3
 800492e:	e000      	b.n	8004932 <NVIC_EncodePriority+0x32>
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	401a      	ands	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43d9      	mvns	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	4313      	orrs	r3, r2
         );
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ff4c 	bl	800480c <__NVIC_SetPriorityGrouping>
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800498e:	f7ff ff61 	bl	8004854 <__NVIC_GetPriorityGrouping>
 8004992:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f7ff ffb1 	bl	8004900 <NVIC_EncodePriority>
 800499e:	4602      	mov	r2, r0
 80049a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff80 	bl	80048ac <__NVIC_SetPriority>
}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff54 	bl	8004870 <__NVIC_EnableIRQ>
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049dc:	f7ff f88a 	bl	8003af4 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e099      	b.n	8004b20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0c:	e00f      	b.n	8004a2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a0e:	f7ff f871 	bl	8003af4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d908      	bls.n	8004a2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e078      	b.n	8004b20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e8      	bne.n	8004a0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <HAL_DMA_Init+0x158>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d107      	bne.n	8004a98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	4313      	orrs	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d117      	bne.n	8004af2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fb15 	bl	8005104 <DMA_CheckFifoParam>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004aee:	2301      	movs	r3, #1
 8004af0:	e016      	b.n	8004b20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 facc 	bl	8005098 <DMA_CalcBaseAndBitshift>
 8004b00:	4603      	mov	r3, r0
 8004b02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	223f      	movs	r2, #63	; 0x3f
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e010803f 	.word	0xe010803f

08004b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_DMA_Start_IT+0x26>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e048      	b.n	8004be4 <HAL_DMA_Start_IT+0xb8>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d137      	bne.n	8004bd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa5e 	bl	800503c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	223f      	movs	r2, #63	; 0x3f
 8004b86:	409a      	lsls	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0216 	orr.w	r2, r2, #22
 8004b9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004baa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0208 	orr.w	r2, r2, #8
 8004bc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e005      	b.n	8004be2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
 8004be0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bfa:	f7fe ff7b 	bl	8003af4 <HAL_GetTick>
 8004bfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d008      	beq.n	8004c1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e052      	b.n	8004cc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0216 	bic.w	r2, r2, #22
 8004c2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_DMA_Abort+0x62>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0208 	bic.w	r2, r2, #8
 8004c5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6e:	e013      	b.n	8004c98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c70:	f7fe ff40 	bl	8003af4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d90c      	bls.n	8004c98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2203      	movs	r2, #3
 8004c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e015      	b.n	8004cc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e4      	bne.n	8004c70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	223f      	movs	r2, #63	; 0x3f
 8004cac:	409a      	lsls	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d004      	beq.n	8004cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e00c      	b.n	8004d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2205      	movs	r2, #5
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004d1c:	4b8e      	ldr	r3, [pc, #568]	; (8004f58 <HAL_DMA_IRQHandler+0x248>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a8e      	ldr	r2, [pc, #568]	; (8004f5c <HAL_DMA_IRQHandler+0x24c>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0a9b      	lsrs	r3, r3, #10
 8004d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01a      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0204 	bic.w	r2, r2, #4
 8004d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	2208      	movs	r2, #8
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	2201      	movs	r2, #1
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	2201      	movs	r2, #1
 8004da0:	409a      	lsls	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f043 0202 	orr.w	r2, r3, #2
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db6:	2204      	movs	r2, #4
 8004db8:	409a      	lsls	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d012      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f043 0204 	orr.w	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dec:	2210      	movs	r2, #16
 8004dee:	409a      	lsls	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d043      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d03c      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d018      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d108      	bne.n	8004e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d024      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
 8004e3e:	e01f      	b.n	8004e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
 8004e50:	e016      	b.n	8004e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d107      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0208 	bic.w	r2, r2, #8
 8004e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	2220      	movs	r2, #32
 8004e86:	409a      	lsls	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 808f 	beq.w	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8087 	beq.w	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d136      	bne.n	8004f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0216 	bic.w	r2, r2, #22
 8004ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <HAL_DMA_IRQHandler+0x1da>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0208 	bic.w	r2, r2, #8
 8004ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	223f      	movs	r2, #63	; 0x3f
 8004f00:	409a      	lsls	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d07e      	beq.n	800501c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
        }
        return;
 8004f26:	e079      	b.n	800501c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01d      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d031      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
 8004f54:	e02c      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
 8004f56:	bf00      	nop
 8004f58:	20000004 	.word	0x20000004
 8004f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	e01e      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0210 	bic.w	r2, r2, #16
 8004f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d032      	beq.n	800501e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d022      	beq.n	800500a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d307      	bcc.n	8004ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f2      	bne.n	8004fdc <HAL_DMA_IRQHandler+0x2cc>
 8004ff6:	e000      	b.n	8004ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
 800501a:	e000      	b.n	800501e <HAL_DMA_IRQHandler+0x30e>
        return;
 800501c:	bf00      	nop
    }
  }
}
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d108      	bne.n	800507c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800507a:	e007      	b.n	800508c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	3b10      	subs	r3, #16
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <DMA_CalcBaseAndBitshift+0x60>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <DMA_CalcBaseAndBitshift+0x64>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d908      	bls.n	80050d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <DMA_CalcBaseAndBitshift+0x68>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	1d1a      	adds	r2, r3, #4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	; 0x58
 80050d6:	e006      	b.n	80050e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <DMA_CalcBaseAndBitshift+0x68>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	aaaaaaab 	.word	0xaaaaaaab
 80050fc:	08024608 	.word	0x08024608
 8005100:	fffffc00 	.word	0xfffffc00

08005104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d11f      	bne.n	800515e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d856      	bhi.n	80051d2 <DMA_CheckFifoParam+0xce>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <DMA_CheckFifoParam+0x28>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	0800513d 	.word	0x0800513d
 8005130:	0800514f 	.word	0x0800514f
 8005134:	0800513d 	.word	0x0800513d
 8005138:	080051d3 	.word	0x080051d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d046      	beq.n	80051d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800514c:	e043      	b.n	80051d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005156:	d140      	bne.n	80051da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800515c:	e03d      	b.n	80051da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005166:	d121      	bne.n	80051ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d837      	bhi.n	80051de <DMA_CheckFifoParam+0xda>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <DMA_CheckFifoParam+0x70>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005185 	.word	0x08005185
 8005178:	0800518b 	.word	0x0800518b
 800517c:	08005185 	.word	0x08005185
 8005180:	0800519d 	.word	0x0800519d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e030      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d025      	beq.n	80051e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519a:	e022      	b.n	80051e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051a4:	d11f      	bne.n	80051e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051aa:	e01c      	b.n	80051e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d903      	bls.n	80051ba <DMA_CheckFifoParam+0xb6>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d003      	beq.n	80051c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051b8:	e018      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
      break;
 80051be:	e015      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00e      	beq.n	80051ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
      break;
 80051d0:	e00b      	b.n	80051ea <DMA_CheckFifoParam+0xe6>
      break;
 80051d2:	bf00      	nop
 80051d4:	e00a      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      break;
 80051d6:	bf00      	nop
 80051d8:	e008      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      break;
 80051da:	bf00      	nop
 80051dc:	e006      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      break;
 80051de:	bf00      	nop
 80051e0:	e004      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      break;
 80051e2:	bf00      	nop
 80051e4:	e002      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      break;   
 80051e6:	bf00      	nop
 80051e8:	e000      	b.n	80051ec <DMA_CheckFifoParam+0xe8>
      break;
 80051ea:	bf00      	nop
    }
  } 
  
  return status; 
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e175      	b.n	8005508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800521c:	2201      	movs	r2, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	f040 8164 	bne.w	8005502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d005      	beq.n	8005252 <HAL_GPIO_Init+0x56>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d130      	bne.n	80052b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	2203      	movs	r2, #3
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 0201 	and.w	r2, r3, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d017      	beq.n	80052f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	2203      	movs	r2, #3
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d123      	bne.n	8005344 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	08da      	lsrs	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3208      	adds	r2, #8
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	220f      	movs	r2, #15
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	08da      	lsrs	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3208      	adds	r2, #8
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0203 	and.w	r2, r3, #3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80be 	beq.w	8005502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_GPIO_Init+0x324>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_GPIO_Init+0x324>)
 800538c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005390:	6453      	str	r3, [r2, #68]	; 0x44
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <HAL_GPIO_Init+0x324>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800539e:	4a61      	ldr	r2, [pc, #388]	; (8005524 <HAL_GPIO_Init+0x328>)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	220f      	movs	r2, #15
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a58      	ldr	r2, [pc, #352]	; (8005528 <HAL_GPIO_Init+0x32c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d037      	beq.n	800543a <HAL_GPIO_Init+0x23e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a57      	ldr	r2, [pc, #348]	; (800552c <HAL_GPIO_Init+0x330>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_GPIO_Init+0x23a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_GPIO_Init+0x334>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02b      	beq.n	8005432 <HAL_GPIO_Init+0x236>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a55      	ldr	r2, [pc, #340]	; (8005534 <HAL_GPIO_Init+0x338>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d025      	beq.n	800542e <HAL_GPIO_Init+0x232>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a54      	ldr	r2, [pc, #336]	; (8005538 <HAL_GPIO_Init+0x33c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <HAL_GPIO_Init+0x22e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a53      	ldr	r2, [pc, #332]	; (800553c <HAL_GPIO_Init+0x340>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d019      	beq.n	8005426 <HAL_GPIO_Init+0x22a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a52      	ldr	r2, [pc, #328]	; (8005540 <HAL_GPIO_Init+0x344>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_GPIO_Init+0x226>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a51      	ldr	r2, [pc, #324]	; (8005544 <HAL_GPIO_Init+0x348>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00d      	beq.n	800541e <HAL_GPIO_Init+0x222>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a50      	ldr	r2, [pc, #320]	; (8005548 <HAL_GPIO_Init+0x34c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <HAL_GPIO_Init+0x21e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a4f      	ldr	r2, [pc, #316]	; (800554c <HAL_GPIO_Init+0x350>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <HAL_GPIO_Init+0x21a>
 8005412:	2309      	movs	r3, #9
 8005414:	e012      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005416:	230a      	movs	r3, #10
 8005418:	e010      	b.n	800543c <HAL_GPIO_Init+0x240>
 800541a:	2308      	movs	r3, #8
 800541c:	e00e      	b.n	800543c <HAL_GPIO_Init+0x240>
 800541e:	2307      	movs	r3, #7
 8005420:	e00c      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005422:	2306      	movs	r3, #6
 8005424:	e00a      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005426:	2305      	movs	r3, #5
 8005428:	e008      	b.n	800543c <HAL_GPIO_Init+0x240>
 800542a:	2304      	movs	r3, #4
 800542c:	e006      	b.n	800543c <HAL_GPIO_Init+0x240>
 800542e:	2303      	movs	r3, #3
 8005430:	e004      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005432:	2302      	movs	r3, #2
 8005434:	e002      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_GPIO_Init+0x240>
 800543a:	2300      	movs	r3, #0
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f002 0203 	and.w	r2, r2, #3
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	4093      	lsls	r3, r2
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800544c:	4935      	ldr	r1, [pc, #212]	; (8005524 <HAL_GPIO_Init+0x328>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3302      	adds	r3, #2
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800545a:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <HAL_GPIO_Init+0x354>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_GPIO_Init+0x354>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005484:	4b32      	ldr	r3, [pc, #200]	; (8005550 <HAL_GPIO_Init+0x354>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054d2:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	f67f ae86 	bls.w	800521c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	40013800 	.word	0x40013800
 8005528:	40020000 	.word	0x40020000
 800552c:	40020400 	.word	0x40020400
 8005530:	40020800 	.word	0x40020800
 8005534:	40020c00 	.word	0x40020c00
 8005538:	40021000 	.word	0x40021000
 800553c:	40021400 	.word	0x40021400
 8005540:	40021800 	.word	0x40021800
 8005544:	40021c00 	.word	0x40021c00
 8005548:	40022000 	.word	0x40022000
 800554c:	40022400 	.word	0x40022400
 8005550:	40013c00 	.word	0x40013c00

08005554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	807b      	strh	r3, [r7, #2]
 8005560:	4613      	mov	r3, r2
 8005562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005564:	787b      	ldrb	r3, [r7, #1]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800556a:	887a      	ldrh	r2, [r7, #2]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005570:	e003      	b.n	800557a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	041a      	lsls	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	619a      	str	r2, [r3, #24]
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005598:	887a      	ldrh	r2, [r7, #2]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4013      	ands	r3, r2
 800559e:	041a      	lsls	r2, r3, #16
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	43d9      	mvns	r1, r3
 80055a4:	887b      	ldrh	r3, [r7, #2]
 80055a6:	400b      	ands	r3, r1
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	619a      	str	r2, [r3, #24]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055bc:	b08f      	sub	sp, #60	; 0x3c
 80055be:	af0a      	add	r7, sp, #40	; 0x28
 80055c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e116      	b.n	80057fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f00b fbda 	bl	8010da0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2203      	movs	r2, #3
 80055f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f005 f8ef 	bl	800a7ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	687e      	ldr	r6, [r7, #4]
 8005618:	466d      	mov	r5, sp
 800561a:	f106 0410 	add.w	r4, r6, #16
 800561e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800562a:	e885 0003 	stmia.w	r5, {r0, r1}
 800562e:	1d33      	adds	r3, r6, #4
 8005630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005632:	6838      	ldr	r0, [r7, #0]
 8005634:	f004 ffd0 	bl	800a5d8 <USB_CoreInit>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0d7      	b.n	80057fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f005 f8dd 	bl	800a810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e04a      	b.n	80056f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	333d      	adds	r3, #61	; 0x3d
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	333c      	adds	r3, #60	; 0x3c
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	b298      	uxth	r0, r3
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3344      	adds	r3, #68	; 0x44
 8005698:	4602      	mov	r2, r0
 800569a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3340      	adds	r3, #64	; 0x40
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056b0:	7bfa      	ldrb	r2, [r7, #15]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	3348      	adds	r3, #72	; 0x48
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	334c      	adds	r3, #76	; 0x4c
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056d8:	7bfa      	ldrb	r2, [r7, #15]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	3354      	adds	r3, #84	; 0x54
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	3301      	adds	r3, #1
 80056f0:	73fb      	strb	r3, [r7, #15]
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d3af      	bcc.n	800565c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e044      	b.n	800578c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	3301      	adds	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d3b5      	bcc.n	8005702 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	687e      	ldr	r6, [r7, #4]
 800579e:	466d      	mov	r5, sp
 80057a0:	f106 0410 	add.w	r4, r6, #16
 80057a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80057b4:	1d33      	adds	r3, r6, #4
 80057b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057b8:	6838      	ldr	r0, [r7, #0]
 80057ba:	f005 f875 	bl	800a8a8 <USB_DevInit>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e014      	b.n	80057fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d102      	bne.n	80057ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 f97b 	bl	8006ae4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f006 f9c3 	bl	800bb7e <USB_DevDisconnect>

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005802 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_PCD_Start+0x16>
 8005814:	2302      	movs	r3, #2
 8005816:	e012      	b.n	800583e <HAL_PCD_Start+0x3c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f004 ffd1 	bl	800a7cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f006 f984 	bl	800bb3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005846:	b590      	push	{r4, r7, lr}
 8005848:	b08d      	sub	sp, #52	; 0x34
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f006 fa42 	bl	800bce6 <USB_GetMode>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 84b7 	bne.w	80061d8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f006 f9a6 	bl	800bbc0 <USB_ReadInterrupts>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 84ad 	beq.w	80061d6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f006 f993 	bl	800bbc0 <USB_ReadInterrupts>
 800589a:	4603      	mov	r3, r0
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d107      	bne.n	80058b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f002 0202 	and.w	r2, r2, #2
 80058b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f006 f981 	bl	800bbc0 <USB_ReadInterrupts>
 80058be:	4603      	mov	r3, r0
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d161      	bne.n	800598c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0210 	bic.w	r2, r2, #16
 80058d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	3304      	adds	r3, #4
 80058f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	0c5b      	lsrs	r3, r3, #17
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	2b02      	cmp	r3, #2
 8005902:	d124      	bne.n	800594e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d035      	beq.n	800597c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	091b      	lsrs	r3, r3, #4
 8005918:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800591a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800591e:	b29b      	uxth	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	6a38      	ldr	r0, [r7, #32]
 8005924:	f005 ffb8 	bl	800b898 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005934:	441a      	add	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6a1a      	ldr	r2, [r3, #32]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005946:	441a      	add	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	621a      	str	r2, [r3, #32]
 800594c:	e016      	b.n	800597c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	0c5b      	lsrs	r3, r3, #17
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	2b06      	cmp	r3, #6
 8005958:	d110      	bne.n	800597c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005960:	2208      	movs	r2, #8
 8005962:	4619      	mov	r1, r3
 8005964:	6a38      	ldr	r0, [r7, #32]
 8005966:	f005 ff97 	bl	800b898 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	6a1a      	ldr	r2, [r3, #32]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005976:	441a      	add	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0210 	orr.w	r2, r2, #16
 800598a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f006 f915 	bl	800bbc0 <USB_ReadInterrupts>
 8005996:	4603      	mov	r3, r0
 8005998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800599c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059a0:	f040 80a7 	bne.w	8005af2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f006 f91a 	bl	800bbe6 <USB_ReadDevAllOutEpInterrupt>
 80059b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059b4:	e099      	b.n	8005aea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 808e 	beq.w	8005ade <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f006 f93e 	bl	800bc4e <USB_ReadDevOutEPInterrupt>
 80059d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	2301      	movs	r3, #1
 80059ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fef0 	bl	80067d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2308      	movs	r3, #8
 8005a12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 ffc6 	bl	80069a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	461a      	mov	r2, r3
 8005a34:	2310      	movs	r3, #16
 8005a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d030      	beq.n	8005aa4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d109      	bne.n	8005a62 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a60:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4413      	add	r3, r2
 8005a74:	3304      	adds	r3, #4
 8005a76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	78db      	ldrb	r3, [r3, #3]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d108      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2200      	movs	r2, #0
 8005a84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f00b faab 	bl	8010fe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d008      	beq.n	8005ac0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	2320      	movs	r3, #32
 8005abe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005adc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f af62 	bne.w	80059b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f006 f862 	bl	800bbc0 <USB_ReadInterrupts>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b06:	f040 80db 	bne.w	8005cc0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f006 f883 	bl	800bc1a <USB_ReadDevAllInEpInterrupt>
 8005b14:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b1a:	e0cd      	b.n	8005cb8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80c2 	beq.w	8005cac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f006 f8a9 	bl	800bc8a <USB_ReadDevInEPInterrupt>
 8005b38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d057      	beq.n	8005bf4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b64:	4013      	ands	r3, r2
 8005b66:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	461a      	mov	r2, r3
 8005b76:	2301      	movs	r3, #1
 8005b78:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d132      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	334c      	adds	r3, #76	; 0x4c
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4403      	add	r3, r0
 8005ba2:	3348      	adds	r3, #72	; 0x48
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4419      	add	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4403      	add	r3, r0
 8005bb6:	334c      	adds	r3, #76	; 0x4c
 8005bb8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d113      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x3a2>
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	3354      	adds	r3, #84	; 0x54
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005be0:	461a      	mov	r2, r3
 8005be2:	2101      	movs	r1, #1
 8005be4:	f006 f8b2 	bl	800bd4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f00b f975 	bl	8010ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	2310      	movs	r3, #16
 8005c2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d023      	beq.n	8005c9a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c54:	6a38      	ldr	r0, [r7, #32]
 8005c56:	f004 ff85 	bl	800ab64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	3338      	adds	r3, #56	; 0x38
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	78db      	ldrb	r3, [r3, #3]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d108      	bne.n	8005c88 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f00b f9c2 	bl	801100c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	461a      	mov	r2, r3
 8005c96:	2302      	movs	r3, #2
 8005c98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fd08 	bl	80066bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	3301      	adds	r3, #1
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f47f af2e 	bne.w	8005b1c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f005 ff7b 	bl	800bbc0 <USB_ReadInterrupts>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd4:	d122      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d108      	bne.n	8005d06 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f00b fb3c 	bl	801137c <HAL_PCDEx_LPM_Callback>
 8005d04:	e002      	b.n	8005d0c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f00b f960 	bl	8010fcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f005 ff4d 	bl	800bbc0 <USB_ReadInterrupts>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d30:	d112      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d102      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f00b f91c 	bl	8010f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f005 ff2f 	bl	800bbc0 <USB_ReadInterrupts>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d6c:	d121      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005d7c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d111      	bne.n	8005dac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	089b      	lsrs	r3, r3, #2
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005da2:	2101      	movs	r1, #1
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f00b fae9 	bl	801137c <HAL_PCDEx_LPM_Callback>
 8005daa:	e002      	b.n	8005db2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f00b f8e7 	bl	8010f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f005 ff02 	bl	800bbc0 <USB_ReadInterrupts>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc6:	f040 80b7 	bne.w	8005f38 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2110      	movs	r1, #16
 8005de4:	4618      	mov	r0, r3
 8005de6:	f004 febd 	bl	800ab64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dee:	e046      	b.n	8005e7e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d3b3      	bcc.n	8005df0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d016      	beq.n	8005ed2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb4:	f043 030b 	orr.w	r3, r3, #11
 8005eb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eca:	f043 030b 	orr.w	r3, r3, #11
 8005ece:	6453      	str	r3, [r2, #68]	; 0x44
 8005ed0:	e015      	b.n	8005efe <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f242 032b 	movw	r3, #8235	; 0x202b
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef8:	f043 030b 	orr.w	r3, r3, #11
 8005efc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f22:	461a      	mov	r2, r3
 8005f24:	f005 ff12 	bl	800bd4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f005 fe3f 	bl	800bbc0 <USB_ReadInterrupts>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4c:	d124      	bne.n	8005f98 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f005 fed6 	bl	800bd04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f004 fe7e 	bl	800ac5e <USB_GetDevSpeed>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681c      	ldr	r4, [r3, #0]
 8005f6e:	f001 facd 	bl	800750c <HAL_RCC_GetHCLKFreq>
 8005f72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f004 fb83 	bl	800a688 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f00a ffd3 	bl	8010f2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f005 fe0f 	bl	800bbc0 <USB_ReadInterrupts>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d10a      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f00a ffb0 	bl	8010f12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 0208 	and.w	r2, r2, #8
 8005fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f005 fdfa 	bl	800bbc0 <USB_ReadInterrupts>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d122      	bne.n	800601c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe6:	e014      	b.n	8006012 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fb27 	bl	800665a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	3301      	adds	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006018:	429a      	cmp	r2, r3
 800601a:	d3e5      	bcc.n	8005fe8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f005 fdcd 	bl	800bbc0 <USB_ReadInterrupts>
 8006026:	4603      	mov	r3, r0
 8006028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800602c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006030:	d13b      	bne.n	80060aa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006032:	2301      	movs	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
 8006036:	e02b      	b.n	8006090 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	3340      	adds	r3, #64	; 0x40
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d115      	bne.n	800608a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800605e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006060:	2b00      	cmp	r3, #0
 8006062:	da12      	bge.n	800608a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	333f      	adds	r3, #63	; 0x3f
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006080:	b2db      	uxtb	r3, r3
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fae8 	bl	800665a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	3301      	adds	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006096:	429a      	cmp	r2, r3
 8006098:	d3ce      	bcc.n	8006038 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80060a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f005 fd86 	bl	800bbc0 <USB_ReadInterrupts>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060be:	d155      	bne.n	800616c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060c0:	2301      	movs	r3, #1
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
 80060c4:	e045      	b.n	8006152 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	4613      	mov	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d12e      	bne.n	800614c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	da2b      	bge.n	800614c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006100:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006104:	429a      	cmp	r2, r3
 8006106:	d121      	bne.n	800614c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006148:	6053      	str	r3, [r2, #4]
            break;
 800614a:	e007      	b.n	800615c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	3301      	adds	r3, #1
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006158:	429a      	cmp	r2, r3
 800615a:	d3b4      	bcc.n	80060c6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800616a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f005 fd25 	bl	800bbc0 <USB_ReadInterrupts>
 8006176:	4603      	mov	r3, r0
 8006178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d10a      	bne.n	8006198 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f00a ff54 	bl	8011030 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695a      	ldr	r2, [r3, #20]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f005 fd0f 	bl	800bbc0 <USB_ReadInterrupts>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d115      	bne.n	80061d8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f00a ff44 	bl	801104c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
 80061d4:	e000      	b.n	80061d8 <HAL_PCD_IRQHandler+0x992>
      return;
 80061d6:	bf00      	nop
    }
  }
}
 80061d8:	3734      	adds	r7, #52	; 0x34
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}

080061de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_PCD_SetAddress+0x1a>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e013      	b.n	8006220 <HAL_PCD_SetAddress+0x42>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f005 fc6d 	bl	800baf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	4608      	mov	r0, r1
 8006232:	4611      	mov	r1, r2
 8006234:	461a      	mov	r2, r3
 8006236:	4603      	mov	r3, r0
 8006238:	70fb      	strb	r3, [r7, #3]
 800623a:	460b      	mov	r3, r1
 800623c:	803b      	strh	r3, [r7, #0]
 800623e:	4613      	mov	r3, r2
 8006240:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	da0f      	bge.n	800626e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	4613      	mov	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	3338      	adds	r3, #56	; 0x38
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	3304      	adds	r3, #4
 8006264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	705a      	strb	r2, [r3, #1]
 800626c:	e00f      	b.n	800628e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 020f 	and.w	r2, r3, #15
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800629a:	883a      	ldrh	r2, [r7, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	78ba      	ldrb	r2, [r7, #2]
 80062a4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d102      	bne.n	80062c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_PCD_EP_Open+0xaa>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e00e      	b.n	80062f0 <HAL_PCD_EP_Open+0xc8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f004 fce1 	bl	800aca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006308:	2b00      	cmp	r3, #0
 800630a:	da0f      	bge.n	800632c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	3338      	adds	r3, #56	; 0x38
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	3304      	adds	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	705a      	strb	r2, [r3, #1]
 800632a:	e00f      	b.n	800634c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_PCD_EP_Close+0x6e>
 8006362:	2302      	movs	r3, #2
 8006364:	e00e      	b.n	8006384 <HAL_PCD_EP_Close+0x8c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	4618      	mov	r0, r3
 8006376:	f004 fd1f 	bl	800adb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	460b      	mov	r3, r1
 800639a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	3304      	adds	r3, #4
 80063b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2200      	movs	r2, #0
 80063c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d102      	bne.n	80063e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6979      	ldr	r1, [r7, #20]
 8006400:	f005 f806 	bl	800b410 <USB_EP0StartXfer>
 8006404:	e008      	b.n	8006418 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	6979      	ldr	r1, [r7, #20]
 8006414:	f004 fdac 	bl	800af70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	f003 020f 	and.w	r2, r3, #15
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006444:	681b      	ldr	r3, [r3, #0]
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	460b      	mov	r3, r1
 8006460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	4613      	mov	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	3338      	adds	r3, #56	; 0x38
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	3304      	adds	r3, #4
 8006478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2200      	movs	r2, #0
 800648a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2201      	movs	r2, #1
 8006490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	b2da      	uxtb	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d102      	bne.n	80064ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	6979      	ldr	r1, [r7, #20]
 80064c4:	f004 ffa4 	bl	800b410 <USB_EP0StartXfer>
 80064c8:	e008      	b.n	80064dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	f004 fd4a 	bl	800af70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	f003 020f 	and.w	r2, r3, #15
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d901      	bls.n	8006504 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e050      	b.n	80065a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006508:	2b00      	cmp	r3, #0
 800650a:	da0f      	bge.n	800652c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	3338      	adds	r3, #56	; 0x38
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	3304      	adds	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	705a      	strb	r2, [r3, #1]
 800652a:	e00d      	b.n	8006548 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	3304      	adds	r3, #4
 8006540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	b2da      	uxtb	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_PCD_EP_SetStall+0x82>
 8006564:	2302      	movs	r3, #2
 8006566:	e01e      	b.n	80065a6 <HAL_PCD_EP_SetStall+0xc0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68f9      	ldr	r1, [r7, #12]
 8006576:	4618      	mov	r0, r3
 8006578:	f005 f9e6 	bl	800b948 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	b2d9      	uxtb	r1, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006596:	461a      	mov	r2, r3
 8006598:	f005 fbd8 	bl	800bd4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d901      	bls.n	80065cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e042      	b.n	8006652 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	da0f      	bge.n	80065f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 020f 	and.w	r2, r3, #15
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	3338      	adds	r3, #56	; 0x38
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	3304      	adds	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	705a      	strb	r2, [r3, #1]
 80065f2:	e00f      	b.n	8006614 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 020f 	and.w	r2, r3, #15
 80065fa:	4613      	mov	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_PCD_EP_ClrStall+0x86>
 8006630:	2302      	movs	r3, #2
 8006632:	e00e      	b.n	8006652 <HAL_PCD_EP_ClrStall+0xa4>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	4618      	mov	r0, r3
 8006644:	f005 f9ee 	bl	800ba24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da0c      	bge.n	8006688 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	3338      	adds	r3, #56	; 0x38
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4413      	add	r3, r2
 8006682:	3304      	adds	r3, #4
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e00c      	b.n	80066a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f005 f80d 	bl	800b6c8 <USB_EPStopXfer>
 80066ae:	4603      	mov	r3, r0
 80066b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066b2:	7afb      	ldrb	r3, [r7, #11]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	3338      	adds	r3, #56	; 0x38
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	3304      	adds	r3, #4
 80066e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1a      	ldr	r2, [r3, #32]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d901      	bls.n	80066f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e06c      	b.n	80067ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	429a      	cmp	r2, r3
 8006708:	d902      	bls.n	8006710 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	3303      	adds	r3, #3
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006718:	e02b      	b.n	8006772 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	429a      	cmp	r2, r3
 800672e:	d902      	bls.n	8006736 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3303      	adds	r3, #3
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6919      	ldr	r1, [r3, #16]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800674e:	b2db      	uxtb	r3, r3
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4603      	mov	r3, r0
 8006754:	6978      	ldr	r0, [r7, #20]
 8006756:	f005 f861 	bl	800b81c <USB_WritePacket>

    ep->xfer_buff  += len;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	441a      	add	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	429a      	cmp	r2, r3
 8006786:	d809      	bhi.n	800679c <PCD_WriteEmptyTxFifo+0xe0>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1a      	ldr	r2, [r3, #32]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006790:	429a      	cmp	r2, r3
 8006792:	d203      	bcs.n	800679c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1be      	bne.n	800671a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d811      	bhi.n	80067cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	2201      	movs	r2, #1
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	6939      	ldr	r1, [r7, #16]
 80067c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c8:	4013      	ands	r3, r2
 80067ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	333c      	adds	r3, #60	; 0x3c
 80067f0:	3304      	adds	r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d17b      	bne.n	8006906 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d015      	beq.n	8006844 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4a61      	ldr	r2, [pc, #388]	; (80069a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	f240 80b9 	bls.w	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80b3 	beq.w	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	461a      	mov	r2, r3
 800683c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006840:	6093      	str	r3, [r2, #8]
 8006842:	e0a7      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	2320      	movs	r3, #32
 800685e:	6093      	str	r3, [r2, #8]
 8006860:	e098      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 8093 	bne.w	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d90f      	bls.n	8006896 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006892:	6093      	str	r3, [r2, #8]
 8006894:	e07e      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	0159      	lsls	r1, r3, #5
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	440b      	add	r3, r1
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d114      	bne.n	80068f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068e0:	461a      	mov	r2, r3
 80068e2:	2101      	movs	r1, #1
 80068e4:	f005 fa32 	bl	800bd4c <USB_EP0_OutStart>
 80068e8:	e006      	b.n	80068f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f00a fad2 	bl	8010ea8 <HAL_PCD_DataOutStageCallback>
 8006904:	e046      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4a26      	ldr	r2, [pc, #152]	; (80069a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d124      	bne.n	8006958 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006924:	461a      	mov	r2, r3
 8006926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692a:	6093      	str	r3, [r2, #8]
 800692c:	e032      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	2320      	movs	r3, #32
 8006948:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f00a faa9 	bl	8010ea8 <HAL_PCD_DataOutStageCallback>
 8006956:	e01d      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d114      	bne.n	8006988 <PCD_EP_OutXfrComplete_int+0x1b0>
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	4613      	mov	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d108      	bne.n	8006988 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006980:	461a      	mov	r2, r3
 8006982:	2100      	movs	r1, #0
 8006984:	f005 f9e2 	bl	800bd4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f00a fa8a 	bl	8010ea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	4f54300a 	.word	0x4f54300a
 80069a4:	4f54310a 	.word	0x4f54310a

080069a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	333c      	adds	r3, #60	; 0x3c
 80069c0:	3304      	adds	r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <PCD_EP_OutSetupPacket_int+0x88>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d90e      	bls.n	80069fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	461a      	mov	r2, r3
 80069f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f00a fa41 	bl	8010e84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d90c      	bls.n	8006a24 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d108      	bne.n	8006a24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2101      	movs	r1, #1
 8006a20:	f005 f994 	bl	800bd4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	4f54300a 	.word	0x4f54300a

08006a34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
 8006a40:	4613      	mov	r3, r2
 8006a42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d107      	bne.n	8006a62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a52:	883b      	ldrh	r3, [r7, #0]
 8006a54:	0419      	lsls	r1, r3, #16
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a60:	e028      	b.n	8006ab4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	e00d      	b.n	8006a92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	3340      	adds	r3, #64	; 0x40
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d3ec      	bcc.n	8006a76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a9c:	883b      	ldrh	r3, [r7, #0]
 8006a9e:	0418      	lsls	r0, r3, #16
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	4302      	orrs	r2, r0
 8006aac:	3340      	adds	r3, #64	; 0x40
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	887a      	ldrh	r2, [r7, #2]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_PCDEx_ActivateLPM+0x44>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	10000003 	.word	0x10000003

08006b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	4a22      	ldr	r2, [pc, #136]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b40:	6413      	str	r3, [r2, #64]	; 0x40
 8006b42:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b5a:	f7fc ffcb 	bl	8003af4 <HAL_GetTick>
 8006b5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b60:	e009      	b.n	8006b76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b62:	f7fc ffc7 	bl	8003af4 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b70:	d901      	bls.n	8006b76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e022      	b.n	8006bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b82:	d1ee      	bne.n	8006b62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b90:	f7fc ffb0 	bl	8003af4 <HAL_GetTick>
 8006b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b96:	e009      	b.n	8006bac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b98:	f7fc ffac 	bl	8003af4 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba6:	d901      	bls.n	8006bac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e007      	b.n	8006bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb8:	d1ee      	bne.n	8006b98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	40007000 	.word	0x40007000

08006bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e29b      	b.n	800711a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8087 	beq.w	8006cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf0:	4b96      	ldr	r3, [pc, #600]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d00c      	beq.n	8006c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bfc:	4b93      	ldr	r3, [pc, #588]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 030c 	and.w	r3, r3, #12
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d112      	bne.n	8006c2e <HAL_RCC_OscConfig+0x62>
 8006c08:	4b90      	ldr	r3, [pc, #576]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c14:	d10b      	bne.n	8006c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c16:	4b8d      	ldr	r3, [pc, #564]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d06c      	beq.n	8006cfc <HAL_RCC_OscConfig+0x130>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d168      	bne.n	8006cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e275      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c36:	d106      	bne.n	8006c46 <HAL_RCC_OscConfig+0x7a>
 8006c38:	4b84      	ldr	r3, [pc, #528]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a83      	ldr	r2, [pc, #524]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e02e      	b.n	8006ca4 <HAL_RCC_OscConfig+0xd8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x9c>
 8006c4e:	4b7f      	ldr	r3, [pc, #508]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7e      	ldr	r2, [pc, #504]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4b7c      	ldr	r3, [pc, #496]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a7b      	ldr	r2, [pc, #492]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e01d      	b.n	8006ca4 <HAL_RCC_OscConfig+0xd8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c70:	d10c      	bne.n	8006c8c <HAL_RCC_OscConfig+0xc0>
 8006c72:	4b76      	ldr	r3, [pc, #472]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a75      	ldr	r2, [pc, #468]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	4b73      	ldr	r3, [pc, #460]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a72      	ldr	r2, [pc, #456]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e00b      	b.n	8006ca4 <HAL_RCC_OscConfig+0xd8>
 8006c8c:	4b6f      	ldr	r3, [pc, #444]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a6e      	ldr	r2, [pc, #440]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4b6c      	ldr	r3, [pc, #432]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a6b      	ldr	r2, [pc, #428]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d013      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fc ff22 	bl	8003af4 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fc ff1e 	bl	8003af4 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e229      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc6:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0xe8>
 8006cd2:	e014      	b.n	8006cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd4:	f7fc ff0e 	bl	8003af4 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cdc:	f7fc ff0a 	bl	8003af4 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b64      	cmp	r3, #100	; 0x64
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e215      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cee:	4b57      	ldr	r3, [pc, #348]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x110>
 8006cfa:	e000      	b.n	8006cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d069      	beq.n	8006dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d0a:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d16:	4b4d      	ldr	r3, [pc, #308]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d11c      	bne.n	8006d5c <HAL_RCC_OscConfig+0x190>
 8006d22:	4b4a      	ldr	r3, [pc, #296]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d116      	bne.n	8006d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d2e:	4b47      	ldr	r3, [pc, #284]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <HAL_RCC_OscConfig+0x17a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d001      	beq.n	8006d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e1e9      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	493d      	ldr	r1, [pc, #244]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5a:	e040      	b.n	8006dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d023      	beq.n	8006dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d64:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a38      	ldr	r2, [pc, #224]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fc fec0 	bl	8003af4 <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d78:	f7fc febc 	bl	8003af4 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e1c7      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8a:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d96:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4929      	ldr	r1, [pc, #164]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]
 8006daa:	e018      	b.n	8006dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dac:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db8:	f7fc fe9c 	bl	8003af4 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dc0:	f7fc fe98 	bl	8003af4 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e1a3      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dd2:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f0      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d038      	beq.n	8006e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d019      	beq.n	8006e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfe:	f7fc fe79 	bl	8003af4 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e06:	f7fc fe75 	bl	8003af4 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e180      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x23a>
 8006e24:	e01a      	b.n	8006e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e26:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2a:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <HAL_RCC_OscConfig+0x280>)
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e32:	f7fc fe5f 	bl	8003af4 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e38:	e00a      	b.n	8006e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e3a:	f7fc fe5b 	bl	8003af4 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d903      	bls.n	8006e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e166      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
 8006e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e50:	4b92      	ldr	r3, [pc, #584]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1ee      	bne.n	8006e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80a4 	beq.w	8006fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e6a:	4b8c      	ldr	r3, [pc, #560]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e76:	4b89      	ldr	r3, [pc, #548]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	4a88      	ldr	r2, [pc, #544]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e80:	6413      	str	r3, [r2, #64]	; 0x40
 8006e82:	4b86      	ldr	r3, [pc, #536]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e92:	4b83      	ldr	r3, [pc, #524]	; (80070a0 <HAL_RCC_OscConfig+0x4d4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d118      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006e9e:	4b80      	ldr	r3, [pc, #512]	; (80070a0 <HAL_RCC_OscConfig+0x4d4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a7f      	ldr	r2, [pc, #508]	; (80070a0 <HAL_RCC_OscConfig+0x4d4>)
 8006ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eaa:	f7fc fe23 	bl	8003af4 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb2:	f7fc fe1f 	bl	8003af4 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b64      	cmp	r3, #100	; 0x64
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e12a      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ec4:	4b76      	ldr	r3, [pc, #472]	; (80070a0 <HAL_RCC_OscConfig+0x4d4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x31a>
 8006ed8:	4b70      	ldr	r3, [pc, #448]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	4a6f      	ldr	r2, [pc, #444]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee4:	e02d      	b.n	8006f42 <HAL_RCC_OscConfig+0x376>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x33c>
 8006eee:	4b6b      	ldr	r3, [pc, #428]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	4a6a      	ldr	r2, [pc, #424]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8006efa:	4b68      	ldr	r3, [pc, #416]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	4a67      	ldr	r2, [pc, #412]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	6713      	str	r3, [r2, #112]	; 0x70
 8006f06:	e01c      	b.n	8006f42 <HAL_RCC_OscConfig+0x376>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	d10c      	bne.n	8006f2a <HAL_RCC_OscConfig+0x35e>
 8006f10:	4b62      	ldr	r3, [pc, #392]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a61      	ldr	r2, [pc, #388]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f1c:	4b5f      	ldr	r3, [pc, #380]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	4a5e      	ldr	r2, [pc, #376]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6713      	str	r3, [r2, #112]	; 0x70
 8006f28:	e00b      	b.n	8006f42 <HAL_RCC_OscConfig+0x376>
 8006f2a:	4b5c      	ldr	r3, [pc, #368]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	4a5b      	ldr	r2, [pc, #364]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	6713      	str	r3, [r2, #112]	; 0x70
 8006f36:	4b59      	ldr	r3, [pc, #356]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	4a58      	ldr	r2, [pc, #352]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f3c:	f023 0304 	bic.w	r3, r3, #4
 8006f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d015      	beq.n	8006f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f4a:	f7fc fdd3 	bl	8003af4 <HAL_GetTick>
 8006f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f50:	e00a      	b.n	8006f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f52:	f7fc fdcf 	bl	8003af4 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0d8      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f68:	4b4c      	ldr	r3, [pc, #304]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0ee      	beq.n	8006f52 <HAL_RCC_OscConfig+0x386>
 8006f74:	e014      	b.n	8006fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f76:	f7fc fdbd 	bl	8003af4 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7e:	f7fc fdb9 	bl	8003af4 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e0c2      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f94:	4b41      	ldr	r3, [pc, #260]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d105      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa6:	4b3d      	ldr	r3, [pc, #244]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4a3c      	ldr	r2, [pc, #240]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80ae 	beq.w	8007118 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fbc:	4b37      	ldr	r3, [pc, #220]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 030c 	and.w	r3, r3, #12
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d06d      	beq.n	80070a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d14b      	bne.n	8007068 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd0:	4b32      	ldr	r3, [pc, #200]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a31      	ldr	r2, [pc, #196]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fc fd8a 	bl	8003af4 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe4:	f7fc fd86 	bl	8003af4 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e091      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff6:	4b29      	ldr	r3, [pc, #164]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69da      	ldr	r2, [r3, #28]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	019b      	lsls	r3, r3, #6
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	3b01      	subs	r3, #1
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	061b      	lsls	r3, r3, #24
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	071b      	lsls	r3, r3, #28
 800702e:	491b      	ldr	r1, [pc, #108]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007034:	4b19      	ldr	r3, [pc, #100]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 800703a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800703e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fc fd58 	bl	8003af4 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007048:	f7fc fd54 	bl	8003af4 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e05f      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x47c>
 8007066:	e057      	b.n	8007118 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0b      	ldr	r2, [pc, #44]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 800706e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fc fd3e 	bl	8003af4 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800707c:	f7fc fd3a 	bl	8003af4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e045      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708e:	4b03      	ldr	r3, [pc, #12]	; (800709c <HAL_RCC_OscConfig+0x4d0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x4b0>
 800709a:	e03d      	b.n	8007118 <HAL_RCC_OscConfig+0x54c>
 800709c:	40023800 	.word	0x40023800
 80070a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <HAL_RCC_OscConfig+0x558>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d030      	beq.n	8007114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070bc:	429a      	cmp	r2, r3
 80070be:	d129      	bne.n	8007114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d122      	bne.n	8007114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070d4:	4013      	ands	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070dc:	4293      	cmp	r3, r2
 80070de:	d119      	bne.n	8007114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	3b01      	subs	r3, #1
 80070ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d10f      	bne.n	8007114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d107      	bne.n	8007114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40023800 	.word	0x40023800

08007128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e0d0      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007140:	4b6a      	ldr	r3, [pc, #424]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d910      	bls.n	8007170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714e:	4b67      	ldr	r3, [pc, #412]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f023 020f 	bic.w	r2, r3, #15
 8007156:	4965      	ldr	r1, [pc, #404]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	4313      	orrs	r3, r2
 800715c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b63      	ldr	r3, [pc, #396]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0b8      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d020      	beq.n	80071be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007188:	4b59      	ldr	r3, [pc, #356]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4a58      	ldr	r2, [pc, #352]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 800718e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071a0:	4b53      	ldr	r3, [pc, #332]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	4a52      	ldr	r2, [pc, #328]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ac:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	494d      	ldr	r1, [pc, #308]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d040      	beq.n	800724c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d107      	bne.n	80071e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d115      	bne.n	800720a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e07f      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d107      	bne.n	80071fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ea:	4b41      	ldr	r3, [pc, #260]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e073      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071fa:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e06b      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800720a:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f023 0203 	bic.w	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4936      	ldr	r1, [pc, #216]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 8007218:	4313      	orrs	r3, r2
 800721a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721c:	f7fc fc6a 	bl	8003af4 <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007222:	e00a      	b.n	800723a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007224:	f7fc fc66 	bl	8003af4 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e053      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800723a:	4b2d      	ldr	r3, [pc, #180]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 020c 	and.w	r2, r3, #12
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	429a      	cmp	r2, r3
 800724a:	d1eb      	bne.n	8007224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800724c:	4b27      	ldr	r3, [pc, #156]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d210      	bcs.n	800727c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725a:	4b24      	ldr	r3, [pc, #144]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f023 020f 	bic.w	r2, r3, #15
 8007262:	4922      	ldr	r1, [pc, #136]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	4313      	orrs	r3, r2
 8007268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800726a:	4b20      	ldr	r3, [pc, #128]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d001      	beq.n	800727c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e032      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d008      	beq.n	800729a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007288:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4916      	ldr	r1, [pc, #88]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 8007296:	4313      	orrs	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072a6:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	490e      	ldr	r1, [pc, #56]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072ba:	f000 f821 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	490a      	ldr	r1, [pc, #40]	; (80072f4 <HAL_RCC_ClockConfig+0x1cc>)
 80072cc:	5ccb      	ldrb	r3, [r1, r3]
 80072ce:	fa22 f303 	lsr.w	r3, r2, r3
 80072d2:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <HAL_RCC_ClockConfig+0x1d0>)
 80072d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <HAL_RCC_ClockConfig+0x1d4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc f814 	bl	8003308 <HAL_InitTick>

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40023c00 	.word	0x40023c00
 80072f0:	40023800 	.word	0x40023800
 80072f4:	080245f0 	.word	0x080245f0
 80072f8:	20000004 	.word	0x20000004
 80072fc:	20000008 	.word	0x20000008

08007300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007304:	b094      	sub	sp, #80	; 0x50
 8007306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	647b      	str	r3, [r7, #68]	; 0x44
 800730c:	2300      	movs	r3, #0
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	2300      	movs	r3, #0
 8007312:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007318:	4b79      	ldr	r3, [pc, #484]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b08      	cmp	r3, #8
 8007322:	d00d      	beq.n	8007340 <HAL_RCC_GetSysClockFreq+0x40>
 8007324:	2b08      	cmp	r3, #8
 8007326:	f200 80e1 	bhi.w	80074ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x34>
 800732e:	2b04      	cmp	r3, #4
 8007330:	d003      	beq.n	800733a <HAL_RCC_GetSysClockFreq+0x3a>
 8007332:	e0db      	b.n	80074ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007334:	4b73      	ldr	r3, [pc, #460]	; (8007504 <HAL_RCC_GetSysClockFreq+0x204>)
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007338:	e0db      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800733a:	4b73      	ldr	r3, [pc, #460]	; (8007508 <HAL_RCC_GetSysClockFreq+0x208>)
 800733c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800733e:	e0d8      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007340:	4b6f      	ldr	r3, [pc, #444]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007348:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800734a:	4b6d      	ldr	r3, [pc, #436]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d063      	beq.n	800741e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007356:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	099b      	lsrs	r3, r3, #6
 800735c:	2200      	movs	r2, #0
 800735e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007360:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
 800736a:	2300      	movs	r3, #0
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	f04f 0000 	mov.w	r0, #0
 800737a:	f04f 0100 	mov.w	r1, #0
 800737e:	0159      	lsls	r1, r3, #5
 8007380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007384:	0150      	lsls	r0, r2, #5
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4621      	mov	r1, r4
 800738c:	1a51      	subs	r1, r2, r1
 800738e:	6139      	str	r1, [r7, #16]
 8007390:	4629      	mov	r1, r5
 8007392:	eb63 0301 	sbc.w	r3, r3, r1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073a4:	4659      	mov	r1, fp
 80073a6:	018b      	lsls	r3, r1, #6
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073ae:	4651      	mov	r1, sl
 80073b0:	018a      	lsls	r2, r1, #6
 80073b2:	4651      	mov	r1, sl
 80073b4:	ebb2 0801 	subs.w	r8, r2, r1
 80073b8:	4659      	mov	r1, fp
 80073ba:	eb63 0901 	sbc.w	r9, r3, r1
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d2:	4690      	mov	r8, r2
 80073d4:	4699      	mov	r9, r3
 80073d6:	4623      	mov	r3, r4
 80073d8:	eb18 0303 	adds.w	r3, r8, r3
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	462b      	mov	r3, r5
 80073e0:	eb49 0303 	adc.w	r3, r9, r3
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073f2:	4629      	mov	r1, r5
 80073f4:	024b      	lsls	r3, r1, #9
 80073f6:	4621      	mov	r1, r4
 80073f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073fc:	4621      	mov	r1, r4
 80073fe:	024a      	lsls	r2, r1, #9
 8007400:	4610      	mov	r0, r2
 8007402:	4619      	mov	r1, r3
 8007404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007406:	2200      	movs	r2, #0
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
 800740a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800740c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007410:	f7f9 f98a 	bl	8000728 <__aeabi_uldivmod>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4613      	mov	r3, r2
 800741a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741c:	e058      	b.n	80074d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	099b      	lsrs	r3, r3, #6
 8007424:	2200      	movs	r2, #0
 8007426:	4618      	mov	r0, r3
 8007428:	4611      	mov	r1, r2
 800742a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	2300      	movs	r3, #0
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
 8007434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	f04f 0000 	mov.w	r0, #0
 8007440:	f04f 0100 	mov.w	r1, #0
 8007444:	0159      	lsls	r1, r3, #5
 8007446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800744a:	0150      	lsls	r0, r2, #5
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4641      	mov	r1, r8
 8007452:	ebb2 0a01 	subs.w	sl, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb63 0b01 	sbc.w	fp, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800746c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007470:	ebb2 040a 	subs.w	r4, r2, sl
 8007474:	eb63 050b 	sbc.w	r5, r3, fp
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	00eb      	lsls	r3, r5, #3
 8007482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007486:	00e2      	lsls	r2, r4, #3
 8007488:	4614      	mov	r4, r2
 800748a:	461d      	mov	r5, r3
 800748c:	4643      	mov	r3, r8
 800748e:	18e3      	adds	r3, r4, r3
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	464b      	mov	r3, r9
 8007494:	eb45 0303 	adc.w	r3, r5, r3
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074a6:	4629      	mov	r1, r5
 80074a8:	028b      	lsls	r3, r1, #10
 80074aa:	4621      	mov	r1, r4
 80074ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074b0:	4621      	mov	r1, r4
 80074b2:	028a      	lsls	r2, r1, #10
 80074b4:	4610      	mov	r0, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ba:	2200      	movs	r2, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c4:	f7f9 f930 	bl	8000728 <__aeabi_uldivmod>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4613      	mov	r3, r2
 80074ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	3301      	adds	r3, #1
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80074e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074ea:	e002      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <HAL_RCC_GetSysClockFreq+0x204>)
 80074ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3750      	adds	r7, #80	; 0x50
 80074f8:	46bd      	mov	sp, r7
 80074fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fe:	bf00      	nop
 8007500:	40023800 	.word	0x40023800
 8007504:	00f42400 	.word	0x00f42400
 8007508:	007a1200 	.word	0x007a1200

0800750c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007510:	4b03      	ldr	r3, [pc, #12]	; (8007520 <HAL_RCC_GetHCLKFreq+0x14>)
 8007512:	681b      	ldr	r3, [r3, #0]
}
 8007514:	4618      	mov	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000004 	.word	0x20000004

08007524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007528:	f7ff fff0 	bl	800750c <HAL_RCC_GetHCLKFreq>
 800752c:	4602      	mov	r2, r0
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	0a9b      	lsrs	r3, r3, #10
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	4903      	ldr	r1, [pc, #12]	; (8007548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800753a:	5ccb      	ldrb	r3, [r1, r3]
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007540:	4618      	mov	r0, r3
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40023800 	.word	0x40023800
 8007548:	08024600 	.word	0x08024600

0800754c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007550:	f7ff ffdc 	bl	800750c <HAL_RCC_GetHCLKFreq>
 8007554:	4602      	mov	r2, r0
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	0b5b      	lsrs	r3, r3, #13
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	4903      	ldr	r1, [pc, #12]	; (8007570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007562:	5ccb      	ldrb	r3, [r1, r3]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40023800 	.word	0x40023800
 8007570:	08024600 	.word	0x08024600

08007574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	220f      	movs	r2, #15
 8007582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007584:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 0203 	and.w	r2, r3, #3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007590:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800759c:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <HAL_RCC_GetClockConfig+0x5c>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80075a8:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <HAL_RCC_GetClockConfig+0x5c>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	08db      	lsrs	r3, r3, #3
 80075ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075b6:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <HAL_RCC_GetClockConfig+0x60>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 020f 	and.w	r2, r3, #15
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	601a      	str	r2, [r3, #0]
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40023800 	.word	0x40023800
 80075d4:	40023c00 	.word	0x40023c00

080075d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d012      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007600:	4b69      	ldr	r3, [pc, #420]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	4a68      	ldr	r2, [pc, #416]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007606:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800760a:	6093      	str	r3, [r2, #8]
 800760c:	4b66      	ldr	r3, [pc, #408]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	4964      	ldr	r1, [pc, #400]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007616:	4313      	orrs	r3, r2
 8007618:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d017      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007632:	4b5d      	ldr	r3, [pc, #372]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007640:	4959      	ldr	r1, [pc, #356]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007650:	d101      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007652:	2301      	movs	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800765e:	2301      	movs	r3, #1
 8007660:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d017      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800766e:	4b4e      	ldr	r3, [pc, #312]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007674:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	494a      	ldr	r1, [pc, #296]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800768c:	d101      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800768e:	2301      	movs	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800769a:	2301      	movs	r3, #1
 800769c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 808b 	beq.w	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076bc:	4b3a      	ldr	r3, [pc, #232]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	4a39      	ldr	r2, [pc, #228]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c6:	6413      	str	r3, [r2, #64]	; 0x40
 80076c8:	4b37      	ldr	r3, [pc, #220]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076d4:	4b35      	ldr	r3, [pc, #212]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a34      	ldr	r2, [pc, #208]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e0:	f7fc fa08 	bl	8003af4 <HAL_GetTick>
 80076e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e8:	f7fc fa04 	bl	8003af4 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b64      	cmp	r3, #100	; 0x64
 80076f4:	d901      	bls.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e38f      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076fa:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007706:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800770e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d035      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	d02e      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007724:	4b20      	ldr	r3, [pc, #128]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800772e:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007738:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773e:	4a1a      	ldr	r2, [pc, #104]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007744:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800774e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d114      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007758:	f7fc f9cc 	bl	8003af4 <HAL_GetTick>
 800775c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800775e:	e00a      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007760:	f7fc f9c8 	bl	8003af4 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	f241 3288 	movw	r2, #5000	; 0x1388
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e351      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007776:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0ee      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800778a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778e:	d111      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800779e:	400b      	ands	r3, r1
 80077a0:	4901      	ldr	r1, [pc, #4]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	e00b      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80077a8:	40023800 	.word	0x40023800
 80077ac:	40007000 	.word	0x40007000
 80077b0:	0ffffcff 	.word	0x0ffffcff
 80077b4:	4bac      	ldr	r3, [pc, #688]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4aab      	ldr	r2, [pc, #684]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077be:	6093      	str	r3, [r2, #8]
 80077c0:	4ba9      	ldr	r3, [pc, #676]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077cc:	49a6      	ldr	r1, [pc, #664]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077de:	4ba2      	ldr	r3, [pc, #648]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e4:	4aa0      	ldr	r2, [pc, #640]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80077ee:	4b9e      	ldr	r3, [pc, #632]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	499b      	ldr	r1, [pc, #620]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800780c:	4b96      	ldr	r3, [pc, #600]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007812:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800781a:	4993      	ldr	r1, [pc, #588]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800782e:	4b8e      	ldr	r3, [pc, #568]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800783c:	498a      	ldr	r1, [pc, #552]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007850:	4b85      	ldr	r3, [pc, #532]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785e:	4982      	ldr	r1, [pc, #520]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007872:	4b7d      	ldr	r3, [pc, #500]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007878:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	4979      	ldr	r1, [pc, #484]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007894:	4b74      	ldr	r3, [pc, #464]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	f023 0203 	bic.w	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	4971      	ldr	r1, [pc, #452]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078b6:	4b6c      	ldr	r3, [pc, #432]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078bc:	f023 020c 	bic.w	r2, r3, #12
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c4:	4968      	ldr	r1, [pc, #416]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078d8:	4b63      	ldr	r3, [pc, #396]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e6:	4960      	ldr	r1, [pc, #384]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078fa:	4b5b      	ldr	r3, [pc, #364]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007900:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	4957      	ldr	r1, [pc, #348]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800791c:	4b52      	ldr	r3, [pc, #328]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	494f      	ldr	r1, [pc, #316]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800793e:	4b4a      	ldr	r3, [pc, #296]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794c:	4946      	ldr	r1, [pc, #280]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007960:	4b41      	ldr	r3, [pc, #260]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796e:	493e      	ldr	r1, [pc, #248]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007982:	4b39      	ldr	r3, [pc, #228]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007988:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007990:	4935      	ldr	r1, [pc, #212]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079a4:	4b30      	ldr	r3, [pc, #192]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079b2:	492d      	ldr	r1, [pc, #180]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80079c6:	4b28      	ldr	r3, [pc, #160]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d4:	4924      	ldr	r1, [pc, #144]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e4:	d101      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80079e6:	2301      	movs	r3, #1
 80079e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a14:	4914      	ldr	r1, [pc, #80]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a38:	490b      	ldr	r1, [pc, #44]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00f      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a5c:	4902      	ldr	r1, [pc, #8]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a64:	e002      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007a66:	bf00      	nop
 8007a68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a78:	4b8a      	ldr	r3, [pc, #552]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	4986      	ldr	r1, [pc, #536]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007a9c:	4b81      	ldr	r3, [pc, #516]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aac:	497d      	ldr	r1, [pc, #500]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d006      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80d6 	beq.w	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ac8:	4b76      	ldr	r3, [pc, #472]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a75      	ldr	r2, [pc, #468]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ace:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad4:	f7fc f80e 	bl	8003af4 <HAL_GetTick>
 8007ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007adc:	f7fc f80a 	bl	8003af4 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b64      	cmp	r3, #100	; 0x64
 8007ae8:	d901      	bls.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e195      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007aee:	4b6d      	ldr	r3, [pc, #436]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f0      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d021      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d11d      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b0e:	4b65      	ldr	r3, [pc, #404]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b1c:	4b61      	ldr	r3, [pc, #388]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	0e1b      	lsrs	r3, r3, #24
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	019a      	lsls	r2, r3, #6
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	071b      	lsls	r3, r3, #28
 8007b42:	4958      	ldr	r1, [pc, #352]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d02e      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b74:	d129      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b76:	4b4b      	ldr	r3, [pc, #300]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b84:	4b47      	ldr	r3, [pc, #284]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8a:	0f1b      	lsrs	r3, r3, #28
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	019a      	lsls	r2, r3, #6
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	061b      	lsls	r3, r3, #24
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	071b      	lsls	r3, r3, #28
 8007baa:	493e      	ldr	r1, [pc, #248]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007bb2:	4b3c      	ldr	r3, [pc, #240]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb8:	f023 021f 	bic.w	r2, r3, #31
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	4938      	ldr	r1, [pc, #224]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01d      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bd6:	4b33      	ldr	r3, [pc, #204]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bdc:	0e1b      	lsrs	r3, r3, #24
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007be4:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bea:	0f1b      	lsrs	r3, r3, #28
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	019a      	lsls	r2, r3, #6
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	041b      	lsls	r3, r3, #16
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	061b      	lsls	r3, r3, #24
 8007c04:	431a      	orrs	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	071b      	lsls	r3, r3, #28
 8007c0a:	4926      	ldr	r1, [pc, #152]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d011      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	019a      	lsls	r2, r3, #6
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	061b      	lsls	r3, r3, #24
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	071b      	lsls	r3, r3, #28
 8007c3a:	491a      	ldr	r1, [pc, #104]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a17      	ldr	r2, [pc, #92]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c4e:	f7fb ff51 	bl	8003af4 <HAL_GetTick>
 8007c52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c54:	e008      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c56:	f7fb ff4d 	bl	8003af4 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b64      	cmp	r3, #100	; 0x64
 8007c62:	d901      	bls.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e0d8      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c68:	4b0e      	ldr	r3, [pc, #56]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f0      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	f040 80ce 	bne.w	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c7c:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c88:	f7fb ff34 	bl	8003af4 <HAL_GetTick>
 8007c8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c8e:	e00b      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c90:	f7fb ff30 	bl	8003af4 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b64      	cmp	r3, #100	; 0x64
 8007c9c:	d904      	bls.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e0bb      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ca8:	4b5e      	ldr	r3, [pc, #376]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb4:	d0ec      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d02e      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d12a      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cde:	4b51      	ldr	r3, [pc, #324]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce4:	0c1b      	lsrs	r3, r3, #16
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cec:	4b4d      	ldr	r3, [pc, #308]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf2:	0f1b      	lsrs	r3, r3, #28
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	019a      	lsls	r2, r3, #6
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	041b      	lsls	r3, r3, #16
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	061b      	lsls	r3, r3, #24
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	071b      	lsls	r3, r3, #28
 8007d12:	4944      	ldr	r1, [pc, #272]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d1a:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	493d      	ldr	r1, [pc, #244]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d022      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d48:	d11d      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d4a:	4b36      	ldr	r3, [pc, #216]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	0e1b      	lsrs	r3, r3, #24
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d58:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5e:	0f1b      	lsrs	r3, r3, #28
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	019a      	lsls	r2, r3, #6
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	041b      	lsls	r3, r3, #16
 8007d72:	431a      	orrs	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	061b      	lsls	r3, r3, #24
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	071b      	lsls	r3, r3, #28
 8007d7e:	4929      	ldr	r1, [pc, #164]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d028      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	0e1b      	lsrs	r3, r3, #24
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007da0:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da6:	0c1b      	lsrs	r3, r3, #16
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	019a      	lsls	r2, r3, #6
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	041b      	lsls	r3, r3, #16
 8007db8:	431a      	orrs	r2, r3
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	061b      	lsls	r3, r3, #24
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	071b      	lsls	r3, r3, #28
 8007dc6:	4917      	ldr	r1, [pc, #92]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007dce:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	4911      	ldr	r1, [pc, #68]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a0e      	ldr	r2, [pc, #56]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df0:	f7fb fe80 	bl	8003af4 <HAL_GetTick>
 8007df4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007df8:	f7fb fe7c 	bl	8003af4 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b64      	cmp	r3, #100	; 0x64
 8007e04:	d901      	bls.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e007      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e16:	d1ef      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40023800 	.word	0x40023800

08007e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e049      	b.n	8007ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f841 	bl	8007ed6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f000 fb6a 	bl	8008540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d001      	beq.n	8007f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e054      	b.n	8007fae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0201 	orr.w	r2, r2, #1
 8007f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a26      	ldr	r2, [pc, #152]	; (8007fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d022      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2e:	d01d      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d018      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a21      	ldr	r2, [pc, #132]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d013      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00e      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <HAL_TIM_Base_Start_IT+0xe0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1c      	ldr	r2, [pc, #112]	; (8007fd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x80>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d115      	bne.n	8007f98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	4b19      	ldr	r3, [pc, #100]	; (8007fd8 <HAL_TIM_Base_Start_IT+0xec>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b06      	cmp	r3, #6
 8007f7c:	d015      	beq.n	8007faa <HAL_TIM_Base_Start_IT+0xbe>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f84:	d011      	beq.n	8007faa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0201 	orr.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	e008      	b.n	8007faa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40001800 	.word	0x40001800
 8007fd8:	00010007 	.word	0x00010007

08007fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e049      	b.n	8008082 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fb fbd4 	bl	80037b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3304      	adds	r3, #4
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f000 fa90 	bl	8008540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b02      	cmp	r3, #2
 800809e:	d122      	bne.n	80080e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d11b      	bne.n	80080e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f06f 0202 	mvn.w	r2, #2
 80080b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f003 0303 	and.w	r3, r3, #3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa19 	bl	8008504 <HAL_TIM_IC_CaptureCallback>
 80080d2:	e005      	b.n	80080e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa0b 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa1c 	bl	8008518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d122      	bne.n	800813a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d11b      	bne.n	800813a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f06f 0204 	mvn.w	r2, #4
 800810a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f9ef 	bl	8008504 <HAL_TIM_IC_CaptureCallback>
 8008126:	e005      	b.n	8008134 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f9e1 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9f2 	bl	8008518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b08      	cmp	r3, #8
 8008146:	d122      	bne.n	800818e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b08      	cmp	r3, #8
 8008154:	d11b      	bne.n	800818e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f06f 0208 	mvn.w	r2, #8
 800815e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2204      	movs	r2, #4
 8008164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f9c5 	bl	8008504 <HAL_TIM_IC_CaptureCallback>
 800817a:	e005      	b.n	8008188 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f9b7 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f9c8 	bl	8008518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b10      	cmp	r3, #16
 800819a:	d122      	bne.n	80081e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0310 	and.w	r3, r3, #16
 80081a6:	2b10      	cmp	r3, #16
 80081a8:	d11b      	bne.n	80081e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f06f 0210 	mvn.w	r2, #16
 80081b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2208      	movs	r2, #8
 80081b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f99b 	bl	8008504 <HAL_TIM_IC_CaptureCallback>
 80081ce:	e005      	b.n	80081dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f98d 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f99e 	bl	8008518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d10e      	bne.n	800820e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d107      	bne.n	800820e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f06f 0201 	mvn.w	r2, #1
 8008206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7fa fedb 	bl	8002fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008218:	2b80      	cmp	r3, #128	; 0x80
 800821a:	d10e      	bne.n	800823a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008226:	2b80      	cmp	r3, #128	; 0x80
 8008228:	d107      	bne.n	800823a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd97 	bl	8008d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008248:	d10e      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	2b80      	cmp	r3, #128	; 0x80
 8008256:	d107      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fd8a 	bl	8008d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b40      	cmp	r3, #64	; 0x40
 8008274:	d10e      	bne.n	8008294 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b40      	cmp	r3, #64	; 0x40
 8008282:	d107      	bne.n	8008294 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f94c 	bl	800852c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b20      	cmp	r3, #32
 80082a0:	d10e      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d107      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0220 	mvn.w	r2, #32
 80082b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fd4a 	bl	8008d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e0ff      	b.n	80084e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b14      	cmp	r3, #20
 80082f2:	f200 80f0 	bhi.w	80084d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082f6:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008351 	.word	0x08008351
 8008300:	080084d7 	.word	0x080084d7
 8008304:	080084d7 	.word	0x080084d7
 8008308:	080084d7 	.word	0x080084d7
 800830c:	08008391 	.word	0x08008391
 8008310:	080084d7 	.word	0x080084d7
 8008314:	080084d7 	.word	0x080084d7
 8008318:	080084d7 	.word	0x080084d7
 800831c:	080083d3 	.word	0x080083d3
 8008320:	080084d7 	.word	0x080084d7
 8008324:	080084d7 	.word	0x080084d7
 8008328:	080084d7 	.word	0x080084d7
 800832c:	08008413 	.word	0x08008413
 8008330:	080084d7 	.word	0x080084d7
 8008334:	080084d7 	.word	0x080084d7
 8008338:	080084d7 	.word	0x080084d7
 800833c:	08008455 	.word	0x08008455
 8008340:	080084d7 	.word	0x080084d7
 8008344:	080084d7 	.word	0x080084d7
 8008348:	080084d7 	.word	0x080084d7
 800834c:	08008495 	.word	0x08008495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f992 	bl	8008680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0208 	orr.w	r2, r2, #8
 800836a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0204 	bic.w	r2, r2, #4
 800837a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6999      	ldr	r1, [r3, #24]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	619a      	str	r2, [r3, #24]
      break;
 800838e:	e0a5      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f9e4 	bl	8008764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6999      	ldr	r1, [r3, #24]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	021a      	lsls	r2, r3, #8
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	619a      	str	r2, [r3, #24]
      break;
 80083d0:	e084      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fa3b 	bl	8008854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0208 	orr.w	r2, r2, #8
 80083ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69da      	ldr	r2, [r3, #28]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0204 	bic.w	r2, r2, #4
 80083fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69d9      	ldr	r1, [r3, #28]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	61da      	str	r2, [r3, #28]
      break;
 8008410:	e064      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fa91 	bl	8008940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800842c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800843c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	021a      	lsls	r2, r3, #8
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	61da      	str	r2, [r3, #28]
      break;
 8008452:	e043      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fac8 	bl	80089f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0208 	orr.w	r2, r2, #8
 800846e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0204 	bic.w	r2, r2, #4
 800847e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008492:	e023      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fafa 	bl	8008a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	021a      	lsls	r2, r3, #8
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084d4:	e002      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
      break;
 80084da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop

080084f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a40      	ldr	r2, [pc, #256]	; (8008654 <TIM_Base_SetConfig+0x114>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d013      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800855e:	d00f      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3d      	ldr	r2, [pc, #244]	; (8008658 <TIM_Base_SetConfig+0x118>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00b      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3c      	ldr	r2, [pc, #240]	; (800865c <TIM_Base_SetConfig+0x11c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d007      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a3b      	ldr	r2, [pc, #236]	; (8008660 <TIM_Base_SetConfig+0x120>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a3a      	ldr	r2, [pc, #232]	; (8008664 <TIM_Base_SetConfig+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d108      	bne.n	8008592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2f      	ldr	r2, [pc, #188]	; (8008654 <TIM_Base_SetConfig+0x114>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d02b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a0:	d027      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a2c      	ldr	r2, [pc, #176]	; (8008658 <TIM_Base_SetConfig+0x118>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d023      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a2b      	ldr	r2, [pc, #172]	; (800865c <TIM_Base_SetConfig+0x11c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d01f      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a2a      	ldr	r2, [pc, #168]	; (8008660 <TIM_Base_SetConfig+0x120>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a29      	ldr	r2, [pc, #164]	; (8008664 <TIM_Base_SetConfig+0x124>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d017      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a28      	ldr	r2, [pc, #160]	; (8008668 <TIM_Base_SetConfig+0x128>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d013      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a27      	ldr	r2, [pc, #156]	; (800866c <TIM_Base_SetConfig+0x12c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00f      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a26      	ldr	r2, [pc, #152]	; (8008670 <TIM_Base_SetConfig+0x130>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a25      	ldr	r2, [pc, #148]	; (8008674 <TIM_Base_SetConfig+0x134>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d007      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a24      	ldr	r2, [pc, #144]	; (8008678 <TIM_Base_SetConfig+0x138>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a23      	ldr	r2, [pc, #140]	; (800867c <TIM_Base_SetConfig+0x13c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d108      	bne.n	8008604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0a      	ldr	r2, [pc, #40]	; (8008654 <TIM_Base_SetConfig+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_Base_SetConfig+0xf8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <TIM_Base_SetConfig+0x124>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d103      	bne.n	8008640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	615a      	str	r2, [r3, #20]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40010400 	.word	0x40010400
 8008668:	40014000 	.word	0x40014000
 800866c:	40014400 	.word	0x40014400
 8008670:	40014800 	.word	0x40014800
 8008674:	40001800 	.word	0x40001800
 8008678:	40001c00 	.word	0x40001c00
 800867c:	40002000 	.word	0x40002000

08008680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4b2b      	ldr	r3, [pc, #172]	; (8008758 <TIM_OC1_SetConfig+0xd8>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f023 0302 	bic.w	r3, r3, #2
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a21      	ldr	r2, [pc, #132]	; (800875c <TIM_OC1_SetConfig+0xdc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC1_SetConfig+0x64>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a20      	ldr	r2, [pc, #128]	; (8008760 <TIM_OC1_SetConfig+0xe0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d10c      	bne.n	80086fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 0308 	bic.w	r3, r3, #8
 80086ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 0304 	bic.w	r3, r3, #4
 80086fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a16      	ldr	r2, [pc, #88]	; (800875c <TIM_OC1_SetConfig+0xdc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d003      	beq.n	800870e <TIM_OC1_SetConfig+0x8e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a15      	ldr	r2, [pc, #84]	; (8008760 <TIM_OC1_SetConfig+0xe0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d111      	bne.n	8008732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800871c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	fffeff8f 	.word	0xfffeff8f
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400

08008764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f023 0210 	bic.w	r2, r3, #16
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <TIM_OC2_SetConfig+0xe4>)
 8008790:	4013      	ands	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f023 0320 	bic.w	r3, r3, #32
 80087ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a23      	ldr	r2, [pc, #140]	; (800884c <TIM_OC2_SetConfig+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_OC2_SetConfig+0x68>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a22      	ldr	r2, [pc, #136]	; (8008850 <TIM_OC2_SetConfig+0xec>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d10d      	bne.n	80087e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	011b      	lsls	r3, r3, #4
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a18      	ldr	r2, [pc, #96]	; (800884c <TIM_OC2_SetConfig+0xe8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_OC2_SetConfig+0x94>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a17      	ldr	r2, [pc, #92]	; (8008850 <TIM_OC2_SetConfig+0xec>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d113      	bne.n	8008820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	feff8fff 	.word	0xfeff8fff
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400

08008854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4b2d      	ldr	r3, [pc, #180]	; (8008934 <TIM_OC3_SetConfig+0xe0>)
 8008880:	4013      	ands	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0303 	bic.w	r3, r3, #3
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800889c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a22      	ldr	r2, [pc, #136]	; (8008938 <TIM_OC3_SetConfig+0xe4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d003      	beq.n	80088ba <TIM_OC3_SetConfig+0x66>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a21      	ldr	r2, [pc, #132]	; (800893c <TIM_OC3_SetConfig+0xe8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d10d      	bne.n	80088d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a17      	ldr	r2, [pc, #92]	; (8008938 <TIM_OC3_SetConfig+0xe4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d003      	beq.n	80088e6 <TIM_OC3_SetConfig+0x92>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a16      	ldr	r2, [pc, #88]	; (800893c <TIM_OC3_SetConfig+0xe8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d113      	bne.n	800890e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	621a      	str	r2, [r3, #32]
}
 8008928:	bf00      	nop
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	fffeff8f 	.word	0xfffeff8f
 8008938:	40010000 	.word	0x40010000
 800893c:	40010400 	.word	0x40010400

08008940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <TIM_OC4_SetConfig+0xa4>)
 800896c:	4013      	ands	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800898a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	031b      	lsls	r3, r3, #12
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <TIM_OC4_SetConfig+0xa8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_OC4_SetConfig+0x68>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a12      	ldr	r2, [pc, #72]	; (80089ec <TIM_OC4_SetConfig+0xac>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d109      	bne.n	80089bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	019b      	lsls	r3, r3, #6
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	feff8fff 	.word	0xfeff8fff
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40010400 	.word	0x40010400

080089f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <TIM_OC5_SetConfig+0x98>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a12      	ldr	r2, [pc, #72]	; (8008a8c <TIM_OC5_SetConfig+0x9c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d003      	beq.n	8008a4e <TIM_OC5_SetConfig+0x5e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a11      	ldr	r2, [pc, #68]	; (8008a90 <TIM_OC5_SetConfig+0xa0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d109      	bne.n	8008a62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	621a      	str	r2, [r3, #32]
}
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	fffeff8f 	.word	0xfffeff8f
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4b1c      	ldr	r3, [pc, #112]	; (8008b30 <TIM_OC6_SetConfig+0x9c>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	051b      	lsls	r3, r3, #20
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <TIM_OC6_SetConfig+0xa0>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_OC6_SetConfig+0x60>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <TIM_OC6_SetConfig+0xa4>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d109      	bne.n	8008b08 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	feff8fff 	.word	0xfeff8fff
 8008b34:	40010000 	.word	0x40010000
 8008b38:	40010400 	.word	0x40010400

08008b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e06d      	b.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a30      	ldr	r2, [pc, #192]	; (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d004      	beq.n	8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a2f      	ldr	r2, [pc, #188]	; (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d108      	bne.n	8008b9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a20      	ldr	r2, [pc, #128]	; (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d022      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc6:	d01d      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d018      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d013      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1a      	ldr	r2, [pc, #104]	; (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00e      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d009      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a15      	ldr	r2, [pc, #84]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d10c      	bne.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	40010000 	.word	0x40010000
 8008c40:	40010400 	.word	0x40010400
 8008c44:	40000400 	.word	0x40000400
 8008c48:	40000800 	.word	0x40000800
 8008c4c:	40000c00 	.word	0x40000c00
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40001800 	.word	0x40001800

08008c58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e065      	b.n	8008d40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	041b      	lsls	r3, r3, #16
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a16      	ldr	r2, [pc, #88]	; (8008d4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d004      	beq.n	8008d02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d115      	bne.n	8008d2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	051b      	lsls	r3, r3, #20
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40010400 	.word	0x40010400

08008d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e040      	b.n	8008e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fa fd84 	bl	80038c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2224      	movs	r2, #36	; 0x24
 8008dbc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fd32 	bl	8009838 <UART_SetConfig>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e022      	b.n	8008e24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 ff8a 	bl	8009d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689a      	ldr	r2, [r3, #8]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0201 	orr.w	r2, r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f811 	bl	8009e44 <UART_CheckIdleState>
 8008e22:	4603      	mov	r3, r0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	; 0x28
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d171      	bne.n	8008f28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <HAL_UART_Transmit+0x24>
 8008e4a:	88fb      	ldrh	r3, [r7, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e06a      	b.n	8008f2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2221      	movs	r2, #33	; 0x21
 8008e60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e62:	f7fa fe47 	bl	8003af4 <HAL_GetTick>
 8008e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	88fa      	ldrh	r2, [r7, #6]
 8008e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e80:	d108      	bne.n	8008e94 <HAL_UART_Transmit+0x68>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d104      	bne.n	8008e94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	e003      	b.n	8008e9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e9c:	e02c      	b.n	8008ef8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2180      	movs	r1, #128	; 0x80
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f001 f818 	bl	8009ede <UART_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e038      	b.n	8008f2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ecc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	3302      	adds	r3, #2
 8008ed2:	61bb      	str	r3, [r7, #24]
 8008ed4:	e007      	b.n	8008ee6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1cc      	bne.n	8008e9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2140      	movs	r1, #64	; 0x40
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 ffe5 	bl	8009ede <UART_WaitOnFlagUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e005      	b.n	8008f2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e000      	b.n	8008f2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
  }
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08a      	sub	sp, #40	; 0x28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	d165      	bne.n	8009016 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_UART_Transmit_DMA+0x22>
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e05e      	b.n	8009018 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	88fa      	ldrh	r2, [r7, #6]
 8008f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2221      	movs	r2, #33	; 0x21
 8008f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d027      	beq.n	8008fd6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8a:	4a25      	ldr	r2, [pc, #148]	; (8009020 <HAL_UART_Transmit_DMA+0xec>)
 8008f8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f92:	4a24      	ldr	r2, [pc, #144]	; (8009024 <HAL_UART_Transmit_DMA+0xf0>)
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9a:	4a23      	ldr	r2, [pc, #140]	; (8009028 <HAL_UART_Transmit_DMA+0xf4>)
 8008f9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3328      	adds	r3, #40	; 0x28
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	f7fb fdb7 	bl	8004b2c <HAL_DMA_Start_IT>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d008      	beq.n	8008fd6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2210      	movs	r2, #16
 8008fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e020      	b.n	8009018 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2240      	movs	r2, #64	; 0x40
 8008fdc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	613b      	str	r3, [r7, #16]
   return(result);
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffe:	623a      	str	r2, [r7, #32]
 8009000:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	69f9      	ldr	r1, [r7, #28]
 8009004:	6a3a      	ldr	r2, [r7, #32]
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	61bb      	str	r3, [r7, #24]
   return(result);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e5      	bne.n	8008fde <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	e000      	b.n	8009018 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009016:	2302      	movs	r3, #2
  }
}
 8009018:	4618      	mov	r0, r3
 800901a:	3728      	adds	r7, #40	; 0x28
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	0800a2c1 	.word	0x0800a2c1
 8009024:	0800a357 	.word	0x0800a357
 8009028:	0800a4d9 	.word	0x0800a4d9

0800902c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009040:	2b20      	cmp	r3, #32
 8009042:	d132      	bne.n	80090aa <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <HAL_UART_Receive_DMA+0x24>
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e02b      	b.n	80090ac <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d018      	beq.n	800909a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	613b      	str	r3, [r7, #16]
   return(result);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	623b      	str	r3, [r7, #32]
 8009088:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	69f9      	ldr	r1, [r7, #28]
 800908c:	6a3a      	ldr	r2, [r7, #32]
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	61bb      	str	r3, [r7, #24]
   return(result);
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	461a      	mov	r2, r3
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 ffe3 	bl	800a06c <UART_Start_Receive_DMA>
 80090a6:	4603      	mov	r3, r0
 80090a8:	e000      	b.n	80090ac <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80090aa:	2302      	movs	r3, #2
  }
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3728      	adds	r7, #40	; 0x28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b090      	sub	sp, #64	; 0x40
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c8:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d4:	2b80      	cmp	r3, #128	; 0x80
 80090d6:	d139      	bne.n	800914c <HAL_UART_DMAStop+0x98>
 80090d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090da:	2b21      	cmp	r3, #33	; 0x21
 80090dc:	d136      	bne.n	800914c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e5      	bne.n	80090de <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	2b00      	cmp	r3, #0
 8009118:	d015      	beq.n	8009146 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	4618      	mov	r0, r3
 8009120:	f7fb fd64 	bl	8004bec <HAL_DMA_Abort>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00d      	beq.n	8009146 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912e:	4618      	mov	r0, r3
 8009130:	f7fb ff78 	bl	8005024 <HAL_DMA_GetError>
 8009134:	4603      	mov	r3, r0
 8009136:	2b20      	cmp	r3, #32
 8009138:	d105      	bne.n	8009146 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2210      	movs	r2, #16
 800913e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e044      	b.n	80091d0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 f830 	bl	800a1ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d139      	bne.n	80091ce <HAL_UART_DMAStop+0x11a>
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	2b22      	cmp	r3, #34	; 0x22
 800915e:	d136      	bne.n	80091ce <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3308      	adds	r3, #8
 8009166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009176:	633b      	str	r3, [r7, #48]	; 0x30
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009180:	61ba      	str	r2, [r7, #24]
 8009182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6979      	ldr	r1, [r7, #20]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	613b      	str	r3, [r7, #16]
   return(result);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e5      	bne.n	8009160 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009198:	2b00      	cmp	r3, #0
 800919a:	d015      	beq.n	80091c8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fb fd23 	bl	8004bec <HAL_DMA_Abort>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00d      	beq.n	80091c8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fb ff37 	bl	8005024 <HAL_DMA_GetError>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d105      	bne.n	80091c8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2210      	movs	r2, #16
 80091c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e003      	b.n	80091d0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 f815 	bl	800a1f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3740      	adds	r7, #64	; 0x40
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b0ba      	sub	sp, #232	; 0xe8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009202:	f640 030f 	movw	r3, #2063	; 0x80f
 8009206:	4013      	ands	r3, r2
 8009208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800920c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009210:	2b00      	cmp	r3, #0
 8009212:	d115      	bne.n	8009240 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009218:	f003 0320 	and.w	r3, r3, #32
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00f      	beq.n	8009240 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d009      	beq.n	8009240 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 82ac 	beq.w	800978e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
      }
      return;
 800923e:	e2a6      	b.n	800978e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 8117 	beq.w	8009478 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800924a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009256:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800925a:	4b85      	ldr	r3, [pc, #532]	; (8009470 <HAL_UART_IRQHandler+0x298>)
 800925c:	4013      	ands	r3, r2
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 810a 	beq.w	8009478 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d011      	beq.n	8009294 <HAL_UART_IRQHandler+0xbc>
 8009270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2201      	movs	r2, #1
 8009282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800928a:	f043 0201 	orr.w	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d011      	beq.n	80092c4 <HAL_UART_IRQHandler+0xec>
 80092a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2202      	movs	r2, #2
 80092b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ba:	f043 0204 	orr.w	r2, r3, #4
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d011      	beq.n	80092f4 <HAL_UART_IRQHandler+0x11c>
 80092d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2204      	movs	r2, #4
 80092e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ea:	f043 0202 	orr.w	r2, r3, #2
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d017      	beq.n	8009330 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800930c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009310:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2208      	movs	r2, #8
 800931e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009326:	f043 0208 	orr.w	r2, r3, #8
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009338:	2b00      	cmp	r3, #0
 800933a:	d012      	beq.n	8009362 <HAL_UART_IRQHandler+0x18a>
 800933c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00c      	beq.n	8009362 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009358:	f043 0220 	orr.w	r2, r3, #32
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 8212 	beq.w	8009792 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800936e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009372:	f003 0320 	and.w	r3, r3, #32
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00d      	beq.n	8009396 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800937a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d005      	beq.n	80093ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d04f      	beq.n	800945a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 ff1c 	bl	800a1f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ca:	2b40      	cmp	r3, #64	; 0x40
 80093cc:	d141      	bne.n	8009452 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1d9      	bne.n	80093ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800941e:	2b00      	cmp	r3, #0
 8009420:	d013      	beq.n	800944a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009426:	4a13      	ldr	r2, [pc, #76]	; (8009474 <HAL_UART_IRQHandler+0x29c>)
 8009428:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800942e:	4618      	mov	r0, r3
 8009430:	f7fb fc4c 	bl	8004ccc <HAL_DMA_Abort_IT>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d017      	beq.n	800946a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800943e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009448:	e00f      	b.n	800946a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9d4 	bl	80097f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009450:	e00b      	b.n	800946a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f9d0 	bl	80097f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009458:	e007      	b.n	800946a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f9cc 	bl	80097f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009468:	e193      	b.n	8009792 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800946a:	bf00      	nop
    return;
 800946c:	e191      	b.n	8009792 <HAL_UART_IRQHandler+0x5ba>
 800946e:	bf00      	nop
 8009470:	04000120 	.word	0x04000120
 8009474:	0800a557 	.word	0x0800a557

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947c:	2b01      	cmp	r3, #1
 800947e:	f040 814c 	bne.w	800971a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 8145 	beq.w	800971a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 813e 	beq.w	800971a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2210      	movs	r2, #16
 80094a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	f040 80b6 	bne.w	8009622 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 8165 	beq.w	8009796 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094d6:	429a      	cmp	r2, r3
 80094d8:	f080 815d 	bcs.w	8009796 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f0:	f000 8086 	beq.w	8009600 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800950c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800951e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009522:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800952a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1da      	bne.n	80094f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3308      	adds	r3, #8
 8009544:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800954e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009550:	f023 0301 	bic.w	r3, r3, #1
 8009554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009562:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009566:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800956a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e1      	bne.n	800953e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800958a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800958c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3308      	adds	r3, #8
 800959a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800959e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e3      	bne.n	800957a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095d0:	f023 0310 	bic.w	r3, r3, #16
 80095d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80095e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e4      	bne.n	80095c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fb faf6 	bl	8004bec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009612:	b29b      	uxth	r3, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	b29b      	uxth	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f8f6 	bl	800980c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009620:	e0b9      	b.n	8009796 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800962e:	b29b      	uxth	r3, r3
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800963c:	b29b      	uxth	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80ab 	beq.w	800979a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80a6 	beq.w	800979a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009670:	647b      	str	r3, [r7, #68]	; 0x44
 8009672:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009678:	e841 2300 	strex	r3, r2, [r1]
 800967c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800967e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e4      	bne.n	800964e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	623b      	str	r3, [r7, #32]
   return(result);
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	f023 0301 	bic.w	r3, r3, #1
 800969a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096a8:	633a      	str	r2, [r7, #48]	; 0x30
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e3      	bne.n	8009684 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f023 0310 	bic.w	r3, r3, #16
 80096e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	69b9      	ldr	r1, [r7, #24]
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e4      	bne.n	80096d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800970c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f87a 	bl	800980c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009718:	e03f      	b.n	800979a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800971a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00e      	beq.n	8009744 <HAL_UART_IRQHandler+0x56c>
 8009726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800972a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d008      	beq.n	8009744 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800973a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f871 	bl	8009824 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009742:	e02d      	b.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00e      	beq.n	800976e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009758:	2b00      	cmp	r3, #0
 800975a:	d008      	beq.n	800976e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01c      	beq.n	800979e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	4798      	blx	r3
    }
    return;
 800976c:	e017      	b.n	800979e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800976e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d012      	beq.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
 800977a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800977e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fefb 	bl	800a582 <UART_EndTransmit_IT>
    return;
 800978c:	e008      	b.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800978e:	bf00      	nop
 8009790:	e006      	b.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009792:	bf00      	nop
 8009794:	e004      	b.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009796:	bf00      	nop
 8009798:	e002      	b.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 800979e:	bf00      	nop
  }

}
 80097a0:	37e8      	adds	r7, #232	; 0xe8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4ba6      	ldr	r3, [pc, #664]	; (8009afc <UART_SetConfig+0x2c4>)
 8009864:	4013      	ands	r3, r2
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	6979      	ldr	r1, [r7, #20]
 800986c:	430b      	orrs	r3, r1
 800986e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a94      	ldr	r2, [pc, #592]	; (8009b00 <UART_SetConfig+0x2c8>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d120      	bne.n	80098f6 <UART_SetConfig+0xbe>
 80098b4:	4b93      	ldr	r3, [pc, #588]	; (8009b04 <UART_SetConfig+0x2cc>)
 80098b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d816      	bhi.n	80098f0 <UART_SetConfig+0xb8>
 80098c2:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <UART_SetConfig+0x90>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098d9 	.word	0x080098d9
 80098cc:	080098e5 	.word	0x080098e5
 80098d0:	080098df 	.word	0x080098df
 80098d4:	080098eb 	.word	0x080098eb
 80098d8:	2301      	movs	r3, #1
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e150      	b.n	8009b80 <UART_SetConfig+0x348>
 80098de:	2302      	movs	r3, #2
 80098e0:	77fb      	strb	r3, [r7, #31]
 80098e2:	e14d      	b.n	8009b80 <UART_SetConfig+0x348>
 80098e4:	2304      	movs	r3, #4
 80098e6:	77fb      	strb	r3, [r7, #31]
 80098e8:	e14a      	b.n	8009b80 <UART_SetConfig+0x348>
 80098ea:	2308      	movs	r3, #8
 80098ec:	77fb      	strb	r3, [r7, #31]
 80098ee:	e147      	b.n	8009b80 <UART_SetConfig+0x348>
 80098f0:	2310      	movs	r3, #16
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e144      	b.n	8009b80 <UART_SetConfig+0x348>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a83      	ldr	r2, [pc, #524]	; (8009b08 <UART_SetConfig+0x2d0>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d132      	bne.n	8009966 <UART_SetConfig+0x12e>
 8009900:	4b80      	ldr	r3, [pc, #512]	; (8009b04 <UART_SetConfig+0x2cc>)
 8009902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009906:	f003 030c 	and.w	r3, r3, #12
 800990a:	2b0c      	cmp	r3, #12
 800990c:	d828      	bhi.n	8009960 <UART_SetConfig+0x128>
 800990e:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <UART_SetConfig+0xdc>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	08009949 	.word	0x08009949
 8009918:	08009961 	.word	0x08009961
 800991c:	08009961 	.word	0x08009961
 8009920:	08009961 	.word	0x08009961
 8009924:	08009955 	.word	0x08009955
 8009928:	08009961 	.word	0x08009961
 800992c:	08009961 	.word	0x08009961
 8009930:	08009961 	.word	0x08009961
 8009934:	0800994f 	.word	0x0800994f
 8009938:	08009961 	.word	0x08009961
 800993c:	08009961 	.word	0x08009961
 8009940:	08009961 	.word	0x08009961
 8009944:	0800995b 	.word	0x0800995b
 8009948:	2300      	movs	r3, #0
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e118      	b.n	8009b80 <UART_SetConfig+0x348>
 800994e:	2302      	movs	r3, #2
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e115      	b.n	8009b80 <UART_SetConfig+0x348>
 8009954:	2304      	movs	r3, #4
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e112      	b.n	8009b80 <UART_SetConfig+0x348>
 800995a:	2308      	movs	r3, #8
 800995c:	77fb      	strb	r3, [r7, #31]
 800995e:	e10f      	b.n	8009b80 <UART_SetConfig+0x348>
 8009960:	2310      	movs	r3, #16
 8009962:	77fb      	strb	r3, [r7, #31]
 8009964:	e10c      	b.n	8009b80 <UART_SetConfig+0x348>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a68      	ldr	r2, [pc, #416]	; (8009b0c <UART_SetConfig+0x2d4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d120      	bne.n	80099b2 <UART_SetConfig+0x17a>
 8009970:	4b64      	ldr	r3, [pc, #400]	; (8009b04 <UART_SetConfig+0x2cc>)
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009976:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800997a:	2b30      	cmp	r3, #48	; 0x30
 800997c:	d013      	beq.n	80099a6 <UART_SetConfig+0x16e>
 800997e:	2b30      	cmp	r3, #48	; 0x30
 8009980:	d814      	bhi.n	80099ac <UART_SetConfig+0x174>
 8009982:	2b20      	cmp	r3, #32
 8009984:	d009      	beq.n	800999a <UART_SetConfig+0x162>
 8009986:	2b20      	cmp	r3, #32
 8009988:	d810      	bhi.n	80099ac <UART_SetConfig+0x174>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <UART_SetConfig+0x15c>
 800998e:	2b10      	cmp	r3, #16
 8009990:	d006      	beq.n	80099a0 <UART_SetConfig+0x168>
 8009992:	e00b      	b.n	80099ac <UART_SetConfig+0x174>
 8009994:	2300      	movs	r3, #0
 8009996:	77fb      	strb	r3, [r7, #31]
 8009998:	e0f2      	b.n	8009b80 <UART_SetConfig+0x348>
 800999a:	2302      	movs	r3, #2
 800999c:	77fb      	strb	r3, [r7, #31]
 800999e:	e0ef      	b.n	8009b80 <UART_SetConfig+0x348>
 80099a0:	2304      	movs	r3, #4
 80099a2:	77fb      	strb	r3, [r7, #31]
 80099a4:	e0ec      	b.n	8009b80 <UART_SetConfig+0x348>
 80099a6:	2308      	movs	r3, #8
 80099a8:	77fb      	strb	r3, [r7, #31]
 80099aa:	e0e9      	b.n	8009b80 <UART_SetConfig+0x348>
 80099ac:	2310      	movs	r3, #16
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e0e6      	b.n	8009b80 <UART_SetConfig+0x348>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a56      	ldr	r2, [pc, #344]	; (8009b10 <UART_SetConfig+0x2d8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d120      	bne.n	80099fe <UART_SetConfig+0x1c6>
 80099bc:	4b51      	ldr	r3, [pc, #324]	; (8009b04 <UART_SetConfig+0x2cc>)
 80099be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099c6:	2bc0      	cmp	r3, #192	; 0xc0
 80099c8:	d013      	beq.n	80099f2 <UART_SetConfig+0x1ba>
 80099ca:	2bc0      	cmp	r3, #192	; 0xc0
 80099cc:	d814      	bhi.n	80099f8 <UART_SetConfig+0x1c0>
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d009      	beq.n	80099e6 <UART_SetConfig+0x1ae>
 80099d2:	2b80      	cmp	r3, #128	; 0x80
 80099d4:	d810      	bhi.n	80099f8 <UART_SetConfig+0x1c0>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <UART_SetConfig+0x1a8>
 80099da:	2b40      	cmp	r3, #64	; 0x40
 80099dc:	d006      	beq.n	80099ec <UART_SetConfig+0x1b4>
 80099de:	e00b      	b.n	80099f8 <UART_SetConfig+0x1c0>
 80099e0:	2300      	movs	r3, #0
 80099e2:	77fb      	strb	r3, [r7, #31]
 80099e4:	e0cc      	b.n	8009b80 <UART_SetConfig+0x348>
 80099e6:	2302      	movs	r3, #2
 80099e8:	77fb      	strb	r3, [r7, #31]
 80099ea:	e0c9      	b.n	8009b80 <UART_SetConfig+0x348>
 80099ec:	2304      	movs	r3, #4
 80099ee:	77fb      	strb	r3, [r7, #31]
 80099f0:	e0c6      	b.n	8009b80 <UART_SetConfig+0x348>
 80099f2:	2308      	movs	r3, #8
 80099f4:	77fb      	strb	r3, [r7, #31]
 80099f6:	e0c3      	b.n	8009b80 <UART_SetConfig+0x348>
 80099f8:	2310      	movs	r3, #16
 80099fa:	77fb      	strb	r3, [r7, #31]
 80099fc:	e0c0      	b.n	8009b80 <UART_SetConfig+0x348>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a44      	ldr	r2, [pc, #272]	; (8009b14 <UART_SetConfig+0x2dc>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d125      	bne.n	8009a54 <UART_SetConfig+0x21c>
 8009a08:	4b3e      	ldr	r3, [pc, #248]	; (8009b04 <UART_SetConfig+0x2cc>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a16:	d017      	beq.n	8009a48 <UART_SetConfig+0x210>
 8009a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a1c:	d817      	bhi.n	8009a4e <UART_SetConfig+0x216>
 8009a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a22:	d00b      	beq.n	8009a3c <UART_SetConfig+0x204>
 8009a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a28:	d811      	bhi.n	8009a4e <UART_SetConfig+0x216>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <UART_SetConfig+0x1fe>
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a32:	d006      	beq.n	8009a42 <UART_SetConfig+0x20a>
 8009a34:	e00b      	b.n	8009a4e <UART_SetConfig+0x216>
 8009a36:	2300      	movs	r3, #0
 8009a38:	77fb      	strb	r3, [r7, #31]
 8009a3a:	e0a1      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	77fb      	strb	r3, [r7, #31]
 8009a40:	e09e      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a42:	2304      	movs	r3, #4
 8009a44:	77fb      	strb	r3, [r7, #31]
 8009a46:	e09b      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a48:	2308      	movs	r3, #8
 8009a4a:	77fb      	strb	r3, [r7, #31]
 8009a4c:	e098      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a4e:	2310      	movs	r3, #16
 8009a50:	77fb      	strb	r3, [r7, #31]
 8009a52:	e095      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a2f      	ldr	r2, [pc, #188]	; (8009b18 <UART_SetConfig+0x2e0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d125      	bne.n	8009aaa <UART_SetConfig+0x272>
 8009a5e:	4b29      	ldr	r3, [pc, #164]	; (8009b04 <UART_SetConfig+0x2cc>)
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a6c:	d017      	beq.n	8009a9e <UART_SetConfig+0x266>
 8009a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a72:	d817      	bhi.n	8009aa4 <UART_SetConfig+0x26c>
 8009a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a78:	d00b      	beq.n	8009a92 <UART_SetConfig+0x25a>
 8009a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7e:	d811      	bhi.n	8009aa4 <UART_SetConfig+0x26c>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <UART_SetConfig+0x254>
 8009a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a88:	d006      	beq.n	8009a98 <UART_SetConfig+0x260>
 8009a8a:	e00b      	b.n	8009aa4 <UART_SetConfig+0x26c>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e076      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a92:	2302      	movs	r3, #2
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	e073      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	77fb      	strb	r3, [r7, #31]
 8009a9c:	e070      	b.n	8009b80 <UART_SetConfig+0x348>
 8009a9e:	2308      	movs	r3, #8
 8009aa0:	77fb      	strb	r3, [r7, #31]
 8009aa2:	e06d      	b.n	8009b80 <UART_SetConfig+0x348>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	77fb      	strb	r3, [r7, #31]
 8009aa8:	e06a      	b.n	8009b80 <UART_SetConfig+0x348>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1b      	ldr	r2, [pc, #108]	; (8009b1c <UART_SetConfig+0x2e4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d138      	bne.n	8009b26 <UART_SetConfig+0x2ee>
 8009ab4:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <UART_SetConfig+0x2cc>)
 8009ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac2:	d017      	beq.n	8009af4 <UART_SetConfig+0x2bc>
 8009ac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac8:	d82a      	bhi.n	8009b20 <UART_SetConfig+0x2e8>
 8009aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ace:	d00b      	beq.n	8009ae8 <UART_SetConfig+0x2b0>
 8009ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad4:	d824      	bhi.n	8009b20 <UART_SetConfig+0x2e8>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <UART_SetConfig+0x2aa>
 8009ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ade:	d006      	beq.n	8009aee <UART_SetConfig+0x2b6>
 8009ae0:	e01e      	b.n	8009b20 <UART_SetConfig+0x2e8>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	77fb      	strb	r3, [r7, #31]
 8009ae6:	e04b      	b.n	8009b80 <UART_SetConfig+0x348>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	77fb      	strb	r3, [r7, #31]
 8009aec:	e048      	b.n	8009b80 <UART_SetConfig+0x348>
 8009aee:	2304      	movs	r3, #4
 8009af0:	77fb      	strb	r3, [r7, #31]
 8009af2:	e045      	b.n	8009b80 <UART_SetConfig+0x348>
 8009af4:	2308      	movs	r3, #8
 8009af6:	77fb      	strb	r3, [r7, #31]
 8009af8:	e042      	b.n	8009b80 <UART_SetConfig+0x348>
 8009afa:	bf00      	nop
 8009afc:	efff69f3 	.word	0xefff69f3
 8009b00:	40011000 	.word	0x40011000
 8009b04:	40023800 	.word	0x40023800
 8009b08:	40004400 	.word	0x40004400
 8009b0c:	40004800 	.word	0x40004800
 8009b10:	40004c00 	.word	0x40004c00
 8009b14:	40005000 	.word	0x40005000
 8009b18:	40011400 	.word	0x40011400
 8009b1c:	40007800 	.word	0x40007800
 8009b20:	2310      	movs	r3, #16
 8009b22:	77fb      	strb	r3, [r7, #31]
 8009b24:	e02c      	b.n	8009b80 <UART_SetConfig+0x348>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a72      	ldr	r2, [pc, #456]	; (8009cf4 <UART_SetConfig+0x4bc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d125      	bne.n	8009b7c <UART_SetConfig+0x344>
 8009b30:	4b71      	ldr	r3, [pc, #452]	; (8009cf8 <UART_SetConfig+0x4c0>)
 8009b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b3e:	d017      	beq.n	8009b70 <UART_SetConfig+0x338>
 8009b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b44:	d817      	bhi.n	8009b76 <UART_SetConfig+0x33e>
 8009b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b4a:	d00b      	beq.n	8009b64 <UART_SetConfig+0x32c>
 8009b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b50:	d811      	bhi.n	8009b76 <UART_SetConfig+0x33e>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <UART_SetConfig+0x326>
 8009b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b5a:	d006      	beq.n	8009b6a <UART_SetConfig+0x332>
 8009b5c:	e00b      	b.n	8009b76 <UART_SetConfig+0x33e>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	77fb      	strb	r3, [r7, #31]
 8009b62:	e00d      	b.n	8009b80 <UART_SetConfig+0x348>
 8009b64:	2302      	movs	r3, #2
 8009b66:	77fb      	strb	r3, [r7, #31]
 8009b68:	e00a      	b.n	8009b80 <UART_SetConfig+0x348>
 8009b6a:	2304      	movs	r3, #4
 8009b6c:	77fb      	strb	r3, [r7, #31]
 8009b6e:	e007      	b.n	8009b80 <UART_SetConfig+0x348>
 8009b70:	2308      	movs	r3, #8
 8009b72:	77fb      	strb	r3, [r7, #31]
 8009b74:	e004      	b.n	8009b80 <UART_SetConfig+0x348>
 8009b76:	2310      	movs	r3, #16
 8009b78:	77fb      	strb	r3, [r7, #31]
 8009b7a:	e001      	b.n	8009b80 <UART_SetConfig+0x348>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b88:	d15b      	bne.n	8009c42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009b8a:	7ffb      	ldrb	r3, [r7, #31]
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d828      	bhi.n	8009be2 <UART_SetConfig+0x3aa>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <UART_SetConfig+0x360>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bc5 	.word	0x08009bc5
 8009ba0:	08009bcd 	.word	0x08009bcd
 8009ba4:	08009be3 	.word	0x08009be3
 8009ba8:	08009bd3 	.word	0x08009bd3
 8009bac:	08009be3 	.word	0x08009be3
 8009bb0:	08009be3 	.word	0x08009be3
 8009bb4:	08009be3 	.word	0x08009be3
 8009bb8:	08009bdb 	.word	0x08009bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bbc:	f7fd fcb2 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 8009bc0:	61b8      	str	r0, [r7, #24]
        break;
 8009bc2:	e013      	b.n	8009bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bc4:	f7fd fcc2 	bl	800754c <HAL_RCC_GetPCLK2Freq>
 8009bc8:	61b8      	str	r0, [r7, #24]
        break;
 8009bca:	e00f      	b.n	8009bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bcc:	4b4b      	ldr	r3, [pc, #300]	; (8009cfc <UART_SetConfig+0x4c4>)
 8009bce:	61bb      	str	r3, [r7, #24]
        break;
 8009bd0:	e00c      	b.n	8009bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bd2:	f7fd fb95 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 8009bd6:	61b8      	str	r0, [r7, #24]
        break;
 8009bd8:	e008      	b.n	8009bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bde:	61bb      	str	r3, [r7, #24]
        break;
 8009be0:	e004      	b.n	8009bec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	77bb      	strb	r3, [r7, #30]
        break;
 8009bea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d074      	beq.n	8009cdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	005a      	lsls	r2, r3, #1
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	085b      	lsrs	r3, r3, #1
 8009bfc:	441a      	add	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b0f      	cmp	r3, #15
 8009c0c:	d916      	bls.n	8009c3c <UART_SetConfig+0x404>
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c14:	d212      	bcs.n	8009c3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f023 030f 	bic.w	r3, r3, #15
 8009c1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	89fa      	ldrh	r2, [r7, #14]
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	e04f      	b.n	8009cdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	77bb      	strb	r3, [r7, #30]
 8009c40:	e04c      	b.n	8009cdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c42:	7ffb      	ldrb	r3, [r7, #31]
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	d828      	bhi.n	8009c9a <UART_SetConfig+0x462>
 8009c48:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <UART_SetConfig+0x418>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009c75 	.word	0x08009c75
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	08009c9b 	.word	0x08009c9b
 8009c60:	08009c8b 	.word	0x08009c8b
 8009c64:	08009c9b 	.word	0x08009c9b
 8009c68:	08009c9b 	.word	0x08009c9b
 8009c6c:	08009c9b 	.word	0x08009c9b
 8009c70:	08009c93 	.word	0x08009c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c74:	f7fd fc56 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 8009c78:	61b8      	str	r0, [r7, #24]
        break;
 8009c7a:	e013      	b.n	8009ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c7c:	f7fd fc66 	bl	800754c <HAL_RCC_GetPCLK2Freq>
 8009c80:	61b8      	str	r0, [r7, #24]
        break;
 8009c82:	e00f      	b.n	8009ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c84:	4b1d      	ldr	r3, [pc, #116]	; (8009cfc <UART_SetConfig+0x4c4>)
 8009c86:	61bb      	str	r3, [r7, #24]
        break;
 8009c88:	e00c      	b.n	8009ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8a:	f7fd fb39 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 8009c8e:	61b8      	str	r0, [r7, #24]
        break;
 8009c90:	e008      	b.n	8009ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c96:	61bb      	str	r3, [r7, #24]
        break;
 8009c98:	e004      	b.n	8009ca4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	77bb      	strb	r3, [r7, #30]
        break;
 8009ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d018      	beq.n	8009cdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	085a      	lsrs	r2, r3, #1
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	441a      	add	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b0f      	cmp	r3, #15
 8009cc2:	d909      	bls.n	8009cd8 <UART_SetConfig+0x4a0>
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cca:	d205      	bcs.n	8009cd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60da      	str	r2, [r3, #12]
 8009cd6:	e001      	b.n	8009cdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009ce8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	40007c00 	.word	0x40007c00
 8009cf8:	40023800 	.word	0x40023800
 8009cfc:	00f42400 	.word	0x00f42400

08009d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01a      	beq.n	8009e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfe:	d10a      	bne.n	8009e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	605a      	str	r2, [r3, #4]
  }
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e54:	f7f9 fe4e 	bl	8003af4 <HAL_GetTick>
 8009e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0308 	and.w	r3, r3, #8
 8009e64:	2b08      	cmp	r3, #8
 8009e66:	d10e      	bne.n	8009e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f831 	bl	8009ede <UART_WaitOnFlagUntilTimeout>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e027      	b.n	8009ed6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d10e      	bne.n	8009eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f81b 	bl	8009ede <UART_WaitOnFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e011      	b.n	8009ed6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b09c      	sub	sp, #112	; 0x70
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	603b      	str	r3, [r7, #0]
 8009eea:	4613      	mov	r3, r2
 8009eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eee:	e0a7      	b.n	800a040 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ef6:	f000 80a3 	beq.w	800a040 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009efa:	f7f9 fdfb 	bl	8003af4 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d302      	bcc.n	8009f10 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d13f      	bne.n	8009f90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f24:	667b      	str	r3, [r7, #100]	; 0x64
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e6      	bne.n	8009f10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	f023 0301 	bic.w	r3, r3, #1
 8009f58:	663b      	str	r3, [r7, #96]	; 0x60
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e5      	bne.n	8009f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e068      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d050      	beq.n	800a040 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fac:	d148      	bne.n	800a040 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8009fd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e6      	bne.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f023 0301 	bic.w	r3, r3, #1
 800a000:	66bb      	str	r3, [r7, #104]	; 0x68
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a00a:	623a      	str	r2, [r7, #32]
 800a00c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	69f9      	ldr	r1, [r7, #28]
 800a010:	6a3a      	ldr	r2, [r7, #32]
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	61bb      	str	r3, [r7, #24]
   return(result);
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e5      	bne.n	8009fea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2220      	movs	r2, #32
 800a030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e010      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	69da      	ldr	r2, [r3, #28]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4013      	ands	r3, r2
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	bf0c      	ite	eq
 800a050:	2301      	moveq	r3, #1
 800a052:	2300      	movne	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	461a      	mov	r2, r3
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f43f af48 	beq.w	8009ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3770      	adds	r7, #112	; 0x70
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b096      	sub	sp, #88	; 0x58
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	4613      	mov	r3, r2
 800a078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	88fa      	ldrh	r2, [r7, #6]
 800a084:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2222      	movs	r2, #34	; 0x22
 800a094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d028      	beq.n	800a0f2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a4:	4a3e      	ldr	r2, [pc, #248]	; (800a1a0 <UART_Start_Receive_DMA+0x134>)
 800a0a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ac:	4a3d      	ldr	r2, [pc, #244]	; (800a1a4 <UART_Start_Receive_DMA+0x138>)
 800a0ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0b4:	4a3c      	ldr	r2, [pc, #240]	; (800a1a8 <UART_Start_Receive_DMA+0x13c>)
 800a0b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0bc:	2200      	movs	r2, #0
 800a0be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3324      	adds	r3, #36	; 0x24
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	f7fa fd2a 	bl	8004b2c <HAL_DMA_Start_IT>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d009      	beq.n	800a0f2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2210      	movs	r2, #16
 800a0e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e051      	b.n	800a196 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d018      	beq.n	800a12c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a102:	e853 3f00 	ldrex	r3, [r3]
 800a106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a10e:	657b      	str	r3, [r7, #84]	; 0x54
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	461a      	mov	r2, r3
 800a116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a118:	64bb      	str	r3, [r7, #72]	; 0x48
 800a11a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a11e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a120:	e841 2300 	strex	r3, r2, [r1]
 800a124:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e6      	bne.n	800a0fa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3308      	adds	r3, #8
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	f043 0301 	orr.w	r3, r3, #1
 800a142:	653b      	str	r3, [r7, #80]	; 0x50
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a14c:	637a      	str	r2, [r7, #52]	; 0x34
 800a14e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e5      	bne.n	800a12c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	613b      	str	r3, [r7, #16]
   return(result);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a176:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a180:	623a      	str	r2, [r7, #32]
 800a182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	69f9      	ldr	r1, [r7, #28]
 800a186:	6a3a      	ldr	r2, [r7, #32]
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e5      	bne.n	800a160 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3758      	adds	r7, #88	; 0x58
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	0800a373 	.word	0x0800a373
 800a1a4:	0800a49b 	.word	0x0800a49b
 800a1a8:	0800a4d9 	.word	0x0800a4d9

0800a1ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b089      	sub	sp, #36	; 0x24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a1c8:	61fb      	str	r3, [r7, #28]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	61bb      	str	r3, [r7, #24]
 800a1d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6979      	ldr	r1, [r7, #20]
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e6      	bne.n	800a1b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a1ec:	bf00      	nop
 800a1ee:	3724      	adds	r7, #36	; 0x24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b095      	sub	sp, #84	; 0x54
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a214:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21e:	643b      	str	r3, [r7, #64]	; 0x40
 800a220:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a226:	e841 2300 	strex	r3, r2, [r1]
 800a22a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1e6      	bne.n	800a200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	61fb      	str	r3, [r7, #28]
   return(result);
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f023 0301 	bic.w	r3, r3, #1
 800a248:	64bb      	str	r3, [r7, #72]	; 0x48
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a252:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e5      	bne.n	800a232 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d118      	bne.n	800a2a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	e853 3f00 	ldrex	r3, [r3]
 800a27a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f023 0310 	bic.w	r3, r3, #16
 800a282:	647b      	str	r3, [r7, #68]	; 0x44
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a28c:	61bb      	str	r3, [r7, #24]
 800a28e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a290:	6979      	ldr	r1, [r7, #20]
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	e841 2300 	strex	r3, r2, [r1]
 800a298:	613b      	str	r3, [r7, #16]
   return(result);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e6      	bne.n	800a26e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a2b4:	bf00      	nop
 800a2b6:	3754      	adds	r7, #84	; 0x54
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b090      	sub	sp, #64	; 0x40
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d6:	d037      	beq.n	800a348 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	e853 3f00 	ldrex	r3, [r3]
 800a2ee:	623b      	str	r3, [r7, #32]
   return(result);
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a300:	633a      	str	r2, [r7, #48]	; 0x30
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e5      	bne.n	800a2e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	60fb      	str	r3, [r7, #12]
   return(result);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
 800a32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a332:	61fb      	str	r3, [r7, #28]
 800a334:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a336:	69b9      	ldr	r1, [r7, #24]
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	e841 2300 	strex	r3, r2, [r1]
 800a33e:	617b      	str	r3, [r7, #20]
   return(result);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1e6      	bne.n	800a314 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a346:	e002      	b.n	800a34e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a34a:	f7ff fa2d 	bl	80097a8 <HAL_UART_TxCpltCallback>
}
 800a34e:	bf00      	nop
 800a350:	3740      	adds	r7, #64	; 0x40
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a362:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff fa29 	bl	80097bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b09c      	sub	sp, #112	; 0x70
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a388:	d071      	beq.n	800a46e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e6      	bne.n	800a392 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d6:	f023 0301 	bic.w	r3, r3, #1
 800a3da:	667b      	str	r3, [r7, #100]	; 0x64
 800a3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3e4:	647a      	str	r2, [r7, #68]	; 0x44
 800a3e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e5      	bne.n	800a3c4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	623b      	str	r3, [r7, #32]
   return(result);
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a40e:	663b      	str	r3, [r7, #96]	; 0x60
 800a410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3308      	adds	r3, #8
 800a416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a418:	633a      	str	r2, [r7, #48]	; 0x30
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e5      	bne.n	800a3f8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a42e:	2220      	movs	r2, #32
 800a430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d118      	bne.n	800a46e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	60fb      	str	r3, [r7, #12]
   return(result);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f023 0310 	bic.w	r3, r3, #16
 800a450:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	69b9      	ldr	r1, [r7, #24]
 800a460:	69fa      	ldr	r2, [r7, #28]
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	617b      	str	r3, [r7, #20]
   return(result);
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e6      	bne.n	800a43c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a470:	2200      	movs	r2, #0
 800a472:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d107      	bne.n	800a48c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a47e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a482:	4619      	mov	r1, r3
 800a484:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a486:	f7ff f9c1 	bl	800980c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a48a:	e002      	b.n	800a492 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a48c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a48e:	f7ff f99f 	bl	80097d0 <HAL_UART_RxCpltCallback>
}
 800a492:	bf00      	nop
 800a494:	3770      	adds	r7, #112	; 0x70
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d109      	bne.n	800a4ca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a4bc:	085b      	lsrs	r3, r3, #1
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7ff f9a2 	bl	800980c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4c8:	e002      	b.n	800a4d0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff f98a 	bl	80097e4 <HAL_UART_RxHalfCpltCallback>
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fe:	2b80      	cmp	r3, #128	; 0x80
 800a500:	d109      	bne.n	800a516 <UART_DMAError+0x3e>
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b21      	cmp	r3, #33	; 0x21
 800a506:	d106      	bne.n	800a516 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a510:	6978      	ldr	r0, [r7, #20]
 800a512:	f7ff fe4b 	bl	800a1ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a520:	2b40      	cmp	r3, #64	; 0x40
 800a522:	d109      	bne.n	800a538 <UART_DMAError+0x60>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b22      	cmp	r3, #34	; 0x22
 800a528:	d106      	bne.n	800a538 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f7ff fe60 	bl	800a1f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a53e:	f043 0210 	orr.w	r2, r3, #16
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a548:	6978      	ldr	r0, [r7, #20]
 800a54a:	f7ff f955 	bl	80097f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a54e:	bf00      	nop
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff f93f 	bl	80097f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b088      	sub	sp, #32
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	e853 3f00 	ldrex	r3, [r3]
 800a596:	60bb      	str	r3, [r7, #8]
   return(result);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59e:	61fb      	str	r3, [r7, #28]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	6979      	ldr	r1, [r7, #20]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	e841 2300 	strex	r3, r2, [r1]
 800a5b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1e6      	bne.n	800a58a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff f8ed 	bl	80097a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ce:	bf00      	nop
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5d8:	b084      	sub	sp, #16
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	f107 001c 	add.w	r0, r7, #28
 800a5e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d120      	bne.n	800a632 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	4b20      	ldr	r3, [pc, #128]	; (800a684 <USB_CoreInit+0xac>)
 800a602:	4013      	ands	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a616:	2b01      	cmp	r3, #1
 800a618:	d105      	bne.n	800a626 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 fbee 	bl	800be08 <USB_CoreReset>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
 800a630:	e010      	b.n	800a654 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fbe2 	bl	800be08 <USB_CoreReset>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a656:	2b01      	cmp	r3, #1
 800a658:	d10b      	bne.n	800a672 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f043 0206 	orr.w	r2, r3, #6
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f043 0220 	orr.w	r2, r3, #32
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a67e:	b004      	add	sp, #16
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	ffbdffbf 	.word	0xffbdffbf

0800a688 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	4613      	mov	r3, r2
 800a694:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d165      	bne.n	800a768 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4a41      	ldr	r2, [pc, #260]	; (800a7a4 <USB_SetTurnaroundTime+0x11c>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d906      	bls.n	800a6b2 <USB_SetTurnaroundTime+0x2a>
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4a40      	ldr	r2, [pc, #256]	; (800a7a8 <USB_SetTurnaroundTime+0x120>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d202      	bcs.n	800a6b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6ac:	230f      	movs	r3, #15
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	e062      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	4a3c      	ldr	r2, [pc, #240]	; (800a7a8 <USB_SetTurnaroundTime+0x120>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d306      	bcc.n	800a6c8 <USB_SetTurnaroundTime+0x40>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4a3b      	ldr	r2, [pc, #236]	; (800a7ac <USB_SetTurnaroundTime+0x124>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d202      	bcs.n	800a6c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6c2:	230e      	movs	r3, #14
 800a6c4:	617b      	str	r3, [r7, #20]
 800a6c6:	e057      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4a38      	ldr	r2, [pc, #224]	; (800a7ac <USB_SetTurnaroundTime+0x124>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d306      	bcc.n	800a6de <USB_SetTurnaroundTime+0x56>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4a37      	ldr	r2, [pc, #220]	; (800a7b0 <USB_SetTurnaroundTime+0x128>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d202      	bcs.n	800a6de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6d8:	230d      	movs	r3, #13
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e04c      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a33      	ldr	r2, [pc, #204]	; (800a7b0 <USB_SetTurnaroundTime+0x128>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d306      	bcc.n	800a6f4 <USB_SetTurnaroundTime+0x6c>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	4a32      	ldr	r2, [pc, #200]	; (800a7b4 <USB_SetTurnaroundTime+0x12c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d802      	bhi.n	800a6f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	e041      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <USB_SetTurnaroundTime+0x12c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d906      	bls.n	800a70a <USB_SetTurnaroundTime+0x82>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4a2e      	ldr	r2, [pc, #184]	; (800a7b8 <USB_SetTurnaroundTime+0x130>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d802      	bhi.n	800a70a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a704:	230b      	movs	r3, #11
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e036      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4a2a      	ldr	r2, [pc, #168]	; (800a7b8 <USB_SetTurnaroundTime+0x130>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d906      	bls.n	800a720 <USB_SetTurnaroundTime+0x98>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4a29      	ldr	r2, [pc, #164]	; (800a7bc <USB_SetTurnaroundTime+0x134>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d802      	bhi.n	800a720 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a71a:	230a      	movs	r3, #10
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e02b      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a26      	ldr	r2, [pc, #152]	; (800a7bc <USB_SetTurnaroundTime+0x134>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d906      	bls.n	800a736 <USB_SetTurnaroundTime+0xae>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4a25      	ldr	r2, [pc, #148]	; (800a7c0 <USB_SetTurnaroundTime+0x138>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d202      	bcs.n	800a736 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a730:	2309      	movs	r3, #9
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e020      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a21      	ldr	r2, [pc, #132]	; (800a7c0 <USB_SetTurnaroundTime+0x138>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d306      	bcc.n	800a74c <USB_SetTurnaroundTime+0xc4>
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	4a20      	ldr	r2, [pc, #128]	; (800a7c4 <USB_SetTurnaroundTime+0x13c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d802      	bhi.n	800a74c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a746:	2308      	movs	r3, #8
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e015      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a1d      	ldr	r2, [pc, #116]	; (800a7c4 <USB_SetTurnaroundTime+0x13c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <USB_SetTurnaroundTime+0xda>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4a1c      	ldr	r2, [pc, #112]	; (800a7c8 <USB_SetTurnaroundTime+0x140>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d202      	bcs.n	800a762 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a75c:	2307      	movs	r3, #7
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e00a      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a762:	2306      	movs	r3, #6
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	e007      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d102      	bne.n	800a774 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a76e:	2309      	movs	r3, #9
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	e001      	b.n	800a778 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a774:	2309      	movs	r3, #9
 800a776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	029b      	lsls	r3, r3, #10
 800a78c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a790:	431a      	orrs	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	00d8acbf 	.word	0x00d8acbf
 800a7a8:	00e4e1c0 	.word	0x00e4e1c0
 800a7ac:	00f42400 	.word	0x00f42400
 800a7b0:	01067380 	.word	0x01067380
 800a7b4:	011a499f 	.word	0x011a499f
 800a7b8:	01312cff 	.word	0x01312cff
 800a7bc:	014ca43f 	.word	0x014ca43f
 800a7c0:	016e3600 	.word	0x016e3600
 800a7c4:	01a6ab1f 	.word	0x01a6ab1f
 800a7c8:	01e84800 	.word	0x01e84800

0800a7cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f043 0201 	orr.w	r2, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f023 0201 	bic.w	r2, r3, #1
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d115      	bne.n	800a85e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a83e:	2001      	movs	r0, #1
 800a840:	f7f9 f964 	bl	8003b0c <HAL_Delay>
      ms++;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3301      	adds	r3, #1
 800a848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 fa4b 	bl	800bce6 <USB_GetMode>
 800a850:	4603      	mov	r3, r0
 800a852:	2b01      	cmp	r3, #1
 800a854:	d01e      	beq.n	800a894 <USB_SetCurrentMode+0x84>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b31      	cmp	r3, #49	; 0x31
 800a85a:	d9f0      	bls.n	800a83e <USB_SetCurrentMode+0x2e>
 800a85c:	e01a      	b.n	800a894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d115      	bne.n	800a890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a870:	2001      	movs	r0, #1
 800a872:	f7f9 f94b 	bl	8003b0c <HAL_Delay>
      ms++;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3301      	adds	r3, #1
 800a87a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f001 fa32 	bl	800bce6 <USB_GetMode>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <USB_SetCurrentMode+0x84>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b31      	cmp	r3, #49	; 0x31
 800a88c:	d9f0      	bls.n	800a870 <USB_SetCurrentMode+0x60>
 800a88e:	e001      	b.n	800a894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e005      	b.n	800a8a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b32      	cmp	r3, #50	; 0x32
 800a898:	d101      	bne.n	800a89e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	613b      	str	r3, [r7, #16]
 800a8c6:	e009      	b.n	800a8dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	3340      	adds	r3, #64	; 0x40
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	613b      	str	r3, [r7, #16]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	2b0e      	cmp	r3, #14
 800a8e0:	d9f2      	bls.n	800a8c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d11c      	bne.n	800a922 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8f6:	f043 0302 	orr.w	r3, r3, #2
 800a8fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e005      	b.n	800a92e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a934:	461a      	mov	r2, r3
 800a936:	2300      	movs	r3, #0
 800a938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a940:	4619      	mov	r1, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a948:	461a      	mov	r2, r3
 800a94a:	680b      	ldr	r3, [r1, #0]
 800a94c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	2b01      	cmp	r3, #1
 800a952:	d10c      	bne.n	800a96e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f965 	bl	800ac2c <USB_SetDevSpeed>
 800a962:	e008      	b.n	800a976 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a964:	2101      	movs	r1, #1
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f960 	bl	800ac2c <USB_SetDevSpeed>
 800a96c:	e003      	b.n	800a976 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a96e:	2103      	movs	r1, #3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f95b 	bl	800ac2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a976:	2110      	movs	r1, #16
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8f3 	bl	800ab64 <USB_FlushTxFifo>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f91f 	bl	800abcc <USB_FlushRxFifo>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99e:	461a      	mov	r2, r3
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	e043      	b.n	800aa4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9d8:	d118      	bne.n	800aa0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e013      	b.n	800aa1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa02:	461a      	mov	r2, r3
 800aa04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	e008      	b.n	800aa1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa18:	461a      	mov	r2, r3
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3301      	adds	r3, #1
 800aa48:	613b      	str	r3, [r7, #16]
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d3b7      	bcc.n	800a9c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	e043      	b.n	800aae0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa6e:	d118      	bne.n	800aaa2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa82:	461a      	mov	r2, r3
 800aa84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	e013      	b.n	800aab4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa98:	461a      	mov	r2, r3
 800aa9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	e008      	b.n	800aab4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaae:	461a      	mov	r2, r3
 800aab0:	2300      	movs	r3, #0
 800aab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac0:	461a      	mov	r2, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad2:	461a      	mov	r2, r3
 800aad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	3301      	adds	r3, #1
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d3b7      	bcc.n	800aa58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aafa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d105      	bne.n	800ab1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	f043 0210 	orr.w	r2, r3, #16
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <USB_DevInit+0x2b4>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f043 0208 	orr.w	r2, r3, #8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d105      	bne.n	800ab4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699a      	ldr	r2, [r3, #24]
 800ab44:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <USB_DevInit+0x2b8>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab58:	b004      	add	sp, #16
 800ab5a:	4770      	bx	lr
 800ab5c:	803c3800 	.word	0x803c3800
 800ab60:	40000004 	.word	0x40000004

0800ab64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3301      	adds	r3, #1
 800ab76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	4a13      	ldr	r2, [pc, #76]	; (800abc8 <USB_FlushTxFifo+0x64>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d901      	bls.n	800ab84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e01b      	b.n	800abbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	daf2      	bge.n	800ab72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	019b      	lsls	r3, r3, #6
 800ab94:	f043 0220 	orr.w	r2, r3, #32
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <USB_FlushTxFifo+0x64>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d901      	bls.n	800abae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e006      	b.n	800abbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b20      	cmp	r3, #32
 800abb8:	d0f0      	beq.n	800ab9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	00030d40 	.word	0x00030d40

0800abcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3301      	adds	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4a11      	ldr	r2, [pc, #68]	; (800ac28 <USB_FlushRxFifo+0x5c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d901      	bls.n	800abea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e018      	b.n	800ac1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	daf2      	bge.n	800abd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2210      	movs	r2, #16
 800abfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <USB_FlushRxFifo+0x5c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d901      	bls.n	800ac0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e006      	b.n	800ac1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0310 	and.w	r3, r3, #16
 800ac16:	2b10      	cmp	r3, #16
 800ac18:	d0f0      	beq.n	800abfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	00030d40 	.word	0x00030d40

0800ac2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b087      	sub	sp, #28
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f003 0306 	and.w	r3, r3, #6
 800ac76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]
 800ac82:	e00a      	b.n	800ac9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d002      	beq.n	800ac90 <USB_GetDevSpeed+0x32>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b06      	cmp	r3, #6
 800ac8e:	d102      	bne.n	800ac96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac90:	2302      	movs	r3, #2
 800ac92:	75fb      	strb	r3, [r7, #23]
 800ac94:	e001      	b.n	800ac9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac96:	230f      	movs	r3, #15
 800ac98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	785b      	ldrb	r3, [r3, #1]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d139      	bne.n	800ad38 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acca:	69da      	ldr	r2, [r3, #28]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 030f 	and.w	r3, r3, #15
 800acd4:	2101      	movs	r1, #1
 800acd6:	fa01 f303 	lsl.w	r3, r1, r3
 800acda:	b29b      	uxth	r3, r3
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ace2:	4313      	orrs	r3, r2
 800ace4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d153      	bne.n	800ada4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	791b      	ldrb	r3, [r3, #4]
 800ad16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	059b      	lsls	r3, r3, #22
 800ad1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad20:	431a      	orrs	r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	0159      	lsls	r1, r3, #5
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	440b      	add	r3, r1
 800ad2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4b20      	ldr	r3, [pc, #128]	; (800adb4 <USB_ActivateEndpoint+0x10c>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	600b      	str	r3, [r1, #0]
 800ad36:	e035      	b.n	800ada4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3e:	69da      	ldr	r2, [r3, #28]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	2101      	movs	r1, #1
 800ad4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4e:	041b      	lsls	r3, r3, #16
 800ad50:	68f9      	ldr	r1, [r7, #12]
 800ad52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad56:	4313      	orrs	r3, r2
 800ad58:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	015a      	lsls	r2, r3, #5
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	4413      	add	r3, r2
 800ad62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d119      	bne.n	800ada4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	791b      	ldrb	r3, [r3, #4]
 800ad8a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	0159      	lsls	r1, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	440b      	add	r3, r1
 800ad98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <USB_ActivateEndpoint+0x10c>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	10008000 	.word	0x10008000

0800adb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d161      	bne.n	800ae98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adea:	d11f      	bne.n	800ae2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	0151      	lsls	r1, r2, #5
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	440a      	add	r2, r1
 800ae02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	0151      	lsls	r1, r2, #5
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	440a      	add	r2, r1
 800ae22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f003 030f 	and.w	r3, r3, #15
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	43db      	mvns	r3, r3
 800ae46:	68f9      	ldr	r1, [r7, #12]
 800ae48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 030f 	and.w	r3, r3, #15
 800ae60:	2101      	movs	r1, #1
 800ae62:	fa01 f303 	lsl.w	r3, r1, r3
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	43db      	mvns	r3, r3
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae70:	4013      	ands	r3, r2
 800ae72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	0159      	lsls	r1, r3, #5
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	440b      	add	r3, r1
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4b35      	ldr	r3, [pc, #212]	; (800af68 <USB_DeactivateEndpoint+0x1b0>)
 800ae92:	4013      	ands	r3, r2
 800ae94:	600b      	str	r3, [r1, #0]
 800ae96:	e060      	b.n	800af5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeae:	d11f      	bne.n	800aef0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	0151      	lsls	r1, r2, #5
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	440a      	add	r2, r1
 800aec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aece:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aeee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 030f 	and.w	r3, r3, #15
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	43db      	mvns	r3, r3
 800af0a:	68f9      	ldr	r1, [r7, #12]
 800af0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af10:	4013      	ands	r3, r2
 800af12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1a:	69da      	ldr	r2, [r3, #28]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	2101      	movs	r1, #1
 800af26:	fa01 f303 	lsl.w	r3, r1, r3
 800af2a:	041b      	lsls	r3, r3, #16
 800af2c:	43db      	mvns	r3, r3
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af34:	4013      	ands	r3, r2
 800af36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	0159      	lsls	r1, r3, #5
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	440b      	add	r3, r1
 800af4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af52:	4619      	mov	r1, r3
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <USB_DeactivateEndpoint+0x1b4>)
 800af56:	4013      	ands	r3, r2
 800af58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	ec337800 	.word	0xec337800
 800af6c:	eff37800 	.word	0xeff37800

0800af70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08a      	sub	sp, #40	; 0x28
 800af74:	af02      	add	r7, sp, #8
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	4613      	mov	r3, r2
 800af7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	785b      	ldrb	r3, [r3, #1]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	f040 8163 	bne.w	800b258 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d132      	bne.n	800b000 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	0159      	lsls	r1, r3, #5
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	440b      	add	r3, r1
 800afb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb4:	4619      	mov	r1, r3
 800afb6:	4ba5      	ldr	r3, [pc, #660]	; (800b24c <USB_EPStartXfer+0x2dc>)
 800afb8:	4013      	ands	r3, r2
 800afba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	0151      	lsls	r1, r2, #5
 800afce:	69fa      	ldr	r2, [r7, #28]
 800afd0:	440a      	add	r2, r1
 800afd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe8:	691a      	ldr	r2, [r3, #16]
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	0159      	lsls	r1, r3, #5
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	440b      	add	r3, r1
 800aff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff6:	4619      	mov	r1, r3
 800aff8:	4b95      	ldr	r3, [pc, #596]	; (800b250 <USB_EPStartXfer+0x2e0>)
 800affa:	4013      	ands	r3, r2
 800affc:	610b      	str	r3, [r1, #16]
 800affe:	e074      	b.n	800b0ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	4413      	add	r3, r2
 800b008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00c:	691a      	ldr	r2, [r3, #16]
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	0159      	lsls	r1, r3, #5
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	440b      	add	r3, r1
 800b016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01a:	4619      	mov	r1, r3
 800b01c:	4b8c      	ldr	r3, [pc, #560]	; (800b250 <USB_EPStartXfer+0x2e0>)
 800b01e:	4013      	ands	r3, r2
 800b020:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	015a      	lsls	r2, r3, #5
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	4413      	add	r3, r2
 800b02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02e:	691a      	ldr	r2, [r3, #16]
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	0159      	lsls	r1, r3, #5
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	440b      	add	r3, r1
 800b038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03c:	4619      	mov	r1, r3
 800b03e:	4b83      	ldr	r3, [pc, #524]	; (800b24c <USB_EPStartXfer+0x2dc>)
 800b040:	4013      	ands	r3, r2
 800b042:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6999      	ldr	r1, [r3, #24]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	440b      	add	r3, r1
 800b05c:	1e59      	subs	r1, r3, #1
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	fbb1 f3f3 	udiv	r3, r1, r3
 800b066:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b068:	4b7a      	ldr	r3, [pc, #488]	; (800b254 <USB_EPStartXfer+0x2e4>)
 800b06a:	400b      	ands	r3, r1
 800b06c:	69b9      	ldr	r1, [r7, #24]
 800b06e:	0148      	lsls	r0, r1, #5
 800b070:	69f9      	ldr	r1, [r7, #28]
 800b072:	4401      	add	r1, r0
 800b074:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b078:	4313      	orrs	r3, r2
 800b07a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b092:	69b9      	ldr	r1, [r7, #24]
 800b094:	0148      	lsls	r0, r1, #5
 800b096:	69f9      	ldr	r1, [r7, #28]
 800b098:	4401      	add	r1, r0
 800b09a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	791b      	ldrb	r3, [r3, #4]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d11f      	bne.n	800b0ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	0151      	lsls	r1, r2, #5
 800b0dc:	69fa      	ldr	r2, [r7, #28]
 800b0de:	440a      	add	r2, r1
 800b0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d14b      	bne.n	800b188 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b104:	461a      	mov	r2, r3
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	791b      	ldrb	r3, [r3, #4]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d128      	bne.n	800b166 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b120:	2b00      	cmp	r3, #0
 800b122:	d110      	bne.n	800b146 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	0151      	lsls	r1, r2, #5
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	440a      	add	r2, r1
 800b13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	e00f      	b.n	800b166 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b164:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	69fa      	ldr	r2, [r7, #28]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b180:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	e137      	b.n	800b3f8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	0151      	lsls	r1, r2, #5
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	440a      	add	r2, r1
 800b19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	791b      	ldrb	r3, [r3, #4]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d015      	beq.n	800b1dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 811f 	beq.w	800b3f8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d0:	69f9      	ldr	r1, [r7, #28]
 800b1d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	634b      	str	r3, [r1, #52]	; 0x34
 800b1da:	e10d      	b.n	800b3f8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d110      	bne.n	800b20e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	0151      	lsls	r1, r2, #5
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	440a      	add	r2, r1
 800b202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	e00f      	b.n	800b22e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	015a      	lsls	r2, r3, #5
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	4413      	add	r3, r2
 800b216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	0151      	lsls	r1, r2, #5
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	440a      	add	r2, r1
 800b224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b22c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	6919      	ldr	r1, [r3, #16]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	781a      	ldrb	r2, [r3, #0]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	b298      	uxth	r0, r3
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	4603      	mov	r3, r0
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 faea 	bl	800b81c <USB_WritePacket>
 800b248:	e0d6      	b.n	800b3f8 <USB_EPStartXfer+0x488>
 800b24a:	bf00      	nop
 800b24c:	e007ffff 	.word	0xe007ffff
 800b250:	fff80000 	.word	0xfff80000
 800b254:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b264:	691a      	ldr	r2, [r3, #16]
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	0159      	lsls	r1, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	440b      	add	r3, r1
 800b26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b272:	4619      	mov	r1, r3
 800b274:	4b63      	ldr	r3, [pc, #396]	; (800b404 <USB_EPStartXfer+0x494>)
 800b276:	4013      	ands	r3, r2
 800b278:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	0159      	lsls	r1, r3, #5
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	440b      	add	r3, r1
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	4619      	mov	r1, r3
 800b296:	4b5c      	ldr	r3, [pc, #368]	; (800b408 <USB_EPStartXfer+0x498>)
 800b298:	4013      	ands	r3, r2
 800b29a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d123      	bne.n	800b2ec <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b0:	691a      	ldr	r2, [r3, #16]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ba:	69b9      	ldr	r1, [r7, #24]
 800b2bc:	0148      	lsls	r0, r1, #5
 800b2be:	69f9      	ldr	r1, [r7, #28]
 800b2c0:	4401      	add	r1, r0
 800b2c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	0151      	lsls	r1, r2, #5
 800b2dc:	69fa      	ldr	r2, [r7, #28]
 800b2de:	440a      	add	r2, r1
 800b2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2e8:	6113      	str	r3, [r2, #16]
 800b2ea:	e037      	b.n	800b35c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	699a      	ldr	r2, [r3, #24]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	1e5a      	subs	r2, r3, #1
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b300:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	8afa      	ldrh	r2, [r7, #22]
 800b308:	fb03 f202 	mul.w	r2, r3, r2
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31c:	691a      	ldr	r2, [r3, #16]
 800b31e:	8afb      	ldrh	r3, [r7, #22]
 800b320:	04d9      	lsls	r1, r3, #19
 800b322:	4b3a      	ldr	r3, [pc, #232]	; (800b40c <USB_EPStartXfer+0x49c>)
 800b324:	400b      	ands	r3, r1
 800b326:	69b9      	ldr	r1, [r7, #24]
 800b328:	0148      	lsls	r0, r1, #5
 800b32a:	69f9      	ldr	r1, [r7, #28]
 800b32c:	4401      	add	r1, r0
 800b32e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b332:	4313      	orrs	r3, r2
 800b334:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b342:	691a      	ldr	r2, [r3, #16]
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b34c:	69b9      	ldr	r1, [r7, #24]
 800b34e:	0148      	lsls	r0, r1, #5
 800b350:	69f9      	ldr	r1, [r7, #28]
 800b352:	4401      	add	r1, r0
 800b354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b358:	4313      	orrs	r3, r2
 800b35a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d10d      	bne.n	800b37e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d009      	beq.n	800b37e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	6919      	ldr	r1, [r3, #16]
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37a:	460a      	mov	r2, r1
 800b37c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	791b      	ldrb	r3, [r3, #4]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d128      	bne.n	800b3d8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b392:	2b00      	cmp	r3, #0
 800b394:	d110      	bne.n	800b3b8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	e00f      	b.n	800b3d8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	69ba      	ldr	r2, [r7, #24]
 800b3e8:	0151      	lsls	r1, r2, #5
 800b3ea:	69fa      	ldr	r2, [r7, #28]
 800b3ec:	440a      	add	r2, r1
 800b3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	fff80000 	.word	0xfff80000
 800b408:	e007ffff 	.word	0xe007ffff
 800b40c:	1ff80000 	.word	0x1ff80000

0800b410 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4613      	mov	r3, r2
 800b41c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	785b      	ldrb	r3, [r3, #1]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	f040 80ce 	bne.w	800b5ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d132      	bne.n	800b4a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	015a      	lsls	r2, r3, #5
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	4413      	add	r3, r2
 800b442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	0159      	lsls	r1, r3, #5
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	440b      	add	r3, r1
 800b450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b454:	4619      	mov	r1, r3
 800b456:	4b9a      	ldr	r3, [pc, #616]	; (800b6c0 <USB_EP0StartXfer+0x2b0>)
 800b458:	4013      	ands	r3, r2
 800b45a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	0151      	lsls	r1, r2, #5
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	440a      	add	r2, r1
 800b472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b47a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b488:	691a      	ldr	r2, [r3, #16]
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	0159      	lsls	r1, r3, #5
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	440b      	add	r3, r1
 800b492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b496:	4619      	mov	r1, r3
 800b498:	4b8a      	ldr	r3, [pc, #552]	; (800b6c4 <USB_EP0StartXfer+0x2b4>)
 800b49a:	4013      	ands	r3, r2
 800b49c:	610b      	str	r3, [r1, #16]
 800b49e:	e04e      	b.n	800b53e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	691a      	ldr	r2, [r3, #16]
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	0159      	lsls	r1, r3, #5
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	440b      	add	r3, r1
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4b81      	ldr	r3, [pc, #516]	; (800b6c4 <USB_EP0StartXfer+0x2b4>)
 800b4be:	4013      	ands	r3, r2
 800b4c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ce:	691a      	ldr	r2, [r3, #16]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	0159      	lsls	r1, r3, #5
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	440b      	add	r3, r1
 800b4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4b78      	ldr	r3, [pc, #480]	; (800b6c0 <USB_EP0StartXfer+0x2b0>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	699a      	ldr	r2, [r3, #24]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d903      	bls.n	800b4f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	0151      	lsls	r1, r2, #5
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	440a      	add	r2, r1
 800b50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b524:	691a      	ldr	r2, [r3, #16]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b52e:	6939      	ldr	r1, [r7, #16]
 800b530:	0148      	lsls	r0, r1, #5
 800b532:	6979      	ldr	r1, [r7, #20]
 800b534:	4401      	add	r1, r0
 800b536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b53a:	4313      	orrs	r3, r2
 800b53c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b53e:	79fb      	ldrb	r3, [r7, #7]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d11e      	bne.n	800b582 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d009      	beq.n	800b560 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	015a      	lsls	r2, r3, #5
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	4413      	add	r3, r2
 800b554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b558:	461a      	mov	r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	0151      	lsls	r1, r2, #5
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	440a      	add	r2, r1
 800b576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b57a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	e097      	b.n	800b6b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	440a      	add	r2, r1
 800b598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b59c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 8083 	beq.w	800b6b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	2101      	movs	r1, #1
 800b5be:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c2:	6979      	ldr	r1, [r7, #20]
 800b5c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	634b      	str	r3, [r1, #52]	; 0x34
 800b5cc:	e071      	b.n	800b6b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5da:	691a      	ldr	r2, [r3, #16]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	0159      	lsls	r1, r3, #5
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	440b      	add	r3, r1
 800b5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4b36      	ldr	r3, [pc, #216]	; (800b6c4 <USB_EP0StartXfer+0x2b4>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	015a      	lsls	r2, r3, #5
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fc:	691a      	ldr	r2, [r3, #16]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	0159      	lsls	r1, r3, #5
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	440b      	add	r3, r1
 800b606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60a:	4619      	mov	r1, r3
 800b60c:	4b2c      	ldr	r3, [pc, #176]	; (800b6c0 <USB_EP0StartXfer+0x2b0>)
 800b60e:	4013      	ands	r3, r2
 800b610:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	4413      	add	r3, r2
 800b632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	0151      	lsls	r1, r2, #5
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	440a      	add	r2, r1
 800b640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b660:	6939      	ldr	r1, [r7, #16]
 800b662:	0148      	lsls	r0, r1, #5
 800b664:	6979      	ldr	r1, [r7, #20]
 800b666:	4401      	add	r1, r0
 800b668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b66c:	4313      	orrs	r3, r2
 800b66e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b670:	79fb      	ldrb	r3, [r7, #7]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d10d      	bne.n	800b692 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	6919      	ldr	r1, [r3, #16]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68e:	460a      	mov	r2, r1
 800b690:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	0151      	lsls	r1, r2, #5
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	440a      	add	r2, r1
 800b6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	371c      	adds	r7, #28
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	e007ffff 	.word	0xe007ffff
 800b6c4:	fff80000 	.word	0xfff80000

0800b6c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	785b      	ldrb	r3, [r3, #1]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d14a      	bne.n	800b77c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6fe:	f040 8086 	bne.w	800b80e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	7812      	ldrb	r2, [r2, #0]
 800b716:	0151      	lsls	r1, r2, #5
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	440a      	add	r2, r1
 800b71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b724:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	0151      	lsls	r1, r2, #5
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	440a      	add	r2, r1
 800b740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f242 7210 	movw	r2, #10000	; 0x2710
 800b756:	4293      	cmp	r3, r2
 800b758:	d902      	bls.n	800b760 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	75fb      	strb	r3, [r7, #23]
          break;
 800b75e:	e056      	b.n	800b80e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b778:	d0e7      	beq.n	800b74a <USB_EPStopXfer+0x82>
 800b77a:	e048      	b.n	800b80e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b794:	d13b      	bne.n	800b80e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	015a      	lsls	r2, r3, #5
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	7812      	ldrb	r2, [r2, #0]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	7812      	ldrb	r2, [r2, #0]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d902      	bls.n	800b7f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
          break;
 800b7f2:	e00c      	b.n	800b80e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	015a      	lsls	r2, r3, #5
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b80c:	d0e7      	beq.n	800b7de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b810:	4618      	mov	r0, r3
 800b812:	371c      	adds	r7, #28
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b089      	sub	sp, #36	; 0x24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	4611      	mov	r1, r2
 800b828:	461a      	mov	r2, r3
 800b82a:	460b      	mov	r3, r1
 800b82c:	71fb      	strb	r3, [r7, #7]
 800b82e:	4613      	mov	r3, r2
 800b830:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b83a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d123      	bne.n	800b88a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b842:	88bb      	ldrh	r3, [r7, #4]
 800b844:	3303      	adds	r3, #3
 800b846:	089b      	lsrs	r3, r3, #2
 800b848:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b84a:	2300      	movs	r3, #0
 800b84c:	61bb      	str	r3, [r7, #24]
 800b84e:	e018      	b.n	800b882 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	031a      	lsls	r2, r3, #12
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	4413      	add	r3, r2
 800b858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85c:	461a      	mov	r2, r3
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	3301      	adds	r3, #1
 800b868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	3301      	adds	r3, #1
 800b86e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	3301      	adds	r3, #1
 800b874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	3301      	adds	r3, #1
 800b87a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	3301      	adds	r3, #1
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	69ba      	ldr	r2, [r7, #24]
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	429a      	cmp	r2, r3
 800b888:	d3e2      	bcc.n	800b850 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3724      	adds	r7, #36	; 0x24
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b898:	b480      	push	{r7}
 800b89a:	b08b      	sub	sp, #44	; 0x2c
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	089b      	lsrs	r3, r3, #2
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	f003 0303 	and.w	r3, r3, #3
 800b8bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8be:	2300      	movs	r3, #0
 800b8c0:	623b      	str	r3, [r7, #32]
 800b8c2:	e014      	b.n	800b8ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	3301      	adds	r3, #1
 800b8da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	3301      	adds	r3, #1
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	623b      	str	r3, [r7, #32]
 800b8ee:	6a3a      	ldr	r2, [r7, #32]
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d3e6      	bcc.n	800b8c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b8f6:	8bfb      	ldrh	r3, [r7, #30]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d01e      	beq.n	800b93a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b906:	461a      	mov	r2, r3
 800b908:	f107 0310 	add.w	r3, r7, #16
 800b90c:	6812      	ldr	r2, [r2, #0]
 800b90e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	b2db      	uxtb	r3, r3
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	fa22 f303 	lsr.w	r3, r2, r3
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	701a      	strb	r2, [r3, #0]
      i++;
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	3301      	adds	r3, #1
 800b926:	623b      	str	r3, [r7, #32]
      pDest++;
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	3301      	adds	r3, #1
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b92e:	8bfb      	ldrh	r3, [r7, #30]
 800b930:	3b01      	subs	r3, #1
 800b932:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b934:	8bfb      	ldrh	r3, [r7, #30]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1ea      	bne.n	800b910 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	372c      	adds	r7, #44	; 0x2c
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d12c      	bne.n	800b9be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	db12      	blt.n	800b99c <USB_EPSetStall+0x54>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00f      	beq.n	800b99c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	015a      	lsls	r2, r3, #5
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	0151      	lsls	r1, r2, #5
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	440a      	add	r2, r1
 800b992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b996:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b99a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	0151      	lsls	r1, r2, #5
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	440a      	add	r2, r1
 800b9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	e02b      	b.n	800ba16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	db12      	blt.n	800b9f6 <USB_EPSetStall+0xae>
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00f      	beq.n	800b9f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	0151      	lsls	r1, r2, #5
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	440a      	add	r2, r1
 800b9ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	015a      	lsls	r2, r3, #5
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	0151      	lsls	r1, r2, #5
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	440a      	add	r2, r1
 800ba0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d128      	bne.n	800ba92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	015a      	lsls	r2, r3, #5
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4413      	add	r3, r2
 800ba48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	0151      	lsls	r1, r2, #5
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	440a      	add	r2, r1
 800ba56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	791b      	ldrb	r3, [r3, #4]
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d003      	beq.n	800ba70 <USB_EPClearStall+0x4c>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	791b      	ldrb	r3, [r3, #4]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d138      	bne.n	800bae2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	0151      	lsls	r1, r2, #5
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	440a      	add	r2, r1
 800ba86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	e027      	b.n	800bae2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	0151      	lsls	r1, r2, #5
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	440a      	add	r2, r1
 800baa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bab0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	791b      	ldrb	r3, [r3, #4]
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d003      	beq.n	800bac2 <USB_EPClearStall+0x9e>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	791b      	ldrb	r3, [r3, #4]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d10f      	bne.n	800bae2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	0151      	lsls	r1, r2, #5
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	440a      	add	r2, r1
 800bad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800badc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bae0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	011b      	lsls	r3, r3, #4
 800bb20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb24:	68f9      	ldr	r1, [r7, #12]
 800bb26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb56:	f023 0303 	bic.w	r3, r3, #3
 800bb5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb6a:	f023 0302 	bic.w	r3, r3, #2
 800bb6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b085      	sub	sp, #20
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb98:	f023 0303 	bic.w	r3, r3, #3
 800bb9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbac:	f043 0302 	orr.w	r3, r3, #2
 800bbb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b085      	sub	sp, #20
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	4013      	ands	r3, r2
 800bc08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	0c1b      	lsrs	r3, r3, #16
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	b29b      	uxth	r3, r3
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b085      	sub	sp, #20
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	015a      	lsls	r2, r3, #5
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b087      	sub	sp, #28
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcae:	78fb      	ldrb	r3, [r7, #3]
 800bcb0:	f003 030f 	and.w	r3, r3, #15
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcba:	01db      	lsls	r3, r3, #7
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	015a      	lsls	r2, r3, #5
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	4413      	add	r3, r2
 800bccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
	...

0800bd04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <USB_ActivateSetup+0x44>)
 800bd22:	4013      	ands	r3, r2
 800bd24:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	fffff800 	.word	0xfffff800

0800bd4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	460b      	mov	r3, r1
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	333c      	adds	r3, #60	; 0x3c
 800bd62:	3304      	adds	r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	4a26      	ldr	r2, [pc, #152]	; (800be04 <USB_EP0_OutStart+0xb8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d90a      	bls.n	800bd86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd80:	d101      	bne.n	800bd86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e037      	b.n	800bdf6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bda0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bda4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb4:	f043 0318 	orr.w	r3, r3, #24
 800bdb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bdcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d10f      	bne.n	800bdf4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bdf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	4f54300a 	.word	0x4f54300a

0800be08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4a13      	ldr	r2, [pc, #76]	; (800be6c <USB_CoreReset+0x64>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d901      	bls.n	800be26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e01b      	b.n	800be5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	daf2      	bge.n	800be14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	f043 0201 	orr.w	r2, r3, #1
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3301      	adds	r3, #1
 800be42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4a09      	ldr	r2, [pc, #36]	; (800be6c <USB_CoreReset+0x64>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d901      	bls.n	800be50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e006      	b.n	800be5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d0f0      	beq.n	800be3e <USB_CoreReset+0x36>

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	00030d40 	.word	0x00030d40

0800be70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be80:	f013 fbd4 	bl	801f62c <malloc>
 800be84:	4603      	mov	r3, r0
 800be86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	32b0      	adds	r2, #176	; 0xb0
 800be98:	2100      	movs	r1, #0
 800be9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be9e:	2302      	movs	r3, #2
 800bea0:	e0d4      	b.n	800c04c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bea2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bea6:	2100      	movs	r1, #0
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f014 ffa3 	bl	8020df4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	32b0      	adds	r2, #176	; 0xb0
 800beb8:	68f9      	ldr	r1, [r7, #12]
 800beba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	32b0      	adds	r2, #176	; 0xb0
 800bec8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7c1b      	ldrb	r3, [r3, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d138      	bne.n	800bf4c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800beda:	4b5e      	ldr	r3, [pc, #376]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800bedc:	7819      	ldrb	r1, [r3, #0]
 800bede:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bee2:	2202      	movs	r2, #2
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f005 f926 	bl	8011136 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800beea:	4b5a      	ldr	r3, [pc, #360]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	f003 020f 	and.w	r2, r3, #15
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	440b      	add	r3, r1
 800befe:	3324      	adds	r3, #36	; 0x24
 800bf00:	2201      	movs	r2, #1
 800bf02:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf04:	4b54      	ldr	r3, [pc, #336]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf06:	7819      	ldrb	r1, [r3, #0]
 800bf08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f005 f911 	bl	8011136 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf14:	4b50      	ldr	r3, [pc, #320]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf30:	4b4a      	ldr	r3, [pc, #296]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 020f 	and.w	r2, r3, #15
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	440b      	add	r3, r1
 800bf44:	3326      	adds	r3, #38	; 0x26
 800bf46:	2210      	movs	r2, #16
 800bf48:	801a      	strh	r2, [r3, #0]
 800bf4a:	e035      	b.n	800bfb8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf4c:	4b41      	ldr	r3, [pc, #260]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800bf4e:	7819      	ldrb	r1, [r3, #0]
 800bf50:	2340      	movs	r3, #64	; 0x40
 800bf52:	2202      	movs	r2, #2
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f005 f8ee 	bl	8011136 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf5a:	4b3e      	ldr	r3, [pc, #248]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	f003 020f 	and.w	r2, r3, #15
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	440b      	add	r3, r1
 800bf6e:	3324      	adds	r3, #36	; 0x24
 800bf70:	2201      	movs	r2, #1
 800bf72:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf74:	4b38      	ldr	r3, [pc, #224]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf76:	7819      	ldrb	r1, [r3, #0]
 800bf78:	2340      	movs	r3, #64	; 0x40
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f005 f8da 	bl	8011136 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf82:	4b35      	ldr	r3, [pc, #212]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	f003 020f 	and.w	r2, r3, #15
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	440b      	add	r3, r1
 800bf96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf9e:	4b2f      	ldr	r3, [pc, #188]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	f003 020f 	and.w	r2, r3, #15
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3326      	adds	r3, #38	; 0x26
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfb8:	4b28      	ldr	r3, [pc, #160]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bfba:	7819      	ldrb	r1, [r3, #0]
 800bfbc:	2308      	movs	r3, #8
 800bfbe:	2203      	movs	r2, #3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f005 f8b8 	bl	8011136 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bfc6:	4b25      	ldr	r3, [pc, #148]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	f003 020f 	and.w	r2, r3, #15
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	440b      	add	r3, r1
 800bfda:	3324      	adds	r3, #36	; 0x24
 800bfdc:	2201      	movs	r2, #1
 800bfde:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	33b0      	adds	r3, #176	; 0xb0
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c016:	2302      	movs	r3, #2
 800c018:	e018      	b.n	800c04c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	7c1b      	ldrb	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10a      	bne.n	800c038 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c022:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800c024:	7819      	ldrb	r1, [r3, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c02c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f005 f96f 	bl	8011314 <USBD_LL_PrepareReceive>
 800c036:	e008      	b.n	800c04a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c038:	4b07      	ldr	r3, [pc, #28]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800c03a:	7819      	ldrb	r1, [r3, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c042:	2340      	movs	r3, #64	; 0x40
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f005 f965 	bl	8011314 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	20000097 	.word	0x20000097
 800c058:	20000098 	.word	0x20000098
 800c05c:	20000099 	.word	0x20000099

0800c060 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c06c:	4b3a      	ldr	r3, [pc, #232]	; (800c158 <USBD_CDC_DeInit+0xf8>)
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f005 f885 	bl	8011182 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c078:	4b37      	ldr	r3, [pc, #220]	; (800c158 <USBD_CDC_DeInit+0xf8>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f003 020f 	and.w	r2, r3, #15
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	3324      	adds	r3, #36	; 0x24
 800c08e:	2200      	movs	r2, #0
 800c090:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c092:	4b32      	ldr	r3, [pc, #200]	; (800c15c <USBD_CDC_DeInit+0xfc>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f005 f872 	bl	8011182 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c09e:	4b2f      	ldr	r3, [pc, #188]	; (800c15c <USBD_CDC_DeInit+0xfc>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	f003 020f 	and.w	r2, r3, #15
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	440b      	add	r3, r1
 800c0b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c0ba:	4b29      	ldr	r3, [pc, #164]	; (800c160 <USBD_CDC_DeInit+0x100>)
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f005 f85e 	bl	8011182 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c0c6:	4b26      	ldr	r3, [pc, #152]	; (800c160 <USBD_CDC_DeInit+0x100>)
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	f003 020f 	and.w	r2, r3, #15
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	3324      	adds	r3, #36	; 0x24
 800c0dc:	2200      	movs	r2, #0
 800c0de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0e0:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <USBD_CDC_DeInit+0x100>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 020f 	and.w	r2, r3, #15
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3326      	adds	r3, #38	; 0x26
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	32b0      	adds	r2, #176	; 0xb0
 800c104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01f      	beq.n	800c14c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	33b0      	adds	r3, #176	; 0xb0
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	32b0      	adds	r2, #176	; 0xb0
 800c12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12e:	4618      	mov	r0, r3
 800c130:	f013 fa84 	bl	801f63c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	32b0      	adds	r2, #176	; 0xb0
 800c13e:	2100      	movs	r1, #0
 800c140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20000097 	.word	0x20000097
 800c15c:	20000098 	.word	0x20000098
 800c160:	20000099 	.word	0x20000099

0800c164 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	32b0      	adds	r2, #176	; 0xb0
 800c178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c17c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c17e:	2300      	movs	r3, #0
 800c180:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c182:	2300      	movs	r3, #0
 800c184:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	e0bf      	b.n	800c314 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d050      	beq.n	800c242 <USBD_CDC_Setup+0xde>
 800c1a0:	2b20      	cmp	r3, #32
 800c1a2:	f040 80af 	bne.w	800c304 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	88db      	ldrh	r3, [r3, #6]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d03a      	beq.n	800c224 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	b25b      	sxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da1b      	bge.n	800c1f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	33b0      	adds	r3, #176	; 0xb0
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c1ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	88d2      	ldrh	r2, [r2, #6]
 800c1d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	88db      	ldrh	r3, [r3, #6]
 800c1da:	2b07      	cmp	r3, #7
 800c1dc:	bf28      	it	cs
 800c1de:	2307      	movcs	r3, #7
 800c1e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	89fa      	ldrh	r2, [r7, #14]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 fd6d 	bl	800dcc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c1ee:	e090      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	785a      	ldrb	r2, [r3, #1]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	88db      	ldrh	r3, [r3, #6]
 800c1fe:	2b3f      	cmp	r3, #63	; 0x3f
 800c200:	d803      	bhi.n	800c20a <USBD_CDC_Setup+0xa6>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	88db      	ldrh	r3, [r3, #6]
 800c206:	b2da      	uxtb	r2, r3
 800c208:	e000      	b.n	800c20c <USBD_CDC_Setup+0xa8>
 800c20a:	2240      	movs	r2, #64	; 0x40
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c212:	6939      	ldr	r1, [r7, #16]
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c21a:	461a      	mov	r2, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 fd7f 	bl	800dd20 <USBD_CtlPrepareRx>
      break;
 800c222:	e076      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	33b0      	adds	r3, #176	; 0xb0
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	7850      	ldrb	r0, [r2, #1]
 800c23a:	2200      	movs	r2, #0
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	4798      	blx	r3
      break;
 800c240:	e067      	b.n	800c312 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	785b      	ldrb	r3, [r3, #1]
 800c246:	2b0b      	cmp	r3, #11
 800c248:	d851      	bhi.n	800c2ee <USBD_CDC_Setup+0x18a>
 800c24a:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <USBD_CDC_Setup+0xec>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c281 	.word	0x0800c281
 800c254:	0800c2fd 	.word	0x0800c2fd
 800c258:	0800c2ef 	.word	0x0800c2ef
 800c25c:	0800c2ef 	.word	0x0800c2ef
 800c260:	0800c2ef 	.word	0x0800c2ef
 800c264:	0800c2ef 	.word	0x0800c2ef
 800c268:	0800c2ef 	.word	0x0800c2ef
 800c26c:	0800c2ef 	.word	0x0800c2ef
 800c270:	0800c2ef 	.word	0x0800c2ef
 800c274:	0800c2ef 	.word	0x0800c2ef
 800c278:	0800c2ab 	.word	0x0800c2ab
 800c27c:	0800c2d5 	.word	0x0800c2d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d107      	bne.n	800c29c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c28c:	f107 030a 	add.w	r3, r7, #10
 800c290:	2202      	movs	r2, #2
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 fd17 	bl	800dcc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c29a:	e032      	b.n	800c302 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f001 fca1 	bl	800dbe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	75fb      	strb	r3, [r7, #23]
          break;
 800c2a8:	e02b      	b.n	800c302 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d107      	bne.n	800c2c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2b6:	f107 030d 	add.w	r3, r7, #13
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f001 fd02 	bl	800dcc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2c4:	e01d      	b.n	800c302 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 fc8c 	bl	800dbe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	75fb      	strb	r3, [r7, #23]
          break;
 800c2d2:	e016      	b.n	800c302 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d00f      	beq.n	800c300 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 fc7f 	bl	800dbe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2ec:	e008      	b.n	800c300 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 fc78 	bl	800dbe6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800c2fa:	e002      	b.n	800c302 <USBD_CDC_Setup+0x19e>
          break;
 800c2fc:	bf00      	nop
 800c2fe:	e008      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
          break;
 800c300:	bf00      	nop
      }
      break;
 800c302:	e006      	b.n	800c312 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f001 fc6d 	bl	800dbe6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
      break;
 800c310:	bf00      	nop
  }

  return (uint8_t)ret;
 800c312:	7dfb      	ldrb	r3, [r7, #23]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c32e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	32b0      	adds	r2, #176	; 0xb0
 800c33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	e065      	b.n	800c412 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	32b0      	adds	r2, #176	; 0xb0
 800c350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c356:	78fb      	ldrb	r3, [r7, #3]
 800c358:	f003 020f 	and.w	r2, r3, #15
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	4613      	mov	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	4413      	add	r3, r2
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	440b      	add	r3, r1
 800c368:	3318      	adds	r3, #24
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d02f      	beq.n	800c3d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	f003 020f 	and.w	r2, r3, #15
 800c376:	6879      	ldr	r1, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	440b      	add	r3, r1
 800c382:	3318      	adds	r3, #24
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	78fb      	ldrb	r3, [r7, #3]
 800c388:	f003 010f 	and.w	r1, r3, #15
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	460b      	mov	r3, r1
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	440b      	add	r3, r1
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4403      	add	r3, r0
 800c398:	3348      	adds	r3, #72	; 0x48
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3a0:	fb01 f303 	mul.w	r3, r1, r3
 800c3a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d112      	bne.n	800c3d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	f003 020f 	and.w	r2, r3, #15
 800c3b0:	6879      	ldr	r1, [r7, #4]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3318      	adds	r3, #24
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3c2:	78f9      	ldrb	r1, [r7, #3]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f004 ff82 	bl	80112d2 <USBD_LL_Transmit>
 800c3ce:	e01f      	b.n	800c410 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	33b0      	adds	r3, #176	; 0xb0
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d010      	beq.n	800c410 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	33b0      	adds	r3, #176	; 0xb0
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c40c:	78fa      	ldrb	r2, [r7, #3]
 800c40e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	32b0      	adds	r2, #176	; 0xb0
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	32b0      	adds	r2, #176	; 0xb0
 800c440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c448:	2303      	movs	r3, #3
 800c44a:	e01a      	b.n	800c482 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f004 ff80 	bl	8011356 <USBD_LL_GetRxDataSize>
 800c456:	4602      	mov	r2, r0
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	33b0      	adds	r3, #176	; 0xb0
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c47c:	4611      	mov	r1, r2
 800c47e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	32b0      	adds	r2, #176	; 0xb0
 800c49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	e025      	b.n	800c4f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	33b0      	adds	r3, #176	; 0xb0
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d01a      	beq.n	800c4f6 <USBD_CDC_EP0_RxReady+0x6c>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c4c6:	2bff      	cmp	r3, #255	; 0xff
 800c4c8:	d015      	beq.n	800c4f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	33b0      	adds	r3, #176	; 0xb0
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	22ff      	movs	r2, #255	; 0xff
 800c4f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c508:	2182      	movs	r1, #130	; 0x82
 800c50a:	4818      	ldr	r0, [pc, #96]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c50c:	f000 fd09 	bl	800cf22 <USBD_GetEpDesc>
 800c510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c512:	2101      	movs	r1, #1
 800c514:	4815      	ldr	r0, [pc, #84]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c516:	f000 fd04 	bl	800cf22 <USBD_GetEpDesc>
 800c51a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c51c:	2181      	movs	r1, #129	; 0x81
 800c51e:	4813      	ldr	r0, [pc, #76]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c520:	f000 fcff 	bl	800cf22 <USBD_GetEpDesc>
 800c524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2210      	movs	r2, #16
 800c530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d006      	beq.n	800c546 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c540:	711a      	strb	r2, [r3, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d006      	beq.n	800c55a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c554:	711a      	strb	r2, [r3, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2243      	movs	r2, #67	; 0x43
 800c55e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c560:	4b02      	ldr	r3, [pc, #8]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20000054 	.word	0x20000054

0800c570 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c578:	2182      	movs	r1, #130	; 0x82
 800c57a:	4818      	ldr	r0, [pc, #96]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c57c:	f000 fcd1 	bl	800cf22 <USBD_GetEpDesc>
 800c580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c582:	2101      	movs	r1, #1
 800c584:	4815      	ldr	r0, [pc, #84]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c586:	f000 fccc 	bl	800cf22 <USBD_GetEpDesc>
 800c58a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c58c:	2181      	movs	r1, #129	; 0x81
 800c58e:	4813      	ldr	r0, [pc, #76]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c590:	f000 fcc7 	bl	800cf22 <USBD_GetEpDesc>
 800c594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2210      	movs	r2, #16
 800c5a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d006      	beq.n	800c5b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	711a      	strb	r2, [r3, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f042 0202 	orr.w	r2, r2, #2
 800c5b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d006      	beq.n	800c5ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	711a      	strb	r2, [r3, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f042 0202 	orr.w	r2, r2, #2
 800c5c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2243      	movs	r2, #67	; 0x43
 800c5ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20000054 	.word	0x20000054

0800c5e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5e8:	2182      	movs	r1, #130	; 0x82
 800c5ea:	4818      	ldr	r0, [pc, #96]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5ec:	f000 fc99 	bl	800cf22 <USBD_GetEpDesc>
 800c5f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	4815      	ldr	r0, [pc, #84]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5f6:	f000 fc94 	bl	800cf22 <USBD_GetEpDesc>
 800c5fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5fc:	2181      	movs	r1, #129	; 0x81
 800c5fe:	4813      	ldr	r0, [pc, #76]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c600:	f000 fc8f 	bl	800cf22 <USBD_GetEpDesc>
 800c604:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2210      	movs	r2, #16
 800c610:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d006      	beq.n	800c626 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c620:	711a      	strb	r2, [r3, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d006      	beq.n	800c63a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c634:	711a      	strb	r2, [r3, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2243      	movs	r2, #67	; 0x43
 800c63e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c640:	4b02      	ldr	r3, [pc, #8]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	20000054 	.word	0x20000054

0800c650 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	220a      	movs	r2, #10
 800c65c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c65e:	4b03      	ldr	r3, [pc, #12]	; (800c66c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20000010 	.word	0x20000010

0800c670 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c680:	2303      	movs	r3, #3
 800c682:	e009      	b.n	800c698 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	33b0      	adds	r3, #176	; 0xb0
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	32b0      	adds	r2, #176	; 0xb0
 800c6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e008      	b.n	800c6dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	32b0      	adds	r2, #176	; 0xb0
 800c6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c700:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c708:	2303      	movs	r3, #3
 800c70a:	e004      	b.n	800c716 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
	...

0800c724 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	32b0      	adds	r2, #176	; 0xb0
 800c736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c73a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	32b0      	adds	r2, #176	; 0xb0
 800c746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d101      	bne.n	800c752 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c74e:	2303      	movs	r3, #3
 800c750:	e018      	b.n	800c784 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	7c1b      	ldrb	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10a      	bne.n	800c770 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <USBD_CDC_ReceivePacket+0x68>)
 800c75c:	7819      	ldrb	r1, [r3, #0]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c764:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f004 fdd3 	bl	8011314 <USBD_LL_PrepareReceive>
 800c76e:	e008      	b.n	800c782 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c770:	4b06      	ldr	r3, [pc, #24]	; (800c78c <USBD_CDC_ReceivePacket+0x68>)
 800c772:	7819      	ldrb	r1, [r3, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c77a:	2340      	movs	r3, #64	; 0x40
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f004 fdc9 	bl	8011314 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20000098 	.word	0x20000098

0800c790 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	4613      	mov	r3, r2
 800c79c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e01f      	b.n	800c7e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	79fa      	ldrb	r2, [r7, #7]
 800c7da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f004 fc43 	bl	8011068 <USBD_LL_Init>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c804:	2303      	movs	r3, #3
 800c806:	e025      	b.n	800c854 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	32ae      	adds	r2, #174	; 0xae
 800c81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00f      	beq.n	800c844 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	32ae      	adds	r2, #174	; 0xae
 800c82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c834:	f107 020e 	add.w	r2, r7, #14
 800c838:	4610      	mov	r0, r2
 800c83a:	4798      	blx	r3
 800c83c:	4602      	mov	r2, r0
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f004 fc4b 	bl	8011100 <USBD_LL_Start>
 800c86a:	4603      	mov	r3, r0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c87c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c87e:	4618      	mov	r0, r3
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	460b      	mov	r3, r1
 800c894:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d009      	beq.n	800c8b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	78fa      	ldrb	r2, [r7, #3]
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	4798      	blx	r3
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	4611      	mov	r1, r2
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	4798      	blx	r3
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	f001 f932 	bl	800db72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c91c:	461a      	mov	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c92a:	f003 031f 	and.w	r3, r3, #31
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d01a      	beq.n	800c968 <USBD_LL_SetupStage+0x72>
 800c932:	2b02      	cmp	r3, #2
 800c934:	d822      	bhi.n	800c97c <USBD_LL_SetupStage+0x86>
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <USBD_LL_SetupStage+0x4a>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d00a      	beq.n	800c954 <USBD_LL_SetupStage+0x5e>
 800c93e:	e01d      	b.n	800c97c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fb5f 	bl	800d00c <USBD_StdDevReq>
 800c94e:	4603      	mov	r3, r0
 800c950:	73fb      	strb	r3, [r7, #15]
      break;
 800c952:	e020      	b.n	800c996 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fbc7 	bl	800d0f0 <USBD_StdItfReq>
 800c962:	4603      	mov	r3, r0
 800c964:	73fb      	strb	r3, [r7, #15]
      break;
 800c966:	e016      	b.n	800c996 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fc29 	bl	800d1c8 <USBD_StdEPReq>
 800c976:	4603      	mov	r3, r0
 800c978:	73fb      	strb	r3, [r7, #15]
      break;
 800c97a:	e00c      	b.n	800c996 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c982:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c986:	b2db      	uxtb	r3, r3
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f004 fc18 	bl	80111c0 <USBD_LL_StallEP>
 800c990:	4603      	mov	r3, r0
 800c992:	73fb      	strb	r3, [r7, #15]
      break;
 800c994:	bf00      	nop
  }

  return ret;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d16e      	bne.n	800ca96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c9be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	f040 8098 	bne.w	800cafc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	689a      	ldr	r2, [r3, #8]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d913      	bls.n	800ca00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	689a      	ldr	r2, [r3, #8]
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	1ad2      	subs	r2, r2, r3
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	bf28      	it	cs
 800c9f2:	4613      	movcs	r3, r2
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f001 f9ae 	bl	800dd5a <USBD_CtlContinueRx>
 800c9fe:	e07d      	b.n	800cafc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca06:	f003 031f 	and.w	r3, r3, #31
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d014      	beq.n	800ca38 <USBD_LL_DataOutStage+0x98>
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d81d      	bhi.n	800ca4e <USBD_LL_DataOutStage+0xae>
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <USBD_LL_DataOutStage+0x7c>
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d003      	beq.n	800ca22 <USBD_LL_DataOutStage+0x82>
 800ca1a:	e018      	b.n	800ca4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	75bb      	strb	r3, [r7, #22]
            break;
 800ca20:	e018      	b.n	800ca54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fa5e 	bl	800ceee <USBD_CoreFindIF>
 800ca32:	4603      	mov	r3, r0
 800ca34:	75bb      	strb	r3, [r7, #22]
            break;
 800ca36:	e00d      	b.n	800ca54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	4619      	mov	r1, r3
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f000 fa60 	bl	800cf08 <USBD_CoreFindEP>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	75bb      	strb	r3, [r7, #22]
            break;
 800ca4c:	e002      	b.n	800ca54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75bb      	strb	r3, [r7, #22]
            break;
 800ca52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca54:	7dbb      	ldrb	r3, [r7, #22]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d119      	bne.n	800ca8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d113      	bne.n	800ca8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca66:	7dba      	ldrb	r2, [r7, #22]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	32ae      	adds	r2, #174	; 0xae
 800ca6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00b      	beq.n	800ca8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca76:	7dba      	ldrb	r2, [r7, #22]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca7e:	7dba      	ldrb	r2, [r7, #22]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	32ae      	adds	r2, #174	; 0xae
 800ca84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f001 f974 	bl	800dd7c <USBD_CtlSendStatus>
 800ca94:	e032      	b.n	800cafc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca96:	7afb      	ldrb	r3, [r7, #11]
 800ca98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	4619      	mov	r1, r3
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 fa31 	bl	800cf08 <USBD_CoreFindEP>
 800caa6:	4603      	mov	r3, r0
 800caa8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caaa:	7dbb      	ldrb	r3, [r7, #22]
 800caac:	2bff      	cmp	r3, #255	; 0xff
 800caae:	d025      	beq.n	800cafc <USBD_LL_DataOutStage+0x15c>
 800cab0:	7dbb      	ldrb	r3, [r7, #22]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d122      	bne.n	800cafc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d117      	bne.n	800caf2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cac2:	7dba      	ldrb	r2, [r7, #22]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	32ae      	adds	r2, #174	; 0xae
 800cac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cacc:	699b      	ldr	r3, [r3, #24]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00f      	beq.n	800caf2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cad2:	7dba      	ldrb	r2, [r7, #22]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cada:	7dba      	ldrb	r2, [r7, #22]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	32ae      	adds	r2, #174	; 0xae
 800cae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	7afa      	ldrb	r2, [r7, #11]
 800cae8:	4611      	mov	r1, r2
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	4798      	blx	r3
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	e000      	b.n	800cafe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	460b      	mov	r3, r1
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb14:	7afb      	ldrb	r3, [r7, #11]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d16f      	bne.n	800cbfa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3314      	adds	r3, #20
 800cb1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d15a      	bne.n	800cbe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	689a      	ldr	r2, [r3, #8]
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d914      	bls.n	800cb60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	689a      	ldr	r2, [r3, #8]
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	6879      	ldr	r1, [r7, #4]
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f001 f8d6 	bl	800dcfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb52:	2300      	movs	r3, #0
 800cb54:	2200      	movs	r2, #0
 800cb56:	2100      	movs	r1, #0
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f004 fbdb 	bl	8011314 <USBD_LL_PrepareReceive>
 800cb5e:	e03f      	b.n	800cbe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	68da      	ldr	r2, [r3, #12]
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d11c      	bne.n	800cba6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d316      	bcc.n	800cba6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d20f      	bcs.n	800cba6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb86:	2200      	movs	r2, #0
 800cb88:	2100      	movs	r1, #0
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f001 f8b7 	bl	800dcfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb98:	2300      	movs	r3, #0
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f004 fbb8 	bl	8011314 <USBD_LL_PrepareReceive>
 800cba4:	e01c      	b.n	800cbe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d10f      	bne.n	800cbd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbd2:	2180      	movs	r1, #128	; 0x80
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f004 faf3 	bl	80111c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f001 f8e1 	bl	800dda2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d03a      	beq.n	800cc60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff fe42 	bl	800c874 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cbf8:	e032      	b.n	800cc60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	4619      	mov	r1, r3
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f000 f97f 	bl	800cf08 <USBD_CoreFindEP>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	2bff      	cmp	r3, #255	; 0xff
 800cc12:	d025      	beq.n	800cc60 <USBD_LL_DataInStage+0x15a>
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d122      	bne.n	800cc60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d11c      	bne.n	800cc60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc26:	7dfa      	ldrb	r2, [r7, #23]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	32ae      	adds	r2, #174	; 0xae
 800cc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d014      	beq.n	800cc60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc36:	7dfa      	ldrb	r2, [r7, #23]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc3e:	7dfa      	ldrb	r2, [r7, #23]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	32ae      	adds	r2, #174	; 0xae
 800cc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	7afa      	ldrb	r2, [r7, #11]
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	4798      	blx	r3
 800cc52:	4603      	mov	r3, r0
 800cc54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc56:	7dbb      	ldrb	r3, [r7, #22]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d001      	beq.n	800cc60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc5c:	7dbb      	ldrb	r3, [r7, #22]
 800cc5e:	e000      	b.n	800cc62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3718      	adds	r7, #24
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d014      	beq.n	800ccd0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00e      	beq.n	800ccd0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	6852      	ldr	r2, [r2, #4]
 800ccbe:	b2d2      	uxtb	r2, r2
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	4798      	blx	r3
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cccc:	2303      	movs	r3, #3
 800ccce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccd0:	2340      	movs	r3, #64	; 0x40
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f004 fa2d 	bl	8011136 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2240      	movs	r2, #64	; 0x40
 800cce8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccec:	2340      	movs	r3, #64	; 0x40
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2180      	movs	r1, #128	; 0x80
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f004 fa1f 	bl	8011136 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2240      	movs	r2, #64	; 0x40
 800cd02:	621a      	str	r2, [r3, #32]

  return ret;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b083      	sub	sp, #12
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	460b      	mov	r3, r1
 800cd18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	78fa      	ldrb	r2, [r7, #3]
 800cd1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2204      	movs	r2, #4
 800cd48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2b04      	cmp	r3, #4
 800cd6c:	d106      	bne.n	800cd7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b03      	cmp	r3, #3
 800cd9c:	d110      	bne.n	800cdc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00b      	beq.n	800cdc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d005      	beq.n	800cdc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdba:	69db      	ldr	r3, [r3, #28]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b082      	sub	sp, #8
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	32ae      	adds	r2, #174	; 0xae
 800cde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cde8:	2303      	movs	r3, #3
 800cdea:	e01c      	b.n	800ce26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d115      	bne.n	800ce24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	32ae      	adds	r2, #174	; 0xae
 800ce02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	32ae      	adds	r2, #174	; 0xae
 800ce16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce1a:	6a1b      	ldr	r3, [r3, #32]
 800ce1c:	78fa      	ldrb	r2, [r7, #3]
 800ce1e:	4611      	mov	r1, r2
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	32ae      	adds	r2, #174	; 0xae
 800ce44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce4c:	2303      	movs	r3, #3
 800ce4e:	e01c      	b.n	800ce8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b03      	cmp	r3, #3
 800ce5a:	d115      	bne.n	800ce88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	32ae      	adds	r2, #174	; 0xae
 800ce66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00b      	beq.n	800ce88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	32ae      	adds	r2, #174	; 0xae
 800ce7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	78fa      	ldrb	r2, [r7, #3]
 800ce82:	4611      	mov	r1, r2
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ce92:	b480      	push	{r7}
 800ce94:	b083      	sub	sp, #12
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00e      	beq.n	800cee4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	6852      	ldr	r2, [r2, #4]
 800ced2:	b2d2      	uxtb	r2, r2
 800ced4:	4611      	mov	r1, r2
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	4798      	blx	r3
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cee0:	2303      	movs	r3, #3
 800cee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cefa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b086      	sub	sp, #24
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	885b      	ldrh	r3, [r3, #2]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d920      	bls.n	800cf8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cf52:	e013      	b.n	800cf7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cf54:	f107 030a 	add.w	r3, r7, #10
 800cf58:	4619      	mov	r1, r3
 800cf5a:	6978      	ldr	r0, [r7, #20]
 800cf5c:	f000 f81b 	bl	800cf96 <USBD_GetNextDesc>
 800cf60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	785b      	ldrb	r3, [r3, #1]
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	d108      	bne.n	800cf7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	789b      	ldrb	r3, [r3, #2]
 800cf72:	78fa      	ldrb	r2, [r7, #3]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d008      	beq.n	800cf8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	885b      	ldrh	r3, [r3, #2]
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	897b      	ldrh	r3, [r7, #10]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d8e5      	bhi.n	800cf54 <USBD_GetEpDesc+0x32>
 800cf88:	e000      	b.n	800cf8c <USBD_GetEpDesc+0x6a>
          break;
 800cf8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cf8c:	693b      	ldr	r3, [r7, #16]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b085      	sub	sp, #20
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	881a      	ldrh	r2, [r3, #0]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4413      	add	r3, r2
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cfee:	8a3b      	ldrh	r3, [r7, #16]
 800cff0:	021b      	lsls	r3, r3, #8
 800cff2:	b21a      	sxth	r2, r3
 800cff4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	b21b      	sxth	r3, r3
 800cffc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cffe:	89fb      	ldrh	r3, [r7, #14]
}
 800d000:	4618      	mov	r0, r3
 800d002:	371c      	adds	r7, #28
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d022:	2b40      	cmp	r3, #64	; 0x40
 800d024:	d005      	beq.n	800d032 <USBD_StdDevReq+0x26>
 800d026:	2b40      	cmp	r3, #64	; 0x40
 800d028:	d857      	bhi.n	800d0da <USBD_StdDevReq+0xce>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00f      	beq.n	800d04e <USBD_StdDevReq+0x42>
 800d02e:	2b20      	cmp	r3, #32
 800d030:	d153      	bne.n	800d0da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	32ae      	adds	r2, #174	; 0xae
 800d03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	4798      	blx	r3
 800d048:	4603      	mov	r3, r0
 800d04a:	73fb      	strb	r3, [r7, #15]
      break;
 800d04c:	e04a      	b.n	800d0e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	785b      	ldrb	r3, [r3, #1]
 800d052:	2b09      	cmp	r3, #9
 800d054:	d83b      	bhi.n	800d0ce <USBD_StdDevReq+0xc2>
 800d056:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <USBD_StdDevReq+0x50>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d0b1 	.word	0x0800d0b1
 800d060:	0800d0c5 	.word	0x0800d0c5
 800d064:	0800d0cf 	.word	0x0800d0cf
 800d068:	0800d0bb 	.word	0x0800d0bb
 800d06c:	0800d0cf 	.word	0x0800d0cf
 800d070:	0800d08f 	.word	0x0800d08f
 800d074:	0800d085 	.word	0x0800d085
 800d078:	0800d0cf 	.word	0x0800d0cf
 800d07c:	0800d0a7 	.word	0x0800d0a7
 800d080:	0800d099 	.word	0x0800d099
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fa3c 	bl	800d504 <USBD_GetDescriptor>
          break;
 800d08c:	e024      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fbcb 	bl	800d82c <USBD_SetAddress>
          break;
 800d096:	e01f      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fc0a 	bl	800d8b4 <USBD_SetConfig>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]
          break;
 800d0a4:	e018      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fcad 	bl	800da08 <USBD_GetConfig>
          break;
 800d0ae:	e013      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fcde 	bl	800da74 <USBD_GetStatus>
          break;
 800d0b8:	e00e      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fd0d 	bl	800dadc <USBD_SetFeature>
          break;
 800d0c2:	e009      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fd31 	bl	800db2e <USBD_ClrFeature>
          break;
 800d0cc:	e004      	b.n	800d0d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fd88 	bl	800dbe6 <USBD_CtlError>
          break;
 800d0d6:	bf00      	nop
      }
      break;
 800d0d8:	e004      	b.n	800d0e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fd82 	bl	800dbe6 <USBD_CtlError>
      break;
 800d0e2:	bf00      	nop
  }

  return ret;
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop

0800d0f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d106:	2b40      	cmp	r3, #64	; 0x40
 800d108:	d005      	beq.n	800d116 <USBD_StdItfReq+0x26>
 800d10a:	2b40      	cmp	r3, #64	; 0x40
 800d10c:	d852      	bhi.n	800d1b4 <USBD_StdItfReq+0xc4>
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <USBD_StdItfReq+0x26>
 800d112:	2b20      	cmp	r3, #32
 800d114:	d14e      	bne.n	800d1b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	3b01      	subs	r3, #1
 800d120:	2b02      	cmp	r3, #2
 800d122:	d840      	bhi.n	800d1a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	889b      	ldrh	r3, [r3, #4]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d836      	bhi.n	800d19c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	889b      	ldrh	r3, [r3, #4]
 800d132:	b2db      	uxtb	r3, r3
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fed9 	bl	800ceee <USBD_CoreFindIF>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	2bff      	cmp	r3, #255	; 0xff
 800d144:	d01d      	beq.n	800d182 <USBD_StdItfReq+0x92>
 800d146:	7bbb      	ldrb	r3, [r7, #14]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d11a      	bne.n	800d182 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d14c:	7bba      	ldrb	r2, [r7, #14]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	32ae      	adds	r2, #174	; 0xae
 800d152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00f      	beq.n	800d17c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d15c:	7bba      	ldrb	r2, [r7, #14]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d164:	7bba      	ldrb	r2, [r7, #14]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	32ae      	adds	r2, #174	; 0xae
 800d16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	4798      	blx	r3
 800d176:	4603      	mov	r3, r0
 800d178:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d17a:	e004      	b.n	800d186 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d17c:	2303      	movs	r3, #3
 800d17e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d180:	e001      	b.n	800d186 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d182:	2303      	movs	r3, #3
 800d184:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	88db      	ldrh	r3, [r3, #6]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d110      	bne.n	800d1b0 <USBD_StdItfReq+0xc0>
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10d      	bne.n	800d1b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fdf1 	bl	800dd7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d19a:	e009      	b.n	800d1b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fd21 	bl	800dbe6 <USBD_CtlError>
          break;
 800d1a4:	e004      	b.n	800d1b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fd1c 	bl	800dbe6 <USBD_CtlError>
          break;
 800d1ae:	e000      	b.n	800d1b2 <USBD_StdItfReq+0xc2>
          break;
 800d1b0:	bf00      	nop
      }
      break;
 800d1b2:	e004      	b.n	800d1be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fd15 	bl	800dbe6 <USBD_CtlError>
      break;
 800d1bc:	bf00      	nop
  }

  return ret;
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	889b      	ldrh	r3, [r3, #4]
 800d1da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1e4:	2b40      	cmp	r3, #64	; 0x40
 800d1e6:	d007      	beq.n	800d1f8 <USBD_StdEPReq+0x30>
 800d1e8:	2b40      	cmp	r3, #64	; 0x40
 800d1ea:	f200 817f 	bhi.w	800d4ec <USBD_StdEPReq+0x324>
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d02a      	beq.n	800d248 <USBD_StdEPReq+0x80>
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	f040 817a 	bne.w	800d4ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1f8:	7bbb      	ldrb	r3, [r7, #14]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff fe83 	bl	800cf08 <USBD_CoreFindEP>
 800d202:	4603      	mov	r3, r0
 800d204:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d206:	7b7b      	ldrb	r3, [r7, #13]
 800d208:	2bff      	cmp	r3, #255	; 0xff
 800d20a:	f000 8174 	beq.w	800d4f6 <USBD_StdEPReq+0x32e>
 800d20e:	7b7b      	ldrb	r3, [r7, #13]
 800d210:	2b00      	cmp	r3, #0
 800d212:	f040 8170 	bne.w	800d4f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d216:	7b7a      	ldrb	r2, [r7, #13]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d21e:	7b7a      	ldrb	r2, [r7, #13]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	32ae      	adds	r2, #174	; 0xae
 800d224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 8163 	beq.w	800d4f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d230:	7b7a      	ldrb	r2, [r7, #13]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	32ae      	adds	r2, #174	; 0xae
 800d236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	4798      	blx	r3
 800d242:	4603      	mov	r3, r0
 800d244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d246:	e156      	b.n	800d4f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	d008      	beq.n	800d262 <USBD_StdEPReq+0x9a>
 800d250:	2b03      	cmp	r3, #3
 800d252:	f300 8145 	bgt.w	800d4e0 <USBD_StdEPReq+0x318>
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 809b 	beq.w	800d392 <USBD_StdEPReq+0x1ca>
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d03c      	beq.n	800d2da <USBD_StdEPReq+0x112>
 800d260:	e13e      	b.n	800d4e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d002      	beq.n	800d274 <USBD_StdEPReq+0xac>
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d016      	beq.n	800d2a0 <USBD_StdEPReq+0xd8>
 800d272:	e02c      	b.n	800d2ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d274:	7bbb      	ldrb	r3, [r7, #14]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00d      	beq.n	800d296 <USBD_StdEPReq+0xce>
 800d27a:	7bbb      	ldrb	r3, [r7, #14]
 800d27c:	2b80      	cmp	r3, #128	; 0x80
 800d27e:	d00a      	beq.n	800d296 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d280:	7bbb      	ldrb	r3, [r7, #14]
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f003 ff9b 	bl	80111c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d28a:	2180      	movs	r1, #128	; 0x80
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f003 ff97 	bl	80111c0 <USBD_LL_StallEP>
 800d292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d294:	e020      	b.n	800d2d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fca4 	bl	800dbe6 <USBD_CtlError>
              break;
 800d29e:	e01b      	b.n	800d2d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	885b      	ldrh	r3, [r3, #2]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10e      	bne.n	800d2c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00b      	beq.n	800d2c6 <USBD_StdEPReq+0xfe>
 800d2ae:	7bbb      	ldrb	r3, [r7, #14]
 800d2b0:	2b80      	cmp	r3, #128	; 0x80
 800d2b2:	d008      	beq.n	800d2c6 <USBD_StdEPReq+0xfe>
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	88db      	ldrh	r3, [r3, #6]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d104      	bne.n	800d2c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f003 ff7d 	bl	80111c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fd58 	bl	800dd7c <USBD_CtlSendStatus>

              break;
 800d2cc:	e004      	b.n	800d2d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fc88 	bl	800dbe6 <USBD_CtlError>
              break;
 800d2d6:	bf00      	nop
          }
          break;
 800d2d8:	e107      	b.n	800d4ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d002      	beq.n	800d2ec <USBD_StdEPReq+0x124>
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	d016      	beq.n	800d318 <USBD_StdEPReq+0x150>
 800d2ea:	e04b      	b.n	800d384 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2ec:	7bbb      	ldrb	r3, [r7, #14]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00d      	beq.n	800d30e <USBD_StdEPReq+0x146>
 800d2f2:	7bbb      	ldrb	r3, [r7, #14]
 800d2f4:	2b80      	cmp	r3, #128	; 0x80
 800d2f6:	d00a      	beq.n	800d30e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2f8:	7bbb      	ldrb	r3, [r7, #14]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f003 ff5f 	bl	80111c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d302:	2180      	movs	r1, #128	; 0x80
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f003 ff5b 	bl	80111c0 <USBD_LL_StallEP>
 800d30a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d30c:	e040      	b.n	800d390 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 fc68 	bl	800dbe6 <USBD_CtlError>
              break;
 800d316:	e03b      	b.n	800d390 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	885b      	ldrh	r3, [r3, #2]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d136      	bne.n	800d38e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d320:	7bbb      	ldrb	r3, [r7, #14]
 800d322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d326:	2b00      	cmp	r3, #0
 800d328:	d004      	beq.n	800d334 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f003 ff65 	bl	80111fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fd21 	bl	800dd7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fde2 	bl	800cf08 <USBD_CoreFindEP>
 800d344:	4603      	mov	r3, r0
 800d346:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d348:	7b7b      	ldrb	r3, [r7, #13]
 800d34a:	2bff      	cmp	r3, #255	; 0xff
 800d34c:	d01f      	beq.n	800d38e <USBD_StdEPReq+0x1c6>
 800d34e:	7b7b      	ldrb	r3, [r7, #13]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d11c      	bne.n	800d38e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d354:	7b7a      	ldrb	r2, [r7, #13]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d35c:	7b7a      	ldrb	r2, [r7, #13]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	32ae      	adds	r2, #174	; 0xae
 800d362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d010      	beq.n	800d38e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d36c:	7b7a      	ldrb	r2, [r7, #13]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	32ae      	adds	r2, #174	; 0xae
 800d372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	4798      	blx	r3
 800d37e:	4603      	mov	r3, r0
 800d380:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d382:	e004      	b.n	800d38e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fc2d 	bl	800dbe6 <USBD_CtlError>
              break;
 800d38c:	e000      	b.n	800d390 <USBD_StdEPReq+0x1c8>
              break;
 800d38e:	bf00      	nop
          }
          break;
 800d390:	e0ab      	b.n	800d4ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d002      	beq.n	800d3a4 <USBD_StdEPReq+0x1dc>
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d032      	beq.n	800d408 <USBD_StdEPReq+0x240>
 800d3a2:	e097      	b.n	800d4d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d007      	beq.n	800d3ba <USBD_StdEPReq+0x1f2>
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
 800d3ac:	2b80      	cmp	r3, #128	; 0x80
 800d3ae:	d004      	beq.n	800d3ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d3b0:	6839      	ldr	r1, [r7, #0]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fc17 	bl	800dbe6 <USBD_CtlError>
                break;
 800d3b8:	e091      	b.n	800d4de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	da0b      	bge.n	800d3da <USBD_StdEPReq+0x212>
 800d3c2:	7bbb      	ldrb	r3, [r7, #14]
 800d3c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4413      	add	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	3310      	adds	r3, #16
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	e00b      	b.n	800d3f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3da:	7bbb      	ldrb	r3, [r7, #14]
 800d3dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	4619      	mov	r1, r3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fc61 	bl	800dcc8 <USBD_CtlSendData>
              break;
 800d406:	e06a      	b.n	800d4de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	da11      	bge.n	800d434 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	f003 020f 	and.w	r2, r3, #15
 800d416:	6879      	ldr	r1, [r7, #4]
 800d418:	4613      	mov	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	440b      	add	r3, r1
 800d422:	3324      	adds	r3, #36	; 0x24
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d117      	bne.n	800d45a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 fbda 	bl	800dbe6 <USBD_CtlError>
                  break;
 800d432:	e054      	b.n	800d4de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d434:	7bbb      	ldrb	r3, [r7, #14]
 800d436:	f003 020f 	and.w	r2, r3, #15
 800d43a:	6879      	ldr	r1, [r7, #4]
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	440b      	add	r3, r1
 800d446:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fbc7 	bl	800dbe6 <USBD_CtlError>
                  break;
 800d458:	e041      	b.n	800d4de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d45a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da0b      	bge.n	800d47a <USBD_StdEPReq+0x2b2>
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d468:	4613      	mov	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	3310      	adds	r3, #16
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	4413      	add	r3, r2
 800d476:	3304      	adds	r3, #4
 800d478:	e00b      	b.n	800d492 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d47a:	7bbb      	ldrb	r3, [r7, #14]
 800d47c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	4413      	add	r3, r2
 800d490:	3304      	adds	r3, #4
 800d492:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <USBD_StdEPReq+0x2d8>
 800d49a:	7bbb      	ldrb	r3, [r7, #14]
 800d49c:	2b80      	cmp	r3, #128	; 0x80
 800d49e:	d103      	bne.n	800d4a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	e00e      	b.n	800d4c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f003 fec5 	bl	801123c <USBD_LL_IsStallEP>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e002      	b.n	800d4c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fbfb 	bl	800dcc8 <USBD_CtlSendData>
              break;
 800d4d2:	e004      	b.n	800d4de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fb85 	bl	800dbe6 <USBD_CtlError>
              break;
 800d4dc:	bf00      	nop
          }
          break;
 800d4de:	e004      	b.n	800d4ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fb7f 	bl	800dbe6 <USBD_CtlError>
          break;
 800d4e8:	bf00      	nop
      }
      break;
 800d4ea:	e005      	b.n	800d4f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fb79 	bl	800dbe6 <USBD_CtlError>
      break;
 800d4f4:	e000      	b.n	800d4f8 <USBD_StdEPReq+0x330>
      break;
 800d4f6:	bf00      	nop
  }

  return ret;
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
	...

0800d504 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d50e:	2300      	movs	r3, #0
 800d510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	885b      	ldrh	r3, [r3, #2]
 800d51e:	0a1b      	lsrs	r3, r3, #8
 800d520:	b29b      	uxth	r3, r3
 800d522:	3b01      	subs	r3, #1
 800d524:	2b0e      	cmp	r3, #14
 800d526:	f200 8152 	bhi.w	800d7ce <USBD_GetDescriptor+0x2ca>
 800d52a:	a201      	add	r2, pc, #4	; (adr r2, 800d530 <USBD_GetDescriptor+0x2c>)
 800d52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d530:	0800d5a1 	.word	0x0800d5a1
 800d534:	0800d5b9 	.word	0x0800d5b9
 800d538:	0800d5f9 	.word	0x0800d5f9
 800d53c:	0800d7cf 	.word	0x0800d7cf
 800d540:	0800d7cf 	.word	0x0800d7cf
 800d544:	0800d76f 	.word	0x0800d76f
 800d548:	0800d79b 	.word	0x0800d79b
 800d54c:	0800d7cf 	.word	0x0800d7cf
 800d550:	0800d7cf 	.word	0x0800d7cf
 800d554:	0800d7cf 	.word	0x0800d7cf
 800d558:	0800d7cf 	.word	0x0800d7cf
 800d55c:	0800d7cf 	.word	0x0800d7cf
 800d560:	0800d7cf 	.word	0x0800d7cf
 800d564:	0800d7cf 	.word	0x0800d7cf
 800d568:	0800d56d 	.word	0x0800d56d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d572:	69db      	ldr	r3, [r3, #28]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	7c12      	ldrb	r2, [r2, #16]
 800d584:	f107 0108 	add.w	r1, r7, #8
 800d588:	4610      	mov	r0, r2
 800d58a:	4798      	blx	r3
 800d58c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d58e:	e126      	b.n	800d7de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fb27 	bl	800dbe6 <USBD_CtlError>
        err++;
 800d598:	7afb      	ldrb	r3, [r7, #11]
 800d59a:	3301      	adds	r3, #1
 800d59c:	72fb      	strb	r3, [r7, #11]
      break;
 800d59e:	e11e      	b.n	800d7de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	7c12      	ldrb	r2, [r2, #16]
 800d5ac:	f107 0108 	add.w	r1, r7, #8
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4798      	blx	r3
 800d5b4:	60f8      	str	r0, [r7, #12]
      break;
 800d5b6:	e112      	b.n	800d7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7c1b      	ldrb	r3, [r3, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10d      	bne.n	800d5dc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c8:	f107 0208 	add.w	r2, r7, #8
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	4798      	blx	r3
 800d5d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d5da:	e100      	b.n	800d7de <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e4:	f107 0208 	add.w	r2, r7, #8
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	4798      	blx	r3
 800d5ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	701a      	strb	r2, [r3, #0]
      break;
 800d5f6:	e0f2      	b.n	800d7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	885b      	ldrh	r3, [r3, #2]
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b05      	cmp	r3, #5
 800d600:	f200 80ac 	bhi.w	800d75c <USBD_GetDescriptor+0x258>
 800d604:	a201      	add	r2, pc, #4	; (adr r2, 800d60c <USBD_GetDescriptor+0x108>)
 800d606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60a:	bf00      	nop
 800d60c:	0800d625 	.word	0x0800d625
 800d610:	0800d659 	.word	0x0800d659
 800d614:	0800d68d 	.word	0x0800d68d
 800d618:	0800d6c1 	.word	0x0800d6c1
 800d61c:	0800d6f5 	.word	0x0800d6f5
 800d620:	0800d729 	.word	0x0800d729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00b      	beq.n	800d648 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	7c12      	ldrb	r2, [r2, #16]
 800d63c:	f107 0108 	add.w	r1, r7, #8
 800d640:	4610      	mov	r0, r2
 800d642:	4798      	blx	r3
 800d644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d646:	e091      	b.n	800d76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 facb 	bl	800dbe6 <USBD_CtlError>
            err++;
 800d650:	7afb      	ldrb	r3, [r7, #11]
 800d652:	3301      	adds	r3, #1
 800d654:	72fb      	strb	r3, [r7, #11]
          break;
 800d656:	e089      	b.n	800d76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00b      	beq.n	800d67c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	7c12      	ldrb	r2, [r2, #16]
 800d670:	f107 0108 	add.w	r1, r7, #8
 800d674:	4610      	mov	r0, r2
 800d676:	4798      	blx	r3
 800d678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d67a:	e077      	b.n	800d76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fab1 	bl	800dbe6 <USBD_CtlError>
            err++;
 800d684:	7afb      	ldrb	r3, [r7, #11]
 800d686:	3301      	adds	r3, #1
 800d688:	72fb      	strb	r3, [r7, #11]
          break;
 800d68a:	e06f      	b.n	800d76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	7c12      	ldrb	r2, [r2, #16]
 800d6a4:	f107 0108 	add.w	r1, r7, #8
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	4798      	blx	r3
 800d6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ae:	e05d      	b.n	800d76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fa97 	bl	800dbe6 <USBD_CtlError>
            err++;
 800d6b8:	7afb      	ldrb	r3, [r7, #11]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6be:	e055      	b.n	800d76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00b      	beq.n	800d6e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	7c12      	ldrb	r2, [r2, #16]
 800d6d8:	f107 0108 	add.w	r1, r7, #8
 800d6dc:	4610      	mov	r0, r2
 800d6de:	4798      	blx	r3
 800d6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6e2:	e043      	b.n	800d76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 fa7d 	bl	800dbe6 <USBD_CtlError>
            err++;
 800d6ec:	7afb      	ldrb	r3, [r7, #11]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6f2:	e03b      	b.n	800d76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6fa:	695b      	ldr	r3, [r3, #20]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00b      	beq.n	800d718 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	7c12      	ldrb	r2, [r2, #16]
 800d70c:	f107 0108 	add.w	r1, r7, #8
 800d710:	4610      	mov	r0, r2
 800d712:	4798      	blx	r3
 800d714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d716:	e029      	b.n	800d76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fa63 	bl	800dbe6 <USBD_CtlError>
            err++;
 800d720:	7afb      	ldrb	r3, [r7, #11]
 800d722:	3301      	adds	r3, #1
 800d724:	72fb      	strb	r3, [r7, #11]
          break;
 800d726:	e021      	b.n	800d76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d72e:	699b      	ldr	r3, [r3, #24]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00b      	beq.n	800d74c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	7c12      	ldrb	r2, [r2, #16]
 800d740:	f107 0108 	add.w	r1, r7, #8
 800d744:	4610      	mov	r0, r2
 800d746:	4798      	blx	r3
 800d748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d74a:	e00f      	b.n	800d76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 fa49 	bl	800dbe6 <USBD_CtlError>
            err++;
 800d754:	7afb      	ldrb	r3, [r7, #11]
 800d756:	3301      	adds	r3, #1
 800d758:	72fb      	strb	r3, [r7, #11]
          break;
 800d75a:	e007      	b.n	800d76c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fa41 	bl	800dbe6 <USBD_CtlError>
          err++;
 800d764:	7afb      	ldrb	r3, [r7, #11]
 800d766:	3301      	adds	r3, #1
 800d768:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d76a:	bf00      	nop
      }
      break;
 800d76c:	e037      	b.n	800d7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	7c1b      	ldrb	r3, [r3, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d109      	bne.n	800d78a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77e:	f107 0208 	add.w	r2, r7, #8
 800d782:	4610      	mov	r0, r2
 800d784:	4798      	blx	r3
 800d786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d788:	e029      	b.n	800d7de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 fa2a 	bl	800dbe6 <USBD_CtlError>
        err++;
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	3301      	adds	r3, #1
 800d796:	72fb      	strb	r3, [r7, #11]
      break;
 800d798:	e021      	b.n	800d7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	7c1b      	ldrb	r3, [r3, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10d      	bne.n	800d7be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7aa:	f107 0208 	add.w	r2, r7, #8
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	4798      	blx	r3
 800d7b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	2207      	movs	r2, #7
 800d7ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7bc:	e00f      	b.n	800d7de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fa10 	bl	800dbe6 <USBD_CtlError>
        err++;
 800d7c6:	7afb      	ldrb	r3, [r7, #11]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d7cc:	e007      	b.n	800d7de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fa08 	bl	800dbe6 <USBD_CtlError>
      err++;
 800d7d6:	7afb      	ldrb	r3, [r7, #11]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	72fb      	strb	r3, [r7, #11]
      break;
 800d7dc:	bf00      	nop
  }

  if (err != 0U)
 800d7de:	7afb      	ldrb	r3, [r7, #11]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d11e      	bne.n	800d822 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	88db      	ldrh	r3, [r3, #6]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d016      	beq.n	800d81a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d7ec:	893b      	ldrh	r3, [r7, #8]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00e      	beq.n	800d810 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	88da      	ldrh	r2, [r3, #6]
 800d7f6:	893b      	ldrh	r3, [r7, #8]
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	bf28      	it	cs
 800d7fc:	4613      	movcs	r3, r2
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d802:	893b      	ldrh	r3, [r7, #8]
 800d804:	461a      	mov	r2, r3
 800d806:	68f9      	ldr	r1, [r7, #12]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fa5d 	bl	800dcc8 <USBD_CtlSendData>
 800d80e:	e009      	b.n	800d824 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f9e7 	bl	800dbe6 <USBD_CtlError>
 800d818:	e004      	b.n	800d824 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 faae 	bl	800dd7c <USBD_CtlSendStatus>
 800d820:	e000      	b.n	800d824 <USBD_GetDescriptor+0x320>
    return;
 800d822:	bf00      	nop
  }
}
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop

0800d82c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	889b      	ldrh	r3, [r3, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d131      	bne.n	800d8a2 <USBD_SetAddress+0x76>
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	88db      	ldrh	r3, [r3, #6]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d12d      	bne.n	800d8a2 <USBD_SetAddress+0x76>
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	2b7f      	cmp	r3, #127	; 0x7f
 800d84c:	d829      	bhi.n	800d8a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	885b      	ldrh	r3, [r3, #2]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b03      	cmp	r3, #3
 800d864:	d104      	bne.n	800d870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f9bc 	bl	800dbe6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d86e:	e01d      	b.n	800d8ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7bfa      	ldrb	r2, [r7, #15]
 800d874:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d878:	7bfb      	ldrb	r3, [r7, #15]
 800d87a:	4619      	mov	r1, r3
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f003 fd09 	bl	8011294 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fa7a 	bl	800dd7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d004      	beq.n	800d898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2202      	movs	r2, #2
 800d892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d896:	e009      	b.n	800d8ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8a0:	e004      	b.n	800d8ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8a2:	6839      	ldr	r1, [r7, #0]
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 f99e 	bl	800dbe6 <USBD_CtlError>
  }
}
 800d8aa:	bf00      	nop
 800d8ac:	bf00      	nop
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	885b      	ldrh	r3, [r3, #2]
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	4b4e      	ldr	r3, [pc, #312]	; (800da04 <USBD_SetConfig+0x150>)
 800d8ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d8cc:	4b4d      	ldr	r3, [pc, #308]	; (800da04 <USBD_SetConfig+0x150>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d905      	bls.n	800d8e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 f985 	bl	800dbe6 <USBD_CtlError>
    return USBD_FAIL;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e08c      	b.n	800d9fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d002      	beq.n	800d8f2 <USBD_SetConfig+0x3e>
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d029      	beq.n	800d944 <USBD_SetConfig+0x90>
 800d8f0:	e075      	b.n	800d9de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d8f2:	4b44      	ldr	r3, [pc, #272]	; (800da04 <USBD_SetConfig+0x150>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d020      	beq.n	800d93c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d8fa:	4b42      	ldr	r3, [pc, #264]	; (800da04 <USBD_SetConfig+0x150>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d904:	4b3f      	ldr	r3, [pc, #252]	; (800da04 <USBD_SetConfig+0x150>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	4619      	mov	r1, r3
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7fe ffbd 	bl	800c88a <USBD_SetClassConfig>
 800d910:	4603      	mov	r3, r0
 800d912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d008      	beq.n	800d92c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f962 	bl	800dbe6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2202      	movs	r2, #2
 800d926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d92a:	e065      	b.n	800d9f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa25 	bl	800dd7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2203      	movs	r2, #3
 800d936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d93a:	e05d      	b.n	800d9f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fa1d 	bl	800dd7c <USBD_CtlSendStatus>
      break;
 800d942:	e059      	b.n	800d9f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d944:	4b2f      	ldr	r3, [pc, #188]	; (800da04 <USBD_SetConfig+0x150>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d112      	bne.n	800d972 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2202      	movs	r2, #2
 800d950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d954:	4b2b      	ldr	r3, [pc, #172]	; (800da04 <USBD_SetConfig+0x150>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	461a      	mov	r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d95e:	4b29      	ldr	r3, [pc, #164]	; (800da04 <USBD_SetConfig+0x150>)
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	4619      	mov	r1, r3
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7fe ffac 	bl	800c8c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fa06 	bl	800dd7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d970:	e042      	b.n	800d9f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d972:	4b24      	ldr	r3, [pc, #144]	; (800da04 <USBD_SetConfig+0x150>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	461a      	mov	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d02a      	beq.n	800d9d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	b2db      	uxtb	r3, r3
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7fe ff9a 	bl	800c8c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d98e:	4b1d      	ldr	r3, [pc, #116]	; (800da04 <USBD_SetConfig+0x150>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d998:	4b1a      	ldr	r3, [pc, #104]	; (800da04 <USBD_SetConfig+0x150>)
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7fe ff73 	bl	800c88a <USBD_SetClassConfig>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00f      	beq.n	800d9ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f918 	bl	800dbe6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7fe ff7f 	bl	800c8c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d9cc:	e014      	b.n	800d9f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f9d4 	bl	800dd7c <USBD_CtlSendStatus>
      break;
 800d9d4:	e010      	b.n	800d9f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f9d0 	bl	800dd7c <USBD_CtlSendStatus>
      break;
 800d9dc:	e00c      	b.n	800d9f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d9de:	6839      	ldr	r1, [r7, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f900 	bl	800dbe6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9e6:	4b07      	ldr	r3, [pc, #28]	; (800da04 <USBD_SetConfig+0x150>)
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7fe ff68 	bl	800c8c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f6:	bf00      	nop
  }

  return ret;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	2000be70 	.word	0x2000be70

0800da08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	88db      	ldrh	r3, [r3, #6]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d004      	beq.n	800da24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f8e2 	bl	800dbe6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da22:	e023      	b.n	800da6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	dc02      	bgt.n	800da36 <USBD_GetConfig+0x2e>
 800da30:	2b00      	cmp	r3, #0
 800da32:	dc03      	bgt.n	800da3c <USBD_GetConfig+0x34>
 800da34:	e015      	b.n	800da62 <USBD_GetConfig+0x5a>
 800da36:	2b03      	cmp	r3, #3
 800da38:	d00b      	beq.n	800da52 <USBD_GetConfig+0x4a>
 800da3a:	e012      	b.n	800da62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	3308      	adds	r3, #8
 800da46:	2201      	movs	r2, #1
 800da48:	4619      	mov	r1, r3
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f93c 	bl	800dcc8 <USBD_CtlSendData>
        break;
 800da50:	e00c      	b.n	800da6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	3304      	adds	r3, #4
 800da56:	2201      	movs	r2, #1
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f934 	bl	800dcc8 <USBD_CtlSendData>
        break;
 800da60:	e004      	b.n	800da6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f8be 	bl	800dbe6 <USBD_CtlError>
        break;
 800da6a:	bf00      	nop
}
 800da6c:	bf00      	nop
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da84:	b2db      	uxtb	r3, r3
 800da86:	3b01      	subs	r3, #1
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d81e      	bhi.n	800daca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	88db      	ldrh	r3, [r3, #6]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d004      	beq.n	800da9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f8a5 	bl	800dbe6 <USBD_CtlError>
        break;
 800da9c:	e01a      	b.n	800dad4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d005      	beq.n	800daba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	f043 0202 	orr.w	r2, r3, #2
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	330c      	adds	r3, #12
 800dabe:	2202      	movs	r2, #2
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f900 	bl	800dcc8 <USBD_CtlSendData>
      break;
 800dac8:	e004      	b.n	800dad4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f88a 	bl	800dbe6 <USBD_CtlError>
      break;
 800dad2:	bf00      	nop
  }
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	885b      	ldrh	r3, [r3, #2]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d107      	bne.n	800dafe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f940 	bl	800dd7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dafc:	e013      	b.n	800db26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	885b      	ldrh	r3, [r3, #2]
 800db02:	2b02      	cmp	r3, #2
 800db04:	d10b      	bne.n	800db1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	889b      	ldrh	r3, [r3, #4]
 800db0a:	0a1b      	lsrs	r3, r3, #8
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f930 	bl	800dd7c <USBD_CtlSendStatus>
}
 800db1c:	e003      	b.n	800db26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f860 	bl	800dbe6 <USBD_CtlError>
}
 800db26:	bf00      	nop
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b082      	sub	sp, #8
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	3b01      	subs	r3, #1
 800db42:	2b02      	cmp	r3, #2
 800db44:	d80b      	bhi.n	800db5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	885b      	ldrh	r3, [r3, #2]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d10c      	bne.n	800db68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f910 	bl	800dd7c <USBD_CtlSendStatus>
      }
      break;
 800db5c:	e004      	b.n	800db68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f840 	bl	800dbe6 <USBD_CtlError>
      break;
 800db66:	e000      	b.n	800db6a <USBD_ClrFeature+0x3c>
      break;
 800db68:	bf00      	nop
  }
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b084      	sub	sp, #16
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	781a      	ldrb	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3301      	adds	r3, #1
 800db8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	781a      	ldrb	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3301      	adds	r3, #1
 800db9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f7ff fa17 	bl	800cfd0 <SWAPBYTE>
 800dba2:	4603      	mov	r3, r0
 800dba4:	461a      	mov	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3301      	adds	r3, #1
 800dbae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7ff fa0a 	bl	800cfd0 <SWAPBYTE>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f7ff f9fd 	bl	800cfd0 <SWAPBYTE>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	80da      	strh	r2, [r3, #6]
}
 800dbde:	bf00      	nop
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b082      	sub	sp, #8
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbf0:	2180      	movs	r1, #128	; 0x80
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f003 fae4 	bl	80111c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f003 fae0 	bl	80111c0 <USBD_LL_StallEP>
}
 800dc00:	bf00      	nop
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc14:	2300      	movs	r3, #0
 800dc16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d036      	beq.n	800dc8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc22:	6938      	ldr	r0, [r7, #16]
 800dc24:	f000 f836 	bl	800dc94 <USBD_GetLen>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc36:	7dfb      	ldrb	r3, [r7, #23]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	7812      	ldrb	r2, [r2, #0]
 800dc40:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc42:	7dfb      	ldrb	r3, [r7, #23]
 800dc44:	3301      	adds	r3, #1
 800dc46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc48:	7dfb      	ldrb	r3, [r7, #23]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	2203      	movs	r2, #3
 800dc50:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	3301      	adds	r3, #1
 800dc56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc58:	e013      	b.n	800dc82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dc5a:	7dfb      	ldrb	r3, [r7, #23]
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	4413      	add	r3, r2
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	7812      	ldrb	r2, [r2, #0]
 800dc64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	613b      	str	r3, [r7, #16]
    idx++;
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	4413      	add	r3, r2
 800dc78:	2200      	movs	r2, #0
 800dc7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800dc7c:	7dfb      	ldrb	r3, [r7, #23]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1e7      	bne.n	800dc5a <USBD_GetString+0x52>
 800dc8a:	e000      	b.n	800dc8e <USBD_GetString+0x86>
    return;
 800dc8c:	bf00      	nop
  }
}
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dca4:	e005      	b.n	800dcb2 <USBD_GetLen+0x1e>
  {
    len++;
 800dca6:	7bfb      	ldrb	r3, [r7, #15]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1f5      	bne.n	800dca6 <USBD_GetLen+0x12>
  }

  return len;
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	2100      	movs	r1, #0
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f003 faef 	bl	80112d2 <USBD_LL_Transmit>

  return USBD_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68ba      	ldr	r2, [r7, #8]
 800dd0e:	2100      	movs	r1, #0
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f003 fade 	bl	80112d2 <USBD_LL_Transmit>

  return USBD_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2203      	movs	r2, #3
 800dd30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	2100      	movs	r1, #0
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f003 fae2 	bl	8011314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	60b9      	str	r1, [r7, #8]
 800dd64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f003 fad1 	bl	8011314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2204      	movs	r2, #4
 800dd88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	2200      	movs	r2, #0
 800dd90:	2100      	movs	r1, #0
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f003 fa9d 	bl	80112d2 <USBD_LL_Transmit>

  return USBD_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2205      	movs	r2, #5
 800ddae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f003 faab 	bl	8011314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ddc8:	b480      	push	{r7}
 800ddca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ddcc:	bf00      	nop
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
	...

0800ddd8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddde:	f3ef 8305 	mrs	r3, IPSR
 800dde2:	60bb      	str	r3, [r7, #8]
  return(result);
 800dde4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10f      	bne.n	800de0a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddea:	f3ef 8310 	mrs	r3, PRIMASK
 800ddee:	607b      	str	r3, [r7, #4]
  return(result);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d105      	bne.n	800de02 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ddf6:	f3ef 8311 	mrs	r3, BASEPRI
 800ddfa:	603b      	str	r3, [r7, #0]
  return(result);
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d007      	beq.n	800de12 <osKernelInitialize+0x3a>
 800de02:	4b0e      	ldr	r3, [pc, #56]	; (800de3c <osKernelInitialize+0x64>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d103      	bne.n	800de12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800de0a:	f06f 0305 	mvn.w	r3, #5
 800de0e:	60fb      	str	r3, [r7, #12]
 800de10:	e00c      	b.n	800de2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800de12:	4b0a      	ldr	r3, [pc, #40]	; (800de3c <osKernelInitialize+0x64>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800de1a:	4b08      	ldr	r3, [pc, #32]	; (800de3c <osKernelInitialize+0x64>)
 800de1c:	2201      	movs	r2, #1
 800de1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800de20:	2300      	movs	r3, #0
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e002      	b.n	800de2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800de26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800de2c:	68fb      	ldr	r3, [r7, #12]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	2000be74 	.word	0x2000be74

0800de40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de46:	f3ef 8305 	mrs	r3, IPSR
 800de4a:	60bb      	str	r3, [r7, #8]
  return(result);
 800de4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10f      	bne.n	800de72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de52:	f3ef 8310 	mrs	r3, PRIMASK
 800de56:	607b      	str	r3, [r7, #4]
  return(result);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d105      	bne.n	800de6a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de5e:	f3ef 8311 	mrs	r3, BASEPRI
 800de62:	603b      	str	r3, [r7, #0]
  return(result);
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d007      	beq.n	800de7a <osKernelStart+0x3a>
 800de6a:	4b0f      	ldr	r3, [pc, #60]	; (800dea8 <osKernelStart+0x68>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d103      	bne.n	800de7a <osKernelStart+0x3a>
    stat = osErrorISR;
 800de72:	f06f 0305 	mvn.w	r3, #5
 800de76:	60fb      	str	r3, [r7, #12]
 800de78:	e010      	b.n	800de9c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800de7a:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <osKernelStart+0x68>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d109      	bne.n	800de96 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800de82:	f7ff ffa1 	bl	800ddc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800de86:	4b08      	ldr	r3, [pc, #32]	; (800dea8 <osKernelStart+0x68>)
 800de88:	2202      	movs	r2, #2
 800de8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800de8c:	f001 f8b4 	bl	800eff8 <vTaskStartScheduler>
      stat = osOK;
 800de90:	2300      	movs	r3, #0
 800de92:	60fb      	str	r3, [r7, #12]
 800de94:	e002      	b.n	800de9c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800de96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800de9c:	68fb      	ldr	r3, [r7, #12]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	2000be74 	.word	0x2000be74

0800deac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b090      	sub	sp, #64	; 0x40
 800deb0:	af04      	add	r7, sp, #16
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800deb8:	2300      	movs	r3, #0
 800deba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800debc:	f3ef 8305 	mrs	r3, IPSR
 800dec0:	61fb      	str	r3, [r7, #28]
  return(result);
 800dec2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f040 808f 	bne.w	800dfe8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deca:	f3ef 8310 	mrs	r3, PRIMASK
 800dece:	61bb      	str	r3, [r7, #24]
  return(result);
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d105      	bne.n	800dee2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ded6:	f3ef 8311 	mrs	r3, BASEPRI
 800deda:	617b      	str	r3, [r7, #20]
  return(result);
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d003      	beq.n	800deea <osThreadNew+0x3e>
 800dee2:	4b44      	ldr	r3, [pc, #272]	; (800dff4 <osThreadNew+0x148>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d07e      	beq.n	800dfe8 <osThreadNew+0x13c>
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d07b      	beq.n	800dfe8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800def0:	2380      	movs	r3, #128	; 0x80
 800def2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800def4:	2318      	movs	r3, #24
 800def6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800def8:	2300      	movs	r3, #0
 800defa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800defc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d045      	beq.n	800df94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <osThreadNew+0x6a>
        name = attr->name;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	2b00      	cmp	r3, #0
 800df28:	d008      	beq.n	800df3c <osThreadNew+0x90>
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	2b38      	cmp	r3, #56	; 0x38
 800df2e:	d805      	bhi.n	800df3c <osThreadNew+0x90>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d001      	beq.n	800df40 <osThreadNew+0x94>
        return (NULL);
 800df3c:	2300      	movs	r3, #0
 800df3e:	e054      	b.n	800dfea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	695b      	ldr	r3, [r3, #20]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d003      	beq.n	800df50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	089b      	lsrs	r3, r3, #2
 800df4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00e      	beq.n	800df76 <osThreadNew+0xca>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	2b5b      	cmp	r3, #91	; 0x5b
 800df5e:	d90a      	bls.n	800df76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800df64:	2b00      	cmp	r3, #0
 800df66:	d006      	beq.n	800df76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <osThreadNew+0xca>
        mem = 1;
 800df70:	2301      	movs	r3, #1
 800df72:	623b      	str	r3, [r7, #32]
 800df74:	e010      	b.n	800df98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10c      	bne.n	800df98 <osThreadNew+0xec>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d108      	bne.n	800df98 <osThreadNew+0xec>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d104      	bne.n	800df98 <osThreadNew+0xec>
          mem = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	623b      	str	r3, [r7, #32]
 800df92:	e001      	b.n	800df98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d110      	bne.n	800dfc0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dfa6:	9202      	str	r2, [sp, #8]
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f000 fe3f 	bl	800ec38 <xTaskCreateStatic>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	e013      	b.n	800dfe8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d110      	bne.n	800dfe8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	f107 0310 	add.w	r3, r7, #16
 800dfce:	9301      	str	r3, [sp, #4]
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 fe90 	bl	800ecfe <xTaskCreate>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d001      	beq.n	800dfe8 <osThreadNew+0x13c>
          hTask = NULL;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dfe8:	693b      	ldr	r3, [r7, #16]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3730      	adds	r7, #48	; 0x30
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	2000be74 	.word	0x2000be74

0800dff8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e000:	f3ef 8305 	mrs	r3, IPSR
 800e004:	613b      	str	r3, [r7, #16]
  return(result);
 800e006:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10f      	bne.n	800e02c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e00c:	f3ef 8310 	mrs	r3, PRIMASK
 800e010:	60fb      	str	r3, [r7, #12]
  return(result);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d105      	bne.n	800e024 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e018:	f3ef 8311 	mrs	r3, BASEPRI
 800e01c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d007      	beq.n	800e034 <osDelay+0x3c>
 800e024:	4b0a      	ldr	r3, [pc, #40]	; (800e050 <osDelay+0x58>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b02      	cmp	r3, #2
 800e02a:	d103      	bne.n	800e034 <osDelay+0x3c>
    stat = osErrorISR;
 800e02c:	f06f 0305 	mvn.w	r3, #5
 800e030:	617b      	str	r3, [r7, #20]
 800e032:	e007      	b.n	800e044 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e034:	2300      	movs	r3, #0
 800e036:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 ffa4 	bl	800ef8c <vTaskDelay>
    }
  }

  return (stat);
 800e044:	697b      	ldr	r3, [r7, #20]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3718      	adds	r7, #24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	2000be74 	.word	0x2000be74

0800e054 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	4a07      	ldr	r2, [pc, #28]	; (800e080 <vApplicationGetIdleTaskMemory+0x2c>)
 800e064:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	4a06      	ldr	r2, [pc, #24]	; (800e084 <vApplicationGetIdleTaskMemory+0x30>)
 800e06a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2280      	movs	r2, #128	; 0x80
 800e070:	601a      	str	r2, [r3, #0]
}
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	2000be78 	.word	0x2000be78
 800e084:	2000bed4 	.word	0x2000bed4

0800e088 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4a07      	ldr	r2, [pc, #28]	; (800e0b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e098:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	4a06      	ldr	r2, [pc, #24]	; (800e0b8 <vApplicationGetTimerTaskMemory+0x30>)
 800e09e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0a6:	601a      	str	r2, [r3, #0]
}
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	2000c0d4 	.word	0x2000c0d4
 800e0b8:	2000c130 	.word	0x2000c130

0800e0bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f103 0208 	add.w	r2, r3, #8
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f103 0208 	add.w	r2, r3, #8
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f103 0208 	add.w	r2, r3, #8
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e116:	b480      	push	{r7}
 800e118:	b085      	sub	sp, #20
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
 800e11e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
}
 800e152:	bf00      	nop
 800e154:	3714      	adds	r7, #20
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e15e:	b480      	push	{r7}
 800e160:	b085      	sub	sp, #20
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e174:	d103      	bne.n	800e17e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	60fb      	str	r3, [r7, #12]
 800e17c:	e00c      	b.n	800e198 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	3308      	adds	r3, #8
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e002      	b.n	800e18c <vListInsert+0x2e>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	429a      	cmp	r2, r3
 800e196:	d2f6      	bcs.n	800e186 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	683a      	ldr	r2, [r7, #0]
 800e1a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	601a      	str	r2, [r3, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	6892      	ldr	r2, [r2, #8]
 800e1e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	6852      	ldr	r2, [r2, #4]
 800e1f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d103      	bne.n	800e204 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	1e5a      	subs	r2, r3, #1
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10c      	bne.n	800e252 <xQueueGenericReset+0x2e>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23c:	b672      	cpsid	i
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	b662      	cpsie	i
 800e24c:	60bb      	str	r3, [r7, #8]
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e252:	f002 f8a3 	bl	801039c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e262:	fb01 f303 	mul.w	r3, r1, r3
 800e266:	441a      	add	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e282:	3b01      	subs	r3, #1
 800e284:	68f9      	ldr	r1, [r7, #12]
 800e286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e288:	fb01 f303 	mul.w	r3, r1, r3
 800e28c:	441a      	add	r2, r3
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	22ff      	movs	r2, #255	; 0xff
 800e296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	22ff      	movs	r2, #255	; 0xff
 800e29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d114      	bne.n	800e2d2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d01a      	beq.n	800e2e6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3310      	adds	r3, #16
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f001 f937 	bl	800f528 <xTaskRemoveFromEventList>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d012      	beq.n	800e2e6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2c0:	4b0c      	ldr	r3, [pc, #48]	; (800e2f4 <xQueueGenericReset+0xd0>)
 800e2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	e009      	b.n	800e2e6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3310      	adds	r3, #16
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff fef0 	bl	800e0bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3324      	adds	r3, #36	; 0x24
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7ff feeb 	bl	800e0bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2e6:	f002 f88d 	bl	8010404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2ea:	2301      	movs	r3, #1
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	e000ed04 	.word	0xe000ed04

0800e2f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08e      	sub	sp, #56	; 0x38
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10c      	bne.n	800e326 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e310:	b672      	cpsid	i
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	b662      	cpsie	i
 800e320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e322:	bf00      	nop
 800e324:	e7fe      	b.n	800e324 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10c      	bne.n	800e346 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	b672      	cpsid	i
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	b662      	cpsie	i
 800e340:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <xQueueGenericCreateStatic+0x5a>
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d001      	beq.n	800e356 <xQueueGenericCreateStatic+0x5e>
 800e352:	2301      	movs	r3, #1
 800e354:	e000      	b.n	800e358 <xQueueGenericCreateStatic+0x60>
 800e356:	2300      	movs	r3, #0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10c      	bne.n	800e376 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	b672      	cpsid	i
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	b662      	cpsie	i
 800e370:	623b      	str	r3, [r7, #32]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d102      	bne.n	800e382 <xQueueGenericCreateStatic+0x8a>
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <xQueueGenericCreateStatic+0x8e>
 800e382:	2301      	movs	r3, #1
 800e384:	e000      	b.n	800e388 <xQueueGenericCreateStatic+0x90>
 800e386:	2300      	movs	r3, #0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10c      	bne.n	800e3a6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	b672      	cpsid	i
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	b662      	cpsie	i
 800e3a0:	61fb      	str	r3, [r7, #28]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e3a6:	2350      	movs	r3, #80	; 0x50
 800e3a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b50      	cmp	r3, #80	; 0x50
 800e3ae:	d00c      	beq.n	800e3ca <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	b672      	cpsid	i
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	b662      	cpsie	i
 800e3c4:	61bb      	str	r3, [r7, #24]
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00d      	beq.n	800e3f2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	68b9      	ldr	r1, [r7, #8]
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 f805 	bl	800e3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3730      	adds	r7, #48	; 0x30
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
 800e408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d103      	bne.n	800e418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	69ba      	ldr	r2, [r7, #24]
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	e002      	b.n	800e41e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e42a:	2101      	movs	r1, #1
 800e42c:	69b8      	ldr	r0, [r7, #24]
 800e42e:	f7ff fef9 	bl	800e224 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	78fa      	ldrb	r2, [r7, #3]
 800e436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e43a:	bf00      	nop
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
	...

0800e444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08e      	sub	sp, #56	; 0x38
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e452:	2300      	movs	r3, #0
 800e454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10c      	bne.n	800e47a <xQueueGenericSend+0x36>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	b672      	cpsid	i
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	b662      	cpsie	i
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <xQueueGenericSend+0x44>
 800e480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <xQueueGenericSend+0x48>
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <xQueueGenericSend+0x4a>
 800e48c:	2300      	movs	r3, #0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10c      	bne.n	800e4ac <xQueueGenericSend+0x68>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	b672      	cpsid	i
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	b662      	cpsie	i
 800e4a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4a8:	bf00      	nop
 800e4aa:	e7fe      	b.n	800e4aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	d103      	bne.n	800e4ba <xQueueGenericSend+0x76>
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d101      	bne.n	800e4be <xQueueGenericSend+0x7a>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e000      	b.n	800e4c0 <xQueueGenericSend+0x7c>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10c      	bne.n	800e4de <xQueueGenericSend+0x9a>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	b672      	cpsid	i
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	b662      	cpsie	i
 800e4d8:	623b      	str	r3, [r7, #32]
}
 800e4da:	bf00      	nop
 800e4dc:	e7fe      	b.n	800e4dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4de:	f001 fa11 	bl	800f904 <xTaskGetSchedulerState>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d102      	bne.n	800e4ee <xQueueGenericSend+0xaa>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <xQueueGenericSend+0xae>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e000      	b.n	800e4f4 <xQueueGenericSend+0xb0>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10c      	bne.n	800e512 <xQueueGenericSend+0xce>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	b672      	cpsid	i
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	b662      	cpsie	i
 800e50c:	61fb      	str	r3, [r7, #28]
}
 800e50e:	bf00      	nop
 800e510:	e7fe      	b.n	800e510 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e512:	f001 ff43 	bl	801039c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51e:	429a      	cmp	r2, r3
 800e520:	d302      	bcc.n	800e528 <xQueueGenericSend+0xe4>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b02      	cmp	r3, #2
 800e526:	d129      	bne.n	800e57c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	68b9      	ldr	r1, [r7, #8]
 800e52c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e52e:	f000 fa15 	bl	800e95c <prvCopyDataToQueue>
 800e532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d010      	beq.n	800e55e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	3324      	adds	r3, #36	; 0x24
 800e540:	4618      	mov	r0, r3
 800e542:	f000 fff1 	bl	800f528 <xTaskRemoveFromEventList>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d013      	beq.n	800e574 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e54c:	4b3f      	ldr	r3, [pc, #252]	; (800e64c <xQueueGenericSend+0x208>)
 800e54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e552:	601a      	str	r2, [r3, #0]
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	f3bf 8f6f 	isb	sy
 800e55c:	e00a      	b.n	800e574 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e560:	2b00      	cmp	r3, #0
 800e562:	d007      	beq.n	800e574 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e564:	4b39      	ldr	r3, [pc, #228]	; (800e64c <xQueueGenericSend+0x208>)
 800e566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e574:	f001 ff46 	bl	8010404 <vPortExitCritical>
				return pdPASS;
 800e578:	2301      	movs	r3, #1
 800e57a:	e063      	b.n	800e644 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d103      	bne.n	800e58a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e582:	f001 ff3f 	bl	8010404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e586:	2300      	movs	r3, #0
 800e588:	e05c      	b.n	800e644 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d106      	bne.n	800e59e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e590:	f107 0314 	add.w	r3, r7, #20
 800e594:	4618      	mov	r0, r3
 800e596:	f001 f855 	bl	800f644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e59a:	2301      	movs	r3, #1
 800e59c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e59e:	f001 ff31 	bl	8010404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5a2:	f000 fd93 	bl	800f0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5a6:	f001 fef9 	bl	801039c <vPortEnterCritical>
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5b0:	b25b      	sxtb	r3, r3
 800e5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5b6:	d103      	bne.n	800e5c0 <xQueueGenericSend+0x17c>
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5c6:	b25b      	sxtb	r3, r3
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5cc:	d103      	bne.n	800e5d6 <xQueueGenericSend+0x192>
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5d6:	f001 ff15 	bl	8010404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5da:	1d3a      	adds	r2, r7, #4
 800e5dc:	f107 0314 	add.w	r3, r7, #20
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f001 f844 	bl	800f670 <xTaskCheckForTimeOut>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d124      	bne.n	800e638 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e5ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5f0:	f000 faac 	bl	800eb4c <prvIsQueueFull>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d018      	beq.n	800e62c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	3310      	adds	r3, #16
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	4611      	mov	r1, r2
 800e602:	4618      	mov	r0, r3
 800e604:	f000 ff3c 	bl	800f480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e60a:	f000 fa37 	bl	800ea7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e60e:	f000 fd6b 	bl	800f0e8 <xTaskResumeAll>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	f47f af7c 	bne.w	800e512 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e61a:	4b0c      	ldr	r3, [pc, #48]	; (800e64c <xQueueGenericSend+0x208>)
 800e61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	e772      	b.n	800e512 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e62c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e62e:	f000 fa25 	bl	800ea7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e632:	f000 fd59 	bl	800f0e8 <xTaskResumeAll>
 800e636:	e76c      	b.n	800e512 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e63a:	f000 fa1f 	bl	800ea7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e63e:	f000 fd53 	bl	800f0e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e644:	4618      	mov	r0, r3
 800e646:	3738      	adds	r7, #56	; 0x38
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	e000ed04 	.word	0xe000ed04

0800e650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08e      	sub	sp, #56	; 0x38
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
 800e65c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10c      	bne.n	800e682 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	b672      	cpsid	i
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	b662      	cpsie	i
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d103      	bne.n	800e690 <xQueueGenericSendFromISR+0x40>
 800e688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d101      	bne.n	800e694 <xQueueGenericSendFromISR+0x44>
 800e690:	2301      	movs	r3, #1
 800e692:	e000      	b.n	800e696 <xQueueGenericSendFromISR+0x46>
 800e694:	2300      	movs	r3, #0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10c      	bne.n	800e6b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	b672      	cpsid	i
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	b662      	cpsie	i
 800e6ae:	623b      	str	r3, [r7, #32]
}
 800e6b0:	bf00      	nop
 800e6b2:	e7fe      	b.n	800e6b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d103      	bne.n	800e6c2 <xQueueGenericSendFromISR+0x72>
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d101      	bne.n	800e6c6 <xQueueGenericSendFromISR+0x76>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	e000      	b.n	800e6c8 <xQueueGenericSendFromISR+0x78>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10c      	bne.n	800e6e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d0:	b672      	cpsid	i
 800e6d2:	f383 8811 	msr	BASEPRI, r3
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	b662      	cpsie	i
 800e6e0:	61fb      	str	r3, [r7, #28]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6e6:	f001 ff41 	bl	801056c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e6ea:	f3ef 8211 	mrs	r2, BASEPRI
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	b672      	cpsid	i
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	b662      	cpsie	i
 800e702:	61ba      	str	r2, [r7, #24]
 800e704:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e706:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e708:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e712:	429a      	cmp	r2, r3
 800e714:	d302      	bcc.n	800e71c <xQueueGenericSendFromISR+0xcc>
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d12c      	bne.n	800e776 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e726:	683a      	ldr	r2, [r7, #0]
 800e728:	68b9      	ldr	r1, [r7, #8]
 800e72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e72c:	f000 f916 	bl	800e95c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e730:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e738:	d112      	bne.n	800e760 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d016      	beq.n	800e770 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	3324      	adds	r3, #36	; 0x24
 800e746:	4618      	mov	r0, r3
 800e748:	f000 feee 	bl	800f528 <xTaskRemoveFromEventList>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00e      	beq.n	800e770 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00b      	beq.n	800e770 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	e007      	b.n	800e770 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e764:	3301      	adds	r3, #1
 800e766:	b2db      	uxtb	r3, r3
 800e768:	b25a      	sxtb	r2, r3
 800e76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e770:	2301      	movs	r3, #1
 800e772:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e774:	e001      	b.n	800e77a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e776:	2300      	movs	r3, #0
 800e778:	637b      	str	r3, [r7, #52]	; 0x34
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e784:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3738      	adds	r7, #56	; 0x38
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08c      	sub	sp, #48	; 0x30
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e79c:	2300      	movs	r3, #0
 800e79e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10c      	bne.n	800e7c4 <xQueueReceive+0x34>
	__asm volatile
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	b672      	cpsid	i
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	b662      	cpsie	i
 800e7be:	623b      	str	r3, [r7, #32]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d103      	bne.n	800e7d2 <xQueueReceive+0x42>
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <xQueueReceive+0x46>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e000      	b.n	800e7d8 <xQueueReceive+0x48>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10c      	bne.n	800e7f6 <xQueueReceive+0x66>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	b672      	cpsid	i
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	b662      	cpsie	i
 800e7f0:	61fb      	str	r3, [r7, #28]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7f6:	f001 f885 	bl	800f904 <xTaskGetSchedulerState>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d102      	bne.n	800e806 <xQueueReceive+0x76>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <xQueueReceive+0x7a>
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <xQueueReceive+0x7c>
 800e80a:	2300      	movs	r3, #0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10c      	bne.n	800e82a <xQueueReceive+0x9a>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	b672      	cpsid	i
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	b662      	cpsie	i
 800e824:	61bb      	str	r3, [r7, #24]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e82a:	f001 fdb7 	bl	801039c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e832:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e836:	2b00      	cmp	r3, #0
 800e838:	d01f      	beq.n	800e87a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e83a:	68b9      	ldr	r1, [r7, #8]
 800e83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e83e:	f000 f8f7 	bl	800ea30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	1e5a      	subs	r2, r3, #1
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00f      	beq.n	800e872 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	3310      	adds	r3, #16
 800e856:	4618      	mov	r0, r3
 800e858:	f000 fe66 	bl	800f528 <xTaskRemoveFromEventList>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e862:	4b3d      	ldr	r3, [pc, #244]	; (800e958 <xQueueReceive+0x1c8>)
 800e864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e872:	f001 fdc7 	bl	8010404 <vPortExitCritical>
				return pdPASS;
 800e876:	2301      	movs	r3, #1
 800e878:	e069      	b.n	800e94e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d103      	bne.n	800e888 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e880:	f001 fdc0 	bl	8010404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e884:	2300      	movs	r3, #0
 800e886:	e062      	b.n	800e94e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d106      	bne.n	800e89c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e88e:	f107 0310 	add.w	r3, r7, #16
 800e892:	4618      	mov	r0, r3
 800e894:	f000 fed6 	bl	800f644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e898:	2301      	movs	r3, #1
 800e89a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e89c:	f001 fdb2 	bl	8010404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8a0:	f000 fc14 	bl	800f0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8a4:	f001 fd7a 	bl	801039c <vPortEnterCritical>
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8ae:	b25b      	sxtb	r3, r3
 800e8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8b4:	d103      	bne.n	800e8be <xQueueReceive+0x12e>
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8c4:	b25b      	sxtb	r3, r3
 800e8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8ca:	d103      	bne.n	800e8d4 <xQueueReceive+0x144>
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8d4:	f001 fd96 	bl	8010404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8d8:	1d3a      	adds	r2, r7, #4
 800e8da:	f107 0310 	add.w	r3, r7, #16
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f000 fec5 	bl	800f670 <xTaskCheckForTimeOut>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d123      	bne.n	800e934 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ee:	f000 f917 	bl	800eb20 <prvIsQueueEmpty>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d017      	beq.n	800e928 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	3324      	adds	r3, #36	; 0x24
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	4611      	mov	r1, r2
 800e900:	4618      	mov	r0, r3
 800e902:	f000 fdbd 	bl	800f480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e908:	f000 f8b8 	bl	800ea7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e90c:	f000 fbec 	bl	800f0e8 <xTaskResumeAll>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d189      	bne.n	800e82a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e916:	4b10      	ldr	r3, [pc, #64]	; (800e958 <xQueueReceive+0x1c8>)
 800e918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	e780      	b.n	800e82a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e92a:	f000 f8a7 	bl	800ea7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e92e:	f000 fbdb 	bl	800f0e8 <xTaskResumeAll>
 800e932:	e77a      	b.n	800e82a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e936:	f000 f8a1 	bl	800ea7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e93a:	f000 fbd5 	bl	800f0e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e93e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e940:	f000 f8ee 	bl	800eb20 <prvIsQueueEmpty>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	f43f af6f 	beq.w	800e82a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e94c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3730      	adds	r7, #48	; 0x30
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	e000ed04 	.word	0xe000ed04

0800e95c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e968:	2300      	movs	r3, #0
 800e96a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e970:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10d      	bne.n	800e996 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d14d      	bne.n	800ea1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	4618      	mov	r0, r3
 800e988:	f000 ffda 	bl	800f940 <xTaskPriorityDisinherit>
 800e98c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	609a      	str	r2, [r3, #8]
 800e994:	e043      	b.n	800ea1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d119      	bne.n	800e9d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6858      	ldr	r0, [r3, #4]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	68b9      	ldr	r1, [r7, #8]
 800e9a8:	f012 faf1 	bl	8020f8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b4:	441a      	add	r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d32b      	bcc.n	800ea1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	605a      	str	r2, [r3, #4]
 800e9ce:	e026      	b.n	800ea1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	68d8      	ldr	r0, [r3, #12]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d8:	461a      	mov	r2, r3
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	f012 fad7 	bl	8020f8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	68da      	ldr	r2, [r3, #12]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e8:	425b      	negs	r3, r3
 800e9ea:	441a      	add	r2, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	68da      	ldr	r2, [r3, #12]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d207      	bcs.n	800ea0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea04:	425b      	negs	r3, r3
 800ea06:	441a      	add	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	d105      	bne.n	800ea1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ea26:	697b      	ldr	r3, [r7, #20]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d018      	beq.n	800ea74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68da      	ldr	r2, [r3, #12]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea4a:	441a      	add	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	68da      	ldr	r2, [r3, #12]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d303      	bcc.n	800ea64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68d9      	ldr	r1, [r3, #12]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	6838      	ldr	r0, [r7, #0]
 800ea70:	f012 fa8d 	bl	8020f8e <memcpy>
	}
}
 800ea74:	bf00      	nop
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea84:	f001 fc8a 	bl	801039c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea90:	e011      	b.n	800eab6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d012      	beq.n	800eac0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	3324      	adds	r3, #36	; 0x24
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 fd42 	bl	800f528 <xTaskRemoveFromEventList>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eaaa:	f000 fe47 	bl	800f73c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eaae:	7bfb      	ldrb	r3, [r7, #15]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	dce9      	bgt.n	800ea92 <prvUnlockQueue+0x16>
 800eabe:	e000      	b.n	800eac2 <prvUnlockQueue+0x46>
					break;
 800eac0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	22ff      	movs	r2, #255	; 0xff
 800eac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eaca:	f001 fc9b 	bl	8010404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eace:	f001 fc65 	bl	801039c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ead8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eada:	e011      	b.n	800eb00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	691b      	ldr	r3, [r3, #16]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d012      	beq.n	800eb0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3310      	adds	r3, #16
 800eae8:	4618      	mov	r0, r3
 800eaea:	f000 fd1d 	bl	800f528 <xTaskRemoveFromEventList>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eaf4:	f000 fe22 	bl	800f73c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eaf8:	7bbb      	ldrb	r3, [r7, #14]
 800eafa:	3b01      	subs	r3, #1
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	dce9      	bgt.n	800eadc <prvUnlockQueue+0x60>
 800eb08:	e000      	b.n	800eb0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	22ff      	movs	r2, #255	; 0xff
 800eb10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eb14:	f001 fc76 	bl	8010404 <vPortExitCritical>
}
 800eb18:	bf00      	nop
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb28:	f001 fc38 	bl	801039c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d102      	bne.n	800eb3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eb34:	2301      	movs	r3, #1
 800eb36:	60fb      	str	r3, [r7, #12]
 800eb38:	e001      	b.n	800eb3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb3e:	f001 fc61 	bl	8010404 <vPortExitCritical>

	return xReturn;
 800eb42:	68fb      	ldr	r3, [r7, #12]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb54:	f001 fc22 	bl	801039c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d102      	bne.n	800eb6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	60fb      	str	r3, [r7, #12]
 800eb68:	e001      	b.n	800eb6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb6e:	f001 fc49 	bl	8010404 <vPortExitCritical>

	return xReturn;
 800eb72:	68fb      	ldr	r3, [r7, #12]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb86:	2300      	movs	r3, #0
 800eb88:	60fb      	str	r3, [r7, #12]
 800eb8a:	e014      	b.n	800ebb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb8c:	4a0f      	ldr	r2, [pc, #60]	; (800ebcc <vQueueAddToRegistry+0x50>)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10b      	bne.n	800ebb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb98:	490c      	ldr	r1, [pc, #48]	; (800ebcc <vQueueAddToRegistry+0x50>)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eba2:	4a0a      	ldr	r2, [pc, #40]	; (800ebcc <vQueueAddToRegistry+0x50>)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	00db      	lsls	r3, r3, #3
 800eba8:	4413      	add	r3, r2
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ebae:	e006      	b.n	800ebbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	60fb      	str	r3, [r7, #12]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2b07      	cmp	r3, #7
 800ebba:	d9e7      	bls.n	800eb8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ebbc:	bf00      	nop
 800ebbe:	bf00      	nop
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	2000c530 	.word	0x2000c530

0800ebd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ebe0:	f001 fbdc 	bl	801039c <vPortEnterCritical>
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebea:	b25b      	sxtb	r3, r3
 800ebec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebf0:	d103      	bne.n	800ebfa <vQueueWaitForMessageRestricted+0x2a>
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec00:	b25b      	sxtb	r3, r3
 800ec02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec06:	d103      	bne.n	800ec10 <vQueueWaitForMessageRestricted+0x40>
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec10:	f001 fbf8 	bl	8010404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d106      	bne.n	800ec2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	3324      	adds	r3, #36	; 0x24
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	68b9      	ldr	r1, [r7, #8]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 fc51 	bl	800f4cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ec2a:	6978      	ldr	r0, [r7, #20]
 800ec2c:	f7ff ff26 	bl	800ea7c <prvUnlockQueue>
	}
 800ec30:	bf00      	nop
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b08e      	sub	sp, #56	; 0x38
 800ec3c:	af04      	add	r7, sp, #16
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ec46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10c      	bne.n	800ec66 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ec4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec50:	b672      	cpsid	i
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	b662      	cpsie	i
 800ec60:	623b      	str	r3, [r7, #32]
}
 800ec62:	bf00      	nop
 800ec64:	e7fe      	b.n	800ec64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10c      	bne.n	800ec86 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ec6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec70:	b672      	cpsid	i
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	b662      	cpsie	i
 800ec80:	61fb      	str	r3, [r7, #28]
}
 800ec82:	bf00      	nop
 800ec84:	e7fe      	b.n	800ec84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec86:	235c      	movs	r3, #92	; 0x5c
 800ec88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2b5c      	cmp	r3, #92	; 0x5c
 800ec8e:	d00c      	beq.n	800ecaa <xTaskCreateStatic+0x72>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	b672      	cpsid	i
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	b662      	cpsie	i
 800eca4:	61bb      	str	r3, [r7, #24]
}
 800eca6:	bf00      	nop
 800eca8:	e7fe      	b.n	800eca8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ecaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ecac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d01e      	beq.n	800ecf0 <xTaskCreateStatic+0xb8>
 800ecb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d01b      	beq.n	800ecf0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ecca:	2300      	movs	r3, #0
 800eccc:	9303      	str	r3, [sp, #12]
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	9302      	str	r3, [sp, #8]
 800ecd2:	f107 0314 	add.w	r3, r7, #20
 800ecd6:	9301      	str	r3, [sp, #4]
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	68b9      	ldr	r1, [r7, #8]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 f850 	bl	800ed88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ece8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecea:	f000 f8df 	bl	800eeac <prvAddNewTaskToReadyList>
 800ecee:	e001      	b.n	800ecf4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ecf4:	697b      	ldr	r3, [r7, #20]
	}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3728      	adds	r7, #40	; 0x28
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b08c      	sub	sp, #48	; 0x30
 800ed02:	af04      	add	r7, sp, #16
 800ed04:	60f8      	str	r0, [r7, #12]
 800ed06:	60b9      	str	r1, [r7, #8]
 800ed08:	603b      	str	r3, [r7, #0]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed0e:	88fb      	ldrh	r3, [r7, #6]
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4618      	mov	r0, r3
 800ed14:	f001 fc6e 	bl	80105f4 <pvPortMalloc>
 800ed18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00e      	beq.n	800ed3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ed20:	205c      	movs	r0, #92	; 0x5c
 800ed22:	f001 fc67 	bl	80105f4 <pvPortMalloc>
 800ed26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	631a      	str	r2, [r3, #48]	; 0x30
 800ed34:	e005      	b.n	800ed42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ed36:	6978      	ldr	r0, [r7, #20]
 800ed38:	f001 fd26 	bl	8010788 <vPortFree>
 800ed3c:	e001      	b.n	800ed42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d017      	beq.n	800ed78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed50:	88fa      	ldrh	r2, [r7, #6]
 800ed52:	2300      	movs	r3, #0
 800ed54:	9303      	str	r3, [sp, #12]
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	9302      	str	r3, [sp, #8]
 800ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5c:	9301      	str	r3, [sp, #4]
 800ed5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	68b9      	ldr	r1, [r7, #8]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 f80e 	bl	800ed88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed6c:	69f8      	ldr	r0, [r7, #28]
 800ed6e:	f000 f89d 	bl	800eeac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed72:	2301      	movs	r3, #1
 800ed74:	61bb      	str	r3, [r7, #24]
 800ed76:	e002      	b.n	800ed7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed7e:	69bb      	ldr	r3, [r7, #24]
	}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3720      	adds	r7, #32
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
 800ed94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	461a      	mov	r2, r3
 800eda0:	21a5      	movs	r1, #165	; 0xa5
 800eda2:	f012 f827 	bl	8020df4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edaa:	6879      	ldr	r1, [r7, #4]
 800edac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800edb0:	440b      	add	r3, r1
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	4413      	add	r3, r2
 800edb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	f023 0307 	bic.w	r3, r3, #7
 800edbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	f003 0307 	and.w	r3, r3, #7
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00c      	beq.n	800ede4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	b672      	cpsid	i
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	b662      	cpsie	i
 800edde:	617b      	str	r3, [r7, #20]
}
 800ede0:	bf00      	nop
 800ede2:	e7fe      	b.n	800ede2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d01f      	beq.n	800ee2a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edea:	2300      	movs	r3, #0
 800edec:	61fb      	str	r3, [r7, #28]
 800edee:	e012      	b.n	800ee16 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	4413      	add	r3, r2
 800edf6:	7819      	ldrb	r1, [r3, #0]
 800edf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	4413      	add	r3, r2
 800edfe:	3334      	adds	r3, #52	; 0x34
 800ee00:	460a      	mov	r2, r1
 800ee02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	4413      	add	r3, r2
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d006      	beq.n	800ee1e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	3301      	adds	r3, #1
 800ee14:	61fb      	str	r3, [r7, #28]
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	2b0f      	cmp	r3, #15
 800ee1a:	d9e9      	bls.n	800edf0 <prvInitialiseNewTask+0x68>
 800ee1c:	e000      	b.n	800ee20 <prvInitialiseNewTask+0x98>
			{
				break;
 800ee1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee28:	e003      	b.n	800ee32 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee34:	2b37      	cmp	r3, #55	; 0x37
 800ee36:	d901      	bls.n	800ee3c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ee38:	2337      	movs	r3, #55	; 0x37
 800ee3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ee48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	3304      	adds	r3, #4
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff f952 	bl	800e0fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5a:	3318      	adds	r3, #24
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff f94d 	bl	800e0fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee80:	2200      	movs	r2, #0
 800ee82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	68f9      	ldr	r1, [r7, #12]
 800ee8a:	69b8      	ldr	r0, [r7, #24]
 800ee8c:	f001 f97a 	bl	8010184 <pxPortInitialiseStack>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eea2:	bf00      	nop
 800eea4:	3720      	adds	r7, #32
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
	...

0800eeac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eeb4:	f001 fa72 	bl	801039c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eeb8:	4b2d      	ldr	r3, [pc, #180]	; (800ef70 <prvAddNewTaskToReadyList+0xc4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	3301      	adds	r3, #1
 800eebe:	4a2c      	ldr	r2, [pc, #176]	; (800ef70 <prvAddNewTaskToReadyList+0xc4>)
 800eec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eec2:	4b2c      	ldr	r3, [pc, #176]	; (800ef74 <prvAddNewTaskToReadyList+0xc8>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d109      	bne.n	800eede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eeca:	4a2a      	ldr	r2, [pc, #168]	; (800ef74 <prvAddNewTaskToReadyList+0xc8>)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eed0:	4b27      	ldr	r3, [pc, #156]	; (800ef70 <prvAddNewTaskToReadyList+0xc4>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d110      	bne.n	800eefa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eed8:	f000 fc54 	bl	800f784 <prvInitialiseTaskLists>
 800eedc:	e00d      	b.n	800eefa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eede:	4b26      	ldr	r3, [pc, #152]	; (800ef78 <prvAddNewTaskToReadyList+0xcc>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d109      	bne.n	800eefa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eee6:	4b23      	ldr	r3, [pc, #140]	; (800ef74 <prvAddNewTaskToReadyList+0xc8>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d802      	bhi.n	800eefa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eef4:	4a1f      	ldr	r2, [pc, #124]	; (800ef74 <prvAddNewTaskToReadyList+0xc8>)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eefa:	4b20      	ldr	r3, [pc, #128]	; (800ef7c <prvAddNewTaskToReadyList+0xd0>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	3301      	adds	r3, #1
 800ef00:	4a1e      	ldr	r2, [pc, #120]	; (800ef7c <prvAddNewTaskToReadyList+0xd0>)
 800ef02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ef04:	4b1d      	ldr	r3, [pc, #116]	; (800ef7c <prvAddNewTaskToReadyList+0xd0>)
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef10:	4b1b      	ldr	r3, [pc, #108]	; (800ef80 <prvAddNewTaskToReadyList+0xd4>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d903      	bls.n	800ef20 <prvAddNewTaskToReadyList+0x74>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1c:	4a18      	ldr	r2, [pc, #96]	; (800ef80 <prvAddNewTaskToReadyList+0xd4>)
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef24:	4613      	mov	r3, r2
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	4413      	add	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	4a15      	ldr	r2, [pc, #84]	; (800ef84 <prvAddNewTaskToReadyList+0xd8>)
 800ef2e:	441a      	add	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3304      	adds	r3, #4
 800ef34:	4619      	mov	r1, r3
 800ef36:	4610      	mov	r0, r2
 800ef38:	f7ff f8ed 	bl	800e116 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef3c:	f001 fa62 	bl	8010404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef40:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <prvAddNewTaskToReadyList+0xcc>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00e      	beq.n	800ef66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef48:	4b0a      	ldr	r3, [pc, #40]	; (800ef74 <prvAddNewTaskToReadyList+0xc8>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d207      	bcs.n	800ef66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef56:	4b0c      	ldr	r3, [pc, #48]	; (800ef88 <prvAddNewTaskToReadyList+0xdc>)
 800ef58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef66:	bf00      	nop
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	2000ca44 	.word	0x2000ca44
 800ef74:	2000c570 	.word	0x2000c570
 800ef78:	2000ca50 	.word	0x2000ca50
 800ef7c:	2000ca60 	.word	0x2000ca60
 800ef80:	2000ca4c 	.word	0x2000ca4c
 800ef84:	2000c574 	.word	0x2000c574
 800ef88:	e000ed04 	.word	0xe000ed04

0800ef8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d019      	beq.n	800efd2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef9e:	4b14      	ldr	r3, [pc, #80]	; (800eff0 <vTaskDelay+0x64>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00c      	beq.n	800efc0 <vTaskDelay+0x34>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efaa:	b672      	cpsid	i
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	b662      	cpsie	i
 800efba:	60bb      	str	r3, [r7, #8]
}
 800efbc:	bf00      	nop
 800efbe:	e7fe      	b.n	800efbe <vTaskDelay+0x32>
			vTaskSuspendAll();
 800efc0:	f000 f884 	bl	800f0cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800efc4:	2100      	movs	r1, #0
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fd2c 	bl	800fa24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800efcc:	f000 f88c 	bl	800f0e8 <xTaskResumeAll>
 800efd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d107      	bne.n	800efe8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800efd8:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <vTaskDelay+0x68>)
 800efda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efe8:	bf00      	nop
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	2000ca6c 	.word	0x2000ca6c
 800eff4:	e000ed04 	.word	0xe000ed04

0800eff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b08a      	sub	sp, #40	; 0x28
 800effc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800effe:	2300      	movs	r3, #0
 800f000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f002:	2300      	movs	r3, #0
 800f004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f006:	463a      	mov	r2, r7
 800f008:	1d39      	adds	r1, r7, #4
 800f00a:	f107 0308 	add.w	r3, r7, #8
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff f820 	bl	800e054 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f014:	6839      	ldr	r1, [r7, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	9202      	str	r2, [sp, #8]
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	2300      	movs	r3, #0
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	2300      	movs	r3, #0
 800f024:	460a      	mov	r2, r1
 800f026:	4923      	ldr	r1, [pc, #140]	; (800f0b4 <vTaskStartScheduler+0xbc>)
 800f028:	4823      	ldr	r0, [pc, #140]	; (800f0b8 <vTaskStartScheduler+0xc0>)
 800f02a:	f7ff fe05 	bl	800ec38 <xTaskCreateStatic>
 800f02e:	4603      	mov	r3, r0
 800f030:	4a22      	ldr	r2, [pc, #136]	; (800f0bc <vTaskStartScheduler+0xc4>)
 800f032:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f034:	4b21      	ldr	r3, [pc, #132]	; (800f0bc <vTaskStartScheduler+0xc4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d002      	beq.n	800f042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f03c:	2301      	movs	r3, #1
 800f03e:	617b      	str	r3, [r7, #20]
 800f040:	e001      	b.n	800f046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f042:	2300      	movs	r3, #0
 800f044:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d102      	bne.n	800f052 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f04c:	f000 fd3e 	bl	800facc <xTimerCreateTimerTask>
 800f050:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d118      	bne.n	800f08a <vTaskStartScheduler+0x92>
	__asm volatile
 800f058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05c:	b672      	cpsid	i
 800f05e:	f383 8811 	msr	BASEPRI, r3
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	f3bf 8f4f 	dsb	sy
 800f06a:	b662      	cpsie	i
 800f06c:	613b      	str	r3, [r7, #16]
}
 800f06e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f070:	4b13      	ldr	r3, [pc, #76]	; (800f0c0 <vTaskStartScheduler+0xc8>)
 800f072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f078:	4b12      	ldr	r3, [pc, #72]	; (800f0c4 <vTaskStartScheduler+0xcc>)
 800f07a:	2201      	movs	r2, #1
 800f07c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f07e:	4b12      	ldr	r3, [pc, #72]	; (800f0c8 <vTaskStartScheduler+0xd0>)
 800f080:	2200      	movs	r2, #0
 800f082:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f084:	f001 f90c 	bl	80102a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f088:	e010      	b.n	800f0ac <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f090:	d10c      	bne.n	800f0ac <vTaskStartScheduler+0xb4>
	__asm volatile
 800f092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f096:	b672      	cpsid	i
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	b662      	cpsie	i
 800f0a6:	60fb      	str	r3, [r7, #12]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <vTaskStartScheduler+0xb2>
}
 800f0ac:	bf00      	nop
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	080244e4 	.word	0x080244e4
 800f0b8:	0800f755 	.word	0x0800f755
 800f0bc:	2000ca68 	.word	0x2000ca68
 800f0c0:	2000ca64 	.word	0x2000ca64
 800f0c4:	2000ca50 	.word	0x2000ca50
 800f0c8:	2000ca48 	.word	0x2000ca48

0800f0cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f0d0:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <vTaskSuspendAll+0x18>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	4a03      	ldr	r2, [pc, #12]	; (800f0e4 <vTaskSuspendAll+0x18>)
 800f0d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f0da:	bf00      	nop
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	2000ca6c 	.word	0x2000ca6c

0800f0e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f0f6:	4b43      	ldr	r3, [pc, #268]	; (800f204 <xTaskResumeAll+0x11c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10c      	bne.n	800f118 <xTaskResumeAll+0x30>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	b672      	cpsid	i
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	b662      	cpsie	i
 800f112:	603b      	str	r3, [r7, #0]
}
 800f114:	bf00      	nop
 800f116:	e7fe      	b.n	800f116 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f118:	f001 f940 	bl	801039c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f11c:	4b39      	ldr	r3, [pc, #228]	; (800f204 <xTaskResumeAll+0x11c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	3b01      	subs	r3, #1
 800f122:	4a38      	ldr	r2, [pc, #224]	; (800f204 <xTaskResumeAll+0x11c>)
 800f124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f126:	4b37      	ldr	r3, [pc, #220]	; (800f204 <xTaskResumeAll+0x11c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d162      	bne.n	800f1f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f12e:	4b36      	ldr	r3, [pc, #216]	; (800f208 <xTaskResumeAll+0x120>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d05e      	beq.n	800f1f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f136:	e02f      	b.n	800f198 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f138:	4b34      	ldr	r3, [pc, #208]	; (800f20c <xTaskResumeAll+0x124>)
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3318      	adds	r3, #24
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff f843 	bl	800e1d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3304      	adds	r3, #4
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff f83e 	bl	800e1d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f158:	4b2d      	ldr	r3, [pc, #180]	; (800f210 <xTaskResumeAll+0x128>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d903      	bls.n	800f168 <xTaskResumeAll+0x80>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f164:	4a2a      	ldr	r2, [pc, #168]	; (800f210 <xTaskResumeAll+0x128>)
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f16c:	4613      	mov	r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	4413      	add	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4a27      	ldr	r2, [pc, #156]	; (800f214 <xTaskResumeAll+0x12c>)
 800f176:	441a      	add	r2, r3
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	3304      	adds	r3, #4
 800f17c:	4619      	mov	r1, r3
 800f17e:	4610      	mov	r0, r2
 800f180:	f7fe ffc9 	bl	800e116 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f188:	4b23      	ldr	r3, [pc, #140]	; (800f218 <xTaskResumeAll+0x130>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f18e:	429a      	cmp	r2, r3
 800f190:	d302      	bcc.n	800f198 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f192:	4b22      	ldr	r3, [pc, #136]	; (800f21c <xTaskResumeAll+0x134>)
 800f194:	2201      	movs	r2, #1
 800f196:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f198:	4b1c      	ldr	r3, [pc, #112]	; (800f20c <xTaskResumeAll+0x124>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1cb      	bne.n	800f138 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f1a6:	f000 fb8d 	bl	800f8c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f1aa:	4b1d      	ldr	r3, [pc, #116]	; (800f220 <xTaskResumeAll+0x138>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d010      	beq.n	800f1d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f1b6:	f000 f847 	bl	800f248 <xTaskIncrementTick>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f1c0:	4b16      	ldr	r3, [pc, #88]	; (800f21c <xTaskResumeAll+0x134>)
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1f1      	bne.n	800f1b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f1d2:	4b13      	ldr	r3, [pc, #76]	; (800f220 <xTaskResumeAll+0x138>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1d8:	4b10      	ldr	r3, [pc, #64]	; (800f21c <xTaskResumeAll+0x134>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d009      	beq.n	800f1f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1e4:	4b0f      	ldr	r3, [pc, #60]	; (800f224 <xTaskResumeAll+0x13c>)
 800f1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1ea:	601a      	str	r2, [r3, #0]
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1f4:	f001 f906 	bl	8010404 <vPortExitCritical>

	return xAlreadyYielded;
 800f1f8:	68bb      	ldr	r3, [r7, #8]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	2000ca6c 	.word	0x2000ca6c
 800f208:	2000ca44 	.word	0x2000ca44
 800f20c:	2000ca04 	.word	0x2000ca04
 800f210:	2000ca4c 	.word	0x2000ca4c
 800f214:	2000c574 	.word	0x2000c574
 800f218:	2000c570 	.word	0x2000c570
 800f21c:	2000ca58 	.word	0x2000ca58
 800f220:	2000ca54 	.word	0x2000ca54
 800f224:	e000ed04 	.word	0xe000ed04

0800f228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f22e:	4b05      	ldr	r3, [pc, #20]	; (800f244 <xTaskGetTickCount+0x1c>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f234:	687b      	ldr	r3, [r7, #4]
}
 800f236:	4618      	mov	r0, r3
 800f238:	370c      	adds	r7, #12
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	2000ca48 	.word	0x2000ca48

0800f248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f24e:	2300      	movs	r3, #0
 800f250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f252:	4b50      	ldr	r3, [pc, #320]	; (800f394 <xTaskIncrementTick+0x14c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	f040 808b 	bne.w	800f372 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f25c:	4b4e      	ldr	r3, [pc, #312]	; (800f398 <xTaskIncrementTick+0x150>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3301      	adds	r3, #1
 800f262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f264:	4a4c      	ldr	r2, [pc, #304]	; (800f398 <xTaskIncrementTick+0x150>)
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d122      	bne.n	800f2b6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f270:	4b4a      	ldr	r3, [pc, #296]	; (800f39c <xTaskIncrementTick+0x154>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00c      	beq.n	800f294 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27e:	b672      	cpsid	i
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	b662      	cpsie	i
 800f28e:	603b      	str	r3, [r7, #0]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <xTaskIncrementTick+0x4a>
 800f294:	4b41      	ldr	r3, [pc, #260]	; (800f39c <xTaskIncrementTick+0x154>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	4b41      	ldr	r3, [pc, #260]	; (800f3a0 <xTaskIncrementTick+0x158>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a3f      	ldr	r2, [pc, #252]	; (800f39c <xTaskIncrementTick+0x154>)
 800f2a0:	6013      	str	r3, [r2, #0]
 800f2a2:	4a3f      	ldr	r2, [pc, #252]	; (800f3a0 <xTaskIncrementTick+0x158>)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	4b3e      	ldr	r3, [pc, #248]	; (800f3a4 <xTaskIncrementTick+0x15c>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	4a3d      	ldr	r2, [pc, #244]	; (800f3a4 <xTaskIncrementTick+0x15c>)
 800f2b0:	6013      	str	r3, [r2, #0]
 800f2b2:	f000 fb07 	bl	800f8c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f2b6:	4b3c      	ldr	r3, [pc, #240]	; (800f3a8 <xTaskIncrementTick+0x160>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	693a      	ldr	r2, [r7, #16]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d349      	bcc.n	800f354 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2c0:	4b36      	ldr	r3, [pc, #216]	; (800f39c <xTaskIncrementTick+0x154>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d104      	bne.n	800f2d4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ca:	4b37      	ldr	r3, [pc, #220]	; (800f3a8 <xTaskIncrementTick+0x160>)
 800f2cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2d0:	601a      	str	r2, [r3, #0]
					break;
 800f2d2:	e03f      	b.n	800f354 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2d4:	4b31      	ldr	r3, [pc, #196]	; (800f39c <xTaskIncrementTick+0x154>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d203      	bcs.n	800f2f4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f2ec:	4a2e      	ldr	r2, [pc, #184]	; (800f3a8 <xTaskIncrementTick+0x160>)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f2f2:	e02f      	b.n	800f354 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fe ff69 	bl	800e1d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f302:	2b00      	cmp	r3, #0
 800f304:	d004      	beq.n	800f310 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	3318      	adds	r3, #24
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe ff60 	bl	800e1d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f314:	4b25      	ldr	r3, [pc, #148]	; (800f3ac <xTaskIncrementTick+0x164>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d903      	bls.n	800f324 <xTaskIncrementTick+0xdc>
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f320:	4a22      	ldr	r2, [pc, #136]	; (800f3ac <xTaskIncrementTick+0x164>)
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f328:	4613      	mov	r3, r2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4a1f      	ldr	r2, [pc, #124]	; (800f3b0 <xTaskIncrementTick+0x168>)
 800f332:	441a      	add	r2, r3
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	3304      	adds	r3, #4
 800f338:	4619      	mov	r1, r3
 800f33a:	4610      	mov	r0, r2
 800f33c:	f7fe feeb 	bl	800e116 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f344:	4b1b      	ldr	r3, [pc, #108]	; (800f3b4 <xTaskIncrementTick+0x16c>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d3b8      	bcc.n	800f2c0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f34e:	2301      	movs	r3, #1
 800f350:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f352:	e7b5      	b.n	800f2c0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f354:	4b17      	ldr	r3, [pc, #92]	; (800f3b4 <xTaskIncrementTick+0x16c>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35a:	4915      	ldr	r1, [pc, #84]	; (800f3b0 <xTaskIncrementTick+0x168>)
 800f35c:	4613      	mov	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4413      	add	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	440b      	add	r3, r1
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d907      	bls.n	800f37c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f36c:	2301      	movs	r3, #1
 800f36e:	617b      	str	r3, [r7, #20]
 800f370:	e004      	b.n	800f37c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f372:	4b11      	ldr	r3, [pc, #68]	; (800f3b8 <xTaskIncrementTick+0x170>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3301      	adds	r3, #1
 800f378:	4a0f      	ldr	r2, [pc, #60]	; (800f3b8 <xTaskIncrementTick+0x170>)
 800f37a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f37c:	4b0f      	ldr	r3, [pc, #60]	; (800f3bc <xTaskIncrementTick+0x174>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f384:	2301      	movs	r3, #1
 800f386:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f388:	697b      	ldr	r3, [r7, #20]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	2000ca6c 	.word	0x2000ca6c
 800f398:	2000ca48 	.word	0x2000ca48
 800f39c:	2000c9fc 	.word	0x2000c9fc
 800f3a0:	2000ca00 	.word	0x2000ca00
 800f3a4:	2000ca5c 	.word	0x2000ca5c
 800f3a8:	2000ca64 	.word	0x2000ca64
 800f3ac:	2000ca4c 	.word	0x2000ca4c
 800f3b0:	2000c574 	.word	0x2000c574
 800f3b4:	2000c570 	.word	0x2000c570
 800f3b8:	2000ca54 	.word	0x2000ca54
 800f3bc:	2000ca58 	.word	0x2000ca58

0800f3c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3c6:	4b29      	ldr	r3, [pc, #164]	; (800f46c <vTaskSwitchContext+0xac>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f3ce:	4b28      	ldr	r3, [pc, #160]	; (800f470 <vTaskSwitchContext+0xb0>)
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f3d4:	e043      	b.n	800f45e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f3d6:	4b26      	ldr	r3, [pc, #152]	; (800f470 <vTaskSwitchContext+0xb0>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3dc:	4b25      	ldr	r3, [pc, #148]	; (800f474 <vTaskSwitchContext+0xb4>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	60fb      	str	r3, [r7, #12]
 800f3e2:	e012      	b.n	800f40a <vTaskSwitchContext+0x4a>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10c      	bne.n	800f404 <vTaskSwitchContext+0x44>
	__asm volatile
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	b672      	cpsid	i
 800f3f0:	f383 8811 	msr	BASEPRI, r3
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	f3bf 8f4f 	dsb	sy
 800f3fc:	b662      	cpsie	i
 800f3fe:	607b      	str	r3, [r7, #4]
}
 800f400:	bf00      	nop
 800f402:	e7fe      	b.n	800f402 <vTaskSwitchContext+0x42>
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3b01      	subs	r3, #1
 800f408:	60fb      	str	r3, [r7, #12]
 800f40a:	491b      	ldr	r1, [pc, #108]	; (800f478 <vTaskSwitchContext+0xb8>)
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	4613      	mov	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	440b      	add	r3, r1
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d0e2      	beq.n	800f3e4 <vTaskSwitchContext+0x24>
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	4613      	mov	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4413      	add	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	4a13      	ldr	r2, [pc, #76]	; (800f478 <vTaskSwitchContext+0xb8>)
 800f42a:	4413      	add	r3, r2
 800f42c:	60bb      	str	r3, [r7, #8]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	605a      	str	r2, [r3, #4]
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	3308      	adds	r3, #8
 800f440:	429a      	cmp	r2, r3
 800f442:	d104      	bne.n	800f44e <vTaskSwitchContext+0x8e>
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	685a      	ldr	r2, [r3, #4]
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	605a      	str	r2, [r3, #4]
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	4a09      	ldr	r2, [pc, #36]	; (800f47c <vTaskSwitchContext+0xbc>)
 800f456:	6013      	str	r3, [r2, #0]
 800f458:	4a06      	ldr	r2, [pc, #24]	; (800f474 <vTaskSwitchContext+0xb4>)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6013      	str	r3, [r2, #0]
}
 800f45e:	bf00      	nop
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	2000ca6c 	.word	0x2000ca6c
 800f470:	2000ca58 	.word	0x2000ca58
 800f474:	2000ca4c 	.word	0x2000ca4c
 800f478:	2000c574 	.word	0x2000c574
 800f47c:	2000c570 	.word	0x2000c570

0800f480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10c      	bne.n	800f4aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	b672      	cpsid	i
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	b662      	cpsie	i
 800f4a4:	60fb      	str	r3, [r7, #12]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4aa:	4b07      	ldr	r3, [pc, #28]	; (800f4c8 <vTaskPlaceOnEventList+0x48>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3318      	adds	r3, #24
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7fe fe53 	bl	800e15e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	6838      	ldr	r0, [r7, #0]
 800f4bc:	f000 fab2 	bl	800fa24 <prvAddCurrentTaskToDelayedList>
}
 800f4c0:	bf00      	nop
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	2000c570 	.word	0x2000c570

0800f4cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b086      	sub	sp, #24
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10c      	bne.n	800f4f8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e2:	b672      	cpsid	i
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	b662      	cpsie	i
 800f4f2:	617b      	str	r3, [r7, #20]
}
 800f4f4:	bf00      	nop
 800f4f6:	e7fe      	b.n	800f4f6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4f8:	4b0a      	ldr	r3, [pc, #40]	; (800f524 <vTaskPlaceOnEventListRestricted+0x58>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	3318      	adds	r3, #24
 800f4fe:	4619      	mov	r1, r3
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f7fe fe08 	bl	800e116 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f510:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	68b8      	ldr	r0, [r7, #8]
 800f516:	f000 fa85 	bl	800fa24 <prvAddCurrentTaskToDelayedList>
	}
 800f51a:	bf00      	nop
 800f51c:	3718      	adds	r7, #24
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	2000c570 	.word	0x2000c570

0800f528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b086      	sub	sp, #24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d10c      	bne.n	800f558 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f542:	b672      	cpsid	i
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	b662      	cpsie	i
 800f552:	60fb      	str	r3, [r7, #12]
}
 800f554:	bf00      	nop
 800f556:	e7fe      	b.n	800f556 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	3318      	adds	r3, #24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fe fe37 	bl	800e1d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f562:	4b1e      	ldr	r3, [pc, #120]	; (800f5dc <xTaskRemoveFromEventList+0xb4>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d11d      	bne.n	800f5a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	3304      	adds	r3, #4
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe fe2e 	bl	800e1d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f578:	4b19      	ldr	r3, [pc, #100]	; (800f5e0 <xTaskRemoveFromEventList+0xb8>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d903      	bls.n	800f588 <xTaskRemoveFromEventList+0x60>
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f584:	4a16      	ldr	r2, [pc, #88]	; (800f5e0 <xTaskRemoveFromEventList+0xb8>)
 800f586:	6013      	str	r3, [r2, #0]
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f58c:	4613      	mov	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	4a13      	ldr	r2, [pc, #76]	; (800f5e4 <xTaskRemoveFromEventList+0xbc>)
 800f596:	441a      	add	r2, r3
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	3304      	adds	r3, #4
 800f59c:	4619      	mov	r1, r3
 800f59e:	4610      	mov	r0, r2
 800f5a0:	f7fe fdb9 	bl	800e116 <vListInsertEnd>
 800f5a4:	e005      	b.n	800f5b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	3318      	adds	r3, #24
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	480e      	ldr	r0, [pc, #56]	; (800f5e8 <xTaskRemoveFromEventList+0xc0>)
 800f5ae:	f7fe fdb2 	bl	800e116 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	; (800f5ec <xTaskRemoveFromEventList+0xc4>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d905      	bls.n	800f5cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <xTaskRemoveFromEventList+0xc8>)
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	601a      	str	r2, [r3, #0]
 800f5ca:	e001      	b.n	800f5d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f5d0:	697b      	ldr	r3, [r7, #20]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3718      	adds	r7, #24
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000ca6c 	.word	0x2000ca6c
 800f5e0:	2000ca4c 	.word	0x2000ca4c
 800f5e4:	2000c574 	.word	0x2000c574
 800f5e8:	2000ca04 	.word	0x2000ca04
 800f5ec:	2000c570 	.word	0x2000c570
 800f5f0:	2000ca58 	.word	0x2000ca58

0800f5f4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10c      	bne.n	800f61c <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f606:	b672      	cpsid	i
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	b662      	cpsie	i
 800f616:	60fb      	str	r3, [r7, #12]
}
 800f618:	bf00      	nop
 800f61a:	e7fe      	b.n	800f61a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f61c:	f000 febe 	bl	801039c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f620:	4b06      	ldr	r3, [pc, #24]	; (800f63c <vTaskSetTimeOutState+0x48>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f628:	4b05      	ldr	r3, [pc, #20]	; (800f640 <vTaskSetTimeOutState+0x4c>)
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f630:	f000 fee8 	bl	8010404 <vPortExitCritical>
}
 800f634:	bf00      	nop
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	2000ca5c 	.word	0x2000ca5c
 800f640:	2000ca48 	.word	0x2000ca48

0800f644 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f64c:	4b06      	ldr	r3, [pc, #24]	; (800f668 <vTaskInternalSetTimeOutState+0x24>)
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f654:	4b05      	ldr	r3, [pc, #20]	; (800f66c <vTaskInternalSetTimeOutState+0x28>)
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	605a      	str	r2, [r3, #4]
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr
 800f668:	2000ca5c 	.word	0x2000ca5c
 800f66c:	2000ca48 	.word	0x2000ca48

0800f670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10c      	bne.n	800f69a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	b672      	cpsid	i
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	b662      	cpsie	i
 800f694:	613b      	str	r3, [r7, #16]
}
 800f696:	bf00      	nop
 800f698:	e7fe      	b.n	800f698 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10c      	bne.n	800f6ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a4:	b672      	cpsid	i
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	b662      	cpsie	i
 800f6b4:	60fb      	str	r3, [r7, #12]
}
 800f6b6:	bf00      	nop
 800f6b8:	e7fe      	b.n	800f6b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f6ba:	f000 fe6f 	bl	801039c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f6be:	4b1d      	ldr	r3, [pc, #116]	; (800f734 <xTaskCheckForTimeOut+0xc4>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6d6:	d102      	bne.n	800f6de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	61fb      	str	r3, [r7, #28]
 800f6dc:	e023      	b.n	800f726 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <xTaskCheckForTimeOut+0xc8>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d007      	beq.n	800f6fa <xTaskCheckForTimeOut+0x8a>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	69ba      	ldr	r2, [r7, #24]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d302      	bcc.n	800f6fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	61fb      	str	r3, [r7, #28]
 800f6f8:	e015      	b.n	800f726 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	697a      	ldr	r2, [r7, #20]
 800f700:	429a      	cmp	r2, r3
 800f702:	d20b      	bcs.n	800f71c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	1ad2      	subs	r2, r2, r3
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff ff97 	bl	800f644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f716:	2300      	movs	r3, #0
 800f718:	61fb      	str	r3, [r7, #28]
 800f71a:	e004      	b.n	800f726 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2200      	movs	r2, #0
 800f720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f722:	2301      	movs	r3, #1
 800f724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f726:	f000 fe6d 	bl	8010404 <vPortExitCritical>

	return xReturn;
 800f72a:	69fb      	ldr	r3, [r7, #28]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3720      	adds	r7, #32
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	2000ca48 	.word	0x2000ca48
 800f738:	2000ca5c 	.word	0x2000ca5c

0800f73c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f740:	4b03      	ldr	r3, [pc, #12]	; (800f750 <vTaskMissedYield+0x14>)
 800f742:	2201      	movs	r2, #1
 800f744:	601a      	str	r2, [r3, #0]
}
 800f746:	bf00      	nop
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	2000ca58 	.word	0x2000ca58

0800f754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f75c:	f000 f852 	bl	800f804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f760:	4b06      	ldr	r3, [pc, #24]	; (800f77c <prvIdleTask+0x28>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d9f9      	bls.n	800f75c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f768:	4b05      	ldr	r3, [pc, #20]	; (800f780 <prvIdleTask+0x2c>)
 800f76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f76e:	601a      	str	r2, [r3, #0]
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f778:	e7f0      	b.n	800f75c <prvIdleTask+0x8>
 800f77a:	bf00      	nop
 800f77c:	2000c574 	.word	0x2000c574
 800f780:	e000ed04 	.word	0xe000ed04

0800f784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f78a:	2300      	movs	r3, #0
 800f78c:	607b      	str	r3, [r7, #4]
 800f78e:	e00c      	b.n	800f7aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	4613      	mov	r3, r2
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4413      	add	r3, r2
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	4a12      	ldr	r2, [pc, #72]	; (800f7e4 <prvInitialiseTaskLists+0x60>)
 800f79c:	4413      	add	r3, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fe fc8c 	bl	800e0bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	607b      	str	r3, [r7, #4]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2b37      	cmp	r3, #55	; 0x37
 800f7ae:	d9ef      	bls.n	800f790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f7b0:	480d      	ldr	r0, [pc, #52]	; (800f7e8 <prvInitialiseTaskLists+0x64>)
 800f7b2:	f7fe fc83 	bl	800e0bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f7b6:	480d      	ldr	r0, [pc, #52]	; (800f7ec <prvInitialiseTaskLists+0x68>)
 800f7b8:	f7fe fc80 	bl	800e0bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f7bc:	480c      	ldr	r0, [pc, #48]	; (800f7f0 <prvInitialiseTaskLists+0x6c>)
 800f7be:	f7fe fc7d 	bl	800e0bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f7c2:	480c      	ldr	r0, [pc, #48]	; (800f7f4 <prvInitialiseTaskLists+0x70>)
 800f7c4:	f7fe fc7a 	bl	800e0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f7c8:	480b      	ldr	r0, [pc, #44]	; (800f7f8 <prvInitialiseTaskLists+0x74>)
 800f7ca:	f7fe fc77 	bl	800e0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f7ce:	4b0b      	ldr	r3, [pc, #44]	; (800f7fc <prvInitialiseTaskLists+0x78>)
 800f7d0:	4a05      	ldr	r2, [pc, #20]	; (800f7e8 <prvInitialiseTaskLists+0x64>)
 800f7d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f7d4:	4b0a      	ldr	r3, [pc, #40]	; (800f800 <prvInitialiseTaskLists+0x7c>)
 800f7d6:	4a05      	ldr	r2, [pc, #20]	; (800f7ec <prvInitialiseTaskLists+0x68>)
 800f7d8:	601a      	str	r2, [r3, #0]
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	2000c574 	.word	0x2000c574
 800f7e8:	2000c9d4 	.word	0x2000c9d4
 800f7ec:	2000c9e8 	.word	0x2000c9e8
 800f7f0:	2000ca04 	.word	0x2000ca04
 800f7f4:	2000ca18 	.word	0x2000ca18
 800f7f8:	2000ca30 	.word	0x2000ca30
 800f7fc:	2000c9fc 	.word	0x2000c9fc
 800f800:	2000ca00 	.word	0x2000ca00

0800f804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f80a:	e019      	b.n	800f840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f80c:	f000 fdc6 	bl	801039c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f810:	4b10      	ldr	r3, [pc, #64]	; (800f854 <prvCheckTasksWaitingTermination+0x50>)
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fcd7 	bl	800e1d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f822:	4b0d      	ldr	r3, [pc, #52]	; (800f858 <prvCheckTasksWaitingTermination+0x54>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3b01      	subs	r3, #1
 800f828:	4a0b      	ldr	r2, [pc, #44]	; (800f858 <prvCheckTasksWaitingTermination+0x54>)
 800f82a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f82c:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <prvCheckTasksWaitingTermination+0x58>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	3b01      	subs	r3, #1
 800f832:	4a0a      	ldr	r2, [pc, #40]	; (800f85c <prvCheckTasksWaitingTermination+0x58>)
 800f834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f836:	f000 fde5 	bl	8010404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f810 	bl	800f860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f840:	4b06      	ldr	r3, [pc, #24]	; (800f85c <prvCheckTasksWaitingTermination+0x58>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1e1      	bne.n	800f80c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f848:	bf00      	nop
 800f84a:	bf00      	nop
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	2000ca18 	.word	0x2000ca18
 800f858:	2000ca44 	.word	0x2000ca44
 800f85c:	2000ca2c 	.word	0x2000ca2c

0800f860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d108      	bne.n	800f884 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f876:	4618      	mov	r0, r3
 800f878:	f000 ff86 	bl	8010788 <vPortFree>
				vPortFree( pxTCB );
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 ff83 	bl	8010788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f882:	e01a      	b.n	800f8ba <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d103      	bne.n	800f896 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 ff7a 	bl	8010788 <vPortFree>
	}
 800f894:	e011      	b.n	800f8ba <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d00c      	beq.n	800f8ba <prvDeleteTCB+0x5a>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	b672      	cpsid	i
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	b662      	cpsie	i
 800f8b4:	60fb      	str	r3, [r7, #12]
}
 800f8b6:	bf00      	nop
 800f8b8:	e7fe      	b.n	800f8b8 <prvDeleteTCB+0x58>
	}
 800f8ba:	bf00      	nop
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
	...

0800f8c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8ca:	4b0c      	ldr	r3, [pc, #48]	; (800f8fc <prvResetNextTaskUnblockTime+0x38>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d104      	bne.n	800f8de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f8d4:	4b0a      	ldr	r3, [pc, #40]	; (800f900 <prvResetNextTaskUnblockTime+0x3c>)
 800f8d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f8dc:	e008      	b.n	800f8f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8de:	4b07      	ldr	r3, [pc, #28]	; (800f8fc <prvResetNextTaskUnblockTime+0x38>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	4a04      	ldr	r2, [pc, #16]	; (800f900 <prvResetNextTaskUnblockTime+0x3c>)
 800f8ee:	6013      	str	r3, [r2, #0]
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	2000c9fc 	.word	0x2000c9fc
 800f900:	2000ca64 	.word	0x2000ca64

0800f904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f90a:	4b0b      	ldr	r3, [pc, #44]	; (800f938 <xTaskGetSchedulerState+0x34>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d102      	bne.n	800f918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f912:	2301      	movs	r3, #1
 800f914:	607b      	str	r3, [r7, #4]
 800f916:	e008      	b.n	800f92a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f918:	4b08      	ldr	r3, [pc, #32]	; (800f93c <xTaskGetSchedulerState+0x38>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d102      	bne.n	800f926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f920:	2302      	movs	r3, #2
 800f922:	607b      	str	r3, [r7, #4]
 800f924:	e001      	b.n	800f92a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f926:	2300      	movs	r3, #0
 800f928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f92a:	687b      	ldr	r3, [r7, #4]
	}
 800f92c:	4618      	mov	r0, r3
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	2000ca50 	.word	0x2000ca50
 800f93c:	2000ca6c 	.word	0x2000ca6c

0800f940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f94c:	2300      	movs	r3, #0
 800f94e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d05a      	beq.n	800fa0c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f956:	4b30      	ldr	r3, [pc, #192]	; (800fa18 <xTaskPriorityDisinherit+0xd8>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d00c      	beq.n	800f97a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f964:	b672      	cpsid	i
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	b662      	cpsie	i
 800f974:	60fb      	str	r3, [r7, #12]
}
 800f976:	bf00      	nop
 800f978:	e7fe      	b.n	800f978 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10c      	bne.n	800f99c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800f982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f986:	b672      	cpsid	i
 800f988:	f383 8811 	msr	BASEPRI, r3
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	b662      	cpsie	i
 800f996:	60bb      	str	r3, [r7, #8]
}
 800f998:	bf00      	nop
 800f99a:	e7fe      	b.n	800f99a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9a0:	1e5a      	subs	r2, r3, #1
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d02c      	beq.n	800fa0c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d128      	bne.n	800fa0c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	3304      	adds	r3, #4
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fe fc06 	bl	800e1d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9dc:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <xTaskPriorityDisinherit+0xdc>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d903      	bls.n	800f9ec <xTaskPriorityDisinherit+0xac>
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9e8:	4a0c      	ldr	r2, [pc, #48]	; (800fa1c <xTaskPriorityDisinherit+0xdc>)
 800f9ea:	6013      	str	r3, [r2, #0]
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	4413      	add	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4a09      	ldr	r2, [pc, #36]	; (800fa20 <xTaskPriorityDisinherit+0xe0>)
 800f9fa:	441a      	add	r2, r3
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	3304      	adds	r3, #4
 800fa00:	4619      	mov	r1, r3
 800fa02:	4610      	mov	r0, r2
 800fa04:	f7fe fb87 	bl	800e116 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa0c:	697b      	ldr	r3, [r7, #20]
	}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3718      	adds	r7, #24
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	2000c570 	.word	0x2000c570
 800fa1c:	2000ca4c 	.word	0x2000ca4c
 800fa20:	2000c574 	.word	0x2000c574

0800fa24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa2e:	4b21      	ldr	r3, [pc, #132]	; (800fab4 <prvAddCurrentTaskToDelayedList+0x90>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa34:	4b20      	ldr	r3, [pc, #128]	; (800fab8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fe fbc8 	bl	800e1d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa46:	d10a      	bne.n	800fa5e <prvAddCurrentTaskToDelayedList+0x3a>
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d007      	beq.n	800fa5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa4e:	4b1a      	ldr	r3, [pc, #104]	; (800fab8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	3304      	adds	r3, #4
 800fa54:	4619      	mov	r1, r3
 800fa56:	4819      	ldr	r0, [pc, #100]	; (800fabc <prvAddCurrentTaskToDelayedList+0x98>)
 800fa58:	f7fe fb5d 	bl	800e116 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fa5c:	e026      	b.n	800faac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4413      	add	r3, r2
 800fa64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fa66:	4b14      	ldr	r3, [pc, #80]	; (800fab8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d209      	bcs.n	800fa8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa76:	4b12      	ldr	r3, [pc, #72]	; (800fac0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	4b0f      	ldr	r3, [pc, #60]	; (800fab8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	4619      	mov	r1, r3
 800fa82:	4610      	mov	r0, r2
 800fa84:	f7fe fb6b 	bl	800e15e <vListInsert>
}
 800fa88:	e010      	b.n	800faac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa8a:	4b0e      	ldr	r3, [pc, #56]	; (800fac4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	4b0a      	ldr	r3, [pc, #40]	; (800fab8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	3304      	adds	r3, #4
 800fa94:	4619      	mov	r1, r3
 800fa96:	4610      	mov	r0, r2
 800fa98:	f7fe fb61 	bl	800e15e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa9c:	4b0a      	ldr	r3, [pc, #40]	; (800fac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d202      	bcs.n	800faac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800faa6:	4a08      	ldr	r2, [pc, #32]	; (800fac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	6013      	str	r3, [r2, #0]
}
 800faac:	bf00      	nop
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	2000ca48 	.word	0x2000ca48
 800fab8:	2000c570 	.word	0x2000c570
 800fabc:	2000ca30 	.word	0x2000ca30
 800fac0:	2000ca00 	.word	0x2000ca00
 800fac4:	2000c9fc 	.word	0x2000c9fc
 800fac8:	2000ca64 	.word	0x2000ca64

0800facc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b08a      	sub	sp, #40	; 0x28
 800fad0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fad6:	f000 fb15 	bl	8010104 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fada:	4b1d      	ldr	r3, [pc, #116]	; (800fb50 <xTimerCreateTimerTask+0x84>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d021      	beq.n	800fb26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fae2:	2300      	movs	r3, #0
 800fae4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fae6:	2300      	movs	r3, #0
 800fae8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800faea:	1d3a      	adds	r2, r7, #4
 800faec:	f107 0108 	add.w	r1, r7, #8
 800faf0:	f107 030c 	add.w	r3, r7, #12
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fe fac7 	bl	800e088 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fafa:	6879      	ldr	r1, [r7, #4]
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	9202      	str	r2, [sp, #8]
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	2302      	movs	r3, #2
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	2300      	movs	r3, #0
 800fb0a:	460a      	mov	r2, r1
 800fb0c:	4911      	ldr	r1, [pc, #68]	; (800fb54 <xTimerCreateTimerTask+0x88>)
 800fb0e:	4812      	ldr	r0, [pc, #72]	; (800fb58 <xTimerCreateTimerTask+0x8c>)
 800fb10:	f7ff f892 	bl	800ec38 <xTaskCreateStatic>
 800fb14:	4603      	mov	r3, r0
 800fb16:	4a11      	ldr	r2, [pc, #68]	; (800fb5c <xTimerCreateTimerTask+0x90>)
 800fb18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fb1a:	4b10      	ldr	r3, [pc, #64]	; (800fb5c <xTimerCreateTimerTask+0x90>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d001      	beq.n	800fb26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fb22:	2301      	movs	r3, #1
 800fb24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10c      	bne.n	800fb46 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800fb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb30:	b672      	cpsid	i
 800fb32:	f383 8811 	msr	BASEPRI, r3
 800fb36:	f3bf 8f6f 	isb	sy
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	b662      	cpsie	i
 800fb40:	613b      	str	r3, [r7, #16]
}
 800fb42:	bf00      	nop
 800fb44:	e7fe      	b.n	800fb44 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fb46:	697b      	ldr	r3, [r7, #20]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	2000caa0 	.word	0x2000caa0
 800fb54:	080244ec 	.word	0x080244ec
 800fb58:	0800fc9d 	.word	0x0800fc9d
 800fb5c:	2000caa4 	.word	0x2000caa4

0800fb60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b08a      	sub	sp, #40	; 0x28
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10c      	bne.n	800fb92 <xTimerGenericCommand+0x32>
	__asm volatile
 800fb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7c:	b672      	cpsid	i
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	b662      	cpsie	i
 800fb8c:	623b      	str	r3, [r7, #32]
}
 800fb8e:	bf00      	nop
 800fb90:	e7fe      	b.n	800fb90 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fb92:	4b1a      	ldr	r3, [pc, #104]	; (800fbfc <xTimerGenericCommand+0x9c>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d02a      	beq.n	800fbf0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	2b05      	cmp	r3, #5
 800fbaa:	dc18      	bgt.n	800fbde <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbac:	f7ff feaa 	bl	800f904 <xTaskGetSchedulerState>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d109      	bne.n	800fbca <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbb6:	4b11      	ldr	r3, [pc, #68]	; (800fbfc <xTimerGenericCommand+0x9c>)
 800fbb8:	6818      	ldr	r0, [r3, #0]
 800fbba:	f107 0110 	add.w	r1, r7, #16
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc2:	f7fe fc3f 	bl	800e444 <xQueueGenericSend>
 800fbc6:	6278      	str	r0, [r7, #36]	; 0x24
 800fbc8:	e012      	b.n	800fbf0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbca:	4b0c      	ldr	r3, [pc, #48]	; (800fbfc <xTimerGenericCommand+0x9c>)
 800fbcc:	6818      	ldr	r0, [r3, #0]
 800fbce:	f107 0110 	add.w	r1, r7, #16
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f7fe fc35 	bl	800e444 <xQueueGenericSend>
 800fbda:	6278      	str	r0, [r7, #36]	; 0x24
 800fbdc:	e008      	b.n	800fbf0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fbde:	4b07      	ldr	r3, [pc, #28]	; (800fbfc <xTimerGenericCommand+0x9c>)
 800fbe0:	6818      	ldr	r0, [r3, #0]
 800fbe2:	f107 0110 	add.w	r1, r7, #16
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	f7fe fd31 	bl	800e650 <xQueueGenericSendFromISR>
 800fbee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3728      	adds	r7, #40	; 0x28
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	2000caa0 	.word	0x2000caa0

0800fc00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b088      	sub	sp, #32
 800fc04:	af02      	add	r7, sp, #8
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc0a:	4b23      	ldr	r3, [pc, #140]	; (800fc98 <prvProcessExpiredTimer+0x98>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	3304      	adds	r3, #4
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fe fad9 	bl	800e1d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc24:	f003 0304 	and.w	r3, r3, #4
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d024      	beq.n	800fc76 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	699a      	ldr	r2, [r3, #24]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	18d1      	adds	r1, r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	683a      	ldr	r2, [r7, #0]
 800fc38:	6978      	ldr	r0, [r7, #20]
 800fc3a:	f000 f8d3 	bl	800fde4 <prvInsertTimerInActiveList>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d021      	beq.n	800fc88 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc44:	2300      	movs	r3, #0
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	6978      	ldr	r0, [r7, #20]
 800fc50:	f7ff ff86 	bl	800fb60 <xTimerGenericCommand>
 800fc54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d115      	bne.n	800fc88 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800fc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc60:	b672      	cpsid	i
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	b662      	cpsie	i
 800fc70:	60fb      	str	r3, [r7, #12]
}
 800fc72:	bf00      	nop
 800fc74:	e7fe      	b.n	800fc74 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc7c:	f023 0301 	bic.w	r3, r3, #1
 800fc80:	b2da      	uxtb	r2, r3
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	6a1b      	ldr	r3, [r3, #32]
 800fc8c:	6978      	ldr	r0, [r7, #20]
 800fc8e:	4798      	blx	r3
}
 800fc90:	bf00      	nop
 800fc92:	3718      	adds	r7, #24
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	2000ca98 	.word	0x2000ca98

0800fc9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fca4:	f107 0308 	add.w	r3, r7, #8
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f000 f857 	bl	800fd5c <prvGetNextExpireTime>
 800fcae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f000 f803 	bl	800fcc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fcba:	f000 f8d5 	bl	800fe68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fcbe:	e7f1      	b.n	800fca4 <prvTimerTask+0x8>

0800fcc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fcca:	f7ff f9ff 	bl	800f0cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fcce:	f107 0308 	add.w	r3, r7, #8
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f000 f866 	bl	800fda4 <prvSampleTimeNow>
 800fcd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d130      	bne.n	800fd42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10a      	bne.n	800fcfc <prvProcessTimerOrBlockTask+0x3c>
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d806      	bhi.n	800fcfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fcee:	f7ff f9fb 	bl	800f0e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fcf2:	68f9      	ldr	r1, [r7, #12]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff ff83 	bl	800fc00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fcfa:	e024      	b.n	800fd46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d008      	beq.n	800fd14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd02:	4b13      	ldr	r3, [pc, #76]	; (800fd50 <prvProcessTimerOrBlockTask+0x90>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d101      	bne.n	800fd10 <prvProcessTimerOrBlockTask+0x50>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e000      	b.n	800fd12 <prvProcessTimerOrBlockTask+0x52>
 800fd10:	2300      	movs	r3, #0
 800fd12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd14:	4b0f      	ldr	r3, [pc, #60]	; (800fd54 <prvProcessTimerOrBlockTask+0x94>)
 800fd16:	6818      	ldr	r0, [r3, #0]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	4619      	mov	r1, r3
 800fd22:	f7fe ff55 	bl	800ebd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd26:	f7ff f9df 	bl	800f0e8 <xTaskResumeAll>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d10a      	bne.n	800fd46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fd30:	4b09      	ldr	r3, [pc, #36]	; (800fd58 <prvProcessTimerOrBlockTask+0x98>)
 800fd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	f3bf 8f6f 	isb	sy
}
 800fd40:	e001      	b.n	800fd46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fd42:	f7ff f9d1 	bl	800f0e8 <xTaskResumeAll>
}
 800fd46:	bf00      	nop
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	2000ca9c 	.word	0x2000ca9c
 800fd54:	2000caa0 	.word	0x2000caa0
 800fd58:	e000ed04 	.word	0xe000ed04

0800fd5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fd64:	4b0e      	ldr	r3, [pc, #56]	; (800fda0 <prvGetNextExpireTime+0x44>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d101      	bne.n	800fd72 <prvGetNextExpireTime+0x16>
 800fd6e:	2201      	movs	r2, #1
 800fd70:	e000      	b.n	800fd74 <prvGetNextExpireTime+0x18>
 800fd72:	2200      	movs	r2, #0
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d105      	bne.n	800fd8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd80:	4b07      	ldr	r3, [pc, #28]	; (800fda0 <prvGetNextExpireTime+0x44>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	60fb      	str	r3, [r7, #12]
 800fd8a:	e001      	b.n	800fd90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fd90:	68fb      	ldr	r3, [r7, #12]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	2000ca98 	.word	0x2000ca98

0800fda4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fdac:	f7ff fa3c 	bl	800f228 <xTaskGetTickCount>
 800fdb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fdb2:	4b0b      	ldr	r3, [pc, #44]	; (800fde0 <prvSampleTimeNow+0x3c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68fa      	ldr	r2, [r7, #12]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d205      	bcs.n	800fdc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fdbc:	f000 f93c 	bl	8010038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	601a      	str	r2, [r3, #0]
 800fdc6:	e002      	b.n	800fdce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fdce:	4a04      	ldr	r2, [pc, #16]	; (800fde0 <prvSampleTimeNow+0x3c>)
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	2000caa8 	.word	0x2000caa8

0800fde4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b086      	sub	sp, #24
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
 800fdf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d812      	bhi.n	800fe30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	1ad2      	subs	r2, r2, r3
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d302      	bcc.n	800fe1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	617b      	str	r3, [r7, #20]
 800fe1c:	e01b      	b.n	800fe56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fe1e:	4b10      	ldr	r3, [pc, #64]	; (800fe60 <prvInsertTimerInActiveList+0x7c>)
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3304      	adds	r3, #4
 800fe26:	4619      	mov	r1, r3
 800fe28:	4610      	mov	r0, r2
 800fe2a:	f7fe f998 	bl	800e15e <vListInsert>
 800fe2e:	e012      	b.n	800fe56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d206      	bcs.n	800fe46 <prvInsertTimerInActiveList+0x62>
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d302      	bcc.n	800fe46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fe40:	2301      	movs	r3, #1
 800fe42:	617b      	str	r3, [r7, #20]
 800fe44:	e007      	b.n	800fe56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe46:	4b07      	ldr	r3, [pc, #28]	; (800fe64 <prvInsertTimerInActiveList+0x80>)
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	4619      	mov	r1, r3
 800fe50:	4610      	mov	r0, r2
 800fe52:	f7fe f984 	bl	800e15e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fe56:	697b      	ldr	r3, [r7, #20]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3718      	adds	r7, #24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	2000ca9c 	.word	0x2000ca9c
 800fe64:	2000ca98 	.word	0x2000ca98

0800fe68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b08e      	sub	sp, #56	; 0x38
 800fe6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe6e:	e0d0      	b.n	8010012 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	da1a      	bge.n	800feac <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fe76:	1d3b      	adds	r3, r7, #4
 800fe78:	3304      	adds	r3, #4
 800fe7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d10c      	bne.n	800fe9c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800fe82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe86:	b672      	cpsid	i
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	b662      	cpsie	i
 800fe96:	61fb      	str	r3, [r7, #28]
}
 800fe98:	bf00      	nop
 800fe9a:	e7fe      	b.n	800fe9a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fe9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fea2:	6850      	ldr	r0, [r2, #4]
 800fea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fea6:	6892      	ldr	r2, [r2, #8]
 800fea8:	4611      	mov	r1, r2
 800feaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f2c0 80af 	blt.w	8010012 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800feb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d004      	beq.n	800feca <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec2:	3304      	adds	r3, #4
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fe f983 	bl	800e1d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800feca:	463b      	mov	r3, r7
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff ff69 	bl	800fda4 <prvSampleTimeNow>
 800fed2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b09      	cmp	r3, #9
 800fed8:	f200 809a 	bhi.w	8010010 <prvProcessReceivedCommands+0x1a8>
 800fedc:	a201      	add	r2, pc, #4	; (adr r2, 800fee4 <prvProcessReceivedCommands+0x7c>)
 800fede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee2:	bf00      	nop
 800fee4:	0800ff0d 	.word	0x0800ff0d
 800fee8:	0800ff0d 	.word	0x0800ff0d
 800feec:	0800ff0d 	.word	0x0800ff0d
 800fef0:	0800ff85 	.word	0x0800ff85
 800fef4:	0800ff99 	.word	0x0800ff99
 800fef8:	0800ffe7 	.word	0x0800ffe7
 800fefc:	0800ff0d 	.word	0x0800ff0d
 800ff00:	0800ff0d 	.word	0x0800ff0d
 800ff04:	0800ff85 	.word	0x0800ff85
 800ff08:	0800ff99 	.word	0x0800ff99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff12:	f043 0301 	orr.w	r3, r3, #1
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff22:	699b      	ldr	r3, [r3, #24]
 800ff24:	18d1      	adds	r1, r2, r3
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff2c:	f7ff ff5a 	bl	800fde4 <prvInsertTimerInActiveList>
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d06d      	beq.n	8010012 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	6a1b      	ldr	r3, [r3, #32]
 800ff3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff44:	f003 0304 	and.w	r3, r3, #4
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d062      	beq.n	8010012 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ff4c:	68ba      	ldr	r2, [r7, #8]
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	699b      	ldr	r3, [r3, #24]
 800ff52:	441a      	add	r2, r3
 800ff54:	2300      	movs	r3, #0
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff5e:	f7ff fdff 	bl	800fb60 <xTimerGenericCommand>
 800ff62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d153      	bne.n	8010012 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	b672      	cpsid	i
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	b662      	cpsie	i
 800ff7e:	61bb      	str	r3, [r7, #24]
}
 800ff80:	bf00      	nop
 800ff82:	e7fe      	b.n	800ff82 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff8a:	f023 0301 	bic.w	r3, r3, #1
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ff96:	e03c      	b.n	8010012 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff9e:	f043 0301 	orr.w	r3, r3, #1
 800ffa2:	b2da      	uxtb	r2, r3
 800ffa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ffb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb2:	699b      	ldr	r3, [r3, #24]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10c      	bne.n	800ffd2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbc:	b672      	cpsid	i
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	b662      	cpsie	i
 800ffcc:	617b      	str	r3, [r7, #20]
}
 800ffce:	bf00      	nop
 800ffd0:	e7fe      	b.n	800ffd0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ffd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd4:	699a      	ldr	r2, [r3, #24]
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd8:	18d1      	adds	r1, r2, r3
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffe0:	f7ff ff00 	bl	800fde4 <prvInsertTimerInActiveList>
					break;
 800ffe4:	e015      	b.n	8010012 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ffe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffec:	f003 0302 	and.w	r3, r3, #2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d103      	bne.n	800fffc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800fff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fff6:	f000 fbc7 	bl	8010788 <vPortFree>
 800fffa:	e00a      	b.n	8010012 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010002:	f023 0301 	bic.w	r3, r3, #1
 8010006:	b2da      	uxtb	r2, r3
 8010008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801000e:	e000      	b.n	8010012 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8010010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010012:	4b08      	ldr	r3, [pc, #32]	; (8010034 <prvProcessReceivedCommands+0x1cc>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	1d39      	adds	r1, r7, #4
 8010018:	2200      	movs	r2, #0
 801001a:	4618      	mov	r0, r3
 801001c:	f7fe fbb8 	bl	800e790 <xQueueReceive>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	f47f af24 	bne.w	800fe70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010028:	bf00      	nop
 801002a:	bf00      	nop
 801002c:	3730      	adds	r7, #48	; 0x30
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	2000caa0 	.word	0x2000caa0

08010038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801003e:	e04a      	b.n	80100d6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010040:	4b2e      	ldr	r3, [pc, #184]	; (80100fc <prvSwitchTimerLists+0xc4>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801004a:	4b2c      	ldr	r3, [pc, #176]	; (80100fc <prvSwitchTimerLists+0xc4>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3304      	adds	r3, #4
 8010058:	4618      	mov	r0, r3
 801005a:	f7fe f8b9 	bl	800e1d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6a1b      	ldr	r3, [r3, #32]
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801006c:	f003 0304 	and.w	r3, r3, #4
 8010070:	2b00      	cmp	r3, #0
 8010072:	d030      	beq.n	80100d6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	693a      	ldr	r2, [r7, #16]
 801007a:	4413      	add	r3, r2
 801007c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	429a      	cmp	r2, r3
 8010084:	d90e      	bls.n	80100a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	68ba      	ldr	r2, [r7, #8]
 801008a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010092:	4b1a      	ldr	r3, [pc, #104]	; (80100fc <prvSwitchTimerLists+0xc4>)
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	3304      	adds	r3, #4
 801009a:	4619      	mov	r1, r3
 801009c:	4610      	mov	r0, r2
 801009e:	f7fe f85e 	bl	800e15e <vListInsert>
 80100a2:	e018      	b.n	80100d6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80100a4:	2300      	movs	r3, #0
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	2300      	movs	r3, #0
 80100aa:	693a      	ldr	r2, [r7, #16]
 80100ac:	2100      	movs	r1, #0
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f7ff fd56 	bl	800fb60 <xTimerGenericCommand>
 80100b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10c      	bne.n	80100d6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80100bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c0:	b672      	cpsid	i
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	b662      	cpsie	i
 80100d0:	603b      	str	r3, [r7, #0]
}
 80100d2:	bf00      	nop
 80100d4:	e7fe      	b.n	80100d4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100d6:	4b09      	ldr	r3, [pc, #36]	; (80100fc <prvSwitchTimerLists+0xc4>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d1af      	bne.n	8010040 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80100e0:	4b06      	ldr	r3, [pc, #24]	; (80100fc <prvSwitchTimerLists+0xc4>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80100e6:	4b06      	ldr	r3, [pc, #24]	; (8010100 <prvSwitchTimerLists+0xc8>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a04      	ldr	r2, [pc, #16]	; (80100fc <prvSwitchTimerLists+0xc4>)
 80100ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80100ee:	4a04      	ldr	r2, [pc, #16]	; (8010100 <prvSwitchTimerLists+0xc8>)
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	6013      	str	r3, [r2, #0]
}
 80100f4:	bf00      	nop
 80100f6:	3718      	adds	r7, #24
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	2000ca98 	.word	0x2000ca98
 8010100:	2000ca9c 	.word	0x2000ca9c

08010104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801010a:	f000 f947 	bl	801039c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801010e:	4b15      	ldr	r3, [pc, #84]	; (8010164 <prvCheckForValidListAndQueue+0x60>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d120      	bne.n	8010158 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010116:	4814      	ldr	r0, [pc, #80]	; (8010168 <prvCheckForValidListAndQueue+0x64>)
 8010118:	f7fd ffd0 	bl	800e0bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801011c:	4813      	ldr	r0, [pc, #76]	; (801016c <prvCheckForValidListAndQueue+0x68>)
 801011e:	f7fd ffcd 	bl	800e0bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010122:	4b13      	ldr	r3, [pc, #76]	; (8010170 <prvCheckForValidListAndQueue+0x6c>)
 8010124:	4a10      	ldr	r2, [pc, #64]	; (8010168 <prvCheckForValidListAndQueue+0x64>)
 8010126:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010128:	4b12      	ldr	r3, [pc, #72]	; (8010174 <prvCheckForValidListAndQueue+0x70>)
 801012a:	4a10      	ldr	r2, [pc, #64]	; (801016c <prvCheckForValidListAndQueue+0x68>)
 801012c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801012e:	2300      	movs	r3, #0
 8010130:	9300      	str	r3, [sp, #0]
 8010132:	4b11      	ldr	r3, [pc, #68]	; (8010178 <prvCheckForValidListAndQueue+0x74>)
 8010134:	4a11      	ldr	r2, [pc, #68]	; (801017c <prvCheckForValidListAndQueue+0x78>)
 8010136:	2110      	movs	r1, #16
 8010138:	200a      	movs	r0, #10
 801013a:	f7fe f8dd 	bl	800e2f8 <xQueueGenericCreateStatic>
 801013e:	4603      	mov	r3, r0
 8010140:	4a08      	ldr	r2, [pc, #32]	; (8010164 <prvCheckForValidListAndQueue+0x60>)
 8010142:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010144:	4b07      	ldr	r3, [pc, #28]	; (8010164 <prvCheckForValidListAndQueue+0x60>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d005      	beq.n	8010158 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801014c:	4b05      	ldr	r3, [pc, #20]	; (8010164 <prvCheckForValidListAndQueue+0x60>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	490b      	ldr	r1, [pc, #44]	; (8010180 <prvCheckForValidListAndQueue+0x7c>)
 8010152:	4618      	mov	r0, r3
 8010154:	f7fe fd12 	bl	800eb7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010158:	f000 f954 	bl	8010404 <vPortExitCritical>
}
 801015c:	bf00      	nop
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	2000caa0 	.word	0x2000caa0
 8010168:	2000ca70 	.word	0x2000ca70
 801016c:	2000ca84 	.word	0x2000ca84
 8010170:	2000ca98 	.word	0x2000ca98
 8010174:	2000ca9c 	.word	0x2000ca9c
 8010178:	2000cb4c 	.word	0x2000cb4c
 801017c:	2000caac 	.word	0x2000caac
 8010180:	080244f4 	.word	0x080244f4

08010184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	3b04      	subs	r3, #4
 8010194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801019c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3b04      	subs	r3, #4
 80101a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	f023 0201 	bic.w	r2, r3, #1
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	3b04      	subs	r3, #4
 80101b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80101b4:	4a0c      	ldr	r2, [pc, #48]	; (80101e8 <pxPortInitialiseStack+0x64>)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	3b14      	subs	r3, #20
 80101be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	3b04      	subs	r3, #4
 80101ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f06f 0202 	mvn.w	r2, #2
 80101d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3b20      	subs	r3, #32
 80101d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80101da:	68fb      	ldr	r3, [r7, #12]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3714      	adds	r7, #20
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	080101ed 	.word	0x080101ed

080101ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80101f6:	4b14      	ldr	r3, [pc, #80]	; (8010248 <prvTaskExitError+0x5c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101fe:	d00c      	beq.n	801021a <prvTaskExitError+0x2e>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	b672      	cpsid	i
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	b662      	cpsie	i
 8010214:	60fb      	str	r3, [r7, #12]
}
 8010216:	bf00      	nop
 8010218:	e7fe      	b.n	8010218 <prvTaskExitError+0x2c>
	__asm volatile
 801021a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021e:	b672      	cpsid	i
 8010220:	f383 8811 	msr	BASEPRI, r3
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	b662      	cpsie	i
 801022e:	60bb      	str	r3, [r7, #8]
}
 8010230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010232:	bf00      	nop
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d0fc      	beq.n	8010234 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801023a:	bf00      	nop
 801023c:	bf00      	nop
 801023e:	3714      	adds	r7, #20
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	2000009c 	.word	0x2000009c
 801024c:	00000000 	.word	0x00000000

08010250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010250:	4b07      	ldr	r3, [pc, #28]	; (8010270 <pxCurrentTCBConst2>)
 8010252:	6819      	ldr	r1, [r3, #0]
 8010254:	6808      	ldr	r0, [r1, #0]
 8010256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025a:	f380 8809 	msr	PSP, r0
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f04f 0000 	mov.w	r0, #0
 8010266:	f380 8811 	msr	BASEPRI, r0
 801026a:	4770      	bx	lr
 801026c:	f3af 8000 	nop.w

08010270 <pxCurrentTCBConst2>:
 8010270:	2000c570 	.word	0x2000c570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010274:	bf00      	nop
 8010276:	bf00      	nop

08010278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010278:	4808      	ldr	r0, [pc, #32]	; (801029c <prvPortStartFirstTask+0x24>)
 801027a:	6800      	ldr	r0, [r0, #0]
 801027c:	6800      	ldr	r0, [r0, #0]
 801027e:	f380 8808 	msr	MSP, r0
 8010282:	f04f 0000 	mov.w	r0, #0
 8010286:	f380 8814 	msr	CONTROL, r0
 801028a:	b662      	cpsie	i
 801028c:	b661      	cpsie	f
 801028e:	f3bf 8f4f 	dsb	sy
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	df00      	svc	0
 8010298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801029a:	bf00      	nop
 801029c:	e000ed08 	.word	0xe000ed08

080102a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80102a6:	4b37      	ldr	r3, [pc, #220]	; (8010384 <xPortStartScheduler+0xe4>)
 80102a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	22ff      	movs	r2, #255	; 0xff
 80102b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	4b2f      	ldr	r3, [pc, #188]	; (8010388 <xPortStartScheduler+0xe8>)
 80102cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102ce:	4b2f      	ldr	r3, [pc, #188]	; (801038c <xPortStartScheduler+0xec>)
 80102d0:	2207      	movs	r2, #7
 80102d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102d4:	e009      	b.n	80102ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80102d6:	4b2d      	ldr	r3, [pc, #180]	; (801038c <xPortStartScheduler+0xec>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3b01      	subs	r3, #1
 80102dc:	4a2b      	ldr	r2, [pc, #172]	; (801038c <xPortStartScheduler+0xec>)
 80102de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80102e0:	78fb      	ldrb	r3, [r7, #3]
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102ea:	78fb      	ldrb	r3, [r7, #3]
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102f2:	2b80      	cmp	r3, #128	; 0x80
 80102f4:	d0ef      	beq.n	80102d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80102f6:	4b25      	ldr	r3, [pc, #148]	; (801038c <xPortStartScheduler+0xec>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f1c3 0307 	rsb	r3, r3, #7
 80102fe:	2b04      	cmp	r3, #4
 8010300:	d00c      	beq.n	801031c <xPortStartScheduler+0x7c>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	b672      	cpsid	i
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	b662      	cpsie	i
 8010316:	60bb      	str	r3, [r7, #8]
}
 8010318:	bf00      	nop
 801031a:	e7fe      	b.n	801031a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801031c:	4b1b      	ldr	r3, [pc, #108]	; (801038c <xPortStartScheduler+0xec>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	021b      	lsls	r3, r3, #8
 8010322:	4a1a      	ldr	r2, [pc, #104]	; (801038c <xPortStartScheduler+0xec>)
 8010324:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010326:	4b19      	ldr	r3, [pc, #100]	; (801038c <xPortStartScheduler+0xec>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801032e:	4a17      	ldr	r2, [pc, #92]	; (801038c <xPortStartScheduler+0xec>)
 8010330:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	b2da      	uxtb	r2, r3
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801033a:	4b15      	ldr	r3, [pc, #84]	; (8010390 <xPortStartScheduler+0xf0>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a14      	ldr	r2, [pc, #80]	; (8010390 <xPortStartScheduler+0xf0>)
 8010340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010344:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010346:	4b12      	ldr	r3, [pc, #72]	; (8010390 <xPortStartScheduler+0xf0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a11      	ldr	r2, [pc, #68]	; (8010390 <xPortStartScheduler+0xf0>)
 801034c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010350:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010352:	f000 f8dd 	bl	8010510 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010356:	4b0f      	ldr	r3, [pc, #60]	; (8010394 <xPortStartScheduler+0xf4>)
 8010358:	2200      	movs	r2, #0
 801035a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801035c:	f000 f8fc 	bl	8010558 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010360:	4b0d      	ldr	r3, [pc, #52]	; (8010398 <xPortStartScheduler+0xf8>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a0c      	ldr	r2, [pc, #48]	; (8010398 <xPortStartScheduler+0xf8>)
 8010366:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801036a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801036c:	f7ff ff84 	bl	8010278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010370:	f7ff f826 	bl	800f3c0 <vTaskSwitchContext>
	prvTaskExitError();
 8010374:	f7ff ff3a 	bl	80101ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010378:	2300      	movs	r3, #0
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	e000e400 	.word	0xe000e400
 8010388:	2000cb9c 	.word	0x2000cb9c
 801038c:	2000cba0 	.word	0x2000cba0
 8010390:	e000ed20 	.word	0xe000ed20
 8010394:	2000009c 	.word	0x2000009c
 8010398:	e000ef34 	.word	0xe000ef34

0801039c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
	__asm volatile
 80103a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a6:	b672      	cpsid	i
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	b662      	cpsie	i
 80103b6:	607b      	str	r3, [r7, #4]
}
 80103b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80103ba:	4b10      	ldr	r3, [pc, #64]	; (80103fc <vPortEnterCritical+0x60>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	3301      	adds	r3, #1
 80103c0:	4a0e      	ldr	r2, [pc, #56]	; (80103fc <vPortEnterCritical+0x60>)
 80103c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80103c4:	4b0d      	ldr	r3, [pc, #52]	; (80103fc <vPortEnterCritical+0x60>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d111      	bne.n	80103f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80103cc:	4b0c      	ldr	r3, [pc, #48]	; (8010400 <vPortEnterCritical+0x64>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00c      	beq.n	80103f0 <vPortEnterCritical+0x54>
	__asm volatile
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	b672      	cpsid	i
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	b662      	cpsie	i
 80103ea:	603b      	str	r3, [r7, #0]
}
 80103ec:	bf00      	nop
 80103ee:	e7fe      	b.n	80103ee <vPortEnterCritical+0x52>
	}
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr
 80103fc:	2000009c 	.word	0x2000009c
 8010400:	e000ed04 	.word	0xe000ed04

08010404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801040a:	4b13      	ldr	r3, [pc, #76]	; (8010458 <vPortExitCritical+0x54>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10c      	bne.n	801042c <vPortExitCritical+0x28>
	__asm volatile
 8010412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010416:	b672      	cpsid	i
 8010418:	f383 8811 	msr	BASEPRI, r3
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	b662      	cpsie	i
 8010426:	607b      	str	r3, [r7, #4]
}
 8010428:	bf00      	nop
 801042a:	e7fe      	b.n	801042a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801042c:	4b0a      	ldr	r3, [pc, #40]	; (8010458 <vPortExitCritical+0x54>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	3b01      	subs	r3, #1
 8010432:	4a09      	ldr	r2, [pc, #36]	; (8010458 <vPortExitCritical+0x54>)
 8010434:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010436:	4b08      	ldr	r3, [pc, #32]	; (8010458 <vPortExitCritical+0x54>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d105      	bne.n	801044a <vPortExitCritical+0x46>
 801043e:	2300      	movs	r3, #0
 8010440:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	f383 8811 	msr	BASEPRI, r3
}
 8010448:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801044a:	bf00      	nop
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	2000009c 	.word	0x2000009c
 801045c:	00000000 	.word	0x00000000

08010460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010460:	f3ef 8009 	mrs	r0, PSP
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <pxCurrentTCBConst>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	f01e 0f10 	tst.w	lr, #16
 8010470:	bf08      	it	eq
 8010472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047a:	6010      	str	r0, [r2, #0]
 801047c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010484:	b672      	cpsid	i
 8010486:	f380 8811 	msr	BASEPRI, r0
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	b662      	cpsie	i
 8010494:	f7fe ff94 	bl	800f3c0 <vTaskSwitchContext>
 8010498:	f04f 0000 	mov.w	r0, #0
 801049c:	f380 8811 	msr	BASEPRI, r0
 80104a0:	bc09      	pop	{r0, r3}
 80104a2:	6819      	ldr	r1, [r3, #0]
 80104a4:	6808      	ldr	r0, [r1, #0]
 80104a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104aa:	f01e 0f10 	tst.w	lr, #16
 80104ae:	bf08      	it	eq
 80104b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80104b4:	f380 8809 	msr	PSP, r0
 80104b8:	f3bf 8f6f 	isb	sy
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop

080104c0 <pxCurrentTCBConst>:
 80104c0:	2000c570 	.word	0x2000c570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80104c4:	bf00      	nop
 80104c6:	bf00      	nop

080104c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	b672      	cpsid	i
 80104d4:	f383 8811 	msr	BASEPRI, r3
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	b662      	cpsie	i
 80104e2:	607b      	str	r3, [r7, #4]
}
 80104e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80104e6:	f7fe feaf 	bl	800f248 <xTaskIncrementTick>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80104f0:	4b06      	ldr	r3, [pc, #24]	; (801050c <SysTick_Handler+0x44>)
 80104f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f6:	601a      	str	r2, [r3, #0]
 80104f8:	2300      	movs	r3, #0
 80104fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	f383 8811 	msr	BASEPRI, r3
}
 8010502:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	e000ed04 	.word	0xe000ed04

08010510 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010510:	b480      	push	{r7}
 8010512:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010514:	4b0b      	ldr	r3, [pc, #44]	; (8010544 <vPortSetupTimerInterrupt+0x34>)
 8010516:	2200      	movs	r2, #0
 8010518:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801051a:	4b0b      	ldr	r3, [pc, #44]	; (8010548 <vPortSetupTimerInterrupt+0x38>)
 801051c:	2200      	movs	r2, #0
 801051e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010520:	4b0a      	ldr	r3, [pc, #40]	; (801054c <vPortSetupTimerInterrupt+0x3c>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a0a      	ldr	r2, [pc, #40]	; (8010550 <vPortSetupTimerInterrupt+0x40>)
 8010526:	fba2 2303 	umull	r2, r3, r2, r3
 801052a:	099b      	lsrs	r3, r3, #6
 801052c:	4a09      	ldr	r2, [pc, #36]	; (8010554 <vPortSetupTimerInterrupt+0x44>)
 801052e:	3b01      	subs	r3, #1
 8010530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010532:	4b04      	ldr	r3, [pc, #16]	; (8010544 <vPortSetupTimerInterrupt+0x34>)
 8010534:	2207      	movs	r2, #7
 8010536:	601a      	str	r2, [r3, #0]
}
 8010538:	bf00      	nop
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	e000e010 	.word	0xe000e010
 8010548:	e000e018 	.word	0xe000e018
 801054c:	20000004 	.word	0x20000004
 8010550:	10624dd3 	.word	0x10624dd3
 8010554:	e000e014 	.word	0xe000e014

08010558 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010558:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010568 <vPortEnableVFP+0x10>
 801055c:	6801      	ldr	r1, [r0, #0]
 801055e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010562:	6001      	str	r1, [r0, #0]
 8010564:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010566:	bf00      	nop
 8010568:	e000ed88 	.word	0xe000ed88

0801056c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010572:	f3ef 8305 	mrs	r3, IPSR
 8010576:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2b0f      	cmp	r3, #15
 801057c:	d916      	bls.n	80105ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801057e:	4a19      	ldr	r2, [pc, #100]	; (80105e4 <vPortValidateInterruptPriority+0x78>)
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	4413      	add	r3, r2
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010588:	4b17      	ldr	r3, [pc, #92]	; (80105e8 <vPortValidateInterruptPriority+0x7c>)
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	7afa      	ldrb	r2, [r7, #11]
 801058e:	429a      	cmp	r2, r3
 8010590:	d20c      	bcs.n	80105ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010596:	b672      	cpsid	i
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
 80105a4:	b662      	cpsie	i
 80105a6:	607b      	str	r3, [r7, #4]
}
 80105a8:	bf00      	nop
 80105aa:	e7fe      	b.n	80105aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80105ac:	4b0f      	ldr	r3, [pc, #60]	; (80105ec <vPortValidateInterruptPriority+0x80>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80105b4:	4b0e      	ldr	r3, [pc, #56]	; (80105f0 <vPortValidateInterruptPriority+0x84>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d90c      	bls.n	80105d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	b672      	cpsid	i
 80105c2:	f383 8811 	msr	BASEPRI, r3
 80105c6:	f3bf 8f6f 	isb	sy
 80105ca:	f3bf 8f4f 	dsb	sy
 80105ce:	b662      	cpsie	i
 80105d0:	603b      	str	r3, [r7, #0]
}
 80105d2:	bf00      	nop
 80105d4:	e7fe      	b.n	80105d4 <vPortValidateInterruptPriority+0x68>
	}
 80105d6:	bf00      	nop
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	e000e3f0 	.word	0xe000e3f0
 80105e8:	2000cb9c 	.word	0x2000cb9c
 80105ec:	e000ed0c 	.word	0xe000ed0c
 80105f0:	2000cba0 	.word	0x2000cba0

080105f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b08a      	sub	sp, #40	; 0x28
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80105fc:	2300      	movs	r3, #0
 80105fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010600:	f7fe fd64 	bl	800f0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010604:	4b5b      	ldr	r3, [pc, #364]	; (8010774 <pvPortMalloc+0x180>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d101      	bne.n	8010610 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801060c:	f000 f91a 	bl	8010844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010610:	4b59      	ldr	r3, [pc, #356]	; (8010778 <pvPortMalloc+0x184>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4013      	ands	r3, r2
 8010618:	2b00      	cmp	r3, #0
 801061a:	f040 8092 	bne.w	8010742 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d01f      	beq.n	8010664 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010624:	2208      	movs	r2, #8
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4413      	add	r3, r2
 801062a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f003 0307 	and.w	r3, r3, #7
 8010632:	2b00      	cmp	r3, #0
 8010634:	d016      	beq.n	8010664 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f023 0307 	bic.w	r3, r3, #7
 801063c:	3308      	adds	r3, #8
 801063e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f003 0307 	and.w	r3, r3, #7
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00c      	beq.n	8010664 <pvPortMalloc+0x70>
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	b672      	cpsid	i
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	b662      	cpsie	i
 801065e:	617b      	str	r3, [r7, #20]
}
 8010660:	bf00      	nop
 8010662:	e7fe      	b.n	8010662 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d06b      	beq.n	8010742 <pvPortMalloc+0x14e>
 801066a:	4b44      	ldr	r3, [pc, #272]	; (801077c <pvPortMalloc+0x188>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	429a      	cmp	r2, r3
 8010672:	d866      	bhi.n	8010742 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010674:	4b42      	ldr	r3, [pc, #264]	; (8010780 <pvPortMalloc+0x18c>)
 8010676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010678:	4b41      	ldr	r3, [pc, #260]	; (8010780 <pvPortMalloc+0x18c>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801067e:	e004      	b.n	801068a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	429a      	cmp	r2, r3
 8010692:	d903      	bls.n	801069c <pvPortMalloc+0xa8>
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1f1      	bne.n	8010680 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801069c:	4b35      	ldr	r3, [pc, #212]	; (8010774 <pvPortMalloc+0x180>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d04d      	beq.n	8010742 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2208      	movs	r2, #8
 80106ac:	4413      	add	r3, r2
 80106ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	6a3b      	ldr	r3, [r7, #32]
 80106b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80106b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	1ad2      	subs	r2, r2, r3
 80106c0:	2308      	movs	r3, #8
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d921      	bls.n	801070c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80106c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	f003 0307 	and.w	r3, r3, #7
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00c      	beq.n	80106f4 <pvPortMalloc+0x100>
	__asm volatile
 80106da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106de:	b672      	cpsid	i
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	b662      	cpsie	i
 80106ee:	613b      	str	r3, [r7, #16]
}
 80106f0:	bf00      	nop
 80106f2:	e7fe      	b.n	80106f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80106f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f6:	685a      	ldr	r2, [r3, #4]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	1ad2      	subs	r2, r2, r3
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010706:	69b8      	ldr	r0, [r7, #24]
 8010708:	f000 f8fe 	bl	8010908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801070c:	4b1b      	ldr	r3, [pc, #108]	; (801077c <pvPortMalloc+0x188>)
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	1ad3      	subs	r3, r2, r3
 8010716:	4a19      	ldr	r2, [pc, #100]	; (801077c <pvPortMalloc+0x188>)
 8010718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801071a:	4b18      	ldr	r3, [pc, #96]	; (801077c <pvPortMalloc+0x188>)
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	4b19      	ldr	r3, [pc, #100]	; (8010784 <pvPortMalloc+0x190>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	429a      	cmp	r2, r3
 8010724:	d203      	bcs.n	801072e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010726:	4b15      	ldr	r3, [pc, #84]	; (801077c <pvPortMalloc+0x188>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a16      	ldr	r2, [pc, #88]	; (8010784 <pvPortMalloc+0x190>)
 801072c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010730:	685a      	ldr	r2, [r3, #4]
 8010732:	4b11      	ldr	r3, [pc, #68]	; (8010778 <pvPortMalloc+0x184>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	431a      	orrs	r2, r3
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010742:	f7fe fcd1 	bl	800f0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	f003 0307 	and.w	r3, r3, #7
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00c      	beq.n	801076a <pvPortMalloc+0x176>
	__asm volatile
 8010750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010754:	b672      	cpsid	i
 8010756:	f383 8811 	msr	BASEPRI, r3
 801075a:	f3bf 8f6f 	isb	sy
 801075e:	f3bf 8f4f 	dsb	sy
 8010762:	b662      	cpsie	i
 8010764:	60fb      	str	r3, [r7, #12]
}
 8010766:	bf00      	nop
 8010768:	e7fe      	b.n	8010768 <pvPortMalloc+0x174>
	return pvReturn;
 801076a:	69fb      	ldr	r3, [r7, #28]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3728      	adds	r7, #40	; 0x28
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	200107ac 	.word	0x200107ac
 8010778:	200107b8 	.word	0x200107b8
 801077c:	200107b0 	.word	0x200107b0
 8010780:	200107a4 	.word	0x200107a4
 8010784:	200107b4 	.word	0x200107b4

08010788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d04c      	beq.n	8010834 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801079a:	2308      	movs	r3, #8
 801079c:	425b      	negs	r3, r3
 801079e:	697a      	ldr	r2, [r7, #20]
 80107a0:	4413      	add	r3, r2
 80107a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	4b23      	ldr	r3, [pc, #140]	; (801083c <vPortFree+0xb4>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4013      	ands	r3, r2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10c      	bne.n	80107d0 <vPortFree+0x48>
	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ba:	b672      	cpsid	i
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	b662      	cpsie	i
 80107ca:	60fb      	str	r3, [r7, #12]
}
 80107cc:	bf00      	nop
 80107ce:	e7fe      	b.n	80107ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00c      	beq.n	80107f2 <vPortFree+0x6a>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	b672      	cpsid	i
 80107de:	f383 8811 	msr	BASEPRI, r3
 80107e2:	f3bf 8f6f 	isb	sy
 80107e6:	f3bf 8f4f 	dsb	sy
 80107ea:	b662      	cpsie	i
 80107ec:	60bb      	str	r3, [r7, #8]
}
 80107ee:	bf00      	nop
 80107f0:	e7fe      	b.n	80107f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	685a      	ldr	r2, [r3, #4]
 80107f6:	4b11      	ldr	r3, [pc, #68]	; (801083c <vPortFree+0xb4>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4013      	ands	r3, r2
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d019      	beq.n	8010834 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d115      	bne.n	8010834 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	4b0b      	ldr	r3, [pc, #44]	; (801083c <vPortFree+0xb4>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	43db      	mvns	r3, r3
 8010812:	401a      	ands	r2, r3
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010818:	f7fe fc58 	bl	800f0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	4b07      	ldr	r3, [pc, #28]	; (8010840 <vPortFree+0xb8>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4413      	add	r3, r2
 8010826:	4a06      	ldr	r2, [pc, #24]	; (8010840 <vPortFree+0xb8>)
 8010828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801082a:	6938      	ldr	r0, [r7, #16]
 801082c:	f000 f86c 	bl	8010908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010830:	f7fe fc5a 	bl	800f0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010834:	bf00      	nop
 8010836:	3718      	adds	r7, #24
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	200107b8 	.word	0x200107b8
 8010840:	200107b0 	.word	0x200107b0

08010844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010844:	b480      	push	{r7}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801084a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801084e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010850:	4b27      	ldr	r3, [pc, #156]	; (80108f0 <prvHeapInit+0xac>)
 8010852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f003 0307 	and.w	r3, r3, #7
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00c      	beq.n	8010878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	3307      	adds	r3, #7
 8010862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f023 0307 	bic.w	r3, r3, #7
 801086a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801086c:	68ba      	ldr	r2, [r7, #8]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	4a1f      	ldr	r2, [pc, #124]	; (80108f0 <prvHeapInit+0xac>)
 8010874:	4413      	add	r3, r2
 8010876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801087c:	4a1d      	ldr	r2, [pc, #116]	; (80108f4 <prvHeapInit+0xb0>)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010882:	4b1c      	ldr	r3, [pc, #112]	; (80108f4 <prvHeapInit+0xb0>)
 8010884:	2200      	movs	r2, #0
 8010886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	4413      	add	r3, r2
 801088e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010890:	2208      	movs	r2, #8
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	1a9b      	subs	r3, r3, r2
 8010896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f023 0307 	bic.w	r3, r3, #7
 801089e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	4a15      	ldr	r2, [pc, #84]	; (80108f8 <prvHeapInit+0xb4>)
 80108a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80108a6:	4b14      	ldr	r3, [pc, #80]	; (80108f8 <prvHeapInit+0xb4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2200      	movs	r2, #0
 80108ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108ae:	4b12      	ldr	r3, [pc, #72]	; (80108f8 <prvHeapInit+0xb4>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2200      	movs	r2, #0
 80108b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	1ad2      	subs	r2, r2, r3
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80108c4:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <prvHeapInit+0xb4>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	4a0a      	ldr	r2, [pc, #40]	; (80108fc <prvHeapInit+0xb8>)
 80108d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	4a09      	ldr	r2, [pc, #36]	; (8010900 <prvHeapInit+0xbc>)
 80108da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80108dc:	4b09      	ldr	r3, [pc, #36]	; (8010904 <prvHeapInit+0xc0>)
 80108de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80108e2:	601a      	str	r2, [r3, #0]
}
 80108e4:	bf00      	nop
 80108e6:	3714      	adds	r7, #20
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr
 80108f0:	2000cba4 	.word	0x2000cba4
 80108f4:	200107a4 	.word	0x200107a4
 80108f8:	200107ac 	.word	0x200107ac
 80108fc:	200107b4 	.word	0x200107b4
 8010900:	200107b0 	.word	0x200107b0
 8010904:	200107b8 	.word	0x200107b8

08010908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010910:	4b28      	ldr	r3, [pc, #160]	; (80109b4 <prvInsertBlockIntoFreeList+0xac>)
 8010912:	60fb      	str	r3, [r7, #12]
 8010914:	e002      	b.n	801091c <prvInsertBlockIntoFreeList+0x14>
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	60fb      	str	r3, [r7, #12]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	429a      	cmp	r2, r3
 8010924:	d8f7      	bhi.n	8010916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	4413      	add	r3, r2
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	429a      	cmp	r2, r3
 8010936:	d108      	bne.n	801094a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	685a      	ldr	r2, [r3, #4]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	441a      	add	r2, r3
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	441a      	add	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	429a      	cmp	r2, r3
 801095c:	d118      	bne.n	8010990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	4b15      	ldr	r3, [pc, #84]	; (80109b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	429a      	cmp	r2, r3
 8010968:	d00d      	beq.n	8010986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	441a      	add	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	e008      	b.n	8010998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010986:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	e003      	b.n	8010998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	429a      	cmp	r2, r3
 801099e:	d002      	beq.n	80109a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109a6:	bf00      	nop
 80109a8:	3714      	adds	r7, #20
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	200107a4 	.word	0x200107a4
 80109b8:	200107ac 	.word	0x200107ac

080109bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80109c0:	2200      	movs	r2, #0
 80109c2:	4912      	ldr	r1, [pc, #72]	; (8010a0c <MX_USB_DEVICE_Init+0x50>)
 80109c4:	4812      	ldr	r0, [pc, #72]	; (8010a10 <MX_USB_DEVICE_Init+0x54>)
 80109c6:	f7fb fee3 	bl	800c790 <USBD_Init>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109d0:	f7f2 fb07 	bl	8002fe2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80109d4:	490f      	ldr	r1, [pc, #60]	; (8010a14 <MX_USB_DEVICE_Init+0x58>)
 80109d6:	480e      	ldr	r0, [pc, #56]	; (8010a10 <MX_USB_DEVICE_Init+0x54>)
 80109d8:	f7fb ff0a 	bl	800c7f0 <USBD_RegisterClass>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d001      	beq.n	80109e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109e2:	f7f2 fafe 	bl	8002fe2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80109e6:	490c      	ldr	r1, [pc, #48]	; (8010a18 <MX_USB_DEVICE_Init+0x5c>)
 80109e8:	4809      	ldr	r0, [pc, #36]	; (8010a10 <MX_USB_DEVICE_Init+0x54>)
 80109ea:	f7fb fe41 	bl	800c670 <USBD_CDC_RegisterInterface>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109f4:	f7f2 faf5 	bl	8002fe2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80109f8:	4805      	ldr	r0, [pc, #20]	; (8010a10 <MX_USB_DEVICE_Init+0x54>)
 80109fa:	f7fb ff2f 	bl	800c85c <USBD_Start>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d001      	beq.n	8010a08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010a04:	f7f2 faed 	bl	8002fe2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010a08:	bf00      	nop
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	200000b4 	.word	0x200000b4
 8010a10:	200107bc 	.word	0x200107bc
 8010a14:	2000001c 	.word	0x2000001c
 8010a18:	200000a0 	.word	0x200000a0

08010a1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010a20:	2200      	movs	r2, #0
 8010a22:	4905      	ldr	r1, [pc, #20]	; (8010a38 <CDC_Init_FS+0x1c>)
 8010a24:	4805      	ldr	r0, [pc, #20]	; (8010a3c <CDC_Init_FS+0x20>)
 8010a26:	f7fb fe3d 	bl	800c6a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010a2a:	4905      	ldr	r1, [pc, #20]	; (8010a40 <CDC_Init_FS+0x24>)
 8010a2c:	4803      	ldr	r0, [pc, #12]	; (8010a3c <CDC_Init_FS+0x20>)
 8010a2e:	f7fb fe5b 	bl	800c6e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010a32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	20011298 	.word	0x20011298
 8010a3c:	200107bc 	.word	0x200107bc
 8010a40:	20010a98 	.word	0x20010a98

08010a44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010a44:	b480      	push	{r7}
 8010a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010a48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	6039      	str	r1, [r7, #0]
 8010a5e:	71fb      	strb	r3, [r7, #7]
 8010a60:	4613      	mov	r3, r2
 8010a62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010a64:	79fb      	ldrb	r3, [r7, #7]
 8010a66:	2b23      	cmp	r3, #35	; 0x23
 8010a68:	d84a      	bhi.n	8010b00 <CDC_Control_FS+0xac>
 8010a6a:	a201      	add	r2, pc, #4	; (adr r2, 8010a70 <CDC_Control_FS+0x1c>)
 8010a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a70:	08010b01 	.word	0x08010b01
 8010a74:	08010b01 	.word	0x08010b01
 8010a78:	08010b01 	.word	0x08010b01
 8010a7c:	08010b01 	.word	0x08010b01
 8010a80:	08010b01 	.word	0x08010b01
 8010a84:	08010b01 	.word	0x08010b01
 8010a88:	08010b01 	.word	0x08010b01
 8010a8c:	08010b01 	.word	0x08010b01
 8010a90:	08010b01 	.word	0x08010b01
 8010a94:	08010b01 	.word	0x08010b01
 8010a98:	08010b01 	.word	0x08010b01
 8010a9c:	08010b01 	.word	0x08010b01
 8010aa0:	08010b01 	.word	0x08010b01
 8010aa4:	08010b01 	.word	0x08010b01
 8010aa8:	08010b01 	.word	0x08010b01
 8010aac:	08010b01 	.word	0x08010b01
 8010ab0:	08010b01 	.word	0x08010b01
 8010ab4:	08010b01 	.word	0x08010b01
 8010ab8:	08010b01 	.word	0x08010b01
 8010abc:	08010b01 	.word	0x08010b01
 8010ac0:	08010b01 	.word	0x08010b01
 8010ac4:	08010b01 	.word	0x08010b01
 8010ac8:	08010b01 	.word	0x08010b01
 8010acc:	08010b01 	.word	0x08010b01
 8010ad0:	08010b01 	.word	0x08010b01
 8010ad4:	08010b01 	.word	0x08010b01
 8010ad8:	08010b01 	.word	0x08010b01
 8010adc:	08010b01 	.word	0x08010b01
 8010ae0:	08010b01 	.word	0x08010b01
 8010ae4:	08010b01 	.word	0x08010b01
 8010ae8:	08010b01 	.word	0x08010b01
 8010aec:	08010b01 	.word	0x08010b01
 8010af0:	08010b01 	.word	0x08010b01
 8010af4:	08010b01 	.word	0x08010b01
 8010af8:	08010b01 	.word	0x08010b01
 8010afc:	08010b01 	.word	0x08010b01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010b00:	bf00      	nop
  }

  return (USBD_OK);
 8010b02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010b1a:	6879      	ldr	r1, [r7, #4]
 8010b1c:	4805      	ldr	r0, [pc, #20]	; (8010b34 <CDC_Receive_FS+0x24>)
 8010b1e:	f7fb fde3 	bl	800c6e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010b22:	4804      	ldr	r0, [pc, #16]	; (8010b34 <CDC_Receive_FS+0x24>)
 8010b24:	f7fb fdfe 	bl	800c724 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010b28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	200107bc 	.word	0x200107bc

08010b38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b087      	sub	sp, #28
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	4613      	mov	r3, r2
 8010b44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	371c      	adds	r7, #28
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
	...

08010b5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	4603      	mov	r3, r0
 8010b64:	6039      	str	r1, [r7, #0]
 8010b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	2212      	movs	r2, #18
 8010b6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010b6e:	4b03      	ldr	r3, [pc, #12]	; (8010b7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	200000d4 	.word	0x200000d4

08010b80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	4603      	mov	r3, r0
 8010b88:	6039      	str	r1, [r7, #0]
 8010b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	2204      	movs	r2, #4
 8010b90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b92:	4b03      	ldr	r3, [pc, #12]	; (8010ba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	200000f4 	.word	0x200000f4

08010ba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	4603      	mov	r3, r0
 8010bac:	6039      	str	r1, [r7, #0]
 8010bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bb0:	79fb      	ldrb	r3, [r7, #7]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d105      	bne.n	8010bc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bb6:	683a      	ldr	r2, [r7, #0]
 8010bb8:	4907      	ldr	r1, [pc, #28]	; (8010bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bba:	4808      	ldr	r0, [pc, #32]	; (8010bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8010bbc:	f7fd f824 	bl	800dc08 <USBD_GetString>
 8010bc0:	e004      	b.n	8010bcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bc2:	683a      	ldr	r2, [r7, #0]
 8010bc4:	4904      	ldr	r1, [pc, #16]	; (8010bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bc6:	4805      	ldr	r0, [pc, #20]	; (8010bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8010bc8:	f7fd f81e 	bl	800dc08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bcc:	4b02      	ldr	r3, [pc, #8]	; (8010bd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20011a98 	.word	0x20011a98
 8010bdc:	080244fc 	.word	0x080244fc

08010be0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	6039      	str	r1, [r7, #0]
 8010bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010bec:	683a      	ldr	r2, [r7, #0]
 8010bee:	4904      	ldr	r1, [pc, #16]	; (8010c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010bf0:	4804      	ldr	r0, [pc, #16]	; (8010c04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010bf2:	f7fd f809 	bl	800dc08 <USBD_GetString>
  return USBD_StrDesc;
 8010bf6:	4b02      	ldr	r3, [pc, #8]	; (8010c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	20011a98 	.word	0x20011a98
 8010c04:	08024514 	.word	0x08024514

08010c08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	4603      	mov	r3, r0
 8010c10:	6039      	str	r1, [r7, #0]
 8010c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	221a      	movs	r2, #26
 8010c18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c1a:	f000 f855 	bl	8010cc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010c1e:	4b02      	ldr	r3, [pc, #8]	; (8010c28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	200000f8 	.word	0x200000f8

08010c2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	4603      	mov	r3, r0
 8010c34:	6039      	str	r1, [r7, #0]
 8010c36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d105      	bne.n	8010c4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	4907      	ldr	r1, [pc, #28]	; (8010c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c42:	4808      	ldr	r0, [pc, #32]	; (8010c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c44:	f7fc ffe0 	bl	800dc08 <USBD_GetString>
 8010c48:	e004      	b.n	8010c54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c4a:	683a      	ldr	r2, [r7, #0]
 8010c4c:	4904      	ldr	r1, [pc, #16]	; (8010c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c4e:	4805      	ldr	r0, [pc, #20]	; (8010c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c50:	f7fc ffda 	bl	800dc08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c54:	4b02      	ldr	r3, [pc, #8]	; (8010c60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	20011a98 	.word	0x20011a98
 8010c64:	08024528 	.word	0x08024528

08010c68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	4603      	mov	r3, r0
 8010c70:	6039      	str	r1, [r7, #0]
 8010c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c74:	79fb      	ldrb	r3, [r7, #7]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d105      	bne.n	8010c86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c7a:	683a      	ldr	r2, [r7, #0]
 8010c7c:	4907      	ldr	r1, [pc, #28]	; (8010c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c7e:	4808      	ldr	r0, [pc, #32]	; (8010ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c80:	f7fc ffc2 	bl	800dc08 <USBD_GetString>
 8010c84:	e004      	b.n	8010c90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	4904      	ldr	r1, [pc, #16]	; (8010c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c8a:	4805      	ldr	r0, [pc, #20]	; (8010ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c8c:	f7fc ffbc 	bl	800dc08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c90:	4b02      	ldr	r3, [pc, #8]	; (8010c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20011a98 	.word	0x20011a98
 8010ca0:	08024534 	.word	0x08024534

08010ca4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	6039      	str	r1, [r7, #0]
 8010cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	220c      	movs	r2, #12
 8010cb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010cb6:	4b03      	ldr	r3, [pc, #12]	; (8010cc4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	200000e8 	.word	0x200000e8

08010cc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010cce:	4b0f      	ldr	r3, [pc, #60]	; (8010d0c <Get_SerialNum+0x44>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cd4:	4b0e      	ldr	r3, [pc, #56]	; (8010d10 <Get_SerialNum+0x48>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cda:	4b0e      	ldr	r3, [pc, #56]	; (8010d14 <Get_SerialNum+0x4c>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d009      	beq.n	8010d02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010cee:	2208      	movs	r2, #8
 8010cf0:	4909      	ldr	r1, [pc, #36]	; (8010d18 <Get_SerialNum+0x50>)
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f000 f814 	bl	8010d20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010cf8:	2204      	movs	r2, #4
 8010cfa:	4908      	ldr	r1, [pc, #32]	; (8010d1c <Get_SerialNum+0x54>)
 8010cfc:	68b8      	ldr	r0, [r7, #8]
 8010cfe:	f000 f80f 	bl	8010d20 <IntToUnicode>
  }
}
 8010d02:	bf00      	nop
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	1ff0f420 	.word	0x1ff0f420
 8010d10:	1ff0f424 	.word	0x1ff0f424
 8010d14:	1ff0f428 	.word	0x1ff0f428
 8010d18:	200000fa 	.word	0x200000fa
 8010d1c:	2000010a 	.word	0x2000010a

08010d20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b087      	sub	sp, #28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d32:	2300      	movs	r3, #0
 8010d34:	75fb      	strb	r3, [r7, #23]
 8010d36:	e027      	b.n	8010d88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	0f1b      	lsrs	r3, r3, #28
 8010d3c:	2b09      	cmp	r3, #9
 8010d3e:	d80b      	bhi.n	8010d58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	0f1b      	lsrs	r3, r3, #28
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	7dfb      	ldrb	r3, [r7, #23]
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	440b      	add	r3, r1
 8010d50:	3230      	adds	r2, #48	; 0x30
 8010d52:	b2d2      	uxtb	r2, r2
 8010d54:	701a      	strb	r2, [r3, #0]
 8010d56:	e00a      	b.n	8010d6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	0f1b      	lsrs	r3, r3, #28
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	7dfb      	ldrb	r3, [r7, #23]
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	4619      	mov	r1, r3
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	440b      	add	r3, r1
 8010d68:	3237      	adds	r2, #55	; 0x37
 8010d6a:	b2d2      	uxtb	r2, r2
 8010d6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	011b      	lsls	r3, r3, #4
 8010d72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
 8010d76:	005b      	lsls	r3, r3, #1
 8010d78:	3301      	adds	r3, #1
 8010d7a:	68ba      	ldr	r2, [r7, #8]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	2200      	movs	r2, #0
 8010d80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d82:	7dfb      	ldrb	r3, [r7, #23]
 8010d84:	3301      	adds	r3, #1
 8010d86:	75fb      	strb	r3, [r7, #23]
 8010d88:	7dfa      	ldrb	r2, [r7, #23]
 8010d8a:	79fb      	ldrb	r3, [r7, #7]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d3d3      	bcc.n	8010d38 <IntToUnicode+0x18>
  }
}
 8010d90:	bf00      	nop
 8010d92:	bf00      	nop
 8010d94:	371c      	adds	r7, #28
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr
	...

08010da0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b0ae      	sub	sp, #184	; 0xb8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010da8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010dac:	2200      	movs	r2, #0
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	605a      	str	r2, [r3, #4]
 8010db2:	609a      	str	r2, [r3, #8]
 8010db4:	60da      	str	r2, [r3, #12]
 8010db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010db8:	f107 0314 	add.w	r3, r7, #20
 8010dbc:	2290      	movs	r2, #144	; 0x90
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f010 f817 	bl	8020df4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010dce:	d151      	bne.n	8010e74 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010dd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010dd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010ddc:	f107 0314 	add.w	r3, r7, #20
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f6 fbf9 	bl	80075d8 <HAL_RCCEx_PeriphCLKConfig>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010dec:	f7f2 f8f9 	bl	8002fe2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010df0:	4b22      	ldr	r3, [pc, #136]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df4:	4a21      	ldr	r2, [pc, #132]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010df6:	f043 0301 	orr.w	r3, r3, #1
 8010dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8010dfc:	4b1f      	ldr	r3, [pc, #124]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e00:	f003 0301 	and.w	r3, r3, #1
 8010e04:	613b      	str	r3, [r7, #16]
 8010e06:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e10:	2302      	movs	r3, #2
 8010e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e16:	2300      	movs	r3, #0
 8010e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e22:	230a      	movs	r3, #10
 8010e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4814      	ldr	r0, [pc, #80]	; (8010e80 <HAL_PCD_MspInit+0xe0>)
 8010e30:	f7f4 f9e4 	bl	80051fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e34:	4b11      	ldr	r3, [pc, #68]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e38:	4a10      	ldr	r2, [pc, #64]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e3e:	6353      	str	r3, [r2, #52]	; 0x34
 8010e40:	4b0e      	ldr	r3, [pc, #56]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e48:	60fb      	str	r3, [r7, #12]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	4b0b      	ldr	r3, [pc, #44]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e50:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e56:	6453      	str	r3, [r2, #68]	; 0x44
 8010e58:	4b08      	ldr	r3, [pc, #32]	; (8010e7c <HAL_PCD_MspInit+0xdc>)
 8010e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e60:	60bb      	str	r3, [r7, #8]
 8010e62:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010e64:	2200      	movs	r2, #0
 8010e66:	2105      	movs	r1, #5
 8010e68:	2043      	movs	r0, #67	; 0x43
 8010e6a:	f7f3 fd87 	bl	800497c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e6e:	2043      	movs	r0, #67	; 0x43
 8010e70:	f7f3 fda0 	bl	80049b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e74:	bf00      	nop
 8010e76:	37b8      	adds	r7, #184	; 0xb8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	40023800 	.word	0x40023800
 8010e80:	40020000 	.word	0x40020000

08010e84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010e98:	4619      	mov	r1, r3
 8010e9a:	4610      	mov	r0, r2
 8010e9c:	f7fb fd2b 	bl	800c8f6 <USBD_LL_SetupStage>
}
 8010ea0:	bf00      	nop
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010eba:	78fa      	ldrb	r2, [r7, #3]
 8010ebc:	6879      	ldr	r1, [r7, #4]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	4413      	add	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	440b      	add	r3, r1
 8010ec8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	78fb      	ldrb	r3, [r7, #3]
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	f7fb fd65 	bl	800c9a0 <USBD_LL_DataOutStage>
}
 8010ed6:	bf00      	nop
 8010ed8:	3708      	adds	r7, #8
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b082      	sub	sp, #8
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010ef0:	78fa      	ldrb	r2, [r7, #3]
 8010ef2:	6879      	ldr	r1, [r7, #4]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	00db      	lsls	r3, r3, #3
 8010ef8:	4413      	add	r3, r2
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	440b      	add	r3, r1
 8010efe:	334c      	adds	r3, #76	; 0x4c
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	78fb      	ldrb	r3, [r7, #3]
 8010f04:	4619      	mov	r1, r3
 8010f06:	f7fb fdfe 	bl	800cb06 <USBD_LL_DataInStage>
}
 8010f0a:	bf00      	nop
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fb ff32 	bl	800cd8a <USBD_LL_SOF>
}
 8010f26:	bf00      	nop
 8010f28:	3708      	adds	r7, #8
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b084      	sub	sp, #16
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f36:	2301      	movs	r3, #1
 8010f38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d102      	bne.n	8010f48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010f42:	2300      	movs	r3, #0
 8010f44:	73fb      	strb	r3, [r7, #15]
 8010f46:	e008      	b.n	8010f5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	d102      	bne.n	8010f56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010f50:	2301      	movs	r3, #1
 8010f52:	73fb      	strb	r3, [r7, #15]
 8010f54:	e001      	b.n	8010f5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010f56:	f7f2 f844 	bl	8002fe2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f60:	7bfa      	ldrb	r2, [r7, #15]
 8010f62:	4611      	mov	r1, r2
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fb fed2 	bl	800cd0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fb fe7a 	bl	800cc6a <USBD_LL_Reset>
}
 8010f76:	bf00      	nop
 8010f78:	3710      	adds	r7, #16
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
	...

08010f80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fb fecd 	bl	800cd2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	6812      	ldr	r2, [r2, #0]
 8010fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010fa6:	f043 0301 	orr.w	r3, r3, #1
 8010faa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6a1b      	ldr	r3, [r3, #32]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d005      	beq.n	8010fc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010fb4:	4b04      	ldr	r3, [pc, #16]	; (8010fc8 <HAL_PCD_SuspendCallback+0x48>)
 8010fb6:	691b      	ldr	r3, [r3, #16]
 8010fb8:	4a03      	ldr	r2, [pc, #12]	; (8010fc8 <HAL_PCD_SuspendCallback+0x48>)
 8010fba:	f043 0306 	orr.w	r3, r3, #6
 8010fbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010fc0:	bf00      	nop
 8010fc2:	3708      	adds	r7, #8
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	e000ed00 	.word	0xe000ed00

08010fcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fb febd 	bl	800cd5a <USBD_LL_Resume>
}
 8010fe0:	bf00      	nop
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010ffa:	78fa      	ldrb	r2, [r7, #3]
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fb ff15 	bl	800ce2e <USBD_LL_IsoOUTIncomplete>
}
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	460b      	mov	r3, r1
 8011016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801101e:	78fa      	ldrb	r2, [r7, #3]
 8011020:	4611      	mov	r1, r2
 8011022:	4618      	mov	r0, r3
 8011024:	f7fb fed1 	bl	800cdca <USBD_LL_IsoINIncomplete>
}
 8011028:	bf00      	nop
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801103e:	4618      	mov	r0, r3
 8011040:	f7fb ff27 	bl	800ce92 <USBD_LL_DevConnected>
}
 8011044:	bf00      	nop
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801105a:	4618      	mov	r0, r3
 801105c:	f7fb ff24 	bl	800cea8 <USBD_LL_DevDisconnected>
}
 8011060:	bf00      	nop
 8011062:	3708      	adds	r7, #8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d13c      	bne.n	80110f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011078:	4a20      	ldr	r2, [pc, #128]	; (80110fc <USBD_LL_Init+0x94>)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	4a1e      	ldr	r2, [pc, #120]	; (80110fc <USBD_LL_Init+0x94>)
 8011084:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011088:	4b1c      	ldr	r3, [pc, #112]	; (80110fc <USBD_LL_Init+0x94>)
 801108a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801108e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011090:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <USBD_LL_Init+0x94>)
 8011092:	2206      	movs	r2, #6
 8011094:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011096:	4b19      	ldr	r3, [pc, #100]	; (80110fc <USBD_LL_Init+0x94>)
 8011098:	2202      	movs	r2, #2
 801109a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801109c:	4b17      	ldr	r3, [pc, #92]	; (80110fc <USBD_LL_Init+0x94>)
 801109e:	2200      	movs	r2, #0
 80110a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80110a2:	4b16      	ldr	r3, [pc, #88]	; (80110fc <USBD_LL_Init+0x94>)
 80110a4:	2202      	movs	r2, #2
 80110a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80110a8:	4b14      	ldr	r3, [pc, #80]	; (80110fc <USBD_LL_Init+0x94>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80110ae:	4b13      	ldr	r3, [pc, #76]	; (80110fc <USBD_LL_Init+0x94>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80110b4:	4b11      	ldr	r3, [pc, #68]	; (80110fc <USBD_LL_Init+0x94>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80110ba:	4b10      	ldr	r3, [pc, #64]	; (80110fc <USBD_LL_Init+0x94>)
 80110bc:	2200      	movs	r2, #0
 80110be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80110c0:	4b0e      	ldr	r3, [pc, #56]	; (80110fc <USBD_LL_Init+0x94>)
 80110c2:	2200      	movs	r2, #0
 80110c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80110c6:	480d      	ldr	r0, [pc, #52]	; (80110fc <USBD_LL_Init+0x94>)
 80110c8:	f7f4 fa77 	bl	80055ba <HAL_PCD_Init>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80110d2:	f7f1 ff86 	bl	8002fe2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80110d6:	2180      	movs	r1, #128	; 0x80
 80110d8:	4808      	ldr	r0, [pc, #32]	; (80110fc <USBD_LL_Init+0x94>)
 80110da:	f7f5 fcf2 	bl	8006ac2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80110de:	2240      	movs	r2, #64	; 0x40
 80110e0:	2100      	movs	r1, #0
 80110e2:	4806      	ldr	r0, [pc, #24]	; (80110fc <USBD_LL_Init+0x94>)
 80110e4:	f7f5 fca6 	bl	8006a34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80110e8:	2280      	movs	r2, #128	; 0x80
 80110ea:	2101      	movs	r1, #1
 80110ec:	4803      	ldr	r0, [pc, #12]	; (80110fc <USBD_LL_Init+0x94>)
 80110ee:	f7f5 fca1 	bl	8006a34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20011c98 	.word	0x20011c98

08011100 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801110c:	2300      	movs	r3, #0
 801110e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011116:	4618      	mov	r0, r3
 8011118:	f7f4 fb73 	bl	8005802 <HAL_PCD_Start>
 801111c:	4603      	mov	r3, r0
 801111e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011120:	7bfb      	ldrb	r3, [r7, #15]
 8011122:	4618      	mov	r0, r3
 8011124:	f000 f97e 	bl	8011424 <USBD_Get_USB_Status>
 8011128:	4603      	mov	r3, r0
 801112a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801112c:	7bbb      	ldrb	r3, [r7, #14]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b084      	sub	sp, #16
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
 801113e:	4608      	mov	r0, r1
 8011140:	4611      	mov	r1, r2
 8011142:	461a      	mov	r2, r3
 8011144:	4603      	mov	r3, r0
 8011146:	70fb      	strb	r3, [r7, #3]
 8011148:	460b      	mov	r3, r1
 801114a:	70bb      	strb	r3, [r7, #2]
 801114c:	4613      	mov	r3, r2
 801114e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801115e:	78bb      	ldrb	r3, [r7, #2]
 8011160:	883a      	ldrh	r2, [r7, #0]
 8011162:	78f9      	ldrb	r1, [r7, #3]
 8011164:	f7f5 f860 	bl	8006228 <HAL_PCD_EP_Open>
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	4618      	mov	r0, r3
 8011170:	f000 f958 	bl	8011424 <USBD_Get_USB_Status>
 8011174:	4603      	mov	r3, r0
 8011176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011178:	7bbb      	ldrb	r3, [r7, #14]
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b084      	sub	sp, #16
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	460b      	mov	r3, r1
 801118c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801118e:	2300      	movs	r3, #0
 8011190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011192:	2300      	movs	r3, #0
 8011194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801119c:	78fa      	ldrb	r2, [r7, #3]
 801119e:	4611      	mov	r1, r2
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7f5 f8a9 	bl	80062f8 <HAL_PCD_EP_Close>
 80111a6:	4603      	mov	r3, r0
 80111a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111aa:	7bfb      	ldrb	r3, [r7, #15]
 80111ac:	4618      	mov	r0, r3
 80111ae:	f000 f939 	bl	8011424 <USBD_Get_USB_Status>
 80111b2:	4603      	mov	r3, r0
 80111b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3710      	adds	r7, #16
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	460b      	mov	r3, r1
 80111ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111d0:	2300      	movs	r3, #0
 80111d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80111da:	78fa      	ldrb	r2, [r7, #3]
 80111dc:	4611      	mov	r1, r2
 80111de:	4618      	mov	r0, r3
 80111e0:	f7f5 f981 	bl	80064e6 <HAL_PCD_EP_SetStall>
 80111e4:	4603      	mov	r3, r0
 80111e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111e8:	7bfb      	ldrb	r3, [r7, #15]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f000 f91a 	bl	8011424 <USBD_Get_USB_Status>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b084      	sub	sp, #16
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
 8011206:	460b      	mov	r3, r1
 8011208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011218:	78fa      	ldrb	r2, [r7, #3]
 801121a:	4611      	mov	r1, r2
 801121c:	4618      	mov	r0, r3
 801121e:	f7f5 f9c6 	bl	80065ae <HAL_PCD_EP_ClrStall>
 8011222:	4603      	mov	r3, r0
 8011224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011226:	7bfb      	ldrb	r3, [r7, #15]
 8011228:	4618      	mov	r0, r3
 801122a:	f000 f8fb 	bl	8011424 <USBD_Get_USB_Status>
 801122e:	4603      	mov	r3, r0
 8011230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011232:	7bbb      	ldrb	r3, [r7, #14]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801123c:	b480      	push	{r7}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	460b      	mov	r3, r1
 8011246:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801124e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011254:	2b00      	cmp	r3, #0
 8011256:	da0b      	bge.n	8011270 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011258:	78fb      	ldrb	r3, [r7, #3]
 801125a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801125e:	68f9      	ldr	r1, [r7, #12]
 8011260:	4613      	mov	r3, r2
 8011262:	00db      	lsls	r3, r3, #3
 8011264:	4413      	add	r3, r2
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	440b      	add	r3, r1
 801126a:	333e      	adds	r3, #62	; 0x3e
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	e00b      	b.n	8011288 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011270:	78fb      	ldrb	r3, [r7, #3]
 8011272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011276:	68f9      	ldr	r1, [r7, #12]
 8011278:	4613      	mov	r3, r2
 801127a:	00db      	lsls	r3, r3, #3
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	440b      	add	r3, r1
 8011282:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011286:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011288:	4618      	mov	r0, r3
 801128a:	3714      	adds	r7, #20
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	460b      	mov	r3, r1
 801129e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112a4:	2300      	movs	r3, #0
 80112a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112ae:	78fa      	ldrb	r2, [r7, #3]
 80112b0:	4611      	mov	r1, r2
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7f4 ff93 	bl	80061de <HAL_PCD_SetAddress>
 80112b8:	4603      	mov	r3, r0
 80112ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112bc:	7bfb      	ldrb	r3, [r7, #15]
 80112be:	4618      	mov	r0, r3
 80112c0:	f000 f8b0 	bl	8011424 <USBD_Get_USB_Status>
 80112c4:	4603      	mov	r3, r0
 80112c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b086      	sub	sp, #24
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	60f8      	str	r0, [r7, #12]
 80112da:	607a      	str	r2, [r7, #4]
 80112dc:	603b      	str	r3, [r7, #0]
 80112de:	460b      	mov	r3, r1
 80112e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112e2:	2300      	movs	r3, #0
 80112e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e6:	2300      	movs	r3, #0
 80112e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80112f0:	7af9      	ldrb	r1, [r7, #11]
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	f7f5 f8ac 	bl	8006452 <HAL_PCD_EP_Transmit>
 80112fa:	4603      	mov	r3, r0
 80112fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112fe:	7dfb      	ldrb	r3, [r7, #23]
 8011300:	4618      	mov	r0, r3
 8011302:	f000 f88f 	bl	8011424 <USBD_Get_USB_Status>
 8011306:	4603      	mov	r3, r0
 8011308:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801130a:	7dbb      	ldrb	r3, [r7, #22]
}
 801130c:	4618      	mov	r0, r3
 801130e:	3718      	adds	r7, #24
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	607a      	str	r2, [r7, #4]
 801131e:	603b      	str	r3, [r7, #0]
 8011320:	460b      	mov	r3, r1
 8011322:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011324:	2300      	movs	r3, #0
 8011326:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011328:	2300      	movs	r3, #0
 801132a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011332:	7af9      	ldrb	r1, [r7, #11]
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	f7f5 f828 	bl	800638c <HAL_PCD_EP_Receive>
 801133c:	4603      	mov	r3, r0
 801133e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011340:	7dfb      	ldrb	r3, [r7, #23]
 8011342:	4618      	mov	r0, r3
 8011344:	f000 f86e 	bl	8011424 <USBD_Get_USB_Status>
 8011348:	4603      	mov	r3, r0
 801134a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801134c:	7dbb      	ldrb	r3, [r7, #22]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b082      	sub	sp, #8
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
 801135e:	460b      	mov	r3, r1
 8011360:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011368:	78fa      	ldrb	r2, [r7, #3]
 801136a:	4611      	mov	r1, r2
 801136c:	4618      	mov	r0, r3
 801136e:	f7f5 f858 	bl	8006422 <HAL_PCD_EP_GetRxCount>
 8011372:	4603      	mov	r3, r0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	460b      	mov	r3, r1
 8011386:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011388:	78fb      	ldrb	r3, [r7, #3]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d002      	beq.n	8011394 <HAL_PCDEx_LPM_Callback+0x18>
 801138e:	2b01      	cmp	r3, #1
 8011390:	d01f      	beq.n	80113d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011392:	e03b      	b.n	801140c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6a1b      	ldr	r3, [r3, #32]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d007      	beq.n	80113ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801139c:	f000 f83c 	bl	8011418 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113a0:	4b1c      	ldr	r3, [pc, #112]	; (8011414 <HAL_PCDEx_LPM_Callback+0x98>)
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	4a1b      	ldr	r2, [pc, #108]	; (8011414 <HAL_PCDEx_LPM_Callback+0x98>)
 80113a6:	f023 0306 	bic.w	r3, r3, #6
 80113aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	6812      	ldr	r2, [r2, #0]
 80113ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80113be:	f023 0301 	bic.w	r3, r3, #1
 80113c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fb fcc5 	bl	800cd5a <USBD_LL_Resume>
    break;
 80113d0:	e01c      	b.n	801140c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	6812      	ldr	r2, [r2, #0]
 80113e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80113e4:	f043 0301 	orr.w	r3, r3, #1
 80113e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fb fc9c 	bl	800cd2e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6a1b      	ldr	r3, [r3, #32]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d005      	beq.n	801140a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113fe:	4b05      	ldr	r3, [pc, #20]	; (8011414 <HAL_PCDEx_LPM_Callback+0x98>)
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	4a04      	ldr	r2, [pc, #16]	; (8011414 <HAL_PCDEx_LPM_Callback+0x98>)
 8011404:	f043 0306 	orr.w	r3, r3, #6
 8011408:	6113      	str	r3, [r2, #16]
    break;
 801140a:	bf00      	nop
}
 801140c:	bf00      	nop
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	e000ed00 	.word	0xe000ed00

08011418 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801141c:	f7f1 fd62 	bl	8002ee4 <SystemClock_Config>
}
 8011420:	bf00      	nop
 8011422:	bd80      	pop	{r7, pc}

08011424 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011424:	b480      	push	{r7}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
 801142a:	4603      	mov	r3, r0
 801142c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801142e:	2300      	movs	r3, #0
 8011430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011432:	79fb      	ldrb	r3, [r7, #7]
 8011434:	2b03      	cmp	r3, #3
 8011436:	d817      	bhi.n	8011468 <USBD_Get_USB_Status+0x44>
 8011438:	a201      	add	r2, pc, #4	; (adr r2, 8011440 <USBD_Get_USB_Status+0x1c>)
 801143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143e:	bf00      	nop
 8011440:	08011451 	.word	0x08011451
 8011444:	08011457 	.word	0x08011457
 8011448:	0801145d 	.word	0x0801145d
 801144c:	08011463 	.word	0x08011463
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011450:	2300      	movs	r3, #0
 8011452:	73fb      	strb	r3, [r7, #15]
    break;
 8011454:	e00b      	b.n	801146e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011456:	2303      	movs	r3, #3
 8011458:	73fb      	strb	r3, [r7, #15]
    break;
 801145a:	e008      	b.n	801146e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801145c:	2301      	movs	r3, #1
 801145e:	73fb      	strb	r3, [r7, #15]
    break;
 8011460:	e005      	b.n	801146e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011462:	2303      	movs	r3, #3
 8011464:	73fb      	strb	r3, [r7, #15]
    break;
 8011466:	e002      	b.n	801146e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011468:	2303      	movs	r3, #3
 801146a:	73fb      	strb	r3, [r7, #15]
    break;
 801146c:	bf00      	nop
  }
  return usb_status;
 801146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011470:	4618      	mov	r0, r3
 8011472:	3714      	adds	r7, #20
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 801147c:	4b04      	ldr	r3, [pc, #16]	; (8011490 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	b10a      	cbz	r2, 8011486 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8011482:	4803      	ldr	r0, [pc, #12]	; (8011490 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8011484:	4770      	bx	lr
 8011486:	4a03      	ldr	r2, [pc, #12]	; (8011494 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8011488:	4801      	ldr	r0, [pc, #4]	; (8011490 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801148a:	6812      	ldr	r2, [r2, #0]
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	4770      	bx	lr
 8011490:	2000011c 	.word	0x2000011c
 8011494:	200008b8 	.word	0x200008b8

08011498 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011498:	4b04      	ldr	r3, [pc, #16]	; (80114ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801149a:	4805      	ldr	r0, [pc, #20]	; (80114b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4905      	ldr	r1, [pc, #20]	; (80114b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 80114a0:	4a05      	ldr	r2, [pc, #20]	; (80114b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 80114a2:	6003      	str	r3, [r0, #0]
 80114a4:	600b      	str	r3, [r1, #0]
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	200008b8 	.word	0x200008b8
 80114b0:	20000138 	.word	0x20000138
 80114b4:	20000144 	.word	0x20000144
 80114b8:	2000011c 	.word	0x2000011c

080114bc <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 80114bc:	f006 b880 	b.w	80175c0 <custom_test_msgs__srv__AddThreeInts_Request__init>

080114c0 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 80114c0:	f006 b882 	b.w	80175c8 <custom_test_msgs__srv__AddThreeInts_Request__fini>

080114c4 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 80114c4:	f006 b882 	b.w	80175cc <custom_test_msgs__srv__AddThreeInts_Response__init>

080114c8 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 80114c8:	f006 b884 	b.w	80175d4 <custom_test_msgs__srv__AddThreeInts_Response__fini>

080114cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80114cc:	4b04      	ldr	r3, [pc, #16]	; (80114e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	b10a      	cbz	r2, 80114d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 80114d2:	4803      	ldr	r0, [pc, #12]	; (80114e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80114d4:	4770      	bx	lr
 80114d6:	4a03      	ldr	r2, [pc, #12]	; (80114e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 80114d8:	4801      	ldr	r0, [pc, #4]	; (80114e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80114da:	6812      	ldr	r2, [r2, #0]
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	4770      	bx	lr
 80114e0:	20000204 	.word	0x20000204
 80114e4:	200008bc 	.word	0x200008bc

080114e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 80114e8:	4b04      	ldr	r3, [pc, #16]	; (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	b10a      	cbz	r2, 80114f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 80114ee:	4803      	ldr	r0, [pc, #12]	; (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80114f0:	4770      	bx	lr
 80114f2:	4a03      	ldr	r2, [pc, #12]	; (8011500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 80114f4:	4801      	ldr	r0, [pc, #4]	; (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80114f6:	6812      	ldr	r2, [r2, #0]
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	4770      	bx	lr
 80114fc:	2000024c 	.word	0x2000024c
 8011500:	200008bc 	.word	0x200008bc

08011504 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011504:	4b13      	ldr	r3, [pc, #76]	; (8011554 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	b132      	cbz	r2, 8011518 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	689a      	ldr	r2, [r3, #8]
 801150e:	b152      	cbz	r2, 8011526 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8011510:	68da      	ldr	r2, [r3, #12]
 8011512:	b182      	cbz	r2, 8011536 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8011514:	480f      	ldr	r0, [pc, #60]	; (8011554 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011516:	4770      	bx	lr
 8011518:	4a0f      	ldr	r2, [pc, #60]	; (8011558 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801151a:	6812      	ldr	r2, [r2, #0]
 801151c:	601a      	str	r2, [r3, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	689a      	ldr	r2, [r3, #8]
 8011522:	2a00      	cmp	r2, #0
 8011524:	d1f4      	bne.n	8011510 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8011526:	4a0d      	ldr	r2, [pc, #52]	; (801155c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8011528:	6811      	ldr	r1, [r2, #0]
 801152a:	b179      	cbz	r1, 801154c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801152c:	6852      	ldr	r2, [r2, #4]
 801152e:	609a      	str	r2, [r3, #8]
 8011530:	68da      	ldr	r2, [r3, #12]
 8011532:	2a00      	cmp	r2, #0
 8011534:	d1ee      	bne.n	8011514 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8011536:	4a0a      	ldr	r2, [pc, #40]	; (8011560 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8011538:	6811      	ldr	r1, [r2, #0]
 801153a:	b119      	cbz	r1, 8011544 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 801153c:	6852      	ldr	r2, [r2, #4]
 801153e:	4805      	ldr	r0, [pc, #20]	; (8011554 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011540:	60da      	str	r2, [r3, #12]
 8011542:	4770      	bx	lr
 8011544:	4904      	ldr	r1, [pc, #16]	; (8011558 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8011546:	6809      	ldr	r1, [r1, #0]
 8011548:	6011      	str	r1, [r2, #0]
 801154a:	e7f7      	b.n	801153c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 801154c:	4902      	ldr	r1, [pc, #8]	; (8011558 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801154e:	6809      	ldr	r1, [r1, #0]
 8011550:	6011      	str	r1, [r2, #0]
 8011552:	e7eb      	b.n	801152c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8011554:	20000268 	.word	0x20000268
 8011558:	200008bc 	.word	0x200008bc
 801155c:	20000204 	.word	0x20000204
 8011560:	2000024c 	.word	0x2000024c

08011564 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011564:	4800      	ldr	r0, [pc, #0]	; (8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8011566:	4770      	bx	lr
 8011568:	20000290 	.word	0x20000290

0801156c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 801156c:	4800      	ldr	r0, [pc, #0]	; (8011570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 801156e:	4770      	bx	lr
 8011570:	2000029c 	.word	0x2000029c

08011574 <_AddThreeInts_Response__max_serialized_size>:
 8011574:	2108      	movs	r1, #8
 8011576:	2000      	movs	r0, #0
 8011578:	b508      	push	{r3, lr}
 801157a:	f001 fed5 	bl	8013328 <ucdr_alignment>
 801157e:	3008      	adds	r0, #8
 8011580:	bd08      	pop	{r3, pc}
 8011582:	bf00      	nop

08011584 <_AddThreeInts_Response__cdr_deserialize>:
 8011584:	b109      	cbz	r1, 801158a <_AddThreeInts_Response__cdr_deserialize+0x6>
 8011586:	f001 bc1b 	b.w	8012dc0 <ucdr_deserialize_int64_t>
 801158a:	4608      	mov	r0, r1
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop

08011590 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8011590:	b1b8      	cbz	r0, 80115c2 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8011592:	b538      	push	{r3, r4, r5, lr}
 8011594:	460d      	mov	r5, r1
 8011596:	2108      	movs	r1, #8
 8011598:	4628      	mov	r0, r5
 801159a:	f001 fec5 	bl	8013328 <ucdr_alignment>
 801159e:	f105 0308 	add.w	r3, r5, #8
 80115a2:	2108      	movs	r1, #8
 80115a4:	f1c5 0508 	rsb	r5, r5, #8
 80115a8:	181c      	adds	r4, r3, r0
 80115aa:	4620      	mov	r0, r4
 80115ac:	f001 febc 	bl	8013328 <ucdr_alignment>
 80115b0:	2108      	movs	r1, #8
 80115b2:	4408      	add	r0, r1
 80115b4:	4404      	add	r4, r0
 80115b6:	4620      	mov	r0, r4
 80115b8:	f001 feb6 	bl	8013328 <ucdr_alignment>
 80115bc:	4428      	add	r0, r5
 80115be:	4420      	add	r0, r4
 80115c0:	bd38      	pop	{r3, r4, r5, pc}
 80115c2:	4770      	bx	lr

080115c4 <_AddThreeInts_Response__get_serialized_size>:
 80115c4:	b130      	cbz	r0, 80115d4 <_AddThreeInts_Response__get_serialized_size+0x10>
 80115c6:	2108      	movs	r1, #8
 80115c8:	2000      	movs	r0, #0
 80115ca:	b508      	push	{r3, lr}
 80115cc:	f001 feac 	bl	8013328 <ucdr_alignment>
 80115d0:	3008      	adds	r0, #8
 80115d2:	bd08      	pop	{r3, pc}
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop

080115d8 <_AddThreeInts_Request__cdr_deserialize>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	460c      	mov	r4, r1
 80115dc:	b171      	cbz	r1, 80115fc <_AddThreeInts_Request__cdr_deserialize+0x24>
 80115de:	4605      	mov	r5, r0
 80115e0:	f001 fbee 	bl	8012dc0 <ucdr_deserialize_int64_t>
 80115e4:	f104 0108 	add.w	r1, r4, #8
 80115e8:	4628      	mov	r0, r5
 80115ea:	f001 fbe9 	bl	8012dc0 <ucdr_deserialize_int64_t>
 80115ee:	f104 0110 	add.w	r1, r4, #16
 80115f2:	4628      	mov	r0, r5
 80115f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115f8:	f001 bbe2 	b.w	8012dc0 <ucdr_deserialize_int64_t>
 80115fc:	4608      	mov	r0, r1
 80115fe:	bd38      	pop	{r3, r4, r5, pc}

08011600 <_AddThreeInts_Request__cdr_serialize>:
 8011600:	b198      	cbz	r0, 801162a <_AddThreeInts_Request__cdr_serialize+0x2a>
 8011602:	b570      	push	{r4, r5, r6, lr}
 8011604:	460d      	mov	r5, r1
 8011606:	4604      	mov	r4, r0
 8011608:	e9d0 2300 	ldrd	r2, r3, [r0]
 801160c:	4608      	mov	r0, r1
 801160e:	f001 fb07 	bl	8012c20 <ucdr_serialize_int64_t>
 8011612:	4628      	mov	r0, r5
 8011614:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011618:	f001 fb02 	bl	8012c20 <ucdr_serialize_int64_t>
 801161c:	4628      	mov	r0, r5
 801161e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011626:	f001 bafb 	b.w	8012c20 <ucdr_serialize_int64_t>
 801162a:	4770      	bx	lr

0801162c <_AddThreeInts_Response__cdr_serialize>:
 801162c:	b120      	cbz	r0, 8011638 <_AddThreeInts_Response__cdr_serialize+0xc>
 801162e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011632:	4608      	mov	r0, r1
 8011634:	f001 baf4 	b.w	8012c20 <ucdr_serialize_int64_t>
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop

0801163c <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 801163c:	b138      	cbz	r0, 801164e <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 801163e:	b508      	push	{r3, lr}
 8011640:	460b      	mov	r3, r1
 8011642:	2108      	movs	r1, #8
 8011644:	4618      	mov	r0, r3
 8011646:	f001 fe6f 	bl	8013328 <ucdr_alignment>
 801164a:	3008      	adds	r0, #8
 801164c:	bd08      	pop	{r3, pc}
 801164e:	4770      	bx	lr

08011650 <_AddThreeInts_Request__get_serialized_size>:
 8011650:	b190      	cbz	r0, 8011678 <_AddThreeInts_Request__get_serialized_size+0x28>
 8011652:	2108      	movs	r1, #8
 8011654:	2000      	movs	r0, #0
 8011656:	b510      	push	{r4, lr}
 8011658:	f001 fe66 	bl	8013328 <ucdr_alignment>
 801165c:	2108      	movs	r1, #8
 801165e:	1844      	adds	r4, r0, r1
 8011660:	4620      	mov	r0, r4
 8011662:	f001 fe61 	bl	8013328 <ucdr_alignment>
 8011666:	2108      	movs	r1, #8
 8011668:	4408      	add	r0, r1
 801166a:	4404      	add	r4, r0
 801166c:	4620      	mov	r0, r4
 801166e:	f001 fe5b 	bl	8013328 <ucdr_alignment>
 8011672:	3008      	adds	r0, #8
 8011674:	4420      	add	r0, r4
 8011676:	bd10      	pop	{r4, pc}
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop

0801167c <_AddThreeInts_Request__max_serialized_size>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	2108      	movs	r1, #8
 8011680:	2000      	movs	r0, #0
 8011682:	f001 fe51 	bl	8013328 <ucdr_alignment>
 8011686:	2108      	movs	r1, #8
 8011688:	1845      	adds	r5, r0, r1
 801168a:	4628      	mov	r0, r5
 801168c:	f001 fe4c 	bl	8013328 <ucdr_alignment>
 8011690:	2108      	movs	r1, #8
 8011692:	1844      	adds	r4, r0, r1
 8011694:	442c      	add	r4, r5
 8011696:	4620      	mov	r0, r4
 8011698:	f001 fe46 	bl	8013328 <ucdr_alignment>
 801169c:	3008      	adds	r0, #8
 801169e:	4420      	add	r0, r4
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop

080116a4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80116a4:	4800      	ldr	r0, [pc, #0]	; (80116a8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 80116a6:	4770      	bx	lr
 80116a8:	20000284 	.word	0x20000284

080116ac <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80116ac:	4b04      	ldr	r3, [pc, #16]	; (80116c0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	b10a      	cbz	r2, 80116b6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80116b2:	4803      	ldr	r0, [pc, #12]	; (80116c0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80116b4:	4770      	bx	lr
 80116b6:	4a03      	ldr	r2, [pc, #12]	; (80116c4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80116b8:	4801      	ldr	r0, [pc, #4]	; (80116c0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80116ba:	6812      	ldr	r2, [r2, #0]
 80116bc:	601a      	str	r2, [r3, #0]
 80116be:	4770      	bx	lr
 80116c0:	200002e8 	.word	0x200002e8
 80116c4:	200008b8 	.word	0x200008b8

080116c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80116c8:	4a02      	ldr	r2, [pc, #8]	; (80116d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 80116ca:	4b03      	ldr	r3, [pc, #12]	; (80116d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 80116cc:	6812      	ldr	r2, [r2, #0]
 80116ce:	601a      	str	r2, [r3, #0]
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	200008b8 	.word	0x200008b8
 80116d8:	200002e8 	.word	0x200002e8

080116dc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80116dc:	4b04      	ldr	r3, [pc, #16]	; (80116f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	b10a      	cbz	r2, 80116e6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80116e2:	4803      	ldr	r0, [pc, #12]	; (80116f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80116e4:	4770      	bx	lr
 80116e6:	4a03      	ldr	r2, [pc, #12]	; (80116f4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80116e8:	4801      	ldr	r0, [pc, #4]	; (80116f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80116ea:	6812      	ldr	r2, [r2, #0]
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	4770      	bx	lr
 80116f0:	200002fc 	.word	0x200002fc
 80116f4:	200008b8 	.word	0x200008b8

080116f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80116f8:	4a02      	ldr	r2, [pc, #8]	; (8011704 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 80116fa:	4b03      	ldr	r3, [pc, #12]	; (8011708 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 80116fc:	6812      	ldr	r2, [r2, #0]
 80116fe:	601a      	str	r2, [r3, #0]
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	200008b8 	.word	0x200008b8
 8011708:	200002fc 	.word	0x200002fc

0801170c <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 801170c:	f005 bf64 	b.w	80175d8 <drive_msgs__msg__Omni__init>

08011710 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8011710:	f005 bf74 	b.w	80175fc <drive_msgs__msg__Omni__fini>

08011714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011714:	4b04      	ldr	r3, [pc, #16]	; (8011728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	b10a      	cbz	r2, 801171e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 801171a:	4803      	ldr	r0, [pc, #12]	; (8011728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801171c:	4770      	bx	lr
 801171e:	4a03      	ldr	r2, [pc, #12]	; (801172c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011720:	4801      	ldr	r0, [pc, #4]	; (8011728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011722:	6812      	ldr	r2, [r2, #0]
 8011724:	601a      	str	r2, [r3, #0]
 8011726:	4770      	bx	lr
 8011728:	20000434 	.word	0x20000434
 801172c:	200008bc 	.word	0x200008bc

08011730 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 8011730:	f005 bf68 	b.w	8017604 <drive_msgs__msg__OmniEnc__init>

08011734 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 8011734:	f005 bf78 	b.w	8017628 <drive_msgs__msg__OmniEnc__fini>

08011738 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011738:	4b04      	ldr	r3, [pc, #16]	; (801174c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	b10a      	cbz	r2, 8011742 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 801173e:	4803      	ldr	r0, [pc, #12]	; (801174c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011740:	4770      	bx	lr
 8011742:	4a03      	ldr	r2, [pc, #12]	; (8011750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011744:	4801      	ldr	r0, [pc, #4]	; (801174c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011746:	6812      	ldr	r2, [r2, #0]
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	4770      	bx	lr
 801174c:	20000620 	.word	0x20000620
 8011750:	200008bc 	.word	0x200008bc

08011754 <_Omni__cdr_serialize>:
 8011754:	b330      	cbz	r0, 80117a4 <_Omni__cdr_serialize+0x50>
 8011756:	b570      	push	{r4, r5, r6, lr}
 8011758:	6806      	ldr	r6, [r0, #0]
 801175a:	4604      	mov	r4, r0
 801175c:	460d      	mov	r5, r1
 801175e:	b1f6      	cbz	r6, 801179e <_Omni__cdr_serialize+0x4a>
 8011760:	4630      	mov	r0, r6
 8011762:	f7ee fdcd 	bl	8000300 <strlen>
 8011766:	1c42      	adds	r2, r0, #1
 8011768:	4631      	mov	r1, r6
 801176a:	6060      	str	r0, [r4, #4]
 801176c:	4628      	mov	r0, r5
 801176e:	f001 fe4b 	bl	8013408 <ucdr_serialize_sequence_char>
 8011772:	4628      	mov	r0, r5
 8011774:	ed94 0b04 	vldr	d0, [r4, #16]
 8011778:	f001 fbe8 	bl	8012f4c <ucdr_serialize_double>
 801177c:	4628      	mov	r0, r5
 801177e:	ed94 0b06 	vldr	d0, [r4, #24]
 8011782:	f001 fbe3 	bl	8012f4c <ucdr_serialize_double>
 8011786:	4628      	mov	r0, r5
 8011788:	ed94 0b08 	vldr	d0, [r4, #32]
 801178c:	f001 fbde 	bl	8012f4c <ucdr_serialize_double>
 8011790:	4628      	mov	r0, r5
 8011792:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801179a:	f001 bbd7 	b.w	8012f4c <ucdr_serialize_double>
 801179e:	4632      	mov	r2, r6
 80117a0:	4630      	mov	r0, r6
 80117a2:	e7e1      	b.n	8011768 <_Omni__cdr_serialize+0x14>
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop

080117a8 <get_serialized_size_drive_msgs__msg__Omni>:
 80117a8:	b570      	push	{r4, r5, r6, lr}
 80117aa:	4604      	mov	r4, r0
 80117ac:	b310      	cbz	r0, 80117f4 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 80117ae:	460d      	mov	r5, r1
 80117b0:	2104      	movs	r1, #4
 80117b2:	4628      	mov	r0, r5
 80117b4:	f001 fdb8 	bl	8013328 <ucdr_alignment>
 80117b8:	6866      	ldr	r6, [r4, #4]
 80117ba:	1d6b      	adds	r3, r5, #5
 80117bc:	2108      	movs	r1, #8
 80117be:	f1c5 0508 	rsb	r5, r5, #8
 80117c2:	4433      	add	r3, r6
 80117c4:	181e      	adds	r6, r3, r0
 80117c6:	4630      	mov	r0, r6
 80117c8:	f001 fdae 	bl	8013328 <ucdr_alignment>
 80117cc:	2108      	movs	r1, #8
 80117ce:	1844      	adds	r4, r0, r1
 80117d0:	4426      	add	r6, r4
 80117d2:	4630      	mov	r0, r6
 80117d4:	f001 fda8 	bl	8013328 <ucdr_alignment>
 80117d8:	2108      	movs	r1, #8
 80117da:	1844      	adds	r4, r0, r1
 80117dc:	4434      	add	r4, r6
 80117de:	4620      	mov	r0, r4
 80117e0:	f001 fda2 	bl	8013328 <ucdr_alignment>
 80117e4:	2108      	movs	r1, #8
 80117e6:	4408      	add	r0, r1
 80117e8:	4404      	add	r4, r0
 80117ea:	4620      	mov	r0, r4
 80117ec:	f001 fd9c 	bl	8013328 <ucdr_alignment>
 80117f0:	4428      	add	r0, r5
 80117f2:	4420      	add	r0, r4
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
 80117f6:	bf00      	nop

080117f8 <_Omni__cdr_deserialize>:
 80117f8:	b570      	push	{r4, r5, r6, lr}
 80117fa:	460c      	mov	r4, r1
 80117fc:	b082      	sub	sp, #8
 80117fe:	b329      	cbz	r1, 801184c <_Omni__cdr_deserialize+0x54>
 8011800:	688e      	ldr	r6, [r1, #8]
 8011802:	ab01      	add	r3, sp, #4
 8011804:	6809      	ldr	r1, [r1, #0]
 8011806:	4605      	mov	r5, r0
 8011808:	4632      	mov	r2, r6
 801180a:	f001 fe0f 	bl	801342c <ucdr_deserialize_sequence_char>
 801180e:	9b01      	ldr	r3, [sp, #4]
 8011810:	b9c0      	cbnz	r0, 8011844 <_Omni__cdr_deserialize+0x4c>
 8011812:	429e      	cmp	r6, r3
 8011814:	d31d      	bcc.n	8011852 <_Omni__cdr_deserialize+0x5a>
 8011816:	f104 0110 	add.w	r1, r4, #16
 801181a:	4628      	mov	r0, r5
 801181c:	f001 fc66 	bl	80130ec <ucdr_deserialize_double>
 8011820:	f104 0118 	add.w	r1, r4, #24
 8011824:	4628      	mov	r0, r5
 8011826:	f001 fc61 	bl	80130ec <ucdr_deserialize_double>
 801182a:	f104 0120 	add.w	r1, r4, #32
 801182e:	4628      	mov	r0, r5
 8011830:	f001 fc5c 	bl	80130ec <ucdr_deserialize_double>
 8011834:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011838:	4628      	mov	r0, r5
 801183a:	b002      	add	sp, #8
 801183c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011840:	f001 bc54 	b.w	80130ec <ucdr_deserialize_double>
 8011844:	b103      	cbz	r3, 8011848 <_Omni__cdr_deserialize+0x50>
 8011846:	3b01      	subs	r3, #1
 8011848:	6063      	str	r3, [r4, #4]
 801184a:	e7e4      	b.n	8011816 <_Omni__cdr_deserialize+0x1e>
 801184c:	4608      	mov	r0, r1
 801184e:	b002      	add	sp, #8
 8011850:	bd70      	pop	{r4, r5, r6, pc}
 8011852:	2101      	movs	r1, #1
 8011854:	75a8      	strb	r0, [r5, #22]
 8011856:	7569      	strb	r1, [r5, #21]
 8011858:	6060      	str	r0, [r4, #4]
 801185a:	4628      	mov	r0, r5
 801185c:	f001 fd7c 	bl	8013358 <ucdr_align_to>
 8011860:	9901      	ldr	r1, [sp, #4]
 8011862:	4628      	mov	r0, r5
 8011864:	f001 fdb0 	bl	80133c8 <ucdr_advance_buffer>
 8011868:	e7d5      	b.n	8011816 <_Omni__cdr_deserialize+0x1e>
 801186a:	bf00      	nop

0801186c <_Omni__max_serialized_size>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	2108      	movs	r1, #8
 8011870:	2000      	movs	r0, #0
 8011872:	f001 fd59 	bl	8013328 <ucdr_alignment>
 8011876:	2108      	movs	r1, #8
 8011878:	1845      	adds	r5, r0, r1
 801187a:	4628      	mov	r0, r5
 801187c:	f001 fd54 	bl	8013328 <ucdr_alignment>
 8011880:	2108      	movs	r1, #8
 8011882:	1844      	adds	r4, r0, r1
 8011884:	442c      	add	r4, r5
 8011886:	4620      	mov	r0, r4
 8011888:	f001 fd4e 	bl	8013328 <ucdr_alignment>
 801188c:	2108      	movs	r1, #8
 801188e:	4408      	add	r0, r1
 8011890:	4404      	add	r4, r0
 8011892:	4620      	mov	r0, r4
 8011894:	f001 fd48 	bl	8013328 <ucdr_alignment>
 8011898:	3008      	adds	r0, #8
 801189a:	4420      	add	r0, r4
 801189c:	bd38      	pop	{r3, r4, r5, pc}
 801189e:	bf00      	nop

080118a0 <_Omni__get_serialized_size>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4604      	mov	r4, r0
 80118a4:	b1f0      	cbz	r0, 80118e4 <_Omni__get_serialized_size+0x44>
 80118a6:	2104      	movs	r1, #4
 80118a8:	2000      	movs	r0, #0
 80118aa:	f001 fd3d 	bl	8013328 <ucdr_alignment>
 80118ae:	6863      	ldr	r3, [r4, #4]
 80118b0:	2108      	movs	r1, #8
 80118b2:	3305      	adds	r3, #5
 80118b4:	181d      	adds	r5, r3, r0
 80118b6:	4628      	mov	r0, r5
 80118b8:	f001 fd36 	bl	8013328 <ucdr_alignment>
 80118bc:	2108      	movs	r1, #8
 80118be:	1844      	adds	r4, r0, r1
 80118c0:	4425      	add	r5, r4
 80118c2:	4628      	mov	r0, r5
 80118c4:	f001 fd30 	bl	8013328 <ucdr_alignment>
 80118c8:	2108      	movs	r1, #8
 80118ca:	1844      	adds	r4, r0, r1
 80118cc:	442c      	add	r4, r5
 80118ce:	4620      	mov	r0, r4
 80118d0:	f001 fd2a 	bl	8013328 <ucdr_alignment>
 80118d4:	2108      	movs	r1, #8
 80118d6:	4408      	add	r0, r1
 80118d8:	4404      	add	r4, r0
 80118da:	4620      	mov	r0, r4
 80118dc:	f001 fd24 	bl	8013328 <ucdr_alignment>
 80118e0:	3008      	adds	r0, #8
 80118e2:	4420      	add	r0, r4
 80118e4:	bd38      	pop	{r3, r4, r5, pc}
 80118e6:	bf00      	nop

080118e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80118e8:	4800      	ldr	r0, [pc, #0]	; (80118ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 80118ea:	4770      	bx	lr
 80118ec:	2000062c 	.word	0x2000062c

080118f0 <_OmniEnc__cdr_serialize>:
 80118f0:	b3a8      	cbz	r0, 801195e <_OmniEnc__cdr_serialize+0x6e>
 80118f2:	b570      	push	{r4, r5, r6, lr}
 80118f4:	6806      	ldr	r6, [r0, #0]
 80118f6:	4604      	mov	r4, r0
 80118f8:	460d      	mov	r5, r1
 80118fa:	b36e      	cbz	r6, 8011958 <_OmniEnc__cdr_serialize+0x68>
 80118fc:	4630      	mov	r0, r6
 80118fe:	f7ee fcff 	bl	8000300 <strlen>
 8011902:	1c42      	adds	r2, r0, #1
 8011904:	4631      	mov	r1, r6
 8011906:	6060      	str	r0, [r4, #4]
 8011908:	4628      	mov	r0, r5
 801190a:	f001 fd7d 	bl	8013408 <ucdr_serialize_sequence_char>
 801190e:	4628      	mov	r0, r5
 8011910:	ed94 0b04 	vldr	d0, [r4, #16]
 8011914:	f001 fb1a 	bl	8012f4c <ucdr_serialize_double>
 8011918:	4628      	mov	r0, r5
 801191a:	ed94 0b06 	vldr	d0, [r4, #24]
 801191e:	f001 fb15 	bl	8012f4c <ucdr_serialize_double>
 8011922:	4628      	mov	r0, r5
 8011924:	ed94 0b08 	vldr	d0, [r4, #32]
 8011928:	f001 fb10 	bl	8012f4c <ucdr_serialize_double>
 801192c:	4628      	mov	r0, r5
 801192e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011932:	f001 fb0b 	bl	8012f4c <ucdr_serialize_double>
 8011936:	4628      	mov	r0, r5
 8011938:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 801193c:	f001 fb06 	bl	8012f4c <ucdr_serialize_double>
 8011940:	4628      	mov	r0, r5
 8011942:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8011946:	f001 fb01 	bl	8012f4c <ucdr_serialize_double>
 801194a:	4628      	mov	r0, r5
 801194c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8011950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011954:	f001 bafa 	b.w	8012f4c <ucdr_serialize_double>
 8011958:	4632      	mov	r2, r6
 801195a:	4630      	mov	r0, r6
 801195c:	e7d2      	b.n	8011904 <_OmniEnc__cdr_serialize+0x14>
 801195e:	4770      	bx	lr

08011960 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 8011960:	b570      	push	{r4, r5, r6, lr}
 8011962:	460c      	mov	r4, r1
 8011964:	4605      	mov	r5, r0
 8011966:	2104      	movs	r1, #4
 8011968:	4620      	mov	r0, r4
 801196a:	f001 fcdd 	bl	8013328 <ucdr_alignment>
 801196e:	686b      	ldr	r3, [r5, #4]
 8011970:	2108      	movs	r1, #8
 8011972:	4423      	add	r3, r4
 8011974:	f1c4 0408 	rsb	r4, r4, #8
 8011978:	3305      	adds	r3, #5
 801197a:	18c6      	adds	r6, r0, r3
 801197c:	4630      	mov	r0, r6
 801197e:	f001 fcd3 	bl	8013328 <ucdr_alignment>
 8011982:	2108      	movs	r1, #8
 8011984:	1845      	adds	r5, r0, r1
 8011986:	442e      	add	r6, r5
 8011988:	4630      	mov	r0, r6
 801198a:	f001 fccd 	bl	8013328 <ucdr_alignment>
 801198e:	2108      	movs	r1, #8
 8011990:	1845      	adds	r5, r0, r1
 8011992:	4435      	add	r5, r6
 8011994:	4628      	mov	r0, r5
 8011996:	f001 fcc7 	bl	8013328 <ucdr_alignment>
 801199a:	2108      	movs	r1, #8
 801199c:	4408      	add	r0, r1
 801199e:	4405      	add	r5, r0
 80119a0:	4628      	mov	r0, r5
 80119a2:	f001 fcc1 	bl	8013328 <ucdr_alignment>
 80119a6:	2108      	movs	r1, #8
 80119a8:	4408      	add	r0, r1
 80119aa:	1946      	adds	r6, r0, r5
 80119ac:	4630      	mov	r0, r6
 80119ae:	f001 fcbb 	bl	8013328 <ucdr_alignment>
 80119b2:	2108      	movs	r1, #8
 80119b4:	1845      	adds	r5, r0, r1
 80119b6:	4435      	add	r5, r6
 80119b8:	4628      	mov	r0, r5
 80119ba:	f001 fcb5 	bl	8013328 <ucdr_alignment>
 80119be:	2108      	movs	r1, #8
 80119c0:	4408      	add	r0, r1
 80119c2:	4405      	add	r5, r0
 80119c4:	4628      	mov	r0, r5
 80119c6:	f001 fcaf 	bl	8013328 <ucdr_alignment>
 80119ca:	4420      	add	r0, r4
 80119cc:	4428      	add	r0, r5
 80119ce:	bd70      	pop	{r4, r5, r6, pc}

080119d0 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 80119d0:	b108      	cbz	r0, 80119d6 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 80119d2:	f7ff bfc5 	b.w	8011960 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 80119d6:	4770      	bx	lr

080119d8 <_OmniEnc__get_serialized_size>:
 80119d8:	b110      	cbz	r0, 80119e0 <_OmniEnc__get_serialized_size+0x8>
 80119da:	2100      	movs	r1, #0
 80119dc:	f7ff bfc0 	b.w	8011960 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop

080119e4 <_OmniEnc__cdr_deserialize>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	460c      	mov	r4, r1
 80119e8:	b082      	sub	sp, #8
 80119ea:	b3a1      	cbz	r1, 8011a56 <_OmniEnc__cdr_deserialize+0x72>
 80119ec:	688e      	ldr	r6, [r1, #8]
 80119ee:	ab01      	add	r3, sp, #4
 80119f0:	6809      	ldr	r1, [r1, #0]
 80119f2:	4605      	mov	r5, r0
 80119f4:	4632      	mov	r2, r6
 80119f6:	f001 fd19 	bl	801342c <ucdr_deserialize_sequence_char>
 80119fa:	9b01      	ldr	r3, [sp, #4]
 80119fc:	bb38      	cbnz	r0, 8011a4e <_OmniEnc__cdr_deserialize+0x6a>
 80119fe:	429e      	cmp	r6, r3
 8011a00:	d32c      	bcc.n	8011a5c <_OmniEnc__cdr_deserialize+0x78>
 8011a02:	f104 0110 	add.w	r1, r4, #16
 8011a06:	4628      	mov	r0, r5
 8011a08:	f001 fb70 	bl	80130ec <ucdr_deserialize_double>
 8011a0c:	f104 0118 	add.w	r1, r4, #24
 8011a10:	4628      	mov	r0, r5
 8011a12:	f001 fb6b 	bl	80130ec <ucdr_deserialize_double>
 8011a16:	f104 0120 	add.w	r1, r4, #32
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f001 fb66 	bl	80130ec <ucdr_deserialize_double>
 8011a20:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011a24:	4628      	mov	r0, r5
 8011a26:	f001 fb61 	bl	80130ec <ucdr_deserialize_double>
 8011a2a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f001 fb5c 	bl	80130ec <ucdr_deserialize_double>
 8011a34:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f001 fb57 	bl	80130ec <ucdr_deserialize_double>
 8011a3e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011a42:	4628      	mov	r0, r5
 8011a44:	b002      	add	sp, #8
 8011a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a4a:	f001 bb4f 	b.w	80130ec <ucdr_deserialize_double>
 8011a4e:	b103      	cbz	r3, 8011a52 <_OmniEnc__cdr_deserialize+0x6e>
 8011a50:	3b01      	subs	r3, #1
 8011a52:	6063      	str	r3, [r4, #4]
 8011a54:	e7d5      	b.n	8011a02 <_OmniEnc__cdr_deserialize+0x1e>
 8011a56:	4608      	mov	r0, r1
 8011a58:	b002      	add	sp, #8
 8011a5a:	bd70      	pop	{r4, r5, r6, pc}
 8011a5c:	2101      	movs	r1, #1
 8011a5e:	75a8      	strb	r0, [r5, #22]
 8011a60:	7569      	strb	r1, [r5, #21]
 8011a62:	6060      	str	r0, [r4, #4]
 8011a64:	4628      	mov	r0, r5
 8011a66:	f001 fc77 	bl	8013358 <ucdr_align_to>
 8011a6a:	9901      	ldr	r1, [sp, #4]
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f001 fcab 	bl	80133c8 <ucdr_advance_buffer>
 8011a72:	e7c6      	b.n	8011a02 <_OmniEnc__cdr_deserialize+0x1e>

08011a74 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 8011a74:	b570      	push	{r4, r5, r6, lr}
 8011a76:	460c      	mov	r4, r1
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	2108      	movs	r1, #8
 8011a7e:	f104 0508 	add.w	r5, r4, #8
 8011a82:	4620      	mov	r0, r4
 8011a84:	701a      	strb	r2, [r3, #0]
 8011a86:	f1c4 0408 	rsb	r4, r4, #8
 8011a8a:	f001 fc4d 	bl	8013328 <ucdr_alignment>
 8011a8e:	4405      	add	r5, r0
 8011a90:	2108      	movs	r1, #8
 8011a92:	4628      	mov	r0, r5
 8011a94:	f001 fc48 	bl	8013328 <ucdr_alignment>
 8011a98:	2108      	movs	r1, #8
 8011a9a:	1846      	adds	r6, r0, r1
 8011a9c:	442e      	add	r6, r5
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f001 fc42 	bl	8013328 <ucdr_alignment>
 8011aa4:	2108      	movs	r1, #8
 8011aa6:	1845      	adds	r5, r0, r1
 8011aa8:	442e      	add	r6, r5
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f001 fc3c 	bl	8013328 <ucdr_alignment>
 8011ab0:	2108      	movs	r1, #8
 8011ab2:	4408      	add	r0, r1
 8011ab4:	4406      	add	r6, r0
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f001 fc36 	bl	8013328 <ucdr_alignment>
 8011abc:	2108      	movs	r1, #8
 8011abe:	1845      	adds	r5, r0, r1
 8011ac0:	4435      	add	r5, r6
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f001 fc30 	bl	8013328 <ucdr_alignment>
 8011ac8:	2108      	movs	r1, #8
 8011aca:	4408      	add	r0, r1
 8011acc:	4405      	add	r5, r0
 8011ace:	4628      	mov	r0, r5
 8011ad0:	f001 fc2a 	bl	8013328 <ucdr_alignment>
 8011ad4:	4420      	add	r0, r4
 8011ad6:	4428      	add	r0, r5
 8011ad8:	bd70      	pop	{r4, r5, r6, pc}
 8011ada:	bf00      	nop

08011adc <_OmniEnc__max_serialized_size>:
 8011adc:	b500      	push	{lr}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	2100      	movs	r1, #0
 8011ae2:	f10d 0007 	add.w	r0, sp, #7
 8011ae6:	f7ff ffc5 	bl	8011a74 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8011aea:	b003      	add	sp, #12
 8011aec:	f85d fb04 	ldr.w	pc, [sp], #4

08011af0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011af0:	4800      	ldr	r0, [pc, #0]	; (8011af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8011af2:	4770      	bx	lr
 8011af4:	20000654 	.word	0x20000654

08011af8 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011af8:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	b10a      	cbz	r2, 8011b02 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011afe:	4803      	ldr	r0, [pc, #12]	; (8011b0c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011b00:	4770      	bx	lr
 8011b02:	4a03      	ldr	r2, [pc, #12]	; (8011b10 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011b04:	4801      	ldr	r0, [pc, #4]	; (8011b0c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011b06:	6812      	ldr	r2, [r2, #0]
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	4770      	bx	lr
 8011b0c:	20000684 	.word	0x20000684
 8011b10:	200008b8 	.word	0x200008b8

08011b14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011b14:	4a02      	ldr	r2, [pc, #8]	; (8011b20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8011b16:	4b03      	ldr	r3, [pc, #12]	; (8011b24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8011b18:	6812      	ldr	r2, [r2, #0]
 8011b1a:	601a      	str	r2, [r3, #0]
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	200008b8 	.word	0x200008b8
 8011b24:	20000684 	.word	0x20000684

08011b28 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8011b28:	f005 bd82 	b.w	8017630 <manip_msgs__msg__Cmd__init>

08011b2c <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 8011b2c:	f005 bd84 	b.w	8017638 <manip_msgs__msg__Cmd__fini>

08011b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011b30:	4b04      	ldr	r3, [pc, #16]	; (8011b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	b10a      	cbz	r2, 8011b3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011b36:	4803      	ldr	r0, [pc, #12]	; (8011b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011b38:	4770      	bx	lr
 8011b3a:	4a03      	ldr	r2, [pc, #12]	; (8011b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011b3c:	4801      	ldr	r0, [pc, #4]	; (8011b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011b3e:	6812      	ldr	r2, [r2, #0]
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	4770      	bx	lr
 8011b44:	20000870 	.word	0x20000870
 8011b48:	200008bc 	.word	0x200008bc

08011b4c <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 8011b4c:	b570      	push	{r4, r5, r6, lr}
 8011b4e:	2108      	movs	r1, #8
 8011b50:	4604      	mov	r4, r0
 8011b52:	f001 fbe9 	bl	8013328 <ucdr_alignment>
 8011b56:	2108      	movs	r1, #8
 8011b58:	1866      	adds	r6, r4, r1
 8011b5a:	f1c4 0408 	rsb	r4, r4, #8
 8011b5e:	4406      	add	r6, r0
 8011b60:	4630      	mov	r0, r6
 8011b62:	f001 fbe1 	bl	8013328 <ucdr_alignment>
 8011b66:	2108      	movs	r1, #8
 8011b68:	1845      	adds	r5, r0, r1
 8011b6a:	442e      	add	r6, r5
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f001 fbdb 	bl	8013328 <ucdr_alignment>
 8011b72:	2108      	movs	r1, #8
 8011b74:	1845      	adds	r5, r0, r1
 8011b76:	4435      	add	r5, r6
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f001 fbd5 	bl	8013328 <ucdr_alignment>
 8011b7e:	2108      	movs	r1, #8
 8011b80:	4408      	add	r0, r1
 8011b82:	4405      	add	r5, r0
 8011b84:	4628      	mov	r0, r5
 8011b86:	f001 fbcf 	bl	8013328 <ucdr_alignment>
 8011b8a:	2108      	movs	r1, #8
 8011b8c:	4408      	add	r0, r1
 8011b8e:	1946      	adds	r6, r0, r5
 8011b90:	4630      	mov	r0, r6
 8011b92:	f001 fbc9 	bl	8013328 <ucdr_alignment>
 8011b96:	2108      	movs	r1, #8
 8011b98:	1845      	adds	r5, r0, r1
 8011b9a:	4435      	add	r5, r6
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	f001 fbc3 	bl	8013328 <ucdr_alignment>
 8011ba2:	2108      	movs	r1, #8
 8011ba4:	4408      	add	r0, r1
 8011ba6:	4405      	add	r5, r0
 8011ba8:	4628      	mov	r0, r5
 8011baa:	f001 fbbd 	bl	8013328 <ucdr_alignment>
 8011bae:	4420      	add	r0, r4
 8011bb0:	4428      	add	r0, r5
 8011bb2:	bd70      	pop	{r4, r5, r6, pc}

08011bb4 <get_serialized_size_manip_msgs__msg__Cmd>:
 8011bb4:	b110      	cbz	r0, 8011bbc <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8011bb6:	4608      	mov	r0, r1
 8011bb8:	f7ff bfc8 	b.w	8011b4c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop

08011bc0 <_Cmd__get_serialized_size>:
 8011bc0:	b110      	cbz	r0, 8011bc8 <_Cmd__get_serialized_size+0x8>
 8011bc2:	2000      	movs	r0, #0
 8011bc4:	f7ff bfc2 	b.w	8011b4c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop

08011bcc <_Cmd__cdr_deserialize>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	460c      	mov	r4, r1
 8011bd0:	b339      	cbz	r1, 8011c22 <_Cmd__cdr_deserialize+0x56>
 8011bd2:	4605      	mov	r5, r0
 8011bd4:	f001 f8f4 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011bd8:	f104 0108 	add.w	r1, r4, #8
 8011bdc:	4628      	mov	r0, r5
 8011bde:	f001 f8ef 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011be2:	f104 0110 	add.w	r1, r4, #16
 8011be6:	4628      	mov	r0, r5
 8011be8:	f001 f8ea 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011bec:	f104 0118 	add.w	r1, r4, #24
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	f001 f8e5 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011bf6:	f104 0120 	add.w	r1, r4, #32
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	f001 f8e0 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011c00:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011c04:	4628      	mov	r0, r5
 8011c06:	f001 f8db 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011c0a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011c0e:	4628      	mov	r0, r5
 8011c10:	f001 f8d6 	bl	8012dc0 <ucdr_deserialize_int64_t>
 8011c14:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011c18:	4628      	mov	r0, r5
 8011c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c1e:	f001 b8cf 	b.w	8012dc0 <ucdr_deserialize_int64_t>
 8011c22:	4608      	mov	r0, r1
 8011c24:	bd38      	pop	{r3, r4, r5, pc}
 8011c26:	bf00      	nop

08011c28 <_Cmd__cdr_serialize>:
 8011c28:	b360      	cbz	r0, 8011c84 <_Cmd__cdr_serialize+0x5c>
 8011c2a:	b570      	push	{r4, r5, r6, lr}
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	4604      	mov	r4, r0
 8011c30:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011c34:	4608      	mov	r0, r1
 8011c36:	f000 fff3 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011c40:	f000 ffee 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c44:	4628      	mov	r0, r5
 8011c46:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011c4a:	f000 ffe9 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c4e:	4628      	mov	r0, r5
 8011c50:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011c54:	f000 ffe4 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c58:	4628      	mov	r0, r5
 8011c5a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011c5e:	f000 ffdf 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c62:	4628      	mov	r0, r5
 8011c64:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8011c68:	f000 ffda 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011c72:	f000 ffd5 	bl	8012c20 <ucdr_serialize_int64_t>
 8011c76:	4628      	mov	r0, r5
 8011c78:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c80:	f000 bfce 	b.w	8012c20 <ucdr_serialize_int64_t>
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop

08011c88 <max_serialized_size_manip_msgs__msg__Cmd>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	460c      	mov	r4, r1
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	2108      	movs	r1, #8
 8011c90:	f104 0608 	add.w	r6, r4, #8
 8011c94:	7003      	strb	r3, [r0, #0]
 8011c96:	4620      	mov	r0, r4
 8011c98:	f1c4 0408 	rsb	r4, r4, #8
 8011c9c:	f001 fb44 	bl	8013328 <ucdr_alignment>
 8011ca0:	4406      	add	r6, r0
 8011ca2:	2108      	movs	r1, #8
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	f001 fb3f 	bl	8013328 <ucdr_alignment>
 8011caa:	2108      	movs	r1, #8
 8011cac:	1845      	adds	r5, r0, r1
 8011cae:	442e      	add	r6, r5
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f001 fb39 	bl	8013328 <ucdr_alignment>
 8011cb6:	2108      	movs	r1, #8
 8011cb8:	1845      	adds	r5, r0, r1
 8011cba:	4435      	add	r5, r6
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f001 fb33 	bl	8013328 <ucdr_alignment>
 8011cc2:	2108      	movs	r1, #8
 8011cc4:	4408      	add	r0, r1
 8011cc6:	4405      	add	r5, r0
 8011cc8:	4628      	mov	r0, r5
 8011cca:	f001 fb2d 	bl	8013328 <ucdr_alignment>
 8011cce:	2108      	movs	r1, #8
 8011cd0:	4408      	add	r0, r1
 8011cd2:	1946      	adds	r6, r0, r5
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	f001 fb27 	bl	8013328 <ucdr_alignment>
 8011cda:	2108      	movs	r1, #8
 8011cdc:	1845      	adds	r5, r0, r1
 8011cde:	4435      	add	r5, r6
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	f001 fb21 	bl	8013328 <ucdr_alignment>
 8011ce6:	2108      	movs	r1, #8
 8011ce8:	4408      	add	r0, r1
 8011cea:	4405      	add	r5, r0
 8011cec:	4628      	mov	r0, r5
 8011cee:	f001 fb1b 	bl	8013328 <ucdr_alignment>
 8011cf2:	4420      	add	r0, r4
 8011cf4:	4428      	add	r0, r5
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}

08011cf8 <_Cmd__max_serialized_size>:
 8011cf8:	b500      	push	{lr}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	f10d 0007 	add.w	r0, sp, #7
 8011d02:	f7ff ffc1 	bl	8011c88 <max_serialized_size_manip_msgs__msg__Cmd>
 8011d06:	b003      	add	sp, #12
 8011d08:	f85d fb04 	ldr.w	pc, [sp], #4

08011d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011d0c:	4800      	ldr	r0, [pc, #0]	; (8011d10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8011d0e:	4770      	bx	lr
 8011d10:	2000087c 	.word	0x2000087c

08011d14 <ucdr_serialize_bool>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	460d      	mov	r5, r1
 8011d18:	2101      	movs	r1, #1
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	f001 fab8 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011d20:	b148      	cbz	r0, 8011d36 <ucdr_serialize_bool+0x22>
 8011d22:	68a3      	ldr	r3, [r4, #8]
 8011d24:	2101      	movs	r1, #1
 8011d26:	701d      	strb	r5, [r3, #0]
 8011d28:	68a2      	ldr	r2, [r4, #8]
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	440a      	add	r2, r1
 8011d2e:	7561      	strb	r1, [r4, #21]
 8011d30:	440b      	add	r3, r1
 8011d32:	60a2      	str	r2, [r4, #8]
 8011d34:	6123      	str	r3, [r4, #16]
 8011d36:	7da0      	ldrb	r0, [r4, #22]
 8011d38:	f080 0001 	eor.w	r0, r0, #1
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}
 8011d3e:	bf00      	nop

08011d40 <ucdr_deserialize_bool>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	460d      	mov	r5, r1
 8011d44:	2101      	movs	r1, #1
 8011d46:	4604      	mov	r4, r0
 8011d48:	f001 faa2 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011d4c:	b160      	cbz	r0, 8011d68 <ucdr_deserialize_bool+0x28>
 8011d4e:	68a2      	ldr	r2, [r4, #8]
 8011d50:	2101      	movs	r1, #1
 8011d52:	6923      	ldr	r3, [r4, #16]
 8011d54:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011d58:	440b      	add	r3, r1
 8011d5a:	3800      	subs	r0, #0
 8011d5c:	bf18      	it	ne
 8011d5e:	2001      	movne	r0, #1
 8011d60:	7028      	strb	r0, [r5, #0]
 8011d62:	60a2      	str	r2, [r4, #8]
 8011d64:	6123      	str	r3, [r4, #16]
 8011d66:	7561      	strb	r1, [r4, #21]
 8011d68:	7da0      	ldrb	r0, [r4, #22]
 8011d6a:	f080 0001 	eor.w	r0, r0, #1
 8011d6e:	bd38      	pop	{r3, r4, r5, pc}

08011d70 <ucdr_serialize_uint8_t>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	460d      	mov	r5, r1
 8011d74:	2101      	movs	r1, #1
 8011d76:	4604      	mov	r4, r0
 8011d78:	f001 fa8a 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011d7c:	b148      	cbz	r0, 8011d92 <ucdr_serialize_uint8_t+0x22>
 8011d7e:	68a3      	ldr	r3, [r4, #8]
 8011d80:	2101      	movs	r1, #1
 8011d82:	701d      	strb	r5, [r3, #0]
 8011d84:	68a2      	ldr	r2, [r4, #8]
 8011d86:	6923      	ldr	r3, [r4, #16]
 8011d88:	440a      	add	r2, r1
 8011d8a:	7561      	strb	r1, [r4, #21]
 8011d8c:	440b      	add	r3, r1
 8011d8e:	60a2      	str	r2, [r4, #8]
 8011d90:	6123      	str	r3, [r4, #16]
 8011d92:	7da0      	ldrb	r0, [r4, #22]
 8011d94:	f080 0001 	eor.w	r0, r0, #1
 8011d98:	bd38      	pop	{r3, r4, r5, pc}
 8011d9a:	bf00      	nop

08011d9c <ucdr_deserialize_uint8_t>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	460d      	mov	r5, r1
 8011da0:	2101      	movs	r1, #1
 8011da2:	4604      	mov	r4, r0
 8011da4:	f001 fa74 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011da8:	b150      	cbz	r0, 8011dc0 <ucdr_deserialize_uint8_t+0x24>
 8011daa:	68a3      	ldr	r3, [r4, #8]
 8011dac:	2101      	movs	r1, #1
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	702b      	strb	r3, [r5, #0]
 8011db2:	68a2      	ldr	r2, [r4, #8]
 8011db4:	6923      	ldr	r3, [r4, #16]
 8011db6:	440a      	add	r2, r1
 8011db8:	7561      	strb	r1, [r4, #21]
 8011dba:	440b      	add	r3, r1
 8011dbc:	60a2      	str	r2, [r4, #8]
 8011dbe:	6123      	str	r3, [r4, #16]
 8011dc0:	7da0      	ldrb	r0, [r4, #22]
 8011dc2:	f080 0001 	eor.w	r0, r0, #1
 8011dc6:	bd38      	pop	{r3, r4, r5, pc}

08011dc8 <ucdr_serialize_uint16_t>:
 8011dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dcc:	460b      	mov	r3, r1
 8011dce:	b082      	sub	sp, #8
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	2102      	movs	r1, #2
 8011dd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011dd8:	f001 faae 	bl	8013338 <ucdr_buffer_alignment>
 8011ddc:	4601      	mov	r1, r0
 8011dde:	4620      	mov	r0, r4
 8011de0:	7d67      	ldrb	r7, [r4, #21]
 8011de2:	f001 faf1 	bl	80133c8 <ucdr_advance_buffer>
 8011de6:	2102      	movs	r1, #2
 8011de8:	4620      	mov	r0, r4
 8011dea:	f001 fa45 	bl	8013278 <ucdr_check_buffer_available_for>
 8011dee:	bb78      	cbnz	r0, 8011e50 <ucdr_serialize_uint16_t+0x88>
 8011df0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011df4:	42ab      	cmp	r3, r5
 8011df6:	d926      	bls.n	8011e46 <ucdr_serialize_uint16_t+0x7e>
 8011df8:	1b5e      	subs	r6, r3, r5
 8011dfa:	60a3      	str	r3, [r4, #8]
 8011dfc:	6923      	ldr	r3, [r4, #16]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f1c6 0802 	rsb	r8, r6, #2
 8011e04:	4433      	add	r3, r6
 8011e06:	4641      	mov	r1, r8
 8011e08:	6123      	str	r3, [r4, #16]
 8011e0a:	f001 fa41 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d03b      	beq.n	8011e8a <ucdr_serialize_uint16_t+0xc2>
 8011e12:	7d23      	ldrb	r3, [r4, #20]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d04a      	beq.n	8011eae <ucdr_serialize_uint16_t+0xe6>
 8011e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e1c:	702b      	strb	r3, [r5, #0]
 8011e1e:	2e00      	cmp	r6, #0
 8011e20:	d040      	beq.n	8011ea4 <ucdr_serialize_uint16_t+0xdc>
 8011e22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011e26:	706b      	strb	r3, [r5, #1]
 8011e28:	6923      	ldr	r3, [r4, #16]
 8011e2a:	2102      	movs	r1, #2
 8011e2c:	68a2      	ldr	r2, [r4, #8]
 8011e2e:	3302      	adds	r3, #2
 8011e30:	7da0      	ldrb	r0, [r4, #22]
 8011e32:	4442      	add	r2, r8
 8011e34:	7561      	strb	r1, [r4, #21]
 8011e36:	1b9e      	subs	r6, r3, r6
 8011e38:	f080 0001 	eor.w	r0, r0, #1
 8011e3c:	60a2      	str	r2, [r4, #8]
 8011e3e:	6126      	str	r6, [r4, #16]
 8011e40:	b002      	add	sp, #8
 8011e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e46:	2102      	movs	r1, #2
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f001 fa21 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011e4e:	b190      	cbz	r0, 8011e76 <ucdr_serialize_uint16_t+0xae>
 8011e50:	7d23      	ldrb	r3, [r4, #20]
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	68a3      	ldr	r3, [r4, #8]
 8011e56:	d014      	beq.n	8011e82 <ucdr_serialize_uint16_t+0xba>
 8011e58:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011e5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e60:	7019      	strb	r1, [r3, #0]
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	705a      	strb	r2, [r3, #1]
 8011e66:	2102      	movs	r1, #2
 8011e68:	68a2      	ldr	r2, [r4, #8]
 8011e6a:	6923      	ldr	r3, [r4, #16]
 8011e6c:	440a      	add	r2, r1
 8011e6e:	7561      	strb	r1, [r4, #21]
 8011e70:	440b      	add	r3, r1
 8011e72:	60a2      	str	r2, [r4, #8]
 8011e74:	6123      	str	r3, [r4, #16]
 8011e76:	7da0      	ldrb	r0, [r4, #22]
 8011e78:	f080 0001 	eor.w	r0, r0, #1
 8011e7c:	b002      	add	sp, #8
 8011e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011e86:	801a      	strh	r2, [r3, #0]
 8011e88:	e7ed      	b.n	8011e66 <ucdr_serialize_uint16_t+0x9e>
 8011e8a:	68a2      	ldr	r2, [r4, #8]
 8011e8c:	6923      	ldr	r3, [r4, #16]
 8011e8e:	7da0      	ldrb	r0, [r4, #22]
 8011e90:	1b92      	subs	r2, r2, r6
 8011e92:	1b9b      	subs	r3, r3, r6
 8011e94:	7567      	strb	r7, [r4, #21]
 8011e96:	f080 0001 	eor.w	r0, r0, #1
 8011e9a:	60a2      	str	r2, [r4, #8]
 8011e9c:	6123      	str	r3, [r4, #16]
 8011e9e:	b002      	add	sp, #8
 8011ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea4:	68a3      	ldr	r3, [r4, #8]
 8011ea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011eaa:	701a      	strb	r2, [r3, #0]
 8011eac:	e7bc      	b.n	8011e28 <ucdr_serialize_uint16_t+0x60>
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f10d 0506 	add.w	r5, sp, #6
 8011eb4:	4632      	mov	r2, r6
 8011eb6:	4629      	mov	r1, r5
 8011eb8:	f00f f869 	bl	8020f8e <memcpy>
 8011ebc:	4642      	mov	r2, r8
 8011ebe:	19a9      	adds	r1, r5, r6
 8011ec0:	68a0      	ldr	r0, [r4, #8]
 8011ec2:	f00f f864 	bl	8020f8e <memcpy>
 8011ec6:	e7af      	b.n	8011e28 <ucdr_serialize_uint16_t+0x60>

08011ec8 <ucdr_serialize_endian_uint16_t>:
 8011ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ecc:	4604      	mov	r4, r0
 8011ece:	b083      	sub	sp, #12
 8011ed0:	460d      	mov	r5, r1
 8011ed2:	2102      	movs	r1, #2
 8011ed4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011ed8:	f001 fa2e 	bl	8013338 <ucdr_buffer_alignment>
 8011edc:	4601      	mov	r1, r0
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011ee4:	f001 fa70 	bl	80133c8 <ucdr_advance_buffer>
 8011ee8:	2102      	movs	r1, #2
 8011eea:	4620      	mov	r0, r4
 8011eec:	f001 f9c4 	bl	8013278 <ucdr_check_buffer_available_for>
 8011ef0:	bb70      	cbnz	r0, 8011f50 <ucdr_serialize_endian_uint16_t+0x88>
 8011ef2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011ef6:	42be      	cmp	r6, r7
 8011ef8:	d925      	bls.n	8011f46 <ucdr_serialize_endian_uint16_t+0x7e>
 8011efa:	6923      	ldr	r3, [r4, #16]
 8011efc:	4620      	mov	r0, r4
 8011efe:	60a6      	str	r6, [r4, #8]
 8011f00:	1bf6      	subs	r6, r6, r7
 8011f02:	4433      	add	r3, r6
 8011f04:	f1c6 0902 	rsb	r9, r6, #2
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	4649      	mov	r1, r9
 8011f0c:	f001 f9c0 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d039      	beq.n	8011f88 <ucdr_serialize_endian_uint16_t+0xc0>
 8011f14:	2d01      	cmp	r5, #1
 8011f16:	d04a      	beq.n	8011fae <ucdr_serialize_endian_uint16_t+0xe6>
 8011f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f1c:	703b      	strb	r3, [r7, #0]
 8011f1e:	2e00      	cmp	r6, #0
 8011f20:	d040      	beq.n	8011fa4 <ucdr_serialize_endian_uint16_t+0xdc>
 8011f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f26:	707b      	strb	r3, [r7, #1]
 8011f28:	6923      	ldr	r3, [r4, #16]
 8011f2a:	2102      	movs	r1, #2
 8011f2c:	68a2      	ldr	r2, [r4, #8]
 8011f2e:	7da0      	ldrb	r0, [r4, #22]
 8011f30:	3302      	adds	r3, #2
 8011f32:	444a      	add	r2, r9
 8011f34:	7561      	strb	r1, [r4, #21]
 8011f36:	1b9b      	subs	r3, r3, r6
 8011f38:	f080 0001 	eor.w	r0, r0, #1
 8011f3c:	60a2      	str	r2, [r4, #8]
 8011f3e:	6123      	str	r3, [r4, #16]
 8011f40:	b003      	add	sp, #12
 8011f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f46:	2102      	movs	r1, #2
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f001 f9a1 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8011f4e:	b188      	cbz	r0, 8011f74 <ucdr_serialize_endian_uint16_t+0xac>
 8011f50:	2d01      	cmp	r5, #1
 8011f52:	68a3      	ldr	r3, [r4, #8]
 8011f54:	d014      	beq.n	8011f80 <ucdr_serialize_endian_uint16_t+0xb8>
 8011f56:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011f5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f5e:	7019      	strb	r1, [r3, #0]
 8011f60:	68a3      	ldr	r3, [r4, #8]
 8011f62:	705a      	strb	r2, [r3, #1]
 8011f64:	2102      	movs	r1, #2
 8011f66:	68a2      	ldr	r2, [r4, #8]
 8011f68:	6923      	ldr	r3, [r4, #16]
 8011f6a:	440a      	add	r2, r1
 8011f6c:	7561      	strb	r1, [r4, #21]
 8011f6e:	440b      	add	r3, r1
 8011f70:	60a2      	str	r2, [r4, #8]
 8011f72:	6123      	str	r3, [r4, #16]
 8011f74:	7da0      	ldrb	r0, [r4, #22]
 8011f76:	f080 0001 	eor.w	r0, r0, #1
 8011f7a:	b003      	add	sp, #12
 8011f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011f84:	801a      	strh	r2, [r3, #0]
 8011f86:	e7ed      	b.n	8011f64 <ucdr_serialize_endian_uint16_t+0x9c>
 8011f88:	68a2      	ldr	r2, [r4, #8]
 8011f8a:	6923      	ldr	r3, [r4, #16]
 8011f8c:	7da0      	ldrb	r0, [r4, #22]
 8011f8e:	1b92      	subs	r2, r2, r6
 8011f90:	1b9b      	subs	r3, r3, r6
 8011f92:	f884 8015 	strb.w	r8, [r4, #21]
 8011f96:	f080 0001 	eor.w	r0, r0, #1
 8011f9a:	60a2      	str	r2, [r4, #8]
 8011f9c:	6123      	str	r3, [r4, #16]
 8011f9e:	b003      	add	sp, #12
 8011fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fa4:	68a3      	ldr	r3, [r4, #8]
 8011fa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011faa:	701a      	strb	r2, [r3, #0]
 8011fac:	e7bc      	b.n	8011f28 <ucdr_serialize_endian_uint16_t+0x60>
 8011fae:	f10d 0506 	add.w	r5, sp, #6
 8011fb2:	4632      	mov	r2, r6
 8011fb4:	4638      	mov	r0, r7
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	f00e ffe9 	bl	8020f8e <memcpy>
 8011fbc:	464a      	mov	r2, r9
 8011fbe:	19a9      	adds	r1, r5, r6
 8011fc0:	68a0      	ldr	r0, [r4, #8]
 8011fc2:	f00e ffe4 	bl	8020f8e <memcpy>
 8011fc6:	e7af      	b.n	8011f28 <ucdr_serialize_endian_uint16_t+0x60>

08011fc8 <ucdr_deserialize_uint16_t>:
 8011fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fcc:	4604      	mov	r4, r0
 8011fce:	460d      	mov	r5, r1
 8011fd0:	2102      	movs	r1, #2
 8011fd2:	f001 f9b1 	bl	8013338 <ucdr_buffer_alignment>
 8011fd6:	4601      	mov	r1, r0
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011fde:	f001 f9f3 	bl	80133c8 <ucdr_advance_buffer>
 8011fe2:	2102      	movs	r1, #2
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f001 f947 	bl	8013278 <ucdr_check_buffer_available_for>
 8011fea:	bb60      	cbnz	r0, 8012046 <ucdr_deserialize_uint16_t+0x7e>
 8011fec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011ff0:	42be      	cmp	r6, r7
 8011ff2:	d923      	bls.n	801203c <ucdr_deserialize_uint16_t+0x74>
 8011ff4:	6923      	ldr	r3, [r4, #16]
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	60a6      	str	r6, [r4, #8]
 8011ffa:	1bf6      	subs	r6, r6, r7
 8011ffc:	4433      	add	r3, r6
 8011ffe:	f1c6 0902 	rsb	r9, r6, #2
 8012002:	6123      	str	r3, [r4, #16]
 8012004:	4649      	mov	r1, r9
 8012006:	f001 f943 	bl	8013290 <ucdr_check_final_buffer_behavior>
 801200a:	2800      	cmp	r0, #0
 801200c:	d034      	beq.n	8012078 <ucdr_deserialize_uint16_t+0xb0>
 801200e:	7d23      	ldrb	r3, [r4, #20]
 8012010:	2b01      	cmp	r3, #1
 8012012:	d042      	beq.n	801209a <ucdr_deserialize_uint16_t+0xd2>
 8012014:	787b      	ldrb	r3, [r7, #1]
 8012016:	702b      	strb	r3, [r5, #0]
 8012018:	2e00      	cmp	r6, #0
 801201a:	d03a      	beq.n	8012092 <ucdr_deserialize_uint16_t+0xca>
 801201c:	783b      	ldrb	r3, [r7, #0]
 801201e:	706b      	strb	r3, [r5, #1]
 8012020:	6923      	ldr	r3, [r4, #16]
 8012022:	2102      	movs	r1, #2
 8012024:	68a2      	ldr	r2, [r4, #8]
 8012026:	3302      	adds	r3, #2
 8012028:	7da0      	ldrb	r0, [r4, #22]
 801202a:	444a      	add	r2, r9
 801202c:	7561      	strb	r1, [r4, #21]
 801202e:	1b9b      	subs	r3, r3, r6
 8012030:	f080 0001 	eor.w	r0, r0, #1
 8012034:	60a2      	str	r2, [r4, #8]
 8012036:	6123      	str	r3, [r4, #16]
 8012038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203c:	2102      	movs	r1, #2
 801203e:	4620      	mov	r0, r4
 8012040:	f001 f926 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012044:	b180      	cbz	r0, 8012068 <ucdr_deserialize_uint16_t+0xa0>
 8012046:	7d23      	ldrb	r3, [r4, #20]
 8012048:	2b01      	cmp	r3, #1
 801204a:	68a3      	ldr	r3, [r4, #8]
 801204c:	d011      	beq.n	8012072 <ucdr_deserialize_uint16_t+0xaa>
 801204e:	785b      	ldrb	r3, [r3, #1]
 8012050:	702b      	strb	r3, [r5, #0]
 8012052:	68a3      	ldr	r3, [r4, #8]
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	706b      	strb	r3, [r5, #1]
 8012058:	2102      	movs	r1, #2
 801205a:	68a2      	ldr	r2, [r4, #8]
 801205c:	6923      	ldr	r3, [r4, #16]
 801205e:	440a      	add	r2, r1
 8012060:	7561      	strb	r1, [r4, #21]
 8012062:	440b      	add	r3, r1
 8012064:	60a2      	str	r2, [r4, #8]
 8012066:	6123      	str	r3, [r4, #16]
 8012068:	7da0      	ldrb	r0, [r4, #22]
 801206a:	f080 0001 	eor.w	r0, r0, #1
 801206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	802b      	strh	r3, [r5, #0]
 8012076:	e7ef      	b.n	8012058 <ucdr_deserialize_uint16_t+0x90>
 8012078:	68a2      	ldr	r2, [r4, #8]
 801207a:	6923      	ldr	r3, [r4, #16]
 801207c:	1b92      	subs	r2, r2, r6
 801207e:	7da0      	ldrb	r0, [r4, #22]
 8012080:	1b9b      	subs	r3, r3, r6
 8012082:	f884 8015 	strb.w	r8, [r4, #21]
 8012086:	f080 0001 	eor.w	r0, r0, #1
 801208a:	60a2      	str	r2, [r4, #8]
 801208c:	6123      	str	r3, [r4, #16]
 801208e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012092:	68a3      	ldr	r3, [r4, #8]
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	706b      	strb	r3, [r5, #1]
 8012098:	e7c2      	b.n	8012020 <ucdr_deserialize_uint16_t+0x58>
 801209a:	4639      	mov	r1, r7
 801209c:	4632      	mov	r2, r6
 801209e:	4628      	mov	r0, r5
 80120a0:	f00e ff75 	bl	8020f8e <memcpy>
 80120a4:	464a      	mov	r2, r9
 80120a6:	19a8      	adds	r0, r5, r6
 80120a8:	68a1      	ldr	r1, [r4, #8]
 80120aa:	f00e ff70 	bl	8020f8e <memcpy>
 80120ae:	e7b7      	b.n	8012020 <ucdr_deserialize_uint16_t+0x58>

080120b0 <ucdr_deserialize_endian_uint16_t>:
 80120b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b4:	4604      	mov	r4, r0
 80120b6:	460e      	mov	r6, r1
 80120b8:	2102      	movs	r1, #2
 80120ba:	4615      	mov	r5, r2
 80120bc:	f001 f93c 	bl	8013338 <ucdr_buffer_alignment>
 80120c0:	4601      	mov	r1, r0
 80120c2:	4620      	mov	r0, r4
 80120c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80120c8:	f001 f97e 	bl	80133c8 <ucdr_advance_buffer>
 80120cc:	2102      	movs	r1, #2
 80120ce:	4620      	mov	r0, r4
 80120d0:	f001 f8d2 	bl	8013278 <ucdr_check_buffer_available_for>
 80120d4:	bb70      	cbnz	r0, 8012134 <ucdr_deserialize_endian_uint16_t+0x84>
 80120d6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80120da:	454f      	cmp	r7, r9
 80120dc:	d925      	bls.n	801212a <ucdr_deserialize_endian_uint16_t+0x7a>
 80120de:	6923      	ldr	r3, [r4, #16]
 80120e0:	4620      	mov	r0, r4
 80120e2:	60a7      	str	r7, [r4, #8]
 80120e4:	eba7 0709 	sub.w	r7, r7, r9
 80120e8:	443b      	add	r3, r7
 80120ea:	f1c7 0a02 	rsb	sl, r7, #2
 80120ee:	6123      	str	r3, [r4, #16]
 80120f0:	4651      	mov	r1, sl
 80120f2:	f001 f8cd 	bl	8013290 <ucdr_check_final_buffer_behavior>
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d034      	beq.n	8012164 <ucdr_deserialize_endian_uint16_t+0xb4>
 80120fa:	2e01      	cmp	r6, #1
 80120fc:	d043      	beq.n	8012186 <ucdr_deserialize_endian_uint16_t+0xd6>
 80120fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012102:	702b      	strb	r3, [r5, #0]
 8012104:	2f00      	cmp	r7, #0
 8012106:	d03a      	beq.n	801217e <ucdr_deserialize_endian_uint16_t+0xce>
 8012108:	f899 3000 	ldrb.w	r3, [r9]
 801210c:	706b      	strb	r3, [r5, #1]
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	2102      	movs	r1, #2
 8012112:	68a2      	ldr	r2, [r4, #8]
 8012114:	3302      	adds	r3, #2
 8012116:	7da0      	ldrb	r0, [r4, #22]
 8012118:	4452      	add	r2, sl
 801211a:	7561      	strb	r1, [r4, #21]
 801211c:	1bdb      	subs	r3, r3, r7
 801211e:	f080 0001 	eor.w	r0, r0, #1
 8012122:	60a2      	str	r2, [r4, #8]
 8012124:	6123      	str	r3, [r4, #16]
 8012126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212a:	2102      	movs	r1, #2
 801212c:	4620      	mov	r0, r4
 801212e:	f001 f8af 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012132:	b178      	cbz	r0, 8012154 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012134:	2e01      	cmp	r6, #1
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	d011      	beq.n	801215e <ucdr_deserialize_endian_uint16_t+0xae>
 801213a:	785b      	ldrb	r3, [r3, #1]
 801213c:	702b      	strb	r3, [r5, #0]
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	706b      	strb	r3, [r5, #1]
 8012144:	2102      	movs	r1, #2
 8012146:	68a2      	ldr	r2, [r4, #8]
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	440a      	add	r2, r1
 801214c:	7561      	strb	r1, [r4, #21]
 801214e:	440b      	add	r3, r1
 8012150:	60a2      	str	r2, [r4, #8]
 8012152:	6123      	str	r3, [r4, #16]
 8012154:	7da0      	ldrb	r0, [r4, #22]
 8012156:	f080 0001 	eor.w	r0, r0, #1
 801215a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801215e:	881b      	ldrh	r3, [r3, #0]
 8012160:	802b      	strh	r3, [r5, #0]
 8012162:	e7ef      	b.n	8012144 <ucdr_deserialize_endian_uint16_t+0x94>
 8012164:	68a2      	ldr	r2, [r4, #8]
 8012166:	6923      	ldr	r3, [r4, #16]
 8012168:	1bd2      	subs	r2, r2, r7
 801216a:	7da0      	ldrb	r0, [r4, #22]
 801216c:	1bdb      	subs	r3, r3, r7
 801216e:	f884 8015 	strb.w	r8, [r4, #21]
 8012172:	f080 0001 	eor.w	r0, r0, #1
 8012176:	60a2      	str	r2, [r4, #8]
 8012178:	6123      	str	r3, [r4, #16]
 801217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801217e:	68a3      	ldr	r3, [r4, #8]
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	706b      	strb	r3, [r5, #1]
 8012184:	e7c3      	b.n	801210e <ucdr_deserialize_endian_uint16_t+0x5e>
 8012186:	4649      	mov	r1, r9
 8012188:	463a      	mov	r2, r7
 801218a:	4628      	mov	r0, r5
 801218c:	f00e feff 	bl	8020f8e <memcpy>
 8012190:	4652      	mov	r2, sl
 8012192:	19e8      	adds	r0, r5, r7
 8012194:	68a1      	ldr	r1, [r4, #8]
 8012196:	f00e fefa 	bl	8020f8e <memcpy>
 801219a:	e7b8      	b.n	801210e <ucdr_deserialize_endian_uint16_t+0x5e>

0801219c <ucdr_serialize_uint32_t>:
 801219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a0:	b082      	sub	sp, #8
 80121a2:	4604      	mov	r4, r0
 80121a4:	9101      	str	r1, [sp, #4]
 80121a6:	2104      	movs	r1, #4
 80121a8:	f001 f8c6 	bl	8013338 <ucdr_buffer_alignment>
 80121ac:	4601      	mov	r1, r0
 80121ae:	4620      	mov	r0, r4
 80121b0:	7d67      	ldrb	r7, [r4, #21]
 80121b2:	f001 f909 	bl	80133c8 <ucdr_advance_buffer>
 80121b6:	2104      	movs	r1, #4
 80121b8:	4620      	mov	r0, r4
 80121ba:	f001 f85d 	bl	8013278 <ucdr_check_buffer_available_for>
 80121be:	2800      	cmp	r0, #0
 80121c0:	d139      	bne.n	8012236 <ucdr_serialize_uint32_t+0x9a>
 80121c2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80121c6:	42ab      	cmp	r3, r5
 80121c8:	d930      	bls.n	801222c <ucdr_serialize_uint32_t+0x90>
 80121ca:	1b5e      	subs	r6, r3, r5
 80121cc:	60a3      	str	r3, [r4, #8]
 80121ce:	6923      	ldr	r3, [r4, #16]
 80121d0:	4620      	mov	r0, r4
 80121d2:	f1c6 0804 	rsb	r8, r6, #4
 80121d6:	4433      	add	r3, r6
 80121d8:	4641      	mov	r1, r8
 80121da:	6123      	str	r3, [r4, #16]
 80121dc:	f001 f858 	bl	8013290 <ucdr_check_final_buffer_behavior>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d04c      	beq.n	801227e <ucdr_serialize_uint32_t+0xe2>
 80121e4:	7d23      	ldrb	r3, [r4, #20]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d063      	beq.n	80122b2 <ucdr_serialize_uint32_t+0x116>
 80121ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80121ee:	702b      	strb	r3, [r5, #0]
 80121f0:	2e00      	cmp	r6, #0
 80121f2:	d051      	beq.n	8012298 <ucdr_serialize_uint32_t+0xfc>
 80121f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80121f8:	2e01      	cmp	r6, #1
 80121fa:	706b      	strb	r3, [r5, #1]
 80121fc:	d050      	beq.n	80122a0 <ucdr_serialize_uint32_t+0x104>
 80121fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012202:	2e02      	cmp	r6, #2
 8012204:	70ab      	strb	r3, [r5, #2]
 8012206:	d04f      	beq.n	80122a8 <ucdr_serialize_uint32_t+0x10c>
 8012208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801220c:	70eb      	strb	r3, [r5, #3]
 801220e:	6923      	ldr	r3, [r4, #16]
 8012210:	2104      	movs	r1, #4
 8012212:	68a2      	ldr	r2, [r4, #8]
 8012214:	3304      	adds	r3, #4
 8012216:	7da0      	ldrb	r0, [r4, #22]
 8012218:	4442      	add	r2, r8
 801221a:	7561      	strb	r1, [r4, #21]
 801221c:	1b9e      	subs	r6, r3, r6
 801221e:	f080 0001 	eor.w	r0, r0, #1
 8012222:	60a2      	str	r2, [r4, #8]
 8012224:	6126      	str	r6, [r4, #16]
 8012226:	b002      	add	sp, #8
 8012228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801222c:	2104      	movs	r1, #4
 801222e:	4620      	mov	r0, r4
 8012230:	f001 f82e 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012234:	b1d0      	cbz	r0, 801226c <ucdr_serialize_uint32_t+0xd0>
 8012236:	7d23      	ldrb	r3, [r4, #20]
 8012238:	2b01      	cmp	r3, #1
 801223a:	68a3      	ldr	r3, [r4, #8]
 801223c:	d01c      	beq.n	8012278 <ucdr_serialize_uint32_t+0xdc>
 801223e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012242:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012246:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801224a:	7018      	strb	r0, [r3, #0]
 801224c:	68a3      	ldr	r3, [r4, #8]
 801224e:	705a      	strb	r2, [r3, #1]
 8012250:	68a3      	ldr	r3, [r4, #8]
 8012252:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012256:	7099      	strb	r1, [r3, #2]
 8012258:	68a3      	ldr	r3, [r4, #8]
 801225a:	70da      	strb	r2, [r3, #3]
 801225c:	2104      	movs	r1, #4
 801225e:	68a2      	ldr	r2, [r4, #8]
 8012260:	6923      	ldr	r3, [r4, #16]
 8012262:	440a      	add	r2, r1
 8012264:	7561      	strb	r1, [r4, #21]
 8012266:	440b      	add	r3, r1
 8012268:	60a2      	str	r2, [r4, #8]
 801226a:	6123      	str	r3, [r4, #16]
 801226c:	7da0      	ldrb	r0, [r4, #22]
 801226e:	f080 0001 	eor.w	r0, r0, #1
 8012272:	b002      	add	sp, #8
 8012274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012278:	9a01      	ldr	r2, [sp, #4]
 801227a:	601a      	str	r2, [r3, #0]
 801227c:	e7ee      	b.n	801225c <ucdr_serialize_uint32_t+0xc0>
 801227e:	68a2      	ldr	r2, [r4, #8]
 8012280:	6923      	ldr	r3, [r4, #16]
 8012282:	7da0      	ldrb	r0, [r4, #22]
 8012284:	1b92      	subs	r2, r2, r6
 8012286:	1b9b      	subs	r3, r3, r6
 8012288:	7567      	strb	r7, [r4, #21]
 801228a:	f080 0001 	eor.w	r0, r0, #1
 801228e:	60a2      	str	r2, [r4, #8]
 8012290:	6123      	str	r3, [r4, #16]
 8012292:	b002      	add	sp, #8
 8012294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012298:	68a3      	ldr	r3, [r4, #8]
 801229a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801229e:	701a      	strb	r2, [r3, #0]
 80122a0:	68a3      	ldr	r3, [r4, #8]
 80122a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80122a6:	701a      	strb	r2, [r3, #0]
 80122a8:	68a3      	ldr	r3, [r4, #8]
 80122aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80122ae:	701a      	strb	r2, [r3, #0]
 80122b0:	e7ad      	b.n	801220e <ucdr_serialize_uint32_t+0x72>
 80122b2:	4628      	mov	r0, r5
 80122b4:	ad01      	add	r5, sp, #4
 80122b6:	4632      	mov	r2, r6
 80122b8:	4629      	mov	r1, r5
 80122ba:	f00e fe68 	bl	8020f8e <memcpy>
 80122be:	4642      	mov	r2, r8
 80122c0:	19a9      	adds	r1, r5, r6
 80122c2:	68a0      	ldr	r0, [r4, #8]
 80122c4:	f00e fe63 	bl	8020f8e <memcpy>
 80122c8:	e7a1      	b.n	801220e <ucdr_serialize_uint32_t+0x72>
 80122ca:	bf00      	nop

080122cc <ucdr_serialize_endian_uint32_t>:
 80122cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122d0:	4604      	mov	r4, r0
 80122d2:	b083      	sub	sp, #12
 80122d4:	460d      	mov	r5, r1
 80122d6:	2104      	movs	r1, #4
 80122d8:	9201      	str	r2, [sp, #4]
 80122da:	f001 f82d 	bl	8013338 <ucdr_buffer_alignment>
 80122de:	4601      	mov	r1, r0
 80122e0:	4620      	mov	r0, r4
 80122e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80122e6:	f001 f86f 	bl	80133c8 <ucdr_advance_buffer>
 80122ea:	2104      	movs	r1, #4
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 ffc3 	bl	8013278 <ucdr_check_buffer_available_for>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d138      	bne.n	8012368 <ucdr_serialize_endian_uint32_t+0x9c>
 80122f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80122fa:	42b7      	cmp	r7, r6
 80122fc:	d92f      	bls.n	801235e <ucdr_serialize_endian_uint32_t+0x92>
 80122fe:	6923      	ldr	r3, [r4, #16]
 8012300:	4620      	mov	r0, r4
 8012302:	60a7      	str	r7, [r4, #8]
 8012304:	1bbf      	subs	r7, r7, r6
 8012306:	443b      	add	r3, r7
 8012308:	f1c7 0904 	rsb	r9, r7, #4
 801230c:	6123      	str	r3, [r4, #16]
 801230e:	4649      	mov	r1, r9
 8012310:	f000 ffbe 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012314:	2800      	cmp	r0, #0
 8012316:	d04a      	beq.n	80123ae <ucdr_serialize_endian_uint32_t+0xe2>
 8012318:	2d01      	cmp	r5, #1
 801231a:	d063      	beq.n	80123e4 <ucdr_serialize_endian_uint32_t+0x118>
 801231c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012320:	7033      	strb	r3, [r6, #0]
 8012322:	2f00      	cmp	r7, #0
 8012324:	d051      	beq.n	80123ca <ucdr_serialize_endian_uint32_t+0xfe>
 8012326:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801232a:	2f01      	cmp	r7, #1
 801232c:	7073      	strb	r3, [r6, #1]
 801232e:	d050      	beq.n	80123d2 <ucdr_serialize_endian_uint32_t+0x106>
 8012330:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012334:	2f02      	cmp	r7, #2
 8012336:	70b3      	strb	r3, [r6, #2]
 8012338:	d04f      	beq.n	80123da <ucdr_serialize_endian_uint32_t+0x10e>
 801233a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801233e:	70f3      	strb	r3, [r6, #3]
 8012340:	6923      	ldr	r3, [r4, #16]
 8012342:	2104      	movs	r1, #4
 8012344:	68a2      	ldr	r2, [r4, #8]
 8012346:	7da0      	ldrb	r0, [r4, #22]
 8012348:	3304      	adds	r3, #4
 801234a:	444a      	add	r2, r9
 801234c:	7561      	strb	r1, [r4, #21]
 801234e:	1bdb      	subs	r3, r3, r7
 8012350:	f080 0001 	eor.w	r0, r0, #1
 8012354:	60a2      	str	r2, [r4, #8]
 8012356:	6123      	str	r3, [r4, #16]
 8012358:	b003      	add	sp, #12
 801235a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801235e:	2104      	movs	r1, #4
 8012360:	4620      	mov	r0, r4
 8012362:	f000 ff95 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012366:	b1c8      	cbz	r0, 801239c <ucdr_serialize_endian_uint32_t+0xd0>
 8012368:	2d01      	cmp	r5, #1
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	d01c      	beq.n	80123a8 <ucdr_serialize_endian_uint32_t+0xdc>
 801236e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012372:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012376:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801237a:	7018      	strb	r0, [r3, #0]
 801237c:	68a3      	ldr	r3, [r4, #8]
 801237e:	705a      	strb	r2, [r3, #1]
 8012380:	68a3      	ldr	r3, [r4, #8]
 8012382:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012386:	7099      	strb	r1, [r3, #2]
 8012388:	68a3      	ldr	r3, [r4, #8]
 801238a:	70da      	strb	r2, [r3, #3]
 801238c:	2104      	movs	r1, #4
 801238e:	68a2      	ldr	r2, [r4, #8]
 8012390:	6923      	ldr	r3, [r4, #16]
 8012392:	440a      	add	r2, r1
 8012394:	7561      	strb	r1, [r4, #21]
 8012396:	440b      	add	r3, r1
 8012398:	60a2      	str	r2, [r4, #8]
 801239a:	6123      	str	r3, [r4, #16]
 801239c:	7da0      	ldrb	r0, [r4, #22]
 801239e:	f080 0001 	eor.w	r0, r0, #1
 80123a2:	b003      	add	sp, #12
 80123a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123a8:	9a01      	ldr	r2, [sp, #4]
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	e7ee      	b.n	801238c <ucdr_serialize_endian_uint32_t+0xc0>
 80123ae:	68a2      	ldr	r2, [r4, #8]
 80123b0:	6923      	ldr	r3, [r4, #16]
 80123b2:	7da0      	ldrb	r0, [r4, #22]
 80123b4:	1bd2      	subs	r2, r2, r7
 80123b6:	1bdb      	subs	r3, r3, r7
 80123b8:	f884 8015 	strb.w	r8, [r4, #21]
 80123bc:	f080 0001 	eor.w	r0, r0, #1
 80123c0:	60a2      	str	r2, [r4, #8]
 80123c2:	6123      	str	r3, [r4, #16]
 80123c4:	b003      	add	sp, #12
 80123c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123ca:	68a3      	ldr	r3, [r4, #8]
 80123cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80123d0:	701a      	strb	r2, [r3, #0]
 80123d2:	68a3      	ldr	r3, [r4, #8]
 80123d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80123d8:	701a      	strb	r2, [r3, #0]
 80123da:	68a3      	ldr	r3, [r4, #8]
 80123dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80123e0:	701a      	strb	r2, [r3, #0]
 80123e2:	e7ad      	b.n	8012340 <ucdr_serialize_endian_uint32_t+0x74>
 80123e4:	ad01      	add	r5, sp, #4
 80123e6:	463a      	mov	r2, r7
 80123e8:	4630      	mov	r0, r6
 80123ea:	4629      	mov	r1, r5
 80123ec:	f00e fdcf 	bl	8020f8e <memcpy>
 80123f0:	464a      	mov	r2, r9
 80123f2:	19e9      	adds	r1, r5, r7
 80123f4:	68a0      	ldr	r0, [r4, #8]
 80123f6:	f00e fdca 	bl	8020f8e <memcpy>
 80123fa:	e7a1      	b.n	8012340 <ucdr_serialize_endian_uint32_t+0x74>

080123fc <ucdr_deserialize_uint32_t>:
 80123fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012400:	4604      	mov	r4, r0
 8012402:	460d      	mov	r5, r1
 8012404:	2104      	movs	r1, #4
 8012406:	f000 ff97 	bl	8013338 <ucdr_buffer_alignment>
 801240a:	4601      	mov	r1, r0
 801240c:	4620      	mov	r0, r4
 801240e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012412:	f000 ffd9 	bl	80133c8 <ucdr_advance_buffer>
 8012416:	2104      	movs	r1, #4
 8012418:	4620      	mov	r0, r4
 801241a:	f000 ff2d 	bl	8013278 <ucdr_check_buffer_available_for>
 801241e:	2800      	cmp	r0, #0
 8012420:	d138      	bne.n	8012494 <ucdr_deserialize_uint32_t+0x98>
 8012422:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012426:	42b7      	cmp	r7, r6
 8012428:	d92f      	bls.n	801248a <ucdr_deserialize_uint32_t+0x8e>
 801242a:	6923      	ldr	r3, [r4, #16]
 801242c:	4620      	mov	r0, r4
 801242e:	60a7      	str	r7, [r4, #8]
 8012430:	1bbf      	subs	r7, r7, r6
 8012432:	443b      	add	r3, r7
 8012434:	f1c7 0904 	rsb	r9, r7, #4
 8012438:	6123      	str	r3, [r4, #16]
 801243a:	4649      	mov	r1, r9
 801243c:	f000 ff28 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012440:	2800      	cmp	r0, #0
 8012442:	d046      	beq.n	80124d2 <ucdr_deserialize_uint32_t+0xd6>
 8012444:	7d23      	ldrb	r3, [r4, #20]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d05c      	beq.n	8012504 <ucdr_deserialize_uint32_t+0x108>
 801244a:	78f3      	ldrb	r3, [r6, #3]
 801244c:	702b      	strb	r3, [r5, #0]
 801244e:	2f00      	cmp	r7, #0
 8012450:	d04c      	beq.n	80124ec <ucdr_deserialize_uint32_t+0xf0>
 8012452:	78b3      	ldrb	r3, [r6, #2]
 8012454:	2f01      	cmp	r7, #1
 8012456:	706b      	strb	r3, [r5, #1]
 8012458:	f105 0302 	add.w	r3, r5, #2
 801245c:	d04a      	beq.n	80124f4 <ucdr_deserialize_uint32_t+0xf8>
 801245e:	7873      	ldrb	r3, [r6, #1]
 8012460:	2f02      	cmp	r7, #2
 8012462:	70ab      	strb	r3, [r5, #2]
 8012464:	f105 0303 	add.w	r3, r5, #3
 8012468:	d048      	beq.n	80124fc <ucdr_deserialize_uint32_t+0x100>
 801246a:	7833      	ldrb	r3, [r6, #0]
 801246c:	70eb      	strb	r3, [r5, #3]
 801246e:	6923      	ldr	r3, [r4, #16]
 8012470:	2104      	movs	r1, #4
 8012472:	68a2      	ldr	r2, [r4, #8]
 8012474:	3304      	adds	r3, #4
 8012476:	7da0      	ldrb	r0, [r4, #22]
 8012478:	444a      	add	r2, r9
 801247a:	7561      	strb	r1, [r4, #21]
 801247c:	1bdb      	subs	r3, r3, r7
 801247e:	f080 0001 	eor.w	r0, r0, #1
 8012482:	60a2      	str	r2, [r4, #8]
 8012484:	6123      	str	r3, [r4, #16]
 8012486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801248a:	2104      	movs	r1, #4
 801248c:	4620      	mov	r0, r4
 801248e:	f000 feff 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012492:	b1b0      	cbz	r0, 80124c2 <ucdr_deserialize_uint32_t+0xc6>
 8012494:	7d23      	ldrb	r3, [r4, #20]
 8012496:	2b01      	cmp	r3, #1
 8012498:	68a3      	ldr	r3, [r4, #8]
 801249a:	d017      	beq.n	80124cc <ucdr_deserialize_uint32_t+0xd0>
 801249c:	78db      	ldrb	r3, [r3, #3]
 801249e:	702b      	strb	r3, [r5, #0]
 80124a0:	68a3      	ldr	r3, [r4, #8]
 80124a2:	789b      	ldrb	r3, [r3, #2]
 80124a4:	706b      	strb	r3, [r5, #1]
 80124a6:	68a3      	ldr	r3, [r4, #8]
 80124a8:	785b      	ldrb	r3, [r3, #1]
 80124aa:	70ab      	strb	r3, [r5, #2]
 80124ac:	68a3      	ldr	r3, [r4, #8]
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	70eb      	strb	r3, [r5, #3]
 80124b2:	2104      	movs	r1, #4
 80124b4:	68a2      	ldr	r2, [r4, #8]
 80124b6:	6923      	ldr	r3, [r4, #16]
 80124b8:	440a      	add	r2, r1
 80124ba:	7561      	strb	r1, [r4, #21]
 80124bc:	440b      	add	r3, r1
 80124be:	60a2      	str	r2, [r4, #8]
 80124c0:	6123      	str	r3, [r4, #16]
 80124c2:	7da0      	ldrb	r0, [r4, #22]
 80124c4:	f080 0001 	eor.w	r0, r0, #1
 80124c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	602b      	str	r3, [r5, #0]
 80124d0:	e7ef      	b.n	80124b2 <ucdr_deserialize_uint32_t+0xb6>
 80124d2:	68a2      	ldr	r2, [r4, #8]
 80124d4:	6923      	ldr	r3, [r4, #16]
 80124d6:	1bd2      	subs	r2, r2, r7
 80124d8:	7da0      	ldrb	r0, [r4, #22]
 80124da:	1bdb      	subs	r3, r3, r7
 80124dc:	f884 8015 	strb.w	r8, [r4, #21]
 80124e0:	f080 0001 	eor.w	r0, r0, #1
 80124e4:	60a2      	str	r2, [r4, #8]
 80124e6:	6123      	str	r3, [r4, #16]
 80124e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ec:	68a3      	ldr	r3, [r4, #8]
 80124ee:	789b      	ldrb	r3, [r3, #2]
 80124f0:	706b      	strb	r3, [r5, #1]
 80124f2:	1cab      	adds	r3, r5, #2
 80124f4:	68a2      	ldr	r2, [r4, #8]
 80124f6:	7852      	ldrb	r2, [r2, #1]
 80124f8:	f803 2b01 	strb.w	r2, [r3], #1
 80124fc:	68a2      	ldr	r2, [r4, #8]
 80124fe:	7812      	ldrb	r2, [r2, #0]
 8012500:	701a      	strb	r2, [r3, #0]
 8012502:	e7b4      	b.n	801246e <ucdr_deserialize_uint32_t+0x72>
 8012504:	4631      	mov	r1, r6
 8012506:	463a      	mov	r2, r7
 8012508:	4628      	mov	r0, r5
 801250a:	f00e fd40 	bl	8020f8e <memcpy>
 801250e:	464a      	mov	r2, r9
 8012510:	19e8      	adds	r0, r5, r7
 8012512:	68a1      	ldr	r1, [r4, #8]
 8012514:	f00e fd3b 	bl	8020f8e <memcpy>
 8012518:	e7a9      	b.n	801246e <ucdr_deserialize_uint32_t+0x72>
 801251a:	bf00      	nop

0801251c <ucdr_deserialize_endian_uint32_t>:
 801251c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012520:	4604      	mov	r4, r0
 8012522:	460e      	mov	r6, r1
 8012524:	2104      	movs	r1, #4
 8012526:	4615      	mov	r5, r2
 8012528:	f000 ff06 	bl	8013338 <ucdr_buffer_alignment>
 801252c:	4601      	mov	r1, r0
 801252e:	4620      	mov	r0, r4
 8012530:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012534:	f000 ff48 	bl	80133c8 <ucdr_advance_buffer>
 8012538:	2104      	movs	r1, #4
 801253a:	4620      	mov	r0, r4
 801253c:	f000 fe9c 	bl	8013278 <ucdr_check_buffer_available_for>
 8012540:	2800      	cmp	r0, #0
 8012542:	d13c      	bne.n	80125be <ucdr_deserialize_endian_uint32_t+0xa2>
 8012544:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012548:	42bb      	cmp	r3, r7
 801254a:	d933      	bls.n	80125b4 <ucdr_deserialize_endian_uint32_t+0x98>
 801254c:	eba3 0907 	sub.w	r9, r3, r7
 8012550:	60a3      	str	r3, [r4, #8]
 8012552:	6923      	ldr	r3, [r4, #16]
 8012554:	4620      	mov	r0, r4
 8012556:	f1c9 0a04 	rsb	sl, r9, #4
 801255a:	444b      	add	r3, r9
 801255c:	4651      	mov	r1, sl
 801255e:	6123      	str	r3, [r4, #16]
 8012560:	f000 fe96 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012564:	2800      	cmp	r0, #0
 8012566:	d048      	beq.n	80125fa <ucdr_deserialize_endian_uint32_t+0xde>
 8012568:	2e01      	cmp	r6, #1
 801256a:	d061      	beq.n	8012630 <ucdr_deserialize_endian_uint32_t+0x114>
 801256c:	78fb      	ldrb	r3, [r7, #3]
 801256e:	702b      	strb	r3, [r5, #0]
 8012570:	f1b9 0f00 	cmp.w	r9, #0
 8012574:	d050      	beq.n	8012618 <ucdr_deserialize_endian_uint32_t+0xfc>
 8012576:	78bb      	ldrb	r3, [r7, #2]
 8012578:	f1b9 0f01 	cmp.w	r9, #1
 801257c:	706b      	strb	r3, [r5, #1]
 801257e:	f105 0302 	add.w	r3, r5, #2
 8012582:	d04d      	beq.n	8012620 <ucdr_deserialize_endian_uint32_t+0x104>
 8012584:	787b      	ldrb	r3, [r7, #1]
 8012586:	f1b9 0f02 	cmp.w	r9, #2
 801258a:	70ab      	strb	r3, [r5, #2]
 801258c:	f105 0303 	add.w	r3, r5, #3
 8012590:	d04a      	beq.n	8012628 <ucdr_deserialize_endian_uint32_t+0x10c>
 8012592:	783b      	ldrb	r3, [r7, #0]
 8012594:	70eb      	strb	r3, [r5, #3]
 8012596:	6923      	ldr	r3, [r4, #16]
 8012598:	2104      	movs	r1, #4
 801259a:	68a2      	ldr	r2, [r4, #8]
 801259c:	3304      	adds	r3, #4
 801259e:	7da0      	ldrb	r0, [r4, #22]
 80125a0:	4452      	add	r2, sl
 80125a2:	7561      	strb	r1, [r4, #21]
 80125a4:	eba3 0309 	sub.w	r3, r3, r9
 80125a8:	f080 0001 	eor.w	r0, r0, #1
 80125ac:	60a2      	str	r2, [r4, #8]
 80125ae:	6123      	str	r3, [r4, #16]
 80125b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b4:	2104      	movs	r1, #4
 80125b6:	4620      	mov	r0, r4
 80125b8:	f000 fe6a 	bl	8013290 <ucdr_check_final_buffer_behavior>
 80125bc:	b1a8      	cbz	r0, 80125ea <ucdr_deserialize_endian_uint32_t+0xce>
 80125be:	2e01      	cmp	r6, #1
 80125c0:	68a3      	ldr	r3, [r4, #8]
 80125c2:	d017      	beq.n	80125f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 80125c4:	78db      	ldrb	r3, [r3, #3]
 80125c6:	702b      	strb	r3, [r5, #0]
 80125c8:	68a3      	ldr	r3, [r4, #8]
 80125ca:	789b      	ldrb	r3, [r3, #2]
 80125cc:	706b      	strb	r3, [r5, #1]
 80125ce:	68a3      	ldr	r3, [r4, #8]
 80125d0:	785b      	ldrb	r3, [r3, #1]
 80125d2:	70ab      	strb	r3, [r5, #2]
 80125d4:	68a3      	ldr	r3, [r4, #8]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	70eb      	strb	r3, [r5, #3]
 80125da:	2104      	movs	r1, #4
 80125dc:	68a2      	ldr	r2, [r4, #8]
 80125de:	6923      	ldr	r3, [r4, #16]
 80125e0:	440a      	add	r2, r1
 80125e2:	7561      	strb	r1, [r4, #21]
 80125e4:	440b      	add	r3, r1
 80125e6:	60a2      	str	r2, [r4, #8]
 80125e8:	6123      	str	r3, [r4, #16]
 80125ea:	7da0      	ldrb	r0, [r4, #22]
 80125ec:	f080 0001 	eor.w	r0, r0, #1
 80125f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	602b      	str	r3, [r5, #0]
 80125f8:	e7ef      	b.n	80125da <ucdr_deserialize_endian_uint32_t+0xbe>
 80125fa:	68a2      	ldr	r2, [r4, #8]
 80125fc:	6923      	ldr	r3, [r4, #16]
 80125fe:	eba2 0209 	sub.w	r2, r2, r9
 8012602:	7da0      	ldrb	r0, [r4, #22]
 8012604:	eba3 0309 	sub.w	r3, r3, r9
 8012608:	f884 8015 	strb.w	r8, [r4, #21]
 801260c:	f080 0001 	eor.w	r0, r0, #1
 8012610:	60a2      	str	r2, [r4, #8]
 8012612:	6123      	str	r3, [r4, #16]
 8012614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012618:	68a3      	ldr	r3, [r4, #8]
 801261a:	789b      	ldrb	r3, [r3, #2]
 801261c:	706b      	strb	r3, [r5, #1]
 801261e:	1cab      	adds	r3, r5, #2
 8012620:	68a2      	ldr	r2, [r4, #8]
 8012622:	7852      	ldrb	r2, [r2, #1]
 8012624:	f803 2b01 	strb.w	r2, [r3], #1
 8012628:	68a2      	ldr	r2, [r4, #8]
 801262a:	7812      	ldrb	r2, [r2, #0]
 801262c:	701a      	strb	r2, [r3, #0]
 801262e:	e7b2      	b.n	8012596 <ucdr_deserialize_endian_uint32_t+0x7a>
 8012630:	4639      	mov	r1, r7
 8012632:	464a      	mov	r2, r9
 8012634:	4628      	mov	r0, r5
 8012636:	f00e fcaa 	bl	8020f8e <memcpy>
 801263a:	4652      	mov	r2, sl
 801263c:	eb05 0009 	add.w	r0, r5, r9
 8012640:	68a1      	ldr	r1, [r4, #8]
 8012642:	f00e fca4 	bl	8020f8e <memcpy>
 8012646:	e7a6      	b.n	8012596 <ucdr_deserialize_endian_uint32_t+0x7a>

08012648 <ucdr_serialize_uint64_t>:
 8012648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801264c:	4604      	mov	r4, r0
 801264e:	b082      	sub	sp, #8
 8012650:	2108      	movs	r1, #8
 8012652:	e9cd 2300 	strd	r2, r3, [sp]
 8012656:	f000 fe6f 	bl	8013338 <ucdr_buffer_alignment>
 801265a:	4601      	mov	r1, r0
 801265c:	4620      	mov	r0, r4
 801265e:	7d67      	ldrb	r7, [r4, #21]
 8012660:	f000 feb2 	bl	80133c8 <ucdr_advance_buffer>
 8012664:	2108      	movs	r1, #8
 8012666:	4620      	mov	r0, r4
 8012668:	f000 fe06 	bl	8013278 <ucdr_check_buffer_available_for>
 801266c:	2800      	cmp	r0, #0
 801266e:	d14e      	bne.n	801270e <ucdr_serialize_uint64_t+0xc6>
 8012670:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012674:	42ab      	cmp	r3, r5
 8012676:	d945      	bls.n	8012704 <ucdr_serialize_uint64_t+0xbc>
 8012678:	1b5e      	subs	r6, r3, r5
 801267a:	60a3      	str	r3, [r4, #8]
 801267c:	6923      	ldr	r3, [r4, #16]
 801267e:	4620      	mov	r0, r4
 8012680:	f1c6 0808 	rsb	r8, r6, #8
 8012684:	4433      	add	r3, r6
 8012686:	4641      	mov	r1, r8
 8012688:	6123      	str	r3, [r4, #16]
 801268a:	f000 fe01 	bl	8013290 <ucdr_check_final_buffer_behavior>
 801268e:	2800      	cmp	r0, #0
 8012690:	d074      	beq.n	801277c <ucdr_serialize_uint64_t+0x134>
 8012692:	7d23      	ldrb	r3, [r4, #20]
 8012694:	2b01      	cmp	r3, #1
 8012696:	f000 809b 	beq.w	80127d0 <ucdr_serialize_uint64_t+0x188>
 801269a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801269e:	702b      	strb	r3, [r5, #0]
 80126a0:	2e00      	cmp	r6, #0
 80126a2:	d078      	beq.n	8012796 <ucdr_serialize_uint64_t+0x14e>
 80126a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80126a8:	2e01      	cmp	r6, #1
 80126aa:	706b      	strb	r3, [r5, #1]
 80126ac:	d077      	beq.n	801279e <ucdr_serialize_uint64_t+0x156>
 80126ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80126b2:	2e02      	cmp	r6, #2
 80126b4:	70ab      	strb	r3, [r5, #2]
 80126b6:	d076      	beq.n	80127a6 <ucdr_serialize_uint64_t+0x15e>
 80126b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80126bc:	2e03      	cmp	r6, #3
 80126be:	70eb      	strb	r3, [r5, #3]
 80126c0:	d075      	beq.n	80127ae <ucdr_serialize_uint64_t+0x166>
 80126c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80126c6:	2e04      	cmp	r6, #4
 80126c8:	712b      	strb	r3, [r5, #4]
 80126ca:	d074      	beq.n	80127b6 <ucdr_serialize_uint64_t+0x16e>
 80126cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80126d0:	2e05      	cmp	r6, #5
 80126d2:	716b      	strb	r3, [r5, #5]
 80126d4:	d073      	beq.n	80127be <ucdr_serialize_uint64_t+0x176>
 80126d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80126da:	2e06      	cmp	r6, #6
 80126dc:	71ab      	strb	r3, [r5, #6]
 80126de:	d072      	beq.n	80127c6 <ucdr_serialize_uint64_t+0x17e>
 80126e0:	f89d 3000 	ldrb.w	r3, [sp]
 80126e4:	71eb      	strb	r3, [r5, #7]
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	2108      	movs	r1, #8
 80126ea:	68a2      	ldr	r2, [r4, #8]
 80126ec:	3308      	adds	r3, #8
 80126ee:	7da0      	ldrb	r0, [r4, #22]
 80126f0:	4442      	add	r2, r8
 80126f2:	7561      	strb	r1, [r4, #21]
 80126f4:	1b9e      	subs	r6, r3, r6
 80126f6:	f080 0001 	eor.w	r0, r0, #1
 80126fa:	60a2      	str	r2, [r4, #8]
 80126fc:	6126      	str	r6, [r4, #16]
 80126fe:	b002      	add	sp, #8
 8012700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012704:	2108      	movs	r1, #8
 8012706:	4620      	mov	r0, r4
 8012708:	f000 fdc2 	bl	8013290 <ucdr_check_final_buffer_behavior>
 801270c:	b350      	cbz	r0, 8012764 <ucdr_serialize_uint64_t+0x11c>
 801270e:	7d23      	ldrb	r3, [r4, #20]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d02d      	beq.n	8012770 <ucdr_serialize_uint64_t+0x128>
 8012714:	68a3      	ldr	r3, [r4, #8]
 8012716:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801271a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801271e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012722:	7018      	strb	r0, [r3, #0]
 8012724:	68a3      	ldr	r3, [r4, #8]
 8012726:	705a      	strb	r2, [r3, #1]
 8012728:	68a3      	ldr	r3, [r4, #8]
 801272a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801272e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012732:	7099      	strb	r1, [r3, #2]
 8012734:	68a3      	ldr	r3, [r4, #8]
 8012736:	70da      	strb	r2, [r3, #3]
 8012738:	68a3      	ldr	r3, [r4, #8]
 801273a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801273e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012742:	7118      	strb	r0, [r3, #4]
 8012744:	68a3      	ldr	r3, [r4, #8]
 8012746:	715a      	strb	r2, [r3, #5]
 8012748:	68a3      	ldr	r3, [r4, #8]
 801274a:	f89d 2000 	ldrb.w	r2, [sp]
 801274e:	7199      	strb	r1, [r3, #6]
 8012750:	68a3      	ldr	r3, [r4, #8]
 8012752:	71da      	strb	r2, [r3, #7]
 8012754:	2108      	movs	r1, #8
 8012756:	68a2      	ldr	r2, [r4, #8]
 8012758:	6923      	ldr	r3, [r4, #16]
 801275a:	440a      	add	r2, r1
 801275c:	7561      	strb	r1, [r4, #21]
 801275e:	440b      	add	r3, r1
 8012760:	60a2      	str	r2, [r4, #8]
 8012762:	6123      	str	r3, [r4, #16]
 8012764:	7da0      	ldrb	r0, [r4, #22]
 8012766:	f080 0001 	eor.w	r0, r0, #1
 801276a:	b002      	add	sp, #8
 801276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012770:	466b      	mov	r3, sp
 8012772:	68a2      	ldr	r2, [r4, #8]
 8012774:	cb03      	ldmia	r3!, {r0, r1}
 8012776:	6010      	str	r0, [r2, #0]
 8012778:	6051      	str	r1, [r2, #4]
 801277a:	e7eb      	b.n	8012754 <ucdr_serialize_uint64_t+0x10c>
 801277c:	68a2      	ldr	r2, [r4, #8]
 801277e:	6923      	ldr	r3, [r4, #16]
 8012780:	7da0      	ldrb	r0, [r4, #22]
 8012782:	1b92      	subs	r2, r2, r6
 8012784:	1b9b      	subs	r3, r3, r6
 8012786:	7567      	strb	r7, [r4, #21]
 8012788:	f080 0001 	eor.w	r0, r0, #1
 801278c:	60a2      	str	r2, [r4, #8]
 801278e:	6123      	str	r3, [r4, #16]
 8012790:	b002      	add	sp, #8
 8012792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012796:	68a3      	ldr	r3, [r4, #8]
 8012798:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801279c:	701a      	strb	r2, [r3, #0]
 801279e:	68a3      	ldr	r3, [r4, #8]
 80127a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80127a4:	701a      	strb	r2, [r3, #0]
 80127a6:	68a3      	ldr	r3, [r4, #8]
 80127a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80127ac:	701a      	strb	r2, [r3, #0]
 80127ae:	68a3      	ldr	r3, [r4, #8]
 80127b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80127b4:	701a      	strb	r2, [r3, #0]
 80127b6:	68a3      	ldr	r3, [r4, #8]
 80127b8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80127bc:	701a      	strb	r2, [r3, #0]
 80127be:	68a3      	ldr	r3, [r4, #8]
 80127c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80127c4:	701a      	strb	r2, [r3, #0]
 80127c6:	68a3      	ldr	r3, [r4, #8]
 80127c8:	f89d 2000 	ldrb.w	r2, [sp]
 80127cc:	701a      	strb	r2, [r3, #0]
 80127ce:	e78a      	b.n	80126e6 <ucdr_serialize_uint64_t+0x9e>
 80127d0:	4628      	mov	r0, r5
 80127d2:	466d      	mov	r5, sp
 80127d4:	4632      	mov	r2, r6
 80127d6:	4629      	mov	r1, r5
 80127d8:	f00e fbd9 	bl	8020f8e <memcpy>
 80127dc:	4642      	mov	r2, r8
 80127de:	19a9      	adds	r1, r5, r6
 80127e0:	68a0      	ldr	r0, [r4, #8]
 80127e2:	f00e fbd4 	bl	8020f8e <memcpy>
 80127e6:	e77e      	b.n	80126e6 <ucdr_serialize_uint64_t+0x9e>

080127e8 <ucdr_serialize_int16_t>:
 80127e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ec:	460b      	mov	r3, r1
 80127ee:	b082      	sub	sp, #8
 80127f0:	4604      	mov	r4, r0
 80127f2:	2102      	movs	r1, #2
 80127f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80127f8:	f000 fd9e 	bl	8013338 <ucdr_buffer_alignment>
 80127fc:	4601      	mov	r1, r0
 80127fe:	4620      	mov	r0, r4
 8012800:	7d67      	ldrb	r7, [r4, #21]
 8012802:	f000 fde1 	bl	80133c8 <ucdr_advance_buffer>
 8012806:	2102      	movs	r1, #2
 8012808:	4620      	mov	r0, r4
 801280a:	f000 fd35 	bl	8013278 <ucdr_check_buffer_available_for>
 801280e:	bb78      	cbnz	r0, 8012870 <ucdr_serialize_int16_t+0x88>
 8012810:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012814:	42ab      	cmp	r3, r5
 8012816:	d926      	bls.n	8012866 <ucdr_serialize_int16_t+0x7e>
 8012818:	1b5e      	subs	r6, r3, r5
 801281a:	60a3      	str	r3, [r4, #8]
 801281c:	6923      	ldr	r3, [r4, #16]
 801281e:	4620      	mov	r0, r4
 8012820:	f1c6 0802 	rsb	r8, r6, #2
 8012824:	4433      	add	r3, r6
 8012826:	4641      	mov	r1, r8
 8012828:	6123      	str	r3, [r4, #16]
 801282a:	f000 fd31 	bl	8013290 <ucdr_check_final_buffer_behavior>
 801282e:	2800      	cmp	r0, #0
 8012830:	d03b      	beq.n	80128aa <ucdr_serialize_int16_t+0xc2>
 8012832:	7d23      	ldrb	r3, [r4, #20]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d04a      	beq.n	80128ce <ucdr_serialize_int16_t+0xe6>
 8012838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801283c:	702b      	strb	r3, [r5, #0]
 801283e:	2e00      	cmp	r6, #0
 8012840:	d040      	beq.n	80128c4 <ucdr_serialize_int16_t+0xdc>
 8012842:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012846:	706b      	strb	r3, [r5, #1]
 8012848:	6923      	ldr	r3, [r4, #16]
 801284a:	2102      	movs	r1, #2
 801284c:	68a2      	ldr	r2, [r4, #8]
 801284e:	3302      	adds	r3, #2
 8012850:	7da0      	ldrb	r0, [r4, #22]
 8012852:	4442      	add	r2, r8
 8012854:	7561      	strb	r1, [r4, #21]
 8012856:	1b9e      	subs	r6, r3, r6
 8012858:	f080 0001 	eor.w	r0, r0, #1
 801285c:	60a2      	str	r2, [r4, #8]
 801285e:	6126      	str	r6, [r4, #16]
 8012860:	b002      	add	sp, #8
 8012862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012866:	2102      	movs	r1, #2
 8012868:	4620      	mov	r0, r4
 801286a:	f000 fd11 	bl	8013290 <ucdr_check_final_buffer_behavior>
 801286e:	b190      	cbz	r0, 8012896 <ucdr_serialize_int16_t+0xae>
 8012870:	7d23      	ldrb	r3, [r4, #20]
 8012872:	2b01      	cmp	r3, #1
 8012874:	68a3      	ldr	r3, [r4, #8]
 8012876:	d014      	beq.n	80128a2 <ucdr_serialize_int16_t+0xba>
 8012878:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801287c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012880:	7019      	strb	r1, [r3, #0]
 8012882:	68a3      	ldr	r3, [r4, #8]
 8012884:	705a      	strb	r2, [r3, #1]
 8012886:	2102      	movs	r1, #2
 8012888:	68a2      	ldr	r2, [r4, #8]
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	440a      	add	r2, r1
 801288e:	7561      	strb	r1, [r4, #21]
 8012890:	440b      	add	r3, r1
 8012892:	60a2      	str	r2, [r4, #8]
 8012894:	6123      	str	r3, [r4, #16]
 8012896:	7da0      	ldrb	r0, [r4, #22]
 8012898:	f080 0001 	eor.w	r0, r0, #1
 801289c:	b002      	add	sp, #8
 801289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80128a6:	801a      	strh	r2, [r3, #0]
 80128a8:	e7ed      	b.n	8012886 <ucdr_serialize_int16_t+0x9e>
 80128aa:	68a2      	ldr	r2, [r4, #8]
 80128ac:	6923      	ldr	r3, [r4, #16]
 80128ae:	7da0      	ldrb	r0, [r4, #22]
 80128b0:	1b92      	subs	r2, r2, r6
 80128b2:	1b9b      	subs	r3, r3, r6
 80128b4:	7567      	strb	r7, [r4, #21]
 80128b6:	f080 0001 	eor.w	r0, r0, #1
 80128ba:	60a2      	str	r2, [r4, #8]
 80128bc:	6123      	str	r3, [r4, #16]
 80128be:	b002      	add	sp, #8
 80128c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c4:	68a3      	ldr	r3, [r4, #8]
 80128c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128ca:	701a      	strb	r2, [r3, #0]
 80128cc:	e7bc      	b.n	8012848 <ucdr_serialize_int16_t+0x60>
 80128ce:	4628      	mov	r0, r5
 80128d0:	f10d 0506 	add.w	r5, sp, #6
 80128d4:	4632      	mov	r2, r6
 80128d6:	4629      	mov	r1, r5
 80128d8:	f00e fb59 	bl	8020f8e <memcpy>
 80128dc:	4642      	mov	r2, r8
 80128de:	19a9      	adds	r1, r5, r6
 80128e0:	68a0      	ldr	r0, [r4, #8]
 80128e2:	f00e fb54 	bl	8020f8e <memcpy>
 80128e6:	e7af      	b.n	8012848 <ucdr_serialize_int16_t+0x60>

080128e8 <ucdr_deserialize_int16_t>:
 80128e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128ec:	4604      	mov	r4, r0
 80128ee:	460d      	mov	r5, r1
 80128f0:	2102      	movs	r1, #2
 80128f2:	f000 fd21 	bl	8013338 <ucdr_buffer_alignment>
 80128f6:	4601      	mov	r1, r0
 80128f8:	4620      	mov	r0, r4
 80128fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80128fe:	f000 fd63 	bl	80133c8 <ucdr_advance_buffer>
 8012902:	2102      	movs	r1, #2
 8012904:	4620      	mov	r0, r4
 8012906:	f000 fcb7 	bl	8013278 <ucdr_check_buffer_available_for>
 801290a:	bb60      	cbnz	r0, 8012966 <ucdr_deserialize_int16_t+0x7e>
 801290c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012910:	42be      	cmp	r6, r7
 8012912:	d923      	bls.n	801295c <ucdr_deserialize_int16_t+0x74>
 8012914:	6923      	ldr	r3, [r4, #16]
 8012916:	4620      	mov	r0, r4
 8012918:	60a6      	str	r6, [r4, #8]
 801291a:	1bf6      	subs	r6, r6, r7
 801291c:	4433      	add	r3, r6
 801291e:	f1c6 0902 	rsb	r9, r6, #2
 8012922:	6123      	str	r3, [r4, #16]
 8012924:	4649      	mov	r1, r9
 8012926:	f000 fcb3 	bl	8013290 <ucdr_check_final_buffer_behavior>
 801292a:	2800      	cmp	r0, #0
 801292c:	d034      	beq.n	8012998 <ucdr_deserialize_int16_t+0xb0>
 801292e:	7d23      	ldrb	r3, [r4, #20]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d042      	beq.n	80129ba <ucdr_deserialize_int16_t+0xd2>
 8012934:	787b      	ldrb	r3, [r7, #1]
 8012936:	702b      	strb	r3, [r5, #0]
 8012938:	2e00      	cmp	r6, #0
 801293a:	d03a      	beq.n	80129b2 <ucdr_deserialize_int16_t+0xca>
 801293c:	783b      	ldrb	r3, [r7, #0]
 801293e:	706b      	strb	r3, [r5, #1]
 8012940:	6923      	ldr	r3, [r4, #16]
 8012942:	2102      	movs	r1, #2
 8012944:	68a2      	ldr	r2, [r4, #8]
 8012946:	3302      	adds	r3, #2
 8012948:	7da0      	ldrb	r0, [r4, #22]
 801294a:	444a      	add	r2, r9
 801294c:	7561      	strb	r1, [r4, #21]
 801294e:	1b9b      	subs	r3, r3, r6
 8012950:	f080 0001 	eor.w	r0, r0, #1
 8012954:	60a2      	str	r2, [r4, #8]
 8012956:	6123      	str	r3, [r4, #16]
 8012958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801295c:	2102      	movs	r1, #2
 801295e:	4620      	mov	r0, r4
 8012960:	f000 fc96 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012964:	b180      	cbz	r0, 8012988 <ucdr_deserialize_int16_t+0xa0>
 8012966:	7d23      	ldrb	r3, [r4, #20]
 8012968:	2b01      	cmp	r3, #1
 801296a:	68a3      	ldr	r3, [r4, #8]
 801296c:	d011      	beq.n	8012992 <ucdr_deserialize_int16_t+0xaa>
 801296e:	785b      	ldrb	r3, [r3, #1]
 8012970:	702b      	strb	r3, [r5, #0]
 8012972:	68a3      	ldr	r3, [r4, #8]
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	706b      	strb	r3, [r5, #1]
 8012978:	2102      	movs	r1, #2
 801297a:	68a2      	ldr	r2, [r4, #8]
 801297c:	6923      	ldr	r3, [r4, #16]
 801297e:	440a      	add	r2, r1
 8012980:	7561      	strb	r1, [r4, #21]
 8012982:	440b      	add	r3, r1
 8012984:	60a2      	str	r2, [r4, #8]
 8012986:	6123      	str	r3, [r4, #16]
 8012988:	7da0      	ldrb	r0, [r4, #22]
 801298a:	f080 0001 	eor.w	r0, r0, #1
 801298e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012992:	881b      	ldrh	r3, [r3, #0]
 8012994:	802b      	strh	r3, [r5, #0]
 8012996:	e7ef      	b.n	8012978 <ucdr_deserialize_int16_t+0x90>
 8012998:	68a2      	ldr	r2, [r4, #8]
 801299a:	6923      	ldr	r3, [r4, #16]
 801299c:	1b92      	subs	r2, r2, r6
 801299e:	7da0      	ldrb	r0, [r4, #22]
 80129a0:	1b9b      	subs	r3, r3, r6
 80129a2:	f884 8015 	strb.w	r8, [r4, #21]
 80129a6:	f080 0001 	eor.w	r0, r0, #1
 80129aa:	60a2      	str	r2, [r4, #8]
 80129ac:	6123      	str	r3, [r4, #16]
 80129ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129b2:	68a3      	ldr	r3, [r4, #8]
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	706b      	strb	r3, [r5, #1]
 80129b8:	e7c2      	b.n	8012940 <ucdr_deserialize_int16_t+0x58>
 80129ba:	4639      	mov	r1, r7
 80129bc:	4632      	mov	r2, r6
 80129be:	4628      	mov	r0, r5
 80129c0:	f00e fae5 	bl	8020f8e <memcpy>
 80129c4:	464a      	mov	r2, r9
 80129c6:	19a8      	adds	r0, r5, r6
 80129c8:	68a1      	ldr	r1, [r4, #8]
 80129ca:	f00e fae0 	bl	8020f8e <memcpy>
 80129ce:	e7b7      	b.n	8012940 <ucdr_deserialize_int16_t+0x58>

080129d0 <ucdr_serialize_int32_t>:
 80129d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129d4:	b082      	sub	sp, #8
 80129d6:	4604      	mov	r4, r0
 80129d8:	9101      	str	r1, [sp, #4]
 80129da:	2104      	movs	r1, #4
 80129dc:	f000 fcac 	bl	8013338 <ucdr_buffer_alignment>
 80129e0:	4601      	mov	r1, r0
 80129e2:	4620      	mov	r0, r4
 80129e4:	7d67      	ldrb	r7, [r4, #21]
 80129e6:	f000 fcef 	bl	80133c8 <ucdr_advance_buffer>
 80129ea:	2104      	movs	r1, #4
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 fc43 	bl	8013278 <ucdr_check_buffer_available_for>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d139      	bne.n	8012a6a <ucdr_serialize_int32_t+0x9a>
 80129f6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80129fa:	42ab      	cmp	r3, r5
 80129fc:	d930      	bls.n	8012a60 <ucdr_serialize_int32_t+0x90>
 80129fe:	1b5e      	subs	r6, r3, r5
 8012a00:	60a3      	str	r3, [r4, #8]
 8012a02:	6923      	ldr	r3, [r4, #16]
 8012a04:	4620      	mov	r0, r4
 8012a06:	f1c6 0804 	rsb	r8, r6, #4
 8012a0a:	4433      	add	r3, r6
 8012a0c:	4641      	mov	r1, r8
 8012a0e:	6123      	str	r3, [r4, #16]
 8012a10:	f000 fc3e 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d04c      	beq.n	8012ab2 <ucdr_serialize_int32_t+0xe2>
 8012a18:	7d23      	ldrb	r3, [r4, #20]
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d063      	beq.n	8012ae6 <ucdr_serialize_int32_t+0x116>
 8012a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012a22:	702b      	strb	r3, [r5, #0]
 8012a24:	2e00      	cmp	r6, #0
 8012a26:	d051      	beq.n	8012acc <ucdr_serialize_int32_t+0xfc>
 8012a28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012a2c:	2e01      	cmp	r6, #1
 8012a2e:	706b      	strb	r3, [r5, #1]
 8012a30:	d050      	beq.n	8012ad4 <ucdr_serialize_int32_t+0x104>
 8012a32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012a36:	2e02      	cmp	r6, #2
 8012a38:	70ab      	strb	r3, [r5, #2]
 8012a3a:	d04f      	beq.n	8012adc <ucdr_serialize_int32_t+0x10c>
 8012a3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012a40:	70eb      	strb	r3, [r5, #3]
 8012a42:	6923      	ldr	r3, [r4, #16]
 8012a44:	2104      	movs	r1, #4
 8012a46:	68a2      	ldr	r2, [r4, #8]
 8012a48:	3304      	adds	r3, #4
 8012a4a:	7da0      	ldrb	r0, [r4, #22]
 8012a4c:	4442      	add	r2, r8
 8012a4e:	7561      	strb	r1, [r4, #21]
 8012a50:	1b9e      	subs	r6, r3, r6
 8012a52:	f080 0001 	eor.w	r0, r0, #1
 8012a56:	60a2      	str	r2, [r4, #8]
 8012a58:	6126      	str	r6, [r4, #16]
 8012a5a:	b002      	add	sp, #8
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	2104      	movs	r1, #4
 8012a62:	4620      	mov	r0, r4
 8012a64:	f000 fc14 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012a68:	b1d0      	cbz	r0, 8012aa0 <ucdr_serialize_int32_t+0xd0>
 8012a6a:	7d23      	ldrb	r3, [r4, #20]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	68a3      	ldr	r3, [r4, #8]
 8012a70:	d01c      	beq.n	8012aac <ucdr_serialize_int32_t+0xdc>
 8012a72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012a76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012a7e:	7018      	strb	r0, [r3, #0]
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	705a      	strb	r2, [r3, #1]
 8012a84:	68a3      	ldr	r3, [r4, #8]
 8012a86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a8a:	7099      	strb	r1, [r3, #2]
 8012a8c:	68a3      	ldr	r3, [r4, #8]
 8012a8e:	70da      	strb	r2, [r3, #3]
 8012a90:	2104      	movs	r1, #4
 8012a92:	68a2      	ldr	r2, [r4, #8]
 8012a94:	6923      	ldr	r3, [r4, #16]
 8012a96:	440a      	add	r2, r1
 8012a98:	7561      	strb	r1, [r4, #21]
 8012a9a:	440b      	add	r3, r1
 8012a9c:	60a2      	str	r2, [r4, #8]
 8012a9e:	6123      	str	r3, [r4, #16]
 8012aa0:	7da0      	ldrb	r0, [r4, #22]
 8012aa2:	f080 0001 	eor.w	r0, r0, #1
 8012aa6:	b002      	add	sp, #8
 8012aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aac:	9a01      	ldr	r2, [sp, #4]
 8012aae:	601a      	str	r2, [r3, #0]
 8012ab0:	e7ee      	b.n	8012a90 <ucdr_serialize_int32_t+0xc0>
 8012ab2:	68a2      	ldr	r2, [r4, #8]
 8012ab4:	6923      	ldr	r3, [r4, #16]
 8012ab6:	7da0      	ldrb	r0, [r4, #22]
 8012ab8:	1b92      	subs	r2, r2, r6
 8012aba:	1b9b      	subs	r3, r3, r6
 8012abc:	7567      	strb	r7, [r4, #21]
 8012abe:	f080 0001 	eor.w	r0, r0, #1
 8012ac2:	60a2      	str	r2, [r4, #8]
 8012ac4:	6123      	str	r3, [r4, #16]
 8012ac6:	b002      	add	sp, #8
 8012ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012acc:	68a3      	ldr	r3, [r4, #8]
 8012ace:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ad2:	701a      	strb	r2, [r3, #0]
 8012ad4:	68a3      	ldr	r3, [r4, #8]
 8012ad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012ada:	701a      	strb	r2, [r3, #0]
 8012adc:	68a3      	ldr	r3, [r4, #8]
 8012ade:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012ae2:	701a      	strb	r2, [r3, #0]
 8012ae4:	e7ad      	b.n	8012a42 <ucdr_serialize_int32_t+0x72>
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	ad01      	add	r5, sp, #4
 8012aea:	4632      	mov	r2, r6
 8012aec:	4629      	mov	r1, r5
 8012aee:	f00e fa4e 	bl	8020f8e <memcpy>
 8012af2:	4642      	mov	r2, r8
 8012af4:	19a9      	adds	r1, r5, r6
 8012af6:	68a0      	ldr	r0, [r4, #8]
 8012af8:	f00e fa49 	bl	8020f8e <memcpy>
 8012afc:	e7a1      	b.n	8012a42 <ucdr_serialize_int32_t+0x72>
 8012afe:	bf00      	nop

08012b00 <ucdr_deserialize_int32_t>:
 8012b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b04:	4604      	mov	r4, r0
 8012b06:	460d      	mov	r5, r1
 8012b08:	2104      	movs	r1, #4
 8012b0a:	f000 fc15 	bl	8013338 <ucdr_buffer_alignment>
 8012b0e:	4601      	mov	r1, r0
 8012b10:	4620      	mov	r0, r4
 8012b12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012b16:	f000 fc57 	bl	80133c8 <ucdr_advance_buffer>
 8012b1a:	2104      	movs	r1, #4
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	f000 fbab 	bl	8013278 <ucdr_check_buffer_available_for>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	d138      	bne.n	8012b98 <ucdr_deserialize_int32_t+0x98>
 8012b26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012b2a:	42b7      	cmp	r7, r6
 8012b2c:	d92f      	bls.n	8012b8e <ucdr_deserialize_int32_t+0x8e>
 8012b2e:	6923      	ldr	r3, [r4, #16]
 8012b30:	4620      	mov	r0, r4
 8012b32:	60a7      	str	r7, [r4, #8]
 8012b34:	1bbf      	subs	r7, r7, r6
 8012b36:	443b      	add	r3, r7
 8012b38:	f1c7 0904 	rsb	r9, r7, #4
 8012b3c:	6123      	str	r3, [r4, #16]
 8012b3e:	4649      	mov	r1, r9
 8012b40:	f000 fba6 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d046      	beq.n	8012bd6 <ucdr_deserialize_int32_t+0xd6>
 8012b48:	7d23      	ldrb	r3, [r4, #20]
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d05c      	beq.n	8012c08 <ucdr_deserialize_int32_t+0x108>
 8012b4e:	78f3      	ldrb	r3, [r6, #3]
 8012b50:	702b      	strb	r3, [r5, #0]
 8012b52:	2f00      	cmp	r7, #0
 8012b54:	d04c      	beq.n	8012bf0 <ucdr_deserialize_int32_t+0xf0>
 8012b56:	78b3      	ldrb	r3, [r6, #2]
 8012b58:	2f01      	cmp	r7, #1
 8012b5a:	706b      	strb	r3, [r5, #1]
 8012b5c:	f105 0302 	add.w	r3, r5, #2
 8012b60:	d04a      	beq.n	8012bf8 <ucdr_deserialize_int32_t+0xf8>
 8012b62:	7873      	ldrb	r3, [r6, #1]
 8012b64:	2f02      	cmp	r7, #2
 8012b66:	70ab      	strb	r3, [r5, #2]
 8012b68:	f105 0303 	add.w	r3, r5, #3
 8012b6c:	d048      	beq.n	8012c00 <ucdr_deserialize_int32_t+0x100>
 8012b6e:	7833      	ldrb	r3, [r6, #0]
 8012b70:	70eb      	strb	r3, [r5, #3]
 8012b72:	6923      	ldr	r3, [r4, #16]
 8012b74:	2104      	movs	r1, #4
 8012b76:	68a2      	ldr	r2, [r4, #8]
 8012b78:	3304      	adds	r3, #4
 8012b7a:	7da0      	ldrb	r0, [r4, #22]
 8012b7c:	444a      	add	r2, r9
 8012b7e:	7561      	strb	r1, [r4, #21]
 8012b80:	1bdb      	subs	r3, r3, r7
 8012b82:	f080 0001 	eor.w	r0, r0, #1
 8012b86:	60a2      	str	r2, [r4, #8]
 8012b88:	6123      	str	r3, [r4, #16]
 8012b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b8e:	2104      	movs	r1, #4
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 fb7d 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012b96:	b1b0      	cbz	r0, 8012bc6 <ucdr_deserialize_int32_t+0xc6>
 8012b98:	7d23      	ldrb	r3, [r4, #20]
 8012b9a:	2b01      	cmp	r3, #1
 8012b9c:	68a3      	ldr	r3, [r4, #8]
 8012b9e:	d017      	beq.n	8012bd0 <ucdr_deserialize_int32_t+0xd0>
 8012ba0:	78db      	ldrb	r3, [r3, #3]
 8012ba2:	702b      	strb	r3, [r5, #0]
 8012ba4:	68a3      	ldr	r3, [r4, #8]
 8012ba6:	789b      	ldrb	r3, [r3, #2]
 8012ba8:	706b      	strb	r3, [r5, #1]
 8012baa:	68a3      	ldr	r3, [r4, #8]
 8012bac:	785b      	ldrb	r3, [r3, #1]
 8012bae:	70ab      	strb	r3, [r5, #2]
 8012bb0:	68a3      	ldr	r3, [r4, #8]
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	70eb      	strb	r3, [r5, #3]
 8012bb6:	2104      	movs	r1, #4
 8012bb8:	68a2      	ldr	r2, [r4, #8]
 8012bba:	6923      	ldr	r3, [r4, #16]
 8012bbc:	440a      	add	r2, r1
 8012bbe:	7561      	strb	r1, [r4, #21]
 8012bc0:	440b      	add	r3, r1
 8012bc2:	60a2      	str	r2, [r4, #8]
 8012bc4:	6123      	str	r3, [r4, #16]
 8012bc6:	7da0      	ldrb	r0, [r4, #22]
 8012bc8:	f080 0001 	eor.w	r0, r0, #1
 8012bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	602b      	str	r3, [r5, #0]
 8012bd4:	e7ef      	b.n	8012bb6 <ucdr_deserialize_int32_t+0xb6>
 8012bd6:	68a2      	ldr	r2, [r4, #8]
 8012bd8:	6923      	ldr	r3, [r4, #16]
 8012bda:	1bd2      	subs	r2, r2, r7
 8012bdc:	7da0      	ldrb	r0, [r4, #22]
 8012bde:	1bdb      	subs	r3, r3, r7
 8012be0:	f884 8015 	strb.w	r8, [r4, #21]
 8012be4:	f080 0001 	eor.w	r0, r0, #1
 8012be8:	60a2      	str	r2, [r4, #8]
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bf0:	68a3      	ldr	r3, [r4, #8]
 8012bf2:	789b      	ldrb	r3, [r3, #2]
 8012bf4:	706b      	strb	r3, [r5, #1]
 8012bf6:	1cab      	adds	r3, r5, #2
 8012bf8:	68a2      	ldr	r2, [r4, #8]
 8012bfa:	7852      	ldrb	r2, [r2, #1]
 8012bfc:	f803 2b01 	strb.w	r2, [r3], #1
 8012c00:	68a2      	ldr	r2, [r4, #8]
 8012c02:	7812      	ldrb	r2, [r2, #0]
 8012c04:	701a      	strb	r2, [r3, #0]
 8012c06:	e7b4      	b.n	8012b72 <ucdr_deserialize_int32_t+0x72>
 8012c08:	4631      	mov	r1, r6
 8012c0a:	463a      	mov	r2, r7
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	f00e f9be 	bl	8020f8e <memcpy>
 8012c12:	464a      	mov	r2, r9
 8012c14:	19e8      	adds	r0, r5, r7
 8012c16:	68a1      	ldr	r1, [r4, #8]
 8012c18:	f00e f9b9 	bl	8020f8e <memcpy>
 8012c1c:	e7a9      	b.n	8012b72 <ucdr_deserialize_int32_t+0x72>
 8012c1e:	bf00      	nop

08012c20 <ucdr_serialize_int64_t>:
 8012c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c24:	4604      	mov	r4, r0
 8012c26:	b082      	sub	sp, #8
 8012c28:	2108      	movs	r1, #8
 8012c2a:	e9cd 2300 	strd	r2, r3, [sp]
 8012c2e:	f000 fb83 	bl	8013338 <ucdr_buffer_alignment>
 8012c32:	4601      	mov	r1, r0
 8012c34:	4620      	mov	r0, r4
 8012c36:	7d67      	ldrb	r7, [r4, #21]
 8012c38:	f000 fbc6 	bl	80133c8 <ucdr_advance_buffer>
 8012c3c:	2108      	movs	r1, #8
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f000 fb1a 	bl	8013278 <ucdr_check_buffer_available_for>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d14e      	bne.n	8012ce6 <ucdr_serialize_int64_t+0xc6>
 8012c48:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c4c:	42ab      	cmp	r3, r5
 8012c4e:	d945      	bls.n	8012cdc <ucdr_serialize_int64_t+0xbc>
 8012c50:	1b5e      	subs	r6, r3, r5
 8012c52:	60a3      	str	r3, [r4, #8]
 8012c54:	6923      	ldr	r3, [r4, #16]
 8012c56:	4620      	mov	r0, r4
 8012c58:	f1c6 0808 	rsb	r8, r6, #8
 8012c5c:	4433      	add	r3, r6
 8012c5e:	4641      	mov	r1, r8
 8012c60:	6123      	str	r3, [r4, #16]
 8012c62:	f000 fb15 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d074      	beq.n	8012d54 <ucdr_serialize_int64_t+0x134>
 8012c6a:	7d23      	ldrb	r3, [r4, #20]
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	f000 809b 	beq.w	8012da8 <ucdr_serialize_int64_t+0x188>
 8012c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c76:	702b      	strb	r3, [r5, #0]
 8012c78:	2e00      	cmp	r6, #0
 8012c7a:	d078      	beq.n	8012d6e <ucdr_serialize_int64_t+0x14e>
 8012c7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c80:	2e01      	cmp	r6, #1
 8012c82:	706b      	strb	r3, [r5, #1]
 8012c84:	d077      	beq.n	8012d76 <ucdr_serialize_int64_t+0x156>
 8012c86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c8a:	2e02      	cmp	r6, #2
 8012c8c:	70ab      	strb	r3, [r5, #2]
 8012c8e:	d076      	beq.n	8012d7e <ucdr_serialize_int64_t+0x15e>
 8012c90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c94:	2e03      	cmp	r6, #3
 8012c96:	70eb      	strb	r3, [r5, #3]
 8012c98:	d075      	beq.n	8012d86 <ucdr_serialize_int64_t+0x166>
 8012c9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012c9e:	2e04      	cmp	r6, #4
 8012ca0:	712b      	strb	r3, [r5, #4]
 8012ca2:	d074      	beq.n	8012d8e <ucdr_serialize_int64_t+0x16e>
 8012ca4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012ca8:	2e05      	cmp	r6, #5
 8012caa:	716b      	strb	r3, [r5, #5]
 8012cac:	d073      	beq.n	8012d96 <ucdr_serialize_int64_t+0x176>
 8012cae:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012cb2:	2e06      	cmp	r6, #6
 8012cb4:	71ab      	strb	r3, [r5, #6]
 8012cb6:	d072      	beq.n	8012d9e <ucdr_serialize_int64_t+0x17e>
 8012cb8:	f89d 3000 	ldrb.w	r3, [sp]
 8012cbc:	71eb      	strb	r3, [r5, #7]
 8012cbe:	6923      	ldr	r3, [r4, #16]
 8012cc0:	2108      	movs	r1, #8
 8012cc2:	68a2      	ldr	r2, [r4, #8]
 8012cc4:	3308      	adds	r3, #8
 8012cc6:	7da0      	ldrb	r0, [r4, #22]
 8012cc8:	4442      	add	r2, r8
 8012cca:	7561      	strb	r1, [r4, #21]
 8012ccc:	1b9e      	subs	r6, r3, r6
 8012cce:	f080 0001 	eor.w	r0, r0, #1
 8012cd2:	60a2      	str	r2, [r4, #8]
 8012cd4:	6126      	str	r6, [r4, #16]
 8012cd6:	b002      	add	sp, #8
 8012cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cdc:	2108      	movs	r1, #8
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f000 fad6 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012ce4:	b350      	cbz	r0, 8012d3c <ucdr_serialize_int64_t+0x11c>
 8012ce6:	7d23      	ldrb	r3, [r4, #20]
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d02d      	beq.n	8012d48 <ucdr_serialize_int64_t+0x128>
 8012cec:	68a3      	ldr	r3, [r4, #8]
 8012cee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012cf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cf6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012cfa:	7018      	strb	r0, [r3, #0]
 8012cfc:	68a3      	ldr	r3, [r4, #8]
 8012cfe:	705a      	strb	r2, [r3, #1]
 8012d00:	68a3      	ldr	r3, [r4, #8]
 8012d02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d06:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012d0a:	7099      	strb	r1, [r3, #2]
 8012d0c:	68a3      	ldr	r3, [r4, #8]
 8012d0e:	70da      	strb	r2, [r3, #3]
 8012d10:	68a3      	ldr	r3, [r4, #8]
 8012d12:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012d16:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012d1a:	7118      	strb	r0, [r3, #4]
 8012d1c:	68a3      	ldr	r3, [r4, #8]
 8012d1e:	715a      	strb	r2, [r3, #5]
 8012d20:	68a3      	ldr	r3, [r4, #8]
 8012d22:	f89d 2000 	ldrb.w	r2, [sp]
 8012d26:	7199      	strb	r1, [r3, #6]
 8012d28:	68a3      	ldr	r3, [r4, #8]
 8012d2a:	71da      	strb	r2, [r3, #7]
 8012d2c:	2108      	movs	r1, #8
 8012d2e:	68a2      	ldr	r2, [r4, #8]
 8012d30:	6923      	ldr	r3, [r4, #16]
 8012d32:	440a      	add	r2, r1
 8012d34:	7561      	strb	r1, [r4, #21]
 8012d36:	440b      	add	r3, r1
 8012d38:	60a2      	str	r2, [r4, #8]
 8012d3a:	6123      	str	r3, [r4, #16]
 8012d3c:	7da0      	ldrb	r0, [r4, #22]
 8012d3e:	f080 0001 	eor.w	r0, r0, #1
 8012d42:	b002      	add	sp, #8
 8012d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d48:	466b      	mov	r3, sp
 8012d4a:	68a2      	ldr	r2, [r4, #8]
 8012d4c:	cb03      	ldmia	r3!, {r0, r1}
 8012d4e:	6010      	str	r0, [r2, #0]
 8012d50:	6051      	str	r1, [r2, #4]
 8012d52:	e7eb      	b.n	8012d2c <ucdr_serialize_int64_t+0x10c>
 8012d54:	68a2      	ldr	r2, [r4, #8]
 8012d56:	6923      	ldr	r3, [r4, #16]
 8012d58:	7da0      	ldrb	r0, [r4, #22]
 8012d5a:	1b92      	subs	r2, r2, r6
 8012d5c:	1b9b      	subs	r3, r3, r6
 8012d5e:	7567      	strb	r7, [r4, #21]
 8012d60:	f080 0001 	eor.w	r0, r0, #1
 8012d64:	60a2      	str	r2, [r4, #8]
 8012d66:	6123      	str	r3, [r4, #16]
 8012d68:	b002      	add	sp, #8
 8012d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6e:	68a3      	ldr	r3, [r4, #8]
 8012d70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d74:	701a      	strb	r2, [r3, #0]
 8012d76:	68a3      	ldr	r3, [r4, #8]
 8012d78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	68a3      	ldr	r3, [r4, #8]
 8012d80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d84:	701a      	strb	r2, [r3, #0]
 8012d86:	68a3      	ldr	r3, [r4, #8]
 8012d88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012d8c:	701a      	strb	r2, [r3, #0]
 8012d8e:	68a3      	ldr	r3, [r4, #8]
 8012d90:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012d94:	701a      	strb	r2, [r3, #0]
 8012d96:	68a3      	ldr	r3, [r4, #8]
 8012d98:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012d9c:	701a      	strb	r2, [r3, #0]
 8012d9e:	68a3      	ldr	r3, [r4, #8]
 8012da0:	f89d 2000 	ldrb.w	r2, [sp]
 8012da4:	701a      	strb	r2, [r3, #0]
 8012da6:	e78a      	b.n	8012cbe <ucdr_serialize_int64_t+0x9e>
 8012da8:	4628      	mov	r0, r5
 8012daa:	466d      	mov	r5, sp
 8012dac:	4632      	mov	r2, r6
 8012dae:	4629      	mov	r1, r5
 8012db0:	f00e f8ed 	bl	8020f8e <memcpy>
 8012db4:	4642      	mov	r2, r8
 8012db6:	19a9      	adds	r1, r5, r6
 8012db8:	68a0      	ldr	r0, [r4, #8]
 8012dba:	f00e f8e8 	bl	8020f8e <memcpy>
 8012dbe:	e77e      	b.n	8012cbe <ucdr_serialize_int64_t+0x9e>

08012dc0 <ucdr_deserialize_int64_t>:
 8012dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	460d      	mov	r5, r1
 8012dc8:	2108      	movs	r1, #8
 8012dca:	f000 fab5 	bl	8013338 <ucdr_buffer_alignment>
 8012dce:	4601      	mov	r1, r0
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012dd6:	f000 faf7 	bl	80133c8 <ucdr_advance_buffer>
 8012dda:	2108      	movs	r1, #8
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f000 fa4b 	bl	8013278 <ucdr_check_buffer_available_for>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d151      	bne.n	8012e8a <ucdr_deserialize_int64_t+0xca>
 8012de6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012dea:	42be      	cmp	r6, r7
 8012dec:	d948      	bls.n	8012e80 <ucdr_deserialize_int64_t+0xc0>
 8012dee:	6923      	ldr	r3, [r4, #16]
 8012df0:	4620      	mov	r0, r4
 8012df2:	60a6      	str	r6, [r4, #8]
 8012df4:	1bf6      	subs	r6, r6, r7
 8012df6:	4433      	add	r3, r6
 8012df8:	f1c6 0908 	rsb	r9, r6, #8
 8012dfc:	6123      	str	r3, [r4, #16]
 8012dfe:	4649      	mov	r1, r9
 8012e00:	f000 fa46 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d06d      	beq.n	8012ee4 <ucdr_deserialize_int64_t+0x124>
 8012e08:	7d23      	ldrb	r3, [r4, #20]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	f000 8093 	beq.w	8012f36 <ucdr_deserialize_int64_t+0x176>
 8012e10:	79fb      	ldrb	r3, [r7, #7]
 8012e12:	702b      	strb	r3, [r5, #0]
 8012e14:	2e00      	cmp	r6, #0
 8012e16:	d072      	beq.n	8012efe <ucdr_deserialize_int64_t+0x13e>
 8012e18:	79bb      	ldrb	r3, [r7, #6]
 8012e1a:	2e01      	cmp	r6, #1
 8012e1c:	706b      	strb	r3, [r5, #1]
 8012e1e:	f105 0302 	add.w	r3, r5, #2
 8012e22:	d070      	beq.n	8012f06 <ucdr_deserialize_int64_t+0x146>
 8012e24:	797b      	ldrb	r3, [r7, #5]
 8012e26:	2e02      	cmp	r6, #2
 8012e28:	70ab      	strb	r3, [r5, #2]
 8012e2a:	f105 0303 	add.w	r3, r5, #3
 8012e2e:	d06e      	beq.n	8012f0e <ucdr_deserialize_int64_t+0x14e>
 8012e30:	793b      	ldrb	r3, [r7, #4]
 8012e32:	2e03      	cmp	r6, #3
 8012e34:	70eb      	strb	r3, [r5, #3]
 8012e36:	f105 0304 	add.w	r3, r5, #4
 8012e3a:	d06c      	beq.n	8012f16 <ucdr_deserialize_int64_t+0x156>
 8012e3c:	78fb      	ldrb	r3, [r7, #3]
 8012e3e:	2e04      	cmp	r6, #4
 8012e40:	712b      	strb	r3, [r5, #4]
 8012e42:	f105 0305 	add.w	r3, r5, #5
 8012e46:	d06a      	beq.n	8012f1e <ucdr_deserialize_int64_t+0x15e>
 8012e48:	78bb      	ldrb	r3, [r7, #2]
 8012e4a:	2e05      	cmp	r6, #5
 8012e4c:	716b      	strb	r3, [r5, #5]
 8012e4e:	f105 0306 	add.w	r3, r5, #6
 8012e52:	d068      	beq.n	8012f26 <ucdr_deserialize_int64_t+0x166>
 8012e54:	787b      	ldrb	r3, [r7, #1]
 8012e56:	2e06      	cmp	r6, #6
 8012e58:	71ab      	strb	r3, [r5, #6]
 8012e5a:	f105 0307 	add.w	r3, r5, #7
 8012e5e:	d066      	beq.n	8012f2e <ucdr_deserialize_int64_t+0x16e>
 8012e60:	783b      	ldrb	r3, [r7, #0]
 8012e62:	71eb      	strb	r3, [r5, #7]
 8012e64:	6923      	ldr	r3, [r4, #16]
 8012e66:	2108      	movs	r1, #8
 8012e68:	68a2      	ldr	r2, [r4, #8]
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	7da0      	ldrb	r0, [r4, #22]
 8012e6e:	444a      	add	r2, r9
 8012e70:	7561      	strb	r1, [r4, #21]
 8012e72:	1b9e      	subs	r6, r3, r6
 8012e74:	f080 0001 	eor.w	r0, r0, #1
 8012e78:	60a2      	str	r2, [r4, #8]
 8012e7a:	6126      	str	r6, [r4, #16]
 8012e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e80:	2108      	movs	r1, #8
 8012e82:	4620      	mov	r0, r4
 8012e84:	f000 fa04 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012e88:	b310      	cbz	r0, 8012ed0 <ucdr_deserialize_int64_t+0x110>
 8012e8a:	7d23      	ldrb	r3, [r4, #20]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	68a3      	ldr	r3, [r4, #8]
 8012e90:	d023      	beq.n	8012eda <ucdr_deserialize_int64_t+0x11a>
 8012e92:	79db      	ldrb	r3, [r3, #7]
 8012e94:	702b      	strb	r3, [r5, #0]
 8012e96:	68a3      	ldr	r3, [r4, #8]
 8012e98:	799b      	ldrb	r3, [r3, #6]
 8012e9a:	706b      	strb	r3, [r5, #1]
 8012e9c:	68a3      	ldr	r3, [r4, #8]
 8012e9e:	795b      	ldrb	r3, [r3, #5]
 8012ea0:	70ab      	strb	r3, [r5, #2]
 8012ea2:	68a3      	ldr	r3, [r4, #8]
 8012ea4:	791b      	ldrb	r3, [r3, #4]
 8012ea6:	70eb      	strb	r3, [r5, #3]
 8012ea8:	68a3      	ldr	r3, [r4, #8]
 8012eaa:	78db      	ldrb	r3, [r3, #3]
 8012eac:	712b      	strb	r3, [r5, #4]
 8012eae:	68a3      	ldr	r3, [r4, #8]
 8012eb0:	789b      	ldrb	r3, [r3, #2]
 8012eb2:	716b      	strb	r3, [r5, #5]
 8012eb4:	68a3      	ldr	r3, [r4, #8]
 8012eb6:	785b      	ldrb	r3, [r3, #1]
 8012eb8:	71ab      	strb	r3, [r5, #6]
 8012eba:	68a3      	ldr	r3, [r4, #8]
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	71eb      	strb	r3, [r5, #7]
 8012ec0:	2108      	movs	r1, #8
 8012ec2:	68a2      	ldr	r2, [r4, #8]
 8012ec4:	6923      	ldr	r3, [r4, #16]
 8012ec6:	440a      	add	r2, r1
 8012ec8:	7561      	strb	r1, [r4, #21]
 8012eca:	440b      	add	r3, r1
 8012ecc:	60a2      	str	r2, [r4, #8]
 8012ece:	6123      	str	r3, [r4, #16]
 8012ed0:	7da0      	ldrb	r0, [r4, #22]
 8012ed2:	f080 0001 	eor.w	r0, r0, #1
 8012ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	602a      	str	r2, [r5, #0]
 8012ee0:	606b      	str	r3, [r5, #4]
 8012ee2:	e7ed      	b.n	8012ec0 <ucdr_deserialize_int64_t+0x100>
 8012ee4:	68a2      	ldr	r2, [r4, #8]
 8012ee6:	6923      	ldr	r3, [r4, #16]
 8012ee8:	1b92      	subs	r2, r2, r6
 8012eea:	7da0      	ldrb	r0, [r4, #22]
 8012eec:	1b9b      	subs	r3, r3, r6
 8012eee:	f884 8015 	strb.w	r8, [r4, #21]
 8012ef2:	f080 0001 	eor.w	r0, r0, #1
 8012ef6:	60a2      	str	r2, [r4, #8]
 8012ef8:	6123      	str	r3, [r4, #16]
 8012efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012efe:	68a3      	ldr	r3, [r4, #8]
 8012f00:	799b      	ldrb	r3, [r3, #6]
 8012f02:	706b      	strb	r3, [r5, #1]
 8012f04:	1cab      	adds	r3, r5, #2
 8012f06:	68a2      	ldr	r2, [r4, #8]
 8012f08:	7952      	ldrb	r2, [r2, #5]
 8012f0a:	f803 2b01 	strb.w	r2, [r3], #1
 8012f0e:	68a2      	ldr	r2, [r4, #8]
 8012f10:	7912      	ldrb	r2, [r2, #4]
 8012f12:	f803 2b01 	strb.w	r2, [r3], #1
 8012f16:	68a2      	ldr	r2, [r4, #8]
 8012f18:	78d2      	ldrb	r2, [r2, #3]
 8012f1a:	f803 2b01 	strb.w	r2, [r3], #1
 8012f1e:	68a2      	ldr	r2, [r4, #8]
 8012f20:	7892      	ldrb	r2, [r2, #2]
 8012f22:	f803 2b01 	strb.w	r2, [r3], #1
 8012f26:	68a2      	ldr	r2, [r4, #8]
 8012f28:	7852      	ldrb	r2, [r2, #1]
 8012f2a:	f803 2b01 	strb.w	r2, [r3], #1
 8012f2e:	68a2      	ldr	r2, [r4, #8]
 8012f30:	7812      	ldrb	r2, [r2, #0]
 8012f32:	701a      	strb	r2, [r3, #0]
 8012f34:	e796      	b.n	8012e64 <ucdr_deserialize_int64_t+0xa4>
 8012f36:	4639      	mov	r1, r7
 8012f38:	4632      	mov	r2, r6
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f00e f827 	bl	8020f8e <memcpy>
 8012f40:	464a      	mov	r2, r9
 8012f42:	19a8      	adds	r0, r5, r6
 8012f44:	68a1      	ldr	r1, [r4, #8]
 8012f46:	f00e f822 	bl	8020f8e <memcpy>
 8012f4a:	e78b      	b.n	8012e64 <ucdr_deserialize_int64_t+0xa4>

08012f4c <ucdr_serialize_double>:
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	4604      	mov	r4, r0
 8012f52:	b082      	sub	sp, #8
 8012f54:	2108      	movs	r1, #8
 8012f56:	ed8d 0b00 	vstr	d0, [sp]
 8012f5a:	f000 f9ed 	bl	8013338 <ucdr_buffer_alignment>
 8012f5e:	4601      	mov	r1, r0
 8012f60:	4620      	mov	r0, r4
 8012f62:	7d67      	ldrb	r7, [r4, #21]
 8012f64:	f000 fa30 	bl	80133c8 <ucdr_advance_buffer>
 8012f68:	2108      	movs	r1, #8
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 f984 	bl	8013278 <ucdr_check_buffer_available_for>
 8012f70:	2800      	cmp	r0, #0
 8012f72:	d14e      	bne.n	8013012 <ucdr_serialize_double+0xc6>
 8012f74:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012f78:	42ab      	cmp	r3, r5
 8012f7a:	d945      	bls.n	8013008 <ucdr_serialize_double+0xbc>
 8012f7c:	1b5e      	subs	r6, r3, r5
 8012f7e:	60a3      	str	r3, [r4, #8]
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	4620      	mov	r0, r4
 8012f84:	f1c6 0808 	rsb	r8, r6, #8
 8012f88:	4433      	add	r3, r6
 8012f8a:	4641      	mov	r1, r8
 8012f8c:	6123      	str	r3, [r4, #16]
 8012f8e:	f000 f97f 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8012f92:	2800      	cmp	r0, #0
 8012f94:	d074      	beq.n	8013080 <ucdr_serialize_double+0x134>
 8012f96:	7d23      	ldrb	r3, [r4, #20]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	f000 809b 	beq.w	80130d4 <ucdr_serialize_double+0x188>
 8012f9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012fa2:	702b      	strb	r3, [r5, #0]
 8012fa4:	2e00      	cmp	r6, #0
 8012fa6:	d078      	beq.n	801309a <ucdr_serialize_double+0x14e>
 8012fa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012fac:	2e01      	cmp	r6, #1
 8012fae:	706b      	strb	r3, [r5, #1]
 8012fb0:	d077      	beq.n	80130a2 <ucdr_serialize_double+0x156>
 8012fb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012fb6:	2e02      	cmp	r6, #2
 8012fb8:	70ab      	strb	r3, [r5, #2]
 8012fba:	d076      	beq.n	80130aa <ucdr_serialize_double+0x15e>
 8012fbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012fc0:	2e03      	cmp	r6, #3
 8012fc2:	70eb      	strb	r3, [r5, #3]
 8012fc4:	d075      	beq.n	80130b2 <ucdr_serialize_double+0x166>
 8012fc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012fca:	2e04      	cmp	r6, #4
 8012fcc:	712b      	strb	r3, [r5, #4]
 8012fce:	d074      	beq.n	80130ba <ucdr_serialize_double+0x16e>
 8012fd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012fd4:	2e05      	cmp	r6, #5
 8012fd6:	716b      	strb	r3, [r5, #5]
 8012fd8:	d073      	beq.n	80130c2 <ucdr_serialize_double+0x176>
 8012fda:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012fde:	2e06      	cmp	r6, #6
 8012fe0:	71ab      	strb	r3, [r5, #6]
 8012fe2:	d072      	beq.n	80130ca <ucdr_serialize_double+0x17e>
 8012fe4:	f89d 3000 	ldrb.w	r3, [sp]
 8012fe8:	71eb      	strb	r3, [r5, #7]
 8012fea:	6923      	ldr	r3, [r4, #16]
 8012fec:	2108      	movs	r1, #8
 8012fee:	68a2      	ldr	r2, [r4, #8]
 8012ff0:	3308      	adds	r3, #8
 8012ff2:	7da0      	ldrb	r0, [r4, #22]
 8012ff4:	4442      	add	r2, r8
 8012ff6:	7561      	strb	r1, [r4, #21]
 8012ff8:	1b9e      	subs	r6, r3, r6
 8012ffa:	f080 0001 	eor.w	r0, r0, #1
 8012ffe:	60a2      	str	r2, [r4, #8]
 8013000:	6126      	str	r6, [r4, #16]
 8013002:	b002      	add	sp, #8
 8013004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013008:	2108      	movs	r1, #8
 801300a:	4620      	mov	r0, r4
 801300c:	f000 f940 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8013010:	b350      	cbz	r0, 8013068 <ucdr_serialize_double+0x11c>
 8013012:	7d23      	ldrb	r3, [r4, #20]
 8013014:	2b01      	cmp	r3, #1
 8013016:	d02d      	beq.n	8013074 <ucdr_serialize_double+0x128>
 8013018:	68a3      	ldr	r3, [r4, #8]
 801301a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801301e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013022:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013026:	7018      	strb	r0, [r3, #0]
 8013028:	68a3      	ldr	r3, [r4, #8]
 801302a:	705a      	strb	r2, [r3, #1]
 801302c:	68a3      	ldr	r3, [r4, #8]
 801302e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013032:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013036:	7099      	strb	r1, [r3, #2]
 8013038:	68a3      	ldr	r3, [r4, #8]
 801303a:	70da      	strb	r2, [r3, #3]
 801303c:	68a3      	ldr	r3, [r4, #8]
 801303e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013042:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013046:	7118      	strb	r0, [r3, #4]
 8013048:	68a3      	ldr	r3, [r4, #8]
 801304a:	715a      	strb	r2, [r3, #5]
 801304c:	68a3      	ldr	r3, [r4, #8]
 801304e:	f89d 2000 	ldrb.w	r2, [sp]
 8013052:	7199      	strb	r1, [r3, #6]
 8013054:	68a3      	ldr	r3, [r4, #8]
 8013056:	71da      	strb	r2, [r3, #7]
 8013058:	2108      	movs	r1, #8
 801305a:	68a2      	ldr	r2, [r4, #8]
 801305c:	6923      	ldr	r3, [r4, #16]
 801305e:	440a      	add	r2, r1
 8013060:	7561      	strb	r1, [r4, #21]
 8013062:	440b      	add	r3, r1
 8013064:	60a2      	str	r2, [r4, #8]
 8013066:	6123      	str	r3, [r4, #16]
 8013068:	7da0      	ldrb	r0, [r4, #22]
 801306a:	f080 0001 	eor.w	r0, r0, #1
 801306e:	b002      	add	sp, #8
 8013070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013074:	466b      	mov	r3, sp
 8013076:	68a2      	ldr	r2, [r4, #8]
 8013078:	cb03      	ldmia	r3!, {r0, r1}
 801307a:	6010      	str	r0, [r2, #0]
 801307c:	6051      	str	r1, [r2, #4]
 801307e:	e7eb      	b.n	8013058 <ucdr_serialize_double+0x10c>
 8013080:	68a2      	ldr	r2, [r4, #8]
 8013082:	6923      	ldr	r3, [r4, #16]
 8013084:	7da0      	ldrb	r0, [r4, #22]
 8013086:	1b92      	subs	r2, r2, r6
 8013088:	1b9b      	subs	r3, r3, r6
 801308a:	7567      	strb	r7, [r4, #21]
 801308c:	f080 0001 	eor.w	r0, r0, #1
 8013090:	60a2      	str	r2, [r4, #8]
 8013092:	6123      	str	r3, [r4, #16]
 8013094:	b002      	add	sp, #8
 8013096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801309a:	68a3      	ldr	r3, [r4, #8]
 801309c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80130a0:	701a      	strb	r2, [r3, #0]
 80130a2:	68a3      	ldr	r3, [r4, #8]
 80130a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80130a8:	701a      	strb	r2, [r3, #0]
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80130b0:	701a      	strb	r2, [r3, #0]
 80130b2:	68a3      	ldr	r3, [r4, #8]
 80130b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80130b8:	701a      	strb	r2, [r3, #0]
 80130ba:	68a3      	ldr	r3, [r4, #8]
 80130bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80130c0:	701a      	strb	r2, [r3, #0]
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80130c8:	701a      	strb	r2, [r3, #0]
 80130ca:	68a3      	ldr	r3, [r4, #8]
 80130cc:	f89d 2000 	ldrb.w	r2, [sp]
 80130d0:	701a      	strb	r2, [r3, #0]
 80130d2:	e78a      	b.n	8012fea <ucdr_serialize_double+0x9e>
 80130d4:	4628      	mov	r0, r5
 80130d6:	466d      	mov	r5, sp
 80130d8:	4632      	mov	r2, r6
 80130da:	4629      	mov	r1, r5
 80130dc:	f00d ff57 	bl	8020f8e <memcpy>
 80130e0:	4642      	mov	r2, r8
 80130e2:	19a9      	adds	r1, r5, r6
 80130e4:	68a0      	ldr	r0, [r4, #8]
 80130e6:	f00d ff52 	bl	8020f8e <memcpy>
 80130ea:	e77e      	b.n	8012fea <ucdr_serialize_double+0x9e>

080130ec <ucdr_deserialize_double>:
 80130ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130f0:	4604      	mov	r4, r0
 80130f2:	460d      	mov	r5, r1
 80130f4:	2108      	movs	r1, #8
 80130f6:	f000 f91f 	bl	8013338 <ucdr_buffer_alignment>
 80130fa:	4601      	mov	r1, r0
 80130fc:	4620      	mov	r0, r4
 80130fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013102:	f000 f961 	bl	80133c8 <ucdr_advance_buffer>
 8013106:	2108      	movs	r1, #8
 8013108:	4620      	mov	r0, r4
 801310a:	f000 f8b5 	bl	8013278 <ucdr_check_buffer_available_for>
 801310e:	2800      	cmp	r0, #0
 8013110:	d151      	bne.n	80131b6 <ucdr_deserialize_double+0xca>
 8013112:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013116:	42be      	cmp	r6, r7
 8013118:	d948      	bls.n	80131ac <ucdr_deserialize_double+0xc0>
 801311a:	6923      	ldr	r3, [r4, #16]
 801311c:	4620      	mov	r0, r4
 801311e:	60a6      	str	r6, [r4, #8]
 8013120:	1bf6      	subs	r6, r6, r7
 8013122:	4433      	add	r3, r6
 8013124:	f1c6 0908 	rsb	r9, r6, #8
 8013128:	6123      	str	r3, [r4, #16]
 801312a:	4649      	mov	r1, r9
 801312c:	f000 f8b0 	bl	8013290 <ucdr_check_final_buffer_behavior>
 8013130:	2800      	cmp	r0, #0
 8013132:	d06d      	beq.n	8013210 <ucdr_deserialize_double+0x124>
 8013134:	7d23      	ldrb	r3, [r4, #20]
 8013136:	2b01      	cmp	r3, #1
 8013138:	f000 8093 	beq.w	8013262 <ucdr_deserialize_double+0x176>
 801313c:	79fb      	ldrb	r3, [r7, #7]
 801313e:	702b      	strb	r3, [r5, #0]
 8013140:	2e00      	cmp	r6, #0
 8013142:	d072      	beq.n	801322a <ucdr_deserialize_double+0x13e>
 8013144:	79bb      	ldrb	r3, [r7, #6]
 8013146:	2e01      	cmp	r6, #1
 8013148:	706b      	strb	r3, [r5, #1]
 801314a:	f105 0302 	add.w	r3, r5, #2
 801314e:	d070      	beq.n	8013232 <ucdr_deserialize_double+0x146>
 8013150:	797b      	ldrb	r3, [r7, #5]
 8013152:	2e02      	cmp	r6, #2
 8013154:	70ab      	strb	r3, [r5, #2]
 8013156:	f105 0303 	add.w	r3, r5, #3
 801315a:	d06e      	beq.n	801323a <ucdr_deserialize_double+0x14e>
 801315c:	793b      	ldrb	r3, [r7, #4]
 801315e:	2e03      	cmp	r6, #3
 8013160:	70eb      	strb	r3, [r5, #3]
 8013162:	f105 0304 	add.w	r3, r5, #4
 8013166:	d06c      	beq.n	8013242 <ucdr_deserialize_double+0x156>
 8013168:	78fb      	ldrb	r3, [r7, #3]
 801316a:	2e04      	cmp	r6, #4
 801316c:	712b      	strb	r3, [r5, #4]
 801316e:	f105 0305 	add.w	r3, r5, #5
 8013172:	d06a      	beq.n	801324a <ucdr_deserialize_double+0x15e>
 8013174:	78bb      	ldrb	r3, [r7, #2]
 8013176:	2e05      	cmp	r6, #5
 8013178:	716b      	strb	r3, [r5, #5]
 801317a:	f105 0306 	add.w	r3, r5, #6
 801317e:	d068      	beq.n	8013252 <ucdr_deserialize_double+0x166>
 8013180:	787b      	ldrb	r3, [r7, #1]
 8013182:	2e06      	cmp	r6, #6
 8013184:	71ab      	strb	r3, [r5, #6]
 8013186:	f105 0307 	add.w	r3, r5, #7
 801318a:	d066      	beq.n	801325a <ucdr_deserialize_double+0x16e>
 801318c:	783b      	ldrb	r3, [r7, #0]
 801318e:	71eb      	strb	r3, [r5, #7]
 8013190:	6923      	ldr	r3, [r4, #16]
 8013192:	2108      	movs	r1, #8
 8013194:	68a2      	ldr	r2, [r4, #8]
 8013196:	3308      	adds	r3, #8
 8013198:	7da0      	ldrb	r0, [r4, #22]
 801319a:	444a      	add	r2, r9
 801319c:	7561      	strb	r1, [r4, #21]
 801319e:	1b9e      	subs	r6, r3, r6
 80131a0:	f080 0001 	eor.w	r0, r0, #1
 80131a4:	60a2      	str	r2, [r4, #8]
 80131a6:	6126      	str	r6, [r4, #16]
 80131a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131ac:	2108      	movs	r1, #8
 80131ae:	4620      	mov	r0, r4
 80131b0:	f000 f86e 	bl	8013290 <ucdr_check_final_buffer_behavior>
 80131b4:	b310      	cbz	r0, 80131fc <ucdr_deserialize_double+0x110>
 80131b6:	7d23      	ldrb	r3, [r4, #20]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	68a3      	ldr	r3, [r4, #8]
 80131bc:	d023      	beq.n	8013206 <ucdr_deserialize_double+0x11a>
 80131be:	79db      	ldrb	r3, [r3, #7]
 80131c0:	702b      	strb	r3, [r5, #0]
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	799b      	ldrb	r3, [r3, #6]
 80131c6:	706b      	strb	r3, [r5, #1]
 80131c8:	68a3      	ldr	r3, [r4, #8]
 80131ca:	795b      	ldrb	r3, [r3, #5]
 80131cc:	70ab      	strb	r3, [r5, #2]
 80131ce:	68a3      	ldr	r3, [r4, #8]
 80131d0:	791b      	ldrb	r3, [r3, #4]
 80131d2:	70eb      	strb	r3, [r5, #3]
 80131d4:	68a3      	ldr	r3, [r4, #8]
 80131d6:	78db      	ldrb	r3, [r3, #3]
 80131d8:	712b      	strb	r3, [r5, #4]
 80131da:	68a3      	ldr	r3, [r4, #8]
 80131dc:	789b      	ldrb	r3, [r3, #2]
 80131de:	716b      	strb	r3, [r5, #5]
 80131e0:	68a3      	ldr	r3, [r4, #8]
 80131e2:	785b      	ldrb	r3, [r3, #1]
 80131e4:	71ab      	strb	r3, [r5, #6]
 80131e6:	68a3      	ldr	r3, [r4, #8]
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	71eb      	strb	r3, [r5, #7]
 80131ec:	2108      	movs	r1, #8
 80131ee:	68a2      	ldr	r2, [r4, #8]
 80131f0:	6923      	ldr	r3, [r4, #16]
 80131f2:	440a      	add	r2, r1
 80131f4:	7561      	strb	r1, [r4, #21]
 80131f6:	440b      	add	r3, r1
 80131f8:	60a2      	str	r2, [r4, #8]
 80131fa:	6123      	str	r3, [r4, #16]
 80131fc:	7da0      	ldrb	r0, [r4, #22]
 80131fe:	f080 0001 	eor.w	r0, r0, #1
 8013202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	602a      	str	r2, [r5, #0]
 801320c:	606b      	str	r3, [r5, #4]
 801320e:	e7ed      	b.n	80131ec <ucdr_deserialize_double+0x100>
 8013210:	68a2      	ldr	r2, [r4, #8]
 8013212:	6923      	ldr	r3, [r4, #16]
 8013214:	1b92      	subs	r2, r2, r6
 8013216:	7da0      	ldrb	r0, [r4, #22]
 8013218:	1b9b      	subs	r3, r3, r6
 801321a:	f884 8015 	strb.w	r8, [r4, #21]
 801321e:	f080 0001 	eor.w	r0, r0, #1
 8013222:	60a2      	str	r2, [r4, #8]
 8013224:	6123      	str	r3, [r4, #16]
 8013226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801322a:	68a3      	ldr	r3, [r4, #8]
 801322c:	799b      	ldrb	r3, [r3, #6]
 801322e:	706b      	strb	r3, [r5, #1]
 8013230:	1cab      	adds	r3, r5, #2
 8013232:	68a2      	ldr	r2, [r4, #8]
 8013234:	7952      	ldrb	r2, [r2, #5]
 8013236:	f803 2b01 	strb.w	r2, [r3], #1
 801323a:	68a2      	ldr	r2, [r4, #8]
 801323c:	7912      	ldrb	r2, [r2, #4]
 801323e:	f803 2b01 	strb.w	r2, [r3], #1
 8013242:	68a2      	ldr	r2, [r4, #8]
 8013244:	78d2      	ldrb	r2, [r2, #3]
 8013246:	f803 2b01 	strb.w	r2, [r3], #1
 801324a:	68a2      	ldr	r2, [r4, #8]
 801324c:	7892      	ldrb	r2, [r2, #2]
 801324e:	f803 2b01 	strb.w	r2, [r3], #1
 8013252:	68a2      	ldr	r2, [r4, #8]
 8013254:	7852      	ldrb	r2, [r2, #1]
 8013256:	f803 2b01 	strb.w	r2, [r3], #1
 801325a:	68a2      	ldr	r2, [r4, #8]
 801325c:	7812      	ldrb	r2, [r2, #0]
 801325e:	701a      	strb	r2, [r3, #0]
 8013260:	e796      	b.n	8013190 <ucdr_deserialize_double+0xa4>
 8013262:	4639      	mov	r1, r7
 8013264:	4632      	mov	r2, r6
 8013266:	4628      	mov	r0, r5
 8013268:	f00d fe91 	bl	8020f8e <memcpy>
 801326c:	464a      	mov	r2, r9
 801326e:	19a8      	adds	r0, r5, r6
 8013270:	68a1      	ldr	r1, [r4, #8]
 8013272:	f00d fe8c 	bl	8020f8e <memcpy>
 8013276:	e78b      	b.n	8013190 <ucdr_deserialize_double+0xa4>

08013278 <ucdr_check_buffer_available_for>:
 8013278:	7d83      	ldrb	r3, [r0, #22]
 801327a:	b93b      	cbnz	r3, 801328c <ucdr_check_buffer_available_for+0x14>
 801327c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013280:	4419      	add	r1, r3
 8013282:	4288      	cmp	r0, r1
 8013284:	bf34      	ite	cc
 8013286:	2000      	movcc	r0, #0
 8013288:	2001      	movcs	r0, #1
 801328a:	4770      	bx	lr
 801328c:	2000      	movs	r0, #0
 801328e:	4770      	bx	lr

08013290 <ucdr_check_final_buffer_behavior>:
 8013290:	7d83      	ldrb	r3, [r0, #22]
 8013292:	b943      	cbnz	r3, 80132a6 <ucdr_check_final_buffer_behavior+0x16>
 8013294:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013298:	b510      	push	{r4, lr}
 801329a:	4291      	cmp	r1, r2
 801329c:	4604      	mov	r4, r0
 801329e:	d205      	bcs.n	80132ac <ucdr_check_final_buffer_behavior+0x1c>
 80132a0:	2301      	movs	r3, #1
 80132a2:	4618      	mov	r0, r3
 80132a4:	bd10      	pop	{r4, pc}
 80132a6:	2300      	movs	r3, #0
 80132a8:	4618      	mov	r0, r3
 80132aa:	4770      	bx	lr
 80132ac:	6982      	ldr	r2, [r0, #24]
 80132ae:	b13a      	cbz	r2, 80132c0 <ucdr_check_final_buffer_behavior+0x30>
 80132b0:	69c1      	ldr	r1, [r0, #28]
 80132b2:	4790      	blx	r2
 80132b4:	f080 0301 	eor.w	r3, r0, #1
 80132b8:	75a0      	strb	r0, [r4, #22]
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	4618      	mov	r0, r3
 80132be:	bd10      	pop	{r4, pc}
 80132c0:	2001      	movs	r0, #1
 80132c2:	75a0      	strb	r0, [r4, #22]
 80132c4:	e7fa      	b.n	80132bc <ucdr_check_final_buffer_behavior+0x2c>
 80132c6:	bf00      	nop

080132c8 <ucdr_set_on_full_buffer_callback>:
 80132c8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop

080132d0 <ucdr_init_buffer_origin_offset_endian>:
 80132d0:	b410      	push	{r4}
 80132d2:	9c01      	ldr	r4, [sp, #4]
 80132d4:	440a      	add	r2, r1
 80132d6:	6001      	str	r1, [r0, #0]
 80132d8:	6042      	str	r2, [r0, #4]
 80132da:	190a      	adds	r2, r1, r4
 80132dc:	441c      	add	r4, r3
 80132de:	6082      	str	r2, [r0, #8]
 80132e0:	2200      	movs	r2, #0
 80132e2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80132e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80132ea:	7542      	strb	r2, [r0, #21]
 80132ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132f0:	7582      	strb	r2, [r0, #22]
 80132f2:	7503      	strb	r3, [r0, #20]
 80132f4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop

080132fc <ucdr_init_buffer_origin_offset>:
 80132fc:	b510      	push	{r4, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	9c04      	ldr	r4, [sp, #16]
 8013302:	9400      	str	r4, [sp, #0]
 8013304:	2401      	movs	r4, #1
 8013306:	9401      	str	r4, [sp, #4]
 8013308:	f7ff ffe2 	bl	80132d0 <ucdr_init_buffer_origin_offset_endian>
 801330c:	b002      	add	sp, #8
 801330e:	bd10      	pop	{r4, pc}

08013310 <ucdr_init_buffer_origin>:
 8013310:	b510      	push	{r4, lr}
 8013312:	2400      	movs	r4, #0
 8013314:	b082      	sub	sp, #8
 8013316:	9400      	str	r4, [sp, #0]
 8013318:	f7ff fff0 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801331c:	b002      	add	sp, #8
 801331e:	bd10      	pop	{r4, pc}

08013320 <ucdr_init_buffer>:
 8013320:	2300      	movs	r3, #0
 8013322:	f7ff bff5 	b.w	8013310 <ucdr_init_buffer_origin>
 8013326:	bf00      	nop

08013328 <ucdr_alignment>:
 8013328:	fbb0 f2f1 	udiv	r2, r0, r1
 801332c:	fb02 0011 	mls	r0, r2, r1, r0
 8013330:	1e4b      	subs	r3, r1, #1
 8013332:	1a08      	subs	r0, r1, r0
 8013334:	4018      	ands	r0, r3
 8013336:	4770      	bx	lr

08013338 <ucdr_buffer_alignment>:
 8013338:	7d43      	ldrb	r3, [r0, #21]
 801333a:	428b      	cmp	r3, r1
 801333c:	d209      	bcs.n	8013352 <ucdr_buffer_alignment+0x1a>
 801333e:	6903      	ldr	r3, [r0, #16]
 8013340:	1e4a      	subs	r2, r1, #1
 8013342:	fbb3 f0f1 	udiv	r0, r3, r1
 8013346:	fb01 3010 	mls	r0, r1, r0, r3
 801334a:	1a09      	subs	r1, r1, r0
 801334c:	ea01 0002 	and.w	r0, r1, r2
 8013350:	4770      	bx	lr
 8013352:	2000      	movs	r0, #0
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop

08013358 <ucdr_align_to>:
 8013358:	b538      	push	{r3, r4, r5, lr}
 801335a:	4604      	mov	r4, r0
 801335c:	460d      	mov	r5, r1
 801335e:	f7ff ffeb 	bl	8013338 <ucdr_buffer_alignment>
 8013362:	68a3      	ldr	r3, [r4, #8]
 8013364:	7565      	strb	r5, [r4, #21]
 8013366:	181a      	adds	r2, r3, r0
 8013368:	6923      	ldr	r3, [r4, #16]
 801336a:	4418      	add	r0, r3
 801336c:	6863      	ldr	r3, [r4, #4]
 801336e:	4293      	cmp	r3, r2
 8013370:	6120      	str	r0, [r4, #16]
 8013372:	bf28      	it	cs
 8013374:	4613      	movcs	r3, r2
 8013376:	60a3      	str	r3, [r4, #8]
 8013378:	bd38      	pop	{r3, r4, r5, pc}
 801337a:	bf00      	nop

0801337c <ucdr_buffer_length>:
 801337c:	6882      	ldr	r2, [r0, #8]
 801337e:	6800      	ldr	r0, [r0, #0]
 8013380:	1a10      	subs	r0, r2, r0
 8013382:	4770      	bx	lr

08013384 <ucdr_buffer_remaining>:
 8013384:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013388:	1a10      	subs	r0, r2, r0
 801338a:	4770      	bx	lr

0801338c <ucdr_check_final_buffer_behavior_array>:
 801338c:	b538      	push	{r3, r4, r5, lr}
 801338e:	7d83      	ldrb	r3, [r0, #22]
 8013390:	b9a3      	cbnz	r3, 80133bc <ucdr_check_final_buffer_behavior_array+0x30>
 8013392:	4604      	mov	r4, r0
 8013394:	460d      	mov	r5, r1
 8013396:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801339a:	429a      	cmp	r2, r3
 801339c:	d300      	bcc.n	80133a0 <ucdr_check_final_buffer_behavior_array+0x14>
 801339e:	b931      	cbnz	r1, 80133ae <ucdr_check_final_buffer_behavior_array+0x22>
 80133a0:	4620      	mov	r0, r4
 80133a2:	f7ff ffef 	bl	8013384 <ucdr_buffer_remaining>
 80133a6:	42a8      	cmp	r0, r5
 80133a8:	bf28      	it	cs
 80133aa:	4628      	movcs	r0, r5
 80133ac:	bd38      	pop	{r3, r4, r5, pc}
 80133ae:	6983      	ldr	r3, [r0, #24]
 80133b0:	b133      	cbz	r3, 80133c0 <ucdr_check_final_buffer_behavior_array+0x34>
 80133b2:	69c1      	ldr	r1, [r0, #28]
 80133b4:	4798      	blx	r3
 80133b6:	75a0      	strb	r0, [r4, #22]
 80133b8:	2800      	cmp	r0, #0
 80133ba:	d0f1      	beq.n	80133a0 <ucdr_check_final_buffer_behavior_array+0x14>
 80133bc:	2000      	movs	r0, #0
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	2301      	movs	r3, #1
 80133c2:	7583      	strb	r3, [r0, #22]
 80133c4:	e7fa      	b.n	80133bc <ucdr_check_final_buffer_behavior_array+0x30>
 80133c6:	bf00      	nop

080133c8 <ucdr_advance_buffer>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	4604      	mov	r4, r0
 80133cc:	460d      	mov	r5, r1
 80133ce:	f7ff ff53 	bl	8013278 <ucdr_check_buffer_available_for>
 80133d2:	b178      	cbz	r0, 80133f4 <ucdr_advance_buffer+0x2c>
 80133d4:	6923      	ldr	r3, [r4, #16]
 80133d6:	68a2      	ldr	r2, [r4, #8]
 80133d8:	442b      	add	r3, r5
 80133da:	442a      	add	r2, r5
 80133dc:	6123      	str	r3, [r4, #16]
 80133de:	2301      	movs	r3, #1
 80133e0:	60a2      	str	r2, [r4, #8]
 80133e2:	7563      	strb	r3, [r4, #21]
 80133e4:	bd38      	pop	{r3, r4, r5, pc}
 80133e6:	68a2      	ldr	r2, [r4, #8]
 80133e8:	1a2d      	subs	r5, r5, r0
 80133ea:	6923      	ldr	r3, [r4, #16]
 80133ec:	4402      	add	r2, r0
 80133ee:	4418      	add	r0, r3
 80133f0:	60a2      	str	r2, [r4, #8]
 80133f2:	6120      	str	r0, [r4, #16]
 80133f4:	4629      	mov	r1, r5
 80133f6:	2201      	movs	r2, #1
 80133f8:	4620      	mov	r0, r4
 80133fa:	f7ff ffc7 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 80133fe:	2800      	cmp	r0, #0
 8013400:	d1f1      	bne.n	80133e6 <ucdr_advance_buffer+0x1e>
 8013402:	2301      	movs	r3, #1
 8013404:	7563      	strb	r3, [r4, #21]
 8013406:	bd38      	pop	{r3, r4, r5, pc}

08013408 <ucdr_serialize_sequence_char>:
 8013408:	b570      	push	{r4, r5, r6, lr}
 801340a:	4615      	mov	r5, r2
 801340c:	460e      	mov	r6, r1
 801340e:	7d01      	ldrb	r1, [r0, #20]
 8013410:	4604      	mov	r4, r0
 8013412:	f7fe ff5b 	bl	80122cc <ucdr_serialize_endian_uint32_t>
 8013416:	b90d      	cbnz	r5, 801341c <ucdr_serialize_sequence_char+0x14>
 8013418:	2001      	movs	r0, #1
 801341a:	bd70      	pop	{r4, r5, r6, pc}
 801341c:	462b      	mov	r3, r5
 801341e:	4632      	mov	r2, r6
 8013420:	7d21      	ldrb	r1, [r4, #20]
 8013422:	4620      	mov	r0, r4
 8013424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013428:	f004 b908 	b.w	801763c <ucdr_serialize_endian_array_char>

0801342c <ucdr_deserialize_sequence_char>:
 801342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013430:	461d      	mov	r5, r3
 8013432:	4616      	mov	r6, r2
 8013434:	460f      	mov	r7, r1
 8013436:	461a      	mov	r2, r3
 8013438:	7d01      	ldrb	r1, [r0, #20]
 801343a:	4604      	mov	r4, r0
 801343c:	f7ff f86e 	bl	801251c <ucdr_deserialize_endian_uint32_t>
 8013440:	682b      	ldr	r3, [r5, #0]
 8013442:	429e      	cmp	r6, r3
 8013444:	d201      	bcs.n	801344a <ucdr_deserialize_sequence_char+0x1e>
 8013446:	2201      	movs	r2, #1
 8013448:	75a2      	strb	r2, [r4, #22]
 801344a:	b913      	cbnz	r3, 8013452 <ucdr_deserialize_sequence_char+0x26>
 801344c:	2001      	movs	r0, #1
 801344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013452:	463a      	mov	r2, r7
 8013454:	7d21      	ldrb	r1, [r4, #20]
 8013456:	4620      	mov	r0, r4
 8013458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801345c:	f004 b920 	b.w	80176a0 <ucdr_deserialize_endian_array_char>

08013460 <ucdr_serialize_sequence_uint8_t>:
 8013460:	b570      	push	{r4, r5, r6, lr}
 8013462:	4615      	mov	r5, r2
 8013464:	460e      	mov	r6, r1
 8013466:	7d01      	ldrb	r1, [r0, #20]
 8013468:	4604      	mov	r4, r0
 801346a:	f7fe ff2f 	bl	80122cc <ucdr_serialize_endian_uint32_t>
 801346e:	b90d      	cbnz	r5, 8013474 <ucdr_serialize_sequence_uint8_t+0x14>
 8013470:	2001      	movs	r0, #1
 8013472:	bd70      	pop	{r4, r5, r6, pc}
 8013474:	462b      	mov	r3, r5
 8013476:	4632      	mov	r2, r6
 8013478:	7d21      	ldrb	r1, [r4, #20]
 801347a:	4620      	mov	r0, r4
 801347c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013480:	f004 b974 	b.w	801776c <ucdr_serialize_endian_array_uint8_t>

08013484 <ucdr_deserialize_sequence_uint8_t>:
 8013484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013488:	461d      	mov	r5, r3
 801348a:	4616      	mov	r6, r2
 801348c:	460f      	mov	r7, r1
 801348e:	461a      	mov	r2, r3
 8013490:	7d01      	ldrb	r1, [r0, #20]
 8013492:	4604      	mov	r4, r0
 8013494:	f7ff f842 	bl	801251c <ucdr_deserialize_endian_uint32_t>
 8013498:	682b      	ldr	r3, [r5, #0]
 801349a:	429e      	cmp	r6, r3
 801349c:	d201      	bcs.n	80134a2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 801349e:	2201      	movs	r2, #1
 80134a0:	75a2      	strb	r2, [r4, #22]
 80134a2:	b913      	cbnz	r3, 80134aa <ucdr_deserialize_sequence_uint8_t+0x26>
 80134a4:	2001      	movs	r0, #1
 80134a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134aa:	463a      	mov	r2, r7
 80134ac:	7d21      	ldrb	r1, [r4, #20]
 80134ae:	4620      	mov	r0, r4
 80134b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134b4:	f004 b9c0 	b.w	8017838 <ucdr_deserialize_endian_array_uint8_t>

080134b8 <rcl_get_zero_initialized_init_options>:
 80134b8:	2000      	movs	r0, #0
 80134ba:	4770      	bx	lr

080134bc <rcl_init_options_init>:
 80134bc:	b084      	sub	sp, #16
 80134be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134c0:	b097      	sub	sp, #92	; 0x5c
 80134c2:	ae1d      	add	r6, sp, #116	; 0x74
 80134c4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d058      	beq.n	801357e <rcl_init_options_init+0xc2>
 80134cc:	6803      	ldr	r3, [r0, #0]
 80134ce:	4605      	mov	r5, r0
 80134d0:	b133      	cbz	r3, 80134e0 <rcl_init_options_init+0x24>
 80134d2:	2464      	movs	r4, #100	; 0x64
 80134d4:	4620      	mov	r0, r4
 80134d6:	b017      	add	sp, #92	; 0x5c
 80134d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80134dc:	b004      	add	sp, #16
 80134de:	4770      	bx	lr
 80134e0:	4630      	mov	r0, r6
 80134e2:	f001 fdf3 	bl	80150cc <rcutils_allocator_is_valid>
 80134e6:	2800      	cmp	r0, #0
 80134e8:	d049      	beq.n	801357e <rcl_init_options_init+0xc2>
 80134ea:	46b4      	mov	ip, r6
 80134ec:	ac11      	add	r4, sp, #68	; 0x44
 80134ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134f4:	f8dc 3000 	ldr.w	r3, [ip]
 80134f8:	2050      	movs	r0, #80	; 0x50
 80134fa:	9921      	ldr	r1, [sp, #132]	; 0x84
 80134fc:	6023      	str	r3, [r4, #0]
 80134fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013500:	4798      	blx	r3
 8013502:	4604      	mov	r4, r0
 8013504:	6028      	str	r0, [r5, #0]
 8013506:	2800      	cmp	r0, #0
 8013508:	d03b      	beq.n	8013582 <rcl_init_options_init+0xc6>
 801350a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801350e:	4686      	mov	lr, r0
 8013510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013514:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013518:	f8dc 3000 	ldr.w	r3, [ip]
 801351c:	a802      	add	r0, sp, #8
 801351e:	f8ce 3000 	str.w	r3, [lr]
 8013522:	f001 fff1 	bl	8015508 <rmw_get_zero_initialized_init_options>
 8013526:	f10d 0e08 	add.w	lr, sp, #8
 801352a:	f104 0c18 	add.w	ip, r4, #24
 801352e:	682f      	ldr	r7, [r5, #0]
 8013530:	ac20      	add	r4, sp, #128	; 0x80
 8013532:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801353a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801353e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013542:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801354a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801354e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013556:	e88d 0003 	stmia.w	sp, {r0, r1}
 801355a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801355e:	f107 0018 	add.w	r0, r7, #24
 8013562:	f002 f8f9 	bl	8015758 <rmw_init_options_init>
 8013566:	4604      	mov	r4, r0
 8013568:	2800      	cmp	r0, #0
 801356a:	d0b3      	beq.n	80134d4 <rcl_init_options_init+0x18>
 801356c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801356e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013570:	6828      	ldr	r0, [r5, #0]
 8013572:	4798      	blx	r3
 8013574:	4620      	mov	r0, r4
 8013576:	f007 ff8d 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 801357a:	4604      	mov	r4, r0
 801357c:	e7aa      	b.n	80134d4 <rcl_init_options_init+0x18>
 801357e:	240b      	movs	r4, #11
 8013580:	e7a8      	b.n	80134d4 <rcl_init_options_init+0x18>
 8013582:	240a      	movs	r4, #10
 8013584:	e7a6      	b.n	80134d4 <rcl_init_options_init+0x18>
 8013586:	bf00      	nop

08013588 <rcl_init_options_fini>:
 8013588:	b530      	push	{r4, r5, lr}
 801358a:	b087      	sub	sp, #28
 801358c:	b1f0      	cbz	r0, 80135cc <rcl_init_options_fini+0x44>
 801358e:	6803      	ldr	r3, [r0, #0]
 8013590:	4604      	mov	r4, r0
 8013592:	b1db      	cbz	r3, 80135cc <rcl_init_options_fini+0x44>
 8013594:	469c      	mov	ip, r3
 8013596:	f10d 0e04 	add.w	lr, sp, #4
 801359a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801359e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135a2:	f8dc 3000 	ldr.w	r3, [ip]
 80135a6:	a801      	add	r0, sp, #4
 80135a8:	f8ce 3000 	str.w	r3, [lr]
 80135ac:	f001 fd8e 	bl	80150cc <rcutils_allocator_is_valid>
 80135b0:	b160      	cbz	r0, 80135cc <rcl_init_options_fini+0x44>
 80135b2:	6820      	ldr	r0, [r4, #0]
 80135b4:	3018      	adds	r0, #24
 80135b6:	f002 f989 	bl	80158cc <rmw_init_options_fini>
 80135ba:	4605      	mov	r5, r0
 80135bc:	b950      	cbnz	r0, 80135d4 <rcl_init_options_fini+0x4c>
 80135be:	6820      	ldr	r0, [r4, #0]
 80135c0:	9b02      	ldr	r3, [sp, #8]
 80135c2:	9905      	ldr	r1, [sp, #20]
 80135c4:	4798      	blx	r3
 80135c6:	4628      	mov	r0, r5
 80135c8:	b007      	add	sp, #28
 80135ca:	bd30      	pop	{r4, r5, pc}
 80135cc:	250b      	movs	r5, #11
 80135ce:	4628      	mov	r0, r5
 80135d0:	b007      	add	sp, #28
 80135d2:	bd30      	pop	{r4, r5, pc}
 80135d4:	f007 ff5e 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 80135d8:	4605      	mov	r5, r0
 80135da:	e7f8      	b.n	80135ce <rcl_init_options_fini+0x46>

080135dc <rcl_init_options_copy>:
 80135dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e0:	b094      	sub	sp, #80	; 0x50
 80135e2:	2800      	cmp	r0, #0
 80135e4:	d05b      	beq.n	801369e <rcl_init_options_copy+0xc2>
 80135e6:	4604      	mov	r4, r0
 80135e8:	6800      	ldr	r0, [r0, #0]
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d057      	beq.n	801369e <rcl_init_options_copy+0xc2>
 80135ee:	460e      	mov	r6, r1
 80135f0:	f001 fd6c 	bl	80150cc <rcutils_allocator_is_valid>
 80135f4:	2e00      	cmp	r6, #0
 80135f6:	d052      	beq.n	801369e <rcl_init_options_copy+0xc2>
 80135f8:	f080 0001 	eor.w	r0, r0, #1
 80135fc:	b2c0      	uxtb	r0, r0
 80135fe:	2800      	cmp	r0, #0
 8013600:	d14d      	bne.n	801369e <rcl_init_options_copy+0xc2>
 8013602:	6833      	ldr	r3, [r6, #0]
 8013604:	b123      	cbz	r3, 8013610 <rcl_init_options_copy+0x34>
 8013606:	2464      	movs	r4, #100	; 0x64
 8013608:	4620      	mov	r0, r4
 801360a:	b014      	add	sp, #80	; 0x50
 801360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013610:	6827      	ldr	r7, [r4, #0]
 8013612:	ad0f      	add	r5, sp, #60	; 0x3c
 8013614:	46bc      	mov	ip, r7
 8013616:	f8d7 8000 	ldr.w	r8, [r7]
 801361a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801361e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013620:	f8dc 3000 	ldr.w	r3, [ip]
 8013624:	2050      	movs	r0, #80	; 0x50
 8013626:	4619      	mov	r1, r3
 8013628:	602b      	str	r3, [r5, #0]
 801362a:	47c0      	blx	r8
 801362c:	4605      	mov	r5, r0
 801362e:	6030      	str	r0, [r6, #0]
 8013630:	b3d0      	cbz	r0, 80136a8 <rcl_init_options_copy+0xcc>
 8013632:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8013636:	4686      	mov	lr, r0
 8013638:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801363c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013640:	f8dc 3000 	ldr.w	r3, [ip]
 8013644:	4668      	mov	r0, sp
 8013646:	f8ce 3000 	str.w	r3, [lr]
 801364a:	f001 ff5d 	bl	8015508 <rmw_get_zero_initialized_init_options>
 801364e:	46ee      	mov	lr, sp
 8013650:	f105 0c18 	add.w	ip, r5, #24
 8013654:	6824      	ldr	r4, [r4, #0]
 8013656:	6835      	ldr	r5, [r6, #0]
 8013658:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801365c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013660:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013664:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013668:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801366c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013670:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013674:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013678:	f104 0018 	add.w	r0, r4, #24
 801367c:	f105 0118 	add.w	r1, r5, #24
 8013680:	f002 f8d2 	bl	8015828 <rmw_init_options_copy>
 8013684:	4604      	mov	r4, r0
 8013686:	2800      	cmp	r0, #0
 8013688:	d0be      	beq.n	8013608 <rcl_init_options_copy+0x2c>
 801368a:	f001 fd45 	bl	8015118 <rcutils_get_error_string>
 801368e:	f001 fd5b 	bl	8015148 <rcutils_reset_error>
 8013692:	4630      	mov	r0, r6
 8013694:	f7ff ff78 	bl	8013588 <rcl_init_options_fini>
 8013698:	b140      	cbz	r0, 80136ac <rcl_init_options_copy+0xd0>
 801369a:	4604      	mov	r4, r0
 801369c:	e7b4      	b.n	8013608 <rcl_init_options_copy+0x2c>
 801369e:	240b      	movs	r4, #11
 80136a0:	4620      	mov	r0, r4
 80136a2:	b014      	add	sp, #80	; 0x50
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a8:	240a      	movs	r4, #10
 80136aa:	e7ad      	b.n	8013608 <rcl_init_options_copy+0x2c>
 80136ac:	4620      	mov	r0, r4
 80136ae:	b014      	add	sp, #80	; 0x50
 80136b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136b4:	f007 beee 	b.w	801b494 <rcl_convert_rmw_ret_to_rcl_ret>

080136b8 <rcl_init_options_set_domain_id>:
 80136b8:	b120      	cbz	r0, 80136c4 <rcl_init_options_set_domain_id+0xc>
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	b113      	cbz	r3, 80136c4 <rcl_init_options_set_domain_id+0xc>
 80136be:	2000      	movs	r0, #0
 80136c0:	6259      	str	r1, [r3, #36]	; 0x24
 80136c2:	4770      	bx	lr
 80136c4:	200b      	movs	r0, #11
 80136c6:	4770      	bx	lr

080136c8 <rcl_get_zero_initialized_node>:
 80136c8:	4a03      	ldr	r2, [pc, #12]	; (80136d8 <rcl_get_zero_initialized_node+0x10>)
 80136ca:	4603      	mov	r3, r0
 80136cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80136d4:	4618      	mov	r0, r3
 80136d6:	4770      	bx	lr
 80136d8:	08024e68 	.word	0x08024e68

080136dc <rcl_node_init>:
 80136dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e0:	b0a9      	sub	sp, #164	; 0xa4
 80136e2:	4604      	mov	r4, r0
 80136e4:	460e      	mov	r6, r1
 80136e6:	4615      	mov	r5, r2
 80136e8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80136ec:	a823      	add	r0, sp, #140	; 0x8c
 80136ee:	461f      	mov	r7, r3
 80136f0:	f007 ffe0 	bl	801b6b4 <rcl_guard_condition_get_default_options>
 80136f4:	f1b8 0f00 	cmp.w	r8, #0
 80136f8:	f000 80f3 	beq.w	80138e2 <rcl_node_init+0x206>
 80136fc:	4640      	mov	r0, r8
 80136fe:	f001 fce5 	bl	80150cc <rcutils_allocator_is_valid>
 8013702:	2d00      	cmp	r5, #0
 8013704:	bf18      	it	ne
 8013706:	2c00      	cmpne	r4, #0
 8013708:	f080 0001 	eor.w	r0, r0, #1
 801370c:	bf0c      	ite	eq
 801370e:	f04f 0c01 	moveq.w	ip, #1
 8013712:	f04f 0c00 	movne.w	ip, #0
 8013716:	2e00      	cmp	r6, #0
 8013718:	bf08      	it	eq
 801371a:	f04c 0c01 	orreq.w	ip, ip, #1
 801371e:	ea4c 0c00 	orr.w	ip, ip, r0
 8013722:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8013726:	f040 80dc 	bne.w	80138e2 <rcl_node_init+0x206>
 801372a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801372e:	f1ba 0f00 	cmp.w	sl, #0
 8013732:	f040 80fc 	bne.w	801392e <rcl_node_init+0x252>
 8013736:	2f00      	cmp	r7, #0
 8013738:	f000 80d3 	beq.w	80138e2 <rcl_node_init+0x206>
 801373c:	4638      	mov	r0, r7
 801373e:	f007 fec7 	bl	801b4d0 <rcl_context_is_valid>
 8013742:	4683      	mov	fp, r0
 8013744:	2800      	cmp	r0, #0
 8013746:	f000 80d2 	beq.w	80138ee <rcl_node_init+0x212>
 801374a:	4652      	mov	r2, sl
 801374c:	4630      	mov	r0, r6
 801374e:	a922      	add	r1, sp, #136	; 0x88
 8013750:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8013754:	f001 ff8a 	bl	801566c <rmw_validate_node_name>
 8013758:	4682      	mov	sl, r0
 801375a:	2800      	cmp	r0, #0
 801375c:	f040 80c3 	bne.w	80138e6 <rcl_node_init+0x20a>
 8013760:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013762:	2800      	cmp	r0, #0
 8013764:	f040 80f1 	bne.w	801394a <rcl_node_init+0x26e>
 8013768:	4628      	mov	r0, r5
 801376a:	f7ec fdc9 	bl	8000300 <strlen>
 801376e:	2800      	cmp	r0, #0
 8013770:	f040 80c0 	bne.w	80138f4 <rcl_node_init+0x218>
 8013774:	4d79      	ldr	r5, [pc, #484]	; (801395c <rcl_node_init+0x280>)
 8013776:	a922      	add	r1, sp, #136	; 0x88
 8013778:	2200      	movs	r2, #0
 801377a:	4628      	mov	r0, r5
 801377c:	f001 ff58 	bl	8015630 <rmw_validate_namespace>
 8013780:	4682      	mov	sl, r0
 8013782:	2800      	cmp	r0, #0
 8013784:	f040 80af 	bne.w	80138e6 <rcl_node_init+0x20a>
 8013788:	9822      	ldr	r0, [sp, #136]	; 0x88
 801378a:	2800      	cmp	r0, #0
 801378c:	f040 80d5 	bne.w	801393a <rcl_node_init+0x25e>
 8013790:	f8d8 3000 	ldr.w	r3, [r8]
 8013794:	2078      	movs	r0, #120	; 0x78
 8013796:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801379a:	4798      	blx	r3
 801379c:	4682      	mov	sl, r0
 801379e:	6060      	str	r0, [r4, #4]
 80137a0:	2800      	cmp	r0, #0
 80137a2:	f000 80cf 	beq.w	8013944 <rcl_node_init+0x268>
 80137a6:	2200      	movs	r2, #0
 80137a8:	2300      	movs	r3, #0
 80137aa:	a808      	add	r0, sp, #32
 80137ac:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 80137b0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 80137b4:	f000 f902 	bl	80139bc <rcl_node_get_default_options>
 80137b8:	a908      	add	r1, sp, #32
 80137ba:	4650      	mov	r0, sl
 80137bc:	2268      	movs	r2, #104	; 0x68
 80137be:	f00d fbe6 	bl	8020f8e <memcpy>
 80137c2:	6861      	ldr	r1, [r4, #4]
 80137c4:	4640      	mov	r0, r8
 80137c6:	6027      	str	r7, [r4, #0]
 80137c8:	f000 f906 	bl	80139d8 <rcl_node_options_copy>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d158      	bne.n	8013882 <rcl_node_init+0x1a6>
 80137d0:	4628      	mov	r0, r5
 80137d2:	f7ec fd95 	bl	8000300 <strlen>
 80137d6:	4428      	add	r0, r5
 80137d8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80137dc:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80137e0:	2b2f      	cmp	r3, #47	; 0x2f
 80137e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	bf0c      	ite	eq
 80137ea:	4b5d      	ldreq	r3, [pc, #372]	; (8013960 <rcl_node_init+0x284>)
 80137ec:	4b5d      	ldrne	r3, [pc, #372]	; (8013964 <rcl_node_init+0x288>)
 80137ee:	9302      	str	r3, [sp, #8]
 80137f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80137f4:	9301      	str	r3, [sp, #4]
 80137f6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80137fa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80137fe:	f001 fcbf 	bl	8015180 <rcutils_format_string_limit>
 8013802:	6823      	ldr	r3, [r4, #0]
 8013804:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8013808:	4631      	mov	r1, r6
 801380a:	6818      	ldr	r0, [r3, #0]
 801380c:	462a      	mov	r2, r5
 801380e:	6866      	ldr	r6, [r4, #4]
 8013810:	3028      	adds	r0, #40	; 0x28
 8013812:	f002 fa87 	bl	8015d24 <rmw_create_node>
 8013816:	6863      	ldr	r3, [r4, #4]
 8013818:	66b0      	str	r0, [r6, #104]	; 0x68
 801381a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801381c:	2800      	cmp	r0, #0
 801381e:	d032      	beq.n	8013886 <rcl_node_init+0x1aa>
 8013820:	f002 fb10 	bl	8015e44 <rmw_node_get_graph_guard_condition>
 8013824:	4682      	mov	sl, r0
 8013826:	b360      	cbz	r0, 8013882 <rcl_node_init+0x1a6>
 8013828:	f8d8 3000 	ldr.w	r3, [r8]
 801382c:	2008      	movs	r0, #8
 801382e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013832:	6866      	ldr	r6, [r4, #4]
 8013834:	4798      	blx	r3
 8013836:	6863      	ldr	r3, [r4, #4]
 8013838:	66f0      	str	r0, [r6, #108]	; 0x6c
 801383a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801383e:	f1bb 0f00 	cmp.w	fp, #0
 8013842:	d020      	beq.n	8013886 <rcl_node_init+0x1aa>
 8013844:	a806      	add	r0, sp, #24
 8013846:	ae23      	add	r6, sp, #140	; 0x8c
 8013848:	f007 fea8 	bl	801b59c <rcl_get_zero_initialized_guard_condition>
 801384c:	a806      	add	r0, sp, #24
 801384e:	6863      	ldr	r3, [r4, #4]
 8013850:	46c4      	mov	ip, r8
 8013852:	c803      	ldmia	r0, {r0, r1}
 8013854:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8013858:	e88b 0003 	stmia.w	fp, {r0, r1}
 801385c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013860:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013862:	f8dc 3000 	ldr.w	r3, [ip]
 8013866:	6033      	str	r3, [r6, #0]
 8013868:	ab28      	add	r3, sp, #160	; 0xa0
 801386a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801386e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013872:	4651      	mov	r1, sl
 8013874:	463a      	mov	r2, r7
 8013876:	4670      	mov	r0, lr
 8013878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801387a:	f007 fe99 	bl	801b5b0 <rcl_guard_condition_init_from_rmw>
 801387e:	4682      	mov	sl, r0
 8013880:	b328      	cbz	r0, 80138ce <rcl_node_init+0x1f2>
 8013882:	6863      	ldr	r3, [r4, #4]
 8013884:	b1f3      	cbz	r3, 80138c4 <rcl_node_init+0x1e8>
 8013886:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8013888:	b128      	cbz	r0, 8013896 <rcl_node_init+0x1ba>
 801388a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801388e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013892:	4798      	blx	r3
 8013894:	6863      	ldr	r3, [r4, #4]
 8013896:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013898:	b110      	cbz	r0, 80138a0 <rcl_node_init+0x1c4>
 801389a:	f002 fa55 	bl	8015d48 <rmw_destroy_node>
 801389e:	6863      	ldr	r3, [r4, #4]
 80138a0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80138a2:	b148      	cbz	r0, 80138b8 <rcl_node_init+0x1dc>
 80138a4:	f007 fee0 	bl	801b668 <rcl_guard_condition_fini>
 80138a8:	6863      	ldr	r3, [r4, #4]
 80138aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138ae:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80138b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80138b4:	4798      	blx	r3
 80138b6:	6863      	ldr	r3, [r4, #4]
 80138b8:	4618      	mov	r0, r3
 80138ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80138c2:	4798      	blx	r3
 80138c4:	2300      	movs	r3, #0
 80138c6:	f04f 0a01 	mov.w	sl, #1
 80138ca:	e9c4 3300 	strd	r3, r3, [r4]
 80138ce:	f1b9 0f00 	cmp.w	r9, #0
 80138d2:	d008      	beq.n	80138e6 <rcl_node_init+0x20a>
 80138d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80138d8:	4628      	mov	r0, r5
 80138da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138de:	4798      	blx	r3
 80138e0:	e001      	b.n	80138e6 <rcl_node_init+0x20a>
 80138e2:	f04f 0a0b 	mov.w	sl, #11
 80138e6:	4650      	mov	r0, sl
 80138e8:	b029      	add	sp, #164	; 0xa4
 80138ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ee:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80138f2:	e7f8      	b.n	80138e6 <rcl_node_init+0x20a>
 80138f4:	782b      	ldrb	r3, [r5, #0]
 80138f6:	2b2f      	cmp	r3, #47	; 0x2f
 80138f8:	f43f af3d 	beq.w	8013776 <rcl_node_init+0x9a>
 80138fc:	9503      	str	r5, [sp, #12]
 80138fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	4b18      	ldr	r3, [pc, #96]	; (8013968 <rcl_node_init+0x28c>)
 8013906:	9302      	str	r3, [sp, #8]
 8013908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801390c:	9301      	str	r3, [sp, #4]
 801390e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013912:	f001 fc35 	bl	8015180 <rcutils_format_string_limit>
 8013916:	4605      	mov	r5, r0
 8013918:	b1e0      	cbz	r0, 8013954 <rcl_node_init+0x278>
 801391a:	2200      	movs	r2, #0
 801391c:	a922      	add	r1, sp, #136	; 0x88
 801391e:	9222      	str	r2, [sp, #136]	; 0x88
 8013920:	f001 fe86 	bl	8015630 <rmw_validate_namespace>
 8013924:	4682      	mov	sl, r0
 8013926:	2800      	cmp	r0, #0
 8013928:	d1d4      	bne.n	80138d4 <rcl_node_init+0x1f8>
 801392a:	46d9      	mov	r9, fp
 801392c:	e72c      	b.n	8013788 <rcl_node_init+0xac>
 801392e:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8013932:	4650      	mov	r0, sl
 8013934:	b029      	add	sp, #164	; 0xa4
 8013936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801393a:	f04f 0aca 	mov.w	sl, #202	; 0xca
 801393e:	f001 fe89 	bl	8015654 <rmw_namespace_validation_result_string>
 8013942:	e7c4      	b.n	80138ce <rcl_node_init+0x1f2>
 8013944:	f04f 0a0a 	mov.w	sl, #10
 8013948:	e7c1      	b.n	80138ce <rcl_node_init+0x1f2>
 801394a:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801394e:	f001 fee1 	bl	8015714 <rmw_node_name_validation_result_string>
 8013952:	e7c8      	b.n	80138e6 <rcl_node_init+0x20a>
 8013954:	f04f 0a0a 	mov.w	sl, #10
 8013958:	e7c5      	b.n	80138e6 <rcl_node_init+0x20a>
 801395a:	bf00      	nop
 801395c:	08024e50 	.word	0x08024e50
 8013960:	08024e58 	.word	0x08024e58
 8013964:	08024e60 	.word	0x08024e60
 8013968:	08024e54 	.word	0x08024e54

0801396c <rcl_node_is_valid>:
 801396c:	b130      	cbz	r0, 801397c <rcl_node_is_valid+0x10>
 801396e:	6843      	ldr	r3, [r0, #4]
 8013970:	b123      	cbz	r3, 801397c <rcl_node_is_valid+0x10>
 8013972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013974:	b113      	cbz	r3, 801397c <rcl_node_is_valid+0x10>
 8013976:	6800      	ldr	r0, [r0, #0]
 8013978:	f007 bdaa 	b.w	801b4d0 <rcl_context_is_valid>
 801397c:	2000      	movs	r0, #0
 801397e:	4770      	bx	lr

08013980 <rcl_node_get_name>:
 8013980:	b120      	cbz	r0, 801398c <rcl_node_get_name+0xc>
 8013982:	6840      	ldr	r0, [r0, #4]
 8013984:	b110      	cbz	r0, 801398c <rcl_node_get_name+0xc>
 8013986:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013988:	b100      	cbz	r0, 801398c <rcl_node_get_name+0xc>
 801398a:	6880      	ldr	r0, [r0, #8]
 801398c:	4770      	bx	lr
 801398e:	bf00      	nop

08013990 <rcl_node_get_namespace>:
 8013990:	b120      	cbz	r0, 801399c <rcl_node_get_namespace+0xc>
 8013992:	6840      	ldr	r0, [r0, #4]
 8013994:	b110      	cbz	r0, 801399c <rcl_node_get_namespace+0xc>
 8013996:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013998:	b100      	cbz	r0, 801399c <rcl_node_get_namespace+0xc>
 801399a:	68c0      	ldr	r0, [r0, #12]
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop

080139a0 <rcl_node_get_options>:
 80139a0:	b128      	cbz	r0, 80139ae <rcl_node_get_options+0xe>
 80139a2:	6840      	ldr	r0, [r0, #4]
 80139a4:	b118      	cbz	r0, 80139ae <rcl_node_get_options+0xe>
 80139a6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	bf08      	it	eq
 80139ac:	2000      	moveq	r0, #0
 80139ae:	4770      	bx	lr

080139b0 <rcl_node_get_rmw_handle>:
 80139b0:	b110      	cbz	r0, 80139b8 <rcl_node_get_rmw_handle+0x8>
 80139b2:	6840      	ldr	r0, [r0, #4]
 80139b4:	b100      	cbz	r0, 80139b8 <rcl_node_get_rmw_handle+0x8>
 80139b6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80139b8:	4770      	bx	lr
 80139ba:	bf00      	nop

080139bc <rcl_node_get_default_options>:
 80139bc:	b510      	push	{r4, lr}
 80139be:	4604      	mov	r4, r0
 80139c0:	2268      	movs	r2, #104	; 0x68
 80139c2:	2100      	movs	r1, #0
 80139c4:	f00d fa16 	bl	8020df4 <memset>
 80139c8:	4620      	mov	r0, r4
 80139ca:	f001 fb71 	bl	80150b0 <rcutils_get_default_allocator>
 80139ce:	2301      	movs	r3, #1
 80139d0:	4620      	mov	r0, r4
 80139d2:	7523      	strb	r3, [r4, #20]
 80139d4:	bd10      	pop	{r4, pc}
 80139d6:	bf00      	nop

080139d8 <rcl_node_options_copy>:
 80139d8:	2800      	cmp	r0, #0
 80139da:	bf18      	it	ne
 80139dc:	4288      	cmpne	r0, r1
 80139de:	d01b      	beq.n	8013a18 <rcl_node_options_copy+0x40>
 80139e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e2:	fab1 f681 	clz	r6, r1
 80139e6:	460c      	mov	r4, r1
 80139e8:	0976      	lsrs	r6, r6, #5
 80139ea:	b199      	cbz	r1, 8013a14 <rcl_node_options_copy+0x3c>
 80139ec:	4605      	mov	r5, r0
 80139ee:	8a87      	ldrh	r7, [r0, #20]
 80139f0:	4684      	mov	ip, r0
 80139f2:	468e      	mov	lr, r1
 80139f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139fa:	682b      	ldr	r3, [r5, #0]
 80139fc:	2250      	movs	r2, #80	; 0x50
 80139fe:	f10c 0118 	add.w	r1, ip, #24
 8013a02:	f104 0018 	add.w	r0, r4, #24
 8013a06:	f8ce 3000 	str.w	r3, [lr]
 8013a0a:	82a7      	strh	r7, [r4, #20]
 8013a0c:	f00d fabf 	bl	8020f8e <memcpy>
 8013a10:	4630      	mov	r0, r6
 8013a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a14:	200b      	movs	r0, #11
 8013a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a18:	200b      	movs	r0, #11
 8013a1a:	4770      	bx	lr

08013a1c <rcl_get_zero_initialized_publisher>:
 8013a1c:	4b01      	ldr	r3, [pc, #4]	; (8013a24 <rcl_get_zero_initialized_publisher+0x8>)
 8013a1e:	6818      	ldr	r0, [r3, #0]
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	08024e70 	.word	0x08024e70

08013a28 <rcl_publisher_init>:
 8013a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a2c:	b088      	sub	sp, #32
 8013a2e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013a30:	2e00      	cmp	r6, #0
 8013a32:	d06b      	beq.n	8013b0c <rcl_publisher_init+0xe4>
 8013a34:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8013a38:	4605      	mov	r5, r0
 8013a3a:	460f      	mov	r7, r1
 8013a3c:	4690      	mov	r8, r2
 8013a3e:	4650      	mov	r0, sl
 8013a40:	4699      	mov	r9, r3
 8013a42:	f001 fb43 	bl	80150cc <rcutils_allocator_is_valid>
 8013a46:	f080 0401 	eor.w	r4, r0, #1
 8013a4a:	b2e4      	uxtb	r4, r4
 8013a4c:	2c00      	cmp	r4, #0
 8013a4e:	d15d      	bne.n	8013b0c <rcl_publisher_init+0xe4>
 8013a50:	2d00      	cmp	r5, #0
 8013a52:	d05b      	beq.n	8013b0c <rcl_publisher_init+0xe4>
 8013a54:	682b      	ldr	r3, [r5, #0]
 8013a56:	b123      	cbz	r3, 8013a62 <rcl_publisher_init+0x3a>
 8013a58:	2464      	movs	r4, #100	; 0x64
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	b008      	add	sp, #32
 8013a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a62:	4638      	mov	r0, r7
 8013a64:	f7ff ff82 	bl	801396c <rcl_node_is_valid>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d054      	beq.n	8013b16 <rcl_publisher_init+0xee>
 8013a6c:	f1b8 0f00 	cmp.w	r8, #0
 8013a70:	d04c      	beq.n	8013b0c <rcl_publisher_init+0xe4>
 8013a72:	fab9 f389 	clz	r3, r9
 8013a76:	095b      	lsrs	r3, r3, #5
 8013a78:	f1b9 0f00 	cmp.w	r9, #0
 8013a7c:	d046      	beq.n	8013b0c <rcl_publisher_init+0xe4>
 8013a7e:	aa07      	add	r2, sp, #28
 8013a80:	9307      	str	r3, [sp, #28]
 8013a82:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013a86:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8013a8a:	9205      	str	r2, [sp, #20]
 8013a8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013a90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a94:	4649      	mov	r1, r9
 8013a96:	4638      	mov	r0, r7
 8013a98:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013a9c:	f007 ff54 	bl	801b948 <rcl_node_resolve_name>
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d14f      	bne.n	8013b44 <rcl_publisher_init+0x11c>
 8013aa4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013aa6:	20c8      	movs	r0, #200	; 0xc8
 8013aa8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013aaa:	4798      	blx	r3
 8013aac:	6028      	str	r0, [r5, #0]
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d050      	beq.n	8013b54 <rcl_publisher_init+0x12c>
 8013ab2:	4638      	mov	r0, r7
 8013ab4:	f7ff ff7c 	bl	80139b0 <rcl_node_get_rmw_handle>
 8013ab8:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8013abc:	4641      	mov	r1, r8
 8013abe:	9a07      	ldr	r2, [sp, #28]
 8013ac0:	9300      	str	r3, [sp, #0]
 8013ac2:	4633      	mov	r3, r6
 8013ac4:	682c      	ldr	r4, [r5, #0]
 8013ac6:	f002 fa27 	bl	8015f18 <rmw_create_publisher>
 8013aca:	682b      	ldr	r3, [r5, #0]
 8013acc:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013ad0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013ad4:	b370      	cbz	r0, 8013b34 <rcl_publisher_init+0x10c>
 8013ad6:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8013ada:	f002 fb01 	bl	80160e0 <rmw_publisher_get_actual_qos>
 8013ade:	682b      	ldr	r3, [r5, #0]
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	b9d0      	cbnz	r0, 8013b1a <rcl_publisher_init+0xf2>
 8013ae4:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8013ae8:	4631      	mov	r1, r6
 8013aea:	4618      	mov	r0, r3
 8013aec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8013af0:	2270      	movs	r2, #112	; 0x70
 8013af2:	f00d fa4c 	bl	8020f8e <memcpy>
 8013af6:	683a      	ldr	r2, [r7, #0]
 8013af8:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8013afc:	9807      	ldr	r0, [sp, #28]
 8013afe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013b00:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013b02:	4798      	blx	r3
 8013b04:	4620      	mov	r0, r4
 8013b06:	b008      	add	sp, #32
 8013b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b0c:	240b      	movs	r4, #11
 8013b0e:	4620      	mov	r0, r4
 8013b10:	b008      	add	sp, #32
 8013b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b16:	24c8      	movs	r4, #200	; 0xc8
 8013b18:	e79f      	b.n	8013a5a <rcl_publisher_init+0x32>
 8013b1a:	b1cb      	cbz	r3, 8013b50 <rcl_publisher_init+0x128>
 8013b1c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013b20:	b142      	cbz	r2, 8013b34 <rcl_publisher_init+0x10c>
 8013b22:	4638      	mov	r0, r7
 8013b24:	f7ff ff44 	bl	80139b0 <rcl_node_get_rmw_handle>
 8013b28:	682b      	ldr	r3, [r5, #0]
 8013b2a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013b2e:	f002 faeb 	bl	8016108 <rmw_destroy_publisher>
 8013b32:	682b      	ldr	r3, [r5, #0]
 8013b34:	4618      	mov	r0, r3
 8013b36:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013b38:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013b3a:	2401      	movs	r4, #1
 8013b3c:	4790      	blx	r2
 8013b3e:	2300      	movs	r3, #0
 8013b40:	602b      	str	r3, [r5, #0]
 8013b42:	e7db      	b.n	8013afc <rcl_publisher_init+0xd4>
 8013b44:	2867      	cmp	r0, #103	; 0x67
 8013b46:	d007      	beq.n	8013b58 <rcl_publisher_init+0x130>
 8013b48:	2869      	cmp	r0, #105	; 0x69
 8013b4a:	d005      	beq.n	8013b58 <rcl_publisher_init+0x130>
 8013b4c:	280a      	cmp	r0, #10
 8013b4e:	d001      	beq.n	8013b54 <rcl_publisher_init+0x12c>
 8013b50:	2401      	movs	r4, #1
 8013b52:	e7d3      	b.n	8013afc <rcl_publisher_init+0xd4>
 8013b54:	240a      	movs	r4, #10
 8013b56:	e7d1      	b.n	8013afc <rcl_publisher_init+0xd4>
 8013b58:	2467      	movs	r4, #103	; 0x67
 8013b5a:	e7cf      	b.n	8013afc <rcl_publisher_init+0xd4>

08013b5c <rcl_publisher_get_default_options>:
 8013b5c:	b570      	push	{r4, r5, r6, lr}
 8013b5e:	4d14      	ldr	r5, [pc, #80]	; (8013bb0 <rcl_publisher_get_default_options+0x54>)
 8013b60:	b088      	sub	sp, #32
 8013b62:	4604      	mov	r4, r0
 8013b64:	2250      	movs	r2, #80	; 0x50
 8013b66:	4913      	ldr	r1, [pc, #76]	; (8013bb4 <rcl_publisher_get_default_options+0x58>)
 8013b68:	4628      	mov	r0, r5
 8013b6a:	f00d fa10 	bl	8020f8e <memcpy>
 8013b6e:	a802      	add	r0, sp, #8
 8013b70:	f001 fa9e 	bl	80150b0 <rcutils_get_default_allocator>
 8013b74:	f10d 0c08 	add.w	ip, sp, #8
 8013b78:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013b7c:	466e      	mov	r6, sp
 8013b7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b86:	f8dc 3000 	ldr.w	r3, [ip]
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f8ce 3000 	str.w	r3, [lr]
 8013b90:	f001 fcca 	bl	8015528 <rmw_get_default_publisher_options>
 8013b94:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013b98:	2270      	movs	r2, #112	; 0x70
 8013b9a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f00d f9f2 	bl	8020f8e <memcpy>
 8013baa:	4620      	mov	r0, r4
 8013bac:	b008      	add	sp, #32
 8013bae:	bd70      	pop	{r4, r5, r6, pc}
 8013bb0:	200121a0 	.word	0x200121a0
 8013bb4:	08024e78 	.word	0x08024e78

08013bb8 <rcl_publish>:
 8013bb8:	b1f8      	cbz	r0, 8013bfa <rcl_publish+0x42>
 8013bba:	6803      	ldr	r3, [r0, #0]
 8013bbc:	b570      	push	{r4, r5, r6, lr}
 8013bbe:	4604      	mov	r4, r0
 8013bc0:	b1b3      	cbz	r3, 8013bf0 <rcl_publish+0x38>
 8013bc2:	4616      	mov	r6, r2
 8013bc4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013bc8:	b192      	cbz	r2, 8013bf0 <rcl_publish+0x38>
 8013bca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013bce:	460d      	mov	r5, r1
 8013bd0:	f007 fc7e 	bl	801b4d0 <rcl_context_is_valid>
 8013bd4:	b160      	cbz	r0, 8013bf0 <rcl_publish+0x38>
 8013bd6:	6823      	ldr	r3, [r4, #0]
 8013bd8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013bdc:	b140      	cbz	r0, 8013bf0 <rcl_publish+0x38>
 8013bde:	b155      	cbz	r5, 8013bf6 <rcl_publish+0x3e>
 8013be0:	4632      	mov	r2, r6
 8013be2:	4629      	mov	r1, r5
 8013be4:	f002 f938 	bl	8015e58 <rmw_publish>
 8013be8:	3800      	subs	r0, #0
 8013bea:	bf18      	it	ne
 8013bec:	2001      	movne	r0, #1
 8013bee:	bd70      	pop	{r4, r5, r6, pc}
 8013bf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013bf4:	bd70      	pop	{r4, r5, r6, pc}
 8013bf6:	200b      	movs	r0, #11
 8013bf8:	bd70      	pop	{r4, r5, r6, pc}
 8013bfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013bfe:	4770      	bx	lr

08013c00 <rcl_publisher_is_valid>:
 8013c00:	b1a0      	cbz	r0, 8013c2c <rcl_publisher_is_valid+0x2c>
 8013c02:	6803      	ldr	r3, [r0, #0]
 8013c04:	b510      	push	{r4, lr}
 8013c06:	4604      	mov	r4, r0
 8013c08:	b173      	cbz	r3, 8013c28 <rcl_publisher_is_valid+0x28>
 8013c0a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013c0e:	b15a      	cbz	r2, 8013c28 <rcl_publisher_is_valid+0x28>
 8013c10:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013c14:	f007 fc5c 	bl	801b4d0 <rcl_context_is_valid>
 8013c18:	b130      	cbz	r0, 8013c28 <rcl_publisher_is_valid+0x28>
 8013c1a:	6823      	ldr	r3, [r4, #0]
 8013c1c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013c20:	3800      	subs	r0, #0
 8013c22:	bf18      	it	ne
 8013c24:	2001      	movne	r0, #1
 8013c26:	bd10      	pop	{r4, pc}
 8013c28:	2000      	movs	r0, #0
 8013c2a:	bd10      	pop	{r4, pc}
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	4770      	bx	lr

08013c30 <rcl_publisher_is_valid_except_context>:
 8013c30:	b130      	cbz	r0, 8013c40 <rcl_publisher_is_valid_except_context+0x10>
 8013c32:	6800      	ldr	r0, [r0, #0]
 8013c34:	b120      	cbz	r0, 8013c40 <rcl_publisher_is_valid_except_context+0x10>
 8013c36:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013c3a:	3800      	subs	r0, #0
 8013c3c:	bf18      	it	ne
 8013c3e:	2001      	movne	r0, #1
 8013c40:	4770      	bx	lr
 8013c42:	bf00      	nop

08013c44 <rcl_get_zero_initialized_service>:
 8013c44:	4b01      	ldr	r3, [pc, #4]	; (8013c4c <rcl_get_zero_initialized_service+0x8>)
 8013c46:	6818      	ldr	r0, [r3, #0]
 8013c48:	4770      	bx	lr
 8013c4a:	bf00      	nop
 8013c4c:	08024ec8 	.word	0x08024ec8

08013c50 <rcl_service_init>:
 8013c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c54:	b088      	sub	sp, #32
 8013c56:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013c58:	b1ff      	cbz	r7, 8013c9a <rcl_service_init+0x4a>
 8013c5a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013c5e:	4605      	mov	r5, r0
 8013c60:	460e      	mov	r6, r1
 8013c62:	4691      	mov	r9, r2
 8013c64:	4650      	mov	r0, sl
 8013c66:	4698      	mov	r8, r3
 8013c68:	f001 fa30 	bl	80150cc <rcutils_allocator_is_valid>
 8013c6c:	f080 0401 	eor.w	r4, r0, #1
 8013c70:	b2e4      	uxtb	r4, r4
 8013c72:	b994      	cbnz	r4, 8013c9a <rcl_service_init+0x4a>
 8013c74:	b18d      	cbz	r5, 8013c9a <rcl_service_init+0x4a>
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7ff fe78 	bl	801396c <rcl_node_is_valid>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d05d      	beq.n	8013d3c <rcl_service_init+0xec>
 8013c80:	f1b8 0f00 	cmp.w	r8, #0
 8013c84:	d009      	beq.n	8013c9a <rcl_service_init+0x4a>
 8013c86:	f1b9 0f00 	cmp.w	r9, #0
 8013c8a:	d006      	beq.n	8013c9a <rcl_service_init+0x4a>
 8013c8c:	682b      	ldr	r3, [r5, #0]
 8013c8e:	b14b      	cbz	r3, 8013ca4 <rcl_service_init+0x54>
 8013c90:	2464      	movs	r4, #100	; 0x64
 8013c92:	4620      	mov	r0, r4
 8013c94:	b008      	add	sp, #32
 8013c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c9a:	240b      	movs	r4, #11
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	b008      	add	sp, #32
 8013ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ca4:	aa07      	add	r2, sp, #28
 8013ca6:	9304      	str	r3, [sp, #16]
 8013ca8:	9307      	str	r3, [sp, #28]
 8013caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013cae:	9205      	str	r2, [sp, #20]
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	9203      	str	r2, [sp, #12]
 8013cb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013cb8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013cbc:	4641      	mov	r1, r8
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013cc4:	f007 fe40 	bl	801b948 <rcl_node_resolve_name>
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	d146      	bne.n	8013d5a <rcl_service_init+0x10a>
 8013ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cce:	f44f 7088 	mov.w	r0, #272	; 0x110
 8013cd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013cd4:	4798      	blx	r3
 8013cd6:	6028      	str	r0, [r5, #0]
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d046      	beq.n	8013d6a <rcl_service_init+0x11a>
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f7ff fe67 	bl	80139b0 <rcl_node_get_rmw_handle>
 8013ce2:	463b      	mov	r3, r7
 8013ce4:	4649      	mov	r1, r9
 8013ce6:	9a07      	ldr	r2, [sp, #28]
 8013ce8:	682c      	ldr	r4, [r5, #0]
 8013cea:	f002 fbb1 	bl	8016450 <rmw_create_service>
 8013cee:	682b      	ldr	r3, [r5, #0]
 8013cf0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8013cf4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013cf8:	b338      	cbz	r0, 8013d4a <rcl_service_init+0xfa>
 8013cfa:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8013cfe:	f002 fcd9 	bl	80166b4 <rmw_service_request_subscription_get_actual_qos>
 8013d02:	bb00      	cbnz	r0, 8013d46 <rcl_service_init+0xf6>
 8013d04:	682b      	ldr	r3, [r5, #0]
 8013d06:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8013d0a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013d0e:	f002 fcbd 	bl	801668c <rmw_service_response_publisher_get_actual_qos>
 8013d12:	4604      	mov	r4, r0
 8013d14:	b9b8      	cbnz	r0, 8013d46 <rcl_service_init+0xf6>
 8013d16:	6828      	ldr	r0, [r5, #0]
 8013d18:	2268      	movs	r2, #104	; 0x68
 8013d1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013d1e:	4639      	mov	r1, r7
 8013d20:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013d24:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8013d28:	f00d f931 	bl	8020f8e <memcpy>
 8013d2c:	9807      	ldr	r0, [sp, #28]
 8013d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013d32:	4798      	blx	r3
 8013d34:	4620      	mov	r0, r4
 8013d36:	b008      	add	sp, #32
 8013d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d3c:	24c8      	movs	r4, #200	; 0xc8
 8013d3e:	4620      	mov	r0, r4
 8013d40:	b008      	add	sp, #32
 8013d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d46:	682b      	ldr	r3, [r5, #0]
 8013d48:	b16b      	cbz	r3, 8013d66 <rcl_service_init+0x116>
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013d50:	2401      	movs	r4, #1
 8013d52:	4790      	blx	r2
 8013d54:	2300      	movs	r3, #0
 8013d56:	602b      	str	r3, [r5, #0]
 8013d58:	e7e8      	b.n	8013d2c <rcl_service_init+0xdc>
 8013d5a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	d905      	bls.n	8013d6e <rcl_service_init+0x11e>
 8013d62:	280a      	cmp	r0, #10
 8013d64:	d001      	beq.n	8013d6a <rcl_service_init+0x11a>
 8013d66:	2401      	movs	r4, #1
 8013d68:	e7e0      	b.n	8013d2c <rcl_service_init+0xdc>
 8013d6a:	240a      	movs	r4, #10
 8013d6c:	e7de      	b.n	8013d2c <rcl_service_init+0xdc>
 8013d6e:	2468      	movs	r4, #104	; 0x68
 8013d70:	e7dc      	b.n	8013d2c <rcl_service_init+0xdc>
 8013d72:	bf00      	nop

08013d74 <rcl_service_get_default_options>:
 8013d74:	b530      	push	{r4, r5, lr}
 8013d76:	4d0f      	ldr	r5, [pc, #60]	; (8013db4 <rcl_service_get_default_options+0x40>)
 8013d78:	b087      	sub	sp, #28
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	2250      	movs	r2, #80	; 0x50
 8013d7e:	490e      	ldr	r1, [pc, #56]	; (8013db8 <rcl_service_get_default_options+0x44>)
 8013d80:	4628      	mov	r0, r5
 8013d82:	f00d f904 	bl	8020f8e <memcpy>
 8013d86:	4668      	mov	r0, sp
 8013d88:	f001 f992 	bl	80150b0 <rcutils_get_default_allocator>
 8013d8c:	46ec      	mov	ip, sp
 8013d8e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013d92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8013d9e:	2268      	movs	r2, #104	; 0x68
 8013da0:	4629      	mov	r1, r5
 8013da2:	4620      	mov	r0, r4
 8013da4:	f8ce 3000 	str.w	r3, [lr]
 8013da8:	f00d f8f1 	bl	8020f8e <memcpy>
 8013dac:	4620      	mov	r0, r4
 8013dae:	b007      	add	sp, #28
 8013db0:	bd30      	pop	{r4, r5, pc}
 8013db2:	bf00      	nop
 8013db4:	20012210 	.word	0x20012210
 8013db8:	08024ed0 	.word	0x08024ed0

08013dbc <rcl_service_get_rmw_handle>:
 8013dbc:	b118      	cbz	r0, 8013dc6 <rcl_service_get_rmw_handle+0xa>
 8013dbe:	6800      	ldr	r0, [r0, #0]
 8013dc0:	b108      	cbz	r0, 8013dc6 <rcl_service_get_rmw_handle+0xa>
 8013dc2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013dc6:	4770      	bx	lr

08013dc8 <rcl_take_request>:
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	468e      	mov	lr, r1
 8013dcc:	b08c      	sub	sp, #48	; 0x30
 8013dce:	460c      	mov	r4, r1
 8013dd0:	4616      	mov	r6, r2
 8013dd2:	f10d 0c18 	add.w	ip, sp, #24
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ddc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013de0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013de4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013de8:	b30d      	cbz	r5, 8013e2e <rcl_take_request+0x66>
 8013dea:	682b      	ldr	r3, [r5, #0]
 8013dec:	b1fb      	cbz	r3, 8013e2e <rcl_take_request+0x66>
 8013dee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013df2:	b1e0      	cbz	r0, 8013e2e <rcl_take_request+0x66>
 8013df4:	b336      	cbz	r6, 8013e44 <rcl_take_request+0x7c>
 8013df6:	2300      	movs	r3, #0
 8013df8:	4632      	mov	r2, r6
 8013dfa:	a902      	add	r1, sp, #8
 8013dfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e00:	f10d 0307 	add.w	r3, sp, #7
 8013e04:	f002 fa22 	bl	801624c <rmw_take_request>
 8013e08:	4605      	mov	r5, r0
 8013e0a:	b198      	cbz	r0, 8013e34 <rcl_take_request+0x6c>
 8013e0c:	280a      	cmp	r0, #10
 8013e0e:	bf18      	it	ne
 8013e10:	2501      	movne	r5, #1
 8013e12:	f10d 0e18 	add.w	lr, sp, #24
 8013e16:	46a4      	mov	ip, r4
 8013e18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e28:	4628      	mov	r0, r5
 8013e2a:	b00c      	add	sp, #48	; 0x30
 8013e2c:	bd70      	pop	{r4, r5, r6, pc}
 8013e2e:	f44f 7516 	mov.w	r5, #600	; 0x258
 8013e32:	e7ee      	b.n	8013e12 <rcl_take_request+0x4a>
 8013e34:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e38:	f240 2359 	movw	r3, #601	; 0x259
 8013e3c:	2a00      	cmp	r2, #0
 8013e3e:	bf08      	it	eq
 8013e40:	461d      	moveq	r5, r3
 8013e42:	e7e6      	b.n	8013e12 <rcl_take_request+0x4a>
 8013e44:	250b      	movs	r5, #11
 8013e46:	e7e4      	b.n	8013e12 <rcl_take_request+0x4a>

08013e48 <rcl_send_response>:
 8013e48:	b170      	cbz	r0, 8013e68 <rcl_send_response+0x20>
 8013e4a:	6800      	ldr	r0, [r0, #0]
 8013e4c:	b160      	cbz	r0, 8013e68 <rcl_send_response+0x20>
 8013e4e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013e52:	b148      	cbz	r0, 8013e68 <rcl_send_response+0x20>
 8013e54:	b169      	cbz	r1, 8013e72 <rcl_send_response+0x2a>
 8013e56:	b510      	push	{r4, lr}
 8013e58:	b14a      	cbz	r2, 8013e6e <rcl_send_response+0x26>
 8013e5a:	f002 fa55 	bl	8016308 <rmw_send_response>
 8013e5e:	b110      	cbz	r0, 8013e66 <rcl_send_response+0x1e>
 8013e60:	2802      	cmp	r0, #2
 8013e62:	bf18      	it	ne
 8013e64:	2001      	movne	r0, #1
 8013e66:	bd10      	pop	{r4, pc}
 8013e68:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013e6c:	4770      	bx	lr
 8013e6e:	200b      	movs	r0, #11
 8013e70:	bd10      	pop	{r4, pc}
 8013e72:	200b      	movs	r0, #11
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop

08013e78 <rcl_service_is_valid>:
 8013e78:	b130      	cbz	r0, 8013e88 <rcl_service_is_valid+0x10>
 8013e7a:	6800      	ldr	r0, [r0, #0]
 8013e7c:	b120      	cbz	r0, 8013e88 <rcl_service_is_valid+0x10>
 8013e7e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013e82:	3800      	subs	r0, #0
 8013e84:	bf18      	it	ne
 8013e86:	2001      	movne	r0, #1
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop

08013e8c <rcl_get_zero_initialized_subscription>:
 8013e8c:	4b01      	ldr	r3, [pc, #4]	; (8013e94 <rcl_get_zero_initialized_subscription+0x8>)
 8013e8e:	6818      	ldr	r0, [r3, #0]
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop
 8013e94:	08024f20 	.word	0x08024f20

08013e98 <rcl_subscription_init>:
 8013e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e9c:	b088      	sub	sp, #32
 8013e9e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013ea0:	b1ff      	cbz	r7, 8013ee2 <rcl_subscription_init+0x4a>
 8013ea2:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013ea6:	4605      	mov	r5, r0
 8013ea8:	460e      	mov	r6, r1
 8013eaa:	4691      	mov	r9, r2
 8013eac:	4650      	mov	r0, sl
 8013eae:	4698      	mov	r8, r3
 8013eb0:	f001 f90c 	bl	80150cc <rcutils_allocator_is_valid>
 8013eb4:	f080 0401 	eor.w	r4, r0, #1
 8013eb8:	b2e4      	uxtb	r4, r4
 8013eba:	b994      	cbnz	r4, 8013ee2 <rcl_subscription_init+0x4a>
 8013ebc:	b18d      	cbz	r5, 8013ee2 <rcl_subscription_init+0x4a>
 8013ebe:	4630      	mov	r0, r6
 8013ec0:	f7ff fd54 	bl	801396c <rcl_node_is_valid>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d055      	beq.n	8013f74 <rcl_subscription_init+0xdc>
 8013ec8:	f1b9 0f00 	cmp.w	r9, #0
 8013ecc:	d009      	beq.n	8013ee2 <rcl_subscription_init+0x4a>
 8013ece:	f1b8 0f00 	cmp.w	r8, #0
 8013ed2:	d006      	beq.n	8013ee2 <rcl_subscription_init+0x4a>
 8013ed4:	682b      	ldr	r3, [r5, #0]
 8013ed6:	b14b      	cbz	r3, 8013eec <rcl_subscription_init+0x54>
 8013ed8:	2464      	movs	r4, #100	; 0x64
 8013eda:	4620      	mov	r0, r4
 8013edc:	b008      	add	sp, #32
 8013ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee2:	240b      	movs	r4, #11
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	b008      	add	sp, #32
 8013ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eec:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013ef0:	aa07      	add	r2, sp, #28
 8013ef2:	9307      	str	r3, [sp, #28]
 8013ef4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013ef8:	9205      	str	r2, [sp, #20]
 8013efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013efe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f02:	4641      	mov	r1, r8
 8013f04:	4630      	mov	r0, r6
 8013f06:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013f0a:	f007 fd1d 	bl	801b948 <rcl_node_resolve_name>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	d15f      	bne.n	8013fd2 <rcl_subscription_init+0x13a>
 8013f12:	21c8      	movs	r1, #200	; 0xc8
 8013f14:	2001      	movs	r0, #1
 8013f16:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8013f1a:	4798      	blx	r3
 8013f1c:	6028      	str	r0, [r5, #0]
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d05f      	beq.n	8013fe2 <rcl_subscription_init+0x14a>
 8013f22:	4630      	mov	r0, r6
 8013f24:	f7ff fd44 	bl	80139b0 <rcl_node_get_rmw_handle>
 8013f28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013f2c:	4649      	mov	r1, r9
 8013f2e:	9a07      	ldr	r2, [sp, #28]
 8013f30:	9300      	str	r3, [sp, #0]
 8013f32:	463b      	mov	r3, r7
 8013f34:	682c      	ldr	r4, [r5, #0]
 8013f36:	f002 fbd1 	bl	80166dc <rmw_create_subscription>
 8013f3a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8013f3e:	682c      	ldr	r4, [r5, #0]
 8013f40:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8013f44:	b348      	cbz	r0, 8013f9a <rcl_subscription_init+0x102>
 8013f46:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8013f4a:	f002 fcbd 	bl	80168c8 <rmw_subscription_get_actual_qos>
 8013f4e:	4604      	mov	r4, r0
 8013f50:	b9a8      	cbnz	r0, 8013f7e <rcl_subscription_init+0xe6>
 8013f52:	6828      	ldr	r0, [r5, #0]
 8013f54:	2270      	movs	r2, #112	; 0x70
 8013f56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013f5a:	4639      	mov	r1, r7
 8013f5c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8013f60:	f00d f815 	bl	8020f8e <memcpy>
 8013f64:	9807      	ldr	r0, [sp, #28]
 8013f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013f6a:	4798      	blx	r3
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	b008      	add	sp, #32
 8013f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f74:	24c8      	movs	r4, #200	; 0xc8
 8013f76:	4620      	mov	r0, r4
 8013f78:	b008      	add	sp, #32
 8013f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f7e:	682c      	ldr	r4, [r5, #0]
 8013f80:	b36c      	cbz	r4, 8013fde <rcl_subscription_init+0x146>
 8013f82:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8013f86:	b14b      	cbz	r3, 8013f9c <rcl_subscription_init+0x104>
 8013f88:	4630      	mov	r0, r6
 8013f8a:	f7ff fd11 	bl	80139b0 <rcl_node_get_rmw_handle>
 8013f8e:	682b      	ldr	r3, [r5, #0]
 8013f90:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8013f94:	f002 fcac 	bl	80168f0 <rmw_destroy_subscription>
 8013f98:	682c      	ldr	r4, [r5, #0]
 8013f9a:	b194      	cbz	r4, 8013fc2 <rcl_subscription_init+0x12a>
 8013f9c:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f001 f893 	bl	80150cc <rcutils_allocator_is_valid>
 8013fa6:	b158      	cbz	r0, 8013fc0 <rcl_subscription_init+0x128>
 8013fa8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013faa:	b148      	cbz	r0, 8013fc0 <rcl_subscription_init+0x128>
 8013fac:	4631      	mov	r1, r6
 8013fae:	f001 fac3 	bl	8015538 <rmw_subscription_content_filter_options_fini>
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	b9c8      	cbnz	r0, 8013fea <rcl_subscription_init+0x152>
 8013fb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013fb8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8013fba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013fbc:	4798      	blx	r3
 8013fbe:	66e6      	str	r6, [r4, #108]	; 0x6c
 8013fc0:	682c      	ldr	r4, [r5, #0]
 8013fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013fc8:	2401      	movs	r4, #1
 8013fca:	4798      	blx	r3
 8013fcc:	2300      	movs	r3, #0
 8013fce:	602b      	str	r3, [r5, #0]
 8013fd0:	e7c8      	b.n	8013f64 <rcl_subscription_init+0xcc>
 8013fd2:	2867      	cmp	r0, #103	; 0x67
 8013fd4:	d007      	beq.n	8013fe6 <rcl_subscription_init+0x14e>
 8013fd6:	2869      	cmp	r0, #105	; 0x69
 8013fd8:	d005      	beq.n	8013fe6 <rcl_subscription_init+0x14e>
 8013fda:	280a      	cmp	r0, #10
 8013fdc:	d001      	beq.n	8013fe2 <rcl_subscription_init+0x14a>
 8013fde:	2401      	movs	r4, #1
 8013fe0:	e7c0      	b.n	8013f64 <rcl_subscription_init+0xcc>
 8013fe2:	240a      	movs	r4, #10
 8013fe4:	e7be      	b.n	8013f64 <rcl_subscription_init+0xcc>
 8013fe6:	2467      	movs	r4, #103	; 0x67
 8013fe8:	e7bc      	b.n	8013f64 <rcl_subscription_init+0xcc>
 8013fea:	f007 fa53 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 8013fee:	682c      	ldr	r4, [r5, #0]
 8013ff0:	e7e7      	b.n	8013fc2 <rcl_subscription_init+0x12a>
 8013ff2:	bf00      	nop

08013ff4 <rcl_subscription_get_default_options>:
 8013ff4:	b570      	push	{r4, r5, r6, lr}
 8013ff6:	4d14      	ldr	r5, [pc, #80]	; (8014048 <rcl_subscription_get_default_options+0x54>)
 8013ff8:	b08a      	sub	sp, #40	; 0x28
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	2250      	movs	r2, #80	; 0x50
 8013ffe:	4913      	ldr	r1, [pc, #76]	; (801404c <rcl_subscription_get_default_options+0x58>)
 8014000:	4628      	mov	r0, r5
 8014002:	f00c ffc4 	bl	8020f8e <memcpy>
 8014006:	a804      	add	r0, sp, #16
 8014008:	f001 f852 	bl	80150b0 <rcutils_get_default_allocator>
 801400c:	f10d 0c10 	add.w	ip, sp, #16
 8014010:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8014014:	466e      	mov	r6, sp
 8014016:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801401a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801401e:	f8dc 3000 	ldr.w	r3, [ip]
 8014022:	4630      	mov	r0, r6
 8014024:	f8ce 3000 	str.w	r3, [lr]
 8014028:	f001 faa0 	bl	801556c <rmw_get_default_subscription_options>
 801402c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8014030:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014038:	2270      	movs	r2, #112	; 0x70
 801403a:	4629      	mov	r1, r5
 801403c:	4620      	mov	r0, r4
 801403e:	f00c ffa6 	bl	8020f8e <memcpy>
 8014042:	4620      	mov	r0, r4
 8014044:	b00a      	add	sp, #40	; 0x28
 8014046:	bd70      	pop	{r4, r5, r6, pc}
 8014048:	20012278 	.word	0x20012278
 801404c:	08024f28 	.word	0x08024f28

08014050 <rcl_take>:
 8014050:	2800      	cmp	r0, #0
 8014052:	d049      	beq.n	80140e8 <rcl_take+0x98>
 8014054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014058:	4615      	mov	r5, r2
 801405a:	6802      	ldr	r2, [r0, #0]
 801405c:	b0a4      	sub	sp, #144	; 0x90
 801405e:	4604      	mov	r4, r0
 8014060:	2a00      	cmp	r2, #0
 8014062:	d039      	beq.n	80140d8 <rcl_take+0x88>
 8014064:	461f      	mov	r7, r3
 8014066:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 801406a:	b3ab      	cbz	r3, 80140d8 <rcl_take+0x88>
 801406c:	460e      	mov	r6, r1
 801406e:	2900      	cmp	r1, #0
 8014070:	d038      	beq.n	80140e4 <rcl_take+0x94>
 8014072:	2d00      	cmp	r5, #0
 8014074:	d03c      	beq.n	80140f0 <rcl_take+0xa0>
 8014076:	a802      	add	r0, sp, #8
 8014078:	f04f 0800 	mov.w	r8, #0
 801407c:	f001 fa7c 	bl	8015578 <rmw_get_zero_initialized_message_info>
 8014080:	f10d 0c08 	add.w	ip, sp, #8
 8014084:	46ae      	mov	lr, r5
 8014086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801408a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801408e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014092:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014096:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801409a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801409e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80140a2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80140a6:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 80140aa:	462b      	mov	r3, r5
 80140ac:	6820      	ldr	r0, [r4, #0]
 80140ae:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 80140b2:	4631      	mov	r1, r6
 80140b4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80140b8:	9700      	str	r7, [sp, #0]
 80140ba:	f002 fc7b 	bl	80169b4 <rmw_take_with_info>
 80140be:	4603      	mov	r3, r0
 80140c0:	b9c0      	cbnz	r0, 80140f4 <rcl_take+0xa4>
 80140c2:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 80140c6:	f240 1291 	movw	r2, #401	; 0x191
 80140ca:	2900      	cmp	r1, #0
 80140cc:	bf08      	it	eq
 80140ce:	4613      	moveq	r3, r2
 80140d0:	4618      	mov	r0, r3
 80140d2:	b024      	add	sp, #144	; 0x90
 80140d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80140dc:	4618      	mov	r0, r3
 80140de:	b024      	add	sp, #144	; 0x90
 80140e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140e4:	230b      	movs	r3, #11
 80140e6:	e7f3      	b.n	80140d0 <rcl_take+0x80>
 80140e8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80140ec:	4618      	mov	r0, r3
 80140ee:	4770      	bx	lr
 80140f0:	ad14      	add	r5, sp, #80	; 0x50
 80140f2:	e7c0      	b.n	8014076 <rcl_take+0x26>
 80140f4:	f007 f9ce 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 80140f8:	4603      	mov	r3, r0
 80140fa:	e7e9      	b.n	80140d0 <rcl_take+0x80>

080140fc <rcl_subscription_get_rmw_handle>:
 80140fc:	b118      	cbz	r0, 8014106 <rcl_subscription_get_rmw_handle+0xa>
 80140fe:	6800      	ldr	r0, [r0, #0]
 8014100:	b108      	cbz	r0, 8014106 <rcl_subscription_get_rmw_handle+0xa>
 8014102:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014106:	4770      	bx	lr

08014108 <rcl_subscription_is_valid>:
 8014108:	b130      	cbz	r0, 8014118 <rcl_subscription_is_valid+0x10>
 801410a:	6800      	ldr	r0, [r0, #0]
 801410c:	b120      	cbz	r0, 8014118 <rcl_subscription_is_valid+0x10>
 801410e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014112:	3800      	subs	r0, #0
 8014114:	bf18      	it	ne
 8014116:	2001      	movne	r0, #1
 8014118:	4770      	bx	lr
 801411a:	bf00      	nop

0801411c <_rclc_check_for_new_data>:
 801411c:	2800      	cmp	r0, #0
 801411e:	d046      	beq.n	80141ae <_rclc_check_for_new_data+0x92>
 8014120:	4603      	mov	r3, r0
 8014122:	b530      	push	{r4, r5, lr}
 8014124:	7802      	ldrb	r2, [r0, #0]
 8014126:	b085      	sub	sp, #20
 8014128:	2a0a      	cmp	r2, #10
 801412a:	d842      	bhi.n	80141b2 <_rclc_check_for_new_data+0x96>
 801412c:	e8df f002 	tbb	[pc, r2]
 8014130:	14181212 	.word	0x14181212
 8014134:	06060614 	.word	0x06060614
 8014138:	2e1a      	.short	0x2e1a
 801413a:	16          	.byte	0x16
 801413b:	00          	.byte	0x00
 801413c:	6a0a      	ldr	r2, [r1, #32]
 801413e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014140:	2000      	movs	r0, #0
 8014142:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014146:	1a12      	subs	r2, r2, r0
 8014148:	bf18      	it	ne
 801414a:	2201      	movne	r2, #1
 801414c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014150:	b005      	add	sp, #20
 8014152:	bd30      	pop	{r4, r5, pc}
 8014154:	680a      	ldr	r2, [r1, #0]
 8014156:	e7f2      	b.n	801413e <_rclc_check_for_new_data+0x22>
 8014158:	698a      	ldr	r2, [r1, #24]
 801415a:	e7f0      	b.n	801413e <_rclc_check_for_new_data+0x22>
 801415c:	688a      	ldr	r2, [r1, #8]
 801415e:	e7ee      	b.n	801413e <_rclc_check_for_new_data+0x22>
 8014160:	690a      	ldr	r2, [r1, #16]
 8014162:	e7ec      	b.n	801413e <_rclc_check_for_new_data+0x22>
 8014164:	685c      	ldr	r4, [r3, #4]
 8014166:	4608      	mov	r0, r1
 8014168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801416c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014174:	f104 0110 	add.w	r1, r4, #16
 8014178:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801417c:	9500      	str	r5, [sp, #0]
 801417e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8014182:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8014186:	f008 ff4b 	bl	801d020 <rcl_action_client_wait_set_get_entities_ready>
 801418a:	e7e1      	b.n	8014150 <_rclc_check_for_new_data+0x34>
 801418c:	685c      	ldr	r4, [r3, #4]
 801418e:	4608      	mov	r0, r1
 8014190:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8014194:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014198:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801419c:	e9cd 2100 	strd	r2, r1, [sp]
 80141a0:	f104 0220 	add.w	r2, r4, #32
 80141a4:	f104 0110 	add.w	r1, r4, #16
 80141a8:	f009 f952 	bl	801d450 <rcl_action_server_wait_set_get_entities_ready>
 80141ac:	e7d0      	b.n	8014150 <_rclc_check_for_new_data+0x34>
 80141ae:	200b      	movs	r0, #11
 80141b0:	4770      	bx	lr
 80141b2:	2001      	movs	r0, #1
 80141b4:	e7cc      	b.n	8014150 <_rclc_check_for_new_data+0x34>
 80141b6:	bf00      	nop

080141b8 <_rclc_take_new_data>:
 80141b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ba:	b09b      	sub	sp, #108	; 0x6c
 80141bc:	2800      	cmp	r0, #0
 80141be:	f000 8088 	beq.w	80142d2 <_rclc_take_new_data+0x11a>
 80141c2:	7803      	ldrb	r3, [r0, #0]
 80141c4:	4604      	mov	r4, r0
 80141c6:	2b0a      	cmp	r3, #10
 80141c8:	f200 8167 	bhi.w	801449a <_rclc_take_new_data+0x2e2>
 80141cc:	e8df f003 	tbb	[pc, r3]
 80141d0:	44152d2d 	.word	0x44152d2d
 80141d4:	19191944 	.word	0x19191944
 80141d8:	065a      	.short	0x065a
 80141da:	15          	.byte	0x15
 80141db:	00          	.byte	0x00
 80141dc:	6840      	ldr	r0, [r0, #4]
 80141de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f040 80b2 	bne.w	801434c <_rclc_take_new_data+0x194>
 80141e8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f040 80e4 	bne.w	80143ba <_rclc_take_new_data+0x202>
 80141f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d16f      	bne.n	80142da <_rclc_take_new_data+0x122>
 80141fa:	2500      	movs	r5, #0
 80141fc:	4628      	mov	r0, r5
 80141fe:	b01b      	add	sp, #108	; 0x6c
 8014200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014202:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014204:	6a0b      	ldr	r3, [r1, #32]
 8014206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d0f5      	beq.n	80141fa <_rclc_take_new_data+0x42>
 801420e:	6882      	ldr	r2, [r0, #8]
 8014210:	f100 0110 	add.w	r1, r0, #16
 8014214:	6840      	ldr	r0, [r0, #4]
 8014216:	f7ff fdd7 	bl	8013dc8 <rcl_take_request>
 801421a:	4605      	mov	r5, r0
 801421c:	2800      	cmp	r0, #0
 801421e:	d0ec      	beq.n	80141fa <_rclc_take_new_data+0x42>
 8014220:	f240 2359 	movw	r3, #601	; 0x259
 8014224:	4298      	cmp	r0, r3
 8014226:	d013      	beq.n	8014250 <_rclc_take_new_data+0x98>
 8014228:	e029      	b.n	801427e <_rclc_take_new_data+0xc6>
 801422a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801422c:	680b      	ldr	r3, [r1, #0]
 801422e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d0e1      	beq.n	80141fa <_rclc_take_new_data+0x42>
 8014236:	2300      	movs	r3, #0
 8014238:	aa0a      	add	r2, sp, #40	; 0x28
 801423a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801423e:	f7ff ff07 	bl	8014050 <rcl_take>
 8014242:	4605      	mov	r5, r0
 8014244:	2800      	cmp	r0, #0
 8014246:	d0d9      	beq.n	80141fc <_rclc_take_new_data+0x44>
 8014248:	f240 1391 	movw	r3, #401	; 0x191
 801424c:	4298      	cmp	r0, r3
 801424e:	d116      	bne.n	801427e <_rclc_take_new_data+0xc6>
 8014250:	2300      	movs	r3, #0
 8014252:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014256:	e7d1      	b.n	80141fc <_rclc_take_new_data+0x44>
 8014258:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801425a:	698b      	ldr	r3, [r1, #24]
 801425c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d0ca      	beq.n	80141fa <_rclc_take_new_data+0x42>
 8014264:	6882      	ldr	r2, [r0, #8]
 8014266:	f100 0110 	add.w	r1, r0, #16
 801426a:	6840      	ldr	r0, [r0, #4]
 801426c:	f007 f8c0 	bl	801b3f0 <rcl_take_response>
 8014270:	4605      	mov	r5, r0
 8014272:	2800      	cmp	r0, #0
 8014274:	d0c1      	beq.n	80141fa <_rclc_take_new_data+0x42>
 8014276:	f240 13f5 	movw	r3, #501	; 0x1f5
 801427a:	4298      	cmp	r0, r3
 801427c:	d0be      	beq.n	80141fc <_rclc_take_new_data+0x44>
 801427e:	f000 ff63 	bl	8015148 <rcutils_reset_error>
 8014282:	e7bb      	b.n	80141fc <_rclc_take_new_data+0x44>
 8014284:	6840      	ldr	r0, [r0, #4]
 8014286:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801428a:	2b00      	cmp	r3, #0
 801428c:	d17d      	bne.n	801438a <_rclc_take_new_data+0x1d2>
 801428e:	69c3      	ldr	r3, [r0, #28]
 8014290:	b11b      	cbz	r3, 801429a <_rclc_take_new_data+0xe2>
 8014292:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014296:	2b00      	cmp	r3, #0
 8014298:	d144      	bne.n	8014324 <_rclc_take_new_data+0x16c>
 801429a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f040 80ac 	bne.w	80143fc <_rclc_take_new_data+0x244>
 80142a4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d0a6      	beq.n	80141fa <_rclc_take_new_data+0x42>
 80142ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80142ae:	a90a      	add	r1, sp, #40	; 0x28
 80142b0:	3010      	adds	r0, #16
 80142b2:	f008 fd8d 	bl	801cdd0 <rcl_action_take_result_response>
 80142b6:	4605      	mov	r5, r0
 80142b8:	2800      	cmp	r0, #0
 80142ba:	d1e0      	bne.n	801427e <_rclc_take_new_data+0xc6>
 80142bc:	6860      	ldr	r0, [r4, #4]
 80142be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142c2:	f009 f9f5 	bl	801d6b0 <rclc_action_find_handle_by_result_request_sequence_number>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d098      	beq.n	80141fc <_rclc_take_new_data+0x44>
 80142ca:	2301      	movs	r3, #1
 80142cc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80142d0:	e794      	b.n	80141fc <_rclc_take_new_data+0x44>
 80142d2:	250b      	movs	r5, #11
 80142d4:	4628      	mov	r0, r5
 80142d6:	b01b      	add	sp, #108	; 0x6c
 80142d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142da:	ae04      	add	r6, sp, #16
 80142dc:	3010      	adds	r0, #16
 80142de:	aa0a      	add	r2, sp, #40	; 0x28
 80142e0:	4631      	mov	r1, r6
 80142e2:	f008 ffe9 	bl	801d2b8 <rcl_action_take_cancel_request>
 80142e6:	4605      	mov	r5, r0
 80142e8:	2800      	cmp	r0, #0
 80142ea:	d1c8      	bne.n	801427e <_rclc_take_new_data+0xc6>
 80142ec:	a90a      	add	r1, sp, #40	; 0x28
 80142ee:	6860      	ldr	r0, [r4, #4]
 80142f0:	f009 f99e 	bl	801d630 <rclc_action_find_goal_handle_by_uuid>
 80142f4:	4607      	mov	r7, r0
 80142f6:	2800      	cmp	r0, #0
 80142f8:	f000 80bb 	beq.w	8014472 <_rclc_take_new_data+0x2ba>
 80142fc:	2101      	movs	r1, #1
 80142fe:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014302:	f009 f91f 	bl	801d544 <rcl_action_transition_goal_state>
 8014306:	2803      	cmp	r0, #3
 8014308:	4684      	mov	ip, r0
 801430a:	f040 80a7 	bne.w	801445c <_rclc_take_new_data+0x2a4>
 801430e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8014312:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014316:	e896 0003 	ldmia.w	r6, {r0, r1}
 801431a:	e884 0003 	stmia.w	r4, {r0, r1}
 801431e:	f887 c008 	strb.w	ip, [r7, #8]
 8014322:	e76b      	b.n	80141fc <_rclc_take_new_data+0x44>
 8014324:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014326:	3010      	adds	r0, #16
 8014328:	f008 fdd2 	bl	801ced0 <rcl_action_take_feedback>
 801432c:	4605      	mov	r5, r0
 801432e:	2800      	cmp	r0, #0
 8014330:	d1a5      	bne.n	801427e <_rclc_take_new_data+0xc6>
 8014332:	6860      	ldr	r0, [r4, #4]
 8014334:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014336:	f009 f97b 	bl	801d630 <rclc_action_find_goal_handle_by_uuid>
 801433a:	4603      	mov	r3, r0
 801433c:	2800      	cmp	r0, #0
 801433e:	f000 80a3 	beq.w	8014488 <_rclc_take_new_data+0x2d0>
 8014342:	2201      	movs	r2, #1
 8014344:	6860      	ldr	r0, [r4, #4]
 8014346:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 801434a:	e7a6      	b.n	801429a <_rclc_take_new_data+0xe2>
 801434c:	f009 f94a 	bl	801d5e4 <rclc_action_take_goal_handle>
 8014350:	4606      	mov	r6, r0
 8014352:	6860      	ldr	r0, [r4, #4]
 8014354:	2e00      	cmp	r6, #0
 8014356:	f43f af47 	beq.w	80141e8 <_rclc_take_new_data+0x30>
 801435a:	6070      	str	r0, [r6, #4]
 801435c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014360:	69f2      	ldr	r2, [r6, #28]
 8014362:	3010      	adds	r0, #16
 8014364:	f008 fef2 	bl	801d14c <rcl_action_take_goal_request>
 8014368:	4605      	mov	r5, r0
 801436a:	2800      	cmp	r0, #0
 801436c:	f040 808e 	bne.w	801448c <_rclc_take_new_data+0x2d4>
 8014370:	69f7      	ldr	r7, [r6, #28]
 8014372:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014374:	7235      	strb	r5, [r6, #8]
 8014376:	f8c6 0009 	str.w	r0, [r6, #9]
 801437a:	f8c6 100d 	str.w	r1, [r6, #13]
 801437e:	6860      	ldr	r0, [r4, #4]
 8014380:	f8c6 2011 	str.w	r2, [r6, #17]
 8014384:	f8c6 3015 	str.w	r3, [r6, #21]
 8014388:	e72e      	b.n	80141e8 <_rclc_take_new_data+0x30>
 801438a:	aa04      	add	r2, sp, #16
 801438c:	a90a      	add	r1, sp, #40	; 0x28
 801438e:	3010      	adds	r0, #16
 8014390:	f008 fca6 	bl	801cce0 <rcl_action_take_goal_response>
 8014394:	4605      	mov	r5, r0
 8014396:	2800      	cmp	r0, #0
 8014398:	f47f af71 	bne.w	801427e <_rclc_take_new_data+0xc6>
 801439c:	6860      	ldr	r0, [r4, #4]
 801439e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80143a2:	f009 f973 	bl	801d68c <rclc_action_find_handle_by_goal_request_sequence_number>
 80143a6:	b130      	cbz	r0, 80143b6 <_rclc_take_new_data+0x1fe>
 80143a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80143ac:	2201      	movs	r2, #1
 80143ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80143b2:	f880 2020 	strb.w	r2, [r0, #32]
 80143b6:	6860      	ldr	r0, [r4, #4]
 80143b8:	e769      	b.n	801428e <_rclc_take_new_data+0xd6>
 80143ba:	3010      	adds	r0, #16
 80143bc:	aa04      	add	r2, sp, #16
 80143be:	a90a      	add	r1, sp, #40	; 0x28
 80143c0:	f008 ff3a 	bl	801d238 <rcl_action_take_result_request>
 80143c4:	4605      	mov	r5, r0
 80143c6:	2800      	cmp	r0, #0
 80143c8:	f47f af59 	bne.w	801427e <_rclc_take_new_data+0xc6>
 80143cc:	a904      	add	r1, sp, #16
 80143ce:	6860      	ldr	r0, [r4, #4]
 80143d0:	f009 f92e 	bl	801d630 <rclc_action_find_goal_handle_by_uuid>
 80143d4:	4607      	mov	r7, r0
 80143d6:	b160      	cbz	r0, 80143f2 <_rclc_take_new_data+0x23a>
 80143d8:	ad0a      	add	r5, sp, #40	; 0x28
 80143da:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80143de:	f04f 0c02 	mov.w	ip, #2
 80143e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80143e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80143ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80143ee:	f887 c008 	strb.w	ip, [r7, #8]
 80143f2:	6860      	ldr	r0, [r4, #4]
 80143f4:	2300      	movs	r3, #0
 80143f6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80143fa:	e6fa      	b.n	80141f2 <_rclc_take_new_data+0x3a>
 80143fc:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014400:	a90a      	add	r1, sp, #40	; 0x28
 8014402:	3010      	adds	r0, #16
 8014404:	f008 fd24 	bl	801ce50 <rcl_action_take_cancel_response>
 8014408:	4605      	mov	r5, r0
 801440a:	2800      	cmp	r0, #0
 801440c:	f47f af37 	bne.w	801427e <_rclc_take_new_data+0xc6>
 8014410:	6860      	ldr	r0, [r4, #4]
 8014412:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014416:	f009 f95d 	bl	801d6d4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801441a:	4606      	mov	r6, r0
 801441c:	6860      	ldr	r0, [r4, #4]
 801441e:	2e00      	cmp	r6, #0
 8014420:	f43f af40 	beq.w	80142a4 <_rclc_take_new_data+0xec>
 8014424:	2701      	movs	r7, #1
 8014426:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014428:	84b7      	strh	r7, [r6, #36]	; 0x24
 801442a:	2b00      	cmp	r3, #0
 801442c:	f43f af3a 	beq.w	80142a4 <_rclc_take_new_data+0xec>
 8014430:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014432:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014436:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801443a:	f009 f8f9 	bl	801d630 <rclc_action_find_goal_handle_by_uuid>
 801443e:	b138      	cbz	r0, 8014450 <_rclc_take_new_data+0x298>
 8014440:	6860      	ldr	r0, [r4, #4]
 8014442:	3501      	adds	r5, #1
 8014444:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8014448:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801444a:	42ab      	cmp	r3, r5
 801444c:	d8f0      	bhi.n	8014430 <_rclc_take_new_data+0x278>
 801444e:	e729      	b.n	80142a4 <_rclc_take_new_data+0xec>
 8014450:	6860      	ldr	r0, [r4, #4]
 8014452:	3501      	adds	r5, #1
 8014454:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014456:	42ab      	cmp	r3, r5
 8014458:	d8ea      	bhi.n	8014430 <_rclc_take_new_data+0x278>
 801445a:	e723      	b.n	80142a4 <_rclc_take_new_data+0xec>
 801445c:	ab06      	add	r3, sp, #24
 801445e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014460:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014464:	2103      	movs	r1, #3
 8014466:	6860      	ldr	r0, [r4, #4]
 8014468:	e896 000c 	ldmia.w	r6, {r2, r3}
 801446c:	f009 f9a8 	bl	801d7c0 <rclc_action_server_goal_cancel_reject>
 8014470:	e6c4      	b.n	80141fc <_rclc_take_new_data+0x44>
 8014472:	ab06      	add	r3, sp, #24
 8014474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014476:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801447a:	2102      	movs	r1, #2
 801447c:	6860      	ldr	r0, [r4, #4]
 801447e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014482:	f009 f99d 	bl	801d7c0 <rclc_action_server_goal_cancel_reject>
 8014486:	e6b9      	b.n	80141fc <_rclc_take_new_data+0x44>
 8014488:	6860      	ldr	r0, [r4, #4]
 801448a:	e706      	b.n	801429a <_rclc_take_new_data+0xe2>
 801448c:	4631      	mov	r1, r6
 801448e:	6860      	ldr	r0, [r4, #4]
 8014490:	f009 f8b8 	bl	801d604 <rclc_action_remove_used_goal_handle>
 8014494:	f000 fe58 	bl	8015148 <rcutils_reset_error>
 8014498:	e6b0      	b.n	80141fc <_rclc_take_new_data+0x44>
 801449a:	2501      	movs	r5, #1
 801449c:	e6ae      	b.n	80141fc <_rclc_take_new_data+0x44>
 801449e:	bf00      	nop

080144a0 <_rclc_execute.part.0>:
 80144a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144a2:	7803      	ldrb	r3, [r0, #0]
 80144a4:	b085      	sub	sp, #20
 80144a6:	4604      	mov	r4, r0
 80144a8:	2b0a      	cmp	r3, #10
 80144aa:	f200 8139 	bhi.w	8014720 <_rclc_execute.part.0+0x280>
 80144ae:	e8df f003 	tbb	[pc, r3]
 80144b2:	4268      	.short	0x4268
 80144b4:	06a75b4d 	.word	0x06a75b4d
 80144b8:	721d0606 	.word	0x721d0606
 80144bc:	62          	.byte	0x62
 80144bd:	00          	.byte	0x00
 80144be:	2b06      	cmp	r3, #6
 80144c0:	f000 8126 	beq.w	8014710 <_rclc_execute.part.0+0x270>
 80144c4:	2b07      	cmp	r3, #7
 80144c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80144c8:	f040 811c 	bne.w	8014704 <_rclc_execute.part.0+0x264>
 80144cc:	f104 0510 	add.w	r5, r4, #16
 80144d0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 80144d4:	6880      	ldr	r0, [r0, #8]
 80144d6:	4798      	blx	r3
 80144d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80144da:	4629      	mov	r1, r5
 80144dc:	6860      	ldr	r0, [r4, #4]
 80144de:	f7ff fcb3 	bl	8013e48 <rcl_send_response>
 80144e2:	4604      	mov	r4, r0
 80144e4:	b378      	cbz	r0, 8014546 <_rclc_execute.part.0+0xa6>
 80144e6:	f000 fe2f 	bl	8015148 <rcutils_reset_error>
 80144ea:	e02c      	b.n	8014546 <_rclc_execute.part.0+0xa6>
 80144ec:	6840      	ldr	r0, [r0, #4]
 80144ee:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f000 808e 	beq.w	8014614 <_rclc_execute.part.0+0x174>
 80144f8:	2600      	movs	r6, #0
 80144fa:	2701      	movs	r7, #1
 80144fc:	e004      	b.n	8014508 <_rclc_execute.part.0+0x68>
 80144fe:	f009 f84b 	bl	801d598 <rclc_action_send_result_request>
 8014502:	b998      	cbnz	r0, 801452c <_rclc_execute.part.0+0x8c>
 8014504:	722f      	strb	r7, [r5, #8]
 8014506:	6860      	ldr	r0, [r4, #4]
 8014508:	f009 f8f6 	bl	801d6f8 <rclc_action_find_first_handle_with_goal_response>
 801450c:	4605      	mov	r5, r0
 801450e:	2800      	cmp	r0, #0
 8014510:	d07f      	beq.n	8014612 <_rclc_execute.part.0+0x172>
 8014512:	6863      	ldr	r3, [r4, #4]
 8014514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014516:	699b      	ldr	r3, [r3, #24]
 8014518:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 801451c:	f885 6020 	strb.w	r6, [r5, #32]
 8014520:	4798      	blx	r3
 8014522:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014526:	4628      	mov	r0, r5
 8014528:	2b00      	cmp	r3, #0
 801452a:	d1e8      	bne.n	80144fe <_rclc_execute.part.0+0x5e>
 801452c:	6860      	ldr	r0, [r4, #4]
 801452e:	4629      	mov	r1, r5
 8014530:	f009 f868 	bl	801d604 <rclc_action_remove_used_goal_handle>
 8014534:	e7e7      	b.n	8014506 <_rclc_execute.part.0+0x66>
 8014536:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801453a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 801453e:	b100      	cbz	r0, 8014542 <_rclc_execute.part.0+0xa2>
 8014540:	68a0      	ldr	r0, [r4, #8]
 8014542:	2400      	movs	r4, #0
 8014544:	4798      	blx	r3
 8014546:	4620      	mov	r0, r4
 8014548:	b005      	add	sp, #20
 801454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801454c:	6840      	ldr	r0, [r0, #4]
 801454e:	f007 fc7d 	bl	801be4c <rcl_timer_call>
 8014552:	f240 3321 	movw	r3, #801	; 0x321
 8014556:	4604      	mov	r4, r0
 8014558:	4298      	cmp	r0, r3
 801455a:	d001      	beq.n	8014560 <_rclc_execute.part.0+0xc0>
 801455c:	2800      	cmp	r0, #0
 801455e:	d1c2      	bne.n	80144e6 <_rclc_execute.part.0+0x46>
 8014560:	2400      	movs	r4, #0
 8014562:	4620      	mov	r0, r4
 8014564:	b005      	add	sp, #20
 8014566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014568:	2400      	movs	r4, #0
 801456a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801456c:	6880      	ldr	r0, [r0, #8]
 801456e:	4798      	blx	r3
 8014570:	4620      	mov	r0, r4
 8014572:	b005      	add	sp, #20
 8014574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014576:	2400      	movs	r4, #0
 8014578:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801457a:	4798      	blx	r3
 801457c:	4620      	mov	r0, r4
 801457e:	b005      	add	sp, #20
 8014580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014582:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8014586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014588:	b100      	cbz	r0, 801458c <_rclc_execute.part.0+0xec>
 801458a:	68a0      	ldr	r0, [r4, #8]
 801458c:	2400      	movs	r4, #0
 801458e:	4798      	blx	r3
 8014590:	4620      	mov	r0, r4
 8014592:	b005      	add	sp, #20
 8014594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014596:	6840      	ldr	r0, [r0, #4]
 8014598:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801459c:	bb3b      	cbnz	r3, 80145ee <_rclc_execute.part.0+0x14e>
 801459e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d07d      	beq.n	80146a2 <_rclc_execute.part.0+0x202>
 80145a6:	f640 0634 	movw	r6, #2100	; 0x834
 80145aa:	2701      	movs	r7, #1
 80145ac:	e007      	b.n	80145be <_rclc_execute.part.0+0x11e>
 80145ae:	4628      	mov	r0, r5
 80145b0:	f009 f8ba 	bl	801d728 <rclc_action_server_response_goal_request>
 80145b4:	4629      	mov	r1, r5
 80145b6:	6860      	ldr	r0, [r4, #4]
 80145b8:	f009 f824 	bl	801d604 <rclc_action_remove_used_goal_handle>
 80145bc:	6860      	ldr	r0, [r4, #4]
 80145be:	2100      	movs	r1, #0
 80145c0:	f009 f84c 	bl	801d65c <rclc_action_find_first_handle_by_status>
 80145c4:	4605      	mov	r5, r0
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d068      	beq.n	801469c <_rclc_execute.part.0+0x1fc>
 80145ca:	6863      	ldr	r3, [r4, #4]
 80145cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80145ce:	699b      	ldr	r3, [r3, #24]
 80145d0:	4798      	blx	r3
 80145d2:	42b0      	cmp	r0, r6
 80145d4:	f04f 0100 	mov.w	r1, #0
 80145d8:	d1e9      	bne.n	80145ae <_rclc_execute.part.0+0x10e>
 80145da:	2101      	movs	r1, #1
 80145dc:	4628      	mov	r0, r5
 80145de:	f009 f8a3 	bl	801d728 <rclc_action_server_response_goal_request>
 80145e2:	722f      	strb	r7, [r5, #8]
 80145e4:	e7ea      	b.n	80145bc <_rclc_execute.part.0+0x11c>
 80145e6:	6848      	ldr	r0, [r1, #4]
 80145e8:	f009 f80c 	bl	801d604 <rclc_action_remove_used_goal_handle>
 80145ec:	6860      	ldr	r0, [r4, #4]
 80145ee:	f009 f841 	bl	801d674 <rclc_action_find_first_terminated_handle>
 80145f2:	4601      	mov	r1, r0
 80145f4:	2800      	cmp	r0, #0
 80145f6:	d1f6      	bne.n	80145e6 <_rclc_execute.part.0+0x146>
 80145f8:	6860      	ldr	r0, [r4, #4]
 80145fa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80145fe:	e7ce      	b.n	801459e <_rclc_execute.part.0+0xfe>
 8014600:	2400      	movs	r4, #0
 8014602:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014604:	f100 0110 	add.w	r1, r0, #16
 8014608:	6880      	ldr	r0, [r0, #8]
 801460a:	4798      	blx	r3
 801460c:	4620      	mov	r0, r4
 801460e:	b005      	add	sp, #20
 8014610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014612:	6860      	ldr	r0, [r4, #4]
 8014614:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014618:	b18b      	cbz	r3, 801463e <_rclc_execute.part.0+0x19e>
 801461a:	68c5      	ldr	r5, [r0, #12]
 801461c:	b32d      	cbz	r5, 801466a <_rclc_execute.part.0+0x1ca>
 801461e:	2600      	movs	r6, #0
 8014620:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8014624:	b143      	cbz	r3, 8014638 <_rclc_execute.part.0+0x198>
 8014626:	69c3      	ldr	r3, [r0, #28]
 8014628:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 801462c:	b123      	cbz	r3, 8014638 <_rclc_execute.part.0+0x198>
 801462e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014630:	4628      	mov	r0, r5
 8014632:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014634:	4798      	blx	r3
 8014636:	6860      	ldr	r0, [r4, #4]
 8014638:	682d      	ldr	r5, [r5, #0]
 801463a:	2d00      	cmp	r5, #0
 801463c:	d1f0      	bne.n	8014620 <_rclc_execute.part.0+0x180>
 801463e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014642:	b193      	cbz	r3, 801466a <_rclc_execute.part.0+0x1ca>
 8014644:	68c5      	ldr	r5, [r0, #12]
 8014646:	b185      	cbz	r5, 801466a <_rclc_execute.part.0+0x1ca>
 8014648:	2600      	movs	r6, #0
 801464a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801464e:	b14b      	cbz	r3, 8014664 <_rclc_execute.part.0+0x1c4>
 8014650:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014652:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8014656:	b12b      	cbz	r3, 8014664 <_rclc_execute.part.0+0x1c4>
 8014658:	4628      	mov	r0, r5
 801465a:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 801465e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014660:	4798      	blx	r3
 8014662:	6860      	ldr	r0, [r4, #4]
 8014664:	682d      	ldr	r5, [r5, #0]
 8014666:	2d00      	cmp	r5, #0
 8014668:	d1ef      	bne.n	801464a <_rclc_execute.part.0+0x1aa>
 801466a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 801466e:	2b00      	cmp	r3, #0
 8014670:	f43f af76 	beq.w	8014560 <_rclc_execute.part.0+0xc0>
 8014674:	2700      	movs	r7, #0
 8014676:	e00b      	b.n	8014690 <_rclc_execute.part.0+0x1f0>
 8014678:	6863      	ldr	r3, [r4, #4]
 801467a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801467c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801467e:	6a1e      	ldr	r6, [r3, #32]
 8014680:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8014684:	47b0      	blx	r6
 8014686:	6860      	ldr	r0, [r4, #4]
 8014688:	4629      	mov	r1, r5
 801468a:	f008 ffbb 	bl	801d604 <rclc_action_remove_used_goal_handle>
 801468e:	6860      	ldr	r0, [r4, #4]
 8014690:	f009 f83e 	bl	801d710 <rclc_action_find_first_handle_with_result_response>
 8014694:	4605      	mov	r5, r0
 8014696:	2800      	cmp	r0, #0
 8014698:	d1ee      	bne.n	8014678 <_rclc_execute.part.0+0x1d8>
 801469a:	e761      	b.n	8014560 <_rclc_execute.part.0+0xc0>
 801469c:	6860      	ldr	r0, [r4, #4]
 801469e:	f880 5020 	strb.w	r5, [r0, #32]
 80146a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f43f af5a 	beq.w	8014560 <_rclc_execute.part.0+0xc0>
 80146ac:	68c5      	ldr	r5, [r0, #12]
 80146ae:	b1b5      	cbz	r5, 80146de <_rclc_execute.part.0+0x23e>
 80146b0:	2602      	movs	r6, #2
 80146b2:	e001      	b.n	80146b8 <_rclc_execute.part.0+0x218>
 80146b4:	682d      	ldr	r5, [r5, #0]
 80146b6:	b195      	cbz	r5, 80146de <_rclc_execute.part.0+0x23e>
 80146b8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80146bc:	2b03      	cmp	r3, #3
 80146be:	d1f9      	bne.n	80146b4 <_rclc_execute.part.0+0x214>
 80146c0:	69c3      	ldr	r3, [r0, #28]
 80146c2:	4628      	mov	r0, r5
 80146c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80146c6:	4798      	blx	r3
 80146c8:	4603      	mov	r3, r0
 80146ca:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80146ce:	4628      	mov	r0, r5
 80146d0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80146d4:	b143      	cbz	r3, 80146e8 <_rclc_execute.part.0+0x248>
 80146d6:	f009 f847 	bl	801d768 <rclc_action_server_goal_cancel_accept>
 80146da:	6860      	ldr	r0, [r4, #4]
 80146dc:	e7ea      	b.n	80146b4 <_rclc_execute.part.0+0x214>
 80146de:	2300      	movs	r3, #0
 80146e0:	461c      	mov	r4, r3
 80146e2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80146e6:	e72e      	b.n	8014546 <_rclc_execute.part.0+0xa6>
 80146e8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80146ea:	f105 0758 	add.w	r7, r5, #88	; 0x58
 80146ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80146f2:	2101      	movs	r1, #1
 80146f4:	6860      	ldr	r0, [r4, #4]
 80146f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146fa:	f009 f861 	bl	801d7c0 <rclc_action_server_goal_cancel_reject>
 80146fe:	722e      	strb	r6, [r5, #8]
 8014700:	6860      	ldr	r0, [r4, #4]
 8014702:	e7d7      	b.n	80146b4 <_rclc_execute.part.0+0x214>
 8014704:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014706:	f104 0510 	add.w	r5, r4, #16
 801470a:	6880      	ldr	r0, [r0, #8]
 801470c:	4798      	blx	r3
 801470e:	e6e3      	b.n	80144d8 <_rclc_execute.part.0+0x38>
 8014710:	f100 0510 	add.w	r5, r0, #16
 8014714:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014716:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014718:	4629      	mov	r1, r5
 801471a:	6880      	ldr	r0, [r0, #8]
 801471c:	4798      	blx	r3
 801471e:	e6db      	b.n	80144d8 <_rclc_execute.part.0+0x38>
 8014720:	2401      	movs	r4, #1
 8014722:	e710      	b.n	8014546 <_rclc_execute.part.0+0xa6>

08014724 <rclc_executor_trigger_any>:
 8014724:	2800      	cmp	r0, #0
 8014726:	d03d      	beq.n	80147a4 <rclc_executor_trigger_any+0x80>
 8014728:	2900      	cmp	r1, #0
 801472a:	d03c      	beq.n	80147a6 <rclc_executor_trigger_any+0x82>
 801472c:	4603      	mov	r3, r0
 801472e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8014732:	2200      	movs	r2, #0
 8014734:	2800      	cmp	r0, #0
 8014736:	d035      	beq.n	80147a4 <rclc_executor_trigger_any+0x80>
 8014738:	b430      	push	{r4, r5}
 801473a:	f893 c000 	ldrb.w	ip, [r3]
 801473e:	f1bc 0f08 	cmp.w	ip, #8
 8014742:	d11d      	bne.n	8014780 <rclc_executor_trigger_any+0x5c>
 8014744:	685c      	ldr	r4, [r3, #4]
 8014746:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014748:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 801474c:	d105      	bne.n	801475a <rclc_executor_trigger_any+0x36>
 801474e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8014752:	b910      	cbnz	r0, 801475a <rclc_executor_trigger_any+0x36>
 8014754:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8014758:	b128      	cbz	r0, 8014766 <rclc_executor_trigger_any+0x42>
 801475a:	bc30      	pop	{r4, r5}
 801475c:	4770      	bx	lr
 801475e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8014762:	2800      	cmp	r0, #0
 8014764:	d1f9      	bne.n	801475a <rclc_executor_trigger_any+0x36>
 8014766:	3201      	adds	r2, #1
 8014768:	3340      	adds	r3, #64	; 0x40
 801476a:	4291      	cmp	r1, r2
 801476c:	d017      	beq.n	801479e <rclc_executor_trigger_any+0x7a>
 801476e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8014772:	2800      	cmp	r0, #0
 8014774:	d0f1      	beq.n	801475a <rclc_executor_trigger_any+0x36>
 8014776:	f893 c000 	ldrb.w	ip, [r3]
 801477a:	f1bc 0f08 	cmp.w	ip, #8
 801477e:	d0e1      	beq.n	8014744 <rclc_executor_trigger_any+0x20>
 8014780:	f1bc 0f09 	cmp.w	ip, #9
 8014784:	d1eb      	bne.n	801475e <rclc_executor_trigger_any+0x3a>
 8014786:	685c      	ldr	r4, [r3, #4]
 8014788:	6a25      	ldr	r5, [r4, #32]
 801478a:	2d00      	cmp	r5, #0
 801478c:	d1e5      	bne.n	801475a <rclc_executor_trigger_any+0x36>
 801478e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8014792:	2800      	cmp	r0, #0
 8014794:	d1e1      	bne.n	801475a <rclc_executor_trigger_any+0x36>
 8014796:	3201      	adds	r2, #1
 8014798:	3340      	adds	r3, #64	; 0x40
 801479a:	4291      	cmp	r1, r2
 801479c:	d1e7      	bne.n	801476e <rclc_executor_trigger_any+0x4a>
 801479e:	2000      	movs	r0, #0
 80147a0:	bc30      	pop	{r4, r5}
 80147a2:	4770      	bx	lr
 80147a4:	4770      	bx	lr
 80147a6:	4608      	mov	r0, r1
 80147a8:	4770      	bx	lr
 80147aa:	bf00      	nop

080147ac <rclc_executor_get_zero_initialized_executor>:
 80147ac:	b510      	push	{r4, lr}
 80147ae:	4604      	mov	r4, r0
 80147b0:	2288      	movs	r2, #136	; 0x88
 80147b2:	4902      	ldr	r1, [pc, #8]	; (80147bc <rclc_executor_get_zero_initialized_executor+0x10>)
 80147b4:	f00c fbeb 	bl	8020f8e <memcpy>
 80147b8:	4620      	mov	r0, r4
 80147ba:	bd10      	pop	{r4, pc}
 80147bc:	08024f78 	.word	0x08024f78

080147c0 <rclc_executor_init>:
 80147c0:	2900      	cmp	r1, #0
 80147c2:	d06a      	beq.n	801489a <rclc_executor_init+0xda>
 80147c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147c8:	4605      	mov	r5, r0
 80147ca:	b0b0      	sub	sp, #192	; 0xc0
 80147cc:	2800      	cmp	r0, #0
 80147ce:	d05c      	beq.n	801488a <rclc_executor_init+0xca>
 80147d0:	4616      	mov	r6, r2
 80147d2:	4618      	mov	r0, r3
 80147d4:	4688      	mov	r8, r1
 80147d6:	461f      	mov	r7, r3
 80147d8:	f000 fc78 	bl	80150cc <rcutils_allocator_is_valid>
 80147dc:	2e00      	cmp	r6, #0
 80147de:	d054      	beq.n	801488a <rclc_executor_init+0xca>
 80147e0:	f080 0401 	eor.w	r4, r0, #1
 80147e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80147e8:	d14f      	bne.n	801488a <rclc_executor_init+0xca>
 80147ea:	2288      	movs	r2, #136	; 0x88
 80147ec:	4930      	ldr	r1, [pc, #192]	; (80148b0 <rclc_executor_init+0xf0>)
 80147ee:	a80e      	add	r0, sp, #56	; 0x38
 80147f0:	f00c fbcd 	bl	8020f8e <memcpy>
 80147f4:	a90e      	add	r1, sp, #56	; 0x38
 80147f6:	2288      	movs	r2, #136	; 0x88
 80147f8:	4628      	mov	r0, r5
 80147fa:	f00c fbc8 	bl	8020f8e <memcpy>
 80147fe:	4668      	mov	r0, sp
 8014800:	f8c5 8000 	str.w	r8, [r5]
 8014804:	60ae      	str	r6, [r5, #8]
 8014806:	f007 fc97 	bl	801c138 <rcl_get_zero_initialized_wait_set>
 801480a:	46ec      	mov	ip, sp
 801480c:	f105 0e14 	add.w	lr, r5, #20
 8014810:	f8d7 8000 	ldr.w	r8, [r7]
 8014814:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014818:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801481c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014820:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014828:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80148a8 <rclc_executor_init+0xe8>
 801482c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014830:	f8dc 3000 	ldr.w	r3, [ip]
 8014834:	01b0      	lsls	r0, r6, #6
 8014836:	6939      	ldr	r1, [r7, #16]
 8014838:	f8ce 3000 	str.w	r3, [lr]
 801483c:	612f      	str	r7, [r5, #16]
 801483e:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8014842:	47c0      	blx	r8
 8014844:	6068      	str	r0, [r5, #4]
 8014846:	b908      	cbnz	r0, 801484c <rclc_executor_init+0x8c>
 8014848:	e029      	b.n	801489e <rclc_executor_init+0xde>
 801484a:	6868      	ldr	r0, [r5, #4]
 801484c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014850:	3401      	adds	r4, #1
 8014852:	4631      	mov	r1, r6
 8014854:	f000 fac0 	bl	8014dd8 <rclc_executor_handle_init>
 8014858:	42a6      	cmp	r6, r4
 801485a:	d8f6      	bhi.n	801484a <rclc_executor_init+0x8a>
 801485c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014860:	f000 faae 	bl	8014dc0 <rclc_executor_handle_counters_zero_init>
 8014864:	4a13      	ldr	r2, [pc, #76]	; (80148b4 <rclc_executor_init+0xf4>)
 8014866:	2300      	movs	r3, #0
 8014868:	6868      	ldr	r0, [r5, #4]
 801486a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 801486e:	b168      	cbz	r0, 801488c <rclc_executor_init+0xcc>
 8014870:	68ab      	ldr	r3, [r5, #8]
 8014872:	b173      	cbz	r3, 8014892 <rclc_executor_init+0xd2>
 8014874:	692a      	ldr	r2, [r5, #16]
 8014876:	fab2 f382 	clz	r3, r2
 801487a:	095b      	lsrs	r3, r3, #5
 801487c:	b14a      	cbz	r2, 8014892 <rclc_executor_init+0xd2>
 801487e:	4618      	mov	r0, r3
 8014880:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8014884:	b030      	add	sp, #192	; 0xc0
 8014886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488a:	200b      	movs	r0, #11
 801488c:	b030      	add	sp, #192	; 0xc0
 801488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014892:	2000      	movs	r0, #0
 8014894:	b030      	add	sp, #192	; 0xc0
 8014896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801489a:	200b      	movs	r0, #11
 801489c:	4770      	bx	lr
 801489e:	200a      	movs	r0, #10
 80148a0:	e7f4      	b.n	801488c <rclc_executor_init+0xcc>
 80148a2:	bf00      	nop
 80148a4:	f3af 8000 	nop.w
 80148a8:	3b9aca00 	.word	0x3b9aca00
 80148ac:	00000000 	.word	0x00000000
 80148b0:	08024f78 	.word	0x08024f78
 80148b4:	08014725 	.word	0x08014725

080148b8 <rclc_executor_add_subscription>:
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	bf18      	it	ne
 80148bc:	2a00      	cmpne	r2, #0
 80148be:	b570      	push	{r4, r5, r6, lr}
 80148c0:	4604      	mov	r4, r0
 80148c2:	bf0c      	ite	eq
 80148c4:	2001      	moveq	r0, #1
 80148c6:	2000      	movne	r0, #0
 80148c8:	f89d c010 	ldrb.w	ip, [sp, #16]
 80148cc:	2900      	cmp	r1, #0
 80148ce:	bf08      	it	eq
 80148d0:	f040 0001 	orreq.w	r0, r0, #1
 80148d4:	bb28      	cbnz	r0, 8014922 <rclc_executor_add_subscription+0x6a>
 80148d6:	fab4 f584 	clz	r5, r4
 80148da:	096d      	lsrs	r5, r5, #5
 80148dc:	b30c      	cbz	r4, 8014922 <rclc_executor_add_subscription+0x6a>
 80148de:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 80148e2:	4286      	cmp	r6, r0
 80148e4:	d301      	bcc.n	80148ea <rclc_executor_add_subscription+0x32>
 80148e6:	2001      	movs	r0, #1
 80148e8:	bd70      	pop	{r4, r5, r6, pc}
 80148ea:	6860      	ldr	r0, [r4, #4]
 80148ec:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 80148f0:	f800 500e 	strb.w	r5, [r0, lr]
 80148f4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80148f8:	3601      	adds	r6, #1
 80148fa:	6303      	str	r3, [r0, #48]	; 0x30
 80148fc:	2301      	movs	r3, #1
 80148fe:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014900:	f104 0514 	add.w	r5, r4, #20
 8014904:	f880 c001 	strb.w	ip, [r0, #1]
 8014908:	8703      	strh	r3, [r0, #56]	; 0x38
 801490a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801490e:	4628      	mov	r0, r5
 8014910:	60e6      	str	r6, [r4, #12]
 8014912:	f007 fc25 	bl	801c160 <rcl_wait_set_is_valid>
 8014916:	b930      	cbnz	r0, 8014926 <rclc_executor_add_subscription+0x6e>
 8014918:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801491a:	2000      	movs	r0, #0
 801491c:	3301      	adds	r3, #1
 801491e:	64a3      	str	r3, [r4, #72]	; 0x48
 8014920:	bd70      	pop	{r4, r5, r6, pc}
 8014922:	200b      	movs	r0, #11
 8014924:	bd70      	pop	{r4, r5, r6, pc}
 8014926:	4628      	mov	r0, r5
 8014928:	f007 fc20 	bl	801c16c <rcl_wait_set_fini>
 801492c:	2800      	cmp	r0, #0
 801492e:	d0f3      	beq.n	8014918 <rclc_executor_add_subscription+0x60>
 8014930:	bd70      	pop	{r4, r5, r6, pc}
 8014932:	bf00      	nop

08014934 <rclc_executor_add_service>:
 8014934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014936:	9d06      	ldr	r5, [sp, #24]
 8014938:	4604      	mov	r4, r0
 801493a:	2b00      	cmp	r3, #0
 801493c:	bf18      	it	ne
 801493e:	2d00      	cmpne	r5, #0
 8014940:	bf0c      	ite	eq
 8014942:	2001      	moveq	r0, #1
 8014944:	2000      	movne	r0, #0
 8014946:	2a00      	cmp	r2, #0
 8014948:	bf08      	it	eq
 801494a:	f040 0001 	orreq.w	r0, r0, #1
 801494e:	2900      	cmp	r1, #0
 8014950:	bf08      	it	eq
 8014952:	f040 0001 	orreq.w	r0, r0, #1
 8014956:	bb40      	cbnz	r0, 80149aa <rclc_executor_add_service+0x76>
 8014958:	fab4 f684 	clz	r6, r4
 801495c:	0976      	lsrs	r6, r6, #5
 801495e:	b324      	cbz	r4, 80149aa <rclc_executor_add_service+0x76>
 8014960:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014964:	42b8      	cmp	r0, r7
 8014966:	d301      	bcc.n	801496c <rclc_executor_add_service+0x38>
 8014968:	2001      	movs	r0, #1
 801496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801496c:	6867      	ldr	r7, [r4, #4]
 801496e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014972:	f100 0c01 	add.w	ip, r0, #1
 8014976:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 801497a:	6283      	str	r3, [r0, #40]	; 0x28
 801497c:	2305      	movs	r3, #5
 801497e:	6305      	str	r5, [r0, #48]	; 0x30
 8014980:	f104 0514 	add.w	r5, r4, #20
 8014984:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014988:	f827 300e 	strh.w	r3, [r7, lr]
 801498c:	2301      	movs	r3, #1
 801498e:	62c6      	str	r6, [r0, #44]	; 0x2c
 8014990:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014994:	4628      	mov	r0, r5
 8014996:	f8c4 c00c 	str.w	ip, [r4, #12]
 801499a:	f007 fbe1 	bl	801c160 <rcl_wait_set_is_valid>
 801499e:	b930      	cbnz	r0, 80149ae <rclc_executor_add_service+0x7a>
 80149a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80149a2:	2000      	movs	r0, #0
 80149a4:	3301      	adds	r3, #1
 80149a6:	6563      	str	r3, [r4, #84]	; 0x54
 80149a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149aa:	200b      	movs	r0, #11
 80149ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149ae:	4628      	mov	r0, r5
 80149b0:	f007 fbdc 	bl	801c16c <rcl_wait_set_fini>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d0f3      	beq.n	80149a0 <rclc_executor_add_service+0x6c>
 80149b8:	e7d7      	b.n	801496a <rclc_executor_add_service+0x36>
 80149ba:	bf00      	nop

080149bc <rclc_executor_prepare>:
 80149bc:	2800      	cmp	r0, #0
 80149be:	d044      	beq.n	8014a4a <rclc_executor_prepare+0x8e>
 80149c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149c2:	f100 0514 	add.w	r5, r0, #20
 80149c6:	b09b      	sub	sp, #108	; 0x6c
 80149c8:	4604      	mov	r4, r0
 80149ca:	4628      	mov	r0, r5
 80149cc:	f007 fbc8 	bl	801c160 <rcl_wait_set_is_valid>
 80149d0:	b110      	cbz	r0, 80149d8 <rclc_executor_prepare+0x1c>
 80149d2:	2000      	movs	r0, #0
 80149d4:	b01b      	add	sp, #108	; 0x6c
 80149d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149d8:	4628      	mov	r0, r5
 80149da:	f007 fbc7 	bl	801c16c <rcl_wait_set_fini>
 80149de:	2800      	cmp	r0, #0
 80149e0:	d130      	bne.n	8014a44 <rclc_executor_prepare+0x88>
 80149e2:	a80c      	add	r0, sp, #48	; 0x30
 80149e4:	ae04      	add	r6, sp, #16
 80149e6:	f007 fba7 	bl	801c138 <rcl_get_zero_initialized_wait_set>
 80149ea:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80149ee:	46ae      	mov	lr, r5
 80149f0:	6927      	ldr	r7, [r4, #16]
 80149f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8014a0e:	f8ce 3000 	str.w	r3, [lr]
 8014a12:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014a14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	4628      	mov	r0, r5
 8014a1a:	6822      	ldr	r2, [r4, #0]
 8014a1c:	6033      	str	r3, [r6, #0]
 8014a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014a22:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014a26:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8014a2a:	e9cd 2100 	strd	r2, r1, [sp]
 8014a2e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014a30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014a32:	f007 fe9b 	bl	801c76c <rcl_wait_set_init>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d0cc      	beq.n	80149d4 <rclc_executor_prepare+0x18>
 8014a3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a3c:	f000 fb84 	bl	8015148 <rcutils_reset_error>
 8014a40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a42:	e7c7      	b.n	80149d4 <rclc_executor_prepare+0x18>
 8014a44:	f000 fb80 	bl	8015148 <rcutils_reset_error>
 8014a48:	e7cb      	b.n	80149e2 <rclc_executor_prepare+0x26>
 8014a4a:	200b      	movs	r0, #11
 8014a4c:	4770      	bx	lr
 8014a4e:	bf00      	nop

08014a50 <rclc_executor_spin_some.part.0>:
 8014a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a54:	4605      	mov	r5, r0
 8014a56:	4691      	mov	r9, r2
 8014a58:	4698      	mov	r8, r3
 8014a5a:	f7ff ffaf 	bl	80149bc <rclc_executor_prepare>
 8014a5e:	f105 0614 	add.w	r6, r5, #20
 8014a62:	4630      	mov	r0, r6
 8014a64:	f007 fc4e 	bl	801c304 <rcl_wait_set_clear>
 8014a68:	4607      	mov	r7, r0
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	f040 80a8 	bne.w	8014bc0 <rclc_executor_spin_some.part.0+0x170>
 8014a70:	68ab      	ldr	r3, [r5, #8]
 8014a72:	b30b      	cbz	r3, 8014ab8 <rclc_executor_spin_some.part.0+0x68>
 8014a74:	4604      	mov	r4, r0
 8014a76:	6869      	ldr	r1, [r5, #4]
 8014a78:	01a2      	lsls	r2, r4, #6
 8014a7a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014a7e:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8014a82:	b1cb      	cbz	r3, 8014ab8 <rclc_executor_spin_some.part.0+0x68>
 8014a84:	5c8b      	ldrb	r3, [r1, r2]
 8014a86:	2b0a      	cmp	r3, #10
 8014a88:	f200 80de 	bhi.w	8014c48 <rclc_executor_spin_some.part.0+0x1f8>
 8014a8c:	e8df f003 	tbb	[pc, r3]
 8014a90:	8da99d9d 	.word	0x8da99d9d
 8014a94:	0606068d 	.word	0x0606068d
 8014a98:	c1ce      	.short	0xc1ce
 8014a9a:	b5          	.byte	0xb5
 8014a9b:	00          	.byte	0x00
 8014a9c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014aa0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	f007 ff7d 	bl	801c9a4 <rcl_wait_set_add_service>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	f040 8087 	bne.w	8014bbe <rclc_executor_spin_some.part.0+0x16e>
 8014ab0:	3401      	adds	r4, #1
 8014ab2:	68ab      	ldr	r3, [r5, #8]
 8014ab4:	429c      	cmp	r4, r3
 8014ab6:	d3de      	bcc.n	8014a76 <rclc_executor_spin_some.part.0+0x26>
 8014ab8:	4643      	mov	r3, r8
 8014aba:	464a      	mov	r2, r9
 8014abc:	4630      	mov	r0, r6
 8014abe:	f007 ff9f 	bl	801ca00 <rcl_wait>
 8014ac2:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f000 80c6 	beq.w	8014c58 <rclc_executor_spin_some.part.0+0x208>
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	f040 80bb 	bne.w	8014c48 <rclc_executor_spin_some.part.0+0x1f8>
 8014ad2:	68ab      	ldr	r3, [r5, #8]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	f000 8159 	beq.w	8014d8c <rclc_executor_spin_some.part.0+0x33c>
 8014ada:	2400      	movs	r4, #0
 8014adc:	f240 1991 	movw	r9, #401	; 0x191
 8014ae0:	46a0      	mov	r8, r4
 8014ae2:	e00a      	b.n	8014afa <rclc_executor_spin_some.part.0+0xaa>
 8014ae4:	f7ff fb1a 	bl	801411c <_rclc_check_for_new_data>
 8014ae8:	4604      	mov	r4, r0
 8014aea:	b110      	cbz	r0, 8014af2 <rclc_executor_spin_some.part.0+0xa2>
 8014aec:	4548      	cmp	r0, r9
 8014aee:	f040 80b1 	bne.w	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014af2:	68ab      	ldr	r3, [r5, #8]
 8014af4:	4598      	cmp	r8, r3
 8014af6:	f080 8126 	bcs.w	8014d46 <rclc_executor_spin_some.part.0+0x2f6>
 8014afa:	686a      	ldr	r2, [r5, #4]
 8014afc:	4631      	mov	r1, r6
 8014afe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014b02:	f108 0801 	add.w	r8, r8, #1
 8014b06:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014b0a:	f1bc 0f00 	cmp.w	ip, #0
 8014b0e:	d1e9      	bne.n	8014ae4 <rclc_executor_spin_some.part.0+0x94>
 8014b10:	4619      	mov	r1, r3
 8014b12:	4610      	mov	r0, r2
 8014b14:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014b18:	4798      	blx	r3
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	f000 809a 	beq.w	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014b20:	68ab      	ldr	r3, [r5, #8]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f000 8096 	beq.w	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014b28:	f04f 0800 	mov.w	r8, #0
 8014b2c:	f240 1991 	movw	r9, #401	; 0x191
 8014b30:	e009      	b.n	8014b46 <rclc_executor_spin_some.part.0+0xf6>
 8014b32:	f7ff fb41 	bl	80141b8 <_rclc_take_new_data>
 8014b36:	4604      	mov	r4, r0
 8014b38:	b110      	cbz	r0, 8014b40 <rclc_executor_spin_some.part.0+0xf0>
 8014b3a:	4548      	cmp	r0, r9
 8014b3c:	f040 808a 	bne.w	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014b40:	68ab      	ldr	r3, [r5, #8]
 8014b42:	4598      	cmp	r8, r3
 8014b44:	d209      	bcs.n	8014b5a <rclc_executor_spin_some.part.0+0x10a>
 8014b46:	6868      	ldr	r0, [r5, #4]
 8014b48:	4631      	mov	r1, r6
 8014b4a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014b4e:	f108 0801 	add.w	r8, r8, #1
 8014b52:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8014b56:	2a00      	cmp	r2, #0
 8014b58:	d1eb      	bne.n	8014b32 <rclc_executor_spin_some.part.0+0xe2>
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d07a      	beq.n	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014b5e:	2600      	movs	r6, #0
 8014b60:	e00e      	b.n	8014b80 <rclc_executor_spin_some.part.0+0x130>
 8014b62:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014b66:	2a08      	cmp	r2, #8
 8014b68:	f000 80fc 	beq.w	8014d64 <rclc_executor_spin_some.part.0+0x314>
 8014b6c:	2a09      	cmp	r2, #9
 8014b6e:	f000 80ee 	beq.w	8014d4e <rclc_executor_spin_some.part.0+0x2fe>
 8014b72:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8014b76:	b98a      	cbnz	r2, 8014b9c <rclc_executor_spin_some.part.0+0x14c>
 8014b78:	3601      	adds	r6, #1
 8014b7a:	429e      	cmp	r6, r3
 8014b7c:	d267      	bcs.n	8014c4e <rclc_executor_spin_some.part.0+0x1fe>
 8014b7e:	2400      	movs	r4, #0
 8014b80:	686a      	ldr	r2, [r5, #4]
 8014b82:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014b86:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014b8a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8014b8e:	2900      	cmp	r1, #0
 8014b90:	d060      	beq.n	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014b92:	7841      	ldrb	r1, [r0, #1]
 8014b94:	2900      	cmp	r1, #0
 8014b96:	d0e4      	beq.n	8014b62 <rclc_executor_spin_some.part.0+0x112>
 8014b98:	2901      	cmp	r1, #1
 8014b9a:	d1ed      	bne.n	8014b78 <rclc_executor_spin_some.part.0+0x128>
 8014b9c:	f7ff fc80 	bl	80144a0 <_rclc_execute.part.0>
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	f040 80b5 	bne.w	8014d10 <rclc_executor_spin_some.part.0+0x2c0>
 8014ba6:	68ab      	ldr	r3, [r5, #8]
 8014ba8:	e7e6      	b.n	8014b78 <rclc_executor_spin_some.part.0+0x128>
 8014baa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014bae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	f007 feca 	bl	801c94c <rcl_wait_set_add_client>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	f43f af79 	beq.w	8014ab0 <rclc_executor_spin_some.part.0+0x60>
 8014bbe:	4607      	mov	r7, r0
 8014bc0:	f000 fac2 	bl	8015148 <rcutils_reset_error>
 8014bc4:	4638      	mov	r0, r7
 8014bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bca:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014bce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	f007 fb6a 	bl	801c2ac <rcl_wait_set_add_subscription>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	f43f af69 	beq.w	8014ab0 <rclc_executor_spin_some.part.0+0x60>
 8014bde:	4607      	mov	r7, r0
 8014be0:	e7ee      	b.n	8014bc0 <rclc_executor_spin_some.part.0+0x170>
 8014be2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014be6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014bea:	4630      	mov	r0, r6
 8014bec:	f007 fe7e 	bl	801c8ec <rcl_wait_set_add_timer>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	f43f af5d 	beq.w	8014ab0 <rclc_executor_spin_some.part.0+0x60>
 8014bf6:	4607      	mov	r7, r0
 8014bf8:	e7e2      	b.n	8014bc0 <rclc_executor_spin_some.part.0+0x170>
 8014bfa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014bfe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014c02:	4630      	mov	r0, r6
 8014c04:	f007 fe46 	bl	801c894 <rcl_wait_set_add_guard_condition>
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	f43f af51 	beq.w	8014ab0 <rclc_executor_spin_some.part.0+0x60>
 8014c0e:	4607      	mov	r7, r0
 8014c10:	e7d6      	b.n	8014bc0 <rclc_executor_spin_some.part.0+0x170>
 8014c12:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014c16:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	3110      	adds	r1, #16
 8014c1e:	f008 fbc3 	bl	801d3a8 <rcl_action_wait_set_add_action_server>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	f43f af44 	beq.w	8014ab0 <rclc_executor_spin_some.part.0+0x60>
 8014c28:	4607      	mov	r7, r0
 8014c2a:	e7c9      	b.n	8014bc0 <rclc_executor_spin_some.part.0+0x170>
 8014c2c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014c30:	2300      	movs	r3, #0
 8014c32:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014c36:	4630      	mov	r0, r6
 8014c38:	3110      	adds	r1, #16
 8014c3a:	f008 f98d 	bl	801cf58 <rcl_action_wait_set_add_action_client>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	f43f af36 	beq.w	8014ab0 <rclc_executor_spin_some.part.0+0x60>
 8014c44:	4607      	mov	r7, r0
 8014c46:	e7bb      	b.n	8014bc0 <rclc_executor_spin_some.part.0+0x170>
 8014c48:	2701      	movs	r7, #1
 8014c4a:	f000 fa7d 	bl	8015148 <rcutils_reset_error>
 8014c4e:	4638      	mov	r0, r7
 8014c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c54:	4627      	mov	r7, r4
 8014c56:	e7fa      	b.n	8014c4e <rclc_executor_spin_some.part.0+0x1fe>
 8014c58:	68ab      	ldr	r3, [r5, #8]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	f000 8093 	beq.w	8014d86 <rclc_executor_spin_some.part.0+0x336>
 8014c60:	2400      	movs	r4, #0
 8014c62:	f240 1991 	movw	r9, #401	; 0x191
 8014c66:	46a0      	mov	r8, r4
 8014c68:	e008      	b.n	8014c7c <rclc_executor_spin_some.part.0+0x22c>
 8014c6a:	f7ff fa57 	bl	801411c <_rclc_check_for_new_data>
 8014c6e:	4604      	mov	r4, r0
 8014c70:	b108      	cbz	r0, 8014c76 <rclc_executor_spin_some.part.0+0x226>
 8014c72:	4548      	cmp	r0, r9
 8014c74:	d1ee      	bne.n	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014c76:	68ab      	ldr	r3, [r5, #8]
 8014c78:	4598      	cmp	r8, r3
 8014c7a:	d266      	bcs.n	8014d4a <rclc_executor_spin_some.part.0+0x2fa>
 8014c7c:	686a      	ldr	r2, [r5, #4]
 8014c7e:	4631      	mov	r1, r6
 8014c80:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014c84:	f108 0801 	add.w	r8, r8, #1
 8014c88:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014c8c:	f1bc 0f00 	cmp.w	ip, #0
 8014c90:	d1eb      	bne.n	8014c6a <rclc_executor_spin_some.part.0+0x21a>
 8014c92:	4619      	mov	r1, r3
 8014c94:	4610      	mov	r0, r2
 8014c96:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014c9a:	4798      	blx	r3
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	d0d9      	beq.n	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014ca0:	68ab      	ldr	r3, [r5, #8]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d0d6      	beq.n	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014ca6:	f04f 0a00 	mov.w	sl, #0
 8014caa:	f240 1891 	movw	r8, #401	; 0x191
 8014cae:	f240 2959 	movw	r9, #601	; 0x259
 8014cb2:	e00e      	b.n	8014cd2 <rclc_executor_spin_some.part.0+0x282>
 8014cb4:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014cb8:	2b08      	cmp	r3, #8
 8014cba:	d034      	beq.n	8014d26 <rclc_executor_spin_some.part.0+0x2d6>
 8014cbc:	2b09      	cmp	r3, #9
 8014cbe:	d029      	beq.n	8014d14 <rclc_executor_spin_some.part.0+0x2c4>
 8014cc0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014cc4:	bb03      	cbnz	r3, 8014d08 <rclc_executor_spin_some.part.0+0x2b8>
 8014cc6:	f10a 0a01 	add.w	sl, sl, #1
 8014cca:	68ab      	ldr	r3, [r5, #8]
 8014ccc:	459a      	cmp	sl, r3
 8014cce:	d2be      	bcs.n	8014c4e <rclc_executor_spin_some.part.0+0x1fe>
 8014cd0:	2400      	movs	r4, #0
 8014cd2:	6868      	ldr	r0, [r5, #4]
 8014cd4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014cd8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014cdc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d0b7      	beq.n	8014c54 <rclc_executor_spin_some.part.0+0x204>
 8014ce4:	4631      	mov	r1, r6
 8014ce6:	f7ff fa67 	bl	80141b8 <_rclc_take_new_data>
 8014cea:	2800      	cmp	r0, #0
 8014cec:	bf18      	it	ne
 8014cee:	4540      	cmpne	r0, r8
 8014cf0:	d001      	beq.n	8014cf6 <rclc_executor_spin_some.part.0+0x2a6>
 8014cf2:	4548      	cmp	r0, r9
 8014cf4:	d10c      	bne.n	8014d10 <rclc_executor_spin_some.part.0+0x2c0>
 8014cf6:	686b      	ldr	r3, [r5, #4]
 8014cf8:	eb13 000b 	adds.w	r0, r3, fp
 8014cfc:	d021      	beq.n	8014d42 <rclc_executor_spin_some.part.0+0x2f2>
 8014cfe:	7842      	ldrb	r2, [r0, #1]
 8014d00:	2a00      	cmp	r2, #0
 8014d02:	d0d7      	beq.n	8014cb4 <rclc_executor_spin_some.part.0+0x264>
 8014d04:	2a01      	cmp	r2, #1
 8014d06:	d1de      	bne.n	8014cc6 <rclc_executor_spin_some.part.0+0x276>
 8014d08:	f7ff fbca 	bl	80144a0 <_rclc_execute.part.0>
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	d0da      	beq.n	8014cc6 <rclc_executor_spin_some.part.0+0x276>
 8014d10:	4607      	mov	r7, r0
 8014d12:	e79c      	b.n	8014c4e <rclc_executor_spin_some.part.0+0x1fe>
 8014d14:	6843      	ldr	r3, [r0, #4]
 8014d16:	6a1a      	ldr	r2, [r3, #32]
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	d1f5      	bne.n	8014d08 <rclc_executor_spin_some.part.0+0x2b8>
 8014d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d0d0      	beq.n	8014cc6 <rclc_executor_spin_some.part.0+0x276>
 8014d24:	e7f0      	b.n	8014d08 <rclc_executor_spin_some.part.0+0x2b8>
 8014d26:	6843      	ldr	r3, [r0, #4]
 8014d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014d2a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8014d2e:	d1eb      	bne.n	8014d08 <rclc_executor_spin_some.part.0+0x2b8>
 8014d30:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014d34:	2a00      	cmp	r2, #0
 8014d36:	d1e7      	bne.n	8014d08 <rclc_executor_spin_some.part.0+0x2b8>
 8014d38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d0c2      	beq.n	8014cc6 <rclc_executor_spin_some.part.0+0x276>
 8014d40:	e7e2      	b.n	8014d08 <rclc_executor_spin_some.part.0+0x2b8>
 8014d42:	270b      	movs	r7, #11
 8014d44:	e783      	b.n	8014c4e <rclc_executor_spin_some.part.0+0x1fe>
 8014d46:	686a      	ldr	r2, [r5, #4]
 8014d48:	e6e2      	b.n	8014b10 <rclc_executor_spin_some.part.0+0xc0>
 8014d4a:	686a      	ldr	r2, [r5, #4]
 8014d4c:	e7a1      	b.n	8014c92 <rclc_executor_spin_some.part.0+0x242>
 8014d4e:	6842      	ldr	r2, [r0, #4]
 8014d50:	6a11      	ldr	r1, [r2, #32]
 8014d52:	2900      	cmp	r1, #0
 8014d54:	f47f af22 	bne.w	8014b9c <rclc_executor_spin_some.part.0+0x14c>
 8014d58:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014d5c:	2a00      	cmp	r2, #0
 8014d5e:	f43f af0b 	beq.w	8014b78 <rclc_executor_spin_some.part.0+0x128>
 8014d62:	e71b      	b.n	8014b9c <rclc_executor_spin_some.part.0+0x14c>
 8014d64:	6842      	ldr	r2, [r0, #4]
 8014d66:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014d68:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8014d6c:	f47f af16 	bne.w	8014b9c <rclc_executor_spin_some.part.0+0x14c>
 8014d70:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8014d74:	2900      	cmp	r1, #0
 8014d76:	f47f af11 	bne.w	8014b9c <rclc_executor_spin_some.part.0+0x14c>
 8014d7a:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8014d7e:	2a00      	cmp	r2, #0
 8014d80:	f43f aefa 	beq.w	8014b78 <rclc_executor_spin_some.part.0+0x128>
 8014d84:	e70a      	b.n	8014b9c <rclc_executor_spin_some.part.0+0x14c>
 8014d86:	686a      	ldr	r2, [r5, #4]
 8014d88:	461c      	mov	r4, r3
 8014d8a:	e782      	b.n	8014c92 <rclc_executor_spin_some.part.0+0x242>
 8014d8c:	686a      	ldr	r2, [r5, #4]
 8014d8e:	461c      	mov	r4, r3
 8014d90:	e6be      	b.n	8014b10 <rclc_executor_spin_some.part.0+0xc0>
 8014d92:	bf00      	nop

08014d94 <rclc_executor_spin_some>:
 8014d94:	b190      	cbz	r0, 8014dbc <rclc_executor_spin_some+0x28>
 8014d96:	b570      	push	{r4, r5, r6, lr}
 8014d98:	4604      	mov	r4, r0
 8014d9a:	6800      	ldr	r0, [r0, #0]
 8014d9c:	4616      	mov	r6, r2
 8014d9e:	461d      	mov	r5, r3
 8014da0:	f006 fb96 	bl	801b4d0 <rcl_context_is_valid>
 8014da4:	b130      	cbz	r0, 8014db4 <rclc_executor_spin_some+0x20>
 8014da6:	4632      	mov	r2, r6
 8014da8:	462b      	mov	r3, r5
 8014daa:	4620      	mov	r0, r4
 8014dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014db0:	f7ff be4e 	b.w	8014a50 <rclc_executor_spin_some.part.0>
 8014db4:	f000 f9c8 	bl	8015148 <rcutils_reset_error>
 8014db8:	2001      	movs	r0, #1
 8014dba:	bd70      	pop	{r4, r5, r6, pc}
 8014dbc:	200b      	movs	r0, #11
 8014dbe:	4770      	bx	lr

08014dc0 <rclc_executor_handle_counters_zero_init>:
 8014dc0:	b130      	cbz	r0, 8014dd0 <rclc_executor_handle_counters_zero_init+0x10>
 8014dc2:	2220      	movs	r2, #32
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	b508      	push	{r3, lr}
 8014dc8:	f00c f814 	bl	8020df4 <memset>
 8014dcc:	2000      	movs	r0, #0
 8014dce:	bd08      	pop	{r3, pc}
 8014dd0:	200b      	movs	r0, #11
 8014dd2:	4770      	bx	lr
 8014dd4:	0000      	movs	r0, r0
	...

08014dd8 <rclc_executor_handle_init>:
 8014dd8:	4603      	mov	r3, r0
 8014dda:	b178      	cbz	r0, 8014dfc <rclc_executor_handle_init+0x24>
 8014ddc:	2200      	movs	r2, #0
 8014dde:	f04f 0c0b 	mov.w	ip, #11
 8014de2:	6341      	str	r1, [r0, #52]	; 0x34
 8014de4:	4610      	mov	r0, r2
 8014de6:	f8a3 c000 	strh.w	ip, [r3]
 8014dea:	631a      	str	r2, [r3, #48]	; 0x30
 8014dec:	871a      	strh	r2, [r3, #56]	; 0x38
 8014dee:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8014e00 <rclc_executor_handle_init+0x28>
 8014df2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014df6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8014dfa:	4770      	bx	lr
 8014dfc:	200b      	movs	r0, #11
 8014dfe:	4770      	bx	lr
	...

08014e08 <rclc_support_init_with_options>:
 8014e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e0c:	b083      	sub	sp, #12
 8014e0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	bf18      	it	ne
 8014e14:	2f00      	cmpne	r7, #0
 8014e16:	d027      	beq.n	8014e68 <rclc_support_init_with_options+0x60>
 8014e18:	4604      	mov	r4, r0
 8014e1a:	b328      	cbz	r0, 8014e68 <rclc_support_init_with_options+0x60>
 8014e1c:	46e9      	mov	r9, sp
 8014e1e:	461d      	mov	r5, r3
 8014e20:	460e      	mov	r6, r1
 8014e22:	4690      	mov	r8, r2
 8014e24:	4648      	mov	r0, r9
 8014e26:	f006 fb49 	bl	801b4bc <rcl_get_zero_initialized_context>
 8014e2a:	462a      	mov	r2, r5
 8014e2c:	4623      	mov	r3, r4
 8014e2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014e32:	e884 0003 	stmia.w	r4, {r0, r1}
 8014e36:	4641      	mov	r1, r8
 8014e38:	4630      	mov	r0, r6
 8014e3a:	f006 fc5d 	bl	801b6f8 <rcl_init>
 8014e3e:	4605      	mov	r5, r0
 8014e40:	b960      	cbnz	r0, 8014e5c <rclc_support_init_with_options+0x54>
 8014e42:	463a      	mov	r2, r7
 8014e44:	f104 010c 	add.w	r1, r4, #12
 8014e48:	2003      	movs	r0, #3
 8014e4a:	60a7      	str	r7, [r4, #8]
 8014e4c:	f006 ff6a 	bl	801bd24 <rcl_clock_init>
 8014e50:	4605      	mov	r5, r0
 8014e52:	b918      	cbnz	r0, 8014e5c <rclc_support_init_with_options+0x54>
 8014e54:	4628      	mov	r0, r5
 8014e56:	b003      	add	sp, #12
 8014e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e5c:	f000 f974 	bl	8015148 <rcutils_reset_error>
 8014e60:	4628      	mov	r0, r5
 8014e62:	b003      	add	sp, #12
 8014e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e68:	250b      	movs	r5, #11
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	b003      	add	sp, #12
 8014e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e72:	bf00      	nop

08014e74 <rclc_node_init_with_options>:
 8014e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e78:	b087      	sub	sp, #28
 8014e7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014e7c:	2e00      	cmp	r6, #0
 8014e7e:	bf18      	it	ne
 8014e80:	2b00      	cmpne	r3, #0
 8014e82:	bf0c      	ite	eq
 8014e84:	f04f 0c01 	moveq.w	ip, #1
 8014e88:	f04f 0c00 	movne.w	ip, #0
 8014e8c:	2a00      	cmp	r2, #0
 8014e8e:	bf08      	it	eq
 8014e90:	f04c 0c01 	orreq.w	ip, ip, #1
 8014e94:	2900      	cmp	r1, #0
 8014e96:	bf08      	it	eq
 8014e98:	f04c 0c01 	orreq.w	ip, ip, #1
 8014e9c:	f1bc 0f00 	cmp.w	ip, #0
 8014ea0:	d118      	bne.n	8014ed4 <rclc_node_init_with_options+0x60>
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	b1b0      	cbz	r0, 8014ed4 <rclc_node_init_with_options+0x60>
 8014ea6:	f10d 0910 	add.w	r9, sp, #16
 8014eaa:	460d      	mov	r5, r1
 8014eac:	4698      	mov	r8, r3
 8014eae:	4617      	mov	r7, r2
 8014eb0:	4648      	mov	r0, r9
 8014eb2:	f7fe fc09 	bl	80136c8 <rcl_get_zero_initialized_node>
 8014eb6:	9600      	str	r6, [sp, #0]
 8014eb8:	4643      	mov	r3, r8
 8014eba:	463a      	mov	r2, r7
 8014ebc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014ec0:	e884 0003 	stmia.w	r4, {r0, r1}
 8014ec4:	4629      	mov	r1, r5
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f7fe fc08 	bl	80136dc <rcl_node_init>
 8014ecc:	b930      	cbnz	r0, 8014edc <rclc_node_init_with_options+0x68>
 8014ece:	b007      	add	sp, #28
 8014ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ed4:	200b      	movs	r0, #11
 8014ed6:	b007      	add	sp, #28
 8014ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014edc:	9003      	str	r0, [sp, #12]
 8014ede:	f000 f933 	bl	8015148 <rcutils_reset_error>
 8014ee2:	9803      	ldr	r0, [sp, #12]
 8014ee4:	b007      	add	sp, #28
 8014ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eea:	bf00      	nop

08014eec <rclc_publisher_init_default>:
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	bf18      	it	ne
 8014ef0:	2a00      	cmpne	r2, #0
 8014ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ef6:	4616      	mov	r6, r2
 8014ef8:	bf0c      	ite	eq
 8014efa:	2201      	moveq	r2, #1
 8014efc:	2200      	movne	r2, #0
 8014efe:	b0a0      	sub	sp, #128	; 0x80
 8014f00:	2900      	cmp	r1, #0
 8014f02:	bf08      	it	eq
 8014f04:	f042 0201 	orreq.w	r2, r2, #1
 8014f08:	bb1a      	cbnz	r2, 8014f52 <rclc_publisher_init_default+0x66>
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	b308      	cbz	r0, 8014f52 <rclc_publisher_init_default+0x66>
 8014f0e:	f10d 0810 	add.w	r8, sp, #16
 8014f12:	461f      	mov	r7, r3
 8014f14:	460d      	mov	r5, r1
 8014f16:	f7fe fd81 	bl	8013a1c <rcl_get_zero_initialized_publisher>
 8014f1a:	6020      	str	r0, [r4, #0]
 8014f1c:	4640      	mov	r0, r8
 8014f1e:	f7fe fe1d 	bl	8013b5c <rcl_publisher_get_default_options>
 8014f22:	2250      	movs	r2, #80	; 0x50
 8014f24:	490d      	ldr	r1, [pc, #52]	; (8014f5c <rclc_publisher_init_default+0x70>)
 8014f26:	4640      	mov	r0, r8
 8014f28:	f00c f831 	bl	8020f8e <memcpy>
 8014f2c:	463b      	mov	r3, r7
 8014f2e:	4632      	mov	r2, r6
 8014f30:	4629      	mov	r1, r5
 8014f32:	4620      	mov	r0, r4
 8014f34:	f8cd 8000 	str.w	r8, [sp]
 8014f38:	f7fe fd76 	bl	8013a28 <rcl_publisher_init>
 8014f3c:	b910      	cbnz	r0, 8014f44 <rclc_publisher_init_default+0x58>
 8014f3e:	b020      	add	sp, #128	; 0x80
 8014f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f44:	9003      	str	r0, [sp, #12]
 8014f46:	f000 f8ff 	bl	8015148 <rcutils_reset_error>
 8014f4a:	9803      	ldr	r0, [sp, #12]
 8014f4c:	b020      	add	sp, #128	; 0x80
 8014f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f52:	200b      	movs	r0, #11
 8014f54:	b020      	add	sp, #128	; 0x80
 8014f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5a:	bf00      	nop
 8014f5c:	08025000 	.word	0x08025000

08014f60 <rclc_service_init_default>:
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	bf18      	it	ne
 8014f64:	2a00      	cmpne	r2, #0
 8014f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f6a:	4616      	mov	r6, r2
 8014f6c:	bf0c      	ite	eq
 8014f6e:	2201      	moveq	r2, #1
 8014f70:	2200      	movne	r2, #0
 8014f72:	b09e      	sub	sp, #120	; 0x78
 8014f74:	2900      	cmp	r1, #0
 8014f76:	bf08      	it	eq
 8014f78:	f042 0201 	orreq.w	r2, r2, #1
 8014f7c:	bb1a      	cbnz	r2, 8014fc6 <rclc_service_init_default+0x66>
 8014f7e:	4604      	mov	r4, r0
 8014f80:	b308      	cbz	r0, 8014fc6 <rclc_service_init_default+0x66>
 8014f82:	f10d 0810 	add.w	r8, sp, #16
 8014f86:	461f      	mov	r7, r3
 8014f88:	460d      	mov	r5, r1
 8014f8a:	f7fe fe5b 	bl	8013c44 <rcl_get_zero_initialized_service>
 8014f8e:	6020      	str	r0, [r4, #0]
 8014f90:	4640      	mov	r0, r8
 8014f92:	f7fe feef 	bl	8013d74 <rcl_service_get_default_options>
 8014f96:	2250      	movs	r2, #80	; 0x50
 8014f98:	490d      	ldr	r1, [pc, #52]	; (8014fd0 <rclc_service_init_default+0x70>)
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	f00b fff7 	bl	8020f8e <memcpy>
 8014fa0:	463b      	mov	r3, r7
 8014fa2:	4632      	mov	r2, r6
 8014fa4:	4629      	mov	r1, r5
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f8cd 8000 	str.w	r8, [sp]
 8014fac:	f7fe fe50 	bl	8013c50 <rcl_service_init>
 8014fb0:	b910      	cbnz	r0, 8014fb8 <rclc_service_init_default+0x58>
 8014fb2:	b01e      	add	sp, #120	; 0x78
 8014fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fb8:	9003      	str	r0, [sp, #12]
 8014fba:	f000 f8c5 	bl	8015148 <rcutils_reset_error>
 8014fbe:	9803      	ldr	r0, [sp, #12]
 8014fc0:	b01e      	add	sp, #120	; 0x78
 8014fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fc6:	200b      	movs	r0, #11
 8014fc8:	b01e      	add	sp, #120	; 0x78
 8014fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fce:	bf00      	nop
 8014fd0:	08025050 	.word	0x08025050

08014fd4 <rclc_subscription_init_default>:
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	bf18      	it	ne
 8014fd8:	2a00      	cmpne	r2, #0
 8014fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fde:	4616      	mov	r6, r2
 8014fe0:	bf0c      	ite	eq
 8014fe2:	2201      	moveq	r2, #1
 8014fe4:	2200      	movne	r2, #0
 8014fe6:	b0a0      	sub	sp, #128	; 0x80
 8014fe8:	2900      	cmp	r1, #0
 8014fea:	bf08      	it	eq
 8014fec:	f042 0201 	orreq.w	r2, r2, #1
 8014ff0:	bb1a      	cbnz	r2, 801503a <rclc_subscription_init_default+0x66>
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	b308      	cbz	r0, 801503a <rclc_subscription_init_default+0x66>
 8014ff6:	f10d 0810 	add.w	r8, sp, #16
 8014ffa:	461f      	mov	r7, r3
 8014ffc:	460d      	mov	r5, r1
 8014ffe:	f7fe ff45 	bl	8013e8c <rcl_get_zero_initialized_subscription>
 8015002:	6020      	str	r0, [r4, #0]
 8015004:	4640      	mov	r0, r8
 8015006:	f7fe fff5 	bl	8013ff4 <rcl_subscription_get_default_options>
 801500a:	2250      	movs	r2, #80	; 0x50
 801500c:	490d      	ldr	r1, [pc, #52]	; (8015044 <rclc_subscription_init_default+0x70>)
 801500e:	4640      	mov	r0, r8
 8015010:	f00b ffbd 	bl	8020f8e <memcpy>
 8015014:	463b      	mov	r3, r7
 8015016:	4632      	mov	r2, r6
 8015018:	4629      	mov	r1, r5
 801501a:	4620      	mov	r0, r4
 801501c:	f8cd 8000 	str.w	r8, [sp]
 8015020:	f7fe ff3a 	bl	8013e98 <rcl_subscription_init>
 8015024:	b910      	cbnz	r0, 801502c <rclc_subscription_init_default+0x58>
 8015026:	b020      	add	sp, #128	; 0x80
 8015028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801502c:	9003      	str	r0, [sp, #12]
 801502e:	f000 f88b 	bl	8015148 <rcutils_reset_error>
 8015032:	9803      	ldr	r0, [sp, #12]
 8015034:	b020      	add	sp, #128	; 0x80
 8015036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801503a:	200b      	movs	r0, #11
 801503c:	b020      	add	sp, #128	; 0x80
 801503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015042:	bf00      	nop
 8015044:	080250a0 	.word	0x080250a0

08015048 <__default_zero_allocate>:
 8015048:	f00a ba78 	b.w	801f53c <calloc>

0801504c <__default_reallocate>:
 801504c:	f00a bc16 	b.w	801f87c <realloc>

08015050 <__default_deallocate>:
 8015050:	f00a baf4 	b.w	801f63c <free>

08015054 <__default_allocate>:
 8015054:	f00a baea 	b.w	801f62c <malloc>

08015058 <rcutils_get_zero_initialized_allocator>:
 8015058:	b510      	push	{r4, lr}
 801505a:	4c05      	ldr	r4, [pc, #20]	; (8015070 <rcutils_get_zero_initialized_allocator+0x18>)
 801505c:	4686      	mov	lr, r0
 801505e:	4684      	mov	ip, r0
 8015060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015062:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015066:	6823      	ldr	r3, [r4, #0]
 8015068:	4670      	mov	r0, lr
 801506a:	f8cc 3000 	str.w	r3, [ip]
 801506e:	bd10      	pop	{r4, pc}
 8015070:	080250f0 	.word	0x080250f0

08015074 <rcutils_set_default_allocator>:
 8015074:	b1a8      	cbz	r0, 80150a2 <rcutils_set_default_allocator+0x2e>
 8015076:	6802      	ldr	r2, [r0, #0]
 8015078:	b1a2      	cbz	r2, 80150a4 <rcutils_set_default_allocator+0x30>
 801507a:	6841      	ldr	r1, [r0, #4]
 801507c:	b1a1      	cbz	r1, 80150a8 <rcutils_set_default_allocator+0x34>
 801507e:	b410      	push	{r4}
 8015080:	68c4      	ldr	r4, [r0, #12]
 8015082:	b164      	cbz	r4, 801509e <rcutils_set_default_allocator+0x2a>
 8015084:	6880      	ldr	r0, [r0, #8]
 8015086:	b138      	cbz	r0, 8015098 <rcutils_set_default_allocator+0x24>
 8015088:	4b08      	ldr	r3, [pc, #32]	; (80150ac <rcutils_set_default_allocator+0x38>)
 801508a:	601a      	str	r2, [r3, #0]
 801508c:	2200      	movs	r2, #0
 801508e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8015092:	2001      	movs	r0, #1
 8015094:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8015098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801509c:	4770      	bx	lr
 801509e:	4620      	mov	r0, r4
 80150a0:	e7fa      	b.n	8015098 <rcutils_set_default_allocator+0x24>
 80150a2:	4770      	bx	lr
 80150a4:	4610      	mov	r0, r2
 80150a6:	4770      	bx	lr
 80150a8:	4608      	mov	r0, r1
 80150aa:	4770      	bx	lr
 80150ac:	200008a4 	.word	0x200008a4

080150b0 <rcutils_get_default_allocator>:
 80150b0:	b510      	push	{r4, lr}
 80150b2:	4c05      	ldr	r4, [pc, #20]	; (80150c8 <rcutils_get_default_allocator+0x18>)
 80150b4:	4686      	mov	lr, r0
 80150b6:	4684      	mov	ip, r0
 80150b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150be:	6823      	ldr	r3, [r4, #0]
 80150c0:	4670      	mov	r0, lr
 80150c2:	f8cc 3000 	str.w	r3, [ip]
 80150c6:	bd10      	pop	{r4, pc}
 80150c8:	200008a4 	.word	0x200008a4

080150cc <rcutils_allocator_is_valid>:
 80150cc:	b158      	cbz	r0, 80150e6 <rcutils_allocator_is_valid+0x1a>
 80150ce:	6803      	ldr	r3, [r0, #0]
 80150d0:	b143      	cbz	r3, 80150e4 <rcutils_allocator_is_valid+0x18>
 80150d2:	6843      	ldr	r3, [r0, #4]
 80150d4:	b133      	cbz	r3, 80150e4 <rcutils_allocator_is_valid+0x18>
 80150d6:	68c3      	ldr	r3, [r0, #12]
 80150d8:	b123      	cbz	r3, 80150e4 <rcutils_allocator_is_valid+0x18>
 80150da:	6880      	ldr	r0, [r0, #8]
 80150dc:	3800      	subs	r0, #0
 80150de:	bf18      	it	ne
 80150e0:	2001      	movne	r0, #1
 80150e2:	4770      	bx	lr
 80150e4:	4618      	mov	r0, r3
 80150e6:	4770      	bx	lr

080150e8 <rcutils_get_env>:
 80150e8:	b168      	cbz	r0, 8015106 <rcutils_get_env+0x1e>
 80150ea:	b510      	push	{r4, lr}
 80150ec:	460c      	mov	r4, r1
 80150ee:	b129      	cbz	r1, 80150fc <rcutils_get_env+0x14>
 80150f0:	f00a fa54 	bl	801f59c <getenv>
 80150f4:	b120      	cbz	r0, 8015100 <rcutils_get_env+0x18>
 80150f6:	6020      	str	r0, [r4, #0]
 80150f8:	2000      	movs	r0, #0
 80150fa:	bd10      	pop	{r4, pc}
 80150fc:	4803      	ldr	r0, [pc, #12]	; (801510c <rcutils_get_env+0x24>)
 80150fe:	bd10      	pop	{r4, pc}
 8015100:	4b03      	ldr	r3, [pc, #12]	; (8015110 <rcutils_get_env+0x28>)
 8015102:	6023      	str	r3, [r4, #0]
 8015104:	bd10      	pop	{r4, pc}
 8015106:	4803      	ldr	r0, [pc, #12]	; (8015114 <rcutils_get_env+0x2c>)
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	08025120 	.word	0x08025120
 8015110:	080254d8 	.word	0x080254d8
 8015114:	08025104 	.word	0x08025104

08015118 <rcutils_get_error_string>:
 8015118:	4b06      	ldr	r3, [pc, #24]	; (8015134 <rcutils_get_error_string+0x1c>)
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	b13b      	cbz	r3, 801512e <rcutils_get_error_string+0x16>
 801511e:	4b06      	ldr	r3, [pc, #24]	; (8015138 <rcutils_get_error_string+0x20>)
 8015120:	781a      	ldrb	r2, [r3, #0]
 8015122:	b90a      	cbnz	r2, 8015128 <rcutils_get_error_string+0x10>
 8015124:	2201      	movs	r2, #1
 8015126:	701a      	strb	r2, [r3, #0]
 8015128:	4b04      	ldr	r3, [pc, #16]	; (801513c <rcutils_get_error_string+0x24>)
 801512a:	7818      	ldrb	r0, [r3, #0]
 801512c:	4770      	bx	lr
 801512e:	4b04      	ldr	r3, [pc, #16]	; (8015140 <rcutils_get_error_string+0x28>)
 8015130:	7818      	ldrb	r0, [r3, #0]
 8015132:	4770      	bx	lr
 8015134:	200122e8 	.word	0x200122e8
 8015138:	20012301 	.word	0x20012301
 801513c:	20012300 	.word	0x20012300
 8015140:	080247b0 	.word	0x080247b0
 8015144:	00000000 	.word	0x00000000

08015148 <rcutils_reset_error>:
 8015148:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8015168 <rcutils_reset_error+0x20>
 801514c:	2300      	movs	r3, #0
 801514e:	4a08      	ldr	r2, [pc, #32]	; (8015170 <rcutils_reset_error+0x28>)
 8015150:	4808      	ldr	r0, [pc, #32]	; (8015174 <rcutils_reset_error+0x2c>)
 8015152:	8013      	strh	r3, [r2, #0]
 8015154:	4908      	ldr	r1, [pc, #32]	; (8015178 <rcutils_reset_error+0x30>)
 8015156:	7003      	strb	r3, [r0, #0]
 8015158:	700b      	strb	r3, [r1, #0]
 801515a:	ed82 7b02 	vstr	d7, [r2, #8]
 801515e:	4a07      	ldr	r2, [pc, #28]	; (801517c <rcutils_reset_error+0x34>)
 8015160:	7013      	strb	r3, [r2, #0]
 8015162:	4770      	bx	lr
 8015164:	f3af 8000 	nop.w
	...
 8015170:	200122f0 	.word	0x200122f0
 8015174:	20012301 	.word	0x20012301
 8015178:	20012300 	.word	0x20012300
 801517c:	200122e8 	.word	0x200122e8

08015180 <rcutils_format_string_limit>:
 8015180:	b40f      	push	{r0, r1, r2, r3}
 8015182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015184:	b083      	sub	sp, #12
 8015186:	ac08      	add	r4, sp, #32
 8015188:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801518a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801518e:	b326      	cbz	r6, 80151da <rcutils_format_string_limit+0x5a>
 8015190:	a808      	add	r0, sp, #32
 8015192:	f7ff ff9b 	bl	80150cc <rcutils_allocator_is_valid>
 8015196:	b300      	cbz	r0, 80151da <rcutils_format_string_limit+0x5a>
 8015198:	2100      	movs	r1, #0
 801519a:	ab0f      	add	r3, sp, #60	; 0x3c
 801519c:	4632      	mov	r2, r6
 801519e:	4608      	mov	r0, r1
 80151a0:	e9cd 3300 	strd	r3, r3, [sp]
 80151a4:	f000 f906 	bl	80153b4 <rcutils_vsnprintf>
 80151a8:	1c43      	adds	r3, r0, #1
 80151aa:	4605      	mov	r5, r0
 80151ac:	d015      	beq.n	80151da <rcutils_format_string_limit+0x5a>
 80151ae:	1c47      	adds	r7, r0, #1
 80151b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151b2:	429f      	cmp	r7, r3
 80151b4:	d901      	bls.n	80151ba <rcutils_format_string_limit+0x3a>
 80151b6:	1e5d      	subs	r5, r3, #1
 80151b8:	461f      	mov	r7, r3
 80151ba:	9b08      	ldr	r3, [sp, #32]
 80151bc:	4638      	mov	r0, r7
 80151be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151c0:	4798      	blx	r3
 80151c2:	4604      	mov	r4, r0
 80151c4:	b148      	cbz	r0, 80151da <rcutils_format_string_limit+0x5a>
 80151c6:	4632      	mov	r2, r6
 80151c8:	4639      	mov	r1, r7
 80151ca:	9b01      	ldr	r3, [sp, #4]
 80151cc:	f000 f8f2 	bl	80153b4 <rcutils_vsnprintf>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	db09      	blt.n	80151e8 <rcutils_format_string_limit+0x68>
 80151d4:	2300      	movs	r3, #0
 80151d6:	5563      	strb	r3, [r4, r5]
 80151d8:	e000      	b.n	80151dc <rcutils_format_string_limit+0x5c>
 80151da:	2400      	movs	r4, #0
 80151dc:	4620      	mov	r0, r4
 80151de:	b003      	add	sp, #12
 80151e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80151e4:	b004      	add	sp, #16
 80151e6:	4770      	bx	lr
 80151e8:	4620      	mov	r0, r4
 80151ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151ee:	2400      	movs	r4, #0
 80151f0:	4798      	blx	r3
 80151f2:	e7f3      	b.n	80151dc <rcutils_format_string_limit+0x5c>

080151f4 <rcutils_repl_str>:
 80151f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f8:	ed2d 8b02 	vpush	{d8}
 80151fc:	b087      	sub	sp, #28
 80151fe:	2600      	movs	r6, #0
 8015200:	4680      	mov	r8, r0
 8015202:	468a      	mov	sl, r1
 8015204:	9000      	str	r0, [sp, #0]
 8015206:	4608      	mov	r0, r1
 8015208:	ee08 2a10 	vmov	s16, r2
 801520c:	4699      	mov	r9, r3
 801520e:	2510      	movs	r5, #16
 8015210:	f7eb f876 	bl	8000300 <strlen>
 8015214:	4637      	mov	r7, r6
 8015216:	46b3      	mov	fp, r6
 8015218:	9001      	str	r0, [sp, #4]
 801521a:	e01e      	b.n	801525a <rcutils_repl_str+0x66>
 801521c:	f10b 0b01 	add.w	fp, fp, #1
 8015220:	9b01      	ldr	r3, [sp, #4]
 8015222:	455e      	cmp	r6, fp
 8015224:	eb04 0803 	add.w	r8, r4, r3
 8015228:	d211      	bcs.n	801524e <rcutils_repl_str+0x5a>
 801522a:	442e      	add	r6, r5
 801522c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015230:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015238:	00b1      	lsls	r1, r6, #2
 801523a:	4798      	blx	r3
 801523c:	2800      	cmp	r0, #0
 801523e:	f000 8088 	beq.w	8015352 <rcutils_repl_str+0x15e>
 8015242:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015246:	4607      	mov	r7, r0
 8015248:	bf28      	it	cs
 801524a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801524e:	9a00      	ldr	r2, [sp, #0]
 8015250:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8015254:	1aa4      	subs	r4, r4, r2
 8015256:	f843 4c04 	str.w	r4, [r3, #-4]
 801525a:	4651      	mov	r1, sl
 801525c:	4640      	mov	r0, r8
 801525e:	f00b fdf0 	bl	8020e42 <strstr>
 8015262:	4604      	mov	r4, r0
 8015264:	4638      	mov	r0, r7
 8015266:	2c00      	cmp	r4, #0
 8015268:	d1d8      	bne.n	801521c <rcutils_repl_str+0x28>
 801526a:	4640      	mov	r0, r8
 801526c:	f7eb f848 	bl	8000300 <strlen>
 8015270:	9b00      	ldr	r3, [sp, #0]
 8015272:	eba8 0803 	sub.w	r8, r8, r3
 8015276:	eb08 0400 	add.w	r4, r8, r0
 801527a:	9402      	str	r4, [sp, #8]
 801527c:	f1bb 0f00 	cmp.w	fp, #0
 8015280:	d045      	beq.n	801530e <rcutils_repl_str+0x11a>
 8015282:	ee18 0a10 	vmov	r0, s16
 8015286:	f7eb f83b 	bl	8000300 <strlen>
 801528a:	9a01      	ldr	r2, [sp, #4]
 801528c:	4606      	mov	r6, r0
 801528e:	f8d9 3000 	ldr.w	r3, [r9]
 8015292:	1a82      	subs	r2, r0, r2
 8015294:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015298:	fb0b 4202 	mla	r2, fp, r2, r4
 801529c:	1c50      	adds	r0, r2, #1
 801529e:	9205      	str	r2, [sp, #20]
 80152a0:	4798      	blx	r3
 80152a2:	4682      	mov	sl, r0
 80152a4:	2800      	cmp	r0, #0
 80152a6:	d054      	beq.n	8015352 <rcutils_repl_str+0x15e>
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	463d      	mov	r5, r7
 80152ac:	9900      	ldr	r1, [sp, #0]
 80152ae:	2401      	movs	r4, #1
 80152b0:	f00b fe6d 	bl	8020f8e <memcpy>
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80152ba:	eb0a 0803 	add.w	r8, sl, r3
 80152be:	ee18 7a10 	vmov	r7, s16
 80152c2:	f8dd a000 	ldr.w	sl, [sp]
 80152c6:	f8cd 9000 	str.w	r9, [sp]
 80152ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80152ce:	4632      	mov	r2, r6
 80152d0:	4639      	mov	r1, r7
 80152d2:	4640      	mov	r0, r8
 80152d4:	44b0      	add	r8, r6
 80152d6:	f00b fe5a 	bl	8020f8e <memcpy>
 80152da:	f855 2b04 	ldr.w	r2, [r5], #4
 80152de:	45a3      	cmp	fp, r4
 80152e0:	444a      	add	r2, r9
 80152e2:	eb0a 0102 	add.w	r1, sl, r2
 80152e6:	d02a      	beq.n	801533e <rcutils_repl_str+0x14a>
 80152e8:	6828      	ldr	r0, [r5, #0]
 80152ea:	1a82      	subs	r2, r0, r2
 80152ec:	4640      	mov	r0, r8
 80152ee:	4490      	add	r8, r2
 80152f0:	f00b fe4d 	bl	8020f8e <memcpy>
 80152f4:	1c62      	adds	r2, r4, #1
 80152f6:	45a3      	cmp	fp, r4
 80152f8:	4614      	mov	r4, r2
 80152fa:	d8e8      	bhi.n	80152ce <rcutils_repl_str+0xda>
 80152fc:	f8dd 9000 	ldr.w	r9, [sp]
 8015300:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015304:	2300      	movs	r3, #0
 8015306:	9a05      	ldr	r2, [sp, #20]
 8015308:	f80a 3002 	strb.w	r3, [sl, r2]
 801530c:	e00b      	b.n	8015326 <rcutils_repl_str+0x132>
 801530e:	4620      	mov	r0, r4
 8015310:	f8d9 3000 	ldr.w	r3, [r9]
 8015314:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015318:	3001      	adds	r0, #1
 801531a:	4798      	blx	r3
 801531c:	4682      	mov	sl, r0
 801531e:	b110      	cbz	r0, 8015326 <rcutils_repl_str+0x132>
 8015320:	9900      	ldr	r1, [sp, #0]
 8015322:	f00b fe2c 	bl	8020f7e <strcpy>
 8015326:	4638      	mov	r0, r7
 8015328:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801532c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015330:	4798      	blx	r3
 8015332:	4650      	mov	r0, sl
 8015334:	b007      	add	sp, #28
 8015336:	ecbd 8b02 	vpop	{d8}
 801533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801533e:	9b02      	ldr	r3, [sp, #8]
 8015340:	4640      	mov	r0, r8
 8015342:	f8dd 9000 	ldr.w	r9, [sp]
 8015346:	1a9a      	subs	r2, r3, r2
 8015348:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801534c:	f00b fe1f 	bl	8020f8e <memcpy>
 8015350:	e7d8      	b.n	8015304 <rcutils_repl_str+0x110>
 8015352:	f04f 0a00 	mov.w	sl, #0
 8015356:	e7e6      	b.n	8015326 <rcutils_repl_str+0x132>

08015358 <rcutils_snprintf>:
 8015358:	b40c      	push	{r2, r3}
 801535a:	b530      	push	{r4, r5, lr}
 801535c:	b083      	sub	sp, #12
 801535e:	ab06      	add	r3, sp, #24
 8015360:	f853 2b04 	ldr.w	r2, [r3], #4
 8015364:	9301      	str	r3, [sp, #4]
 8015366:	b1e2      	cbz	r2, 80153a2 <rcutils_snprintf+0x4a>
 8015368:	fab0 f480 	clz	r4, r0
 801536c:	fab1 f581 	clz	r5, r1
 8015370:	ea50 0c01 	orrs.w	ip, r0, r1
 8015374:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015378:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801537c:	d008      	beq.n	8015390 <rcutils_snprintf+0x38>
 801537e:	b984      	cbnz	r4, 80153a2 <rcutils_snprintf+0x4a>
 8015380:	b97d      	cbnz	r5, 80153a2 <rcutils_snprintf+0x4a>
 8015382:	f00b fc69 	bl	8020c58 <vsniprintf>
 8015386:	b003      	add	sp, #12
 8015388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801538c:	b002      	add	sp, #8
 801538e:	4770      	bx	lr
 8015390:	4661      	mov	r1, ip
 8015392:	4660      	mov	r0, ip
 8015394:	f00b fc60 	bl	8020c58 <vsniprintf>
 8015398:	b003      	add	sp, #12
 801539a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801539e:	b002      	add	sp, #8
 80153a0:	4770      	bx	lr
 80153a2:	f00b fdbf 	bl	8020f24 <__errno>
 80153a6:	2216      	movs	r2, #22
 80153a8:	4603      	mov	r3, r0
 80153aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153ae:	601a      	str	r2, [r3, #0]
 80153b0:	e7e9      	b.n	8015386 <rcutils_snprintf+0x2e>
 80153b2:	bf00      	nop

080153b4 <rcutils_vsnprintf>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	b1b2      	cbz	r2, 80153e6 <rcutils_vsnprintf+0x32>
 80153b8:	fab0 f480 	clz	r4, r0
 80153bc:	fab1 f581 	clz	r5, r1
 80153c0:	ea50 0c01 	orrs.w	ip, r0, r1
 80153c4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80153c8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80153cc:	d005      	beq.n	80153da <rcutils_vsnprintf+0x26>
 80153ce:	b954      	cbnz	r4, 80153e6 <rcutils_vsnprintf+0x32>
 80153d0:	b94d      	cbnz	r5, 80153e6 <rcutils_vsnprintf+0x32>
 80153d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153d6:	f00b bc3f 	b.w	8020c58 <vsniprintf>
 80153da:	4661      	mov	r1, ip
 80153dc:	4660      	mov	r0, ip
 80153de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153e2:	f00b bc39 	b.w	8020c58 <vsniprintf>
 80153e6:	f00b fd9d 	bl	8020f24 <__errno>
 80153ea:	2316      	movs	r3, #22
 80153ec:	6003      	str	r3, [r0, #0]
 80153ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153f2:	bd70      	pop	{r4, r5, r6, pc}

080153f4 <rcutils_strdup>:
 80153f4:	b084      	sub	sp, #16
 80153f6:	b570      	push	{r4, r5, r6, lr}
 80153f8:	b082      	sub	sp, #8
 80153fa:	4605      	mov	r5, r0
 80153fc:	ac07      	add	r4, sp, #28
 80153fe:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015402:	b1b0      	cbz	r0, 8015432 <rcutils_strdup+0x3e>
 8015404:	f7ea ff7c 	bl	8000300 <strlen>
 8015408:	1c42      	adds	r2, r0, #1
 801540a:	9b07      	ldr	r3, [sp, #28]
 801540c:	4606      	mov	r6, r0
 801540e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015410:	4610      	mov	r0, r2
 8015412:	9201      	str	r2, [sp, #4]
 8015414:	4798      	blx	r3
 8015416:	4604      	mov	r4, r0
 8015418:	b128      	cbz	r0, 8015426 <rcutils_strdup+0x32>
 801541a:	9a01      	ldr	r2, [sp, #4]
 801541c:	4629      	mov	r1, r5
 801541e:	f00b fdb6 	bl	8020f8e <memcpy>
 8015422:	2300      	movs	r3, #0
 8015424:	55a3      	strb	r3, [r4, r6]
 8015426:	4620      	mov	r0, r4
 8015428:	b002      	add	sp, #8
 801542a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801542e:	b004      	add	sp, #16
 8015430:	4770      	bx	lr
 8015432:	4604      	mov	r4, r0
 8015434:	e7f7      	b.n	8015426 <rcutils_strdup+0x32>
 8015436:	bf00      	nop

08015438 <rcutils_strndup>:
 8015438:	b082      	sub	sp, #8
 801543a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801543c:	ac06      	add	r4, sp, #24
 801543e:	4605      	mov	r5, r0
 8015440:	e884 000c 	stmia.w	r4, {r2, r3}
 8015444:	b188      	cbz	r0, 801546a <rcutils_strndup+0x32>
 8015446:	1c4f      	adds	r7, r1, #1
 8015448:	460e      	mov	r6, r1
 801544a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801544c:	4638      	mov	r0, r7
 801544e:	4790      	blx	r2
 8015450:	4604      	mov	r4, r0
 8015452:	b128      	cbz	r0, 8015460 <rcutils_strndup+0x28>
 8015454:	463a      	mov	r2, r7
 8015456:	4629      	mov	r1, r5
 8015458:	f00b fd99 	bl	8020f8e <memcpy>
 801545c:	2300      	movs	r3, #0
 801545e:	55a3      	strb	r3, [r4, r6]
 8015460:	4620      	mov	r0, r4
 8015462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015466:	b002      	add	sp, #8
 8015468:	4770      	bx	lr
 801546a:	4604      	mov	r4, r0
 801546c:	e7f8      	b.n	8015460 <rcutils_strndup+0x28>
 801546e:	bf00      	nop

08015470 <rcutils_system_time_now>:
 8015470:	b300      	cbz	r0, 80154b4 <rcutils_system_time_now+0x44>
 8015472:	b570      	push	{r4, r5, r6, lr}
 8015474:	b084      	sub	sp, #16
 8015476:	4604      	mov	r4, r0
 8015478:	2001      	movs	r0, #1
 801547a:	4669      	mov	r1, sp
 801547c:	f7ed fea4 	bl	80031c8 <clock_gettime>
 8015480:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015484:	2900      	cmp	r1, #0
 8015486:	db12      	blt.n	80154ae <rcutils_system_time_now+0x3e>
 8015488:	ea53 0201 	orrs.w	r2, r3, r1
 801548c:	9d02      	ldr	r5, [sp, #8]
 801548e:	d101      	bne.n	8015494 <rcutils_system_time_now+0x24>
 8015490:	2d00      	cmp	r5, #0
 8015492:	db0c      	blt.n	80154ae <rcutils_system_time_now+0x3e>
 8015494:	4e08      	ldr	r6, [pc, #32]	; (80154b8 <rcutils_system_time_now+0x48>)
 8015496:	2000      	movs	r0, #0
 8015498:	fba3 3206 	umull	r3, r2, r3, r6
 801549c:	195b      	adds	r3, r3, r5
 801549e:	fb06 2201 	mla	r2, r6, r1, r2
 80154a2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80154a6:	e9c4 3200 	strd	r3, r2, [r4]
 80154aa:	b004      	add	sp, #16
 80154ac:	bd70      	pop	{r4, r5, r6, pc}
 80154ae:	2002      	movs	r0, #2
 80154b0:	b004      	add	sp, #16
 80154b2:	bd70      	pop	{r4, r5, r6, pc}
 80154b4:	200b      	movs	r0, #11
 80154b6:	4770      	bx	lr
 80154b8:	3b9aca00 	.word	0x3b9aca00

080154bc <rcutils_steady_time_now>:
 80154bc:	b300      	cbz	r0, 8015500 <rcutils_steady_time_now+0x44>
 80154be:	b570      	push	{r4, r5, r6, lr}
 80154c0:	b084      	sub	sp, #16
 80154c2:	4604      	mov	r4, r0
 80154c4:	2000      	movs	r0, #0
 80154c6:	4669      	mov	r1, sp
 80154c8:	f7ed fe7e 	bl	80031c8 <clock_gettime>
 80154cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80154d0:	2900      	cmp	r1, #0
 80154d2:	db12      	blt.n	80154fa <rcutils_steady_time_now+0x3e>
 80154d4:	ea53 0201 	orrs.w	r2, r3, r1
 80154d8:	9d02      	ldr	r5, [sp, #8]
 80154da:	d101      	bne.n	80154e0 <rcutils_steady_time_now+0x24>
 80154dc:	2d00      	cmp	r5, #0
 80154de:	db0c      	blt.n	80154fa <rcutils_steady_time_now+0x3e>
 80154e0:	4e08      	ldr	r6, [pc, #32]	; (8015504 <rcutils_steady_time_now+0x48>)
 80154e2:	2000      	movs	r0, #0
 80154e4:	fba3 3206 	umull	r3, r2, r3, r6
 80154e8:	195b      	adds	r3, r3, r5
 80154ea:	fb06 2201 	mla	r2, r6, r1, r2
 80154ee:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80154f2:	e9c4 3200 	strd	r3, r2, [r4]
 80154f6:	b004      	add	sp, #16
 80154f8:	bd70      	pop	{r4, r5, r6, pc}
 80154fa:	2002      	movs	r0, #2
 80154fc:	b004      	add	sp, #16
 80154fe:	bd70      	pop	{r4, r5, r6, pc}
 8015500:	200b      	movs	r0, #11
 8015502:	4770      	bx	lr
 8015504:	3b9aca00 	.word	0x3b9aca00

08015508 <rmw_get_zero_initialized_init_options>:
 8015508:	b510      	push	{r4, lr}
 801550a:	4604      	mov	r4, r0
 801550c:	2238      	movs	r2, #56	; 0x38
 801550e:	2100      	movs	r1, #0
 8015510:	f00b fc70 	bl	8020df4 <memset>
 8015514:	f104 0010 	add.w	r0, r4, #16
 8015518:	f000 f80a 	bl	8015530 <rmw_get_default_security_options>
 801551c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015520:	4620      	mov	r0, r4
 8015522:	60e3      	str	r3, [r4, #12]
 8015524:	bd10      	pop	{r4, pc}
 8015526:	bf00      	nop

08015528 <rmw_get_default_publisher_options>:
 8015528:	2200      	movs	r2, #0
 801552a:	6002      	str	r2, [r0, #0]
 801552c:	7102      	strb	r2, [r0, #4]
 801552e:	4770      	bx	lr

08015530 <rmw_get_default_security_options>:
 8015530:	2200      	movs	r2, #0
 8015532:	7002      	strb	r2, [r0, #0]
 8015534:	6042      	str	r2, [r0, #4]
 8015536:	4770      	bx	lr

08015538 <rmw_subscription_content_filter_options_fini>:
 8015538:	b1b0      	cbz	r0, 8015568 <rmw_subscription_content_filter_options_fini+0x30>
 801553a:	b538      	push	{r3, r4, r5, lr}
 801553c:	4604      	mov	r4, r0
 801553e:	4608      	mov	r0, r1
 8015540:	460d      	mov	r5, r1
 8015542:	f7ff fdc3 	bl	80150cc <rcutils_allocator_is_valid>
 8015546:	b168      	cbz	r0, 8015564 <rmw_subscription_content_filter_options_fini+0x2c>
 8015548:	6820      	ldr	r0, [r4, #0]
 801554a:	b120      	cbz	r0, 8015556 <rmw_subscription_content_filter_options_fini+0x1e>
 801554c:	686b      	ldr	r3, [r5, #4]
 801554e:	6929      	ldr	r1, [r5, #16]
 8015550:	4798      	blx	r3
 8015552:	2300      	movs	r3, #0
 8015554:	6023      	str	r3, [r4, #0]
 8015556:	1d20      	adds	r0, r4, #4
 8015558:	f008 fa06 	bl	801d968 <rcutils_string_array_fini>
 801555c:	3800      	subs	r0, #0
 801555e:	bf18      	it	ne
 8015560:	2001      	movne	r0, #1
 8015562:	bd38      	pop	{r3, r4, r5, pc}
 8015564:	200b      	movs	r0, #11
 8015566:	bd38      	pop	{r3, r4, r5, pc}
 8015568:	200b      	movs	r0, #11
 801556a:	4770      	bx	lr

0801556c <rmw_get_default_subscription_options>:
 801556c:	2200      	movs	r2, #0
 801556e:	e9c0 2200 	strd	r2, r2, [r0]
 8015572:	6082      	str	r2, [r0, #8]
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop

08015578 <rmw_get_zero_initialized_message_info>:
 8015578:	b510      	push	{r4, lr}
 801557a:	4604      	mov	r4, r0
 801557c:	2240      	movs	r2, #64	; 0x40
 801557e:	2100      	movs	r1, #0
 8015580:	f00b fc38 	bl	8020df4 <memset>
 8015584:	4620      	mov	r0, r4
 8015586:	bd10      	pop	{r4, pc}

08015588 <rmw_validate_namespace_with_size>:
 8015588:	2800      	cmp	r0, #0
 801558a:	d043      	beq.n	8015614 <rmw_validate_namespace_with_size+0x8c>
 801558c:	b570      	push	{r4, r5, r6, lr}
 801558e:	4614      	mov	r4, r2
 8015590:	b0c2      	sub	sp, #264	; 0x108
 8015592:	b32a      	cbz	r2, 80155e0 <rmw_validate_namespace_with_size+0x58>
 8015594:	2901      	cmp	r1, #1
 8015596:	460d      	mov	r5, r1
 8015598:	461e      	mov	r6, r3
 801559a:	d102      	bne.n	80155a2 <rmw_validate_namespace_with_size+0x1a>
 801559c:	7803      	ldrb	r3, [r0, #0]
 801559e:	2b2f      	cmp	r3, #47	; 0x2f
 80155a0:	d012      	beq.n	80155c8 <rmw_validate_namespace_with_size+0x40>
 80155a2:	aa01      	add	r2, sp, #4
 80155a4:	4669      	mov	r1, sp
 80155a6:	f008 fbd3 	bl	801dd50 <rmw_validate_full_topic_name>
 80155aa:	b980      	cbnz	r0, 80155ce <rmw_validate_namespace_with_size+0x46>
 80155ac:	9a00      	ldr	r2, [sp, #0]
 80155ae:	b14a      	cbz	r2, 80155c4 <rmw_validate_namespace_with_size+0x3c>
 80155b0:	2a07      	cmp	r2, #7
 80155b2:	d007      	beq.n	80155c4 <rmw_validate_namespace_with_size+0x3c>
 80155b4:	1e53      	subs	r3, r2, #1
 80155b6:	2b05      	cmp	r3, #5
 80155b8:	d82e      	bhi.n	8015618 <rmw_validate_namespace_with_size+0x90>
 80155ba:	e8df f003 	tbb	[pc, r3]
 80155be:	1f1c      	.short	0x1f1c
 80155c0:	14282522 	.word	0x14282522
 80155c4:	2df5      	cmp	r5, #245	; 0xf5
 80155c6:	d804      	bhi.n	80155d2 <rmw_validate_namespace_with_size+0x4a>
 80155c8:	2300      	movs	r3, #0
 80155ca:	4618      	mov	r0, r3
 80155cc:	6023      	str	r3, [r4, #0]
 80155ce:	b042      	add	sp, #264	; 0x108
 80155d0:	bd70      	pop	{r4, r5, r6, pc}
 80155d2:	2307      	movs	r3, #7
 80155d4:	6023      	str	r3, [r4, #0]
 80155d6:	2e00      	cmp	r6, #0
 80155d8:	d0f9      	beq.n	80155ce <rmw_validate_namespace_with_size+0x46>
 80155da:	23f4      	movs	r3, #244	; 0xf4
 80155dc:	6033      	str	r3, [r6, #0]
 80155de:	e7f6      	b.n	80155ce <rmw_validate_namespace_with_size+0x46>
 80155e0:	200b      	movs	r0, #11
 80155e2:	b042      	add	sp, #264	; 0x108
 80155e4:	bd70      	pop	{r4, r5, r6, pc}
 80155e6:	2306      	movs	r3, #6
 80155e8:	6023      	str	r3, [r4, #0]
 80155ea:	2e00      	cmp	r6, #0
 80155ec:	d0ef      	beq.n	80155ce <rmw_validate_namespace_with_size+0x46>
 80155ee:	9b01      	ldr	r3, [sp, #4]
 80155f0:	6033      	str	r3, [r6, #0]
 80155f2:	b042      	add	sp, #264	; 0x108
 80155f4:	bd70      	pop	{r4, r5, r6, pc}
 80155f6:	2301      	movs	r3, #1
 80155f8:	6023      	str	r3, [r4, #0]
 80155fa:	e7f6      	b.n	80155ea <rmw_validate_namespace_with_size+0x62>
 80155fc:	2302      	movs	r3, #2
 80155fe:	6023      	str	r3, [r4, #0]
 8015600:	e7f3      	b.n	80155ea <rmw_validate_namespace_with_size+0x62>
 8015602:	2303      	movs	r3, #3
 8015604:	6023      	str	r3, [r4, #0]
 8015606:	e7f0      	b.n	80155ea <rmw_validate_namespace_with_size+0x62>
 8015608:	2304      	movs	r3, #4
 801560a:	6023      	str	r3, [r4, #0]
 801560c:	e7ed      	b.n	80155ea <rmw_validate_namespace_with_size+0x62>
 801560e:	2305      	movs	r3, #5
 8015610:	6023      	str	r3, [r4, #0]
 8015612:	e7ea      	b.n	80155ea <rmw_validate_namespace_with_size+0x62>
 8015614:	200b      	movs	r0, #11
 8015616:	4770      	bx	lr
 8015618:	4613      	mov	r3, r2
 801561a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801561e:	4a03      	ldr	r2, [pc, #12]	; (801562c <rmw_validate_namespace_with_size+0xa4>)
 8015620:	a802      	add	r0, sp, #8
 8015622:	f7ff fe99 	bl	8015358 <rcutils_snprintf>
 8015626:	2001      	movs	r0, #1
 8015628:	e7d1      	b.n	80155ce <rmw_validate_namespace_with_size+0x46>
 801562a:	bf00      	nop
 801562c:	0802513c 	.word	0x0802513c

08015630 <rmw_validate_namespace>:
 8015630:	b168      	cbz	r0, 801564e <rmw_validate_namespace+0x1e>
 8015632:	b570      	push	{r4, r5, r6, lr}
 8015634:	460d      	mov	r5, r1
 8015636:	4616      	mov	r6, r2
 8015638:	4604      	mov	r4, r0
 801563a:	f7ea fe61 	bl	8000300 <strlen>
 801563e:	4633      	mov	r3, r6
 8015640:	4601      	mov	r1, r0
 8015642:	462a      	mov	r2, r5
 8015644:	4620      	mov	r0, r4
 8015646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801564a:	f7ff bf9d 	b.w	8015588 <rmw_validate_namespace_with_size>
 801564e:	200b      	movs	r0, #11
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop

08015654 <rmw_namespace_validation_result_string>:
 8015654:	2807      	cmp	r0, #7
 8015656:	d803      	bhi.n	8015660 <rmw_namespace_validation_result_string+0xc>
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <rmw_namespace_validation_result_string+0x10>)
 801565a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801565e:	4770      	bx	lr
 8015660:	4801      	ldr	r0, [pc, #4]	; (8015668 <rmw_namespace_validation_result_string+0x14>)
 8015662:	4770      	bx	lr
 8015664:	08025334 	.word	0x08025334
 8015668:	0802518c 	.word	0x0802518c

0801566c <rmw_validate_node_name>:
 801566c:	2800      	cmp	r0, #0
 801566e:	d042      	beq.n	80156f6 <rmw_validate_node_name+0x8a>
 8015670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015674:	460d      	mov	r5, r1
 8015676:	2900      	cmp	r1, #0
 8015678:	d03f      	beq.n	80156fa <rmw_validate_node_name+0x8e>
 801567a:	4604      	mov	r4, r0
 801567c:	4616      	mov	r6, r2
 801567e:	f7ea fe3f 	bl	8000300 <strlen>
 8015682:	b310      	cbz	r0, 80156ca <rmw_validate_node_name+0x5e>
 8015684:	1e63      	subs	r3, r4, #1
 8015686:	f1c4 0101 	rsb	r1, r4, #1
 801568a:	eb03 0800 	add.w	r8, r3, r0
 801568e:	18cf      	adds	r7, r1, r3
 8015690:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015694:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8015698:	f02e 0c20 	bic.w	ip, lr, #32
 801569c:	2a09      	cmp	r2, #9
 801569e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80156a2:	d905      	bls.n	80156b0 <rmw_validate_node_name+0x44>
 80156a4:	f1bc 0f19 	cmp.w	ip, #25
 80156a8:	d902      	bls.n	80156b0 <rmw_validate_node_name+0x44>
 80156aa:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80156ae:	d114      	bne.n	80156da <rmw_validate_node_name+0x6e>
 80156b0:	4598      	cmp	r8, r3
 80156b2:	d1ec      	bne.n	801568e <rmw_validate_node_name+0x22>
 80156b4:	7822      	ldrb	r2, [r4, #0]
 80156b6:	4b16      	ldr	r3, [pc, #88]	; (8015710 <rmw_validate_node_name+0xa4>)
 80156b8:	5cd3      	ldrb	r3, [r2, r3]
 80156ba:	f013 0304 	ands.w	r3, r3, #4
 80156be:	d113      	bne.n	80156e8 <rmw_validate_node_name+0x7c>
 80156c0:	28ff      	cmp	r0, #255	; 0xff
 80156c2:	d81c      	bhi.n	80156fe <rmw_validate_node_name+0x92>
 80156c4:	4618      	mov	r0, r3
 80156c6:	602b      	str	r3, [r5, #0]
 80156c8:	e00c      	b.n	80156e4 <rmw_validate_node_name+0x78>
 80156ca:	2301      	movs	r3, #1
 80156cc:	602b      	str	r3, [r5, #0]
 80156ce:	b17e      	cbz	r6, 80156f0 <rmw_validate_node_name+0x84>
 80156d0:	2300      	movs	r3, #0
 80156d2:	4618      	mov	r0, r3
 80156d4:	6033      	str	r3, [r6, #0]
 80156d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156da:	2302      	movs	r3, #2
 80156dc:	602b      	str	r3, [r5, #0]
 80156de:	b13e      	cbz	r6, 80156f0 <rmw_validate_node_name+0x84>
 80156e0:	2000      	movs	r0, #0
 80156e2:	6037      	str	r7, [r6, #0]
 80156e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e8:	2303      	movs	r3, #3
 80156ea:	602b      	str	r3, [r5, #0]
 80156ec:	2e00      	cmp	r6, #0
 80156ee:	d1ef      	bne.n	80156d0 <rmw_validate_node_name+0x64>
 80156f0:	2000      	movs	r0, #0
 80156f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156f6:	200b      	movs	r0, #11
 80156f8:	4770      	bx	lr
 80156fa:	200b      	movs	r0, #11
 80156fc:	e7f2      	b.n	80156e4 <rmw_validate_node_name+0x78>
 80156fe:	2204      	movs	r2, #4
 8015700:	602a      	str	r2, [r5, #0]
 8015702:	2e00      	cmp	r6, #0
 8015704:	d0f4      	beq.n	80156f0 <rmw_validate_node_name+0x84>
 8015706:	22fe      	movs	r2, #254	; 0xfe
 8015708:	4618      	mov	r0, r3
 801570a:	6032      	str	r2, [r6, #0]
 801570c:	e7ea      	b.n	80156e4 <rmw_validate_node_name+0x78>
 801570e:	bf00      	nop
 8015710:	08025b6c 	.word	0x08025b6c

08015714 <rmw_node_name_validation_result_string>:
 8015714:	2804      	cmp	r0, #4
 8015716:	d803      	bhi.n	8015720 <rmw_node_name_validation_result_string+0xc>
 8015718:	4b02      	ldr	r3, [pc, #8]	; (8015724 <rmw_node_name_validation_result_string+0x10>)
 801571a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801571e:	4770      	bx	lr
 8015720:	4801      	ldr	r0, [pc, #4]	; (8015728 <rmw_node_name_validation_result_string+0x14>)
 8015722:	4770      	bx	lr
 8015724:	08025440 	.word	0x08025440
 8015728:	08025354 	.word	0x08025354

0801572c <rmw_uros_set_custom_transport>:
 801572c:	b470      	push	{r4, r5, r6}
 801572e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8015732:	b162      	cbz	r2, 801574e <rmw_uros_set_custom_transport+0x22>
 8015734:	b15b      	cbz	r3, 801574e <rmw_uros_set_custom_transport+0x22>
 8015736:	b155      	cbz	r5, 801574e <rmw_uros_set_custom_transport+0x22>
 8015738:	b14e      	cbz	r6, 801574e <rmw_uros_set_custom_transport+0x22>
 801573a:	4c06      	ldr	r4, [pc, #24]	; (8015754 <rmw_uros_set_custom_transport+0x28>)
 801573c:	7020      	strb	r0, [r4, #0]
 801573e:	2000      	movs	r0, #0
 8015740:	6166      	str	r6, [r4, #20]
 8015742:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015746:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801574a:	bc70      	pop	{r4, r5, r6}
 801574c:	4770      	bx	lr
 801574e:	200b      	movs	r0, #11
 8015750:	bc70      	pop	{r4, r5, r6}
 8015752:	4770      	bx	lr
 8015754:	20012304 	.word	0x20012304

08015758 <rmw_init_options_init>:
 8015758:	b084      	sub	sp, #16
 801575a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801575c:	b083      	sub	sp, #12
 801575e:	ad09      	add	r5, sp, #36	; 0x24
 8015760:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015764:	b130      	cbz	r0, 8015774 <rmw_init_options_init+0x1c>
 8015766:	4604      	mov	r4, r0
 8015768:	4628      	mov	r0, r5
 801576a:	f7ff fcaf 	bl	80150cc <rcutils_allocator_is_valid>
 801576e:	b108      	cbz	r0, 8015774 <rmw_init_options_init+0x1c>
 8015770:	68a6      	ldr	r6, [r4, #8]
 8015772:	b12e      	cbz	r6, 8015780 <rmw_init_options_init+0x28>
 8015774:	200b      	movs	r0, #11
 8015776:	b003      	add	sp, #12
 8015778:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801577c:	b004      	add	sp, #16
 801577e:	4770      	bx	lr
 8015780:	2200      	movs	r2, #0
 8015782:	2300      	movs	r3, #0
 8015784:	f104 0c20 	add.w	ip, r4, #32
 8015788:	f8df e098 	ldr.w	lr, [pc, #152]	; 8015824 <rmw_init_options_init+0xcc>
 801578c:	466f      	mov	r7, sp
 801578e:	e9c4 2300 	strd	r2, r3, [r4]
 8015792:	4b20      	ldr	r3, [pc, #128]	; (8015814 <rmw_init_options_init+0xbc>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	60a3      	str	r3, [r4, #8]
 8015798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801579a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801579e:	682b      	ldr	r3, [r5, #0]
 80157a0:	4638      	mov	r0, r7
 80157a2:	f8cc 3000 	str.w	r3, [ip]
 80157a6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80157aa:	60e6      	str	r6, [r4, #12]
 80157ac:	f7ff fec0 	bl	8015530 <rmw_get_default_security_options>
 80157b0:	f104 0310 	add.w	r3, r4, #16
 80157b4:	2203      	movs	r2, #3
 80157b6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80157ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80157be:	4816      	ldr	r0, [pc, #88]	; (8015818 <rmw_init_options_init+0xc0>)
 80157c0:	4916      	ldr	r1, [pc, #88]	; (801581c <rmw_init_options_init+0xc4>)
 80157c2:	7626      	strb	r6, [r4, #24]
 80157c4:	f001 fa62 	bl	8016c8c <rmw_uxrce_init_init_options_impl_memory>
 80157c8:	4813      	ldr	r0, [pc, #76]	; (8015818 <rmw_init_options_init+0xc0>)
 80157ca:	f008 fc25 	bl	801e018 <get_memory>
 80157ce:	b1f0      	cbz	r0, 801580e <rmw_init_options_init+0xb6>
 80157d0:	4a13      	ldr	r2, [pc, #76]	; (8015820 <rmw_init_options_init+0xc8>)
 80157d2:	6883      	ldr	r3, [r0, #8]
 80157d4:	6851      	ldr	r1, [r2, #4]
 80157d6:	6363      	str	r3, [r4, #52]	; 0x34
 80157d8:	7810      	ldrb	r0, [r2, #0]
 80157da:	6159      	str	r1, [r3, #20]
 80157dc:	68d1      	ldr	r1, [r2, #12]
 80157de:	7418      	strb	r0, [r3, #16]
 80157e0:	61d9      	str	r1, [r3, #28]
 80157e2:	6911      	ldr	r1, [r2, #16]
 80157e4:	6219      	str	r1, [r3, #32]
 80157e6:	6951      	ldr	r1, [r2, #20]
 80157e8:	6892      	ldr	r2, [r2, #8]
 80157ea:	6259      	str	r1, [r3, #36]	; 0x24
 80157ec:	619a      	str	r2, [r3, #24]
 80157ee:	f004 fb65 	bl	8019ebc <uxr_nanos>
 80157f2:	f009 ffd7 	bl	801f7a4 <srand>
 80157f6:	f00a f803 	bl	801f800 <rand>
 80157fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80157fc:	6298      	str	r0, [r3, #40]	; 0x28
 80157fe:	2800      	cmp	r0, #0
 8015800:	d0f9      	beq.n	80157f6 <rmw_init_options_init+0x9e>
 8015802:	2000      	movs	r0, #0
 8015804:	b003      	add	sp, #12
 8015806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801580a:	b004      	add	sp, #16
 801580c:	4770      	bx	lr
 801580e:	2001      	movs	r0, #1
 8015810:	e7b1      	b.n	8015776 <rmw_init_options_init+0x1e>
 8015812:	bf00      	nop
 8015814:	08025ac4 	.word	0x08025ac4
 8015818:	20016d5c 	.word	0x20016d5c
 801581c:	200125f8 	.word	0x200125f8
 8015820:	20012304 	.word	0x20012304
 8015824:	08024e50 	.word	0x08024e50

08015828 <rmw_init_options_copy>:
 8015828:	2800      	cmp	r0, #0
 801582a:	d047      	beq.n	80158bc <rmw_init_options_copy+0x94>
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	460d      	mov	r5, r1
 8015830:	b149      	cbz	r1, 8015846 <rmw_init_options_copy+0x1e>
 8015832:	4604      	mov	r4, r0
 8015834:	6880      	ldr	r0, [r0, #8]
 8015836:	b120      	cbz	r0, 8015842 <rmw_init_options_copy+0x1a>
 8015838:	4b22      	ldr	r3, [pc, #136]	; (80158c4 <rmw_init_options_copy+0x9c>)
 801583a:	6819      	ldr	r1, [r3, #0]
 801583c:	f7ea fd00 	bl	8000240 <strcmp>
 8015840:	bba8      	cbnz	r0, 80158ae <rmw_init_options_copy+0x86>
 8015842:	68ab      	ldr	r3, [r5, #8]
 8015844:	b11b      	cbz	r3, 801584e <rmw_init_options_copy+0x26>
 8015846:	f04f 0c0b 	mov.w	ip, #11
 801584a:	4660      	mov	r0, ip
 801584c:	bd70      	pop	{r4, r5, r6, pc}
 801584e:	4623      	mov	r3, r4
 8015850:	462a      	mov	r2, r5
 8015852:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015856:	f8d3 e000 	ldr.w	lr, [r3]
 801585a:	3310      	adds	r3, #16
 801585c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8015860:	3210      	adds	r2, #16
 8015862:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8015866:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801586a:	42b3      	cmp	r3, r6
 801586c:	f842 ec10 	str.w	lr, [r2, #-16]
 8015870:	f842 cc0c 	str.w	ip, [r2, #-12]
 8015874:	f842 0c08 	str.w	r0, [r2, #-8]
 8015878:	f842 1c04 	str.w	r1, [r2, #-4]
 801587c:	d1eb      	bne.n	8015856 <rmw_init_options_copy+0x2e>
 801587e:	6819      	ldr	r1, [r3, #0]
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	4811      	ldr	r0, [pc, #68]	; (80158c8 <rmw_init_options_copy+0xa0>)
 8015884:	6011      	str	r1, [r2, #0]
 8015886:	6053      	str	r3, [r2, #4]
 8015888:	f008 fbc6 	bl	801e018 <get_memory>
 801588c:	b198      	cbz	r0, 80158b6 <rmw_init_options_copy+0x8e>
 801588e:	6883      	ldr	r3, [r0, #8]
 8015890:	f04f 0c00 	mov.w	ip, #0
 8015894:	636b      	str	r3, [r5, #52]	; 0x34
 8015896:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015898:	f103 0410 	add.w	r4, r3, #16
 801589c:	3510      	adds	r5, #16
 801589e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80158a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80158aa:	4660      	mov	r0, ip
 80158ac:	bd70      	pop	{r4, r5, r6, pc}
 80158ae:	f04f 0c0c 	mov.w	ip, #12
 80158b2:	4660      	mov	r0, ip
 80158b4:	bd70      	pop	{r4, r5, r6, pc}
 80158b6:	f04f 0c01 	mov.w	ip, #1
 80158ba:	e7c6      	b.n	801584a <rmw_init_options_copy+0x22>
 80158bc:	f04f 0c0b 	mov.w	ip, #11
 80158c0:	4660      	mov	r0, ip
 80158c2:	4770      	bx	lr
 80158c4:	08025ac4 	.word	0x08025ac4
 80158c8:	20016d5c 	.word	0x20016d5c

080158cc <rmw_init_options_fini>:
 80158cc:	b510      	push	{r4, lr}
 80158ce:	b08e      	sub	sp, #56	; 0x38
 80158d0:	b388      	cbz	r0, 8015936 <rmw_init_options_fini+0x6a>
 80158d2:	4604      	mov	r4, r0
 80158d4:	3020      	adds	r0, #32
 80158d6:	f7ff fbf9 	bl	80150cc <rcutils_allocator_is_valid>
 80158da:	b360      	cbz	r0, 8015936 <rmw_init_options_fini+0x6a>
 80158dc:	68a0      	ldr	r0, [r4, #8]
 80158de:	b120      	cbz	r0, 80158ea <rmw_init_options_fini+0x1e>
 80158e0:	4b1a      	ldr	r3, [pc, #104]	; (801594c <rmw_init_options_fini+0x80>)
 80158e2:	6819      	ldr	r1, [r3, #0]
 80158e4:	f7ea fcac 	bl	8000240 <strcmp>
 80158e8:	bb68      	cbnz	r0, 8015946 <rmw_init_options_fini+0x7a>
 80158ea:	4b19      	ldr	r3, [pc, #100]	; (8015950 <rmw_init_options_fini+0x84>)
 80158ec:	6819      	ldr	r1, [r3, #0]
 80158ee:	b331      	cbz	r1, 801593e <rmw_init_options_fini+0x72>
 80158f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80158f2:	e001      	b.n	80158f8 <rmw_init_options_fini+0x2c>
 80158f4:	6849      	ldr	r1, [r1, #4]
 80158f6:	b311      	cbz	r1, 801593e <rmw_init_options_fini+0x72>
 80158f8:	688b      	ldr	r3, [r1, #8]
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d1fa      	bne.n	80158f4 <rmw_init_options_fini+0x28>
 80158fe:	4814      	ldr	r0, [pc, #80]	; (8015950 <rmw_init_options_fini+0x84>)
 8015900:	f008 fb9a 	bl	801e038 <put_memory>
 8015904:	4668      	mov	r0, sp
 8015906:	f7ff fdff 	bl	8015508 <rmw_get_zero_initialized_init_options>
 801590a:	46ee      	mov	lr, sp
 801590c:	46a4      	mov	ip, r4
 801590e:	2400      	movs	r4, #0
 8015910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015918:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801591c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015920:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015924:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015928:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801592c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015930:	4620      	mov	r0, r4
 8015932:	b00e      	add	sp, #56	; 0x38
 8015934:	bd10      	pop	{r4, pc}
 8015936:	240b      	movs	r4, #11
 8015938:	4620      	mov	r0, r4
 801593a:	b00e      	add	sp, #56	; 0x38
 801593c:	bd10      	pop	{r4, pc}
 801593e:	2401      	movs	r4, #1
 8015940:	4620      	mov	r0, r4
 8015942:	b00e      	add	sp, #56	; 0x38
 8015944:	bd10      	pop	{r4, pc}
 8015946:	240c      	movs	r4, #12
 8015948:	e7f2      	b.n	8015930 <rmw_init_options_fini+0x64>
 801594a:	bf00      	nop
 801594c:	08025ac4 	.word	0x08025ac4
 8015950:	20016d5c 	.word	0x20016d5c

08015954 <rmw_init>:
 8015954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015958:	b083      	sub	sp, #12
 801595a:	2800      	cmp	r0, #0
 801595c:	f000 80d3 	beq.w	8015b06 <rmw_init+0x1b2>
 8015960:	460e      	mov	r6, r1
 8015962:	2900      	cmp	r1, #0
 8015964:	f000 80cf 	beq.w	8015b06 <rmw_init+0x1b2>
 8015968:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801596a:	4605      	mov	r5, r0
 801596c:	2b00      	cmp	r3, #0
 801596e:	f000 80ca 	beq.w	8015b06 <rmw_init+0x1b2>
 8015972:	4b78      	ldr	r3, [pc, #480]	; (8015b54 <rmw_init+0x200>)
 8015974:	6880      	ldr	r0, [r0, #8]
 8015976:	681f      	ldr	r7, [r3, #0]
 8015978:	b128      	cbz	r0, 8015986 <rmw_init+0x32>
 801597a:	4639      	mov	r1, r7
 801597c:	f7ea fc60 	bl	8000240 <strcmp>
 8015980:	2800      	cmp	r0, #0
 8015982:	f040 80ca 	bne.w	8015b1a <rmw_init+0x1c6>
 8015986:	4c74      	ldr	r4, [pc, #464]	; (8015b58 <rmw_init+0x204>)
 8015988:	f04f 0800 	mov.w	r8, #0
 801598c:	4973      	ldr	r1, [pc, #460]	; (8015b5c <rmw_init+0x208>)
 801598e:	4874      	ldr	r0, [pc, #464]	; (8015b60 <rmw_init+0x20c>)
 8015990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015994:	60b7      	str	r7, [r6, #8]
 8015996:	e9c6 2300 	strd	r2, r3, [r6]
 801599a:	68eb      	ldr	r3, [r5, #12]
 801599c:	2201      	movs	r2, #1
 801599e:	64b3      	str	r3, [r6, #72]	; 0x48
 80159a0:	f001 f914 	bl	8016bcc <rmw_uxrce_init_session_memory>
 80159a4:	4620      	mov	r0, r4
 80159a6:	2204      	movs	r2, #4
 80159a8:	496e      	ldr	r1, [pc, #440]	; (8015b64 <rmw_init+0x210>)
 80159aa:	f001 f94f 	bl	8016c4c <rmw_uxrce_init_static_input_buffer_memory>
 80159ae:	486c      	ldr	r0, [pc, #432]	; (8015b60 <rmw_init+0x20c>)
 80159b0:	f884 800d 	strb.w	r8, [r4, #13]
 80159b4:	f008 fb30 	bl	801e018 <get_memory>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	f000 80a9 	beq.w	8015b10 <rmw_init+0x1bc>
 80159be:	6884      	ldr	r4, [r0, #8]
 80159c0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80159c2:	f104 0910 	add.w	r9, r4, #16
 80159c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80159c8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80159cc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80159d0:	9101      	str	r1, [sp, #4]
 80159d2:	4661      	mov	r1, ip
 80159d4:	6a00      	ldr	r0, [r0, #32]
 80159d6:	9000      	str	r0, [sp, #0]
 80159d8:	4648      	mov	r0, r9
 80159da:	f002 fa19 	bl	8017e10 <uxr_set_custom_transport_callbacks>
 80159de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80159e2:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80159e6:	4960      	ldr	r1, [pc, #384]	; (8015b68 <rmw_init+0x214>)
 80159e8:	4860      	ldr	r0, [pc, #384]	; (8015b6c <rmw_init+0x218>)
 80159ea:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80159ee:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80159f2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80159f6:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80159fa:	2201      	movs	r2, #1
 80159fc:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015a00:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015a04:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015a08:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8015a0c:	64f4      	str	r4, [r6, #76]	; 0x4c
 8015a0e:	f001 f8bd 	bl	8016b8c <rmw_uxrce_init_node_memory>
 8015a12:	2205      	movs	r2, #5
 8015a14:	4956      	ldr	r1, [pc, #344]	; (8015b70 <rmw_init+0x21c>)
 8015a16:	4857      	ldr	r0, [pc, #348]	; (8015b74 <rmw_init+0x220>)
 8015a18:	f001 f898 	bl	8016b4c <rmw_uxrce_init_subscription_memory>
 8015a1c:	220a      	movs	r2, #10
 8015a1e:	4956      	ldr	r1, [pc, #344]	; (8015b78 <rmw_init+0x224>)
 8015a20:	4856      	ldr	r0, [pc, #344]	; (8015b7c <rmw_init+0x228>)
 8015a22:	f001 f873 	bl	8016b0c <rmw_uxrce_init_publisher_memory>
 8015a26:	2201      	movs	r2, #1
 8015a28:	4955      	ldr	r1, [pc, #340]	; (8015b80 <rmw_init+0x22c>)
 8015a2a:	4856      	ldr	r0, [pc, #344]	; (8015b84 <rmw_init+0x230>)
 8015a2c:	f001 f82e 	bl	8016a8c <rmw_uxrce_init_service_memory>
 8015a30:	2201      	movs	r2, #1
 8015a32:	4955      	ldr	r1, [pc, #340]	; (8015b88 <rmw_init+0x234>)
 8015a34:	4855      	ldr	r0, [pc, #340]	; (8015b8c <rmw_init+0x238>)
 8015a36:	f001 f849 	bl	8016acc <rmw_uxrce_init_client_memory>
 8015a3a:	220f      	movs	r2, #15
 8015a3c:	4954      	ldr	r1, [pc, #336]	; (8015b90 <rmw_init+0x23c>)
 8015a3e:	4855      	ldr	r0, [pc, #340]	; (8015b94 <rmw_init+0x240>)
 8015a40:	f001 f8e4 	bl	8016c0c <rmw_uxrce_init_topic_memory>
 8015a44:	2203      	movs	r2, #3
 8015a46:	4954      	ldr	r1, [pc, #336]	; (8015b98 <rmw_init+0x244>)
 8015a48:	4854      	ldr	r0, [pc, #336]	; (8015b9c <rmw_init+0x248>)
 8015a4a:	f001 f91f 	bl	8016c8c <rmw_uxrce_init_init_options_impl_memory>
 8015a4e:	2204      	movs	r2, #4
 8015a50:	4953      	ldr	r1, [pc, #332]	; (8015ba0 <rmw_init+0x24c>)
 8015a52:	4854      	ldr	r0, [pc, #336]	; (8015ba4 <rmw_init+0x250>)
 8015a54:	f001 f93a 	bl	8016ccc <rmw_uxrce_init_wait_set_memory>
 8015a58:	4953      	ldr	r1, [pc, #332]	; (8015ba8 <rmw_init+0x254>)
 8015a5a:	4854      	ldr	r0, [pc, #336]	; (8015bac <rmw_init+0x258>)
 8015a5c:	2204      	movs	r2, #4
 8015a5e:	f001 f955 	bl	8016d0c <rmw_uxrce_init_guard_condition_memory>
 8015a62:	4642      	mov	r2, r8
 8015a64:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8015a66:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a68:	f000 fff8 	bl	8016a5c <rmw_uxrce_transport_init>
 8015a6c:	4607      	mov	r7, r0
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d158      	bne.n	8015b24 <rmw_init+0x1d0>
 8015a72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015a74:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015a78:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a7e:	4628      	mov	r0, r5
 8015a80:	f002 fbf6 	bl	8018270 <uxr_init_session>
 8015a84:	4622      	mov	r2, r4
 8015a86:	494a      	ldr	r1, [pc, #296]	; (8015bb0 <rmw_init+0x25c>)
 8015a88:	4628      	mov	r0, r5
 8015a8a:	f002 fc15 	bl	80182b8 <uxr_set_topic_callback>
 8015a8e:	463a      	mov	r2, r7
 8015a90:	4948      	ldr	r1, [pc, #288]	; (8015bb4 <rmw_init+0x260>)
 8015a92:	4628      	mov	r0, r5
 8015a94:	f002 fc0c 	bl	80182b0 <uxr_set_status_callback>
 8015a98:	463a      	mov	r2, r7
 8015a9a:	4947      	ldr	r1, [pc, #284]	; (8015bb8 <rmw_init+0x264>)
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	f002 fc0f 	bl	80182c0 <uxr_set_request_callback>
 8015aa2:	463a      	mov	r2, r7
 8015aa4:	4945      	ldr	r1, [pc, #276]	; (8015bbc <rmw_init+0x268>)
 8015aa6:	4628      	mov	r0, r5
 8015aa8:	f002 fc0e 	bl	80182c8 <uxr_set_reply_callback>
 8015aac:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015ab0:	2304      	movs	r3, #4
 8015ab2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015ab6:	0092      	lsls	r2, r2, #2
 8015ab8:	4628      	mov	r0, r5
 8015aba:	f002 fc45 	bl	8018348 <uxr_create_input_reliable_stream>
 8015abe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015ac2:	2304      	movs	r3, #4
 8015ac4:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015ac8:	0092      	lsls	r2, r2, #2
 8015aca:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015ace:	4628      	mov	r0, r5
 8015ad0:	f002 fc10 	bl	80182f4 <uxr_create_output_reliable_stream>
 8015ad4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015ad8:	4628      	mov	r0, r5
 8015ada:	f002 fc2f 	bl	801833c <uxr_create_input_best_effort_stream>
 8015ade:	f241 3194 	movw	r1, #5012	; 0x1394
 8015ae2:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015ae6:	4628      	mov	r0, r5
 8015ae8:	4421      	add	r1, r4
 8015aea:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015aee:	f002 fbef 	bl	80182d0 <uxr_create_output_best_effort_stream>
 8015af2:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015af6:	4628      	mov	r0, r5
 8015af8:	f003 f978 	bl	8018dec <uxr_create_session>
 8015afc:	b1f8      	cbz	r0, 8015b3e <rmw_init+0x1ea>
 8015afe:	4638      	mov	r0, r7
 8015b00:	b003      	add	sp, #12
 8015b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b06:	270b      	movs	r7, #11
 8015b08:	4638      	mov	r0, r7
 8015b0a:	b003      	add	sp, #12
 8015b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b10:	2701      	movs	r7, #1
 8015b12:	4638      	mov	r0, r7
 8015b14:	b003      	add	sp, #12
 8015b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b1a:	270c      	movs	r7, #12
 8015b1c:	4638      	mov	r0, r7
 8015b1e:	b003      	add	sp, #12
 8015b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b24:	4648      	mov	r0, r9
 8015b26:	f002 f9b1 	bl	8017e8c <uxr_close_custom_transport>
 8015b2a:	4621      	mov	r1, r4
 8015b2c:	480c      	ldr	r0, [pc, #48]	; (8015b60 <rmw_init+0x20c>)
 8015b2e:	f008 fa83 	bl	801e038 <put_memory>
 8015b32:	4638      	mov	r0, r7
 8015b34:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015b38:	b003      	add	sp, #12
 8015b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b3e:	4648      	mov	r0, r9
 8015b40:	f002 f9a4 	bl	8017e8c <uxr_close_custom_transport>
 8015b44:	4621      	mov	r1, r4
 8015b46:	4806      	ldr	r0, [pc, #24]	; (8015b60 <rmw_init+0x20c>)
 8015b48:	f008 fa76 	bl	801e038 <put_memory>
 8015b4c:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015b4e:	2701      	movs	r7, #1
 8015b50:	e7d5      	b.n	8015afe <rmw_init+0x1aa>
 8015b52:	bf00      	nop
 8015b54:	08025ac4 	.word	0x08025ac4
 8015b58:	20016dac 	.word	0x20016dac
 8015b5c:	20013058 	.word	0x20013058
 8015b60:	20016d9c 	.word	0x20016d9c
 8015b64:	20014600 	.word	0x20014600
 8015b68:	2001267c 	.word	0x2001267c
 8015b6c:	20016d6c 	.word	0x20016d6c
 8015b70:	20016700 	.word	0x20016700
 8015b74:	20016dbc 	.word	0x20016dbc
 8015b78:	20012720 	.word	0x20012720
 8015b7c:	20016d7c 	.word	0x20016d7c
 8015b80:	20012f90 	.word	0x20012f90
 8015b84:	20016d8c 	.word	0x20016d8c
 8015b88:	200124b0 	.word	0x200124b0
 8015b8c:	2001249c 	.word	0x2001249c
 8015b90:	20016b38 	.word	0x20016b38
 8015b94:	20016dcc 	.word	0x20016dcc
 8015b98:	200125f8 	.word	0x200125f8
 8015b9c:	20016d5c 	.word	0x20016d5c
 8015ba0:	20016cdc 	.word	0x20016cdc
 8015ba4:	20016ddc 	.word	0x20016ddc
 8015ba8:	20012578 	.word	0x20012578
 8015bac:	20016d4c 	.word	0x20016d4c
 8015bb0:	0801de51 	.word	0x0801de51
 8015bb4:	0801de49 	.word	0x0801de49
 8015bb8:	0801dee9 	.word	0x0801dee9
 8015bbc:	0801df85 	.word	0x0801df85

08015bc0 <rmw_context_fini>:
 8015bc0:	4b17      	ldr	r3, [pc, #92]	; (8015c20 <rmw_context_fini+0x60>)
 8015bc2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015bc4:	b570      	push	{r4, r5, r6, lr}
 8015bc6:	681c      	ldr	r4, [r3, #0]
 8015bc8:	4605      	mov	r5, r0
 8015bca:	b334      	cbz	r4, 8015c1a <rmw_context_fini+0x5a>
 8015bcc:	2600      	movs	r6, #0
 8015bce:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015bd2:	6902      	ldr	r2, [r0, #16]
 8015bd4:	428a      	cmp	r2, r1
 8015bd6:	d018      	beq.n	8015c0a <rmw_context_fini+0x4a>
 8015bd8:	2c00      	cmp	r4, #0
 8015bda:	d1f8      	bne.n	8015bce <rmw_context_fini+0xe>
 8015bdc:	b189      	cbz	r1, 8015c02 <rmw_context_fini+0x42>
 8015bde:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015be2:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015be6:	789b      	ldrb	r3, [r3, #2]
 8015be8:	2b01      	cmp	r3, #1
 8015bea:	bf14      	ite	ne
 8015bec:	210a      	movne	r1, #10
 8015bee:	2100      	moveq	r1, #0
 8015bf0:	f003 f8d4 	bl	8018d9c <uxr_delete_session_retries>
 8015bf4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015bf6:	f001 f8a9 	bl	8016d4c <rmw_uxrce_fini_session_memory>
 8015bfa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015bfc:	3010      	adds	r0, #16
 8015bfe:	f002 f945 	bl	8017e8c <uxr_close_custom_transport>
 8015c02:	2300      	movs	r3, #0
 8015c04:	4630      	mov	r0, r6
 8015c06:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015c08:	bd70      	pop	{r4, r5, r6, pc}
 8015c0a:	3018      	adds	r0, #24
 8015c0c:	f000 f89c 	bl	8015d48 <rmw_destroy_node>
 8015c10:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015c12:	4606      	mov	r6, r0
 8015c14:	2c00      	cmp	r4, #0
 8015c16:	d1da      	bne.n	8015bce <rmw_context_fini+0xe>
 8015c18:	e7e0      	b.n	8015bdc <rmw_context_fini+0x1c>
 8015c1a:	4626      	mov	r6, r4
 8015c1c:	e7de      	b.n	8015bdc <rmw_context_fini+0x1c>
 8015c1e:	bf00      	nop
 8015c20:	20016d6c 	.word	0x20016d6c

08015c24 <create_node>:
 8015c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c28:	b083      	sub	sp, #12
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d064      	beq.n	8015cf8 <create_node+0xd4>
 8015c2e:	4606      	mov	r6, r0
 8015c30:	4838      	ldr	r0, [pc, #224]	; (8015d14 <create_node+0xf0>)
 8015c32:	460f      	mov	r7, r1
 8015c34:	4690      	mov	r8, r2
 8015c36:	461d      	mov	r5, r3
 8015c38:	f008 f9ee 	bl	801e018 <get_memory>
 8015c3c:	2800      	cmp	r0, #0
 8015c3e:	d05b      	beq.n	8015cf8 <create_node+0xd4>
 8015c40:	6884      	ldr	r4, [r0, #8]
 8015c42:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015c44:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015c48:	f104 0518 	add.w	r5, r4, #24
 8015c4c:	6123      	str	r3, [r4, #16]
 8015c4e:	f008 fa4b 	bl	801e0e8 <rmw_get_implementation_identifier>
 8015c52:	f8c4 9020 	str.w	r9, [r4, #32]
 8015c56:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015c5a:	4630      	mov	r0, r6
 8015c5c:	f7ea fb50 	bl	8000300 <strlen>
 8015c60:	1c42      	adds	r2, r0, #1
 8015c62:	2a3c      	cmp	r2, #60	; 0x3c
 8015c64:	d840      	bhi.n	8015ce8 <create_node+0xc4>
 8015c66:	4648      	mov	r0, r9
 8015c68:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015c6c:	4631      	mov	r1, r6
 8015c6e:	f00b f98e 	bl	8020f8e <memcpy>
 8015c72:	4638      	mov	r0, r7
 8015c74:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015c78:	f7ea fb42 	bl	8000300 <strlen>
 8015c7c:	1c42      	adds	r2, r0, #1
 8015c7e:	2a3c      	cmp	r2, #60	; 0x3c
 8015c80:	d832      	bhi.n	8015ce8 <create_node+0xc4>
 8015c82:	4639      	mov	r1, r7
 8015c84:	4648      	mov	r0, r9
 8015c86:	f00b f982 	bl	8020f8e <memcpy>
 8015c8a:	6923      	ldr	r3, [r4, #16]
 8015c8c:	2101      	movs	r1, #1
 8015c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c92:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015c96:	1842      	adds	r2, r0, r1
 8015c98:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015c9c:	f002 f8fa 	bl	8017e94 <uxr_object_id>
 8015ca0:	6160      	str	r0, [r4, #20]
 8015ca2:	783b      	ldrb	r3, [r7, #0]
 8015ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8015ca6:	d12c      	bne.n	8015d02 <create_node+0xde>
 8015ca8:	787b      	ldrb	r3, [r7, #1]
 8015caa:	bb53      	cbnz	r3, 8015d02 <create_node+0xde>
 8015cac:	4633      	mov	r3, r6
 8015cae:	4a1a      	ldr	r2, [pc, #104]	; (8015d18 <create_node+0xf4>)
 8015cb0:	213c      	movs	r1, #60	; 0x3c
 8015cb2:	481a      	ldr	r0, [pc, #104]	; (8015d1c <create_node+0xf8>)
 8015cb4:	f00a ff0e 	bl	8020ad4 <sniprintf>
 8015cb8:	6920      	ldr	r0, [r4, #16]
 8015cba:	2106      	movs	r1, #6
 8015cbc:	fa1f f388 	uxth.w	r3, r8
 8015cc0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015cc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015cc8:	9101      	str	r1, [sp, #4]
 8015cca:	4914      	ldr	r1, [pc, #80]	; (8015d1c <create_node+0xf8>)
 8015ccc:	9100      	str	r1, [sp, #0]
 8015cce:	6811      	ldr	r1, [r2, #0]
 8015cd0:	6962      	ldr	r2, [r4, #20]
 8015cd2:	f001 fe31 	bl	8017938 <uxr_buffer_create_participant_bin>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	6920      	ldr	r0, [r4, #16]
 8015cda:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015cde:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015ce2:	f001 f9b7 	bl	8017054 <run_xrce_session>
 8015ce6:	b918      	cbnz	r0, 8015cf0 <create_node+0xcc>
 8015ce8:	4628      	mov	r0, r5
 8015cea:	2500      	movs	r5, #0
 8015cec:	f001 f834 	bl	8016d58 <rmw_uxrce_fini_node_memory>
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	b003      	add	sp, #12
 8015cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cf8:	2500      	movs	r5, #0
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	b003      	add	sp, #12
 8015cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d02:	463b      	mov	r3, r7
 8015d04:	4a06      	ldr	r2, [pc, #24]	; (8015d20 <create_node+0xfc>)
 8015d06:	213c      	movs	r1, #60	; 0x3c
 8015d08:	9600      	str	r6, [sp, #0]
 8015d0a:	4804      	ldr	r0, [pc, #16]	; (8015d1c <create_node+0xf8>)
 8015d0c:	f00a fee2 	bl	8020ad4 <sniprintf>
 8015d10:	e7d2      	b.n	8015cb8 <create_node+0x94>
 8015d12:	bf00      	nop
 8015d14:	20016d6c 	.word	0x20016d6c
 8015d18:	08025464 	.word	0x08025464
 8015d1c:	20012320 	.word	0x20012320
 8015d20:	08024e60 	.word	0x08024e60

08015d24 <rmw_create_node>:
 8015d24:	468c      	mov	ip, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	f1bc 0f00 	cmp.w	ip, #0
 8015d2c:	d00a      	beq.n	8015d44 <rmw_create_node+0x20>
 8015d2e:	f89c 3000 	ldrb.w	r3, [ip]
 8015d32:	b13b      	cbz	r3, 8015d44 <rmw_create_node+0x20>
 8015d34:	b132      	cbz	r2, 8015d44 <rmw_create_node+0x20>
 8015d36:	7813      	ldrb	r3, [r2, #0]
 8015d38:	b123      	cbz	r3, 8015d44 <rmw_create_node+0x20>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015d3e:	4660      	mov	r0, ip
 8015d40:	f7ff bf70 	b.w	8015c24 <create_node>
 8015d44:	2000      	movs	r0, #0
 8015d46:	4770      	bx	lr

08015d48 <rmw_destroy_node>:
 8015d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d4a:	b328      	cbz	r0, 8015d98 <rmw_destroy_node+0x50>
 8015d4c:	4607      	mov	r7, r0
 8015d4e:	6800      	ldr	r0, [r0, #0]
 8015d50:	b120      	cbz	r0, 8015d5c <rmw_destroy_node+0x14>
 8015d52:	4b37      	ldr	r3, [pc, #220]	; (8015e30 <rmw_destroy_node+0xe8>)
 8015d54:	6819      	ldr	r1, [r3, #0]
 8015d56:	f7ea fa73 	bl	8000240 <strcmp>
 8015d5a:	b9e8      	cbnz	r0, 8015d98 <rmw_destroy_node+0x50>
 8015d5c:	687d      	ldr	r5, [r7, #4]
 8015d5e:	b1dd      	cbz	r5, 8015d98 <rmw_destroy_node+0x50>
 8015d60:	4b34      	ldr	r3, [pc, #208]	; (8015e34 <rmw_destroy_node+0xec>)
 8015d62:	681c      	ldr	r4, [r3, #0]
 8015d64:	2c00      	cmp	r4, #0
 8015d66:	d060      	beq.n	8015e2a <rmw_destroy_node+0xe2>
 8015d68:	2600      	movs	r6, #0
 8015d6a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d6e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015d72:	429d      	cmp	r5, r3
 8015d74:	d013      	beq.n	8015d9e <rmw_destroy_node+0x56>
 8015d76:	2c00      	cmp	r4, #0
 8015d78:	d1f7      	bne.n	8015d6a <rmw_destroy_node+0x22>
 8015d7a:	4b2f      	ldr	r3, [pc, #188]	; (8015e38 <rmw_destroy_node+0xf0>)
 8015d7c:	681c      	ldr	r4, [r3, #0]
 8015d7e:	b1c4      	cbz	r4, 8015db2 <rmw_destroy_node+0x6a>
 8015d80:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d84:	6a0b      	ldr	r3, [r1, #32]
 8015d86:	429d      	cmp	r5, r3
 8015d88:	d1f9      	bne.n	8015d7e <rmw_destroy_node+0x36>
 8015d8a:	317c      	adds	r1, #124	; 0x7c
 8015d8c:	4638      	mov	r0, r7
 8015d8e:	f000 fdaf 	bl	80168f0 <rmw_destroy_subscription>
 8015d92:	2801      	cmp	r0, #1
 8015d94:	4606      	mov	r6, r0
 8015d96:	d1f2      	bne.n	8015d7e <rmw_destroy_node+0x36>
 8015d98:	2601      	movs	r6, #1
 8015d9a:	4630      	mov	r0, r6
 8015d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d9e:	3184      	adds	r1, #132	; 0x84
 8015da0:	4638      	mov	r0, r7
 8015da2:	f000 f9b1 	bl	8016108 <rmw_destroy_publisher>
 8015da6:	2801      	cmp	r0, #1
 8015da8:	4606      	mov	r6, r0
 8015daa:	d0f5      	beq.n	8015d98 <rmw_destroy_node+0x50>
 8015dac:	2c00      	cmp	r4, #0
 8015dae:	d1dc      	bne.n	8015d6a <rmw_destroy_node+0x22>
 8015db0:	e7e3      	b.n	8015d7a <rmw_destroy_node+0x32>
 8015db2:	4b22      	ldr	r3, [pc, #136]	; (8015e3c <rmw_destroy_node+0xf4>)
 8015db4:	681c      	ldr	r4, [r3, #0]
 8015db6:	b16c      	cbz	r4, 8015dd4 <rmw_destroy_node+0x8c>
 8015db8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015dbc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015dbe:	429d      	cmp	r5, r3
 8015dc0:	d1f9      	bne.n	8015db6 <rmw_destroy_node+0x6e>
 8015dc2:	317c      	adds	r1, #124	; 0x7c
 8015dc4:	4638      	mov	r0, r7
 8015dc6:	f000 fc1d 	bl	8016604 <rmw_destroy_service>
 8015dca:	2801      	cmp	r0, #1
 8015dcc:	4606      	mov	r6, r0
 8015dce:	d0e3      	beq.n	8015d98 <rmw_destroy_node+0x50>
 8015dd0:	2c00      	cmp	r4, #0
 8015dd2:	d1f1      	bne.n	8015db8 <rmw_destroy_node+0x70>
 8015dd4:	4b1a      	ldr	r3, [pc, #104]	; (8015e40 <rmw_destroy_node+0xf8>)
 8015dd6:	681c      	ldr	r4, [r3, #0]
 8015dd8:	b16c      	cbz	r4, 8015df6 <rmw_destroy_node+0xae>
 8015dda:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015dde:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015de0:	429d      	cmp	r5, r3
 8015de2:	d1f9      	bne.n	8015dd8 <rmw_destroy_node+0x90>
 8015de4:	317c      	adds	r1, #124	; 0x7c
 8015de6:	4638      	mov	r0, r7
 8015de8:	f008 f93a 	bl	801e060 <rmw_destroy_client>
 8015dec:	2801      	cmp	r0, #1
 8015dee:	4606      	mov	r6, r0
 8015df0:	d0d2      	beq.n	8015d98 <rmw_destroy_node+0x50>
 8015df2:	2c00      	cmp	r4, #0
 8015df4:	d1f1      	bne.n	8015dda <rmw_destroy_node+0x92>
 8015df6:	6928      	ldr	r0, [r5, #16]
 8015df8:	696a      	ldr	r2, [r5, #20]
 8015dfa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015dfe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e02:	6819      	ldr	r1, [r3, #0]
 8015e04:	f001 fd4c 	bl	80178a0 <uxr_buffer_delete_entity>
 8015e08:	4602      	mov	r2, r0
 8015e0a:	6928      	ldr	r0, [r5, #16]
 8015e0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015e10:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015e14:	f001 f91e 	bl	8017054 <run_xrce_session>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	4638      	mov	r0, r7
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	bf08      	it	eq
 8015e20:	2602      	moveq	r6, #2
 8015e22:	f000 ff99 	bl	8016d58 <rmw_uxrce_fini_node_memory>
 8015e26:	4630      	mov	r0, r6
 8015e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e2a:	4626      	mov	r6, r4
 8015e2c:	e7a5      	b.n	8015d7a <rmw_destroy_node+0x32>
 8015e2e:	bf00      	nop
 8015e30:	08025ac4 	.word	0x08025ac4
 8015e34:	20016d7c 	.word	0x20016d7c
 8015e38:	20016dbc 	.word	0x20016dbc
 8015e3c:	20016d8c 	.word	0x20016d8c
 8015e40:	2001249c 	.word	0x2001249c

08015e44 <rmw_node_get_graph_guard_condition>:
 8015e44:	6843      	ldr	r3, [r0, #4]
 8015e46:	6918      	ldr	r0, [r3, #16]
 8015e48:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop

08015e50 <flush_session>:
 8015e50:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8015e52:	f002 be59 	b.w	8018b08 <uxr_run_session_until_confirm_delivery>
 8015e56:	bf00      	nop

08015e58 <rmw_publish>:
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d053      	beq.n	8015f04 <rmw_publish+0xac>
 8015e5c:	b570      	push	{r4, r5, r6, lr}
 8015e5e:	460d      	mov	r5, r1
 8015e60:	b08e      	sub	sp, #56	; 0x38
 8015e62:	2900      	cmp	r1, #0
 8015e64:	d04b      	beq.n	8015efe <rmw_publish+0xa6>
 8015e66:	4604      	mov	r4, r0
 8015e68:	6800      	ldr	r0, [r0, #0]
 8015e6a:	f001 fa05 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	d045      	beq.n	8015efe <rmw_publish+0xa6>
 8015e72:	6866      	ldr	r6, [r4, #4]
 8015e74:	2e00      	cmp	r6, #0
 8015e76:	d042      	beq.n	8015efe <rmw_publish+0xa6>
 8015e78:	69b4      	ldr	r4, [r6, #24]
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	6923      	ldr	r3, [r4, #16]
 8015e7e:	4798      	blx	r3
 8015e80:	69f3      	ldr	r3, [r6, #28]
 8015e82:	9005      	str	r0, [sp, #20]
 8015e84:	b113      	cbz	r3, 8015e8c <rmw_publish+0x34>
 8015e86:	a805      	add	r0, sp, #20
 8015e88:	4798      	blx	r3
 8015e8a:	9805      	ldr	r0, [sp, #20]
 8015e8c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e90:	691b      	ldr	r3, [r3, #16]
 8015e92:	9000      	str	r0, [sp, #0]
 8015e94:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015e98:	6972      	ldr	r2, [r6, #20]
 8015e9a:	ab06      	add	r3, sp, #24
 8015e9c:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015e9e:	f004 f8ad 	bl	8019ffc <uxr_prepare_output_stream>
 8015ea2:	b1d8      	cbz	r0, 8015edc <rmw_publish+0x84>
 8015ea4:	68a3      	ldr	r3, [r4, #8]
 8015ea6:	a906      	add	r1, sp, #24
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	4798      	blx	r3
 8015eac:	6a33      	ldr	r3, [r6, #32]
 8015eae:	4604      	mov	r4, r0
 8015eb0:	b10b      	cbz	r3, 8015eb6 <rmw_publish+0x5e>
 8015eb2:	a806      	add	r0, sp, #24
 8015eb4:	4798      	blx	r3
 8015eb6:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015ec0:	d022      	beq.n	8015f08 <rmw_publish+0xb0>
 8015ec2:	6918      	ldr	r0, [r3, #16]
 8015ec4:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8015ec6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015eca:	f002 fe1d 	bl	8018b08 <uxr_run_session_until_confirm_delivery>
 8015ece:	4020      	ands	r0, r4
 8015ed0:	b2c4      	uxtb	r4, r0
 8015ed2:	f084 0001 	eor.w	r0, r4, #1
 8015ed6:	b2c0      	uxtb	r0, r0
 8015ed8:	b00e      	add	sp, #56	; 0x38
 8015eda:	bd70      	pop	{r4, r5, r6, pc}
 8015edc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015ee0:	6918      	ldr	r0, [r3, #16]
 8015ee2:	9b05      	ldr	r3, [sp, #20]
 8015ee4:	9602      	str	r6, [sp, #8]
 8015ee6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	4b09      	ldr	r3, [pc, #36]	; (8015f14 <rmw_publish+0xbc>)
 8015eee:	9301      	str	r3, [sp, #4]
 8015ef0:	ab06      	add	r3, sp, #24
 8015ef2:	6972      	ldr	r2, [r6, #20]
 8015ef4:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015ef6:	f004 f8b1 	bl	801a05c <uxr_prepare_output_stream_fragmented>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d1d2      	bne.n	8015ea4 <rmw_publish+0x4c>
 8015efe:	2001      	movs	r0, #1
 8015f00:	b00e      	add	sp, #56	; 0x38
 8015f02:	bd70      	pop	{r4, r5, r6, pc}
 8015f04:	2001      	movs	r0, #1
 8015f06:	4770      	bx	lr
 8015f08:	6918      	ldr	r0, [r3, #16]
 8015f0a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015f0e:	f002 fa41 	bl	8018394 <uxr_flash_output_streams>
 8015f12:	e7de      	b.n	8015ed2 <rmw_publish+0x7a>
 8015f14:	08015e51 	.word	0x08015e51

08015f18 <rmw_create_publisher>:
 8015f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f1c:	b087      	sub	sp, #28
 8015f1e:	2800      	cmp	r0, #0
 8015f20:	f000 80d2 	beq.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f24:	460e      	mov	r6, r1
 8015f26:	2900      	cmp	r1, #0
 8015f28:	f000 80ce 	beq.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	6800      	ldr	r0, [r0, #0]
 8015f30:	4615      	mov	r5, r2
 8015f32:	461f      	mov	r7, r3
 8015f34:	f001 f9a0 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8015f38:	f080 0001 	eor.w	r0, r0, #1
 8015f3c:	b2c0      	uxtb	r0, r0
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	f040 80c2 	bne.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f44:	2d00      	cmp	r5, #0
 8015f46:	f000 80bf 	beq.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f4a:	782b      	ldrb	r3, [r5, #0]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	f000 80bb 	beq.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f52:	2f00      	cmp	r7, #0
 8015f54:	f000 80b8 	beq.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f58:	485e      	ldr	r0, [pc, #376]	; (80160d4 <rmw_create_publisher+0x1bc>)
 8015f5a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015f5e:	f008 f85b 	bl	801e018 <get_memory>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	f000 80b0 	beq.w	80160c8 <rmw_create_publisher+0x1b0>
 8015f68:	6884      	ldr	r4, [r0, #8]
 8015f6a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8015f6e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8015f72:	f008 f8b9 	bl	801e0e8 <rmw_get_implementation_identifier>
 8015f76:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8015f7a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8015f7e:	4628      	mov	r0, r5
 8015f80:	f7ea f9be 	bl	8000300 <strlen>
 8015f84:	3001      	adds	r0, #1
 8015f86:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8015f8a:	283c      	cmp	r0, #60	; 0x3c
 8015f8c:	f200 808f 	bhi.w	80160ae <rmw_create_publisher+0x196>
 8015f90:	462b      	mov	r3, r5
 8015f92:	4a51      	ldr	r2, [pc, #324]	; (80160d8 <rmw_create_publisher+0x1c0>)
 8015f94:	213c      	movs	r1, #60	; 0x3c
 8015f96:	4650      	mov	r0, sl
 8015f98:	f00a fd9c 	bl	8020ad4 <sniprintf>
 8015f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015fa0:	4639      	mov	r1, r7
 8015fa2:	2250      	movs	r2, #80	; 0x50
 8015fa4:	67e3      	str	r3, [r4, #124]	; 0x7c
 8015fa6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015faa:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8015fae:	f00a ffee 	bl	8020f8e <memcpy>
 8015fb2:	7a3b      	ldrb	r3, [r7, #8]
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	4949      	ldr	r1, [pc, #292]	; (80160dc <rmw_create_publisher+0x1c4>)
 8015fb8:	2b02      	cmp	r3, #2
 8015fba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fbe:	bf0c      	ite	eq
 8015fc0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8015fc4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8015fc8:	67a3      	str	r3, [r4, #120]	; 0x78
 8015fca:	2300      	movs	r3, #0
 8015fcc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015fd0:	f001 f960 	bl	8017294 <get_message_typesupport_handle>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d06a      	beq.n	80160ae <rmw_create_publisher+0x196>
 8015fd8:	6842      	ldr	r2, [r0, #4]
 8015fda:	61a2      	str	r2, [r4, #24]
 8015fdc:	2a00      	cmp	r2, #0
 8015fde:	d066      	beq.n	80160ae <rmw_create_publisher+0x196>
 8015fe0:	4629      	mov	r1, r5
 8015fe2:	463b      	mov	r3, r7
 8015fe4:	4648      	mov	r0, r9
 8015fe6:	f008 f8af 	bl	801e148 <create_topic>
 8015fea:	6260      	str	r0, [r4, #36]	; 0x24
 8015fec:	2800      	cmp	r0, #0
 8015fee:	d062      	beq.n	80160b6 <rmw_create_publisher+0x19e>
 8015ff0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ff4:	2103      	movs	r1, #3
 8015ff6:	2506      	movs	r5, #6
 8015ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ffc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8016000:	1c42      	adds	r2, r0, #1
 8016002:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8016006:	f001 ff45 	bl	8017e94 <uxr_object_id>
 801600a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801600e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016012:	6120      	str	r0, [r4, #16]
 8016014:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8016018:	6910      	ldr	r0, [r2, #16]
 801601a:	9500      	str	r5, [sp, #0]
 801601c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016020:	6819      	ldr	r1, [r3, #0]
 8016022:	6922      	ldr	r2, [r4, #16]
 8016024:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016028:	f001 fcee 	bl	8017a08 <uxr_buffer_create_publisher_bin>
 801602c:	4602      	mov	r2, r0
 801602e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016032:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016036:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801603a:	f001 f80b 	bl	8017054 <run_xrce_session>
 801603e:	b3b0      	cbz	r0, 80160ae <rmw_create_publisher+0x196>
 8016040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016044:	2105      	movs	r1, #5
 8016046:	f10d 0a10 	add.w	sl, sp, #16
 801604a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801604e:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8016052:	1c42      	adds	r2, r0, #1
 8016054:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8016058:	f001 ff1c 	bl	8017e94 <uxr_object_id>
 801605c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016060:	4639      	mov	r1, r7
 8016062:	6160      	str	r0, [r4, #20]
 8016064:	691e      	ldr	r6, [r3, #16]
 8016066:	4650      	mov	r0, sl
 8016068:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801606c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8016070:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8016074:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8016078:	f001 f808 	bl	801708c <convert_qos_profile>
 801607c:	9503      	str	r5, [sp, #12]
 801607e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8016082:	9001      	str	r0, [sp, #4]
 8016084:	4630      	mov	r0, r6
 8016086:	f8ad 1008 	strh.w	r1, [sp, #8]
 801608a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801608e:	9300      	str	r3, [sp, #0]
 8016090:	6839      	ldr	r1, [r7, #0]
 8016092:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8016096:	f001 fd17 	bl	8017ac8 <uxr_buffer_create_datawriter_bin>
 801609a:	4602      	mov	r2, r0
 801609c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80160a0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80160a4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80160a8:	f000 ffd4 	bl	8017054 <run_xrce_session>
 80160ac:	b970      	cbnz	r0, 80160cc <rmw_create_publisher+0x1b4>
 80160ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80160b0:	b108      	cbz	r0, 80160b6 <rmw_create_publisher+0x19e>
 80160b2:	f000 fec1 	bl	8016e38 <rmw_uxrce_fini_topic_memory>
 80160b6:	4640      	mov	r0, r8
 80160b8:	f04f 0800 	mov.w	r8, #0
 80160bc:	f000 fe64 	bl	8016d88 <rmw_uxrce_fini_publisher_memory>
 80160c0:	4640      	mov	r0, r8
 80160c2:	b007      	add	sp, #28
 80160c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c8:	f04f 0800 	mov.w	r8, #0
 80160cc:	4640      	mov	r0, r8
 80160ce:	b007      	add	sp, #28
 80160d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d4:	20016d7c 	.word	0x20016d7c
 80160d8:	08025464 	.word	0x08025464
 80160dc:	0802471c 	.word	0x0802471c

080160e0 <rmw_publisher_get_actual_qos>:
 80160e0:	b178      	cbz	r0, 8016102 <rmw_publisher_get_actual_qos+0x22>
 80160e2:	b510      	push	{r4, lr}
 80160e4:	fab1 f481 	clz	r4, r1
 80160e8:	0964      	lsrs	r4, r4, #5
 80160ea:	b141      	cbz	r1, 80160fe <rmw_publisher_get_actual_qos+0x1e>
 80160ec:	6843      	ldr	r3, [r0, #4]
 80160ee:	2250      	movs	r2, #80	; 0x50
 80160f0:	4608      	mov	r0, r1
 80160f2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80160f6:	f00a ff4a 	bl	8020f8e <memcpy>
 80160fa:	4620      	mov	r0, r4
 80160fc:	bd10      	pop	{r4, pc}
 80160fe:	200b      	movs	r0, #11
 8016100:	bd10      	pop	{r4, pc}
 8016102:	200b      	movs	r0, #11
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop

08016108 <rmw_destroy_publisher>:
 8016108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801610c:	b128      	cbz	r0, 801611a <rmw_destroy_publisher+0x12>
 801610e:	4604      	mov	r4, r0
 8016110:	6800      	ldr	r0, [r0, #0]
 8016112:	460d      	mov	r5, r1
 8016114:	f001 f8b0 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8016118:	b918      	cbnz	r0, 8016122 <rmw_destroy_publisher+0x1a>
 801611a:	2401      	movs	r4, #1
 801611c:	4620      	mov	r0, r4
 801611e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016122:	6863      	ldr	r3, [r4, #4]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d0f8      	beq.n	801611a <rmw_destroy_publisher+0x12>
 8016128:	fab5 f485 	clz	r4, r5
 801612c:	0964      	lsrs	r4, r4, #5
 801612e:	2d00      	cmp	r5, #0
 8016130:	d0f3      	beq.n	801611a <rmw_destroy_publisher+0x12>
 8016132:	6828      	ldr	r0, [r5, #0]
 8016134:	f001 f8a0 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8016138:	2800      	cmp	r0, #0
 801613a:	d0ee      	beq.n	801611a <rmw_destroy_publisher+0x12>
 801613c:	686e      	ldr	r6, [r5, #4]
 801613e:	2e00      	cmp	r6, #0
 8016140:	d0eb      	beq.n	801611a <rmw_destroy_publisher+0x12>
 8016142:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8016144:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016148:	f008 f84e 	bl	801e1e8 <destroy_topic>
 801614c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016150:	6972      	ldr	r2, [r6, #20]
 8016152:	6918      	ldr	r0, [r3, #16]
 8016154:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016158:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801615c:	6819      	ldr	r1, [r3, #0]
 801615e:	f001 fb9f 	bl	80178a0 <uxr_buffer_delete_entity>
 8016162:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016166:	4680      	mov	r8, r0
 8016168:	6932      	ldr	r2, [r6, #16]
 801616a:	6918      	ldr	r0, [r3, #16]
 801616c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016170:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016174:	6819      	ldr	r1, [r3, #0]
 8016176:	f001 fb93 	bl	80178a0 <uxr_buffer_delete_entity>
 801617a:	4606      	mov	r6, r0
 801617c:	6938      	ldr	r0, [r7, #16]
 801617e:	4642      	mov	r2, r8
 8016180:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016184:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016188:	f000 ff64 	bl	8017054 <run_xrce_session>
 801618c:	693f      	ldr	r7, [r7, #16]
 801618e:	4632      	mov	r2, r6
 8016190:	4606      	mov	r6, r0
 8016192:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016196:	4638      	mov	r0, r7
 8016198:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801619c:	f000 ff5a 	bl	8017054 <run_xrce_session>
 80161a0:	b126      	cbz	r6, 80161ac <rmw_destroy_publisher+0xa4>
 80161a2:	b118      	cbz	r0, 80161ac <rmw_destroy_publisher+0xa4>
 80161a4:	4628      	mov	r0, r5
 80161a6:	f000 fdef 	bl	8016d88 <rmw_uxrce_fini_publisher_memory>
 80161aa:	e7b7      	b.n	801611c <rmw_destroy_publisher+0x14>
 80161ac:	2402      	movs	r4, #2
 80161ae:	e7f9      	b.n	80161a4 <rmw_destroy_publisher+0x9c>

080161b0 <rmw_send_request>:
 80161b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161b4:	4604      	mov	r4, r0
 80161b6:	6800      	ldr	r0, [r0, #0]
 80161b8:	b08b      	sub	sp, #44	; 0x2c
 80161ba:	460e      	mov	r6, r1
 80161bc:	4615      	mov	r5, r2
 80161be:	b128      	cbz	r0, 80161cc <rmw_send_request+0x1c>
 80161c0:	4b21      	ldr	r3, [pc, #132]	; (8016248 <rmw_send_request+0x98>)
 80161c2:	6819      	ldr	r1, [r3, #0]
 80161c4:	f7ea f83c 	bl	8000240 <strcmp>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d139      	bne.n	8016240 <rmw_send_request+0x90>
 80161cc:	6864      	ldr	r4, [r4, #4]
 80161ce:	2700      	movs	r7, #0
 80161d0:	6963      	ldr	r3, [r4, #20]
 80161d2:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 80161d6:	689b      	ldr	r3, [r3, #8]
 80161d8:	4798      	blx	r3
 80161da:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80161de:	4630      	mov	r0, r6
 80161e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80161e4:	4798      	blx	r3
 80161e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80161ea:	9000      	str	r0, [sp, #0]
 80161ec:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80161f0:	6922      	ldr	r2, [r4, #16]
 80161f2:	ab02      	add	r3, sp, #8
 80161f4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80161f6:	f003 ff01 	bl	8019ffc <uxr_prepare_output_stream>
 80161fa:	e9c5 0700 	strd	r0, r7, [r5]
 80161fe:	b198      	cbz	r0, 8016228 <rmw_send_request+0x78>
 8016200:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016204:	a902      	add	r1, sp, #8
 8016206:	4630      	mov	r0, r6
 8016208:	4798      	blx	r3
 801620a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801620e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d00c      	beq.n	8016230 <rmw_send_request+0x80>
 8016216:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8016218:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801621c:	f002 fc74 	bl	8018b08 <uxr_run_session_until_confirm_delivery>
 8016220:	4638      	mov	r0, r7
 8016222:	b00b      	add	sp, #44	; 0x2c
 8016224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016228:	2001      	movs	r0, #1
 801622a:	b00b      	add	sp, #44	; 0x2c
 801622c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016230:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016234:	f002 f8ae 	bl	8018394 <uxr_flash_output_streams>
 8016238:	4638      	mov	r0, r7
 801623a:	b00b      	add	sp, #44	; 0x2c
 801623c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016240:	200c      	movs	r0, #12
 8016242:	b00b      	add	sp, #44	; 0x2c
 8016244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016248:	08025ac4 	.word	0x08025ac4

0801624c <rmw_take_request>:
 801624c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016250:	4605      	mov	r5, r0
 8016252:	6800      	ldr	r0, [r0, #0]
 8016254:	b089      	sub	sp, #36	; 0x24
 8016256:	460c      	mov	r4, r1
 8016258:	4690      	mov	r8, r2
 801625a:	461e      	mov	r6, r3
 801625c:	b128      	cbz	r0, 801626a <rmw_take_request+0x1e>
 801625e:	4b28      	ldr	r3, [pc, #160]	; (8016300 <rmw_take_request+0xb4>)
 8016260:	6819      	ldr	r1, [r3, #0]
 8016262:	f7e9 ffed 	bl	8000240 <strcmp>
 8016266:	2800      	cmp	r0, #0
 8016268:	d146      	bne.n	80162f8 <rmw_take_request+0xac>
 801626a:	b10e      	cbz	r6, 8016270 <rmw_take_request+0x24>
 801626c:	2300      	movs	r3, #0
 801626e:	7033      	strb	r3, [r6, #0]
 8016270:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016274:	f000 fe70 	bl	8016f58 <rmw_uxrce_clean_expired_static_input_buffer>
 8016278:	4648      	mov	r0, r9
 801627a:	f000 fe43 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 801627e:	4607      	mov	r7, r0
 8016280:	b3b0      	cbz	r0, 80162f0 <rmw_take_request+0xa4>
 8016282:	6885      	ldr	r5, [r0, #8]
 8016284:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8016288:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801628c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8016290:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8016294:	7423      	strb	r3, [r4, #16]
 8016296:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801629a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801629e:	f8a4 2011 	strh.w	r2, [r4, #17]
 80162a2:	74e3      	strb	r3, [r4, #19]
 80162a4:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 80162a8:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 80162ac:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 80162b0:	6161      	str	r1, [r4, #20]
 80162b2:	61a2      	str	r2, [r4, #24]
 80162b4:	61e3      	str	r3, [r4, #28]
 80162b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80162ba:	689b      	ldr	r3, [r3, #8]
 80162bc:	4798      	blx	r3
 80162be:	6844      	ldr	r4, [r0, #4]
 80162c0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80162c4:	f105 0110 	add.w	r1, r5, #16
 80162c8:	4668      	mov	r0, sp
 80162ca:	f7fd f829 	bl	8013320 <ucdr_init_buffer>
 80162ce:	4641      	mov	r1, r8
 80162d0:	68e3      	ldr	r3, [r4, #12]
 80162d2:	4668      	mov	r0, sp
 80162d4:	4798      	blx	r3
 80162d6:	4639      	mov	r1, r7
 80162d8:	4604      	mov	r4, r0
 80162da:	480a      	ldr	r0, [pc, #40]	; (8016304 <rmw_take_request+0xb8>)
 80162dc:	f007 feac 	bl	801e038 <put_memory>
 80162e0:	b106      	cbz	r6, 80162e4 <rmw_take_request+0x98>
 80162e2:	7034      	strb	r4, [r6, #0]
 80162e4:	f084 0001 	eor.w	r0, r4, #1
 80162e8:	b2c0      	uxtb	r0, r0
 80162ea:	b009      	add	sp, #36	; 0x24
 80162ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162f0:	2001      	movs	r0, #1
 80162f2:	b009      	add	sp, #36	; 0x24
 80162f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162f8:	200c      	movs	r0, #12
 80162fa:	b009      	add	sp, #36	; 0x24
 80162fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016300:	08025ac4 	.word	0x08025ac4
 8016304:	20016dac 	.word	0x20016dac

08016308 <rmw_send_response>:
 8016308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801630a:	4605      	mov	r5, r0
 801630c:	6800      	ldr	r0, [r0, #0]
 801630e:	b091      	sub	sp, #68	; 0x44
 8016310:	460c      	mov	r4, r1
 8016312:	4616      	mov	r6, r2
 8016314:	b128      	cbz	r0, 8016322 <rmw_send_response+0x1a>
 8016316:	4b29      	ldr	r3, [pc, #164]	; (80163bc <rmw_send_response+0xb4>)
 8016318:	6819      	ldr	r1, [r3, #0]
 801631a:	f7e9 ff91 	bl	8000240 <strcmp>
 801631e:	2800      	cmp	r0, #0
 8016320:	d141      	bne.n	80163a6 <rmw_send_response+0x9e>
 8016322:	686d      	ldr	r5, [r5, #4]
 8016324:	68a1      	ldr	r1, [r4, #8]
 8016326:	6860      	ldr	r0, [r4, #4]
 8016328:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801632a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801632e:	9307      	str	r3, [sp, #28]
 8016330:	4623      	mov	r3, r4
 8016332:	9206      	str	r2, [sp, #24]
 8016334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016338:	789b      	ldrb	r3, [r3, #2]
 801633a:	f88d 2017 	strb.w	r2, [sp, #23]
 801633e:	f88d 3016 	strb.w	r3, [sp, #22]
 8016342:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016346:	68e2      	ldr	r2, [r4, #12]
 8016348:	f8ad 3014 	strh.w	r3, [sp, #20]
 801634c:	ab02      	add	r3, sp, #8
 801634e:	696c      	ldr	r4, [r5, #20]
 8016350:	c307      	stmia	r3!, {r0, r1, r2}
 8016352:	68e3      	ldr	r3, [r4, #12]
 8016354:	4798      	blx	r3
 8016356:	6844      	ldr	r4, [r0, #4]
 8016358:	4630      	mov	r0, r6
 801635a:	6923      	ldr	r3, [r4, #16]
 801635c:	4798      	blx	r3
 801635e:	f100 0318 	add.w	r3, r0, #24
 8016362:	6938      	ldr	r0, [r7, #16]
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	ab08      	add	r3, sp, #32
 8016368:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801636c:	692a      	ldr	r2, [r5, #16]
 801636e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8016370:	f003 fe44 	bl	8019ffc <uxr_prepare_output_stream>
 8016374:	b910      	cbnz	r0, 801637c <rmw_send_response+0x74>
 8016376:	2001      	movs	r0, #1
 8016378:	b011      	add	sp, #68	; 0x44
 801637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801637c:	a902      	add	r1, sp, #8
 801637e:	a808      	add	r0, sp, #32
 8016380:	f004 ffa8 	bl	801b2d4 <uxr_serialize_SampleIdentity>
 8016384:	68a3      	ldr	r3, [r4, #8]
 8016386:	a908      	add	r1, sp, #32
 8016388:	4630      	mov	r0, r6
 801638a:	4798      	blx	r3
 801638c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8016390:	6938      	ldr	r0, [r7, #16]
 8016392:	2b01      	cmp	r3, #1
 8016394:	d00a      	beq.n	80163ac <rmw_send_response+0xa4>
 8016396:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8016398:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801639c:	f002 fbb4 	bl	8018b08 <uxr_run_session_until_confirm_delivery>
 80163a0:	2000      	movs	r0, #0
 80163a2:	b011      	add	sp, #68	; 0x44
 80163a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163a6:	200c      	movs	r0, #12
 80163a8:	b011      	add	sp, #68	; 0x44
 80163aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80163b0:	f001 fff0 	bl	8018394 <uxr_flash_output_streams>
 80163b4:	2000      	movs	r0, #0
 80163b6:	b011      	add	sp, #68	; 0x44
 80163b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163ba:	bf00      	nop
 80163bc:	08025ac4 	.word	0x08025ac4

080163c0 <rmw_take_response>:
 80163c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c4:	4604      	mov	r4, r0
 80163c6:	6800      	ldr	r0, [r0, #0]
 80163c8:	b088      	sub	sp, #32
 80163ca:	460f      	mov	r7, r1
 80163cc:	4690      	mov	r8, r2
 80163ce:	461d      	mov	r5, r3
 80163d0:	b120      	cbz	r0, 80163dc <rmw_take_response+0x1c>
 80163d2:	4b1d      	ldr	r3, [pc, #116]	; (8016448 <rmw_take_response+0x88>)
 80163d4:	6819      	ldr	r1, [r3, #0]
 80163d6:	f7e9 ff33 	bl	8000240 <strcmp>
 80163da:	bb68      	cbnz	r0, 8016438 <rmw_take_response+0x78>
 80163dc:	b10d      	cbz	r5, 80163e2 <rmw_take_response+0x22>
 80163de:	2300      	movs	r3, #0
 80163e0:	702b      	strb	r3, [r5, #0]
 80163e2:	6864      	ldr	r4, [r4, #4]
 80163e4:	f000 fdb8 	bl	8016f58 <rmw_uxrce_clean_expired_static_input_buffer>
 80163e8:	4620      	mov	r0, r4
 80163ea:	f000 fd8b 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 80163ee:	4606      	mov	r6, r0
 80163f0:	b330      	cbz	r0, 8016440 <rmw_take_response+0x80>
 80163f2:	6963      	ldr	r3, [r4, #20]
 80163f4:	6884      	ldr	r4, [r0, #8]
 80163f6:	68db      	ldr	r3, [r3, #12]
 80163f8:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80163fc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016400:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8016404:	4798      	blx	r3
 8016406:	6847      	ldr	r7, [r0, #4]
 8016408:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801640c:	f104 0110 	add.w	r1, r4, #16
 8016410:	4668      	mov	r0, sp
 8016412:	f7fc ff85 	bl	8013320 <ucdr_init_buffer>
 8016416:	4641      	mov	r1, r8
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	4668      	mov	r0, sp
 801641c:	4798      	blx	r3
 801641e:	4631      	mov	r1, r6
 8016420:	4604      	mov	r4, r0
 8016422:	480a      	ldr	r0, [pc, #40]	; (801644c <rmw_take_response+0x8c>)
 8016424:	f007 fe08 	bl	801e038 <put_memory>
 8016428:	b105      	cbz	r5, 801642c <rmw_take_response+0x6c>
 801642a:	702c      	strb	r4, [r5, #0]
 801642c:	f084 0001 	eor.w	r0, r4, #1
 8016430:	b2c0      	uxtb	r0, r0
 8016432:	b008      	add	sp, #32
 8016434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016438:	200c      	movs	r0, #12
 801643a:	b008      	add	sp, #32
 801643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016440:	2001      	movs	r0, #1
 8016442:	b008      	add	sp, #32
 8016444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016448:	08025ac4 	.word	0x08025ac4
 801644c:	20016dac 	.word	0x20016dac

08016450 <rmw_create_service>:
 8016450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016454:	b091      	sub	sp, #68	; 0x44
 8016456:	2900      	cmp	r1, #0
 8016458:	f000 80bb 	beq.w	80165d2 <rmw_create_service+0x182>
 801645c:	4606      	mov	r6, r0
 801645e:	2800      	cmp	r0, #0
 8016460:	f000 80b7 	beq.w	80165d2 <rmw_create_service+0x182>
 8016464:	4614      	mov	r4, r2
 8016466:	6800      	ldr	r0, [r0, #0]
 8016468:	4689      	mov	r9, r1
 801646a:	461d      	mov	r5, r3
 801646c:	f000 ff04 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8016470:	2c00      	cmp	r4, #0
 8016472:	f000 80ae 	beq.w	80165d2 <rmw_create_service+0x182>
 8016476:	f080 0001 	eor.w	r0, r0, #1
 801647a:	b2c0      	uxtb	r0, r0
 801647c:	2800      	cmp	r0, #0
 801647e:	f040 80a8 	bne.w	80165d2 <rmw_create_service+0x182>
 8016482:	7823      	ldrb	r3, [r4, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	f000 80a4 	beq.w	80165d2 <rmw_create_service+0x182>
 801648a:	2d00      	cmp	r5, #0
 801648c:	f000 80a1 	beq.w	80165d2 <rmw_create_service+0x182>
 8016490:	4856      	ldr	r0, [pc, #344]	; (80165ec <rmw_create_service+0x19c>)
 8016492:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8016496:	f007 fdbf 	bl	801e018 <get_memory>
 801649a:	4606      	mov	r6, r0
 801649c:	2800      	cmp	r0, #0
 801649e:	f000 8099 	beq.w	80165d4 <rmw_create_service+0x184>
 80164a2:	6887      	ldr	r7, [r0, #8]
 80164a4:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 80164a8:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80164ac:	f007 fe1c 	bl	801e0e8 <rmw_get_implementation_identifier>
 80164b0:	67f8      	str	r0, [r7, #124]	; 0x7c
 80164b2:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80164b6:	4620      	mov	r0, r4
 80164b8:	f7e9 ff22 	bl	8000300 <strlen>
 80164bc:	1c42      	adds	r2, r0, #1
 80164be:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 80164c2:	2a3c      	cmp	r2, #60	; 0x3c
 80164c4:	f200 808a 	bhi.w	80165dc <rmw_create_service+0x18c>
 80164c8:	4621      	mov	r1, r4
 80164ca:	4650      	mov	r0, sl
 80164cc:	f00a fd5f 	bl	8020f8e <memcpy>
 80164d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80164d4:	4629      	mov	r1, r5
 80164d6:	2250      	movs	r2, #80	; 0x50
 80164d8:	f107 0020 	add.w	r0, r7, #32
 80164dc:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 80164e0:	677b      	str	r3, [r7, #116]	; 0x74
 80164e2:	f00a fd54 	bl	8020f8e <memcpy>
 80164e6:	4648      	mov	r0, r9
 80164e8:	4941      	ldr	r1, [pc, #260]	; (80165f0 <rmw_create_service+0x1a0>)
 80164ea:	f000 fedf 	bl	80172ac <get_service_typesupport_handle>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d074      	beq.n	80165dc <rmw_create_service+0x18c>
 80164f2:	6843      	ldr	r3, [r0, #4]
 80164f4:	617b      	str	r3, [r7, #20]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d070      	beq.n	80165dc <rmw_create_service+0x18c>
 80164fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80164fe:	2108      	movs	r1, #8
 8016500:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80165f8 <rmw_create_service+0x1a8>
 8016504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016508:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80165fc <rmw_create_service+0x1ac>
 801650c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8016510:	1c42      	adds	r2, r0, #1
 8016512:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8016516:	f001 fcbd 	bl	8017e94 <uxr_object_id>
 801651a:	2364      	movs	r3, #100	; 0x64
 801651c:	6138      	str	r0, [r7, #16]
 801651e:	4652      	mov	r2, sl
 8016520:	4649      	mov	r1, r9
 8016522:	6978      	ldr	r0, [r7, #20]
 8016524:	f000 fdfc 	bl	8017120 <generate_service_types>
 8016528:	2800      	cmp	r0, #0
 801652a:	d057      	beq.n	80165dc <rmw_create_service+0x18c>
 801652c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8016600 <rmw_create_service+0x1b0>
 8016530:	233c      	movs	r3, #60	; 0x3c
 8016532:	4a30      	ldr	r2, [pc, #192]	; (80165f4 <rmw_create_service+0x1a4>)
 8016534:	4620      	mov	r0, r4
 8016536:	4659      	mov	r1, fp
 8016538:	f000 fdc0 	bl	80170bc <generate_service_topics>
 801653c:	2800      	cmp	r0, #0
 801653e:	d04d      	beq.n	80165dc <rmw_create_service+0x18c>
 8016540:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016544:	a80c      	add	r0, sp, #48	; 0x30
 8016546:	4629      	mov	r1, r5
 8016548:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801654c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016550:	f000 fd9c 	bl	801708c <convert_qos_profile>
 8016554:	4a27      	ldr	r2, [pc, #156]	; (80165f4 <rmw_create_service+0x1a4>)
 8016556:	a80c      	add	r0, sp, #48	; 0x30
 8016558:	9400      	str	r4, [sp, #0]
 801655a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801655c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016560:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8016564:	c803      	ldmia	r0, {r0, r1}
 8016566:	9a08      	ldr	r2, [sp, #32]
 8016568:	9005      	str	r0, [sp, #20]
 801656a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801656e:	2306      	movs	r3, #6
 8016570:	f8ad 1018 	strh.w	r1, [sp, #24]
 8016574:	9307      	str	r3, [sp, #28]
 8016576:	6811      	ldr	r1, [r2, #0]
 8016578:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801657c:	693a      	ldr	r2, [r7, #16]
 801657e:	f001 fb91 	bl	8017ca4 <uxr_buffer_create_replier_bin>
 8016582:	4602      	mov	r2, r0
 8016584:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016588:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801658c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016590:	f000 fd60 	bl	8017054 <run_xrce_session>
 8016594:	b310      	cbz	r0, 80165dc <rmw_create_service+0x18c>
 8016596:	7a2b      	ldrb	r3, [r5, #8]
 8016598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801659c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80165a0:	2b02      	cmp	r3, #2
 80165a2:	920e      	str	r2, [sp, #56]	; 0x38
 80165a4:	f04f 0200 	mov.w	r2, #0
 80165a8:	920f      	str	r2, [sp, #60]	; 0x3c
 80165aa:	bf0c      	ite	eq
 80165ac:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 80165b0:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 80165b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80165ba:	ab0e      	add	r3, sp, #56	; 0x38
 80165bc:	673a      	str	r2, [r7, #112]	; 0x70
 80165be:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 80165c2:	9300      	str	r3, [sp, #0]
 80165c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165c6:	6811      	ldr	r1, [r2, #0]
 80165c8:	693a      	ldr	r2, [r7, #16]
 80165ca:	f001 fc93 	bl	8017ef4 <uxr_buffer_request_data>
 80165ce:	8338      	strh	r0, [r7, #24]
 80165d0:	e000      	b.n	80165d4 <rmw_create_service+0x184>
 80165d2:	2600      	movs	r6, #0
 80165d4:	4630      	mov	r0, r6
 80165d6:	b011      	add	sp, #68	; 0x44
 80165d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165dc:	4630      	mov	r0, r6
 80165de:	2600      	movs	r6, #0
 80165e0:	f000 fbfe 	bl	8016de0 <rmw_uxrce_fini_service_memory>
 80165e4:	4630      	mov	r0, r6
 80165e6:	b011      	add	sp, #68	; 0x44
 80165e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ec:	20016d8c 	.word	0x20016d8c
 80165f0:	0802471c 	.word	0x0802471c
 80165f4:	200123fc 	.word	0x200123fc
 80165f8:	20012438 	.word	0x20012438
 80165fc:	20012398 	.word	0x20012398
 8016600:	2001235c 	.word	0x2001235c

08016604 <rmw_destroy_service>:
 8016604:	b570      	push	{r4, r5, r6, lr}
 8016606:	b128      	cbz	r0, 8016614 <rmw_destroy_service+0x10>
 8016608:	4604      	mov	r4, r0
 801660a:	6800      	ldr	r0, [r0, #0]
 801660c:	460d      	mov	r5, r1
 801660e:	f000 fe33 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8016612:	b910      	cbnz	r0, 801661a <rmw_destroy_service+0x16>
 8016614:	2401      	movs	r4, #1
 8016616:	4620      	mov	r0, r4
 8016618:	bd70      	pop	{r4, r5, r6, pc}
 801661a:	6863      	ldr	r3, [r4, #4]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d0f9      	beq.n	8016614 <rmw_destroy_service+0x10>
 8016620:	2d00      	cmp	r5, #0
 8016622:	d0f7      	beq.n	8016614 <rmw_destroy_service+0x10>
 8016624:	6828      	ldr	r0, [r5, #0]
 8016626:	f000 fe27 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 801662a:	2800      	cmp	r0, #0
 801662c:	d0f2      	beq.n	8016614 <rmw_destroy_service+0x10>
 801662e:	686e      	ldr	r6, [r5, #4]
 8016630:	2e00      	cmp	r6, #0
 8016632:	d0ef      	beq.n	8016614 <rmw_destroy_service+0x10>
 8016634:	6864      	ldr	r4, [r4, #4]
 8016636:	6932      	ldr	r2, [r6, #16]
 8016638:	6920      	ldr	r0, [r4, #16]
 801663a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801663e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016642:	6819      	ldr	r1, [r3, #0]
 8016644:	f001 fc90 	bl	8017f68 <uxr_buffer_cancel_data>
 8016648:	4602      	mov	r2, r0
 801664a:	6920      	ldr	r0, [r4, #16]
 801664c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016650:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016654:	f000 fcfe 	bl	8017054 <run_xrce_session>
 8016658:	6920      	ldr	r0, [r4, #16]
 801665a:	6932      	ldr	r2, [r6, #16]
 801665c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016660:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016664:	6819      	ldr	r1, [r3, #0]
 8016666:	f001 f91b 	bl	80178a0 <uxr_buffer_delete_entity>
 801666a:	4602      	mov	r2, r0
 801666c:	6920      	ldr	r0, [r4, #16]
 801666e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016672:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016676:	f000 fced 	bl	8017054 <run_xrce_session>
 801667a:	4603      	mov	r3, r0
 801667c:	4628      	mov	r0, r5
 801667e:	2b00      	cmp	r3, #0
 8016680:	bf14      	ite	ne
 8016682:	2400      	movne	r4, #0
 8016684:	2402      	moveq	r4, #2
 8016686:	f000 fbab 	bl	8016de0 <rmw_uxrce_fini_service_memory>
 801668a:	e7c4      	b.n	8016616 <rmw_destroy_service+0x12>

0801668c <rmw_service_response_publisher_get_actual_qos>:
 801668c:	b181      	cbz	r1, 80166b0 <rmw_service_response_publisher_get_actual_qos+0x24>
 801668e:	4603      	mov	r3, r0
 8016690:	b510      	push	{r4, lr}
 8016692:	fab0 f480 	clz	r4, r0
 8016696:	0964      	lsrs	r4, r4, #5
 8016698:	b140      	cbz	r0, 80166ac <rmw_service_response_publisher_get_actual_qos+0x20>
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	4608      	mov	r0, r1
 801669e:	2250      	movs	r2, #80	; 0x50
 80166a0:	f103 0120 	add.w	r1, r3, #32
 80166a4:	f00a fc73 	bl	8020f8e <memcpy>
 80166a8:	4620      	mov	r0, r4
 80166aa:	bd10      	pop	{r4, pc}
 80166ac:	200b      	movs	r0, #11
 80166ae:	bd10      	pop	{r4, pc}
 80166b0:	200b      	movs	r0, #11
 80166b2:	4770      	bx	lr

080166b4 <rmw_service_request_subscription_get_actual_qos>:
 80166b4:	b178      	cbz	r0, 80166d6 <rmw_service_request_subscription_get_actual_qos+0x22>
 80166b6:	b510      	push	{r4, lr}
 80166b8:	fab1 f481 	clz	r4, r1
 80166bc:	0964      	lsrs	r4, r4, #5
 80166be:	b141      	cbz	r1, 80166d2 <rmw_service_request_subscription_get_actual_qos+0x1e>
 80166c0:	6843      	ldr	r3, [r0, #4]
 80166c2:	2250      	movs	r2, #80	; 0x50
 80166c4:	4608      	mov	r0, r1
 80166c6:	f103 0120 	add.w	r1, r3, #32
 80166ca:	f00a fc60 	bl	8020f8e <memcpy>
 80166ce:	4620      	mov	r0, r4
 80166d0:	bd10      	pop	{r4, pc}
 80166d2:	200b      	movs	r0, #11
 80166d4:	bd10      	pop	{r4, pc}
 80166d6:	200b      	movs	r0, #11
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop

080166dc <rmw_create_subscription>:
 80166dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166e0:	b08d      	sub	sp, #52	; 0x34
 80166e2:	2900      	cmp	r1, #0
 80166e4:	f000 80d8 	beq.w	8016898 <rmw_create_subscription+0x1bc>
 80166e8:	4604      	mov	r4, r0
 80166ea:	2800      	cmp	r0, #0
 80166ec:	f000 80d4 	beq.w	8016898 <rmw_create_subscription+0x1bc>
 80166f0:	6800      	ldr	r0, [r0, #0]
 80166f2:	460e      	mov	r6, r1
 80166f4:	4615      	mov	r5, r2
 80166f6:	461f      	mov	r7, r3
 80166f8:	f000 fdbe 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 80166fc:	f080 0001 	eor.w	r0, r0, #1
 8016700:	b2c0      	uxtb	r0, r0
 8016702:	2800      	cmp	r0, #0
 8016704:	f040 80c8 	bne.w	8016898 <rmw_create_subscription+0x1bc>
 8016708:	2d00      	cmp	r5, #0
 801670a:	f000 80c5 	beq.w	8016898 <rmw_create_subscription+0x1bc>
 801670e:	782b      	ldrb	r3, [r5, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	f000 80c1 	beq.w	8016898 <rmw_create_subscription+0x1bc>
 8016716:	2f00      	cmp	r7, #0
 8016718:	f000 80be 	beq.w	8016898 <rmw_create_subscription+0x1bc>
 801671c:	4867      	ldr	r0, [pc, #412]	; (80168bc <rmw_create_subscription+0x1e0>)
 801671e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016722:	f007 fc79 	bl	801e018 <get_memory>
 8016726:	4604      	mov	r4, r0
 8016728:	2800      	cmp	r0, #0
 801672a:	f000 80b6 	beq.w	801689a <rmw_create_subscription+0x1be>
 801672e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016732:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8016736:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 801673a:	f007 fcd5 	bl	801e0e8 <rmw_get_implementation_identifier>
 801673e:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8016742:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8016746:	4628      	mov	r0, r5
 8016748:	f7e9 fdda 	bl	8000300 <strlen>
 801674c:	3001      	adds	r0, #1
 801674e:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8016752:	283c      	cmp	r0, #60	; 0x3c
 8016754:	f200 80a5 	bhi.w	80168a2 <rmw_create_subscription+0x1c6>
 8016758:	462b      	mov	r3, r5
 801675a:	4a59      	ldr	r2, [pc, #356]	; (80168c0 <rmw_create_subscription+0x1e4>)
 801675c:	213c      	movs	r1, #60	; 0x3c
 801675e:	4650      	mov	r0, sl
 8016760:	f00a f9b8 	bl	8020ad4 <sniprintf>
 8016764:	4639      	mov	r1, r7
 8016766:	2250      	movs	r2, #80	; 0x50
 8016768:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801676c:	f8c8 9020 	str.w	r9, [r8, #32]
 8016770:	f00a fc0d 	bl	8020f8e <memcpy>
 8016774:	4630      	mov	r0, r6
 8016776:	4953      	ldr	r1, [pc, #332]	; (80168c4 <rmw_create_subscription+0x1e8>)
 8016778:	f000 fd8c 	bl	8017294 <get_message_typesupport_handle>
 801677c:	2800      	cmp	r0, #0
 801677e:	f000 8090 	beq.w	80168a2 <rmw_create_subscription+0x1c6>
 8016782:	6842      	ldr	r2, [r0, #4]
 8016784:	f8c8 2018 	str.w	r2, [r8, #24]
 8016788:	2a00      	cmp	r2, #0
 801678a:	f000 808a 	beq.w	80168a2 <rmw_create_subscription+0x1c6>
 801678e:	4629      	mov	r1, r5
 8016790:	463b      	mov	r3, r7
 8016792:	4648      	mov	r0, r9
 8016794:	f007 fcd8 	bl	801e148 <create_topic>
 8016798:	f8c8 001c 	str.w	r0, [r8, #28]
 801679c:	2800      	cmp	r0, #0
 801679e:	f000 8085 	beq.w	80168ac <rmw_create_subscription+0x1d0>
 80167a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167a6:	2104      	movs	r1, #4
 80167a8:	2506      	movs	r5, #6
 80167aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80167ae:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80167b2:	1c42      	adds	r2, r0, #1
 80167b4:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80167b8:	f001 fb6c 	bl	8017e94 <uxr_object_id>
 80167bc:	f8c8 0010 	str.w	r0, [r8, #16]
 80167c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80167c4:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80167c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80167cc:	9500      	str	r5, [sp, #0]
 80167ce:	6819      	ldr	r1, [r3, #0]
 80167d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80167d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80167d8:	f001 f946 	bl	8017a68 <uxr_buffer_create_subscriber_bin>
 80167dc:	4602      	mov	r2, r0
 80167de:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80167e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80167e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80167ea:	f000 fc33 	bl	8017054 <run_xrce_session>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d057      	beq.n	80168a2 <rmw_create_subscription+0x1c6>
 80167f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167f6:	4629      	mov	r1, r5
 80167f8:	ae08      	add	r6, sp, #32
 80167fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80167fe:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8016802:	1c42      	adds	r2, r0, #1
 8016804:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8016808:	f001 fb44 	bl	8017e94 <uxr_object_id>
 801680c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016810:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8016814:	4639      	mov	r1, r7
 8016816:	f8c8 0014 	str.w	r0, [r8, #20]
 801681a:	4630      	mov	r0, r6
 801681c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8016820:	9305      	str	r3, [sp, #20]
 8016822:	f000 fc33 	bl	801708c <convert_qos_profile>
 8016826:	9503      	str	r5, [sp, #12]
 8016828:	9b05      	ldr	r3, [sp, #20]
 801682a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801682e:	9001      	str	r0, [sp, #4]
 8016830:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8016834:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016838:	691b      	ldr	r3, [r3, #16]
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	f8db 1000 	ldr.w	r1, [fp]
 8016840:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8016844:	f001 f9b6 	bl	8017bb4 <uxr_buffer_create_datareader_bin>
 8016848:	4602      	mov	r2, r0
 801684a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801684e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016852:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016856:	f000 fbfd 	bl	8017054 <run_xrce_session>
 801685a:	b310      	cbz	r0, 80168a2 <rmw_create_subscription+0x1c6>
 801685c:	7a3b      	ldrb	r3, [r7, #8]
 801685e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016862:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016866:	2b02      	cmp	r3, #2
 8016868:	920a      	str	r2, [sp, #40]	; 0x28
 801686a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801686e:	f04f 0200 	mov.w	r2, #0
 8016872:	bf08      	it	eq
 8016874:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8016878:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801687c:	bf18      	it	ne
 801687e:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8016882:	920b      	str	r2, [sp, #44]	; 0x2c
 8016884:	9307      	str	r3, [sp, #28]
 8016886:	ab0a      	add	r3, sp, #40	; 0x28
 8016888:	9300      	str	r3, [sp, #0]
 801688a:	9b07      	ldr	r3, [sp, #28]
 801688c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016890:	6809      	ldr	r1, [r1, #0]
 8016892:	f001 fb2f 	bl	8017ef4 <uxr_buffer_request_data>
 8016896:	e000      	b.n	801689a <rmw_create_subscription+0x1be>
 8016898:	2400      	movs	r4, #0
 801689a:	4620      	mov	r0, r4
 801689c:	b00d      	add	sp, #52	; 0x34
 801689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168a2:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80168a6:	b108      	cbz	r0, 80168ac <rmw_create_subscription+0x1d0>
 80168a8:	f000 fac6 	bl	8016e38 <rmw_uxrce_fini_topic_memory>
 80168ac:	4620      	mov	r0, r4
 80168ae:	2400      	movs	r4, #0
 80168b0:	f000 fa80 	bl	8016db4 <rmw_uxrce_fini_subscription_memory>
 80168b4:	4620      	mov	r0, r4
 80168b6:	b00d      	add	sp, #52	; 0x34
 80168b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168bc:	20016dbc 	.word	0x20016dbc
 80168c0:	08025464 	.word	0x08025464
 80168c4:	0802471c 	.word	0x0802471c

080168c8 <rmw_subscription_get_actual_qos>:
 80168c8:	b178      	cbz	r0, 80168ea <rmw_subscription_get_actual_qos+0x22>
 80168ca:	b510      	push	{r4, lr}
 80168cc:	fab1 f481 	clz	r4, r1
 80168d0:	0964      	lsrs	r4, r4, #5
 80168d2:	b141      	cbz	r1, 80168e6 <rmw_subscription_get_actual_qos+0x1e>
 80168d4:	6843      	ldr	r3, [r0, #4]
 80168d6:	2250      	movs	r2, #80	; 0x50
 80168d8:	4608      	mov	r0, r1
 80168da:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80168de:	f00a fb56 	bl	8020f8e <memcpy>
 80168e2:	4620      	mov	r0, r4
 80168e4:	bd10      	pop	{r4, pc}
 80168e6:	200b      	movs	r0, #11
 80168e8:	bd10      	pop	{r4, pc}
 80168ea:	200b      	movs	r0, #11
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop

080168f0 <rmw_destroy_subscription>:
 80168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f4:	b128      	cbz	r0, 8016902 <rmw_destroy_subscription+0x12>
 80168f6:	4604      	mov	r4, r0
 80168f8:	6800      	ldr	r0, [r0, #0]
 80168fa:	460d      	mov	r5, r1
 80168fc:	f000 fcbc 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8016900:	b918      	cbnz	r0, 801690a <rmw_destroy_subscription+0x1a>
 8016902:	2401      	movs	r4, #1
 8016904:	4620      	mov	r0, r4
 8016906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801690a:	6863      	ldr	r3, [r4, #4]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d0f8      	beq.n	8016902 <rmw_destroy_subscription+0x12>
 8016910:	fab5 f485 	clz	r4, r5
 8016914:	0964      	lsrs	r4, r4, #5
 8016916:	2d00      	cmp	r5, #0
 8016918:	d0f3      	beq.n	8016902 <rmw_destroy_subscription+0x12>
 801691a:	6828      	ldr	r0, [r5, #0]
 801691c:	f000 fcac 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 8016920:	2800      	cmp	r0, #0
 8016922:	d0ee      	beq.n	8016902 <rmw_destroy_subscription+0x12>
 8016924:	686e      	ldr	r6, [r5, #4]
 8016926:	2e00      	cmp	r6, #0
 8016928:	d0eb      	beq.n	8016902 <rmw_destroy_subscription+0x12>
 801692a:	6a37      	ldr	r7, [r6, #32]
 801692c:	6972      	ldr	r2, [r6, #20]
 801692e:	6938      	ldr	r0, [r7, #16]
 8016930:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016934:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016938:	6819      	ldr	r1, [r3, #0]
 801693a:	f001 fb15 	bl	8017f68 <uxr_buffer_cancel_data>
 801693e:	4602      	mov	r2, r0
 8016940:	6938      	ldr	r0, [r7, #16]
 8016942:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016946:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801694a:	f000 fb83 	bl	8017054 <run_xrce_session>
 801694e:	69f0      	ldr	r0, [r6, #28]
 8016950:	f007 fc4a 	bl	801e1e8 <destroy_topic>
 8016954:	6a33      	ldr	r3, [r6, #32]
 8016956:	6972      	ldr	r2, [r6, #20]
 8016958:	6918      	ldr	r0, [r3, #16]
 801695a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801695e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016962:	6819      	ldr	r1, [r3, #0]
 8016964:	f000 ff9c 	bl	80178a0 <uxr_buffer_delete_entity>
 8016968:	6a33      	ldr	r3, [r6, #32]
 801696a:	4680      	mov	r8, r0
 801696c:	6932      	ldr	r2, [r6, #16]
 801696e:	6918      	ldr	r0, [r3, #16]
 8016970:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016974:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016978:	6819      	ldr	r1, [r3, #0]
 801697a:	f000 ff91 	bl	80178a0 <uxr_buffer_delete_entity>
 801697e:	4606      	mov	r6, r0
 8016980:	6938      	ldr	r0, [r7, #16]
 8016982:	4642      	mov	r2, r8
 8016984:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016988:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801698c:	f000 fb62 	bl	8017054 <run_xrce_session>
 8016990:	693f      	ldr	r7, [r7, #16]
 8016992:	4632      	mov	r2, r6
 8016994:	4606      	mov	r6, r0
 8016996:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801699a:	4638      	mov	r0, r7
 801699c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80169a0:	f000 fb58 	bl	8017054 <run_xrce_session>
 80169a4:	b126      	cbz	r6, 80169b0 <rmw_destroy_subscription+0xc0>
 80169a6:	b118      	cbz	r0, 80169b0 <rmw_destroy_subscription+0xc0>
 80169a8:	4628      	mov	r0, r5
 80169aa:	f000 fa03 	bl	8016db4 <rmw_uxrce_fini_subscription_memory>
 80169ae:	e7a9      	b.n	8016904 <rmw_destroy_subscription+0x14>
 80169b0:	2402      	movs	r4, #2
 80169b2:	e7f9      	b.n	80169a8 <rmw_destroy_subscription+0xb8>

080169b4 <rmw_take_with_info>:
 80169b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169b6:	4604      	mov	r4, r0
 80169b8:	6800      	ldr	r0, [r0, #0]
 80169ba:	b089      	sub	sp, #36	; 0x24
 80169bc:	460f      	mov	r7, r1
 80169be:	4615      	mov	r5, r2
 80169c0:	b128      	cbz	r0, 80169ce <rmw_take_with_info+0x1a>
 80169c2:	4b24      	ldr	r3, [pc, #144]	; (8016a54 <rmw_take_with_info+0xa0>)
 80169c4:	6819      	ldr	r1, [r3, #0]
 80169c6:	f7e9 fc3b 	bl	8000240 <strcmp>
 80169ca:	2800      	cmp	r0, #0
 80169cc:	d13e      	bne.n	8016a4c <rmw_take_with_info+0x98>
 80169ce:	b305      	cbz	r5, 8016a12 <rmw_take_with_info+0x5e>
 80169d0:	2300      	movs	r3, #0
 80169d2:	6864      	ldr	r4, [r4, #4]
 80169d4:	702b      	strb	r3, [r5, #0]
 80169d6:	f000 fabf 	bl	8016f58 <rmw_uxrce_clean_expired_static_input_buffer>
 80169da:	4620      	mov	r0, r4
 80169dc:	f000 fa92 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 80169e0:	4606      	mov	r6, r0
 80169e2:	b1f0      	cbz	r0, 8016a22 <rmw_take_with_info+0x6e>
 80169e4:	6881      	ldr	r1, [r0, #8]
 80169e6:	4668      	mov	r0, sp
 80169e8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80169ec:	3110      	adds	r1, #16
 80169ee:	f7fc fc97 	bl	8013320 <ucdr_init_buffer>
 80169f2:	69a3      	ldr	r3, [r4, #24]
 80169f4:	4639      	mov	r1, r7
 80169f6:	4668      	mov	r0, sp
 80169f8:	68db      	ldr	r3, [r3, #12]
 80169fa:	4798      	blx	r3
 80169fc:	4604      	mov	r4, r0
 80169fe:	4631      	mov	r1, r6
 8016a00:	4815      	ldr	r0, [pc, #84]	; (8016a58 <rmw_take_with_info+0xa4>)
 8016a02:	f007 fb19 	bl	801e038 <put_memory>
 8016a06:	702c      	strb	r4, [r5, #0]
 8016a08:	f084 0001 	eor.w	r0, r4, #1
 8016a0c:	b2c0      	uxtb	r0, r0
 8016a0e:	b009      	add	sp, #36	; 0x24
 8016a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a12:	6864      	ldr	r4, [r4, #4]
 8016a14:	f000 faa0 	bl	8016f58 <rmw_uxrce_clean_expired_static_input_buffer>
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f000 fa73 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a1e:	4605      	mov	r5, r0
 8016a20:	b910      	cbnz	r0, 8016a28 <rmw_take_with_info+0x74>
 8016a22:	2001      	movs	r0, #1
 8016a24:	b009      	add	sp, #36	; 0x24
 8016a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a28:	68a9      	ldr	r1, [r5, #8]
 8016a2a:	4668      	mov	r0, sp
 8016a2c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016a30:	3110      	adds	r1, #16
 8016a32:	f7fc fc75 	bl	8013320 <ucdr_init_buffer>
 8016a36:	69a3      	ldr	r3, [r4, #24]
 8016a38:	4639      	mov	r1, r7
 8016a3a:	4668      	mov	r0, sp
 8016a3c:	68db      	ldr	r3, [r3, #12]
 8016a3e:	4798      	blx	r3
 8016a40:	4629      	mov	r1, r5
 8016a42:	4604      	mov	r4, r0
 8016a44:	4804      	ldr	r0, [pc, #16]	; (8016a58 <rmw_take_with_info+0xa4>)
 8016a46:	f007 faf7 	bl	801e038 <put_memory>
 8016a4a:	e7dd      	b.n	8016a08 <rmw_take_with_info+0x54>
 8016a4c:	200c      	movs	r0, #12
 8016a4e:	b009      	add	sp, #36	; 0x24
 8016a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a52:	bf00      	nop
 8016a54:	08025ac4 	.word	0x08025ac4
 8016a58:	20016dac 	.word	0x20016dac

08016a5c <rmw_uxrce_transport_init>:
 8016a5c:	b508      	push	{r3, lr}
 8016a5e:	b108      	cbz	r0, 8016a64 <rmw_uxrce_transport_init+0x8>
 8016a60:	f100 0210 	add.w	r2, r0, #16
 8016a64:	b139      	cbz	r1, 8016a76 <rmw_uxrce_transport_init+0x1a>
 8016a66:	6949      	ldr	r1, [r1, #20]
 8016a68:	4610      	mov	r0, r2
 8016a6a:	f001 f9db 	bl	8017e24 <uxr_init_custom_transport>
 8016a6e:	f080 0001 	eor.w	r0, r0, #1
 8016a72:	b2c0      	uxtb	r0, r0
 8016a74:	bd08      	pop	{r3, pc}
 8016a76:	4b04      	ldr	r3, [pc, #16]	; (8016a88 <rmw_uxrce_transport_init+0x2c>)
 8016a78:	4610      	mov	r0, r2
 8016a7a:	6859      	ldr	r1, [r3, #4]
 8016a7c:	f001 f9d2 	bl	8017e24 <uxr_init_custom_transport>
 8016a80:	f080 0001 	eor.w	r0, r0, #1
 8016a84:	b2c0      	uxtb	r0, r0
 8016a86:	bd08      	pop	{r3, pc}
 8016a88:	20012304 	.word	0x20012304

08016a8c <rmw_uxrce_init_service_memory>:
 8016a8c:	b1e2      	cbz	r2, 8016ac8 <rmw_uxrce_init_service_memory+0x3c>
 8016a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a92:	7b05      	ldrb	r5, [r0, #12]
 8016a94:	4606      	mov	r6, r0
 8016a96:	b9ad      	cbnz	r5, 8016ac4 <rmw_uxrce_init_service_memory+0x38>
 8016a98:	23c8      	movs	r3, #200	; 0xc8
 8016a9a:	4617      	mov	r7, r2
 8016a9c:	460c      	mov	r4, r1
 8016a9e:	46a8      	mov	r8, r5
 8016aa0:	6083      	str	r3, [r0, #8]
 8016aa2:	f240 1301 	movw	r3, #257	; 0x101
 8016aa6:	e9c0 5500 	strd	r5, r5, [r0]
 8016aaa:	8183      	strh	r3, [r0, #12]
 8016aac:	3501      	adds	r5, #1
 8016aae:	4621      	mov	r1, r4
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f007 fac1 	bl	801e038 <put_memory>
 8016ab6:	42af      	cmp	r7, r5
 8016ab8:	60a4      	str	r4, [r4, #8]
 8016aba:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016abe:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016ac2:	d1f3      	bne.n	8016aac <rmw_uxrce_init_service_memory+0x20>
 8016ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac8:	4770      	bx	lr
 8016aca:	bf00      	nop

08016acc <rmw_uxrce_init_client_memory>:
 8016acc:	b1e2      	cbz	r2, 8016b08 <rmw_uxrce_init_client_memory+0x3c>
 8016ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad2:	7b05      	ldrb	r5, [r0, #12]
 8016ad4:	4606      	mov	r6, r0
 8016ad6:	b9ad      	cbnz	r5, 8016b04 <rmw_uxrce_init_client_memory+0x38>
 8016ad8:	23c8      	movs	r3, #200	; 0xc8
 8016ada:	4617      	mov	r7, r2
 8016adc:	460c      	mov	r4, r1
 8016ade:	46a8      	mov	r8, r5
 8016ae0:	6083      	str	r3, [r0, #8]
 8016ae2:	f240 1301 	movw	r3, #257	; 0x101
 8016ae6:	e9c0 5500 	strd	r5, r5, [r0]
 8016aea:	8183      	strh	r3, [r0, #12]
 8016aec:	3501      	adds	r5, #1
 8016aee:	4621      	mov	r1, r4
 8016af0:	4630      	mov	r0, r6
 8016af2:	f007 faa1 	bl	801e038 <put_memory>
 8016af6:	42af      	cmp	r7, r5
 8016af8:	60a4      	str	r4, [r4, #8]
 8016afa:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016afe:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016b02:	d1f3      	bne.n	8016aec <rmw_uxrce_init_client_memory+0x20>
 8016b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b08:	4770      	bx	lr
 8016b0a:	bf00      	nop

08016b0c <rmw_uxrce_init_publisher_memory>:
 8016b0c:	b1e2      	cbz	r2, 8016b48 <rmw_uxrce_init_publisher_memory+0x3c>
 8016b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b12:	7b05      	ldrb	r5, [r0, #12]
 8016b14:	4606      	mov	r6, r0
 8016b16:	b9ad      	cbnz	r5, 8016b44 <rmw_uxrce_init_publisher_memory+0x38>
 8016b18:	23d8      	movs	r3, #216	; 0xd8
 8016b1a:	4617      	mov	r7, r2
 8016b1c:	460c      	mov	r4, r1
 8016b1e:	46a8      	mov	r8, r5
 8016b20:	6083      	str	r3, [r0, #8]
 8016b22:	f240 1301 	movw	r3, #257	; 0x101
 8016b26:	e9c0 5500 	strd	r5, r5, [r0]
 8016b2a:	8183      	strh	r3, [r0, #12]
 8016b2c:	3501      	adds	r5, #1
 8016b2e:	4621      	mov	r1, r4
 8016b30:	4630      	mov	r0, r6
 8016b32:	f007 fa81 	bl	801e038 <put_memory>
 8016b36:	42af      	cmp	r7, r5
 8016b38:	60a4      	str	r4, [r4, #8]
 8016b3a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016b3e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016b42:	d1f3      	bne.n	8016b2c <rmw_uxrce_init_publisher_memory+0x20>
 8016b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop

08016b4c <rmw_uxrce_init_subscription_memory>:
 8016b4c:	b1e2      	cbz	r2, 8016b88 <rmw_uxrce_init_subscription_memory+0x3c>
 8016b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b52:	7b05      	ldrb	r5, [r0, #12]
 8016b54:	4606      	mov	r6, r0
 8016b56:	b9ad      	cbnz	r5, 8016b84 <rmw_uxrce_init_subscription_memory+0x38>
 8016b58:	23d8      	movs	r3, #216	; 0xd8
 8016b5a:	4617      	mov	r7, r2
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	46a8      	mov	r8, r5
 8016b60:	6083      	str	r3, [r0, #8]
 8016b62:	f240 1301 	movw	r3, #257	; 0x101
 8016b66:	e9c0 5500 	strd	r5, r5, [r0]
 8016b6a:	8183      	strh	r3, [r0, #12]
 8016b6c:	3501      	adds	r5, #1
 8016b6e:	4621      	mov	r1, r4
 8016b70:	4630      	mov	r0, r6
 8016b72:	f007 fa61 	bl	801e038 <put_memory>
 8016b76:	42af      	cmp	r7, r5
 8016b78:	60a4      	str	r4, [r4, #8]
 8016b7a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016b7e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016b82:	d1f3      	bne.n	8016b6c <rmw_uxrce_init_subscription_memory+0x20>
 8016b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop

08016b8c <rmw_uxrce_init_node_memory>:
 8016b8c:	b1e2      	cbz	r2, 8016bc8 <rmw_uxrce_init_node_memory+0x3c>
 8016b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b92:	7b05      	ldrb	r5, [r0, #12]
 8016b94:	4606      	mov	r6, r0
 8016b96:	b9ad      	cbnz	r5, 8016bc4 <rmw_uxrce_init_node_memory+0x38>
 8016b98:	23a4      	movs	r3, #164	; 0xa4
 8016b9a:	4617      	mov	r7, r2
 8016b9c:	460c      	mov	r4, r1
 8016b9e:	46a8      	mov	r8, r5
 8016ba0:	6083      	str	r3, [r0, #8]
 8016ba2:	f240 1301 	movw	r3, #257	; 0x101
 8016ba6:	e9c0 5500 	strd	r5, r5, [r0]
 8016baa:	8183      	strh	r3, [r0, #12]
 8016bac:	3501      	adds	r5, #1
 8016bae:	4621      	mov	r1, r4
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	f007 fa41 	bl	801e038 <put_memory>
 8016bb6:	42af      	cmp	r7, r5
 8016bb8:	60a4      	str	r4, [r4, #8]
 8016bba:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8016bbe:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016bc2:	d1f3      	bne.n	8016bac <rmw_uxrce_init_node_memory+0x20>
 8016bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc8:	4770      	bx	lr
 8016bca:	bf00      	nop

08016bcc <rmw_uxrce_init_session_memory>:
 8016bcc:	b1ea      	cbz	r2, 8016c0a <rmw_uxrce_init_session_memory+0x3e>
 8016bce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bd2:	7b05      	ldrb	r5, [r0, #12]
 8016bd4:	4606      	mov	r6, r0
 8016bd6:	b9b5      	cbnz	r5, 8016c06 <rmw_uxrce_init_session_memory+0x3a>
 8016bd8:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016bdc:	f240 1301 	movw	r3, #257	; 0x101
 8016be0:	4617      	mov	r7, r2
 8016be2:	460c      	mov	r4, r1
 8016be4:	46a9      	mov	r9, r5
 8016be6:	f8c0 8008 	str.w	r8, [r0, #8]
 8016bea:	8183      	strh	r3, [r0, #12]
 8016bec:	e9c0 5500 	strd	r5, r5, [r0]
 8016bf0:	3501      	adds	r5, #1
 8016bf2:	4621      	mov	r1, r4
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	f007 fa1f 	bl	801e038 <put_memory>
 8016bfa:	42af      	cmp	r7, r5
 8016bfc:	60a4      	str	r4, [r4, #8]
 8016bfe:	f884 900c 	strb.w	r9, [r4, #12]
 8016c02:	4444      	add	r4, r8
 8016c04:	d1f4      	bne.n	8016bf0 <rmw_uxrce_init_session_memory+0x24>
 8016c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c0a:	4770      	bx	lr

08016c0c <rmw_uxrce_init_topic_memory>:
 8016c0c:	b1e2      	cbz	r2, 8016c48 <rmw_uxrce_init_topic_memory+0x3c>
 8016c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c12:	7b05      	ldrb	r5, [r0, #12]
 8016c14:	4606      	mov	r6, r0
 8016c16:	b9ad      	cbnz	r5, 8016c44 <rmw_uxrce_init_topic_memory+0x38>
 8016c18:	231c      	movs	r3, #28
 8016c1a:	4617      	mov	r7, r2
 8016c1c:	460c      	mov	r4, r1
 8016c1e:	46a8      	mov	r8, r5
 8016c20:	6083      	str	r3, [r0, #8]
 8016c22:	f240 1301 	movw	r3, #257	; 0x101
 8016c26:	e9c0 5500 	strd	r5, r5, [r0]
 8016c2a:	8183      	strh	r3, [r0, #12]
 8016c2c:	3501      	adds	r5, #1
 8016c2e:	4621      	mov	r1, r4
 8016c30:	4630      	mov	r0, r6
 8016c32:	f007 fa01 	bl	801e038 <put_memory>
 8016c36:	42af      	cmp	r7, r5
 8016c38:	60a4      	str	r4, [r4, #8]
 8016c3a:	f104 041c 	add.w	r4, r4, #28
 8016c3e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016c42:	d1f3      	bne.n	8016c2c <rmw_uxrce_init_topic_memory+0x20>
 8016c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop

08016c4c <rmw_uxrce_init_static_input_buffer_memory>:
 8016c4c:	b1ea      	cbz	r2, 8016c8a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c52:	7b05      	ldrb	r5, [r0, #12]
 8016c54:	4606      	mov	r6, r0
 8016c56:	b9b5      	cbnz	r5, 8016c86 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016c58:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016c5c:	4617      	mov	r7, r2
 8016c5e:	460c      	mov	r4, r1
 8016c60:	46a8      	mov	r8, r5
 8016c62:	6083      	str	r3, [r0, #8]
 8016c64:	f240 1301 	movw	r3, #257	; 0x101
 8016c68:	e9c0 5500 	strd	r5, r5, [r0]
 8016c6c:	8183      	strh	r3, [r0, #12]
 8016c6e:	3501      	adds	r5, #1
 8016c70:	4621      	mov	r1, r4
 8016c72:	4630      	mov	r0, r6
 8016c74:	f007 f9e0 	bl	801e038 <put_memory>
 8016c78:	42af      	cmp	r7, r5
 8016c7a:	60a4      	str	r4, [r4, #8]
 8016c7c:	f884 800c 	strb.w	r8, [r4, #12]
 8016c80:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016c84:	d1f3      	bne.n	8016c6e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c8a:	4770      	bx	lr

08016c8c <rmw_uxrce_init_init_options_impl_memory>:
 8016c8c:	b1e2      	cbz	r2, 8016cc8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c92:	7b05      	ldrb	r5, [r0, #12]
 8016c94:	4606      	mov	r6, r0
 8016c96:	b9ad      	cbnz	r5, 8016cc4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016c98:	232c      	movs	r3, #44	; 0x2c
 8016c9a:	4617      	mov	r7, r2
 8016c9c:	460c      	mov	r4, r1
 8016c9e:	46a8      	mov	r8, r5
 8016ca0:	6083      	str	r3, [r0, #8]
 8016ca2:	f240 1301 	movw	r3, #257	; 0x101
 8016ca6:	e9c0 5500 	strd	r5, r5, [r0]
 8016caa:	8183      	strh	r3, [r0, #12]
 8016cac:	3501      	adds	r5, #1
 8016cae:	4621      	mov	r1, r4
 8016cb0:	4630      	mov	r0, r6
 8016cb2:	f007 f9c1 	bl	801e038 <put_memory>
 8016cb6:	42af      	cmp	r7, r5
 8016cb8:	60a4      	str	r4, [r4, #8]
 8016cba:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8016cbe:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016cc2:	d1f3      	bne.n	8016cac <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc8:	4770      	bx	lr
 8016cca:	bf00      	nop

08016ccc <rmw_uxrce_init_wait_set_memory>:
 8016ccc:	b1e2      	cbz	r2, 8016d08 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd2:	7b05      	ldrb	r5, [r0, #12]
 8016cd4:	4606      	mov	r6, r0
 8016cd6:	b9ad      	cbnz	r5, 8016d04 <rmw_uxrce_init_wait_set_memory+0x38>
 8016cd8:	231c      	movs	r3, #28
 8016cda:	4617      	mov	r7, r2
 8016cdc:	460c      	mov	r4, r1
 8016cde:	46a8      	mov	r8, r5
 8016ce0:	6083      	str	r3, [r0, #8]
 8016ce2:	f240 1301 	movw	r3, #257	; 0x101
 8016ce6:	e9c0 5500 	strd	r5, r5, [r0]
 8016cea:	8183      	strh	r3, [r0, #12]
 8016cec:	3501      	adds	r5, #1
 8016cee:	4621      	mov	r1, r4
 8016cf0:	4630      	mov	r0, r6
 8016cf2:	f007 f9a1 	bl	801e038 <put_memory>
 8016cf6:	42af      	cmp	r7, r5
 8016cf8:	60a4      	str	r4, [r4, #8]
 8016cfa:	f104 041c 	add.w	r4, r4, #28
 8016cfe:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016d02:	d1f3      	bne.n	8016cec <rmw_uxrce_init_wait_set_memory+0x20>
 8016d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop

08016d0c <rmw_uxrce_init_guard_condition_memory>:
 8016d0c:	b1e2      	cbz	r2, 8016d48 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d12:	7b05      	ldrb	r5, [r0, #12]
 8016d14:	4606      	mov	r6, r0
 8016d16:	b9ad      	cbnz	r5, 8016d44 <rmw_uxrce_init_guard_condition_memory+0x38>
 8016d18:	2320      	movs	r3, #32
 8016d1a:	4617      	mov	r7, r2
 8016d1c:	460c      	mov	r4, r1
 8016d1e:	46a8      	mov	r8, r5
 8016d20:	6083      	str	r3, [r0, #8]
 8016d22:	f240 1301 	movw	r3, #257	; 0x101
 8016d26:	e9c0 5500 	strd	r5, r5, [r0]
 8016d2a:	8183      	strh	r3, [r0, #12]
 8016d2c:	3501      	adds	r5, #1
 8016d2e:	4621      	mov	r1, r4
 8016d30:	4630      	mov	r0, r6
 8016d32:	f007 f981 	bl	801e038 <put_memory>
 8016d36:	42af      	cmp	r7, r5
 8016d38:	60a4      	str	r4, [r4, #8]
 8016d3a:	f104 0420 	add.w	r4, r4, #32
 8016d3e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016d42:	d1f3      	bne.n	8016d2c <rmw_uxrce_init_guard_condition_memory+0x20>
 8016d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop

08016d4c <rmw_uxrce_fini_session_memory>:
 8016d4c:	4601      	mov	r1, r0
 8016d4e:	4801      	ldr	r0, [pc, #4]	; (8016d54 <rmw_uxrce_fini_session_memory+0x8>)
 8016d50:	f007 b972 	b.w	801e038 <put_memory>
 8016d54:	20016d9c 	.word	0x20016d9c

08016d58 <rmw_uxrce_fini_node_memory>:
 8016d58:	b538      	push	{r3, r4, r5, lr}
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	6800      	ldr	r0, [r0, #0]
 8016d5e:	b128      	cbz	r0, 8016d6c <rmw_uxrce_fini_node_memory+0x14>
 8016d60:	4b07      	ldr	r3, [pc, #28]	; (8016d80 <rmw_uxrce_fini_node_memory+0x28>)
 8016d62:	6819      	ldr	r1, [r3, #0]
 8016d64:	f7e9 fa6c 	bl	8000240 <strcmp>
 8016d68:	b940      	cbnz	r0, 8016d7c <rmw_uxrce_fini_node_memory+0x24>
 8016d6a:	6020      	str	r0, [r4, #0]
 8016d6c:	6861      	ldr	r1, [r4, #4]
 8016d6e:	b129      	cbz	r1, 8016d7c <rmw_uxrce_fini_node_memory+0x24>
 8016d70:	2500      	movs	r5, #0
 8016d72:	4804      	ldr	r0, [pc, #16]	; (8016d84 <rmw_uxrce_fini_node_memory+0x2c>)
 8016d74:	610d      	str	r5, [r1, #16]
 8016d76:	f007 f95f 	bl	801e038 <put_memory>
 8016d7a:	6065      	str	r5, [r4, #4]
 8016d7c:	bd38      	pop	{r3, r4, r5, pc}
 8016d7e:	bf00      	nop
 8016d80:	08025ac4 	.word	0x08025ac4
 8016d84:	20016d6c 	.word	0x20016d6c

08016d88 <rmw_uxrce_fini_publisher_memory>:
 8016d88:	b510      	push	{r4, lr}
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	6800      	ldr	r0, [r0, #0]
 8016d8e:	b128      	cbz	r0, 8016d9c <rmw_uxrce_fini_publisher_memory+0x14>
 8016d90:	4b06      	ldr	r3, [pc, #24]	; (8016dac <rmw_uxrce_fini_publisher_memory+0x24>)
 8016d92:	6819      	ldr	r1, [r3, #0]
 8016d94:	f7e9 fa54 	bl	8000240 <strcmp>
 8016d98:	b938      	cbnz	r0, 8016daa <rmw_uxrce_fini_publisher_memory+0x22>
 8016d9a:	6020      	str	r0, [r4, #0]
 8016d9c:	6861      	ldr	r1, [r4, #4]
 8016d9e:	b121      	cbz	r1, 8016daa <rmw_uxrce_fini_publisher_memory+0x22>
 8016da0:	4803      	ldr	r0, [pc, #12]	; (8016db0 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016da2:	f007 f949 	bl	801e038 <put_memory>
 8016da6:	2300      	movs	r3, #0
 8016da8:	6063      	str	r3, [r4, #4]
 8016daa:	bd10      	pop	{r4, pc}
 8016dac:	08025ac4 	.word	0x08025ac4
 8016db0:	20016d7c 	.word	0x20016d7c

08016db4 <rmw_uxrce_fini_subscription_memory>:
 8016db4:	b510      	push	{r4, lr}
 8016db6:	4604      	mov	r4, r0
 8016db8:	6800      	ldr	r0, [r0, #0]
 8016dba:	b128      	cbz	r0, 8016dc8 <rmw_uxrce_fini_subscription_memory+0x14>
 8016dbc:	4b06      	ldr	r3, [pc, #24]	; (8016dd8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016dbe:	6819      	ldr	r1, [r3, #0]
 8016dc0:	f7e9 fa3e 	bl	8000240 <strcmp>
 8016dc4:	b938      	cbnz	r0, 8016dd6 <rmw_uxrce_fini_subscription_memory+0x22>
 8016dc6:	6020      	str	r0, [r4, #0]
 8016dc8:	6861      	ldr	r1, [r4, #4]
 8016dca:	b121      	cbz	r1, 8016dd6 <rmw_uxrce_fini_subscription_memory+0x22>
 8016dcc:	4803      	ldr	r0, [pc, #12]	; (8016ddc <rmw_uxrce_fini_subscription_memory+0x28>)
 8016dce:	f007 f933 	bl	801e038 <put_memory>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	6063      	str	r3, [r4, #4]
 8016dd6:	bd10      	pop	{r4, pc}
 8016dd8:	08025ac4 	.word	0x08025ac4
 8016ddc:	20016dbc 	.word	0x20016dbc

08016de0 <rmw_uxrce_fini_service_memory>:
 8016de0:	b510      	push	{r4, lr}
 8016de2:	4604      	mov	r4, r0
 8016de4:	6800      	ldr	r0, [r0, #0]
 8016de6:	b128      	cbz	r0, 8016df4 <rmw_uxrce_fini_service_memory+0x14>
 8016de8:	4b06      	ldr	r3, [pc, #24]	; (8016e04 <rmw_uxrce_fini_service_memory+0x24>)
 8016dea:	6819      	ldr	r1, [r3, #0]
 8016dec:	f7e9 fa28 	bl	8000240 <strcmp>
 8016df0:	b938      	cbnz	r0, 8016e02 <rmw_uxrce_fini_service_memory+0x22>
 8016df2:	6020      	str	r0, [r4, #0]
 8016df4:	6861      	ldr	r1, [r4, #4]
 8016df6:	b121      	cbz	r1, 8016e02 <rmw_uxrce_fini_service_memory+0x22>
 8016df8:	4803      	ldr	r0, [pc, #12]	; (8016e08 <rmw_uxrce_fini_service_memory+0x28>)
 8016dfa:	f007 f91d 	bl	801e038 <put_memory>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	6063      	str	r3, [r4, #4]
 8016e02:	bd10      	pop	{r4, pc}
 8016e04:	08025ac4 	.word	0x08025ac4
 8016e08:	20016d8c 	.word	0x20016d8c

08016e0c <rmw_uxrce_fini_client_memory>:
 8016e0c:	b510      	push	{r4, lr}
 8016e0e:	4604      	mov	r4, r0
 8016e10:	6800      	ldr	r0, [r0, #0]
 8016e12:	b128      	cbz	r0, 8016e20 <rmw_uxrce_fini_client_memory+0x14>
 8016e14:	4b06      	ldr	r3, [pc, #24]	; (8016e30 <rmw_uxrce_fini_client_memory+0x24>)
 8016e16:	6819      	ldr	r1, [r3, #0]
 8016e18:	f7e9 fa12 	bl	8000240 <strcmp>
 8016e1c:	b938      	cbnz	r0, 8016e2e <rmw_uxrce_fini_client_memory+0x22>
 8016e1e:	6020      	str	r0, [r4, #0]
 8016e20:	6861      	ldr	r1, [r4, #4]
 8016e22:	b121      	cbz	r1, 8016e2e <rmw_uxrce_fini_client_memory+0x22>
 8016e24:	4803      	ldr	r0, [pc, #12]	; (8016e34 <rmw_uxrce_fini_client_memory+0x28>)
 8016e26:	f007 f907 	bl	801e038 <put_memory>
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	6063      	str	r3, [r4, #4]
 8016e2e:	bd10      	pop	{r4, pc}
 8016e30:	08025ac4 	.word	0x08025ac4
 8016e34:	2001249c 	.word	0x2001249c

08016e38 <rmw_uxrce_fini_topic_memory>:
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	4803      	ldr	r0, [pc, #12]	; (8016e4c <rmw_uxrce_fini_topic_memory+0x14>)
 8016e3e:	4621      	mov	r1, r4
 8016e40:	f007 f8fa 	bl	801e038 <put_memory>
 8016e44:	2300      	movs	r3, #0
 8016e46:	61a3      	str	r3, [r4, #24]
 8016e48:	bd10      	pop	{r4, pc}
 8016e4a:	bf00      	nop
 8016e4c:	20016dcc 	.word	0x20016dcc

08016e50 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016e50:	b082      	sub	sp, #8
 8016e52:	492b      	ldr	r1, [pc, #172]	; (8016f00 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e54:	b530      	push	{r4, r5, lr}
 8016e56:	680d      	ldr	r5, [r1, #0]
 8016e58:	ac03      	add	r4, sp, #12
 8016e5a:	e884 000c 	stmia.w	r4, {r2, r3}
 8016e5e:	461c      	mov	r4, r3
 8016e60:	2d00      	cmp	r5, #0
 8016e62:	d04b      	beq.n	8016efc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016e64:	462b      	mov	r3, r5
 8016e66:	2100      	movs	r1, #0
 8016e68:	689a      	ldr	r2, [r3, #8]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8016e70:	4290      	cmp	r0, r2
 8016e72:	bf08      	it	eq
 8016e74:	3101      	addeq	r1, #1
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d1f6      	bne.n	8016e68 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016e7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016e7e:	2b02      	cmp	r3, #2
 8016e80:	d029      	beq.n	8016ed6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016e82:	d820      	bhi.n	8016ec6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016e84:	428c      	cmp	r4, r1
 8016e86:	d828      	bhi.n	8016eda <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016e88:	fab4 f284 	clz	r2, r4
 8016e8c:	0952      	lsrs	r2, r2, #5
 8016e8e:	b324      	cbz	r4, 8016eda <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016e90:	b1dd      	cbz	r5, 8016eca <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016e92:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016e96:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016e9a:	e001      	b.n	8016ea0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016e9c:	686d      	ldr	r5, [r5, #4]
 8016e9e:	b1ad      	cbz	r5, 8016ecc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016ea0:	68ab      	ldr	r3, [r5, #8]
 8016ea2:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8016ea6:	4288      	cmp	r0, r1
 8016ea8:	d1f8      	bne.n	8016e9c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016eaa:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8016eae:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8016eb2:	4561      	cmp	r1, ip
 8016eb4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016eb8:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016ebc:	daee      	bge.n	8016e9c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016ebe:	468c      	mov	ip, r1
 8016ec0:	461c      	mov	r4, r3
 8016ec2:	462a      	mov	r2, r5
 8016ec4:	e7ea      	b.n	8016e9c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016ec6:	2b03      	cmp	r3, #3
 8016ec8:	d0dc      	beq.n	8016e84 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016eca:	2200      	movs	r2, #0
 8016ecc:	4610      	mov	r0, r2
 8016ece:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ed2:	b002      	add	sp, #8
 8016ed4:	4770      	bx	lr
 8016ed6:	428c      	cmp	r4, r1
 8016ed8:	d905      	bls.n	8016ee6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016eda:	4809      	ldr	r0, [pc, #36]	; (8016f00 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ee0:	b002      	add	sp, #8
 8016ee2:	f007 b899 	b.w	801e018 <get_memory>
 8016ee6:	fab4 f284 	clz	r2, r4
 8016eea:	0952      	lsrs	r2, r2, #5
 8016eec:	2c00      	cmp	r4, #0
 8016eee:	d1ed      	bne.n	8016ecc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016ef0:	4803      	ldr	r0, [pc, #12]	; (8016f00 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ef6:	b002      	add	sp, #8
 8016ef8:	f007 b88e 	b.w	801e018 <get_memory>
 8016efc:	4629      	mov	r1, r5
 8016efe:	e7bc      	b.n	8016e7a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016f00:	20016dac 	.word	0x20016dac

08016f04 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016f04:	4b12      	ldr	r3, [pc, #72]	; (8016f50 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	b530      	push	{r4, r5, lr}
 8016f0a:	b1f3      	cbz	r3, 8016f4a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016f0c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016f10:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8016f14:	2400      	movs	r4, #0
 8016f16:	e001      	b.n	8016f1c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	b1a3      	cbz	r3, 8016f46 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016f1c:	689a      	ldr	r2, [r3, #8]
 8016f1e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8016f22:	4288      	cmp	r0, r1
 8016f24:	d1f8      	bne.n	8016f18 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016f26:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8016f2a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8016f2e:	4571      	cmp	r1, lr
 8016f30:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016f34:	eb72 050c 	sbcs.w	r5, r2, ip
 8016f38:	daee      	bge.n	8016f18 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016f3a:	461c      	mov	r4, r3
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	468e      	mov	lr, r1
 8016f40:	4694      	mov	ip, r2
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d1ea      	bne.n	8016f1c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016f46:	4620      	mov	r0, r4
 8016f48:	bd30      	pop	{r4, r5, pc}
 8016f4a:	461c      	mov	r4, r3
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	bd30      	pop	{r4, r5, pc}
 8016f50:	20016dac 	.word	0x20016dac
 8016f54:	00000000 	.word	0x00000000

08016f58 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016f58:	4b3d      	ldr	r3, [pc, #244]	; (8017050 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5e:	681f      	ldr	r7, [r3, #0]
 8016f60:	ed2d 8b06 	vpush	{d8-d10}
 8016f64:	b08d      	sub	sp, #52	; 0x34
 8016f66:	f007 fae3 	bl	801e530 <rmw_uros_epoch_nanos>
 8016f6a:	2f00      	cmp	r7, #0
 8016f6c:	d05d      	beq.n	801702a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016f6e:	46b8      	mov	r8, r7
 8016f70:	4681      	mov	r9, r0
 8016f72:	468a      	mov	sl, r1
 8016f74:	ac04      	add	r4, sp, #16
 8016f76:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016f7a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016f7e:	2b04      	cmp	r3, #4
 8016f80:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8017038 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016f84:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8017040 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016f88:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8017048 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016f8c:	d03f      	beq.n	801700e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016f8e:	2b05      	cmp	r3, #5
 8016f90:	d044      	beq.n	801701c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016f92:	2b03      	cmp	r3, #3
 8016f94:	d03b      	beq.n	801700e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016f96:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016f9a:	ed8d ab06 	vstr	d10, [sp, #24]
 8016f9e:	ab08      	add	r3, sp, #32
 8016fa0:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016fa4:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8016fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016faa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016fae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016fb2:	f006 fe45 	bl	801dc40 <rmw_time_equal>
 8016fb6:	b118      	cbz	r0, 8016fc0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016fb8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016fbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016fc0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8016fc4:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8016fc8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016fcc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016fd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016fd4:	f006 fe8a 	bl	801dcec <rmw_time_total_nsec>
 8016fd8:	1830      	adds	r0, r6, r0
 8016fda:	eb47 0101 	adc.w	r1, r7, r1
 8016fde:	4548      	cmp	r0, r9
 8016fe0:	eb71 030a 	sbcs.w	r3, r1, sl
 8016fe4:	db05      	blt.n	8016ff2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016fe6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016fea:	4591      	cmp	r9, r2
 8016fec:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016ff0:	da03      	bge.n	8016ffa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016ff2:	4641      	mov	r1, r8
 8016ff4:	4816      	ldr	r0, [pc, #88]	; (8017050 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016ff6:	f007 f81f 	bl	801e038 <put_memory>
 8016ffa:	f1bb 0f00 	cmp.w	fp, #0
 8016ffe:	d014      	beq.n	801702a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017000:	46d8      	mov	r8, fp
 8017002:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017006:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 801700a:	2b04      	cmp	r3, #4
 801700c:	d1bf      	bne.n	8016f8e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801700e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8017012:	3340      	adds	r3, #64	; 0x40
 8017014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801701a:	e7c0      	b.n	8016f9e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801701c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8017020:	3348      	adds	r3, #72	; 0x48
 8017022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017028:	e7b9      	b.n	8016f9e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801702a:	b00d      	add	sp, #52	; 0x34
 801702c:	ecbd 8b06 	vpop	{d8-d10}
 8017030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017034:	f3af 8000 	nop.w
	...
 8017040:	00000001 	.word	0x00000001
 8017044:	00000000 	.word	0x00000000
 8017048:	0000001e 	.word	0x0000001e
 801704c:	00000000 	.word	0x00000000
 8017050:	20016dac 	.word	0x20016dac

08017054 <run_xrce_session>:
 8017054:	b510      	push	{r4, lr}
 8017056:	788c      	ldrb	r4, [r1, #2]
 8017058:	b086      	sub	sp, #24
 801705a:	2c01      	cmp	r4, #1
 801705c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017060:	d00c      	beq.n	801707c <run_xrce_session+0x28>
 8017062:	2401      	movs	r4, #1
 8017064:	4619      	mov	r1, r3
 8017066:	f10d 020e 	add.w	r2, sp, #14
 801706a:	f10d 0317 	add.w	r3, sp, #23
 801706e:	9400      	str	r4, [sp, #0]
 8017070:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017074:	f001 fd6c 	bl	8018b50 <uxr_run_session_until_all_status>
 8017078:	b006      	add	sp, #24
 801707a:	bd10      	pop	{r4, pc}
 801707c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017080:	f001 f988 	bl	8018394 <uxr_flash_output_streams>
 8017084:	4620      	mov	r0, r4
 8017086:	b006      	add	sp, #24
 8017088:	bd10      	pop	{r4, pc}
 801708a:	bf00      	nop

0801708c <convert_qos_profile>:
 801708c:	7a4a      	ldrb	r2, [r1, #9]
 801708e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8017092:	2a02      	cmp	r2, #2
 8017094:	bf18      	it	ne
 8017096:	2200      	movne	r2, #0
 8017098:	7002      	strb	r2, [r0, #0]
 801709a:	f1ac 0202 	sub.w	r2, ip, #2
 801709e:	fab2 f282 	clz	r2, r2
 80170a2:	0952      	lsrs	r2, r2, #5
 80170a4:	7042      	strb	r2, [r0, #1]
 80170a6:	780a      	ldrb	r2, [r1, #0]
 80170a8:	8889      	ldrh	r1, [r1, #4]
 80170aa:	f1a2 0202 	sub.w	r2, r2, #2
 80170ae:	8081      	strh	r1, [r0, #4]
 80170b0:	fab2 f282 	clz	r2, r2
 80170b4:	0952      	lsrs	r2, r2, #5
 80170b6:	7082      	strb	r2, [r0, #2]
 80170b8:	4770      	bx	lr
 80170ba:	bf00      	nop

080170bc <generate_service_topics>:
 80170bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170be:	461d      	mov	r5, r3
 80170c0:	b083      	sub	sp, #12
 80170c2:	4606      	mov	r6, r0
 80170c4:	4c11      	ldr	r4, [pc, #68]	; (801710c <generate_service_topics+0x50>)
 80170c6:	4608      	mov	r0, r1
 80170c8:	4b11      	ldr	r3, [pc, #68]	; (8017110 <generate_service_topics+0x54>)
 80170ca:	4617      	mov	r7, r2
 80170cc:	4629      	mov	r1, r5
 80170ce:	4a11      	ldr	r2, [pc, #68]	; (8017114 <generate_service_topics+0x58>)
 80170d0:	9401      	str	r4, [sp, #4]
 80170d2:	9600      	str	r6, [sp, #0]
 80170d4:	f009 fcfe 	bl	8020ad4 <sniprintf>
 80170d8:	4a0f      	ldr	r2, [pc, #60]	; (8017118 <generate_service_topics+0x5c>)
 80170da:	4604      	mov	r4, r0
 80170dc:	4b0f      	ldr	r3, [pc, #60]	; (801711c <generate_service_topics+0x60>)
 80170de:	9201      	str	r2, [sp, #4]
 80170e0:	4638      	mov	r0, r7
 80170e2:	4a0c      	ldr	r2, [pc, #48]	; (8017114 <generate_service_topics+0x58>)
 80170e4:	4629      	mov	r1, r5
 80170e6:	9600      	str	r6, [sp, #0]
 80170e8:	f009 fcf4 	bl	8020ad4 <sniprintf>
 80170ec:	2c00      	cmp	r4, #0
 80170ee:	bfa8      	it	ge
 80170f0:	42a5      	cmpge	r5, r4
 80170f2:	bfcc      	ite	gt
 80170f4:	2401      	movgt	r4, #1
 80170f6:	2400      	movle	r4, #0
 80170f8:	dd05      	ble.n	8017106 <generate_service_topics+0x4a>
 80170fa:	2800      	cmp	r0, #0
 80170fc:	bfa8      	it	ge
 80170fe:	4285      	cmpge	r5, r0
 8017100:	bfcc      	ite	gt
 8017102:	2401      	movgt	r4, #1
 8017104:	2400      	movle	r4, #0
 8017106:	4620      	mov	r0, r4
 8017108:	b003      	add	sp, #12
 801710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801710c:	08025480 	.word	0x08025480
 8017110:	0802547c 	.word	0x0802547c
 8017114:	08025460 	.word	0x08025460
 8017118:	08025474 	.word	0x08025474
 801711c:	08025470 	.word	0x08025470

08017120 <generate_service_types>:
 8017120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017124:	4606      	mov	r6, r0
 8017126:	b087      	sub	sp, #28
 8017128:	461c      	mov	r4, r3
 801712a:	6883      	ldr	r3, [r0, #8]
 801712c:	460d      	mov	r5, r1
 801712e:	4617      	mov	r7, r2
 8017130:	4798      	blx	r3
 8017132:	68f3      	ldr	r3, [r6, #12]
 8017134:	4606      	mov	r6, r0
 8017136:	4798      	blx	r3
 8017138:	2300      	movs	r3, #0
 801713a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801713e:	6872      	ldr	r2, [r6, #4]
 8017140:	702b      	strb	r3, [r5, #0]
 8017142:	6813      	ldr	r3, [r2, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d03f      	beq.n	80171c8 <generate_service_types+0xa8>
 8017148:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80171dc <generate_service_types+0xbc>
 801714c:	4649      	mov	r1, r9
 801714e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80171e4 <generate_service_types+0xc4>
 8017152:	4628      	mov	r0, r5
 8017154:	f8df a090 	ldr.w	sl, [pc, #144]	; 80171e8 <generate_service_types+0xc8>
 8017158:	f8cd 8014 	str.w	r8, [sp, #20]
 801715c:	6852      	ldr	r2, [r2, #4]
 801715e:	9100      	str	r1, [sp, #0]
 8017160:	4621      	mov	r1, r4
 8017162:	f8cd 8008 	str.w	r8, [sp, #8]
 8017166:	f8cd a004 	str.w	sl, [sp, #4]
 801716a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801716e:	4a1a      	ldr	r2, [pc, #104]	; (80171d8 <generate_service_types+0xb8>)
 8017170:	f009 fcb0 	bl	8020ad4 <sniprintf>
 8017174:	2300      	movs	r3, #0
 8017176:	42a0      	cmp	r0, r4
 8017178:	ea6f 0600 	mvn.w	r6, r0
 801717c:	703b      	strb	r3, [r7, #0]
 801717e:	f8db 3000 	ldr.w	r3, [fp]
 8017182:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8017186:	bfac      	ite	ge
 8017188:	2500      	movge	r5, #0
 801718a:	2501      	movlt	r5, #1
 801718c:	b30b      	cbz	r3, 80171d2 <generate_service_types+0xb2>
 801718e:	4a13      	ldr	r2, [pc, #76]	; (80171dc <generate_service_types+0xbc>)
 8017190:	f8cd 8014 	str.w	r8, [sp, #20]
 8017194:	402e      	ands	r6, r5
 8017196:	f8db 1004 	ldr.w	r1, [fp, #4]
 801719a:	4638      	mov	r0, r7
 801719c:	9104      	str	r1, [sp, #16]
 801719e:	4621      	mov	r1, r4
 80171a0:	e9cd 2a00 	strd	r2, sl, [sp]
 80171a4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80171a8:	4a0b      	ldr	r2, [pc, #44]	; (80171d8 <generate_service_types+0xb8>)
 80171aa:	f009 fc93 	bl	8020ad4 <sniprintf>
 80171ae:	2800      	cmp	r0, #0
 80171b0:	bfb4      	ite	lt
 80171b2:	2600      	movlt	r6, #0
 80171b4:	f006 0601 	andge.w	r6, r6, #1
 80171b8:	42a0      	cmp	r0, r4
 80171ba:	bfac      	ite	ge
 80171bc:	2000      	movge	r0, #0
 80171be:	f006 0001 	andlt.w	r0, r6, #1
 80171c2:	b007      	add	sp, #28
 80171c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171c8:	4b05      	ldr	r3, [pc, #20]	; (80171e0 <generate_service_types+0xc0>)
 80171ca:	f8df 9010 	ldr.w	r9, [pc, #16]	; 80171dc <generate_service_types+0xbc>
 80171ce:	4619      	mov	r1, r3
 80171d0:	e7bd      	b.n	801714e <generate_service_types+0x2e>
 80171d2:	4b03      	ldr	r3, [pc, #12]	; (80171e0 <generate_service_types+0xc0>)
 80171d4:	461a      	mov	r2, r3
 80171d6:	e7db      	b.n	8017190 <generate_service_types+0x70>
 80171d8:	08025458 	.word	0x08025458
 80171dc:	08025454 	.word	0x08025454
 80171e0:	080254d8 	.word	0x080254d8
 80171e4:	08025468 	.word	0x08025468
 80171e8:	0802546c 	.word	0x0802546c

080171ec <generate_type_name>:
 80171ec:	2300      	movs	r3, #0
 80171ee:	b530      	push	{r4, r5, lr}
 80171f0:	700b      	strb	r3, [r1, #0]
 80171f2:	b087      	sub	sp, #28
 80171f4:	6803      	ldr	r3, [r0, #0]
 80171f6:	4614      	mov	r4, r2
 80171f8:	b1bb      	cbz	r3, 801722a <generate_type_name+0x3e>
 80171fa:	4a0e      	ldr	r2, [pc, #56]	; (8017234 <generate_type_name+0x48>)
 80171fc:	4615      	mov	r5, r2
 80171fe:	9500      	str	r5, [sp, #0]
 8017200:	9203      	str	r2, [sp, #12]
 8017202:	4d0d      	ldr	r5, [pc, #52]	; (8017238 <generate_type_name+0x4c>)
 8017204:	6842      	ldr	r2, [r0, #4]
 8017206:	4608      	mov	r0, r1
 8017208:	490c      	ldr	r1, [pc, #48]	; (801723c <generate_type_name+0x50>)
 801720a:	9204      	str	r2, [sp, #16]
 801720c:	9105      	str	r1, [sp, #20]
 801720e:	9102      	str	r1, [sp, #8]
 8017210:	4621      	mov	r1, r4
 8017212:	4a0b      	ldr	r2, [pc, #44]	; (8017240 <generate_type_name+0x54>)
 8017214:	9501      	str	r5, [sp, #4]
 8017216:	f009 fc5d 	bl	8020ad4 <sniprintf>
 801721a:	2800      	cmp	r0, #0
 801721c:	bfa8      	it	ge
 801721e:	4284      	cmpge	r4, r0
 8017220:	bfcc      	ite	gt
 8017222:	2001      	movgt	r0, #1
 8017224:	2000      	movle	r0, #0
 8017226:	b007      	add	sp, #28
 8017228:	bd30      	pop	{r4, r5, pc}
 801722a:	4b06      	ldr	r3, [pc, #24]	; (8017244 <generate_type_name+0x58>)
 801722c:	4a01      	ldr	r2, [pc, #4]	; (8017234 <generate_type_name+0x48>)
 801722e:	461d      	mov	r5, r3
 8017230:	e7e5      	b.n	80171fe <generate_type_name+0x12>
 8017232:	bf00      	nop
 8017234:	08025454 	.word	0x08025454
 8017238:	0802546c 	.word	0x0802546c
 801723c:	08025468 	.word	0x08025468
 8017240:	08025458 	.word	0x08025458
 8017244:	080254d8 	.word	0x080254d8

08017248 <generate_topic_name>:
 8017248:	b530      	push	{r4, r5, lr}
 801724a:	4614      	mov	r4, r2
 801724c:	b083      	sub	sp, #12
 801724e:	4605      	mov	r5, r0
 8017250:	4b07      	ldr	r3, [pc, #28]	; (8017270 <generate_topic_name+0x28>)
 8017252:	4a08      	ldr	r2, [pc, #32]	; (8017274 <generate_topic_name+0x2c>)
 8017254:	4608      	mov	r0, r1
 8017256:	9500      	str	r5, [sp, #0]
 8017258:	4621      	mov	r1, r4
 801725a:	f009 fc3b 	bl	8020ad4 <sniprintf>
 801725e:	2800      	cmp	r0, #0
 8017260:	bfa8      	it	ge
 8017262:	4284      	cmpge	r4, r0
 8017264:	bfcc      	ite	gt
 8017266:	2001      	movgt	r0, #1
 8017268:	2000      	movle	r0, #0
 801726a:	b003      	add	sp, #12
 801726c:	bd30      	pop	{r4, r5, pc}
 801726e:	bf00      	nop
 8017270:	08025488 	.word	0x08025488
 8017274:	08024e58 	.word	0x08024e58

08017278 <is_uxrce_rmw_identifier_valid>:
 8017278:	b510      	push	{r4, lr}
 801727a:	4604      	mov	r4, r0
 801727c:	b140      	cbz	r0, 8017290 <is_uxrce_rmw_identifier_valid+0x18>
 801727e:	f006 ff33 	bl	801e0e8 <rmw_get_implementation_identifier>
 8017282:	4601      	mov	r1, r0
 8017284:	4620      	mov	r0, r4
 8017286:	f7e8 ffdb 	bl	8000240 <strcmp>
 801728a:	fab0 f080 	clz	r0, r0
 801728e:	0940      	lsrs	r0, r0, #5
 8017290:	bd10      	pop	{r4, pc}
 8017292:	bf00      	nop

08017294 <get_message_typesupport_handle>:
 8017294:	6883      	ldr	r3, [r0, #8]
 8017296:	4718      	bx	r3

08017298 <get_message_typesupport_handle_function>:
 8017298:	b510      	push	{r4, lr}
 801729a:	4604      	mov	r4, r0
 801729c:	6800      	ldr	r0, [r0, #0]
 801729e:	f7e8 ffcf 	bl	8000240 <strcmp>
 80172a2:	2800      	cmp	r0, #0
 80172a4:	bf0c      	ite	eq
 80172a6:	4620      	moveq	r0, r4
 80172a8:	2000      	movne	r0, #0
 80172aa:	bd10      	pop	{r4, pc}

080172ac <get_service_typesupport_handle>:
 80172ac:	6883      	ldr	r3, [r0, #8]
 80172ae:	4718      	bx	r3

080172b0 <get_service_typesupport_handle_function>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	4604      	mov	r4, r0
 80172b4:	6800      	ldr	r0, [r0, #0]
 80172b6:	f7e8 ffc3 	bl	8000240 <strcmp>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	bf0c      	ite	eq
 80172be:	4620      	moveq	r0, r4
 80172c0:	2000      	movne	r0, #0
 80172c2:	bd10      	pop	{r4, pc}

080172c4 <rosidl_runtime_c__String__init>:
 80172c4:	b510      	push	{r4, lr}
 80172c6:	4604      	mov	r4, r0
 80172c8:	b086      	sub	sp, #24
 80172ca:	b170      	cbz	r0, 80172ea <rosidl_runtime_c__String__init+0x26>
 80172cc:	a801      	add	r0, sp, #4
 80172ce:	f7fd feef 	bl	80150b0 <rcutils_get_default_allocator>
 80172d2:	9b01      	ldr	r3, [sp, #4]
 80172d4:	9905      	ldr	r1, [sp, #20]
 80172d6:	2001      	movs	r0, #1
 80172d8:	4798      	blx	r3
 80172da:	6020      	str	r0, [r4, #0]
 80172dc:	b128      	cbz	r0, 80172ea <rosidl_runtime_c__String__init+0x26>
 80172de:	2100      	movs	r1, #0
 80172e0:	2201      	movs	r2, #1
 80172e2:	7001      	strb	r1, [r0, #0]
 80172e4:	4610      	mov	r0, r2
 80172e6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80172ea:	b006      	add	sp, #24
 80172ec:	bd10      	pop	{r4, pc}
 80172ee:	bf00      	nop

080172f0 <rosidl_runtime_c__String__fini>:
 80172f0:	b320      	cbz	r0, 801733c <rosidl_runtime_c__String__fini+0x4c>
 80172f2:	6803      	ldr	r3, [r0, #0]
 80172f4:	b510      	push	{r4, lr}
 80172f6:	4604      	mov	r4, r0
 80172f8:	b086      	sub	sp, #24
 80172fa:	b173      	cbz	r3, 801731a <rosidl_runtime_c__String__fini+0x2a>
 80172fc:	6883      	ldr	r3, [r0, #8]
 80172fe:	b1f3      	cbz	r3, 801733e <rosidl_runtime_c__String__fini+0x4e>
 8017300:	a801      	add	r0, sp, #4
 8017302:	f7fd fed5 	bl	80150b0 <rcutils_get_default_allocator>
 8017306:	9b02      	ldr	r3, [sp, #8]
 8017308:	9905      	ldr	r1, [sp, #20]
 801730a:	6820      	ldr	r0, [r4, #0]
 801730c:	4798      	blx	r3
 801730e:	2300      	movs	r3, #0
 8017310:	e9c4 3300 	strd	r3, r3, [r4]
 8017314:	60a3      	str	r3, [r4, #8]
 8017316:	b006      	add	sp, #24
 8017318:	bd10      	pop	{r4, pc}
 801731a:	6843      	ldr	r3, [r0, #4]
 801731c:	b9db      	cbnz	r3, 8017356 <rosidl_runtime_c__String__fini+0x66>
 801731e:	6883      	ldr	r3, [r0, #8]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d0f8      	beq.n	8017316 <rosidl_runtime_c__String__fini+0x26>
 8017324:	4b12      	ldr	r3, [pc, #72]	; (8017370 <rosidl_runtime_c__String__fini+0x80>)
 8017326:	2251      	movs	r2, #81	; 0x51
 8017328:	2101      	movs	r1, #1
 801732a:	4812      	ldr	r0, [pc, #72]	; (8017374 <rosidl_runtime_c__String__fini+0x84>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	68db      	ldr	r3, [r3, #12]
 8017330:	f009 faa6 	bl	8020880 <fwrite>
 8017334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017338:	f008 f91e 	bl	801f578 <exit>
 801733c:	4770      	bx	lr
 801733e:	4b0c      	ldr	r3, [pc, #48]	; (8017370 <rosidl_runtime_c__String__fini+0x80>)
 8017340:	224c      	movs	r2, #76	; 0x4c
 8017342:	2101      	movs	r1, #1
 8017344:	480c      	ldr	r0, [pc, #48]	; (8017378 <rosidl_runtime_c__String__fini+0x88>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	68db      	ldr	r3, [r3, #12]
 801734a:	f009 fa99 	bl	8020880 <fwrite>
 801734e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017352:	f008 f911 	bl	801f578 <exit>
 8017356:	4b06      	ldr	r3, [pc, #24]	; (8017370 <rosidl_runtime_c__String__fini+0x80>)
 8017358:	224e      	movs	r2, #78	; 0x4e
 801735a:	2101      	movs	r1, #1
 801735c:	4807      	ldr	r0, [pc, #28]	; (801737c <rosidl_runtime_c__String__fini+0x8c>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	68db      	ldr	r3, [r3, #12]
 8017362:	f009 fa8d 	bl	8020880 <fwrite>
 8017366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801736a:	f008 f905 	bl	801f578 <exit>
 801736e:	bf00      	nop
 8017370:	2000099c 	.word	0x2000099c
 8017374:	0802552c 	.word	0x0802552c
 8017378:	0802548c 	.word	0x0802548c
 801737c:	080254dc 	.word	0x080254dc

08017380 <rosidl_runtime_c__String__assignn>:
 8017380:	2900      	cmp	r1, #0
 8017382:	bf18      	it	ne
 8017384:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8017388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801738c:	bf0c      	ite	eq
 801738e:	2401      	moveq	r4, #1
 8017390:	2400      	movne	r4, #0
 8017392:	b087      	sub	sp, #28
 8017394:	2800      	cmp	r0, #0
 8017396:	bf08      	it	eq
 8017398:	f044 0401 	orreq.w	r4, r4, #1
 801739c:	b124      	cbz	r4, 80173a8 <rosidl_runtime_c__String__assignn+0x28>
 801739e:	2400      	movs	r4, #0
 80173a0:	4620      	mov	r0, r4
 80173a2:	b007      	add	sp, #28
 80173a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173a8:	4616      	mov	r6, r2
 80173aa:	4605      	mov	r5, r0
 80173ac:	a801      	add	r0, sp, #4
 80173ae:	460f      	mov	r7, r1
 80173b0:	f106 0901 	add.w	r9, r6, #1
 80173b4:	f7fd fe7c 	bl	80150b0 <rcutils_get_default_allocator>
 80173b8:	9b03      	ldr	r3, [sp, #12]
 80173ba:	9a05      	ldr	r2, [sp, #20]
 80173bc:	4649      	mov	r1, r9
 80173be:	6828      	ldr	r0, [r5, #0]
 80173c0:	4798      	blx	r3
 80173c2:	4680      	mov	r8, r0
 80173c4:	2800      	cmp	r0, #0
 80173c6:	d0eb      	beq.n	80173a0 <rosidl_runtime_c__String__assignn+0x20>
 80173c8:	4639      	mov	r1, r7
 80173ca:	4632      	mov	r2, r6
 80173cc:	f009 fddf 	bl	8020f8e <memcpy>
 80173d0:	f808 4006 	strb.w	r4, [r8, r6]
 80173d4:	2401      	movs	r4, #1
 80173d6:	f8c5 9008 	str.w	r9, [r5, #8]
 80173da:	4620      	mov	r0, r4
 80173dc:	e9c5 8600 	strd	r8, r6, [r5]
 80173e0:	b007      	add	sp, #28
 80173e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173e6:	bf00      	nop

080173e8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80173e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ec:	6805      	ldr	r5, [r0, #0]
 80173ee:	4604      	mov	r4, r0
 80173f0:	460e      	mov	r6, r1
 80173f2:	4628      	mov	r0, r5
 80173f4:	f7e8 ff24 	bl	8000240 <strcmp>
 80173f8:	b1c8      	cbz	r0, 801742e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80173fa:	4b11      	ldr	r3, [pc, #68]	; (8017440 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	429d      	cmp	r5, r3
 8017400:	d112      	bne.n	8017428 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017402:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017406:	f8d8 4000 	ldr.w	r4, [r8]
 801740a:	b16c      	cbz	r4, 8017428 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801740c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017410:	2700      	movs	r7, #0
 8017412:	3d04      	subs	r5, #4
 8017414:	4631      	mov	r1, r6
 8017416:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801741a:	f7e8 ff11 	bl	8000240 <strcmp>
 801741e:	00bb      	lsls	r3, r7, #2
 8017420:	b140      	cbz	r0, 8017434 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8017422:	3701      	adds	r7, #1
 8017424:	42bc      	cmp	r4, r7
 8017426:	d1f5      	bne.n	8017414 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017428:	2000      	movs	r0, #0
 801742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801742e:	4620      	mov	r0, r4
 8017430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017434:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801743c:	58d3      	ldr	r3, [r2, r3]
 801743e:	4718      	bx	r3
 8017440:	200008b8 	.word	0x200008b8

08017444 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8017444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017448:	6805      	ldr	r5, [r0, #0]
 801744a:	4604      	mov	r4, r0
 801744c:	460e      	mov	r6, r1
 801744e:	4628      	mov	r0, r5
 8017450:	f7e8 fef6 	bl	8000240 <strcmp>
 8017454:	b1c8      	cbz	r0, 801748a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8017456:	4b11      	ldr	r3, [pc, #68]	; (801749c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	429d      	cmp	r5, r3
 801745c:	d112      	bne.n	8017484 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801745e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017462:	f8d8 4000 	ldr.w	r4, [r8]
 8017466:	b16c      	cbz	r4, 8017484 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017468:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801746c:	2700      	movs	r7, #0
 801746e:	3d04      	subs	r5, #4
 8017470:	4631      	mov	r1, r6
 8017472:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017476:	f7e8 fee3 	bl	8000240 <strcmp>
 801747a:	00bb      	lsls	r3, r7, #2
 801747c:	b140      	cbz	r0, 8017490 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801747e:	3701      	adds	r7, #1
 8017480:	42bc      	cmp	r4, r7
 8017482:	d1f5      	bne.n	8017470 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8017484:	2000      	movs	r0, #0
 8017486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801748a:	4620      	mov	r0, r4
 801748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017490:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017498:	58d3      	ldr	r3, [r2, r3]
 801749a:	4718      	bx	r3
 801749c:	200008b8 	.word	0x200008b8

080174a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80174a0:	4b04      	ldr	r3, [pc, #16]	; (80174b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80174a2:	681a      	ldr	r2, [r3, #0]
 80174a4:	b10a      	cbz	r2, 80174aa <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80174a6:	4803      	ldr	r0, [pc, #12]	; (80174b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80174a8:	4770      	bx	lr
 80174aa:	4a03      	ldr	r2, [pc, #12]	; (80174b8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80174ac:	4801      	ldr	r0, [pc, #4]	; (80174b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80174ae:	6812      	ldr	r2, [r2, #0]
 80174b0:	601a      	str	r2, [r3, #0]
 80174b2:	4770      	bx	lr
 80174b4:	200008c8 	.word	0x200008c8
 80174b8:	200008b8 	.word	0x200008b8

080174bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80174bc:	4a02      	ldr	r2, [pc, #8]	; (80174c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 80174be:	4b03      	ldr	r3, [pc, #12]	; (80174cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 80174c0:	6812      	ldr	r2, [r2, #0]
 80174c2:	601a      	str	r2, [r3, #0]
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop
 80174c8:	200008b8 	.word	0x200008b8
 80174cc:	200008c8 	.word	0x200008c8

080174d0 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 80174d0:	f007 b83c 	b.w	801e54c <std_msgs__msg__String__init>

080174d4 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 80174d4:	f007 b84c 	b.w	801e570 <std_msgs__msg__String__fini>

080174d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 80174d8:	4b04      	ldr	r3, [pc, #16]	; (80174ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80174da:	681a      	ldr	r2, [r3, #0]
 80174dc:	b10a      	cbz	r2, 80174e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80174de:	4803      	ldr	r0, [pc, #12]	; (80174ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80174e0:	4770      	bx	lr
 80174e2:	4a03      	ldr	r2, [pc, #12]	; (80174f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80174e4:	4801      	ldr	r0, [pc, #4]	; (80174ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80174e6:	6812      	ldr	r2, [r2, #0]
 80174e8:	601a      	str	r2, [r3, #0]
 80174ea:	4770      	bx	lr
 80174ec:	20000910 	.word	0x20000910
 80174f0:	200008bc 	.word	0x200008bc

080174f4 <_String__max_serialized_size>:
 80174f4:	2000      	movs	r0, #0
 80174f6:	4770      	bx	lr

080174f8 <_String__cdr_serialize>:
 80174f8:	b1c8      	cbz	r0, 801752e <_String__cdr_serialize+0x36>
 80174fa:	b570      	push	{r4, r5, r6, lr}
 80174fc:	6806      	ldr	r6, [r0, #0]
 80174fe:	4604      	mov	r4, r0
 8017500:	460d      	mov	r5, r1
 8017502:	b15e      	cbz	r6, 801751c <_String__cdr_serialize+0x24>
 8017504:	4630      	mov	r0, r6
 8017506:	f7e8 fefb 	bl	8000300 <strlen>
 801750a:	4603      	mov	r3, r0
 801750c:	1c42      	adds	r2, r0, #1
 801750e:	4631      	mov	r1, r6
 8017510:	4628      	mov	r0, r5
 8017512:	6063      	str	r3, [r4, #4]
 8017514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017518:	f7fb bf76 	b.w	8013408 <ucdr_serialize_sequence_char>
 801751c:	4633      	mov	r3, r6
 801751e:	4632      	mov	r2, r6
 8017520:	4631      	mov	r1, r6
 8017522:	4628      	mov	r0, r5
 8017524:	6063      	str	r3, [r4, #4]
 8017526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801752a:	f7fb bf6d 	b.w	8013408 <ucdr_serialize_sequence_char>
 801752e:	4770      	bx	lr

08017530 <get_serialized_size_std_msgs__msg__String>:
 8017530:	b510      	push	{r4, lr}
 8017532:	4604      	mov	r4, r0
 8017534:	b130      	cbz	r0, 8017544 <get_serialized_size_std_msgs__msg__String+0x14>
 8017536:	4608      	mov	r0, r1
 8017538:	2104      	movs	r1, #4
 801753a:	f7fb fef5 	bl	8013328 <ucdr_alignment>
 801753e:	6863      	ldr	r3, [r4, #4]
 8017540:	3305      	adds	r3, #5
 8017542:	4418      	add	r0, r3
 8017544:	bd10      	pop	{r4, pc}
 8017546:	bf00      	nop

08017548 <_String__cdr_deserialize>:
 8017548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801754a:	460c      	mov	r4, r1
 801754c:	b083      	sub	sp, #12
 801754e:	b1a1      	cbz	r1, 801757a <_String__cdr_deserialize+0x32>
 8017550:	688f      	ldr	r7, [r1, #8]
 8017552:	ab01      	add	r3, sp, #4
 8017554:	6809      	ldr	r1, [r1, #0]
 8017556:	4606      	mov	r6, r0
 8017558:	463a      	mov	r2, r7
 801755a:	f7fb ff67 	bl	801342c <ucdr_deserialize_sequence_char>
 801755e:	9b01      	ldr	r3, [sp, #4]
 8017560:	4605      	mov	r5, r0
 8017562:	b920      	cbnz	r0, 801756e <_String__cdr_deserialize+0x26>
 8017564:	429f      	cmp	r7, r3
 8017566:	d30c      	bcc.n	8017582 <_String__cdr_deserialize+0x3a>
 8017568:	4628      	mov	r0, r5
 801756a:	b003      	add	sp, #12
 801756c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801756e:	b103      	cbz	r3, 8017572 <_String__cdr_deserialize+0x2a>
 8017570:	3b01      	subs	r3, #1
 8017572:	4628      	mov	r0, r5
 8017574:	6063      	str	r3, [r4, #4]
 8017576:	b003      	add	sp, #12
 8017578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801757a:	460d      	mov	r5, r1
 801757c:	4628      	mov	r0, r5
 801757e:	b003      	add	sp, #12
 8017580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017582:	2101      	movs	r1, #1
 8017584:	4630      	mov	r0, r6
 8017586:	75b5      	strb	r5, [r6, #22]
 8017588:	7571      	strb	r1, [r6, #21]
 801758a:	6065      	str	r5, [r4, #4]
 801758c:	f7fb fee4 	bl	8013358 <ucdr_align_to>
 8017590:	4630      	mov	r0, r6
 8017592:	9901      	ldr	r1, [sp, #4]
 8017594:	f7fb ff18 	bl	80133c8 <ucdr_advance_buffer>
 8017598:	4628      	mov	r0, r5
 801759a:	b003      	add	sp, #12
 801759c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801759e:	bf00      	nop

080175a0 <_String__get_serialized_size>:
 80175a0:	b510      	push	{r4, lr}
 80175a2:	4604      	mov	r4, r0
 80175a4:	b130      	cbz	r0, 80175b4 <_String__get_serialized_size+0x14>
 80175a6:	2104      	movs	r1, #4
 80175a8:	2000      	movs	r0, #0
 80175aa:	f7fb febd 	bl	8013328 <ucdr_alignment>
 80175ae:	6863      	ldr	r3, [r4, #4]
 80175b0:	3305      	adds	r3, #5
 80175b2:	4418      	add	r0, r3
 80175b4:	bd10      	pop	{r4, pc}
 80175b6:	bf00      	nop

080175b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 80175b8:	4800      	ldr	r0, [pc, #0]	; (80175bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 80175ba:	4770      	bx	lr
 80175bc:	2000091c 	.word	0x2000091c

080175c0 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 80175c0:	3800      	subs	r0, #0
 80175c2:	bf18      	it	ne
 80175c4:	2001      	movne	r0, #1
 80175c6:	4770      	bx	lr

080175c8 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 80175c8:	4770      	bx	lr
 80175ca:	bf00      	nop

080175cc <custom_test_msgs__srv__AddThreeInts_Response__init>:
 80175cc:	3800      	subs	r0, #0
 80175ce:	bf18      	it	ne
 80175d0:	2001      	movne	r0, #1
 80175d2:	4770      	bx	lr

080175d4 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 80175d4:	4770      	bx	lr
 80175d6:	bf00      	nop

080175d8 <drive_msgs__msg__Omni__init>:
 80175d8:	b538      	push	{r3, r4, r5, lr}
 80175da:	4604      	mov	r4, r0
 80175dc:	b128      	cbz	r0, 80175ea <drive_msgs__msg__Omni__init+0x12>
 80175de:	f7ff fe71 	bl	80172c4 <rosidl_runtime_c__String__init>
 80175e2:	4605      	mov	r5, r0
 80175e4:	b120      	cbz	r0, 80175f0 <drive_msgs__msg__Omni__init+0x18>
 80175e6:	4628      	mov	r0, r5
 80175e8:	bd38      	pop	{r3, r4, r5, pc}
 80175ea:	4605      	mov	r5, r0
 80175ec:	4628      	mov	r0, r5
 80175ee:	bd38      	pop	{r3, r4, r5, pc}
 80175f0:	4620      	mov	r0, r4
 80175f2:	f7ff fe7d 	bl	80172f0 <rosidl_runtime_c__String__fini>
 80175f6:	4628      	mov	r0, r5
 80175f8:	bd38      	pop	{r3, r4, r5, pc}
 80175fa:	bf00      	nop

080175fc <drive_msgs__msg__Omni__fini>:
 80175fc:	b108      	cbz	r0, 8017602 <drive_msgs__msg__Omni__fini+0x6>
 80175fe:	f7ff be77 	b.w	80172f0 <rosidl_runtime_c__String__fini>
 8017602:	4770      	bx	lr

08017604 <drive_msgs__msg__OmniEnc__init>:
 8017604:	b538      	push	{r3, r4, r5, lr}
 8017606:	4604      	mov	r4, r0
 8017608:	b128      	cbz	r0, 8017616 <drive_msgs__msg__OmniEnc__init+0x12>
 801760a:	f7ff fe5b 	bl	80172c4 <rosidl_runtime_c__String__init>
 801760e:	4605      	mov	r5, r0
 8017610:	b120      	cbz	r0, 801761c <drive_msgs__msg__OmniEnc__init+0x18>
 8017612:	4628      	mov	r0, r5
 8017614:	bd38      	pop	{r3, r4, r5, pc}
 8017616:	4605      	mov	r5, r0
 8017618:	4628      	mov	r0, r5
 801761a:	bd38      	pop	{r3, r4, r5, pc}
 801761c:	4620      	mov	r0, r4
 801761e:	f7ff fe67 	bl	80172f0 <rosidl_runtime_c__String__fini>
 8017622:	4628      	mov	r0, r5
 8017624:	bd38      	pop	{r3, r4, r5, pc}
 8017626:	bf00      	nop

08017628 <drive_msgs__msg__OmniEnc__fini>:
 8017628:	b108      	cbz	r0, 801762e <drive_msgs__msg__OmniEnc__fini+0x6>
 801762a:	f7ff be61 	b.w	80172f0 <rosidl_runtime_c__String__fini>
 801762e:	4770      	bx	lr

08017630 <manip_msgs__msg__Cmd__init>:
 8017630:	3800      	subs	r0, #0
 8017632:	bf18      	it	ne
 8017634:	2001      	movne	r0, #1
 8017636:	4770      	bx	lr

08017638 <manip_msgs__msg__Cmd__fini>:
 8017638:	4770      	bx	lr
 801763a:	bf00      	nop

0801763c <ucdr_serialize_endian_array_char>:
 801763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017640:	4619      	mov	r1, r3
 8017642:	461f      	mov	r7, r3
 8017644:	4605      	mov	r5, r0
 8017646:	4690      	mov	r8, r2
 8017648:	f7fb fe16 	bl	8013278 <ucdr_check_buffer_available_for>
 801764c:	b9e0      	cbnz	r0, 8017688 <ucdr_serialize_endian_array_char+0x4c>
 801764e:	463e      	mov	r6, r7
 8017650:	e00b      	b.n	801766a <ucdr_serialize_endian_array_char+0x2e>
 8017652:	4441      	add	r1, r8
 8017654:	68a8      	ldr	r0, [r5, #8]
 8017656:	4622      	mov	r2, r4
 8017658:	1b36      	subs	r6, r6, r4
 801765a:	f009 fc98 	bl	8020f8e <memcpy>
 801765e:	68ab      	ldr	r3, [r5, #8]
 8017660:	6928      	ldr	r0, [r5, #16]
 8017662:	4423      	add	r3, r4
 8017664:	4420      	add	r0, r4
 8017666:	60ab      	str	r3, [r5, #8]
 8017668:	6128      	str	r0, [r5, #16]
 801766a:	4631      	mov	r1, r6
 801766c:	2201      	movs	r2, #1
 801766e:	4628      	mov	r0, r5
 8017670:	f7fb fe8c 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 8017674:	1bb9      	subs	r1, r7, r6
 8017676:	4604      	mov	r4, r0
 8017678:	2800      	cmp	r0, #0
 801767a:	d1ea      	bne.n	8017652 <ucdr_serialize_endian_array_char+0x16>
 801767c:	2301      	movs	r3, #1
 801767e:	7da8      	ldrb	r0, [r5, #22]
 8017680:	756b      	strb	r3, [r5, #21]
 8017682:	4058      	eors	r0, r3
 8017684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017688:	463a      	mov	r2, r7
 801768a:	4641      	mov	r1, r8
 801768c:	68a8      	ldr	r0, [r5, #8]
 801768e:	f009 fc7e 	bl	8020f8e <memcpy>
 8017692:	68aa      	ldr	r2, [r5, #8]
 8017694:	692b      	ldr	r3, [r5, #16]
 8017696:	443a      	add	r2, r7
 8017698:	443b      	add	r3, r7
 801769a:	60aa      	str	r2, [r5, #8]
 801769c:	612b      	str	r3, [r5, #16]
 801769e:	e7ed      	b.n	801767c <ucdr_serialize_endian_array_char+0x40>

080176a0 <ucdr_deserialize_endian_array_char>:
 80176a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a4:	4619      	mov	r1, r3
 80176a6:	461f      	mov	r7, r3
 80176a8:	4605      	mov	r5, r0
 80176aa:	4690      	mov	r8, r2
 80176ac:	f7fb fde4 	bl	8013278 <ucdr_check_buffer_available_for>
 80176b0:	b9e8      	cbnz	r0, 80176ee <ucdr_deserialize_endian_array_char+0x4e>
 80176b2:	463e      	mov	r6, r7
 80176b4:	e00c      	b.n	80176d0 <ucdr_deserialize_endian_array_char+0x30>
 80176b6:	eb08 0003 	add.w	r0, r8, r3
 80176ba:	68a9      	ldr	r1, [r5, #8]
 80176bc:	4622      	mov	r2, r4
 80176be:	1b36      	subs	r6, r6, r4
 80176c0:	f009 fc65 	bl	8020f8e <memcpy>
 80176c4:	68ab      	ldr	r3, [r5, #8]
 80176c6:	6928      	ldr	r0, [r5, #16]
 80176c8:	4423      	add	r3, r4
 80176ca:	4420      	add	r0, r4
 80176cc:	60ab      	str	r3, [r5, #8]
 80176ce:	6128      	str	r0, [r5, #16]
 80176d0:	4631      	mov	r1, r6
 80176d2:	2201      	movs	r2, #1
 80176d4:	4628      	mov	r0, r5
 80176d6:	f7fb fe59 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 80176da:	1bbb      	subs	r3, r7, r6
 80176dc:	4604      	mov	r4, r0
 80176de:	2800      	cmp	r0, #0
 80176e0:	d1e9      	bne.n	80176b6 <ucdr_deserialize_endian_array_char+0x16>
 80176e2:	2301      	movs	r3, #1
 80176e4:	7da8      	ldrb	r0, [r5, #22]
 80176e6:	756b      	strb	r3, [r5, #21]
 80176e8:	4058      	eors	r0, r3
 80176ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ee:	463a      	mov	r2, r7
 80176f0:	68a9      	ldr	r1, [r5, #8]
 80176f2:	4640      	mov	r0, r8
 80176f4:	f009 fc4b 	bl	8020f8e <memcpy>
 80176f8:	68aa      	ldr	r2, [r5, #8]
 80176fa:	692b      	ldr	r3, [r5, #16]
 80176fc:	443a      	add	r2, r7
 80176fe:	443b      	add	r3, r7
 8017700:	60aa      	str	r2, [r5, #8]
 8017702:	612b      	str	r3, [r5, #16]
 8017704:	e7ed      	b.n	80176e2 <ucdr_deserialize_endian_array_char+0x42>
 8017706:	bf00      	nop

08017708 <ucdr_serialize_array_uint8_t>:
 8017708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801770c:	4688      	mov	r8, r1
 801770e:	4611      	mov	r1, r2
 8017710:	4617      	mov	r7, r2
 8017712:	4605      	mov	r5, r0
 8017714:	f7fb fdb0 	bl	8013278 <ucdr_check_buffer_available_for>
 8017718:	b9e0      	cbnz	r0, 8017754 <ucdr_serialize_array_uint8_t+0x4c>
 801771a:	463e      	mov	r6, r7
 801771c:	e00b      	b.n	8017736 <ucdr_serialize_array_uint8_t+0x2e>
 801771e:	4441      	add	r1, r8
 8017720:	68a8      	ldr	r0, [r5, #8]
 8017722:	4622      	mov	r2, r4
 8017724:	1b36      	subs	r6, r6, r4
 8017726:	f009 fc32 	bl	8020f8e <memcpy>
 801772a:	68ab      	ldr	r3, [r5, #8]
 801772c:	6928      	ldr	r0, [r5, #16]
 801772e:	4423      	add	r3, r4
 8017730:	4420      	add	r0, r4
 8017732:	60ab      	str	r3, [r5, #8]
 8017734:	6128      	str	r0, [r5, #16]
 8017736:	4631      	mov	r1, r6
 8017738:	2201      	movs	r2, #1
 801773a:	4628      	mov	r0, r5
 801773c:	f7fb fe26 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 8017740:	1bb9      	subs	r1, r7, r6
 8017742:	4604      	mov	r4, r0
 8017744:	2800      	cmp	r0, #0
 8017746:	d1ea      	bne.n	801771e <ucdr_serialize_array_uint8_t+0x16>
 8017748:	2301      	movs	r3, #1
 801774a:	7da8      	ldrb	r0, [r5, #22]
 801774c:	756b      	strb	r3, [r5, #21]
 801774e:	4058      	eors	r0, r3
 8017750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017754:	463a      	mov	r2, r7
 8017756:	4641      	mov	r1, r8
 8017758:	68a8      	ldr	r0, [r5, #8]
 801775a:	f009 fc18 	bl	8020f8e <memcpy>
 801775e:	68aa      	ldr	r2, [r5, #8]
 8017760:	692b      	ldr	r3, [r5, #16]
 8017762:	443a      	add	r2, r7
 8017764:	443b      	add	r3, r7
 8017766:	60aa      	str	r2, [r5, #8]
 8017768:	612b      	str	r3, [r5, #16]
 801776a:	e7ed      	b.n	8017748 <ucdr_serialize_array_uint8_t+0x40>

0801776c <ucdr_serialize_endian_array_uint8_t>:
 801776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017770:	4619      	mov	r1, r3
 8017772:	461f      	mov	r7, r3
 8017774:	4605      	mov	r5, r0
 8017776:	4690      	mov	r8, r2
 8017778:	f7fb fd7e 	bl	8013278 <ucdr_check_buffer_available_for>
 801777c:	b9e0      	cbnz	r0, 80177b8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801777e:	463e      	mov	r6, r7
 8017780:	e00b      	b.n	801779a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8017782:	4441      	add	r1, r8
 8017784:	68a8      	ldr	r0, [r5, #8]
 8017786:	4622      	mov	r2, r4
 8017788:	1b36      	subs	r6, r6, r4
 801778a:	f009 fc00 	bl	8020f8e <memcpy>
 801778e:	68ab      	ldr	r3, [r5, #8]
 8017790:	6928      	ldr	r0, [r5, #16]
 8017792:	4423      	add	r3, r4
 8017794:	4420      	add	r0, r4
 8017796:	60ab      	str	r3, [r5, #8]
 8017798:	6128      	str	r0, [r5, #16]
 801779a:	4631      	mov	r1, r6
 801779c:	2201      	movs	r2, #1
 801779e:	4628      	mov	r0, r5
 80177a0:	f7fb fdf4 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 80177a4:	1bb9      	subs	r1, r7, r6
 80177a6:	4604      	mov	r4, r0
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d1ea      	bne.n	8017782 <ucdr_serialize_endian_array_uint8_t+0x16>
 80177ac:	2301      	movs	r3, #1
 80177ae:	7da8      	ldrb	r0, [r5, #22]
 80177b0:	756b      	strb	r3, [r5, #21]
 80177b2:	4058      	eors	r0, r3
 80177b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b8:	463a      	mov	r2, r7
 80177ba:	4641      	mov	r1, r8
 80177bc:	68a8      	ldr	r0, [r5, #8]
 80177be:	f009 fbe6 	bl	8020f8e <memcpy>
 80177c2:	68aa      	ldr	r2, [r5, #8]
 80177c4:	692b      	ldr	r3, [r5, #16]
 80177c6:	443a      	add	r2, r7
 80177c8:	443b      	add	r3, r7
 80177ca:	60aa      	str	r2, [r5, #8]
 80177cc:	612b      	str	r3, [r5, #16]
 80177ce:	e7ed      	b.n	80177ac <ucdr_serialize_endian_array_uint8_t+0x40>

080177d0 <ucdr_deserialize_array_uint8_t>:
 80177d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d4:	4688      	mov	r8, r1
 80177d6:	4611      	mov	r1, r2
 80177d8:	4617      	mov	r7, r2
 80177da:	4605      	mov	r5, r0
 80177dc:	f7fb fd4c 	bl	8013278 <ucdr_check_buffer_available_for>
 80177e0:	b9e8      	cbnz	r0, 801781e <ucdr_deserialize_array_uint8_t+0x4e>
 80177e2:	463e      	mov	r6, r7
 80177e4:	e00c      	b.n	8017800 <ucdr_deserialize_array_uint8_t+0x30>
 80177e6:	eb08 0003 	add.w	r0, r8, r3
 80177ea:	68a9      	ldr	r1, [r5, #8]
 80177ec:	4622      	mov	r2, r4
 80177ee:	1b36      	subs	r6, r6, r4
 80177f0:	f009 fbcd 	bl	8020f8e <memcpy>
 80177f4:	68ab      	ldr	r3, [r5, #8]
 80177f6:	6928      	ldr	r0, [r5, #16]
 80177f8:	4423      	add	r3, r4
 80177fa:	4420      	add	r0, r4
 80177fc:	60ab      	str	r3, [r5, #8]
 80177fe:	6128      	str	r0, [r5, #16]
 8017800:	4631      	mov	r1, r6
 8017802:	2201      	movs	r2, #1
 8017804:	4628      	mov	r0, r5
 8017806:	f7fb fdc1 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 801780a:	1bbb      	subs	r3, r7, r6
 801780c:	4604      	mov	r4, r0
 801780e:	2800      	cmp	r0, #0
 8017810:	d1e9      	bne.n	80177e6 <ucdr_deserialize_array_uint8_t+0x16>
 8017812:	2301      	movs	r3, #1
 8017814:	7da8      	ldrb	r0, [r5, #22]
 8017816:	756b      	strb	r3, [r5, #21]
 8017818:	4058      	eors	r0, r3
 801781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801781e:	463a      	mov	r2, r7
 8017820:	68a9      	ldr	r1, [r5, #8]
 8017822:	4640      	mov	r0, r8
 8017824:	f009 fbb3 	bl	8020f8e <memcpy>
 8017828:	68aa      	ldr	r2, [r5, #8]
 801782a:	692b      	ldr	r3, [r5, #16]
 801782c:	443a      	add	r2, r7
 801782e:	443b      	add	r3, r7
 8017830:	60aa      	str	r2, [r5, #8]
 8017832:	612b      	str	r3, [r5, #16]
 8017834:	e7ed      	b.n	8017812 <ucdr_deserialize_array_uint8_t+0x42>
 8017836:	bf00      	nop

08017838 <ucdr_deserialize_endian_array_uint8_t>:
 8017838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801783c:	4619      	mov	r1, r3
 801783e:	461f      	mov	r7, r3
 8017840:	4605      	mov	r5, r0
 8017842:	4690      	mov	r8, r2
 8017844:	f7fb fd18 	bl	8013278 <ucdr_check_buffer_available_for>
 8017848:	b9e8      	cbnz	r0, 8017886 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801784a:	463e      	mov	r6, r7
 801784c:	e00c      	b.n	8017868 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801784e:	eb08 0003 	add.w	r0, r8, r3
 8017852:	68a9      	ldr	r1, [r5, #8]
 8017854:	4622      	mov	r2, r4
 8017856:	1b36      	subs	r6, r6, r4
 8017858:	f009 fb99 	bl	8020f8e <memcpy>
 801785c:	68ab      	ldr	r3, [r5, #8]
 801785e:	6928      	ldr	r0, [r5, #16]
 8017860:	4423      	add	r3, r4
 8017862:	4420      	add	r0, r4
 8017864:	60ab      	str	r3, [r5, #8]
 8017866:	6128      	str	r0, [r5, #16]
 8017868:	4631      	mov	r1, r6
 801786a:	2201      	movs	r2, #1
 801786c:	4628      	mov	r0, r5
 801786e:	f7fb fd8d 	bl	801338c <ucdr_check_final_buffer_behavior_array>
 8017872:	1bbb      	subs	r3, r7, r6
 8017874:	4604      	mov	r4, r0
 8017876:	2800      	cmp	r0, #0
 8017878:	d1e9      	bne.n	801784e <ucdr_deserialize_endian_array_uint8_t+0x16>
 801787a:	2301      	movs	r3, #1
 801787c:	7da8      	ldrb	r0, [r5, #22]
 801787e:	756b      	strb	r3, [r5, #21]
 8017880:	4058      	eors	r0, r3
 8017882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017886:	463a      	mov	r2, r7
 8017888:	68a9      	ldr	r1, [r5, #8]
 801788a:	4640      	mov	r0, r8
 801788c:	f009 fb7f 	bl	8020f8e <memcpy>
 8017890:	68aa      	ldr	r2, [r5, #8]
 8017892:	692b      	ldr	r3, [r5, #16]
 8017894:	443a      	add	r2, r7
 8017896:	443b      	add	r3, r7
 8017898:	60aa      	str	r2, [r5, #8]
 801789a:	612b      	str	r3, [r5, #16]
 801789c:	e7ed      	b.n	801787a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801789e:	bf00      	nop

080178a0 <uxr_buffer_delete_entity>:
 80178a0:	b510      	push	{r4, lr}
 80178a2:	2300      	movs	r3, #0
 80178a4:	b08e      	sub	sp, #56	; 0x38
 80178a6:	4604      	mov	r4, r0
 80178a8:	9103      	str	r1, [sp, #12]
 80178aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80178ae:	2303      	movs	r3, #3
 80178b0:	2204      	movs	r2, #4
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	ab06      	add	r3, sp, #24
 80178b6:	f001 fb77 	bl	8018fa8 <uxr_prepare_stream_to_write_submessage>
 80178ba:	b918      	cbnz	r0, 80178c4 <uxr_buffer_delete_entity+0x24>
 80178bc:	4604      	mov	r4, r0
 80178be:	4620      	mov	r0, r4
 80178c0:	b00e      	add	sp, #56	; 0x38
 80178c2:	bd10      	pop	{r4, pc}
 80178c4:	9902      	ldr	r1, [sp, #8]
 80178c6:	aa05      	add	r2, sp, #20
 80178c8:	4620      	mov	r0, r4
 80178ca:	f001 fca9 	bl	8019220 <uxr_init_base_object_request>
 80178ce:	4604      	mov	r4, r0
 80178d0:	a905      	add	r1, sp, #20
 80178d2:	a806      	add	r0, sp, #24
 80178d4:	f003 fbae 	bl	801b034 <uxr_serialize_DELETE_Payload>
 80178d8:	4620      	mov	r0, r4
 80178da:	b00e      	add	sp, #56	; 0x38
 80178dc:	bd10      	pop	{r4, pc}
 80178de:	bf00      	nop

080178e0 <uxr_common_create_entity>:
 80178e0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80178e4:	b510      	push	{r4, lr}
 80178e6:	f1bc 0f01 	cmp.w	ip, #1
 80178ea:	b08c      	sub	sp, #48	; 0x30
 80178ec:	4604      	mov	r4, r0
 80178ee:	9202      	str	r2, [sp, #8]
 80178f0:	bf0c      	ite	eq
 80178f2:	f003 0201 	andeq.w	r2, r3, #1
 80178f6:	2200      	movne	r2, #0
 80178f8:	330e      	adds	r3, #14
 80178fa:	9103      	str	r1, [sp, #12]
 80178fc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017900:	441a      	add	r2, r3
 8017902:	ab04      	add	r3, sp, #16
 8017904:	9101      	str	r1, [sp, #4]
 8017906:	2101      	movs	r1, #1
 8017908:	b292      	uxth	r2, r2
 801790a:	9100      	str	r1, [sp, #0]
 801790c:	9903      	ldr	r1, [sp, #12]
 801790e:	f001 fb4b 	bl	8018fa8 <uxr_prepare_stream_to_write_submessage>
 8017912:	b918      	cbnz	r0, 801791c <uxr_common_create_entity+0x3c>
 8017914:	4604      	mov	r4, r0
 8017916:	4620      	mov	r0, r4
 8017918:	b00c      	add	sp, #48	; 0x30
 801791a:	bd10      	pop	{r4, pc}
 801791c:	9902      	ldr	r1, [sp, #8]
 801791e:	4620      	mov	r0, r4
 8017920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017922:	f001 fc7d 	bl	8019220 <uxr_init_base_object_request>
 8017926:	4604      	mov	r4, r0
 8017928:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801792a:	a804      	add	r0, sp, #16
 801792c:	f003 fadc 	bl	801aee8 <uxr_serialize_CREATE_Payload>
 8017930:	4620      	mov	r0, r4
 8017932:	b00c      	add	sp, #48	; 0x30
 8017934:	bd10      	pop	{r4, pc}
 8017936:	bf00      	nop

08017938 <uxr_buffer_create_participant_bin>:
 8017938:	b570      	push	{r4, r5, r6, lr}
 801793a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801793e:	4605      	mov	r5, r0
 8017940:	ac11      	add	r4, sp, #68	; 0x44
 8017942:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8017946:	2303      	movs	r3, #3
 8017948:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801794c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017950:	7223      	strb	r3, [r4, #8]
 8017952:	2300      	movs	r3, #0
 8017954:	2201      	movs	r2, #1
 8017956:	f88d 3014 	strb.w	r3, [sp, #20]
 801795a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 801795c:	7122      	strb	r2, [r4, #4]
 801795e:	b1cb      	cbz	r3, 8017994 <uxr_buffer_create_participant_bin+0x5c>
 8017960:	f88d 201c 	strb.w	r2, [sp, #28]
 8017964:	9308      	str	r3, [sp, #32]
 8017966:	f44f 7200 	mov.w	r2, #512	; 0x200
 801796a:	a915      	add	r1, sp, #84	; 0x54
 801796c:	a809      	add	r0, sp, #36	; 0x24
 801796e:	f7fb fcd7 	bl	8013320 <ucdr_init_buffer>
 8017972:	a905      	add	r1, sp, #20
 8017974:	a809      	add	r0, sp, #36	; 0x24
 8017976:	f002 fe6d 	bl	801a654 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801797a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801797c:	9600      	str	r6, [sp, #0]
 801797e:	4628      	mov	r0, r5
 8017980:	9401      	str	r4, [sp, #4]
 8017982:	60e3      	str	r3, [r4, #12]
 8017984:	b29b      	uxth	r3, r3
 8017986:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801798a:	f7ff ffa9 	bl	80178e0 <uxr_common_create_entity>
 801798e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8017992:	bd70      	pop	{r4, r5, r6, pc}
 8017994:	f88d 301c 	strb.w	r3, [sp, #28]
 8017998:	e7e5      	b.n	8017966 <uxr_buffer_create_participant_bin+0x2e>
 801799a:	bf00      	nop

0801799c <uxr_buffer_create_topic_bin>:
 801799c:	b570      	push	{r4, r5, r6, lr}
 801799e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80179a2:	4605      	mov	r5, r0
 80179a4:	4618      	mov	r0, r3
 80179a6:	9105      	str	r1, [sp, #20]
 80179a8:	a997      	add	r1, sp, #604	; 0x25c
 80179aa:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 80179ae:	ac13      	add	r4, sp, #76	; 0x4c
 80179b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80179b4:	2302      	movs	r3, #2
 80179b6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80179ba:	f000 fa8d 	bl	8017ed8 <uxr_object_id_to_raw>
 80179be:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80179c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80179c4:	a917      	add	r1, sp, #92	; 0x5c
 80179c6:	a80b      	add	r0, sp, #44	; 0x2c
 80179c8:	9306      	str	r3, [sp, #24]
 80179ca:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80179cc:	930a      	str	r3, [sp, #40]	; 0x28
 80179ce:	2303      	movs	r3, #3
 80179d0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80179d4:	2301      	movs	r3, #1
 80179d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80179da:	2300      	movs	r3, #0
 80179dc:	f88d 301c 	strb.w	r3, [sp, #28]
 80179e0:	f7fb fc9e 	bl	8013320 <ucdr_init_buffer>
 80179e4:	a906      	add	r1, sp, #24
 80179e6:	a80b      	add	r0, sp, #44	; 0x2c
 80179e8:	f002 fe56 	bl	801a698 <uxr_serialize_OBJK_Topic_Binary>
 80179ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179ee:	4628      	mov	r0, r5
 80179f0:	9600      	str	r6, [sp, #0]
 80179f2:	9316      	str	r3, [sp, #88]	; 0x58
 80179f4:	b29b      	uxth	r3, r3
 80179f6:	9401      	str	r4, [sp, #4]
 80179f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80179fc:	f7ff ff70 	bl	80178e0 <uxr_common_create_entity>
 8017a00:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8017a04:	bd70      	pop	{r4, r5, r6, pc}
 8017a06:	bf00      	nop

08017a08 <uxr_buffer_create_publisher_bin>:
 8017a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a0a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8017a0e:	2603      	movs	r6, #3
 8017a10:	4605      	mov	r5, r0
 8017a12:	4618      	mov	r0, r3
 8017a14:	9105      	str	r1, [sp, #20]
 8017a16:	a992      	add	r1, sp, #584	; 0x248
 8017a18:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8017a1c:	ac0e      	add	r4, sp, #56	; 0x38
 8017a1e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8017a22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a26:	f000 fa57 	bl	8017ed8 <uxr_object_id_to_raw>
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a30:	a912      	add	r1, sp, #72	; 0x48
 8017a32:	a806      	add	r0, sp, #24
 8017a34:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017a38:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017a3c:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8017a40:	f7fb fc6e 	bl	8013320 <ucdr_init_buffer>
 8017a44:	a993      	add	r1, sp, #588	; 0x24c
 8017a46:	a806      	add	r0, sp, #24
 8017a48:	f002 feda 	bl	801a800 <uxr_serialize_OBJK_Publisher_Binary>
 8017a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a4e:	4628      	mov	r0, r5
 8017a50:	9700      	str	r7, [sp, #0]
 8017a52:	9311      	str	r3, [sp, #68]	; 0x44
 8017a54:	b29b      	uxth	r3, r3
 8017a56:	9401      	str	r4, [sp, #4]
 8017a58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017a5c:	f7ff ff40 	bl	80178e0 <uxr_common_create_entity>
 8017a60:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8017a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a66:	bf00      	nop

08017a68 <uxr_buffer_create_subscriber_bin>:
 8017a68:	b570      	push	{r4, r5, r6, lr}
 8017a6a:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8017a6e:	4605      	mov	r5, r0
 8017a70:	4618      	mov	r0, r3
 8017a72:	9105      	str	r1, [sp, #20]
 8017a74:	a992      	add	r1, sp, #584	; 0x248
 8017a76:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8017a7a:	ac0e      	add	r4, sp, #56	; 0x38
 8017a7c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a80:	2304      	movs	r3, #4
 8017a82:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8017a86:	f000 fa27 	bl	8017ed8 <uxr_object_id_to_raw>
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a90:	a912      	add	r1, sp, #72	; 0x48
 8017a92:	a806      	add	r0, sp, #24
 8017a94:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017a98:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017a9c:	2303      	movs	r3, #3
 8017a9e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017aa2:	f7fb fc3d 	bl	8013320 <ucdr_init_buffer>
 8017aa6:	a993      	add	r1, sp, #588	; 0x24c
 8017aa8:	a806      	add	r0, sp, #24
 8017aaa:	f002 ff59 	bl	801a960 <uxr_serialize_OBJK_Subscriber_Binary>
 8017aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	9600      	str	r6, [sp, #0]
 8017ab4:	9311      	str	r3, [sp, #68]	; 0x44
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	9401      	str	r4, [sp, #4]
 8017aba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017abe:	f7ff ff0f 	bl	80178e0 <uxr_common_create_entity>
 8017ac2:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8017ac6:	bd70      	pop	{r4, r5, r6, pc}

08017ac8 <uxr_buffer_create_datawriter_bin>:
 8017ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017acc:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017ad0:	4606      	mov	r6, r0
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	2703      	movs	r7, #3
 8017ad6:	ac1d      	add	r4, sp, #116	; 0x74
 8017ad8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8017adc:	9105      	str	r1, [sp, #20]
 8017ade:	a9a1      	add	r1, sp, #644	; 0x284
 8017ae0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8017ae4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017ae8:	2305      	movs	r3, #5
 8017aea:	7123      	strb	r3, [r4, #4]
 8017aec:	f000 f9f4 	bl	8017ed8 <uxr_object_id_to_raw>
 8017af0:	a90e      	add	r1, sp, #56	; 0x38
 8017af2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8017af4:	7227      	strb	r7, [r4, #8]
 8017af6:	f000 f9ef 	bl	8017ed8 <uxr_object_id_to_raw>
 8017afa:	2300      	movs	r3, #0
 8017afc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017b00:	3d00      	subs	r5, #0
 8017b02:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8017b06:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017b0a:	bf18      	it	ne
 8017b0c:	2501      	movne	r5, #1
 8017b0e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017b12:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017b16:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017b1a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017b1e:	2301      	movs	r3, #1
 8017b20:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017b24:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017b28:	bb8a      	cbnz	r2, 8017b8e <uxr_buffer_create_datawriter_bin+0xc6>
 8017b2a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017b2e:	f04f 0c13 	mov.w	ip, #19
 8017b32:	250b      	movs	r5, #11
 8017b34:	2221      	movs	r2, #33	; 0x21
 8017b36:	2111      	movs	r1, #17
 8017b38:	2009      	movs	r0, #9
 8017b3a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017b3e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017b42:	b923      	cbnz	r3, 8017b4e <uxr_buffer_create_datawriter_bin+0x86>
 8017b44:	4672      	mov	r2, lr
 8017b46:	4661      	mov	r1, ip
 8017b48:	4628      	mov	r0, r5
 8017b4a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017b4e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017b52:	2b01      	cmp	r3, #1
 8017b54:	d025      	beq.n	8017ba2 <uxr_buffer_create_datawriter_bin+0xda>
 8017b56:	2b03      	cmp	r3, #3
 8017b58:	d029      	beq.n	8017bae <uxr_buffer_create_datawriter_bin+0xe6>
 8017b5a:	b32b      	cbz	r3, 8017ba8 <uxr_buffer_create_datawriter_bin+0xe0>
 8017b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b60:	a921      	add	r1, sp, #132	; 0x84
 8017b62:	a806      	add	r0, sp, #24
 8017b64:	f7fb fbdc 	bl	8013320 <ucdr_init_buffer>
 8017b68:	a90e      	add	r1, sp, #56	; 0x38
 8017b6a:	a806      	add	r0, sp, #24
 8017b6c:	f002 ffaa 	bl	801aac4 <uxr_serialize_OBJK_DataWriter_Binary>
 8017b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b72:	f8cd 8000 	str.w	r8, [sp]
 8017b76:	4630      	mov	r0, r6
 8017b78:	9401      	str	r4, [sp, #4]
 8017b7a:	60e3      	str	r3, [r4, #12]
 8017b7c:	b29b      	uxth	r3, r3
 8017b7e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017b82:	f7ff fead 	bl	80178e0 <uxr_common_create_entity>
 8017b86:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b8e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017b92:	f04f 0c12 	mov.w	ip, #18
 8017b96:	250a      	movs	r5, #10
 8017b98:	2220      	movs	r2, #32
 8017b9a:	2110      	movs	r1, #16
 8017b9c:	2008      	movs	r0, #8
 8017b9e:	2702      	movs	r7, #2
 8017ba0:	e7cd      	b.n	8017b3e <uxr_buffer_create_datawriter_bin+0x76>
 8017ba2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017ba6:	e7d9      	b.n	8017b5c <uxr_buffer_create_datawriter_bin+0x94>
 8017ba8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017bac:	e7d6      	b.n	8017b5c <uxr_buffer_create_datawriter_bin+0x94>
 8017bae:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017bb2:	e7d3      	b.n	8017b5c <uxr_buffer_create_datawriter_bin+0x94>

08017bb4 <uxr_buffer_create_datareader_bin>:
 8017bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017bbc:	4606      	mov	r6, r0
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	2703      	movs	r7, #3
 8017bc2:	ac1f      	add	r4, sp, #124	; 0x7c
 8017bc4:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8017bc8:	9105      	str	r1, [sp, #20]
 8017bca:	a9a3      	add	r1, sp, #652	; 0x28c
 8017bcc:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8017bd0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017bd4:	2306      	movs	r3, #6
 8017bd6:	7123      	strb	r3, [r4, #4]
 8017bd8:	f000 f97e 	bl	8017ed8 <uxr_object_id_to_raw>
 8017bdc:	a90e      	add	r1, sp, #56	; 0x38
 8017bde:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017be0:	7227      	strb	r7, [r4, #8]
 8017be2:	f000 f979 	bl	8017ed8 <uxr_object_id_to_raw>
 8017be6:	2300      	movs	r3, #0
 8017be8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017bec:	3d00      	subs	r5, #0
 8017bee:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8017bf2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8017bf6:	bf18      	it	ne
 8017bf8:	2501      	movne	r5, #1
 8017bfa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017bfe:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017c02:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017c06:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017c0a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017c0e:	2301      	movs	r3, #1
 8017c10:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017c14:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017c18:	bb8a      	cbnz	r2, 8017c7e <uxr_buffer_create_datareader_bin+0xca>
 8017c1a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017c1e:	f04f 0c13 	mov.w	ip, #19
 8017c22:	250b      	movs	r5, #11
 8017c24:	2221      	movs	r2, #33	; 0x21
 8017c26:	2111      	movs	r1, #17
 8017c28:	2009      	movs	r0, #9
 8017c2a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017c2e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017c32:	b923      	cbnz	r3, 8017c3e <uxr_buffer_create_datareader_bin+0x8a>
 8017c34:	4672      	mov	r2, lr
 8017c36:	4661      	mov	r1, ip
 8017c38:	4628      	mov	r0, r5
 8017c3a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017c3e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017c42:	2b01      	cmp	r3, #1
 8017c44:	d025      	beq.n	8017c92 <uxr_buffer_create_datareader_bin+0xde>
 8017c46:	2b03      	cmp	r3, #3
 8017c48:	d029      	beq.n	8017c9e <uxr_buffer_create_datareader_bin+0xea>
 8017c4a:	b32b      	cbz	r3, 8017c98 <uxr_buffer_create_datareader_bin+0xe4>
 8017c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c50:	a923      	add	r1, sp, #140	; 0x8c
 8017c52:	a806      	add	r0, sp, #24
 8017c54:	f7fb fb64 	bl	8013320 <ucdr_init_buffer>
 8017c58:	a90e      	add	r1, sp, #56	; 0x38
 8017c5a:	a806      	add	r0, sp, #24
 8017c5c:	f002 fef6 	bl	801aa4c <uxr_serialize_OBJK_DataReader_Binary>
 8017c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c62:	f8cd 8000 	str.w	r8, [sp]
 8017c66:	4630      	mov	r0, r6
 8017c68:	9401      	str	r4, [sp, #4]
 8017c6a:	60e3      	str	r3, [r4, #12]
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c72:	f7ff fe35 	bl	80178e0 <uxr_common_create_entity>
 8017c76:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c7e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017c82:	f04f 0c12 	mov.w	ip, #18
 8017c86:	250a      	movs	r5, #10
 8017c88:	2220      	movs	r2, #32
 8017c8a:	2110      	movs	r1, #16
 8017c8c:	2008      	movs	r0, #8
 8017c8e:	2702      	movs	r7, #2
 8017c90:	e7cd      	b.n	8017c2e <uxr_buffer_create_datareader_bin+0x7a>
 8017c92:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017c96:	e7d9      	b.n	8017c4c <uxr_buffer_create_datareader_bin+0x98>
 8017c98:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017c9c:	e7d6      	b.n	8017c4c <uxr_buffer_create_datareader_bin+0x98>
 8017c9e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017ca2:	e7d3      	b.n	8017c4c <uxr_buffer_create_datareader_bin+0x98>

08017ca4 <uxr_buffer_create_replier_bin>:
 8017ca4:	b570      	push	{r4, r5, r6, lr}
 8017ca6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017caa:	4605      	mov	r5, r0
 8017cac:	4618      	mov	r0, r3
 8017cae:	9105      	str	r1, [sp, #20]
 8017cb0:	a999      	add	r1, sp, #612	; 0x264
 8017cb2:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8017cb6:	ac15      	add	r4, sp, #84	; 0x54
 8017cb8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017cbc:	2308      	movs	r3, #8
 8017cbe:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8017cc2:	f000 f909 	bl	8017ed8 <uxr_object_id_to_raw>
 8017cc6:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8017cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ccc:	a919      	add	r1, sp, #100	; 0x64
 8017cce:	a80d      	add	r0, sp, #52	; 0x34
 8017cd0:	9306      	str	r3, [sp, #24]
 8017cd2:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8017cd4:	9307      	str	r3, [sp, #28]
 8017cd6:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8017cd8:	9308      	str	r3, [sp, #32]
 8017cda:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8017cdc:	930c      	str	r3, [sp, #48]	; 0x30
 8017cde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017ce8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017cec:	2303      	movs	r3, #3
 8017cee:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8017cf2:	f7fb fb15 	bl	8013320 <ucdr_init_buffer>
 8017cf6:	a906      	add	r1, sp, #24
 8017cf8:	a80d      	add	r0, sp, #52	; 0x34
 8017cfa:	f002 ff0f 	bl	801ab1c <uxr_serialize_OBJK_Replier_Binary>
 8017cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d00:	4628      	mov	r0, r5
 8017d02:	9600      	str	r6, [sp, #0]
 8017d04:	9318      	str	r3, [sp, #96]	; 0x60
 8017d06:	b29b      	uxth	r3, r3
 8017d08:	9401      	str	r4, [sp, #4]
 8017d0a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017d0e:	f7ff fde7 	bl	80178e0 <uxr_common_create_entity>
 8017d12:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8017d16:	bd70      	pop	{r4, r5, r6, pc}

08017d18 <get_custom_error>:
 8017d18:	4b01      	ldr	r3, [pc, #4]	; (8017d20 <get_custom_error+0x8>)
 8017d1a:	7818      	ldrb	r0, [r3, #0]
 8017d1c:	4770      	bx	lr
 8017d1e:	bf00      	nop
 8017d20:	20016dec 	.word	0x20016dec

08017d24 <recv_custom_msg>:
 8017d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d28:	4693      	mov	fp, r2
 8017d2a:	b089      	sub	sp, #36	; 0x24
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	4604      	mov	r4, r0
 8017d30:	468a      	mov	sl, r1
 8017d32:	9305      	str	r3, [sp, #20]
 8017d34:	f88d 201e 	strb.w	r2, [sp, #30]
 8017d38:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017d3c:	b322      	cbz	r2, 8017d88 <recv_custom_msg+0x64>
 8017d3e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8017d42:	f10d 081f 	add.w	r8, sp, #31
 8017d46:	af05      	add	r7, sp, #20
 8017d48:	f10d 061e 	add.w	r6, sp, #30
 8017d4c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017d50:	e002      	b.n	8017d58 <recv_custom_msg+0x34>
 8017d52:	9b05      	ldr	r3, [sp, #20]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	dd0f      	ble.n	8017d78 <recv_custom_msg+0x54>
 8017d58:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8017d5c:	4623      	mov	r3, r4
 8017d5e:	4622      	mov	r2, r4
 8017d60:	4648      	mov	r0, r9
 8017d62:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017d66:	e9cd 5600 	strd	r5, r6, [sp]
 8017d6a:	f001 fc6f 	bl	801964c <uxr_read_framed_msg>
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	d0ef      	beq.n	8017d52 <recv_custom_msg+0x2e>
 8017d72:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017d76:	b1b3      	cbz	r3, 8017da6 <recv_custom_msg+0x82>
 8017d78:	4b0f      	ldr	r3, [pc, #60]	; (8017db8 <recv_custom_msg+0x94>)
 8017d7a:	2000      	movs	r0, #0
 8017d7c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017d80:	701a      	strb	r2, [r3, #0]
 8017d82:	b009      	add	sp, #36	; 0x24
 8017d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d88:	f10d 021f 	add.w	r2, sp, #31
 8017d8c:	4601      	mov	r1, r0
 8017d8e:	9200      	str	r2, [sp, #0]
 8017d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017d94:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017d98:	47a8      	blx	r5
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	d0ec      	beq.n	8017d78 <recv_custom_msg+0x54>
 8017d9e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d1e8      	bne.n	8017d78 <recv_custom_msg+0x54>
 8017da6:	f8cb 0000 	str.w	r0, [fp]
 8017daa:	2001      	movs	r0, #1
 8017dac:	f8ca 4000 	str.w	r4, [sl]
 8017db0:	b009      	add	sp, #36	; 0x24
 8017db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db6:	bf00      	nop
 8017db8:	20016dec 	.word	0x20016dec

08017dbc <send_custom_msg>:
 8017dbc:	b530      	push	{r4, r5, lr}
 8017dbe:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8017dc2:	b087      	sub	sp, #28
 8017dc4:	4614      	mov	r4, r2
 8017dc6:	b995      	cbnz	r5, 8017dee <send_custom_msg+0x32>
 8017dc8:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017dcc:	f10d 0317 	add.w	r3, sp, #23
 8017dd0:	47a8      	blx	r5
 8017dd2:	1e03      	subs	r3, r0, #0
 8017dd4:	bf18      	it	ne
 8017dd6:	2301      	movne	r3, #1
 8017dd8:	42a0      	cmp	r0, r4
 8017dda:	bf18      	it	ne
 8017ddc:	2300      	movne	r3, #0
 8017dde:	b91b      	cbnz	r3, 8017de8 <send_custom_msg+0x2c>
 8017de0:	4a0a      	ldr	r2, [pc, #40]	; (8017e0c <send_custom_msg+0x50>)
 8017de2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017de6:	7011      	strb	r1, [r2, #0]
 8017de8:	4618      	mov	r0, r3
 8017dea:	b007      	add	sp, #28
 8017dec:	bd30      	pop	{r4, r5, pc}
 8017dee:	460b      	mov	r3, r1
 8017df0:	2200      	movs	r2, #0
 8017df2:	f10d 0117 	add.w	r1, sp, #23
 8017df6:	9400      	str	r4, [sp, #0]
 8017df8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017dfc:	4602      	mov	r2, r0
 8017dfe:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017e02:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017e06:	f001 fa43 	bl	8019290 <uxr_write_framed_msg>
 8017e0a:	e7e2      	b.n	8017dd2 <send_custom_msg+0x16>
 8017e0c:	20016dec 	.word	0x20016dec

08017e10 <uxr_set_custom_transport_callbacks>:
 8017e10:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017e14:	9901      	ldr	r1, [sp, #4]
 8017e16:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017e1a:	9b00      	ldr	r3, [sp, #0]
 8017e1c:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8017e20:	4770      	bx	lr
 8017e22:	bf00      	nop

08017e24 <uxr_init_custom_transport>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017e2a:	b303      	cbz	r3, 8017e6e <uxr_init_custom_transport+0x4a>
 8017e2c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017e30:	4604      	mov	r4, r0
 8017e32:	b1e2      	cbz	r2, 8017e6e <uxr_init_custom_transport+0x4a>
 8017e34:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8017e38:	b1ca      	cbz	r2, 8017e6e <uxr_init_custom_transport+0x4a>
 8017e3a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8017e3e:	b1b2      	cbz	r2, 8017e6e <uxr_init_custom_transport+0x4a>
 8017e40:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8017e44:	4798      	blx	r3
 8017e46:	4605      	mov	r5, r0
 8017e48:	b188      	cbz	r0, 8017e6e <uxr_init_custom_transport+0x4a>
 8017e4a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8017e4e:	b98b      	cbnz	r3, 8017e74 <uxr_init_custom_transport+0x50>
 8017e50:	4b0b      	ldr	r3, [pc, #44]	; (8017e80 <uxr_init_custom_transport+0x5c>)
 8017e52:	4628      	mov	r0, r5
 8017e54:	490b      	ldr	r1, [pc, #44]	; (8017e84 <uxr_init_custom_transport+0x60>)
 8017e56:	4a0c      	ldr	r2, [pc, #48]	; (8017e88 <uxr_init_custom_transport+0x64>)
 8017e58:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8017e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017e60:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8017e64:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8017e68:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8017e6c:	bd38      	pop	{r3, r4, r5, pc}
 8017e6e:	2500      	movs	r5, #0
 8017e70:	4628      	mov	r0, r5
 8017e72:	bd38      	pop	{r3, r4, r5, pc}
 8017e74:	2100      	movs	r1, #0
 8017e76:	f204 2002 	addw	r0, r4, #514	; 0x202
 8017e7a:	f001 fa03 	bl	8019284 <uxr_init_framing_io>
 8017e7e:	e7e7      	b.n	8017e50 <uxr_init_custom_transport+0x2c>
 8017e80:	08017d25 	.word	0x08017d25
 8017e84:	08017dbd 	.word	0x08017dbd
 8017e88:	08017d19 	.word	0x08017d19

08017e8c <uxr_close_custom_transport>:
 8017e8c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8017e90:	4718      	bx	r3
 8017e92:	bf00      	nop

08017e94 <uxr_object_id>:
 8017e94:	b082      	sub	sp, #8
 8017e96:	2300      	movs	r3, #0
 8017e98:	f88d 1006 	strb.w	r1, [sp, #6]
 8017e9c:	f360 030f 	bfi	r3, r0, #0, #16
 8017ea0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017ea4:	f362 431f 	bfi	r3, r2, #16, #16
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	b002      	add	sp, #8
 8017eac:	4770      	bx	lr
 8017eae:	bf00      	nop

08017eb0 <uxr_object_id_from_raw>:
 8017eb0:	7843      	ldrb	r3, [r0, #1]
 8017eb2:	b082      	sub	sp, #8
 8017eb4:	7801      	ldrb	r1, [r0, #0]
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	091a      	lsrs	r2, r3, #4
 8017eba:	f003 030f 	and.w	r3, r3, #15
 8017ebe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017ec2:	f88d 3006 	strb.w	r3, [sp, #6]
 8017ec6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017eca:	f362 000f 	bfi	r0, r2, #0, #16
 8017ece:	f363 401f 	bfi	r0, r3, #16, #16
 8017ed2:	b002      	add	sp, #8
 8017ed4:	4770      	bx	lr
 8017ed6:	bf00      	nop

08017ed8 <uxr_object_id_to_raw>:
 8017ed8:	4602      	mov	r2, r0
 8017eda:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017ede:	b082      	sub	sp, #8
 8017ee0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017ee4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017ee8:	f881 c000 	strb.w	ip, [r1]
 8017eec:	7048      	strb	r0, [r1, #1]
 8017eee:	b002      	add	sp, #8
 8017ef0:	4770      	bx	lr
 8017ef2:	bf00      	nop

08017ef4 <uxr_buffer_request_data>:
 8017ef4:	b530      	push	{r4, r5, lr}
 8017ef6:	b095      	sub	sp, #84	; 0x54
 8017ef8:	4604      	mov	r4, r0
 8017efa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017efc:	9303      	str	r3, [sp, #12]
 8017efe:	2d00      	cmp	r5, #0
 8017f00:	f88d 301c 	strb.w	r3, [sp, #28]
 8017f04:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017f08:	f04f 0200 	mov.w	r2, #0
 8017f0c:	bf14      	ite	ne
 8017f0e:	2101      	movne	r1, #1
 8017f10:	4611      	moveq	r1, r2
 8017f12:	f88d 201d 	strb.w	r2, [sp, #29]
 8017f16:	f88d 201e 	strb.w	r2, [sp, #30]
 8017f1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017f1e:	d021      	beq.n	8017f64 <uxr_buffer_request_data+0x70>
 8017f20:	686b      	ldr	r3, [r5, #4]
 8017f22:	2210      	movs	r2, #16
 8017f24:	6829      	ldr	r1, [r5, #0]
 8017f26:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017f2a:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8017f2e:	2308      	movs	r3, #8
 8017f30:	2100      	movs	r1, #0
 8017f32:	4620      	mov	r0, r4
 8017f34:	e9cd 3100 	strd	r3, r1, [sp]
 8017f38:	ab0c      	add	r3, sp, #48	; 0x30
 8017f3a:	9905      	ldr	r1, [sp, #20]
 8017f3c:	f001 f834 	bl	8018fa8 <uxr_prepare_stream_to_write_submessage>
 8017f40:	b918      	cbnz	r0, 8017f4a <uxr_buffer_request_data+0x56>
 8017f42:	4604      	mov	r4, r0
 8017f44:	4620      	mov	r0, r4
 8017f46:	b015      	add	sp, #84	; 0x54
 8017f48:	bd30      	pop	{r4, r5, pc}
 8017f4a:	9904      	ldr	r1, [sp, #16]
 8017f4c:	aa06      	add	r2, sp, #24
 8017f4e:	4620      	mov	r0, r4
 8017f50:	f001 f966 	bl	8019220 <uxr_init_base_object_request>
 8017f54:	4604      	mov	r4, r0
 8017f56:	a906      	add	r1, sp, #24
 8017f58:	a80c      	add	r0, sp, #48	; 0x30
 8017f5a:	f003 f915 	bl	801b188 <uxr_serialize_READ_DATA_Payload>
 8017f5e:	4620      	mov	r0, r4
 8017f60:	b015      	add	sp, #84	; 0x54
 8017f62:	bd30      	pop	{r4, r5, pc}
 8017f64:	2208      	movs	r2, #8
 8017f66:	e7e2      	b.n	8017f2e <uxr_buffer_request_data+0x3a>

08017f68 <uxr_buffer_cancel_data>:
 8017f68:	b510      	push	{r4, lr}
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	b094      	sub	sp, #80	; 0x50
 8017f6e:	4604      	mov	r4, r0
 8017f70:	9205      	str	r2, [sp, #20]
 8017f72:	9301      	str	r3, [sp, #4]
 8017f74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017f78:	f88d 301e 	strb.w	r3, [sp, #30]
 8017f7c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8017f80:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017f84:	2308      	movs	r3, #8
 8017f86:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017f8a:	2201      	movs	r2, #1
 8017f8c:	9300      	str	r3, [sp, #0]
 8017f8e:	ab0c      	add	r3, sp, #48	; 0x30
 8017f90:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017f94:	2210      	movs	r2, #16
 8017f96:	f001 f807 	bl	8018fa8 <uxr_prepare_stream_to_write_submessage>
 8017f9a:	b918      	cbnz	r0, 8017fa4 <uxr_buffer_cancel_data+0x3c>
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	b014      	add	sp, #80	; 0x50
 8017fa2:	bd10      	pop	{r4, pc}
 8017fa4:	9905      	ldr	r1, [sp, #20]
 8017fa6:	aa06      	add	r2, sp, #24
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f001 f939 	bl	8019220 <uxr_init_base_object_request>
 8017fae:	4604      	mov	r4, r0
 8017fb0:	a906      	add	r1, sp, #24
 8017fb2:	a80c      	add	r0, sp, #48	; 0x30
 8017fb4:	f003 f8e8 	bl	801b188 <uxr_serialize_READ_DATA_Payload>
 8017fb8:	4620      	mov	r0, r4
 8017fba:	b014      	add	sp, #80	; 0x50
 8017fbc:	bd10      	pop	{r4, pc}
 8017fbe:	bf00      	nop

08017fc0 <read_submessage_format>:
 8017fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fc4:	b095      	sub	sp, #84	; 0x54
 8017fc6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8017fca:	b113      	cbz	r3, 8017fd2 <read_submessage_format+0x12>
 8017fcc:	b015      	add	sp, #84	; 0x54
 8017fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fd2:	4606      	mov	r6, r0
 8017fd4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017fd6:	460c      	mov	r4, r1
 8017fd8:	4615      	mov	r5, r2
 8017fda:	9004      	str	r0, [sp, #16]
 8017fdc:	4699      	mov	r9, r3
 8017fde:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017fe0:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8017fe4:	9005      	str	r0, [sp, #20]
 8017fe6:	a80c      	add	r0, sp, #48	; 0x30
 8017fe8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017fec:	1a52      	subs	r2, r2, r1
 8017fee:	f7fb f997 	bl	8013320 <ucdr_init_buffer>
 8017ff2:	a80c      	add	r0, sp, #48	; 0x30
 8017ff4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017ff8:	f7fb f966 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 8017ffc:	69e2      	ldr	r2, [r4, #28]
 8017ffe:	b19a      	cbz	r2, 8018028 <read_submessage_format+0x68>
 8018000:	f1b8 0f07 	cmp.w	r8, #7
 8018004:	f882 9014 	strb.w	r9, [r2, #20]
 8018008:	d040      	beq.n	801808c <read_submessage_format+0xcc>
 801800a:	f1b8 0f08 	cmp.w	r8, #8
 801800e:	d02e      	beq.n	801806e <read_submessage_format+0xae>
 8018010:	f1b8 0f06 	cmp.w	r8, #6
 8018014:	d011      	beq.n	801803a <read_submessage_format+0x7a>
 8018016:	2301      	movs	r3, #1
 8018018:	7513      	strb	r3, [r2, #20]
 801801a:	4629      	mov	r1, r5
 801801c:	4620      	mov	r0, r4
 801801e:	f7fb f9d3 	bl	80133c8 <ucdr_advance_buffer>
 8018022:	b015      	add	sp, #84	; 0x54
 8018024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018028:	f1b8 0f07 	cmp.w	r8, #7
 801802c:	d02e      	beq.n	801808c <read_submessage_format+0xcc>
 801802e:	f1b8 0f08 	cmp.w	r8, #8
 8018032:	d01c      	beq.n	801806e <read_submessage_format+0xae>
 8018034:	f1b8 0f06 	cmp.w	r8, #6
 8018038:	d1ef      	bne.n	801801a <read_submessage_format+0x5a>
 801803a:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801803e:	f1b8 0f00 	cmp.w	r8, #0
 8018042:	d011      	beq.n	8018068 <read_submessage_format+0xa8>
 8018044:	ab0c      	add	r3, sp, #48	; 0x30
 8018046:	9501      	str	r5, [sp, #4]
 8018048:	463a      	mov	r2, r7
 801804a:	4630      	mov	r0, r6
 801804c:	9300      	str	r3, [sp, #0]
 801804e:	2306      	movs	r3, #6
 8018050:	f88d 3016 	strb.w	r3, [sp, #22]
 8018054:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8018058:	9302      	str	r3, [sp, #8]
 801805a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801805e:	47c0      	blx	r8
 8018060:	2301      	movs	r3, #1
 8018062:	69e2      	ldr	r2, [r4, #28]
 8018064:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018068:	2a00      	cmp	r2, #0
 801806a:	d1d4      	bne.n	8018016 <read_submessage_format+0x56>
 801806c:	e7d5      	b.n	801801a <read_submessage_format+0x5a>
 801806e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8018072:	2b00      	cmp	r3, #0
 8018074:	d0f8      	beq.n	8018068 <read_submessage_format+0xa8>
 8018076:	a80c      	add	r0, sp, #48	; 0x30
 8018078:	a906      	add	r1, sp, #24
 801807a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801807e:	f003 f94f 	bl	801b320 <uxr_deserialize_SampleIdentity>
 8018082:	b9a0      	cbnz	r0, 80180ae <read_submessage_format+0xee>
 8018084:	69e2      	ldr	r2, [r4, #28]
 8018086:	2a00      	cmp	r2, #0
 8018088:	d1c5      	bne.n	8018016 <read_submessage_format+0x56>
 801808a:	e7c6      	b.n	801801a <read_submessage_format+0x5a>
 801808c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8018090:	b13b      	cbz	r3, 80180a2 <read_submessage_format+0xe2>
 8018092:	a906      	add	r1, sp, #24
 8018094:	a80c      	add	r0, sp, #48	; 0x30
 8018096:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801809a:	f002 fe15 	bl	801acc8 <uxr_deserialize_BaseObjectRequest>
 801809e:	bb60      	cbnz	r0, 80180fa <read_submessage_format+0x13a>
 80180a0:	69e2      	ldr	r2, [r4, #28]
 80180a2:	68a3      	ldr	r3, [r4, #8]
 80180a4:	442b      	add	r3, r5
 80180a6:	60a3      	str	r3, [r4, #8]
 80180a8:	2a00      	cmp	r2, #0
 80180aa:	d1b4      	bne.n	8018016 <read_submessage_format+0x56>
 80180ac:	e7b5      	b.n	801801a <read_submessage_format+0x5a>
 80180ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80180b0:	a80c      	add	r0, sp, #48	; 0x30
 80180b2:	eba8 0803 	sub.w	r8, r8, r3
 80180b6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80180ba:	44a8      	add	r8, r5
 80180bc:	1a52      	subs	r2, r2, r1
 80180be:	f7fb f92f 	bl	8013320 <ucdr_init_buffer>
 80180c2:	a80c      	add	r0, sp, #48	; 0x30
 80180c4:	fa1f f888 	uxth.w	r8, r8
 80180c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80180cc:	f7fb f8fc 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 80180d0:	ab0c      	add	r3, sp, #48	; 0x30
 80180d2:	2108      	movs	r1, #8
 80180d4:	f8cd 8004 	str.w	r8, [sp, #4]
 80180d8:	9300      	str	r3, [sp, #0]
 80180da:	463a      	mov	r2, r7
 80180dc:	f88d 1016 	strb.w	r1, [sp, #22]
 80180e0:	ab06      	add	r3, sp, #24
 80180e2:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 80180e6:	4630      	mov	r0, r6
 80180e8:	9102      	str	r1, [sp, #8]
 80180ea:	9905      	ldr	r1, [sp, #20]
 80180ec:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 80180f0:	47b8      	blx	r7
 80180f2:	2301      	movs	r3, #1
 80180f4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80180f8:	e7c4      	b.n	8018084 <read_submessage_format+0xc4>
 80180fa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80180fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018100:	a80c      	add	r0, sp, #48	; 0x30
 8018102:	1a52      	subs	r2, r2, r1
 8018104:	eba8 0803 	sub.w	r8, r8, r3
 8018108:	f7fb f90a 	bl	8013320 <ucdr_init_buffer>
 801810c:	a80c      	add	r0, sp, #48	; 0x30
 801810e:	44a8      	add	r8, r5
 8018110:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018114:	f7fb f8d8 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 8018118:	ab0c      	add	r3, sp, #48	; 0x30
 801811a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801811e:	fa1f f888 	uxth.w	r8, r8
 8018122:	9300      	str	r3, [sp, #0]
 8018124:	463a      	mov	r2, r7
 8018126:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801812a:	4630      	mov	r0, r6
 801812c:	f8cd 8004 	str.w	r8, [sp, #4]
 8018130:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018134:	2107      	movs	r1, #7
 8018136:	f88d 1016 	strb.w	r1, [sp, #22]
 801813a:	b29b      	uxth	r3, r3
 801813c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8018140:	9102      	str	r1, [sp, #8]
 8018142:	9905      	ldr	r1, [sp, #20]
 8018144:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8018148:	47b8      	blx	r7
 801814a:	2301      	movs	r3, #1
 801814c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018150:	e7a6      	b.n	80180a0 <read_submessage_format+0xe0>
 8018152:	bf00      	nop

08018154 <on_get_fragmentation_info>:
 8018154:	b500      	push	{lr}
 8018156:	b08b      	sub	sp, #44	; 0x2c
 8018158:	4601      	mov	r1, r0
 801815a:	2204      	movs	r2, #4
 801815c:	a802      	add	r0, sp, #8
 801815e:	f7fb f8df 	bl	8013320 <ucdr_init_buffer>
 8018162:	f10d 0305 	add.w	r3, sp, #5
 8018166:	f10d 0206 	add.w	r2, sp, #6
 801816a:	a901      	add	r1, sp, #4
 801816c:	a802      	add	r0, sp, #8
 801816e:	f001 fe5d 	bl	8019e2c <uxr_read_submessage_header>
 8018172:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018176:	2b0d      	cmp	r3, #13
 8018178:	d003      	beq.n	8018182 <on_get_fragmentation_info+0x2e>
 801817a:	2000      	movs	r0, #0
 801817c:	b00b      	add	sp, #44	; 0x2c
 801817e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018182:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018186:	f013 0f02 	tst.w	r3, #2
 801818a:	bf14      	ite	ne
 801818c:	2002      	movne	r0, #2
 801818e:	2001      	moveq	r0, #1
 8018190:	b00b      	add	sp, #44	; 0x2c
 8018192:	f85d fb04 	ldr.w	pc, [sp], #4
 8018196:	bf00      	nop

08018198 <read_submessage_get_info>:
 8018198:	b570      	push	{r4, r5, r6, lr}
 801819a:	2500      	movs	r5, #0
 801819c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80181a0:	460e      	mov	r6, r1
 80181a2:	4604      	mov	r4, r0
 80181a4:	f44f 7224 	mov.w	r2, #656	; 0x290
 80181a8:	4629      	mov	r1, r5
 80181aa:	a810      	add	r0, sp, #64	; 0x40
 80181ac:	9503      	str	r5, [sp, #12]
 80181ae:	9504      	str	r5, [sp, #16]
 80181b0:	f008 fe20 	bl	8020df4 <memset>
 80181b4:	a903      	add	r1, sp, #12
 80181b6:	4630      	mov	r0, r6
 80181b8:	f002 ff26 	bl	801b008 <uxr_deserialize_GET_INFO_Payload>
 80181bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80181c0:	4620      	mov	r0, r4
 80181c2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80181c6:	f001 f823 	bl	8019210 <uxr_session_header_offset>
 80181ca:	462b      	mov	r3, r5
 80181cc:	220c      	movs	r2, #12
 80181ce:	a905      	add	r1, sp, #20
 80181d0:	9000      	str	r0, [sp, #0]
 80181d2:	a808      	add	r0, sp, #32
 80181d4:	f7fb f892 	bl	80132fc <ucdr_init_buffer_origin_offset>
 80181d8:	a910      	add	r1, sp, #64	; 0x40
 80181da:	a808      	add	r0, sp, #32
 80181dc:	f002 ff88 	bl	801b0f0 <uxr_serialize_INFO_Payload>
 80181e0:	9b08      	ldr	r3, [sp, #32]
 80181e2:	462a      	mov	r2, r5
 80181e4:	4629      	mov	r1, r5
 80181e6:	4620      	mov	r0, r4
 80181e8:	f000 ffbe 	bl	8019168 <uxr_stamp_session_header>
 80181ec:	a808      	add	r0, sp, #32
 80181ee:	f7fb f8c5 	bl	801337c <ucdr_buffer_length>
 80181f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80181f4:	4602      	mov	r2, r0
 80181f6:	a905      	add	r1, sp, #20
 80181f8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80181fc:	47a0      	blx	r4
 80181fe:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8018202:	bd70      	pop	{r4, r5, r6, pc}

08018204 <write_submessage_acknack.isra.0>:
 8018204:	b570      	push	{r4, r5, r6, lr}
 8018206:	b092      	sub	sp, #72	; 0x48
 8018208:	4605      	mov	r5, r0
 801820a:	460e      	mov	r6, r1
 801820c:	4614      	mov	r4, r2
 801820e:	f000 ffff 	bl	8019210 <uxr_session_header_offset>
 8018212:	a905      	add	r1, sp, #20
 8018214:	9000      	str	r0, [sp, #0]
 8018216:	2300      	movs	r3, #0
 8018218:	a80a      	add	r0, sp, #40	; 0x28
 801821a:	2211      	movs	r2, #17
 801821c:	f7fb f86e 	bl	80132fc <ucdr_init_buffer_origin_offset>
 8018220:	2218      	movs	r2, #24
 8018222:	2300      	movs	r3, #0
 8018224:	210a      	movs	r1, #10
 8018226:	fb02 5404 	mla	r4, r2, r4, r5
 801822a:	a80a      	add	r0, sp, #40	; 0x28
 801822c:	2205      	movs	r2, #5
 801822e:	3450      	adds	r4, #80	; 0x50
 8018230:	f001 fde2 	bl	8019df8 <uxr_buffer_submessage_header>
 8018234:	a903      	add	r1, sp, #12
 8018236:	4620      	mov	r0, r4
 8018238:	f006 fb50 	bl	801e8dc <uxr_compute_acknack>
 801823c:	ba40      	rev16	r0, r0
 801823e:	a903      	add	r1, sp, #12
 8018240:	f88d 6010 	strb.w	r6, [sp, #16]
 8018244:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018248:	a80a      	add	r0, sp, #40	; 0x28
 801824a:	f002 ffc3 	bl	801b1d4 <uxr_serialize_ACKNACK_Payload>
 801824e:	2200      	movs	r2, #0
 8018250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018252:	4628      	mov	r0, r5
 8018254:	4611      	mov	r1, r2
 8018256:	f000 ff87 	bl	8019168 <uxr_stamp_session_header>
 801825a:	a80a      	add	r0, sp, #40	; 0x28
 801825c:	f7fb f88e 	bl	801337c <ucdr_buffer_length>
 8018260:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8018262:	4602      	mov	r2, r0
 8018264:	a905      	add	r1, sp, #20
 8018266:	e9d3 0400 	ldrd	r0, r4, [r3]
 801826a:	47a0      	blx	r4
 801826c:	b012      	add	sp, #72	; 0x48
 801826e:	bd70      	pop	{r4, r5, r6, pc}

08018270 <uxr_init_session>:
 8018270:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80182a8 <uxr_init_session+0x38>
 8018274:	2300      	movs	r3, #0
 8018276:	b510      	push	{r4, lr}
 8018278:	4604      	mov	r4, r0
 801827a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801827e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8018282:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8018286:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801828a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801828e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8018292:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8018296:	2181      	movs	r1, #129	; 0x81
 8018298:	f000 feca 	bl	8019030 <uxr_init_session_info>
 801829c:	f104 0008 	add.w	r0, r4, #8
 80182a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182a4:	f001 bcc4 	b.w	8019c30 <uxr_init_stream_storage>
	...

080182b0 <uxr_set_status_callback>:
 80182b0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80182b4:	4770      	bx	lr
 80182b6:	bf00      	nop

080182b8 <uxr_set_topic_callback>:
 80182b8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80182bc:	4770      	bx	lr
 80182be:	bf00      	nop

080182c0 <uxr_set_request_callback>:
 80182c0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80182c4:	4770      	bx	lr
 80182c6:	bf00      	nop

080182c8 <uxr_set_reply_callback>:
 80182c8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80182cc:	4770      	bx	lr
 80182ce:	bf00      	nop

080182d0 <uxr_create_output_best_effort_stream>:
 80182d0:	b510      	push	{r4, lr}
 80182d2:	4604      	mov	r4, r0
 80182d4:	b084      	sub	sp, #16
 80182d6:	e9cd 2100 	strd	r2, r1, [sp]
 80182da:	f000 ff99 	bl	8019210 <uxr_session_header_offset>
 80182de:	4603      	mov	r3, r0
 80182e0:	f104 0008 	add.w	r0, r4, #8
 80182e4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80182e8:	b004      	add	sp, #16
 80182ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182ee:	f001 bce5 	b.w	8019cbc <uxr_add_output_best_effort_buffer>
 80182f2:	bf00      	nop

080182f4 <uxr_create_output_reliable_stream>:
 80182f4:	b530      	push	{r4, r5, lr}
 80182f6:	b089      	sub	sp, #36	; 0x24
 80182f8:	4604      	mov	r4, r0
 80182fa:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80182fe:	9303      	str	r3, [sp, #12]
 8018300:	f000 ff86 	bl	8019210 <uxr_session_header_offset>
 8018304:	4605      	mov	r5, r0
 8018306:	9905      	ldr	r1, [sp, #20]
 8018308:	f104 0008 	add.w	r0, r4, #8
 801830c:	9500      	str	r5, [sp, #0]
 801830e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018312:	f001 fce7 	bl	8019ce4 <uxr_add_output_reliable_buffer>
 8018316:	2200      	movs	r2, #0
 8018318:	fa5f fc80 	uxtb.w	ip, r0
 801831c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018320:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018324:	0e03      	lsrs	r3, r0, #24
 8018326:	f36c 0207 	bfi	r2, ip, #0, #8
 801832a:	f364 220f 	bfi	r2, r4, #8, #8
 801832e:	f361 4217 	bfi	r2, r1, #16, #8
 8018332:	f363 621f 	bfi	r2, r3, #24, #8
 8018336:	4610      	mov	r0, r2
 8018338:	b009      	add	sp, #36	; 0x24
 801833a:	bd30      	pop	{r4, r5, pc}

0801833c <uxr_create_input_best_effort_stream>:
 801833c:	b082      	sub	sp, #8
 801833e:	3008      	adds	r0, #8
 8018340:	b002      	add	sp, #8
 8018342:	f001 bce9 	b.w	8019d18 <uxr_add_input_best_effort_buffer>
 8018346:	bf00      	nop

08018348 <uxr_create_input_reliable_stream>:
 8018348:	b510      	push	{r4, lr}
 801834a:	4c0c      	ldr	r4, [pc, #48]	; (801837c <uxr_create_input_reliable_stream+0x34>)
 801834c:	b084      	sub	sp, #16
 801834e:	3008      	adds	r0, #8
 8018350:	9400      	str	r4, [sp, #0]
 8018352:	f001 fcf7 	bl	8019d44 <uxr_add_input_reliable_buffer>
 8018356:	2200      	movs	r2, #0
 8018358:	fa5f fe80 	uxtb.w	lr, r0
 801835c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018360:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018364:	0e03      	lsrs	r3, r0, #24
 8018366:	f36e 0207 	bfi	r2, lr, #0, #8
 801836a:	f36c 220f 	bfi	r2, ip, #8, #8
 801836e:	f361 4217 	bfi	r2, r1, #16, #8
 8018372:	f363 621f 	bfi	r2, r3, #24, #8
 8018376:	4610      	mov	r0, r2
 8018378:	b004      	add	sp, #16
 801837a:	bd10      	pop	{r4, pc}
 801837c:	08018155 	.word	0x08018155

08018380 <uxr_epoch_nanos>:
 8018380:	b510      	push	{r4, lr}
 8018382:	4604      	mov	r4, r0
 8018384:	f001 fd9a 	bl	8019ebc <uxr_nanos>
 8018388:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801838c:	1ac0      	subs	r0, r0, r3
 801838e:	eb61 0102 	sbc.w	r1, r1, r2
 8018392:	bd10      	pop	{r4, pc}

08018394 <uxr_flash_output_streams>:
 8018394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018398:	7e03      	ldrb	r3, [r0, #24]
 801839a:	b084      	sub	sp, #16
 801839c:	4604      	mov	r4, r0
 801839e:	b1fb      	cbz	r3, 80183e0 <uxr_flash_output_streams+0x4c>
 80183a0:	f04f 0900 	mov.w	r9, #0
 80183a4:	f10d 0802 	add.w	r8, sp, #2
 80183a8:	af03      	add	r7, sp, #12
 80183aa:	ae02      	add	r6, sp, #8
 80183ac:	4648      	mov	r0, r9
 80183ae:	2201      	movs	r2, #1
 80183b0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80183b4:	4611      	mov	r1, r2
 80183b6:	3508      	adds	r5, #8
 80183b8:	f001 fbe0 	bl	8019b7c <uxr_stream_id>
 80183bc:	4684      	mov	ip, r0
 80183be:	4643      	mov	r3, r8
 80183c0:	463a      	mov	r2, r7
 80183c2:	4631      	mov	r1, r6
 80183c4:	4628      	mov	r0, r5
 80183c6:	f8cd c004 	str.w	ip, [sp, #4]
 80183ca:	f006 fb11 	bl	801e9f0 <uxr_prepare_best_effort_buffer_to_send>
 80183ce:	2800      	cmp	r0, #0
 80183d0:	d13d      	bne.n	801844e <uxr_flash_output_streams+0xba>
 80183d2:	f109 0901 	add.w	r9, r9, #1
 80183d6:	7e23      	ldrb	r3, [r4, #24]
 80183d8:	fa5f f089 	uxtb.w	r0, r9
 80183dc:	4283      	cmp	r3, r0
 80183de:	d8e6      	bhi.n	80183ae <uxr_flash_output_streams+0x1a>
 80183e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80183e4:	b383      	cbz	r3, 8018448 <uxr_flash_output_streams+0xb4>
 80183e6:	f04f 0900 	mov.w	r9, #0
 80183ea:	f10d 0802 	add.w	r8, sp, #2
 80183ee:	af03      	add	r7, sp, #12
 80183f0:	ae02      	add	r6, sp, #8
 80183f2:	4648      	mov	r0, r9
 80183f4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80183f8:	2201      	movs	r2, #1
 80183fa:	2102      	movs	r1, #2
 80183fc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018400:	f001 fbbc 	bl	8019b7c <uxr_stream_id>
 8018404:	9001      	str	r0, [sp, #4]
 8018406:	3520      	adds	r5, #32
 8018408:	e00c      	b.n	8018424 <uxr_flash_output_streams+0x90>
 801840a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801840e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018412:	9b02      	ldr	r3, [sp, #8]
 8018414:	f000 fea8 	bl	8019168 <uxr_stamp_session_header>
 8018418:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801841a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801841e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8018422:	47d0      	blx	sl
 8018424:	4643      	mov	r3, r8
 8018426:	463a      	mov	r2, r7
 8018428:	4631      	mov	r1, r6
 801842a:	4628      	mov	r0, r5
 801842c:	f006 fd04 	bl	801ee38 <uxr_prepare_next_reliable_buffer_to_send>
 8018430:	4603      	mov	r3, r0
 8018432:	4620      	mov	r0, r4
 8018434:	2b00      	cmp	r3, #0
 8018436:	d1e8      	bne.n	801840a <uxr_flash_output_streams+0x76>
 8018438:	f109 0901 	add.w	r9, r9, #1
 801843c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018440:	fa5f f089 	uxtb.w	r0, r9
 8018444:	4283      	cmp	r3, r0
 8018446:	d8d5      	bhi.n	80183f4 <uxr_flash_output_streams+0x60>
 8018448:	b004      	add	sp, #16
 801844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801844e:	9b02      	ldr	r3, [sp, #8]
 8018450:	4620      	mov	r0, r4
 8018452:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018456:	f109 0901 	add.w	r9, r9, #1
 801845a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801845e:	f000 fe83 	bl	8019168 <uxr_stamp_session_header>
 8018462:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018464:	9a03      	ldr	r2, [sp, #12]
 8018466:	685d      	ldr	r5, [r3, #4]
 8018468:	6818      	ldr	r0, [r3, #0]
 801846a:	9902      	ldr	r1, [sp, #8]
 801846c:	47a8      	blx	r5
 801846e:	7e23      	ldrb	r3, [r4, #24]
 8018470:	fa5f f089 	uxtb.w	r0, r9
 8018474:	4283      	cmp	r3, r0
 8018476:	d89a      	bhi.n	80183ae <uxr_flash_output_streams+0x1a>
 8018478:	e7b2      	b.n	80183e0 <uxr_flash_output_streams+0x4c>
 801847a:	bf00      	nop

0801847c <read_submessage_info>:
 801847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018480:	460d      	mov	r5, r1
 8018482:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8018486:	4606      	mov	r6, r0
 8018488:	4669      	mov	r1, sp
 801848a:	4628      	mov	r0, r5
 801848c:	f002 fcce 	bl	801ae2c <uxr_deserialize_BaseObjectReply>
 8018490:	4604      	mov	r4, r0
 8018492:	a902      	add	r1, sp, #8
 8018494:	4628      	mov	r0, r5
 8018496:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801849a:	f7f9 fc51 	bl	8011d40 <ucdr_deserialize_bool>
 801849e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80184a2:	4004      	ands	r4, r0
 80184a4:	b2e4      	uxtb	r4, r4
 80184a6:	b95b      	cbnz	r3, 80184c0 <read_submessage_info+0x44>
 80184a8:	a987      	add	r1, sp, #540	; 0x21c
 80184aa:	4628      	mov	r0, r5
 80184ac:	f7f9 fc48 	bl	8011d40 <ucdr_deserialize_bool>
 80184b0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80184b4:	4680      	mov	r8, r0
 80184b6:	b94b      	cbnz	r3, 80184cc <read_submessage_info+0x50>
 80184b8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80184bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184c0:	a903      	add	r1, sp, #12
 80184c2:	4628      	mov	r0, r5
 80184c4:	f002 fb5e 	bl	801ab84 <uxr_deserialize_ObjectVariant>
 80184c8:	4004      	ands	r4, r0
 80184ca:	e7ed      	b.n	80184a8 <read_submessage_info+0x2c>
 80184cc:	a988      	add	r1, sp, #544	; 0x220
 80184ce:	4628      	mov	r0, r5
 80184d0:	f7f9 fc64 	bl	8011d9c <ucdr_deserialize_uint8_t>
 80184d4:	ea14 0f08 	tst.w	r4, r8
 80184d8:	d0ee      	beq.n	80184b8 <read_submessage_info+0x3c>
 80184da:	2800      	cmp	r0, #0
 80184dc:	d0ec      	beq.n	80184b8 <read_submessage_info+0x3c>
 80184de:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80184e2:	2b0d      	cmp	r3, #13
 80184e4:	d1e8      	bne.n	80184b8 <read_submessage_info+0x3c>
 80184e6:	a98a      	add	r1, sp, #552	; 0x228
 80184e8:	4628      	mov	r0, r5
 80184ea:	f7fa f9fd 	bl	80128e8 <ucdr_deserialize_int16_t>
 80184ee:	b138      	cbz	r0, 8018500 <read_submessage_info+0x84>
 80184f0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	dd06      	ble.n	8018506 <read_submessage_info+0x8a>
 80184f8:	2f00      	cmp	r7, #0
 80184fa:	bf14      	ite	ne
 80184fc:	2001      	movne	r0, #1
 80184fe:	2002      	moveq	r0, #2
 8018500:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8018504:	e7d8      	b.n	80184b8 <read_submessage_info+0x3c>
 8018506:	2000      	movs	r0, #0
 8018508:	e7fa      	b.n	8018500 <read_submessage_info+0x84>
 801850a:	bf00      	nop

0801850c <read_submessage_list>:
 801850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018510:	4604      	mov	r4, r0
 8018512:	b097      	sub	sp, #92	; 0x5c
 8018514:	460d      	mov	r5, r1
 8018516:	4ec1      	ldr	r6, [pc, #772]	; (801881c <read_submessage_list+0x310>)
 8018518:	9209      	str	r2, [sp, #36]	; 0x24
 801851a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801851e:	aa0c      	add	r2, sp, #48	; 0x30
 8018520:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8018524:	4628      	mov	r0, r5
 8018526:	f001 fc81 	bl	8019e2c <uxr_read_submessage_header>
 801852a:	2800      	cmp	r0, #0
 801852c:	f000 8142 	beq.w	80187b4 <read_submessage_list+0x2a8>
 8018530:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8018534:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018538:	3b02      	subs	r3, #2
 801853a:	2b0d      	cmp	r3, #13
 801853c:	d8ed      	bhi.n	801851a <read_submessage_list+0xe>
 801853e:	a101      	add	r1, pc, #4	; (adr r1, 8018544 <read_submessage_list+0x38>)
 8018540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018544:	080187ab 	.word	0x080187ab
 8018548:	0801851b 	.word	0x0801851b
 801854c:	0801879b 	.word	0x0801879b
 8018550:	08018739 	.word	0x08018739
 8018554:	0801872f 	.word	0x0801872f
 8018558:	0801851b 	.word	0x0801851b
 801855c:	0801851b 	.word	0x0801851b
 8018560:	08018685 	.word	0x08018685
 8018564:	08018617 	.word	0x08018617
 8018568:	080185d7 	.word	0x080185d7
 801856c:	0801851b 	.word	0x0801851b
 8018570:	0801851b 	.word	0x0801851b
 8018574:	0801851b 	.word	0x0801851b
 8018578:	0801857d 	.word	0x0801857d
 801857c:	a910      	add	r1, sp, #64	; 0x40
 801857e:	4628      	mov	r0, r5
 8018580:	f002 fe7c 	bl	801b27c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8018584:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8018588:	f1b8 0f00 	cmp.w	r8, #0
 801858c:	f000 811a 	beq.w	80187c4 <read_submessage_list+0x2b8>
 8018590:	f001 fc94 	bl	8019ebc <uxr_nanos>
 8018594:	4602      	mov	r2, r0
 8018596:	460b      	mov	r3, r1
 8018598:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801859c:	2100      	movs	r1, #0
 801859e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80185a0:	9006      	str	r0, [sp, #24]
 80185a2:	468c      	mov	ip, r1
 80185a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80185a6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80185aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80185ac:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80185b0:	468c      	mov	ip, r1
 80185b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80185b4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80185b8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80185bc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80185c0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80185c4:	e9cd 0100 	strd	r0, r1, [sp]
 80185c8:	4620      	mov	r0, r4
 80185ca:	47c0      	blx	r8
 80185cc:	f04f 0301 	mov.w	r3, #1
 80185d0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80185d4:	e7a1      	b.n	801851a <read_submessage_list+0xe>
 80185d6:	a910      	add	r1, sp, #64	; 0x40
 80185d8:	4628      	mov	r0, r5
 80185da:	f002 fe3b 	bl	801b254 <uxr_deserialize_HEARTBEAT_Payload>
 80185de:	2100      	movs	r1, #0
 80185e0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80185e4:	f001 faf8 	bl	8019bd8 <uxr_stream_id_from_raw>
 80185e8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80185ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80185ee:	f104 0008 	add.w	r0, r4, #8
 80185f2:	4641      	mov	r1, r8
 80185f4:	f001 fbde 	bl	8019db4 <uxr_get_input_reliable_stream>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	d08e      	beq.n	801851a <read_submessage_list+0xe>
 80185fc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8018600:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018604:	f006 f95e 	bl	801e8c4 <uxr_process_heartbeat>
 8018608:	4642      	mov	r2, r8
 801860a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801860e:	4620      	mov	r0, r4
 8018610:	f7ff fdf8 	bl	8018204 <write_submessage_acknack.isra.0>
 8018614:	e781      	b.n	801851a <read_submessage_list+0xe>
 8018616:	a910      	add	r1, sp, #64	; 0x40
 8018618:	4628      	mov	r0, r5
 801861a:	f002 fdf3 	bl	801b204 <uxr_deserialize_ACKNACK_Payload>
 801861e:	2100      	movs	r1, #0
 8018620:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018624:	f001 fad8 	bl	8019bd8 <uxr_stream_id_from_raw>
 8018628:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801862c:	900d      	str	r0, [sp, #52]	; 0x34
 801862e:	f104 0008 	add.w	r0, r4, #8
 8018632:	f001 fba9 	bl	8019d88 <uxr_get_output_reliable_stream>
 8018636:	4680      	mov	r8, r0
 8018638:	2800      	cmp	r0, #0
 801863a:	f43f af6e 	beq.w	801851a <read_submessage_list+0xe>
 801863e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8018642:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018646:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801864a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801864e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018652:	b289      	uxth	r1, r1
 8018654:	f006 fc98 	bl	801ef88 <uxr_process_acknack>
 8018658:	4640      	mov	r0, r8
 801865a:	f006 fc59 	bl	801ef10 <uxr_begin_output_nack_buffer_it>
 801865e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018662:	e005      	b.n	8018670 <read_submessage_list+0x164>
 8018664:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018666:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801866a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801866e:	47c8      	blx	r9
 8018670:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8018674:	aa0f      	add	r2, sp, #60	; 0x3c
 8018676:	4651      	mov	r1, sl
 8018678:	4640      	mov	r0, r8
 801867a:	f006 fc4b 	bl	801ef14 <uxr_next_reliable_nack_buffer_to_send>
 801867e:	2800      	cmp	r0, #0
 8018680:	d1f0      	bne.n	8018664 <read_submessage_list+0x158>
 8018682:	e74a      	b.n	801851a <read_submessage_list+0xe>
 8018684:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018688:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801868c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8018690:	4628      	mov	r0, r5
 8018692:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8018696:	4651      	mov	r1, sl
 8018698:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801869c:	f1a8 0804 	sub.w	r8, r8, #4
 80186a0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80186a4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80186a8:	fa1f f888 	uxth.w	r8, r8
 80186ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80186b0:	f009 090e 	and.w	r9, r9, #14
 80186b4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80186b8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80186bc:	f002 fb04 	bl	801acc8 <uxr_deserialize_BaseObjectRequest>
 80186c0:	4650      	mov	r0, sl
 80186c2:	a90f      	add	r1, sp, #60	; 0x3c
 80186c4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80186c8:	f000 fdca 	bl	8019260 <uxr_parse_base_object_request>
 80186cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80186ce:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80186d2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80186d6:	9110      	str	r1, [sp, #64]	; 0x40
 80186d8:	f1bb 0f00 	cmp.w	fp, #0
 80186dc:	d006      	beq.n	80186ec <read_submessage_list+0x1e0>
 80186de:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80186e2:	4652      	mov	r2, sl
 80186e4:	4620      	mov	r0, r4
 80186e6:	9300      	str	r3, [sp, #0]
 80186e8:	2300      	movs	r3, #0
 80186ea:	47d8      	blx	fp
 80186ec:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80186ee:	b182      	cbz	r2, 8018712 <read_submessage_list+0x206>
 80186f0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80186f2:	f04f 0c00 	mov.w	ip, #0
 80186f6:	3902      	subs	r1, #2
 80186f8:	e003      	b.n	8018702 <read_submessage_list+0x1f6>
 80186fa:	f10c 0c01 	add.w	ip, ip, #1
 80186fe:	4594      	cmp	ip, r2
 8018700:	d007      	beq.n	8018712 <read_submessage_list+0x206>
 8018702:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8018706:	4553      	cmp	r3, sl
 8018708:	d1f7      	bne.n	80186fa <read_submessage_list+0x1ee>
 801870a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801870c:	2200      	movs	r2, #0
 801870e:	f803 200c 	strb.w	r2, [r3, ip]
 8018712:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018716:	464b      	mov	r3, r9
 8018718:	4642      	mov	r2, r8
 801871a:	4620      	mov	r0, r4
 801871c:	9102      	str	r1, [sp, #8]
 801871e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018720:	9101      	str	r1, [sp, #4]
 8018722:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018724:	9100      	str	r1, [sp, #0]
 8018726:	4629      	mov	r1, r5
 8018728:	f7ff fc4a 	bl	8017fc0 <read_submessage_format>
 801872c:	e6f5      	b.n	801851a <read_submessage_list+0xe>
 801872e:	4629      	mov	r1, r5
 8018730:	4620      	mov	r0, r4
 8018732:	f7ff fea3 	bl	801847c <read_submessage_info>
 8018736:	e6f0      	b.n	801851a <read_submessage_list+0xe>
 8018738:	2a00      	cmp	r2, #0
 801873a:	d03e      	beq.n	80187ba <read_submessage_list+0x2ae>
 801873c:	a910      	add	r1, sp, #64	; 0x40
 801873e:	4628      	mov	r0, r5
 8018740:	f002 fcb8 	bl	801b0b4 <uxr_deserialize_STATUS_Payload>
 8018744:	a90e      	add	r1, sp, #56	; 0x38
 8018746:	aa0d      	add	r2, sp, #52	; 0x34
 8018748:	a810      	add	r0, sp, #64	; 0x40
 801874a:	f000 fd89 	bl	8019260 <uxr_parse_base_object_request>
 801874e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018750:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8018754:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018758:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801875c:	910f      	str	r1, [sp, #60]	; 0x3c
 801875e:	f1ba 0f00 	cmp.w	sl, #0
 8018762:	d006      	beq.n	8018772 <read_submessage_list+0x266>
 8018764:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018768:	4642      	mov	r2, r8
 801876a:	4620      	mov	r0, r4
 801876c:	9300      	str	r3, [sp, #0]
 801876e:	464b      	mov	r3, r9
 8018770:	47d0      	blx	sl
 8018772:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018774:	2a00      	cmp	r2, #0
 8018776:	f43f aed0 	beq.w	801851a <read_submessage_list+0xe>
 801877a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801877c:	2100      	movs	r1, #0
 801877e:	3802      	subs	r0, #2
 8018780:	e003      	b.n	801878a <read_submessage_list+0x27e>
 8018782:	3101      	adds	r1, #1
 8018784:	4291      	cmp	r1, r2
 8018786:	f43f aec8 	beq.w	801851a <read_submessage_list+0xe>
 801878a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801878e:	4543      	cmp	r3, r8
 8018790:	d1f7      	bne.n	8018782 <read_submessage_list+0x276>
 8018792:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018794:	f803 9001 	strb.w	r9, [r3, r1]
 8018798:	e6bf      	b.n	801851a <read_submessage_list+0xe>
 801879a:	2a00      	cmp	r2, #0
 801879c:	f47f aebd 	bne.w	801851a <read_submessage_list+0xe>
 80187a0:	4629      	mov	r1, r5
 80187a2:	4620      	mov	r0, r4
 80187a4:	f000 fca0 	bl	80190e8 <uxr_read_create_session_status>
 80187a8:	e6b7      	b.n	801851a <read_submessage_list+0xe>
 80187aa:	4629      	mov	r1, r5
 80187ac:	4620      	mov	r0, r4
 80187ae:	f7ff fcf3 	bl	8018198 <read_submessage_get_info>
 80187b2:	e6b2      	b.n	801851a <read_submessage_list+0xe>
 80187b4:	b017      	add	sp, #92	; 0x5c
 80187b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ba:	4629      	mov	r1, r5
 80187bc:	4620      	mov	r0, r4
 80187be:	f000 fca1 	bl	8019104 <uxr_read_delete_session_status>
 80187c2:	e6aa      	b.n	801851a <read_submessage_list+0xe>
 80187c4:	f001 fb7a 	bl	8019ebc <uxr_nanos>
 80187c8:	4642      	mov	r2, r8
 80187ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80187cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187ce:	fbc7 3206 	smlal	r3, r2, r7, r6
 80187d2:	1818      	adds	r0, r3, r0
 80187d4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80187d6:	eb42 0101 	adc.w	r1, r2, r1
 80187da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80187dc:	4642      	mov	r2, r8
 80187de:	fbc7 3206 	smlal	r3, r2, r7, r6
 80187e2:	469c      	mov	ip, r3
 80187e4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80187e8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80187ec:	4643      	mov	r3, r8
 80187ee:	eb1c 0c07 	adds.w	ip, ip, r7
 80187f2:	eb42 0203 	adc.w	r2, r2, r3
 80187f6:	ebb0 030c 	subs.w	r3, r0, ip
 80187fa:	eb61 0202 	sbc.w	r2, r1, r2
 80187fe:	2a00      	cmp	r2, #0
 8018800:	db08      	blt.n	8018814 <read_submessage_list+0x308>
 8018802:	085b      	lsrs	r3, r3, #1
 8018804:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8018808:	1052      	asrs	r2, r2, #1
 801880a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801880e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8018812:	e6db      	b.n	80185cc <read_submessage_list+0xc0>
 8018814:	3301      	adds	r3, #1
 8018816:	f142 0200 	adc.w	r2, r2, #0
 801881a:	e7f2      	b.n	8018802 <read_submessage_list+0x2f6>
 801881c:	3b9aca00 	.word	0x3b9aca00

08018820 <listen_message_reliably>:
 8018820:	1e0b      	subs	r3, r1, #0
 8018822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018826:	bfb8      	it	lt
 8018828:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801882c:	b09d      	sub	sp, #116	; 0x74
 801882e:	4680      	mov	r8, r0
 8018830:	9305      	str	r3, [sp, #20]
 8018832:	f001 fb27 	bl	8019e84 <uxr_millis>
 8018836:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801883a:	4681      	mov	r9, r0
 801883c:	2a00      	cmp	r2, #0
 801883e:	f000 809a 	beq.w	8018976 <listen_message_reliably+0x156>
 8018842:	2600      	movs	r6, #0
 8018844:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018848:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801884c:	460f      	mov	r7, r1
 801884e:	4630      	mov	r0, r6
 8018850:	9303      	str	r3, [sp, #12]
 8018852:	e00e      	b.n	8018872 <listen_message_reliably+0x52>
 8018854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018856:	3601      	adds	r6, #1
 8018858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801885a:	455a      	cmp	r2, fp
 801885c:	9903      	ldr	r1, [sp, #12]
 801885e:	b2f0      	uxtb	r0, r6
 8018860:	eb73 0101 	sbcs.w	r1, r3, r1
 8018864:	da01      	bge.n	801886a <listen_message_reliably+0x4a>
 8018866:	4693      	mov	fp, r2
 8018868:	9303      	str	r3, [sp, #12]
 801886a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801886e:	4283      	cmp	r3, r0
 8018870:	d95f      	bls.n	8018932 <listen_message_reliably+0x112>
 8018872:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8018876:	2102      	movs	r1, #2
 8018878:	2201      	movs	r2, #1
 801887a:	00e4      	lsls	r4, r4, #3
 801887c:	f001 f97e 	bl	8019b7c <uxr_stream_id>
 8018880:	4601      	mov	r1, r0
 8018882:	f104 0520 	add.w	r5, r4, #32
 8018886:	463b      	mov	r3, r7
 8018888:	464a      	mov	r2, r9
 801888a:	9109      	str	r1, [sp, #36]	; 0x24
 801888c:	4445      	add	r5, r8
 801888e:	4628      	mov	r0, r5
 8018890:	f006 fb12 	bl	801eeb8 <uxr_update_output_stream_heartbeat_timestamp>
 8018894:	eb08 0304 	add.w	r3, r8, r4
 8018898:	2800      	cmp	r0, #0
 801889a:	d0db      	beq.n	8018854 <listen_message_reliably+0x34>
 801889c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80188a0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80188a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80188a8:	4640      	mov	r0, r8
 80188aa:	3501      	adds	r5, #1
 80188ac:	4444      	add	r4, r8
 80188ae:	9304      	str	r3, [sp, #16]
 80188b0:	f000 fcae 	bl	8019210 <uxr_session_header_offset>
 80188b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80188b8:	2300      	movs	r3, #0
 80188ba:	2211      	movs	r2, #17
 80188bc:	a90c      	add	r1, sp, #48	; 0x30
 80188be:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80188c2:	9000      	str	r0, [sp, #0]
 80188c4:	4650      	mov	r0, sl
 80188c6:	3601      	adds	r6, #1
 80188c8:	f7fa fd18 	bl	80132fc <ucdr_init_buffer_origin_offset>
 80188cc:	2300      	movs	r3, #0
 80188ce:	2205      	movs	r2, #5
 80188d0:	210b      	movs	r1, #11
 80188d2:	4650      	mov	r0, sl
 80188d4:	f001 fa90 	bl	8019df8 <uxr_buffer_submessage_header>
 80188d8:	2101      	movs	r1, #1
 80188da:	8968      	ldrh	r0, [r5, #10]
 80188dc:	f006 fbb0 	bl	801f040 <uxr_seq_num_add>
 80188e0:	892b      	ldrh	r3, [r5, #8]
 80188e2:	4602      	mov	r2, r0
 80188e4:	a90a      	add	r1, sp, #40	; 0x28
 80188e6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80188ea:	4650      	mov	r0, sl
 80188ec:	9b04      	ldr	r3, [sp, #16]
 80188ee:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80188f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80188f6:	f002 fc99 	bl	801b22c <uxr_serialize_HEARTBEAT_Payload>
 80188fa:	2200      	movs	r2, #0
 80188fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80188fe:	4640      	mov	r0, r8
 8018900:	4611      	mov	r1, r2
 8018902:	f000 fc31 	bl	8019168 <uxr_stamp_session_header>
 8018906:	4650      	mov	r0, sl
 8018908:	f7fa fd38 	bl	801337c <ucdr_buffer_length>
 801890c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018910:	4602      	mov	r2, r0
 8018912:	a90c      	add	r1, sp, #48	; 0x30
 8018914:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018918:	47a8      	blx	r5
 801891a:	9903      	ldr	r1, [sp, #12]
 801891c:	b2f0      	uxtb	r0, r6
 801891e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8018922:	455a      	cmp	r2, fp
 8018924:	eb73 0101 	sbcs.w	r1, r3, r1
 8018928:	db9d      	blt.n	8018866 <listen_message_reliably+0x46>
 801892a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801892e:	4283      	cmp	r3, r0
 8018930:	d89f      	bhi.n	8018872 <listen_message_reliably+0x52>
 8018932:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018936:	9a03      	ldr	r2, [sp, #12]
 8018938:	429a      	cmp	r2, r3
 801893a:	bf08      	it	eq
 801893c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8018940:	d019      	beq.n	8018976 <listen_message_reliably+0x156>
 8018942:	ebab 0309 	sub.w	r3, fp, r9
 8018946:	2b00      	cmp	r3, #0
 8018948:	9d05      	ldr	r5, [sp, #20]
 801894a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 801894e:	aa08      	add	r2, sp, #32
 8018950:	bf08      	it	eq
 8018952:	2301      	moveq	r3, #1
 8018954:	a907      	add	r1, sp, #28
 8018956:	6884      	ldr	r4, [r0, #8]
 8018958:	429d      	cmp	r5, r3
 801895a:	6800      	ldr	r0, [r0, #0]
 801895c:	bfa8      	it	ge
 801895e:	461d      	movge	r5, r3
 8018960:	462b      	mov	r3, r5
 8018962:	47a0      	blx	r4
 8018964:	b948      	cbnz	r0, 801897a <listen_message_reliably+0x15a>
 8018966:	9b05      	ldr	r3, [sp, #20]
 8018968:	1b5b      	subs	r3, r3, r5
 801896a:	2b00      	cmp	r3, #0
 801896c:	9305      	str	r3, [sp, #20]
 801896e:	f73f af60 	bgt.w	8018832 <listen_message_reliably+0x12>
 8018972:	4604      	mov	r4, r0
 8018974:	e012      	b.n	801899c <listen_message_reliably+0x17c>
 8018976:	9b05      	ldr	r3, [sp, #20]
 8018978:	e7e5      	b.n	8018946 <listen_message_reliably+0x126>
 801897a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801897e:	4604      	mov	r4, r0
 8018980:	2500      	movs	r5, #0
 8018982:	a80c      	add	r0, sp, #48	; 0x30
 8018984:	f7fa fccc 	bl	8013320 <ucdr_init_buffer>
 8018988:	f10d 031a 	add.w	r3, sp, #26
 801898c:	aa06      	add	r2, sp, #24
 801898e:	a90c      	add	r1, sp, #48	; 0x30
 8018990:	4640      	mov	r0, r8
 8018992:	f88d 5018 	strb.w	r5, [sp, #24]
 8018996:	f000 fbfb 	bl	8019190 <uxr_read_session_header>
 801899a:	b918      	cbnz	r0, 80189a4 <listen_message_reliably+0x184>
 801899c:	4620      	mov	r0, r4
 801899e:	b01d      	add	sp, #116	; 0x74
 80189a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189a4:	4629      	mov	r1, r5
 80189a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80189aa:	f001 f915 	bl	8019bd8 <uxr_stream_id_from_raw>
 80189ae:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80189b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80189b6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80189ba:	2e01      	cmp	r6, #1
 80189bc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80189c0:	d04b      	beq.n	8018a5a <listen_message_reliably+0x23a>
 80189c2:	2e02      	cmp	r6, #2
 80189c4:	d00f      	beq.n	80189e6 <listen_message_reliably+0x1c6>
 80189c6:	2e00      	cmp	r6, #0
 80189c8:	d1e8      	bne.n	801899c <listen_message_reliably+0x17c>
 80189ca:	4631      	mov	r1, r6
 80189cc:	4630      	mov	r0, r6
 80189ce:	f001 f903 	bl	8019bd8 <uxr_stream_id_from_raw>
 80189d2:	4602      	mov	r2, r0
 80189d4:	a90c      	add	r1, sp, #48	; 0x30
 80189d6:	4640      	mov	r0, r8
 80189d8:	920a      	str	r2, [sp, #40]	; 0x28
 80189da:	f7ff fd97 	bl	801850c <read_submessage_list>
 80189de:	4620      	mov	r0, r4
 80189e0:	b01d      	add	sp, #116	; 0x74
 80189e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e6:	4629      	mov	r1, r5
 80189e8:	f108 0008 	add.w	r0, r8, #8
 80189ec:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80189f0:	f001 f9e0 	bl	8019db4 <uxr_get_input_reliable_stream>
 80189f4:	4607      	mov	r7, r0
 80189f6:	b338      	cbz	r0, 8018a48 <listen_message_reliably+0x228>
 80189f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80189fa:	a80c      	add	r0, sp, #48	; 0x30
 80189fc:	9203      	str	r2, [sp, #12]
 80189fe:	f7fa fcc1 	bl	8013384 <ucdr_buffer_remaining>
 8018a02:	4603      	mov	r3, r0
 8018a04:	f10d 0019 	add.w	r0, sp, #25
 8018a08:	9a03      	ldr	r2, [sp, #12]
 8018a0a:	4651      	mov	r1, sl
 8018a0c:	9000      	str	r0, [sp, #0]
 8018a0e:	4638      	mov	r0, r7
 8018a10:	f005 fe5c 	bl	801e6cc <uxr_receive_reliable_message>
 8018a14:	b1c0      	cbz	r0, 8018a48 <listen_message_reliably+0x228>
 8018a16:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018a1a:	b393      	cbz	r3, 8018a82 <listen_message_reliably+0x262>
 8018a1c:	ae14      	add	r6, sp, #80	; 0x50
 8018a1e:	f04f 0a02 	mov.w	sl, #2
 8018a22:	e00a      	b.n	8018a3a <listen_message_reliably+0x21a>
 8018a24:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8018a28:	4631      	mov	r1, r6
 8018a2a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8018a2e:	4640      	mov	r0, r8
 8018a30:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a36:	f7ff fd69 	bl	801850c <read_submessage_list>
 8018a3a:	2204      	movs	r2, #4
 8018a3c:	4631      	mov	r1, r6
 8018a3e:	4638      	mov	r0, r7
 8018a40:	f005 fec6 	bl	801e7d0 <uxr_next_input_reliable_buffer_available>
 8018a44:	2800      	cmp	r0, #0
 8018a46:	d1ed      	bne.n	8018a24 <listen_message_reliably+0x204>
 8018a48:	4640      	mov	r0, r8
 8018a4a:	462a      	mov	r2, r5
 8018a4c:	4649      	mov	r1, r9
 8018a4e:	f7ff fbd9 	bl	8018204 <write_submessage_acknack.isra.0>
 8018a52:	4620      	mov	r0, r4
 8018a54:	b01d      	add	sp, #116	; 0x74
 8018a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5a:	4629      	mov	r1, r5
 8018a5c:	f108 0008 	add.w	r0, r8, #8
 8018a60:	f001 f99e 	bl	8019da0 <uxr_get_input_best_effort_stream>
 8018a64:	2800      	cmp	r0, #0
 8018a66:	d099      	beq.n	801899c <listen_message_reliably+0x17c>
 8018a68:	4651      	mov	r1, sl
 8018a6a:	f005 fda5 	bl	801e5b8 <uxr_receive_best_effort_message>
 8018a6e:	2800      	cmp	r0, #0
 8018a70:	d094      	beq.n	801899c <listen_message_reliably+0x17c>
 8018a72:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018a76:	a90c      	add	r1, sp, #48	; 0x30
 8018a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a7a:	4640      	mov	r0, r8
 8018a7c:	f7ff fd46 	bl	801850c <read_submessage_list>
 8018a80:	e78c      	b.n	801899c <listen_message_reliably+0x17c>
 8018a82:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018a86:	a90c      	add	r1, sp, #48	; 0x30
 8018a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a8a:	4640      	mov	r0, r8
 8018a8c:	f7ff fd3e 	bl	801850c <read_submessage_list>
 8018a90:	e7c4      	b.n	8018a1c <listen_message_reliably+0x1fc>
 8018a92:	bf00      	nop

08018a94 <uxr_run_session_timeout>:
 8018a94:	b570      	push	{r4, r5, r6, lr}
 8018a96:	4604      	mov	r4, r0
 8018a98:	460d      	mov	r5, r1
 8018a9a:	f001 f9f3 	bl	8019e84 <uxr_millis>
 8018a9e:	4606      	mov	r6, r0
 8018aa0:	4620      	mov	r0, r4
 8018aa2:	f7ff fc77 	bl	8018394 <uxr_flash_output_streams>
 8018aa6:	4629      	mov	r1, r5
 8018aa8:	4620      	mov	r0, r4
 8018aaa:	f7ff feb9 	bl	8018820 <listen_message_reliably>
 8018aae:	f001 f9e9 	bl	8019e84 <uxr_millis>
 8018ab2:	1b83      	subs	r3, r0, r6
 8018ab4:	1ae9      	subs	r1, r5, r3
 8018ab6:	2900      	cmp	r1, #0
 8018ab8:	dcf6      	bgt.n	8018aa8 <uxr_run_session_timeout+0x14>
 8018aba:	f104 0008 	add.w	r0, r4, #8
 8018abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ac2:	f001 b983 	b.w	8019dcc <uxr_output_streams_confirmed>
 8018ac6:	bf00      	nop

08018ac8 <uxr_run_session_until_data>:
 8018ac8:	b570      	push	{r4, r5, r6, lr}
 8018aca:	4604      	mov	r4, r0
 8018acc:	460d      	mov	r5, r1
 8018ace:	f001 f9d9 	bl	8019e84 <uxr_millis>
 8018ad2:	4606      	mov	r6, r0
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	f7ff fc5d 	bl	8018394 <uxr_flash_output_streams>
 8018ada:	2300      	movs	r3, #0
 8018adc:	4629      	mov	r1, r5
 8018ade:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018ae2:	e005      	b.n	8018af0 <uxr_run_session_until_data+0x28>
 8018ae4:	f001 f9ce 	bl	8019e84 <uxr_millis>
 8018ae8:	1b83      	subs	r3, r0, r6
 8018aea:	1ae9      	subs	r1, r5, r3
 8018aec:	2900      	cmp	r1, #0
 8018aee:	dd07      	ble.n	8018b00 <uxr_run_session_until_data+0x38>
 8018af0:	4620      	mov	r0, r4
 8018af2:	f7ff fe95 	bl	8018820 <listen_message_reliably>
 8018af6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018afa:	2800      	cmp	r0, #0
 8018afc:	d0f2      	beq.n	8018ae4 <uxr_run_session_until_data+0x1c>
 8018afe:	bd70      	pop	{r4, r5, r6, pc}
 8018b00:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018b04:	bd70      	pop	{r4, r5, r6, pc}
 8018b06:	bf00      	nop

08018b08 <uxr_run_session_until_confirm_delivery>:
 8018b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b0c:	4606      	mov	r6, r0
 8018b0e:	460d      	mov	r5, r1
 8018b10:	f001 f9b8 	bl	8019e84 <uxr_millis>
 8018b14:	4607      	mov	r7, r0
 8018b16:	4630      	mov	r0, r6
 8018b18:	f106 0808 	add.w	r8, r6, #8
 8018b1c:	f7ff fc3a 	bl	8018394 <uxr_flash_output_streams>
 8018b20:	2d00      	cmp	r5, #0
 8018b22:	db10      	blt.n	8018b46 <uxr_run_session_until_confirm_delivery+0x3e>
 8018b24:	462c      	mov	r4, r5
 8018b26:	e006      	b.n	8018b36 <uxr_run_session_until_confirm_delivery+0x2e>
 8018b28:	f7ff fe7a 	bl	8018820 <listen_message_reliably>
 8018b2c:	f001 f9aa 	bl	8019e84 <uxr_millis>
 8018b30:	1bc3      	subs	r3, r0, r7
 8018b32:	1aec      	subs	r4, r5, r3
 8018b34:	d407      	bmi.n	8018b46 <uxr_run_session_until_confirm_delivery+0x3e>
 8018b36:	4640      	mov	r0, r8
 8018b38:	f001 f948 	bl	8019dcc <uxr_output_streams_confirmed>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	4621      	mov	r1, r4
 8018b40:	4630      	mov	r0, r6
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d0f0      	beq.n	8018b28 <uxr_run_session_until_confirm_delivery+0x20>
 8018b46:	4640      	mov	r0, r8
 8018b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b4c:	f001 b93e 	b.w	8019dcc <uxr_output_streams_confirmed>

08018b50 <uxr_run_session_until_all_status>:
 8018b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018b58:	4606      	mov	r6, r0
 8018b5a:	4688      	mov	r8, r1
 8018b5c:	4692      	mov	sl, r2
 8018b5e:	461f      	mov	r7, r3
 8018b60:	f7ff fc18 	bl	8018394 <uxr_flash_output_streams>
 8018b64:	f1bb 0f00 	cmp.w	fp, #0
 8018b68:	d004      	beq.n	8018b74 <uxr_run_session_until_all_status+0x24>
 8018b6a:	465a      	mov	r2, fp
 8018b6c:	21ff      	movs	r1, #255	; 0xff
 8018b6e:	4638      	mov	r0, r7
 8018b70:	f008 f940 	bl	8020df4 <memset>
 8018b74:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018b78:	1e7d      	subs	r5, r7, #1
 8018b7a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8018b7e:	f001 f981 	bl	8019e84 <uxr_millis>
 8018b82:	4641      	mov	r1, r8
 8018b84:	4681      	mov	r9, r0
 8018b86:	4630      	mov	r0, r6
 8018b88:	f7ff fe4a 	bl	8018820 <listen_message_reliably>
 8018b8c:	f001 f97a 	bl	8019e84 <uxr_millis>
 8018b90:	eba0 0009 	sub.w	r0, r0, r9
 8018b94:	eba8 0100 	sub.w	r1, r8, r0
 8018b98:	f1bb 0f00 	cmp.w	fp, #0
 8018b9c:	d029      	beq.n	8018bf2 <uxr_run_session_until_all_status+0xa2>
 8018b9e:	46ae      	mov	lr, r5
 8018ba0:	f04f 0c00 	mov.w	ip, #0
 8018ba4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018ba8:	2cff      	cmp	r4, #255	; 0xff
 8018baa:	d015      	beq.n	8018bd8 <uxr_run_session_until_all_status+0x88>
 8018bac:	f10c 0c01 	add.w	ip, ip, #1
 8018bb0:	45e3      	cmp	fp, ip
 8018bb2:	d8f7      	bhi.n	8018ba4 <uxr_run_session_until_all_status+0x54>
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018bb8:	e000      	b.n	8018bbc <uxr_run_session_until_all_status+0x6c>
 8018bba:	b158      	cbz	r0, 8018bd4 <uxr_run_session_until_all_status+0x84>
 8018bbc:	462b      	mov	r3, r5
 8018bbe:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018bc2:	3302      	adds	r3, #2
 8018bc4:	2801      	cmp	r0, #1
 8018bc6:	eba3 0307 	sub.w	r3, r3, r7
 8018bca:	bf8c      	ite	hi
 8018bcc:	2000      	movhi	r0, #0
 8018bce:	2001      	movls	r0, #1
 8018bd0:	459b      	cmp	fp, r3
 8018bd2:	d8f2      	bhi.n	8018bba <uxr_run_session_until_all_status+0x6a>
 8018bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bd8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018bdc:	f10c 0c01 	add.w	ip, ip, #1
 8018be0:	45dc      	cmp	ip, fp
 8018be2:	d201      	bcs.n	8018be8 <uxr_run_session_until_all_status+0x98>
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d0dd      	beq.n	8018ba4 <uxr_run_session_until_all_status+0x54>
 8018be8:	2900      	cmp	r1, #0
 8018bea:	dde3      	ble.n	8018bb4 <uxr_run_session_until_all_status+0x64>
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d1ca      	bne.n	8018b86 <uxr_run_session_until_all_status+0x36>
 8018bf0:	e7e0      	b.n	8018bb4 <uxr_run_session_until_all_status+0x64>
 8018bf2:	2001      	movs	r0, #1
 8018bf4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bfc <wait_session_status>:
 8018bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c00:	4604      	mov	r4, r0
 8018c02:	b09d      	sub	sp, #116	; 0x74
 8018c04:	20ff      	movs	r0, #255	; 0xff
 8018c06:	9303      	str	r3, [sp, #12]
 8018c08:	7160      	strb	r0, [r4, #5]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	f000 80b6 	beq.w	8018d7c <wait_session_status+0x180>
 8018c10:	4689      	mov	r9, r1
 8018c12:	4692      	mov	sl, r2
 8018c14:	f04f 0b00 	mov.w	fp, #0
 8018c18:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c1a:	4652      	mov	r2, sl
 8018c1c:	4649      	mov	r1, r9
 8018c1e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018c22:	47a8      	blx	r5
 8018c24:	f001 f92e 	bl	8019e84 <uxr_millis>
 8018c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018c2c:	4605      	mov	r5, r0
 8018c2e:	e009      	b.n	8018c44 <wait_session_status+0x48>
 8018c30:	f001 f928 	bl	8019e84 <uxr_millis>
 8018c34:	1b40      	subs	r0, r0, r5
 8018c36:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	dd40      	ble.n	8018cc0 <wait_session_status+0xc4>
 8018c3e:	7960      	ldrb	r0, [r4, #5]
 8018c40:	28ff      	cmp	r0, #255	; 0xff
 8018c42:	d145      	bne.n	8018cd0 <wait_session_status+0xd4>
 8018c44:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018c46:	a908      	add	r1, sp, #32
 8018c48:	6896      	ldr	r6, [r2, #8]
 8018c4a:	6810      	ldr	r0, [r2, #0]
 8018c4c:	aa09      	add	r2, sp, #36	; 0x24
 8018c4e:	47b0      	blx	r6
 8018c50:	2800      	cmp	r0, #0
 8018c52:	d0ed      	beq.n	8018c30 <wait_session_status+0x34>
 8018c54:	a80c      	add	r0, sp, #48	; 0x30
 8018c56:	2600      	movs	r6, #0
 8018c58:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018c5c:	f7fa fb60 	bl	8013320 <ucdr_init_buffer>
 8018c60:	f10d 031e 	add.w	r3, sp, #30
 8018c64:	aa07      	add	r2, sp, #28
 8018c66:	a90c      	add	r1, sp, #48	; 0x30
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f88d 601c 	strb.w	r6, [sp, #28]
 8018c6e:	f000 fa8f 	bl	8019190 <uxr_read_session_header>
 8018c72:	2800      	cmp	r0, #0
 8018c74:	d0dc      	beq.n	8018c30 <wait_session_status+0x34>
 8018c76:	4631      	mov	r1, r6
 8018c78:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018c7c:	f000 ffac 	bl	8019bd8 <uxr_stream_id_from_raw>
 8018c80:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018c84:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018c88:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018c8c:	2f01      	cmp	r7, #1
 8018c8e:	9302      	str	r3, [sp, #8]
 8018c90:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018c94:	d05c      	beq.n	8018d50 <wait_session_status+0x154>
 8018c96:	2f02      	cmp	r7, #2
 8018c98:	d020      	beq.n	8018cdc <wait_session_status+0xe0>
 8018c9a:	2f00      	cmp	r7, #0
 8018c9c:	d1c8      	bne.n	8018c30 <wait_session_status+0x34>
 8018c9e:	4639      	mov	r1, r7
 8018ca0:	4638      	mov	r0, r7
 8018ca2:	f000 ff99 	bl	8019bd8 <uxr_stream_id_from_raw>
 8018ca6:	a90c      	add	r1, sp, #48	; 0x30
 8018ca8:	4602      	mov	r2, r0
 8018caa:	900b      	str	r0, [sp, #44]	; 0x2c
 8018cac:	4620      	mov	r0, r4
 8018cae:	f7ff fc2d 	bl	801850c <read_submessage_list>
 8018cb2:	f001 f8e7 	bl	8019e84 <uxr_millis>
 8018cb6:	1b40      	subs	r0, r0, r5
 8018cb8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	dcbe      	bgt.n	8018c3e <wait_session_status+0x42>
 8018cc0:	f10b 0b01 	add.w	fp, fp, #1
 8018cc4:	9b03      	ldr	r3, [sp, #12]
 8018cc6:	7960      	ldrb	r0, [r4, #5]
 8018cc8:	455b      	cmp	r3, fp
 8018cca:	d001      	beq.n	8018cd0 <wait_session_status+0xd4>
 8018ccc:	28ff      	cmp	r0, #255	; 0xff
 8018cce:	d0a3      	beq.n	8018c18 <wait_session_status+0x1c>
 8018cd0:	38ff      	subs	r0, #255	; 0xff
 8018cd2:	bf18      	it	ne
 8018cd4:	2001      	movne	r0, #1
 8018cd6:	b01d      	add	sp, #116	; 0x74
 8018cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cdc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8018ce0:	4631      	mov	r1, r6
 8018ce2:	f104 0008 	add.w	r0, r4, #8
 8018ce6:	9304      	str	r3, [sp, #16]
 8018ce8:	f001 f864 	bl	8019db4 <uxr_get_input_reliable_stream>
 8018cec:	4680      	mov	r8, r0
 8018cee:	b348      	cbz	r0, 8018d44 <wait_session_status+0x148>
 8018cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018cf2:	a80c      	add	r0, sp, #48	; 0x30
 8018cf4:	9205      	str	r2, [sp, #20]
 8018cf6:	f7fa fb45 	bl	8013384 <ucdr_buffer_remaining>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	f10d 001d 	add.w	r0, sp, #29
 8018d00:	9a05      	ldr	r2, [sp, #20]
 8018d02:	9000      	str	r0, [sp, #0]
 8018d04:	4640      	mov	r0, r8
 8018d06:	9902      	ldr	r1, [sp, #8]
 8018d08:	f005 fce0 	bl	801e6cc <uxr_receive_reliable_message>
 8018d0c:	b1d0      	cbz	r0, 8018d44 <wait_session_status+0x148>
 8018d0e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d03a      	beq.n	8018d8c <wait_session_status+0x190>
 8018d16:	9f04      	ldr	r7, [sp, #16]
 8018d18:	e00a      	b.n	8018d30 <wait_session_status+0x134>
 8018d1a:	f04f 0302 	mov.w	r3, #2
 8018d1e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8018d22:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018d26:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8018d2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d2c:	f7ff fbee 	bl	801850c <read_submessage_list>
 8018d30:	a914      	add	r1, sp, #80	; 0x50
 8018d32:	2204      	movs	r2, #4
 8018d34:	4640      	mov	r0, r8
 8018d36:	f005 fd4b 	bl	801e7d0 <uxr_next_input_reliable_buffer_available>
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	a914      	add	r1, sp, #80	; 0x50
 8018d3e:	4620      	mov	r0, r4
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d1ea      	bne.n	8018d1a <wait_session_status+0x11e>
 8018d44:	4632      	mov	r2, r6
 8018d46:	9904      	ldr	r1, [sp, #16]
 8018d48:	4620      	mov	r0, r4
 8018d4a:	f7ff fa5b 	bl	8018204 <write_submessage_acknack.isra.0>
 8018d4e:	e76f      	b.n	8018c30 <wait_session_status+0x34>
 8018d50:	4631      	mov	r1, r6
 8018d52:	f104 0008 	add.w	r0, r4, #8
 8018d56:	f001 f823 	bl	8019da0 <uxr_get_input_best_effort_stream>
 8018d5a:	2800      	cmp	r0, #0
 8018d5c:	f43f af68 	beq.w	8018c30 <wait_session_status+0x34>
 8018d60:	9902      	ldr	r1, [sp, #8]
 8018d62:	f005 fc29 	bl	801e5b8 <uxr_receive_best_effort_message>
 8018d66:	2800      	cmp	r0, #0
 8018d68:	f43f af62 	beq.w	8018c30 <wait_session_status+0x34>
 8018d6c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018d70:	a90c      	add	r1, sp, #48	; 0x30
 8018d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d74:	4620      	mov	r0, r4
 8018d76:	f7ff fbc9 	bl	801850c <read_submessage_list>
 8018d7a:	e759      	b.n	8018c30 <wait_session_status+0x34>
 8018d7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d7e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018d82:	47a0      	blx	r4
 8018d84:	2001      	movs	r0, #1
 8018d86:	b01d      	add	sp, #116	; 0x74
 8018d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d8c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018d90:	a90c      	add	r1, sp, #48	; 0x30
 8018d92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d94:	4620      	mov	r0, r4
 8018d96:	f7ff fbb9 	bl	801850c <read_submessage_list>
 8018d9a:	e7bc      	b.n	8018d16 <wait_session_status+0x11a>

08018d9c <uxr_delete_session_retries>:
 8018d9c:	b530      	push	{r4, r5, lr}
 8018d9e:	b08f      	sub	sp, #60	; 0x3c
 8018da0:	4604      	mov	r4, r0
 8018da2:	460d      	mov	r5, r1
 8018da4:	f000 fa34 	bl	8019210 <uxr_session_header_offset>
 8018da8:	2300      	movs	r3, #0
 8018daa:	2210      	movs	r2, #16
 8018dac:	a902      	add	r1, sp, #8
 8018dae:	9000      	str	r0, [sp, #0]
 8018db0:	a806      	add	r0, sp, #24
 8018db2:	f7fa faa3 	bl	80132fc <ucdr_init_buffer_origin_offset>
 8018db6:	a906      	add	r1, sp, #24
 8018db8:	4620      	mov	r0, r4
 8018dba:	f000 f979 	bl	80190b0 <uxr_buffer_delete_session>
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	9b06      	ldr	r3, [sp, #24]
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	4611      	mov	r1, r2
 8018dc6:	f000 f9cf 	bl	8019168 <uxr_stamp_session_header>
 8018dca:	a806      	add	r0, sp, #24
 8018dcc:	f7fa fad6 	bl	801337c <ucdr_buffer_length>
 8018dd0:	462b      	mov	r3, r5
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	a902      	add	r1, sp, #8
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f7ff ff10 	bl	8018bfc <wait_session_status>
 8018ddc:	b118      	cbz	r0, 8018de6 <uxr_delete_session_retries+0x4a>
 8018dde:	7960      	ldrb	r0, [r4, #5]
 8018de0:	fab0 f080 	clz	r0, r0
 8018de4:	0940      	lsrs	r0, r0, #5
 8018de6:	b00f      	add	sp, #60	; 0x3c
 8018de8:	bd30      	pop	{r4, r5, pc}
 8018dea:	bf00      	nop

08018dec <uxr_create_session>:
 8018dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df0:	f100 0b08 	add.w	fp, r0, #8
 8018df4:	4604      	mov	r4, r0
 8018df6:	b0ab      	sub	sp, #172	; 0xac
 8018df8:	4658      	mov	r0, fp
 8018dfa:	465e      	mov	r6, fp
 8018dfc:	f000 ff22 	bl	8019c44 <uxr_reset_stream_storage>
 8018e00:	4620      	mov	r0, r4
 8018e02:	f000 fa05 	bl	8019210 <uxr_session_header_offset>
 8018e06:	2300      	movs	r3, #0
 8018e08:	221c      	movs	r2, #28
 8018e0a:	a90b      	add	r1, sp, #44	; 0x2c
 8018e0c:	9000      	str	r0, [sp, #0]
 8018e0e:	a812      	add	r0, sp, #72	; 0x48
 8018e10:	f7fa fa74 	bl	80132fc <ucdr_init_buffer_origin_offset>
 8018e14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018e16:	a912      	add	r1, sp, #72	; 0x48
 8018e18:	4620      	mov	r0, r4
 8018e1a:	8a1a      	ldrh	r2, [r3, #16]
 8018e1c:	3a04      	subs	r2, #4
 8018e1e:	b292      	uxth	r2, r2
 8018e20:	f000 f91c 	bl	801905c <uxr_buffer_create_session>
 8018e24:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018e26:	4620      	mov	r0, r4
 8018e28:	f000 f98a 	bl	8019140 <uxr_stamp_create_session_header>
 8018e2c:	a812      	add	r0, sp, #72	; 0x48
 8018e2e:	f7fa faa5 	bl	801337c <ucdr_buffer_length>
 8018e32:	23ff      	movs	r3, #255	; 0xff
 8018e34:	4681      	mov	r9, r0
 8018e36:	7163      	strb	r3, [r4, #5]
 8018e38:	230a      	movs	r3, #10
 8018e3a:	9303      	str	r3, [sp, #12]
 8018e3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018e3e:	464a      	mov	r2, r9
 8018e40:	a90b      	add	r1, sp, #44	; 0x2c
 8018e42:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018e46:	47a8      	blx	r5
 8018e48:	f001 f81c 	bl	8019e84 <uxr_millis>
 8018e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e50:	4605      	mov	r5, r0
 8018e52:	e009      	b.n	8018e68 <uxr_create_session+0x7c>
 8018e54:	f001 f816 	bl	8019e84 <uxr_millis>
 8018e58:	1b40      	subs	r0, r0, r5
 8018e5a:	7962      	ldrb	r2, [r4, #5]
 8018e5c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	dd38      	ble.n	8018ed6 <uxr_create_session+0xea>
 8018e64:	2aff      	cmp	r2, #255	; 0xff
 8018e66:	d13c      	bne.n	8018ee2 <uxr_create_session+0xf6>
 8018e68:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018e6a:	a907      	add	r1, sp, #28
 8018e6c:	6897      	ldr	r7, [r2, #8]
 8018e6e:	6810      	ldr	r0, [r2, #0]
 8018e70:	aa08      	add	r2, sp, #32
 8018e72:	47b8      	blx	r7
 8018e74:	2800      	cmp	r0, #0
 8018e76:	d0ed      	beq.n	8018e54 <uxr_create_session+0x68>
 8018e78:	a81a      	add	r0, sp, #104	; 0x68
 8018e7a:	2700      	movs	r7, #0
 8018e7c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018e80:	f7fa fa4e 	bl	8013320 <ucdr_init_buffer>
 8018e84:	f10d 031a 	add.w	r3, sp, #26
 8018e88:	aa06      	add	r2, sp, #24
 8018e8a:	a91a      	add	r1, sp, #104	; 0x68
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f88d 7018 	strb.w	r7, [sp, #24]
 8018e92:	f000 f97d 	bl	8019190 <uxr_read_session_header>
 8018e96:	2800      	cmp	r0, #0
 8018e98:	d0dc      	beq.n	8018e54 <uxr_create_session+0x68>
 8018e9a:	4639      	mov	r1, r7
 8018e9c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018ea0:	f000 fe9a 	bl	8019bd8 <uxr_stream_id_from_raw>
 8018ea4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018ea8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018eac:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018eb0:	2f01      	cmp	r7, #1
 8018eb2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018eb6:	d053      	beq.n	8018f60 <uxr_create_session+0x174>
 8018eb8:	2f02      	cmp	r7, #2
 8018eba:	d018      	beq.n	8018eee <uxr_create_session+0x102>
 8018ebc:	2f00      	cmp	r7, #0
 8018ebe:	d1c9      	bne.n	8018e54 <uxr_create_session+0x68>
 8018ec0:	4639      	mov	r1, r7
 8018ec2:	4638      	mov	r0, r7
 8018ec4:	f000 fe88 	bl	8019bd8 <uxr_stream_id_from_raw>
 8018ec8:	a91a      	add	r1, sp, #104	; 0x68
 8018eca:	4602      	mov	r2, r0
 8018ecc:	900a      	str	r0, [sp, #40]	; 0x28
 8018ece:	4620      	mov	r0, r4
 8018ed0:	f7ff fb1c 	bl	801850c <read_submessage_list>
 8018ed4:	e7be      	b.n	8018e54 <uxr_create_session+0x68>
 8018ed6:	9b03      	ldr	r3, [sp, #12]
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	9303      	str	r3, [sp, #12]
 8018edc:	d001      	beq.n	8018ee2 <uxr_create_session+0xf6>
 8018ede:	2aff      	cmp	r2, #255	; 0xff
 8018ee0:	d0ac      	beq.n	8018e3c <uxr_create_session+0x50>
 8018ee2:	2a00      	cmp	r2, #0
 8018ee4:	d051      	beq.n	8018f8a <uxr_create_session+0x19e>
 8018ee6:	2000      	movs	r0, #0
 8018ee8:	b02b      	add	sp, #172	; 0xac
 8018eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eee:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018ef2:	4641      	mov	r1, r8
 8018ef4:	4630      	mov	r0, r6
 8018ef6:	9304      	str	r3, [sp, #16]
 8018ef8:	f000 ff5c 	bl	8019db4 <uxr_get_input_reliable_stream>
 8018efc:	4682      	mov	sl, r0
 8018efe:	b348      	cbz	r0, 8018f54 <uxr_create_session+0x168>
 8018f00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018f02:	a81a      	add	r0, sp, #104	; 0x68
 8018f04:	9205      	str	r2, [sp, #20]
 8018f06:	f7fa fa3d 	bl	8013384 <ucdr_buffer_remaining>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	f10d 0019 	add.w	r0, sp, #25
 8018f10:	9a05      	ldr	r2, [sp, #20]
 8018f12:	4659      	mov	r1, fp
 8018f14:	9000      	str	r0, [sp, #0]
 8018f16:	4650      	mov	r0, sl
 8018f18:	f005 fbd8 	bl	801e6cc <uxr_receive_reliable_message>
 8018f1c:	b1d0      	cbz	r0, 8018f54 <uxr_create_session+0x168>
 8018f1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d038      	beq.n	8018f98 <uxr_create_session+0x1ac>
 8018f26:	9f04      	ldr	r7, [sp, #16]
 8018f28:	e00a      	b.n	8018f40 <uxr_create_session+0x154>
 8018f2a:	f04f 0302 	mov.w	r3, #2
 8018f2e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8018f32:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8018f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f3c:	f7ff fae6 	bl	801850c <read_submessage_list>
 8018f40:	a922      	add	r1, sp, #136	; 0x88
 8018f42:	2204      	movs	r2, #4
 8018f44:	4650      	mov	r0, sl
 8018f46:	f005 fc43 	bl	801e7d0 <uxr_next_input_reliable_buffer_available>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	a922      	add	r1, sp, #136	; 0x88
 8018f4e:	4620      	mov	r0, r4
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d1ea      	bne.n	8018f2a <uxr_create_session+0x13e>
 8018f54:	4642      	mov	r2, r8
 8018f56:	9904      	ldr	r1, [sp, #16]
 8018f58:	4620      	mov	r0, r4
 8018f5a:	f7ff f953 	bl	8018204 <write_submessage_acknack.isra.0>
 8018f5e:	e779      	b.n	8018e54 <uxr_create_session+0x68>
 8018f60:	4641      	mov	r1, r8
 8018f62:	4630      	mov	r0, r6
 8018f64:	f000 ff1c 	bl	8019da0 <uxr_get_input_best_effort_stream>
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	f43f af73 	beq.w	8018e54 <uxr_create_session+0x68>
 8018f6e:	4659      	mov	r1, fp
 8018f70:	f005 fb22 	bl	801e5b8 <uxr_receive_best_effort_message>
 8018f74:	2800      	cmp	r0, #0
 8018f76:	f43f af6d 	beq.w	8018e54 <uxr_create_session+0x68>
 8018f7a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018f7e:	a91a      	add	r1, sp, #104	; 0x68
 8018f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f82:	4620      	mov	r0, r4
 8018f84:	f7ff fac2 	bl	801850c <read_submessage_list>
 8018f88:	e764      	b.n	8018e54 <uxr_create_session+0x68>
 8018f8a:	4630      	mov	r0, r6
 8018f8c:	f000 fe5a 	bl	8019c44 <uxr_reset_stream_storage>
 8018f90:	2001      	movs	r0, #1
 8018f92:	b02b      	add	sp, #172	; 0xac
 8018f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f98:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018f9c:	a91a      	add	r1, sp, #104	; 0x68
 8018f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f7ff fab3 	bl	801850c <read_submessage_list>
 8018fa6:	e7be      	b.n	8018f26 <uxr_create_session+0x13a>

08018fa8 <uxr_prepare_stream_to_write_submessage>:
 8018fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fac:	b082      	sub	sp, #8
 8018fae:	4604      	mov	r4, r0
 8018fb0:	4610      	mov	r0, r2
 8018fb2:	4615      	mov	r5, r2
 8018fb4:	461e      	mov	r6, r3
 8018fb6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018fba:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8018fbe:	f105 0904 	add.w	r9, r5, #4
 8018fc2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8018fc6:	9101      	str	r1, [sp, #4]
 8018fc8:	f000 ff56 	bl	8019e78 <uxr_submessage_padding>
 8018fcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018fd0:	4481      	add	r9, r0
 8018fd2:	2b01      	cmp	r3, #1
 8018fd4:	d01d      	beq.n	8019012 <uxr_prepare_stream_to_write_submessage+0x6a>
 8018fd6:	2b02      	cmp	r3, #2
 8018fd8:	d116      	bne.n	8019008 <uxr_prepare_stream_to_write_submessage+0x60>
 8018fda:	f104 0008 	add.w	r0, r4, #8
 8018fde:	4651      	mov	r1, sl
 8018fe0:	f000 fed2 	bl	8019d88 <uxr_get_output_reliable_stream>
 8018fe4:	4604      	mov	r4, r0
 8018fe6:	b158      	cbz	r0, 8019000 <uxr_prepare_stream_to_write_submessage+0x58>
 8018fe8:	4649      	mov	r1, r9
 8018fea:	4632      	mov	r2, r6
 8018fec:	f005 fdb6 	bl	801eb5c <uxr_prepare_reliable_buffer_to_write>
 8018ff0:	4604      	mov	r4, r0
 8018ff2:	b12c      	cbz	r4, 8019000 <uxr_prepare_stream_to_write_submessage+0x58>
 8018ff4:	4643      	mov	r3, r8
 8018ff6:	b2aa      	uxth	r2, r5
 8018ff8:	4639      	mov	r1, r7
 8018ffa:	4630      	mov	r0, r6
 8018ffc:	f000 fefc 	bl	8019df8 <uxr_buffer_submessage_header>
 8019000:	4620      	mov	r0, r4
 8019002:	b002      	add	sp, #8
 8019004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019008:	2400      	movs	r4, #0
 801900a:	4620      	mov	r0, r4
 801900c:	b002      	add	sp, #8
 801900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019012:	f104 0008 	add.w	r0, r4, #8
 8019016:	4651      	mov	r1, sl
 8019018:	f000 feae 	bl	8019d78 <uxr_get_output_best_effort_stream>
 801901c:	4604      	mov	r4, r0
 801901e:	2800      	cmp	r0, #0
 8019020:	d0ee      	beq.n	8019000 <uxr_prepare_stream_to_write_submessage+0x58>
 8019022:	4649      	mov	r1, r9
 8019024:	4632      	mov	r2, r6
 8019026:	f005 fcc3 	bl	801e9b0 <uxr_prepare_best_effort_buffer_to_write>
 801902a:	4604      	mov	r4, r0
 801902c:	e7e1      	b.n	8018ff2 <uxr_prepare_stream_to_write_submessage+0x4a>
 801902e:	bf00      	nop

08019030 <uxr_init_session_info>:
 8019030:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019034:	23ff      	movs	r3, #255	; 0xff
 8019036:	7102      	strb	r2, [r0, #4]
 8019038:	f880 c001 	strb.w	ip, [r0, #1]
 801903c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019040:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019044:	7001      	strb	r1, [r0, #0]
 8019046:	f880 c002 	strb.w	ip, [r0, #2]
 801904a:	7143      	strb	r3, [r0, #5]
 801904c:	70c2      	strb	r2, [r0, #3]
 801904e:	b500      	push	{lr}
 8019050:	f04f 0e09 	mov.w	lr, #9
 8019054:	f8a0 e006 	strh.w	lr, [r0, #6]
 8019058:	f85d fb04 	ldr.w	pc, [sp], #4

0801905c <uxr_buffer_create_session>:
 801905c:	b530      	push	{r4, r5, lr}
 801905e:	2300      	movs	r3, #0
 8019060:	b089      	sub	sp, #36	; 0x24
 8019062:	4d12      	ldr	r5, [pc, #72]	; (80190ac <uxr_buffer_create_session+0x50>)
 8019064:	460c      	mov	r4, r1
 8019066:	9307      	str	r3, [sp, #28]
 8019068:	4619      	mov	r1, r3
 801906a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801906e:	2201      	movs	r2, #1
 8019070:	9301      	str	r3, [sp, #4]
 8019072:	80c2      	strh	r2, [r0, #6]
 8019074:	f88d 2004 	strb.w	r2, [sp, #4]
 8019078:	682a      	ldr	r2, [r5, #0]
 801907a:	9303      	str	r3, [sp, #12]
 801907c:	9200      	str	r2, [sp, #0]
 801907e:	88aa      	ldrh	r2, [r5, #4]
 8019080:	9306      	str	r3, [sp, #24]
 8019082:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019086:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801908a:	9202      	str	r2, [sp, #8]
 801908c:	7802      	ldrb	r2, [r0, #0]
 801908e:	4620      	mov	r0, r4
 8019090:	f88d 200c 	strb.w	r2, [sp, #12]
 8019094:	2210      	movs	r2, #16
 8019096:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801909a:	f000 fead 	bl	8019df8 <uxr_buffer_submessage_header>
 801909e:	4669      	mov	r1, sp
 80190a0:	4620      	mov	r0, r4
 80190a2:	f001 ff1f 	bl	801aee4 <uxr_serialize_CREATE_CLIENT_Payload>
 80190a6:	b009      	add	sp, #36	; 0x24
 80190a8:	bd30      	pop	{r4, r5, pc}
 80190aa:	bf00      	nop
 80190ac:	08024544 	.word	0x08024544

080190b0 <uxr_buffer_delete_session>:
 80190b0:	4a0c      	ldr	r2, [pc, #48]	; (80190e4 <uxr_buffer_delete_session+0x34>)
 80190b2:	2302      	movs	r3, #2
 80190b4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80190b8:	b510      	push	{r4, lr}
 80190ba:	460c      	mov	r4, r1
 80190bc:	b082      	sub	sp, #8
 80190be:	8911      	ldrh	r1, [r2, #8]
 80190c0:	2204      	movs	r2, #4
 80190c2:	80c3      	strh	r3, [r0, #6]
 80190c4:	2300      	movs	r3, #0
 80190c6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80190ca:	4620      	mov	r0, r4
 80190cc:	2103      	movs	r1, #3
 80190ce:	f8ad c004 	strh.w	ip, [sp, #4]
 80190d2:	f000 fe91 	bl	8019df8 <uxr_buffer_submessage_header>
 80190d6:	a901      	add	r1, sp, #4
 80190d8:	4620      	mov	r0, r4
 80190da:	f001 ffab 	bl	801b034 <uxr_serialize_DELETE_Payload>
 80190de:	b002      	add	sp, #8
 80190e0:	bd10      	pop	{r4, pc}
 80190e2:	bf00      	nop
 80190e4:	08024544 	.word	0x08024544

080190e8 <uxr_read_create_session_status>:
 80190e8:	b510      	push	{r4, lr}
 80190ea:	460b      	mov	r3, r1
 80190ec:	b088      	sub	sp, #32
 80190ee:	4604      	mov	r4, r0
 80190f0:	a901      	add	r1, sp, #4
 80190f2:	4618      	mov	r0, r3
 80190f4:	f001 ffae 	bl	801b054 <uxr_deserialize_STATUS_AGENT_Payload>
 80190f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80190fc:	7163      	strb	r3, [r4, #5]
 80190fe:	b008      	add	sp, #32
 8019100:	bd10      	pop	{r4, pc}
 8019102:	bf00      	nop

08019104 <uxr_read_delete_session_status>:
 8019104:	b510      	push	{r4, lr}
 8019106:	b084      	sub	sp, #16
 8019108:	4604      	mov	r4, r0
 801910a:	4608      	mov	r0, r1
 801910c:	a902      	add	r1, sp, #8
 801910e:	f001 ffd1 	bl	801b0b4 <uxr_deserialize_STATUS_Payload>
 8019112:	88e3      	ldrh	r3, [r4, #6]
 8019114:	2b02      	cmp	r3, #2
 8019116:	d001      	beq.n	801911c <uxr_read_delete_session_status+0x18>
 8019118:	b004      	add	sp, #16
 801911a:	bd10      	pop	{r4, pc}
 801911c:	f10d 000a 	add.w	r0, sp, #10
 8019120:	f7fe fec6 	bl	8017eb0 <uxr_object_id_from_raw>
 8019124:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8019128:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801912c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019130:	b29b      	uxth	r3, r3
 8019132:	2b02      	cmp	r3, #2
 8019134:	d1f0      	bne.n	8019118 <uxr_read_delete_session_status+0x14>
 8019136:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801913a:	7163      	strb	r3, [r4, #5]
 801913c:	e7ec      	b.n	8019118 <uxr_read_delete_session_status+0x14>
 801913e:	bf00      	nop

08019140 <uxr_stamp_create_session_header>:
 8019140:	b510      	push	{r4, lr}
 8019142:	2208      	movs	r2, #8
 8019144:	b08a      	sub	sp, #40	; 0x28
 8019146:	4604      	mov	r4, r0
 8019148:	eb0d 0002 	add.w	r0, sp, r2
 801914c:	f7fa f8e8 	bl	8013320 <ucdr_init_buffer>
 8019150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019154:	2300      	movs	r3, #0
 8019156:	a802      	add	r0, sp, #8
 8019158:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801915c:	9400      	str	r4, [sp, #0]
 801915e:	461a      	mov	r2, r3
 8019160:	f001 f846 	bl	801a1f0 <uxr_serialize_message_header>
 8019164:	b00a      	add	sp, #40	; 0x28
 8019166:	bd10      	pop	{r4, pc}

08019168 <uxr_stamp_session_header>:
 8019168:	b530      	push	{r4, r5, lr}
 801916a:	b08d      	sub	sp, #52	; 0x34
 801916c:	4604      	mov	r4, r0
 801916e:	460d      	mov	r5, r1
 8019170:	4619      	mov	r1, r3
 8019172:	a804      	add	r0, sp, #16
 8019174:	9203      	str	r2, [sp, #12]
 8019176:	2208      	movs	r2, #8
 8019178:	f7fa f8d2 	bl	8013320 <ucdr_init_buffer>
 801917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019180:	9b03      	ldr	r3, [sp, #12]
 8019182:	462a      	mov	r2, r5
 8019184:	a804      	add	r0, sp, #16
 8019186:	9400      	str	r4, [sp, #0]
 8019188:	f001 f832 	bl	801a1f0 <uxr_serialize_message_header>
 801918c:	b00d      	add	sp, #52	; 0x34
 801918e:	bd30      	pop	{r4, r5, pc}

08019190 <uxr_read_session_header>:
 8019190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019194:	4607      	mov	r7, r0
 8019196:	b084      	sub	sp, #16
 8019198:	4608      	mov	r0, r1
 801919a:	460c      	mov	r4, r1
 801919c:	4615      	mov	r5, r2
 801919e:	461e      	mov	r6, r3
 80191a0:	f7fa f8f0 	bl	8013384 <ucdr_buffer_remaining>
 80191a4:	2808      	cmp	r0, #8
 80191a6:	d803      	bhi.n	80191b0 <uxr_read_session_header+0x20>
 80191a8:	2000      	movs	r0, #0
 80191aa:	b004      	add	sp, #16
 80191ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191b0:	f10d 080c 	add.w	r8, sp, #12
 80191b4:	4633      	mov	r3, r6
 80191b6:	462a      	mov	r2, r5
 80191b8:	4620      	mov	r0, r4
 80191ba:	f10d 010b 	add.w	r1, sp, #11
 80191be:	f8cd 8000 	str.w	r8, [sp]
 80191c2:	f001 f833 	bl	801a22c <uxr_deserialize_message_header>
 80191c6:	783a      	ldrb	r2, [r7, #0]
 80191c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80191cc:	4293      	cmp	r3, r2
 80191ce:	d1eb      	bne.n	80191a8 <uxr_read_session_header+0x18>
 80191d0:	061b      	lsls	r3, r3, #24
 80191d2:	d41b      	bmi.n	801920c <uxr_read_session_header+0x7c>
 80191d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80191d8:	787b      	ldrb	r3, [r7, #1]
 80191da:	429a      	cmp	r2, r3
 80191dc:	d003      	beq.n	80191e6 <uxr_read_session_header+0x56>
 80191de:	2001      	movs	r0, #1
 80191e0:	f080 0001 	eor.w	r0, r0, #1
 80191e4:	e7e1      	b.n	80191aa <uxr_read_session_header+0x1a>
 80191e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80191ea:	1cb8      	adds	r0, r7, #2
 80191ec:	78bb      	ldrb	r3, [r7, #2]
 80191ee:	429a      	cmp	r2, r3
 80191f0:	d1f5      	bne.n	80191de <uxr_read_session_header+0x4e>
 80191f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80191f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d1ef      	bne.n	80191de <uxr_read_session_header+0x4e>
 80191fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8019202:	7843      	ldrb	r3, [r0, #1]
 8019204:	429a      	cmp	r2, r3
 8019206:	d1ea      	bne.n	80191de <uxr_read_session_header+0x4e>
 8019208:	2000      	movs	r0, #0
 801920a:	e7e9      	b.n	80191e0 <uxr_read_session_header+0x50>
 801920c:	2001      	movs	r0, #1
 801920e:	e7cc      	b.n	80191aa <uxr_read_session_header+0x1a>

08019210 <uxr_session_header_offset>:
 8019210:	f990 3000 	ldrsb.w	r3, [r0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	bfac      	ite	ge
 8019218:	2008      	movge	r0, #8
 801921a:	2004      	movlt	r0, #4
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop

08019220 <uxr_init_base_object_request>:
 8019220:	b510      	push	{r4, lr}
 8019222:	b082      	sub	sp, #8
 8019224:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8019228:	9101      	str	r1, [sp, #4]
 801922a:	88c3      	ldrh	r3, [r0, #6]
 801922c:	f1a3 010a 	sub.w	r1, r3, #10
 8019230:	b289      	uxth	r1, r1
 8019232:	42a1      	cmp	r1, r4
 8019234:	d80f      	bhi.n	8019256 <uxr_init_base_object_request+0x36>
 8019236:	3301      	adds	r3, #1
 8019238:	b29c      	uxth	r4, r3
 801923a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801923e:	b2db      	uxtb	r3, r3
 8019240:	80c4      	strh	r4, [r0, #6]
 8019242:	1c91      	adds	r1, r2, #2
 8019244:	9801      	ldr	r0, [sp, #4]
 8019246:	f882 c000 	strb.w	ip, [r2]
 801924a:	7053      	strb	r3, [r2, #1]
 801924c:	f7fe fe44 	bl	8017ed8 <uxr_object_id_to_raw>
 8019250:	4620      	mov	r0, r4
 8019252:	b002      	add	sp, #8
 8019254:	bd10      	pop	{r4, pc}
 8019256:	230a      	movs	r3, #10
 8019258:	f04f 0c00 	mov.w	ip, #0
 801925c:	461c      	mov	r4, r3
 801925e:	e7ef      	b.n	8019240 <uxr_init_base_object_request+0x20>

08019260 <uxr_parse_base_object_request>:
 8019260:	b570      	push	{r4, r5, r6, lr}
 8019262:	4604      	mov	r4, r0
 8019264:	3002      	adds	r0, #2
 8019266:	460d      	mov	r5, r1
 8019268:	4616      	mov	r6, r2
 801926a:	f7fe fe21 	bl	8017eb0 <uxr_object_id_from_raw>
 801926e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8019272:	8028      	strh	r0, [r5, #0]
 8019274:	806b      	strh	r3, [r5, #2]
 8019276:	7822      	ldrb	r2, [r4, #0]
 8019278:	7863      	ldrb	r3, [r4, #1]
 801927a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801927e:	8033      	strh	r3, [r6, #0]
 8019280:	bd70      	pop	{r4, r5, r6, pc}
 8019282:	bf00      	nop

08019284 <uxr_init_framing_io>:
 8019284:	2300      	movs	r3, #0
 8019286:	7041      	strb	r1, [r0, #1]
 8019288:	7003      	strb	r3, [r0, #0]
 801928a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801928c:	4770      	bx	lr
 801928e:	bf00      	nop

08019290 <uxr_write_framed_msg>:
 8019290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019294:	4617      	mov	r7, r2
 8019296:	7842      	ldrb	r2, [r0, #1]
 8019298:	460e      	mov	r6, r1
 801929a:	b083      	sub	sp, #12
 801929c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80192a0:	469b      	mov	fp, r3
 80192a2:	237e      	movs	r3, #126	; 0x7e
 80192a4:	4604      	mov	r4, r0
 80192a6:	2901      	cmp	r1, #1
 80192a8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80192ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80192b0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80192b4:	f240 8115 	bls.w	80194e2 <uxr_write_framed_msg+0x252>
 80192b8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80192bc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80192c0:	2202      	movs	r2, #2
 80192c2:	2901      	cmp	r1, #1
 80192c4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192c8:	d952      	bls.n	8019370 <uxr_write_framed_msg+0xe0>
 80192ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192cc:	2103      	movs	r1, #3
 80192ce:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80192d2:	b2dd      	uxtb	r5, r3
 80192d4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80192d8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80192dc:	2a01      	cmp	r2, #1
 80192de:	d95c      	bls.n	801939a <uxr_write_framed_msg+0x10a>
 80192e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192e2:	1862      	adds	r2, r4, r1
 80192e4:	3101      	adds	r1, #1
 80192e6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80192ea:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 80192ee:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80192f2:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80192f6:	2a01      	cmp	r2, #1
 80192f8:	d961      	bls.n	80193be <uxr_write_framed_msg+0x12e>
 80192fa:	1c4a      	adds	r2, r1, #1
 80192fc:	4421      	add	r1, r4
 80192fe:	b2d2      	uxtb	r2, r2
 8019300:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019304:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019308:	2b00      	cmp	r3, #0
 801930a:	d06a      	beq.n	80193e2 <uxr_write_framed_msg+0x152>
 801930c:	f04f 0800 	mov.w	r8, #0
 8019310:	46c1      	mov	r9, r8
 8019312:	e016      	b.n	8019342 <uxr_write_framed_msg+0xb2>
 8019314:	2a29      	cmp	r2, #41	; 0x29
 8019316:	d868      	bhi.n	80193ea <uxr_write_framed_msg+0x15a>
 8019318:	18a0      	adds	r0, r4, r2
 801931a:	3201      	adds	r2, #1
 801931c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019320:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019324:	ea88 0101 	eor.w	r1, r8, r1
 8019328:	4b7d      	ldr	r3, [pc, #500]	; (8019520 <uxr_write_framed_msg+0x290>)
 801932a:	f109 0901 	add.w	r9, r9, #1
 801932e:	b2c9      	uxtb	r1, r1
 8019330:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019334:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801933a:	454b      	cmp	r3, r9
 801933c:	d969      	bls.n	8019412 <uxr_write_framed_msg+0x182>
 801933e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019342:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019346:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801934a:	2801      	cmp	r0, #1
 801934c:	d8e2      	bhi.n	8019314 <uxr_write_framed_msg+0x84>
 801934e:	1c50      	adds	r0, r2, #1
 8019350:	b2c0      	uxtb	r0, r0
 8019352:	2829      	cmp	r0, #41	; 0x29
 8019354:	d849      	bhi.n	80193ea <uxr_write_framed_msg+0x15a>
 8019356:	18a0      	adds	r0, r4, r2
 8019358:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801935c:	3202      	adds	r2, #2
 801935e:	f081 0520 	eor.w	r5, r1, #32
 8019362:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019366:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801936a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801936e:	e7d9      	b.n	8019324 <uxr_write_framed_msg+0x94>
 8019370:	2104      	movs	r1, #4
 8019372:	f04f 0c03 	mov.w	ip, #3
 8019376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019378:	4422      	add	r2, r4
 801937a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801937e:	44a4      	add	ip, r4
 8019380:	b2dd      	uxtb	r5, r3
 8019382:	f080 0020 	eor.w	r0, r0, #32
 8019386:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801938a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801938e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8019392:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019396:	2a01      	cmp	r2, #1
 8019398:	d8a2      	bhi.n	80192e0 <uxr_write_framed_msg+0x50>
 801939a:	1862      	adds	r2, r4, r1
 801939c:	207d      	movs	r0, #125	; 0x7d
 801939e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193a0:	f085 0520 	eor.w	r5, r5, #32
 80193a4:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80193a8:	3102      	adds	r1, #2
 80193aa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80193ae:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80193b2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80193b6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80193ba:	2a01      	cmp	r2, #1
 80193bc:	d89d      	bhi.n	80192fa <uxr_write_framed_msg+0x6a>
 80193be:	1c4d      	adds	r5, r1, #1
 80193c0:	1c8a      	adds	r2, r1, #2
 80193c2:	f080 0020 	eor.w	r0, r0, #32
 80193c6:	4421      	add	r1, r4
 80193c8:	fa54 f585 	uxtab	r5, r4, r5
 80193cc:	b2d2      	uxtb	r2, r2
 80193ce:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80193d2:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80193d6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80193da:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d194      	bne.n	801930c <uxr_write_framed_msg+0x7c>
 80193e2:	4619      	mov	r1, r3
 80193e4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80193e8:	e019      	b.n	801941e <uxr_write_framed_msg+0x18e>
 80193ea:	2500      	movs	r5, #0
 80193ec:	e000      	b.n	80193f0 <uxr_write_framed_msg+0x160>
 80193ee:	b160      	cbz	r0, 801940a <uxr_write_framed_msg+0x17a>
 80193f0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80193f4:	1b52      	subs	r2, r2, r5
 80193f6:	4653      	mov	r3, sl
 80193f8:	4638      	mov	r0, r7
 80193fa:	4421      	add	r1, r4
 80193fc:	47b0      	blx	r6
 80193fe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019402:	4405      	add	r5, r0
 8019404:	4295      	cmp	r5, r2
 8019406:	d3f2      	bcc.n	80193ee <uxr_write_framed_msg+0x15e>
 8019408:	d066      	beq.n	80194d8 <uxr_write_framed_msg+0x248>
 801940a:	2000      	movs	r0, #0
 801940c:	b003      	add	sp, #12
 801940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019412:	fa5f f188 	uxtb.w	r1, r8
 8019416:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801941a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801941e:	f04f 0900 	mov.w	r9, #0
 8019422:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8019426:	46c8      	mov	r8, r9
 8019428:	e013      	b.n	8019452 <uxr_write_framed_msg+0x1c2>
 801942a:	2a29      	cmp	r2, #41	; 0x29
 801942c:	d824      	bhi.n	8019478 <uxr_write_framed_msg+0x1e8>
 801942e:	18a3      	adds	r3, r4, r2
 8019430:	3201      	adds	r2, #1
 8019432:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8019436:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801943a:	f109 0901 	add.w	r9, r9, #1
 801943e:	f1b9 0f02 	cmp.w	r9, #2
 8019442:	d02d      	beq.n	80194a0 <uxr_write_framed_msg+0x210>
 8019444:	f109 0308 	add.w	r3, r9, #8
 8019448:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801944c:	446b      	add	r3, sp
 801944e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019452:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8019456:	2b01      	cmp	r3, #1
 8019458:	d8e7      	bhi.n	801942a <uxr_write_framed_msg+0x19a>
 801945a:	1c53      	adds	r3, r2, #1
 801945c:	b2db      	uxtb	r3, r3
 801945e:	2b29      	cmp	r3, #41	; 0x29
 8019460:	d80a      	bhi.n	8019478 <uxr_write_framed_msg+0x1e8>
 8019462:	18a3      	adds	r3, r4, r2
 8019464:	f081 0120 	eor.w	r1, r1, #32
 8019468:	3202      	adds	r2, #2
 801946a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801946e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8019472:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019476:	e7e0      	b.n	801943a <uxr_write_framed_msg+0x1aa>
 8019478:	2500      	movs	r5, #0
 801947a:	e001      	b.n	8019480 <uxr_write_framed_msg+0x1f0>
 801947c:	2800      	cmp	r0, #0
 801947e:	d0c4      	beq.n	801940a <uxr_write_framed_msg+0x17a>
 8019480:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019484:	1b52      	subs	r2, r2, r5
 8019486:	4653      	mov	r3, sl
 8019488:	4638      	mov	r0, r7
 801948a:	4421      	add	r1, r4
 801948c:	47b0      	blx	r6
 801948e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019492:	4405      	add	r5, r0
 8019494:	4295      	cmp	r5, r2
 8019496:	d3f1      	bcc.n	801947c <uxr_write_framed_msg+0x1ec>
 8019498:	d1b7      	bne.n	801940a <uxr_write_framed_msg+0x17a>
 801949a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801949e:	e7d1      	b.n	8019444 <uxr_write_framed_msg+0x1b4>
 80194a0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80194a4:	b19a      	cbz	r2, 80194ce <uxr_write_framed_msg+0x23e>
 80194a6:	2500      	movs	r5, #0
 80194a8:	e001      	b.n	80194ae <uxr_write_framed_msg+0x21e>
 80194aa:	2800      	cmp	r0, #0
 80194ac:	d0ad      	beq.n	801940a <uxr_write_framed_msg+0x17a>
 80194ae:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80194b2:	1b52      	subs	r2, r2, r5
 80194b4:	4653      	mov	r3, sl
 80194b6:	4638      	mov	r0, r7
 80194b8:	4421      	add	r1, r4
 80194ba:	47b0      	blx	r6
 80194bc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80194c0:	4405      	add	r5, r0
 80194c2:	4295      	cmp	r5, r2
 80194c4:	d3f1      	bcc.n	80194aa <uxr_write_framed_msg+0x21a>
 80194c6:	d1a0      	bne.n	801940a <uxr_write_framed_msg+0x17a>
 80194c8:	2300      	movs	r3, #0
 80194ca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80194ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194d0:	b298      	uxth	r0, r3
 80194d2:	b003      	add	sp, #12
 80194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d8:	f04f 0300 	mov.w	r3, #0
 80194dc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80194e0:	e72a      	b.n	8019338 <uxr_write_framed_msg+0xa8>
 80194e2:	217d      	movs	r1, #125	; 0x7d
 80194e4:	f082 0220 	eor.w	r2, r2, #32
 80194e8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80194ec:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80194f0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80194f4:	2203      	movs	r2, #3
 80194f6:	2901      	cmp	r1, #1
 80194f8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80194fc:	d803      	bhi.n	8019506 <uxr_write_framed_msg+0x276>
 80194fe:	2105      	movs	r1, #5
 8019500:	f04f 0c04 	mov.w	ip, #4
 8019504:	e737      	b.n	8019376 <uxr_write_framed_msg+0xe6>
 8019506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019508:	2104      	movs	r1, #4
 801950a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801950e:	b2dd      	uxtb	r5, r3
 8019510:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019514:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019518:	2a01      	cmp	r2, #1
 801951a:	f63f aee1 	bhi.w	80192e0 <uxr_write_framed_msg+0x50>
 801951e:	e73c      	b.n	801939a <uxr_write_framed_msg+0x10a>
 8019520:	080256c4 	.word	0x080256c4

08019524 <uxr_framing_read_transport>:
 8019524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019528:	4604      	mov	r4, r0
 801952a:	b085      	sub	sp, #20
 801952c:	4692      	mov	sl, r2
 801952e:	4689      	mov	r9, r1
 8019530:	461d      	mov	r5, r3
 8019532:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019534:	f000 fca6 	bl	8019e84 <uxr_millis>
 8019538:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801953c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019540:	4680      	mov	r8, r0
 8019542:	42ba      	cmp	r2, r7
 8019544:	d05f      	beq.n	8019606 <uxr_framing_read_transport+0xe2>
 8019546:	d817      	bhi.n	8019578 <uxr_framing_read_transport+0x54>
 8019548:	3f01      	subs	r7, #1
 801954a:	1aba      	subs	r2, r7, r2
 801954c:	2700      	movs	r7, #0
 801954e:	b2d2      	uxtb	r2, r2
 8019550:	42b2      	cmp	r2, r6
 8019552:	d81a      	bhi.n	801958a <uxr_framing_read_transport+0x66>
 8019554:	19d3      	adds	r3, r2, r7
 8019556:	42b3      	cmp	r3, r6
 8019558:	d852      	bhi.n	8019600 <uxr_framing_read_transport+0xdc>
 801955a:	b9d2      	cbnz	r2, 8019592 <uxr_framing_read_transport+0x6e>
 801955c:	2600      	movs	r6, #0
 801955e:	f000 fc91 	bl	8019e84 <uxr_millis>
 8019562:	682b      	ldr	r3, [r5, #0]
 8019564:	eba0 0008 	sub.w	r0, r0, r8
 8019568:	1a1b      	subs	r3, r3, r0
 801956a:	4630      	mov	r0, r6
 801956c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019570:	602b      	str	r3, [r5, #0]
 8019572:	b005      	add	sp, #20
 8019574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019578:	2f00      	cmp	r7, #0
 801957a:	d060      	beq.n	801963e <uxr_framing_read_transport+0x11a>
 801957c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8019580:	3f01      	subs	r7, #1
 8019582:	b2d2      	uxtb	r2, r2
 8019584:	b2ff      	uxtb	r7, r7
 8019586:	42b2      	cmp	r2, r6
 8019588:	d9e4      	bls.n	8019554 <uxr_framing_read_transport+0x30>
 801958a:	b2f2      	uxtb	r2, r6
 801958c:	2700      	movs	r7, #0
 801958e:	2a00      	cmp	r2, #0
 8019590:	d0e4      	beq.n	801955c <uxr_framing_read_transport+0x38>
 8019592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019594:	4650      	mov	r0, sl
 8019596:	9203      	str	r2, [sp, #12]
 8019598:	9300      	str	r3, [sp, #0]
 801959a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801959e:	682b      	ldr	r3, [r5, #0]
 80195a0:	3102      	adds	r1, #2
 80195a2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019648 <uxr_framing_read_transport+0x124>
 80195a6:	4421      	add	r1, r4
 80195a8:	47c8      	blx	r9
 80195aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80195ae:	4606      	mov	r6, r0
 80195b0:	4403      	add	r3, r0
 80195b2:	0859      	lsrs	r1, r3, #1
 80195b4:	fbab 2101 	umull	r2, r1, fp, r1
 80195b8:	222a      	movs	r2, #42	; 0x2a
 80195ba:	0889      	lsrs	r1, r1, #2
 80195bc:	fb02 3111 	mls	r1, r2, r1, r3
 80195c0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80195c4:	2800      	cmp	r0, #0
 80195c6:	d0c9      	beq.n	801955c <uxr_framing_read_transport+0x38>
 80195c8:	9a03      	ldr	r2, [sp, #12]
 80195ca:	4290      	cmp	r0, r2
 80195cc:	d1c7      	bne.n	801955e <uxr_framing_read_transport+0x3a>
 80195ce:	2f00      	cmp	r7, #0
 80195d0:	d0c5      	beq.n	801955e <uxr_framing_read_transport+0x3a>
 80195d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195d4:	3102      	adds	r1, #2
 80195d6:	463a      	mov	r2, r7
 80195d8:	4650      	mov	r0, sl
 80195da:	4421      	add	r1, r4
 80195dc:	9300      	str	r3, [sp, #0]
 80195de:	2300      	movs	r3, #0
 80195e0:	47c8      	blx	r9
 80195e2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80195e6:	4406      	add	r6, r0
 80195e8:	1813      	adds	r3, r2, r0
 80195ea:	085a      	lsrs	r2, r3, #1
 80195ec:	fbab 1b02 	umull	r1, fp, fp, r2
 80195f0:	222a      	movs	r2, #42	; 0x2a
 80195f2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80195f6:	fb02 331b 	mls	r3, r2, fp, r3
 80195fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80195fe:	e7ae      	b.n	801955e <uxr_framing_read_transport+0x3a>
 8019600:	1ab6      	subs	r6, r6, r2
 8019602:	b2f7      	uxtb	r7, r6
 8019604:	e7a9      	b.n	801955a <uxr_framing_read_transport+0x36>
 8019606:	2300      	movs	r3, #0
 8019608:	2e28      	cmp	r6, #40	; 0x28
 801960a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801960c:	d9bd      	bls.n	801958a <uxr_framing_read_transport+0x66>
 801960e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019610:	2229      	movs	r2, #41	; 0x29
 8019612:	1ca1      	adds	r1, r4, #2
 8019614:	4650      	mov	r0, sl
 8019616:	9300      	str	r3, [sp, #0]
 8019618:	682b      	ldr	r3, [r5, #0]
 801961a:	47c8      	blx	r9
 801961c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019620:	4606      	mov	r6, r0
 8019622:	212a      	movs	r1, #42	; 0x2a
 8019624:	4403      	add	r3, r0
 8019626:	4808      	ldr	r0, [pc, #32]	; (8019648 <uxr_framing_read_transport+0x124>)
 8019628:	085a      	lsrs	r2, r3, #1
 801962a:	fba0 0202 	umull	r0, r2, r0, r2
 801962e:	0892      	lsrs	r2, r2, #2
 8019630:	fb01 3312 	mls	r3, r1, r2, r3
 8019634:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019638:	2e00      	cmp	r6, #0
 801963a:	d08f      	beq.n	801955c <uxr_framing_read_transport+0x38>
 801963c:	e78f      	b.n	801955e <uxr_framing_read_transport+0x3a>
 801963e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8019642:	b2d2      	uxtb	r2, r2
 8019644:	e784      	b.n	8019550 <uxr_framing_read_transport+0x2c>
 8019646:	bf00      	nop
 8019648:	30c30c31 	.word	0x30c30c31

0801964c <uxr_read_framed_msg>:
 801964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019650:	461e      	mov	r6, r3
 8019652:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019656:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801965a:	b083      	sub	sp, #12
 801965c:	4604      	mov	r4, r0
 801965e:	4688      	mov	r8, r1
 8019660:	429d      	cmp	r5, r3
 8019662:	4691      	mov	r9, r2
 8019664:	f000 818c 	beq.w	8019980 <uxr_read_framed_msg+0x334>
 8019668:	7823      	ldrb	r3, [r4, #0]
 801966a:	4dc3      	ldr	r5, [pc, #780]	; (8019978 <uxr_read_framed_msg+0x32c>)
 801966c:	4fc3      	ldr	r7, [pc, #780]	; (801997c <uxr_read_framed_msg+0x330>)
 801966e:	2b07      	cmp	r3, #7
 8019670:	d8fd      	bhi.n	801966e <uxr_read_framed_msg+0x22>
 8019672:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019676:	011c      	.short	0x011c
 8019678:	00d900fb 	.word	0x00d900fb
 801967c:	008f00ba 	.word	0x008f00ba
 8019680:	00320051 	.word	0x00320051
 8019684:	0008      	.short	0x0008
 8019686:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801968a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801968e:	4299      	cmp	r1, r3
 8019690:	f000 814d 	beq.w	801992e <uxr_read_framed_msg+0x2e2>
 8019694:	18e2      	adds	r2, r4, r3
 8019696:	7892      	ldrb	r2, [r2, #2]
 8019698:	2a7d      	cmp	r2, #125	; 0x7d
 801969a:	f000 81b8 	beq.w	8019a0e <uxr_read_framed_msg+0x3c2>
 801969e:	3301      	adds	r3, #1
 80196a0:	212a      	movs	r1, #42	; 0x2a
 80196a2:	2a7e      	cmp	r2, #126	; 0x7e
 80196a4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80196a8:	fba5 c000 	umull	ip, r0, r5, r0
 80196ac:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80196b0:	fb01 3310 	mls	r3, r1, r0, r3
 80196b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80196b8:	f000 8257 	beq.w	8019b6a <uxr_read_framed_msg+0x51e>
 80196bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80196be:	2000      	movs	r0, #0
 80196c0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80196c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80196c6:	7020      	strb	r0, [r4, #0]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	4299      	cmp	r1, r3
 80196cc:	86a3      	strh	r3, [r4, #52]	; 0x34
 80196ce:	f000 8178 	beq.w	80199c2 <uxr_read_framed_msg+0x376>
 80196d2:	2000      	movs	r0, #0
 80196d4:	b003      	add	sp, #12
 80196d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196da:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80196de:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80196e2:	4298      	cmp	r0, r3
 80196e4:	f000 8132 	beq.w	801994c <uxr_read_framed_msg+0x300>
 80196e8:	18e2      	adds	r2, r4, r3
 80196ea:	7891      	ldrb	r1, [r2, #2]
 80196ec:	297d      	cmp	r1, #125	; 0x7d
 80196ee:	f000 8170 	beq.w	80199d2 <uxr_read_framed_msg+0x386>
 80196f2:	3301      	adds	r3, #1
 80196f4:	202a      	movs	r0, #42	; 0x2a
 80196f6:	297e      	cmp	r1, #126	; 0x7e
 80196f8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80196fc:	fba5 c202 	umull	ip, r2, r5, r2
 8019700:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019704:	fb00 3312 	mls	r3, r0, r2, r3
 8019708:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801970c:	f000 821d 	beq.w	8019b4a <uxr_read_framed_msg+0x4fe>
 8019710:	2307      	movs	r3, #7
 8019712:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019714:	7023      	strb	r3, [r4, #0]
 8019716:	e7aa      	b.n	801966e <uxr_read_framed_msg+0x22>
 8019718:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801971a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801971e:	459e      	cmp	lr, r3
 8019720:	d827      	bhi.n	8019772 <uxr_read_framed_msg+0x126>
 8019722:	e032      	b.n	801978a <uxr_read_framed_msg+0x13e>
 8019724:	fba5 b101 	umull	fp, r1, r5, r1
 8019728:	f89c c002 	ldrb.w	ip, [ip, #2]
 801972c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019730:	0889      	lsrs	r1, r1, #2
 8019732:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019736:	fb0b 0111 	mls	r1, fp, r1, r0
 801973a:	f000 80d4 	beq.w	80198e6 <uxr_read_framed_msg+0x29a>
 801973e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019742:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019746:	f000 80cb 	beq.w	80198e0 <uxr_read_framed_msg+0x294>
 801974a:	f806 c003 	strb.w	ip, [r6, r3]
 801974e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019750:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019752:	ea80 010c 	eor.w	r1, r0, ip
 8019756:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801975a:	3301      	adds	r3, #1
 801975c:	b2c9      	uxtb	r1, r1
 801975e:	b29b      	uxth	r3, r3
 8019760:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019764:	4573      	cmp	r3, lr
 8019766:	8663      	strh	r3, [r4, #50]	; 0x32
 8019768:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801976c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801976e:	f080 811d 	bcs.w	80199ac <uxr_read_framed_msg+0x360>
 8019772:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019776:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801977a:	1c50      	adds	r0, r2, #1
 801977c:	eb04 0c02 	add.w	ip, r4, r2
 8019780:	4592      	cmp	sl, r2
 8019782:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019786:	d1cd      	bne.n	8019724 <uxr_read_framed_msg+0xd8>
 8019788:	459e      	cmp	lr, r3
 801978a:	f040 8114 	bne.w	80199b6 <uxr_read_framed_msg+0x36a>
 801978e:	2306      	movs	r3, #6
 8019790:	7023      	strb	r3, [r4, #0]
 8019792:	e76c      	b.n	801966e <uxr_read_framed_msg+0x22>
 8019794:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019798:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801979c:	4298      	cmp	r0, r3
 801979e:	f000 80c6 	beq.w	801992e <uxr_read_framed_msg+0x2e2>
 80197a2:	18e2      	adds	r2, r4, r3
 80197a4:	7891      	ldrb	r1, [r2, #2]
 80197a6:	297d      	cmp	r1, #125	; 0x7d
 80197a8:	f000 8193 	beq.w	8019ad2 <uxr_read_framed_msg+0x486>
 80197ac:	3301      	adds	r3, #1
 80197ae:	202a      	movs	r0, #42	; 0x2a
 80197b0:	297e      	cmp	r1, #126	; 0x7e
 80197b2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80197b6:	fba5 c202 	umull	ip, r2, r5, r2
 80197ba:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80197be:	fb00 3312 	mls	r3, r0, r2, r3
 80197c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80197c6:	f000 81d0 	beq.w	8019b6a <uxr_read_framed_msg+0x51e>
 80197ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80197cc:	2000      	movs	r0, #0
 80197ce:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80197d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80197d4:	8660      	strh	r0, [r4, #50]	; 0x32
 80197d6:	b29b      	uxth	r3, r3
 80197d8:	86e0      	strh	r0, [r4, #54]	; 0x36
 80197da:	428b      	cmp	r3, r1
 80197dc:	8623      	strh	r3, [r4, #48]	; 0x30
 80197de:	f240 80e2 	bls.w	80199a6 <uxr_read_framed_msg+0x35a>
 80197e2:	7020      	strb	r0, [r4, #0]
 80197e4:	b003      	add	sp, #12
 80197e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ea:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80197ee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80197f2:	4298      	cmp	r0, r3
 80197f4:	f000 80aa 	beq.w	801994c <uxr_read_framed_msg+0x300>
 80197f8:	18e2      	adds	r2, r4, r3
 80197fa:	7891      	ldrb	r1, [r2, #2]
 80197fc:	297d      	cmp	r1, #125	; 0x7d
 80197fe:	f000 8186 	beq.w	8019b0e <uxr_read_framed_msg+0x4c2>
 8019802:	3301      	adds	r3, #1
 8019804:	202a      	movs	r0, #42	; 0x2a
 8019806:	297e      	cmp	r1, #126	; 0x7e
 8019808:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801980c:	fba5 c202 	umull	ip, r2, r5, r2
 8019810:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019814:	fb00 3312 	mls	r3, r0, r2, r3
 8019818:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801981c:	f000 8195 	beq.w	8019b4a <uxr_read_framed_msg+0x4fe>
 8019820:	2304      	movs	r3, #4
 8019822:	8621      	strh	r1, [r4, #48]	; 0x30
 8019824:	7023      	strb	r3, [r4, #0]
 8019826:	e722      	b.n	801966e <uxr_read_framed_msg+0x22>
 8019828:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801982c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019830:	4290      	cmp	r0, r2
 8019832:	f000 80b4 	beq.w	801999e <uxr_read_framed_msg+0x352>
 8019836:	18a3      	adds	r3, r4, r2
 8019838:	7899      	ldrb	r1, [r3, #2]
 801983a:	297d      	cmp	r1, #125	; 0x7d
 801983c:	f000 8107 	beq.w	8019a4e <uxr_read_framed_msg+0x402>
 8019840:	3201      	adds	r2, #1
 8019842:	232a      	movs	r3, #42	; 0x2a
 8019844:	297e      	cmp	r1, #126	; 0x7e
 8019846:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801984a:	fba5 c000 	umull	ip, r0, r5, r0
 801984e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019852:	fb03 2210 	mls	r2, r3, r0, r2
 8019856:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801985a:	f000 818a 	beq.w	8019b72 <uxr_read_framed_msg+0x526>
 801985e:	7863      	ldrb	r3, [r4, #1]
 8019860:	428b      	cmp	r3, r1
 8019862:	bf0c      	ite	eq
 8019864:	2303      	moveq	r3, #3
 8019866:	2300      	movne	r3, #0
 8019868:	7023      	strb	r3, [r4, #0]
 801986a:	e700      	b.n	801966e <uxr_read_framed_msg+0x22>
 801986c:	2300      	movs	r3, #0
 801986e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019872:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019876:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801987a:	4299      	cmp	r1, r3
 801987c:	d06a      	beq.n	8019954 <uxr_read_framed_msg+0x308>
 801987e:	18e2      	adds	r2, r4, r3
 8019880:	7890      	ldrb	r0, [r2, #2]
 8019882:	287d      	cmp	r0, #125	; 0x7d
 8019884:	f000 8100 	beq.w	8019a88 <uxr_read_framed_msg+0x43c>
 8019888:	3301      	adds	r3, #1
 801988a:	212a      	movs	r1, #42	; 0x2a
 801988c:	287e      	cmp	r0, #126	; 0x7e
 801988e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8019892:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019896:	fba5 c202 	umull	ip, r2, r5, r2
 801989a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801989e:	fb01 3312 	mls	r3, r1, r2, r3
 80198a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198a6:	d055      	beq.n	8019954 <uxr_read_framed_msg+0x308>
 80198a8:	2302      	movs	r3, #2
 80198aa:	7023      	strb	r3, [r4, #0]
 80198ac:	e6df      	b.n	801966e <uxr_read_framed_msg+0x22>
 80198ae:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 80198b2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80198b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80198ba:	1c5a      	adds	r2, r3, #1
 80198bc:	459c      	cmp	ip, r3
 80198be:	eb04 0103 	add.w	r1, r4, r3
 80198c2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80198c6:	f43f af04 	beq.w	80196d2 <uxr_read_framed_msg+0x86>
 80198ca:	fba5 0303 	umull	r0, r3, r5, r3
 80198ce:	7889      	ldrb	r1, [r1, #2]
 80198d0:	089b      	lsrs	r3, r3, #2
 80198d2:	297e      	cmp	r1, #126	; 0x7e
 80198d4:	fb0e 2313 	mls	r3, lr, r3, r2
 80198d8:	b2db      	uxtb	r3, r3
 80198da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198de:	d1ec      	bne.n	80198ba <uxr_read_framed_msg+0x26e>
 80198e0:	2301      	movs	r3, #1
 80198e2:	7023      	strb	r3, [r4, #0]
 80198e4:	e6c3      	b.n	801966e <uxr_read_framed_msg+0x22>
 80198e6:	1c50      	adds	r0, r2, #1
 80198e8:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80198ec:	3202      	adds	r2, #2
 80198ee:	0841      	lsrs	r1, r0, #1
 80198f0:	fba5 c101 	umull	ip, r1, r5, r1
 80198f4:	0889      	lsrs	r1, r1, #2
 80198f6:	fb0b 0111 	mls	r1, fp, r1, r0
 80198fa:	1860      	adds	r0, r4, r1
 80198fc:	b2c9      	uxtb	r1, r1
 80198fe:	458a      	cmp	sl, r1
 8019900:	f43f af42 	beq.w	8019788 <uxr_read_framed_msg+0x13c>
 8019904:	0851      	lsrs	r1, r2, #1
 8019906:	7880      	ldrb	r0, [r0, #2]
 8019908:	fba5 a101 	umull	sl, r1, r5, r1
 801990c:	287e      	cmp	r0, #126	; 0x7e
 801990e:	f080 0c20 	eor.w	ip, r0, #32
 8019912:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019916:	fb0b 2211 	mls	r2, fp, r1, r2
 801991a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801991e:	f47f af14 	bne.w	801974a <uxr_read_framed_msg+0xfe>
 8019922:	459e      	cmp	lr, r3
 8019924:	f43f af33 	beq.w	801978e <uxr_read_framed_msg+0x142>
 8019928:	2301      	movs	r3, #1
 801992a:	7023      	strb	r3, [r4, #0]
 801992c:	e69f      	b.n	801966e <uxr_read_framed_msg+0x22>
 801992e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019930:	9300      	str	r3, [sp, #0]
 8019932:	2301      	movs	r3, #1
 8019934:	9301      	str	r3, [sp, #4]
 8019936:	464a      	mov	r2, r9
 8019938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801993a:	4641      	mov	r1, r8
 801993c:	4620      	mov	r0, r4
 801993e:	f7ff fdf1 	bl	8019524 <uxr_framing_read_transport>
 8019942:	2800      	cmp	r0, #0
 8019944:	f43f aec5 	beq.w	80196d2 <uxr_read_framed_msg+0x86>
 8019948:	7823      	ldrb	r3, [r4, #0]
 801994a:	e690      	b.n	801966e <uxr_read_framed_msg+0x22>
 801994c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801994e:	9300      	str	r3, [sp, #0]
 8019950:	2302      	movs	r3, #2
 8019952:	e7ef      	b.n	8019934 <uxr_read_framed_msg+0x2e8>
 8019954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019956:	464a      	mov	r2, r9
 8019958:	4641      	mov	r1, r8
 801995a:	4620      	mov	r0, r4
 801995c:	9300      	str	r3, [sp, #0]
 801995e:	2304      	movs	r3, #4
 8019960:	9301      	str	r3, [sp, #4]
 8019962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019964:	f7ff fdde 	bl	8019524 <uxr_framing_read_transport>
 8019968:	2800      	cmp	r0, #0
 801996a:	d1ed      	bne.n	8019948 <uxr_read_framed_msg+0x2fc>
 801996c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019970:	2b7e      	cmp	r3, #126	; 0x7e
 8019972:	d0e9      	beq.n	8019948 <uxr_read_framed_msg+0x2fc>
 8019974:	e6ad      	b.n	80196d2 <uxr_read_framed_msg+0x86>
 8019976:	bf00      	nop
 8019978:	30c30c31 	.word	0x30c30c31
 801997c:	080256c4 	.word	0x080256c4
 8019980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019982:	9300      	str	r3, [sp, #0]
 8019984:	2305      	movs	r3, #5
 8019986:	9301      	str	r3, [sp, #4]
 8019988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801998a:	f7ff fdcb 	bl	8019524 <uxr_framing_read_transport>
 801998e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019992:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019996:	429a      	cmp	r2, r3
 8019998:	f43f ae9b 	beq.w	80196d2 <uxr_read_framed_msg+0x86>
 801999c:	e664      	b.n	8019668 <uxr_read_framed_msg+0x1c>
 801999e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199a0:	9300      	str	r3, [sp, #0]
 80199a2:	2303      	movs	r3, #3
 80199a4:	e7c6      	b.n	8019934 <uxr_read_framed_msg+0x2e8>
 80199a6:	2305      	movs	r3, #5
 80199a8:	7023      	strb	r3, [r4, #0]
 80199aa:	e660      	b.n	801966e <uxr_read_framed_msg+0x22>
 80199ac:	f43f aeef 	beq.w	801978e <uxr_read_framed_msg+0x142>
 80199b0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80199b4:	d094      	beq.n	80198e0 <uxr_read_framed_msg+0x294>
 80199b6:	ebae 0303 	sub.w	r3, lr, r3
 80199ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80199bc:	3302      	adds	r3, #2
 80199be:	9200      	str	r2, [sp, #0]
 80199c0:	e7b8      	b.n	8019934 <uxr_read_framed_msg+0x2e8>
 80199c2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80199c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80199c8:	7013      	strb	r3, [r2, #0]
 80199ca:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80199cc:	b003      	add	sp, #12
 80199ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d2:	1c59      	adds	r1, r3, #1
 80199d4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80199d8:	084a      	lsrs	r2, r1, #1
 80199da:	fba5 e202 	umull	lr, r2, r5, r2
 80199de:	0892      	lsrs	r2, r2, #2
 80199e0:	fb0c 1212 	mls	r2, ip, r2, r1
 80199e4:	b2d1      	uxtb	r1, r2
 80199e6:	4288      	cmp	r0, r1
 80199e8:	d0b0      	beq.n	801994c <uxr_read_framed_msg+0x300>
 80199ea:	3302      	adds	r3, #2
 80199ec:	4422      	add	r2, r4
 80199ee:	7891      	ldrb	r1, [r2, #2]
 80199f0:	085a      	lsrs	r2, r3, #1
 80199f2:	fba5 0202 	umull	r0, r2, r5, r2
 80199f6:	297e      	cmp	r1, #126	; 0x7e
 80199f8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80199fc:	fb0c 3312 	mls	r3, ip, r2, r3
 8019a00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a04:	f000 80a1 	beq.w	8019b4a <uxr_read_framed_msg+0x4fe>
 8019a08:	f081 0120 	eor.w	r1, r1, #32
 8019a0c:	e680      	b.n	8019710 <uxr_read_framed_msg+0xc4>
 8019a0e:	f103 0c01 	add.w	ip, r3, #1
 8019a12:	202a      	movs	r0, #42	; 0x2a
 8019a14:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019a18:	fba5 e202 	umull	lr, r2, r5, r2
 8019a1c:	0892      	lsrs	r2, r2, #2
 8019a1e:	fb00 c212 	mls	r2, r0, r2, ip
 8019a22:	fa5f fc82 	uxtb.w	ip, r2
 8019a26:	4561      	cmp	r1, ip
 8019a28:	d081      	beq.n	801992e <uxr_read_framed_msg+0x2e2>
 8019a2a:	3302      	adds	r3, #2
 8019a2c:	4422      	add	r2, r4
 8019a2e:	0859      	lsrs	r1, r3, #1
 8019a30:	7892      	ldrb	r2, [r2, #2]
 8019a32:	fba5 c101 	umull	ip, r1, r5, r1
 8019a36:	2a7e      	cmp	r2, #126	; 0x7e
 8019a38:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019a3c:	fb00 3311 	mls	r3, r0, r1, r3
 8019a40:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a44:	f000 8091 	beq.w	8019b6a <uxr_read_framed_msg+0x51e>
 8019a48:	f082 0220 	eor.w	r2, r2, #32
 8019a4c:	e636      	b.n	80196bc <uxr_read_framed_msg+0x70>
 8019a4e:	1c51      	adds	r1, r2, #1
 8019a50:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019a54:	084b      	lsrs	r3, r1, #1
 8019a56:	fba5 e303 	umull	lr, r3, r5, r3
 8019a5a:	089b      	lsrs	r3, r3, #2
 8019a5c:	fb0c 1313 	mls	r3, ip, r3, r1
 8019a60:	b2d9      	uxtb	r1, r3
 8019a62:	4288      	cmp	r0, r1
 8019a64:	d09b      	beq.n	801999e <uxr_read_framed_msg+0x352>
 8019a66:	3202      	adds	r2, #2
 8019a68:	4423      	add	r3, r4
 8019a6a:	0850      	lsrs	r0, r2, #1
 8019a6c:	789b      	ldrb	r3, [r3, #2]
 8019a6e:	fba5 1000 	umull	r1, r0, r5, r0
 8019a72:	2b7e      	cmp	r3, #126	; 0x7e
 8019a74:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019a78:	fb0c 2210 	mls	r2, ip, r0, r2
 8019a7c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019a80:	d077      	beq.n	8019b72 <uxr_read_framed_msg+0x526>
 8019a82:	f083 0120 	eor.w	r1, r3, #32
 8019a86:	e6ea      	b.n	801985e <uxr_read_framed_msg+0x212>
 8019a88:	f103 0c01 	add.w	ip, r3, #1
 8019a8c:	202a      	movs	r0, #42	; 0x2a
 8019a8e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019a92:	fba5 e202 	umull	lr, r2, r5, r2
 8019a96:	0892      	lsrs	r2, r2, #2
 8019a98:	fb00 c212 	mls	r2, r0, r2, ip
 8019a9c:	fa5f fc82 	uxtb.w	ip, r2
 8019aa0:	4561      	cmp	r1, ip
 8019aa2:	f43f af57 	beq.w	8019954 <uxr_read_framed_msg+0x308>
 8019aa6:	3302      	adds	r3, #2
 8019aa8:	4422      	add	r2, r4
 8019aaa:	7891      	ldrb	r1, [r2, #2]
 8019aac:	085a      	lsrs	r2, r3, #1
 8019aae:	fba5 c202 	umull	ip, r2, r5, r2
 8019ab2:	297e      	cmp	r1, #126	; 0x7e
 8019ab4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019ab8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019abc:	fb00 3312 	mls	r3, r0, r2, r3
 8019ac0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019ac4:	f43f af46 	beq.w	8019954 <uxr_read_framed_msg+0x308>
 8019ac8:	f081 0120 	eor.w	r1, r1, #32
 8019acc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019ad0:	e6ea      	b.n	80198a8 <uxr_read_framed_msg+0x25c>
 8019ad2:	1c59      	adds	r1, r3, #1
 8019ad4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019ad8:	084a      	lsrs	r2, r1, #1
 8019ada:	fba5 e202 	umull	lr, r2, r5, r2
 8019ade:	0892      	lsrs	r2, r2, #2
 8019ae0:	fb0c 1212 	mls	r2, ip, r2, r1
 8019ae4:	b2d1      	uxtb	r1, r2
 8019ae6:	4288      	cmp	r0, r1
 8019ae8:	f43f af21 	beq.w	801992e <uxr_read_framed_msg+0x2e2>
 8019aec:	3302      	adds	r3, #2
 8019aee:	4422      	add	r2, r4
 8019af0:	7891      	ldrb	r1, [r2, #2]
 8019af2:	085a      	lsrs	r2, r3, #1
 8019af4:	fba5 0202 	umull	r0, r2, r5, r2
 8019af8:	297e      	cmp	r1, #126	; 0x7e
 8019afa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019afe:	fb0c 3312 	mls	r3, ip, r2, r3
 8019b02:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019b06:	d030      	beq.n	8019b6a <uxr_read_framed_msg+0x51e>
 8019b08:	f081 0120 	eor.w	r1, r1, #32
 8019b0c:	e65d      	b.n	80197ca <uxr_read_framed_msg+0x17e>
 8019b0e:	1c59      	adds	r1, r3, #1
 8019b10:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019b14:	084a      	lsrs	r2, r1, #1
 8019b16:	fba5 e202 	umull	lr, r2, r5, r2
 8019b1a:	0892      	lsrs	r2, r2, #2
 8019b1c:	fb0c 1212 	mls	r2, ip, r2, r1
 8019b20:	b2d1      	uxtb	r1, r2
 8019b22:	4288      	cmp	r0, r1
 8019b24:	f43f af12 	beq.w	801994c <uxr_read_framed_msg+0x300>
 8019b28:	3302      	adds	r3, #2
 8019b2a:	4422      	add	r2, r4
 8019b2c:	7891      	ldrb	r1, [r2, #2]
 8019b2e:	085a      	lsrs	r2, r3, #1
 8019b30:	fba5 0202 	umull	r0, r2, r5, r2
 8019b34:	297e      	cmp	r1, #126	; 0x7e
 8019b36:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019b3a:	fb0c 3312 	mls	r3, ip, r2, r3
 8019b3e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019b42:	d002      	beq.n	8019b4a <uxr_read_framed_msg+0x4fe>
 8019b44:	f081 0120 	eor.w	r1, r1, #32
 8019b48:	e66a      	b.n	8019820 <uxr_read_framed_msg+0x1d4>
 8019b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b4c:	9300      	str	r3, [sp, #0]
 8019b4e:	2302      	movs	r3, #2
 8019b50:	9301      	str	r3, [sp, #4]
 8019b52:	464a      	mov	r2, r9
 8019b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b56:	4641      	mov	r1, r8
 8019b58:	4620      	mov	r0, r4
 8019b5a:	f7ff fce3 	bl	8019524 <uxr_framing_read_transport>
 8019b5e:	2800      	cmp	r0, #0
 8019b60:	f47f aef2 	bne.w	8019948 <uxr_read_framed_msg+0x2fc>
 8019b64:	2301      	movs	r3, #1
 8019b66:	7023      	strb	r3, [r4, #0]
 8019b68:	e581      	b.n	801966e <uxr_read_framed_msg+0x22>
 8019b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b6c:	9300      	str	r3, [sp, #0]
 8019b6e:	2301      	movs	r3, #1
 8019b70:	e7ee      	b.n	8019b50 <uxr_read_framed_msg+0x504>
 8019b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b74:	9300      	str	r3, [sp, #0]
 8019b76:	2303      	movs	r3, #3
 8019b78:	e7ea      	b.n	8019b50 <uxr_read_framed_msg+0x504>
 8019b7a:	bf00      	nop

08019b7c <uxr_stream_id>:
 8019b7c:	2901      	cmp	r1, #1
 8019b7e:	4684      	mov	ip, r0
 8019b80:	b500      	push	{lr}
 8019b82:	b083      	sub	sp, #12
 8019b84:	d01f      	beq.n	8019bc6 <uxr_stream_id+0x4a>
 8019b86:	2902      	cmp	r1, #2
 8019b88:	f04f 0e00 	mov.w	lr, #0
 8019b8c:	d020      	beq.n	8019bd0 <uxr_stream_id+0x54>
 8019b8e:	2300      	movs	r3, #0
 8019b90:	2000      	movs	r0, #0
 8019b92:	f36e 0307 	bfi	r3, lr, #0, #8
 8019b96:	f36c 230f 	bfi	r3, ip, #8, #8
 8019b9a:	f361 4317 	bfi	r3, r1, #16, #8
 8019b9e:	f362 631f 	bfi	r3, r2, #24, #8
 8019ba2:	fa5f fc83 	uxtb.w	ip, r3
 8019ba6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019baa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019bae:	0e1b      	lsrs	r3, r3, #24
 8019bb0:	f36c 0007 	bfi	r0, ip, #0, #8
 8019bb4:	f361 200f 	bfi	r0, r1, #8, #8
 8019bb8:	f362 4017 	bfi	r0, r2, #16, #8
 8019bbc:	f363 601f 	bfi	r0, r3, #24, #8
 8019bc0:	b003      	add	sp, #12
 8019bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8019bc6:	f100 0e01 	add.w	lr, r0, #1
 8019bca:	fa5f fe8e 	uxtb.w	lr, lr
 8019bce:	e7de      	b.n	8019b8e <uxr_stream_id+0x12>
 8019bd0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8019bd4:	e7db      	b.n	8019b8e <uxr_stream_id+0x12>
 8019bd6:	bf00      	nop

08019bd8 <uxr_stream_id_from_raw>:
 8019bd8:	b082      	sub	sp, #8
 8019bda:	b130      	cbz	r0, 8019bea <uxr_stream_id_from_raw+0x12>
 8019bdc:	0603      	lsls	r3, r0, #24
 8019bde:	d421      	bmi.n	8019c24 <uxr_stream_id_from_raw+0x4c>
 8019be0:	1e42      	subs	r2, r0, #1
 8019be2:	f04f 0c01 	mov.w	ip, #1
 8019be6:	b2d2      	uxtb	r2, r2
 8019be8:	e001      	b.n	8019bee <uxr_stream_id_from_raw+0x16>
 8019bea:	4684      	mov	ip, r0
 8019bec:	4602      	mov	r2, r0
 8019bee:	2300      	movs	r3, #0
 8019bf0:	f360 0307 	bfi	r3, r0, #0, #8
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	f362 230f 	bfi	r3, r2, #8, #8
 8019bfa:	f36c 4317 	bfi	r3, ip, #16, #8
 8019bfe:	f361 631f 	bfi	r3, r1, #24, #8
 8019c02:	fa5f fc83 	uxtb.w	ip, r3
 8019c06:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019c0a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019c0e:	0e1b      	lsrs	r3, r3, #24
 8019c10:	f36c 0007 	bfi	r0, ip, #0, #8
 8019c14:	f361 200f 	bfi	r0, r1, #8, #8
 8019c18:	f362 4017 	bfi	r0, r2, #16, #8
 8019c1c:	f363 601f 	bfi	r0, r3, #24, #8
 8019c20:	b002      	add	sp, #8
 8019c22:	4770      	bx	lr
 8019c24:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019c28:	f04f 0c02 	mov.w	ip, #2
 8019c2c:	e7df      	b.n	8019bee <uxr_stream_id_from_raw+0x16>
 8019c2e:	bf00      	nop

08019c30 <uxr_init_stream_storage>:
 8019c30:	2300      	movs	r3, #0
 8019c32:	7403      	strb	r3, [r0, #16]
 8019c34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019c38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019c3c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019c40:	4770      	bx	lr
 8019c42:	bf00      	nop

08019c44 <uxr_reset_stream_storage>:
 8019c44:	b570      	push	{r4, r5, r6, lr}
 8019c46:	7c03      	ldrb	r3, [r0, #16]
 8019c48:	4604      	mov	r4, r0
 8019c4a:	b14b      	cbz	r3, 8019c60 <uxr_reset_stream_storage+0x1c>
 8019c4c:	4606      	mov	r6, r0
 8019c4e:	2500      	movs	r5, #0
 8019c50:	4630      	mov	r0, r6
 8019c52:	3501      	adds	r5, #1
 8019c54:	f004 fea6 	bl	801e9a4 <uxr_reset_output_best_effort_stream>
 8019c58:	7c23      	ldrb	r3, [r4, #16]
 8019c5a:	3610      	adds	r6, #16
 8019c5c:	42ab      	cmp	r3, r5
 8019c5e:	d8f7      	bhi.n	8019c50 <uxr_reset_stream_storage+0xc>
 8019c60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019c64:	b15b      	cbz	r3, 8019c7e <uxr_reset_stream_storage+0x3a>
 8019c66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019c6a:	2500      	movs	r5, #0
 8019c6c:	4630      	mov	r0, r6
 8019c6e:	3501      	adds	r5, #1
 8019c70:	f004 fc9e 	bl	801e5b0 <uxr_reset_input_best_effort_stream>
 8019c74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019c78:	3602      	adds	r6, #2
 8019c7a:	42ab      	cmp	r3, r5
 8019c7c:	d8f6      	bhi.n	8019c6c <uxr_reset_stream_storage+0x28>
 8019c7e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019c82:	b15b      	cbz	r3, 8019c9c <uxr_reset_stream_storage+0x58>
 8019c84:	f104 0618 	add.w	r6, r4, #24
 8019c88:	2500      	movs	r5, #0
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	3501      	adds	r5, #1
 8019c8e:	f004 ff37 	bl	801eb00 <uxr_reset_output_reliable_stream>
 8019c92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019c96:	3628      	adds	r6, #40	; 0x28
 8019c98:	42ab      	cmp	r3, r5
 8019c9a:	d8f6      	bhi.n	8019c8a <uxr_reset_stream_storage+0x46>
 8019c9c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019ca0:	b15b      	cbz	r3, 8019cba <uxr_reset_stream_storage+0x76>
 8019ca2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019ca6:	2500      	movs	r5, #0
 8019ca8:	4630      	mov	r0, r6
 8019caa:	3501      	adds	r5, #1
 8019cac:	f004 fcec 	bl	801e688 <uxr_reset_input_reliable_stream>
 8019cb0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019cb4:	3618      	adds	r6, #24
 8019cb6:	42ab      	cmp	r3, r5
 8019cb8:	d8f6      	bhi.n	8019ca8 <uxr_reset_stream_storage+0x64>
 8019cba:	bd70      	pop	{r4, r5, r6, pc}

08019cbc <uxr_add_output_best_effort_buffer>:
 8019cbc:	b510      	push	{r4, lr}
 8019cbe:	7c04      	ldrb	r4, [r0, #16]
 8019cc0:	b082      	sub	sp, #8
 8019cc2:	f104 0c01 	add.w	ip, r4, #1
 8019cc6:	f880 c010 	strb.w	ip, [r0, #16]
 8019cca:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019cce:	f004 fe5f 	bl	801e990 <uxr_init_output_best_effort_stream>
 8019cd2:	2201      	movs	r2, #1
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	4611      	mov	r1, r2
 8019cd8:	b002      	add	sp, #8
 8019cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cde:	f7ff bf4d 	b.w	8019b7c <uxr_stream_id>
 8019ce2:	bf00      	nop

08019ce4 <uxr_add_output_reliable_buffer>:
 8019ce4:	b510      	push	{r4, lr}
 8019ce6:	b084      	sub	sp, #16
 8019ce8:	4684      	mov	ip, r0
 8019cea:	2028      	movs	r0, #40	; 0x28
 8019cec:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019cf0:	9400      	str	r4, [sp, #0]
 8019cf2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8019cf6:	fb00 c004 	mla	r0, r0, r4, ip
 8019cfa:	f104 0e01 	add.w	lr, r4, #1
 8019cfe:	3018      	adds	r0, #24
 8019d00:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8019d04:	f004 fec4 	bl	801ea90 <uxr_init_output_reliable_stream>
 8019d08:	2201      	movs	r2, #1
 8019d0a:	2102      	movs	r1, #2
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	b004      	add	sp, #16
 8019d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d14:	f7ff bf32 	b.w	8019b7c <uxr_stream_id>

08019d18 <uxr_add_input_best_effort_buffer>:
 8019d18:	b510      	push	{r4, lr}
 8019d1a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8019d1e:	b082      	sub	sp, #8
 8019d20:	1c62      	adds	r2, r4, #1
 8019d22:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8019d26:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019d2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019d2e:	f004 fc3b 	bl	801e5a8 <uxr_init_input_best_effort_stream>
 8019d32:	2200      	movs	r2, #0
 8019d34:	2101      	movs	r1, #1
 8019d36:	4620      	mov	r0, r4
 8019d38:	b002      	add	sp, #8
 8019d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d3e:	f7ff bf1d 	b.w	8019b7c <uxr_stream_id>
 8019d42:	bf00      	nop

08019d44 <uxr_add_input_reliable_buffer>:
 8019d44:	b510      	push	{r4, lr}
 8019d46:	b084      	sub	sp, #16
 8019d48:	4684      	mov	ip, r0
 8019d4a:	2018      	movs	r0, #24
 8019d4c:	9c06      	ldr	r4, [sp, #24]
 8019d4e:	9400      	str	r4, [sp, #0]
 8019d50:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019d54:	fb00 c004 	mla	r0, r0, r4, ip
 8019d58:	f104 0e01 	add.w	lr, r4, #1
 8019d5c:	3048      	adds	r0, #72	; 0x48
 8019d5e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8019d62:	f004 fc6b 	bl	801e63c <uxr_init_input_reliable_stream>
 8019d66:	2200      	movs	r2, #0
 8019d68:	2102      	movs	r1, #2
 8019d6a:	4620      	mov	r0, r4
 8019d6c:	b004      	add	sp, #16
 8019d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d72:	f7ff bf03 	b.w	8019b7c <uxr_stream_id>
 8019d76:	bf00      	nop

08019d78 <uxr_get_output_best_effort_stream>:
 8019d78:	7c03      	ldrb	r3, [r0, #16]
 8019d7a:	428b      	cmp	r3, r1
 8019d7c:	bf8c      	ite	hi
 8019d7e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019d82:	2000      	movls	r0, #0
 8019d84:	4770      	bx	lr
 8019d86:	bf00      	nop

08019d88 <uxr_get_output_reliable_stream>:
 8019d88:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019d8c:	428b      	cmp	r3, r1
 8019d8e:	d904      	bls.n	8019d9a <uxr_get_output_reliable_stream+0x12>
 8019d90:	2328      	movs	r3, #40	; 0x28
 8019d92:	fb03 0001 	mla	r0, r3, r1, r0
 8019d96:	3018      	adds	r0, #24
 8019d98:	4770      	bx	lr
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	4770      	bx	lr
 8019d9e:	bf00      	nop

08019da0 <uxr_get_input_best_effort_stream>:
 8019da0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019da4:	428b      	cmp	r3, r1
 8019da6:	d903      	bls.n	8019db0 <uxr_get_input_best_effort_stream+0x10>
 8019da8:	3121      	adds	r1, #33	; 0x21
 8019daa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019dae:	4770      	bx	lr
 8019db0:	2000      	movs	r0, #0
 8019db2:	4770      	bx	lr

08019db4 <uxr_get_input_reliable_stream>:
 8019db4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019db8:	428b      	cmp	r3, r1
 8019dba:	d904      	bls.n	8019dc6 <uxr_get_input_reliable_stream+0x12>
 8019dbc:	2318      	movs	r3, #24
 8019dbe:	fb03 0001 	mla	r0, r3, r1, r0
 8019dc2:	3048      	adds	r0, #72	; 0x48
 8019dc4:	4770      	bx	lr
 8019dc6:	2000      	movs	r0, #0
 8019dc8:	4770      	bx	lr
 8019dca:	bf00      	nop

08019dcc <uxr_output_streams_confirmed>:
 8019dcc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019dd0:	b183      	cbz	r3, 8019df4 <uxr_output_streams_confirmed+0x28>
 8019dd2:	b570      	push	{r4, r5, r6, lr}
 8019dd4:	4606      	mov	r6, r0
 8019dd6:	f100 0518 	add.w	r5, r0, #24
 8019dda:	2400      	movs	r4, #0
 8019ddc:	e000      	b.n	8019de0 <uxr_output_streams_confirmed+0x14>
 8019dde:	b140      	cbz	r0, 8019df2 <uxr_output_streams_confirmed+0x26>
 8019de0:	4628      	mov	r0, r5
 8019de2:	3401      	adds	r4, #1
 8019de4:	f005 f900 	bl	801efe8 <uxr_is_output_up_to_date>
 8019de8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8019dec:	3528      	adds	r5, #40	; 0x28
 8019dee:	42a3      	cmp	r3, r4
 8019df0:	d8f5      	bhi.n	8019dde <uxr_output_streams_confirmed+0x12>
 8019df2:	bd70      	pop	{r4, r5, r6, pc}
 8019df4:	2001      	movs	r0, #1
 8019df6:	4770      	bx	lr

08019df8 <uxr_buffer_submessage_header>:
 8019df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dfa:	460e      	mov	r6, r1
 8019dfc:	2104      	movs	r1, #4
 8019dfe:	4604      	mov	r4, r0
 8019e00:	4615      	mov	r5, r2
 8019e02:	461f      	mov	r7, r3
 8019e04:	f7f9 faa8 	bl	8013358 <ucdr_align_to>
 8019e08:	2301      	movs	r3, #1
 8019e0a:	4631      	mov	r1, r6
 8019e0c:	4620      	mov	r0, r4
 8019e0e:	ea47 0203 	orr.w	r2, r7, r3
 8019e12:	7523      	strb	r3, [r4, #20]
 8019e14:	462b      	mov	r3, r5
 8019e16:	f000 fa29 	bl	801a26c <uxr_serialize_submessage_header>
 8019e1a:	4620      	mov	r0, r4
 8019e1c:	f7f9 fab2 	bl	8013384 <ucdr_buffer_remaining>
 8019e20:	42a8      	cmp	r0, r5
 8019e22:	bf34      	ite	cc
 8019e24:	2000      	movcc	r0, #0
 8019e26:	2001      	movcs	r0, #1
 8019e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e2a:	bf00      	nop

08019e2c <uxr_read_submessage_header>:
 8019e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e30:	4604      	mov	r4, r0
 8019e32:	460d      	mov	r5, r1
 8019e34:	2104      	movs	r1, #4
 8019e36:	4616      	mov	r6, r2
 8019e38:	4698      	mov	r8, r3
 8019e3a:	f7f9 fa8d 	bl	8013358 <ucdr_align_to>
 8019e3e:	4620      	mov	r0, r4
 8019e40:	f7f9 faa0 	bl	8013384 <ucdr_buffer_remaining>
 8019e44:	2803      	cmp	r0, #3
 8019e46:	bf8c      	ite	hi
 8019e48:	2701      	movhi	r7, #1
 8019e4a:	2700      	movls	r7, #0
 8019e4c:	d802      	bhi.n	8019e54 <uxr_read_submessage_header+0x28>
 8019e4e:	4638      	mov	r0, r7
 8019e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e54:	4633      	mov	r3, r6
 8019e56:	4642      	mov	r2, r8
 8019e58:	4620      	mov	r0, r4
 8019e5a:	4629      	mov	r1, r5
 8019e5c:	f000 fa1a 	bl	801a294 <uxr_deserialize_submessage_header>
 8019e60:	f898 3000 	ldrb.w	r3, [r8]
 8019e64:	4638      	mov	r0, r7
 8019e66:	f003 0201 	and.w	r2, r3, #1
 8019e6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019e6e:	f888 3000 	strb.w	r3, [r8]
 8019e72:	7522      	strb	r2, [r4, #20]
 8019e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e78 <uxr_submessage_padding>:
 8019e78:	f010 0003 	ands.w	r0, r0, #3
 8019e7c:	bf18      	it	ne
 8019e7e:	f1c0 0004 	rsbne	r0, r0, #4
 8019e82:	4770      	bx	lr

08019e84 <uxr_millis>:
 8019e84:	b510      	push	{r4, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	2001      	movs	r0, #1
 8019e8a:	4669      	mov	r1, sp
 8019e8c:	f7e9 f99c 	bl	80031c8 <clock_gettime>
 8019e90:	4908      	ldr	r1, [pc, #32]	; (8019eb4 <uxr_millis+0x30>)
 8019e92:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019e96:	fba0 0301 	umull	r0, r3, r0, r1
 8019e9a:	1900      	adds	r0, r0, r4
 8019e9c:	fb01 3102 	mla	r1, r1, r2, r3
 8019ea0:	4a05      	ldr	r2, [pc, #20]	; (8019eb8 <uxr_millis+0x34>)
 8019ea2:	f04f 0300 	mov.w	r3, #0
 8019ea6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019eaa:	f7e6 fbed 	bl	8000688 <__aeabi_ldivmod>
 8019eae:	b004      	add	sp, #16
 8019eb0:	bd10      	pop	{r4, pc}
 8019eb2:	bf00      	nop
 8019eb4:	3b9aca00 	.word	0x3b9aca00
 8019eb8:	000f4240 	.word	0x000f4240

08019ebc <uxr_nanos>:
 8019ebc:	b510      	push	{r4, lr}
 8019ebe:	b084      	sub	sp, #16
 8019ec0:	2001      	movs	r0, #1
 8019ec2:	4669      	mov	r1, sp
 8019ec4:	f7e9 f980 	bl	80031c8 <clock_gettime>
 8019ec8:	4a06      	ldr	r2, [pc, #24]	; (8019ee4 <uxr_nanos+0x28>)
 8019eca:	9800      	ldr	r0, [sp, #0]
 8019ecc:	9902      	ldr	r1, [sp, #8]
 8019ece:	fba0 0302 	umull	r0, r3, r0, r2
 8019ed2:	9c01      	ldr	r4, [sp, #4]
 8019ed4:	1840      	adds	r0, r0, r1
 8019ed6:	fb02 3304 	mla	r3, r2, r4, r3
 8019eda:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019ede:	b004      	add	sp, #16
 8019ee0:	bd10      	pop	{r4, pc}
 8019ee2:	bf00      	nop
 8019ee4:	3b9aca00 	.word	0x3b9aca00

08019ee8 <on_full_output_buffer_fragmented>:
 8019ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eec:	460c      	mov	r4, r1
 8019eee:	b08a      	sub	sp, #40	; 0x28
 8019ef0:	4606      	mov	r6, r0
 8019ef2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8019ef6:	f104 0008 	add.w	r0, r4, #8
 8019efa:	f7ff ff45 	bl	8019d88 <uxr_get_output_reliable_stream>
 8019efe:	4605      	mov	r5, r0
 8019f00:	f005 f87c 	bl	801effc <get_available_free_slots>
 8019f04:	b968      	cbnz	r0, 8019f22 <on_full_output_buffer_fragmented+0x3a>
 8019f06:	4620      	mov	r0, r4
 8019f08:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8019f0c:	4798      	blx	r3
 8019f0e:	b918      	cbnz	r0, 8019f18 <on_full_output_buffer_fragmented+0x30>
 8019f10:	2001      	movs	r0, #1
 8019f12:	b00a      	add	sp, #40	; 0x28
 8019f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f18:	4628      	mov	r0, r5
 8019f1a:	f005 f86f 	bl	801effc <get_available_free_slots>
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	d0f6      	beq.n	8019f10 <on_full_output_buffer_fragmented+0x28>
 8019f22:	8929      	ldrh	r1, [r5, #8]
 8019f24:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8019f28:	89eb      	ldrh	r3, [r5, #14]
 8019f2a:	7b28      	ldrb	r0, [r5, #12]
 8019f2c:	686f      	ldr	r7, [r5, #4]
 8019f2e:	1a12      	subs	r2, r2, r0
 8019f30:	fbb3 f0f1 	udiv	r0, r3, r1
 8019f34:	fbb7 f7f1 	udiv	r7, r7, r1
 8019f38:	fb01 3110 	mls	r1, r1, r0, r3
 8019f3c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8019f40:	b289      	uxth	r1, r1
 8019f42:	fb07 f101 	mul.w	r1, r7, r1
 8019f46:	3f04      	subs	r7, #4
 8019f48:	443a      	add	r2, r7
 8019f4a:	3104      	adds	r1, #4
 8019f4c:	fa1f f882 	uxth.w	r8, r2
 8019f50:	463a      	mov	r2, r7
 8019f52:	eba3 0308 	sub.w	r3, r3, r8
 8019f56:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8019f5a:	682b      	ldr	r3, [r5, #0]
 8019f5c:	4419      	add	r1, r3
 8019f5e:	2300      	movs	r3, #0
 8019f60:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019f64:	9000      	str	r0, [sp, #0]
 8019f66:	a802      	add	r0, sp, #8
 8019f68:	f7f9 f9c8 	bl	80132fc <ucdr_init_buffer_origin_offset>
 8019f6c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019f70:	f102 0308 	add.w	r3, r2, #8
 8019f74:	42bb      	cmp	r3, r7
 8019f76:	d927      	bls.n	8019fc8 <on_full_output_buffer_fragmented+0xe0>
 8019f78:	4642      	mov	r2, r8
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	210d      	movs	r1, #13
 8019f7e:	a802      	add	r0, sp, #8
 8019f80:	f7ff ff3a 	bl	8019df8 <uxr_buffer_submessage_header>
 8019f84:	8929      	ldrh	r1, [r5, #8]
 8019f86:	89eb      	ldrh	r3, [r5, #14]
 8019f88:	686a      	ldr	r2, [r5, #4]
 8019f8a:	fbb3 f0f1 	udiv	r0, r3, r1
 8019f8e:	fbb2 f2f1 	udiv	r2, r2, r1
 8019f92:	fb01 3310 	mls	r3, r1, r0, r3
 8019f96:	b29b      	uxth	r3, r3
 8019f98:	fb02 f303 	mul.w	r3, r2, r3
 8019f9c:	682a      	ldr	r2, [r5, #0]
 8019f9e:	50d7      	str	r7, [r2, r3]
 8019fa0:	2101      	movs	r1, #1
 8019fa2:	89e8      	ldrh	r0, [r5, #14]
 8019fa4:	f005 f84c 	bl	801f040 <uxr_seq_num_add>
 8019fa8:	9904      	ldr	r1, [sp, #16]
 8019faa:	9a03      	ldr	r2, [sp, #12]
 8019fac:	81e8      	strh	r0, [r5, #14]
 8019fae:	4630      	mov	r0, r6
 8019fb0:	1a52      	subs	r2, r2, r1
 8019fb2:	f7f9 f9b5 	bl	8013320 <ucdr_init_buffer>
 8019fb6:	4630      	mov	r0, r6
 8019fb8:	4622      	mov	r2, r4
 8019fba:	490f      	ldr	r1, [pc, #60]	; (8019ff8 <on_full_output_buffer_fragmented+0x110>)
 8019fbc:	f7f9 f984 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 8019fc0:	2000      	movs	r0, #0
 8019fc2:	b00a      	add	sp, #40	; 0x28
 8019fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc8:	b292      	uxth	r2, r2
 8019fca:	2302      	movs	r3, #2
 8019fcc:	210d      	movs	r1, #13
 8019fce:	a802      	add	r0, sp, #8
 8019fd0:	f7ff ff12 	bl	8019df8 <uxr_buffer_submessage_header>
 8019fd4:	8928      	ldrh	r0, [r5, #8]
 8019fd6:	89eb      	ldrh	r3, [r5, #14]
 8019fd8:	6869      	ldr	r1, [r5, #4]
 8019fda:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019fde:	fbb3 f7f0 	udiv	r7, r3, r0
 8019fe2:	fbb1 f1f0 	udiv	r1, r1, r0
 8019fe6:	fb00 3317 	mls	r3, r0, r7, r3
 8019fea:	3208      	adds	r2, #8
 8019fec:	b29b      	uxth	r3, r3
 8019fee:	fb01 f303 	mul.w	r3, r1, r3
 8019ff2:	6829      	ldr	r1, [r5, #0]
 8019ff4:	50ca      	str	r2, [r1, r3]
 8019ff6:	e7d3      	b.n	8019fa0 <on_full_output_buffer_fragmented+0xb8>
 8019ff8:	08019ee9 	.word	0x08019ee9

08019ffc <uxr_prepare_output_stream>:
 8019ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ffe:	b087      	sub	sp, #28
 801a000:	2707      	movs	r7, #7
 801a002:	2500      	movs	r5, #0
 801a004:	461c      	mov	r4, r3
 801a006:	4606      	mov	r6, r0
 801a008:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a00c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a00e:	e9cd 7500 	strd	r7, r5, [sp]
 801a012:	3204      	adds	r2, #4
 801a014:	f7fe ffc8 	bl	8018fa8 <uxr_prepare_stream_to_write_submessage>
 801a018:	f080 0201 	eor.w	r2, r0, #1
 801a01c:	b2d2      	uxtb	r2, r2
 801a01e:	75a2      	strb	r2, [r4, #22]
 801a020:	b112      	cbz	r2, 801a028 <uxr_prepare_output_stream+0x2c>
 801a022:	4628      	mov	r0, r5
 801a024:	b007      	add	sp, #28
 801a026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a028:	aa05      	add	r2, sp, #20
 801a02a:	9902      	ldr	r1, [sp, #8]
 801a02c:	4630      	mov	r0, r6
 801a02e:	f7ff f8f7 	bl	8019220 <uxr_init_base_object_request>
 801a032:	a905      	add	r1, sp, #20
 801a034:	4605      	mov	r5, r0
 801a036:	4620      	mov	r0, r4
 801a038:	f001 f8bc 	bl	801b1b4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a03c:	69a6      	ldr	r6, [r4, #24]
 801a03e:	69e7      	ldr	r7, [r4, #28]
 801a040:	4620      	mov	r0, r4
 801a042:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801a046:	1a52      	subs	r2, r2, r1
 801a048:	f7f9 f96a 	bl	8013320 <ucdr_init_buffer>
 801a04c:	4620      	mov	r0, r4
 801a04e:	463a      	mov	r2, r7
 801a050:	4631      	mov	r1, r6
 801a052:	f7f9 f939 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 801a056:	4628      	mov	r0, r5
 801a058:	b007      	add	sp, #28
 801a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a05c <uxr_prepare_output_stream_fragmented>:
 801a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a060:	b091      	sub	sp, #68	; 0x44
 801a062:	4605      	mov	r5, r0
 801a064:	3008      	adds	r0, #8
 801a066:	461e      	mov	r6, r3
 801a068:	9105      	str	r1, [sp, #20]
 801a06a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a06e:	9204      	str	r2, [sp, #16]
 801a070:	f7ff fe8a 	bl	8019d88 <uxr_get_output_reliable_stream>
 801a074:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a078:	2b01      	cmp	r3, #1
 801a07a:	f000 8093 	beq.w	801a1a4 <uxr_prepare_output_stream_fragmented+0x148>
 801a07e:	4604      	mov	r4, r0
 801a080:	2800      	cmp	r0, #0
 801a082:	f000 808f 	beq.w	801a1a4 <uxr_prepare_output_stream_fragmented+0x148>
 801a086:	f004 ffb9 	bl	801effc <get_available_free_slots>
 801a08a:	2800      	cmp	r0, #0
 801a08c:	f000 8085 	beq.w	801a19a <uxr_prepare_output_stream_fragmented+0x13e>
 801a090:	8923      	ldrh	r3, [r4, #8]
 801a092:	89e7      	ldrh	r7, [r4, #14]
 801a094:	6862      	ldr	r2, [r4, #4]
 801a096:	fbb7 f9f3 	udiv	r9, r7, r3
 801a09a:	fbb2 f2f3 	udiv	r2, r2, r3
 801a09e:	fb03 7919 	mls	r9, r3, r9, r7
 801a0a2:	6823      	ldr	r3, [r4, #0]
 801a0a4:	f1a2 0b04 	sub.w	fp, r2, #4
 801a0a8:	9203      	str	r2, [sp, #12]
 801a0aa:	fa1f f989 	uxth.w	r9, r9
 801a0ae:	fb02 f909 	mul.w	r9, r2, r9
 801a0b2:	f109 0904 	add.w	r9, r9, #4
 801a0b6:	4499      	add	r9, r3
 801a0b8:	7b23      	ldrb	r3, [r4, #12]
 801a0ba:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a0be:	4543      	cmp	r3, r8
 801a0c0:	d37c      	bcc.n	801a1bc <uxr_prepare_output_stream_fragmented+0x160>
 801a0c2:	f1ab 0a04 	sub.w	sl, fp, #4
 801a0c6:	465a      	mov	r2, fp
 801a0c8:	4649      	mov	r1, r9
 801a0ca:	a808      	add	r0, sp, #32
 801a0cc:	ebaa 0a03 	sub.w	sl, sl, r3
 801a0d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a0d2:	f8cd 8000 	str.w	r8, [sp]
 801a0d6:	3308      	adds	r3, #8
 801a0d8:	fa1f fa8a 	uxth.w	sl, sl
 801a0dc:	9302      	str	r3, [sp, #8]
 801a0de:	2300      	movs	r3, #0
 801a0e0:	f7f9 f90c 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801a0e4:	9b02      	ldr	r3, [sp, #8]
 801a0e6:	4652      	mov	r2, sl
 801a0e8:	210d      	movs	r1, #13
 801a0ea:	455b      	cmp	r3, fp
 801a0ec:	bf34      	ite	cc
 801a0ee:	2302      	movcc	r3, #2
 801a0f0:	2300      	movcs	r3, #0
 801a0f2:	a808      	add	r0, sp, #32
 801a0f4:	f7ff fe80 	bl	8019df8 <uxr_buffer_submessage_header>
 801a0f8:	8921      	ldrh	r1, [r4, #8]
 801a0fa:	6863      	ldr	r3, [r4, #4]
 801a0fc:	4638      	mov	r0, r7
 801a0fe:	fbb7 f2f1 	udiv	r2, r7, r1
 801a102:	fbb3 f3f1 	udiv	r3, r3, r1
 801a106:	fb01 7212 	mls	r2, r1, r2, r7
 801a10a:	2101      	movs	r1, #1
 801a10c:	b292      	uxth	r2, r2
 801a10e:	fb02 f303 	mul.w	r3, r2, r3
 801a112:	6822      	ldr	r2, [r4, #0]
 801a114:	f842 b003 	str.w	fp, [r2, r3]
 801a118:	f004 ff92 	bl	801f040 <uxr_seq_num_add>
 801a11c:	9b03      	ldr	r3, [sp, #12]
 801a11e:	f108 0104 	add.w	r1, r8, #4
 801a122:	4607      	mov	r7, r0
 801a124:	f1a3 0208 	sub.w	r2, r3, #8
 801a128:	4630      	mov	r0, r6
 801a12a:	4449      	add	r1, r9
 801a12c:	eba2 0208 	sub.w	r2, r2, r8
 801a130:	f7f9 f8f6 	bl	8013320 <ucdr_init_buffer>
 801a134:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a136:	2107      	movs	r1, #7
 801a138:	81e7      	strh	r7, [r4, #14]
 801a13a:	1d1a      	adds	r2, r3, #4
 801a13c:	2300      	movs	r3, #0
 801a13e:	4630      	mov	r0, r6
 801a140:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801a144:	bf28      	it	cs
 801a146:	461a      	movcs	r2, r3
 801a148:	b292      	uxth	r2, r2
 801a14a:	f7ff fe55 	bl	8019df8 <uxr_buffer_submessage_header>
 801a14e:	aa07      	add	r2, sp, #28
 801a150:	9904      	ldr	r1, [sp, #16]
 801a152:	4628      	mov	r0, r5
 801a154:	f7ff f864 	bl	8019220 <uxr_init_base_object_request>
 801a158:	4604      	mov	r4, r0
 801a15a:	b320      	cbz	r0, 801a1a6 <uxr_prepare_output_stream_fragmented+0x14a>
 801a15c:	a907      	add	r1, sp, #28
 801a15e:	4630      	mov	r0, r6
 801a160:	f001 f828 	bl	801b1b4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a164:	4630      	mov	r0, r6
 801a166:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801a16a:	1a52      	subs	r2, r2, r1
 801a16c:	f7f9 f8d8 	bl	8013320 <ucdr_init_buffer>
 801a170:	9b05      	ldr	r3, [sp, #20]
 801a172:	9a02      	ldr	r2, [sp, #8]
 801a174:	4630      	mov	r0, r6
 801a176:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801a17a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a17c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801a180:	462a      	mov	r2, r5
 801a182:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801a186:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a188:	4918      	ldr	r1, [pc, #96]	; (801a1ec <uxr_prepare_output_stream_fragmented+0x190>)
 801a18a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801a18e:	f7f9 f89b 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 801a192:	4620      	mov	r0, r4
 801a194:	b011      	add	sp, #68	; 0x44
 801a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a19a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a19c:	4628      	mov	r0, r5
 801a19e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a1a0:	4798      	blx	r3
 801a1a2:	b920      	cbnz	r0, 801a1ae <uxr_prepare_output_stream_fragmented+0x152>
 801a1a4:	2400      	movs	r4, #0
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	b011      	add	sp, #68	; 0x44
 801a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ae:	4620      	mov	r0, r4
 801a1b0:	f004 ff24 	bl	801effc <get_available_free_slots>
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	f47f af6b 	bne.w	801a090 <uxr_prepare_output_stream_fragmented+0x34>
 801a1ba:	e7f3      	b.n	801a1a4 <uxr_prepare_output_stream_fragmented+0x148>
 801a1bc:	4638      	mov	r0, r7
 801a1be:	2101      	movs	r1, #1
 801a1c0:	f004 ff3e 	bl	801f040 <uxr_seq_num_add>
 801a1c4:	8922      	ldrh	r2, [r4, #8]
 801a1c6:	6863      	ldr	r3, [r4, #4]
 801a1c8:	4607      	mov	r7, r0
 801a1ca:	fbb3 f9f2 	udiv	r9, r3, r2
 801a1ce:	fbb0 f3f2 	udiv	r3, r0, r2
 801a1d2:	fb02 0313 	mls	r3, r2, r3, r0
 801a1d6:	b29b      	uxth	r3, r3
 801a1d8:	fb03 f909 	mul.w	r9, r3, r9
 801a1dc:	6823      	ldr	r3, [r4, #0]
 801a1de:	f109 0904 	add.w	r9, r9, #4
 801a1e2:	4499      	add	r9, r3
 801a1e4:	7b23      	ldrb	r3, [r4, #12]
 801a1e6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a1ea:	e76a      	b.n	801a0c2 <uxr_prepare_output_stream_fragmented+0x66>
 801a1ec:	08019ee9 	.word	0x08019ee9

0801a1f0 <uxr_serialize_message_header>:
 801a1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1f2:	4616      	mov	r6, r2
 801a1f4:	b083      	sub	sp, #12
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	460d      	mov	r5, r1
 801a1fa:	9301      	str	r3, [sp, #4]
 801a1fc:	9f08      	ldr	r7, [sp, #32]
 801a1fe:	f7f7 fdb7 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a202:	4631      	mov	r1, r6
 801a204:	4620      	mov	r0, r4
 801a206:	f7f7 fdb3 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a20a:	9a01      	ldr	r2, [sp, #4]
 801a20c:	2101      	movs	r1, #1
 801a20e:	4620      	mov	r0, r4
 801a210:	f7f7 fe5a 	bl	8011ec8 <ucdr_serialize_endian_uint16_t>
 801a214:	062b      	lsls	r3, r5, #24
 801a216:	d501      	bpl.n	801a21c <uxr_serialize_message_header+0x2c>
 801a218:	b003      	add	sp, #12
 801a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a21c:	2204      	movs	r2, #4
 801a21e:	4639      	mov	r1, r7
 801a220:	4620      	mov	r0, r4
 801a222:	b003      	add	sp, #12
 801a224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a228:	f7fd ba6e 	b.w	8017708 <ucdr_serialize_array_uint8_t>

0801a22c <uxr_deserialize_message_header>:
 801a22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a22e:	4616      	mov	r6, r2
 801a230:	b083      	sub	sp, #12
 801a232:	4604      	mov	r4, r0
 801a234:	460d      	mov	r5, r1
 801a236:	9301      	str	r3, [sp, #4]
 801a238:	9f08      	ldr	r7, [sp, #32]
 801a23a:	f7f7 fdaf 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801a23e:	4631      	mov	r1, r6
 801a240:	4620      	mov	r0, r4
 801a242:	f7f7 fdab 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801a246:	9a01      	ldr	r2, [sp, #4]
 801a248:	2101      	movs	r1, #1
 801a24a:	4620      	mov	r0, r4
 801a24c:	f7f7 ff30 	bl	80120b0 <ucdr_deserialize_endian_uint16_t>
 801a250:	f995 3000 	ldrsb.w	r3, [r5]
 801a254:	2b00      	cmp	r3, #0
 801a256:	da01      	bge.n	801a25c <uxr_deserialize_message_header+0x30>
 801a258:	b003      	add	sp, #12
 801a25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a25c:	2204      	movs	r2, #4
 801a25e:	4639      	mov	r1, r7
 801a260:	4620      	mov	r0, r4
 801a262:	b003      	add	sp, #12
 801a264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a268:	f7fd bab2 	b.w	80177d0 <ucdr_deserialize_array_uint8_t>

0801a26c <uxr_serialize_submessage_header>:
 801a26c:	b530      	push	{r4, r5, lr}
 801a26e:	4615      	mov	r5, r2
 801a270:	b083      	sub	sp, #12
 801a272:	4604      	mov	r4, r0
 801a274:	9301      	str	r3, [sp, #4]
 801a276:	f7f7 fd7b 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a27a:	4629      	mov	r1, r5
 801a27c:	4620      	mov	r0, r4
 801a27e:	f7f7 fd77 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a282:	9a01      	ldr	r2, [sp, #4]
 801a284:	2101      	movs	r1, #1
 801a286:	4620      	mov	r0, r4
 801a288:	b003      	add	sp, #12
 801a28a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a28e:	f7f7 be1b 	b.w	8011ec8 <ucdr_serialize_endian_uint16_t>
 801a292:	bf00      	nop

0801a294 <uxr_deserialize_submessage_header>:
 801a294:	b530      	push	{r4, r5, lr}
 801a296:	4615      	mov	r5, r2
 801a298:	b083      	sub	sp, #12
 801a29a:	4604      	mov	r4, r0
 801a29c:	9301      	str	r3, [sp, #4]
 801a29e:	f7f7 fd7d 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801a2a2:	4629      	mov	r1, r5
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	f7f7 fd79 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801a2aa:	9a01      	ldr	r2, [sp, #4]
 801a2ac:	2101      	movs	r1, #1
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	b003      	add	sp, #12
 801a2b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2b6:	f7f7 befb 	b.w	80120b0 <ucdr_deserialize_endian_uint16_t>
 801a2ba:	bf00      	nop

0801a2bc <uxr_serialize_CLIENT_Representation>:
 801a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2c0:	2204      	movs	r2, #4
 801a2c2:	460e      	mov	r6, r1
 801a2c4:	4605      	mov	r5, r0
 801a2c6:	f7fd fa1f 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a2ca:	4607      	mov	r7, r0
 801a2cc:	2202      	movs	r2, #2
 801a2ce:	1d31      	adds	r1, r6, #4
 801a2d0:	4628      	mov	r0, r5
 801a2d2:	f7fd fa19 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a2d6:	4038      	ands	r0, r7
 801a2d8:	2202      	movs	r2, #2
 801a2da:	1db1      	adds	r1, r6, #6
 801a2dc:	b2c7      	uxtb	r7, r0
 801a2de:	4628      	mov	r0, r5
 801a2e0:	f7fd fa12 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a2e4:	2204      	movs	r2, #4
 801a2e6:	4007      	ands	r7, r0
 801a2e8:	f106 0108 	add.w	r1, r6, #8
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	f7fd fa0b 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a2f2:	4007      	ands	r7, r0
 801a2f4:	7b31      	ldrb	r1, [r6, #12]
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	f7f7 fd3a 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a2fc:	7b71      	ldrb	r1, [r6, #13]
 801a2fe:	4007      	ands	r7, r0
 801a300:	4628      	mov	r0, r5
 801a302:	f7f7 fd07 	bl	8011d14 <ucdr_serialize_bool>
 801a306:	7b73      	ldrb	r3, [r6, #13]
 801a308:	ea07 0800 	and.w	r8, r7, r0
 801a30c:	b93b      	cbnz	r3, 801a31e <uxr_serialize_CLIENT_Representation+0x62>
 801a30e:	8bb1      	ldrh	r1, [r6, #28]
 801a310:	4628      	mov	r0, r5
 801a312:	f7f7 fd59 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801a316:	ea08 0000 	and.w	r0, r8, r0
 801a31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a31e:	6931      	ldr	r1, [r6, #16]
 801a320:	4628      	mov	r0, r5
 801a322:	f7f7 ff3b 	bl	801219c <ucdr_serialize_uint32_t>
 801a326:	6933      	ldr	r3, [r6, #16]
 801a328:	b1e3      	cbz	r3, 801a364 <uxr_serialize_CLIENT_Representation+0xa8>
 801a32a:	b1c0      	cbz	r0, 801a35e <uxr_serialize_CLIENT_Representation+0xa2>
 801a32c:	4637      	mov	r7, r6
 801a32e:	f04f 0900 	mov.w	r9, #0
 801a332:	e000      	b.n	801a336 <uxr_serialize_CLIENT_Representation+0x7a>
 801a334:	b19c      	cbz	r4, 801a35e <uxr_serialize_CLIENT_Representation+0xa2>
 801a336:	6979      	ldr	r1, [r7, #20]
 801a338:	4628      	mov	r0, r5
 801a33a:	f004 f91d 	bl	801e578 <ucdr_serialize_string>
 801a33e:	69b9      	ldr	r1, [r7, #24]
 801a340:	4604      	mov	r4, r0
 801a342:	4628      	mov	r0, r5
 801a344:	f004 f918 	bl	801e578 <ucdr_serialize_string>
 801a348:	f109 0901 	add.w	r9, r9, #1
 801a34c:	6933      	ldr	r3, [r6, #16]
 801a34e:	4004      	ands	r4, r0
 801a350:	3708      	adds	r7, #8
 801a352:	4599      	cmp	r9, r3
 801a354:	b2e4      	uxtb	r4, r4
 801a356:	d3ed      	bcc.n	801a334 <uxr_serialize_CLIENT_Representation+0x78>
 801a358:	ea08 0804 	and.w	r8, r8, r4
 801a35c:	e7d7      	b.n	801a30e <uxr_serialize_CLIENT_Representation+0x52>
 801a35e:	f04f 0800 	mov.w	r8, #0
 801a362:	e7d4      	b.n	801a30e <uxr_serialize_CLIENT_Representation+0x52>
 801a364:	ea08 0800 	and.w	r8, r8, r0
 801a368:	e7d1      	b.n	801a30e <uxr_serialize_CLIENT_Representation+0x52>
 801a36a:	bf00      	nop

0801a36c <uxr_deserialize_CLIENT_Representation>:
 801a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a370:	2204      	movs	r2, #4
 801a372:	460c      	mov	r4, r1
 801a374:	4605      	mov	r5, r0
 801a376:	f7fd fa2b 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801a37a:	4607      	mov	r7, r0
 801a37c:	2202      	movs	r2, #2
 801a37e:	1d21      	adds	r1, r4, #4
 801a380:	4628      	mov	r0, r5
 801a382:	f7fd fa25 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801a386:	4038      	ands	r0, r7
 801a388:	2202      	movs	r2, #2
 801a38a:	1da1      	adds	r1, r4, #6
 801a38c:	b2c6      	uxtb	r6, r0
 801a38e:	4628      	mov	r0, r5
 801a390:	f7fd fa1e 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801a394:	2204      	movs	r2, #4
 801a396:	4006      	ands	r6, r0
 801a398:	f104 0108 	add.w	r1, r4, #8
 801a39c:	4628      	mov	r0, r5
 801a39e:	f7fd fa17 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801a3a2:	4006      	ands	r6, r0
 801a3a4:	f104 010c 	add.w	r1, r4, #12
 801a3a8:	4628      	mov	r0, r5
 801a3aa:	f7f7 fcf7 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801a3ae:	f104 010d 	add.w	r1, r4, #13
 801a3b2:	ea06 0700 	and.w	r7, r6, r0
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f7f7 fcc2 	bl	8011d40 <ucdr_deserialize_bool>
 801a3bc:	7b63      	ldrb	r3, [r4, #13]
 801a3be:	4007      	ands	r7, r0
 801a3c0:	b93b      	cbnz	r3, 801a3d2 <uxr_deserialize_CLIENT_Representation+0x66>
 801a3c2:	f104 011c 	add.w	r1, r4, #28
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f7f7 fdfe 	bl	8011fc8 <ucdr_deserialize_uint16_t>
 801a3cc:	4038      	ands	r0, r7
 801a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3d2:	f104 0110 	add.w	r1, r4, #16
 801a3d6:	4628      	mov	r0, r5
 801a3d8:	f7f8 f810 	bl	80123fc <ucdr_deserialize_uint32_t>
 801a3dc:	6923      	ldr	r3, [r4, #16]
 801a3de:	2b01      	cmp	r3, #1
 801a3e0:	d903      	bls.n	801a3ea <uxr_deserialize_CLIENT_Representation+0x7e>
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	2700      	movs	r7, #0
 801a3e6:	75ab      	strb	r3, [r5, #22]
 801a3e8:	e7eb      	b.n	801a3c2 <uxr_deserialize_CLIENT_Representation+0x56>
 801a3ea:	b30b      	cbz	r3, 801a430 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a3ec:	b1f0      	cbz	r0, 801a42c <uxr_deserialize_CLIENT_Representation+0xc0>
 801a3ee:	46a0      	mov	r8, r4
 801a3f0:	f04f 0900 	mov.w	r9, #0
 801a3f4:	e000      	b.n	801a3f8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a3f6:	b1ce      	cbz	r6, 801a42c <uxr_deserialize_CLIENT_Representation+0xc0>
 801a3f8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a3fc:	f108 0808 	add.w	r8, r8, #8
 801a400:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a404:	4628      	mov	r0, r5
 801a406:	f004 f8c7 	bl	801e598 <ucdr_deserialize_string>
 801a40a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a40e:	4606      	mov	r6, r0
 801a410:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a414:	4628      	mov	r0, r5
 801a416:	f109 0901 	add.w	r9, r9, #1
 801a41a:	f004 f8bd 	bl	801e598 <ucdr_deserialize_string>
 801a41e:	6923      	ldr	r3, [r4, #16]
 801a420:	4006      	ands	r6, r0
 801a422:	4599      	cmp	r9, r3
 801a424:	b2f6      	uxtb	r6, r6
 801a426:	d3e6      	bcc.n	801a3f6 <uxr_deserialize_CLIENT_Representation+0x8a>
 801a428:	4037      	ands	r7, r6
 801a42a:	e7ca      	b.n	801a3c2 <uxr_deserialize_CLIENT_Representation+0x56>
 801a42c:	2700      	movs	r7, #0
 801a42e:	e7c8      	b.n	801a3c2 <uxr_deserialize_CLIENT_Representation+0x56>
 801a430:	4007      	ands	r7, r0
 801a432:	e7c6      	b.n	801a3c2 <uxr_deserialize_CLIENT_Representation+0x56>

0801a434 <uxr_serialize_AGENT_Representation>:
 801a434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a438:	2204      	movs	r2, #4
 801a43a:	460f      	mov	r7, r1
 801a43c:	4605      	mov	r5, r0
 801a43e:	f7fd f963 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a442:	4604      	mov	r4, r0
 801a444:	2202      	movs	r2, #2
 801a446:	1d39      	adds	r1, r7, #4
 801a448:	4628      	mov	r0, r5
 801a44a:	f7fd f95d 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a44e:	4020      	ands	r0, r4
 801a450:	2202      	movs	r2, #2
 801a452:	1db9      	adds	r1, r7, #6
 801a454:	b2c4      	uxtb	r4, r0
 801a456:	4628      	mov	r0, r5
 801a458:	f7fd f956 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a45c:	7a39      	ldrb	r1, [r7, #8]
 801a45e:	4004      	ands	r4, r0
 801a460:	4628      	mov	r0, r5
 801a462:	f7f7 fc57 	bl	8011d14 <ucdr_serialize_bool>
 801a466:	7a3b      	ldrb	r3, [r7, #8]
 801a468:	ea00 0804 	and.w	r8, r0, r4
 801a46c:	b913      	cbnz	r3, 801a474 <uxr_serialize_AGENT_Representation+0x40>
 801a46e:	4640      	mov	r0, r8
 801a470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a474:	68f9      	ldr	r1, [r7, #12]
 801a476:	4628      	mov	r0, r5
 801a478:	f7f7 fe90 	bl	801219c <ucdr_serialize_uint32_t>
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	b303      	cbz	r3, 801a4c2 <uxr_serialize_AGENT_Representation+0x8e>
 801a480:	b1d0      	cbz	r0, 801a4b8 <uxr_serialize_AGENT_Representation+0x84>
 801a482:	463e      	mov	r6, r7
 801a484:	f04f 0900 	mov.w	r9, #0
 801a488:	e000      	b.n	801a48c <uxr_serialize_AGENT_Representation+0x58>
 801a48a:	b1ac      	cbz	r4, 801a4b8 <uxr_serialize_AGENT_Representation+0x84>
 801a48c:	6931      	ldr	r1, [r6, #16]
 801a48e:	4628      	mov	r0, r5
 801a490:	f004 f872 	bl	801e578 <ucdr_serialize_string>
 801a494:	6971      	ldr	r1, [r6, #20]
 801a496:	4604      	mov	r4, r0
 801a498:	4628      	mov	r0, r5
 801a49a:	f004 f86d 	bl	801e578 <ucdr_serialize_string>
 801a49e:	f109 0901 	add.w	r9, r9, #1
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	4004      	ands	r4, r0
 801a4a6:	3608      	adds	r6, #8
 801a4a8:	4599      	cmp	r9, r3
 801a4aa:	b2e4      	uxtb	r4, r4
 801a4ac:	d3ed      	bcc.n	801a48a <uxr_serialize_AGENT_Representation+0x56>
 801a4ae:	ea08 0804 	and.w	r8, r8, r4
 801a4b2:	4640      	mov	r0, r8
 801a4b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4b8:	f04f 0800 	mov.w	r8, #0
 801a4bc:	4640      	mov	r0, r8
 801a4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4c2:	ea08 0800 	and.w	r8, r8, r0
 801a4c6:	e7d2      	b.n	801a46e <uxr_serialize_AGENT_Representation+0x3a>

0801a4c8 <uxr_serialize_DATAWRITER_Representation>:
 801a4c8:	b570      	push	{r4, r5, r6, lr}
 801a4ca:	460d      	mov	r5, r1
 801a4cc:	7809      	ldrb	r1, [r1, #0]
 801a4ce:	4606      	mov	r6, r0
 801a4d0:	f7f7 fc4e 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a4d4:	4604      	mov	r4, r0
 801a4d6:	b130      	cbz	r0, 801a4e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a4d8:	782b      	ldrb	r3, [r5, #0]
 801a4da:	2b02      	cmp	r3, #2
 801a4dc:	d00c      	beq.n	801a4f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a4de:	2b03      	cmp	r3, #3
 801a4e0:	d010      	beq.n	801a504 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a4e2:	2b01      	cmp	r3, #1
 801a4e4:	d008      	beq.n	801a4f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a4e6:	2202      	movs	r2, #2
 801a4e8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a4ec:	4630      	mov	r0, r6
 801a4ee:	f7fd f90b 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a4f2:	4020      	ands	r0, r4
 801a4f4:	b2c0      	uxtb	r0, r0
 801a4f6:	bd70      	pop	{r4, r5, r6, pc}
 801a4f8:	6869      	ldr	r1, [r5, #4]
 801a4fa:	4630      	mov	r0, r6
 801a4fc:	f004 f83c 	bl	801e578 <ucdr_serialize_string>
 801a500:	4604      	mov	r4, r0
 801a502:	e7f0      	b.n	801a4e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a504:	4629      	mov	r1, r5
 801a506:	4630      	mov	r0, r6
 801a508:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a50c:	3104      	adds	r1, #4
 801a50e:	f7f8 ffa7 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801a512:	4604      	mov	r4, r0
 801a514:	e7e7      	b.n	801a4e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a516:	bf00      	nop

0801a518 <uxr_serialize_ObjectVariant.part.0>:
 801a518:	b570      	push	{r4, r5, r6, lr}
 801a51a:	780b      	ldrb	r3, [r1, #0]
 801a51c:	460c      	mov	r4, r1
 801a51e:	4605      	mov	r5, r0
 801a520:	3b01      	subs	r3, #1
 801a522:	2b0d      	cmp	r3, #13
 801a524:	d854      	bhi.n	801a5d0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a526:	e8df f003 	tbb	[pc, r3]
 801a52a:	0730      	.short	0x0730
 801a52c:	07071b1b 	.word	0x07071b1b
 801a530:	0c530707 	.word	0x0c530707
 801a534:	494e0c0c 	.word	0x494e0c0c
 801a538:	3104      	adds	r1, #4
 801a53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a53e:	f7ff bfc3 	b.w	801a4c8 <uxr_serialize_DATAWRITER_Representation>
 801a542:	7909      	ldrb	r1, [r1, #4]
 801a544:	f7f7 fc14 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a548:	b1e8      	cbz	r0, 801a586 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a54a:	7923      	ldrb	r3, [r4, #4]
 801a54c:	2b01      	cmp	r3, #1
 801a54e:	d001      	beq.n	801a554 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a550:	2b02      	cmp	r3, #2
 801a552:	d13d      	bne.n	801a5d0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a554:	68a1      	ldr	r1, [r4, #8]
 801a556:	4628      	mov	r0, r5
 801a558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a55c:	f004 b80c 	b.w	801e578 <ucdr_serialize_string>
 801a560:	7909      	ldrb	r1, [r1, #4]
 801a562:	f7f7 fc05 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a566:	4606      	mov	r6, r0
 801a568:	b120      	cbz	r0, 801a574 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a56a:	7923      	ldrb	r3, [r4, #4]
 801a56c:	2b02      	cmp	r3, #2
 801a56e:	d039      	beq.n	801a5e4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a570:	2b03      	cmp	r3, #3
 801a572:	d02f      	beq.n	801a5d4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a574:	2202      	movs	r2, #2
 801a576:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a57a:	4628      	mov	r0, r5
 801a57c:	f7fd f8c4 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801a580:	4030      	ands	r0, r6
 801a582:	b2c0      	uxtb	r0, r0
 801a584:	bd70      	pop	{r4, r5, r6, pc}
 801a586:	2000      	movs	r0, #0
 801a588:	bd70      	pop	{r4, r5, r6, pc}
 801a58a:	7909      	ldrb	r1, [r1, #4]
 801a58c:	f7f7 fbf0 	bl	8011d70 <ucdr_serialize_uint8_t>
 801a590:	4606      	mov	r6, r0
 801a592:	b158      	cbz	r0, 801a5ac <uxr_serialize_ObjectVariant.part.0+0x94>
 801a594:	7923      	ldrb	r3, [r4, #4]
 801a596:	2b02      	cmp	r3, #2
 801a598:	d003      	beq.n	801a5a2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a59a:	2b03      	cmp	r3, #3
 801a59c:	d028      	beq.n	801a5f0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a59e:	2b01      	cmp	r3, #1
 801a5a0:	d104      	bne.n	801a5ac <uxr_serialize_ObjectVariant.part.0+0x94>
 801a5a2:	68a1      	ldr	r1, [r4, #8]
 801a5a4:	4628      	mov	r0, r5
 801a5a6:	f003 ffe7 	bl	801e578 <ucdr_serialize_string>
 801a5aa:	4606      	mov	r6, r0
 801a5ac:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a5b0:	4628      	mov	r0, r5
 801a5b2:	f7f8 f919 	bl	80127e8 <ucdr_serialize_int16_t>
 801a5b6:	4030      	ands	r0, r6
 801a5b8:	b2c0      	uxtb	r0, r0
 801a5ba:	bd70      	pop	{r4, r5, r6, pc}
 801a5bc:	3104      	adds	r1, #4
 801a5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5c2:	f7ff be7b 	b.w	801a2bc <uxr_serialize_CLIENT_Representation>
 801a5c6:	3104      	adds	r1, #4
 801a5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5cc:	f7ff bf32 	b.w	801a434 <uxr_serialize_AGENT_Representation>
 801a5d0:	2001      	movs	r0, #1
 801a5d2:	bd70      	pop	{r4, r5, r6, pc}
 801a5d4:	68a2      	ldr	r2, [r4, #8]
 801a5d6:	f104 010c 	add.w	r1, r4, #12
 801a5da:	4628      	mov	r0, r5
 801a5dc:	f7f8 ff40 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801a5e0:	4606      	mov	r6, r0
 801a5e2:	e7c7      	b.n	801a574 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a5e4:	68a1      	ldr	r1, [r4, #8]
 801a5e6:	4628      	mov	r0, r5
 801a5e8:	f003 ffc6 	bl	801e578 <ucdr_serialize_string>
 801a5ec:	4606      	mov	r6, r0
 801a5ee:	e7c1      	b.n	801a574 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a5f0:	68a2      	ldr	r2, [r4, #8]
 801a5f2:	f104 010c 	add.w	r1, r4, #12
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	f7f8 ff32 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801a5fc:	4606      	mov	r6, r0
 801a5fe:	e7d5      	b.n	801a5ac <uxr_serialize_ObjectVariant.part.0+0x94>

0801a600 <uxr_deserialize_DATAWRITER_Representation>:
 801a600:	b570      	push	{r4, r5, r6, lr}
 801a602:	4606      	mov	r6, r0
 801a604:	460d      	mov	r5, r1
 801a606:	f7f7 fbc9 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801a60a:	4604      	mov	r4, r0
 801a60c:	b130      	cbz	r0, 801a61c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a60e:	782b      	ldrb	r3, [r5, #0]
 801a610:	2b02      	cmp	r3, #2
 801a612:	d00c      	beq.n	801a62e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a614:	2b03      	cmp	r3, #3
 801a616:	d012      	beq.n	801a63e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a618:	2b01      	cmp	r3, #1
 801a61a:	d008      	beq.n	801a62e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a61c:	2202      	movs	r2, #2
 801a61e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a622:	4630      	mov	r0, r6
 801a624:	f7fd f8d4 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801a628:	4020      	ands	r0, r4
 801a62a:	b2c0      	uxtb	r0, r0
 801a62c:	bd70      	pop	{r4, r5, r6, pc}
 801a62e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a632:	6869      	ldr	r1, [r5, #4]
 801a634:	4630      	mov	r0, r6
 801a636:	f003 ffaf 	bl	801e598 <ucdr_deserialize_string>
 801a63a:	4604      	mov	r4, r0
 801a63c:	e7ee      	b.n	801a61c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a63e:	1d2b      	adds	r3, r5, #4
 801a640:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a644:	f105 0108 	add.w	r1, r5, #8
 801a648:	4630      	mov	r0, r6
 801a64a:	f7f8 ff1b 	bl	8013484 <ucdr_deserialize_sequence_uint8_t>
 801a64e:	4604      	mov	r4, r0
 801a650:	e7e4      	b.n	801a61c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a652:	bf00      	nop

0801a654 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a654:	b570      	push	{r4, r5, r6, lr}
 801a656:	460d      	mov	r5, r1
 801a658:	7809      	ldrb	r1, [r1, #0]
 801a65a:	4606      	mov	r6, r0
 801a65c:	f7f7 fb5a 	bl	8011d14 <ucdr_serialize_bool>
 801a660:	782b      	ldrb	r3, [r5, #0]
 801a662:	4604      	mov	r4, r0
 801a664:	b94b      	cbnz	r3, 801a67a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a666:	7a29      	ldrb	r1, [r5, #8]
 801a668:	4630      	mov	r0, r6
 801a66a:	f7f7 fb53 	bl	8011d14 <ucdr_serialize_bool>
 801a66e:	7a2b      	ldrb	r3, [r5, #8]
 801a670:	4004      	ands	r4, r0
 801a672:	b2e4      	uxtb	r4, r4
 801a674:	b943      	cbnz	r3, 801a688 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a676:	4620      	mov	r0, r4
 801a678:	bd70      	pop	{r4, r5, r6, pc}
 801a67a:	6869      	ldr	r1, [r5, #4]
 801a67c:	4630      	mov	r0, r6
 801a67e:	f003 ff7b 	bl	801e578 <ucdr_serialize_string>
 801a682:	4004      	ands	r4, r0
 801a684:	b2e4      	uxtb	r4, r4
 801a686:	e7ee      	b.n	801a666 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a688:	68e9      	ldr	r1, [r5, #12]
 801a68a:	4630      	mov	r0, r6
 801a68c:	f003 ff74 	bl	801e578 <ucdr_serialize_string>
 801a690:	4004      	ands	r4, r0
 801a692:	4620      	mov	r0, r4
 801a694:	bd70      	pop	{r4, r5, r6, pc}
 801a696:	bf00      	nop

0801a698 <uxr_serialize_OBJK_Topic_Binary>:
 801a698:	b570      	push	{r4, r5, r6, lr}
 801a69a:	460d      	mov	r5, r1
 801a69c:	4606      	mov	r6, r0
 801a69e:	6809      	ldr	r1, [r1, #0]
 801a6a0:	f003 ff6a 	bl	801e578 <ucdr_serialize_string>
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	7929      	ldrb	r1, [r5, #4]
 801a6a8:	4630      	mov	r0, r6
 801a6aa:	f7f7 fb33 	bl	8011d14 <ucdr_serialize_bool>
 801a6ae:	792b      	ldrb	r3, [r5, #4]
 801a6b0:	4004      	ands	r4, r0
 801a6b2:	b2e4      	uxtb	r4, r4
 801a6b4:	b943      	cbnz	r3, 801a6c8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a6b6:	7b29      	ldrb	r1, [r5, #12]
 801a6b8:	4630      	mov	r0, r6
 801a6ba:	f7f7 fb2b 	bl	8011d14 <ucdr_serialize_bool>
 801a6be:	7b2b      	ldrb	r3, [r5, #12]
 801a6c0:	4004      	ands	r4, r0
 801a6c2:	b93b      	cbnz	r3, 801a6d4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	bd70      	pop	{r4, r5, r6, pc}
 801a6c8:	68a9      	ldr	r1, [r5, #8]
 801a6ca:	4630      	mov	r0, r6
 801a6cc:	f003 ff54 	bl	801e578 <ucdr_serialize_string>
 801a6d0:	4004      	ands	r4, r0
 801a6d2:	e7f0      	b.n	801a6b6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a6d4:	6929      	ldr	r1, [r5, #16]
 801a6d6:	4630      	mov	r0, r6
 801a6d8:	f003 ff4e 	bl	801e578 <ucdr_serialize_string>
 801a6dc:	4004      	ands	r4, r0
 801a6de:	b2e4      	uxtb	r4, r4
 801a6e0:	4620      	mov	r0, r4
 801a6e2:	bd70      	pop	{r4, r5, r6, pc}

0801a6e4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6e8:	460c      	mov	r4, r1
 801a6ea:	7809      	ldrb	r1, [r1, #0]
 801a6ec:	4606      	mov	r6, r0
 801a6ee:	f7f7 fb11 	bl	8011d14 <ucdr_serialize_bool>
 801a6f2:	7823      	ldrb	r3, [r4, #0]
 801a6f4:	4605      	mov	r5, r0
 801a6f6:	b96b      	cbnz	r3, 801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a6f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a6fc:	4630      	mov	r0, r6
 801a6fe:	f7f7 fb09 	bl	8011d14 <ucdr_serialize_bool>
 801a702:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a706:	4005      	ands	r5, r0
 801a708:	b2ed      	uxtb	r5, r5
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d169      	bne.n	801a7e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a70e:	4628      	mov	r0, r5
 801a710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a714:	6861      	ldr	r1, [r4, #4]
 801a716:	4630      	mov	r0, r6
 801a718:	f7f7 fd40 	bl	801219c <ucdr_serialize_uint32_t>
 801a71c:	6863      	ldr	r3, [r4, #4]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d06b      	beq.n	801a7fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a722:	2800      	cmp	r0, #0
 801a724:	d067      	beq.n	801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a726:	68a1      	ldr	r1, [r4, #8]
 801a728:	4630      	mov	r0, r6
 801a72a:	f003 ff25 	bl	801e578 <ucdr_serialize_string>
 801a72e:	6863      	ldr	r3, [r4, #4]
 801a730:	2b01      	cmp	r3, #1
 801a732:	d953      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a734:	2800      	cmp	r0, #0
 801a736:	d05e      	beq.n	801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a738:	68e1      	ldr	r1, [r4, #12]
 801a73a:	4630      	mov	r0, r6
 801a73c:	f003 ff1c 	bl	801e578 <ucdr_serialize_string>
 801a740:	6863      	ldr	r3, [r4, #4]
 801a742:	2b02      	cmp	r3, #2
 801a744:	d94a      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a746:	2800      	cmp	r0, #0
 801a748:	d055      	beq.n	801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a74a:	6921      	ldr	r1, [r4, #16]
 801a74c:	4630      	mov	r0, r6
 801a74e:	f003 ff13 	bl	801e578 <ucdr_serialize_string>
 801a752:	6863      	ldr	r3, [r4, #4]
 801a754:	2b03      	cmp	r3, #3
 801a756:	d941      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a758:	2800      	cmp	r0, #0
 801a75a:	d04c      	beq.n	801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a75c:	6961      	ldr	r1, [r4, #20]
 801a75e:	4630      	mov	r0, r6
 801a760:	f003 ff0a 	bl	801e578 <ucdr_serialize_string>
 801a764:	6863      	ldr	r3, [r4, #4]
 801a766:	2b04      	cmp	r3, #4
 801a768:	d938      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a76a:	2800      	cmp	r0, #0
 801a76c:	d043      	beq.n	801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a76e:	69a1      	ldr	r1, [r4, #24]
 801a770:	4630      	mov	r0, r6
 801a772:	f003 ff01 	bl	801e578 <ucdr_serialize_string>
 801a776:	6863      	ldr	r3, [r4, #4]
 801a778:	2b05      	cmp	r3, #5
 801a77a:	d92f      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	d03a      	beq.n	801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a780:	69e1      	ldr	r1, [r4, #28]
 801a782:	4630      	mov	r0, r6
 801a784:	f003 fef8 	bl	801e578 <ucdr_serialize_string>
 801a788:	6863      	ldr	r3, [r4, #4]
 801a78a:	2b06      	cmp	r3, #6
 801a78c:	d926      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a78e:	b390      	cbz	r0, 801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a790:	6a21      	ldr	r1, [r4, #32]
 801a792:	4630      	mov	r0, r6
 801a794:	f003 fef0 	bl	801e578 <ucdr_serialize_string>
 801a798:	6863      	ldr	r3, [r4, #4]
 801a79a:	2b07      	cmp	r3, #7
 801a79c:	d91e      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a79e:	b350      	cbz	r0, 801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a7a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a7a2:	4630      	mov	r0, r6
 801a7a4:	f003 fee8 	bl	801e578 <ucdr_serialize_string>
 801a7a8:	6863      	ldr	r3, [r4, #4]
 801a7aa:	2b08      	cmp	r3, #8
 801a7ac:	d916      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a7ae:	b310      	cbz	r0, 801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a7b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	f003 fee0 	bl	801e578 <ucdr_serialize_string>
 801a7b8:	6863      	ldr	r3, [r4, #4]
 801a7ba:	2b09      	cmp	r3, #9
 801a7bc:	d90e      	bls.n	801a7dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a7be:	b1d0      	cbz	r0, 801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a7c0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a7c4:	2709      	movs	r7, #9
 801a7c6:	e000      	b.n	801a7ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a7c8:	b1a8      	cbz	r0, 801a7f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a7ca:	f858 1b04 	ldr.w	r1, [r8], #4
 801a7ce:	4630      	mov	r0, r6
 801a7d0:	f003 fed2 	bl	801e578 <ucdr_serialize_string>
 801a7d4:	3701      	adds	r7, #1
 801a7d6:	6862      	ldr	r2, [r4, #4]
 801a7d8:	4297      	cmp	r7, r2
 801a7da:	d3f5      	bcc.n	801a7c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a7dc:	4005      	ands	r5, r0
 801a7de:	b2ed      	uxtb	r5, r5
 801a7e0:	e78a      	b.n	801a6f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a7e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a7e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a7e8:	4630      	mov	r0, r6
 801a7ea:	f7f8 fe39 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801a7ee:	4005      	ands	r5, r0
 801a7f0:	4628      	mov	r0, r5
 801a7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7f6:	2500      	movs	r5, #0
 801a7f8:	e77e      	b.n	801a6f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a7fa:	4028      	ands	r0, r5
 801a7fc:	b2c5      	uxtb	r5, r0
 801a7fe:	e77b      	b.n	801a6f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a800 <uxr_serialize_OBJK_Publisher_Binary>:
 801a800:	b570      	push	{r4, r5, r6, lr}
 801a802:	460d      	mov	r5, r1
 801a804:	7809      	ldrb	r1, [r1, #0]
 801a806:	4606      	mov	r6, r0
 801a808:	f7f7 fa84 	bl	8011d14 <ucdr_serialize_bool>
 801a80c:	782b      	ldrb	r3, [r5, #0]
 801a80e:	4604      	mov	r4, r0
 801a810:	b94b      	cbnz	r3, 801a826 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a812:	7a29      	ldrb	r1, [r5, #8]
 801a814:	4630      	mov	r0, r6
 801a816:	f7f7 fa7d 	bl	8011d14 <ucdr_serialize_bool>
 801a81a:	7a2b      	ldrb	r3, [r5, #8]
 801a81c:	4004      	ands	r4, r0
 801a81e:	b2e4      	uxtb	r4, r4
 801a820:	b943      	cbnz	r3, 801a834 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a822:	4620      	mov	r0, r4
 801a824:	bd70      	pop	{r4, r5, r6, pc}
 801a826:	6869      	ldr	r1, [r5, #4]
 801a828:	4630      	mov	r0, r6
 801a82a:	f003 fea5 	bl	801e578 <ucdr_serialize_string>
 801a82e:	4004      	ands	r4, r0
 801a830:	b2e4      	uxtb	r4, r4
 801a832:	e7ee      	b.n	801a812 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a834:	f105 010c 	add.w	r1, r5, #12
 801a838:	4630      	mov	r0, r6
 801a83a:	f7ff ff53 	bl	801a6e4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a83e:	4004      	ands	r4, r0
 801a840:	4620      	mov	r0, r4
 801a842:	bd70      	pop	{r4, r5, r6, pc}

0801a844 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a848:	460c      	mov	r4, r1
 801a84a:	7809      	ldrb	r1, [r1, #0]
 801a84c:	4606      	mov	r6, r0
 801a84e:	f7f7 fa61 	bl	8011d14 <ucdr_serialize_bool>
 801a852:	7823      	ldrb	r3, [r4, #0]
 801a854:	4605      	mov	r5, r0
 801a856:	b96b      	cbnz	r3, 801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a858:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a85c:	4630      	mov	r0, r6
 801a85e:	f7f7 fa59 	bl	8011d14 <ucdr_serialize_bool>
 801a862:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a866:	4005      	ands	r5, r0
 801a868:	b2ed      	uxtb	r5, r5
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d169      	bne.n	801a942 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a86e:	4628      	mov	r0, r5
 801a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a874:	6861      	ldr	r1, [r4, #4]
 801a876:	4630      	mov	r0, r6
 801a878:	f7f7 fc90 	bl	801219c <ucdr_serialize_uint32_t>
 801a87c:	6863      	ldr	r3, [r4, #4]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d06b      	beq.n	801a95a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a882:	2800      	cmp	r0, #0
 801a884:	d067      	beq.n	801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a886:	68a1      	ldr	r1, [r4, #8]
 801a888:	4630      	mov	r0, r6
 801a88a:	f003 fe75 	bl	801e578 <ucdr_serialize_string>
 801a88e:	6863      	ldr	r3, [r4, #4]
 801a890:	2b01      	cmp	r3, #1
 801a892:	d953      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a894:	2800      	cmp	r0, #0
 801a896:	d05e      	beq.n	801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a898:	68e1      	ldr	r1, [r4, #12]
 801a89a:	4630      	mov	r0, r6
 801a89c:	f003 fe6c 	bl	801e578 <ucdr_serialize_string>
 801a8a0:	6863      	ldr	r3, [r4, #4]
 801a8a2:	2b02      	cmp	r3, #2
 801a8a4:	d94a      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8a6:	2800      	cmp	r0, #0
 801a8a8:	d055      	beq.n	801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8aa:	6921      	ldr	r1, [r4, #16]
 801a8ac:	4630      	mov	r0, r6
 801a8ae:	f003 fe63 	bl	801e578 <ucdr_serialize_string>
 801a8b2:	6863      	ldr	r3, [r4, #4]
 801a8b4:	2b03      	cmp	r3, #3
 801a8b6:	d941      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8b8:	2800      	cmp	r0, #0
 801a8ba:	d04c      	beq.n	801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8bc:	6961      	ldr	r1, [r4, #20]
 801a8be:	4630      	mov	r0, r6
 801a8c0:	f003 fe5a 	bl	801e578 <ucdr_serialize_string>
 801a8c4:	6863      	ldr	r3, [r4, #4]
 801a8c6:	2b04      	cmp	r3, #4
 801a8c8:	d938      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8ca:	2800      	cmp	r0, #0
 801a8cc:	d043      	beq.n	801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8ce:	69a1      	ldr	r1, [r4, #24]
 801a8d0:	4630      	mov	r0, r6
 801a8d2:	f003 fe51 	bl	801e578 <ucdr_serialize_string>
 801a8d6:	6863      	ldr	r3, [r4, #4]
 801a8d8:	2b05      	cmp	r3, #5
 801a8da:	d92f      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8dc:	2800      	cmp	r0, #0
 801a8de:	d03a      	beq.n	801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8e0:	69e1      	ldr	r1, [r4, #28]
 801a8e2:	4630      	mov	r0, r6
 801a8e4:	f003 fe48 	bl	801e578 <ucdr_serialize_string>
 801a8e8:	6863      	ldr	r3, [r4, #4]
 801a8ea:	2b06      	cmp	r3, #6
 801a8ec:	d926      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8ee:	b390      	cbz	r0, 801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8f0:	6a21      	ldr	r1, [r4, #32]
 801a8f2:	4630      	mov	r0, r6
 801a8f4:	f003 fe40 	bl	801e578 <ucdr_serialize_string>
 801a8f8:	6863      	ldr	r3, [r4, #4]
 801a8fa:	2b07      	cmp	r3, #7
 801a8fc:	d91e      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8fe:	b350      	cbz	r0, 801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a900:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a902:	4630      	mov	r0, r6
 801a904:	f003 fe38 	bl	801e578 <ucdr_serialize_string>
 801a908:	6863      	ldr	r3, [r4, #4]
 801a90a:	2b08      	cmp	r3, #8
 801a90c:	d916      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a90e:	b310      	cbz	r0, 801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a910:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a912:	4630      	mov	r0, r6
 801a914:	f003 fe30 	bl	801e578 <ucdr_serialize_string>
 801a918:	6863      	ldr	r3, [r4, #4]
 801a91a:	2b09      	cmp	r3, #9
 801a91c:	d90e      	bls.n	801a93c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a91e:	b1d0      	cbz	r0, 801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a920:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a924:	2709      	movs	r7, #9
 801a926:	e000      	b.n	801a92a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a928:	b1a8      	cbz	r0, 801a956 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a92a:	f858 1b04 	ldr.w	r1, [r8], #4
 801a92e:	4630      	mov	r0, r6
 801a930:	f003 fe22 	bl	801e578 <ucdr_serialize_string>
 801a934:	3701      	adds	r7, #1
 801a936:	6862      	ldr	r2, [r4, #4]
 801a938:	4297      	cmp	r7, r2
 801a93a:	d3f5      	bcc.n	801a928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a93c:	4005      	ands	r5, r0
 801a93e:	b2ed      	uxtb	r5, r5
 801a940:	e78a      	b.n	801a858 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a942:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a944:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a948:	4630      	mov	r0, r6
 801a94a:	f7f8 fd89 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801a94e:	4005      	ands	r5, r0
 801a950:	4628      	mov	r0, r5
 801a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a956:	2500      	movs	r5, #0
 801a958:	e77e      	b.n	801a858 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a95a:	4028      	ands	r0, r5
 801a95c:	b2c5      	uxtb	r5, r0
 801a95e:	e77b      	b.n	801a858 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a960 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a960:	b570      	push	{r4, r5, r6, lr}
 801a962:	460d      	mov	r5, r1
 801a964:	7809      	ldrb	r1, [r1, #0]
 801a966:	4606      	mov	r6, r0
 801a968:	f7f7 f9d4 	bl	8011d14 <ucdr_serialize_bool>
 801a96c:	782b      	ldrb	r3, [r5, #0]
 801a96e:	4604      	mov	r4, r0
 801a970:	b94b      	cbnz	r3, 801a986 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a972:	7a29      	ldrb	r1, [r5, #8]
 801a974:	4630      	mov	r0, r6
 801a976:	f7f7 f9cd 	bl	8011d14 <ucdr_serialize_bool>
 801a97a:	7a2b      	ldrb	r3, [r5, #8]
 801a97c:	4004      	ands	r4, r0
 801a97e:	b2e4      	uxtb	r4, r4
 801a980:	b943      	cbnz	r3, 801a994 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a982:	4620      	mov	r0, r4
 801a984:	bd70      	pop	{r4, r5, r6, pc}
 801a986:	6869      	ldr	r1, [r5, #4]
 801a988:	4630      	mov	r0, r6
 801a98a:	f003 fdf5 	bl	801e578 <ucdr_serialize_string>
 801a98e:	4004      	ands	r4, r0
 801a990:	b2e4      	uxtb	r4, r4
 801a992:	e7ee      	b.n	801a972 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a994:	f105 010c 	add.w	r1, r5, #12
 801a998:	4630      	mov	r0, r6
 801a99a:	f7ff ff53 	bl	801a844 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a99e:	4004      	ands	r4, r0
 801a9a0:	4620      	mov	r0, r4
 801a9a2:	bd70      	pop	{r4, r5, r6, pc}

0801a9a4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a9a4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a9a8:	4688      	mov	r8, r1
 801a9aa:	4681      	mov	r9, r0
 801a9ac:	8809      	ldrh	r1, [r1, #0]
 801a9ae:	f7f7 fa0b 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801a9b2:	4606      	mov	r6, r0
 801a9b4:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a9b8:	4648      	mov	r0, r9
 801a9ba:	f7f7 f9ab 	bl	8011d14 <ucdr_serialize_bool>
 801a9be:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a9c2:	4006      	ands	r6, r0
 801a9c4:	b2f5      	uxtb	r5, r6
 801a9c6:	b9eb      	cbnz	r3, 801aa04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a9c8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a9cc:	4648      	mov	r0, r9
 801a9ce:	f7f7 f9a1 	bl	8011d14 <ucdr_serialize_bool>
 801a9d2:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a9d6:	4005      	ands	r5, r0
 801a9d8:	bb7b      	cbnz	r3, 801aa3a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a9da:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a9de:	4648      	mov	r0, r9
 801a9e0:	f7f7 f998 	bl	8011d14 <ucdr_serialize_bool>
 801a9e4:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a9e8:	4005      	ands	r5, r0
 801a9ea:	b9f3      	cbnz	r3, 801aa2a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a9ec:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a9f0:	4648      	mov	r0, r9
 801a9f2:	f7f7 f98f 	bl	8011d14 <ucdr_serialize_bool>
 801a9f6:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a9fa:	4005      	ands	r5, r0
 801a9fc:	b94b      	cbnz	r3, 801aa12 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a9fe:	4628      	mov	r0, r5
 801aa00:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801aa04:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801aa08:	4648      	mov	r0, r9
 801aa0a:	f7f7 f9dd 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801aa0e:	4005      	ands	r5, r0
 801aa10:	e7da      	b.n	801a9c8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801aa12:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801aa16:	f108 011c 	add.w	r1, r8, #28
 801aa1a:	4648      	mov	r0, r9
 801aa1c:	f7f8 fd20 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801aa20:	4028      	ands	r0, r5
 801aa22:	b2c5      	uxtb	r5, r0
 801aa24:	4628      	mov	r0, r5
 801aa26:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801aa2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801aa2e:	4648      	mov	r0, r9
 801aa30:	f7f7 fbb4 	bl	801219c <ucdr_serialize_uint32_t>
 801aa34:	4028      	ands	r0, r5
 801aa36:	b2c5      	uxtb	r5, r0
 801aa38:	e7d8      	b.n	801a9ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801aa3a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801aa3e:	4648      	mov	r0, r9
 801aa40:	f7f7 fbac 	bl	801219c <ucdr_serialize_uint32_t>
 801aa44:	4028      	ands	r0, r5
 801aa46:	b2c5      	uxtb	r5, r0
 801aa48:	e7c7      	b.n	801a9da <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801aa4a:	bf00      	nop

0801aa4c <uxr_serialize_OBJK_DataReader_Binary>:
 801aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa4e:	2202      	movs	r2, #2
 801aa50:	460c      	mov	r4, r1
 801aa52:	4606      	mov	r6, r0
 801aa54:	f7fc fe58 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801aa58:	4605      	mov	r5, r0
 801aa5a:	78a1      	ldrb	r1, [r4, #2]
 801aa5c:	4630      	mov	r0, r6
 801aa5e:	f7f7 f959 	bl	8011d14 <ucdr_serialize_bool>
 801aa62:	78a3      	ldrb	r3, [r4, #2]
 801aa64:	4005      	ands	r5, r0
 801aa66:	b2ed      	uxtb	r5, r5
 801aa68:	b90b      	cbnz	r3, 801aa6e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801aa6a:	4628      	mov	r0, r5
 801aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa6e:	f104 0108 	add.w	r1, r4, #8
 801aa72:	4630      	mov	r0, r6
 801aa74:	f7ff ff96 	bl	801a9a4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801aa78:	4607      	mov	r7, r0
 801aa7a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801aa7e:	4630      	mov	r0, r6
 801aa80:	f7f7 f948 	bl	8011d14 <ucdr_serialize_bool>
 801aa84:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801aa88:	4038      	ands	r0, r7
 801aa8a:	b2c7      	uxtb	r7, r0
 801aa8c:	b95b      	cbnz	r3, 801aaa6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801aa8e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801aa92:	4630      	mov	r0, r6
 801aa94:	f7f7 f93e 	bl	8011d14 <ucdr_serialize_bool>
 801aa98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801aa9c:	4007      	ands	r7, r0
 801aa9e:	b94b      	cbnz	r3, 801aab4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801aaa0:	403d      	ands	r5, r7
 801aaa2:	4628      	mov	r0, r5
 801aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aaa6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f7f7 fdcc 	bl	8012648 <ucdr_serialize_uint64_t>
 801aab0:	4007      	ands	r7, r0
 801aab2:	e7ec      	b.n	801aa8e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801aab4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801aab6:	4630      	mov	r0, r6
 801aab8:	f003 fd5e 	bl	801e578 <ucdr_serialize_string>
 801aabc:	4007      	ands	r7, r0
 801aabe:	b2ff      	uxtb	r7, r7
 801aac0:	e7ee      	b.n	801aaa0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801aac2:	bf00      	nop

0801aac4 <uxr_serialize_OBJK_DataWriter_Binary>:
 801aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aac6:	2202      	movs	r2, #2
 801aac8:	460d      	mov	r5, r1
 801aaca:	4606      	mov	r6, r0
 801aacc:	f7fc fe1c 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801aad0:	4604      	mov	r4, r0
 801aad2:	78a9      	ldrb	r1, [r5, #2]
 801aad4:	4630      	mov	r0, r6
 801aad6:	f7f7 f91d 	bl	8011d14 <ucdr_serialize_bool>
 801aada:	78ab      	ldrb	r3, [r5, #2]
 801aadc:	4004      	ands	r4, r0
 801aade:	b2e4      	uxtb	r4, r4
 801aae0:	b90b      	cbnz	r3, 801aae6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801aae2:	4620      	mov	r0, r4
 801aae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aae6:	f105 0108 	add.w	r1, r5, #8
 801aaea:	4630      	mov	r0, r6
 801aaec:	f7ff ff5a 	bl	801a9a4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801aaf0:	4607      	mov	r7, r0
 801aaf2:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801aaf6:	4630      	mov	r0, r6
 801aaf8:	f7f7 f90c 	bl	8011d14 <ucdr_serialize_bool>
 801aafc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801ab00:	4038      	ands	r0, r7
 801ab02:	b2c7      	uxtb	r7, r0
 801ab04:	b913      	cbnz	r3, 801ab0c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801ab06:	403c      	ands	r4, r7
 801ab08:	4620      	mov	r0, r4
 801ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab0c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801ab10:	4630      	mov	r0, r6
 801ab12:	f7f7 fd99 	bl	8012648 <ucdr_serialize_uint64_t>
 801ab16:	4007      	ands	r7, r0
 801ab18:	e7f5      	b.n	801ab06 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801ab1a:	bf00      	nop

0801ab1c <uxr_serialize_OBJK_Replier_Binary>:
 801ab1c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801ab20:	460f      	mov	r7, r1
 801ab22:	4680      	mov	r8, r0
 801ab24:	6809      	ldr	r1, [r1, #0]
 801ab26:	f003 fd27 	bl	801e578 <ucdr_serialize_string>
 801ab2a:	4605      	mov	r5, r0
 801ab2c:	6879      	ldr	r1, [r7, #4]
 801ab2e:	4640      	mov	r0, r8
 801ab30:	f003 fd22 	bl	801e578 <ucdr_serialize_string>
 801ab34:	4005      	ands	r5, r0
 801ab36:	68b9      	ldr	r1, [r7, #8]
 801ab38:	4640      	mov	r0, r8
 801ab3a:	b2ec      	uxtb	r4, r5
 801ab3c:	f003 fd1c 	bl	801e578 <ucdr_serialize_string>
 801ab40:	7b39      	ldrb	r1, [r7, #12]
 801ab42:	4004      	ands	r4, r0
 801ab44:	4640      	mov	r0, r8
 801ab46:	f7f7 f8e5 	bl	8011d14 <ucdr_serialize_bool>
 801ab4a:	7b3b      	ldrb	r3, [r7, #12]
 801ab4c:	4004      	ands	r4, r0
 801ab4e:	b94b      	cbnz	r3, 801ab64 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801ab50:	7d39      	ldrb	r1, [r7, #20]
 801ab52:	4640      	mov	r0, r8
 801ab54:	f7f7 f8de 	bl	8011d14 <ucdr_serialize_bool>
 801ab58:	7d3b      	ldrb	r3, [r7, #20]
 801ab5a:	4004      	ands	r4, r0
 801ab5c:	b943      	cbnz	r3, 801ab70 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801ab5e:	4620      	mov	r0, r4
 801ab60:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801ab64:	6939      	ldr	r1, [r7, #16]
 801ab66:	4640      	mov	r0, r8
 801ab68:	f003 fd06 	bl	801e578 <ucdr_serialize_string>
 801ab6c:	4004      	ands	r4, r0
 801ab6e:	e7ef      	b.n	801ab50 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801ab70:	69b9      	ldr	r1, [r7, #24]
 801ab72:	4640      	mov	r0, r8
 801ab74:	f003 fd00 	bl	801e578 <ucdr_serialize_string>
 801ab78:	4004      	ands	r4, r0
 801ab7a:	b2e4      	uxtb	r4, r4
 801ab7c:	4620      	mov	r0, r4
 801ab7e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801ab82:	bf00      	nop

0801ab84 <uxr_deserialize_ObjectVariant>:
 801ab84:	b570      	push	{r4, r5, r6, lr}
 801ab86:	4605      	mov	r5, r0
 801ab88:	460e      	mov	r6, r1
 801ab8a:	f7f7 f907 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801ab8e:	b168      	cbz	r0, 801abac <uxr_deserialize_ObjectVariant+0x28>
 801ab90:	7833      	ldrb	r3, [r6, #0]
 801ab92:	4604      	mov	r4, r0
 801ab94:	3b01      	subs	r3, #1
 801ab96:	2b0d      	cmp	r3, #13
 801ab98:	d809      	bhi.n	801abae <uxr_deserialize_ObjectVariant+0x2a>
 801ab9a:	e8df f003 	tbb	[pc, r3]
 801ab9e:	0a41      	.short	0x0a41
 801aba0:	0a0a2323 	.word	0x0a0a2323
 801aba4:	10080a0a 	.word	0x10080a0a
 801aba8:	565c1010 	.word	0x565c1010
 801abac:	2400      	movs	r4, #0
 801abae:	4620      	mov	r0, r4
 801abb0:	bd70      	pop	{r4, r5, r6, pc}
 801abb2:	1d31      	adds	r1, r6, #4
 801abb4:	4628      	mov	r0, r5
 801abb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abba:	f7ff bd21 	b.w	801a600 <uxr_deserialize_DATAWRITER_Representation>
 801abbe:	1d31      	adds	r1, r6, #4
 801abc0:	4628      	mov	r0, r5
 801abc2:	f7f7 f8eb 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801abc6:	2800      	cmp	r0, #0
 801abc8:	d0f0      	beq.n	801abac <uxr_deserialize_ObjectVariant+0x28>
 801abca:	7933      	ldrb	r3, [r6, #4]
 801abcc:	2b01      	cmp	r3, #1
 801abce:	d001      	beq.n	801abd4 <uxr_deserialize_ObjectVariant+0x50>
 801abd0:	2b02      	cmp	r3, #2
 801abd2:	d1ec      	bne.n	801abae <uxr_deserialize_ObjectVariant+0x2a>
 801abd4:	68b1      	ldr	r1, [r6, #8]
 801abd6:	4628      	mov	r0, r5
 801abd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801abdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abe0:	f003 bcda 	b.w	801e598 <ucdr_deserialize_string>
 801abe4:	1d31      	adds	r1, r6, #4
 801abe6:	4628      	mov	r0, r5
 801abe8:	f7f7 f8d8 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801abec:	4604      	mov	r4, r0
 801abee:	b170      	cbz	r0, 801ac0e <uxr_deserialize_ObjectVariant+0x8a>
 801abf0:	7933      	ldrb	r3, [r6, #4]
 801abf2:	2b02      	cmp	r3, #2
 801abf4:	d04c      	beq.n	801ac90 <uxr_deserialize_ObjectVariant+0x10c>
 801abf6:	2b03      	cmp	r3, #3
 801abf8:	d109      	bne.n	801ac0e <uxr_deserialize_ObjectVariant+0x8a>
 801abfa:	f106 0308 	add.w	r3, r6, #8
 801abfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac02:	f106 010c 	add.w	r1, r6, #12
 801ac06:	4628      	mov	r0, r5
 801ac08:	f7f8 fc3c 	bl	8013484 <ucdr_deserialize_sequence_uint8_t>
 801ac0c:	4604      	mov	r4, r0
 801ac0e:	2202      	movs	r2, #2
 801ac10:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801ac14:	4628      	mov	r0, r5
 801ac16:	f7fc fddb 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ac1a:	4020      	ands	r0, r4
 801ac1c:	b2c4      	uxtb	r4, r0
 801ac1e:	e7c6      	b.n	801abae <uxr_deserialize_ObjectVariant+0x2a>
 801ac20:	1d31      	adds	r1, r6, #4
 801ac22:	4628      	mov	r0, r5
 801ac24:	f7f7 f8ba 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801ac28:	4604      	mov	r4, r0
 801ac2a:	b130      	cbz	r0, 801ac3a <uxr_deserialize_ObjectVariant+0xb6>
 801ac2c:	7933      	ldrb	r3, [r6, #4]
 801ac2e:	2b02      	cmp	r3, #2
 801ac30:	d036      	beq.n	801aca0 <uxr_deserialize_ObjectVariant+0x11c>
 801ac32:	2b03      	cmp	r3, #3
 801ac34:	d03c      	beq.n	801acb0 <uxr_deserialize_ObjectVariant+0x12c>
 801ac36:	2b01      	cmp	r3, #1
 801ac38:	d032      	beq.n	801aca0 <uxr_deserialize_ObjectVariant+0x11c>
 801ac3a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801ac3e:	4628      	mov	r0, r5
 801ac40:	f7f7 fe52 	bl	80128e8 <ucdr_deserialize_int16_t>
 801ac44:	4020      	ands	r0, r4
 801ac46:	b2c4      	uxtb	r4, r0
 801ac48:	e7b1      	b.n	801abae <uxr_deserialize_ObjectVariant+0x2a>
 801ac4a:	1d31      	adds	r1, r6, #4
 801ac4c:	4628      	mov	r0, r5
 801ac4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac52:	f7ff bb8b 	b.w	801a36c <uxr_deserialize_CLIENT_Representation>
 801ac56:	2204      	movs	r2, #4
 801ac58:	4628      	mov	r0, r5
 801ac5a:	18b1      	adds	r1, r6, r2
 801ac5c:	f7fc fdb8 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ac60:	4604      	mov	r4, r0
 801ac62:	2202      	movs	r2, #2
 801ac64:	f106 0108 	add.w	r1, r6, #8
 801ac68:	4628      	mov	r0, r5
 801ac6a:	f7fc fdb1 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ac6e:	4004      	ands	r4, r0
 801ac70:	2202      	movs	r2, #2
 801ac72:	f106 010a 	add.w	r1, r6, #10
 801ac76:	4628      	mov	r0, r5
 801ac78:	b2e4      	uxtb	r4, r4
 801ac7a:	f7fc fda9 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	f106 010c 	add.w	r1, r6, #12
 801ac84:	4628      	mov	r0, r5
 801ac86:	401c      	ands	r4, r3
 801ac88:	f7f7 f85a 	bl	8011d40 <ucdr_deserialize_bool>
 801ac8c:	4004      	ands	r4, r0
 801ac8e:	e78e      	b.n	801abae <uxr_deserialize_ObjectVariant+0x2a>
 801ac90:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac94:	68b1      	ldr	r1, [r6, #8]
 801ac96:	4628      	mov	r0, r5
 801ac98:	f003 fc7e 	bl	801e598 <ucdr_deserialize_string>
 801ac9c:	4604      	mov	r4, r0
 801ac9e:	e7b6      	b.n	801ac0e <uxr_deserialize_ObjectVariant+0x8a>
 801aca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aca4:	68b1      	ldr	r1, [r6, #8]
 801aca6:	4628      	mov	r0, r5
 801aca8:	f003 fc76 	bl	801e598 <ucdr_deserialize_string>
 801acac:	4604      	mov	r4, r0
 801acae:	e7c4      	b.n	801ac3a <uxr_deserialize_ObjectVariant+0xb6>
 801acb0:	f106 0308 	add.w	r3, r6, #8
 801acb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801acb8:	f106 010c 	add.w	r1, r6, #12
 801acbc:	4628      	mov	r0, r5
 801acbe:	f7f8 fbe1 	bl	8013484 <ucdr_deserialize_sequence_uint8_t>
 801acc2:	4604      	mov	r4, r0
 801acc4:	e7b9      	b.n	801ac3a <uxr_deserialize_ObjectVariant+0xb6>
 801acc6:	bf00      	nop

0801acc8 <uxr_deserialize_BaseObjectRequest>:
 801acc8:	b570      	push	{r4, r5, r6, lr}
 801acca:	2202      	movs	r2, #2
 801accc:	4605      	mov	r5, r0
 801acce:	460e      	mov	r6, r1
 801acd0:	f7fc fd7e 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801acd4:	2202      	movs	r2, #2
 801acd6:	4604      	mov	r4, r0
 801acd8:	4628      	mov	r0, r5
 801acda:	18b1      	adds	r1, r6, r2
 801acdc:	f7fc fd78 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ace0:	4020      	ands	r0, r4
 801ace2:	b2c0      	uxtb	r0, r0
 801ace4:	bd70      	pop	{r4, r5, r6, pc}
 801ace6:	bf00      	nop

0801ace8 <uxr_serialize_ActivityInfoVariant>:
 801ace8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acec:	460e      	mov	r6, r1
 801acee:	7809      	ldrb	r1, [r1, #0]
 801acf0:	4680      	mov	r8, r0
 801acf2:	f7f7 f83d 	bl	8011d70 <ucdr_serialize_uint8_t>
 801acf6:	4607      	mov	r7, r0
 801acf8:	b138      	cbz	r0, 801ad0a <uxr_serialize_ActivityInfoVariant+0x22>
 801acfa:	7833      	ldrb	r3, [r6, #0]
 801acfc:	2b06      	cmp	r3, #6
 801acfe:	f000 8081 	beq.w	801ae04 <uxr_serialize_ActivityInfoVariant+0x11c>
 801ad02:	2b0d      	cmp	r3, #13
 801ad04:	d014      	beq.n	801ad30 <uxr_serialize_ActivityInfoVariant+0x48>
 801ad06:	2b05      	cmp	r3, #5
 801ad08:	d002      	beq.n	801ad10 <uxr_serialize_ActivityInfoVariant+0x28>
 801ad0a:	4638      	mov	r0, r7
 801ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad10:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ad14:	4640      	mov	r0, r8
 801ad16:	f7f7 fd67 	bl	80127e8 <ucdr_serialize_int16_t>
 801ad1a:	4607      	mov	r7, r0
 801ad1c:	4640      	mov	r0, r8
 801ad1e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801ad22:	f7f7 fc91 	bl	8012648 <ucdr_serialize_uint64_t>
 801ad26:	4038      	ands	r0, r7
 801ad28:	b2c7      	uxtb	r7, r0
 801ad2a:	4638      	mov	r0, r7
 801ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad30:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ad34:	4640      	mov	r0, r8
 801ad36:	f7f7 fd57 	bl	80127e8 <ucdr_serialize_int16_t>
 801ad3a:	68f1      	ldr	r1, [r6, #12]
 801ad3c:	4607      	mov	r7, r0
 801ad3e:	4640      	mov	r0, r8
 801ad40:	f7f7 fa2c 	bl	801219c <ucdr_serialize_uint32_t>
 801ad44:	68f3      	ldr	r3, [r6, #12]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d0ed      	beq.n	801ad26 <uxr_serialize_ActivityInfoVariant+0x3e>
 801ad4a:	b318      	cbz	r0, 801ad94 <uxr_serialize_ActivityInfoVariant+0xac>
 801ad4c:	f106 090c 	add.w	r9, r6, #12
 801ad50:	2400      	movs	r4, #0
 801ad52:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801ad56:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801ad5a:	7c29      	ldrb	r1, [r5, #16]
 801ad5c:	4640      	mov	r0, r8
 801ad5e:	f7f7 f807 	bl	8011d70 <ucdr_serialize_uint8_t>
 801ad62:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801ad66:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801ad6a:	2800      	cmp	r0, #0
 801ad6c:	d051      	beq.n	801ae12 <uxr_serialize_ActivityInfoVariant+0x12a>
 801ad6e:	7c2b      	ldrb	r3, [r5, #16]
 801ad70:	00c9      	lsls	r1, r1, #3
 801ad72:	2b03      	cmp	r3, #3
 801ad74:	d854      	bhi.n	801ae20 <uxr_serialize_ActivityInfoVariant+0x138>
 801ad76:	e8df f003 	tbb	[pc, r3]
 801ad7a:	2133      	.short	0x2133
 801ad7c:	020f      	.short	0x020f
 801ad7e:	4449      	add	r1, r9
 801ad80:	4640      	mov	r0, r8
 801ad82:	6889      	ldr	r1, [r1, #8]
 801ad84:	f003 fbf8 	bl	801e578 <ucdr_serialize_string>
 801ad88:	3401      	adds	r4, #1
 801ad8a:	68f2      	ldr	r2, [r6, #12]
 801ad8c:	4294      	cmp	r4, r2
 801ad8e:	d244      	bcs.n	801ae1a <uxr_serialize_ActivityInfoVariant+0x132>
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d1de      	bne.n	801ad52 <uxr_serialize_ActivityInfoVariant+0x6a>
 801ad94:	2700      	movs	r7, #0
 801ad96:	e7b8      	b.n	801ad0a <uxr_serialize_ActivityInfoVariant+0x22>
 801ad98:	3108      	adds	r1, #8
 801ad9a:	44a2      	add	sl, r4
 801ad9c:	2210      	movs	r2, #16
 801ad9e:	4640      	mov	r0, r8
 801ada0:	4449      	add	r1, r9
 801ada2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ada6:	f7fc fcaf 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801adaa:	4605      	mov	r5, r0
 801adac:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801adb0:	4640      	mov	r0, r8
 801adb2:	f7f7 f9f3 	bl	801219c <ucdr_serialize_uint32_t>
 801adb6:	4028      	ands	r0, r5
 801adb8:	b2c0      	uxtb	r0, r0
 801adba:	e7e5      	b.n	801ad88 <uxr_serialize_ActivityInfoVariant+0xa0>
 801adbc:	3108      	adds	r1, #8
 801adbe:	44a2      	add	sl, r4
 801adc0:	2204      	movs	r2, #4
 801adc2:	4640      	mov	r0, r8
 801adc4:	4449      	add	r1, r9
 801adc6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801adca:	f7fc fc9d 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801adce:	4605      	mov	r5, r0
 801add0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801add4:	4640      	mov	r0, r8
 801add6:	f7f6 fff7 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801adda:	4028      	ands	r0, r5
 801addc:	b2c0      	uxtb	r0, r0
 801adde:	e7d3      	b.n	801ad88 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ade0:	3108      	adds	r1, #8
 801ade2:	44a2      	add	sl, r4
 801ade4:	2202      	movs	r2, #2
 801ade6:	4640      	mov	r0, r8
 801ade8:	4449      	add	r1, r9
 801adea:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801adee:	f7fc fc8b 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801adf2:	4605      	mov	r5, r0
 801adf4:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801adf8:	4640      	mov	r0, r8
 801adfa:	f7f6 ffb9 	bl	8011d70 <ucdr_serialize_uint8_t>
 801adfe:	4028      	ands	r0, r5
 801ae00:	b2c0      	uxtb	r0, r0
 801ae02:	e7c1      	b.n	801ad88 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ae04:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ae08:	4640      	mov	r0, r8
 801ae0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae0e:	f7f7 bceb 	b.w	80127e8 <ucdr_serialize_int16_t>
 801ae12:	3401      	adds	r4, #1
 801ae14:	68f2      	ldr	r2, [r6, #12]
 801ae16:	42a2      	cmp	r2, r4
 801ae18:	d8bc      	bhi.n	801ad94 <uxr_serialize_ActivityInfoVariant+0xac>
 801ae1a:	4007      	ands	r7, r0
 801ae1c:	b2ff      	uxtb	r7, r7
 801ae1e:	e774      	b.n	801ad0a <uxr_serialize_ActivityInfoVariant+0x22>
 801ae20:	3401      	adds	r4, #1
 801ae22:	68f3      	ldr	r3, [r6, #12]
 801ae24:	3518      	adds	r5, #24
 801ae26:	429c      	cmp	r4, r3
 801ae28:	d397      	bcc.n	801ad5a <uxr_serialize_ActivityInfoVariant+0x72>
 801ae2a:	e76e      	b.n	801ad0a <uxr_serialize_ActivityInfoVariant+0x22>

0801ae2c <uxr_deserialize_BaseObjectReply>:
 801ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae30:	2202      	movs	r2, #2
 801ae32:	4606      	mov	r6, r0
 801ae34:	460f      	mov	r7, r1
 801ae36:	f7fc fccb 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ae3a:	2202      	movs	r2, #2
 801ae3c:	4605      	mov	r5, r0
 801ae3e:	4630      	mov	r0, r6
 801ae40:	18b9      	adds	r1, r7, r2
 801ae42:	f7fc fcc5 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801ae46:	4680      	mov	r8, r0
 801ae48:	1d39      	adds	r1, r7, #4
 801ae4a:	4630      	mov	r0, r6
 801ae4c:	f7f6 ffa6 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801ae50:	ea05 0508 	and.w	r5, r5, r8
 801ae54:	4604      	mov	r4, r0
 801ae56:	1d79      	adds	r1, r7, #5
 801ae58:	4630      	mov	r0, r6
 801ae5a:	402c      	ands	r4, r5
 801ae5c:	f7f6 ff9e 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801ae60:	4020      	ands	r0, r4
 801ae62:	b2c0      	uxtb	r0, r0
 801ae64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ae68 <uxr_serialize_ReadSpecification>:
 801ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae6a:	460e      	mov	r6, r1
 801ae6c:	4607      	mov	r7, r0
 801ae6e:	7809      	ldrb	r1, [r1, #0]
 801ae70:	f7f6 ff7e 	bl	8011d70 <ucdr_serialize_uint8_t>
 801ae74:	4604      	mov	r4, r0
 801ae76:	7871      	ldrb	r1, [r6, #1]
 801ae78:	4638      	mov	r0, r7
 801ae7a:	f7f6 ff79 	bl	8011d70 <ucdr_serialize_uint8_t>
 801ae7e:	4004      	ands	r4, r0
 801ae80:	78b1      	ldrb	r1, [r6, #2]
 801ae82:	4638      	mov	r0, r7
 801ae84:	f7f6 ff46 	bl	8011d14 <ucdr_serialize_bool>
 801ae88:	78b3      	ldrb	r3, [r6, #2]
 801ae8a:	b2e4      	uxtb	r4, r4
 801ae8c:	4004      	ands	r4, r0
 801ae8e:	b943      	cbnz	r3, 801aea2 <uxr_serialize_ReadSpecification+0x3a>
 801ae90:	7a31      	ldrb	r1, [r6, #8]
 801ae92:	4638      	mov	r0, r7
 801ae94:	f7f6 ff3e 	bl	8011d14 <ucdr_serialize_bool>
 801ae98:	7a33      	ldrb	r3, [r6, #8]
 801ae9a:	4004      	ands	r4, r0
 801ae9c:	b93b      	cbnz	r3, 801aeae <uxr_serialize_ReadSpecification+0x46>
 801ae9e:	4620      	mov	r0, r4
 801aea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aea2:	6871      	ldr	r1, [r6, #4]
 801aea4:	4638      	mov	r0, r7
 801aea6:	f003 fb67 	bl	801e578 <ucdr_serialize_string>
 801aeaa:	4004      	ands	r4, r0
 801aeac:	e7f0      	b.n	801ae90 <uxr_serialize_ReadSpecification+0x28>
 801aeae:	8971      	ldrh	r1, [r6, #10]
 801aeb0:	4638      	mov	r0, r7
 801aeb2:	f7f6 ff89 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	89b1      	ldrh	r1, [r6, #12]
 801aeba:	4638      	mov	r0, r7
 801aebc:	f7f6 ff84 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801aec0:	4005      	ands	r5, r0
 801aec2:	89f1      	ldrh	r1, [r6, #14]
 801aec4:	4638      	mov	r0, r7
 801aec6:	b2ed      	uxtb	r5, r5
 801aec8:	f7f6 ff7e 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801aecc:	8a31      	ldrh	r1, [r6, #16]
 801aece:	4025      	ands	r5, r4
 801aed0:	4604      	mov	r4, r0
 801aed2:	4638      	mov	r0, r7
 801aed4:	4025      	ands	r5, r4
 801aed6:	f7f6 ff77 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801aeda:	ea00 0405 	and.w	r4, r0, r5
 801aede:	4620      	mov	r0, r4
 801aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aee2:	bf00      	nop

0801aee4 <uxr_serialize_CREATE_CLIENT_Payload>:
 801aee4:	f7ff b9ea 	b.w	801a2bc <uxr_serialize_CLIENT_Representation>

0801aee8 <uxr_serialize_CREATE_Payload>:
 801aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeea:	2202      	movs	r2, #2
 801aeec:	4607      	mov	r7, r0
 801aeee:	460e      	mov	r6, r1
 801aef0:	f7fc fc0a 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801aef4:	2202      	movs	r2, #2
 801aef6:	4605      	mov	r5, r0
 801aef8:	4638      	mov	r0, r7
 801aefa:	18b1      	adds	r1, r6, r2
 801aefc:	f7fc fc04 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801af00:	7931      	ldrb	r1, [r6, #4]
 801af02:	4604      	mov	r4, r0
 801af04:	4638      	mov	r0, r7
 801af06:	f7f6 ff33 	bl	8011d70 <ucdr_serialize_uint8_t>
 801af0a:	b170      	cbz	r0, 801af2a <uxr_serialize_CREATE_Payload+0x42>
 801af0c:	7933      	ldrb	r3, [r6, #4]
 801af0e:	402c      	ands	r4, r5
 801af10:	3b01      	subs	r3, #1
 801af12:	b2e4      	uxtb	r4, r4
 801af14:	2b0d      	cmp	r3, #13
 801af16:	d809      	bhi.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801af18:	e8df f003 	tbb	[pc, r3]
 801af1c:	23230a4c 	.word	0x23230a4c
 801af20:	0a0a0a0a 	.word	0x0a0a0a0a
 801af24:	12121208 	.word	0x12121208
 801af28:	3e45      	.short	0x3e45
 801af2a:	2400      	movs	r4, #0
 801af2c:	4620      	mov	r0, r4
 801af2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af30:	f106 0108 	add.w	r1, r6, #8
 801af34:	4638      	mov	r0, r7
 801af36:	f7ff fac7 	bl	801a4c8 <uxr_serialize_DATAWRITER_Representation>
 801af3a:	4004      	ands	r4, r0
 801af3c:	4620      	mov	r0, r4
 801af3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af40:	7a31      	ldrb	r1, [r6, #8]
 801af42:	4638      	mov	r0, r7
 801af44:	f7f6 ff14 	bl	8011d70 <ucdr_serialize_uint8_t>
 801af48:	2800      	cmp	r0, #0
 801af4a:	d0ee      	beq.n	801af2a <uxr_serialize_CREATE_Payload+0x42>
 801af4c:	7a33      	ldrb	r3, [r6, #8]
 801af4e:	2b01      	cmp	r3, #1
 801af50:	d001      	beq.n	801af56 <uxr_serialize_CREATE_Payload+0x6e>
 801af52:	2b02      	cmp	r3, #2
 801af54:	d1ea      	bne.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801af56:	68f1      	ldr	r1, [r6, #12]
 801af58:	4638      	mov	r0, r7
 801af5a:	f003 fb0d 	bl	801e578 <ucdr_serialize_string>
 801af5e:	4004      	ands	r4, r0
 801af60:	e7e4      	b.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801af62:	7a31      	ldrb	r1, [r6, #8]
 801af64:	4638      	mov	r0, r7
 801af66:	f7f6 ff03 	bl	8011d70 <ucdr_serialize_uint8_t>
 801af6a:	4605      	mov	r5, r0
 801af6c:	b158      	cbz	r0, 801af86 <uxr_serialize_CREATE_Payload+0x9e>
 801af6e:	7a33      	ldrb	r3, [r6, #8]
 801af70:	2b02      	cmp	r3, #2
 801af72:	d034      	beq.n	801afde <uxr_serialize_CREATE_Payload+0xf6>
 801af74:	2b03      	cmp	r3, #3
 801af76:	d106      	bne.n	801af86 <uxr_serialize_CREATE_Payload+0x9e>
 801af78:	68f2      	ldr	r2, [r6, #12]
 801af7a:	f106 0110 	add.w	r1, r6, #16
 801af7e:	4638      	mov	r0, r7
 801af80:	f7f8 fa6e 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801af84:	4605      	mov	r5, r0
 801af86:	2202      	movs	r2, #2
 801af88:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801af8c:	4638      	mov	r0, r7
 801af8e:	f7fc fbbb 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801af92:	4028      	ands	r0, r5
 801af94:	4004      	ands	r4, r0
 801af96:	e7c9      	b.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801af98:	f106 0108 	add.w	r1, r6, #8
 801af9c:	4638      	mov	r0, r7
 801af9e:	f7ff f98d 	bl	801a2bc <uxr_serialize_CLIENT_Representation>
 801afa2:	4004      	ands	r4, r0
 801afa4:	e7c2      	b.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801afa6:	f106 0108 	add.w	r1, r6, #8
 801afaa:	4638      	mov	r0, r7
 801afac:	f7ff fa42 	bl	801a434 <uxr_serialize_AGENT_Representation>
 801afb0:	4004      	ands	r4, r0
 801afb2:	e7bb      	b.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801afb4:	7a31      	ldrb	r1, [r6, #8]
 801afb6:	4638      	mov	r0, r7
 801afb8:	f7f6 feda 	bl	8011d70 <ucdr_serialize_uint8_t>
 801afbc:	4605      	mov	r5, r0
 801afbe:	b130      	cbz	r0, 801afce <uxr_serialize_CREATE_Payload+0xe6>
 801afc0:	7a33      	ldrb	r3, [r6, #8]
 801afc2:	2b02      	cmp	r3, #2
 801afc4:	d011      	beq.n	801afea <uxr_serialize_CREATE_Payload+0x102>
 801afc6:	2b03      	cmp	r3, #3
 801afc8:	d015      	beq.n	801aff6 <uxr_serialize_CREATE_Payload+0x10e>
 801afca:	2b01      	cmp	r3, #1
 801afcc:	d00d      	beq.n	801afea <uxr_serialize_CREATE_Payload+0x102>
 801afce:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801afd2:	4638      	mov	r0, r7
 801afd4:	f7f7 fc08 	bl	80127e8 <ucdr_serialize_int16_t>
 801afd8:	4028      	ands	r0, r5
 801afda:	4004      	ands	r4, r0
 801afdc:	e7a6      	b.n	801af2c <uxr_serialize_CREATE_Payload+0x44>
 801afde:	68f1      	ldr	r1, [r6, #12]
 801afe0:	4638      	mov	r0, r7
 801afe2:	f003 fac9 	bl	801e578 <ucdr_serialize_string>
 801afe6:	4605      	mov	r5, r0
 801afe8:	e7cd      	b.n	801af86 <uxr_serialize_CREATE_Payload+0x9e>
 801afea:	68f1      	ldr	r1, [r6, #12]
 801afec:	4638      	mov	r0, r7
 801afee:	f003 fac3 	bl	801e578 <ucdr_serialize_string>
 801aff2:	4605      	mov	r5, r0
 801aff4:	e7eb      	b.n	801afce <uxr_serialize_CREATE_Payload+0xe6>
 801aff6:	68f2      	ldr	r2, [r6, #12]
 801aff8:	f106 0110 	add.w	r1, r6, #16
 801affc:	4638      	mov	r0, r7
 801affe:	f7f8 fa2f 	bl	8013460 <ucdr_serialize_sequence_uint8_t>
 801b002:	4605      	mov	r5, r0
 801b004:	e7e3      	b.n	801afce <uxr_serialize_CREATE_Payload+0xe6>
 801b006:	bf00      	nop

0801b008 <uxr_deserialize_GET_INFO_Payload>:
 801b008:	b570      	push	{r4, r5, r6, lr}
 801b00a:	2202      	movs	r2, #2
 801b00c:	4605      	mov	r5, r0
 801b00e:	460e      	mov	r6, r1
 801b010:	f7fc fbde 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b014:	2202      	movs	r2, #2
 801b016:	4604      	mov	r4, r0
 801b018:	4628      	mov	r0, r5
 801b01a:	18b1      	adds	r1, r6, r2
 801b01c:	f7fc fbd8 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b020:	4603      	mov	r3, r0
 801b022:	1d31      	adds	r1, r6, #4
 801b024:	4628      	mov	r0, r5
 801b026:	401c      	ands	r4, r3
 801b028:	f7f7 f9e8 	bl	80123fc <ucdr_deserialize_uint32_t>
 801b02c:	b2e4      	uxtb	r4, r4
 801b02e:	4020      	ands	r0, r4
 801b030:	bd70      	pop	{r4, r5, r6, pc}
 801b032:	bf00      	nop

0801b034 <uxr_serialize_DELETE_Payload>:
 801b034:	b570      	push	{r4, r5, r6, lr}
 801b036:	2202      	movs	r2, #2
 801b038:	4605      	mov	r5, r0
 801b03a:	460e      	mov	r6, r1
 801b03c:	f7fc fb64 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b040:	2202      	movs	r2, #2
 801b042:	4604      	mov	r4, r0
 801b044:	4628      	mov	r0, r5
 801b046:	18b1      	adds	r1, r6, r2
 801b048:	f7fc fb5e 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b04c:	4020      	ands	r0, r4
 801b04e:	b2c0      	uxtb	r0, r0
 801b050:	bd70      	pop	{r4, r5, r6, pc}
 801b052:	bf00      	nop

0801b054 <uxr_deserialize_STATUS_AGENT_Payload>:
 801b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b058:	460e      	mov	r6, r1
 801b05a:	4605      	mov	r5, r0
 801b05c:	f7f6 fe9e 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b060:	4604      	mov	r4, r0
 801b062:	1c71      	adds	r1, r6, #1
 801b064:	4628      	mov	r0, r5
 801b066:	f7f6 fe99 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b06a:	2204      	movs	r2, #4
 801b06c:	4681      	mov	r9, r0
 801b06e:	4628      	mov	r0, r5
 801b070:	18b1      	adds	r1, r6, r2
 801b072:	f7fc fbad 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b076:	f106 0108 	add.w	r1, r6, #8
 801b07a:	4680      	mov	r8, r0
 801b07c:	2202      	movs	r2, #2
 801b07e:	4628      	mov	r0, r5
 801b080:	f7fc fba6 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b084:	ea04 0309 	and.w	r3, r4, r9
 801b088:	4607      	mov	r7, r0
 801b08a:	2202      	movs	r2, #2
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	f106 010a 	add.w	r1, r6, #10
 801b092:	4628      	mov	r0, r5
 801b094:	ea03 0408 	and.w	r4, r3, r8
 801b098:	f7fc fb9a 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b09c:	4603      	mov	r3, r0
 801b09e:	4628      	mov	r0, r5
 801b0a0:	403c      	ands	r4, r7
 801b0a2:	f106 010c 	add.w	r1, r6, #12
 801b0a6:	461d      	mov	r5, r3
 801b0a8:	f7f6 fe4a 	bl	8011d40 <ucdr_deserialize_bool>
 801b0ac:	4025      	ands	r5, r4
 801b0ae:	4028      	ands	r0, r5
 801b0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b0b4 <uxr_deserialize_STATUS_Payload>:
 801b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0b8:	2202      	movs	r2, #2
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	460f      	mov	r7, r1
 801b0be:	f7fc fb87 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b0c2:	2202      	movs	r2, #2
 801b0c4:	4605      	mov	r5, r0
 801b0c6:	4630      	mov	r0, r6
 801b0c8:	18b9      	adds	r1, r7, r2
 801b0ca:	f7fc fb81 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b0ce:	4680      	mov	r8, r0
 801b0d0:	1d39      	adds	r1, r7, #4
 801b0d2:	4630      	mov	r0, r6
 801b0d4:	f7f6 fe62 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b0d8:	ea05 0508 	and.w	r5, r5, r8
 801b0dc:	4604      	mov	r4, r0
 801b0de:	1d79      	adds	r1, r7, #5
 801b0e0:	4630      	mov	r0, r6
 801b0e2:	402c      	ands	r4, r5
 801b0e4:	f7f6 fe5a 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b0e8:	4020      	ands	r0, r4
 801b0ea:	b2c0      	uxtb	r0, r0
 801b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b0f0 <uxr_serialize_INFO_Payload>:
 801b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0f4:	2202      	movs	r2, #2
 801b0f6:	460c      	mov	r4, r1
 801b0f8:	4605      	mov	r5, r0
 801b0fa:	f7fc fb05 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b0fe:	2202      	movs	r2, #2
 801b100:	4680      	mov	r8, r0
 801b102:	4628      	mov	r0, r5
 801b104:	18a1      	adds	r1, r4, r2
 801b106:	f7fc faff 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b10a:	4607      	mov	r7, r0
 801b10c:	7921      	ldrb	r1, [r4, #4]
 801b10e:	4628      	mov	r0, r5
 801b110:	f7f6 fe2e 	bl	8011d70 <ucdr_serialize_uint8_t>
 801b114:	ea08 0807 	and.w	r8, r8, r7
 801b118:	4606      	mov	r6, r0
 801b11a:	7961      	ldrb	r1, [r4, #5]
 801b11c:	4628      	mov	r0, r5
 801b11e:	ea06 0608 	and.w	r6, r6, r8
 801b122:	f7f6 fe25 	bl	8011d70 <ucdr_serialize_uint8_t>
 801b126:	7a21      	ldrb	r1, [r4, #8]
 801b128:	4030      	ands	r0, r6
 801b12a:	b2c7      	uxtb	r7, r0
 801b12c:	4628      	mov	r0, r5
 801b12e:	f7f6 fdf1 	bl	8011d14 <ucdr_serialize_bool>
 801b132:	7a23      	ldrb	r3, [r4, #8]
 801b134:	4606      	mov	r6, r0
 801b136:	b96b      	cbnz	r3, 801b154 <uxr_serialize_INFO_Payload+0x64>
 801b138:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b13c:	4628      	mov	r0, r5
 801b13e:	f7f6 fde9 	bl	8011d14 <ucdr_serialize_bool>
 801b142:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b146:	4030      	ands	r0, r6
 801b148:	b2c6      	uxtb	r6, r0
 801b14a:	b983      	cbnz	r3, 801b16e <uxr_serialize_INFO_Payload+0x7e>
 801b14c:	ea06 0007 	and.w	r0, r6, r7
 801b150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b154:	7b21      	ldrb	r1, [r4, #12]
 801b156:	4628      	mov	r0, r5
 801b158:	f7f6 fe0a 	bl	8011d70 <ucdr_serialize_uint8_t>
 801b15c:	b188      	cbz	r0, 801b182 <uxr_serialize_INFO_Payload+0x92>
 801b15e:	f104 010c 	add.w	r1, r4, #12
 801b162:	4628      	mov	r0, r5
 801b164:	f7ff f9d8 	bl	801a518 <uxr_serialize_ObjectVariant.part.0>
 801b168:	4030      	ands	r0, r6
 801b16a:	b2c6      	uxtb	r6, r0
 801b16c:	e7e4      	b.n	801b138 <uxr_serialize_INFO_Payload+0x48>
 801b16e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b172:	4628      	mov	r0, r5
 801b174:	f7ff fdb8 	bl	801ace8 <uxr_serialize_ActivityInfoVariant>
 801b178:	4006      	ands	r6, r0
 801b17a:	ea06 0007 	and.w	r0, r6, r7
 801b17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b182:	4606      	mov	r6, r0
 801b184:	e7d8      	b.n	801b138 <uxr_serialize_INFO_Payload+0x48>
 801b186:	bf00      	nop

0801b188 <uxr_serialize_READ_DATA_Payload>:
 801b188:	b570      	push	{r4, r5, r6, lr}
 801b18a:	2202      	movs	r2, #2
 801b18c:	4605      	mov	r5, r0
 801b18e:	460e      	mov	r6, r1
 801b190:	f7fc faba 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b194:	2202      	movs	r2, #2
 801b196:	4604      	mov	r4, r0
 801b198:	4628      	mov	r0, r5
 801b19a:	18b1      	adds	r1, r6, r2
 801b19c:	f7fc fab4 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	1d31      	adds	r1, r6, #4
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	401c      	ands	r4, r3
 801b1a8:	f7ff fe5e 	bl	801ae68 <uxr_serialize_ReadSpecification>
 801b1ac:	b2e4      	uxtb	r4, r4
 801b1ae:	4020      	ands	r0, r4
 801b1b0:	bd70      	pop	{r4, r5, r6, pc}
 801b1b2:	bf00      	nop

0801b1b4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b1b4:	b570      	push	{r4, r5, r6, lr}
 801b1b6:	2202      	movs	r2, #2
 801b1b8:	4605      	mov	r5, r0
 801b1ba:	460e      	mov	r6, r1
 801b1bc:	f7fc faa4 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b1c0:	2202      	movs	r2, #2
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	4628      	mov	r0, r5
 801b1c6:	18b1      	adds	r1, r6, r2
 801b1c8:	f7fc fa9e 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b1cc:	4020      	ands	r0, r4
 801b1ce:	b2c0      	uxtb	r0, r0
 801b1d0:	bd70      	pop	{r4, r5, r6, pc}
 801b1d2:	bf00      	nop

0801b1d4 <uxr_serialize_ACKNACK_Payload>:
 801b1d4:	b570      	push	{r4, r5, r6, lr}
 801b1d6:	460c      	mov	r4, r1
 801b1d8:	4605      	mov	r5, r0
 801b1da:	460e      	mov	r6, r1
 801b1dc:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b1e0:	f7f6 fdf2 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801b1e4:	2202      	movs	r2, #2
 801b1e6:	4621      	mov	r1, r4
 801b1e8:	4604      	mov	r4, r0
 801b1ea:	4628      	mov	r0, r5
 801b1ec:	f7fc fa8c 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	7931      	ldrb	r1, [r6, #4]
 801b1f4:	4628      	mov	r0, r5
 801b1f6:	401c      	ands	r4, r3
 801b1f8:	f7f6 fdba 	bl	8011d70 <ucdr_serialize_uint8_t>
 801b1fc:	b2e4      	uxtb	r4, r4
 801b1fe:	4020      	ands	r0, r4
 801b200:	bd70      	pop	{r4, r5, r6, pc}
 801b202:	bf00      	nop

0801b204 <uxr_deserialize_ACKNACK_Payload>:
 801b204:	b570      	push	{r4, r5, r6, lr}
 801b206:	460e      	mov	r6, r1
 801b208:	4605      	mov	r5, r0
 801b20a:	f7f6 fedd 	bl	8011fc8 <ucdr_deserialize_uint16_t>
 801b20e:	2202      	movs	r2, #2
 801b210:	4604      	mov	r4, r0
 801b212:	4628      	mov	r0, r5
 801b214:	18b1      	adds	r1, r6, r2
 801b216:	f7fc fadb 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b21a:	4603      	mov	r3, r0
 801b21c:	1d31      	adds	r1, r6, #4
 801b21e:	4628      	mov	r0, r5
 801b220:	401c      	ands	r4, r3
 801b222:	f7f6 fdbb 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b226:	b2e4      	uxtb	r4, r4
 801b228:	4020      	ands	r0, r4
 801b22a:	bd70      	pop	{r4, r5, r6, pc}

0801b22c <uxr_serialize_HEARTBEAT_Payload>:
 801b22c:	b570      	push	{r4, r5, r6, lr}
 801b22e:	460d      	mov	r5, r1
 801b230:	4606      	mov	r6, r0
 801b232:	8809      	ldrh	r1, [r1, #0]
 801b234:	f7f6 fdc8 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801b238:	8869      	ldrh	r1, [r5, #2]
 801b23a:	4604      	mov	r4, r0
 801b23c:	4630      	mov	r0, r6
 801b23e:	f7f6 fdc3 	bl	8011dc8 <ucdr_serialize_uint16_t>
 801b242:	4603      	mov	r3, r0
 801b244:	7929      	ldrb	r1, [r5, #4]
 801b246:	4630      	mov	r0, r6
 801b248:	401c      	ands	r4, r3
 801b24a:	f7f6 fd91 	bl	8011d70 <ucdr_serialize_uint8_t>
 801b24e:	b2e4      	uxtb	r4, r4
 801b250:	4020      	ands	r0, r4
 801b252:	bd70      	pop	{r4, r5, r6, pc}

0801b254 <uxr_deserialize_HEARTBEAT_Payload>:
 801b254:	b570      	push	{r4, r5, r6, lr}
 801b256:	460e      	mov	r6, r1
 801b258:	4605      	mov	r5, r0
 801b25a:	f7f6 feb5 	bl	8011fc8 <ucdr_deserialize_uint16_t>
 801b25e:	4604      	mov	r4, r0
 801b260:	1cb1      	adds	r1, r6, #2
 801b262:	4628      	mov	r0, r5
 801b264:	f7f6 feb0 	bl	8011fc8 <ucdr_deserialize_uint16_t>
 801b268:	4603      	mov	r3, r0
 801b26a:	1d31      	adds	r1, r6, #4
 801b26c:	4628      	mov	r0, r5
 801b26e:	401c      	ands	r4, r3
 801b270:	f7f6 fd94 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b274:	b2e4      	uxtb	r4, r4
 801b276:	4020      	ands	r0, r4
 801b278:	bd70      	pop	{r4, r5, r6, pc}
 801b27a:	bf00      	nop

0801b27c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b280:	460e      	mov	r6, r1
 801b282:	4605      	mov	r5, r0
 801b284:	f7f7 fc3c 	bl	8012b00 <ucdr_deserialize_int32_t>
 801b288:	4607      	mov	r7, r0
 801b28a:	1d31      	adds	r1, r6, #4
 801b28c:	4628      	mov	r0, r5
 801b28e:	f7f7 f8b5 	bl	80123fc <ucdr_deserialize_uint32_t>
 801b292:	4680      	mov	r8, r0
 801b294:	f106 0108 	add.w	r1, r6, #8
 801b298:	4628      	mov	r0, r5
 801b29a:	f7f7 fc31 	bl	8012b00 <ucdr_deserialize_int32_t>
 801b29e:	ea07 0708 	and.w	r7, r7, r8
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	f106 010c 	add.w	r1, r6, #12
 801b2a8:	4628      	mov	r0, r5
 801b2aa:	403c      	ands	r4, r7
 801b2ac:	f7f7 f8a6 	bl	80123fc <ucdr_deserialize_uint32_t>
 801b2b0:	f106 0110 	add.w	r1, r6, #16
 801b2b4:	4004      	ands	r4, r0
 801b2b6:	4628      	mov	r0, r5
 801b2b8:	f7f7 fc22 	bl	8012b00 <ucdr_deserialize_int32_t>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	b2e4      	uxtb	r4, r4
 801b2c0:	4628      	mov	r0, r5
 801b2c2:	461d      	mov	r5, r3
 801b2c4:	f106 0114 	add.w	r1, r6, #20
 801b2c8:	f7f7 f898 	bl	80123fc <ucdr_deserialize_uint32_t>
 801b2cc:	402c      	ands	r4, r5
 801b2ce:	4020      	ands	r0, r4
 801b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b2d4 <uxr_serialize_SampleIdentity>:
 801b2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2d8:	4604      	mov	r4, r0
 801b2da:	460d      	mov	r5, r1
 801b2dc:	220c      	movs	r2, #12
 801b2de:	f7fc fa13 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b2e2:	2203      	movs	r2, #3
 801b2e4:	f105 010c 	add.w	r1, r5, #12
 801b2e8:	4607      	mov	r7, r0
 801b2ea:	4620      	mov	r0, r4
 801b2ec:	f7fc fa0c 	bl	8017708 <ucdr_serialize_array_uint8_t>
 801b2f0:	7be9      	ldrb	r1, [r5, #15]
 801b2f2:	4680      	mov	r8, r0
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	f7f6 fd3b 	bl	8011d70 <ucdr_serialize_uint8_t>
 801b2fa:	6929      	ldr	r1, [r5, #16]
 801b2fc:	4606      	mov	r6, r0
 801b2fe:	4620      	mov	r0, r4
 801b300:	f7f7 fb66 	bl	80129d0 <ucdr_serialize_int32_t>
 801b304:	ea07 0708 	and.w	r7, r7, r8
 801b308:	4603      	mov	r3, r0
 801b30a:	4620      	mov	r0, r4
 801b30c:	403e      	ands	r6, r7
 801b30e:	6969      	ldr	r1, [r5, #20]
 801b310:	461c      	mov	r4, r3
 801b312:	f7f6 ff43 	bl	801219c <ucdr_serialize_uint32_t>
 801b316:	4034      	ands	r4, r6
 801b318:	4020      	ands	r0, r4
 801b31a:	b2c0      	uxtb	r0, r0
 801b31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b320 <uxr_deserialize_SampleIdentity>:
 801b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b324:	4604      	mov	r4, r0
 801b326:	460d      	mov	r5, r1
 801b328:	220c      	movs	r2, #12
 801b32a:	f7fc fa51 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b32e:	2203      	movs	r2, #3
 801b330:	f105 010c 	add.w	r1, r5, #12
 801b334:	4607      	mov	r7, r0
 801b336:	4620      	mov	r0, r4
 801b338:	f7fc fa4a 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801b33c:	f105 010f 	add.w	r1, r5, #15
 801b340:	4680      	mov	r8, r0
 801b342:	4620      	mov	r0, r4
 801b344:	f7f6 fd2a 	bl	8011d9c <ucdr_deserialize_uint8_t>
 801b348:	f105 0110 	add.w	r1, r5, #16
 801b34c:	4606      	mov	r6, r0
 801b34e:	4620      	mov	r0, r4
 801b350:	f7f7 fbd6 	bl	8012b00 <ucdr_deserialize_int32_t>
 801b354:	ea07 0708 	and.w	r7, r7, r8
 801b358:	4603      	mov	r3, r0
 801b35a:	4620      	mov	r0, r4
 801b35c:	403e      	ands	r6, r7
 801b35e:	f105 0114 	add.w	r1, r5, #20
 801b362:	461c      	mov	r4, r3
 801b364:	f7f7 f84a 	bl	80123fc <ucdr_deserialize_uint32_t>
 801b368:	4034      	ands	r4, r6
 801b36a:	4020      	ands	r0, r4
 801b36c:	b2c0      	uxtb	r0, r0
 801b36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b372:	bf00      	nop

0801b374 <rcl_client_get_rmw_handle>:
 801b374:	b118      	cbz	r0, 801b37e <rcl_client_get_rmw_handle+0xa>
 801b376:	6800      	ldr	r0, [r0, #0]
 801b378:	b108      	cbz	r0, 801b37e <rcl_client_get_rmw_handle+0xa>
 801b37a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b37e:	4770      	bx	lr

0801b380 <rcl_send_request>:
 801b380:	b570      	push	{r4, r5, r6, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	b1f8      	cbz	r0, 801b3c6 <rcl_send_request+0x46>
 801b386:	4604      	mov	r4, r0
 801b388:	6800      	ldr	r0, [r0, #0]
 801b38a:	b1e0      	cbz	r0, 801b3c6 <rcl_send_request+0x46>
 801b38c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b390:	b1cb      	cbz	r3, 801b3c6 <rcl_send_request+0x46>
 801b392:	460e      	mov	r6, r1
 801b394:	b1e1      	cbz	r1, 801b3d0 <rcl_send_request+0x50>
 801b396:	4615      	mov	r5, r2
 801b398:	b1d2      	cbz	r2, 801b3d0 <rcl_send_request+0x50>
 801b39a:	2105      	movs	r1, #5
 801b39c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b3a0:	f002 fa2e 	bl	801d800 <__atomic_load_8>
 801b3a4:	4602      	mov	r2, r0
 801b3a6:	460b      	mov	r3, r1
 801b3a8:	4631      	mov	r1, r6
 801b3aa:	e9c5 2300 	strd	r2, r3, [r5]
 801b3ae:	6823      	ldr	r3, [r4, #0]
 801b3b0:	462a      	mov	r2, r5
 801b3b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b3b6:	f7fa fefb 	bl	80161b0 <rmw_send_request>
 801b3ba:	4606      	mov	r6, r0
 801b3bc:	b160      	cbz	r0, 801b3d8 <rcl_send_request+0x58>
 801b3be:	2601      	movs	r6, #1
 801b3c0:	4630      	mov	r0, r6
 801b3c2:	b002      	add	sp, #8
 801b3c4:	bd70      	pop	{r4, r5, r6, pc}
 801b3c6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	b002      	add	sp, #8
 801b3ce:	bd70      	pop	{r4, r5, r6, pc}
 801b3d0:	260b      	movs	r6, #11
 801b3d2:	4630      	mov	r0, r6
 801b3d4:	b002      	add	sp, #8
 801b3d6:	bd70      	pop	{r4, r5, r6, pc}
 801b3d8:	6820      	ldr	r0, [r4, #0]
 801b3da:	2105      	movs	r1, #5
 801b3dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b3e0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b3e4:	9100      	str	r1, [sp, #0]
 801b3e6:	f002 fa77 	bl	801d8d8 <__atomic_exchange_8>
 801b3ea:	4630      	mov	r0, r6
 801b3ec:	b002      	add	sp, #8
 801b3ee:	bd70      	pop	{r4, r5, r6, pc}

0801b3f0 <rcl_take_response>:
 801b3f0:	b570      	push	{r4, r5, r6, lr}
 801b3f2:	468e      	mov	lr, r1
 801b3f4:	b08c      	sub	sp, #48	; 0x30
 801b3f6:	460c      	mov	r4, r1
 801b3f8:	4616      	mov	r6, r2
 801b3fa:	f10d 0c18 	add.w	ip, sp, #24
 801b3fe:	4605      	mov	r5, r0
 801b400:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b408:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b40c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b410:	b35d      	cbz	r5, 801b46a <rcl_take_response+0x7a>
 801b412:	682b      	ldr	r3, [r5, #0]
 801b414:	b34b      	cbz	r3, 801b46a <rcl_take_response+0x7a>
 801b416:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b41a:	b330      	cbz	r0, 801b46a <rcl_take_response+0x7a>
 801b41c:	b346      	cbz	r6, 801b470 <rcl_take_response+0x80>
 801b41e:	2300      	movs	r3, #0
 801b420:	4632      	mov	r2, r6
 801b422:	a902      	add	r1, sp, #8
 801b424:	f88d 3007 	strb.w	r3, [sp, #7]
 801b428:	f10d 0307 	add.w	r3, sp, #7
 801b42c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b478 <rcl_take_response+0x88>
 801b430:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b434:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b438:	f7fa ffc2 	bl	80163c0 <rmw_take_response>
 801b43c:	4605      	mov	r5, r0
 801b43e:	b9c8      	cbnz	r0, 801b474 <rcl_take_response+0x84>
 801b440:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b444:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b448:	2a00      	cmp	r2, #0
 801b44a:	bf08      	it	eq
 801b44c:	461d      	moveq	r5, r3
 801b44e:	f10d 0e18 	add.w	lr, sp, #24
 801b452:	46a4      	mov	ip, r4
 801b454:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b45c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b460:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b464:	4628      	mov	r0, r5
 801b466:	b00c      	add	sp, #48	; 0x30
 801b468:	bd70      	pop	{r4, r5, r6, pc}
 801b46a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b46e:	e7ee      	b.n	801b44e <rcl_take_response+0x5e>
 801b470:	250b      	movs	r5, #11
 801b472:	e7ec      	b.n	801b44e <rcl_take_response+0x5e>
 801b474:	2501      	movs	r5, #1
 801b476:	e7ea      	b.n	801b44e <rcl_take_response+0x5e>
	...

0801b480 <rcl_client_is_valid>:
 801b480:	b130      	cbz	r0, 801b490 <rcl_client_is_valid+0x10>
 801b482:	6800      	ldr	r0, [r0, #0]
 801b484:	b120      	cbz	r0, 801b490 <rcl_client_is_valid+0x10>
 801b486:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b48a:	3800      	subs	r0, #0
 801b48c:	bf18      	it	ne
 801b48e:	2001      	movne	r0, #1
 801b490:	4770      	bx	lr
 801b492:	bf00      	nop

0801b494 <rcl_convert_rmw_ret_to_rcl_ret>:
 801b494:	280b      	cmp	r0, #11
 801b496:	dc0d      	bgt.n	801b4b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b498:	2800      	cmp	r0, #0
 801b49a:	db09      	blt.n	801b4b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b49c:	280b      	cmp	r0, #11
 801b49e:	d807      	bhi.n	801b4b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b4a0:	e8df f000 	tbb	[pc, r0]
 801b4a4:	07060607 	.word	0x07060607
 801b4a8:	06060606 	.word	0x06060606
 801b4ac:	07070606 	.word	0x07070606
 801b4b0:	2001      	movs	r0, #1
 801b4b2:	4770      	bx	lr
 801b4b4:	28cb      	cmp	r0, #203	; 0xcb
 801b4b6:	bf18      	it	ne
 801b4b8:	2001      	movne	r0, #1
 801b4ba:	4770      	bx	lr

0801b4bc <rcl_get_zero_initialized_context>:
 801b4bc:	4a03      	ldr	r2, [pc, #12]	; (801b4cc <rcl_get_zero_initialized_context+0x10>)
 801b4be:	4603      	mov	r3, r0
 801b4c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b4c4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	4770      	bx	lr
 801b4cc:	080258c4 	.word	0x080258c4

0801b4d0 <rcl_context_is_valid>:
 801b4d0:	b118      	cbz	r0, 801b4da <rcl_context_is_valid+0xa>
 801b4d2:	6840      	ldr	r0, [r0, #4]
 801b4d4:	3800      	subs	r0, #0
 801b4d6:	bf18      	it	ne
 801b4d8:	2001      	movne	r0, #1
 801b4da:	4770      	bx	lr

0801b4dc <__cleanup_context>:
 801b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4e0:	4606      	mov	r6, r0
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	6800      	ldr	r0, [r0, #0]
 801b4e6:	6073      	str	r3, [r6, #4]
 801b4e8:	2800      	cmp	r0, #0
 801b4ea:	d049      	beq.n	801b580 <__cleanup_context+0xa4>
 801b4ec:	6947      	ldr	r7, [r0, #20]
 801b4ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b4f2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b4f6:	b137      	cbz	r7, 801b506 <__cleanup_context+0x2a>
 801b4f8:	3014      	adds	r0, #20
 801b4fa:	f7f8 f845 	bl	8013588 <rcl_init_options_fini>
 801b4fe:	4607      	mov	r7, r0
 801b500:	2800      	cmp	r0, #0
 801b502:	d144      	bne.n	801b58e <__cleanup_context+0xb2>
 801b504:	6830      	ldr	r0, [r6, #0]
 801b506:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b508:	b143      	cbz	r3, 801b51c <__cleanup_context+0x40>
 801b50a:	3028      	adds	r0, #40	; 0x28
 801b50c:	f7fa fb58 	bl	8015bc0 <rmw_context_fini>
 801b510:	b118      	cbz	r0, 801b51a <__cleanup_context+0x3e>
 801b512:	2f00      	cmp	r7, #0
 801b514:	d03e      	beq.n	801b594 <__cleanup_context+0xb8>
 801b516:	f7f9 fe17 	bl	8015148 <rcutils_reset_error>
 801b51a:	6830      	ldr	r0, [r6, #0]
 801b51c:	6a03      	ldr	r3, [r0, #32]
 801b51e:	b1db      	cbz	r3, 801b558 <__cleanup_context+0x7c>
 801b520:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b524:	2a01      	cmp	r2, #1
 801b526:	f17c 0100 	sbcs.w	r1, ip, #0
 801b52a:	db11      	blt.n	801b550 <__cleanup_context+0x74>
 801b52c:	2400      	movs	r4, #0
 801b52e:	4625      	mov	r5, r4
 801b530:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b534:	4649      	mov	r1, r9
 801b536:	b1b8      	cbz	r0, 801b568 <__cleanup_context+0x8c>
 801b538:	47c0      	blx	r8
 801b53a:	6833      	ldr	r3, [r6, #0]
 801b53c:	3401      	adds	r4, #1
 801b53e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b542:	f145 0500 	adc.w	r5, r5, #0
 801b546:	6a1b      	ldr	r3, [r3, #32]
 801b548:	4294      	cmp	r4, r2
 801b54a:	eb75 010c 	sbcs.w	r1, r5, ip
 801b54e:	dbef      	blt.n	801b530 <__cleanup_context+0x54>
 801b550:	4618      	mov	r0, r3
 801b552:	4649      	mov	r1, r9
 801b554:	47c0      	blx	r8
 801b556:	6830      	ldr	r0, [r6, #0]
 801b558:	4649      	mov	r1, r9
 801b55a:	47c0      	blx	r8
 801b55c:	2300      	movs	r3, #0
 801b55e:	4638      	mov	r0, r7
 801b560:	e9c6 3300 	strd	r3, r3, [r6]
 801b564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b568:	3401      	adds	r4, #1
 801b56a:	f145 0500 	adc.w	r5, r5, #0
 801b56e:	4294      	cmp	r4, r2
 801b570:	eb75 010c 	sbcs.w	r1, r5, ip
 801b574:	dbdc      	blt.n	801b530 <__cleanup_context+0x54>
 801b576:	4618      	mov	r0, r3
 801b578:	4649      	mov	r1, r9
 801b57a:	47c0      	blx	r8
 801b57c:	6830      	ldr	r0, [r6, #0]
 801b57e:	e7eb      	b.n	801b558 <__cleanup_context+0x7c>
 801b580:	4607      	mov	r7, r0
 801b582:	2300      	movs	r3, #0
 801b584:	4638      	mov	r0, r7
 801b586:	e9c6 3300 	strd	r3, r3, [r6]
 801b58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b58e:	f7f9 fddb 	bl	8015148 <rcutils_reset_error>
 801b592:	e7b7      	b.n	801b504 <__cleanup_context+0x28>
 801b594:	f7ff ff7e 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 801b598:	4607      	mov	r7, r0
 801b59a:	e7bc      	b.n	801b516 <__cleanup_context+0x3a>

0801b59c <rcl_get_zero_initialized_guard_condition>:
 801b59c:	4a03      	ldr	r2, [pc, #12]	; (801b5ac <rcl_get_zero_initialized_guard_condition+0x10>)
 801b59e:	4603      	mov	r3, r0
 801b5a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5a4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	4770      	bx	lr
 801b5ac:	080258cc 	.word	0x080258cc

0801b5b0 <rcl_guard_condition_init_from_rmw>:
 801b5b0:	b082      	sub	sp, #8
 801b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5b6:	b086      	sub	sp, #24
 801b5b8:	4604      	mov	r4, r0
 801b5ba:	460e      	mov	r6, r1
 801b5bc:	4615      	mov	r5, r2
 801b5be:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b5c2:	f10d 0e04 	add.w	lr, sp, #4
 801b5c6:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b5ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b5ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b5d2:	f8dc 3000 	ldr.w	r3, [ip]
 801b5d6:	a801      	add	r0, sp, #4
 801b5d8:	f8ce 3000 	str.w	r3, [lr]
 801b5dc:	f7f9 fd76 	bl	80150cc <rcutils_allocator_is_valid>
 801b5e0:	f080 0301 	eor.w	r3, r0, #1
 801b5e4:	b2db      	uxtb	r3, r3
 801b5e6:	bb3b      	cbnz	r3, 801b638 <rcl_guard_condition_init_from_rmw+0x88>
 801b5e8:	b334      	cbz	r4, 801b638 <rcl_guard_condition_init_from_rmw+0x88>
 801b5ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b5ee:	f1b8 0f00 	cmp.w	r8, #0
 801b5f2:	d11a      	bne.n	801b62a <rcl_guard_condition_init_from_rmw+0x7a>
 801b5f4:	b305      	cbz	r5, 801b638 <rcl_guard_condition_init_from_rmw+0x88>
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	f7ff ff6a 	bl	801b4d0 <rcl_context_is_valid>
 801b5fc:	b1f0      	cbz	r0, 801b63c <rcl_guard_condition_init_from_rmw+0x8c>
 801b5fe:	9b01      	ldr	r3, [sp, #4]
 801b600:	201c      	movs	r0, #28
 801b602:	9905      	ldr	r1, [sp, #20]
 801b604:	4798      	blx	r3
 801b606:	4607      	mov	r7, r0
 801b608:	6060      	str	r0, [r4, #4]
 801b60a:	b320      	cbz	r0, 801b656 <rcl_guard_condition_init_from_rmw+0xa6>
 801b60c:	b1c6      	cbz	r6, 801b640 <rcl_guard_condition_init_from_rmw+0x90>
 801b60e:	6006      	str	r6, [r0, #0]
 801b610:	f880 8004 	strb.w	r8, [r0, #4]
 801b614:	ac01      	add	r4, sp, #4
 801b616:	f107 0c08 	add.w	ip, r7, #8
 801b61a:	2500      	movs	r5, #0
 801b61c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b61e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b622:	6823      	ldr	r3, [r4, #0]
 801b624:	f8cc 3000 	str.w	r3, [ip]
 801b628:	e000      	b.n	801b62c <rcl_guard_condition_init_from_rmw+0x7c>
 801b62a:	2564      	movs	r5, #100	; 0x64
 801b62c:	4628      	mov	r0, r5
 801b62e:	b006      	add	sp, #24
 801b630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b634:	b002      	add	sp, #8
 801b636:	4770      	bx	lr
 801b638:	250b      	movs	r5, #11
 801b63a:	e7f7      	b.n	801b62c <rcl_guard_condition_init_from_rmw+0x7c>
 801b63c:	2565      	movs	r5, #101	; 0x65
 801b63e:	e7f5      	b.n	801b62c <rcl_guard_condition_init_from_rmw+0x7c>
 801b640:	6828      	ldr	r0, [r5, #0]
 801b642:	3028      	adds	r0, #40	; 0x28
 801b644:	f002 fd56 	bl	801e0f4 <rmw_create_guard_condition>
 801b648:	6038      	str	r0, [r7, #0]
 801b64a:	6867      	ldr	r7, [r4, #4]
 801b64c:	683e      	ldr	r6, [r7, #0]
 801b64e:	b126      	cbz	r6, 801b65a <rcl_guard_condition_init_from_rmw+0xaa>
 801b650:	2301      	movs	r3, #1
 801b652:	713b      	strb	r3, [r7, #4]
 801b654:	e7de      	b.n	801b614 <rcl_guard_condition_init_from_rmw+0x64>
 801b656:	250a      	movs	r5, #10
 801b658:	e7e8      	b.n	801b62c <rcl_guard_condition_init_from_rmw+0x7c>
 801b65a:	9b02      	ldr	r3, [sp, #8]
 801b65c:	4638      	mov	r0, r7
 801b65e:	9905      	ldr	r1, [sp, #20]
 801b660:	2501      	movs	r5, #1
 801b662:	4798      	blx	r3
 801b664:	6066      	str	r6, [r4, #4]
 801b666:	e7e1      	b.n	801b62c <rcl_guard_condition_init_from_rmw+0x7c>

0801b668 <rcl_guard_condition_fini>:
 801b668:	b570      	push	{r4, r5, r6, lr}
 801b66a:	b082      	sub	sp, #8
 801b66c:	b1f0      	cbz	r0, 801b6ac <rcl_guard_condition_fini+0x44>
 801b66e:	6843      	ldr	r3, [r0, #4]
 801b670:	4604      	mov	r4, r0
 801b672:	b163      	cbz	r3, 801b68e <rcl_guard_condition_fini+0x26>
 801b674:	6818      	ldr	r0, [r3, #0]
 801b676:	68de      	ldr	r6, [r3, #12]
 801b678:	6999      	ldr	r1, [r3, #24]
 801b67a:	b160      	cbz	r0, 801b696 <rcl_guard_condition_fini+0x2e>
 801b67c:	791d      	ldrb	r5, [r3, #4]
 801b67e:	b965      	cbnz	r5, 801b69a <rcl_guard_condition_fini+0x32>
 801b680:	4618      	mov	r0, r3
 801b682:	47b0      	blx	r6
 801b684:	2300      	movs	r3, #0
 801b686:	4628      	mov	r0, r5
 801b688:	6063      	str	r3, [r4, #4]
 801b68a:	b002      	add	sp, #8
 801b68c:	bd70      	pop	{r4, r5, r6, pc}
 801b68e:	461d      	mov	r5, r3
 801b690:	4628      	mov	r0, r5
 801b692:	b002      	add	sp, #8
 801b694:	bd70      	pop	{r4, r5, r6, pc}
 801b696:	4605      	mov	r5, r0
 801b698:	e7f2      	b.n	801b680 <rcl_guard_condition_fini+0x18>
 801b69a:	9101      	str	r1, [sp, #4]
 801b69c:	f002 fd40 	bl	801e120 <rmw_destroy_guard_condition>
 801b6a0:	1e05      	subs	r5, r0, #0
 801b6a2:	6863      	ldr	r3, [r4, #4]
 801b6a4:	9901      	ldr	r1, [sp, #4]
 801b6a6:	bf18      	it	ne
 801b6a8:	2501      	movne	r5, #1
 801b6aa:	e7e9      	b.n	801b680 <rcl_guard_condition_fini+0x18>
 801b6ac:	250b      	movs	r5, #11
 801b6ae:	4628      	mov	r0, r5
 801b6b0:	b002      	add	sp, #8
 801b6b2:	bd70      	pop	{r4, r5, r6, pc}

0801b6b4 <rcl_guard_condition_get_default_options>:
 801b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6b6:	b087      	sub	sp, #28
 801b6b8:	4606      	mov	r6, r0
 801b6ba:	4c0b      	ldr	r4, [pc, #44]	; (801b6e8 <rcl_guard_condition_get_default_options+0x34>)
 801b6bc:	4668      	mov	r0, sp
 801b6be:	f7f9 fcf7 	bl	80150b0 <rcutils_get_default_allocator>
 801b6c2:	46ee      	mov	lr, sp
 801b6c4:	46a4      	mov	ip, r4
 801b6c6:	4625      	mov	r5, r4
 801b6c8:	4634      	mov	r4, r6
 801b6ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b6ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b6d4:	f8de 7000 	ldr.w	r7, [lr]
 801b6d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b6da:	4630      	mov	r0, r6
 801b6dc:	f8cc 7000 	str.w	r7, [ip]
 801b6e0:	6027      	str	r7, [r4, #0]
 801b6e2:	b007      	add	sp, #28
 801b6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e6:	bf00      	nop
 801b6e8:	20016df0 	.word	0x20016df0

0801b6ec <rcl_guard_condition_get_rmw_handle>:
 801b6ec:	b110      	cbz	r0, 801b6f4 <rcl_guard_condition_get_rmw_handle+0x8>
 801b6ee:	6840      	ldr	r0, [r0, #4]
 801b6f0:	b100      	cbz	r0, 801b6f4 <rcl_guard_condition_get_rmw_handle+0x8>
 801b6f2:	6800      	ldr	r0, [r0, #0]
 801b6f4:	4770      	bx	lr
 801b6f6:	bf00      	nop

0801b6f8 <rcl_init>:
 801b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6fc:	1e05      	subs	r5, r0, #0
 801b6fe:	b09e      	sub	sp, #120	; 0x78
 801b700:	460e      	mov	r6, r1
 801b702:	4690      	mov	r8, r2
 801b704:	461f      	mov	r7, r3
 801b706:	f340 809f 	ble.w	801b848 <rcl_init+0x150>
 801b70a:	2900      	cmp	r1, #0
 801b70c:	f000 809f 	beq.w	801b84e <rcl_init+0x156>
 801b710:	f1a1 0e04 	sub.w	lr, r1, #4
 801b714:	f04f 0c00 	mov.w	ip, #0
 801b718:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801b71c:	f10c 0c01 	add.w	ip, ip, #1
 801b720:	2c00      	cmp	r4, #0
 801b722:	f000 8094 	beq.w	801b84e <rcl_init+0x156>
 801b726:	4565      	cmp	r5, ip
 801b728:	d1f6      	bne.n	801b718 <rcl_init+0x20>
 801b72a:	f1b8 0f00 	cmp.w	r8, #0
 801b72e:	f000 808e 	beq.w	801b84e <rcl_init+0x156>
 801b732:	f8d8 4000 	ldr.w	r4, [r8]
 801b736:	2c00      	cmp	r4, #0
 801b738:	f000 8089 	beq.w	801b84e <rcl_init+0x156>
 801b73c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801b740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b746:	6823      	ldr	r3, [r4, #0]
 801b748:	a819      	add	r0, sp, #100	; 0x64
 801b74a:	f8cc 3000 	str.w	r3, [ip]
 801b74e:	f7f9 fcbd 	bl	80150cc <rcutils_allocator_is_valid>
 801b752:	f080 0001 	eor.w	r0, r0, #1
 801b756:	b2c0      	uxtb	r0, r0
 801b758:	2800      	cmp	r0, #0
 801b75a:	d178      	bne.n	801b84e <rcl_init+0x156>
 801b75c:	2f00      	cmp	r7, #0
 801b75e:	d076      	beq.n	801b84e <rcl_init+0x156>
 801b760:	683b      	ldr	r3, [r7, #0]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d178      	bne.n	801b858 <rcl_init+0x160>
 801b766:	2178      	movs	r1, #120	; 0x78
 801b768:	2001      	movs	r0, #1
 801b76a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b76e:	4798      	blx	r3
 801b770:	4604      	mov	r4, r0
 801b772:	6038      	str	r0, [r7, #0]
 801b774:	2800      	cmp	r0, #0
 801b776:	f000 80b6 	beq.w	801b8e6 <rcl_init+0x1ee>
 801b77a:	a802      	add	r0, sp, #8
 801b77c:	f002 fa4c 	bl	801dc18 <rmw_get_zero_initialized_context>
 801b780:	a902      	add	r1, sp, #8
 801b782:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801b786:	2250      	movs	r2, #80	; 0x50
 801b788:	f005 fc01 	bl	8020f8e <memcpy>
 801b78c:	ac19      	add	r4, sp, #100	; 0x64
 801b78e:	f8d7 e000 	ldr.w	lr, [r7]
 801b792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b794:	46f4      	mov	ip, lr
 801b796:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b79a:	6823      	ldr	r3, [r4, #0]
 801b79c:	f10e 0114 	add.w	r1, lr, #20
 801b7a0:	4640      	mov	r0, r8
 801b7a2:	f8cc 3000 	str.w	r3, [ip]
 801b7a6:	f7f7 ff19 	bl	80135dc <rcl_init_options_copy>
 801b7aa:	4604      	mov	r4, r0
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	d144      	bne.n	801b83a <rcl_init+0x142>
 801b7b0:	f8d7 9000 	ldr.w	r9, [r7]
 801b7b4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801b7b8:	f8c9 0020 	str.w	r0, [r9, #32]
 801b7bc:	f8c9 5018 	str.w	r5, [r9, #24]
 801b7c0:	f8c9 801c 	str.w	r8, [r9, #28]
 801b7c4:	2d00      	cmp	r5, #0
 801b7c6:	d04e      	beq.n	801b866 <rcl_init+0x16e>
 801b7c8:	2e00      	cmp	r6, #0
 801b7ca:	d04c      	beq.n	801b866 <rcl_init+0x16e>
 801b7cc:	2104      	movs	r1, #4
 801b7ce:	4628      	mov	r0, r5
 801b7d0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b7d4:	4798      	blx	r3
 801b7d6:	f8c9 0020 	str.w	r0, [r9, #32]
 801b7da:	f8d7 9000 	ldr.w	r9, [r7]
 801b7de:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801b7e2:	46ca      	mov	sl, r9
 801b7e4:	b343      	cbz	r3, 801b838 <rcl_init+0x140>
 801b7e6:	2d01      	cmp	r5, #1
 801b7e8:	f178 0300 	sbcs.w	r3, r8, #0
 801b7ec:	db3b      	blt.n	801b866 <rcl_init+0x16e>
 801b7ee:	2400      	movs	r4, #0
 801b7f0:	3e04      	subs	r6, #4
 801b7f2:	46a1      	mov	r9, r4
 801b7f4:	e00b      	b.n	801b80e <rcl_init+0x116>
 801b7f6:	6831      	ldr	r1, [r6, #0]
 801b7f8:	f005 fbc9 	bl	8020f8e <memcpy>
 801b7fc:	3401      	adds	r4, #1
 801b7fe:	f149 0900 	adc.w	r9, r9, #0
 801b802:	45c8      	cmp	r8, r9
 801b804:	bf08      	it	eq
 801b806:	42a5      	cmpeq	r5, r4
 801b808:	d02b      	beq.n	801b862 <rcl_init+0x16a>
 801b80a:	f8d7 a000 	ldr.w	sl, [r7]
 801b80e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801b812:	f7e4 fd75 	bl	8000300 <strlen>
 801b816:	1c42      	adds	r2, r0, #1
 801b818:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b81a:	4610      	mov	r0, r2
 801b81c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b81e:	f8da a020 	ldr.w	sl, [sl, #32]
 801b822:	9201      	str	r2, [sp, #4]
 801b824:	4798      	blx	r3
 801b826:	683b      	ldr	r3, [r7, #0]
 801b828:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801b82c:	6a1b      	ldr	r3, [r3, #32]
 801b82e:	9a01      	ldr	r2, [sp, #4]
 801b830:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b834:	2800      	cmp	r0, #0
 801b836:	d1de      	bne.n	801b7f6 <rcl_init+0xfe>
 801b838:	240a      	movs	r4, #10
 801b83a:	4638      	mov	r0, r7
 801b83c:	f7ff fe4e 	bl	801b4dc <__cleanup_context>
 801b840:	4620      	mov	r0, r4
 801b842:	b01e      	add	sp, #120	; 0x78
 801b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b848:	2900      	cmp	r1, #0
 801b84a:	f43f af6e 	beq.w	801b72a <rcl_init+0x32>
 801b84e:	240b      	movs	r4, #11
 801b850:	4620      	mov	r0, r4
 801b852:	b01e      	add	sp, #120	; 0x78
 801b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b858:	2464      	movs	r4, #100	; 0x64
 801b85a:	4620      	mov	r0, r4
 801b85c:	b01e      	add	sp, #120	; 0x78
 801b85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b862:	f8d7 9000 	ldr.w	r9, [r7]
 801b866:	4926      	ldr	r1, [pc, #152]	; (801b900 <rcl_init+0x208>)
 801b868:	680b      	ldr	r3, [r1, #0]
 801b86a:	3301      	adds	r3, #1
 801b86c:	d036      	beq.n	801b8dc <rcl_init+0x1e4>
 801b86e:	461a      	mov	r2, r3
 801b870:	2400      	movs	r4, #0
 801b872:	600b      	str	r3, [r1, #0]
 801b874:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801b878:	607b      	str	r3, [r7, #4]
 801b87a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b87c:	3301      	adds	r3, #1
 801b87e:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801b882:	d034      	beq.n	801b8ee <rcl_init+0x1f6>
 801b884:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b888:	b93b      	cbnz	r3, 801b89a <rcl_init+0x1a2>
 801b88a:	3030      	adds	r0, #48	; 0x30
 801b88c:	f000 f83a 	bl	801b904 <rcl_get_localhost_only>
 801b890:	4604      	mov	r4, r0
 801b892:	2800      	cmp	r0, #0
 801b894:	d1d1      	bne.n	801b83a <rcl_init+0x142>
 801b896:	683b      	ldr	r3, [r7, #0]
 801b898:	6958      	ldr	r0, [r3, #20]
 801b89a:	aa18      	add	r2, sp, #96	; 0x60
 801b89c:	a917      	add	r1, sp, #92	; 0x5c
 801b89e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b8a0:	f000 fc38 	bl	801c114 <rcl_validate_enclave_name>
 801b8a4:	4604      	mov	r4, r0
 801b8a6:	2800      	cmp	r0, #0
 801b8a8:	d1c7      	bne.n	801b83a <rcl_init+0x142>
 801b8aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b8ac:	b9eb      	cbnz	r3, 801b8ea <rcl_init+0x1f2>
 801b8ae:	6839      	ldr	r1, [r7, #0]
 801b8b0:	694b      	ldr	r3, [r1, #20]
 801b8b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801b8b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b8b8:	f000 f9c8 	bl	801bc4c <rcl_get_security_options_from_environment>
 801b8bc:	4604      	mov	r4, r0
 801b8be:	2800      	cmp	r0, #0
 801b8c0:	d1bb      	bne.n	801b83a <rcl_init+0x142>
 801b8c2:	6839      	ldr	r1, [r7, #0]
 801b8c4:	6948      	ldr	r0, [r1, #20]
 801b8c6:	3128      	adds	r1, #40	; 0x28
 801b8c8:	3018      	adds	r0, #24
 801b8ca:	f7fa f843 	bl	8015954 <rmw_init>
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	2800      	cmp	r0, #0
 801b8d2:	d0bd      	beq.n	801b850 <rcl_init+0x158>
 801b8d4:	f7ff fdde 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 801b8d8:	4604      	mov	r4, r0
 801b8da:	e7ae      	b.n	801b83a <rcl_init+0x142>
 801b8dc:	2201      	movs	r2, #1
 801b8de:	461c      	mov	r4, r3
 801b8e0:	600a      	str	r2, [r1, #0]
 801b8e2:	4613      	mov	r3, r2
 801b8e4:	e7c6      	b.n	801b874 <rcl_init+0x17c>
 801b8e6:	240a      	movs	r4, #10
 801b8e8:	e7b2      	b.n	801b850 <rcl_init+0x158>
 801b8ea:	2401      	movs	r4, #1
 801b8ec:	e7a5      	b.n	801b83a <rcl_init+0x142>
 801b8ee:	3024      	adds	r0, #36	; 0x24
 801b8f0:	f003 fbc6 	bl	801f080 <rcl_get_default_domain_id>
 801b8f4:	4604      	mov	r4, r0
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	d19f      	bne.n	801b83a <rcl_init+0x142>
 801b8fa:	683b      	ldr	r3, [r7, #0]
 801b8fc:	6958      	ldr	r0, [r3, #20]
 801b8fe:	e7c1      	b.n	801b884 <rcl_init+0x18c>
 801b900:	20016e04 	.word	0x20016e04

0801b904 <rcl_get_localhost_only>:
 801b904:	b510      	push	{r4, lr}
 801b906:	2300      	movs	r3, #0
 801b908:	b082      	sub	sp, #8
 801b90a:	9301      	str	r3, [sp, #4]
 801b90c:	b1b8      	cbz	r0, 801b93e <rcl_get_localhost_only+0x3a>
 801b90e:	4604      	mov	r4, r0
 801b910:	a901      	add	r1, sp, #4
 801b912:	480c      	ldr	r0, [pc, #48]	; (801b944 <rcl_get_localhost_only+0x40>)
 801b914:	f7f9 fbe8 	bl	80150e8 <rcutils_get_env>
 801b918:	b110      	cbz	r0, 801b920 <rcl_get_localhost_only+0x1c>
 801b91a:	2001      	movs	r0, #1
 801b91c:	b002      	add	sp, #8
 801b91e:	bd10      	pop	{r4, pc}
 801b920:	9b01      	ldr	r3, [sp, #4]
 801b922:	b113      	cbz	r3, 801b92a <rcl_get_localhost_only+0x26>
 801b924:	781a      	ldrb	r2, [r3, #0]
 801b926:	2a31      	cmp	r2, #49	; 0x31
 801b928:	d004      	beq.n	801b934 <rcl_get_localhost_only+0x30>
 801b92a:	2302      	movs	r3, #2
 801b92c:	2000      	movs	r0, #0
 801b92e:	7023      	strb	r3, [r4, #0]
 801b930:	b002      	add	sp, #8
 801b932:	bd10      	pop	{r4, pc}
 801b934:	785b      	ldrb	r3, [r3, #1]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d1f7      	bne.n	801b92a <rcl_get_localhost_only+0x26>
 801b93a:	2301      	movs	r3, #1
 801b93c:	e7f6      	b.n	801b92c <rcl_get_localhost_only+0x28>
 801b93e:	200b      	movs	r0, #11
 801b940:	b002      	add	sp, #8
 801b942:	bd10      	pop	{r4, pc}
 801b944:	080258d4 	.word	0x080258d4

0801b948 <rcl_node_resolve_name>:
 801b948:	b082      	sub	sp, #8
 801b94a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b94e:	b091      	sub	sp, #68	; 0x44
 801b950:	ac1a      	add	r4, sp, #104	; 0x68
 801b952:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801b956:	e884 000c 	stmia.w	r4, {r2, r3}
 801b95a:	2800      	cmp	r0, #0
 801b95c:	d03d      	beq.n	801b9da <rcl_node_resolve_name+0x92>
 801b95e:	460c      	mov	r4, r1
 801b960:	4605      	mov	r5, r0
 801b962:	f7f8 f81d 	bl	80139a0 <rcl_node_get_options>
 801b966:	2800      	cmp	r0, #0
 801b968:	d03a      	beq.n	801b9e0 <rcl_node_resolve_name+0x98>
 801b96a:	4628      	mov	r0, r5
 801b96c:	f7f8 f808 	bl	8013980 <rcl_node_get_name>
 801b970:	4606      	mov	r6, r0
 801b972:	4628      	mov	r0, r5
 801b974:	ad0b      	add	r5, sp, #44	; 0x2c
 801b976:	f7f8 f80b 	bl	8013990 <rcl_node_get_namespace>
 801b97a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b97e:	4607      	mov	r7, r0
 801b980:	46ac      	mov	ip, r5
 801b982:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b986:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b98a:	f8de 3000 	ldr.w	r3, [lr]
 801b98e:	f8cc 3000 	str.w	r3, [ip]
 801b992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b994:	b30b      	cbz	r3, 801b9da <rcl_node_resolve_name+0x92>
 801b996:	4689      	mov	r9, r1
 801b998:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b99c:	f002 f80e 	bl	801d9bc <rcutils_get_zero_initialized_string_map>
 801b9a0:	ab10      	add	r3, sp, #64	; 0x40
 801b9a2:	9008      	str	r0, [sp, #32]
 801b9a4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b9a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b9ac:	2100      	movs	r1, #0
 801b9ae:	a808      	add	r0, sp, #32
 801b9b0:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b9b4:	f002 f878 	bl	801daa8 <rcutils_string_map_init>
 801b9b8:	4683      	mov	fp, r0
 801b9ba:	b1a0      	cbz	r0, 801b9e6 <rcl_node_resolve_name+0x9e>
 801b9bc:	f7f9 fbac 	bl	8015118 <rcutils_get_error_string>
 801b9c0:	f7f9 fbc2 	bl	8015148 <rcutils_reset_error>
 801b9c4:	f1bb 0f0a 	cmp.w	fp, #10
 801b9c8:	bf18      	it	ne
 801b9ca:	f04f 0b01 	movne.w	fp, #1
 801b9ce:	4658      	mov	r0, fp
 801b9d0:	b011      	add	sp, #68	; 0x44
 801b9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d6:	b002      	add	sp, #8
 801b9d8:	4770      	bx	lr
 801b9da:	f04f 0b0b 	mov.w	fp, #11
 801b9de:	e7f6      	b.n	801b9ce <rcl_node_resolve_name+0x86>
 801b9e0:	f04f 0b01 	mov.w	fp, #1
 801b9e4:	e7f3      	b.n	801b9ce <rcl_node_resolve_name+0x86>
 801b9e6:	9009      	str	r0, [sp, #36]	; 0x24
 801b9e8:	9007      	str	r0, [sp, #28]
 801b9ea:	a808      	add	r0, sp, #32
 801b9ec:	f003 fcdc 	bl	801f3a8 <rcl_get_default_topic_name_substitutions>
 801b9f0:	4683      	mov	fp, r0
 801b9f2:	b180      	cbz	r0, 801ba16 <rcl_node_resolve_name+0xce>
 801b9f4:	280a      	cmp	r0, #10
 801b9f6:	a808      	add	r0, sp, #32
 801b9f8:	bf18      	it	ne
 801b9fa:	f04f 0b01 	movne.w	fp, #1
 801b9fe:	f002 f893 	bl	801db28 <rcutils_string_map_fini>
 801ba02:	4604      	mov	r4, r0
 801ba04:	2800      	cmp	r0, #0
 801ba06:	d15b      	bne.n	801bac0 <rcl_node_resolve_name+0x178>
 801ba08:	4651      	mov	r1, sl
 801ba0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba0c:	47c8      	blx	r9
 801ba0e:	4651      	mov	r1, sl
 801ba10:	4620      	mov	r0, r4
 801ba12:	47c8      	blx	r9
 801ba14:	e7db      	b.n	801b9ce <rcl_node_resolve_name+0x86>
 801ba16:	ab09      	add	r3, sp, #36	; 0x24
 801ba18:	46ec      	mov	ip, sp
 801ba1a:	9305      	str	r3, [sp, #20]
 801ba1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba22:	682b      	ldr	r3, [r5, #0]
 801ba24:	463a      	mov	r2, r7
 801ba26:	4631      	mov	r1, r6
 801ba28:	4620      	mov	r0, r4
 801ba2a:	f8cc 3000 	str.w	r3, [ip]
 801ba2e:	ab08      	add	r3, sp, #32
 801ba30:	f003 fb5a 	bl	801f0e8 <rcl_expand_topic_name>
 801ba34:	4683      	mov	fp, r0
 801ba36:	b9d8      	cbnz	r0, 801ba70 <rcl_node_resolve_name+0x128>
 801ba38:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ba3a:	4602      	mov	r2, r0
 801ba3c:	9009      	str	r0, [sp, #36]	; 0x24
 801ba3e:	a90a      	add	r1, sp, #40	; 0x28
 801ba40:	4620      	mov	r0, r4
 801ba42:	f002 f985 	bl	801dd50 <rmw_validate_full_topic_name>
 801ba46:	bb50      	cbnz	r0, 801ba9e <rcl_node_resolve_name+0x156>
 801ba48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ba4a:	2d00      	cmp	r5, #0
 801ba4c:	d140      	bne.n	801bad0 <rcl_node_resolve_name+0x188>
 801ba4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba50:	a808      	add	r0, sp, #32
 801ba52:	601c      	str	r4, [r3, #0]
 801ba54:	f002 f868 	bl	801db28 <rcutils_string_map_fini>
 801ba58:	4683      	mov	fp, r0
 801ba5a:	2800      	cmp	r0, #0
 801ba5c:	d043      	beq.n	801bae6 <rcl_node_resolve_name+0x19e>
 801ba5e:	f7f9 fb5b 	bl	8015118 <rcutils_get_error_string>
 801ba62:	46a8      	mov	r8, r5
 801ba64:	f04f 0b01 	mov.w	fp, #1
 801ba68:	462c      	mov	r4, r5
 801ba6a:	f7f9 fb6d 	bl	8015148 <rcutils_reset_error>
 801ba6e:	e00a      	b.n	801ba86 <rcl_node_resolve_name+0x13e>
 801ba70:	2867      	cmp	r0, #103	; 0x67
 801ba72:	bf14      	ite	ne
 801ba74:	f04f 0800 	movne.w	r8, #0
 801ba78:	f008 0801 	andeq.w	r8, r8, #1
 801ba7c:	9c07      	ldr	r4, [sp, #28]
 801ba7e:	a808      	add	r0, sp, #32
 801ba80:	f002 f852 	bl	801db28 <rcutils_string_map_fini>
 801ba84:	bb50      	cbnz	r0, 801badc <rcl_node_resolve_name+0x194>
 801ba86:	4651      	mov	r1, sl
 801ba88:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba8a:	47c8      	blx	r9
 801ba8c:	4651      	mov	r1, sl
 801ba8e:	4620      	mov	r0, r4
 801ba90:	47c8      	blx	r9
 801ba92:	f1b8 0f00 	cmp.w	r8, #0
 801ba96:	bf18      	it	ne
 801ba98:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801ba9c:	e797      	b.n	801b9ce <rcl_node_resolve_name+0x86>
 801ba9e:	f7f9 fb3b 	bl	8015118 <rcutils_get_error_string>
 801baa2:	f7f9 fb51 	bl	8015148 <rcutils_reset_error>
 801baa6:	a808      	add	r0, sp, #32
 801baa8:	f002 f83e 	bl	801db28 <rcutils_string_map_fini>
 801baac:	b998      	cbnz	r0, 801bad6 <rcl_node_resolve_name+0x18e>
 801baae:	4651      	mov	r1, sl
 801bab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bab2:	47c8      	blx	r9
 801bab4:	4651      	mov	r1, sl
 801bab6:	4620      	mov	r0, r4
 801bab8:	f04f 0b01 	mov.w	fp, #1
 801babc:	47c8      	blx	r9
 801babe:	e786      	b.n	801b9ce <rcl_node_resolve_name+0x86>
 801bac0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801bac4:	f7f9 fb28 	bl	8015118 <rcutils_get_error_string>
 801bac8:	f7f9 fb3e 	bl	8015148 <rcutils_reset_error>
 801bacc:	4644      	mov	r4, r8
 801bace:	e7da      	b.n	801ba86 <rcl_node_resolve_name+0x13e>
 801bad0:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801bad4:	e7d3      	b.n	801ba7e <rcl_node_resolve_name+0x136>
 801bad6:	46d8      	mov	r8, fp
 801bad8:	f04f 0b01 	mov.w	fp, #1
 801badc:	f7f9 fb1c 	bl	8015118 <rcutils_get_error_string>
 801bae0:	f7f9 fb32 	bl	8015148 <rcutils_reset_error>
 801bae4:	e7cf      	b.n	801ba86 <rcl_node_resolve_name+0x13e>
 801bae6:	4651      	mov	r1, sl
 801bae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801baea:	47c8      	blx	r9
 801baec:	4651      	mov	r1, sl
 801baee:	4658      	mov	r0, fp
 801baf0:	47c8      	blx	r9
 801baf2:	e76c      	b.n	801b9ce <rcl_node_resolve_name+0x86>

0801baf4 <exact_match_lookup>:
 801baf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baf6:	f102 0708 	add.w	r7, r2, #8
 801bafa:	460b      	mov	r3, r1
 801bafc:	b085      	sub	sp, #20
 801bafe:	4614      	mov	r4, r2
 801bb00:	4606      	mov	r6, r0
 801bb02:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bb06:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	4919      	ldr	r1, [pc, #100]	; (801bb74 <exact_match_lookup+0x80>)
 801bb0e:	e894 000c 	ldmia.w	r4, {r2, r3}
 801bb12:	f001 ff1b 	bl	801d94c <rcutils_join_path>
 801bb16:	7833      	ldrb	r3, [r6, #0]
 801bb18:	4605      	mov	r5, r0
 801bb1a:	2b2f      	cmp	r3, #47	; 0x2f
 801bb1c:	d023      	beq.n	801bb66 <exact_match_lookup+0x72>
 801bb1e:	f104 030c 	add.w	r3, r4, #12
 801bb22:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bb26:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bb2a:	1c70      	adds	r0, r6, #1
 801bb2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bb30:	f001 ff12 	bl	801d958 <rcutils_to_native_path>
 801bb34:	4606      	mov	r6, r0
 801bb36:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bb3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bb3e:	4631      	mov	r1, r6
 801bb40:	4628      	mov	r0, r5
 801bb42:	e894 000c 	ldmia.w	r4, {r2, r3}
 801bb46:	f001 ff01 	bl	801d94c <rcutils_join_path>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	6862      	ldr	r2, [r4, #4]
 801bb50:	461e      	mov	r6, r3
 801bb52:	6921      	ldr	r1, [r4, #16]
 801bb54:	4790      	blx	r2
 801bb56:	4628      	mov	r0, r5
 801bb58:	4635      	mov	r5, r6
 801bb5a:	6863      	ldr	r3, [r4, #4]
 801bb5c:	6921      	ldr	r1, [r4, #16]
 801bb5e:	4798      	blx	r3
 801bb60:	4628      	mov	r0, r5
 801bb62:	b005      	add	sp, #20
 801bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb66:	7873      	ldrb	r3, [r6, #1]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d1d8      	bne.n	801bb1e <exact_match_lookup+0x2a>
 801bb6c:	4628      	mov	r0, r5
 801bb6e:	b005      	add	sp, #20
 801bb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb72:	bf00      	nop
 801bb74:	08025924 	.word	0x08025924

0801bb78 <rcl_get_secure_root>:
 801bb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb7c:	b085      	sub	sp, #20
 801bb7e:	b168      	cbz	r0, 801bb9c <rcl_get_secure_root+0x24>
 801bb80:	4607      	mov	r7, r0
 801bb82:	4608      	mov	r0, r1
 801bb84:	460c      	mov	r4, r1
 801bb86:	f7f9 faa1 	bl	80150cc <rcutils_allocator_is_valid>
 801bb8a:	b138      	cbz	r0, 801bb9c <rcl_get_secure_root+0x24>
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	482d      	ldr	r0, [pc, #180]	; (801bc44 <rcl_get_secure_root+0xcc>)
 801bb90:	a903      	add	r1, sp, #12
 801bb92:	9303      	str	r3, [sp, #12]
 801bb94:	f7f9 faa8 	bl	80150e8 <rcutils_get_env>
 801bb98:	4605      	mov	r5, r0
 801bb9a:	b120      	cbz	r0, 801bba6 <rcl_get_secure_root+0x2e>
 801bb9c:	2500      	movs	r5, #0
 801bb9e:	4628      	mov	r0, r5
 801bba0:	b005      	add	sp, #20
 801bba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bba6:	9b03      	ldr	r3, [sp, #12]
 801bba8:	781a      	ldrb	r2, [r3, #0]
 801bbaa:	2a00      	cmp	r2, #0
 801bbac:	d0f6      	beq.n	801bb9c <rcl_get_secure_root+0x24>
 801bbae:	f104 090c 	add.w	r9, r4, #12
 801bbb2:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bbb6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bbba:	4618      	mov	r0, r3
 801bbbc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bbc0:	f7f9 fc18 	bl	80153f4 <rcutils_strdup>
 801bbc4:	4680      	mov	r8, r0
 801bbc6:	2800      	cmp	r0, #0
 801bbc8:	d0e8      	beq.n	801bb9c <rcl_get_secure_root+0x24>
 801bbca:	a903      	add	r1, sp, #12
 801bbcc:	481e      	ldr	r0, [pc, #120]	; (801bc48 <rcl_get_secure_root+0xd0>)
 801bbce:	9503      	str	r5, [sp, #12]
 801bbd0:	f7f9 fa8a 	bl	80150e8 <rcutils_get_env>
 801bbd4:	b160      	cbz	r0, 801bbf0 <rcl_get_secure_root+0x78>
 801bbd6:	2600      	movs	r6, #0
 801bbd8:	4630      	mov	r0, r6
 801bbda:	6863      	ldr	r3, [r4, #4]
 801bbdc:	6921      	ldr	r1, [r4, #16]
 801bbde:	4798      	blx	r3
 801bbe0:	4640      	mov	r0, r8
 801bbe2:	6863      	ldr	r3, [r4, #4]
 801bbe4:	6921      	ldr	r1, [r4, #16]
 801bbe6:	4798      	blx	r3
 801bbe8:	4628      	mov	r0, r5
 801bbea:	b005      	add	sp, #20
 801bbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bbf0:	9b03      	ldr	r3, [sp, #12]
 801bbf2:	781e      	ldrb	r6, [r3, #0]
 801bbf4:	b1f6      	cbz	r6, 801bc34 <rcl_get_secure_root+0xbc>
 801bbf6:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bbfa:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bc04:	f7f9 fbf6 	bl	80153f4 <rcutils_strdup>
 801bc08:	4606      	mov	r6, r0
 801bc0a:	2800      	cmp	r0, #0
 801bc0c:	d0e3      	beq.n	801bbd6 <rcl_get_secure_root+0x5e>
 801bc0e:	4622      	mov	r2, r4
 801bc10:	4641      	mov	r1, r8
 801bc12:	f7ff ff6f 	bl	801baf4 <exact_match_lookup>
 801bc16:	4605      	mov	r5, r0
 801bc18:	2d00      	cmp	r5, #0
 801bc1a:	d0dd      	beq.n	801bbd8 <rcl_get_secure_root+0x60>
 801bc1c:	4628      	mov	r0, r5
 801bc1e:	f001 fe93 	bl	801d948 <rcutils_is_directory>
 801bc22:	4603      	mov	r3, r0
 801bc24:	2800      	cmp	r0, #0
 801bc26:	d1d7      	bne.n	801bbd8 <rcl_get_secure_root+0x60>
 801bc28:	4628      	mov	r0, r5
 801bc2a:	6921      	ldr	r1, [r4, #16]
 801bc2c:	461d      	mov	r5, r3
 801bc2e:	6863      	ldr	r3, [r4, #4]
 801bc30:	4798      	blx	r3
 801bc32:	e7d1      	b.n	801bbd8 <rcl_get_secure_root+0x60>
 801bc34:	4622      	mov	r2, r4
 801bc36:	4638      	mov	r0, r7
 801bc38:	4641      	mov	r1, r8
 801bc3a:	f7ff ff5b 	bl	801baf4 <exact_match_lookup>
 801bc3e:	4605      	mov	r5, r0
 801bc40:	e7ea      	b.n	801bc18 <rcl_get_secure_root+0xa0>
 801bc42:	bf00      	nop
 801bc44:	08025930 	.word	0x08025930
 801bc48:	08025948 	.word	0x08025948

0801bc4c <rcl_get_security_options_from_environment>:
 801bc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc50:	b082      	sub	sp, #8
 801bc52:	2300      	movs	r3, #0
 801bc54:	4606      	mov	r6, r0
 801bc56:	460f      	mov	r7, r1
 801bc58:	4821      	ldr	r0, [pc, #132]	; (801bce0 <rcl_get_security_options_from_environment+0x94>)
 801bc5a:	a901      	add	r1, sp, #4
 801bc5c:	4690      	mov	r8, r2
 801bc5e:	9301      	str	r3, [sp, #4]
 801bc60:	f7f9 fa42 	bl	80150e8 <rcutils_get_env>
 801bc64:	b120      	cbz	r0, 801bc70 <rcl_get_security_options_from_environment+0x24>
 801bc66:	2501      	movs	r5, #1
 801bc68:	4628      	mov	r0, r5
 801bc6a:	b002      	add	sp, #8
 801bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc70:	4604      	mov	r4, r0
 801bc72:	491c      	ldr	r1, [pc, #112]	; (801bce4 <rcl_get_security_options_from_environment+0x98>)
 801bc74:	9801      	ldr	r0, [sp, #4]
 801bc76:	f7e4 fae3 	bl	8000240 <strcmp>
 801bc7a:	4605      	mov	r5, r0
 801bc7c:	b9f0      	cbnz	r0, 801bcbc <rcl_get_security_options_from_environment+0x70>
 801bc7e:	9001      	str	r0, [sp, #4]
 801bc80:	f1b8 0f00 	cmp.w	r8, #0
 801bc84:	d021      	beq.n	801bcca <rcl_get_security_options_from_environment+0x7e>
 801bc86:	a901      	add	r1, sp, #4
 801bc88:	4817      	ldr	r0, [pc, #92]	; (801bce8 <rcl_get_security_options_from_environment+0x9c>)
 801bc8a:	f7f9 fa2d 	bl	80150e8 <rcutils_get_env>
 801bc8e:	2800      	cmp	r0, #0
 801bc90:	d1e9      	bne.n	801bc66 <rcl_get_security_options_from_environment+0x1a>
 801bc92:	4916      	ldr	r1, [pc, #88]	; (801bcec <rcl_get_security_options_from_environment+0xa0>)
 801bc94:	9801      	ldr	r0, [sp, #4]
 801bc96:	f7e4 fad3 	bl	8000240 <strcmp>
 801bc9a:	4603      	mov	r3, r0
 801bc9c:	4639      	mov	r1, r7
 801bc9e:	4630      	mov	r0, r6
 801bca0:	fab3 f383 	clz	r3, r3
 801bca4:	095b      	lsrs	r3, r3, #5
 801bca6:	f888 3000 	strb.w	r3, [r8]
 801bcaa:	f7ff ff65 	bl	801bb78 <rcl_get_secure_root>
 801bcae:	b170      	cbz	r0, 801bcce <rcl_get_security_options_from_environment+0x82>
 801bcb0:	f8c8 0004 	str.w	r0, [r8, #4]
 801bcb4:	4628      	mov	r0, r5
 801bcb6:	b002      	add	sp, #8
 801bcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcbc:	4625      	mov	r5, r4
 801bcbe:	f888 4000 	strb.w	r4, [r8]
 801bcc2:	4628      	mov	r0, r5
 801bcc4:	b002      	add	sp, #8
 801bcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcca:	250b      	movs	r5, #11
 801bccc:	e7cc      	b.n	801bc68 <rcl_get_security_options_from_environment+0x1c>
 801bcce:	f898 5000 	ldrb.w	r5, [r8]
 801bcd2:	f1a5 0501 	sub.w	r5, r5, #1
 801bcd6:	fab5 f585 	clz	r5, r5
 801bcda:	096d      	lsrs	r5, r5, #5
 801bcdc:	e7c4      	b.n	801bc68 <rcl_get_security_options_from_environment+0x1c>
 801bcde:	bf00      	nop
 801bce0:	080258e8 	.word	0x080258e8
 801bce4:	080258fc 	.word	0x080258fc
 801bce8:	08025904 	.word	0x08025904
 801bcec:	0802591c 	.word	0x0802591c

0801bcf0 <rcl_get_system_time>:
 801bcf0:	4608      	mov	r0, r1
 801bcf2:	f7f9 bbbd 	b.w	8015470 <rcutils_system_time_now>
 801bcf6:	bf00      	nop

0801bcf8 <rcl_get_steady_time>:
 801bcf8:	4608      	mov	r0, r1
 801bcfa:	f7f9 bbdf 	b.w	80154bc <rcutils_steady_time_now>
 801bcfe:	bf00      	nop

0801bd00 <rcl_get_ros_time>:
 801bd00:	7a03      	ldrb	r3, [r0, #8]
 801bd02:	b510      	push	{r4, lr}
 801bd04:	460c      	mov	r4, r1
 801bd06:	b143      	cbz	r3, 801bd1a <rcl_get_ros_time+0x1a>
 801bd08:	2105      	movs	r1, #5
 801bd0a:	f001 fd79 	bl	801d800 <__atomic_load_8>
 801bd0e:	4602      	mov	r2, r0
 801bd10:	460b      	mov	r3, r1
 801bd12:	2000      	movs	r0, #0
 801bd14:	e9c4 2300 	strd	r2, r3, [r4]
 801bd18:	bd10      	pop	{r4, pc}
 801bd1a:	4608      	mov	r0, r1
 801bd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd20:	f7f9 bba6 	b.w	8015470 <rcutils_system_time_now>

0801bd24 <rcl_clock_init>:
 801bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd26:	4605      	mov	r5, r0
 801bd28:	4610      	mov	r0, r2
 801bd2a:	4614      	mov	r4, r2
 801bd2c:	460e      	mov	r6, r1
 801bd2e:	f7f9 f9cd 	bl	80150cc <rcutils_allocator_is_valid>
 801bd32:	b128      	cbz	r0, 801bd40 <rcl_clock_init+0x1c>
 801bd34:	2d03      	cmp	r5, #3
 801bd36:	d803      	bhi.n	801bd40 <rcl_clock_init+0x1c>
 801bd38:	e8df f005 	tbb	[pc, r5]
 801bd3c:	0659301f 	.word	0x0659301f
 801bd40:	f04f 0c0b 	mov.w	ip, #11
 801bd44:	4660      	mov	r0, ip
 801bd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd48:	2c00      	cmp	r4, #0
 801bd4a:	d0f9      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bd4c:	fab6 f386 	clz	r3, r6
 801bd50:	095b      	lsrs	r3, r3, #5
 801bd52:	2e00      	cmp	r6, #0
 801bd54:	d0f4      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bd56:	6133      	str	r3, [r6, #16]
 801bd58:	469c      	mov	ip, r3
 801bd5a:	f106 0514 	add.w	r5, r6, #20
 801bd5e:	4f32      	ldr	r7, [pc, #200]	; (801be28 <rcl_clock_init+0x104>)
 801bd60:	f04f 0e03 	mov.w	lr, #3
 801bd64:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd6c:	6823      	ldr	r3, [r4, #0]
 801bd6e:	4660      	mov	r0, ip
 801bd70:	602b      	str	r3, [r5, #0]
 801bd72:	60f7      	str	r7, [r6, #12]
 801bd74:	f886 e000 	strb.w	lr, [r6]
 801bd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd7a:	2e00      	cmp	r6, #0
 801bd7c:	d0e0      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bd7e:	2300      	movs	r3, #0
 801bd80:	f106 0514 	add.w	r5, r6, #20
 801bd84:	7033      	strb	r3, [r6, #0]
 801bd86:	469c      	mov	ip, r3
 801bd88:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd8c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bd90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd94:	6823      	ldr	r3, [r4, #0]
 801bd96:	4660      	mov	r0, ip
 801bd98:	602b      	str	r3, [r5, #0]
 801bd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd9c:	2c00      	cmp	r4, #0
 801bd9e:	d0cf      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bda0:	fab6 f586 	clz	r5, r6
 801bda4:	096d      	lsrs	r5, r5, #5
 801bda6:	2e00      	cmp	r6, #0
 801bda8:	d0ca      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bdaa:	46a6      	mov	lr, r4
 801bdac:	7035      	strb	r5, [r6, #0]
 801bdae:	f106 0c14 	add.w	ip, r6, #20
 801bdb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bdb6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bdba:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bdbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bdc2:	f8de 3000 	ldr.w	r3, [lr]
 801bdc6:	2010      	movs	r0, #16
 801bdc8:	f8cc 3000 	str.w	r3, [ip]
 801bdcc:	6823      	ldr	r3, [r4, #0]
 801bdce:	6921      	ldr	r1, [r4, #16]
 801bdd0:	4798      	blx	r3
 801bdd2:	6130      	str	r0, [r6, #16]
 801bdd4:	b320      	cbz	r0, 801be20 <rcl_clock_init+0xfc>
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	2300      	movs	r3, #0
 801bdda:	46ac      	mov	ip, r5
 801bddc:	7205      	strb	r5, [r0, #8]
 801bdde:	e9c0 2300 	strd	r2, r3, [r0]
 801bde2:	4a12      	ldr	r2, [pc, #72]	; (801be2c <rcl_clock_init+0x108>)
 801bde4:	2301      	movs	r3, #1
 801bde6:	4660      	mov	r0, ip
 801bde8:	60f2      	str	r2, [r6, #12]
 801bdea:	7033      	strb	r3, [r6, #0]
 801bdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdee:	2c00      	cmp	r4, #0
 801bdf0:	d0a6      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bdf2:	fab6 f386 	clz	r3, r6
 801bdf6:	095b      	lsrs	r3, r3, #5
 801bdf8:	2e00      	cmp	r6, #0
 801bdfa:	d0a1      	beq.n	801bd40 <rcl_clock_init+0x1c>
 801bdfc:	6133      	str	r3, [r6, #16]
 801bdfe:	469c      	mov	ip, r3
 801be00:	f106 0514 	add.w	r5, r6, #20
 801be04:	f8df e028 	ldr.w	lr, [pc, #40]	; 801be30 <rcl_clock_init+0x10c>
 801be08:	2702      	movs	r7, #2
 801be0a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801be0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801be12:	6823      	ldr	r3, [r4, #0]
 801be14:	4660      	mov	r0, ip
 801be16:	602b      	str	r3, [r5, #0]
 801be18:	f8c6 e00c 	str.w	lr, [r6, #12]
 801be1c:	7037      	strb	r7, [r6, #0]
 801be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be20:	f04f 0c0a 	mov.w	ip, #10
 801be24:	e78e      	b.n	801bd44 <rcl_clock_init+0x20>
 801be26:	bf00      	nop
 801be28:	0801bcf9 	.word	0x0801bcf9
 801be2c:	0801bd01 	.word	0x0801bd01
 801be30:	0801bcf1 	.word	0x0801bcf1

0801be34 <rcl_clock_get_now>:
 801be34:	b140      	cbz	r0, 801be48 <rcl_clock_get_now+0x14>
 801be36:	b139      	cbz	r1, 801be48 <rcl_clock_get_now+0x14>
 801be38:	7803      	ldrb	r3, [r0, #0]
 801be3a:	b11b      	cbz	r3, 801be44 <rcl_clock_get_now+0x10>
 801be3c:	68c3      	ldr	r3, [r0, #12]
 801be3e:	b10b      	cbz	r3, 801be44 <rcl_clock_get_now+0x10>
 801be40:	6900      	ldr	r0, [r0, #16]
 801be42:	4718      	bx	r3
 801be44:	2001      	movs	r0, #1
 801be46:	4770      	bx	lr
 801be48:	200b      	movs	r0, #11
 801be4a:	4770      	bx	lr

0801be4c <rcl_timer_call>:
 801be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be50:	b087      	sub	sp, #28
 801be52:	2800      	cmp	r0, #0
 801be54:	d06c      	beq.n	801bf30 <rcl_timer_call+0xe4>
 801be56:	6803      	ldr	r3, [r0, #0]
 801be58:	4604      	mov	r4, r0
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d062      	beq.n	801bf24 <rcl_timer_call+0xd8>
 801be5e:	f3bf 8f5b 	dmb	ish
 801be62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801be66:	f3bf 8f5b 	dmb	ish
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d14f      	bne.n	801bf0e <rcl_timer_call+0xc2>
 801be6e:	6803      	ldr	r3, [r0, #0]
 801be70:	a904      	add	r1, sp, #16
 801be72:	6818      	ldr	r0, [r3, #0]
 801be74:	f7ff ffde 	bl	801be34 <rcl_clock_get_now>
 801be78:	4605      	mov	r5, r0
 801be7a:	2800      	cmp	r0, #0
 801be7c:	d149      	bne.n	801bf12 <rcl_timer_call+0xc6>
 801be7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be82:	2b00      	cmp	r3, #0
 801be84:	db49      	blt.n	801bf1a <rcl_timer_call+0xce>
 801be86:	2605      	movs	r6, #5
 801be88:	6820      	ldr	r0, [r4, #0]
 801be8a:	9600      	str	r6, [sp, #0]
 801be8c:	3020      	adds	r0, #32
 801be8e:	f001 fd23 	bl	801d8d8 <__atomic_exchange_8>
 801be92:	6823      	ldr	r3, [r4, #0]
 801be94:	4680      	mov	r8, r0
 801be96:	f3bf 8f5b 	dmb	ish
 801be9a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801be9e:	f3bf 8f5b 	dmb	ish
 801bea2:	6820      	ldr	r0, [r4, #0]
 801bea4:	4689      	mov	r9, r1
 801bea6:	4631      	mov	r1, r6
 801bea8:	3028      	adds	r0, #40	; 0x28
 801beaa:	f001 fca9 	bl	801d800 <__atomic_load_8>
 801beae:	460f      	mov	r7, r1
 801beb0:	4631      	mov	r1, r6
 801beb2:	4606      	mov	r6, r0
 801beb4:	6820      	ldr	r0, [r4, #0]
 801beb6:	3018      	adds	r0, #24
 801beb8:	f001 fca2 	bl	801d800 <__atomic_load_8>
 801bebc:	4602      	mov	r2, r0
 801bebe:	9804      	ldr	r0, [sp, #16]
 801bec0:	460b      	mov	r3, r1
 801bec2:	18b6      	adds	r6, r6, r2
 801bec4:	f8dd c014 	ldr.w	ip, [sp, #20]
 801bec8:	4692      	mov	sl, r2
 801beca:	eb47 0701 	adc.w	r7, r7, r1
 801bece:	4286      	cmp	r6, r0
 801bed0:	eb77 010c 	sbcs.w	r1, r7, ip
 801bed4:	da04      	bge.n	801bee0 <rcl_timer_call+0x94>
 801bed6:	ea53 0102 	orrs.w	r1, r3, r2
 801beda:	d12e      	bne.n	801bf3a <rcl_timer_call+0xee>
 801bedc:	4606      	mov	r6, r0
 801bede:	4667      	mov	r7, ip
 801bee0:	6820      	ldr	r0, [r4, #0]
 801bee2:	2105      	movs	r1, #5
 801bee4:	4632      	mov	r2, r6
 801bee6:	463b      	mov	r3, r7
 801bee8:	3028      	adds	r0, #40	; 0x28
 801beea:	9100      	str	r1, [sp, #0]
 801beec:	f001 fcbe 	bl	801d86c <__atomic_store_8>
 801bef0:	f1bb 0f00 	cmp.w	fp, #0
 801bef4:	d00d      	beq.n	801bf12 <rcl_timer_call+0xc6>
 801bef6:	9a04      	ldr	r2, [sp, #16]
 801bef8:	4620      	mov	r0, r4
 801befa:	9b05      	ldr	r3, [sp, #20]
 801befc:	ebb2 0208 	subs.w	r2, r2, r8
 801bf00:	eb63 0309 	sbc.w	r3, r3, r9
 801bf04:	47d8      	blx	fp
 801bf06:	4628      	mov	r0, r5
 801bf08:	b007      	add	sp, #28
 801bf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf0e:	f240 3521 	movw	r5, #801	; 0x321
 801bf12:	4628      	mov	r0, r5
 801bf14:	b007      	add	sp, #28
 801bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf1a:	2501      	movs	r5, #1
 801bf1c:	4628      	mov	r0, r5
 801bf1e:	b007      	add	sp, #28
 801bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf24:	f44f 7548 	mov.w	r5, #800	; 0x320
 801bf28:	4628      	mov	r0, r5
 801bf2a:	b007      	add	sp, #28
 801bf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf30:	250b      	movs	r5, #11
 801bf32:	4628      	mov	r0, r5
 801bf34:	b007      	add	sp, #28
 801bf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf3a:	1b80      	subs	r0, r0, r6
 801bf3c:	eb6c 0107 	sbc.w	r1, ip, r7
 801bf40:	3801      	subs	r0, #1
 801bf42:	f161 0100 	sbc.w	r1, r1, #0
 801bf46:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801bf4a:	f7e4 fb9d 	bl	8000688 <__aeabi_ldivmod>
 801bf4e:	9b02      	ldr	r3, [sp, #8]
 801bf50:	3001      	adds	r0, #1
 801bf52:	f141 0100 	adc.w	r1, r1, #0
 801bf56:	fb00 f303 	mul.w	r3, r0, r3
 801bf5a:	fb01 330a 	mla	r3, r1, sl, r3
 801bf5e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801bf62:	1986      	adds	r6, r0, r6
 801bf64:	4453      	add	r3, sl
 801bf66:	eb43 0707 	adc.w	r7, r3, r7
 801bf6a:	e7b9      	b.n	801bee0 <rcl_timer_call+0x94>

0801bf6c <rcl_timer_is_ready>:
 801bf6c:	b570      	push	{r4, r5, r6, lr}
 801bf6e:	b082      	sub	sp, #8
 801bf70:	b380      	cbz	r0, 801bfd4 <rcl_timer_is_ready+0x68>
 801bf72:	6803      	ldr	r3, [r0, #0]
 801bf74:	4604      	mov	r4, r0
 801bf76:	b38b      	cbz	r3, 801bfdc <rcl_timer_is_ready+0x70>
 801bf78:	460d      	mov	r5, r1
 801bf7a:	b359      	cbz	r1, 801bfd4 <rcl_timer_is_ready+0x68>
 801bf7c:	f3bf 8f5b 	dmb	ish
 801bf80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf84:	f3bf 8f5b 	dmb	ish
 801bf88:	b953      	cbnz	r3, 801bfa0 <rcl_timer_is_ready+0x34>
 801bf8a:	6803      	ldr	r3, [r0, #0]
 801bf8c:	4669      	mov	r1, sp
 801bf8e:	6818      	ldr	r0, [r3, #0]
 801bf90:	f7ff ff50 	bl	801be34 <rcl_clock_get_now>
 801bf94:	4606      	mov	r6, r0
 801bf96:	b148      	cbz	r0, 801bfac <rcl_timer_is_ready+0x40>
 801bf98:	f240 3321 	movw	r3, #801	; 0x321
 801bf9c:	4298      	cmp	r0, r3
 801bf9e:	d102      	bne.n	801bfa6 <rcl_timer_is_ready+0x3a>
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	461e      	mov	r6, r3
 801bfa4:	702b      	strb	r3, [r5, #0]
 801bfa6:	4630      	mov	r0, r6
 801bfa8:	b002      	add	sp, #8
 801bfaa:	bd70      	pop	{r4, r5, r6, pc}
 801bfac:	6820      	ldr	r0, [r4, #0]
 801bfae:	2105      	movs	r1, #5
 801bfb0:	3028      	adds	r0, #40	; 0x28
 801bfb2:	f001 fc25 	bl	801d800 <__atomic_load_8>
 801bfb6:	9b00      	ldr	r3, [sp, #0]
 801bfb8:	1ac0      	subs	r0, r0, r3
 801bfba:	9b01      	ldr	r3, [sp, #4]
 801bfbc:	eb61 0103 	sbc.w	r1, r1, r3
 801bfc0:	2801      	cmp	r0, #1
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	f171 0300 	sbcs.w	r3, r1, #0
 801bfc8:	bfb4      	ite	lt
 801bfca:	2301      	movlt	r3, #1
 801bfcc:	2300      	movge	r3, #0
 801bfce:	702b      	strb	r3, [r5, #0]
 801bfd0:	b002      	add	sp, #8
 801bfd2:	bd70      	pop	{r4, r5, r6, pc}
 801bfd4:	260b      	movs	r6, #11
 801bfd6:	4630      	mov	r0, r6
 801bfd8:	b002      	add	sp, #8
 801bfda:	bd70      	pop	{r4, r5, r6, pc}
 801bfdc:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bfe0:	e7e1      	b.n	801bfa6 <rcl_timer_is_ready+0x3a>
 801bfe2:	bf00      	nop

0801bfe4 <rcl_timer_get_time_until_next_call>:
 801bfe4:	b570      	push	{r4, r5, r6, lr}
 801bfe6:	b082      	sub	sp, #8
 801bfe8:	b330      	cbz	r0, 801c038 <rcl_timer_get_time_until_next_call+0x54>
 801bfea:	6803      	ldr	r3, [r0, #0]
 801bfec:	4604      	mov	r4, r0
 801bfee:	b33b      	cbz	r3, 801c040 <rcl_timer_get_time_until_next_call+0x5c>
 801bff0:	460d      	mov	r5, r1
 801bff2:	b309      	cbz	r1, 801c038 <rcl_timer_get_time_until_next_call+0x54>
 801bff4:	f3bf 8f5b 	dmb	ish
 801bff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bffc:	f3bf 8f5b 	dmb	ish
 801c000:	b9ab      	cbnz	r3, 801c02e <rcl_timer_get_time_until_next_call+0x4a>
 801c002:	6803      	ldr	r3, [r0, #0]
 801c004:	4669      	mov	r1, sp
 801c006:	6818      	ldr	r0, [r3, #0]
 801c008:	f7ff ff14 	bl	801be34 <rcl_clock_get_now>
 801c00c:	4606      	mov	r6, r0
 801c00e:	b958      	cbnz	r0, 801c028 <rcl_timer_get_time_until_next_call+0x44>
 801c010:	6820      	ldr	r0, [r4, #0]
 801c012:	2105      	movs	r1, #5
 801c014:	3028      	adds	r0, #40	; 0x28
 801c016:	f001 fbf3 	bl	801d800 <__atomic_load_8>
 801c01a:	9b00      	ldr	r3, [sp, #0]
 801c01c:	1ac0      	subs	r0, r0, r3
 801c01e:	9b01      	ldr	r3, [sp, #4]
 801c020:	eb61 0103 	sbc.w	r1, r1, r3
 801c024:	6028      	str	r0, [r5, #0]
 801c026:	6069      	str	r1, [r5, #4]
 801c028:	4630      	mov	r0, r6
 801c02a:	b002      	add	sp, #8
 801c02c:	bd70      	pop	{r4, r5, r6, pc}
 801c02e:	f240 3621 	movw	r6, #801	; 0x321
 801c032:	4630      	mov	r0, r6
 801c034:	b002      	add	sp, #8
 801c036:	bd70      	pop	{r4, r5, r6, pc}
 801c038:	260b      	movs	r6, #11
 801c03a:	4630      	mov	r0, r6
 801c03c:	b002      	add	sp, #8
 801c03e:	bd70      	pop	{r4, r5, r6, pc}
 801c040:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c044:	e7f0      	b.n	801c028 <rcl_timer_get_time_until_next_call+0x44>
 801c046:	bf00      	nop

0801c048 <rcl_timer_get_guard_condition>:
 801c048:	b130      	cbz	r0, 801c058 <rcl_timer_get_guard_condition+0x10>
 801c04a:	6800      	ldr	r0, [r0, #0]
 801c04c:	b120      	cbz	r0, 801c058 <rcl_timer_get_guard_condition+0x10>
 801c04e:	68c3      	ldr	r3, [r0, #12]
 801c050:	b10b      	cbz	r3, 801c056 <rcl_timer_get_guard_condition+0xe>
 801c052:	3008      	adds	r0, #8
 801c054:	4770      	bx	lr
 801c056:	4618      	mov	r0, r3
 801c058:	4770      	bx	lr
 801c05a:	bf00      	nop

0801c05c <rcl_validate_enclave_name_with_size>:
 801c05c:	2800      	cmp	r0, #0
 801c05e:	d049      	beq.n	801c0f4 <rcl_validate_enclave_name_with_size+0x98>
 801c060:	b570      	push	{r4, r5, r6, lr}
 801c062:	4615      	mov	r5, r2
 801c064:	b0c2      	sub	sp, #264	; 0x108
 801c066:	b19a      	cbz	r2, 801c090 <rcl_validate_enclave_name_with_size+0x34>
 801c068:	461e      	mov	r6, r3
 801c06a:	466a      	mov	r2, sp
 801c06c:	ab01      	add	r3, sp, #4
 801c06e:	460c      	mov	r4, r1
 801c070:	f7f9 fa8a 	bl	8015588 <rmw_validate_namespace_with_size>
 801c074:	4684      	mov	ip, r0
 801c076:	b9b8      	cbnz	r0, 801c0a8 <rcl_validate_enclave_name_with_size+0x4c>
 801c078:	9900      	ldr	r1, [sp, #0]
 801c07a:	b171      	cbz	r1, 801c09a <rcl_validate_enclave_name_with_size+0x3e>
 801c07c:	2907      	cmp	r1, #7
 801c07e:	d019      	beq.n	801c0b4 <rcl_validate_enclave_name_with_size+0x58>
 801c080:	1e4b      	subs	r3, r1, #1
 801c082:	2b05      	cmp	r3, #5
 801c084:	d83a      	bhi.n	801c0fc <rcl_validate_enclave_name_with_size+0xa0>
 801c086:	e8df f003 	tbb	[pc, r3]
 801c08a:	2926      	.short	0x2926
 801c08c:	1d322f2c 	.word	0x1d322f2c
 801c090:	f04f 0c0b 	mov.w	ip, #11
 801c094:	4660      	mov	r0, ip
 801c096:	b042      	add	sp, #264	; 0x108
 801c098:	bd70      	pop	{r4, r5, r6, pc}
 801c09a:	2907      	cmp	r1, #7
 801c09c:	d00a      	beq.n	801c0b4 <rcl_validate_enclave_name_with_size+0x58>
 801c09e:	2300      	movs	r3, #0
 801c0a0:	4660      	mov	r0, ip
 801c0a2:	602b      	str	r3, [r5, #0]
 801c0a4:	b042      	add	sp, #264	; 0x108
 801c0a6:	bd70      	pop	{r4, r5, r6, pc}
 801c0a8:	f7ff f9f4 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 801c0ac:	4684      	mov	ip, r0
 801c0ae:	4660      	mov	r0, ip
 801c0b0:	b042      	add	sp, #264	; 0x108
 801c0b2:	bd70      	pop	{r4, r5, r6, pc}
 801c0b4:	2cff      	cmp	r4, #255	; 0xff
 801c0b6:	d9f2      	bls.n	801c09e <rcl_validate_enclave_name_with_size+0x42>
 801c0b8:	6029      	str	r1, [r5, #0]
 801c0ba:	2e00      	cmp	r6, #0
 801c0bc:	d0ea      	beq.n	801c094 <rcl_validate_enclave_name_with_size+0x38>
 801c0be:	23fe      	movs	r3, #254	; 0xfe
 801c0c0:	6033      	str	r3, [r6, #0]
 801c0c2:	e7e7      	b.n	801c094 <rcl_validate_enclave_name_with_size+0x38>
 801c0c4:	2306      	movs	r3, #6
 801c0c6:	602b      	str	r3, [r5, #0]
 801c0c8:	2e00      	cmp	r6, #0
 801c0ca:	d0e3      	beq.n	801c094 <rcl_validate_enclave_name_with_size+0x38>
 801c0cc:	9b01      	ldr	r3, [sp, #4]
 801c0ce:	4660      	mov	r0, ip
 801c0d0:	6033      	str	r3, [r6, #0]
 801c0d2:	b042      	add	sp, #264	; 0x108
 801c0d4:	bd70      	pop	{r4, r5, r6, pc}
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	602b      	str	r3, [r5, #0]
 801c0da:	e7f5      	b.n	801c0c8 <rcl_validate_enclave_name_with_size+0x6c>
 801c0dc:	2302      	movs	r3, #2
 801c0de:	602b      	str	r3, [r5, #0]
 801c0e0:	e7f2      	b.n	801c0c8 <rcl_validate_enclave_name_with_size+0x6c>
 801c0e2:	2303      	movs	r3, #3
 801c0e4:	602b      	str	r3, [r5, #0]
 801c0e6:	e7ef      	b.n	801c0c8 <rcl_validate_enclave_name_with_size+0x6c>
 801c0e8:	2304      	movs	r3, #4
 801c0ea:	602b      	str	r3, [r5, #0]
 801c0ec:	e7ec      	b.n	801c0c8 <rcl_validate_enclave_name_with_size+0x6c>
 801c0ee:	2305      	movs	r3, #5
 801c0f0:	602b      	str	r3, [r5, #0]
 801c0f2:	e7e9      	b.n	801c0c8 <rcl_validate_enclave_name_with_size+0x6c>
 801c0f4:	f04f 0c0b 	mov.w	ip, #11
 801c0f8:	4660      	mov	r0, ip
 801c0fa:	4770      	bx	lr
 801c0fc:	460b      	mov	r3, r1
 801c0fe:	4a04      	ldr	r2, [pc, #16]	; (801c110 <rcl_validate_enclave_name_with_size+0xb4>)
 801c100:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c104:	a802      	add	r0, sp, #8
 801c106:	f7f9 f927 	bl	8015358 <rcutils_snprintf>
 801c10a:	f04f 0c01 	mov.w	ip, #1
 801c10e:	e7c1      	b.n	801c094 <rcl_validate_enclave_name_with_size+0x38>
 801c110:	08025968 	.word	0x08025968

0801c114 <rcl_validate_enclave_name>:
 801c114:	b168      	cbz	r0, 801c132 <rcl_validate_enclave_name+0x1e>
 801c116:	b570      	push	{r4, r5, r6, lr}
 801c118:	460d      	mov	r5, r1
 801c11a:	4616      	mov	r6, r2
 801c11c:	4604      	mov	r4, r0
 801c11e:	f7e4 f8ef 	bl	8000300 <strlen>
 801c122:	4633      	mov	r3, r6
 801c124:	4601      	mov	r1, r0
 801c126:	462a      	mov	r2, r5
 801c128:	4620      	mov	r0, r4
 801c12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c12e:	f7ff bf95 	b.w	801c05c <rcl_validate_enclave_name_with_size>
 801c132:	200b      	movs	r0, #11
 801c134:	4770      	bx	lr
 801c136:	bf00      	nop

0801c138 <rcl_get_zero_initialized_wait_set>:
 801c138:	b510      	push	{r4, lr}
 801c13a:	4c08      	ldr	r4, [pc, #32]	; (801c15c <rcl_get_zero_initialized_wait_set+0x24>)
 801c13c:	4686      	mov	lr, r0
 801c13e:	4684      	mov	ip, r0
 801c140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c14c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c152:	6823      	ldr	r3, [r4, #0]
 801c154:	4670      	mov	r0, lr
 801c156:	f8cc 3000 	str.w	r3, [ip]
 801c15a:	bd10      	pop	{r4, pc}
 801c15c:	080259c8 	.word	0x080259c8

0801c160 <rcl_wait_set_is_valid>:
 801c160:	b118      	cbz	r0, 801c16a <rcl_wait_set_is_valid+0xa>
 801c162:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c164:	3800      	subs	r0, #0
 801c166:	bf18      	it	ne
 801c168:	2001      	movne	r0, #1
 801c16a:	4770      	bx	lr

0801c16c <rcl_wait_set_fini>:
 801c16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c170:	b082      	sub	sp, #8
 801c172:	2800      	cmp	r0, #0
 801c174:	f000 8095 	beq.w	801c2a2 <rcl_wait_set_fini+0x136>
 801c178:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c17a:	4604      	mov	r4, r0
 801c17c:	2e00      	cmp	r6, #0
 801c17e:	f000 808c 	beq.w	801c29a <rcl_wait_set_fini+0x12e>
 801c182:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c184:	f002 f9c0 	bl	801e508 <rmw_destroy_wait_set>
 801c188:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c18a:	1e06      	subs	r6, r0, #0
 801c18c:	bf18      	it	ne
 801c18e:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c192:	2d00      	cmp	r5, #0
 801c194:	f000 8081 	beq.w	801c29a <rcl_wait_set_fini+0x12e>
 801c198:	2700      	movs	r7, #0
 801c19a:	6820      	ldr	r0, [r4, #0]
 801c19c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c1a0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1a2:	6067      	str	r7, [r4, #4]
 801c1a4:	602f      	str	r7, [r5, #0]
 801c1a6:	b120      	cbz	r0, 801c1b2 <rcl_wait_set_fini+0x46>
 801c1a8:	9101      	str	r1, [sp, #4]
 801c1aa:	47c0      	blx	r8
 801c1ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1ae:	9901      	ldr	r1, [sp, #4]
 801c1b0:	6027      	str	r7, [r4, #0]
 801c1b2:	68a8      	ldr	r0, [r5, #8]
 801c1b4:	b120      	cbz	r0, 801c1c0 <rcl_wait_set_fini+0x54>
 801c1b6:	47c0      	blx	r8
 801c1b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1ba:	2300      	movs	r3, #0
 801c1bc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c1c0:	f04f 0800 	mov.w	r8, #0
 801c1c4:	68a0      	ldr	r0, [r4, #8]
 801c1c6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c1c8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1ca:	f8c4 800c 	str.w	r8, [r4, #12]
 801c1ce:	f8c5 800c 	str.w	r8, [r5, #12]
 801c1d2:	b128      	cbz	r0, 801c1e0 <rcl_wait_set_fini+0x74>
 801c1d4:	47b8      	blx	r7
 801c1d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1d8:	f8c4 8008 	str.w	r8, [r4, #8]
 801c1dc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c1de:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1e0:	f04f 0800 	mov.w	r8, #0
 801c1e4:	6968      	ldr	r0, [r5, #20]
 801c1e6:	f8c5 8010 	str.w	r8, [r5, #16]
 801c1ea:	b128      	cbz	r0, 801c1f8 <rcl_wait_set_fini+0x8c>
 801c1ec:	47b8      	blx	r7
 801c1ee:	f8c5 8014 	str.w	r8, [r5, #20]
 801c1f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1f4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c1f6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1f8:	f04f 0800 	mov.w	r8, #0
 801c1fc:	6920      	ldr	r0, [r4, #16]
 801c1fe:	f8c4 8014 	str.w	r8, [r4, #20]
 801c202:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c206:	b128      	cbz	r0, 801c214 <rcl_wait_set_fini+0xa8>
 801c208:	47b8      	blx	r7
 801c20a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c20c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c210:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c212:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c214:	f04f 0800 	mov.w	r8, #0
 801c218:	69a0      	ldr	r0, [r4, #24]
 801c21a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c21e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c222:	b128      	cbz	r0, 801c230 <rcl_wait_set_fini+0xc4>
 801c224:	9101      	str	r1, [sp, #4]
 801c226:	47b8      	blx	r7
 801c228:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c22a:	9901      	ldr	r1, [sp, #4]
 801c22c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c230:	6a28      	ldr	r0, [r5, #32]
 801c232:	b120      	cbz	r0, 801c23e <rcl_wait_set_fini+0xd2>
 801c234:	47b8      	blx	r7
 801c236:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c238:	2300      	movs	r3, #0
 801c23a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c23e:	2700      	movs	r7, #0
 801c240:	6a20      	ldr	r0, [r4, #32]
 801c242:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c246:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c248:	6267      	str	r7, [r4, #36]	; 0x24
 801c24a:	626f      	str	r7, [r5, #36]	; 0x24
 801c24c:	b120      	cbz	r0, 801c258 <rcl_wait_set_fini+0xec>
 801c24e:	9101      	str	r1, [sp, #4]
 801c250:	47c0      	blx	r8
 801c252:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c254:	9901      	ldr	r1, [sp, #4]
 801c256:	6227      	str	r7, [r4, #32]
 801c258:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c25a:	b120      	cbz	r0, 801c266 <rcl_wait_set_fini+0xfa>
 801c25c:	47c0      	blx	r8
 801c25e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c260:	2300      	movs	r3, #0
 801c262:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c266:	2700      	movs	r7, #0
 801c268:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c26a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c26e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c270:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c272:	632f      	str	r7, [r5, #48]	; 0x30
 801c274:	b120      	cbz	r0, 801c280 <rcl_wait_set_fini+0x114>
 801c276:	9101      	str	r1, [sp, #4]
 801c278:	47c0      	blx	r8
 801c27a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c27c:	9901      	ldr	r1, [sp, #4]
 801c27e:	62a7      	str	r7, [r4, #40]	; 0x28
 801c280:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c282:	b120      	cbz	r0, 801c28e <rcl_wait_set_fini+0x122>
 801c284:	47c0      	blx	r8
 801c286:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c288:	2300      	movs	r3, #0
 801c28a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c28e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c290:	4628      	mov	r0, r5
 801c292:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c294:	4798      	blx	r3
 801c296:	2300      	movs	r3, #0
 801c298:	6323      	str	r3, [r4, #48]	; 0x30
 801c29a:	4630      	mov	r0, r6
 801c29c:	b002      	add	sp, #8
 801c29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2a2:	260b      	movs	r6, #11
 801c2a4:	4630      	mov	r0, r6
 801c2a6:	b002      	add	sp, #8
 801c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c2ac <rcl_wait_set_add_subscription>:
 801c2ac:	b318      	cbz	r0, 801c2f6 <rcl_wait_set_add_subscription+0x4a>
 801c2ae:	b538      	push	{r3, r4, r5, lr}
 801c2b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c2b2:	4604      	mov	r4, r0
 801c2b4:	b30b      	cbz	r3, 801c2fa <rcl_wait_set_add_subscription+0x4e>
 801c2b6:	b319      	cbz	r1, 801c300 <rcl_wait_set_add_subscription+0x54>
 801c2b8:	681d      	ldr	r5, [r3, #0]
 801c2ba:	6840      	ldr	r0, [r0, #4]
 801c2bc:	4285      	cmp	r5, r0
 801c2be:	d217      	bcs.n	801c2f0 <rcl_wait_set_add_subscription+0x44>
 801c2c0:	1c68      	adds	r0, r5, #1
 801c2c2:	6018      	str	r0, [r3, #0]
 801c2c4:	6823      	ldr	r3, [r4, #0]
 801c2c6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c2ca:	b102      	cbz	r2, 801c2ce <rcl_wait_set_add_subscription+0x22>
 801c2cc:	6015      	str	r5, [r2, #0]
 801c2ce:	4608      	mov	r0, r1
 801c2d0:	f7f7 ff14 	bl	80140fc <rcl_subscription_get_rmw_handle>
 801c2d4:	b150      	cbz	r0, 801c2ec <rcl_wait_set_add_subscription+0x40>
 801c2d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2d8:	6842      	ldr	r2, [r0, #4]
 801c2da:	2000      	movs	r0, #0
 801c2dc:	689b      	ldr	r3, [r3, #8]
 801c2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c2e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c2e4:	6853      	ldr	r3, [r2, #4]
 801c2e6:	3301      	adds	r3, #1
 801c2e8:	6053      	str	r3, [r2, #4]
 801c2ea:	bd38      	pop	{r3, r4, r5, pc}
 801c2ec:	2001      	movs	r0, #1
 801c2ee:	bd38      	pop	{r3, r4, r5, pc}
 801c2f0:	f240 3086 	movw	r0, #902	; 0x386
 801c2f4:	bd38      	pop	{r3, r4, r5, pc}
 801c2f6:	200b      	movs	r0, #11
 801c2f8:	4770      	bx	lr
 801c2fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c2fe:	bd38      	pop	{r3, r4, r5, pc}
 801c300:	200b      	movs	r0, #11
 801c302:	bd38      	pop	{r3, r4, r5, pc}

0801c304 <rcl_wait_set_clear>:
 801c304:	2800      	cmp	r0, #0
 801c306:	d074      	beq.n	801c3f2 <rcl_wait_set_clear+0xee>
 801c308:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c30a:	b510      	push	{r4, lr}
 801c30c:	4604      	mov	r4, r0
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d071      	beq.n	801c3f6 <rcl_wait_set_clear+0xf2>
 801c312:	6800      	ldr	r0, [r0, #0]
 801c314:	b138      	cbz	r0, 801c326 <rcl_wait_set_clear+0x22>
 801c316:	6862      	ldr	r2, [r4, #4]
 801c318:	2100      	movs	r1, #0
 801c31a:	0092      	lsls	r2, r2, #2
 801c31c:	f004 fd6a 	bl	8020df4 <memset>
 801c320:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c322:	2200      	movs	r2, #0
 801c324:	601a      	str	r2, [r3, #0]
 801c326:	68a0      	ldr	r0, [r4, #8]
 801c328:	b138      	cbz	r0, 801c33a <rcl_wait_set_clear+0x36>
 801c32a:	68e2      	ldr	r2, [r4, #12]
 801c32c:	2100      	movs	r1, #0
 801c32e:	0092      	lsls	r2, r2, #2
 801c330:	f004 fd60 	bl	8020df4 <memset>
 801c334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c336:	2200      	movs	r2, #0
 801c338:	60da      	str	r2, [r3, #12]
 801c33a:	69a0      	ldr	r0, [r4, #24]
 801c33c:	b138      	cbz	r0, 801c34e <rcl_wait_set_clear+0x4a>
 801c33e:	69e2      	ldr	r2, [r4, #28]
 801c340:	2100      	movs	r1, #0
 801c342:	0092      	lsls	r2, r2, #2
 801c344:	f004 fd56 	bl	8020df4 <memset>
 801c348:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c34a:	2200      	movs	r2, #0
 801c34c:	619a      	str	r2, [r3, #24]
 801c34e:	6a20      	ldr	r0, [r4, #32]
 801c350:	b138      	cbz	r0, 801c362 <rcl_wait_set_clear+0x5e>
 801c352:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c354:	2100      	movs	r1, #0
 801c356:	0092      	lsls	r2, r2, #2
 801c358:	f004 fd4c 	bl	8020df4 <memset>
 801c35c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c35e:	2200      	movs	r2, #0
 801c360:	625a      	str	r2, [r3, #36]	; 0x24
 801c362:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c364:	b138      	cbz	r0, 801c376 <rcl_wait_set_clear+0x72>
 801c366:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c368:	2100      	movs	r1, #0
 801c36a:	0092      	lsls	r2, r2, #2
 801c36c:	f004 fd42 	bl	8020df4 <memset>
 801c370:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c372:	2200      	movs	r2, #0
 801c374:	631a      	str	r2, [r3, #48]	; 0x30
 801c376:	6920      	ldr	r0, [r4, #16]
 801c378:	b138      	cbz	r0, 801c38a <rcl_wait_set_clear+0x86>
 801c37a:	6962      	ldr	r2, [r4, #20]
 801c37c:	2100      	movs	r1, #0
 801c37e:	0092      	lsls	r2, r2, #2
 801c380:	f004 fd38 	bl	8020df4 <memset>
 801c384:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c386:	2200      	movs	r2, #0
 801c388:	641a      	str	r2, [r3, #64]	; 0x40
 801c38a:	6898      	ldr	r0, [r3, #8]
 801c38c:	b138      	cbz	r0, 801c39e <rcl_wait_set_clear+0x9a>
 801c38e:	685a      	ldr	r2, [r3, #4]
 801c390:	2100      	movs	r1, #0
 801c392:	0092      	lsls	r2, r2, #2
 801c394:	f004 fd2e 	bl	8020df4 <memset>
 801c398:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c39a:	2200      	movs	r2, #0
 801c39c:	605a      	str	r2, [r3, #4]
 801c39e:	6958      	ldr	r0, [r3, #20]
 801c3a0:	b138      	cbz	r0, 801c3b2 <rcl_wait_set_clear+0xae>
 801c3a2:	691a      	ldr	r2, [r3, #16]
 801c3a4:	2100      	movs	r1, #0
 801c3a6:	0092      	lsls	r2, r2, #2
 801c3a8:	f004 fd24 	bl	8020df4 <memset>
 801c3ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	611a      	str	r2, [r3, #16]
 801c3b2:	6a18      	ldr	r0, [r3, #32]
 801c3b4:	b138      	cbz	r0, 801c3c6 <rcl_wait_set_clear+0xc2>
 801c3b6:	69da      	ldr	r2, [r3, #28]
 801c3b8:	2100      	movs	r1, #0
 801c3ba:	0092      	lsls	r2, r2, #2
 801c3bc:	f004 fd1a 	bl	8020df4 <memset>
 801c3c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	61da      	str	r2, [r3, #28]
 801c3c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c3c8:	b138      	cbz	r0, 801c3da <rcl_wait_set_clear+0xd6>
 801c3ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c3cc:	2100      	movs	r1, #0
 801c3ce:	0092      	lsls	r2, r2, #2
 801c3d0:	f004 fd10 	bl	8020df4 <memset>
 801c3d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c3d6:	2200      	movs	r2, #0
 801c3d8:	629a      	str	r2, [r3, #40]	; 0x28
 801c3da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c3dc:	b140      	cbz	r0, 801c3f0 <rcl_wait_set_clear+0xec>
 801c3de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c3e0:	2100      	movs	r1, #0
 801c3e2:	0092      	lsls	r2, r2, #2
 801c3e4:	f004 fd06 	bl	8020df4 <memset>
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	6353      	str	r3, [r2, #52]	; 0x34
 801c3f0:	bd10      	pop	{r4, pc}
 801c3f2:	200b      	movs	r0, #11
 801c3f4:	4770      	bx	lr
 801c3f6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c3fa:	bd10      	pop	{r4, pc}

0801c3fc <rcl_wait_set_resize>:
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	f000 8180 	beq.w	801c702 <rcl_wait_set_resize+0x306>
 801c402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c406:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c408:	b083      	sub	sp, #12
 801c40a:	4605      	mov	r5, r0
 801c40c:	2c00      	cmp	r4, #0
 801c40e:	f000 817a 	beq.w	801c706 <rcl_wait_set_resize+0x30a>
 801c412:	f04f 0900 	mov.w	r9, #0
 801c416:	461f      	mov	r7, r3
 801c418:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c41c:	4688      	mov	r8, r1
 801c41e:	4616      	mov	r6, r2
 801c420:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c424:	f8c0 9004 	str.w	r9, [r0, #4]
 801c428:	f8c4 9000 	str.w	r9, [r4]
 801c42c:	2900      	cmp	r1, #0
 801c42e:	f000 80bf 	beq.w	801c5b0 <rcl_wait_set_resize+0x1b4>
 801c432:	008c      	lsls	r4, r1, #2
 801c434:	4652      	mov	r2, sl
 801c436:	6800      	ldr	r0, [r0, #0]
 801c438:	4621      	mov	r1, r4
 801c43a:	9301      	str	r3, [sp, #4]
 801c43c:	4798      	blx	r3
 801c43e:	9b01      	ldr	r3, [sp, #4]
 801c440:	6028      	str	r0, [r5, #0]
 801c442:	2800      	cmp	r0, #0
 801c444:	f000 80f6 	beq.w	801c634 <rcl_wait_set_resize+0x238>
 801c448:	4622      	mov	r2, r4
 801c44a:	4649      	mov	r1, r9
 801c44c:	9301      	str	r3, [sp, #4]
 801c44e:	f004 fcd1 	bl	8020df4 <memset>
 801c452:	f8c5 8004 	str.w	r8, [r5, #4]
 801c456:	4652      	mov	r2, sl
 801c458:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c45c:	4621      	mov	r1, r4
 801c45e:	9b01      	ldr	r3, [sp, #4]
 801c460:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c464:	f8c8 9004 	str.w	r9, [r8, #4]
 801c468:	4798      	blx	r3
 801c46a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c46c:	f8c8 0008 	str.w	r0, [r8, #8]
 801c470:	689b      	ldr	r3, [r3, #8]
 801c472:	2b00      	cmp	r3, #0
 801c474:	f000 814a 	beq.w	801c70c <rcl_wait_set_resize+0x310>
 801c478:	4622      	mov	r2, r4
 801c47a:	4649      	mov	r1, r9
 801c47c:	4618      	mov	r0, r3
 801c47e:	f004 fcb9 	bl	8020df4 <memset>
 801c482:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c484:	f04f 0800 	mov.w	r8, #0
 801c488:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c48c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c490:	f8c5 800c 	str.w	r8, [r5, #12]
 801c494:	f8c4 800c 	str.w	r8, [r4, #12]
 801c498:	2e00      	cmp	r6, #0
 801c49a:	f040 809b 	bne.w	801c5d4 <rcl_wait_set_resize+0x1d8>
 801c49e:	68a8      	ldr	r0, [r5, #8]
 801c4a0:	b128      	cbz	r0, 801c4ae <rcl_wait_set_resize+0xb2>
 801c4a2:	4649      	mov	r1, r9
 801c4a4:	4790      	blx	r2
 801c4a6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4a8:	60ae      	str	r6, [r5, #8]
 801c4aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c4ae:	f04f 0800 	mov.w	r8, #0
 801c4b2:	19f6      	adds	r6, r6, r7
 801c4b4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c4b8:	f040 80a2 	bne.w	801c600 <rcl_wait_set_resize+0x204>
 801c4bc:	6960      	ldr	r0, [r4, #20]
 801c4be:	b130      	cbz	r0, 801c4ce <rcl_wait_set_resize+0xd2>
 801c4c0:	4649      	mov	r1, r9
 801c4c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c4c4:	4798      	blx	r3
 801c4c6:	6166      	str	r6, [r4, #20]
 801c4c8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c4ce:	2600      	movs	r6, #0
 801c4d0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c4d4:	616e      	str	r6, [r5, #20]
 801c4d6:	6426      	str	r6, [r4, #64]	; 0x40
 801c4d8:	2f00      	cmp	r7, #0
 801c4da:	f040 80af 	bne.w	801c63c <rcl_wait_set_resize+0x240>
 801c4de:	6928      	ldr	r0, [r5, #16]
 801c4e0:	b138      	cbz	r0, 801c4f2 <rcl_wait_set_resize+0xf6>
 801c4e2:	4649      	mov	r1, r9
 801c4e4:	47d0      	blx	sl
 801c4e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4e8:	612f      	str	r7, [r5, #16]
 801c4ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c4ee:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c4f2:	2600      	movs	r6, #0
 801c4f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4f6:	61ee      	str	r6, [r5, #28]
 801c4f8:	61a6      	str	r6, [r4, #24]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	f040 8093 	bne.w	801c626 <rcl_wait_set_resize+0x22a>
 801c500:	69a8      	ldr	r0, [r5, #24]
 801c502:	b120      	cbz	r0, 801c50e <rcl_wait_set_resize+0x112>
 801c504:	4649      	mov	r1, r9
 801c506:	47d0      	blx	sl
 801c508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c50a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c50c:	61ab      	str	r3, [r5, #24]
 801c50e:	6a20      	ldr	r0, [r4, #32]
 801c510:	b128      	cbz	r0, 801c51e <rcl_wait_set_resize+0x122>
 801c512:	4649      	mov	r1, r9
 801c514:	47d0      	blx	sl
 801c516:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c518:	2300      	movs	r3, #0
 801c51a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c51e:	2600      	movs	r6, #0
 801c520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c522:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c524:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c528:	626e      	str	r6, [r5, #36]	; 0x24
 801c52a:	6266      	str	r6, [r4, #36]	; 0x24
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	f000 8098 	beq.w	801c662 <rcl_wait_set_resize+0x266>
 801c532:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c536:	463a      	mov	r2, r7
 801c538:	6a28      	ldr	r0, [r5, #32]
 801c53a:	4651      	mov	r1, sl
 801c53c:	47c8      	blx	r9
 801c53e:	6228      	str	r0, [r5, #32]
 801c540:	2800      	cmp	r0, #0
 801c542:	d077      	beq.n	801c634 <rcl_wait_set_resize+0x238>
 801c544:	4652      	mov	r2, sl
 801c546:	4631      	mov	r1, r6
 801c548:	f004 fc54 	bl	8020df4 <memset>
 801c54c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c550:	463a      	mov	r2, r7
 801c552:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c554:	4651      	mov	r1, sl
 801c556:	626b      	str	r3, [r5, #36]	; 0x24
 801c558:	62a6      	str	r6, [r4, #40]	; 0x28
 801c55a:	47c8      	blx	r9
 801c55c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c55e:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c560:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c562:	2c00      	cmp	r4, #0
 801c564:	f000 80f2 	beq.w	801c74c <rcl_wait_set_resize+0x350>
 801c568:	4620      	mov	r0, r4
 801c56a:	4652      	mov	r2, sl
 801c56c:	4631      	mov	r1, r6
 801c56e:	f004 fc41 	bl	8020df4 <memset>
 801c572:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c574:	2600      	movs	r6, #0
 801c576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c578:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c57a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c57e:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c580:	6326      	str	r6, [r4, #48]	; 0x30
 801c582:	2b00      	cmp	r3, #0
 801c584:	f040 8097 	bne.w	801c6b6 <rcl_wait_set_resize+0x2ba>
 801c588:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c58a:	b120      	cbz	r0, 801c596 <rcl_wait_set_resize+0x19a>
 801c58c:	4639      	mov	r1, r7
 801c58e:	47c0      	blx	r8
 801c590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c592:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c594:	62ab      	str	r3, [r5, #40]	; 0x28
 801c596:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c598:	2800      	cmp	r0, #0
 801c59a:	d04c      	beq.n	801c636 <rcl_wait_set_resize+0x23a>
 801c59c:	4639      	mov	r1, r7
 801c59e:	47c0      	blx	r8
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c5aa:	b003      	add	sp, #12
 801c5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5b0:	6800      	ldr	r0, [r0, #0]
 801c5b2:	b120      	cbz	r0, 801c5be <rcl_wait_set_resize+0x1c2>
 801c5b4:	4651      	mov	r1, sl
 801c5b6:	47d8      	blx	fp
 801c5b8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5ba:	f8c5 8000 	str.w	r8, [r5]
 801c5be:	68a0      	ldr	r0, [r4, #8]
 801c5c0:	2800      	cmp	r0, #0
 801c5c2:	f43f af5f 	beq.w	801c484 <rcl_wait_set_resize+0x88>
 801c5c6:	4651      	mov	r1, sl
 801c5c8:	47d8      	blx	fp
 801c5ca:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c5d2:	e757      	b.n	801c484 <rcl_wait_set_resize+0x88>
 801c5d4:	00b4      	lsls	r4, r6, #2
 801c5d6:	464a      	mov	r2, r9
 801c5d8:	68a8      	ldr	r0, [r5, #8]
 801c5da:	4621      	mov	r1, r4
 801c5dc:	4798      	blx	r3
 801c5de:	60a8      	str	r0, [r5, #8]
 801c5e0:	b340      	cbz	r0, 801c634 <rcl_wait_set_resize+0x238>
 801c5e2:	4622      	mov	r2, r4
 801c5e4:	4641      	mov	r1, r8
 801c5e6:	f004 fc05 	bl	8020df4 <memset>
 801c5ea:	f04f 0800 	mov.w	r8, #0
 801c5ee:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5f0:	60ee      	str	r6, [r5, #12]
 801c5f2:	19f6      	adds	r6, r6, r7
 801c5f4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c5f8:	f8c4 8010 	str.w	r8, [r4, #16]
 801c5fc:	f43f af5e 	beq.w	801c4bc <rcl_wait_set_resize+0xc0>
 801c600:	00b6      	lsls	r6, r6, #2
 801c602:	464a      	mov	r2, r9
 801c604:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c606:	6960      	ldr	r0, [r4, #20]
 801c608:	4631      	mov	r1, r6
 801c60a:	4798      	blx	r3
 801c60c:	4681      	mov	r9, r0
 801c60e:	6160      	str	r0, [r4, #20]
 801c610:	2800      	cmp	r0, #0
 801c612:	f000 8084 	beq.w	801c71e <rcl_wait_set_resize+0x322>
 801c616:	4632      	mov	r2, r6
 801c618:	4641      	mov	r1, r8
 801c61a:	f004 fbeb 	bl	8020df4 <memset>
 801c61e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c620:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c624:	e753      	b.n	801c4ce <rcl_wait_set_resize+0xd2>
 801c626:	009c      	lsls	r4, r3, #2
 801c628:	464a      	mov	r2, r9
 801c62a:	69a8      	ldr	r0, [r5, #24]
 801c62c:	4621      	mov	r1, r4
 801c62e:	47c0      	blx	r8
 801c630:	61a8      	str	r0, [r5, #24]
 801c632:	bb40      	cbnz	r0, 801c686 <rcl_wait_set_resize+0x28a>
 801c634:	200a      	movs	r0, #10
 801c636:	b003      	add	sp, #12
 801c638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c63c:	00bc      	lsls	r4, r7, #2
 801c63e:	464a      	mov	r2, r9
 801c640:	6928      	ldr	r0, [r5, #16]
 801c642:	4621      	mov	r1, r4
 801c644:	47c0      	blx	r8
 801c646:	6128      	str	r0, [r5, #16]
 801c648:	2800      	cmp	r0, #0
 801c64a:	d0f3      	beq.n	801c634 <rcl_wait_set_resize+0x238>
 801c64c:	4622      	mov	r2, r4
 801c64e:	4631      	mov	r1, r6
 801c650:	f004 fbd0 	bl	8020df4 <memset>
 801c654:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c656:	616f      	str	r7, [r5, #20]
 801c658:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c65c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c660:	e747      	b.n	801c4f2 <rcl_wait_set_resize+0xf6>
 801c662:	6a28      	ldr	r0, [r5, #32]
 801c664:	b120      	cbz	r0, 801c670 <rcl_wait_set_resize+0x274>
 801c666:	4639      	mov	r1, r7
 801c668:	47c0      	blx	r8
 801c66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c66c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c66e:	622b      	str	r3, [r5, #32]
 801c670:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c672:	2800      	cmp	r0, #0
 801c674:	f43f af7e 	beq.w	801c574 <rcl_wait_set_resize+0x178>
 801c678:	4639      	mov	r1, r7
 801c67a:	47c0      	blx	r8
 801c67c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c67e:	2300      	movs	r3, #0
 801c680:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c684:	e776      	b.n	801c574 <rcl_wait_set_resize+0x178>
 801c686:	4622      	mov	r2, r4
 801c688:	4631      	mov	r1, r6
 801c68a:	f004 fbb3 	bl	8020df4 <memset>
 801c68e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c692:	464a      	mov	r2, r9
 801c694:	6a38      	ldr	r0, [r7, #32]
 801c696:	4621      	mov	r1, r4
 801c698:	61eb      	str	r3, [r5, #28]
 801c69a:	61fe      	str	r6, [r7, #28]
 801c69c:	47c0      	blx	r8
 801c69e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c6a0:	6238      	str	r0, [r7, #32]
 801c6a2:	6a1f      	ldr	r7, [r3, #32]
 801c6a4:	2f00      	cmp	r7, #0
 801c6a6:	d04a      	beq.n	801c73e <rcl_wait_set_resize+0x342>
 801c6a8:	4622      	mov	r2, r4
 801c6aa:	4631      	mov	r1, r6
 801c6ac:	4638      	mov	r0, r7
 801c6ae:	f004 fba1 	bl	8020df4 <memset>
 801c6b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6b4:	e733      	b.n	801c51e <rcl_wait_set_resize+0x122>
 801c6b6:	009c      	lsls	r4, r3, #2
 801c6b8:	463a      	mov	r2, r7
 801c6ba:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c6bc:	4621      	mov	r1, r4
 801c6be:	47c8      	blx	r9
 801c6c0:	62a8      	str	r0, [r5, #40]	; 0x28
 801c6c2:	2800      	cmp	r0, #0
 801c6c4:	d0b6      	beq.n	801c634 <rcl_wait_set_resize+0x238>
 801c6c6:	4622      	mov	r2, r4
 801c6c8:	4631      	mov	r1, r6
 801c6ca:	f004 fb93 	bl	8020df4 <memset>
 801c6ce:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c6d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6d4:	463a      	mov	r2, r7
 801c6d6:	4621      	mov	r1, r4
 801c6d8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c6dc:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c6de:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c6e2:	47c8      	blx	r9
 801c6e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c6e6:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d034      	beq.n	801c75a <rcl_wait_set_resize+0x35e>
 801c6f0:	4622      	mov	r2, r4
 801c6f2:	4631      	mov	r1, r6
 801c6f4:	4618      	mov	r0, r3
 801c6f6:	f004 fb7d 	bl	8020df4 <memset>
 801c6fa:	4630      	mov	r0, r6
 801c6fc:	b003      	add	sp, #12
 801c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c702:	200b      	movs	r0, #11
 801c704:	4770      	bx	lr
 801c706:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c70a:	e794      	b.n	801c636 <rcl_wait_set_resize+0x23a>
 801c70c:	6828      	ldr	r0, [r5, #0]
 801c70e:	4651      	mov	r1, sl
 801c710:	9301      	str	r3, [sp, #4]
 801c712:	47d8      	blx	fp
 801c714:	9b01      	ldr	r3, [sp, #4]
 801c716:	200a      	movs	r0, #10
 801c718:	e9c5 3300 	strd	r3, r3, [r5]
 801c71c:	e78b      	b.n	801c636 <rcl_wait_set_resize+0x23a>
 801c71e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c720:	68a8      	ldr	r0, [r5, #8]
 801c722:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c726:	4798      	blx	r3
 801c728:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c72a:	6928      	ldr	r0, [r5, #16]
 801c72c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c72e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c730:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c734:	4790      	blx	r2
 801c736:	200a      	movs	r0, #10
 801c738:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c73c:	e77b      	b.n	801c636 <rcl_wait_set_resize+0x23a>
 801c73e:	69a8      	ldr	r0, [r5, #24]
 801c740:	4649      	mov	r1, r9
 801c742:	47d0      	blx	sl
 801c744:	200a      	movs	r0, #10
 801c746:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c74a:	e774      	b.n	801c636 <rcl_wait_set_resize+0x23a>
 801c74c:	6a28      	ldr	r0, [r5, #32]
 801c74e:	4639      	mov	r1, r7
 801c750:	47c0      	blx	r8
 801c752:	200a      	movs	r0, #10
 801c754:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c758:	e76d      	b.n	801c636 <rcl_wait_set_resize+0x23a>
 801c75a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c75c:	4639      	mov	r1, r7
 801c75e:	9301      	str	r3, [sp, #4]
 801c760:	47c0      	blx	r8
 801c762:	9b01      	ldr	r3, [sp, #4]
 801c764:	200a      	movs	r0, #10
 801c766:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c76a:	e764      	b.n	801c636 <rcl_wait_set_resize+0x23a>

0801c76c <rcl_wait_set_init>:
 801c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c770:	b085      	sub	sp, #20
 801c772:	4605      	mov	r5, r0
 801c774:	460e      	mov	r6, r1
 801c776:	4617      	mov	r7, r2
 801c778:	a812      	add	r0, sp, #72	; 0x48
 801c77a:	4698      	mov	r8, r3
 801c77c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c780:	f7f8 fca4 	bl	80150cc <rcutils_allocator_is_valid>
 801c784:	2d00      	cmp	r5, #0
 801c786:	d072      	beq.n	801c86e <rcl_wait_set_init+0x102>
 801c788:	f080 0001 	eor.w	r0, r0, #1
 801c78c:	b2c0      	uxtb	r0, r0
 801c78e:	2800      	cmp	r0, #0
 801c790:	d16d      	bne.n	801c86e <rcl_wait_set_init+0x102>
 801c792:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c796:	f1ba 0f00 	cmp.w	sl, #0
 801c79a:	d004      	beq.n	801c7a6 <rcl_wait_set_init+0x3a>
 801c79c:	2464      	movs	r4, #100	; 0x64
 801c79e:	4620      	mov	r0, r4
 801c7a0:	b005      	add	sp, #20
 801c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7a6:	f1b9 0f00 	cmp.w	r9, #0
 801c7aa:	d060      	beq.n	801c86e <rcl_wait_set_init+0x102>
 801c7ac:	4648      	mov	r0, r9
 801c7ae:	f7fe fe8f 	bl	801b4d0 <rcl_context_is_valid>
 801c7b2:	2800      	cmp	r0, #0
 801c7b4:	d068      	beq.n	801c888 <rcl_wait_set_init+0x11c>
 801c7b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c7b8:	205c      	movs	r0, #92	; 0x5c
 801c7ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c7bc:	4798      	blx	r3
 801c7be:	6328      	str	r0, [r5, #48]	; 0x30
 801c7c0:	2800      	cmp	r0, #0
 801c7c2:	d063      	beq.n	801c88c <rcl_wait_set_init+0x120>
 801c7c4:	225c      	movs	r2, #92	; 0x5c
 801c7c6:	4651      	mov	r1, sl
 801c7c8:	f004 fb14 	bl	8020df4 <memset>
 801c7cc:	ac12      	add	r4, sp, #72	; 0x48
 801c7ce:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c7d2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c7d6:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c7da:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c7de:	eb03 0e02 	add.w	lr, r3, r2
 801c7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7e4:	f8d9 9000 	ldr.w	r9, [r9]
 801c7e8:	449e      	add	lr, r3
 801c7ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c7ec:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c7f0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c7f4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c7f8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c7fc:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c800:	44be      	add	lr, r7
 801c802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c806:	6823      	ldr	r3, [r4, #0]
 801c808:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c80c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c810:	f8cc 3000 	str.w	r3, [ip]
 801c814:	f001 fe6e 	bl	801e4f4 <rmw_create_wait_set>
 801c818:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c81a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c81e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c820:	b350      	cbz	r0, 801c878 <rcl_wait_set_init+0x10c>
 801c822:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c824:	4643      	mov	r3, r8
 801c826:	463a      	mov	r2, r7
 801c828:	4631      	mov	r1, r6
 801c82a:	9402      	str	r4, [sp, #8]
 801c82c:	4628      	mov	r0, r5
 801c82e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c830:	9401      	str	r4, [sp, #4]
 801c832:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c834:	9400      	str	r4, [sp, #0]
 801c836:	f7ff fde1 	bl	801c3fc <rcl_wait_set_resize>
 801c83a:	4604      	mov	r4, r0
 801c83c:	2800      	cmp	r0, #0
 801c83e:	d0ae      	beq.n	801c79e <rcl_wait_set_init+0x32>
 801c840:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c842:	bb2b      	cbnz	r3, 801c890 <rcl_wait_set_init+0x124>
 801c844:	2600      	movs	r6, #0
 801c846:	4628      	mov	r0, r5
 801c848:	4633      	mov	r3, r6
 801c84a:	4632      	mov	r2, r6
 801c84c:	4631      	mov	r1, r6
 801c84e:	9600      	str	r6, [sp, #0]
 801c850:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801c854:	f7ff fdd2 	bl	801c3fc <rcl_wait_set_resize>
 801c858:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c85a:	2800      	cmp	r0, #0
 801c85c:	d09f      	beq.n	801c79e <rcl_wait_set_init+0x32>
 801c85e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801c860:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801c862:	4798      	blx	r3
 801c864:	4620      	mov	r0, r4
 801c866:	632e      	str	r6, [r5, #48]	; 0x30
 801c868:	b005      	add	sp, #20
 801c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c86e:	240b      	movs	r4, #11
 801c870:	4620      	mov	r0, r4
 801c872:	b005      	add	sp, #20
 801c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c878:	2401      	movs	r4, #1
 801c87a:	f001 fe45 	bl	801e508 <rmw_destroy_wait_set>
 801c87e:	2800      	cmp	r0, #0
 801c880:	bf18      	it	ne
 801c882:	f44f 7461 	movne.w	r4, #900	; 0x384
 801c886:	e7dd      	b.n	801c844 <rcl_wait_set_init+0xd8>
 801c888:	2465      	movs	r4, #101	; 0x65
 801c88a:	e788      	b.n	801c79e <rcl_wait_set_init+0x32>
 801c88c:	240a      	movs	r4, #10
 801c88e:	e786      	b.n	801c79e <rcl_wait_set_init+0x32>
 801c890:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c892:	e7f2      	b.n	801c87a <rcl_wait_set_init+0x10e>

0801c894 <rcl_wait_set_add_guard_condition>:
 801c894:	b318      	cbz	r0, 801c8de <rcl_wait_set_add_guard_condition+0x4a>
 801c896:	b538      	push	{r3, r4, r5, lr}
 801c898:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c89a:	4604      	mov	r4, r0
 801c89c:	b30b      	cbz	r3, 801c8e2 <rcl_wait_set_add_guard_condition+0x4e>
 801c89e:	b319      	cbz	r1, 801c8e8 <rcl_wait_set_add_guard_condition+0x54>
 801c8a0:	68dd      	ldr	r5, [r3, #12]
 801c8a2:	68c0      	ldr	r0, [r0, #12]
 801c8a4:	4285      	cmp	r5, r0
 801c8a6:	d217      	bcs.n	801c8d8 <rcl_wait_set_add_guard_condition+0x44>
 801c8a8:	1c68      	adds	r0, r5, #1
 801c8aa:	60d8      	str	r0, [r3, #12]
 801c8ac:	68a3      	ldr	r3, [r4, #8]
 801c8ae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c8b2:	b102      	cbz	r2, 801c8b6 <rcl_wait_set_add_guard_condition+0x22>
 801c8b4:	6015      	str	r5, [r2, #0]
 801c8b6:	4608      	mov	r0, r1
 801c8b8:	f7fe ff18 	bl	801b6ec <rcl_guard_condition_get_rmw_handle>
 801c8bc:	b150      	cbz	r0, 801c8d4 <rcl_wait_set_add_guard_condition+0x40>
 801c8be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c8c0:	6842      	ldr	r2, [r0, #4]
 801c8c2:	2000      	movs	r0, #0
 801c8c4:	695b      	ldr	r3, [r3, #20]
 801c8c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c8ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c8cc:	6913      	ldr	r3, [r2, #16]
 801c8ce:	3301      	adds	r3, #1
 801c8d0:	6113      	str	r3, [r2, #16]
 801c8d2:	bd38      	pop	{r3, r4, r5, pc}
 801c8d4:	2001      	movs	r0, #1
 801c8d6:	bd38      	pop	{r3, r4, r5, pc}
 801c8d8:	f240 3086 	movw	r0, #902	; 0x386
 801c8dc:	bd38      	pop	{r3, r4, r5, pc}
 801c8de:	200b      	movs	r0, #11
 801c8e0:	4770      	bx	lr
 801c8e2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c8e6:	bd38      	pop	{r3, r4, r5, pc}
 801c8e8:	200b      	movs	r0, #11
 801c8ea:	bd38      	pop	{r3, r4, r5, pc}

0801c8ec <rcl_wait_set_add_timer>:
 801c8ec:	b328      	cbz	r0, 801c93a <rcl_wait_set_add_timer+0x4e>
 801c8ee:	b538      	push	{r3, r4, r5, lr}
 801c8f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c8f2:	4604      	mov	r4, r0
 801c8f4:	b31b      	cbz	r3, 801c93e <rcl_wait_set_add_timer+0x52>
 801c8f6:	b329      	cbz	r1, 801c944 <rcl_wait_set_add_timer+0x58>
 801c8f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801c8fa:	6965      	ldr	r5, [r4, #20]
 801c8fc:	42a8      	cmp	r0, r5
 801c8fe:	d219      	bcs.n	801c934 <rcl_wait_set_add_timer+0x48>
 801c900:	1c45      	adds	r5, r0, #1
 801c902:	641d      	str	r5, [r3, #64]	; 0x40
 801c904:	6923      	ldr	r3, [r4, #16]
 801c906:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801c90a:	b102      	cbz	r2, 801c90e <rcl_wait_set_add_timer+0x22>
 801c90c:	6010      	str	r0, [r2, #0]
 801c90e:	4608      	mov	r0, r1
 801c910:	f7ff fb9a 	bl	801c048 <rcl_timer_get_guard_condition>
 801c914:	b168      	cbz	r0, 801c932 <rcl_wait_set_add_timer+0x46>
 801c916:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c918:	68e3      	ldr	r3, [r4, #12]
 801c91a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801c91c:	3b01      	subs	r3, #1
 801c91e:	441d      	add	r5, r3
 801c920:	f7fe fee4 	bl	801b6ec <rcl_guard_condition_get_rmw_handle>
 801c924:	b180      	cbz	r0, 801c948 <rcl_wait_set_add_timer+0x5c>
 801c926:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c928:	6842      	ldr	r2, [r0, #4]
 801c92a:	2000      	movs	r0, #0
 801c92c:	695b      	ldr	r3, [r3, #20]
 801c92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c932:	bd38      	pop	{r3, r4, r5, pc}
 801c934:	f240 3086 	movw	r0, #902	; 0x386
 801c938:	bd38      	pop	{r3, r4, r5, pc}
 801c93a:	200b      	movs	r0, #11
 801c93c:	4770      	bx	lr
 801c93e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c942:	bd38      	pop	{r3, r4, r5, pc}
 801c944:	200b      	movs	r0, #11
 801c946:	bd38      	pop	{r3, r4, r5, pc}
 801c948:	2001      	movs	r0, #1
 801c94a:	bd38      	pop	{r3, r4, r5, pc}

0801c94c <rcl_wait_set_add_client>:
 801c94c:	b318      	cbz	r0, 801c996 <rcl_wait_set_add_client+0x4a>
 801c94e:	b538      	push	{r3, r4, r5, lr}
 801c950:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c952:	4604      	mov	r4, r0
 801c954:	b30b      	cbz	r3, 801c99a <rcl_wait_set_add_client+0x4e>
 801c956:	b319      	cbz	r1, 801c9a0 <rcl_wait_set_add_client+0x54>
 801c958:	699d      	ldr	r5, [r3, #24]
 801c95a:	69c0      	ldr	r0, [r0, #28]
 801c95c:	4285      	cmp	r5, r0
 801c95e:	d217      	bcs.n	801c990 <rcl_wait_set_add_client+0x44>
 801c960:	1c68      	adds	r0, r5, #1
 801c962:	6198      	str	r0, [r3, #24]
 801c964:	69a3      	ldr	r3, [r4, #24]
 801c966:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c96a:	b102      	cbz	r2, 801c96e <rcl_wait_set_add_client+0x22>
 801c96c:	6015      	str	r5, [r2, #0]
 801c96e:	4608      	mov	r0, r1
 801c970:	f7fe fd00 	bl	801b374 <rcl_client_get_rmw_handle>
 801c974:	b150      	cbz	r0, 801c98c <rcl_wait_set_add_client+0x40>
 801c976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c978:	6842      	ldr	r2, [r0, #4]
 801c97a:	2000      	movs	r0, #0
 801c97c:	6a1b      	ldr	r3, [r3, #32]
 801c97e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c982:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c984:	69d3      	ldr	r3, [r2, #28]
 801c986:	3301      	adds	r3, #1
 801c988:	61d3      	str	r3, [r2, #28]
 801c98a:	bd38      	pop	{r3, r4, r5, pc}
 801c98c:	2001      	movs	r0, #1
 801c98e:	bd38      	pop	{r3, r4, r5, pc}
 801c990:	f240 3086 	movw	r0, #902	; 0x386
 801c994:	bd38      	pop	{r3, r4, r5, pc}
 801c996:	200b      	movs	r0, #11
 801c998:	4770      	bx	lr
 801c99a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c99e:	bd38      	pop	{r3, r4, r5, pc}
 801c9a0:	200b      	movs	r0, #11
 801c9a2:	bd38      	pop	{r3, r4, r5, pc}

0801c9a4 <rcl_wait_set_add_service>:
 801c9a4:	b318      	cbz	r0, 801c9ee <rcl_wait_set_add_service+0x4a>
 801c9a6:	b538      	push	{r3, r4, r5, lr}
 801c9a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c9aa:	4604      	mov	r4, r0
 801c9ac:	b30b      	cbz	r3, 801c9f2 <rcl_wait_set_add_service+0x4e>
 801c9ae:	b319      	cbz	r1, 801c9f8 <rcl_wait_set_add_service+0x54>
 801c9b0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c9b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c9b4:	4285      	cmp	r5, r0
 801c9b6:	d217      	bcs.n	801c9e8 <rcl_wait_set_add_service+0x44>
 801c9b8:	1c68      	adds	r0, r5, #1
 801c9ba:	6258      	str	r0, [r3, #36]	; 0x24
 801c9bc:	6a23      	ldr	r3, [r4, #32]
 801c9be:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c9c2:	b102      	cbz	r2, 801c9c6 <rcl_wait_set_add_service+0x22>
 801c9c4:	6015      	str	r5, [r2, #0]
 801c9c6:	4608      	mov	r0, r1
 801c9c8:	f7f7 f9f8 	bl	8013dbc <rcl_service_get_rmw_handle>
 801c9cc:	b150      	cbz	r0, 801c9e4 <rcl_wait_set_add_service+0x40>
 801c9ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c9d0:	6842      	ldr	r2, [r0, #4]
 801c9d2:	2000      	movs	r0, #0
 801c9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c9da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c9dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801c9de:	3301      	adds	r3, #1
 801c9e0:	6293      	str	r3, [r2, #40]	; 0x28
 801c9e2:	bd38      	pop	{r3, r4, r5, pc}
 801c9e4:	2001      	movs	r0, #1
 801c9e6:	bd38      	pop	{r3, r4, r5, pc}
 801c9e8:	f240 3086 	movw	r0, #902	; 0x386
 801c9ec:	bd38      	pop	{r3, r4, r5, pc}
 801c9ee:	200b      	movs	r0, #11
 801c9f0:	4770      	bx	lr
 801c9f2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c9f6:	bd38      	pop	{r3, r4, r5, pc}
 801c9f8:	200b      	movs	r0, #11
 801c9fa:	bd38      	pop	{r3, r4, r5, pc}
 801c9fc:	0000      	movs	r0, r0
	...

0801ca00 <rcl_wait>:
 801ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca04:	ed2d 8b02 	vpush	{d8}
 801ca08:	b08d      	sub	sp, #52	; 0x34
 801ca0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ca0e:	2800      	cmp	r0, #0
 801ca10:	f000 814f 	beq.w	801ccb2 <rcl_wait+0x2b2>
 801ca14:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801ca16:	4605      	mov	r5, r0
 801ca18:	2e00      	cmp	r6, #0
 801ca1a:	f000 811a 	beq.w	801cc52 <rcl_wait+0x252>
 801ca1e:	6843      	ldr	r3, [r0, #4]
 801ca20:	b983      	cbnz	r3, 801ca44 <rcl_wait+0x44>
 801ca22:	68eb      	ldr	r3, [r5, #12]
 801ca24:	b973      	cbnz	r3, 801ca44 <rcl_wait+0x44>
 801ca26:	696b      	ldr	r3, [r5, #20]
 801ca28:	b963      	cbnz	r3, 801ca44 <rcl_wait+0x44>
 801ca2a:	69eb      	ldr	r3, [r5, #28]
 801ca2c:	b953      	cbnz	r3, 801ca44 <rcl_wait+0x44>
 801ca2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ca30:	b943      	cbnz	r3, 801ca44 <rcl_wait+0x44>
 801ca32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801ca34:	b933      	cbnz	r3, 801ca44 <rcl_wait+0x44>
 801ca36:	f240 3085 	movw	r0, #901	; 0x385
 801ca3a:	b00d      	add	sp, #52	; 0x34
 801ca3c:	ecbd 8b02 	vpop	{d8}
 801ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca44:	9b04      	ldr	r3, [sp, #16]
 801ca46:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801ca48:	2b01      	cmp	r3, #1
 801ca4a:	9b05      	ldr	r3, [sp, #20]
 801ca4c:	f173 0300 	sbcs.w	r3, r3, #0
 801ca50:	f2c0 80f8 	blt.w	801cc44 <rcl_wait+0x244>
 801ca54:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801ca58:	2a00      	cmp	r2, #0
 801ca5a:	f000 810f 	beq.w	801cc7c <rcl_wait+0x27c>
 801ca5e:	2400      	movs	r4, #0
 801ca60:	4613      	mov	r3, r2
 801ca62:	f240 3921 	movw	r9, #801	; 0x321
 801ca66:	4632      	mov	r2, r6
 801ca68:	46a2      	mov	sl, r4
 801ca6a:	46a3      	mov	fp, r4
 801ca6c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801ccd0 <rcl_wait+0x2d0>
 801ca70:	e014      	b.n	801ca9c <rcl_wait+0x9c>
 801ca72:	2800      	cmp	r0, #0
 801ca74:	d1e1      	bne.n	801ca3a <rcl_wait+0x3a>
 801ca76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ca7a:	4542      	cmp	r2, r8
 801ca7c:	eb73 0107 	sbcs.w	r1, r3, r7
 801ca80:	da03      	bge.n	801ca8a <rcl_wait+0x8a>
 801ca82:	4690      	mov	r8, r2
 801ca84:	461f      	mov	r7, r3
 801ca86:	f04f 0b01 	mov.w	fp, #1
 801ca8a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ca8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ca8e:	3401      	adds	r4, #1
 801ca90:	f14a 0a00 	adc.w	sl, sl, #0
 801ca94:	429c      	cmp	r4, r3
 801ca96:	f17a 0100 	sbcs.w	r1, sl, #0
 801ca9a:	d228      	bcs.n	801caee <rcl_wait+0xee>
 801ca9c:	6928      	ldr	r0, [r5, #16]
 801ca9e:	a908      	add	r1, sp, #32
 801caa0:	00a6      	lsls	r6, r4, #2
 801caa2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801caa6:	2800      	cmp	r0, #0
 801caa8:	d0f1      	beq.n	801ca8e <rcl_wait+0x8e>
 801caaa:	68eb      	ldr	r3, [r5, #12]
 801caac:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cab0:	4423      	add	r3, r4
 801cab2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cab6:	f1be 0f00 	cmp.w	lr, #0
 801caba:	d006      	beq.n	801caca <rcl_wait+0xca>
 801cabc:	6913      	ldr	r3, [r2, #16]
 801cabe:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cac2:	3301      	adds	r3, #1
 801cac4:	6113      	str	r3, [r2, #16]
 801cac6:	692b      	ldr	r3, [r5, #16]
 801cac8:	5998      	ldr	r0, [r3, r6]
 801caca:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cace:	f7ff fa89 	bl	801bfe4 <rcl_timer_get_time_until_next_call>
 801cad2:	4548      	cmp	r0, r9
 801cad4:	d1cd      	bne.n	801ca72 <rcl_wait+0x72>
 801cad6:	692b      	ldr	r3, [r5, #16]
 801cad8:	2200      	movs	r2, #0
 801cada:	3401      	adds	r4, #1
 801cadc:	519a      	str	r2, [r3, r6]
 801cade:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cae0:	f14a 0a00 	adc.w	sl, sl, #0
 801cae4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801cae6:	429c      	cmp	r4, r3
 801cae8:	f17a 0100 	sbcs.w	r1, sl, #0
 801caec:	d3d6      	bcc.n	801ca9c <rcl_wait+0x9c>
 801caee:	4659      	mov	r1, fp
 801caf0:	4616      	mov	r6, r2
 801caf2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801caf6:	4313      	orrs	r3, r2
 801caf8:	f040 80b4 	bne.w	801cc64 <rcl_wait+0x264>
 801cafc:	2300      	movs	r3, #0
 801cafe:	2200      	movs	r2, #0
 801cb00:	460c      	mov	r4, r1
 801cb02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cb0a:	ab08      	add	r3, sp, #32
 801cb0c:	9302      	str	r3, [sp, #8]
 801cb0e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801cb12:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801cb14:	f106 0110 	add.w	r1, r6, #16
 801cb18:	9300      	str	r3, [sp, #0]
 801cb1a:	1d30      	adds	r0, r6, #4
 801cb1c:	f106 031c 	add.w	r3, r6, #28
 801cb20:	9201      	str	r2, [sp, #4]
 801cb22:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801cb26:	f001 fb81 	bl	801e22c <rmw_wait>
 801cb2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb2c:	4680      	mov	r8, r0
 801cb2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cb30:	b1e2      	cbz	r2, 801cb6c <rcl_wait+0x16c>
 801cb32:	f04f 0900 	mov.w	r9, #0
 801cb36:	464f      	mov	r7, r9
 801cb38:	692a      	ldr	r2, [r5, #16]
 801cb3a:	f10d 011f 	add.w	r1, sp, #31
 801cb3e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cb42:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cb46:	b160      	cbz	r0, 801cb62 <rcl_wait+0x162>
 801cb48:	f88d 701f 	strb.w	r7, [sp, #31]
 801cb4c:	f7ff fa0e 	bl	801bf6c <rcl_timer_is_ready>
 801cb50:	2800      	cmp	r0, #0
 801cb52:	f47f af72 	bne.w	801ca3a <rcl_wait+0x3a>
 801cb56:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cb5a:	b90b      	cbnz	r3, 801cb60 <rcl_wait+0x160>
 801cb5c:	692a      	ldr	r2, [r5, #16]
 801cb5e:	5193      	str	r3, [r2, r6]
 801cb60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb62:	f109 0901 	add.w	r9, r9, #1
 801cb66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cb68:	454a      	cmp	r2, r9
 801cb6a:	d8e5      	bhi.n	801cb38 <rcl_wait+0x138>
 801cb6c:	f038 0002 	bics.w	r0, r8, #2
 801cb70:	d176      	bne.n	801cc60 <rcl_wait+0x260>
 801cb72:	686f      	ldr	r7, [r5, #4]
 801cb74:	b17f      	cbz	r7, 801cb96 <rcl_wait+0x196>
 801cb76:	4602      	mov	r2, r0
 801cb78:	e002      	b.n	801cb80 <rcl_wait+0x180>
 801cb7a:	3201      	adds	r2, #1
 801cb7c:	42ba      	cmp	r2, r7
 801cb7e:	d00a      	beq.n	801cb96 <rcl_wait+0x196>
 801cb80:	6899      	ldr	r1, [r3, #8]
 801cb82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb86:	2900      	cmp	r1, #0
 801cb88:	d1f7      	bne.n	801cb7a <rcl_wait+0x17a>
 801cb8a:	682e      	ldr	r6, [r5, #0]
 801cb8c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb90:	3201      	adds	r2, #1
 801cb92:	42ba      	cmp	r2, r7
 801cb94:	d1f4      	bne.n	801cb80 <rcl_wait+0x180>
 801cb96:	68ef      	ldr	r7, [r5, #12]
 801cb98:	b17f      	cbz	r7, 801cbba <rcl_wait+0x1ba>
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	e002      	b.n	801cba4 <rcl_wait+0x1a4>
 801cb9e:	3201      	adds	r2, #1
 801cba0:	42ba      	cmp	r2, r7
 801cba2:	d00a      	beq.n	801cbba <rcl_wait+0x1ba>
 801cba4:	6959      	ldr	r1, [r3, #20]
 801cba6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cbaa:	2900      	cmp	r1, #0
 801cbac:	d1f7      	bne.n	801cb9e <rcl_wait+0x19e>
 801cbae:	68ae      	ldr	r6, [r5, #8]
 801cbb0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cbb4:	3201      	adds	r2, #1
 801cbb6:	42ba      	cmp	r2, r7
 801cbb8:	d1f4      	bne.n	801cba4 <rcl_wait+0x1a4>
 801cbba:	69ef      	ldr	r7, [r5, #28]
 801cbbc:	b17f      	cbz	r7, 801cbde <rcl_wait+0x1de>
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	e002      	b.n	801cbc8 <rcl_wait+0x1c8>
 801cbc2:	3201      	adds	r2, #1
 801cbc4:	42ba      	cmp	r2, r7
 801cbc6:	d00a      	beq.n	801cbde <rcl_wait+0x1de>
 801cbc8:	6a19      	ldr	r1, [r3, #32]
 801cbca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cbce:	2900      	cmp	r1, #0
 801cbd0:	d1f7      	bne.n	801cbc2 <rcl_wait+0x1c2>
 801cbd2:	69ae      	ldr	r6, [r5, #24]
 801cbd4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cbd8:	3201      	adds	r2, #1
 801cbda:	42ba      	cmp	r2, r7
 801cbdc:	d1f4      	bne.n	801cbc8 <rcl_wait+0x1c8>
 801cbde:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cbe0:	b17f      	cbz	r7, 801cc02 <rcl_wait+0x202>
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	e002      	b.n	801cbec <rcl_wait+0x1ec>
 801cbe6:	3201      	adds	r2, #1
 801cbe8:	42ba      	cmp	r2, r7
 801cbea:	d00a      	beq.n	801cc02 <rcl_wait+0x202>
 801cbec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cbee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cbf2:	2900      	cmp	r1, #0
 801cbf4:	d1f7      	bne.n	801cbe6 <rcl_wait+0x1e6>
 801cbf6:	6a2e      	ldr	r6, [r5, #32]
 801cbf8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cbfc:	3201      	adds	r2, #1
 801cbfe:	42ba      	cmp	r2, r7
 801cc00:	d1f4      	bne.n	801cbec <rcl_wait+0x1ec>
 801cc02:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cc04:	b17f      	cbz	r7, 801cc26 <rcl_wait+0x226>
 801cc06:	2200      	movs	r2, #0
 801cc08:	e002      	b.n	801cc10 <rcl_wait+0x210>
 801cc0a:	3201      	adds	r2, #1
 801cc0c:	42ba      	cmp	r2, r7
 801cc0e:	d00a      	beq.n	801cc26 <rcl_wait+0x226>
 801cc10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cc12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cc16:	2900      	cmp	r1, #0
 801cc18:	d1f7      	bne.n	801cc0a <rcl_wait+0x20a>
 801cc1a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801cc1c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cc20:	3201      	adds	r2, #1
 801cc22:	42ba      	cmp	r2, r7
 801cc24:	d1f4      	bne.n	801cc10 <rcl_wait+0x210>
 801cc26:	f1b8 0f02 	cmp.w	r8, #2
 801cc2a:	f47f af06 	bne.w	801ca3a <rcl_wait+0x3a>
 801cc2e:	f084 0301 	eor.w	r3, r4, #1
 801cc32:	b2db      	uxtb	r3, r3
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	bf18      	it	ne
 801cc38:	2002      	movne	r0, #2
 801cc3a:	b00d      	add	sp, #52	; 0x34
 801cc3c:	ecbd 8b02 	vpop	{d8}
 801cc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc44:	2a00      	cmp	r2, #0
 801cc46:	d03a      	beq.n	801ccbe <rcl_wait+0x2be>
 801cc48:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cc4c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cc50:	e705      	b.n	801ca5e <rcl_wait+0x5e>
 801cc52:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cc56:	b00d      	add	sp, #52	; 0x34
 801cc58:	ecbd 8b02 	vpop	{d8}
 801cc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc60:	2001      	movs	r0, #1
 801cc62:	e6ea      	b.n	801ca3a <rcl_wait+0x3a>
 801cc64:	9b04      	ldr	r3, [sp, #16]
 801cc66:	460c      	mov	r4, r1
 801cc68:	2b01      	cmp	r3, #1
 801cc6a:	9b05      	ldr	r3, [sp, #20]
 801cc6c:	f173 0300 	sbcs.w	r3, r3, #0
 801cc70:	bfa8      	it	ge
 801cc72:	f044 0401 	orrge.w	r4, r4, #1
 801cc76:	b914      	cbnz	r4, 801cc7e <rcl_wait+0x27e>
 801cc78:	4623      	mov	r3, r4
 801cc7a:	e747      	b.n	801cb0c <rcl_wait+0x10c>
 801cc7c:	4611      	mov	r1, r2
 801cc7e:	2f00      	cmp	r7, #0
 801cc80:	da02      	bge.n	801cc88 <rcl_wait+0x288>
 801cc82:	f04f 0800 	mov.w	r8, #0
 801cc86:	4647      	mov	r7, r8
 801cc88:	460c      	mov	r4, r1
 801cc8a:	4640      	mov	r0, r8
 801cc8c:	4639      	mov	r1, r7
 801cc8e:	a312      	add	r3, pc, #72	; (adr r3, 801ccd8 <rcl_wait+0x2d8>)
 801cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc94:	f7e3 fcf8 	bl	8000688 <__aeabi_ldivmod>
 801cc98:	a30f      	add	r3, pc, #60	; (adr r3, 801ccd8 <rcl_wait+0x2d8>)
 801cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cca2:	4640      	mov	r0, r8
 801cca4:	4639      	mov	r1, r7
 801cca6:	f7e3 fcef 	bl	8000688 <__aeabi_ldivmod>
 801ccaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ccae:	ab08      	add	r3, sp, #32
 801ccb0:	e72c      	b.n	801cb0c <rcl_wait+0x10c>
 801ccb2:	200b      	movs	r0, #11
 801ccb4:	b00d      	add	sp, #52	; 0x34
 801ccb6:	ecbd 8b02 	vpop	{d8}
 801ccba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccbe:	4611      	mov	r1, r2
 801ccc0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ccc4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ccc8:	e713      	b.n	801caf2 <rcl_wait+0xf2>
 801ccca:	bf00      	nop
 801cccc:	f3af 8000 	nop.w
 801ccd0:	ffffffff 	.word	0xffffffff
 801ccd4:	7fffffff 	.word	0x7fffffff
 801ccd8:	3b9aca00 	.word	0x3b9aca00
 801ccdc:	00000000 	.word	0x00000000

0801cce0 <rcl_action_take_goal_response>:
 801cce0:	2800      	cmp	r0, #0
 801cce2:	d039      	beq.n	801cd58 <rcl_action_take_goal_response+0x78>
 801cce4:	b570      	push	{r4, r5, r6, lr}
 801cce6:	4604      	mov	r4, r0
 801cce8:	6800      	ldr	r0, [r0, #0]
 801ccea:	b380      	cbz	r0, 801cd4e <rcl_action_take_goal_response+0x6e>
 801ccec:	460e      	mov	r6, r1
 801ccee:	4615      	mov	r5, r2
 801ccf0:	f7fe fbc6 	bl	801b480 <rcl_client_is_valid>
 801ccf4:	b330      	cbz	r0, 801cd44 <rcl_action_take_goal_response+0x64>
 801ccf6:	6820      	ldr	r0, [r4, #0]
 801ccf8:	3004      	adds	r0, #4
 801ccfa:	f7fe fbc1 	bl	801b480 <rcl_client_is_valid>
 801ccfe:	b308      	cbz	r0, 801cd44 <rcl_action_take_goal_response+0x64>
 801cd00:	6820      	ldr	r0, [r4, #0]
 801cd02:	3008      	adds	r0, #8
 801cd04:	f7fe fbbc 	bl	801b480 <rcl_client_is_valid>
 801cd08:	b1e0      	cbz	r0, 801cd44 <rcl_action_take_goal_response+0x64>
 801cd0a:	6820      	ldr	r0, [r4, #0]
 801cd0c:	300c      	adds	r0, #12
 801cd0e:	f7f7 f9fb 	bl	8014108 <rcl_subscription_is_valid>
 801cd12:	b1b8      	cbz	r0, 801cd44 <rcl_action_take_goal_response+0x64>
 801cd14:	6820      	ldr	r0, [r4, #0]
 801cd16:	3010      	adds	r0, #16
 801cd18:	f7f7 f9f6 	bl	8014108 <rcl_subscription_is_valid>
 801cd1c:	b190      	cbz	r0, 801cd44 <rcl_action_take_goal_response+0x64>
 801cd1e:	b1cd      	cbz	r5, 801cd54 <rcl_action_take_goal_response+0x74>
 801cd20:	b1c6      	cbz	r6, 801cd54 <rcl_action_take_goal_response+0x74>
 801cd22:	462a      	mov	r2, r5
 801cd24:	4631      	mov	r1, r6
 801cd26:	6820      	ldr	r0, [r4, #0]
 801cd28:	f7fe fb62 	bl	801b3f0 <rcl_take_response>
 801cd2c:	b148      	cbz	r0, 801cd42 <rcl_action_take_goal_response+0x62>
 801cd2e:	280a      	cmp	r0, #10
 801cd30:	d007      	beq.n	801cd42 <rcl_action_take_goal_response+0x62>
 801cd32:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cd36:	f640 0337 	movw	r3, #2103	; 0x837
 801cd3a:	4290      	cmp	r0, r2
 801cd3c:	bf0c      	ite	eq
 801cd3e:	4618      	moveq	r0, r3
 801cd40:	2001      	movne	r0, #1
 801cd42:	bd70      	pop	{r4, r5, r6, pc}
 801cd44:	f7f8 fa00 	bl	8015148 <rcutils_reset_error>
 801cd48:	f640 0036 	movw	r0, #2102	; 0x836
 801cd4c:	bd70      	pop	{r4, r5, r6, pc}
 801cd4e:	f640 0036 	movw	r0, #2102	; 0x836
 801cd52:	bd70      	pop	{r4, r5, r6, pc}
 801cd54:	200b      	movs	r0, #11
 801cd56:	bd70      	pop	{r4, r5, r6, pc}
 801cd58:	f640 0036 	movw	r0, #2102	; 0x836
 801cd5c:	4770      	bx	lr
 801cd5e:	bf00      	nop

0801cd60 <rcl_action_send_result_request>:
 801cd60:	b390      	cbz	r0, 801cdc8 <rcl_action_send_result_request+0x68>
 801cd62:	b570      	push	{r4, r5, r6, lr}
 801cd64:	4604      	mov	r4, r0
 801cd66:	6800      	ldr	r0, [r0, #0]
 801cd68:	b348      	cbz	r0, 801cdbe <rcl_action_send_result_request+0x5e>
 801cd6a:	460e      	mov	r6, r1
 801cd6c:	4615      	mov	r5, r2
 801cd6e:	f7fe fb87 	bl	801b480 <rcl_client_is_valid>
 801cd72:	b1f8      	cbz	r0, 801cdb4 <rcl_action_send_result_request+0x54>
 801cd74:	6820      	ldr	r0, [r4, #0]
 801cd76:	3004      	adds	r0, #4
 801cd78:	f7fe fb82 	bl	801b480 <rcl_client_is_valid>
 801cd7c:	b1d0      	cbz	r0, 801cdb4 <rcl_action_send_result_request+0x54>
 801cd7e:	6820      	ldr	r0, [r4, #0]
 801cd80:	3008      	adds	r0, #8
 801cd82:	f7fe fb7d 	bl	801b480 <rcl_client_is_valid>
 801cd86:	b1a8      	cbz	r0, 801cdb4 <rcl_action_send_result_request+0x54>
 801cd88:	6820      	ldr	r0, [r4, #0]
 801cd8a:	300c      	adds	r0, #12
 801cd8c:	f7f7 f9bc 	bl	8014108 <rcl_subscription_is_valid>
 801cd90:	b180      	cbz	r0, 801cdb4 <rcl_action_send_result_request+0x54>
 801cd92:	6820      	ldr	r0, [r4, #0]
 801cd94:	3010      	adds	r0, #16
 801cd96:	f7f7 f9b7 	bl	8014108 <rcl_subscription_is_valid>
 801cd9a:	b158      	cbz	r0, 801cdb4 <rcl_action_send_result_request+0x54>
 801cd9c:	b195      	cbz	r5, 801cdc4 <rcl_action_send_result_request+0x64>
 801cd9e:	b18e      	cbz	r6, 801cdc4 <rcl_action_send_result_request+0x64>
 801cda0:	6820      	ldr	r0, [r4, #0]
 801cda2:	462a      	mov	r2, r5
 801cda4:	4631      	mov	r1, r6
 801cda6:	3008      	adds	r0, #8
 801cda8:	f7fe faea 	bl	801b380 <rcl_send_request>
 801cdac:	3800      	subs	r0, #0
 801cdae:	bf18      	it	ne
 801cdb0:	2001      	movne	r0, #1
 801cdb2:	bd70      	pop	{r4, r5, r6, pc}
 801cdb4:	f7f8 f9c8 	bl	8015148 <rcutils_reset_error>
 801cdb8:	f640 0036 	movw	r0, #2102	; 0x836
 801cdbc:	bd70      	pop	{r4, r5, r6, pc}
 801cdbe:	f640 0036 	movw	r0, #2102	; 0x836
 801cdc2:	bd70      	pop	{r4, r5, r6, pc}
 801cdc4:	200b      	movs	r0, #11
 801cdc6:	bd70      	pop	{r4, r5, r6, pc}
 801cdc8:	f640 0036 	movw	r0, #2102	; 0x836
 801cdcc:	4770      	bx	lr
 801cdce:	bf00      	nop

0801cdd0 <rcl_action_take_result_response>:
 801cdd0:	2800      	cmp	r0, #0
 801cdd2:	d03a      	beq.n	801ce4a <rcl_action_take_result_response+0x7a>
 801cdd4:	b570      	push	{r4, r5, r6, lr}
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	6800      	ldr	r0, [r0, #0]
 801cdda:	b388      	cbz	r0, 801ce40 <rcl_action_take_result_response+0x70>
 801cddc:	460e      	mov	r6, r1
 801cdde:	4615      	mov	r5, r2
 801cde0:	f7fe fb4e 	bl	801b480 <rcl_client_is_valid>
 801cde4:	b338      	cbz	r0, 801ce36 <rcl_action_take_result_response+0x66>
 801cde6:	6820      	ldr	r0, [r4, #0]
 801cde8:	3004      	adds	r0, #4
 801cdea:	f7fe fb49 	bl	801b480 <rcl_client_is_valid>
 801cdee:	b310      	cbz	r0, 801ce36 <rcl_action_take_result_response+0x66>
 801cdf0:	6820      	ldr	r0, [r4, #0]
 801cdf2:	3008      	adds	r0, #8
 801cdf4:	f7fe fb44 	bl	801b480 <rcl_client_is_valid>
 801cdf8:	b1e8      	cbz	r0, 801ce36 <rcl_action_take_result_response+0x66>
 801cdfa:	6820      	ldr	r0, [r4, #0]
 801cdfc:	300c      	adds	r0, #12
 801cdfe:	f7f7 f983 	bl	8014108 <rcl_subscription_is_valid>
 801ce02:	b1c0      	cbz	r0, 801ce36 <rcl_action_take_result_response+0x66>
 801ce04:	6820      	ldr	r0, [r4, #0]
 801ce06:	3010      	adds	r0, #16
 801ce08:	f7f7 f97e 	bl	8014108 <rcl_subscription_is_valid>
 801ce0c:	b198      	cbz	r0, 801ce36 <rcl_action_take_result_response+0x66>
 801ce0e:	b1d5      	cbz	r5, 801ce46 <rcl_action_take_result_response+0x76>
 801ce10:	b1ce      	cbz	r6, 801ce46 <rcl_action_take_result_response+0x76>
 801ce12:	6820      	ldr	r0, [r4, #0]
 801ce14:	462a      	mov	r2, r5
 801ce16:	4631      	mov	r1, r6
 801ce18:	3008      	adds	r0, #8
 801ce1a:	f7fe fae9 	bl	801b3f0 <rcl_take_response>
 801ce1e:	b148      	cbz	r0, 801ce34 <rcl_action_take_result_response+0x64>
 801ce20:	280a      	cmp	r0, #10
 801ce22:	d007      	beq.n	801ce34 <rcl_action_take_result_response+0x64>
 801ce24:	f240 12f5 	movw	r2, #501	; 0x1f5
 801ce28:	f640 0337 	movw	r3, #2103	; 0x837
 801ce2c:	4290      	cmp	r0, r2
 801ce2e:	bf0c      	ite	eq
 801ce30:	4618      	moveq	r0, r3
 801ce32:	2001      	movne	r0, #1
 801ce34:	bd70      	pop	{r4, r5, r6, pc}
 801ce36:	f7f8 f987 	bl	8015148 <rcutils_reset_error>
 801ce3a:	f640 0036 	movw	r0, #2102	; 0x836
 801ce3e:	bd70      	pop	{r4, r5, r6, pc}
 801ce40:	f640 0036 	movw	r0, #2102	; 0x836
 801ce44:	bd70      	pop	{r4, r5, r6, pc}
 801ce46:	200b      	movs	r0, #11
 801ce48:	bd70      	pop	{r4, r5, r6, pc}
 801ce4a:	f640 0036 	movw	r0, #2102	; 0x836
 801ce4e:	4770      	bx	lr

0801ce50 <rcl_action_take_cancel_response>:
 801ce50:	2800      	cmp	r0, #0
 801ce52:	d03a      	beq.n	801ceca <rcl_action_take_cancel_response+0x7a>
 801ce54:	b570      	push	{r4, r5, r6, lr}
 801ce56:	4604      	mov	r4, r0
 801ce58:	6800      	ldr	r0, [r0, #0]
 801ce5a:	b388      	cbz	r0, 801cec0 <rcl_action_take_cancel_response+0x70>
 801ce5c:	460e      	mov	r6, r1
 801ce5e:	4615      	mov	r5, r2
 801ce60:	f7fe fb0e 	bl	801b480 <rcl_client_is_valid>
 801ce64:	b338      	cbz	r0, 801ceb6 <rcl_action_take_cancel_response+0x66>
 801ce66:	6820      	ldr	r0, [r4, #0]
 801ce68:	3004      	adds	r0, #4
 801ce6a:	f7fe fb09 	bl	801b480 <rcl_client_is_valid>
 801ce6e:	b310      	cbz	r0, 801ceb6 <rcl_action_take_cancel_response+0x66>
 801ce70:	6820      	ldr	r0, [r4, #0]
 801ce72:	3008      	adds	r0, #8
 801ce74:	f7fe fb04 	bl	801b480 <rcl_client_is_valid>
 801ce78:	b1e8      	cbz	r0, 801ceb6 <rcl_action_take_cancel_response+0x66>
 801ce7a:	6820      	ldr	r0, [r4, #0]
 801ce7c:	300c      	adds	r0, #12
 801ce7e:	f7f7 f943 	bl	8014108 <rcl_subscription_is_valid>
 801ce82:	b1c0      	cbz	r0, 801ceb6 <rcl_action_take_cancel_response+0x66>
 801ce84:	6820      	ldr	r0, [r4, #0]
 801ce86:	3010      	adds	r0, #16
 801ce88:	f7f7 f93e 	bl	8014108 <rcl_subscription_is_valid>
 801ce8c:	b198      	cbz	r0, 801ceb6 <rcl_action_take_cancel_response+0x66>
 801ce8e:	b1d5      	cbz	r5, 801cec6 <rcl_action_take_cancel_response+0x76>
 801ce90:	b1ce      	cbz	r6, 801cec6 <rcl_action_take_cancel_response+0x76>
 801ce92:	6820      	ldr	r0, [r4, #0]
 801ce94:	462a      	mov	r2, r5
 801ce96:	4631      	mov	r1, r6
 801ce98:	3004      	adds	r0, #4
 801ce9a:	f7fe faa9 	bl	801b3f0 <rcl_take_response>
 801ce9e:	b148      	cbz	r0, 801ceb4 <rcl_action_take_cancel_response+0x64>
 801cea0:	280a      	cmp	r0, #10
 801cea2:	d007      	beq.n	801ceb4 <rcl_action_take_cancel_response+0x64>
 801cea4:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cea8:	f640 0337 	movw	r3, #2103	; 0x837
 801ceac:	4290      	cmp	r0, r2
 801ceae:	bf0c      	ite	eq
 801ceb0:	4618      	moveq	r0, r3
 801ceb2:	2001      	movne	r0, #1
 801ceb4:	bd70      	pop	{r4, r5, r6, pc}
 801ceb6:	f7f8 f947 	bl	8015148 <rcutils_reset_error>
 801ceba:	f640 0036 	movw	r0, #2102	; 0x836
 801cebe:	bd70      	pop	{r4, r5, r6, pc}
 801cec0:	f640 0036 	movw	r0, #2102	; 0x836
 801cec4:	bd70      	pop	{r4, r5, r6, pc}
 801cec6:	200b      	movs	r0, #11
 801cec8:	bd70      	pop	{r4, r5, r6, pc}
 801ceca:	f640 0036 	movw	r0, #2102	; 0x836
 801cece:	4770      	bx	lr

0801ced0 <rcl_action_take_feedback>:
 801ced0:	2800      	cmp	r0, #0
 801ced2:	d038      	beq.n	801cf46 <rcl_action_take_feedback+0x76>
 801ced4:	b530      	push	{r4, r5, lr}
 801ced6:	4604      	mov	r4, r0
 801ced8:	6800      	ldr	r0, [r0, #0]
 801ceda:	b091      	sub	sp, #68	; 0x44
 801cedc:	b378      	cbz	r0, 801cf3e <rcl_action_take_feedback+0x6e>
 801cede:	460d      	mov	r5, r1
 801cee0:	f7fe face 	bl	801b480 <rcl_client_is_valid>
 801cee4:	b328      	cbz	r0, 801cf32 <rcl_action_take_feedback+0x62>
 801cee6:	6820      	ldr	r0, [r4, #0]
 801cee8:	3004      	adds	r0, #4
 801ceea:	f7fe fac9 	bl	801b480 <rcl_client_is_valid>
 801ceee:	b300      	cbz	r0, 801cf32 <rcl_action_take_feedback+0x62>
 801cef0:	6820      	ldr	r0, [r4, #0]
 801cef2:	3008      	adds	r0, #8
 801cef4:	f7fe fac4 	bl	801b480 <rcl_client_is_valid>
 801cef8:	b1d8      	cbz	r0, 801cf32 <rcl_action_take_feedback+0x62>
 801cefa:	6820      	ldr	r0, [r4, #0]
 801cefc:	300c      	adds	r0, #12
 801cefe:	f7f7 f903 	bl	8014108 <rcl_subscription_is_valid>
 801cf02:	b1b0      	cbz	r0, 801cf32 <rcl_action_take_feedback+0x62>
 801cf04:	6820      	ldr	r0, [r4, #0]
 801cf06:	3010      	adds	r0, #16
 801cf08:	f7f7 f8fe 	bl	8014108 <rcl_subscription_is_valid>
 801cf0c:	b188      	cbz	r0, 801cf32 <rcl_action_take_feedback+0x62>
 801cf0e:	b1ed      	cbz	r5, 801cf4c <rcl_action_take_feedback+0x7c>
 801cf10:	6820      	ldr	r0, [r4, #0]
 801cf12:	2300      	movs	r3, #0
 801cf14:	466a      	mov	r2, sp
 801cf16:	4629      	mov	r1, r5
 801cf18:	300c      	adds	r0, #12
 801cf1a:	f7f7 f899 	bl	8014050 <rcl_take>
 801cf1e:	b160      	cbz	r0, 801cf3a <rcl_action_take_feedback+0x6a>
 801cf20:	f240 1391 	movw	r3, #401	; 0x191
 801cf24:	4298      	cmp	r0, r3
 801cf26:	d014      	beq.n	801cf52 <rcl_action_take_feedback+0x82>
 801cf28:	280a      	cmp	r0, #10
 801cf2a:	bf18      	it	ne
 801cf2c:	2001      	movne	r0, #1
 801cf2e:	b011      	add	sp, #68	; 0x44
 801cf30:	bd30      	pop	{r4, r5, pc}
 801cf32:	f7f8 f909 	bl	8015148 <rcutils_reset_error>
 801cf36:	f640 0036 	movw	r0, #2102	; 0x836
 801cf3a:	b011      	add	sp, #68	; 0x44
 801cf3c:	bd30      	pop	{r4, r5, pc}
 801cf3e:	f640 0036 	movw	r0, #2102	; 0x836
 801cf42:	b011      	add	sp, #68	; 0x44
 801cf44:	bd30      	pop	{r4, r5, pc}
 801cf46:	f640 0036 	movw	r0, #2102	; 0x836
 801cf4a:	4770      	bx	lr
 801cf4c:	200b      	movs	r0, #11
 801cf4e:	b011      	add	sp, #68	; 0x44
 801cf50:	bd30      	pop	{r4, r5, pc}
 801cf52:	f640 0037 	movw	r0, #2103	; 0x837
 801cf56:	e7f0      	b.n	801cf3a <rcl_action_take_feedback+0x6a>

0801cf58 <rcl_action_wait_set_add_action_client>:
 801cf58:	2800      	cmp	r0, #0
 801cf5a:	d048      	beq.n	801cfee <rcl_action_wait_set_add_action_client+0x96>
 801cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf5e:	460c      	mov	r4, r1
 801cf60:	2900      	cmp	r1, #0
 801cf62:	d03c      	beq.n	801cfde <rcl_action_wait_set_add_action_client+0x86>
 801cf64:	4605      	mov	r5, r0
 801cf66:	6808      	ldr	r0, [r1, #0]
 801cf68:	2800      	cmp	r0, #0
 801cf6a:	d038      	beq.n	801cfde <rcl_action_wait_set_add_action_client+0x86>
 801cf6c:	4617      	mov	r7, r2
 801cf6e:	461e      	mov	r6, r3
 801cf70:	f7fe fa86 	bl	801b480 <rcl_client_is_valid>
 801cf74:	b3b0      	cbz	r0, 801cfe4 <rcl_action_wait_set_add_action_client+0x8c>
 801cf76:	6820      	ldr	r0, [r4, #0]
 801cf78:	3004      	adds	r0, #4
 801cf7a:	f7fe fa81 	bl	801b480 <rcl_client_is_valid>
 801cf7e:	b388      	cbz	r0, 801cfe4 <rcl_action_wait_set_add_action_client+0x8c>
 801cf80:	6820      	ldr	r0, [r4, #0]
 801cf82:	3008      	adds	r0, #8
 801cf84:	f7fe fa7c 	bl	801b480 <rcl_client_is_valid>
 801cf88:	b360      	cbz	r0, 801cfe4 <rcl_action_wait_set_add_action_client+0x8c>
 801cf8a:	6820      	ldr	r0, [r4, #0]
 801cf8c:	300c      	adds	r0, #12
 801cf8e:	f7f7 f8bb 	bl	8014108 <rcl_subscription_is_valid>
 801cf92:	b338      	cbz	r0, 801cfe4 <rcl_action_wait_set_add_action_client+0x8c>
 801cf94:	6820      	ldr	r0, [r4, #0]
 801cf96:	3010      	adds	r0, #16
 801cf98:	f7f7 f8b6 	bl	8014108 <rcl_subscription_is_valid>
 801cf9c:	b310      	cbz	r0, 801cfe4 <rcl_action_wait_set_add_action_client+0x8c>
 801cf9e:	6821      	ldr	r1, [r4, #0]
 801cfa0:	4628      	mov	r0, r5
 801cfa2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801cfa6:	f7ff fcd1 	bl	801c94c <rcl_wait_set_add_client>
 801cfaa:	b9b8      	cbnz	r0, 801cfdc <rcl_action_wait_set_add_action_client+0x84>
 801cfac:	6821      	ldr	r1, [r4, #0]
 801cfae:	4628      	mov	r0, r5
 801cfb0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801cfb4:	3104      	adds	r1, #4
 801cfb6:	f7ff fcc9 	bl	801c94c <rcl_wait_set_add_client>
 801cfba:	b978      	cbnz	r0, 801cfdc <rcl_action_wait_set_add_action_client+0x84>
 801cfbc:	6821      	ldr	r1, [r4, #0]
 801cfbe:	4628      	mov	r0, r5
 801cfc0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801cfc4:	3108      	adds	r1, #8
 801cfc6:	f7ff fcc1 	bl	801c94c <rcl_wait_set_add_client>
 801cfca:	b938      	cbnz	r0, 801cfdc <rcl_action_wait_set_add_action_client+0x84>
 801cfcc:	6821      	ldr	r1, [r4, #0]
 801cfce:	4628      	mov	r0, r5
 801cfd0:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801cfd4:	310c      	adds	r1, #12
 801cfd6:	f7ff f969 	bl	801c2ac <rcl_wait_set_add_subscription>
 801cfda:	b158      	cbz	r0, 801cff4 <rcl_action_wait_set_add_action_client+0x9c>
 801cfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfde:	f640 0036 	movw	r0, #2102	; 0x836
 801cfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfe4:	f7f8 f8b0 	bl	8015148 <rcutils_reset_error>
 801cfe8:	f640 0036 	movw	r0, #2102	; 0x836
 801cfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfee:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cff2:	4770      	bx	lr
 801cff4:	6821      	ldr	r1, [r4, #0]
 801cff6:	4628      	mov	r0, r5
 801cff8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801cffc:	3110      	adds	r1, #16
 801cffe:	f7ff f955 	bl	801c2ac <rcl_wait_set_add_subscription>
 801d002:	2800      	cmp	r0, #0
 801d004:	d1ea      	bne.n	801cfdc <rcl_action_wait_set_add_action_client+0x84>
 801d006:	b11f      	cbz	r7, 801d010 <rcl_action_wait_set_add_action_client+0xb8>
 801d008:	6823      	ldr	r3, [r4, #0]
 801d00a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801d00e:	603b      	str	r3, [r7, #0]
 801d010:	2e00      	cmp	r6, #0
 801d012:	d0e3      	beq.n	801cfdc <rcl_action_wait_set_add_action_client+0x84>
 801d014:	6823      	ldr	r3, [r4, #0]
 801d016:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801d01a:	6033      	str	r3, [r6, #0]
 801d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d01e:	bf00      	nop

0801d020 <rcl_action_client_wait_set_get_entities_ready>:
 801d020:	2800      	cmp	r0, #0
 801d022:	d050      	beq.n	801d0c6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d028:	460c      	mov	r4, r1
 801d02a:	2900      	cmp	r1, #0
 801d02c:	d03e      	beq.n	801d0ac <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d02e:	4605      	mov	r5, r0
 801d030:	6808      	ldr	r0, [r1, #0]
 801d032:	2800      	cmp	r0, #0
 801d034:	d03a      	beq.n	801d0ac <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d036:	4616      	mov	r6, r2
 801d038:	461f      	mov	r7, r3
 801d03a:	f7fe fa21 	bl	801b480 <rcl_client_is_valid>
 801d03e:	2800      	cmp	r0, #0
 801d040:	d038      	beq.n	801d0b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d042:	6820      	ldr	r0, [r4, #0]
 801d044:	3004      	adds	r0, #4
 801d046:	f7fe fa1b 	bl	801b480 <rcl_client_is_valid>
 801d04a:	2800      	cmp	r0, #0
 801d04c:	d032      	beq.n	801d0b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d04e:	6820      	ldr	r0, [r4, #0]
 801d050:	3008      	adds	r0, #8
 801d052:	f7fe fa15 	bl	801b480 <rcl_client_is_valid>
 801d056:	b368      	cbz	r0, 801d0b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d058:	6820      	ldr	r0, [r4, #0]
 801d05a:	300c      	adds	r0, #12
 801d05c:	f7f7 f854 	bl	8014108 <rcl_subscription_is_valid>
 801d060:	b340      	cbz	r0, 801d0b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d062:	6820      	ldr	r0, [r4, #0]
 801d064:	3010      	adds	r0, #16
 801d066:	f7f7 f84f 	bl	8014108 <rcl_subscription_is_valid>
 801d06a:	b318      	cbz	r0, 801d0b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d06c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d070:	2a00      	cmp	r2, #0
 801d072:	bf18      	it	ne
 801d074:	2b00      	cmpne	r3, #0
 801d076:	9b08      	ldr	r3, [sp, #32]
 801d078:	bf0c      	ite	eq
 801d07a:	2101      	moveq	r1, #1
 801d07c:	2100      	movne	r1, #0
 801d07e:	2b00      	cmp	r3, #0
 801d080:	bf08      	it	eq
 801d082:	f041 0101 	orreq.w	r1, r1, #1
 801d086:	2f00      	cmp	r7, #0
 801d088:	bf08      	it	eq
 801d08a:	f041 0101 	orreq.w	r1, r1, #1
 801d08e:	b9b9      	cbnz	r1, 801d0c0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d090:	b1b6      	cbz	r6, 801d0c0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d092:	6823      	ldr	r3, [r4, #0]
 801d094:	686c      	ldr	r4, [r5, #4]
 801d096:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801d09a:	428a      	cmp	r2, r1
 801d09c:	4610      	mov	r0, r2
 801d09e:	bf38      	it	cc
 801d0a0:	4608      	movcc	r0, r1
 801d0a2:	4284      	cmp	r4, r0
 801d0a4:	d812      	bhi.n	801d0cc <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d0a6:	2001      	movs	r0, #1
 801d0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0ac:	f640 0036 	movw	r0, #2102	; 0x836
 801d0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0b4:	f7f8 f848 	bl	8015148 <rcutils_reset_error>
 801d0b8:	f640 0036 	movw	r0, #2102	; 0x836
 801d0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0c0:	200b      	movs	r0, #11
 801d0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0c6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d0ca:	4770      	bx	lr
 801d0cc:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d0d0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d0d4:	45f0      	cmp	r8, lr
 801d0d6:	4640      	mov	r0, r8
 801d0d8:	69ec      	ldr	r4, [r5, #28]
 801d0da:	bf38      	it	cc
 801d0dc:	4670      	movcc	r0, lr
 801d0de:	4560      	cmp	r0, ip
 801d0e0:	bf38      	it	cc
 801d0e2:	4660      	movcc	r0, ip
 801d0e4:	4284      	cmp	r4, r0
 801d0e6:	d9de      	bls.n	801d0a6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d0e8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d0ec:	682d      	ldr	r5, [r5, #0]
 801d0ee:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d0f2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d0f6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d0fa:	1a18      	subs	r0, r3, r0
 801d0fc:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d100:	f103 0c0c 	add.w	ip, r3, #12
 801d104:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d108:	fab0 f080 	clz	r0, r0
 801d10c:	eba5 050c 	sub.w	r5, r5, ip
 801d110:	0940      	lsrs	r0, r0, #5
 801d112:	fab5 f585 	clz	r5, r5
 801d116:	096d      	lsrs	r5, r5, #5
 801d118:	7035      	strb	r5, [r6, #0]
 801d11a:	f103 0510 	add.w	r5, r3, #16
 801d11e:	1b64      	subs	r4, r4, r5
 801d120:	9d08      	ldr	r5, [sp, #32]
 801d122:	fab4 f484 	clz	r4, r4
 801d126:	0964      	lsrs	r4, r4, #5
 801d128:	703c      	strb	r4, [r7, #0]
 801d12a:	1d1c      	adds	r4, r3, #4
 801d12c:	3308      	adds	r3, #8
 801d12e:	7028      	strb	r0, [r5, #0]
 801d130:	1b09      	subs	r1, r1, r4
 801d132:	2000      	movs	r0, #0
 801d134:	1ad3      	subs	r3, r2, r3
 801d136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d138:	fab1 f181 	clz	r1, r1
 801d13c:	fab3 f383 	clz	r3, r3
 801d140:	0949      	lsrs	r1, r1, #5
 801d142:	095b      	lsrs	r3, r3, #5
 801d144:	7011      	strb	r1, [r2, #0]
 801d146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d148:	7013      	strb	r3, [r2, #0]
 801d14a:	e7b1      	b.n	801d0b0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d14c <rcl_action_take_goal_request>:
 801d14c:	2800      	cmp	r0, #0
 801d14e:	d039      	beq.n	801d1c4 <rcl_action_take_goal_request+0x78>
 801d150:	b570      	push	{r4, r5, r6, lr}
 801d152:	4604      	mov	r4, r0
 801d154:	6800      	ldr	r0, [r0, #0]
 801d156:	b380      	cbz	r0, 801d1ba <rcl_action_take_goal_request+0x6e>
 801d158:	460e      	mov	r6, r1
 801d15a:	4615      	mov	r5, r2
 801d15c:	f7f6 fe8c 	bl	8013e78 <rcl_service_is_valid>
 801d160:	b330      	cbz	r0, 801d1b0 <rcl_action_take_goal_request+0x64>
 801d162:	6820      	ldr	r0, [r4, #0]
 801d164:	3004      	adds	r0, #4
 801d166:	f7f6 fe87 	bl	8013e78 <rcl_service_is_valid>
 801d16a:	b308      	cbz	r0, 801d1b0 <rcl_action_take_goal_request+0x64>
 801d16c:	6820      	ldr	r0, [r4, #0]
 801d16e:	3008      	adds	r0, #8
 801d170:	f7f6 fe82 	bl	8013e78 <rcl_service_is_valid>
 801d174:	b1e0      	cbz	r0, 801d1b0 <rcl_action_take_goal_request+0x64>
 801d176:	6820      	ldr	r0, [r4, #0]
 801d178:	300c      	adds	r0, #12
 801d17a:	f7f6 fd41 	bl	8013c00 <rcl_publisher_is_valid>
 801d17e:	b1b8      	cbz	r0, 801d1b0 <rcl_action_take_goal_request+0x64>
 801d180:	6820      	ldr	r0, [r4, #0]
 801d182:	3010      	adds	r0, #16
 801d184:	f7f6 fd3c 	bl	8013c00 <rcl_publisher_is_valid>
 801d188:	b190      	cbz	r0, 801d1b0 <rcl_action_take_goal_request+0x64>
 801d18a:	b1cd      	cbz	r5, 801d1c0 <rcl_action_take_goal_request+0x74>
 801d18c:	b1c6      	cbz	r6, 801d1c0 <rcl_action_take_goal_request+0x74>
 801d18e:	462a      	mov	r2, r5
 801d190:	4631      	mov	r1, r6
 801d192:	6820      	ldr	r0, [r4, #0]
 801d194:	f7f6 fe18 	bl	8013dc8 <rcl_take_request>
 801d198:	b148      	cbz	r0, 801d1ae <rcl_action_take_goal_request+0x62>
 801d19a:	280a      	cmp	r0, #10
 801d19c:	d007      	beq.n	801d1ae <rcl_action_take_goal_request+0x62>
 801d19e:	f240 2259 	movw	r2, #601	; 0x259
 801d1a2:	f640 0399 	movw	r3, #2201	; 0x899
 801d1a6:	4290      	cmp	r0, r2
 801d1a8:	bf0c      	ite	eq
 801d1aa:	4618      	moveq	r0, r3
 801d1ac:	2001      	movne	r0, #1
 801d1ae:	bd70      	pop	{r4, r5, r6, pc}
 801d1b0:	f7f7 ffca 	bl	8015148 <rcutils_reset_error>
 801d1b4:	f640 0098 	movw	r0, #2200	; 0x898
 801d1b8:	bd70      	pop	{r4, r5, r6, pc}
 801d1ba:	f640 0098 	movw	r0, #2200	; 0x898
 801d1be:	bd70      	pop	{r4, r5, r6, pc}
 801d1c0:	200b      	movs	r0, #11
 801d1c2:	bd70      	pop	{r4, r5, r6, pc}
 801d1c4:	f640 0098 	movw	r0, #2200	; 0x898
 801d1c8:	4770      	bx	lr
 801d1ca:	bf00      	nop

0801d1cc <rcl_action_send_goal_response>:
 801d1cc:	b388      	cbz	r0, 801d232 <rcl_action_send_goal_response+0x66>
 801d1ce:	b570      	push	{r4, r5, r6, lr}
 801d1d0:	4604      	mov	r4, r0
 801d1d2:	6800      	ldr	r0, [r0, #0]
 801d1d4:	b340      	cbz	r0, 801d228 <rcl_action_send_goal_response+0x5c>
 801d1d6:	460e      	mov	r6, r1
 801d1d8:	4615      	mov	r5, r2
 801d1da:	f7f6 fe4d 	bl	8013e78 <rcl_service_is_valid>
 801d1de:	b1f0      	cbz	r0, 801d21e <rcl_action_send_goal_response+0x52>
 801d1e0:	6820      	ldr	r0, [r4, #0]
 801d1e2:	3004      	adds	r0, #4
 801d1e4:	f7f6 fe48 	bl	8013e78 <rcl_service_is_valid>
 801d1e8:	b1c8      	cbz	r0, 801d21e <rcl_action_send_goal_response+0x52>
 801d1ea:	6820      	ldr	r0, [r4, #0]
 801d1ec:	3008      	adds	r0, #8
 801d1ee:	f7f6 fe43 	bl	8013e78 <rcl_service_is_valid>
 801d1f2:	b1a0      	cbz	r0, 801d21e <rcl_action_send_goal_response+0x52>
 801d1f4:	6820      	ldr	r0, [r4, #0]
 801d1f6:	300c      	adds	r0, #12
 801d1f8:	f7f6 fd02 	bl	8013c00 <rcl_publisher_is_valid>
 801d1fc:	b178      	cbz	r0, 801d21e <rcl_action_send_goal_response+0x52>
 801d1fe:	6820      	ldr	r0, [r4, #0]
 801d200:	3010      	adds	r0, #16
 801d202:	f7f6 fcfd 	bl	8013c00 <rcl_publisher_is_valid>
 801d206:	b150      	cbz	r0, 801d21e <rcl_action_send_goal_response+0x52>
 801d208:	b18d      	cbz	r5, 801d22e <rcl_action_send_goal_response+0x62>
 801d20a:	b186      	cbz	r6, 801d22e <rcl_action_send_goal_response+0x62>
 801d20c:	462a      	mov	r2, r5
 801d20e:	4631      	mov	r1, r6
 801d210:	6820      	ldr	r0, [r4, #0]
 801d212:	f7f6 fe19 	bl	8013e48 <rcl_send_response>
 801d216:	3800      	subs	r0, #0
 801d218:	bf18      	it	ne
 801d21a:	2001      	movne	r0, #1
 801d21c:	bd70      	pop	{r4, r5, r6, pc}
 801d21e:	f7f7 ff93 	bl	8015148 <rcutils_reset_error>
 801d222:	f640 0098 	movw	r0, #2200	; 0x898
 801d226:	bd70      	pop	{r4, r5, r6, pc}
 801d228:	f640 0098 	movw	r0, #2200	; 0x898
 801d22c:	bd70      	pop	{r4, r5, r6, pc}
 801d22e:	200b      	movs	r0, #11
 801d230:	bd70      	pop	{r4, r5, r6, pc}
 801d232:	f640 0098 	movw	r0, #2200	; 0x898
 801d236:	4770      	bx	lr

0801d238 <rcl_action_take_result_request>:
 801d238:	2800      	cmp	r0, #0
 801d23a:	d03a      	beq.n	801d2b2 <rcl_action_take_result_request+0x7a>
 801d23c:	b570      	push	{r4, r5, r6, lr}
 801d23e:	4604      	mov	r4, r0
 801d240:	6800      	ldr	r0, [r0, #0]
 801d242:	b388      	cbz	r0, 801d2a8 <rcl_action_take_result_request+0x70>
 801d244:	460e      	mov	r6, r1
 801d246:	4615      	mov	r5, r2
 801d248:	f7f6 fe16 	bl	8013e78 <rcl_service_is_valid>
 801d24c:	b338      	cbz	r0, 801d29e <rcl_action_take_result_request+0x66>
 801d24e:	6820      	ldr	r0, [r4, #0]
 801d250:	3004      	adds	r0, #4
 801d252:	f7f6 fe11 	bl	8013e78 <rcl_service_is_valid>
 801d256:	b310      	cbz	r0, 801d29e <rcl_action_take_result_request+0x66>
 801d258:	6820      	ldr	r0, [r4, #0]
 801d25a:	3008      	adds	r0, #8
 801d25c:	f7f6 fe0c 	bl	8013e78 <rcl_service_is_valid>
 801d260:	b1e8      	cbz	r0, 801d29e <rcl_action_take_result_request+0x66>
 801d262:	6820      	ldr	r0, [r4, #0]
 801d264:	300c      	adds	r0, #12
 801d266:	f7f6 fccb 	bl	8013c00 <rcl_publisher_is_valid>
 801d26a:	b1c0      	cbz	r0, 801d29e <rcl_action_take_result_request+0x66>
 801d26c:	6820      	ldr	r0, [r4, #0]
 801d26e:	3010      	adds	r0, #16
 801d270:	f7f6 fcc6 	bl	8013c00 <rcl_publisher_is_valid>
 801d274:	b198      	cbz	r0, 801d29e <rcl_action_take_result_request+0x66>
 801d276:	b1d5      	cbz	r5, 801d2ae <rcl_action_take_result_request+0x76>
 801d278:	b1ce      	cbz	r6, 801d2ae <rcl_action_take_result_request+0x76>
 801d27a:	6820      	ldr	r0, [r4, #0]
 801d27c:	462a      	mov	r2, r5
 801d27e:	4631      	mov	r1, r6
 801d280:	3008      	adds	r0, #8
 801d282:	f7f6 fda1 	bl	8013dc8 <rcl_take_request>
 801d286:	b148      	cbz	r0, 801d29c <rcl_action_take_result_request+0x64>
 801d288:	280a      	cmp	r0, #10
 801d28a:	d007      	beq.n	801d29c <rcl_action_take_result_request+0x64>
 801d28c:	f240 2259 	movw	r2, #601	; 0x259
 801d290:	f640 0399 	movw	r3, #2201	; 0x899
 801d294:	4290      	cmp	r0, r2
 801d296:	bf0c      	ite	eq
 801d298:	4618      	moveq	r0, r3
 801d29a:	2001      	movne	r0, #1
 801d29c:	bd70      	pop	{r4, r5, r6, pc}
 801d29e:	f7f7 ff53 	bl	8015148 <rcutils_reset_error>
 801d2a2:	f640 0098 	movw	r0, #2200	; 0x898
 801d2a6:	bd70      	pop	{r4, r5, r6, pc}
 801d2a8:	f640 0098 	movw	r0, #2200	; 0x898
 801d2ac:	bd70      	pop	{r4, r5, r6, pc}
 801d2ae:	200b      	movs	r0, #11
 801d2b0:	bd70      	pop	{r4, r5, r6, pc}
 801d2b2:	f640 0098 	movw	r0, #2200	; 0x898
 801d2b6:	4770      	bx	lr

0801d2b8 <rcl_action_take_cancel_request>:
 801d2b8:	2800      	cmp	r0, #0
 801d2ba:	d03a      	beq.n	801d332 <rcl_action_take_cancel_request+0x7a>
 801d2bc:	b570      	push	{r4, r5, r6, lr}
 801d2be:	4604      	mov	r4, r0
 801d2c0:	6800      	ldr	r0, [r0, #0]
 801d2c2:	b388      	cbz	r0, 801d328 <rcl_action_take_cancel_request+0x70>
 801d2c4:	460e      	mov	r6, r1
 801d2c6:	4615      	mov	r5, r2
 801d2c8:	f7f6 fdd6 	bl	8013e78 <rcl_service_is_valid>
 801d2cc:	b338      	cbz	r0, 801d31e <rcl_action_take_cancel_request+0x66>
 801d2ce:	6820      	ldr	r0, [r4, #0]
 801d2d0:	3004      	adds	r0, #4
 801d2d2:	f7f6 fdd1 	bl	8013e78 <rcl_service_is_valid>
 801d2d6:	b310      	cbz	r0, 801d31e <rcl_action_take_cancel_request+0x66>
 801d2d8:	6820      	ldr	r0, [r4, #0]
 801d2da:	3008      	adds	r0, #8
 801d2dc:	f7f6 fdcc 	bl	8013e78 <rcl_service_is_valid>
 801d2e0:	b1e8      	cbz	r0, 801d31e <rcl_action_take_cancel_request+0x66>
 801d2e2:	6820      	ldr	r0, [r4, #0]
 801d2e4:	300c      	adds	r0, #12
 801d2e6:	f7f6 fc8b 	bl	8013c00 <rcl_publisher_is_valid>
 801d2ea:	b1c0      	cbz	r0, 801d31e <rcl_action_take_cancel_request+0x66>
 801d2ec:	6820      	ldr	r0, [r4, #0]
 801d2ee:	3010      	adds	r0, #16
 801d2f0:	f7f6 fc86 	bl	8013c00 <rcl_publisher_is_valid>
 801d2f4:	b198      	cbz	r0, 801d31e <rcl_action_take_cancel_request+0x66>
 801d2f6:	b1d5      	cbz	r5, 801d32e <rcl_action_take_cancel_request+0x76>
 801d2f8:	b1ce      	cbz	r6, 801d32e <rcl_action_take_cancel_request+0x76>
 801d2fa:	6820      	ldr	r0, [r4, #0]
 801d2fc:	462a      	mov	r2, r5
 801d2fe:	4631      	mov	r1, r6
 801d300:	3004      	adds	r0, #4
 801d302:	f7f6 fd61 	bl	8013dc8 <rcl_take_request>
 801d306:	b148      	cbz	r0, 801d31c <rcl_action_take_cancel_request+0x64>
 801d308:	280a      	cmp	r0, #10
 801d30a:	d007      	beq.n	801d31c <rcl_action_take_cancel_request+0x64>
 801d30c:	f240 2259 	movw	r2, #601	; 0x259
 801d310:	f640 0399 	movw	r3, #2201	; 0x899
 801d314:	4290      	cmp	r0, r2
 801d316:	bf0c      	ite	eq
 801d318:	4618      	moveq	r0, r3
 801d31a:	2001      	movne	r0, #1
 801d31c:	bd70      	pop	{r4, r5, r6, pc}
 801d31e:	f7f7 ff13 	bl	8015148 <rcutils_reset_error>
 801d322:	f640 0098 	movw	r0, #2200	; 0x898
 801d326:	bd70      	pop	{r4, r5, r6, pc}
 801d328:	f640 0098 	movw	r0, #2200	; 0x898
 801d32c:	bd70      	pop	{r4, r5, r6, pc}
 801d32e:	200b      	movs	r0, #11
 801d330:	bd70      	pop	{r4, r5, r6, pc}
 801d332:	f640 0098 	movw	r0, #2200	; 0x898
 801d336:	4770      	bx	lr

0801d338 <rcl_action_send_cancel_response>:
 801d338:	b390      	cbz	r0, 801d3a0 <rcl_action_send_cancel_response+0x68>
 801d33a:	b570      	push	{r4, r5, r6, lr}
 801d33c:	4604      	mov	r4, r0
 801d33e:	6800      	ldr	r0, [r0, #0]
 801d340:	b348      	cbz	r0, 801d396 <rcl_action_send_cancel_response+0x5e>
 801d342:	460e      	mov	r6, r1
 801d344:	4615      	mov	r5, r2
 801d346:	f7f6 fd97 	bl	8013e78 <rcl_service_is_valid>
 801d34a:	b1f8      	cbz	r0, 801d38c <rcl_action_send_cancel_response+0x54>
 801d34c:	6820      	ldr	r0, [r4, #0]
 801d34e:	3004      	adds	r0, #4
 801d350:	f7f6 fd92 	bl	8013e78 <rcl_service_is_valid>
 801d354:	b1d0      	cbz	r0, 801d38c <rcl_action_send_cancel_response+0x54>
 801d356:	6820      	ldr	r0, [r4, #0]
 801d358:	3008      	adds	r0, #8
 801d35a:	f7f6 fd8d 	bl	8013e78 <rcl_service_is_valid>
 801d35e:	b1a8      	cbz	r0, 801d38c <rcl_action_send_cancel_response+0x54>
 801d360:	6820      	ldr	r0, [r4, #0]
 801d362:	300c      	adds	r0, #12
 801d364:	f7f6 fc4c 	bl	8013c00 <rcl_publisher_is_valid>
 801d368:	b180      	cbz	r0, 801d38c <rcl_action_send_cancel_response+0x54>
 801d36a:	6820      	ldr	r0, [r4, #0]
 801d36c:	3010      	adds	r0, #16
 801d36e:	f7f6 fc47 	bl	8013c00 <rcl_publisher_is_valid>
 801d372:	b158      	cbz	r0, 801d38c <rcl_action_send_cancel_response+0x54>
 801d374:	b195      	cbz	r5, 801d39c <rcl_action_send_cancel_response+0x64>
 801d376:	b18e      	cbz	r6, 801d39c <rcl_action_send_cancel_response+0x64>
 801d378:	6820      	ldr	r0, [r4, #0]
 801d37a:	462a      	mov	r2, r5
 801d37c:	4631      	mov	r1, r6
 801d37e:	3004      	adds	r0, #4
 801d380:	f7f6 fd62 	bl	8013e48 <rcl_send_response>
 801d384:	3800      	subs	r0, #0
 801d386:	bf18      	it	ne
 801d388:	2001      	movne	r0, #1
 801d38a:	bd70      	pop	{r4, r5, r6, pc}
 801d38c:	f7f7 fedc 	bl	8015148 <rcutils_reset_error>
 801d390:	f640 0098 	movw	r0, #2200	; 0x898
 801d394:	bd70      	pop	{r4, r5, r6, pc}
 801d396:	f640 0098 	movw	r0, #2200	; 0x898
 801d39a:	bd70      	pop	{r4, r5, r6, pc}
 801d39c:	200b      	movs	r0, #11
 801d39e:	bd70      	pop	{r4, r5, r6, pc}
 801d3a0:	f640 0098 	movw	r0, #2200	; 0x898
 801d3a4:	4770      	bx	lr
 801d3a6:	bf00      	nop

0801d3a8 <rcl_action_wait_set_add_action_server>:
 801d3a8:	2800      	cmp	r0, #0
 801d3aa:	d04d      	beq.n	801d448 <rcl_action_wait_set_add_action_server+0xa0>
 801d3ac:	b570      	push	{r4, r5, r6, lr}
 801d3ae:	460c      	mov	r4, r1
 801d3b0:	b159      	cbz	r1, 801d3ca <rcl_action_wait_set_add_action_server+0x22>
 801d3b2:	4605      	mov	r5, r0
 801d3b4:	6808      	ldr	r0, [r1, #0]
 801d3b6:	b140      	cbz	r0, 801d3ca <rcl_action_wait_set_add_action_server+0x22>
 801d3b8:	4616      	mov	r6, r2
 801d3ba:	f7f6 fd5d 	bl	8013e78 <rcl_service_is_valid>
 801d3be:	b120      	cbz	r0, 801d3ca <rcl_action_wait_set_add_action_server+0x22>
 801d3c0:	6820      	ldr	r0, [r4, #0]
 801d3c2:	3004      	adds	r0, #4
 801d3c4:	f7f6 fd58 	bl	8013e78 <rcl_service_is_valid>
 801d3c8:	b910      	cbnz	r0, 801d3d0 <rcl_action_wait_set_add_action_server+0x28>
 801d3ca:	f640 0098 	movw	r0, #2200	; 0x898
 801d3ce:	bd70      	pop	{r4, r5, r6, pc}
 801d3d0:	6820      	ldr	r0, [r4, #0]
 801d3d2:	3008      	adds	r0, #8
 801d3d4:	f7f6 fd50 	bl	8013e78 <rcl_service_is_valid>
 801d3d8:	2800      	cmp	r0, #0
 801d3da:	d0f6      	beq.n	801d3ca <rcl_action_wait_set_add_action_server+0x22>
 801d3dc:	6820      	ldr	r0, [r4, #0]
 801d3de:	300c      	adds	r0, #12
 801d3e0:	f7f6 fc26 	bl	8013c30 <rcl_publisher_is_valid_except_context>
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	d0f0      	beq.n	801d3ca <rcl_action_wait_set_add_action_server+0x22>
 801d3e8:	6820      	ldr	r0, [r4, #0]
 801d3ea:	3010      	adds	r0, #16
 801d3ec:	f7f6 fc20 	bl	8013c30 <rcl_publisher_is_valid_except_context>
 801d3f0:	2800      	cmp	r0, #0
 801d3f2:	d0ea      	beq.n	801d3ca <rcl_action_wait_set_add_action_server+0x22>
 801d3f4:	6821      	ldr	r1, [r4, #0]
 801d3f6:	4628      	mov	r0, r5
 801d3f8:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d3fc:	f7ff fad2 	bl	801c9a4 <rcl_wait_set_add_service>
 801d400:	2800      	cmp	r0, #0
 801d402:	d1e4      	bne.n	801d3ce <rcl_action_wait_set_add_action_server+0x26>
 801d404:	6821      	ldr	r1, [r4, #0]
 801d406:	4628      	mov	r0, r5
 801d408:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d40c:	3104      	adds	r1, #4
 801d40e:	f7ff fac9 	bl	801c9a4 <rcl_wait_set_add_service>
 801d412:	2800      	cmp	r0, #0
 801d414:	d1db      	bne.n	801d3ce <rcl_action_wait_set_add_action_server+0x26>
 801d416:	6821      	ldr	r1, [r4, #0]
 801d418:	4628      	mov	r0, r5
 801d41a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d41e:	3108      	adds	r1, #8
 801d420:	f7ff fac0 	bl	801c9a4 <rcl_wait_set_add_service>
 801d424:	2800      	cmp	r0, #0
 801d426:	d1d2      	bne.n	801d3ce <rcl_action_wait_set_add_action_server+0x26>
 801d428:	6821      	ldr	r1, [r4, #0]
 801d42a:	4628      	mov	r0, r5
 801d42c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d430:	3114      	adds	r1, #20
 801d432:	f7ff fa5b 	bl	801c8ec <rcl_wait_set_add_timer>
 801d436:	2800      	cmp	r0, #0
 801d438:	d1c9      	bne.n	801d3ce <rcl_action_wait_set_add_action_server+0x26>
 801d43a:	2e00      	cmp	r6, #0
 801d43c:	d0c7      	beq.n	801d3ce <rcl_action_wait_set_add_action_server+0x26>
 801d43e:	6823      	ldr	r3, [r4, #0]
 801d440:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d444:	6033      	str	r3, [r6, #0]
 801d446:	bd70      	pop	{r4, r5, r6, pc}
 801d448:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d44c:	4770      	bx	lr
 801d44e:	bf00      	nop

0801d450 <rcl_action_server_wait_set_get_entities_ready>:
 801d450:	2800      	cmp	r0, #0
 801d452:	d067      	beq.n	801d524 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d458:	460c      	mov	r4, r1
 801d45a:	b161      	cbz	r1, 801d476 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d45c:	4605      	mov	r5, r0
 801d45e:	6808      	ldr	r0, [r1, #0]
 801d460:	b148      	cbz	r0, 801d476 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d462:	4616      	mov	r6, r2
 801d464:	4698      	mov	r8, r3
 801d466:	f7f6 fd07 	bl	8013e78 <rcl_service_is_valid>
 801d46a:	b120      	cbz	r0, 801d476 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d46c:	6820      	ldr	r0, [r4, #0]
 801d46e:	3004      	adds	r0, #4
 801d470:	f7f6 fd02 	bl	8013e78 <rcl_service_is_valid>
 801d474:	b918      	cbnz	r0, 801d47e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d476:	f640 0098 	movw	r0, #2200	; 0x898
 801d47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d47e:	6820      	ldr	r0, [r4, #0]
 801d480:	3008      	adds	r0, #8
 801d482:	f7f6 fcf9 	bl	8013e78 <rcl_service_is_valid>
 801d486:	2800      	cmp	r0, #0
 801d488:	d0f5      	beq.n	801d476 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d48a:	6820      	ldr	r0, [r4, #0]
 801d48c:	300c      	adds	r0, #12
 801d48e:	f7f6 fbcf 	bl	8013c30 <rcl_publisher_is_valid_except_context>
 801d492:	2800      	cmp	r0, #0
 801d494:	d0ef      	beq.n	801d476 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d496:	6820      	ldr	r0, [r4, #0]
 801d498:	3010      	adds	r0, #16
 801d49a:	f7f6 fbc9 	bl	8013c30 <rcl_publisher_is_valid_except_context>
 801d49e:	2800      	cmp	r0, #0
 801d4a0:	d0e9      	beq.n	801d476 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d4a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d4a6:	2a00      	cmp	r2, #0
 801d4a8:	bf18      	it	ne
 801d4aa:	2b00      	cmpne	r3, #0
 801d4ac:	bf0c      	ite	eq
 801d4ae:	2101      	moveq	r1, #1
 801d4b0:	2100      	movne	r1, #0
 801d4b2:	f1b8 0f00 	cmp.w	r8, #0
 801d4b6:	bf08      	it	eq
 801d4b8:	f041 0101 	orreq.w	r1, r1, #1
 801d4bc:	bba9      	cbnz	r1, 801d52a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d4be:	b3a6      	cbz	r6, 801d52a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d4c0:	6821      	ldr	r1, [r4, #0]
 801d4c2:	2000      	movs	r0, #0
 801d4c4:	692c      	ldr	r4, [r5, #16]
 801d4c6:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d4ca:	6a2f      	ldr	r7, [r5, #32]
 801d4cc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d4d0:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d4d4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d4d8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d4dc:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d4e0:	1a64      	subs	r4, r4, r1
 801d4e2:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d4e6:	fab4 f484 	clz	r4, r4
 801d4ea:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d4ee:	0964      	lsrs	r4, r4, #5
 801d4f0:	7034      	strb	r4, [r6, #0]
 801d4f2:	1d0c      	adds	r4, r1, #4
 801d4f4:	1b2c      	subs	r4, r5, r4
 801d4f6:	fab4 f484 	clz	r4, r4
 801d4fa:	0964      	lsrs	r4, r4, #5
 801d4fc:	f888 4000 	strb.w	r4, [r8]
 801d500:	f101 0408 	add.w	r4, r1, #8
 801d504:	1b1b      	subs	r3, r3, r4
 801d506:	9c06      	ldr	r4, [sp, #24]
 801d508:	fab3 f383 	clz	r3, r3
 801d50c:	095b      	lsrs	r3, r3, #5
 801d50e:	7023      	strb	r3, [r4, #0]
 801d510:	f101 0314 	add.w	r3, r1, #20
 801d514:	1ad3      	subs	r3, r2, r3
 801d516:	9a07      	ldr	r2, [sp, #28]
 801d518:	fab3 f383 	clz	r3, r3
 801d51c:	095b      	lsrs	r3, r3, #5
 801d51e:	7013      	strb	r3, [r2, #0]
 801d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d524:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d528:	4770      	bx	lr
 801d52a:	200b      	movs	r0, #11
 801d52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d530 <_execute_event_handler>:
 801d530:	2002      	movs	r0, #2
 801d532:	4770      	bx	lr

0801d534 <_cancel_goal_event_handler>:
 801d534:	2003      	movs	r0, #3
 801d536:	4770      	bx	lr

0801d538 <_succeed_event_handler>:
 801d538:	2004      	movs	r0, #4
 801d53a:	4770      	bx	lr

0801d53c <_abort_event_handler>:
 801d53c:	2006      	movs	r0, #6
 801d53e:	4770      	bx	lr

0801d540 <_canceled_event_handler>:
 801d540:	2005      	movs	r0, #5
 801d542:	4770      	bx	lr

0801d544 <rcl_action_transition_goal_state>:
 801d544:	b2c2      	uxtb	r2, r0
 801d546:	2a06      	cmp	r2, #6
 801d548:	d810      	bhi.n	801d56c <rcl_action_transition_goal_state+0x28>
 801d54a:	2904      	cmp	r1, #4
 801d54c:	d80e      	bhi.n	801d56c <rcl_action_transition_goal_state+0x28>
 801d54e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d552:	b410      	push	{r4}
 801d554:	1853      	adds	r3, r2, r1
 801d556:	4c06      	ldr	r4, [pc, #24]	; (801d570 <rcl_action_transition_goal_state+0x2c>)
 801d558:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d55c:	b113      	cbz	r3, 801d564 <rcl_action_transition_goal_state+0x20>
 801d55e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d562:	4718      	bx	r3
 801d564:	2000      	movs	r0, #0
 801d566:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d56a:	4770      	bx	lr
 801d56c:	2000      	movs	r0, #0
 801d56e:	4770      	bx	lr
 801d570:	080259fc 	.word	0x080259fc

0801d574 <rcl_action_get_zero_initialized_cancel_response>:
 801d574:	b510      	push	{r4, lr}
 801d576:	4c07      	ldr	r4, [pc, #28]	; (801d594 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d578:	4686      	mov	lr, r0
 801d57a:	4684      	mov	ip, r0
 801d57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d57e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d588:	6823      	ldr	r3, [r4, #0]
 801d58a:	4670      	mov	r0, lr
 801d58c:	f8cc 3000 	str.w	r3, [ip]
 801d590:	bd10      	pop	{r4, pc}
 801d592:	bf00      	nop
 801d594:	08025a88 	.word	0x08025a88

0801d598 <rclc_action_send_result_request>:
 801d598:	b1d0      	cbz	r0, 801d5d0 <rclc_action_send_result_request+0x38>
 801d59a:	4684      	mov	ip, r0
 801d59c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d5a0:	b500      	push	{lr}
 801d5a2:	b087      	sub	sp, #28
 801d5a4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d5a8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d5ac:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d5b0:	f10d 0e08 	add.w	lr, sp, #8
 801d5b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d5b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d5bc:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d5c0:	a902      	add	r1, sp, #8
 801d5c2:	3010      	adds	r0, #16
 801d5c4:	f7ff fbcc 	bl	801cd60 <rcl_action_send_result_request>
 801d5c8:	b920      	cbnz	r0, 801d5d4 <rclc_action_send_result_request+0x3c>
 801d5ca:	b007      	add	sp, #28
 801d5cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d5d0:	200b      	movs	r0, #11
 801d5d2:	4770      	bx	lr
 801d5d4:	9001      	str	r0, [sp, #4]
 801d5d6:	f7f7 fdb7 	bl	8015148 <rcutils_reset_error>
 801d5da:	9801      	ldr	r0, [sp, #4]
 801d5dc:	b007      	add	sp, #28
 801d5de:	f85d fb04 	ldr.w	pc, [sp], #4
 801d5e2:	bf00      	nop

0801d5e4 <rclc_action_take_goal_handle>:
 801d5e4:	b160      	cbz	r0, 801d600 <rclc_action_take_goal_handle+0x1c>
 801d5e6:	6883      	ldr	r3, [r0, #8]
 801d5e8:	b143      	cbz	r3, 801d5fc <rclc_action_take_goal_handle+0x18>
 801d5ea:	6819      	ldr	r1, [r3, #0]
 801d5ec:	2200      	movs	r2, #0
 801d5ee:	6081      	str	r1, [r0, #8]
 801d5f0:	721a      	strb	r2, [r3, #8]
 801d5f2:	68c1      	ldr	r1, [r0, #12]
 801d5f4:	621a      	str	r2, [r3, #32]
 801d5f6:	849a      	strh	r2, [r3, #36]	; 0x24
 801d5f8:	6019      	str	r1, [r3, #0]
 801d5fa:	60c3      	str	r3, [r0, #12]
 801d5fc:	4618      	mov	r0, r3
 801d5fe:	4770      	bx	lr
 801d600:	4603      	mov	r3, r0
 801d602:	e7fb      	b.n	801d5fc <rclc_action_take_goal_handle+0x18>

0801d604 <rclc_action_remove_used_goal_handle>:
 801d604:	b180      	cbz	r0, 801d628 <rclc_action_remove_used_goal_handle+0x24>
 801d606:	b179      	cbz	r1, 801d628 <rclc_action_remove_used_goal_handle+0x24>
 801d608:	68c3      	ldr	r3, [r0, #12]
 801d60a:	4299      	cmp	r1, r3
 801d60c:	d00d      	beq.n	801d62a <rclc_action_remove_used_goal_handle+0x26>
 801d60e:	b12b      	cbz	r3, 801d61c <rclc_action_remove_used_goal_handle+0x18>
 801d610:	681a      	ldr	r2, [r3, #0]
 801d612:	4291      	cmp	r1, r2
 801d614:	d003      	beq.n	801d61e <rclc_action_remove_used_goal_handle+0x1a>
 801d616:	4613      	mov	r3, r2
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d1f9      	bne.n	801d610 <rclc_action_remove_used_goal_handle+0xc>
 801d61c:	4770      	bx	lr
 801d61e:	680a      	ldr	r2, [r1, #0]
 801d620:	601a      	str	r2, [r3, #0]
 801d622:	6883      	ldr	r3, [r0, #8]
 801d624:	600b      	str	r3, [r1, #0]
 801d626:	6081      	str	r1, [r0, #8]
 801d628:	4770      	bx	lr
 801d62a:	680b      	ldr	r3, [r1, #0]
 801d62c:	60c3      	str	r3, [r0, #12]
 801d62e:	e7f8      	b.n	801d622 <rclc_action_remove_used_goal_handle+0x1e>

0801d630 <rclc_action_find_goal_handle_by_uuid>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	b181      	cbz	r1, 801d656 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d634:	b178      	cbz	r0, 801d656 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d636:	68c4      	ldr	r4, [r0, #12]
 801d638:	460d      	mov	r5, r1
 801d63a:	b914      	cbnz	r4, 801d642 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d63c:	e009      	b.n	801d652 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d63e:	6824      	ldr	r4, [r4, #0]
 801d640:	b13c      	cbz	r4, 801d652 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d642:	f104 0009 	add.w	r0, r4, #9
 801d646:	2210      	movs	r2, #16
 801d648:	4629      	mov	r1, r5
 801d64a:	f003 fba9 	bl	8020da0 <memcmp>
 801d64e:	2800      	cmp	r0, #0
 801d650:	d1f5      	bne.n	801d63e <rclc_action_find_goal_handle_by_uuid+0xe>
 801d652:	4620      	mov	r0, r4
 801d654:	bd38      	pop	{r3, r4, r5, pc}
 801d656:	2400      	movs	r4, #0
 801d658:	4620      	mov	r0, r4
 801d65a:	bd38      	pop	{r3, r4, r5, pc}

0801d65c <rclc_action_find_first_handle_by_status>:
 801d65c:	b140      	cbz	r0, 801d670 <rclc_action_find_first_handle_by_status+0x14>
 801d65e:	68c0      	ldr	r0, [r0, #12]
 801d660:	b910      	cbnz	r0, 801d668 <rclc_action_find_first_handle_by_status+0xc>
 801d662:	e005      	b.n	801d670 <rclc_action_find_first_handle_by_status+0x14>
 801d664:	6800      	ldr	r0, [r0, #0]
 801d666:	b118      	cbz	r0, 801d670 <rclc_action_find_first_handle_by_status+0x14>
 801d668:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d66c:	428b      	cmp	r3, r1
 801d66e:	d1f9      	bne.n	801d664 <rclc_action_find_first_handle_by_status+0x8>
 801d670:	4770      	bx	lr
 801d672:	bf00      	nop

0801d674 <rclc_action_find_first_terminated_handle>:
 801d674:	b140      	cbz	r0, 801d688 <rclc_action_find_first_terminated_handle+0x14>
 801d676:	68c0      	ldr	r0, [r0, #12]
 801d678:	b910      	cbnz	r0, 801d680 <rclc_action_find_first_terminated_handle+0xc>
 801d67a:	e005      	b.n	801d688 <rclc_action_find_first_terminated_handle+0x14>
 801d67c:	6800      	ldr	r0, [r0, #0]
 801d67e:	b118      	cbz	r0, 801d688 <rclc_action_find_first_terminated_handle+0x14>
 801d680:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d684:	2b03      	cmp	r3, #3
 801d686:	ddf9      	ble.n	801d67c <rclc_action_find_first_terminated_handle+0x8>
 801d688:	4770      	bx	lr
 801d68a:	bf00      	nop

0801d68c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d68c:	b170      	cbz	r0, 801d6ac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d68e:	68c0      	ldr	r0, [r0, #12]
 801d690:	b160      	cbz	r0, 801d6ac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d692:	b410      	push	{r4}
 801d694:	e001      	b.n	801d69a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d696:	6800      	ldr	r0, [r0, #0]
 801d698:	b128      	cbz	r0, 801d6a6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d69a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d69e:	4299      	cmp	r1, r3
 801d6a0:	bf08      	it	eq
 801d6a2:	4294      	cmpeq	r4, r2
 801d6a4:	d1f7      	bne.n	801d696 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6aa:	4770      	bx	lr
 801d6ac:	4770      	bx	lr
 801d6ae:	bf00      	nop

0801d6b0 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d6b0:	b170      	cbz	r0, 801d6d0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d6b2:	68c0      	ldr	r0, [r0, #12]
 801d6b4:	b160      	cbz	r0, 801d6d0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d6b6:	b410      	push	{r4}
 801d6b8:	e001      	b.n	801d6be <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d6ba:	6800      	ldr	r0, [r0, #0]
 801d6bc:	b128      	cbz	r0, 801d6ca <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d6be:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d6c2:	4299      	cmp	r1, r3
 801d6c4:	bf08      	it	eq
 801d6c6:	4294      	cmpeq	r4, r2
 801d6c8:	d1f7      	bne.n	801d6ba <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6ce:	4770      	bx	lr
 801d6d0:	4770      	bx	lr
 801d6d2:	bf00      	nop

0801d6d4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d6d4:	b170      	cbz	r0, 801d6f4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d6d6:	68c0      	ldr	r0, [r0, #12]
 801d6d8:	b160      	cbz	r0, 801d6f4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d6da:	b410      	push	{r4}
 801d6dc:	e001      	b.n	801d6e2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d6de:	6800      	ldr	r0, [r0, #0]
 801d6e0:	b128      	cbz	r0, 801d6ee <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d6e2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d6e6:	4299      	cmp	r1, r3
 801d6e8:	bf08      	it	eq
 801d6ea:	4294      	cmpeq	r4, r2
 801d6ec:	d1f7      	bne.n	801d6de <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6f2:	4770      	bx	lr
 801d6f4:	4770      	bx	lr
 801d6f6:	bf00      	nop

0801d6f8 <rclc_action_find_first_handle_with_goal_response>:
 801d6f8:	b140      	cbz	r0, 801d70c <rclc_action_find_first_handle_with_goal_response+0x14>
 801d6fa:	68c0      	ldr	r0, [r0, #12]
 801d6fc:	b910      	cbnz	r0, 801d704 <rclc_action_find_first_handle_with_goal_response+0xc>
 801d6fe:	e005      	b.n	801d70c <rclc_action_find_first_handle_with_goal_response+0x14>
 801d700:	6800      	ldr	r0, [r0, #0]
 801d702:	b118      	cbz	r0, 801d70c <rclc_action_find_first_handle_with_goal_response+0x14>
 801d704:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d0f9      	beq.n	801d700 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d70c:	4770      	bx	lr
 801d70e:	bf00      	nop

0801d710 <rclc_action_find_first_handle_with_result_response>:
 801d710:	b140      	cbz	r0, 801d724 <rclc_action_find_first_handle_with_result_response+0x14>
 801d712:	68c0      	ldr	r0, [r0, #12]
 801d714:	b910      	cbnz	r0, 801d71c <rclc_action_find_first_handle_with_result_response+0xc>
 801d716:	e005      	b.n	801d724 <rclc_action_find_first_handle_with_result_response+0x14>
 801d718:	6800      	ldr	r0, [r0, #0]
 801d71a:	b118      	cbz	r0, 801d724 <rclc_action_find_first_handle_with_result_response+0x14>
 801d71c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d720:	2b00      	cmp	r3, #0
 801d722:	d0f9      	beq.n	801d718 <rclc_action_find_first_handle_with_result_response+0x8>
 801d724:	4770      	bx	lr
 801d726:	bf00      	nop

0801d728 <rclc_action_server_response_goal_request>:
 801d728:	b198      	cbz	r0, 801d752 <rclc_action_server_response_goal_request+0x2a>
 801d72a:	2200      	movs	r2, #0
 801d72c:	460b      	mov	r3, r1
 801d72e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d732:	b510      	push	{r4, lr}
 801d734:	6844      	ldr	r4, [r0, #4]
 801d736:	b086      	sub	sp, #24
 801d738:	f104 0010 	add.w	r0, r4, #16
 801d73c:	9205      	str	r2, [sp, #20]
 801d73e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d742:	aa03      	add	r2, sp, #12
 801d744:	f88d 300c 	strb.w	r3, [sp, #12]
 801d748:	f7ff fd40 	bl	801d1cc <rcl_action_send_goal_response>
 801d74c:	b918      	cbnz	r0, 801d756 <rclc_action_server_response_goal_request+0x2e>
 801d74e:	b006      	add	sp, #24
 801d750:	bd10      	pop	{r4, pc}
 801d752:	200b      	movs	r0, #11
 801d754:	4770      	bx	lr
 801d756:	9001      	str	r0, [sp, #4]
 801d758:	f7f7 fcf6 	bl	8015148 <rcutils_reset_error>
 801d75c:	9801      	ldr	r0, [sp, #4]
 801d75e:	b006      	add	sp, #24
 801d760:	bd10      	pop	{r4, pc}
 801d762:	bf00      	nop
 801d764:	0000      	movs	r0, r0
	...

0801d768 <rclc_action_server_goal_cancel_accept>:
 801d768:	b310      	cbz	r0, 801d7b0 <rclc_action_server_goal_cancel_accept+0x48>
 801d76a:	b510      	push	{r4, lr}
 801d76c:	b090      	sub	sp, #64	; 0x40
 801d76e:	4604      	mov	r4, r0
 801d770:	a806      	add	r0, sp, #24
 801d772:	f7ff feff 	bl	801d574 <rcl_action_get_zero_initialized_cancel_response>
 801d776:	2300      	movs	r3, #0
 801d778:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d77c:	46ec      	mov	ip, sp
 801d77e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d782:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d786:	f88d 3018 	strb.w	r3, [sp, #24]
 801d78a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d78e:	f8cd d01c 	str.w	sp, [sp, #28]
 801d792:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d796:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d7b8 <rclc_action_server_goal_cancel_accept+0x50>
 801d79a:	6860      	ldr	r0, [r4, #4]
 801d79c:	aa06      	add	r2, sp, #24
 801d79e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d7a2:	3010      	adds	r0, #16
 801d7a4:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d7a8:	f7ff fdc6 	bl	801d338 <rcl_action_send_cancel_response>
 801d7ac:	b010      	add	sp, #64	; 0x40
 801d7ae:	bd10      	pop	{r4, pc}
 801d7b0:	200b      	movs	r0, #11
 801d7b2:	4770      	bx	lr
 801d7b4:	f3af 8000 	nop.w
 801d7b8:	00000001 	.word	0x00000001
 801d7bc:	00000001 	.word	0x00000001

0801d7c0 <rclc_action_server_goal_cancel_reject>:
 801d7c0:	b082      	sub	sp, #8
 801d7c2:	b530      	push	{r4, r5, lr}
 801d7c4:	b08b      	sub	sp, #44	; 0x2c
 801d7c6:	ac0e      	add	r4, sp, #56	; 0x38
 801d7c8:	e884 000c 	stmia.w	r4, {r2, r3}
 801d7cc:	b188      	cbz	r0, 801d7f2 <rclc_action_server_goal_cancel_reject+0x32>
 801d7ce:	4604      	mov	r4, r0
 801d7d0:	a801      	add	r0, sp, #4
 801d7d2:	460d      	mov	r5, r1
 801d7d4:	f7ff fece 	bl	801d574 <rcl_action_get_zero_initialized_cancel_response>
 801d7d8:	aa01      	add	r2, sp, #4
 801d7da:	a90e      	add	r1, sp, #56	; 0x38
 801d7dc:	f104 0010 	add.w	r0, r4, #16
 801d7e0:	f88d 5004 	strb.w	r5, [sp, #4]
 801d7e4:	f7ff fda8 	bl	801d338 <rcl_action_send_cancel_response>
 801d7e8:	b00b      	add	sp, #44	; 0x2c
 801d7ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d7ee:	b002      	add	sp, #8
 801d7f0:	4770      	bx	lr
 801d7f2:	200b      	movs	r0, #11
 801d7f4:	b00b      	add	sp, #44	; 0x2c
 801d7f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d7fa:	b002      	add	sp, #8
 801d7fc:	4770      	bx	lr
 801d7fe:	bf00      	nop

0801d800 <__atomic_load_8>:
 801d800:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d804:	4a16      	ldr	r2, [pc, #88]	; (801d860 <__atomic_load_8+0x60>)
 801d806:	4b17      	ldr	r3, [pc, #92]	; (801d864 <__atomic_load_8+0x64>)
 801d808:	f04f 0c01 	mov.w	ip, #1
 801d80c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d810:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d814:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d818:	fb02 f101 	mul.w	r1, r2, r1
 801d81c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d820:	fba3 2301 	umull	r2, r3, r3, r1
 801d824:	091b      	lsrs	r3, r3, #4
 801d826:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d82a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d82e:	b4d0      	push	{r4, r6, r7}
 801d830:	1ac9      	subs	r1, r1, r3
 801d832:	4c0d      	ldr	r4, [pc, #52]	; (801d868 <__atomic_load_8+0x68>)
 801d834:	1862      	adds	r2, r4, r1
 801d836:	e8d2 3f4f 	ldrexb	r3, [r2]
 801d83a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801d83e:	2e00      	cmp	r6, #0
 801d840:	d1f9      	bne.n	801d836 <__atomic_load_8+0x36>
 801d842:	b2db      	uxtb	r3, r3
 801d844:	f3bf 8f5b 	dmb	ish
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d1f4      	bne.n	801d836 <__atomic_load_8+0x36>
 801d84c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801d850:	f3bf 8f5b 	dmb	ish
 801d854:	5463      	strb	r3, [r4, r1]
 801d856:	4630      	mov	r0, r6
 801d858:	4639      	mov	r1, r7
 801d85a:	bcd0      	pop	{r4, r6, r7}
 801d85c:	4770      	bx	lr
 801d85e:	bf00      	nop
 801d860:	27d4eb2d 	.word	0x27d4eb2d
 801d864:	b21642c9 	.word	0xb21642c9
 801d868:	20016e08 	.word	0x20016e08

0801d86c <__atomic_store_8>:
 801d86c:	b570      	push	{r4, r5, r6, lr}
 801d86e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801d872:	4916      	ldr	r1, [pc, #88]	; (801d8cc <__atomic_store_8+0x60>)
 801d874:	4c16      	ldr	r4, [pc, #88]	; (801d8d0 <__atomic_store_8+0x64>)
 801d876:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801d87a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801d87e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801d882:	fb01 fe0e 	mul.w	lr, r1, lr
 801d886:	4913      	ldr	r1, [pc, #76]	; (801d8d4 <__atomic_store_8+0x68>)
 801d888:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801d88c:	fba1 510e 	umull	r5, r1, r1, lr
 801d890:	f04f 0501 	mov.w	r5, #1
 801d894:	0909      	lsrs	r1, r1, #4
 801d896:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801d89a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801d89e:	ebae 0e01 	sub.w	lr, lr, r1
 801d8a2:	eb04 0c0e 	add.w	ip, r4, lr
 801d8a6:	e8dc 1f4f 	ldrexb	r1, [ip]
 801d8aa:	e8cc 5f46 	strexb	r6, r5, [ip]
 801d8ae:	2e00      	cmp	r6, #0
 801d8b0:	d1f9      	bne.n	801d8a6 <__atomic_store_8+0x3a>
 801d8b2:	b2c9      	uxtb	r1, r1
 801d8b4:	f3bf 8f5b 	dmb	ish
 801d8b8:	2900      	cmp	r1, #0
 801d8ba:	d1f4      	bne.n	801d8a6 <__atomic_store_8+0x3a>
 801d8bc:	e9c0 2300 	strd	r2, r3, [r0]
 801d8c0:	f3bf 8f5b 	dmb	ish
 801d8c4:	f804 100e 	strb.w	r1, [r4, lr]
 801d8c8:	bd70      	pop	{r4, r5, r6, pc}
 801d8ca:	bf00      	nop
 801d8cc:	27d4eb2d 	.word	0x27d4eb2d
 801d8d0:	20016e08 	.word	0x20016e08
 801d8d4:	b21642c9 	.word	0xb21642c9

0801d8d8 <__atomic_exchange_8>:
 801d8d8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801d8dc:	4917      	ldr	r1, [pc, #92]	; (801d93c <__atomic_exchange_8+0x64>)
 801d8de:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801d8e2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801d8e6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801d8ea:	fb01 fc0c 	mul.w	ip, r1, ip
 801d8ee:	4914      	ldr	r1, [pc, #80]	; (801d940 <__atomic_exchange_8+0x68>)
 801d8f0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801d8f4:	b570      	push	{r4, r5, r6, lr}
 801d8f6:	4686      	mov	lr, r0
 801d8f8:	fba1 010c 	umull	r0, r1, r1, ip
 801d8fc:	4d11      	ldr	r5, [pc, #68]	; (801d944 <__atomic_exchange_8+0x6c>)
 801d8fe:	f04f 0001 	mov.w	r0, #1
 801d902:	0909      	lsrs	r1, r1, #4
 801d904:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801d908:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801d90c:	ebac 0c01 	sub.w	ip, ip, r1
 801d910:	eb05 010c 	add.w	r1, r5, ip
 801d914:	e8d1 4f4f 	ldrexb	r4, [r1]
 801d918:	e8c1 0f46 	strexb	r6, r0, [r1]
 801d91c:	2e00      	cmp	r6, #0
 801d91e:	d1f9      	bne.n	801d914 <__atomic_exchange_8+0x3c>
 801d920:	b2e4      	uxtb	r4, r4
 801d922:	f3bf 8f5b 	dmb	ish
 801d926:	2c00      	cmp	r4, #0
 801d928:	d1f4      	bne.n	801d914 <__atomic_exchange_8+0x3c>
 801d92a:	e9de 0100 	ldrd	r0, r1, [lr]
 801d92e:	e9ce 2300 	strd	r2, r3, [lr]
 801d932:	f3bf 8f5b 	dmb	ish
 801d936:	f805 400c 	strb.w	r4, [r5, ip]
 801d93a:	bd70      	pop	{r4, r5, r6, pc}
 801d93c:	27d4eb2d 	.word	0x27d4eb2d
 801d940:	b21642c9 	.word	0xb21642c9
 801d944:	20016e08 	.word	0x20016e08

0801d948 <rcutils_is_directory>:
 801d948:	2000      	movs	r0, #0
 801d94a:	4770      	bx	lr

0801d94c <rcutils_join_path>:
 801d94c:	b082      	sub	sp, #8
 801d94e:	2000      	movs	r0, #0
 801d950:	e88d 000c 	stmia.w	sp, {r2, r3}
 801d954:	b002      	add	sp, #8
 801d956:	4770      	bx	lr

0801d958 <rcutils_to_native_path>:
 801d958:	b084      	sub	sp, #16
 801d95a:	2000      	movs	r0, #0
 801d95c:	f10d 0c04 	add.w	ip, sp, #4
 801d960:	b004      	add	sp, #16
 801d962:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801d966:	4770      	bx	lr

0801d968 <rcutils_string_array_fini>:
 801d968:	b328      	cbz	r0, 801d9b6 <rcutils_string_array_fini+0x4e>
 801d96a:	b570      	push	{r4, r5, r6, lr}
 801d96c:	4604      	mov	r4, r0
 801d96e:	6840      	ldr	r0, [r0, #4]
 801d970:	b1e0      	cbz	r0, 801d9ac <rcutils_string_array_fini+0x44>
 801d972:	f104 0008 	add.w	r0, r4, #8
 801d976:	f7f7 fba9 	bl	80150cc <rcutils_allocator_is_valid>
 801d97a:	b1c0      	cbz	r0, 801d9ae <rcutils_string_array_fini+0x46>
 801d97c:	6823      	ldr	r3, [r4, #0]
 801d97e:	b1c3      	cbz	r3, 801d9b2 <rcutils_string_array_fini+0x4a>
 801d980:	2500      	movs	r5, #0
 801d982:	6860      	ldr	r0, [r4, #4]
 801d984:	462e      	mov	r6, r5
 801d986:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d98a:	68e3      	ldr	r3, [r4, #12]
 801d98c:	69a1      	ldr	r1, [r4, #24]
 801d98e:	4798      	blx	r3
 801d990:	e9d4 3000 	ldrd	r3, r0, [r4]
 801d994:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801d998:	3501      	adds	r5, #1
 801d99a:	429d      	cmp	r5, r3
 801d99c:	d3f3      	bcc.n	801d986 <rcutils_string_array_fini+0x1e>
 801d99e:	68e3      	ldr	r3, [r4, #12]
 801d9a0:	69a1      	ldr	r1, [r4, #24]
 801d9a2:	4798      	blx	r3
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	e9c4 3300 	strd	r3, r3, [r4]
 801d9ac:	bd70      	pop	{r4, r5, r6, pc}
 801d9ae:	200b      	movs	r0, #11
 801d9b0:	bd70      	pop	{r4, r5, r6, pc}
 801d9b2:	6860      	ldr	r0, [r4, #4]
 801d9b4:	e7f3      	b.n	801d99e <rcutils_string_array_fini+0x36>
 801d9b6:	200b      	movs	r0, #11
 801d9b8:	4770      	bx	lr
 801d9ba:	bf00      	nop

0801d9bc <rcutils_get_zero_initialized_string_map>:
 801d9bc:	2000      	movs	r0, #0
 801d9be:	4b01      	ldr	r3, [pc, #4]	; (801d9c4 <rcutils_get_zero_initialized_string_map+0x8>)
 801d9c0:	6018      	str	r0, [r3, #0]
 801d9c2:	4770      	bx	lr
 801d9c4:	20016e20 	.word	0x20016e20

0801d9c8 <rcutils_string_map_reserve>:
 801d9c8:	2800      	cmp	r0, #0
 801d9ca:	d05e      	beq.n	801da8a <rcutils_string_map_reserve+0xc2>
 801d9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9d0:	460c      	mov	r4, r1
 801d9d2:	6801      	ldr	r1, [r0, #0]
 801d9d4:	b082      	sub	sp, #8
 801d9d6:	4605      	mov	r5, r0
 801d9d8:	b129      	cbz	r1, 801d9e6 <rcutils_string_map_reserve+0x1e>
 801d9da:	68cb      	ldr	r3, [r1, #12]
 801d9dc:	42a3      	cmp	r3, r4
 801d9de:	d906      	bls.n	801d9ee <rcutils_string_map_reserve+0x26>
 801d9e0:	461c      	mov	r4, r3
 801d9e2:	2900      	cmp	r1, #0
 801d9e4:	d1f9      	bne.n	801d9da <rcutils_string_map_reserve+0x12>
 801d9e6:	201f      	movs	r0, #31
 801d9e8:	b002      	add	sp, #8
 801d9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9ee:	688b      	ldr	r3, [r1, #8]
 801d9f0:	42a3      	cmp	r3, r4
 801d9f2:	d046      	beq.n	801da82 <rcutils_string_map_reserve+0xba>
 801d9f4:	6a0e      	ldr	r6, [r1, #32]
 801d9f6:	2c00      	cmp	r4, #0
 801d9f8:	d033      	beq.n	801da62 <rcutils_string_map_reserve+0x9a>
 801d9fa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801d9fe:	d242      	bcs.n	801da86 <rcutils_string_map_reserve+0xbe>
 801da00:	00a7      	lsls	r7, r4, #2
 801da02:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801da06:	6808      	ldr	r0, [r1, #0]
 801da08:	4632      	mov	r2, r6
 801da0a:	4639      	mov	r1, r7
 801da0c:	47c0      	blx	r8
 801da0e:	2800      	cmp	r0, #0
 801da10:	d039      	beq.n	801da86 <rcutils_string_map_reserve+0xbe>
 801da12:	682b      	ldr	r3, [r5, #0]
 801da14:	4632      	mov	r2, r6
 801da16:	4639      	mov	r1, r7
 801da18:	6018      	str	r0, [r3, #0]
 801da1a:	6858      	ldr	r0, [r3, #4]
 801da1c:	47c0      	blx	r8
 801da1e:	2800      	cmp	r0, #0
 801da20:	d031      	beq.n	801da86 <rcutils_string_map_reserve+0xbe>
 801da22:	682d      	ldr	r5, [r5, #0]
 801da24:	68ab      	ldr	r3, [r5, #8]
 801da26:	6068      	str	r0, [r5, #4]
 801da28:	42a3      	cmp	r3, r4
 801da2a:	d225      	bcs.n	801da78 <rcutils_string_map_reserve+0xb0>
 801da2c:	682a      	ldr	r2, [r5, #0]
 801da2e:	eb00 0c07 	add.w	ip, r0, r7
 801da32:	0099      	lsls	r1, r3, #2
 801da34:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801da38:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801da3c:	45e6      	cmp	lr, ip
 801da3e:	d203      	bcs.n	801da48 <rcutils_string_map_reserve+0x80>
 801da40:	eb02 0c07 	add.w	ip, r2, r7
 801da44:	4566      	cmp	r6, ip
 801da46:	d322      	bcc.n	801da8e <rcutils_string_map_reserve+0xc6>
 801da48:	1ae3      	subs	r3, r4, r3
 801da4a:	4670      	mov	r0, lr
 801da4c:	2100      	movs	r1, #0
 801da4e:	009a      	lsls	r2, r3, #2
 801da50:	9201      	str	r2, [sp, #4]
 801da52:	f003 f9cf 	bl	8020df4 <memset>
 801da56:	9a01      	ldr	r2, [sp, #4]
 801da58:	2100      	movs	r1, #0
 801da5a:	4630      	mov	r0, r6
 801da5c:	f003 f9ca 	bl	8020df4 <memset>
 801da60:	e00a      	b.n	801da78 <rcutils_string_map_reserve+0xb0>
 801da62:	694f      	ldr	r7, [r1, #20]
 801da64:	6808      	ldr	r0, [r1, #0]
 801da66:	4631      	mov	r1, r6
 801da68:	47b8      	blx	r7
 801da6a:	682b      	ldr	r3, [r5, #0]
 801da6c:	4631      	mov	r1, r6
 801da6e:	6858      	ldr	r0, [r3, #4]
 801da70:	601c      	str	r4, [r3, #0]
 801da72:	47b8      	blx	r7
 801da74:	682d      	ldr	r5, [r5, #0]
 801da76:	606c      	str	r4, [r5, #4]
 801da78:	2000      	movs	r0, #0
 801da7a:	60ac      	str	r4, [r5, #8]
 801da7c:	b002      	add	sp, #8
 801da7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da82:	2000      	movs	r0, #0
 801da84:	e7b0      	b.n	801d9e8 <rcutils_string_map_reserve+0x20>
 801da86:	200a      	movs	r0, #10
 801da88:	e7ae      	b.n	801d9e8 <rcutils_string_map_reserve+0x20>
 801da8a:	200b      	movs	r0, #11
 801da8c:	4770      	bx	lr
 801da8e:	1f0b      	subs	r3, r1, #4
 801da90:	4418      	add	r0, r3
 801da92:	4413      	add	r3, r2
 801da94:	3a04      	subs	r2, #4
 801da96:	4417      	add	r7, r2
 801da98:	2200      	movs	r2, #0
 801da9a:	f843 2f04 	str.w	r2, [r3, #4]!
 801da9e:	42bb      	cmp	r3, r7
 801daa0:	f840 2f04 	str.w	r2, [r0, #4]!
 801daa4:	d1f9      	bne.n	801da9a <rcutils_string_map_reserve+0xd2>
 801daa6:	e7e7      	b.n	801da78 <rcutils_string_map_reserve+0xb0>

0801daa8 <rcutils_string_map_init>:
 801daa8:	b082      	sub	sp, #8
 801daaa:	b570      	push	{r4, r5, r6, lr}
 801daac:	ac04      	add	r4, sp, #16
 801daae:	e884 000c 	stmia.w	r4, {r2, r3}
 801dab2:	b380      	cbz	r0, 801db16 <rcutils_string_map_init+0x6e>
 801dab4:	6806      	ldr	r6, [r0, #0]
 801dab6:	4604      	mov	r4, r0
 801dab8:	b12e      	cbz	r6, 801dac6 <rcutils_string_map_init+0x1e>
 801daba:	251e      	movs	r5, #30
 801dabc:	4628      	mov	r0, r5
 801dabe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dac2:	b002      	add	sp, #8
 801dac4:	4770      	bx	lr
 801dac6:	a804      	add	r0, sp, #16
 801dac8:	460d      	mov	r5, r1
 801daca:	f7f7 faff 	bl	80150cc <rcutils_allocator_is_valid>
 801dace:	b310      	cbz	r0, 801db16 <rcutils_string_map_init+0x6e>
 801dad0:	9b04      	ldr	r3, [sp, #16]
 801dad2:	2024      	movs	r0, #36	; 0x24
 801dad4:	9908      	ldr	r1, [sp, #32]
 801dad6:	4798      	blx	r3
 801dad8:	6020      	str	r0, [r4, #0]
 801dada:	b310      	cbz	r0, 801db22 <rcutils_string_map_init+0x7a>
 801dadc:	f10d 0e10 	add.w	lr, sp, #16
 801dae0:	f100 0c10 	add.w	ip, r0, #16
 801dae4:	e9c0 6600 	strd	r6, r6, [r0]
 801dae8:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801daec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801daf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801daf4:	f8de 3000 	ldr.w	r3, [lr]
 801daf8:	4629      	mov	r1, r5
 801dafa:	4620      	mov	r0, r4
 801dafc:	f8cc 3000 	str.w	r3, [ip]
 801db00:	f7ff ff62 	bl	801d9c8 <rcutils_string_map_reserve>
 801db04:	4605      	mov	r5, r0
 801db06:	2800      	cmp	r0, #0
 801db08:	d0d8      	beq.n	801dabc <rcutils_string_map_init+0x14>
 801db0a:	9b05      	ldr	r3, [sp, #20]
 801db0c:	9908      	ldr	r1, [sp, #32]
 801db0e:	6820      	ldr	r0, [r4, #0]
 801db10:	4798      	blx	r3
 801db12:	6026      	str	r6, [r4, #0]
 801db14:	e7d2      	b.n	801dabc <rcutils_string_map_init+0x14>
 801db16:	250b      	movs	r5, #11
 801db18:	4628      	mov	r0, r5
 801db1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db1e:	b002      	add	sp, #8
 801db20:	4770      	bx	lr
 801db22:	250a      	movs	r5, #10
 801db24:	e7ca      	b.n	801dabc <rcutils_string_map_init+0x14>
 801db26:	bf00      	nop

0801db28 <rcutils_string_map_fini>:
 801db28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db2c:	b082      	sub	sp, #8
 801db2e:	2800      	cmp	r0, #0
 801db30:	d03a      	beq.n	801dba8 <rcutils_string_map_fini+0x80>
 801db32:	6804      	ldr	r4, [r0, #0]
 801db34:	4606      	mov	r6, r0
 801db36:	2c00      	cmp	r4, #0
 801db38:	d032      	beq.n	801dba0 <rcutils_string_map_fini+0x78>
 801db3a:	68a3      	ldr	r3, [r4, #8]
 801db3c:	b32b      	cbz	r3, 801db8a <rcutils_string_map_fini+0x62>
 801db3e:	2500      	movs	r5, #0
 801db40:	6822      	ldr	r2, [r4, #0]
 801db42:	462f      	mov	r7, r5
 801db44:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801db48:	b1e0      	cbz	r0, 801db84 <rcutils_string_map_fini+0x5c>
 801db4a:	6a21      	ldr	r1, [r4, #32]
 801db4c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801db50:	9101      	str	r1, [sp, #4]
 801db52:	47c0      	blx	r8
 801db54:	9901      	ldr	r1, [sp, #4]
 801db56:	e9d4 3200 	ldrd	r3, r2, [r4]
 801db5a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801db5e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801db62:	47c0      	blx	r8
 801db64:	68e3      	ldr	r3, [r4, #12]
 801db66:	6862      	ldr	r2, [r4, #4]
 801db68:	3b01      	subs	r3, #1
 801db6a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801db6e:	3501      	adds	r5, #1
 801db70:	60e3      	str	r3, [r4, #12]
 801db72:	6834      	ldr	r4, [r6, #0]
 801db74:	68a3      	ldr	r3, [r4, #8]
 801db76:	429d      	cmp	r5, r3
 801db78:	d207      	bcs.n	801db8a <rcutils_string_map_fini+0x62>
 801db7a:	6822      	ldr	r2, [r4, #0]
 801db7c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801db80:	2800      	cmp	r0, #0
 801db82:	d1e2      	bne.n	801db4a <rcutils_string_map_fini+0x22>
 801db84:	3501      	adds	r5, #1
 801db86:	429d      	cmp	r5, r3
 801db88:	d3dc      	bcc.n	801db44 <rcutils_string_map_fini+0x1c>
 801db8a:	2100      	movs	r1, #0
 801db8c:	4630      	mov	r0, r6
 801db8e:	f7ff ff1b 	bl	801d9c8 <rcutils_string_map_reserve>
 801db92:	4604      	mov	r4, r0
 801db94:	b920      	cbnz	r0, 801dba0 <rcutils_string_map_fini+0x78>
 801db96:	6830      	ldr	r0, [r6, #0]
 801db98:	6943      	ldr	r3, [r0, #20]
 801db9a:	6a01      	ldr	r1, [r0, #32]
 801db9c:	4798      	blx	r3
 801db9e:	6034      	str	r4, [r6, #0]
 801dba0:	4620      	mov	r0, r4
 801dba2:	b002      	add	sp, #8
 801dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dba8:	240b      	movs	r4, #11
 801dbaa:	4620      	mov	r0, r4
 801dbac:	b002      	add	sp, #8
 801dbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbb2:	bf00      	nop

0801dbb4 <rcutils_string_map_getn>:
 801dbb4:	b378      	cbz	r0, 801dc16 <rcutils_string_map_getn+0x62>
 801dbb6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbba:	f8d0 b000 	ldr.w	fp, [r0]
 801dbbe:	f1bb 0f00 	cmp.w	fp, #0
 801dbc2:	d01f      	beq.n	801dc04 <rcutils_string_map_getn+0x50>
 801dbc4:	fab1 f481 	clz	r4, r1
 801dbc8:	4688      	mov	r8, r1
 801dbca:	0964      	lsrs	r4, r4, #5
 801dbcc:	b1d1      	cbz	r1, 801dc04 <rcutils_string_map_getn+0x50>
 801dbce:	f8db 7008 	ldr.w	r7, [fp, #8]
 801dbd2:	f8db 6000 	ldr.w	r6, [fp]
 801dbd6:	b1af      	cbz	r7, 801dc04 <rcutils_string_map_getn+0x50>
 801dbd8:	4691      	mov	r9, r2
 801dbda:	3e04      	subs	r6, #4
 801dbdc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801dbe0:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801dbe4:	3401      	adds	r4, #1
 801dbe6:	4628      	mov	r0, r5
 801dbe8:	b155      	cbz	r5, 801dc00 <rcutils_string_map_getn+0x4c>
 801dbea:	f7e2 fb89 	bl	8000300 <strlen>
 801dbee:	4602      	mov	r2, r0
 801dbf0:	4629      	mov	r1, r5
 801dbf2:	4640      	mov	r0, r8
 801dbf4:	454a      	cmp	r2, r9
 801dbf6:	bf38      	it	cc
 801dbf8:	464a      	movcc	r2, r9
 801dbfa:	f003 f910 	bl	8020e1e <strncmp>
 801dbfe:	b120      	cbz	r0, 801dc0a <rcutils_string_map_getn+0x56>
 801dc00:	42a7      	cmp	r7, r4
 801dc02:	d1eb      	bne.n	801dbdc <rcutils_string_map_getn+0x28>
 801dc04:	2000      	movs	r0, #0
 801dc06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc0a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801dc0e:	f853 000a 	ldr.w	r0, [r3, sl]
 801dc12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc16:	4770      	bx	lr

0801dc18 <rmw_get_zero_initialized_context>:
 801dc18:	b510      	push	{r4, lr}
 801dc1a:	4604      	mov	r4, r0
 801dc1c:	3010      	adds	r0, #16
 801dc1e:	f7f7 fc73 	bl	8015508 <rmw_get_zero_initialized_init_options>
 801dc22:	2300      	movs	r3, #0
 801dc24:	4620      	mov	r0, r4
 801dc26:	60a3      	str	r3, [r4, #8]
 801dc28:	64a3      	str	r3, [r4, #72]	; 0x48
 801dc2a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801dc2c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801dc38 <rmw_get_zero_initialized_context+0x20>
 801dc30:	ed84 7b00 	vstr	d7, [r4]
 801dc34:	bd10      	pop	{r4, pc}
 801dc36:	bf00      	nop
	...

0801dc40 <rmw_time_equal>:
 801dc40:	b4f0      	push	{r4, r5, r6, r7}
 801dc42:	b084      	sub	sp, #16
 801dc44:	ac04      	add	r4, sp, #16
 801dc46:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	4925      	ldr	r1, [pc, #148]	; (801dce4 <rmw_time_equal+0xa4>)
 801dc4e:	9d01      	ldr	r5, [sp, #4]
 801dc50:	4610      	mov	r0, r2
 801dc52:	4299      	cmp	r1, r3
 801dc54:	f04f 0202 	mov.w	r2, #2
 801dc58:	9e03      	ldr	r6, [sp, #12]
 801dc5a:	41aa      	sbcs	r2, r5
 801dc5c:	d330      	bcc.n	801dcc0 <rmw_time_equal+0x80>
 801dc5e:	4c22      	ldr	r4, [pc, #136]	; (801dce8 <rmw_time_equal+0xa8>)
 801dc60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc64:	fba3 3204 	umull	r3, r2, r3, r4
 801dc68:	fb04 2205 	mla	r2, r4, r5, r2
 801dc6c:	43dd      	mvns	r5, r3
 801dc6e:	1a8c      	subs	r4, r1, r2
 801dc70:	4285      	cmp	r5, r0
 801dc72:	41b4      	sbcs	r4, r6
 801dc74:	d332      	bcc.n	801dcdc <rmw_time_equal+0x9c>
 801dc76:	eb10 0c03 	adds.w	ip, r0, r3
 801dc7a:	eb42 0106 	adc.w	r1, r2, r6
 801dc7e:	4819      	ldr	r0, [pc, #100]	; (801dce4 <rmw_time_equal+0xa4>)
 801dc80:	2202      	movs	r2, #2
 801dc82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dc84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dc86:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801dc8a:	4298      	cmp	r0, r3
 801dc8c:	41b2      	sbcs	r2, r6
 801dc8e:	d31c      	bcc.n	801dcca <rmw_time_equal+0x8a>
 801dc90:	4c15      	ldr	r4, [pc, #84]	; (801dce8 <rmw_time_equal+0xa8>)
 801dc92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801dc96:	fba3 3204 	umull	r3, r2, r3, r4
 801dc9a:	fb04 2206 	mla	r2, r4, r6, r2
 801dc9e:	43de      	mvns	r6, r3
 801dca0:	1a84      	subs	r4, r0, r2
 801dca2:	42ae      	cmp	r6, r5
 801dca4:	41bc      	sbcs	r4, r7
 801dca6:	d315      	bcc.n	801dcd4 <rmw_time_equal+0x94>
 801dca8:	195b      	adds	r3, r3, r5
 801dcaa:	eb42 0207 	adc.w	r2, r2, r7
 801dcae:	428a      	cmp	r2, r1
 801dcb0:	bf08      	it	eq
 801dcb2:	4563      	cmpeq	r3, ip
 801dcb4:	bf0c      	ite	eq
 801dcb6:	2001      	moveq	r0, #1
 801dcb8:	2000      	movne	r0, #0
 801dcba:	b004      	add	sp, #16
 801dcbc:	bcf0      	pop	{r4, r5, r6, r7}
 801dcbe:	4770      	bx	lr
 801dcc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dcc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dcc8:	e7d9      	b.n	801dc7e <rmw_time_equal+0x3e>
 801dcca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dcce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801dcd2:	e7ec      	b.n	801dcae <rmw_time_equal+0x6e>
 801dcd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dcd8:	4602      	mov	r2, r0
 801dcda:	e7e8      	b.n	801dcae <rmw_time_equal+0x6e>
 801dcdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dce0:	e7cd      	b.n	801dc7e <rmw_time_equal+0x3e>
 801dce2:	bf00      	nop
 801dce4:	25c17d04 	.word	0x25c17d04
 801dce8:	3b9aca00 	.word	0x3b9aca00

0801dcec <rmw_time_total_nsec>:
 801dcec:	b470      	push	{r4, r5, r6}
 801dcee:	b085      	sub	sp, #20
 801dcf0:	ac04      	add	r4, sp, #16
 801dcf2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	4913      	ldr	r1, [pc, #76]	; (801dd48 <rmw_time_total_nsec+0x5c>)
 801dcfa:	9d01      	ldr	r5, [sp, #4]
 801dcfc:	4610      	mov	r0, r2
 801dcfe:	4299      	cmp	r1, r3
 801dd00:	f04f 0202 	mov.w	r2, #2
 801dd04:	9e03      	ldr	r6, [sp, #12]
 801dd06:	41aa      	sbcs	r2, r5
 801dd08:	d311      	bcc.n	801dd2e <rmw_time_total_nsec+0x42>
 801dd0a:	4c10      	ldr	r4, [pc, #64]	; (801dd4c <rmw_time_total_nsec+0x60>)
 801dd0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dd10:	fba3 3204 	umull	r3, r2, r3, r4
 801dd14:	fb04 2205 	mla	r2, r4, r5, r2
 801dd18:	43dd      	mvns	r5, r3
 801dd1a:	1a8c      	subs	r4, r1, r2
 801dd1c:	4285      	cmp	r5, r0
 801dd1e:	41b4      	sbcs	r4, r6
 801dd20:	d30c      	bcc.n	801dd3c <rmw_time_total_nsec+0x50>
 801dd22:	1818      	adds	r0, r3, r0
 801dd24:	eb42 0106 	adc.w	r1, r2, r6
 801dd28:	b005      	add	sp, #20
 801dd2a:	bc70      	pop	{r4, r5, r6}
 801dd2c:	4770      	bx	lr
 801dd2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dd32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dd36:	b005      	add	sp, #20
 801dd38:	bc70      	pop	{r4, r5, r6}
 801dd3a:	4770      	bx	lr
 801dd3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dd40:	b005      	add	sp, #20
 801dd42:	bc70      	pop	{r4, r5, r6}
 801dd44:	4770      	bx	lr
 801dd46:	bf00      	nop
 801dd48:	25c17d04 	.word	0x25c17d04
 801dd4c:	3b9aca00 	.word	0x3b9aca00

0801dd50 <rmw_validate_full_topic_name>:
 801dd50:	2800      	cmp	r0, #0
 801dd52:	d05d      	beq.n	801de10 <rmw_validate_full_topic_name+0xc0>
 801dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd58:	460d      	mov	r5, r1
 801dd5a:	2900      	cmp	r1, #0
 801dd5c:	d05a      	beq.n	801de14 <rmw_validate_full_topic_name+0xc4>
 801dd5e:	4604      	mov	r4, r0
 801dd60:	4616      	mov	r6, r2
 801dd62:	f7e2 facd 	bl	8000300 <strlen>
 801dd66:	b150      	cbz	r0, 801dd7e <rmw_validate_full_topic_name+0x2e>
 801dd68:	7823      	ldrb	r3, [r4, #0]
 801dd6a:	2b2f      	cmp	r3, #47	; 0x2f
 801dd6c:	d00e      	beq.n	801dd8c <rmw_validate_full_topic_name+0x3c>
 801dd6e:	2302      	movs	r3, #2
 801dd70:	602b      	str	r3, [r5, #0]
 801dd72:	b146      	cbz	r6, 801dd86 <rmw_validate_full_topic_name+0x36>
 801dd74:	2300      	movs	r3, #0
 801dd76:	4618      	mov	r0, r3
 801dd78:	6033      	str	r3, [r6, #0]
 801dd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd7e:	2301      	movs	r3, #1
 801dd80:	602b      	str	r3, [r5, #0]
 801dd82:	2e00      	cmp	r6, #0
 801dd84:	d1f6      	bne.n	801dd74 <rmw_validate_full_topic_name+0x24>
 801dd86:	2000      	movs	r0, #0
 801dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd8c:	1e43      	subs	r3, r0, #1
 801dd8e:	5ce2      	ldrb	r2, [r4, r3]
 801dd90:	2a2f      	cmp	r2, #47	; 0x2f
 801dd92:	d041      	beq.n	801de18 <rmw_validate_full_topic_name+0xc8>
 801dd94:	1e62      	subs	r2, r4, #1
 801dd96:	f1c4 0e01 	rsb	lr, r4, #1
 801dd9a:	eb02 0800 	add.w	r8, r2, r0
 801dd9e:	eb0e 0702 	add.w	r7, lr, r2
 801dda2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dda6:	f023 0120 	bic.w	r1, r3, #32
 801ddaa:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801ddae:	3941      	subs	r1, #65	; 0x41
 801ddb0:	2919      	cmp	r1, #25
 801ddb2:	d90f      	bls.n	801ddd4 <rmw_validate_full_topic_name+0x84>
 801ddb4:	f1bc 0f0a 	cmp.w	ip, #10
 801ddb8:	d90c      	bls.n	801ddd4 <rmw_validate_full_topic_name+0x84>
 801ddba:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801ddbe:	fab3 f383 	clz	r3, r3
 801ddc2:	095b      	lsrs	r3, r3, #5
 801ddc4:	b933      	cbnz	r3, 801ddd4 <rmw_validate_full_topic_name+0x84>
 801ddc6:	2204      	movs	r2, #4
 801ddc8:	602a      	str	r2, [r5, #0]
 801ddca:	2e00      	cmp	r6, #0
 801ddcc:	d0db      	beq.n	801dd86 <rmw_validate_full_topic_name+0x36>
 801ddce:	4618      	mov	r0, r3
 801ddd0:	6037      	str	r7, [r6, #0]
 801ddd2:	e7d2      	b.n	801dd7a <rmw_validate_full_topic_name+0x2a>
 801ddd4:	4542      	cmp	r2, r8
 801ddd6:	d1e2      	bne.n	801dd9e <rmw_validate_full_topic_name+0x4e>
 801ddd8:	2301      	movs	r3, #1
 801ddda:	4f1a      	ldr	r7, [pc, #104]	; (801de44 <rmw_validate_full_topic_name+0xf4>)
 801dddc:	e004      	b.n	801dde8 <rmw_validate_full_topic_name+0x98>
 801ddde:	4298      	cmp	r0, r3
 801dde0:	f104 0401 	add.w	r4, r4, #1
 801dde4:	4613      	mov	r3, r2
 801dde6:	d91c      	bls.n	801de22 <rmw_validate_full_topic_name+0xd2>
 801dde8:	4298      	cmp	r0, r3
 801ddea:	f103 0201 	add.w	r2, r3, #1
 801ddee:	d0f6      	beq.n	801ddde <rmw_validate_full_topic_name+0x8e>
 801ddf0:	7821      	ldrb	r1, [r4, #0]
 801ddf2:	292f      	cmp	r1, #47	; 0x2f
 801ddf4:	d1f3      	bne.n	801ddde <rmw_validate_full_topic_name+0x8e>
 801ddf6:	7861      	ldrb	r1, [r4, #1]
 801ddf8:	292f      	cmp	r1, #47	; 0x2f
 801ddfa:	d01e      	beq.n	801de3a <rmw_validate_full_topic_name+0xea>
 801ddfc:	5dc9      	ldrb	r1, [r1, r7]
 801ddfe:	0749      	lsls	r1, r1, #29
 801de00:	d5ed      	bpl.n	801ddde <rmw_validate_full_topic_name+0x8e>
 801de02:	2206      	movs	r2, #6
 801de04:	602a      	str	r2, [r5, #0]
 801de06:	2e00      	cmp	r6, #0
 801de08:	d0bd      	beq.n	801dd86 <rmw_validate_full_topic_name+0x36>
 801de0a:	2000      	movs	r0, #0
 801de0c:	6033      	str	r3, [r6, #0]
 801de0e:	e7b4      	b.n	801dd7a <rmw_validate_full_topic_name+0x2a>
 801de10:	200b      	movs	r0, #11
 801de12:	4770      	bx	lr
 801de14:	200b      	movs	r0, #11
 801de16:	e7b0      	b.n	801dd7a <rmw_validate_full_topic_name+0x2a>
 801de18:	2203      	movs	r2, #3
 801de1a:	602a      	str	r2, [r5, #0]
 801de1c:	2e00      	cmp	r6, #0
 801de1e:	d1f4      	bne.n	801de0a <rmw_validate_full_topic_name+0xba>
 801de20:	e7b1      	b.n	801dd86 <rmw_validate_full_topic_name+0x36>
 801de22:	28f7      	cmp	r0, #247	; 0xf7
 801de24:	d803      	bhi.n	801de2e <rmw_validate_full_topic_name+0xde>
 801de26:	2300      	movs	r3, #0
 801de28:	4618      	mov	r0, r3
 801de2a:	602b      	str	r3, [r5, #0]
 801de2c:	e7a5      	b.n	801dd7a <rmw_validate_full_topic_name+0x2a>
 801de2e:	2307      	movs	r3, #7
 801de30:	602b      	str	r3, [r5, #0]
 801de32:	2e00      	cmp	r6, #0
 801de34:	d0a7      	beq.n	801dd86 <rmw_validate_full_topic_name+0x36>
 801de36:	23f6      	movs	r3, #246	; 0xf6
 801de38:	e7e7      	b.n	801de0a <rmw_validate_full_topic_name+0xba>
 801de3a:	2205      	movs	r2, #5
 801de3c:	602a      	str	r2, [r5, #0]
 801de3e:	2e00      	cmp	r6, #0
 801de40:	d1e3      	bne.n	801de0a <rmw_validate_full_topic_name+0xba>
 801de42:	e7a0      	b.n	801dd86 <rmw_validate_full_topic_name+0x36>
 801de44:	08025b6c 	.word	0x08025b6c

0801de48 <on_status>:
 801de48:	b082      	sub	sp, #8
 801de4a:	b002      	add	sp, #8
 801de4c:	4770      	bx	lr
 801de4e:	bf00      	nop

0801de50 <on_topic>:
 801de50:	4a23      	ldr	r2, [pc, #140]	; (801dee0 <on_topic+0x90>)
 801de52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de56:	6812      	ldr	r2, [r2, #0]
 801de58:	b094      	sub	sp, #80	; 0x50
 801de5a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801de5c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801de60:	9113      	str	r1, [sp, #76]	; 0x4c
 801de62:	9312      	str	r3, [sp, #72]	; 0x48
 801de64:	b3c2      	cbz	r2, 801ded8 <on_topic+0x88>
 801de66:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801de6a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801de6e:	e001      	b.n	801de74 <on_topic+0x24>
 801de70:	6852      	ldr	r2, [r2, #4]
 801de72:	b38a      	cbz	r2, 801ded8 <on_topic+0x88>
 801de74:	6894      	ldr	r4, [r2, #8]
 801de76:	8aa3      	ldrh	r3, [r4, #20]
 801de78:	428b      	cmp	r3, r1
 801de7a:	d1f9      	bne.n	801de70 <on_topic+0x20>
 801de7c:	7da3      	ldrb	r3, [r4, #22]
 801de7e:	4283      	cmp	r3, r0
 801de80:	d1f6      	bne.n	801de70 <on_topic+0x20>
 801de82:	2248      	movs	r2, #72	; 0x48
 801de84:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801de88:	4668      	mov	r0, sp
 801de8a:	f003 f880 	bl	8020f8e <memcpy>
 801de8e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801de92:	4620      	mov	r0, r4
 801de94:	cb0c      	ldmia	r3, {r2, r3}
 801de96:	f7f8 ffdb 	bl	8016e50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801de9a:	4607      	mov	r7, r0
 801de9c:	b1e0      	cbz	r0, 801ded8 <on_topic+0x88>
 801de9e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801dea2:	462a      	mov	r2, r5
 801dea4:	4630      	mov	r0, r6
 801dea6:	f108 0110 	add.w	r1, r8, #16
 801deaa:	f7f9 fc91 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801deae:	b930      	cbnz	r0, 801debe <on_topic+0x6e>
 801deb0:	4639      	mov	r1, r7
 801deb2:	480c      	ldr	r0, [pc, #48]	; (801dee4 <on_topic+0x94>)
 801deb4:	b014      	add	sp, #80	; 0x50
 801deb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801deba:	f000 b8bd 	b.w	801e038 <put_memory>
 801debe:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801dec2:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801dec6:	f000 fb33 	bl	801e530 <rmw_uros_epoch_nanos>
 801deca:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801dece:	2305      	movs	r3, #5
 801ded0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ded4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801ded8:	b014      	add	sp, #80	; 0x50
 801deda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dede:	bf00      	nop
 801dee0:	20016dbc 	.word	0x20016dbc
 801dee4:	20016dac 	.word	0x20016dac

0801dee8 <on_request>:
 801dee8:	4824      	ldr	r0, [pc, #144]	; (801df7c <on_request+0x94>)
 801deea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801deee:	6800      	ldr	r0, [r0, #0]
 801def0:	b094      	sub	sp, #80	; 0x50
 801def2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801def4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801def8:	9113      	str	r1, [sp, #76]	; 0x4c
 801defa:	2800      	cmp	r0, #0
 801defc:	d03b      	beq.n	801df76 <on_request+0x8e>
 801defe:	461d      	mov	r5, r3
 801df00:	e001      	b.n	801df06 <on_request+0x1e>
 801df02:	6840      	ldr	r0, [r0, #4]
 801df04:	b3b8      	cbz	r0, 801df76 <on_request+0x8e>
 801df06:	6884      	ldr	r4, [r0, #8]
 801df08:	8b21      	ldrh	r1, [r4, #24]
 801df0a:	4291      	cmp	r1, r2
 801df0c:	d1f9      	bne.n	801df02 <on_request+0x1a>
 801df0e:	2248      	movs	r2, #72	; 0x48
 801df10:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801df14:	4668      	mov	r0, sp
 801df16:	f003 f83a 	bl	8020f8e <memcpy>
 801df1a:	f104 0320 	add.w	r3, r4, #32
 801df1e:	4620      	mov	r0, r4
 801df20:	cb0c      	ldmia	r3, {r2, r3}
 801df22:	f7f8 ff95 	bl	8016e50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801df26:	4680      	mov	r8, r0
 801df28:	b328      	cbz	r0, 801df76 <on_request+0x8e>
 801df2a:	4630      	mov	r0, r6
 801df2c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801df30:	463a      	mov	r2, r7
 801df32:	f106 0110 	add.w	r1, r6, #16
 801df36:	f7f9 fc4b 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801df3a:	b930      	cbnz	r0, 801df4a <on_request+0x62>
 801df3c:	4641      	mov	r1, r8
 801df3e:	4810      	ldr	r0, [pc, #64]	; (801df80 <on_request+0x98>)
 801df40:	b014      	add	sp, #80	; 0x50
 801df42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df46:	f000 b877 	b.w	801e038 <put_memory>
 801df4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df4c:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801df50:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801df54:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801df58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801df5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801df60:	e88c 0003 	stmia.w	ip, {r0, r1}
 801df64:	f000 fae4 	bl	801e530 <rmw_uros_epoch_nanos>
 801df68:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801df6c:	2303      	movs	r3, #3
 801df6e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801df72:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801df76:	b014      	add	sp, #80	; 0x50
 801df78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df7c:	20016d8c 	.word	0x20016d8c
 801df80:	20016dac 	.word	0x20016dac

0801df84 <on_reply>:
 801df84:	4822      	ldr	r0, [pc, #136]	; (801e010 <on_reply+0x8c>)
 801df86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df8a:	6800      	ldr	r0, [r0, #0]
 801df8c:	b094      	sub	sp, #80	; 0x50
 801df8e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801df90:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801df94:	9113      	str	r1, [sp, #76]	; 0x4c
 801df96:	b3b8      	cbz	r0, 801e008 <on_reply+0x84>
 801df98:	461d      	mov	r5, r3
 801df9a:	e001      	b.n	801dfa0 <on_reply+0x1c>
 801df9c:	6840      	ldr	r0, [r0, #4]
 801df9e:	b398      	cbz	r0, 801e008 <on_reply+0x84>
 801dfa0:	6884      	ldr	r4, [r0, #8]
 801dfa2:	8b21      	ldrh	r1, [r4, #24]
 801dfa4:	4291      	cmp	r1, r2
 801dfa6:	d1f9      	bne.n	801df9c <on_reply+0x18>
 801dfa8:	2248      	movs	r2, #72	; 0x48
 801dfaa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801dfae:	4668      	mov	r0, sp
 801dfb0:	f002 ffed 	bl	8020f8e <memcpy>
 801dfb4:	f104 0320 	add.w	r3, r4, #32
 801dfb8:	4620      	mov	r0, r4
 801dfba:	cb0c      	ldmia	r3, {r2, r3}
 801dfbc:	f7f8 ff48 	bl	8016e50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801dfc0:	4680      	mov	r8, r0
 801dfc2:	b308      	cbz	r0, 801e008 <on_reply+0x84>
 801dfc4:	4630      	mov	r0, r6
 801dfc6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801dfca:	463a      	mov	r2, r7
 801dfcc:	f106 0110 	add.w	r1, r6, #16
 801dfd0:	f7f9 fbfe 	bl	80177d0 <ucdr_deserialize_array_uint8_t>
 801dfd4:	b930      	cbnz	r0, 801dfe4 <on_reply+0x60>
 801dfd6:	4641      	mov	r1, r8
 801dfd8:	480e      	ldr	r0, [pc, #56]	; (801e014 <on_reply+0x90>)
 801dfda:	b014      	add	sp, #80	; 0x50
 801dfdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dfe0:	f000 b82a 	b.w	801e038 <put_memory>
 801dfe4:	2200      	movs	r2, #0
 801dfe6:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801dfea:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801dfee:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801dff2:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801dff6:	f000 fa9b 	bl	801e530 <rmw_uros_epoch_nanos>
 801dffa:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801dffe:	2304      	movs	r3, #4
 801e000:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e004:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e008:	b014      	add	sp, #80	; 0x50
 801e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e00e:	bf00      	nop
 801e010:	2001249c 	.word	0x2001249c
 801e014:	20016dac 	.word	0x20016dac

0801e018 <get_memory>:
 801e018:	4603      	mov	r3, r0
 801e01a:	6840      	ldr	r0, [r0, #4]
 801e01c:	b158      	cbz	r0, 801e036 <get_memory+0x1e>
 801e01e:	6842      	ldr	r2, [r0, #4]
 801e020:	605a      	str	r2, [r3, #4]
 801e022:	b10a      	cbz	r2, 801e028 <get_memory+0x10>
 801e024:	2100      	movs	r1, #0
 801e026:	6011      	str	r1, [r2, #0]
 801e028:	681a      	ldr	r2, [r3, #0]
 801e02a:	6042      	str	r2, [r0, #4]
 801e02c:	b102      	cbz	r2, 801e030 <get_memory+0x18>
 801e02e:	6010      	str	r0, [r2, #0]
 801e030:	2200      	movs	r2, #0
 801e032:	6002      	str	r2, [r0, #0]
 801e034:	6018      	str	r0, [r3, #0]
 801e036:	4770      	bx	lr

0801e038 <put_memory>:
 801e038:	680b      	ldr	r3, [r1, #0]
 801e03a:	b10b      	cbz	r3, 801e040 <put_memory+0x8>
 801e03c:	684a      	ldr	r2, [r1, #4]
 801e03e:	605a      	str	r2, [r3, #4]
 801e040:	684a      	ldr	r2, [r1, #4]
 801e042:	b102      	cbz	r2, 801e046 <put_memory+0xe>
 801e044:	6013      	str	r3, [r2, #0]
 801e046:	6803      	ldr	r3, [r0, #0]
 801e048:	428b      	cmp	r3, r1
 801e04a:	6843      	ldr	r3, [r0, #4]
 801e04c:	bf08      	it	eq
 801e04e:	6002      	streq	r2, [r0, #0]
 801e050:	604b      	str	r3, [r1, #4]
 801e052:	b103      	cbz	r3, 801e056 <put_memory+0x1e>
 801e054:	6019      	str	r1, [r3, #0]
 801e056:	2300      	movs	r3, #0
 801e058:	600b      	str	r3, [r1, #0]
 801e05a:	6041      	str	r1, [r0, #4]
 801e05c:	4770      	bx	lr
 801e05e:	bf00      	nop

0801e060 <rmw_destroy_client>:
 801e060:	b570      	push	{r4, r5, r6, lr}
 801e062:	b128      	cbz	r0, 801e070 <rmw_destroy_client+0x10>
 801e064:	4604      	mov	r4, r0
 801e066:	6800      	ldr	r0, [r0, #0]
 801e068:	460d      	mov	r5, r1
 801e06a:	f7f9 f905 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 801e06e:	b910      	cbnz	r0, 801e076 <rmw_destroy_client+0x16>
 801e070:	2401      	movs	r4, #1
 801e072:	4620      	mov	r0, r4
 801e074:	bd70      	pop	{r4, r5, r6, pc}
 801e076:	6863      	ldr	r3, [r4, #4]
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d0f9      	beq.n	801e070 <rmw_destroy_client+0x10>
 801e07c:	2d00      	cmp	r5, #0
 801e07e:	d0f7      	beq.n	801e070 <rmw_destroy_client+0x10>
 801e080:	6828      	ldr	r0, [r5, #0]
 801e082:	f7f9 f8f9 	bl	8017278 <is_uxrce_rmw_identifier_valid>
 801e086:	2800      	cmp	r0, #0
 801e088:	d0f2      	beq.n	801e070 <rmw_destroy_client+0x10>
 801e08a:	686e      	ldr	r6, [r5, #4]
 801e08c:	2e00      	cmp	r6, #0
 801e08e:	d0ef      	beq.n	801e070 <rmw_destroy_client+0x10>
 801e090:	6864      	ldr	r4, [r4, #4]
 801e092:	6932      	ldr	r2, [r6, #16]
 801e094:	6920      	ldr	r0, [r4, #16]
 801e096:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e09a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e09e:	6819      	ldr	r1, [r3, #0]
 801e0a0:	f7f9 ff62 	bl	8017f68 <uxr_buffer_cancel_data>
 801e0a4:	4602      	mov	r2, r0
 801e0a6:	6920      	ldr	r0, [r4, #16]
 801e0a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e0ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e0b0:	f7f8 ffd0 	bl	8017054 <run_xrce_session>
 801e0b4:	6920      	ldr	r0, [r4, #16]
 801e0b6:	6932      	ldr	r2, [r6, #16]
 801e0b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e0bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e0c0:	6819      	ldr	r1, [r3, #0]
 801e0c2:	f7f9 fbed 	bl	80178a0 <uxr_buffer_delete_entity>
 801e0c6:	4602      	mov	r2, r0
 801e0c8:	6920      	ldr	r0, [r4, #16]
 801e0ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e0ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e0d2:	f7f8 ffbf 	bl	8017054 <run_xrce_session>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	4628      	mov	r0, r5
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	bf14      	ite	ne
 801e0de:	2400      	movne	r4, #0
 801e0e0:	2402      	moveq	r4, #2
 801e0e2:	f7f8 fe93 	bl	8016e0c <rmw_uxrce_fini_client_memory>
 801e0e6:	e7c4      	b.n	801e072 <rmw_destroy_client+0x12>

0801e0e8 <rmw_get_implementation_identifier>:
 801e0e8:	4b01      	ldr	r3, [pc, #4]	; (801e0f0 <rmw_get_implementation_identifier+0x8>)
 801e0ea:	6818      	ldr	r0, [r3, #0]
 801e0ec:	4770      	bx	lr
 801e0ee:	bf00      	nop
 801e0f0:	08025ac4 	.word	0x08025ac4

0801e0f4 <rmw_create_guard_condition>:
 801e0f4:	b538      	push	{r3, r4, r5, lr}
 801e0f6:	4605      	mov	r5, r0
 801e0f8:	4808      	ldr	r0, [pc, #32]	; (801e11c <rmw_create_guard_condition+0x28>)
 801e0fa:	f7ff ff8d 	bl	801e018 <get_memory>
 801e0fe:	4603      	mov	r3, r0
 801e100:	b148      	cbz	r0, 801e116 <rmw_create_guard_condition+0x22>
 801e102:	6884      	ldr	r4, [r0, #8]
 801e104:	2300      	movs	r3, #0
 801e106:	61e5      	str	r5, [r4, #28]
 801e108:	7423      	strb	r3, [r4, #16]
 801e10a:	f7ff ffed 	bl	801e0e8 <rmw_get_implementation_identifier>
 801e10e:	f104 0314 	add.w	r3, r4, #20
 801e112:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e116:	4618      	mov	r0, r3
 801e118:	bd38      	pop	{r3, r4, r5, pc}
 801e11a:	bf00      	nop
 801e11c:	20016d4c 	.word	0x20016d4c

0801e120 <rmw_destroy_guard_condition>:
 801e120:	b508      	push	{r3, lr}
 801e122:	4b08      	ldr	r3, [pc, #32]	; (801e144 <rmw_destroy_guard_condition+0x24>)
 801e124:	6819      	ldr	r1, [r3, #0]
 801e126:	b911      	cbnz	r1, 801e12e <rmw_destroy_guard_condition+0xe>
 801e128:	e00a      	b.n	801e140 <rmw_destroy_guard_condition+0x20>
 801e12a:	6849      	ldr	r1, [r1, #4]
 801e12c:	b141      	cbz	r1, 801e140 <rmw_destroy_guard_condition+0x20>
 801e12e:	688b      	ldr	r3, [r1, #8]
 801e130:	3314      	adds	r3, #20
 801e132:	4298      	cmp	r0, r3
 801e134:	d1f9      	bne.n	801e12a <rmw_destroy_guard_condition+0xa>
 801e136:	4803      	ldr	r0, [pc, #12]	; (801e144 <rmw_destroy_guard_condition+0x24>)
 801e138:	f7ff ff7e 	bl	801e038 <put_memory>
 801e13c:	2000      	movs	r0, #0
 801e13e:	bd08      	pop	{r3, pc}
 801e140:	2001      	movs	r0, #1
 801e142:	bd08      	pop	{r3, pc}
 801e144:	20016d4c 	.word	0x20016d4c

0801e148 <create_topic>:
 801e148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e14c:	4605      	mov	r5, r0
 801e14e:	b084      	sub	sp, #16
 801e150:	4822      	ldr	r0, [pc, #136]	; (801e1dc <create_topic+0x94>)
 801e152:	460f      	mov	r7, r1
 801e154:	4616      	mov	r6, r2
 801e156:	f7ff ff5f 	bl	801e018 <get_memory>
 801e15a:	4604      	mov	r4, r0
 801e15c:	2800      	cmp	r0, #0
 801e15e:	d039      	beq.n	801e1d4 <create_topic+0x8c>
 801e160:	692b      	ldr	r3, [r5, #16]
 801e162:	2102      	movs	r1, #2
 801e164:	6884      	ldr	r4, [r0, #8]
 801e166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e16a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e1e4 <create_topic+0x9c>
 801e16e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e172:	1c42      	adds	r2, r0, #1
 801e174:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e178:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e17c:	f7f9 fe8a 	bl	8017e94 <uxr_object_id>
 801e180:	223c      	movs	r2, #60	; 0x3c
 801e182:	6120      	str	r0, [r4, #16]
 801e184:	4641      	mov	r1, r8
 801e186:	4638      	mov	r0, r7
 801e188:	f7f9 f85e 	bl	8017248 <generate_topic_name>
 801e18c:	b1f0      	cbz	r0, 801e1cc <create_topic+0x84>
 801e18e:	4f14      	ldr	r7, [pc, #80]	; (801e1e0 <create_topic+0x98>)
 801e190:	4630      	mov	r0, r6
 801e192:	2264      	movs	r2, #100	; 0x64
 801e194:	4639      	mov	r1, r7
 801e196:	f7f9 f829 	bl	80171ec <generate_type_name>
 801e19a:	b1b8      	cbz	r0, 801e1cc <create_topic+0x84>
 801e19c:	6928      	ldr	r0, [r5, #16]
 801e19e:	2106      	movs	r1, #6
 801e1a0:	696b      	ldr	r3, [r5, #20]
 801e1a2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e1a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e1aa:	f8cd 8000 	str.w	r8, [sp]
 801e1ae:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e1b2:	6811      	ldr	r1, [r2, #0]
 801e1b4:	6922      	ldr	r2, [r4, #16]
 801e1b6:	f7f9 fbf1 	bl	801799c <uxr_buffer_create_topic_bin>
 801e1ba:	4602      	mov	r2, r0
 801e1bc:	6928      	ldr	r0, [r5, #16]
 801e1be:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e1c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e1c6:	f7f8 ff45 	bl	8017054 <run_xrce_session>
 801e1ca:	b918      	cbnz	r0, 801e1d4 <create_topic+0x8c>
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	2400      	movs	r4, #0
 801e1d0:	f7f8 fe32 	bl	8016e38 <rmw_uxrce_fini_topic_memory>
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	b004      	add	sp, #16
 801e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1dc:	20016dcc 	.word	0x20016dcc
 801e1e0:	20016e60 	.word	0x20016e60
 801e1e4:	20016e24 	.word	0x20016e24

0801e1e8 <destroy_topic>:
 801e1e8:	b538      	push	{r3, r4, r5, lr}
 801e1ea:	6985      	ldr	r5, [r0, #24]
 801e1ec:	b1dd      	cbz	r5, 801e226 <destroy_topic+0x3e>
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	6928      	ldr	r0, [r5, #16]
 801e1f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e1f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e1fa:	6922      	ldr	r2, [r4, #16]
 801e1fc:	6819      	ldr	r1, [r3, #0]
 801e1fe:	f7f9 fb4f 	bl	80178a0 <uxr_buffer_delete_entity>
 801e202:	4602      	mov	r2, r0
 801e204:	6928      	ldr	r0, [r5, #16]
 801e206:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e20a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e20e:	f7f8 ff21 	bl	8017054 <run_xrce_session>
 801e212:	4603      	mov	r3, r0
 801e214:	4620      	mov	r0, r4
 801e216:	2b00      	cmp	r3, #0
 801e218:	bf14      	ite	ne
 801e21a:	2400      	movne	r4, #0
 801e21c:	2402      	moveq	r4, #2
 801e21e:	f7f8 fe0b 	bl	8016e38 <rmw_uxrce_fini_topic_memory>
 801e222:	4620      	mov	r0, r4
 801e224:	bd38      	pop	{r3, r4, r5, pc}
 801e226:	2401      	movs	r4, #1
 801e228:	4620      	mov	r0, r4
 801e22a:	bd38      	pop	{r3, r4, r5, pc}

0801e22c <rmw_wait>:
 801e22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e230:	4698      	mov	r8, r3
 801e232:	ea40 0301 	orr.w	r3, r0, r1
 801e236:	b089      	sub	sp, #36	; 0x24
 801e238:	ea48 0303 	orr.w	r3, r8, r3
 801e23c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e23e:	4313      	orrs	r3, r2
 801e240:	f000 8106 	beq.w	801e450 <rmw_wait+0x224>
 801e244:	4605      	mov	r5, r0
 801e246:	460e      	mov	r6, r1
 801e248:	4691      	mov	r9, r2
 801e24a:	b16c      	cbz	r4, 801e268 <rmw_wait+0x3c>
 801e24c:	4ba6      	ldr	r3, [pc, #664]	; (801e4e8 <rmw_wait+0x2bc>)
 801e24e:	af04      	add	r7, sp, #16
 801e250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e252:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e256:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e25a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e25e:	f7ff fcef 	bl	801dc40 <rmw_time_equal>
 801e262:	2800      	cmp	r0, #0
 801e264:	f000 810b 	beq.w	801e47e <rmw_wait+0x252>
 801e268:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e26c:	f7f8 fe74 	bl	8016f58 <rmw_uxrce_clean_expired_static_input_buffer>
 801e270:	4b9e      	ldr	r3, [pc, #632]	; (801e4ec <rmw_wait+0x2c0>)
 801e272:	681c      	ldr	r4, [r3, #0]
 801e274:	b14c      	cbz	r4, 801e28a <rmw_wait+0x5e>
 801e276:	4623      	mov	r3, r4
 801e278:	2100      	movs	r1, #0
 801e27a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e27e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e282:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e286:	2b00      	cmp	r3, #0
 801e288:	d1f7      	bne.n	801e27a <rmw_wait+0x4e>
 801e28a:	f1b9 0f00 	cmp.w	r9, #0
 801e28e:	d011      	beq.n	801e2b4 <rmw_wait+0x88>
 801e290:	f8d9 1000 	ldr.w	r1, [r9]
 801e294:	b171      	cbz	r1, 801e2b4 <rmw_wait+0x88>
 801e296:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e29a:	2300      	movs	r3, #0
 801e29c:	2001      	movs	r0, #1
 801e29e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e2a2:	3301      	adds	r3, #1
 801e2a4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e2a6:	4299      	cmp	r1, r3
 801e2a8:	6912      	ldr	r2, [r2, #16]
 801e2aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e2ae:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e2b2:	d1f4      	bne.n	801e29e <rmw_wait+0x72>
 801e2b4:	f1b8 0f00 	cmp.w	r8, #0
 801e2b8:	d011      	beq.n	801e2de <rmw_wait+0xb2>
 801e2ba:	f8d8 1000 	ldr.w	r1, [r8]
 801e2be:	b171      	cbz	r1, 801e2de <rmw_wait+0xb2>
 801e2c0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	2001      	movs	r0, #1
 801e2c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e2cc:	3301      	adds	r3, #1
 801e2ce:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e2d0:	4299      	cmp	r1, r3
 801e2d2:	6912      	ldr	r2, [r2, #16]
 801e2d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e2d8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e2dc:	d1f4      	bne.n	801e2c8 <rmw_wait+0x9c>
 801e2de:	b185      	cbz	r5, 801e302 <rmw_wait+0xd6>
 801e2e0:	6829      	ldr	r1, [r5, #0]
 801e2e2:	b171      	cbz	r1, 801e302 <rmw_wait+0xd6>
 801e2e4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e2e8:	2300      	movs	r3, #0
 801e2ea:	2001      	movs	r0, #1
 801e2ec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e2f0:	3301      	adds	r3, #1
 801e2f2:	6a12      	ldr	r2, [r2, #32]
 801e2f4:	4299      	cmp	r1, r3
 801e2f6:	6912      	ldr	r2, [r2, #16]
 801e2f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e2fc:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e300:	d1f4      	bne.n	801e2ec <rmw_wait+0xc0>
 801e302:	b344      	cbz	r4, 801e356 <rmw_wait+0x12a>
 801e304:	4622      	mov	r2, r4
 801e306:	2300      	movs	r3, #0
 801e308:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e30c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e310:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e314:	440b      	add	r3, r1
 801e316:	b2db      	uxtb	r3, r3
 801e318:	2a00      	cmp	r2, #0
 801e31a:	d1f5      	bne.n	801e308 <rmw_wait+0xdc>
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d05f      	beq.n	801e3e0 <rmw_wait+0x1b4>
 801e320:	1c7a      	adds	r2, r7, #1
 801e322:	d00d      	beq.n	801e340 <rmw_wait+0x114>
 801e324:	ee07 7a90 	vmov	s15, r7
 801e328:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e32c:	ee07 3a90 	vmov	s15, r3
 801e330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e338:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e33c:	ee17 7a90 	vmov	r7, s15
 801e340:	68a0      	ldr	r0, [r4, #8]
 801e342:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e346:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	f040 808d 	bne.w	801e46a <rmw_wait+0x23e>
 801e350:	6864      	ldr	r4, [r4, #4]
 801e352:	2c00      	cmp	r4, #0
 801e354:	d1f4      	bne.n	801e340 <rmw_wait+0x114>
 801e356:	f1b9 0f00 	cmp.w	r9, #0
 801e35a:	f000 80a1 	beq.w	801e4a0 <rmw_wait+0x274>
 801e35e:	f8d9 7000 	ldr.w	r7, [r9]
 801e362:	2f00      	cmp	r7, #0
 801e364:	f000 80a4 	beq.w	801e4b0 <rmw_wait+0x284>
 801e368:	2400      	movs	r4, #0
 801e36a:	4627      	mov	r7, r4
 801e36c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e370:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e374:	f7f8 fdc6 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e378:	2800      	cmp	r0, #0
 801e37a:	d03b      	beq.n	801e3f4 <rmw_wait+0x1c8>
 801e37c:	3401      	adds	r4, #1
 801e37e:	f8d9 3000 	ldr.w	r3, [r9]
 801e382:	2701      	movs	r7, #1
 801e384:	42a3      	cmp	r3, r4
 801e386:	d8f1      	bhi.n	801e36c <rmw_wait+0x140>
 801e388:	2701      	movs	r7, #1
 801e38a:	f1b8 0f00 	cmp.w	r8, #0
 801e38e:	d010      	beq.n	801e3b2 <rmw_wait+0x186>
 801e390:	f8d8 3000 	ldr.w	r3, [r8]
 801e394:	b16b      	cbz	r3, 801e3b2 <rmw_wait+0x186>
 801e396:	2400      	movs	r4, #0
 801e398:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e39c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e3a0:	f7f8 fdb0 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e3a4:	b370      	cbz	r0, 801e404 <rmw_wait+0x1d8>
 801e3a6:	3401      	adds	r4, #1
 801e3a8:	f8d8 3000 	ldr.w	r3, [r8]
 801e3ac:	2701      	movs	r7, #1
 801e3ae:	42a3      	cmp	r3, r4
 801e3b0:	d8f2      	bhi.n	801e398 <rmw_wait+0x16c>
 801e3b2:	2d00      	cmp	r5, #0
 801e3b4:	d035      	beq.n	801e422 <rmw_wait+0x1f6>
 801e3b6:	682b      	ldr	r3, [r5, #0]
 801e3b8:	b39b      	cbz	r3, 801e422 <rmw_wait+0x1f6>
 801e3ba:	2400      	movs	r4, #0
 801e3bc:	686b      	ldr	r3, [r5, #4]
 801e3be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e3c2:	f7f8 fd9f 	bl	8016f04 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e3c6:	b328      	cbz	r0, 801e414 <rmw_wait+0x1e8>
 801e3c8:	3401      	adds	r4, #1
 801e3ca:	682b      	ldr	r3, [r5, #0]
 801e3cc:	2701      	movs	r7, #1
 801e3ce:	42a3      	cmp	r3, r4
 801e3d0:	d8f4      	bhi.n	801e3bc <rmw_wait+0x190>
 801e3d2:	2e00      	cmp	r6, #0
 801e3d4:	d03c      	beq.n	801e450 <rmw_wait+0x224>
 801e3d6:	6834      	ldr	r4, [r6, #0]
 801e3d8:	2c00      	cmp	r4, #0
 801e3da:	d039      	beq.n	801e450 <rmw_wait+0x224>
 801e3dc:	2701      	movs	r7, #1
 801e3de:	e023      	b.n	801e428 <rmw_wait+0x1fc>
 801e3e0:	68a0      	ldr	r0, [r4, #8]
 801e3e2:	2100      	movs	r1, #0
 801e3e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e3e8:	f7fa fb54 	bl	8018a94 <uxr_run_session_timeout>
 801e3ec:	6864      	ldr	r4, [r4, #4]
 801e3ee:	2c00      	cmp	r4, #0
 801e3f0:	d1f6      	bne.n	801e3e0 <rmw_wait+0x1b4>
 801e3f2:	e7b0      	b.n	801e356 <rmw_wait+0x12a>
 801e3f4:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e3f8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e3fc:	3401      	adds	r4, #1
 801e3fe:	42a3      	cmp	r3, r4
 801e400:	d8b4      	bhi.n	801e36c <rmw_wait+0x140>
 801e402:	e7c2      	b.n	801e38a <rmw_wait+0x15e>
 801e404:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e408:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e40c:	3401      	adds	r4, #1
 801e40e:	429c      	cmp	r4, r3
 801e410:	d3c2      	bcc.n	801e398 <rmw_wait+0x16c>
 801e412:	e7ce      	b.n	801e3b2 <rmw_wait+0x186>
 801e414:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e418:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e41c:	3401      	adds	r4, #1
 801e41e:	42a3      	cmp	r3, r4
 801e420:	d8cc      	bhi.n	801e3bc <rmw_wait+0x190>
 801e422:	b1a6      	cbz	r6, 801e44e <rmw_wait+0x222>
 801e424:	6834      	ldr	r4, [r6, #0]
 801e426:	b194      	cbz	r4, 801e44e <rmw_wait+0x222>
 801e428:	2300      	movs	r3, #0
 801e42a:	461d      	mov	r5, r3
 801e42c:	e004      	b.n	801e438 <rmw_wait+0x20c>
 801e42e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e432:	3301      	adds	r3, #1
 801e434:	42a3      	cmp	r3, r4
 801e436:	d00a      	beq.n	801e44e <rmw_wait+0x222>
 801e438:	6870      	ldr	r0, [r6, #4]
 801e43a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e43e:	7c0a      	ldrb	r2, [r1, #16]
 801e440:	2a00      	cmp	r2, #0
 801e442:	d0f4      	beq.n	801e42e <rmw_wait+0x202>
 801e444:	3301      	adds	r3, #1
 801e446:	4617      	mov	r7, r2
 801e448:	740d      	strb	r5, [r1, #16]
 801e44a:	42a3      	cmp	r3, r4
 801e44c:	d1f4      	bne.n	801e438 <rmw_wait+0x20c>
 801e44e:	b147      	cbz	r7, 801e462 <rmw_wait+0x236>
 801e450:	2000      	movs	r0, #0
 801e452:	b009      	add	sp, #36	; 0x24
 801e454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e458:	b11e      	cbz	r6, 801e462 <rmw_wait+0x236>
 801e45a:	6834      	ldr	r4, [r6, #0]
 801e45c:	462f      	mov	r7, r5
 801e45e:	2c00      	cmp	r4, #0
 801e460:	d1e2      	bne.n	801e428 <rmw_wait+0x1fc>
 801e462:	2002      	movs	r0, #2
 801e464:	b009      	add	sp, #36	; 0x24
 801e466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e46a:	4639      	mov	r1, r7
 801e46c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e470:	f7fa fb2a 	bl	8018ac8 <uxr_run_session_until_data>
 801e474:	6864      	ldr	r4, [r4, #4]
 801e476:	2c00      	cmp	r4, #0
 801e478:	f47f af62 	bne.w	801e340 <rmw_wait+0x114>
 801e47c:	e76b      	b.n	801e356 <rmw_wait+0x12a>
 801e47e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e482:	f7ff fc33 	bl	801dcec <rmw_time_total_nsec>
 801e486:	2300      	movs	r3, #0
 801e488:	4a19      	ldr	r2, [pc, #100]	; (801e4f0 <rmw_wait+0x2c4>)
 801e48a:	f7e2 f94d 	bl	8000728 <__aeabi_uldivmod>
 801e48e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e492:	4607      	mov	r7, r0
 801e494:	f171 0300 	sbcs.w	r3, r1, #0
 801e498:	bfa8      	it	ge
 801e49a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e49e:	e6e5      	b.n	801e26c <rmw_wait+0x40>
 801e4a0:	f1b8 0f00 	cmp.w	r8, #0
 801e4a4:	d00f      	beq.n	801e4c6 <rmw_wait+0x29a>
 801e4a6:	f8d8 3000 	ldr.w	r3, [r8]
 801e4aa:	b193      	cbz	r3, 801e4d2 <rmw_wait+0x2a6>
 801e4ac:	464f      	mov	r7, r9
 801e4ae:	e772      	b.n	801e396 <rmw_wait+0x16a>
 801e4b0:	f1b8 0f00 	cmp.w	r8, #0
 801e4b4:	d007      	beq.n	801e4c6 <rmw_wait+0x29a>
 801e4b6:	f8d8 3000 	ldr.w	r3, [r8]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	f47f af6b 	bne.w	801e396 <rmw_wait+0x16a>
 801e4c0:	b155      	cbz	r5, 801e4d8 <rmw_wait+0x2ac>
 801e4c2:	461f      	mov	r7, r3
 801e4c4:	e777      	b.n	801e3b6 <rmw_wait+0x18a>
 801e4c6:	2d00      	cmp	r5, #0
 801e4c8:	d0c6      	beq.n	801e458 <rmw_wait+0x22c>
 801e4ca:	682b      	ldr	r3, [r5, #0]
 801e4cc:	b143      	cbz	r3, 801e4e0 <rmw_wait+0x2b4>
 801e4ce:	4647      	mov	r7, r8
 801e4d0:	e773      	b.n	801e3ba <rmw_wait+0x18e>
 801e4d2:	b10d      	cbz	r5, 801e4d8 <rmw_wait+0x2ac>
 801e4d4:	464f      	mov	r7, r9
 801e4d6:	e76e      	b.n	801e3b6 <rmw_wait+0x18a>
 801e4d8:	462f      	mov	r7, r5
 801e4da:	2e00      	cmp	r6, #0
 801e4dc:	d1a2      	bne.n	801e424 <rmw_wait+0x1f8>
 801e4de:	e7c0      	b.n	801e462 <rmw_wait+0x236>
 801e4e0:	4647      	mov	r7, r8
 801e4e2:	2e00      	cmp	r6, #0
 801e4e4:	d19e      	bne.n	801e424 <rmw_wait+0x1f8>
 801e4e6:	e7bc      	b.n	801e462 <rmw_wait+0x236>
 801e4e8:	08024550 	.word	0x08024550
 801e4ec:	20016d9c 	.word	0x20016d9c
 801e4f0:	000f4240 	.word	0x000f4240

0801e4f4 <rmw_create_wait_set>:
 801e4f4:	b508      	push	{r3, lr}
 801e4f6:	4803      	ldr	r0, [pc, #12]	; (801e504 <rmw_create_wait_set+0x10>)
 801e4f8:	f7ff fd8e 	bl	801e018 <get_memory>
 801e4fc:	b108      	cbz	r0, 801e502 <rmw_create_wait_set+0xe>
 801e4fe:	6880      	ldr	r0, [r0, #8]
 801e500:	3010      	adds	r0, #16
 801e502:	bd08      	pop	{r3, pc}
 801e504:	20016ddc 	.word	0x20016ddc

0801e508 <rmw_destroy_wait_set>:
 801e508:	b508      	push	{r3, lr}
 801e50a:	4b08      	ldr	r3, [pc, #32]	; (801e52c <rmw_destroy_wait_set+0x24>)
 801e50c:	6819      	ldr	r1, [r3, #0]
 801e50e:	b911      	cbnz	r1, 801e516 <rmw_destroy_wait_set+0xe>
 801e510:	e00a      	b.n	801e528 <rmw_destroy_wait_set+0x20>
 801e512:	6849      	ldr	r1, [r1, #4]
 801e514:	b141      	cbz	r1, 801e528 <rmw_destroy_wait_set+0x20>
 801e516:	688b      	ldr	r3, [r1, #8]
 801e518:	3310      	adds	r3, #16
 801e51a:	4298      	cmp	r0, r3
 801e51c:	d1f9      	bne.n	801e512 <rmw_destroy_wait_set+0xa>
 801e51e:	4803      	ldr	r0, [pc, #12]	; (801e52c <rmw_destroy_wait_set+0x24>)
 801e520:	f7ff fd8a 	bl	801e038 <put_memory>
 801e524:	2000      	movs	r0, #0
 801e526:	bd08      	pop	{r3, pc}
 801e528:	2001      	movs	r0, #1
 801e52a:	bd08      	pop	{r3, pc}
 801e52c:	20016ddc 	.word	0x20016ddc

0801e530 <rmw_uros_epoch_nanos>:
 801e530:	4b05      	ldr	r3, [pc, #20]	; (801e548 <rmw_uros_epoch_nanos+0x18>)
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	b123      	cbz	r3, 801e540 <rmw_uros_epoch_nanos+0x10>
 801e536:	6898      	ldr	r0, [r3, #8]
 801e538:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e53c:	f7f9 bf20 	b.w	8018380 <uxr_epoch_nanos>
 801e540:	2000      	movs	r0, #0
 801e542:	2100      	movs	r1, #0
 801e544:	4770      	bx	lr
 801e546:	bf00      	nop
 801e548:	20016d9c 	.word	0x20016d9c

0801e54c <std_msgs__msg__String__init>:
 801e54c:	b538      	push	{r3, r4, r5, lr}
 801e54e:	4604      	mov	r4, r0
 801e550:	b128      	cbz	r0, 801e55e <std_msgs__msg__String__init+0x12>
 801e552:	f7f8 feb7 	bl	80172c4 <rosidl_runtime_c__String__init>
 801e556:	4605      	mov	r5, r0
 801e558:	b120      	cbz	r0, 801e564 <std_msgs__msg__String__init+0x18>
 801e55a:	4628      	mov	r0, r5
 801e55c:	bd38      	pop	{r3, r4, r5, pc}
 801e55e:	4605      	mov	r5, r0
 801e560:	4628      	mov	r0, r5
 801e562:	bd38      	pop	{r3, r4, r5, pc}
 801e564:	4620      	mov	r0, r4
 801e566:	f7f8 fec3 	bl	80172f0 <rosidl_runtime_c__String__fini>
 801e56a:	4628      	mov	r0, r5
 801e56c:	bd38      	pop	{r3, r4, r5, pc}
 801e56e:	bf00      	nop

0801e570 <std_msgs__msg__String__fini>:
 801e570:	b108      	cbz	r0, 801e576 <std_msgs__msg__String__fini+0x6>
 801e572:	f7f8 bebd 	b.w	80172f0 <rosidl_runtime_c__String__fini>
 801e576:	4770      	bx	lr

0801e578 <ucdr_serialize_string>:
 801e578:	b510      	push	{r4, lr}
 801e57a:	b082      	sub	sp, #8
 801e57c:	4604      	mov	r4, r0
 801e57e:	4608      	mov	r0, r1
 801e580:	9101      	str	r1, [sp, #4]
 801e582:	f7e1 febd 	bl	8000300 <strlen>
 801e586:	4602      	mov	r2, r0
 801e588:	9901      	ldr	r1, [sp, #4]
 801e58a:	4620      	mov	r0, r4
 801e58c:	3201      	adds	r2, #1
 801e58e:	b002      	add	sp, #8
 801e590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e594:	f7f4 bf38 	b.w	8013408 <ucdr_serialize_sequence_char>

0801e598 <ucdr_deserialize_string>:
 801e598:	b500      	push	{lr}
 801e59a:	b083      	sub	sp, #12
 801e59c:	ab01      	add	r3, sp, #4
 801e59e:	f7f4 ff45 	bl	801342c <ucdr_deserialize_sequence_char>
 801e5a2:	b003      	add	sp, #12
 801e5a4:	f85d fb04 	ldr.w	pc, [sp], #4

0801e5a8 <uxr_init_input_best_effort_stream>:
 801e5a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e5ac:	8003      	strh	r3, [r0, #0]
 801e5ae:	4770      	bx	lr

0801e5b0 <uxr_reset_input_best_effort_stream>:
 801e5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e5b4:	8003      	strh	r3, [r0, #0]
 801e5b6:	4770      	bx	lr

0801e5b8 <uxr_receive_best_effort_message>:
 801e5b8:	b538      	push	{r3, r4, r5, lr}
 801e5ba:	4604      	mov	r4, r0
 801e5bc:	8800      	ldrh	r0, [r0, #0]
 801e5be:	460d      	mov	r5, r1
 801e5c0:	f000 fd46 	bl	801f050 <uxr_seq_num_cmp>
 801e5c4:	4603      	mov	r3, r0
 801e5c6:	0fc0      	lsrs	r0, r0, #31
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	bfb8      	it	lt
 801e5cc:	8025      	strhlt	r5, [r4, #0]
 801e5ce:	bd38      	pop	{r3, r4, r5, pc}

0801e5d0 <on_full_input_buffer>:
 801e5d0:	b570      	push	{r4, r5, r6, lr}
 801e5d2:	460c      	mov	r4, r1
 801e5d4:	4605      	mov	r5, r0
 801e5d6:	8908      	ldrh	r0, [r1, #8]
 801e5d8:	682b      	ldr	r3, [r5, #0]
 801e5da:	7d26      	ldrb	r6, [r4, #20]
 801e5dc:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e5e0:	fbb2 f2f0 	udiv	r2, r2, r0
 801e5e4:	eba3 0c01 	sub.w	ip, r3, r1
 801e5e8:	fbbc fcf2 	udiv	ip, ip, r2
 801e5ec:	f10c 0c01 	add.w	ip, ip, #1
 801e5f0:	fa1f f38c 	uxth.w	r3, ip
 801e5f4:	fbb3 fcf0 	udiv	ip, r3, r0
 801e5f8:	fb00 331c 	mls	r3, r0, ip, r3
 801e5fc:	b29b      	uxth	r3, r3
 801e5fe:	fb02 f303 	mul.w	r3, r2, r3
 801e602:	1d18      	adds	r0, r3, #4
 801e604:	4408      	add	r0, r1
 801e606:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e60a:	b116      	cbz	r6, 801e612 <on_full_input_buffer+0x42>
 801e60c:	2600      	movs	r6, #0
 801e60e:	f840 6c04 	str.w	r6, [r0, #-4]
 801e612:	2a03      	cmp	r2, #3
 801e614:	d801      	bhi.n	801e61a <on_full_input_buffer+0x4a>
 801e616:	2001      	movs	r0, #1
 801e618:	bd70      	pop	{r4, r5, r6, pc}
 801e61a:	3308      	adds	r3, #8
 801e61c:	4628      	mov	r0, r5
 801e61e:	3a04      	subs	r2, #4
 801e620:	4419      	add	r1, r3
 801e622:	692b      	ldr	r3, [r5, #16]
 801e624:	f7f4 fe74 	bl	8013310 <ucdr_init_buffer_origin>
 801e628:	4628      	mov	r0, r5
 801e62a:	4622      	mov	r2, r4
 801e62c:	4902      	ldr	r1, [pc, #8]	; (801e638 <on_full_input_buffer+0x68>)
 801e62e:	f7f4 fe4b 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 801e632:	2000      	movs	r0, #0
 801e634:	bd70      	pop	{r4, r5, r6, pc}
 801e636:	bf00      	nop
 801e638:	0801e5d1 	.word	0x0801e5d1

0801e63c <uxr_init_input_reliable_stream>:
 801e63c:	b510      	push	{r4, lr}
 801e63e:	e9c0 1200 	strd	r1, r2, [r0]
 801e642:	2400      	movs	r4, #0
 801e644:	9a02      	ldr	r2, [sp, #8]
 801e646:	8103      	strh	r3, [r0, #8]
 801e648:	6102      	str	r2, [r0, #16]
 801e64a:	7504      	strb	r4, [r0, #20]
 801e64c:	b1c3      	cbz	r3, 801e680 <uxr_init_input_reliable_stream+0x44>
 801e64e:	600c      	str	r4, [r1, #0]
 801e650:	8901      	ldrh	r1, [r0, #8]
 801e652:	2901      	cmp	r1, #1
 801e654:	d914      	bls.n	801e680 <uxr_init_input_reliable_stream+0x44>
 801e656:	f04f 0c01 	mov.w	ip, #1
 801e65a:	6843      	ldr	r3, [r0, #4]
 801e65c:	f10c 0e01 	add.w	lr, ip, #1
 801e660:	fbbc f2f1 	udiv	r2, ip, r1
 801e664:	fbb3 f3f1 	udiv	r3, r3, r1
 801e668:	fb01 c212 	mls	r2, r1, r2, ip
 801e66c:	fa1f fc8e 	uxth.w	ip, lr
 801e670:	b292      	uxth	r2, r2
 801e672:	fb02 f303 	mul.w	r3, r2, r3
 801e676:	6802      	ldr	r2, [r0, #0]
 801e678:	50d4      	str	r4, [r2, r3]
 801e67a:	8901      	ldrh	r1, [r0, #8]
 801e67c:	4561      	cmp	r1, ip
 801e67e:	d8ec      	bhi.n	801e65a <uxr_init_input_reliable_stream+0x1e>
 801e680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e684:	60c3      	str	r3, [r0, #12]
 801e686:	bd10      	pop	{r4, pc}

0801e688 <uxr_reset_input_reliable_stream>:
 801e688:	8901      	ldrh	r1, [r0, #8]
 801e68a:	b1d9      	cbz	r1, 801e6c4 <uxr_reset_input_reliable_stream+0x3c>
 801e68c:	b510      	push	{r4, lr}
 801e68e:	f04f 0e00 	mov.w	lr, #0
 801e692:	46f4      	mov	ip, lr
 801e694:	4674      	mov	r4, lr
 801e696:	6843      	ldr	r3, [r0, #4]
 801e698:	f10e 0e01 	add.w	lr, lr, #1
 801e69c:	fbbc f2f1 	udiv	r2, ip, r1
 801e6a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801e6a4:	fb01 c212 	mls	r2, r1, r2, ip
 801e6a8:	fa1f fc8e 	uxth.w	ip, lr
 801e6ac:	b292      	uxth	r2, r2
 801e6ae:	fb02 f303 	mul.w	r3, r2, r3
 801e6b2:	6802      	ldr	r2, [r0, #0]
 801e6b4:	50d4      	str	r4, [r2, r3]
 801e6b6:	8901      	ldrh	r1, [r0, #8]
 801e6b8:	4561      	cmp	r1, ip
 801e6ba:	d8ec      	bhi.n	801e696 <uxr_reset_input_reliable_stream+0xe>
 801e6bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e6c0:	60c3      	str	r3, [r0, #12]
 801e6c2:	bd10      	pop	{r4, pc}
 801e6c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e6c8:	60c3      	str	r3, [r0, #12]
 801e6ca:	4770      	bx	lr

0801e6cc <uxr_receive_reliable_message>:
 801e6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6d0:	4604      	mov	r4, r0
 801e6d2:	460d      	mov	r5, r1
 801e6d4:	8901      	ldrh	r1, [r0, #8]
 801e6d6:	4617      	mov	r7, r2
 801e6d8:	8980      	ldrh	r0, [r0, #12]
 801e6da:	4698      	mov	r8, r3
 801e6dc:	f000 fcb0 	bl	801f040 <uxr_seq_num_add>
 801e6e0:	4629      	mov	r1, r5
 801e6e2:	4606      	mov	r6, r0
 801e6e4:	89a0      	ldrh	r0, [r4, #12]
 801e6e6:	f000 fcb3 	bl	801f050 <uxr_seq_num_cmp>
 801e6ea:	2800      	cmp	r0, #0
 801e6ec:	db0a      	blt.n	801e704 <uxr_receive_reliable_message+0x38>
 801e6ee:	2600      	movs	r6, #0
 801e6f0:	4629      	mov	r1, r5
 801e6f2:	89e0      	ldrh	r0, [r4, #14]
 801e6f4:	f000 fcac 	bl	801f050 <uxr_seq_num_cmp>
 801e6f8:	2800      	cmp	r0, #0
 801e6fa:	da00      	bge.n	801e6fe <uxr_receive_reliable_message+0x32>
 801e6fc:	81e5      	strh	r5, [r4, #14]
 801e6fe:	4630      	mov	r0, r6
 801e700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e704:	4630      	mov	r0, r6
 801e706:	4629      	mov	r1, r5
 801e708:	f000 fca2 	bl	801f050 <uxr_seq_num_cmp>
 801e70c:	2800      	cmp	r0, #0
 801e70e:	dbee      	blt.n	801e6ee <uxr_receive_reliable_message+0x22>
 801e710:	6923      	ldr	r3, [r4, #16]
 801e712:	4638      	mov	r0, r7
 801e714:	4798      	blx	r3
 801e716:	4681      	mov	r9, r0
 801e718:	2101      	movs	r1, #1
 801e71a:	89a0      	ldrh	r0, [r4, #12]
 801e71c:	f000 fc90 	bl	801f040 <uxr_seq_num_add>
 801e720:	f1b9 0f00 	cmp.w	r9, #0
 801e724:	bf08      	it	eq
 801e726:	4285      	cmpeq	r5, r0
 801e728:	bf0c      	ite	eq
 801e72a:	2601      	moveq	r6, #1
 801e72c:	2600      	movne	r6, #0
 801e72e:	d104      	bne.n	801e73a <uxr_receive_reliable_message+0x6e>
 801e730:	2300      	movs	r3, #0
 801e732:	9a08      	ldr	r2, [sp, #32]
 801e734:	81a0      	strh	r0, [r4, #12]
 801e736:	7013      	strb	r3, [r2, #0]
 801e738:	e7da      	b.n	801e6f0 <uxr_receive_reliable_message+0x24>
 801e73a:	8922      	ldrh	r2, [r4, #8]
 801e73c:	6863      	ldr	r3, [r4, #4]
 801e73e:	fbb5 f0f2 	udiv	r0, r5, r2
 801e742:	fbb3 f3f2 	udiv	r3, r3, r2
 801e746:	fb02 5010 	mls	r0, r2, r0, r5
 801e74a:	b280      	uxth	r0, r0
 801e74c:	fb03 f000 	mul.w	r0, r3, r0
 801e750:	6823      	ldr	r3, [r4, #0]
 801e752:	3004      	adds	r0, #4
 801e754:	4418      	add	r0, r3
 801e756:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d1c7      	bne.n	801e6ee <uxr_receive_reliable_message+0x22>
 801e75e:	4639      	mov	r1, r7
 801e760:	4642      	mov	r2, r8
 801e762:	f002 fc14 	bl	8020f8e <memcpy>
 801e766:	8921      	ldrh	r1, [r4, #8]
 801e768:	6863      	ldr	r3, [r4, #4]
 801e76a:	fbb5 f2f1 	udiv	r2, r5, r1
 801e76e:	fbb3 f3f1 	udiv	r3, r3, r1
 801e772:	fb01 5212 	mls	r2, r1, r2, r5
 801e776:	b292      	uxth	r2, r2
 801e778:	fb02 f303 	mul.w	r3, r2, r3
 801e77c:	6822      	ldr	r2, [r4, #0]
 801e77e:	f842 8003 	str.w	r8, [r2, r3]
 801e782:	2301      	movs	r3, #1
 801e784:	9a08      	ldr	r2, [sp, #32]
 801e786:	7013      	strb	r3, [r2, #0]
 801e788:	f1b9 0f00 	cmp.w	r9, #0
 801e78c:	d0af      	beq.n	801e6ee <uxr_receive_reliable_message+0x22>
 801e78e:	89a6      	ldrh	r6, [r4, #12]
 801e790:	2101      	movs	r1, #1
 801e792:	4630      	mov	r0, r6
 801e794:	f000 fc54 	bl	801f040 <uxr_seq_num_add>
 801e798:	8921      	ldrh	r1, [r4, #8]
 801e79a:	6863      	ldr	r3, [r4, #4]
 801e79c:	4606      	mov	r6, r0
 801e79e:	fbb0 f2f1 	udiv	r2, r0, r1
 801e7a2:	fbb3 f3f1 	udiv	r3, r3, r1
 801e7a6:	fb01 0212 	mls	r2, r1, r2, r0
 801e7aa:	6820      	ldr	r0, [r4, #0]
 801e7ac:	b292      	uxth	r2, r2
 801e7ae:	fb02 f303 	mul.w	r3, r2, r3
 801e7b2:	3304      	adds	r3, #4
 801e7b4:	4418      	add	r0, r3
 801e7b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d097      	beq.n	801e6ee <uxr_receive_reliable_message+0x22>
 801e7be:	6923      	ldr	r3, [r4, #16]
 801e7c0:	4798      	blx	r3
 801e7c2:	2802      	cmp	r0, #2
 801e7c4:	d002      	beq.n	801e7cc <uxr_receive_reliable_message+0x100>
 801e7c6:	2801      	cmp	r0, #1
 801e7c8:	d0e2      	beq.n	801e790 <uxr_receive_reliable_message+0xc4>
 801e7ca:	e790      	b.n	801e6ee <uxr_receive_reliable_message+0x22>
 801e7cc:	2601      	movs	r6, #1
 801e7ce:	e78f      	b.n	801e6f0 <uxr_receive_reliable_message+0x24>

0801e7d0 <uxr_next_input_reliable_buffer_available>:
 801e7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7d4:	4604      	mov	r4, r0
 801e7d6:	460f      	mov	r7, r1
 801e7d8:	8980      	ldrh	r0, [r0, #12]
 801e7da:	2101      	movs	r1, #1
 801e7dc:	4690      	mov	r8, r2
 801e7de:	f000 fc2f 	bl	801f040 <uxr_seq_num_add>
 801e7e2:	8922      	ldrh	r2, [r4, #8]
 801e7e4:	6866      	ldr	r6, [r4, #4]
 801e7e6:	fbb0 f3f2 	udiv	r3, r0, r2
 801e7ea:	fbb6 f6f2 	udiv	r6, r6, r2
 801e7ee:	fb02 0313 	mls	r3, r2, r3, r0
 801e7f2:	b29b      	uxth	r3, r3
 801e7f4:	fb03 f606 	mul.w	r6, r3, r6
 801e7f8:	6823      	ldr	r3, [r4, #0]
 801e7fa:	3604      	adds	r6, #4
 801e7fc:	441e      	add	r6, r3
 801e7fe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e802:	f1b9 0f00 	cmp.w	r9, #0
 801e806:	d023      	beq.n	801e850 <uxr_next_input_reliable_buffer_available+0x80>
 801e808:	4605      	mov	r5, r0
 801e80a:	6923      	ldr	r3, [r4, #16]
 801e80c:	4630      	mov	r0, r6
 801e80e:	4798      	blx	r3
 801e810:	4682      	mov	sl, r0
 801e812:	b300      	cbz	r0, 801e856 <uxr_next_input_reliable_buffer_available+0x86>
 801e814:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e818:	2101      	movs	r1, #1
 801e81a:	4650      	mov	r0, sl
 801e81c:	f000 fc10 	bl	801f040 <uxr_seq_num_add>
 801e820:	8921      	ldrh	r1, [r4, #8]
 801e822:	4682      	mov	sl, r0
 801e824:	6863      	ldr	r3, [r4, #4]
 801e826:	6820      	ldr	r0, [r4, #0]
 801e828:	fbba f2f1 	udiv	r2, sl, r1
 801e82c:	fbb3 f3f1 	udiv	r3, r3, r1
 801e830:	fb01 a212 	mls	r2, r1, r2, sl
 801e834:	b292      	uxth	r2, r2
 801e836:	fb02 f303 	mul.w	r3, r2, r3
 801e83a:	3304      	adds	r3, #4
 801e83c:	4418      	add	r0, r3
 801e83e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e842:	b12b      	cbz	r3, 801e850 <uxr_next_input_reliable_buffer_available+0x80>
 801e844:	6923      	ldr	r3, [r4, #16]
 801e846:	4798      	blx	r3
 801e848:	2802      	cmp	r0, #2
 801e84a:	d01b      	beq.n	801e884 <uxr_next_input_reliable_buffer_available+0xb4>
 801e84c:	2801      	cmp	r0, #1
 801e84e:	d0e3      	beq.n	801e818 <uxr_next_input_reliable_buffer_available+0x48>
 801e850:	2000      	movs	r0, #0
 801e852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e856:	464a      	mov	r2, r9
 801e858:	4631      	mov	r1, r6
 801e85a:	4638      	mov	r0, r7
 801e85c:	f7f4 fd60 	bl	8013320 <ucdr_init_buffer>
 801e860:	8921      	ldrh	r1, [r4, #8]
 801e862:	6863      	ldr	r3, [r4, #4]
 801e864:	2001      	movs	r0, #1
 801e866:	fbb5 f2f1 	udiv	r2, r5, r1
 801e86a:	fbb3 f3f1 	udiv	r3, r3, r1
 801e86e:	fb01 5212 	mls	r2, r1, r2, r5
 801e872:	b292      	uxth	r2, r2
 801e874:	fb02 f303 	mul.w	r3, r2, r3
 801e878:	6822      	ldr	r2, [r4, #0]
 801e87a:	f842 a003 	str.w	sl, [r2, r3]
 801e87e:	81a5      	strh	r5, [r4, #12]
 801e880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e884:	8920      	ldrh	r0, [r4, #8]
 801e886:	eb06 0108 	add.w	r1, r6, r8
 801e88a:	6863      	ldr	r3, [r4, #4]
 801e88c:	eba9 0208 	sub.w	r2, r9, r8
 801e890:	fbb5 f6f0 	udiv	r6, r5, r0
 801e894:	fbb3 f3f0 	udiv	r3, r3, r0
 801e898:	fb00 5516 	mls	r5, r0, r6, r5
 801e89c:	2000      	movs	r0, #0
 801e89e:	b2ad      	uxth	r5, r5
 801e8a0:	fb03 f505 	mul.w	r5, r3, r5
 801e8a4:	6823      	ldr	r3, [r4, #0]
 801e8a6:	5158      	str	r0, [r3, r5]
 801e8a8:	4638      	mov	r0, r7
 801e8aa:	f7f4 fd39 	bl	8013320 <ucdr_init_buffer>
 801e8ae:	4638      	mov	r0, r7
 801e8b0:	4622      	mov	r2, r4
 801e8b2:	4903      	ldr	r1, [pc, #12]	; (801e8c0 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e8b4:	f7f4 fd08 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 801e8b8:	2001      	movs	r0, #1
 801e8ba:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e8be:	e7c8      	b.n	801e852 <uxr_next_input_reliable_buffer_available+0x82>
 801e8c0:	0801e5d1 	.word	0x0801e5d1

0801e8c4 <uxr_process_heartbeat>:
 801e8c4:	b538      	push	{r3, r4, r5, lr}
 801e8c6:	4611      	mov	r1, r2
 801e8c8:	4604      	mov	r4, r0
 801e8ca:	89c0      	ldrh	r0, [r0, #14]
 801e8cc:	4615      	mov	r5, r2
 801e8ce:	f000 fbbf 	bl	801f050 <uxr_seq_num_cmp>
 801e8d2:	2800      	cmp	r0, #0
 801e8d4:	bfb8      	it	lt
 801e8d6:	81e5      	strhlt	r5, [r4, #14]
 801e8d8:	bd38      	pop	{r3, r4, r5, pc}
 801e8da:	bf00      	nop

0801e8dc <uxr_compute_acknack>:
 801e8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e8e0:	8903      	ldrh	r3, [r0, #8]
 801e8e2:	4604      	mov	r4, r0
 801e8e4:	460f      	mov	r7, r1
 801e8e6:	8985      	ldrh	r5, [r0, #12]
 801e8e8:	b1db      	cbz	r3, 801e922 <uxr_compute_acknack+0x46>
 801e8ea:	4628      	mov	r0, r5
 801e8ec:	2601      	movs	r6, #1
 801e8ee:	e004      	b.n	801e8fa <uxr_compute_acknack+0x1e>
 801e8f0:	4566      	cmp	r6, ip
 801e8f2:	f106 0601 	add.w	r6, r6, #1
 801e8f6:	d214      	bcs.n	801e922 <uxr_compute_acknack+0x46>
 801e8f8:	89a0      	ldrh	r0, [r4, #12]
 801e8fa:	b2b1      	uxth	r1, r6
 801e8fc:	f000 fba0 	bl	801f040 <uxr_seq_num_add>
 801e900:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e904:	fbb0 f2fc 	udiv	r2, r0, ip
 801e908:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e90c:	fb0c 0212 	mls	r2, ip, r2, r0
 801e910:	fbb3 f3fc 	udiv	r3, r3, ip
 801e914:	b292      	uxth	r2, r2
 801e916:	fb02 f303 	mul.w	r3, r2, r3
 801e91a:	58cb      	ldr	r3, [r1, r3]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d1e7      	bne.n	801e8f0 <uxr_compute_acknack+0x14>
 801e920:	4605      	mov	r5, r0
 801e922:	803d      	strh	r5, [r7, #0]
 801e924:	2101      	movs	r1, #1
 801e926:	89e6      	ldrh	r6, [r4, #14]
 801e928:	4628      	mov	r0, r5
 801e92a:	f000 fb8d 	bl	801f048 <uxr_seq_num_sub>
 801e92e:	4601      	mov	r1, r0
 801e930:	4630      	mov	r0, r6
 801e932:	f000 fb89 	bl	801f048 <uxr_seq_num_sub>
 801e936:	4606      	mov	r6, r0
 801e938:	b328      	cbz	r0, 801e986 <uxr_compute_acknack+0xaa>
 801e93a:	f04f 0900 	mov.w	r9, #0
 801e93e:	f04f 0801 	mov.w	r8, #1
 801e942:	464d      	mov	r5, r9
 801e944:	fa1f f189 	uxth.w	r1, r9
 801e948:	8838      	ldrh	r0, [r7, #0]
 801e94a:	f000 fb79 	bl	801f040 <uxr_seq_num_add>
 801e94e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e952:	6861      	ldr	r1, [r4, #4]
 801e954:	fa08 fe09 	lsl.w	lr, r8, r9
 801e958:	6822      	ldr	r2, [r4, #0]
 801e95a:	f109 0901 	add.w	r9, r9, #1
 801e95e:	ea4e 0e05 	orr.w	lr, lr, r5
 801e962:	fbb0 f3fc 	udiv	r3, r0, ip
 801e966:	fbb1 f1fc 	udiv	r1, r1, ip
 801e96a:	fb03 001c 	mls	r0, r3, ip, r0
 801e96e:	b283      	uxth	r3, r0
 801e970:	fb01 f303 	mul.w	r3, r1, r3
 801e974:	58d3      	ldr	r3, [r2, r3]
 801e976:	b90b      	cbnz	r3, 801e97c <uxr_compute_acknack+0xa0>
 801e978:	fa1f f58e 	uxth.w	r5, lr
 801e97c:	454e      	cmp	r6, r9
 801e97e:	d1e1      	bne.n	801e944 <uxr_compute_acknack+0x68>
 801e980:	4628      	mov	r0, r5
 801e982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e986:	4605      	mov	r5, r0
 801e988:	4628      	mov	r0, r5
 801e98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e98e:	bf00      	nop

0801e990 <uxr_init_output_best_effort_stream>:
 801e990:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801e994:	6001      	str	r1, [r0, #0]
 801e996:	7303      	strb	r3, [r0, #12]
 801e998:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e99c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e9a0:	4770      	bx	lr
 801e9a2:	bf00      	nop

0801e9a4 <uxr_reset_output_best_effort_stream>:
 801e9a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e9a8:	7b03      	ldrb	r3, [r0, #12]
 801e9aa:	81c2      	strh	r2, [r0, #14]
 801e9ac:	6043      	str	r3, [r0, #4]
 801e9ae:	4770      	bx	lr

0801e9b0 <uxr_prepare_best_effort_buffer_to_write>:
 801e9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9b2:	4604      	mov	r4, r0
 801e9b4:	b083      	sub	sp, #12
 801e9b6:	6840      	ldr	r0, [r0, #4]
 801e9b8:	460d      	mov	r5, r1
 801e9ba:	4616      	mov	r6, r2
 801e9bc:	f7fb fa5c 	bl	8019e78 <uxr_submessage_padding>
 801e9c0:	6863      	ldr	r3, [r4, #4]
 801e9c2:	4418      	add	r0, r3
 801e9c4:	68a3      	ldr	r3, [r4, #8]
 801e9c6:	1942      	adds	r2, r0, r5
 801e9c8:	4293      	cmp	r3, r2
 801e9ca:	bf2c      	ite	cs
 801e9cc:	2701      	movcs	r7, #1
 801e9ce:	2700      	movcc	r7, #0
 801e9d0:	d202      	bcs.n	801e9d8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801e9d2:	4638      	mov	r0, r7
 801e9d4:	b003      	add	sp, #12
 801e9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9d8:	9000      	str	r0, [sp, #0]
 801e9da:	2300      	movs	r3, #0
 801e9dc:	4630      	mov	r0, r6
 801e9de:	6821      	ldr	r1, [r4, #0]
 801e9e0:	f7f4 fc8c 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801e9e4:	6861      	ldr	r1, [r4, #4]
 801e9e6:	4638      	mov	r0, r7
 801e9e8:	4429      	add	r1, r5
 801e9ea:	6061      	str	r1, [r4, #4]
 801e9ec:	b003      	add	sp, #12
 801e9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e9f0 <uxr_prepare_best_effort_buffer_to_send>:
 801e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9f4:	4604      	mov	r4, r0
 801e9f6:	461d      	mov	r5, r3
 801e9f8:	6840      	ldr	r0, [r0, #4]
 801e9fa:	7b23      	ldrb	r3, [r4, #12]
 801e9fc:	4298      	cmp	r0, r3
 801e9fe:	bf8c      	ite	hi
 801ea00:	2601      	movhi	r6, #1
 801ea02:	2600      	movls	r6, #0
 801ea04:	d802      	bhi.n	801ea0c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ea06:	4630      	mov	r0, r6
 801ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea0c:	4688      	mov	r8, r1
 801ea0e:	89e0      	ldrh	r0, [r4, #14]
 801ea10:	2101      	movs	r1, #1
 801ea12:	4617      	mov	r7, r2
 801ea14:	f000 fb14 	bl	801f040 <uxr_seq_num_add>
 801ea18:	6823      	ldr	r3, [r4, #0]
 801ea1a:	81e0      	strh	r0, [r4, #14]
 801ea1c:	8028      	strh	r0, [r5, #0]
 801ea1e:	4630      	mov	r0, r6
 801ea20:	f8c8 3000 	str.w	r3, [r8]
 801ea24:	6863      	ldr	r3, [r4, #4]
 801ea26:	603b      	str	r3, [r7, #0]
 801ea28:	7b23      	ldrb	r3, [r4, #12]
 801ea2a:	6063      	str	r3, [r4, #4]
 801ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ea30 <on_full_output_buffer>:
 801ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea32:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ea36:	460c      	mov	r4, r1
 801ea38:	6803      	ldr	r3, [r0, #0]
 801ea3a:	4605      	mov	r5, r0
 801ea3c:	7b26      	ldrb	r6, [r4, #12]
 801ea3e:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ea42:	fbb2 f2fc 	udiv	r2, r2, ip
 801ea46:	eba3 0e01 	sub.w	lr, r3, r1
 801ea4a:	6903      	ldr	r3, [r0, #16]
 801ea4c:	fbbe fef2 	udiv	lr, lr, r2
 801ea50:	f10e 0e01 	add.w	lr, lr, #1
 801ea54:	fa1f fe8e 	uxth.w	lr, lr
 801ea58:	fbbe f7fc 	udiv	r7, lr, ip
 801ea5c:	fb0c ec17 	mls	ip, ip, r7, lr
 801ea60:	fa1f fc8c 	uxth.w	ip, ip
 801ea64:	fb02 fc0c 	mul.w	ip, r2, ip
 801ea68:	f851 200c 	ldr.w	r2, [r1, ip]
 801ea6c:	44b4      	add	ip, r6
 801ea6e:	1b92      	subs	r2, r2, r6
 801ea70:	f10c 0c08 	add.w	ip, ip, #8
 801ea74:	3a04      	subs	r2, #4
 801ea76:	4461      	add	r1, ip
 801ea78:	f7f4 fc4a 	bl	8013310 <ucdr_init_buffer_origin>
 801ea7c:	4628      	mov	r0, r5
 801ea7e:	4622      	mov	r2, r4
 801ea80:	4902      	ldr	r1, [pc, #8]	; (801ea8c <on_full_output_buffer+0x5c>)
 801ea82:	f7f4 fc21 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 801ea86:	2000      	movs	r0, #0
 801ea88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea8a:	bf00      	nop
 801ea8c:	0801ea31 	.word	0x0801ea31

0801ea90 <uxr_init_output_reliable_stream>:
 801ea90:	b530      	push	{r4, r5, lr}
 801ea92:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801ea96:	8103      	strh	r3, [r0, #8]
 801ea98:	7304      	strb	r4, [r0, #12]
 801ea9a:	e9c0 1200 	strd	r1, r2, [r0]
 801ea9e:	b1e3      	cbz	r3, 801eada <uxr_init_output_reliable_stream+0x4a>
 801eaa0:	600c      	str	r4, [r1, #0]
 801eaa2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801eaa6:	f1bc 0f01 	cmp.w	ip, #1
 801eaaa:	d916      	bls.n	801eada <uxr_init_output_reliable_stream+0x4a>
 801eaac:	f04f 0e01 	mov.w	lr, #1
 801eab0:	6843      	ldr	r3, [r0, #4]
 801eab2:	f10e 0501 	add.w	r5, lr, #1
 801eab6:	7b04      	ldrb	r4, [r0, #12]
 801eab8:	6801      	ldr	r1, [r0, #0]
 801eaba:	fbbe f2fc 	udiv	r2, lr, ip
 801eabe:	fbb3 f3fc 	udiv	r3, r3, ip
 801eac2:	fb0c e212 	mls	r2, ip, r2, lr
 801eac6:	fa1f fe85 	uxth.w	lr, r5
 801eaca:	b292      	uxth	r2, r2
 801eacc:	fb02 f303 	mul.w	r3, r2, r3
 801ead0:	50cc      	str	r4, [r1, r3]
 801ead2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ead6:	45f4      	cmp	ip, lr
 801ead8:	d8ea      	bhi.n	801eab0 <uxr_init_output_reliable_stream+0x20>
 801eada:	4b07      	ldr	r3, [pc, #28]	; (801eaf8 <uxr_init_output_reliable_stream+0x68>)
 801eadc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801eae4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801eae8:	f8c0 300e 	str.w	r3, [r0, #14]
 801eaec:	2300      	movs	r3, #0
 801eaee:	8242      	strh	r2, [r0, #18]
 801eaf0:	8403      	strh	r3, [r0, #32]
 801eaf2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801eaf6:	bd30      	pop	{r4, r5, pc}
 801eaf8:	ffff0000 	.word	0xffff0000
 801eafc:	00000000 	.word	0x00000000

0801eb00 <uxr_reset_output_reliable_stream>:
 801eb00:	8901      	ldrh	r1, [r0, #8]
 801eb02:	b510      	push	{r4, lr}
 801eb04:	b1b1      	cbz	r1, 801eb34 <uxr_reset_output_reliable_stream+0x34>
 801eb06:	f04f 0e00 	mov.w	lr, #0
 801eb0a:	46f4      	mov	ip, lr
 801eb0c:	6843      	ldr	r3, [r0, #4]
 801eb0e:	f10e 0e01 	add.w	lr, lr, #1
 801eb12:	7b04      	ldrb	r4, [r0, #12]
 801eb14:	fbbc f2f1 	udiv	r2, ip, r1
 801eb18:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb1c:	fb01 c212 	mls	r2, r1, r2, ip
 801eb20:	fa1f fc8e 	uxth.w	ip, lr
 801eb24:	b292      	uxth	r2, r2
 801eb26:	fb02 f303 	mul.w	r3, r2, r3
 801eb2a:	6802      	ldr	r2, [r0, #0]
 801eb2c:	50d4      	str	r4, [r2, r3]
 801eb2e:	8901      	ldrh	r1, [r0, #8]
 801eb30:	4561      	cmp	r1, ip
 801eb32:	d8eb      	bhi.n	801eb0c <uxr_reset_output_reliable_stream+0xc>
 801eb34:	4b08      	ldr	r3, [pc, #32]	; (801eb58 <uxr_reset_output_reliable_stream+0x58>)
 801eb36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eb3a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801eb50 <uxr_reset_output_reliable_stream+0x50>
 801eb3e:	f8c0 300e 	str.w	r3, [r0, #14]
 801eb42:	2300      	movs	r3, #0
 801eb44:	8242      	strh	r2, [r0, #18]
 801eb46:	8403      	strh	r3, [r0, #32]
 801eb48:	ed80 7b06 	vstr	d7, [r0, #24]
 801eb4c:	bd10      	pop	{r4, pc}
 801eb4e:	bf00      	nop
 801eb50:	ffffffff 	.word	0xffffffff
 801eb54:	7fffffff 	.word	0x7fffffff
 801eb58:	ffff0000 	.word	0xffff0000

0801eb5c <uxr_prepare_reliable_buffer_to_write>:
 801eb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb60:	4604      	mov	r4, r0
 801eb62:	b091      	sub	sp, #68	; 0x44
 801eb64:	8900      	ldrh	r0, [r0, #8]
 801eb66:	468b      	mov	fp, r1
 801eb68:	89e6      	ldrh	r6, [r4, #14]
 801eb6a:	9204      	str	r2, [sp, #16]
 801eb6c:	6865      	ldr	r5, [r4, #4]
 801eb6e:	6823      	ldr	r3, [r4, #0]
 801eb70:	f894 900c 	ldrb.w	r9, [r4, #12]
 801eb74:	fbb6 f2f0 	udiv	r2, r6, r0
 801eb78:	fbb5 f5f0 	udiv	r5, r5, r0
 801eb7c:	fb00 6212 	mls	r2, r0, r2, r6
 801eb80:	1f2f      	subs	r7, r5, #4
 801eb82:	b292      	uxth	r2, r2
 801eb84:	fb05 3202 	mla	r2, r5, r2, r3
 801eb88:	1d11      	adds	r1, r2, #4
 801eb8a:	f8d2 8000 	ldr.w	r8, [r2]
 801eb8e:	9103      	str	r1, [sp, #12]
 801eb90:	2800      	cmp	r0, #0
 801eb92:	f000 814a 	beq.w	801ee2a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801eb96:	f04f 0c00 	mov.w	ip, #0
 801eb9a:	46e2      	mov	sl, ip
 801eb9c:	4661      	mov	r1, ip
 801eb9e:	f10c 0c01 	add.w	ip, ip, #1
 801eba2:	fbb1 f2f0 	udiv	r2, r1, r0
 801eba6:	fb00 1212 	mls	r2, r0, r2, r1
 801ebaa:	fa1f f18c 	uxth.w	r1, ip
 801ebae:	b292      	uxth	r2, r2
 801ebb0:	fb05 f202 	mul.w	r2, r5, r2
 801ebb4:	589a      	ldr	r2, [r3, r2]
 801ebb6:	454a      	cmp	r2, r9
 801ebb8:	d103      	bne.n	801ebc2 <uxr_prepare_reliable_buffer_to_write+0x66>
 801ebba:	f10a 0a01 	add.w	sl, sl, #1
 801ebbe:	fa1f fa8a 	uxth.w	sl, sl
 801ebc2:	4281      	cmp	r1, r0
 801ebc4:	d3eb      	bcc.n	801eb9e <uxr_prepare_reliable_buffer_to_write+0x42>
 801ebc6:	4640      	mov	r0, r8
 801ebc8:	2104      	movs	r1, #4
 801ebca:	f8cd a014 	str.w	sl, [sp, #20]
 801ebce:	f7f4 fbab 	bl	8013328 <ucdr_alignment>
 801ebd2:	4480      	add	r8, r0
 801ebd4:	eb08 020b 	add.w	r2, r8, fp
 801ebd8:	42ba      	cmp	r2, r7
 801ebda:	f240 80ca 	bls.w	801ed72 <uxr_prepare_reliable_buffer_to_write+0x216>
 801ebde:	7b22      	ldrb	r2, [r4, #12]
 801ebe0:	445a      	add	r2, fp
 801ebe2:	42ba      	cmp	r2, r7
 801ebe4:	f240 80b2 	bls.w	801ed4c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801ebe8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801ebec:	b2bb      	uxth	r3, r7
 801ebee:	eba2 0209 	sub.w	r2, r2, r9
 801ebf2:	441a      	add	r2, r3
 801ebf4:	b292      	uxth	r2, r2
 801ebf6:	fb0a f902 	mul.w	r9, sl, r2
 801ebfa:	9205      	str	r2, [sp, #20]
 801ebfc:	45d9      	cmp	r9, fp
 801ebfe:	9206      	str	r2, [sp, #24]
 801ec00:	f0c0 80b3 	bcc.w	801ed6a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ec04:	f108 0204 	add.w	r2, r8, #4
 801ec08:	42ba      	cmp	r2, r7
 801ec0a:	f080 80da 	bcs.w	801edc2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801ec0e:	f1a3 0904 	sub.w	r9, r3, #4
 801ec12:	9b05      	ldr	r3, [sp, #20]
 801ec14:	eba9 0908 	sub.w	r9, r9, r8
 801ec18:	fa1f f989 	uxth.w	r9, r9
 801ec1c:	ebab 0b09 	sub.w	fp, fp, r9
 801ec20:	fbbb f2f3 	udiv	r2, fp, r3
 801ec24:	fb03 b312 	mls	r3, r3, r2, fp
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	f040 80c4 	bne.w	801edb6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801ec2e:	b293      	uxth	r3, r2
 801ec30:	4553      	cmp	r3, sl
 801ec32:	f200 809a 	bhi.w	801ed6a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	f000 80f9 	beq.w	801ee2e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801ec3c:	f8cd 801c 	str.w	r8, [sp, #28]
 801ec40:	f04f 0a00 	mov.w	sl, #0
 801ec44:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ec48:	f10d 0b20 	add.w	fp, sp, #32
 801ec4c:	9505      	str	r5, [sp, #20]
 801ec4e:	461d      	mov	r5, r3
 801ec50:	e000      	b.n	801ec54 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801ec52:	46c1      	mov	r9, r8
 801ec54:	8922      	ldrh	r2, [r4, #8]
 801ec56:	4658      	mov	r0, fp
 801ec58:	6863      	ldr	r3, [r4, #4]
 801ec5a:	f10a 0a01 	add.w	sl, sl, #1
 801ec5e:	fbb6 f1f2 	udiv	r1, r6, r2
 801ec62:	fbb3 f3f2 	udiv	r3, r3, r2
 801ec66:	fb02 6111 	mls	r1, r2, r1, r6
 801ec6a:	463a      	mov	r2, r7
 801ec6c:	b289      	uxth	r1, r1
 801ec6e:	fb03 f101 	mul.w	r1, r3, r1
 801ec72:	6823      	ldr	r3, [r4, #0]
 801ec74:	3104      	adds	r1, #4
 801ec76:	4419      	add	r1, r3
 801ec78:	2300      	movs	r3, #0
 801ec7a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801ec7e:	f8cd c000 	str.w	ip, [sp]
 801ec82:	f7f4 fb3b 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801ec86:	464a      	mov	r2, r9
 801ec88:	2300      	movs	r3, #0
 801ec8a:	210d      	movs	r1, #13
 801ec8c:	4658      	mov	r0, fp
 801ec8e:	f7fb f8b3 	bl	8019df8 <uxr_buffer_submessage_header>
 801ec92:	8921      	ldrh	r1, [r4, #8]
 801ec94:	6863      	ldr	r3, [r4, #4]
 801ec96:	4630      	mov	r0, r6
 801ec98:	fbb6 f2f1 	udiv	r2, r6, r1
 801ec9c:	fbb3 f3f1 	udiv	r3, r3, r1
 801eca0:	fb01 6212 	mls	r2, r1, r2, r6
 801eca4:	2101      	movs	r1, #1
 801eca6:	b292      	uxth	r2, r2
 801eca8:	fb02 f303 	mul.w	r3, r2, r3
 801ecac:	6822      	ldr	r2, [r4, #0]
 801ecae:	50d7      	str	r7, [r2, r3]
 801ecb0:	f000 f9c6 	bl	801f040 <uxr_seq_num_add>
 801ecb4:	4606      	mov	r6, r0
 801ecb6:	fa1f f38a 	uxth.w	r3, sl
 801ecba:	429d      	cmp	r5, r3
 801ecbc:	d8c9      	bhi.n	801ec52 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801ecbe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ecc2:	9d05      	ldr	r5, [sp, #20]
 801ecc4:	8920      	ldrh	r0, [r4, #8]
 801ecc6:	463a      	mov	r2, r7
 801ecc8:	6863      	ldr	r3, [r4, #4]
 801ecca:	fbb6 f1f0 	udiv	r1, r6, r0
 801ecce:	fbb3 f3f0 	udiv	r3, r3, r0
 801ecd2:	fb00 6111 	mls	r1, r0, r1, r6
 801ecd6:	4658      	mov	r0, fp
 801ecd8:	b289      	uxth	r1, r1
 801ecda:	fb01 f303 	mul.w	r3, r1, r3
 801ecde:	6821      	ldr	r1, [r4, #0]
 801ece0:	3304      	adds	r3, #4
 801ece2:	4419      	add	r1, r3
 801ece4:	2300      	movs	r3, #0
 801ece6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801ecea:	9700      	str	r7, [sp, #0]
 801ecec:	f7f4 fb06 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801ecf0:	9f06      	ldr	r7, [sp, #24]
 801ecf2:	4658      	mov	r0, fp
 801ecf4:	2302      	movs	r3, #2
 801ecf6:	b2ba      	uxth	r2, r7
 801ecf8:	210d      	movs	r1, #13
 801ecfa:	f7fb f87d 	bl	8019df8 <uxr_buffer_submessage_header>
 801ecfe:	f108 0104 	add.w	r1, r8, #4
 801ed02:	9b03      	ldr	r3, [sp, #12]
 801ed04:	f1a5 0208 	sub.w	r2, r5, #8
 801ed08:	8925      	ldrh	r5, [r4, #8]
 801ed0a:	440b      	add	r3, r1
 801ed0c:	eba2 0208 	sub.w	r2, r2, r8
 801ed10:	fbb6 f0f5 	udiv	r0, r6, r5
 801ed14:	4619      	mov	r1, r3
 801ed16:	6863      	ldr	r3, [r4, #4]
 801ed18:	fb05 6010 	mls	r0, r5, r0, r6
 801ed1c:	fbb3 f3f5 	udiv	r3, r3, r5
 801ed20:	b280      	uxth	r0, r0
 801ed22:	6825      	ldr	r5, [r4, #0]
 801ed24:	fb00 f303 	mul.w	r3, r0, r3
 801ed28:	7b20      	ldrb	r0, [r4, #12]
 801ed2a:	3004      	adds	r0, #4
 801ed2c:	4438      	add	r0, r7
 801ed2e:	50e8      	str	r0, [r5, r3]
 801ed30:	9d04      	ldr	r5, [sp, #16]
 801ed32:	4628      	mov	r0, r5
 801ed34:	f7f4 faf4 	bl	8013320 <ucdr_init_buffer>
 801ed38:	4628      	mov	r0, r5
 801ed3a:	4622      	mov	r2, r4
 801ed3c:	493d      	ldr	r1, [pc, #244]	; (801ee34 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ed3e:	f7f4 fac3 	bl	80132c8 <ucdr_set_on_full_buffer_callback>
 801ed42:	2001      	movs	r0, #1
 801ed44:	81e6      	strh	r6, [r4, #14]
 801ed46:	b011      	add	sp, #68	; 0x44
 801ed48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed4c:	2101      	movs	r1, #1
 801ed4e:	89e0      	ldrh	r0, [r4, #14]
 801ed50:	f000 f976 	bl	801f040 <uxr_seq_num_add>
 801ed54:	4605      	mov	r5, r0
 801ed56:	8921      	ldrh	r1, [r4, #8]
 801ed58:	8a60      	ldrh	r0, [r4, #18]
 801ed5a:	f000 f971 	bl	801f040 <uxr_seq_num_add>
 801ed5e:	4601      	mov	r1, r0
 801ed60:	4628      	mov	r0, r5
 801ed62:	f000 f975 	bl	801f050 <uxr_seq_num_cmp>
 801ed66:	2800      	cmp	r0, #0
 801ed68:	dd44      	ble.n	801edf4 <uxr_prepare_reliable_buffer_to_write+0x298>
 801ed6a:	2000      	movs	r0, #0
 801ed6c:	b011      	add	sp, #68	; 0x44
 801ed6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed72:	8921      	ldrh	r1, [r4, #8]
 801ed74:	8a60      	ldrh	r0, [r4, #18]
 801ed76:	9205      	str	r2, [sp, #20]
 801ed78:	f000 f962 	bl	801f040 <uxr_seq_num_add>
 801ed7c:	4601      	mov	r1, r0
 801ed7e:	4630      	mov	r0, r6
 801ed80:	f000 f966 	bl	801f050 <uxr_seq_num_cmp>
 801ed84:	2800      	cmp	r0, #0
 801ed86:	9a05      	ldr	r2, [sp, #20]
 801ed88:	dcef      	bgt.n	801ed6a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ed8a:	8925      	ldrh	r5, [r4, #8]
 801ed8c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801ed90:	fbb6 f4f5 	udiv	r4, r6, r5
 801ed94:	fbb3 f3f5 	udiv	r3, r3, r5
 801ed98:	fb05 6414 	mls	r4, r5, r4, r6
 801ed9c:	b2a4      	uxth	r4, r4
 801ed9e:	fb04 f303 	mul.w	r3, r4, r3
 801eda2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801eda6:	50fa      	str	r2, [r7, r3]
 801eda8:	2300      	movs	r3, #0
 801edaa:	f8cd 8000 	str.w	r8, [sp]
 801edae:	f7f4 faa5 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801edb2:	2001      	movs	r0, #1
 801edb4:	e7da      	b.n	801ed6c <uxr_prepare_reliable_buffer_to_write+0x210>
 801edb6:	3201      	adds	r2, #1
 801edb8:	9306      	str	r3, [sp, #24]
 801edba:	b293      	uxth	r3, r2
 801edbc:	4553      	cmp	r3, sl
 801edbe:	d8d4      	bhi.n	801ed6a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801edc0:	e739      	b.n	801ec36 <uxr_prepare_reliable_buffer_to_write+0xda>
 801edc2:	4630      	mov	r0, r6
 801edc4:	2101      	movs	r1, #1
 801edc6:	9307      	str	r3, [sp, #28]
 801edc8:	f000 f93a 	bl	801f040 <uxr_seq_num_add>
 801edcc:	4606      	mov	r6, r0
 801edce:	8920      	ldrh	r0, [r4, #8]
 801edd0:	6862      	ldr	r2, [r4, #4]
 801edd2:	fbb6 f1f0 	udiv	r1, r6, r0
 801edd6:	fbb2 f2f0 	udiv	r2, r2, r0
 801edda:	fb00 6111 	mls	r1, r0, r1, r6
 801edde:	b289      	uxth	r1, r1
 801ede0:	fb01 f202 	mul.w	r2, r1, r2
 801ede4:	6821      	ldr	r1, [r4, #0]
 801ede6:	3204      	adds	r2, #4
 801ede8:	188b      	adds	r3, r1, r2
 801edea:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801edee:	9303      	str	r3, [sp, #12]
 801edf0:	9b07      	ldr	r3, [sp, #28]
 801edf2:	e70c      	b.n	801ec0e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801edf4:	8921      	ldrh	r1, [r4, #8]
 801edf6:	6863      	ldr	r3, [r4, #4]
 801edf8:	9804      	ldr	r0, [sp, #16]
 801edfa:	fbb5 f2f1 	udiv	r2, r5, r1
 801edfe:	fbb3 f3f1 	udiv	r3, r3, r1
 801ee02:	fb01 5212 	mls	r2, r1, r2, r5
 801ee06:	6821      	ldr	r1, [r4, #0]
 801ee08:	b292      	uxth	r2, r2
 801ee0a:	fb02 f303 	mul.w	r3, r2, r3
 801ee0e:	7b22      	ldrb	r2, [r4, #12]
 801ee10:	3304      	adds	r3, #4
 801ee12:	445a      	add	r2, fp
 801ee14:	4419      	add	r1, r3
 801ee16:	f841 2c04 	str.w	r2, [r1, #-4]
 801ee1a:	7b23      	ldrb	r3, [r4, #12]
 801ee1c:	9300      	str	r3, [sp, #0]
 801ee1e:	2300      	movs	r3, #0
 801ee20:	f7f4 fa6c 	bl	80132fc <ucdr_init_buffer_origin_offset>
 801ee24:	2001      	movs	r0, #1
 801ee26:	81e5      	strh	r5, [r4, #14]
 801ee28:	e7a0      	b.n	801ed6c <uxr_prepare_reliable_buffer_to_write+0x210>
 801ee2a:	4682      	mov	sl, r0
 801ee2c:	e6cb      	b.n	801ebc6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ee2e:	f10d 0b20 	add.w	fp, sp, #32
 801ee32:	e747      	b.n	801ecc4 <uxr_prepare_reliable_buffer_to_write+0x168>
 801ee34:	0801ea31 	.word	0x0801ea31

0801ee38 <uxr_prepare_next_reliable_buffer_to_send>:
 801ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee3a:	4604      	mov	r4, r0
 801ee3c:	461d      	mov	r5, r3
 801ee3e:	460f      	mov	r7, r1
 801ee40:	8a00      	ldrh	r0, [r0, #16]
 801ee42:	2101      	movs	r1, #1
 801ee44:	4616      	mov	r6, r2
 801ee46:	f000 f8fb 	bl	801f040 <uxr_seq_num_add>
 801ee4a:	8028      	strh	r0, [r5, #0]
 801ee4c:	8922      	ldrh	r2, [r4, #8]
 801ee4e:	6863      	ldr	r3, [r4, #4]
 801ee50:	fbb0 f1f2 	udiv	r1, r0, r2
 801ee54:	fbb3 f3f2 	udiv	r3, r3, r2
 801ee58:	fb02 0c11 	mls	ip, r2, r1, r0
 801ee5c:	89e1      	ldrh	r1, [r4, #14]
 801ee5e:	fa1f fc8c 	uxth.w	ip, ip
 801ee62:	fb0c fc03 	mul.w	ip, ip, r3
 801ee66:	6823      	ldr	r3, [r4, #0]
 801ee68:	f10c 0c04 	add.w	ip, ip, #4
 801ee6c:	4463      	add	r3, ip
 801ee6e:	603b      	str	r3, [r7, #0]
 801ee70:	6823      	ldr	r3, [r4, #0]
 801ee72:	449c      	add	ip, r3
 801ee74:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ee78:	6033      	str	r3, [r6, #0]
 801ee7a:	f000 f8e9 	bl	801f050 <uxr_seq_num_cmp>
 801ee7e:	2800      	cmp	r0, #0
 801ee80:	dd01      	ble.n	801ee86 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ee82:	2000      	movs	r0, #0
 801ee84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee86:	7b23      	ldrb	r3, [r4, #12]
 801ee88:	6832      	ldr	r2, [r6, #0]
 801ee8a:	429a      	cmp	r2, r3
 801ee8c:	d9f9      	bls.n	801ee82 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ee8e:	8a61      	ldrh	r1, [r4, #18]
 801ee90:	8a20      	ldrh	r0, [r4, #16]
 801ee92:	f000 f8d9 	bl	801f048 <uxr_seq_num_sub>
 801ee96:	8923      	ldrh	r3, [r4, #8]
 801ee98:	4283      	cmp	r3, r0
 801ee9a:	d0f2      	beq.n	801ee82 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ee9c:	8828      	ldrh	r0, [r5, #0]
 801ee9e:	89e3      	ldrh	r3, [r4, #14]
 801eea0:	8220      	strh	r0, [r4, #16]
 801eea2:	4298      	cmp	r0, r3
 801eea4:	d001      	beq.n	801eeaa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801eea6:	2001      	movs	r0, #1
 801eea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eeaa:	2101      	movs	r1, #1
 801eeac:	f000 f8c8 	bl	801f040 <uxr_seq_num_add>
 801eeb0:	4603      	mov	r3, r0
 801eeb2:	2001      	movs	r0, #1
 801eeb4:	81e3      	strh	r3, [r4, #14]
 801eeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801eeb8 <uxr_update_output_stream_heartbeat_timestamp>:
 801eeb8:	b570      	push	{r4, r5, r6, lr}
 801eeba:	8a01      	ldrh	r1, [r0, #16]
 801eebc:	4604      	mov	r4, r0
 801eebe:	8a40      	ldrh	r0, [r0, #18]
 801eec0:	4615      	mov	r5, r2
 801eec2:	461e      	mov	r6, r3
 801eec4:	f000 f8c4 	bl	801f050 <uxr_seq_num_cmp>
 801eec8:	2800      	cmp	r0, #0
 801eeca:	db07      	blt.n	801eedc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801eecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801eed0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801eed4:	2000      	movs	r0, #0
 801eed6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801eeda:	bd70      	pop	{r4, r5, r6, pc}
 801eedc:	f894 0020 	ldrb.w	r0, [r4, #32]
 801eee0:	b940      	cbnz	r0, 801eef4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801eee2:	2301      	movs	r3, #1
 801eee4:	f884 3020 	strb.w	r3, [r4, #32]
 801eee8:	3564      	adds	r5, #100	; 0x64
 801eeea:	f146 0600 	adc.w	r6, r6, #0
 801eeee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801eef2:	bd70      	pop	{r4, r5, r6, pc}
 801eef4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801eef8:	4295      	cmp	r5, r2
 801eefa:	eb76 0303 	sbcs.w	r3, r6, r3
 801eefe:	db04      	blt.n	801ef0a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801ef00:	1c43      	adds	r3, r0, #1
 801ef02:	2001      	movs	r0, #1
 801ef04:	f884 3020 	strb.w	r3, [r4, #32]
 801ef08:	e7ee      	b.n	801eee8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ef0a:	2000      	movs	r0, #0
 801ef0c:	e7ec      	b.n	801eee8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ef0e:	bf00      	nop

0801ef10 <uxr_begin_output_nack_buffer_it>:
 801ef10:	8a40      	ldrh	r0, [r0, #18]
 801ef12:	4770      	bx	lr

0801ef14 <uxr_next_reliable_nack_buffer_to_send>:
 801ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef18:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801ef1c:	b197      	cbz	r7, 801ef44 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801ef1e:	4680      	mov	r8, r0
 801ef20:	460d      	mov	r5, r1
 801ef22:	4616      	mov	r6, r2
 801ef24:	461c      	mov	r4, r3
 801ef26:	8818      	ldrh	r0, [r3, #0]
 801ef28:	2101      	movs	r1, #1
 801ef2a:	f000 f889 	bl	801f040 <uxr_seq_num_add>
 801ef2e:	8020      	strh	r0, [r4, #0]
 801ef30:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ef34:	f000 f88c 	bl	801f050 <uxr_seq_num_cmp>
 801ef38:	2800      	cmp	r0, #0
 801ef3a:	dd06      	ble.n	801ef4a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	461f      	mov	r7, r3
 801ef40:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801ef44:	4638      	mov	r0, r7
 801ef46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef4a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ef4e:	8820      	ldrh	r0, [r4, #0]
 801ef50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ef54:	fbb0 f3f2 	udiv	r3, r0, r2
 801ef58:	fbb1 fcf2 	udiv	ip, r1, r2
 801ef5c:	fb02 0313 	mls	r3, r2, r3, r0
 801ef60:	b29b      	uxth	r3, r3
 801ef62:	fb03 fc0c 	mul.w	ip, r3, ip
 801ef66:	f8d8 3000 	ldr.w	r3, [r8]
 801ef6a:	f10c 0c04 	add.w	ip, ip, #4
 801ef6e:	4463      	add	r3, ip
 801ef70:	602b      	str	r3, [r5, #0]
 801ef72:	f8d8 3000 	ldr.w	r3, [r8]
 801ef76:	4463      	add	r3, ip
 801ef78:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ef7c:	6033      	str	r3, [r6, #0]
 801ef7e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ef82:	429a      	cmp	r2, r3
 801ef84:	d0d0      	beq.n	801ef28 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ef86:	e7dd      	b.n	801ef44 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ef88 <uxr_process_acknack>:
 801ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef8a:	4604      	mov	r4, r0
 801ef8c:	460e      	mov	r6, r1
 801ef8e:	4610      	mov	r0, r2
 801ef90:	2101      	movs	r1, #1
 801ef92:	f000 f859 	bl	801f048 <uxr_seq_num_sub>
 801ef96:	8a61      	ldrh	r1, [r4, #18]
 801ef98:	f000 f856 	bl	801f048 <uxr_seq_num_sub>
 801ef9c:	b1c8      	cbz	r0, 801efd2 <uxr_process_acknack+0x4a>
 801ef9e:	4605      	mov	r5, r0
 801efa0:	2700      	movs	r7, #0
 801efa2:	2101      	movs	r1, #1
 801efa4:	8a60      	ldrh	r0, [r4, #18]
 801efa6:	f000 f84b 	bl	801f040 <uxr_seq_num_add>
 801efaa:	8923      	ldrh	r3, [r4, #8]
 801efac:	6862      	ldr	r2, [r4, #4]
 801efae:	3701      	adds	r7, #1
 801efb0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801efb4:	6821      	ldr	r1, [r4, #0]
 801efb6:	42bd      	cmp	r5, r7
 801efb8:	8260      	strh	r0, [r4, #18]
 801efba:	fbb0 fef3 	udiv	lr, r0, r3
 801efbe:	fbb2 f2f3 	udiv	r2, r2, r3
 801efc2:	fb03 031e 	mls	r3, r3, lr, r0
 801efc6:	b29b      	uxth	r3, r3
 801efc8:	fb02 f303 	mul.w	r3, r2, r3
 801efcc:	f841 c003 	str.w	ip, [r1, r3]
 801efd0:	d1e7      	bne.n	801efa2 <uxr_process_acknack+0x1a>
 801efd2:	3e00      	subs	r6, #0
 801efd4:	f04f 0300 	mov.w	r3, #0
 801efd8:	bf18      	it	ne
 801efda:	2601      	movne	r6, #1
 801efdc:	f884 3020 	strb.w	r3, [r4, #32]
 801efe0:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801efe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efe6:	bf00      	nop

0801efe8 <uxr_is_output_up_to_date>:
 801efe8:	8a01      	ldrh	r1, [r0, #16]
 801efea:	8a40      	ldrh	r0, [r0, #18]
 801efec:	b508      	push	{r3, lr}
 801efee:	f000 f82f 	bl	801f050 <uxr_seq_num_cmp>
 801eff2:	fab0 f080 	clz	r0, r0
 801eff6:	0940      	lsrs	r0, r0, #5
 801eff8:	bd08      	pop	{r3, pc}
 801effa:	bf00      	nop

0801effc <get_available_free_slots>:
 801effc:	8901      	ldrh	r1, [r0, #8]
 801effe:	b1e1      	cbz	r1, 801f03a <get_available_free_slots+0x3e>
 801f000:	6843      	ldr	r3, [r0, #4]
 801f002:	f04f 0c00 	mov.w	ip, #0
 801f006:	b530      	push	{r4, r5, lr}
 801f008:	fbb3 fef1 	udiv	lr, r3, r1
 801f00c:	6805      	ldr	r5, [r0, #0]
 801f00e:	4662      	mov	r2, ip
 801f010:	7b04      	ldrb	r4, [r0, #12]
 801f012:	4660      	mov	r0, ip
 801f014:	f10c 0c01 	add.w	ip, ip, #1
 801f018:	fbb2 f3f1 	udiv	r3, r2, r1
 801f01c:	fb01 2313 	mls	r3, r1, r3, r2
 801f020:	fa1f f28c 	uxth.w	r2, ip
 801f024:	b29b      	uxth	r3, r3
 801f026:	fb0e f303 	mul.w	r3, lr, r3
 801f02a:	58eb      	ldr	r3, [r5, r3]
 801f02c:	429c      	cmp	r4, r3
 801f02e:	d101      	bne.n	801f034 <get_available_free_slots+0x38>
 801f030:	3001      	adds	r0, #1
 801f032:	b280      	uxth	r0, r0
 801f034:	428a      	cmp	r2, r1
 801f036:	d3ed      	bcc.n	801f014 <get_available_free_slots+0x18>
 801f038:	bd30      	pop	{r4, r5, pc}
 801f03a:	4608      	mov	r0, r1
 801f03c:	4770      	bx	lr
 801f03e:	bf00      	nop

0801f040 <uxr_seq_num_add>:
 801f040:	4408      	add	r0, r1
 801f042:	b280      	uxth	r0, r0
 801f044:	4770      	bx	lr
 801f046:	bf00      	nop

0801f048 <uxr_seq_num_sub>:
 801f048:	1a40      	subs	r0, r0, r1
 801f04a:	b280      	uxth	r0, r0
 801f04c:	4770      	bx	lr
 801f04e:	bf00      	nop

0801f050 <uxr_seq_num_cmp>:
 801f050:	4288      	cmp	r0, r1
 801f052:	d011      	beq.n	801f078 <uxr_seq_num_cmp+0x28>
 801f054:	d309      	bcc.n	801f06a <uxr_seq_num_cmp+0x1a>
 801f056:	4288      	cmp	r0, r1
 801f058:	d910      	bls.n	801f07c <uxr_seq_num_cmp+0x2c>
 801f05a:	1a40      	subs	r0, r0, r1
 801f05c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801f060:	bfd4      	ite	le
 801f062:	2001      	movle	r0, #1
 801f064:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801f068:	4770      	bx	lr
 801f06a:	1a0b      	subs	r3, r1, r0
 801f06c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f070:	daf1      	bge.n	801f056 <uxr_seq_num_cmp+0x6>
 801f072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f076:	4770      	bx	lr
 801f078:	2000      	movs	r0, #0
 801f07a:	4770      	bx	lr
 801f07c:	2001      	movs	r0, #1
 801f07e:	4770      	bx	lr

0801f080 <rcl_get_default_domain_id>:
 801f080:	b530      	push	{r4, r5, lr}
 801f082:	2300      	movs	r3, #0
 801f084:	b083      	sub	sp, #12
 801f086:	9300      	str	r3, [sp, #0]
 801f088:	b1d0      	cbz	r0, 801f0c0 <rcl_get_default_domain_id+0x40>
 801f08a:	4604      	mov	r4, r0
 801f08c:	4669      	mov	r1, sp
 801f08e:	4815      	ldr	r0, [pc, #84]	; (801f0e4 <rcl_get_default_domain_id+0x64>)
 801f090:	f7f6 f82a 	bl	80150e8 <rcutils_get_env>
 801f094:	4602      	mov	r2, r0
 801f096:	b110      	cbz	r0, 801f09e <rcl_get_default_domain_id+0x1e>
 801f098:	2001      	movs	r0, #1
 801f09a:	b003      	add	sp, #12
 801f09c:	bd30      	pop	{r4, r5, pc}
 801f09e:	9b00      	ldr	r3, [sp, #0]
 801f0a0:	b18b      	cbz	r3, 801f0c6 <rcl_get_default_domain_id+0x46>
 801f0a2:	7818      	ldrb	r0, [r3, #0]
 801f0a4:	2800      	cmp	r0, #0
 801f0a6:	d0f8      	beq.n	801f09a <rcl_get_default_domain_id+0x1a>
 801f0a8:	a901      	add	r1, sp, #4
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	9201      	str	r2, [sp, #4]
 801f0ae:	f000 fc8f 	bl	801f9d0 <strtoul>
 801f0b2:	4605      	mov	r5, r0
 801f0b4:	b150      	cbz	r0, 801f0cc <rcl_get_default_domain_id+0x4c>
 801f0b6:	1c43      	adds	r3, r0, #1
 801f0b8:	d00d      	beq.n	801f0d6 <rcl_get_default_domain_id+0x56>
 801f0ba:	2000      	movs	r0, #0
 801f0bc:	6025      	str	r5, [r4, #0]
 801f0be:	e7ec      	b.n	801f09a <rcl_get_default_domain_id+0x1a>
 801f0c0:	200b      	movs	r0, #11
 801f0c2:	b003      	add	sp, #12
 801f0c4:	bd30      	pop	{r4, r5, pc}
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	b003      	add	sp, #12
 801f0ca:	bd30      	pop	{r4, r5, pc}
 801f0cc:	9b01      	ldr	r3, [sp, #4]
 801f0ce:	781b      	ldrb	r3, [r3, #0]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d0f2      	beq.n	801f0ba <rcl_get_default_domain_id+0x3a>
 801f0d4:	e7e0      	b.n	801f098 <rcl_get_default_domain_id+0x18>
 801f0d6:	f001 ff25 	bl	8020f24 <__errno>
 801f0da:	6803      	ldr	r3, [r0, #0]
 801f0dc:	2b22      	cmp	r3, #34	; 0x22
 801f0de:	d1ec      	bne.n	801f0ba <rcl_get_default_domain_id+0x3a>
 801f0e0:	e7da      	b.n	801f098 <rcl_get_default_domain_id+0x18>
 801f0e2:	bf00      	nop
 801f0e4:	08025ac8 	.word	0x08025ac8

0801f0e8 <rcl_expand_topic_name>:
 801f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0ec:	b08d      	sub	sp, #52	; 0x34
 801f0ee:	4698      	mov	r8, r3
 801f0f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f0f2:	9207      	str	r2, [sp, #28]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	bf18      	it	ne
 801f0f8:	f1b8 0f00 	cmpne.w	r8, #0
 801f0fc:	bf0c      	ite	eq
 801f0fe:	2301      	moveq	r3, #1
 801f100:	2300      	movne	r3, #0
 801f102:	2a00      	cmp	r2, #0
 801f104:	bf08      	it	eq
 801f106:	f043 0301 	orreq.w	r3, r3, #1
 801f10a:	2900      	cmp	r1, #0
 801f10c:	bf08      	it	eq
 801f10e:	f043 0301 	orreq.w	r3, r3, #1
 801f112:	2b00      	cmp	r3, #0
 801f114:	d13d      	bne.n	801f192 <rcl_expand_topic_name+0xaa>
 801f116:	fab0 f280 	clz	r2, r0
 801f11a:	4604      	mov	r4, r0
 801f11c:	0952      	lsrs	r2, r2, #5
 801f11e:	2800      	cmp	r0, #0
 801f120:	d037      	beq.n	801f192 <rcl_expand_topic_name+0xaa>
 801f122:	460f      	mov	r7, r1
 801f124:	a90b      	add	r1, sp, #44	; 0x2c
 801f126:	f000 f945 	bl	801f3b4 <rcl_validate_topic_name>
 801f12a:	4605      	mov	r5, r0
 801f12c:	bb68      	cbnz	r0, 801f18a <rcl_expand_topic_name+0xa2>
 801f12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f130:	2b00      	cmp	r3, #0
 801f132:	d137      	bne.n	801f1a4 <rcl_expand_topic_name+0xbc>
 801f134:	4602      	mov	r2, r0
 801f136:	a90b      	add	r1, sp, #44	; 0x2c
 801f138:	4638      	mov	r0, r7
 801f13a:	f7f6 fa97 	bl	801566c <rmw_validate_node_name>
 801f13e:	bb68      	cbnz	r0, 801f19c <rcl_expand_topic_name+0xb4>
 801f140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f142:	2b00      	cmp	r3, #0
 801f144:	d133      	bne.n	801f1ae <rcl_expand_topic_name+0xc6>
 801f146:	462a      	mov	r2, r5
 801f148:	a90b      	add	r1, sp, #44	; 0x2c
 801f14a:	9807      	ldr	r0, [sp, #28]
 801f14c:	f7f6 fa70 	bl	8015630 <rmw_validate_namespace>
 801f150:	bb20      	cbnz	r0, 801f19c <rcl_expand_topic_name+0xb4>
 801f152:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f154:	2d00      	cmp	r5, #0
 801f156:	f040 80a2 	bne.w	801f29e <rcl_expand_topic_name+0x1b6>
 801f15a:	217b      	movs	r1, #123	; 0x7b
 801f15c:	4620      	mov	r0, r4
 801f15e:	f001 fe51 	bl	8020e04 <strchr>
 801f162:	7823      	ldrb	r3, [r4, #0]
 801f164:	4681      	mov	r9, r0
 801f166:	bb20      	cbnz	r0, 801f1b2 <rcl_expand_topic_name+0xca>
 801f168:	2b2f      	cmp	r3, #47	; 0x2f
 801f16a:	d122      	bne.n	801f1b2 <rcl_expand_topic_name+0xca>
 801f16c:	ab19      	add	r3, sp, #100	; 0x64
 801f16e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f172:	ab16      	add	r3, sp, #88	; 0x58
 801f174:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f178:	4620      	mov	r0, r4
 801f17a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f17c:	f7f6 f93a 	bl	80153f4 <rcutils_strdup>
 801f180:	2800      	cmp	r0, #0
 801f182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f184:	bf08      	it	eq
 801f186:	250a      	moveq	r5, #10
 801f188:	6018      	str	r0, [r3, #0]
 801f18a:	4628      	mov	r0, r5
 801f18c:	b00d      	add	sp, #52	; 0x34
 801f18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f192:	250b      	movs	r5, #11
 801f194:	4628      	mov	r0, r5
 801f196:	b00d      	add	sp, #52	; 0x34
 801f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f19c:	f7fc f97a 	bl	801b494 <rcl_convert_rmw_ret_to_rcl_ret>
 801f1a0:	4605      	mov	r5, r0
 801f1a2:	e7f2      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f1a4:	2567      	movs	r5, #103	; 0x67
 801f1a6:	4628      	mov	r0, r5
 801f1a8:	b00d      	add	sp, #52	; 0x34
 801f1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ae:	25c9      	movs	r5, #201	; 0xc9
 801f1b0:	e7eb      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f1b2:	2b7e      	cmp	r3, #126	; 0x7e
 801f1b4:	d075      	beq.n	801f2a2 <rcl_expand_topic_name+0x1ba>
 801f1b6:	f1b9 0f00 	cmp.w	r9, #0
 801f1ba:	f000 80c2 	beq.w	801f342 <rcl_expand_topic_name+0x25a>
 801f1be:	2300      	movs	r3, #0
 801f1c0:	46a2      	mov	sl, r4
 801f1c2:	461e      	mov	r6, r3
 801f1c4:	9508      	str	r5, [sp, #32]
 801f1c6:	4655      	mov	r5, sl
 801f1c8:	9409      	str	r4, [sp, #36]	; 0x24
 801f1ca:	46b2      	mov	sl, r6
 801f1cc:	464c      	mov	r4, r9
 801f1ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f1d2:	2c00      	cmp	r4, #0
 801f1d4:	f000 80ae 	beq.w	801f334 <rcl_expand_topic_name+0x24c>
 801f1d8:	217d      	movs	r1, #125	; 0x7d
 801f1da:	4628      	mov	r0, r5
 801f1dc:	f001 fe12 	bl	8020e04 <strchr>
 801f1e0:	eba0 0904 	sub.w	r9, r0, r4
 801f1e4:	4621      	mov	r1, r4
 801f1e6:	4869      	ldr	r0, [pc, #420]	; (801f38c <rcl_expand_topic_name+0x2a4>)
 801f1e8:	f109 0601 	add.w	r6, r9, #1
 801f1ec:	4632      	mov	r2, r6
 801f1ee:	f001 fe16 	bl	8020e1e <strncmp>
 801f1f2:	2800      	cmp	r0, #0
 801f1f4:	d051      	beq.n	801f29a <rcl_expand_topic_name+0x1b2>
 801f1f6:	4632      	mov	r2, r6
 801f1f8:	4621      	mov	r1, r4
 801f1fa:	4865      	ldr	r0, [pc, #404]	; (801f390 <rcl_expand_topic_name+0x2a8>)
 801f1fc:	f001 fe0f 	bl	8020e1e <strncmp>
 801f200:	b128      	cbz	r0, 801f20e <rcl_expand_topic_name+0x126>
 801f202:	4632      	mov	r2, r6
 801f204:	4621      	mov	r1, r4
 801f206:	4863      	ldr	r0, [pc, #396]	; (801f394 <rcl_expand_topic_name+0x2ac>)
 801f208:	f001 fe09 	bl	8020e1e <strncmp>
 801f20c:	bb38      	cbnz	r0, 801f25e <rcl_expand_topic_name+0x176>
 801f20e:	46d9      	mov	r9, fp
 801f210:	ab18      	add	r3, sp, #96	; 0x60
 801f212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f216:	ab16      	add	r3, sp, #88	; 0x58
 801f218:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f21c:	4620      	mov	r0, r4
 801f21e:	4631      	mov	r1, r6
 801f220:	cb0c      	ldmia	r3, {r2, r3}
 801f222:	f7f6 f909 	bl	8015438 <rcutils_strndup>
 801f226:	4604      	mov	r4, r0
 801f228:	2800      	cmp	r0, #0
 801f22a:	f000 80a3 	beq.w	801f374 <rcl_expand_topic_name+0x28c>
 801f22e:	464a      	mov	r2, r9
 801f230:	4628      	mov	r0, r5
 801f232:	ab16      	add	r3, sp, #88	; 0x58
 801f234:	4621      	mov	r1, r4
 801f236:	f7f5 ffdd 	bl	80151f4 <rcutils_repl_str>
 801f23a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f23c:	4605      	mov	r5, r0
 801f23e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f240:	4620      	mov	r0, r4
 801f242:	4798      	blx	r3
 801f244:	4650      	mov	r0, sl
 801f246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f248:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f24a:	4798      	blx	r3
 801f24c:	2d00      	cmp	r5, #0
 801f24e:	d06c      	beq.n	801f32a <rcl_expand_topic_name+0x242>
 801f250:	217b      	movs	r1, #123	; 0x7b
 801f252:	4628      	mov	r0, r5
 801f254:	f001 fdd6 	bl	8020e04 <strchr>
 801f258:	46aa      	mov	sl, r5
 801f25a:	4604      	mov	r4, r0
 801f25c:	e7b9      	b.n	801f1d2 <rcl_expand_topic_name+0xea>
 801f25e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801f262:	1c61      	adds	r1, r4, #1
 801f264:	4640      	mov	r0, r8
 801f266:	f7fe fca5 	bl	801dbb4 <rcutils_string_map_getn>
 801f26a:	4681      	mov	r9, r0
 801f26c:	2800      	cmp	r0, #0
 801f26e:	d1cf      	bne.n	801f210 <rcl_expand_topic_name+0x128>
 801f270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f272:	aa18      	add	r2, sp, #96	; 0x60
 801f274:	2569      	movs	r5, #105	; 0x69
 801f276:	6018      	str	r0, [r3, #0]
 801f278:	ab16      	add	r3, sp, #88	; 0x58
 801f27a:	ca07      	ldmia	r2, {r0, r1, r2}
 801f27c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f280:	4631      	mov	r1, r6
 801f282:	4620      	mov	r0, r4
 801f284:	cb0c      	ldmia	r3, {r2, r3}
 801f286:	f7f6 f8d7 	bl	8015438 <rcutils_strndup>
 801f28a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f28c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f28e:	4798      	blx	r3
 801f290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f292:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f294:	4650      	mov	r0, sl
 801f296:	4798      	blx	r3
 801f298:	e777      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f29a:	46b9      	mov	r9, r7
 801f29c:	e7b8      	b.n	801f210 <rcl_expand_topic_name+0x128>
 801f29e:	25ca      	movs	r5, #202	; 0xca
 801f2a0:	e773      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f2a2:	9e07      	ldr	r6, [sp, #28]
 801f2a4:	4630      	mov	r0, r6
 801f2a6:	f7e1 f82b 	bl	8000300 <strlen>
 801f2aa:	4a3b      	ldr	r2, [pc, #236]	; (801f398 <rcl_expand_topic_name+0x2b0>)
 801f2ac:	4b3b      	ldr	r3, [pc, #236]	; (801f39c <rcl_expand_topic_name+0x2b4>)
 801f2ae:	9603      	str	r6, [sp, #12]
 801f2b0:	2801      	cmp	r0, #1
 801f2b2:	bf18      	it	ne
 801f2b4:	4613      	movne	r3, r2
 801f2b6:	9704      	str	r7, [sp, #16]
 801f2b8:	9302      	str	r3, [sp, #8]
 801f2ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f2bc:	9300      	str	r3, [sp, #0]
 801f2be:	1c63      	adds	r3, r4, #1
 801f2c0:	9305      	str	r3, [sp, #20]
 801f2c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f2c6:	9301      	str	r3, [sp, #4]
 801f2c8:	ab16      	add	r3, sp, #88	; 0x58
 801f2ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f2cc:	f7f5 ff58 	bl	8015180 <rcutils_format_string_limit>
 801f2d0:	4606      	mov	r6, r0
 801f2d2:	b350      	cbz	r0, 801f32a <rcl_expand_topic_name+0x242>
 801f2d4:	f1b9 0f00 	cmp.w	r9, #0
 801f2d8:	d005      	beq.n	801f2e6 <rcl_expand_topic_name+0x1fe>
 801f2da:	217b      	movs	r1, #123	; 0x7b
 801f2dc:	46b2      	mov	sl, r6
 801f2de:	f001 fd91 	bl	8020e04 <strchr>
 801f2e2:	4681      	mov	r9, r0
 801f2e4:	e76e      	b.n	801f1c4 <rcl_expand_topic_name+0xdc>
 801f2e6:	7833      	ldrb	r3, [r6, #0]
 801f2e8:	2b2f      	cmp	r3, #47	; 0x2f
 801f2ea:	d01b      	beq.n	801f324 <rcl_expand_topic_name+0x23c>
 801f2ec:	9c07      	ldr	r4, [sp, #28]
 801f2ee:	4620      	mov	r0, r4
 801f2f0:	f7e1 f806 	bl	8000300 <strlen>
 801f2f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f2f8:	4a29      	ldr	r2, [pc, #164]	; (801f3a0 <rcl_expand_topic_name+0x2b8>)
 801f2fa:	9301      	str	r3, [sp, #4]
 801f2fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f2fe:	9604      	str	r6, [sp, #16]
 801f300:	9300      	str	r3, [sp, #0]
 801f302:	4b28      	ldr	r3, [pc, #160]	; (801f3a4 <rcl_expand_topic_name+0x2bc>)
 801f304:	9403      	str	r4, [sp, #12]
 801f306:	2801      	cmp	r0, #1
 801f308:	bf18      	it	ne
 801f30a:	4613      	movne	r3, r2
 801f30c:	9302      	str	r3, [sp, #8]
 801f30e:	ab16      	add	r3, sp, #88	; 0x58
 801f310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f312:	f7f5 ff35 	bl	8015180 <rcutils_format_string_limit>
 801f316:	4603      	mov	r3, r0
 801f318:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f31a:	4630      	mov	r0, r6
 801f31c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f31e:	461e      	mov	r6, r3
 801f320:	4790      	blx	r2
 801f322:	b116      	cbz	r6, 801f32a <rcl_expand_topic_name+0x242>
 801f324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f326:	601e      	str	r6, [r3, #0]
 801f328:	e72f      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f32a:	2300      	movs	r3, #0
 801f32c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f32e:	250a      	movs	r5, #10
 801f330:	6013      	str	r3, [r2, #0]
 801f332:	e72a      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f334:	4653      	mov	r3, sl
 801f336:	4656      	mov	r6, sl
 801f338:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d1d2      	bne.n	801f2e6 <rcl_expand_topic_name+0x1fe>
 801f340:	7823      	ldrb	r3, [r4, #0]
 801f342:	2b2f      	cmp	r3, #47	; 0x2f
 801f344:	d01e      	beq.n	801f384 <rcl_expand_topic_name+0x29c>
 801f346:	9e07      	ldr	r6, [sp, #28]
 801f348:	4630      	mov	r0, r6
 801f34a:	f7e0 ffd9 	bl	8000300 <strlen>
 801f34e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f354:	9603      	str	r6, [sp, #12]
 801f356:	9404      	str	r4, [sp, #16]
 801f358:	e9cd 2300 	strd	r2, r3, [sp]
 801f35c:	4a10      	ldr	r2, [pc, #64]	; (801f3a0 <rcl_expand_topic_name+0x2b8>)
 801f35e:	4b11      	ldr	r3, [pc, #68]	; (801f3a4 <rcl_expand_topic_name+0x2bc>)
 801f360:	2801      	cmp	r0, #1
 801f362:	bf18      	it	ne
 801f364:	4613      	movne	r3, r2
 801f366:	9302      	str	r3, [sp, #8]
 801f368:	ab16      	add	r3, sp, #88	; 0x58
 801f36a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f36c:	f7f5 ff08 	bl	8015180 <rcutils_format_string_limit>
 801f370:	4606      	mov	r6, r0
 801f372:	e7d6      	b.n	801f322 <rcl_expand_topic_name+0x23a>
 801f374:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f378:	4650      	mov	r0, sl
 801f37a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f37c:	6014      	str	r4, [r2, #0]
 801f37e:	250a      	movs	r5, #10
 801f380:	4798      	blx	r3
 801f382:	e702      	b.n	801f18a <rcl_expand_topic_name+0xa2>
 801f384:	2300      	movs	r3, #0
 801f386:	461e      	mov	r6, r3
 801f388:	e7cc      	b.n	801f324 <rcl_expand_topic_name+0x23c>
 801f38a:	bf00      	nop
 801f38c:	08025ae0 	.word	0x08025ae0
 801f390:	08025ae8 	.word	0x08025ae8
 801f394:	08025af0 	.word	0x08025af0
 801f398:	08025ad8 	.word	0x08025ad8
 801f39c:	08025460 	.word	0x08025460
 801f3a0:	08024e60 	.word	0x08024e60
 801f3a4:	08024e58 	.word	0x08024e58

0801f3a8 <rcl_get_default_topic_name_substitutions>:
 801f3a8:	2800      	cmp	r0, #0
 801f3aa:	bf0c      	ite	eq
 801f3ac:	200b      	moveq	r0, #11
 801f3ae:	2000      	movne	r0, #0
 801f3b0:	4770      	bx	lr
 801f3b2:	bf00      	nop

0801f3b4 <rcl_validate_topic_name>:
 801f3b4:	2800      	cmp	r0, #0
 801f3b6:	f000 8089 	beq.w	801f4cc <rcl_validate_topic_name+0x118>
 801f3ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3be:	460e      	mov	r6, r1
 801f3c0:	2900      	cmp	r1, #0
 801f3c2:	f000 8085 	beq.w	801f4d0 <rcl_validate_topic_name+0x11c>
 801f3c6:	4604      	mov	r4, r0
 801f3c8:	4617      	mov	r7, r2
 801f3ca:	f7e0 ff99 	bl	8000300 <strlen>
 801f3ce:	b1b0      	cbz	r0, 801f3fe <rcl_validate_topic_name+0x4a>
 801f3d0:	f894 e000 	ldrb.w	lr, [r4]
 801f3d4:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f538 <rcl_validate_topic_name+0x184>
 801f3d8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f3dc:	f013 0304 	ands.w	r3, r3, #4
 801f3e0:	d139      	bne.n	801f456 <rcl_validate_topic_name+0xa2>
 801f3e2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f3e6:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f3ea:	2a2f      	cmp	r2, #47	; 0x2f
 801f3ec:	d10f      	bne.n	801f40e <rcl_validate_topic_name+0x5a>
 801f3ee:	2202      	movs	r2, #2
 801f3f0:	6032      	str	r2, [r6, #0]
 801f3f2:	b3a7      	cbz	r7, 801f45e <rcl_validate_topic_name+0xaa>
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	f8c7 8000 	str.w	r8, [r7]
 801f3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3fe:	2301      	movs	r3, #1
 801f400:	6033      	str	r3, [r6, #0]
 801f402:	b367      	cbz	r7, 801f45e <rcl_validate_topic_name+0xaa>
 801f404:	2300      	movs	r3, #0
 801f406:	4618      	mov	r0, r3
 801f408:	603b      	str	r3, [r7, #0]
 801f40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f40e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f412:	461d      	mov	r5, r3
 801f414:	4619      	mov	r1, r3
 801f416:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f41a:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f41e:	f1b9 0f09 	cmp.w	r9, #9
 801f422:	d91f      	bls.n	801f464 <rcl_validate_topic_name+0xb0>
 801f424:	f022 0920 	bic.w	r9, r2, #32
 801f428:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f42c:	f1b9 0f19 	cmp.w	r9, #25
 801f430:	d918      	bls.n	801f464 <rcl_validate_topic_name+0xb0>
 801f432:	2a5f      	cmp	r2, #95	; 0x5f
 801f434:	d024      	beq.n	801f480 <rcl_validate_topic_name+0xcc>
 801f436:	2a2f      	cmp	r2, #47	; 0x2f
 801f438:	d058      	beq.n	801f4ec <rcl_validate_topic_name+0x138>
 801f43a:	2a7e      	cmp	r2, #126	; 0x7e
 801f43c:	d04a      	beq.n	801f4d4 <rcl_validate_topic_name+0x120>
 801f43e:	2a7b      	cmp	r2, #123	; 0x7b
 801f440:	d05b      	beq.n	801f4fa <rcl_validate_topic_name+0x146>
 801f442:	2a7d      	cmp	r2, #125	; 0x7d
 801f444:	d169      	bne.n	801f51a <rcl_validate_topic_name+0x166>
 801f446:	2d00      	cmp	r5, #0
 801f448:	d15c      	bne.n	801f504 <rcl_validate_topic_name+0x150>
 801f44a:	2305      	movs	r3, #5
 801f44c:	6033      	str	r3, [r6, #0]
 801f44e:	b137      	cbz	r7, 801f45e <rcl_validate_topic_name+0xaa>
 801f450:	2000      	movs	r0, #0
 801f452:	6039      	str	r1, [r7, #0]
 801f454:	e7d9      	b.n	801f40a <rcl_validate_topic_name+0x56>
 801f456:	2304      	movs	r3, #4
 801f458:	6033      	str	r3, [r6, #0]
 801f45a:	2f00      	cmp	r7, #0
 801f45c:	d1d2      	bne.n	801f404 <rcl_validate_topic_name+0x50>
 801f45e:	2000      	movs	r0, #0
 801f460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f464:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f468:	0752      	lsls	r2, r2, #29
 801f46a:	d509      	bpl.n	801f480 <rcl_validate_topic_name+0xcc>
 801f46c:	2900      	cmp	r1, #0
 801f46e:	bf0c      	ite	eq
 801f470:	2200      	moveq	r2, #0
 801f472:	f005 0201 	andne.w	r2, r5, #1
 801f476:	b11a      	cbz	r2, 801f480 <rcl_validate_topic_name+0xcc>
 801f478:	1e4d      	subs	r5, r1, #1
 801f47a:	429d      	cmp	r5, r3
 801f47c:	d031      	beq.n	801f4e2 <rcl_validate_topic_name+0x12e>
 801f47e:	4615      	mov	r5, r2
 801f480:	3101      	adds	r1, #1
 801f482:	4288      	cmp	r0, r1
 801f484:	d1c7      	bne.n	801f416 <rcl_validate_topic_name+0x62>
 801f486:	2d00      	cmp	r5, #0
 801f488:	d142      	bne.n	801f510 <rcl_validate_topic_name+0x15c>
 801f48a:	4628      	mov	r0, r5
 801f48c:	2301      	movs	r3, #1
 801f48e:	e00c      	b.n	801f4aa <rcl_validate_topic_name+0xf6>
 801f490:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f494:	d101      	bne.n	801f49a <rcl_validate_topic_name+0xe6>
 801f496:	2801      	cmp	r0, #1
 801f498:	d047      	beq.n	801f52a <rcl_validate_topic_name+0x176>
 801f49a:	1c5a      	adds	r2, r3, #1
 801f49c:	428b      	cmp	r3, r1
 801f49e:	f100 0001 	add.w	r0, r0, #1
 801f4a2:	f104 0401 	add.w	r4, r4, #1
 801f4a6:	4613      	mov	r3, r2
 801f4a8:	d22e      	bcs.n	801f508 <rcl_validate_topic_name+0x154>
 801f4aa:	4580      	cmp	r8, r0
 801f4ac:	d0f5      	beq.n	801f49a <rcl_validate_topic_name+0xe6>
 801f4ae:	7822      	ldrb	r2, [r4, #0]
 801f4b0:	2a2f      	cmp	r2, #47	; 0x2f
 801f4b2:	d1ed      	bne.n	801f490 <rcl_validate_topic_name+0xdc>
 801f4b4:	7862      	ldrb	r2, [r4, #1]
 801f4b6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f4ba:	0752      	lsls	r2, r2, #29
 801f4bc:	d5ed      	bpl.n	801f49a <rcl_validate_topic_name+0xe6>
 801f4be:	2204      	movs	r2, #4
 801f4c0:	6032      	str	r2, [r6, #0]
 801f4c2:	2f00      	cmp	r7, #0
 801f4c4:	d0cb      	beq.n	801f45e <rcl_validate_topic_name+0xaa>
 801f4c6:	2000      	movs	r0, #0
 801f4c8:	603b      	str	r3, [r7, #0]
 801f4ca:	e79e      	b.n	801f40a <rcl_validate_topic_name+0x56>
 801f4cc:	200b      	movs	r0, #11
 801f4ce:	4770      	bx	lr
 801f4d0:	200b      	movs	r0, #11
 801f4d2:	e79a      	b.n	801f40a <rcl_validate_topic_name+0x56>
 801f4d4:	2900      	cmp	r1, #0
 801f4d6:	d0d3      	beq.n	801f480 <rcl_validate_topic_name+0xcc>
 801f4d8:	2306      	movs	r3, #6
 801f4da:	6033      	str	r3, [r6, #0]
 801f4dc:	2f00      	cmp	r7, #0
 801f4de:	d1b7      	bne.n	801f450 <rcl_validate_topic_name+0x9c>
 801f4e0:	e7bd      	b.n	801f45e <rcl_validate_topic_name+0xaa>
 801f4e2:	2309      	movs	r3, #9
 801f4e4:	6033      	str	r3, [r6, #0]
 801f4e6:	2f00      	cmp	r7, #0
 801f4e8:	d1b2      	bne.n	801f450 <rcl_validate_topic_name+0x9c>
 801f4ea:	e7b8      	b.n	801f45e <rcl_validate_topic_name+0xaa>
 801f4ec:	2d00      	cmp	r5, #0
 801f4ee:	d0c7      	beq.n	801f480 <rcl_validate_topic_name+0xcc>
 801f4f0:	2308      	movs	r3, #8
 801f4f2:	6033      	str	r3, [r6, #0]
 801f4f4:	2f00      	cmp	r7, #0
 801f4f6:	d1ab      	bne.n	801f450 <rcl_validate_topic_name+0x9c>
 801f4f8:	e7b1      	b.n	801f45e <rcl_validate_topic_name+0xaa>
 801f4fa:	2d00      	cmp	r5, #0
 801f4fc:	d1f8      	bne.n	801f4f0 <rcl_validate_topic_name+0x13c>
 801f4fe:	460b      	mov	r3, r1
 801f500:	2501      	movs	r5, #1
 801f502:	e7bd      	b.n	801f480 <rcl_validate_topic_name+0xcc>
 801f504:	2500      	movs	r5, #0
 801f506:	e7bb      	b.n	801f480 <rcl_validate_topic_name+0xcc>
 801f508:	2300      	movs	r3, #0
 801f50a:	4618      	mov	r0, r3
 801f50c:	6033      	str	r3, [r6, #0]
 801f50e:	e77c      	b.n	801f40a <rcl_validate_topic_name+0x56>
 801f510:	2205      	movs	r2, #5
 801f512:	6032      	str	r2, [r6, #0]
 801f514:	2f00      	cmp	r7, #0
 801f516:	d1d6      	bne.n	801f4c6 <rcl_validate_topic_name+0x112>
 801f518:	e7a1      	b.n	801f45e <rcl_validate_topic_name+0xaa>
 801f51a:	2d00      	cmp	r5, #0
 801f51c:	bf14      	ite	ne
 801f51e:	2308      	movne	r3, #8
 801f520:	2303      	moveq	r3, #3
 801f522:	6033      	str	r3, [r6, #0]
 801f524:	2f00      	cmp	r7, #0
 801f526:	d193      	bne.n	801f450 <rcl_validate_topic_name+0x9c>
 801f528:	e799      	b.n	801f45e <rcl_validate_topic_name+0xaa>
 801f52a:	2307      	movs	r3, #7
 801f52c:	6033      	str	r3, [r6, #0]
 801f52e:	2f00      	cmp	r7, #0
 801f530:	d095      	beq.n	801f45e <rcl_validate_topic_name+0xaa>
 801f532:	2301      	movs	r3, #1
 801f534:	e7c7      	b.n	801f4c6 <rcl_validate_topic_name+0x112>
 801f536:	bf00      	nop
 801f538:	08025b6c 	.word	0x08025b6c

0801f53c <calloc>:
 801f53c:	4b02      	ldr	r3, [pc, #8]	; (801f548 <calloc+0xc>)
 801f53e:	460a      	mov	r2, r1
 801f540:	4601      	mov	r1, r0
 801f542:	6818      	ldr	r0, [r3, #0]
 801f544:	f000 b802 	b.w	801f54c <_calloc_r>
 801f548:	2000099c 	.word	0x2000099c

0801f54c <_calloc_r>:
 801f54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f54e:	fba1 2402 	umull	r2, r4, r1, r2
 801f552:	b94c      	cbnz	r4, 801f568 <_calloc_r+0x1c>
 801f554:	4611      	mov	r1, r2
 801f556:	9201      	str	r2, [sp, #4]
 801f558:	f000 f898 	bl	801f68c <_malloc_r>
 801f55c:	9a01      	ldr	r2, [sp, #4]
 801f55e:	4605      	mov	r5, r0
 801f560:	b930      	cbnz	r0, 801f570 <_calloc_r+0x24>
 801f562:	4628      	mov	r0, r5
 801f564:	b003      	add	sp, #12
 801f566:	bd30      	pop	{r4, r5, pc}
 801f568:	220c      	movs	r2, #12
 801f56a:	6002      	str	r2, [r0, #0]
 801f56c:	2500      	movs	r5, #0
 801f56e:	e7f8      	b.n	801f562 <_calloc_r+0x16>
 801f570:	4621      	mov	r1, r4
 801f572:	f001 fc3f 	bl	8020df4 <memset>
 801f576:	e7f4      	b.n	801f562 <_calloc_r+0x16>

0801f578 <exit>:
 801f578:	b508      	push	{r3, lr}
 801f57a:	4b06      	ldr	r3, [pc, #24]	; (801f594 <exit+0x1c>)
 801f57c:	4604      	mov	r4, r0
 801f57e:	b113      	cbz	r3, 801f586 <exit+0xe>
 801f580:	2100      	movs	r1, #0
 801f582:	f3af 8000 	nop.w
 801f586:	4b04      	ldr	r3, [pc, #16]	; (801f598 <exit+0x20>)
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	b103      	cbz	r3, 801f58e <exit+0x16>
 801f58c:	4798      	blx	r3
 801f58e:	4620      	mov	r0, r4
 801f590:	f7e3 ffb2 	bl	80034f8 <_exit>
 801f594:	00000000 	.word	0x00000000
 801f598:	20017004 	.word	0x20017004

0801f59c <getenv>:
 801f59c:	b507      	push	{r0, r1, r2, lr}
 801f59e:	4b04      	ldr	r3, [pc, #16]	; (801f5b0 <getenv+0x14>)
 801f5a0:	4601      	mov	r1, r0
 801f5a2:	aa01      	add	r2, sp, #4
 801f5a4:	6818      	ldr	r0, [r3, #0]
 801f5a6:	f000 f805 	bl	801f5b4 <_findenv_r>
 801f5aa:	b003      	add	sp, #12
 801f5ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801f5b0:	2000099c 	.word	0x2000099c

0801f5b4 <_findenv_r>:
 801f5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5b8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f628 <_findenv_r+0x74>
 801f5bc:	4607      	mov	r7, r0
 801f5be:	4689      	mov	r9, r1
 801f5c0:	4616      	mov	r6, r2
 801f5c2:	f002 fb0d 	bl	8021be0 <__env_lock>
 801f5c6:	f8da 4000 	ldr.w	r4, [sl]
 801f5ca:	b134      	cbz	r4, 801f5da <_findenv_r+0x26>
 801f5cc:	464b      	mov	r3, r9
 801f5ce:	4698      	mov	r8, r3
 801f5d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f5d4:	b13a      	cbz	r2, 801f5e6 <_findenv_r+0x32>
 801f5d6:	2a3d      	cmp	r2, #61	; 0x3d
 801f5d8:	d1f9      	bne.n	801f5ce <_findenv_r+0x1a>
 801f5da:	4638      	mov	r0, r7
 801f5dc:	f002 fb06 	bl	8021bec <__env_unlock>
 801f5e0:	2000      	movs	r0, #0
 801f5e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5e6:	eba8 0809 	sub.w	r8, r8, r9
 801f5ea:	46a3      	mov	fp, r4
 801f5ec:	f854 0b04 	ldr.w	r0, [r4], #4
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	d0f2      	beq.n	801f5da <_findenv_r+0x26>
 801f5f4:	4642      	mov	r2, r8
 801f5f6:	4649      	mov	r1, r9
 801f5f8:	f001 fc11 	bl	8020e1e <strncmp>
 801f5fc:	2800      	cmp	r0, #0
 801f5fe:	d1f4      	bne.n	801f5ea <_findenv_r+0x36>
 801f600:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f604:	eb03 0508 	add.w	r5, r3, r8
 801f608:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f60c:	2b3d      	cmp	r3, #61	; 0x3d
 801f60e:	d1ec      	bne.n	801f5ea <_findenv_r+0x36>
 801f610:	f8da 3000 	ldr.w	r3, [sl]
 801f614:	ebab 0303 	sub.w	r3, fp, r3
 801f618:	109b      	asrs	r3, r3, #2
 801f61a:	4638      	mov	r0, r7
 801f61c:	6033      	str	r3, [r6, #0]
 801f61e:	f002 fae5 	bl	8021bec <__env_unlock>
 801f622:	1c68      	adds	r0, r5, #1
 801f624:	e7dd      	b.n	801f5e2 <_findenv_r+0x2e>
 801f626:	bf00      	nop
 801f628:	20000000 	.word	0x20000000

0801f62c <malloc>:
 801f62c:	4b02      	ldr	r3, [pc, #8]	; (801f638 <malloc+0xc>)
 801f62e:	4601      	mov	r1, r0
 801f630:	6818      	ldr	r0, [r3, #0]
 801f632:	f000 b82b 	b.w	801f68c <_malloc_r>
 801f636:	bf00      	nop
 801f638:	2000099c 	.word	0x2000099c

0801f63c <free>:
 801f63c:	4b02      	ldr	r3, [pc, #8]	; (801f648 <free+0xc>)
 801f63e:	4601      	mov	r1, r0
 801f640:	6818      	ldr	r0, [r3, #0]
 801f642:	f002 bad9 	b.w	8021bf8 <_free_r>
 801f646:	bf00      	nop
 801f648:	2000099c 	.word	0x2000099c

0801f64c <sbrk_aligned>:
 801f64c:	b570      	push	{r4, r5, r6, lr}
 801f64e:	4e0e      	ldr	r6, [pc, #56]	; (801f688 <sbrk_aligned+0x3c>)
 801f650:	460c      	mov	r4, r1
 801f652:	6831      	ldr	r1, [r6, #0]
 801f654:	4605      	mov	r5, r0
 801f656:	b911      	cbnz	r1, 801f65e <sbrk_aligned+0x12>
 801f658:	f001 fc42 	bl	8020ee0 <_sbrk_r>
 801f65c:	6030      	str	r0, [r6, #0]
 801f65e:	4621      	mov	r1, r4
 801f660:	4628      	mov	r0, r5
 801f662:	f001 fc3d 	bl	8020ee0 <_sbrk_r>
 801f666:	1c43      	adds	r3, r0, #1
 801f668:	d00a      	beq.n	801f680 <sbrk_aligned+0x34>
 801f66a:	1cc4      	adds	r4, r0, #3
 801f66c:	f024 0403 	bic.w	r4, r4, #3
 801f670:	42a0      	cmp	r0, r4
 801f672:	d007      	beq.n	801f684 <sbrk_aligned+0x38>
 801f674:	1a21      	subs	r1, r4, r0
 801f676:	4628      	mov	r0, r5
 801f678:	f001 fc32 	bl	8020ee0 <_sbrk_r>
 801f67c:	3001      	adds	r0, #1
 801f67e:	d101      	bne.n	801f684 <sbrk_aligned+0x38>
 801f680:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f684:	4620      	mov	r0, r4
 801f686:	bd70      	pop	{r4, r5, r6, pc}
 801f688:	20016ec8 	.word	0x20016ec8

0801f68c <_malloc_r>:
 801f68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f690:	1ccd      	adds	r5, r1, #3
 801f692:	f025 0503 	bic.w	r5, r5, #3
 801f696:	3508      	adds	r5, #8
 801f698:	2d0c      	cmp	r5, #12
 801f69a:	bf38      	it	cc
 801f69c:	250c      	movcc	r5, #12
 801f69e:	2d00      	cmp	r5, #0
 801f6a0:	4607      	mov	r7, r0
 801f6a2:	db01      	blt.n	801f6a8 <_malloc_r+0x1c>
 801f6a4:	42a9      	cmp	r1, r5
 801f6a6:	d905      	bls.n	801f6b4 <_malloc_r+0x28>
 801f6a8:	230c      	movs	r3, #12
 801f6aa:	603b      	str	r3, [r7, #0]
 801f6ac:	2600      	movs	r6, #0
 801f6ae:	4630      	mov	r0, r6
 801f6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f6b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f788 <_malloc_r+0xfc>
 801f6b8:	f000 f868 	bl	801f78c <__malloc_lock>
 801f6bc:	f8d8 3000 	ldr.w	r3, [r8]
 801f6c0:	461c      	mov	r4, r3
 801f6c2:	bb5c      	cbnz	r4, 801f71c <_malloc_r+0x90>
 801f6c4:	4629      	mov	r1, r5
 801f6c6:	4638      	mov	r0, r7
 801f6c8:	f7ff ffc0 	bl	801f64c <sbrk_aligned>
 801f6cc:	1c43      	adds	r3, r0, #1
 801f6ce:	4604      	mov	r4, r0
 801f6d0:	d155      	bne.n	801f77e <_malloc_r+0xf2>
 801f6d2:	f8d8 4000 	ldr.w	r4, [r8]
 801f6d6:	4626      	mov	r6, r4
 801f6d8:	2e00      	cmp	r6, #0
 801f6da:	d145      	bne.n	801f768 <_malloc_r+0xdc>
 801f6dc:	2c00      	cmp	r4, #0
 801f6de:	d048      	beq.n	801f772 <_malloc_r+0xe6>
 801f6e0:	6823      	ldr	r3, [r4, #0]
 801f6e2:	4631      	mov	r1, r6
 801f6e4:	4638      	mov	r0, r7
 801f6e6:	eb04 0903 	add.w	r9, r4, r3
 801f6ea:	f001 fbf9 	bl	8020ee0 <_sbrk_r>
 801f6ee:	4581      	cmp	r9, r0
 801f6f0:	d13f      	bne.n	801f772 <_malloc_r+0xe6>
 801f6f2:	6821      	ldr	r1, [r4, #0]
 801f6f4:	1a6d      	subs	r5, r5, r1
 801f6f6:	4629      	mov	r1, r5
 801f6f8:	4638      	mov	r0, r7
 801f6fa:	f7ff ffa7 	bl	801f64c <sbrk_aligned>
 801f6fe:	3001      	adds	r0, #1
 801f700:	d037      	beq.n	801f772 <_malloc_r+0xe6>
 801f702:	6823      	ldr	r3, [r4, #0]
 801f704:	442b      	add	r3, r5
 801f706:	6023      	str	r3, [r4, #0]
 801f708:	f8d8 3000 	ldr.w	r3, [r8]
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d038      	beq.n	801f782 <_malloc_r+0xf6>
 801f710:	685a      	ldr	r2, [r3, #4]
 801f712:	42a2      	cmp	r2, r4
 801f714:	d12b      	bne.n	801f76e <_malloc_r+0xe2>
 801f716:	2200      	movs	r2, #0
 801f718:	605a      	str	r2, [r3, #4]
 801f71a:	e00f      	b.n	801f73c <_malloc_r+0xb0>
 801f71c:	6822      	ldr	r2, [r4, #0]
 801f71e:	1b52      	subs	r2, r2, r5
 801f720:	d41f      	bmi.n	801f762 <_malloc_r+0xd6>
 801f722:	2a0b      	cmp	r2, #11
 801f724:	d917      	bls.n	801f756 <_malloc_r+0xca>
 801f726:	1961      	adds	r1, r4, r5
 801f728:	42a3      	cmp	r3, r4
 801f72a:	6025      	str	r5, [r4, #0]
 801f72c:	bf18      	it	ne
 801f72e:	6059      	strne	r1, [r3, #4]
 801f730:	6863      	ldr	r3, [r4, #4]
 801f732:	bf08      	it	eq
 801f734:	f8c8 1000 	streq.w	r1, [r8]
 801f738:	5162      	str	r2, [r4, r5]
 801f73a:	604b      	str	r3, [r1, #4]
 801f73c:	4638      	mov	r0, r7
 801f73e:	f104 060b 	add.w	r6, r4, #11
 801f742:	f000 f829 	bl	801f798 <__malloc_unlock>
 801f746:	f026 0607 	bic.w	r6, r6, #7
 801f74a:	1d23      	adds	r3, r4, #4
 801f74c:	1af2      	subs	r2, r6, r3
 801f74e:	d0ae      	beq.n	801f6ae <_malloc_r+0x22>
 801f750:	1b9b      	subs	r3, r3, r6
 801f752:	50a3      	str	r3, [r4, r2]
 801f754:	e7ab      	b.n	801f6ae <_malloc_r+0x22>
 801f756:	42a3      	cmp	r3, r4
 801f758:	6862      	ldr	r2, [r4, #4]
 801f75a:	d1dd      	bne.n	801f718 <_malloc_r+0x8c>
 801f75c:	f8c8 2000 	str.w	r2, [r8]
 801f760:	e7ec      	b.n	801f73c <_malloc_r+0xb0>
 801f762:	4623      	mov	r3, r4
 801f764:	6864      	ldr	r4, [r4, #4]
 801f766:	e7ac      	b.n	801f6c2 <_malloc_r+0x36>
 801f768:	4634      	mov	r4, r6
 801f76a:	6876      	ldr	r6, [r6, #4]
 801f76c:	e7b4      	b.n	801f6d8 <_malloc_r+0x4c>
 801f76e:	4613      	mov	r3, r2
 801f770:	e7cc      	b.n	801f70c <_malloc_r+0x80>
 801f772:	230c      	movs	r3, #12
 801f774:	603b      	str	r3, [r7, #0]
 801f776:	4638      	mov	r0, r7
 801f778:	f000 f80e 	bl	801f798 <__malloc_unlock>
 801f77c:	e797      	b.n	801f6ae <_malloc_r+0x22>
 801f77e:	6025      	str	r5, [r4, #0]
 801f780:	e7dc      	b.n	801f73c <_malloc_r+0xb0>
 801f782:	605b      	str	r3, [r3, #4]
 801f784:	deff      	udf	#255	; 0xff
 801f786:	bf00      	nop
 801f788:	20016ec4 	.word	0x20016ec4

0801f78c <__malloc_lock>:
 801f78c:	4801      	ldr	r0, [pc, #4]	; (801f794 <__malloc_lock+0x8>)
 801f78e:	f001 bbf4 	b.w	8020f7a <__retarget_lock_acquire_recursive>
 801f792:	bf00      	nop
 801f794:	2001700d 	.word	0x2001700d

0801f798 <__malloc_unlock>:
 801f798:	4801      	ldr	r0, [pc, #4]	; (801f7a0 <__malloc_unlock+0x8>)
 801f79a:	f001 bbef 	b.w	8020f7c <__retarget_lock_release_recursive>
 801f79e:	bf00      	nop
 801f7a0:	2001700d 	.word	0x2001700d

0801f7a4 <srand>:
 801f7a4:	b538      	push	{r3, r4, r5, lr}
 801f7a6:	4b10      	ldr	r3, [pc, #64]	; (801f7e8 <srand+0x44>)
 801f7a8:	681d      	ldr	r5, [r3, #0]
 801f7aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f7ac:	4604      	mov	r4, r0
 801f7ae:	b9b3      	cbnz	r3, 801f7de <srand+0x3a>
 801f7b0:	2018      	movs	r0, #24
 801f7b2:	f7ff ff3b 	bl	801f62c <malloc>
 801f7b6:	4602      	mov	r2, r0
 801f7b8:	6328      	str	r0, [r5, #48]	; 0x30
 801f7ba:	b920      	cbnz	r0, 801f7c6 <srand+0x22>
 801f7bc:	4b0b      	ldr	r3, [pc, #44]	; (801f7ec <srand+0x48>)
 801f7be:	480c      	ldr	r0, [pc, #48]	; (801f7f0 <srand+0x4c>)
 801f7c0:	2146      	movs	r1, #70	; 0x46
 801f7c2:	f001 fbf9 	bl	8020fb8 <__assert_func>
 801f7c6:	490b      	ldr	r1, [pc, #44]	; (801f7f4 <srand+0x50>)
 801f7c8:	4b0b      	ldr	r3, [pc, #44]	; (801f7f8 <srand+0x54>)
 801f7ca:	e9c0 1300 	strd	r1, r3, [r0]
 801f7ce:	4b0b      	ldr	r3, [pc, #44]	; (801f7fc <srand+0x58>)
 801f7d0:	6083      	str	r3, [r0, #8]
 801f7d2:	230b      	movs	r3, #11
 801f7d4:	8183      	strh	r3, [r0, #12]
 801f7d6:	2100      	movs	r1, #0
 801f7d8:	2001      	movs	r0, #1
 801f7da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f7de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f7e0:	2200      	movs	r2, #0
 801f7e2:	611c      	str	r4, [r3, #16]
 801f7e4:	615a      	str	r2, [r3, #20]
 801f7e6:	bd38      	pop	{r3, r4, r5, pc}
 801f7e8:	2000099c 	.word	0x2000099c
 801f7ec:	08025afc 	.word	0x08025afc
 801f7f0:	08025b13 	.word	0x08025b13
 801f7f4:	abcd330e 	.word	0xabcd330e
 801f7f8:	e66d1234 	.word	0xe66d1234
 801f7fc:	0005deec 	.word	0x0005deec

0801f800 <rand>:
 801f800:	4b16      	ldr	r3, [pc, #88]	; (801f85c <rand+0x5c>)
 801f802:	b510      	push	{r4, lr}
 801f804:	681c      	ldr	r4, [r3, #0]
 801f806:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f808:	b9b3      	cbnz	r3, 801f838 <rand+0x38>
 801f80a:	2018      	movs	r0, #24
 801f80c:	f7ff ff0e 	bl	801f62c <malloc>
 801f810:	4602      	mov	r2, r0
 801f812:	6320      	str	r0, [r4, #48]	; 0x30
 801f814:	b920      	cbnz	r0, 801f820 <rand+0x20>
 801f816:	4b12      	ldr	r3, [pc, #72]	; (801f860 <rand+0x60>)
 801f818:	4812      	ldr	r0, [pc, #72]	; (801f864 <rand+0x64>)
 801f81a:	2152      	movs	r1, #82	; 0x52
 801f81c:	f001 fbcc 	bl	8020fb8 <__assert_func>
 801f820:	4911      	ldr	r1, [pc, #68]	; (801f868 <rand+0x68>)
 801f822:	4b12      	ldr	r3, [pc, #72]	; (801f86c <rand+0x6c>)
 801f824:	e9c0 1300 	strd	r1, r3, [r0]
 801f828:	4b11      	ldr	r3, [pc, #68]	; (801f870 <rand+0x70>)
 801f82a:	6083      	str	r3, [r0, #8]
 801f82c:	230b      	movs	r3, #11
 801f82e:	8183      	strh	r3, [r0, #12]
 801f830:	2100      	movs	r1, #0
 801f832:	2001      	movs	r0, #1
 801f834:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f838:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f83a:	480e      	ldr	r0, [pc, #56]	; (801f874 <rand+0x74>)
 801f83c:	690b      	ldr	r3, [r1, #16]
 801f83e:	694c      	ldr	r4, [r1, #20]
 801f840:	4a0d      	ldr	r2, [pc, #52]	; (801f878 <rand+0x78>)
 801f842:	4358      	muls	r0, r3
 801f844:	fb02 0004 	mla	r0, r2, r4, r0
 801f848:	fba3 3202 	umull	r3, r2, r3, r2
 801f84c:	3301      	adds	r3, #1
 801f84e:	eb40 0002 	adc.w	r0, r0, r2
 801f852:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f856:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f85a:	bd10      	pop	{r4, pc}
 801f85c:	2000099c 	.word	0x2000099c
 801f860:	08025afc 	.word	0x08025afc
 801f864:	08025b13 	.word	0x08025b13
 801f868:	abcd330e 	.word	0xabcd330e
 801f86c:	e66d1234 	.word	0xe66d1234
 801f870:	0005deec 	.word	0x0005deec
 801f874:	5851f42d 	.word	0x5851f42d
 801f878:	4c957f2d 	.word	0x4c957f2d

0801f87c <realloc>:
 801f87c:	4b02      	ldr	r3, [pc, #8]	; (801f888 <realloc+0xc>)
 801f87e:	460a      	mov	r2, r1
 801f880:	4601      	mov	r1, r0
 801f882:	6818      	ldr	r0, [r3, #0]
 801f884:	f000 b802 	b.w	801f88c <_realloc_r>
 801f888:	2000099c 	.word	0x2000099c

0801f88c <_realloc_r>:
 801f88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f890:	4680      	mov	r8, r0
 801f892:	4614      	mov	r4, r2
 801f894:	460e      	mov	r6, r1
 801f896:	b921      	cbnz	r1, 801f8a2 <_realloc_r+0x16>
 801f898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f89c:	4611      	mov	r1, r2
 801f89e:	f7ff bef5 	b.w	801f68c <_malloc_r>
 801f8a2:	b92a      	cbnz	r2, 801f8b0 <_realloc_r+0x24>
 801f8a4:	f002 f9a8 	bl	8021bf8 <_free_r>
 801f8a8:	4625      	mov	r5, r4
 801f8aa:	4628      	mov	r0, r5
 801f8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8b0:	f002 fe98 	bl	80225e4 <_malloc_usable_size_r>
 801f8b4:	4284      	cmp	r4, r0
 801f8b6:	4607      	mov	r7, r0
 801f8b8:	d802      	bhi.n	801f8c0 <_realloc_r+0x34>
 801f8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f8be:	d812      	bhi.n	801f8e6 <_realloc_r+0x5a>
 801f8c0:	4621      	mov	r1, r4
 801f8c2:	4640      	mov	r0, r8
 801f8c4:	f7ff fee2 	bl	801f68c <_malloc_r>
 801f8c8:	4605      	mov	r5, r0
 801f8ca:	2800      	cmp	r0, #0
 801f8cc:	d0ed      	beq.n	801f8aa <_realloc_r+0x1e>
 801f8ce:	42bc      	cmp	r4, r7
 801f8d0:	4622      	mov	r2, r4
 801f8d2:	4631      	mov	r1, r6
 801f8d4:	bf28      	it	cs
 801f8d6:	463a      	movcs	r2, r7
 801f8d8:	f001 fb59 	bl	8020f8e <memcpy>
 801f8dc:	4631      	mov	r1, r6
 801f8de:	4640      	mov	r0, r8
 801f8e0:	f002 f98a 	bl	8021bf8 <_free_r>
 801f8e4:	e7e1      	b.n	801f8aa <_realloc_r+0x1e>
 801f8e6:	4635      	mov	r5, r6
 801f8e8:	e7df      	b.n	801f8aa <_realloc_r+0x1e>
	...

0801f8ec <_strtoul_l.constprop.0>:
 801f8ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f8f0:	4f36      	ldr	r7, [pc, #216]	; (801f9cc <_strtoul_l.constprop.0+0xe0>)
 801f8f2:	4686      	mov	lr, r0
 801f8f4:	460d      	mov	r5, r1
 801f8f6:	4628      	mov	r0, r5
 801f8f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f8fc:	5d3e      	ldrb	r6, [r7, r4]
 801f8fe:	f016 0608 	ands.w	r6, r6, #8
 801f902:	d1f8      	bne.n	801f8f6 <_strtoul_l.constprop.0+0xa>
 801f904:	2c2d      	cmp	r4, #45	; 0x2d
 801f906:	d130      	bne.n	801f96a <_strtoul_l.constprop.0+0x7e>
 801f908:	782c      	ldrb	r4, [r5, #0]
 801f90a:	2601      	movs	r6, #1
 801f90c:	1c85      	adds	r5, r0, #2
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d057      	beq.n	801f9c2 <_strtoul_l.constprop.0+0xd6>
 801f912:	2b10      	cmp	r3, #16
 801f914:	d109      	bne.n	801f92a <_strtoul_l.constprop.0+0x3e>
 801f916:	2c30      	cmp	r4, #48	; 0x30
 801f918:	d107      	bne.n	801f92a <_strtoul_l.constprop.0+0x3e>
 801f91a:	7828      	ldrb	r0, [r5, #0]
 801f91c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f920:	2858      	cmp	r0, #88	; 0x58
 801f922:	d149      	bne.n	801f9b8 <_strtoul_l.constprop.0+0xcc>
 801f924:	786c      	ldrb	r4, [r5, #1]
 801f926:	2310      	movs	r3, #16
 801f928:	3502      	adds	r5, #2
 801f92a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f92e:	2700      	movs	r7, #0
 801f930:	fbb8 f8f3 	udiv	r8, r8, r3
 801f934:	fb03 f908 	mul.w	r9, r3, r8
 801f938:	ea6f 0909 	mvn.w	r9, r9
 801f93c:	4638      	mov	r0, r7
 801f93e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f942:	f1bc 0f09 	cmp.w	ip, #9
 801f946:	d815      	bhi.n	801f974 <_strtoul_l.constprop.0+0x88>
 801f948:	4664      	mov	r4, ip
 801f94a:	42a3      	cmp	r3, r4
 801f94c:	dd23      	ble.n	801f996 <_strtoul_l.constprop.0+0xaa>
 801f94e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801f952:	d007      	beq.n	801f964 <_strtoul_l.constprop.0+0x78>
 801f954:	4580      	cmp	r8, r0
 801f956:	d31b      	bcc.n	801f990 <_strtoul_l.constprop.0+0xa4>
 801f958:	d101      	bne.n	801f95e <_strtoul_l.constprop.0+0x72>
 801f95a:	45a1      	cmp	r9, r4
 801f95c:	db18      	blt.n	801f990 <_strtoul_l.constprop.0+0xa4>
 801f95e:	fb00 4003 	mla	r0, r0, r3, r4
 801f962:	2701      	movs	r7, #1
 801f964:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f968:	e7e9      	b.n	801f93e <_strtoul_l.constprop.0+0x52>
 801f96a:	2c2b      	cmp	r4, #43	; 0x2b
 801f96c:	bf04      	itt	eq
 801f96e:	782c      	ldrbeq	r4, [r5, #0]
 801f970:	1c85      	addeq	r5, r0, #2
 801f972:	e7cc      	b.n	801f90e <_strtoul_l.constprop.0+0x22>
 801f974:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f978:	f1bc 0f19 	cmp.w	ip, #25
 801f97c:	d801      	bhi.n	801f982 <_strtoul_l.constprop.0+0x96>
 801f97e:	3c37      	subs	r4, #55	; 0x37
 801f980:	e7e3      	b.n	801f94a <_strtoul_l.constprop.0+0x5e>
 801f982:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f986:	f1bc 0f19 	cmp.w	ip, #25
 801f98a:	d804      	bhi.n	801f996 <_strtoul_l.constprop.0+0xaa>
 801f98c:	3c57      	subs	r4, #87	; 0x57
 801f98e:	e7dc      	b.n	801f94a <_strtoul_l.constprop.0+0x5e>
 801f990:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f994:	e7e6      	b.n	801f964 <_strtoul_l.constprop.0+0x78>
 801f996:	1c7b      	adds	r3, r7, #1
 801f998:	d106      	bne.n	801f9a8 <_strtoul_l.constprop.0+0xbc>
 801f99a:	2322      	movs	r3, #34	; 0x22
 801f99c:	f8ce 3000 	str.w	r3, [lr]
 801f9a0:	4638      	mov	r0, r7
 801f9a2:	b932      	cbnz	r2, 801f9b2 <_strtoul_l.constprop.0+0xc6>
 801f9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f9a8:	b106      	cbz	r6, 801f9ac <_strtoul_l.constprop.0+0xc0>
 801f9aa:	4240      	negs	r0, r0
 801f9ac:	2a00      	cmp	r2, #0
 801f9ae:	d0f9      	beq.n	801f9a4 <_strtoul_l.constprop.0+0xb8>
 801f9b0:	b107      	cbz	r7, 801f9b4 <_strtoul_l.constprop.0+0xc8>
 801f9b2:	1e69      	subs	r1, r5, #1
 801f9b4:	6011      	str	r1, [r2, #0]
 801f9b6:	e7f5      	b.n	801f9a4 <_strtoul_l.constprop.0+0xb8>
 801f9b8:	2430      	movs	r4, #48	; 0x30
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d1b5      	bne.n	801f92a <_strtoul_l.constprop.0+0x3e>
 801f9be:	2308      	movs	r3, #8
 801f9c0:	e7b3      	b.n	801f92a <_strtoul_l.constprop.0+0x3e>
 801f9c2:	2c30      	cmp	r4, #48	; 0x30
 801f9c4:	d0a9      	beq.n	801f91a <_strtoul_l.constprop.0+0x2e>
 801f9c6:	230a      	movs	r3, #10
 801f9c8:	e7af      	b.n	801f92a <_strtoul_l.constprop.0+0x3e>
 801f9ca:	bf00      	nop
 801f9cc:	08025b6c 	.word	0x08025b6c

0801f9d0 <strtoul>:
 801f9d0:	4613      	mov	r3, r2
 801f9d2:	460a      	mov	r2, r1
 801f9d4:	4601      	mov	r1, r0
 801f9d6:	4802      	ldr	r0, [pc, #8]	; (801f9e0 <strtoul+0x10>)
 801f9d8:	6800      	ldr	r0, [r0, #0]
 801f9da:	f7ff bf87 	b.w	801f8ec <_strtoul_l.constprop.0>
 801f9de:	bf00      	nop
 801f9e0:	2000099c 	.word	0x2000099c

0801f9e4 <__cvt>:
 801f9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9e6:	ed2d 8b02 	vpush	{d8}
 801f9ea:	eeb0 8b40 	vmov.f64	d8, d0
 801f9ee:	b085      	sub	sp, #20
 801f9f0:	4617      	mov	r7, r2
 801f9f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f9f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f9f6:	ee18 2a90 	vmov	r2, s17
 801f9fa:	f025 0520 	bic.w	r5, r5, #32
 801f9fe:	2a00      	cmp	r2, #0
 801fa00:	bfb6      	itet	lt
 801fa02:	222d      	movlt	r2, #45	; 0x2d
 801fa04:	2200      	movge	r2, #0
 801fa06:	eeb1 8b40 	vneglt.f64	d8, d0
 801fa0a:	2d46      	cmp	r5, #70	; 0x46
 801fa0c:	460c      	mov	r4, r1
 801fa0e:	701a      	strb	r2, [r3, #0]
 801fa10:	d004      	beq.n	801fa1c <__cvt+0x38>
 801fa12:	2d45      	cmp	r5, #69	; 0x45
 801fa14:	d100      	bne.n	801fa18 <__cvt+0x34>
 801fa16:	3401      	adds	r4, #1
 801fa18:	2102      	movs	r1, #2
 801fa1a:	e000      	b.n	801fa1e <__cvt+0x3a>
 801fa1c:	2103      	movs	r1, #3
 801fa1e:	ab03      	add	r3, sp, #12
 801fa20:	9301      	str	r3, [sp, #4]
 801fa22:	ab02      	add	r3, sp, #8
 801fa24:	9300      	str	r3, [sp, #0]
 801fa26:	4622      	mov	r2, r4
 801fa28:	4633      	mov	r3, r6
 801fa2a:	eeb0 0b48 	vmov.f64	d0, d8
 801fa2e:	f001 fb6b 	bl	8021108 <_dtoa_r>
 801fa32:	2d47      	cmp	r5, #71	; 0x47
 801fa34:	d101      	bne.n	801fa3a <__cvt+0x56>
 801fa36:	07fb      	lsls	r3, r7, #31
 801fa38:	d51a      	bpl.n	801fa70 <__cvt+0x8c>
 801fa3a:	2d46      	cmp	r5, #70	; 0x46
 801fa3c:	eb00 0204 	add.w	r2, r0, r4
 801fa40:	d10c      	bne.n	801fa5c <__cvt+0x78>
 801fa42:	7803      	ldrb	r3, [r0, #0]
 801fa44:	2b30      	cmp	r3, #48	; 0x30
 801fa46:	d107      	bne.n	801fa58 <__cvt+0x74>
 801fa48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa50:	bf1c      	itt	ne
 801fa52:	f1c4 0401 	rsbne	r4, r4, #1
 801fa56:	6034      	strne	r4, [r6, #0]
 801fa58:	6833      	ldr	r3, [r6, #0]
 801fa5a:	441a      	add	r2, r3
 801fa5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa64:	bf08      	it	eq
 801fa66:	9203      	streq	r2, [sp, #12]
 801fa68:	2130      	movs	r1, #48	; 0x30
 801fa6a:	9b03      	ldr	r3, [sp, #12]
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	d307      	bcc.n	801fa80 <__cvt+0x9c>
 801fa70:	9b03      	ldr	r3, [sp, #12]
 801fa72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fa74:	1a1b      	subs	r3, r3, r0
 801fa76:	6013      	str	r3, [r2, #0]
 801fa78:	b005      	add	sp, #20
 801fa7a:	ecbd 8b02 	vpop	{d8}
 801fa7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa80:	1c5c      	adds	r4, r3, #1
 801fa82:	9403      	str	r4, [sp, #12]
 801fa84:	7019      	strb	r1, [r3, #0]
 801fa86:	e7f0      	b.n	801fa6a <__cvt+0x86>

0801fa88 <__exponent>:
 801fa88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	2900      	cmp	r1, #0
 801fa8e:	bfb8      	it	lt
 801fa90:	4249      	neglt	r1, r1
 801fa92:	f803 2b02 	strb.w	r2, [r3], #2
 801fa96:	bfb4      	ite	lt
 801fa98:	222d      	movlt	r2, #45	; 0x2d
 801fa9a:	222b      	movge	r2, #43	; 0x2b
 801fa9c:	2909      	cmp	r1, #9
 801fa9e:	7042      	strb	r2, [r0, #1]
 801faa0:	dd2a      	ble.n	801faf8 <__exponent+0x70>
 801faa2:	f10d 0207 	add.w	r2, sp, #7
 801faa6:	4617      	mov	r7, r2
 801faa8:	260a      	movs	r6, #10
 801faaa:	4694      	mov	ip, r2
 801faac:	fb91 f5f6 	sdiv	r5, r1, r6
 801fab0:	fb06 1415 	mls	r4, r6, r5, r1
 801fab4:	3430      	adds	r4, #48	; 0x30
 801fab6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801faba:	460c      	mov	r4, r1
 801fabc:	2c63      	cmp	r4, #99	; 0x63
 801fabe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801fac2:	4629      	mov	r1, r5
 801fac4:	dcf1      	bgt.n	801faaa <__exponent+0x22>
 801fac6:	3130      	adds	r1, #48	; 0x30
 801fac8:	f1ac 0402 	sub.w	r4, ip, #2
 801facc:	f802 1c01 	strb.w	r1, [r2, #-1]
 801fad0:	1c41      	adds	r1, r0, #1
 801fad2:	4622      	mov	r2, r4
 801fad4:	42ba      	cmp	r2, r7
 801fad6:	d30a      	bcc.n	801faee <__exponent+0x66>
 801fad8:	f10d 0209 	add.w	r2, sp, #9
 801fadc:	eba2 020c 	sub.w	r2, r2, ip
 801fae0:	42bc      	cmp	r4, r7
 801fae2:	bf88      	it	hi
 801fae4:	2200      	movhi	r2, #0
 801fae6:	4413      	add	r3, r2
 801fae8:	1a18      	subs	r0, r3, r0
 801faea:	b003      	add	sp, #12
 801faec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801faee:	f812 5b01 	ldrb.w	r5, [r2], #1
 801faf2:	f801 5f01 	strb.w	r5, [r1, #1]!
 801faf6:	e7ed      	b.n	801fad4 <__exponent+0x4c>
 801faf8:	2330      	movs	r3, #48	; 0x30
 801fafa:	3130      	adds	r1, #48	; 0x30
 801fafc:	7083      	strb	r3, [r0, #2]
 801fafe:	70c1      	strb	r1, [r0, #3]
 801fb00:	1d03      	adds	r3, r0, #4
 801fb02:	e7f1      	b.n	801fae8 <__exponent+0x60>
 801fb04:	0000      	movs	r0, r0
	...

0801fb08 <_printf_float>:
 801fb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb0c:	b08b      	sub	sp, #44	; 0x2c
 801fb0e:	460c      	mov	r4, r1
 801fb10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801fb14:	4616      	mov	r6, r2
 801fb16:	461f      	mov	r7, r3
 801fb18:	4605      	mov	r5, r0
 801fb1a:	f001 f9a9 	bl	8020e70 <_localeconv_r>
 801fb1e:	f8d0 b000 	ldr.w	fp, [r0]
 801fb22:	4658      	mov	r0, fp
 801fb24:	f7e0 fbec 	bl	8000300 <strlen>
 801fb28:	2300      	movs	r3, #0
 801fb2a:	9308      	str	r3, [sp, #32]
 801fb2c:	f8d8 3000 	ldr.w	r3, [r8]
 801fb30:	f894 9018 	ldrb.w	r9, [r4, #24]
 801fb34:	6822      	ldr	r2, [r4, #0]
 801fb36:	3307      	adds	r3, #7
 801fb38:	f023 0307 	bic.w	r3, r3, #7
 801fb3c:	f103 0108 	add.w	r1, r3, #8
 801fb40:	f8c8 1000 	str.w	r1, [r8]
 801fb44:	ed93 0b00 	vldr	d0, [r3]
 801fb48:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801fda8 <_printf_float+0x2a0>
 801fb4c:	eeb0 7bc0 	vabs.f64	d7, d0
 801fb50:	eeb4 7b46 	vcmp.f64	d7, d6
 801fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb58:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801fb5c:	4682      	mov	sl, r0
 801fb5e:	dd24      	ble.n	801fbaa <_printf_float+0xa2>
 801fb60:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb68:	d502      	bpl.n	801fb70 <_printf_float+0x68>
 801fb6a:	232d      	movs	r3, #45	; 0x2d
 801fb6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fb70:	498f      	ldr	r1, [pc, #572]	; (801fdb0 <_printf_float+0x2a8>)
 801fb72:	4b90      	ldr	r3, [pc, #576]	; (801fdb4 <_printf_float+0x2ac>)
 801fb74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fb78:	bf94      	ite	ls
 801fb7a:	4688      	movls	r8, r1
 801fb7c:	4698      	movhi	r8, r3
 801fb7e:	2303      	movs	r3, #3
 801fb80:	6123      	str	r3, [r4, #16]
 801fb82:	f022 0204 	bic.w	r2, r2, #4
 801fb86:	2300      	movs	r3, #0
 801fb88:	6022      	str	r2, [r4, #0]
 801fb8a:	9304      	str	r3, [sp, #16]
 801fb8c:	9700      	str	r7, [sp, #0]
 801fb8e:	4633      	mov	r3, r6
 801fb90:	aa09      	add	r2, sp, #36	; 0x24
 801fb92:	4621      	mov	r1, r4
 801fb94:	4628      	mov	r0, r5
 801fb96:	f000 f9d1 	bl	801ff3c <_printf_common>
 801fb9a:	3001      	adds	r0, #1
 801fb9c:	f040 808a 	bne.w	801fcb4 <_printf_float+0x1ac>
 801fba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fba4:	b00b      	add	sp, #44	; 0x2c
 801fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbaa:	eeb4 0b40 	vcmp.f64	d0, d0
 801fbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbb2:	d709      	bvc.n	801fbc8 <_printf_float+0xc0>
 801fbb4:	ee10 3a90 	vmov	r3, s1
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	bfbc      	itt	lt
 801fbbc:	232d      	movlt	r3, #45	; 0x2d
 801fbbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801fbc2:	497d      	ldr	r1, [pc, #500]	; (801fdb8 <_printf_float+0x2b0>)
 801fbc4:	4b7d      	ldr	r3, [pc, #500]	; (801fdbc <_printf_float+0x2b4>)
 801fbc6:	e7d5      	b.n	801fb74 <_printf_float+0x6c>
 801fbc8:	6863      	ldr	r3, [r4, #4]
 801fbca:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801fbce:	9104      	str	r1, [sp, #16]
 801fbd0:	1c59      	adds	r1, r3, #1
 801fbd2:	d13c      	bne.n	801fc4e <_printf_float+0x146>
 801fbd4:	2306      	movs	r3, #6
 801fbd6:	6063      	str	r3, [r4, #4]
 801fbd8:	2300      	movs	r3, #0
 801fbda:	9303      	str	r3, [sp, #12]
 801fbdc:	ab08      	add	r3, sp, #32
 801fbde:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fbe2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fbe6:	ab07      	add	r3, sp, #28
 801fbe8:	6861      	ldr	r1, [r4, #4]
 801fbea:	9300      	str	r3, [sp, #0]
 801fbec:	6022      	str	r2, [r4, #0]
 801fbee:	f10d 031b 	add.w	r3, sp, #27
 801fbf2:	4628      	mov	r0, r5
 801fbf4:	f7ff fef6 	bl	801f9e4 <__cvt>
 801fbf8:	9b04      	ldr	r3, [sp, #16]
 801fbfa:	9907      	ldr	r1, [sp, #28]
 801fbfc:	2b47      	cmp	r3, #71	; 0x47
 801fbfe:	4680      	mov	r8, r0
 801fc00:	d108      	bne.n	801fc14 <_printf_float+0x10c>
 801fc02:	1cc8      	adds	r0, r1, #3
 801fc04:	db02      	blt.n	801fc0c <_printf_float+0x104>
 801fc06:	6863      	ldr	r3, [r4, #4]
 801fc08:	4299      	cmp	r1, r3
 801fc0a:	dd41      	ble.n	801fc90 <_printf_float+0x188>
 801fc0c:	f1a9 0902 	sub.w	r9, r9, #2
 801fc10:	fa5f f989 	uxtb.w	r9, r9
 801fc14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fc18:	d820      	bhi.n	801fc5c <_printf_float+0x154>
 801fc1a:	3901      	subs	r1, #1
 801fc1c:	464a      	mov	r2, r9
 801fc1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801fc22:	9107      	str	r1, [sp, #28]
 801fc24:	f7ff ff30 	bl	801fa88 <__exponent>
 801fc28:	9a08      	ldr	r2, [sp, #32]
 801fc2a:	9004      	str	r0, [sp, #16]
 801fc2c:	1813      	adds	r3, r2, r0
 801fc2e:	2a01      	cmp	r2, #1
 801fc30:	6123      	str	r3, [r4, #16]
 801fc32:	dc02      	bgt.n	801fc3a <_printf_float+0x132>
 801fc34:	6822      	ldr	r2, [r4, #0]
 801fc36:	07d2      	lsls	r2, r2, #31
 801fc38:	d501      	bpl.n	801fc3e <_printf_float+0x136>
 801fc3a:	3301      	adds	r3, #1
 801fc3c:	6123      	str	r3, [r4, #16]
 801fc3e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d0a2      	beq.n	801fb8c <_printf_float+0x84>
 801fc46:	232d      	movs	r3, #45	; 0x2d
 801fc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fc4c:	e79e      	b.n	801fb8c <_printf_float+0x84>
 801fc4e:	9904      	ldr	r1, [sp, #16]
 801fc50:	2947      	cmp	r1, #71	; 0x47
 801fc52:	d1c1      	bne.n	801fbd8 <_printf_float+0xd0>
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d1bf      	bne.n	801fbd8 <_printf_float+0xd0>
 801fc58:	2301      	movs	r3, #1
 801fc5a:	e7bc      	b.n	801fbd6 <_printf_float+0xce>
 801fc5c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801fc60:	d118      	bne.n	801fc94 <_printf_float+0x18c>
 801fc62:	2900      	cmp	r1, #0
 801fc64:	6863      	ldr	r3, [r4, #4]
 801fc66:	dd0b      	ble.n	801fc80 <_printf_float+0x178>
 801fc68:	6121      	str	r1, [r4, #16]
 801fc6a:	b913      	cbnz	r3, 801fc72 <_printf_float+0x16a>
 801fc6c:	6822      	ldr	r2, [r4, #0]
 801fc6e:	07d0      	lsls	r0, r2, #31
 801fc70:	d502      	bpl.n	801fc78 <_printf_float+0x170>
 801fc72:	3301      	adds	r3, #1
 801fc74:	440b      	add	r3, r1
 801fc76:	6123      	str	r3, [r4, #16]
 801fc78:	2300      	movs	r3, #0
 801fc7a:	65a1      	str	r1, [r4, #88]	; 0x58
 801fc7c:	9304      	str	r3, [sp, #16]
 801fc7e:	e7de      	b.n	801fc3e <_printf_float+0x136>
 801fc80:	b913      	cbnz	r3, 801fc88 <_printf_float+0x180>
 801fc82:	6822      	ldr	r2, [r4, #0]
 801fc84:	07d2      	lsls	r2, r2, #31
 801fc86:	d501      	bpl.n	801fc8c <_printf_float+0x184>
 801fc88:	3302      	adds	r3, #2
 801fc8a:	e7f4      	b.n	801fc76 <_printf_float+0x16e>
 801fc8c:	2301      	movs	r3, #1
 801fc8e:	e7f2      	b.n	801fc76 <_printf_float+0x16e>
 801fc90:	f04f 0967 	mov.w	r9, #103	; 0x67
 801fc94:	9b08      	ldr	r3, [sp, #32]
 801fc96:	4299      	cmp	r1, r3
 801fc98:	db05      	blt.n	801fca6 <_printf_float+0x19e>
 801fc9a:	6823      	ldr	r3, [r4, #0]
 801fc9c:	6121      	str	r1, [r4, #16]
 801fc9e:	07d8      	lsls	r0, r3, #31
 801fca0:	d5ea      	bpl.n	801fc78 <_printf_float+0x170>
 801fca2:	1c4b      	adds	r3, r1, #1
 801fca4:	e7e7      	b.n	801fc76 <_printf_float+0x16e>
 801fca6:	2900      	cmp	r1, #0
 801fca8:	bfd4      	ite	le
 801fcaa:	f1c1 0202 	rsble	r2, r1, #2
 801fcae:	2201      	movgt	r2, #1
 801fcb0:	4413      	add	r3, r2
 801fcb2:	e7e0      	b.n	801fc76 <_printf_float+0x16e>
 801fcb4:	6823      	ldr	r3, [r4, #0]
 801fcb6:	055a      	lsls	r2, r3, #21
 801fcb8:	d407      	bmi.n	801fcca <_printf_float+0x1c2>
 801fcba:	6923      	ldr	r3, [r4, #16]
 801fcbc:	4642      	mov	r2, r8
 801fcbe:	4631      	mov	r1, r6
 801fcc0:	4628      	mov	r0, r5
 801fcc2:	47b8      	blx	r7
 801fcc4:	3001      	adds	r0, #1
 801fcc6:	d12a      	bne.n	801fd1e <_printf_float+0x216>
 801fcc8:	e76a      	b.n	801fba0 <_printf_float+0x98>
 801fcca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fcce:	f240 80e0 	bls.w	801fe92 <_printf_float+0x38a>
 801fcd2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fcd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcde:	d133      	bne.n	801fd48 <_printf_float+0x240>
 801fce0:	4a37      	ldr	r2, [pc, #220]	; (801fdc0 <_printf_float+0x2b8>)
 801fce2:	2301      	movs	r3, #1
 801fce4:	4631      	mov	r1, r6
 801fce6:	4628      	mov	r0, r5
 801fce8:	47b8      	blx	r7
 801fcea:	3001      	adds	r0, #1
 801fcec:	f43f af58 	beq.w	801fba0 <_printf_float+0x98>
 801fcf0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fcf4:	429a      	cmp	r2, r3
 801fcf6:	db02      	blt.n	801fcfe <_printf_float+0x1f6>
 801fcf8:	6823      	ldr	r3, [r4, #0]
 801fcfa:	07d8      	lsls	r0, r3, #31
 801fcfc:	d50f      	bpl.n	801fd1e <_printf_float+0x216>
 801fcfe:	4653      	mov	r3, sl
 801fd00:	465a      	mov	r2, fp
 801fd02:	4631      	mov	r1, r6
 801fd04:	4628      	mov	r0, r5
 801fd06:	47b8      	blx	r7
 801fd08:	3001      	adds	r0, #1
 801fd0a:	f43f af49 	beq.w	801fba0 <_printf_float+0x98>
 801fd0e:	f04f 0800 	mov.w	r8, #0
 801fd12:	f104 091a 	add.w	r9, r4, #26
 801fd16:	9b08      	ldr	r3, [sp, #32]
 801fd18:	3b01      	subs	r3, #1
 801fd1a:	4543      	cmp	r3, r8
 801fd1c:	dc09      	bgt.n	801fd32 <_printf_float+0x22a>
 801fd1e:	6823      	ldr	r3, [r4, #0]
 801fd20:	079b      	lsls	r3, r3, #30
 801fd22:	f100 8106 	bmi.w	801ff32 <_printf_float+0x42a>
 801fd26:	68e0      	ldr	r0, [r4, #12]
 801fd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd2a:	4298      	cmp	r0, r3
 801fd2c:	bfb8      	it	lt
 801fd2e:	4618      	movlt	r0, r3
 801fd30:	e738      	b.n	801fba4 <_printf_float+0x9c>
 801fd32:	2301      	movs	r3, #1
 801fd34:	464a      	mov	r2, r9
 801fd36:	4631      	mov	r1, r6
 801fd38:	4628      	mov	r0, r5
 801fd3a:	47b8      	blx	r7
 801fd3c:	3001      	adds	r0, #1
 801fd3e:	f43f af2f 	beq.w	801fba0 <_printf_float+0x98>
 801fd42:	f108 0801 	add.w	r8, r8, #1
 801fd46:	e7e6      	b.n	801fd16 <_printf_float+0x20e>
 801fd48:	9b07      	ldr	r3, [sp, #28]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	dc3a      	bgt.n	801fdc4 <_printf_float+0x2bc>
 801fd4e:	4a1c      	ldr	r2, [pc, #112]	; (801fdc0 <_printf_float+0x2b8>)
 801fd50:	2301      	movs	r3, #1
 801fd52:	4631      	mov	r1, r6
 801fd54:	4628      	mov	r0, r5
 801fd56:	47b8      	blx	r7
 801fd58:	3001      	adds	r0, #1
 801fd5a:	f43f af21 	beq.w	801fba0 <_printf_float+0x98>
 801fd5e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fd62:	4313      	orrs	r3, r2
 801fd64:	d102      	bne.n	801fd6c <_printf_float+0x264>
 801fd66:	6823      	ldr	r3, [r4, #0]
 801fd68:	07d9      	lsls	r1, r3, #31
 801fd6a:	d5d8      	bpl.n	801fd1e <_printf_float+0x216>
 801fd6c:	4653      	mov	r3, sl
 801fd6e:	465a      	mov	r2, fp
 801fd70:	4631      	mov	r1, r6
 801fd72:	4628      	mov	r0, r5
 801fd74:	47b8      	blx	r7
 801fd76:	3001      	adds	r0, #1
 801fd78:	f43f af12 	beq.w	801fba0 <_printf_float+0x98>
 801fd7c:	f04f 0900 	mov.w	r9, #0
 801fd80:	f104 0a1a 	add.w	sl, r4, #26
 801fd84:	9b07      	ldr	r3, [sp, #28]
 801fd86:	425b      	negs	r3, r3
 801fd88:	454b      	cmp	r3, r9
 801fd8a:	dc01      	bgt.n	801fd90 <_printf_float+0x288>
 801fd8c:	9b08      	ldr	r3, [sp, #32]
 801fd8e:	e795      	b.n	801fcbc <_printf_float+0x1b4>
 801fd90:	2301      	movs	r3, #1
 801fd92:	4652      	mov	r2, sl
 801fd94:	4631      	mov	r1, r6
 801fd96:	4628      	mov	r0, r5
 801fd98:	47b8      	blx	r7
 801fd9a:	3001      	adds	r0, #1
 801fd9c:	f43f af00 	beq.w	801fba0 <_printf_float+0x98>
 801fda0:	f109 0901 	add.w	r9, r9, #1
 801fda4:	e7ee      	b.n	801fd84 <_printf_float+0x27c>
 801fda6:	bf00      	nop
 801fda8:	ffffffff 	.word	0xffffffff
 801fdac:	7fefffff 	.word	0x7fefffff
 801fdb0:	08025c6c 	.word	0x08025c6c
 801fdb4:	08025c70 	.word	0x08025c70
 801fdb8:	08025c74 	.word	0x08025c74
 801fdbc:	08025c78 	.word	0x08025c78
 801fdc0:	08025c7c 	.word	0x08025c7c
 801fdc4:	9a08      	ldr	r2, [sp, #32]
 801fdc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fdc8:	429a      	cmp	r2, r3
 801fdca:	bfa8      	it	ge
 801fdcc:	461a      	movge	r2, r3
 801fdce:	2a00      	cmp	r2, #0
 801fdd0:	4691      	mov	r9, r2
 801fdd2:	dc38      	bgt.n	801fe46 <_printf_float+0x33e>
 801fdd4:	2300      	movs	r3, #0
 801fdd6:	9305      	str	r3, [sp, #20]
 801fdd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fddc:	f104 021a 	add.w	r2, r4, #26
 801fde0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fde2:	9905      	ldr	r1, [sp, #20]
 801fde4:	9304      	str	r3, [sp, #16]
 801fde6:	eba3 0309 	sub.w	r3, r3, r9
 801fdea:	428b      	cmp	r3, r1
 801fdec:	dc33      	bgt.n	801fe56 <_printf_float+0x34e>
 801fdee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fdf2:	429a      	cmp	r2, r3
 801fdf4:	db3c      	blt.n	801fe70 <_printf_float+0x368>
 801fdf6:	6823      	ldr	r3, [r4, #0]
 801fdf8:	07da      	lsls	r2, r3, #31
 801fdfa:	d439      	bmi.n	801fe70 <_printf_float+0x368>
 801fdfc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fe00:	eba2 0903 	sub.w	r9, r2, r3
 801fe04:	9b04      	ldr	r3, [sp, #16]
 801fe06:	1ad2      	subs	r2, r2, r3
 801fe08:	4591      	cmp	r9, r2
 801fe0a:	bfa8      	it	ge
 801fe0c:	4691      	movge	r9, r2
 801fe0e:	f1b9 0f00 	cmp.w	r9, #0
 801fe12:	dc35      	bgt.n	801fe80 <_printf_float+0x378>
 801fe14:	f04f 0800 	mov.w	r8, #0
 801fe18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fe1c:	f104 0a1a 	add.w	sl, r4, #26
 801fe20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fe24:	1a9b      	subs	r3, r3, r2
 801fe26:	eba3 0309 	sub.w	r3, r3, r9
 801fe2a:	4543      	cmp	r3, r8
 801fe2c:	f77f af77 	ble.w	801fd1e <_printf_float+0x216>
 801fe30:	2301      	movs	r3, #1
 801fe32:	4652      	mov	r2, sl
 801fe34:	4631      	mov	r1, r6
 801fe36:	4628      	mov	r0, r5
 801fe38:	47b8      	blx	r7
 801fe3a:	3001      	adds	r0, #1
 801fe3c:	f43f aeb0 	beq.w	801fba0 <_printf_float+0x98>
 801fe40:	f108 0801 	add.w	r8, r8, #1
 801fe44:	e7ec      	b.n	801fe20 <_printf_float+0x318>
 801fe46:	4613      	mov	r3, r2
 801fe48:	4631      	mov	r1, r6
 801fe4a:	4642      	mov	r2, r8
 801fe4c:	4628      	mov	r0, r5
 801fe4e:	47b8      	blx	r7
 801fe50:	3001      	adds	r0, #1
 801fe52:	d1bf      	bne.n	801fdd4 <_printf_float+0x2cc>
 801fe54:	e6a4      	b.n	801fba0 <_printf_float+0x98>
 801fe56:	2301      	movs	r3, #1
 801fe58:	4631      	mov	r1, r6
 801fe5a:	4628      	mov	r0, r5
 801fe5c:	9204      	str	r2, [sp, #16]
 801fe5e:	47b8      	blx	r7
 801fe60:	3001      	adds	r0, #1
 801fe62:	f43f ae9d 	beq.w	801fba0 <_printf_float+0x98>
 801fe66:	9b05      	ldr	r3, [sp, #20]
 801fe68:	9a04      	ldr	r2, [sp, #16]
 801fe6a:	3301      	adds	r3, #1
 801fe6c:	9305      	str	r3, [sp, #20]
 801fe6e:	e7b7      	b.n	801fde0 <_printf_float+0x2d8>
 801fe70:	4653      	mov	r3, sl
 801fe72:	465a      	mov	r2, fp
 801fe74:	4631      	mov	r1, r6
 801fe76:	4628      	mov	r0, r5
 801fe78:	47b8      	blx	r7
 801fe7a:	3001      	adds	r0, #1
 801fe7c:	d1be      	bne.n	801fdfc <_printf_float+0x2f4>
 801fe7e:	e68f      	b.n	801fba0 <_printf_float+0x98>
 801fe80:	9a04      	ldr	r2, [sp, #16]
 801fe82:	464b      	mov	r3, r9
 801fe84:	4442      	add	r2, r8
 801fe86:	4631      	mov	r1, r6
 801fe88:	4628      	mov	r0, r5
 801fe8a:	47b8      	blx	r7
 801fe8c:	3001      	adds	r0, #1
 801fe8e:	d1c1      	bne.n	801fe14 <_printf_float+0x30c>
 801fe90:	e686      	b.n	801fba0 <_printf_float+0x98>
 801fe92:	9a08      	ldr	r2, [sp, #32]
 801fe94:	2a01      	cmp	r2, #1
 801fe96:	dc01      	bgt.n	801fe9c <_printf_float+0x394>
 801fe98:	07db      	lsls	r3, r3, #31
 801fe9a:	d537      	bpl.n	801ff0c <_printf_float+0x404>
 801fe9c:	2301      	movs	r3, #1
 801fe9e:	4642      	mov	r2, r8
 801fea0:	4631      	mov	r1, r6
 801fea2:	4628      	mov	r0, r5
 801fea4:	47b8      	blx	r7
 801fea6:	3001      	adds	r0, #1
 801fea8:	f43f ae7a 	beq.w	801fba0 <_printf_float+0x98>
 801feac:	4653      	mov	r3, sl
 801feae:	465a      	mov	r2, fp
 801feb0:	4631      	mov	r1, r6
 801feb2:	4628      	mov	r0, r5
 801feb4:	47b8      	blx	r7
 801feb6:	3001      	adds	r0, #1
 801feb8:	f43f ae72 	beq.w	801fba0 <_printf_float+0x98>
 801febc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fec0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fec8:	9b08      	ldr	r3, [sp, #32]
 801feca:	d01a      	beq.n	801ff02 <_printf_float+0x3fa>
 801fecc:	3b01      	subs	r3, #1
 801fece:	f108 0201 	add.w	r2, r8, #1
 801fed2:	4631      	mov	r1, r6
 801fed4:	4628      	mov	r0, r5
 801fed6:	47b8      	blx	r7
 801fed8:	3001      	adds	r0, #1
 801feda:	d10e      	bne.n	801fefa <_printf_float+0x3f2>
 801fedc:	e660      	b.n	801fba0 <_printf_float+0x98>
 801fede:	2301      	movs	r3, #1
 801fee0:	464a      	mov	r2, r9
 801fee2:	4631      	mov	r1, r6
 801fee4:	4628      	mov	r0, r5
 801fee6:	47b8      	blx	r7
 801fee8:	3001      	adds	r0, #1
 801feea:	f43f ae59 	beq.w	801fba0 <_printf_float+0x98>
 801feee:	f108 0801 	add.w	r8, r8, #1
 801fef2:	9b08      	ldr	r3, [sp, #32]
 801fef4:	3b01      	subs	r3, #1
 801fef6:	4543      	cmp	r3, r8
 801fef8:	dcf1      	bgt.n	801fede <_printf_float+0x3d6>
 801fefa:	9b04      	ldr	r3, [sp, #16]
 801fefc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ff00:	e6dd      	b.n	801fcbe <_printf_float+0x1b6>
 801ff02:	f04f 0800 	mov.w	r8, #0
 801ff06:	f104 091a 	add.w	r9, r4, #26
 801ff0a:	e7f2      	b.n	801fef2 <_printf_float+0x3ea>
 801ff0c:	2301      	movs	r3, #1
 801ff0e:	4642      	mov	r2, r8
 801ff10:	e7df      	b.n	801fed2 <_printf_float+0x3ca>
 801ff12:	2301      	movs	r3, #1
 801ff14:	464a      	mov	r2, r9
 801ff16:	4631      	mov	r1, r6
 801ff18:	4628      	mov	r0, r5
 801ff1a:	47b8      	blx	r7
 801ff1c:	3001      	adds	r0, #1
 801ff1e:	f43f ae3f 	beq.w	801fba0 <_printf_float+0x98>
 801ff22:	f108 0801 	add.w	r8, r8, #1
 801ff26:	68e3      	ldr	r3, [r4, #12]
 801ff28:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ff2a:	1a5b      	subs	r3, r3, r1
 801ff2c:	4543      	cmp	r3, r8
 801ff2e:	dcf0      	bgt.n	801ff12 <_printf_float+0x40a>
 801ff30:	e6f9      	b.n	801fd26 <_printf_float+0x21e>
 801ff32:	f04f 0800 	mov.w	r8, #0
 801ff36:	f104 0919 	add.w	r9, r4, #25
 801ff3a:	e7f4      	b.n	801ff26 <_printf_float+0x41e>

0801ff3c <_printf_common>:
 801ff3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff40:	4616      	mov	r6, r2
 801ff42:	4699      	mov	r9, r3
 801ff44:	688a      	ldr	r2, [r1, #8]
 801ff46:	690b      	ldr	r3, [r1, #16]
 801ff48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ff4c:	4293      	cmp	r3, r2
 801ff4e:	bfb8      	it	lt
 801ff50:	4613      	movlt	r3, r2
 801ff52:	6033      	str	r3, [r6, #0]
 801ff54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ff58:	4607      	mov	r7, r0
 801ff5a:	460c      	mov	r4, r1
 801ff5c:	b10a      	cbz	r2, 801ff62 <_printf_common+0x26>
 801ff5e:	3301      	adds	r3, #1
 801ff60:	6033      	str	r3, [r6, #0]
 801ff62:	6823      	ldr	r3, [r4, #0]
 801ff64:	0699      	lsls	r1, r3, #26
 801ff66:	bf42      	ittt	mi
 801ff68:	6833      	ldrmi	r3, [r6, #0]
 801ff6a:	3302      	addmi	r3, #2
 801ff6c:	6033      	strmi	r3, [r6, #0]
 801ff6e:	6825      	ldr	r5, [r4, #0]
 801ff70:	f015 0506 	ands.w	r5, r5, #6
 801ff74:	d106      	bne.n	801ff84 <_printf_common+0x48>
 801ff76:	f104 0a19 	add.w	sl, r4, #25
 801ff7a:	68e3      	ldr	r3, [r4, #12]
 801ff7c:	6832      	ldr	r2, [r6, #0]
 801ff7e:	1a9b      	subs	r3, r3, r2
 801ff80:	42ab      	cmp	r3, r5
 801ff82:	dc26      	bgt.n	801ffd2 <_printf_common+0x96>
 801ff84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ff88:	1e13      	subs	r3, r2, #0
 801ff8a:	6822      	ldr	r2, [r4, #0]
 801ff8c:	bf18      	it	ne
 801ff8e:	2301      	movne	r3, #1
 801ff90:	0692      	lsls	r2, r2, #26
 801ff92:	d42b      	bmi.n	801ffec <_printf_common+0xb0>
 801ff94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ff98:	4649      	mov	r1, r9
 801ff9a:	4638      	mov	r0, r7
 801ff9c:	47c0      	blx	r8
 801ff9e:	3001      	adds	r0, #1
 801ffa0:	d01e      	beq.n	801ffe0 <_printf_common+0xa4>
 801ffa2:	6823      	ldr	r3, [r4, #0]
 801ffa4:	6922      	ldr	r2, [r4, #16]
 801ffa6:	f003 0306 	and.w	r3, r3, #6
 801ffaa:	2b04      	cmp	r3, #4
 801ffac:	bf02      	ittt	eq
 801ffae:	68e5      	ldreq	r5, [r4, #12]
 801ffb0:	6833      	ldreq	r3, [r6, #0]
 801ffb2:	1aed      	subeq	r5, r5, r3
 801ffb4:	68a3      	ldr	r3, [r4, #8]
 801ffb6:	bf0c      	ite	eq
 801ffb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ffbc:	2500      	movne	r5, #0
 801ffbe:	4293      	cmp	r3, r2
 801ffc0:	bfc4      	itt	gt
 801ffc2:	1a9b      	subgt	r3, r3, r2
 801ffc4:	18ed      	addgt	r5, r5, r3
 801ffc6:	2600      	movs	r6, #0
 801ffc8:	341a      	adds	r4, #26
 801ffca:	42b5      	cmp	r5, r6
 801ffcc:	d11a      	bne.n	8020004 <_printf_common+0xc8>
 801ffce:	2000      	movs	r0, #0
 801ffd0:	e008      	b.n	801ffe4 <_printf_common+0xa8>
 801ffd2:	2301      	movs	r3, #1
 801ffd4:	4652      	mov	r2, sl
 801ffd6:	4649      	mov	r1, r9
 801ffd8:	4638      	mov	r0, r7
 801ffda:	47c0      	blx	r8
 801ffdc:	3001      	adds	r0, #1
 801ffde:	d103      	bne.n	801ffe8 <_printf_common+0xac>
 801ffe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ffe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffe8:	3501      	adds	r5, #1
 801ffea:	e7c6      	b.n	801ff7a <_printf_common+0x3e>
 801ffec:	18e1      	adds	r1, r4, r3
 801ffee:	1c5a      	adds	r2, r3, #1
 801fff0:	2030      	movs	r0, #48	; 0x30
 801fff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fff6:	4422      	add	r2, r4
 801fff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020000:	3302      	adds	r3, #2
 8020002:	e7c7      	b.n	801ff94 <_printf_common+0x58>
 8020004:	2301      	movs	r3, #1
 8020006:	4622      	mov	r2, r4
 8020008:	4649      	mov	r1, r9
 802000a:	4638      	mov	r0, r7
 802000c:	47c0      	blx	r8
 802000e:	3001      	adds	r0, #1
 8020010:	d0e6      	beq.n	801ffe0 <_printf_common+0xa4>
 8020012:	3601      	adds	r6, #1
 8020014:	e7d9      	b.n	801ffca <_printf_common+0x8e>
	...

08020018 <_printf_i>:
 8020018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802001c:	7e0f      	ldrb	r7, [r1, #24]
 802001e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020020:	2f78      	cmp	r7, #120	; 0x78
 8020022:	4691      	mov	r9, r2
 8020024:	4680      	mov	r8, r0
 8020026:	460c      	mov	r4, r1
 8020028:	469a      	mov	sl, r3
 802002a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802002e:	d807      	bhi.n	8020040 <_printf_i+0x28>
 8020030:	2f62      	cmp	r7, #98	; 0x62
 8020032:	d80a      	bhi.n	802004a <_printf_i+0x32>
 8020034:	2f00      	cmp	r7, #0
 8020036:	f000 80d4 	beq.w	80201e2 <_printf_i+0x1ca>
 802003a:	2f58      	cmp	r7, #88	; 0x58
 802003c:	f000 80c0 	beq.w	80201c0 <_printf_i+0x1a8>
 8020040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020048:	e03a      	b.n	80200c0 <_printf_i+0xa8>
 802004a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802004e:	2b15      	cmp	r3, #21
 8020050:	d8f6      	bhi.n	8020040 <_printf_i+0x28>
 8020052:	a101      	add	r1, pc, #4	; (adr r1, 8020058 <_printf_i+0x40>)
 8020054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020058:	080200b1 	.word	0x080200b1
 802005c:	080200c5 	.word	0x080200c5
 8020060:	08020041 	.word	0x08020041
 8020064:	08020041 	.word	0x08020041
 8020068:	08020041 	.word	0x08020041
 802006c:	08020041 	.word	0x08020041
 8020070:	080200c5 	.word	0x080200c5
 8020074:	08020041 	.word	0x08020041
 8020078:	08020041 	.word	0x08020041
 802007c:	08020041 	.word	0x08020041
 8020080:	08020041 	.word	0x08020041
 8020084:	080201c9 	.word	0x080201c9
 8020088:	080200f1 	.word	0x080200f1
 802008c:	08020183 	.word	0x08020183
 8020090:	08020041 	.word	0x08020041
 8020094:	08020041 	.word	0x08020041
 8020098:	080201eb 	.word	0x080201eb
 802009c:	08020041 	.word	0x08020041
 80200a0:	080200f1 	.word	0x080200f1
 80200a4:	08020041 	.word	0x08020041
 80200a8:	08020041 	.word	0x08020041
 80200ac:	0802018b 	.word	0x0802018b
 80200b0:	682b      	ldr	r3, [r5, #0]
 80200b2:	1d1a      	adds	r2, r3, #4
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	602a      	str	r2, [r5, #0]
 80200b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80200bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80200c0:	2301      	movs	r3, #1
 80200c2:	e09f      	b.n	8020204 <_printf_i+0x1ec>
 80200c4:	6820      	ldr	r0, [r4, #0]
 80200c6:	682b      	ldr	r3, [r5, #0]
 80200c8:	0607      	lsls	r7, r0, #24
 80200ca:	f103 0104 	add.w	r1, r3, #4
 80200ce:	6029      	str	r1, [r5, #0]
 80200d0:	d501      	bpl.n	80200d6 <_printf_i+0xbe>
 80200d2:	681e      	ldr	r6, [r3, #0]
 80200d4:	e003      	b.n	80200de <_printf_i+0xc6>
 80200d6:	0646      	lsls	r6, r0, #25
 80200d8:	d5fb      	bpl.n	80200d2 <_printf_i+0xba>
 80200da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80200de:	2e00      	cmp	r6, #0
 80200e0:	da03      	bge.n	80200ea <_printf_i+0xd2>
 80200e2:	232d      	movs	r3, #45	; 0x2d
 80200e4:	4276      	negs	r6, r6
 80200e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80200ea:	485a      	ldr	r0, [pc, #360]	; (8020254 <_printf_i+0x23c>)
 80200ec:	230a      	movs	r3, #10
 80200ee:	e012      	b.n	8020116 <_printf_i+0xfe>
 80200f0:	682b      	ldr	r3, [r5, #0]
 80200f2:	6820      	ldr	r0, [r4, #0]
 80200f4:	1d19      	adds	r1, r3, #4
 80200f6:	6029      	str	r1, [r5, #0]
 80200f8:	0605      	lsls	r5, r0, #24
 80200fa:	d501      	bpl.n	8020100 <_printf_i+0xe8>
 80200fc:	681e      	ldr	r6, [r3, #0]
 80200fe:	e002      	b.n	8020106 <_printf_i+0xee>
 8020100:	0641      	lsls	r1, r0, #25
 8020102:	d5fb      	bpl.n	80200fc <_printf_i+0xe4>
 8020104:	881e      	ldrh	r6, [r3, #0]
 8020106:	4853      	ldr	r0, [pc, #332]	; (8020254 <_printf_i+0x23c>)
 8020108:	2f6f      	cmp	r7, #111	; 0x6f
 802010a:	bf0c      	ite	eq
 802010c:	2308      	moveq	r3, #8
 802010e:	230a      	movne	r3, #10
 8020110:	2100      	movs	r1, #0
 8020112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020116:	6865      	ldr	r5, [r4, #4]
 8020118:	60a5      	str	r5, [r4, #8]
 802011a:	2d00      	cmp	r5, #0
 802011c:	bfa2      	ittt	ge
 802011e:	6821      	ldrge	r1, [r4, #0]
 8020120:	f021 0104 	bicge.w	r1, r1, #4
 8020124:	6021      	strge	r1, [r4, #0]
 8020126:	b90e      	cbnz	r6, 802012c <_printf_i+0x114>
 8020128:	2d00      	cmp	r5, #0
 802012a:	d04b      	beq.n	80201c4 <_printf_i+0x1ac>
 802012c:	4615      	mov	r5, r2
 802012e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020132:	fb03 6711 	mls	r7, r3, r1, r6
 8020136:	5dc7      	ldrb	r7, [r0, r7]
 8020138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802013c:	4637      	mov	r7, r6
 802013e:	42bb      	cmp	r3, r7
 8020140:	460e      	mov	r6, r1
 8020142:	d9f4      	bls.n	802012e <_printf_i+0x116>
 8020144:	2b08      	cmp	r3, #8
 8020146:	d10b      	bne.n	8020160 <_printf_i+0x148>
 8020148:	6823      	ldr	r3, [r4, #0]
 802014a:	07de      	lsls	r6, r3, #31
 802014c:	d508      	bpl.n	8020160 <_printf_i+0x148>
 802014e:	6923      	ldr	r3, [r4, #16]
 8020150:	6861      	ldr	r1, [r4, #4]
 8020152:	4299      	cmp	r1, r3
 8020154:	bfde      	ittt	le
 8020156:	2330      	movle	r3, #48	; 0x30
 8020158:	f805 3c01 	strble.w	r3, [r5, #-1]
 802015c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020160:	1b52      	subs	r2, r2, r5
 8020162:	6122      	str	r2, [r4, #16]
 8020164:	f8cd a000 	str.w	sl, [sp]
 8020168:	464b      	mov	r3, r9
 802016a:	aa03      	add	r2, sp, #12
 802016c:	4621      	mov	r1, r4
 802016e:	4640      	mov	r0, r8
 8020170:	f7ff fee4 	bl	801ff3c <_printf_common>
 8020174:	3001      	adds	r0, #1
 8020176:	d14a      	bne.n	802020e <_printf_i+0x1f6>
 8020178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802017c:	b004      	add	sp, #16
 802017e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020182:	6823      	ldr	r3, [r4, #0]
 8020184:	f043 0320 	orr.w	r3, r3, #32
 8020188:	6023      	str	r3, [r4, #0]
 802018a:	4833      	ldr	r0, [pc, #204]	; (8020258 <_printf_i+0x240>)
 802018c:	2778      	movs	r7, #120	; 0x78
 802018e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020192:	6823      	ldr	r3, [r4, #0]
 8020194:	6829      	ldr	r1, [r5, #0]
 8020196:	061f      	lsls	r7, r3, #24
 8020198:	f851 6b04 	ldr.w	r6, [r1], #4
 802019c:	d402      	bmi.n	80201a4 <_printf_i+0x18c>
 802019e:	065f      	lsls	r7, r3, #25
 80201a0:	bf48      	it	mi
 80201a2:	b2b6      	uxthmi	r6, r6
 80201a4:	07df      	lsls	r7, r3, #31
 80201a6:	bf48      	it	mi
 80201a8:	f043 0320 	orrmi.w	r3, r3, #32
 80201ac:	6029      	str	r1, [r5, #0]
 80201ae:	bf48      	it	mi
 80201b0:	6023      	strmi	r3, [r4, #0]
 80201b2:	b91e      	cbnz	r6, 80201bc <_printf_i+0x1a4>
 80201b4:	6823      	ldr	r3, [r4, #0]
 80201b6:	f023 0320 	bic.w	r3, r3, #32
 80201ba:	6023      	str	r3, [r4, #0]
 80201bc:	2310      	movs	r3, #16
 80201be:	e7a7      	b.n	8020110 <_printf_i+0xf8>
 80201c0:	4824      	ldr	r0, [pc, #144]	; (8020254 <_printf_i+0x23c>)
 80201c2:	e7e4      	b.n	802018e <_printf_i+0x176>
 80201c4:	4615      	mov	r5, r2
 80201c6:	e7bd      	b.n	8020144 <_printf_i+0x12c>
 80201c8:	682b      	ldr	r3, [r5, #0]
 80201ca:	6826      	ldr	r6, [r4, #0]
 80201cc:	6961      	ldr	r1, [r4, #20]
 80201ce:	1d18      	adds	r0, r3, #4
 80201d0:	6028      	str	r0, [r5, #0]
 80201d2:	0635      	lsls	r5, r6, #24
 80201d4:	681b      	ldr	r3, [r3, #0]
 80201d6:	d501      	bpl.n	80201dc <_printf_i+0x1c4>
 80201d8:	6019      	str	r1, [r3, #0]
 80201da:	e002      	b.n	80201e2 <_printf_i+0x1ca>
 80201dc:	0670      	lsls	r0, r6, #25
 80201de:	d5fb      	bpl.n	80201d8 <_printf_i+0x1c0>
 80201e0:	8019      	strh	r1, [r3, #0]
 80201e2:	2300      	movs	r3, #0
 80201e4:	6123      	str	r3, [r4, #16]
 80201e6:	4615      	mov	r5, r2
 80201e8:	e7bc      	b.n	8020164 <_printf_i+0x14c>
 80201ea:	682b      	ldr	r3, [r5, #0]
 80201ec:	1d1a      	adds	r2, r3, #4
 80201ee:	602a      	str	r2, [r5, #0]
 80201f0:	681d      	ldr	r5, [r3, #0]
 80201f2:	6862      	ldr	r2, [r4, #4]
 80201f4:	2100      	movs	r1, #0
 80201f6:	4628      	mov	r0, r5
 80201f8:	f7e0 f832 	bl	8000260 <memchr>
 80201fc:	b108      	cbz	r0, 8020202 <_printf_i+0x1ea>
 80201fe:	1b40      	subs	r0, r0, r5
 8020200:	6060      	str	r0, [r4, #4]
 8020202:	6863      	ldr	r3, [r4, #4]
 8020204:	6123      	str	r3, [r4, #16]
 8020206:	2300      	movs	r3, #0
 8020208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802020c:	e7aa      	b.n	8020164 <_printf_i+0x14c>
 802020e:	6923      	ldr	r3, [r4, #16]
 8020210:	462a      	mov	r2, r5
 8020212:	4649      	mov	r1, r9
 8020214:	4640      	mov	r0, r8
 8020216:	47d0      	blx	sl
 8020218:	3001      	adds	r0, #1
 802021a:	d0ad      	beq.n	8020178 <_printf_i+0x160>
 802021c:	6823      	ldr	r3, [r4, #0]
 802021e:	079b      	lsls	r3, r3, #30
 8020220:	d413      	bmi.n	802024a <_printf_i+0x232>
 8020222:	68e0      	ldr	r0, [r4, #12]
 8020224:	9b03      	ldr	r3, [sp, #12]
 8020226:	4298      	cmp	r0, r3
 8020228:	bfb8      	it	lt
 802022a:	4618      	movlt	r0, r3
 802022c:	e7a6      	b.n	802017c <_printf_i+0x164>
 802022e:	2301      	movs	r3, #1
 8020230:	4632      	mov	r2, r6
 8020232:	4649      	mov	r1, r9
 8020234:	4640      	mov	r0, r8
 8020236:	47d0      	blx	sl
 8020238:	3001      	adds	r0, #1
 802023a:	d09d      	beq.n	8020178 <_printf_i+0x160>
 802023c:	3501      	adds	r5, #1
 802023e:	68e3      	ldr	r3, [r4, #12]
 8020240:	9903      	ldr	r1, [sp, #12]
 8020242:	1a5b      	subs	r3, r3, r1
 8020244:	42ab      	cmp	r3, r5
 8020246:	dcf2      	bgt.n	802022e <_printf_i+0x216>
 8020248:	e7eb      	b.n	8020222 <_printf_i+0x20a>
 802024a:	2500      	movs	r5, #0
 802024c:	f104 0619 	add.w	r6, r4, #25
 8020250:	e7f5      	b.n	802023e <_printf_i+0x226>
 8020252:	bf00      	nop
 8020254:	08025c7e 	.word	0x08025c7e
 8020258:	08025c8f 	.word	0x08025c8f

0802025c <_scanf_float>:
 802025c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020260:	b087      	sub	sp, #28
 8020262:	4617      	mov	r7, r2
 8020264:	9303      	str	r3, [sp, #12]
 8020266:	688b      	ldr	r3, [r1, #8]
 8020268:	1e5a      	subs	r2, r3, #1
 802026a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802026e:	bf83      	ittte	hi
 8020270:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020274:	195b      	addhi	r3, r3, r5
 8020276:	9302      	strhi	r3, [sp, #8]
 8020278:	2300      	movls	r3, #0
 802027a:	bf86      	itte	hi
 802027c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020280:	608b      	strhi	r3, [r1, #8]
 8020282:	9302      	strls	r3, [sp, #8]
 8020284:	680b      	ldr	r3, [r1, #0]
 8020286:	468b      	mov	fp, r1
 8020288:	2500      	movs	r5, #0
 802028a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802028e:	f84b 3b1c 	str.w	r3, [fp], #28
 8020292:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8020296:	4680      	mov	r8, r0
 8020298:	460c      	mov	r4, r1
 802029a:	465e      	mov	r6, fp
 802029c:	46aa      	mov	sl, r5
 802029e:	46a9      	mov	r9, r5
 80202a0:	9501      	str	r5, [sp, #4]
 80202a2:	68a2      	ldr	r2, [r4, #8]
 80202a4:	b152      	cbz	r2, 80202bc <_scanf_float+0x60>
 80202a6:	683b      	ldr	r3, [r7, #0]
 80202a8:	781b      	ldrb	r3, [r3, #0]
 80202aa:	2b4e      	cmp	r3, #78	; 0x4e
 80202ac:	d864      	bhi.n	8020378 <_scanf_float+0x11c>
 80202ae:	2b40      	cmp	r3, #64	; 0x40
 80202b0:	d83c      	bhi.n	802032c <_scanf_float+0xd0>
 80202b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80202b6:	b2c8      	uxtb	r0, r1
 80202b8:	280e      	cmp	r0, #14
 80202ba:	d93a      	bls.n	8020332 <_scanf_float+0xd6>
 80202bc:	f1b9 0f00 	cmp.w	r9, #0
 80202c0:	d003      	beq.n	80202ca <_scanf_float+0x6e>
 80202c2:	6823      	ldr	r3, [r4, #0]
 80202c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80202c8:	6023      	str	r3, [r4, #0]
 80202ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80202ce:	f1ba 0f01 	cmp.w	sl, #1
 80202d2:	f200 8113 	bhi.w	80204fc <_scanf_float+0x2a0>
 80202d6:	455e      	cmp	r6, fp
 80202d8:	f200 8105 	bhi.w	80204e6 <_scanf_float+0x28a>
 80202dc:	2501      	movs	r5, #1
 80202de:	4628      	mov	r0, r5
 80202e0:	b007      	add	sp, #28
 80202e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80202ea:	2a0d      	cmp	r2, #13
 80202ec:	d8e6      	bhi.n	80202bc <_scanf_float+0x60>
 80202ee:	a101      	add	r1, pc, #4	; (adr r1, 80202f4 <_scanf_float+0x98>)
 80202f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80202f4:	08020433 	.word	0x08020433
 80202f8:	080202bd 	.word	0x080202bd
 80202fc:	080202bd 	.word	0x080202bd
 8020300:	080202bd 	.word	0x080202bd
 8020304:	08020493 	.word	0x08020493
 8020308:	0802046b 	.word	0x0802046b
 802030c:	080202bd 	.word	0x080202bd
 8020310:	080202bd 	.word	0x080202bd
 8020314:	08020441 	.word	0x08020441
 8020318:	080202bd 	.word	0x080202bd
 802031c:	080202bd 	.word	0x080202bd
 8020320:	080202bd 	.word	0x080202bd
 8020324:	080202bd 	.word	0x080202bd
 8020328:	080203f9 	.word	0x080203f9
 802032c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020330:	e7db      	b.n	80202ea <_scanf_float+0x8e>
 8020332:	290e      	cmp	r1, #14
 8020334:	d8c2      	bhi.n	80202bc <_scanf_float+0x60>
 8020336:	a001      	add	r0, pc, #4	; (adr r0, 802033c <_scanf_float+0xe0>)
 8020338:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802033c:	080203eb 	.word	0x080203eb
 8020340:	080202bd 	.word	0x080202bd
 8020344:	080203eb 	.word	0x080203eb
 8020348:	0802047f 	.word	0x0802047f
 802034c:	080202bd 	.word	0x080202bd
 8020350:	08020399 	.word	0x08020399
 8020354:	080203d5 	.word	0x080203d5
 8020358:	080203d5 	.word	0x080203d5
 802035c:	080203d5 	.word	0x080203d5
 8020360:	080203d5 	.word	0x080203d5
 8020364:	080203d5 	.word	0x080203d5
 8020368:	080203d5 	.word	0x080203d5
 802036c:	080203d5 	.word	0x080203d5
 8020370:	080203d5 	.word	0x080203d5
 8020374:	080203d5 	.word	0x080203d5
 8020378:	2b6e      	cmp	r3, #110	; 0x6e
 802037a:	d809      	bhi.n	8020390 <_scanf_float+0x134>
 802037c:	2b60      	cmp	r3, #96	; 0x60
 802037e:	d8b2      	bhi.n	80202e6 <_scanf_float+0x8a>
 8020380:	2b54      	cmp	r3, #84	; 0x54
 8020382:	d077      	beq.n	8020474 <_scanf_float+0x218>
 8020384:	2b59      	cmp	r3, #89	; 0x59
 8020386:	d199      	bne.n	80202bc <_scanf_float+0x60>
 8020388:	2d07      	cmp	r5, #7
 802038a:	d197      	bne.n	80202bc <_scanf_float+0x60>
 802038c:	2508      	movs	r5, #8
 802038e:	e029      	b.n	80203e4 <_scanf_float+0x188>
 8020390:	2b74      	cmp	r3, #116	; 0x74
 8020392:	d06f      	beq.n	8020474 <_scanf_float+0x218>
 8020394:	2b79      	cmp	r3, #121	; 0x79
 8020396:	e7f6      	b.n	8020386 <_scanf_float+0x12a>
 8020398:	6821      	ldr	r1, [r4, #0]
 802039a:	05c8      	lsls	r0, r1, #23
 802039c:	d51a      	bpl.n	80203d4 <_scanf_float+0x178>
 802039e:	9b02      	ldr	r3, [sp, #8]
 80203a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80203a4:	6021      	str	r1, [r4, #0]
 80203a6:	f109 0901 	add.w	r9, r9, #1
 80203aa:	b11b      	cbz	r3, 80203b4 <_scanf_float+0x158>
 80203ac:	3b01      	subs	r3, #1
 80203ae:	3201      	adds	r2, #1
 80203b0:	9302      	str	r3, [sp, #8]
 80203b2:	60a2      	str	r2, [r4, #8]
 80203b4:	68a3      	ldr	r3, [r4, #8]
 80203b6:	3b01      	subs	r3, #1
 80203b8:	60a3      	str	r3, [r4, #8]
 80203ba:	6923      	ldr	r3, [r4, #16]
 80203bc:	3301      	adds	r3, #1
 80203be:	6123      	str	r3, [r4, #16]
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	3b01      	subs	r3, #1
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	607b      	str	r3, [r7, #4]
 80203c8:	f340 8084 	ble.w	80204d4 <_scanf_float+0x278>
 80203cc:	683b      	ldr	r3, [r7, #0]
 80203ce:	3301      	adds	r3, #1
 80203d0:	603b      	str	r3, [r7, #0]
 80203d2:	e766      	b.n	80202a2 <_scanf_float+0x46>
 80203d4:	eb1a 0f05 	cmn.w	sl, r5
 80203d8:	f47f af70 	bne.w	80202bc <_scanf_float+0x60>
 80203dc:	6822      	ldr	r2, [r4, #0]
 80203de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80203e2:	6022      	str	r2, [r4, #0]
 80203e4:	f806 3b01 	strb.w	r3, [r6], #1
 80203e8:	e7e4      	b.n	80203b4 <_scanf_float+0x158>
 80203ea:	6822      	ldr	r2, [r4, #0]
 80203ec:	0610      	lsls	r0, r2, #24
 80203ee:	f57f af65 	bpl.w	80202bc <_scanf_float+0x60>
 80203f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80203f6:	e7f4      	b.n	80203e2 <_scanf_float+0x186>
 80203f8:	f1ba 0f00 	cmp.w	sl, #0
 80203fc:	d10e      	bne.n	802041c <_scanf_float+0x1c0>
 80203fe:	f1b9 0f00 	cmp.w	r9, #0
 8020402:	d10e      	bne.n	8020422 <_scanf_float+0x1c6>
 8020404:	6822      	ldr	r2, [r4, #0]
 8020406:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802040a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802040e:	d108      	bne.n	8020422 <_scanf_float+0x1c6>
 8020410:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020414:	6022      	str	r2, [r4, #0]
 8020416:	f04f 0a01 	mov.w	sl, #1
 802041a:	e7e3      	b.n	80203e4 <_scanf_float+0x188>
 802041c:	f1ba 0f02 	cmp.w	sl, #2
 8020420:	d055      	beq.n	80204ce <_scanf_float+0x272>
 8020422:	2d01      	cmp	r5, #1
 8020424:	d002      	beq.n	802042c <_scanf_float+0x1d0>
 8020426:	2d04      	cmp	r5, #4
 8020428:	f47f af48 	bne.w	80202bc <_scanf_float+0x60>
 802042c:	3501      	adds	r5, #1
 802042e:	b2ed      	uxtb	r5, r5
 8020430:	e7d8      	b.n	80203e4 <_scanf_float+0x188>
 8020432:	f1ba 0f01 	cmp.w	sl, #1
 8020436:	f47f af41 	bne.w	80202bc <_scanf_float+0x60>
 802043a:	f04f 0a02 	mov.w	sl, #2
 802043e:	e7d1      	b.n	80203e4 <_scanf_float+0x188>
 8020440:	b97d      	cbnz	r5, 8020462 <_scanf_float+0x206>
 8020442:	f1b9 0f00 	cmp.w	r9, #0
 8020446:	f47f af3c 	bne.w	80202c2 <_scanf_float+0x66>
 802044a:	6822      	ldr	r2, [r4, #0]
 802044c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020450:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020454:	f47f af39 	bne.w	80202ca <_scanf_float+0x6e>
 8020458:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802045c:	6022      	str	r2, [r4, #0]
 802045e:	2501      	movs	r5, #1
 8020460:	e7c0      	b.n	80203e4 <_scanf_float+0x188>
 8020462:	2d03      	cmp	r5, #3
 8020464:	d0e2      	beq.n	802042c <_scanf_float+0x1d0>
 8020466:	2d05      	cmp	r5, #5
 8020468:	e7de      	b.n	8020428 <_scanf_float+0x1cc>
 802046a:	2d02      	cmp	r5, #2
 802046c:	f47f af26 	bne.w	80202bc <_scanf_float+0x60>
 8020470:	2503      	movs	r5, #3
 8020472:	e7b7      	b.n	80203e4 <_scanf_float+0x188>
 8020474:	2d06      	cmp	r5, #6
 8020476:	f47f af21 	bne.w	80202bc <_scanf_float+0x60>
 802047a:	2507      	movs	r5, #7
 802047c:	e7b2      	b.n	80203e4 <_scanf_float+0x188>
 802047e:	6822      	ldr	r2, [r4, #0]
 8020480:	0591      	lsls	r1, r2, #22
 8020482:	f57f af1b 	bpl.w	80202bc <_scanf_float+0x60>
 8020486:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802048a:	6022      	str	r2, [r4, #0]
 802048c:	f8cd 9004 	str.w	r9, [sp, #4]
 8020490:	e7a8      	b.n	80203e4 <_scanf_float+0x188>
 8020492:	6822      	ldr	r2, [r4, #0]
 8020494:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020498:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802049c:	d006      	beq.n	80204ac <_scanf_float+0x250>
 802049e:	0550      	lsls	r0, r2, #21
 80204a0:	f57f af0c 	bpl.w	80202bc <_scanf_float+0x60>
 80204a4:	f1b9 0f00 	cmp.w	r9, #0
 80204a8:	f43f af0f 	beq.w	80202ca <_scanf_float+0x6e>
 80204ac:	0591      	lsls	r1, r2, #22
 80204ae:	bf58      	it	pl
 80204b0:	9901      	ldrpl	r1, [sp, #4]
 80204b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80204b6:	bf58      	it	pl
 80204b8:	eba9 0101 	subpl.w	r1, r9, r1
 80204bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80204c0:	bf58      	it	pl
 80204c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80204c6:	6022      	str	r2, [r4, #0]
 80204c8:	f04f 0900 	mov.w	r9, #0
 80204cc:	e78a      	b.n	80203e4 <_scanf_float+0x188>
 80204ce:	f04f 0a03 	mov.w	sl, #3
 80204d2:	e787      	b.n	80203e4 <_scanf_float+0x188>
 80204d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80204d8:	4639      	mov	r1, r7
 80204da:	4640      	mov	r0, r8
 80204dc:	4798      	blx	r3
 80204de:	2800      	cmp	r0, #0
 80204e0:	f43f aedf 	beq.w	80202a2 <_scanf_float+0x46>
 80204e4:	e6ea      	b.n	80202bc <_scanf_float+0x60>
 80204e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80204ee:	463a      	mov	r2, r7
 80204f0:	4640      	mov	r0, r8
 80204f2:	4798      	blx	r3
 80204f4:	6923      	ldr	r3, [r4, #16]
 80204f6:	3b01      	subs	r3, #1
 80204f8:	6123      	str	r3, [r4, #16]
 80204fa:	e6ec      	b.n	80202d6 <_scanf_float+0x7a>
 80204fc:	1e6b      	subs	r3, r5, #1
 80204fe:	2b06      	cmp	r3, #6
 8020500:	d825      	bhi.n	802054e <_scanf_float+0x2f2>
 8020502:	2d02      	cmp	r5, #2
 8020504:	d836      	bhi.n	8020574 <_scanf_float+0x318>
 8020506:	455e      	cmp	r6, fp
 8020508:	f67f aee8 	bls.w	80202dc <_scanf_float+0x80>
 802050c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020510:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020514:	463a      	mov	r2, r7
 8020516:	4640      	mov	r0, r8
 8020518:	4798      	blx	r3
 802051a:	6923      	ldr	r3, [r4, #16]
 802051c:	3b01      	subs	r3, #1
 802051e:	6123      	str	r3, [r4, #16]
 8020520:	e7f1      	b.n	8020506 <_scanf_float+0x2aa>
 8020522:	9802      	ldr	r0, [sp, #8]
 8020524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020528:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802052c:	9002      	str	r0, [sp, #8]
 802052e:	463a      	mov	r2, r7
 8020530:	4640      	mov	r0, r8
 8020532:	4798      	blx	r3
 8020534:	6923      	ldr	r3, [r4, #16]
 8020536:	3b01      	subs	r3, #1
 8020538:	6123      	str	r3, [r4, #16]
 802053a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802053e:	fa5f fa8a 	uxtb.w	sl, sl
 8020542:	f1ba 0f02 	cmp.w	sl, #2
 8020546:	d1ec      	bne.n	8020522 <_scanf_float+0x2c6>
 8020548:	3d03      	subs	r5, #3
 802054a:	b2ed      	uxtb	r5, r5
 802054c:	1b76      	subs	r6, r6, r5
 802054e:	6823      	ldr	r3, [r4, #0]
 8020550:	05da      	lsls	r2, r3, #23
 8020552:	d52f      	bpl.n	80205b4 <_scanf_float+0x358>
 8020554:	055b      	lsls	r3, r3, #21
 8020556:	d510      	bpl.n	802057a <_scanf_float+0x31e>
 8020558:	455e      	cmp	r6, fp
 802055a:	f67f aebf 	bls.w	80202dc <_scanf_float+0x80>
 802055e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020566:	463a      	mov	r2, r7
 8020568:	4640      	mov	r0, r8
 802056a:	4798      	blx	r3
 802056c:	6923      	ldr	r3, [r4, #16]
 802056e:	3b01      	subs	r3, #1
 8020570:	6123      	str	r3, [r4, #16]
 8020572:	e7f1      	b.n	8020558 <_scanf_float+0x2fc>
 8020574:	46aa      	mov	sl, r5
 8020576:	9602      	str	r6, [sp, #8]
 8020578:	e7df      	b.n	802053a <_scanf_float+0x2de>
 802057a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802057e:	6923      	ldr	r3, [r4, #16]
 8020580:	2965      	cmp	r1, #101	; 0x65
 8020582:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8020586:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 802058a:	6123      	str	r3, [r4, #16]
 802058c:	d00c      	beq.n	80205a8 <_scanf_float+0x34c>
 802058e:	2945      	cmp	r1, #69	; 0x45
 8020590:	d00a      	beq.n	80205a8 <_scanf_float+0x34c>
 8020592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020596:	463a      	mov	r2, r7
 8020598:	4640      	mov	r0, r8
 802059a:	4798      	blx	r3
 802059c:	6923      	ldr	r3, [r4, #16]
 802059e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80205a2:	3b01      	subs	r3, #1
 80205a4:	1eb5      	subs	r5, r6, #2
 80205a6:	6123      	str	r3, [r4, #16]
 80205a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80205ac:	463a      	mov	r2, r7
 80205ae:	4640      	mov	r0, r8
 80205b0:	4798      	blx	r3
 80205b2:	462e      	mov	r6, r5
 80205b4:	6825      	ldr	r5, [r4, #0]
 80205b6:	f015 0510 	ands.w	r5, r5, #16
 80205ba:	d14d      	bne.n	8020658 <_scanf_float+0x3fc>
 80205bc:	7035      	strb	r5, [r6, #0]
 80205be:	6823      	ldr	r3, [r4, #0]
 80205c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80205c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80205c8:	d11a      	bne.n	8020600 <_scanf_float+0x3a4>
 80205ca:	9b01      	ldr	r3, [sp, #4]
 80205cc:	454b      	cmp	r3, r9
 80205ce:	eba3 0209 	sub.w	r2, r3, r9
 80205d2:	d122      	bne.n	802061a <_scanf_float+0x3be>
 80205d4:	2200      	movs	r2, #0
 80205d6:	4659      	mov	r1, fp
 80205d8:	4640      	mov	r0, r8
 80205da:	f002 fdd7 	bl	802318c <_strtod_r>
 80205de:	9b03      	ldr	r3, [sp, #12]
 80205e0:	6821      	ldr	r1, [r4, #0]
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	f011 0f02 	tst.w	r1, #2
 80205e8:	f103 0204 	add.w	r2, r3, #4
 80205ec:	d020      	beq.n	8020630 <_scanf_float+0x3d4>
 80205ee:	9903      	ldr	r1, [sp, #12]
 80205f0:	600a      	str	r2, [r1, #0]
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	ed83 0b00 	vstr	d0, [r3]
 80205f8:	68e3      	ldr	r3, [r4, #12]
 80205fa:	3301      	adds	r3, #1
 80205fc:	60e3      	str	r3, [r4, #12]
 80205fe:	e66e      	b.n	80202de <_scanf_float+0x82>
 8020600:	9b04      	ldr	r3, [sp, #16]
 8020602:	2b00      	cmp	r3, #0
 8020604:	d0e6      	beq.n	80205d4 <_scanf_float+0x378>
 8020606:	9905      	ldr	r1, [sp, #20]
 8020608:	230a      	movs	r3, #10
 802060a:	462a      	mov	r2, r5
 802060c:	3101      	adds	r1, #1
 802060e:	4640      	mov	r0, r8
 8020610:	f002 fe44 	bl	802329c <_strtol_r>
 8020614:	9b04      	ldr	r3, [sp, #16]
 8020616:	9e05      	ldr	r6, [sp, #20]
 8020618:	1ac2      	subs	r2, r0, r3
 802061a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802061e:	429e      	cmp	r6, r3
 8020620:	bf28      	it	cs
 8020622:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020626:	490d      	ldr	r1, [pc, #52]	; (802065c <_scanf_float+0x400>)
 8020628:	4630      	mov	r0, r6
 802062a:	f000 fa87 	bl	8020b3c <siprintf>
 802062e:	e7d1      	b.n	80205d4 <_scanf_float+0x378>
 8020630:	f011 0f04 	tst.w	r1, #4
 8020634:	9903      	ldr	r1, [sp, #12]
 8020636:	600a      	str	r2, [r1, #0]
 8020638:	d1db      	bne.n	80205f2 <_scanf_float+0x396>
 802063a:	eeb4 0b40 	vcmp.f64	d0, d0
 802063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020642:	681e      	ldr	r6, [r3, #0]
 8020644:	d705      	bvc.n	8020652 <_scanf_float+0x3f6>
 8020646:	4806      	ldr	r0, [pc, #24]	; (8020660 <_scanf_float+0x404>)
 8020648:	f000 fcb0 	bl	8020fac <nanf>
 802064c:	ed86 0a00 	vstr	s0, [r6]
 8020650:	e7d2      	b.n	80205f8 <_scanf_float+0x39c>
 8020652:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020656:	e7f9      	b.n	802064c <_scanf_float+0x3f0>
 8020658:	2500      	movs	r5, #0
 802065a:	e640      	b.n	80202de <_scanf_float+0x82>
 802065c:	08025ca0 	.word	0x08025ca0
 8020660:	08025ce0 	.word	0x08025ce0

08020664 <std>:
 8020664:	2300      	movs	r3, #0
 8020666:	b510      	push	{r4, lr}
 8020668:	4604      	mov	r4, r0
 802066a:	e9c0 3300 	strd	r3, r3, [r0]
 802066e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020672:	6083      	str	r3, [r0, #8]
 8020674:	8181      	strh	r1, [r0, #12]
 8020676:	6643      	str	r3, [r0, #100]	; 0x64
 8020678:	81c2      	strh	r2, [r0, #14]
 802067a:	6183      	str	r3, [r0, #24]
 802067c:	4619      	mov	r1, r3
 802067e:	2208      	movs	r2, #8
 8020680:	305c      	adds	r0, #92	; 0x5c
 8020682:	f000 fbb7 	bl	8020df4 <memset>
 8020686:	4b0d      	ldr	r3, [pc, #52]	; (80206bc <std+0x58>)
 8020688:	6263      	str	r3, [r4, #36]	; 0x24
 802068a:	4b0d      	ldr	r3, [pc, #52]	; (80206c0 <std+0x5c>)
 802068c:	62a3      	str	r3, [r4, #40]	; 0x28
 802068e:	4b0d      	ldr	r3, [pc, #52]	; (80206c4 <std+0x60>)
 8020690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020692:	4b0d      	ldr	r3, [pc, #52]	; (80206c8 <std+0x64>)
 8020694:	6323      	str	r3, [r4, #48]	; 0x30
 8020696:	4b0d      	ldr	r3, [pc, #52]	; (80206cc <std+0x68>)
 8020698:	6224      	str	r4, [r4, #32]
 802069a:	429c      	cmp	r4, r3
 802069c:	d006      	beq.n	80206ac <std+0x48>
 802069e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80206a2:	4294      	cmp	r4, r2
 80206a4:	d002      	beq.n	80206ac <std+0x48>
 80206a6:	33d0      	adds	r3, #208	; 0xd0
 80206a8:	429c      	cmp	r4, r3
 80206aa:	d105      	bne.n	80206b8 <std+0x54>
 80206ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80206b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206b4:	f000 bc60 	b.w	8020f78 <__retarget_lock_init_recursive>
 80206b8:	bd10      	pop	{r4, pc}
 80206ba:	bf00      	nop
 80206bc:	08020b7d 	.word	0x08020b7d
 80206c0:	08020b9f 	.word	0x08020b9f
 80206c4:	08020bd7 	.word	0x08020bd7
 80206c8:	08020bfb 	.word	0x08020bfb
 80206cc:	20016ecc 	.word	0x20016ecc

080206d0 <stdio_exit_handler>:
 80206d0:	4a02      	ldr	r2, [pc, #8]	; (80206dc <stdio_exit_handler+0xc>)
 80206d2:	4903      	ldr	r1, [pc, #12]	; (80206e0 <stdio_exit_handler+0x10>)
 80206d4:	4803      	ldr	r0, [pc, #12]	; (80206e4 <stdio_exit_handler+0x14>)
 80206d6:	f000 b869 	b.w	80207ac <_fwalk_sglue>
 80206da:	bf00      	nop
 80206dc:	20000944 	.word	0x20000944
 80206e0:	080238e5 	.word	0x080238e5
 80206e4:	20000950 	.word	0x20000950

080206e8 <cleanup_stdio>:
 80206e8:	6841      	ldr	r1, [r0, #4]
 80206ea:	4b0c      	ldr	r3, [pc, #48]	; (802071c <cleanup_stdio+0x34>)
 80206ec:	4299      	cmp	r1, r3
 80206ee:	b510      	push	{r4, lr}
 80206f0:	4604      	mov	r4, r0
 80206f2:	d001      	beq.n	80206f8 <cleanup_stdio+0x10>
 80206f4:	f003 f8f6 	bl	80238e4 <_fflush_r>
 80206f8:	68a1      	ldr	r1, [r4, #8]
 80206fa:	4b09      	ldr	r3, [pc, #36]	; (8020720 <cleanup_stdio+0x38>)
 80206fc:	4299      	cmp	r1, r3
 80206fe:	d002      	beq.n	8020706 <cleanup_stdio+0x1e>
 8020700:	4620      	mov	r0, r4
 8020702:	f003 f8ef 	bl	80238e4 <_fflush_r>
 8020706:	68e1      	ldr	r1, [r4, #12]
 8020708:	4b06      	ldr	r3, [pc, #24]	; (8020724 <cleanup_stdio+0x3c>)
 802070a:	4299      	cmp	r1, r3
 802070c:	d004      	beq.n	8020718 <cleanup_stdio+0x30>
 802070e:	4620      	mov	r0, r4
 8020710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020714:	f003 b8e6 	b.w	80238e4 <_fflush_r>
 8020718:	bd10      	pop	{r4, pc}
 802071a:	bf00      	nop
 802071c:	20016ecc 	.word	0x20016ecc
 8020720:	20016f34 	.word	0x20016f34
 8020724:	20016f9c 	.word	0x20016f9c

08020728 <global_stdio_init.part.0>:
 8020728:	b510      	push	{r4, lr}
 802072a:	4b0b      	ldr	r3, [pc, #44]	; (8020758 <global_stdio_init.part.0+0x30>)
 802072c:	4c0b      	ldr	r4, [pc, #44]	; (802075c <global_stdio_init.part.0+0x34>)
 802072e:	4a0c      	ldr	r2, [pc, #48]	; (8020760 <global_stdio_init.part.0+0x38>)
 8020730:	601a      	str	r2, [r3, #0]
 8020732:	4620      	mov	r0, r4
 8020734:	2200      	movs	r2, #0
 8020736:	2104      	movs	r1, #4
 8020738:	f7ff ff94 	bl	8020664 <std>
 802073c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020740:	2201      	movs	r2, #1
 8020742:	2109      	movs	r1, #9
 8020744:	f7ff ff8e 	bl	8020664 <std>
 8020748:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802074c:	2202      	movs	r2, #2
 802074e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020752:	2112      	movs	r1, #18
 8020754:	f7ff bf86 	b.w	8020664 <std>
 8020758:	20017004 	.word	0x20017004
 802075c:	20016ecc 	.word	0x20016ecc
 8020760:	080206d1 	.word	0x080206d1

08020764 <__sfp_lock_acquire>:
 8020764:	4801      	ldr	r0, [pc, #4]	; (802076c <__sfp_lock_acquire+0x8>)
 8020766:	f000 bc08 	b.w	8020f7a <__retarget_lock_acquire_recursive>
 802076a:	bf00      	nop
 802076c:	2001700e 	.word	0x2001700e

08020770 <__sfp_lock_release>:
 8020770:	4801      	ldr	r0, [pc, #4]	; (8020778 <__sfp_lock_release+0x8>)
 8020772:	f000 bc03 	b.w	8020f7c <__retarget_lock_release_recursive>
 8020776:	bf00      	nop
 8020778:	2001700e 	.word	0x2001700e

0802077c <__sinit>:
 802077c:	b510      	push	{r4, lr}
 802077e:	4604      	mov	r4, r0
 8020780:	f7ff fff0 	bl	8020764 <__sfp_lock_acquire>
 8020784:	6a23      	ldr	r3, [r4, #32]
 8020786:	b11b      	cbz	r3, 8020790 <__sinit+0x14>
 8020788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802078c:	f7ff bff0 	b.w	8020770 <__sfp_lock_release>
 8020790:	4b04      	ldr	r3, [pc, #16]	; (80207a4 <__sinit+0x28>)
 8020792:	6223      	str	r3, [r4, #32]
 8020794:	4b04      	ldr	r3, [pc, #16]	; (80207a8 <__sinit+0x2c>)
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	2b00      	cmp	r3, #0
 802079a:	d1f5      	bne.n	8020788 <__sinit+0xc>
 802079c:	f7ff ffc4 	bl	8020728 <global_stdio_init.part.0>
 80207a0:	e7f2      	b.n	8020788 <__sinit+0xc>
 80207a2:	bf00      	nop
 80207a4:	080206e9 	.word	0x080206e9
 80207a8:	20017004 	.word	0x20017004

080207ac <_fwalk_sglue>:
 80207ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207b0:	4607      	mov	r7, r0
 80207b2:	4688      	mov	r8, r1
 80207b4:	4614      	mov	r4, r2
 80207b6:	2600      	movs	r6, #0
 80207b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80207bc:	f1b9 0901 	subs.w	r9, r9, #1
 80207c0:	d505      	bpl.n	80207ce <_fwalk_sglue+0x22>
 80207c2:	6824      	ldr	r4, [r4, #0]
 80207c4:	2c00      	cmp	r4, #0
 80207c6:	d1f7      	bne.n	80207b8 <_fwalk_sglue+0xc>
 80207c8:	4630      	mov	r0, r6
 80207ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207ce:	89ab      	ldrh	r3, [r5, #12]
 80207d0:	2b01      	cmp	r3, #1
 80207d2:	d907      	bls.n	80207e4 <_fwalk_sglue+0x38>
 80207d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80207d8:	3301      	adds	r3, #1
 80207da:	d003      	beq.n	80207e4 <_fwalk_sglue+0x38>
 80207dc:	4629      	mov	r1, r5
 80207de:	4638      	mov	r0, r7
 80207e0:	47c0      	blx	r8
 80207e2:	4306      	orrs	r6, r0
 80207e4:	3568      	adds	r5, #104	; 0x68
 80207e6:	e7e9      	b.n	80207bc <_fwalk_sglue+0x10>

080207e8 <_fwrite_r>:
 80207e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207ec:	9c08      	ldr	r4, [sp, #32]
 80207ee:	468a      	mov	sl, r1
 80207f0:	4690      	mov	r8, r2
 80207f2:	fb02 f903 	mul.w	r9, r2, r3
 80207f6:	4606      	mov	r6, r0
 80207f8:	b118      	cbz	r0, 8020802 <_fwrite_r+0x1a>
 80207fa:	6a03      	ldr	r3, [r0, #32]
 80207fc:	b90b      	cbnz	r3, 8020802 <_fwrite_r+0x1a>
 80207fe:	f7ff ffbd 	bl	802077c <__sinit>
 8020802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020804:	07dd      	lsls	r5, r3, #31
 8020806:	d405      	bmi.n	8020814 <_fwrite_r+0x2c>
 8020808:	89a3      	ldrh	r3, [r4, #12]
 802080a:	0598      	lsls	r0, r3, #22
 802080c:	d402      	bmi.n	8020814 <_fwrite_r+0x2c>
 802080e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020810:	f000 fbb3 	bl	8020f7a <__retarget_lock_acquire_recursive>
 8020814:	89a3      	ldrh	r3, [r4, #12]
 8020816:	0719      	lsls	r1, r3, #28
 8020818:	d516      	bpl.n	8020848 <_fwrite_r+0x60>
 802081a:	6923      	ldr	r3, [r4, #16]
 802081c:	b1a3      	cbz	r3, 8020848 <_fwrite_r+0x60>
 802081e:	2500      	movs	r5, #0
 8020820:	454d      	cmp	r5, r9
 8020822:	d01f      	beq.n	8020864 <_fwrite_r+0x7c>
 8020824:	68a7      	ldr	r7, [r4, #8]
 8020826:	f81a 1005 	ldrb.w	r1, [sl, r5]
 802082a:	3f01      	subs	r7, #1
 802082c:	2f00      	cmp	r7, #0
 802082e:	60a7      	str	r7, [r4, #8]
 8020830:	da04      	bge.n	802083c <_fwrite_r+0x54>
 8020832:	69a3      	ldr	r3, [r4, #24]
 8020834:	429f      	cmp	r7, r3
 8020836:	db0f      	blt.n	8020858 <_fwrite_r+0x70>
 8020838:	290a      	cmp	r1, #10
 802083a:	d00d      	beq.n	8020858 <_fwrite_r+0x70>
 802083c:	6823      	ldr	r3, [r4, #0]
 802083e:	1c5a      	adds	r2, r3, #1
 8020840:	6022      	str	r2, [r4, #0]
 8020842:	7019      	strb	r1, [r3, #0]
 8020844:	3501      	adds	r5, #1
 8020846:	e7eb      	b.n	8020820 <_fwrite_r+0x38>
 8020848:	4621      	mov	r1, r4
 802084a:	4630      	mov	r0, r6
 802084c:	f000 fa50 	bl	8020cf0 <__swsetup_r>
 8020850:	2800      	cmp	r0, #0
 8020852:	d0e4      	beq.n	802081e <_fwrite_r+0x36>
 8020854:	2500      	movs	r5, #0
 8020856:	e005      	b.n	8020864 <_fwrite_r+0x7c>
 8020858:	4622      	mov	r2, r4
 802085a:	4630      	mov	r0, r6
 802085c:	f000 fa0a 	bl	8020c74 <__swbuf_r>
 8020860:	3001      	adds	r0, #1
 8020862:	d1ef      	bne.n	8020844 <_fwrite_r+0x5c>
 8020864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020866:	07da      	lsls	r2, r3, #31
 8020868:	d405      	bmi.n	8020876 <_fwrite_r+0x8e>
 802086a:	89a3      	ldrh	r3, [r4, #12]
 802086c:	059b      	lsls	r3, r3, #22
 802086e:	d402      	bmi.n	8020876 <_fwrite_r+0x8e>
 8020870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020872:	f000 fb83 	bl	8020f7c <__retarget_lock_release_recursive>
 8020876:	fbb5 f0f8 	udiv	r0, r5, r8
 802087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020880 <fwrite>:
 8020880:	b507      	push	{r0, r1, r2, lr}
 8020882:	9300      	str	r3, [sp, #0]
 8020884:	4613      	mov	r3, r2
 8020886:	460a      	mov	r2, r1
 8020888:	4601      	mov	r1, r0
 802088a:	4803      	ldr	r0, [pc, #12]	; (8020898 <fwrite+0x18>)
 802088c:	6800      	ldr	r0, [r0, #0]
 802088e:	f7ff ffab 	bl	80207e8 <_fwrite_r>
 8020892:	b003      	add	sp, #12
 8020894:	f85d fb04 	ldr.w	pc, [sp], #4
 8020898:	2000099c 	.word	0x2000099c

0802089c <iprintf>:
 802089c:	b40f      	push	{r0, r1, r2, r3}
 802089e:	b507      	push	{r0, r1, r2, lr}
 80208a0:	4906      	ldr	r1, [pc, #24]	; (80208bc <iprintf+0x20>)
 80208a2:	ab04      	add	r3, sp, #16
 80208a4:	6808      	ldr	r0, [r1, #0]
 80208a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80208aa:	6881      	ldr	r1, [r0, #8]
 80208ac:	9301      	str	r3, [sp, #4]
 80208ae:	f002 fe79 	bl	80235a4 <_vfiprintf_r>
 80208b2:	b003      	add	sp, #12
 80208b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80208b8:	b004      	add	sp, #16
 80208ba:	4770      	bx	lr
 80208bc:	2000099c 	.word	0x2000099c

080208c0 <_puts_r>:
 80208c0:	6a03      	ldr	r3, [r0, #32]
 80208c2:	b570      	push	{r4, r5, r6, lr}
 80208c4:	6884      	ldr	r4, [r0, #8]
 80208c6:	4605      	mov	r5, r0
 80208c8:	460e      	mov	r6, r1
 80208ca:	b90b      	cbnz	r3, 80208d0 <_puts_r+0x10>
 80208cc:	f7ff ff56 	bl	802077c <__sinit>
 80208d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80208d2:	07db      	lsls	r3, r3, #31
 80208d4:	d405      	bmi.n	80208e2 <_puts_r+0x22>
 80208d6:	89a3      	ldrh	r3, [r4, #12]
 80208d8:	0598      	lsls	r0, r3, #22
 80208da:	d402      	bmi.n	80208e2 <_puts_r+0x22>
 80208dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208de:	f000 fb4c 	bl	8020f7a <__retarget_lock_acquire_recursive>
 80208e2:	89a3      	ldrh	r3, [r4, #12]
 80208e4:	0719      	lsls	r1, r3, #28
 80208e6:	d513      	bpl.n	8020910 <_puts_r+0x50>
 80208e8:	6923      	ldr	r3, [r4, #16]
 80208ea:	b18b      	cbz	r3, 8020910 <_puts_r+0x50>
 80208ec:	3e01      	subs	r6, #1
 80208ee:	68a3      	ldr	r3, [r4, #8]
 80208f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80208f4:	3b01      	subs	r3, #1
 80208f6:	60a3      	str	r3, [r4, #8]
 80208f8:	b9e9      	cbnz	r1, 8020936 <_puts_r+0x76>
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	da2e      	bge.n	802095c <_puts_r+0x9c>
 80208fe:	4622      	mov	r2, r4
 8020900:	210a      	movs	r1, #10
 8020902:	4628      	mov	r0, r5
 8020904:	f000 f9b6 	bl	8020c74 <__swbuf_r>
 8020908:	3001      	adds	r0, #1
 802090a:	d007      	beq.n	802091c <_puts_r+0x5c>
 802090c:	250a      	movs	r5, #10
 802090e:	e007      	b.n	8020920 <_puts_r+0x60>
 8020910:	4621      	mov	r1, r4
 8020912:	4628      	mov	r0, r5
 8020914:	f000 f9ec 	bl	8020cf0 <__swsetup_r>
 8020918:	2800      	cmp	r0, #0
 802091a:	d0e7      	beq.n	80208ec <_puts_r+0x2c>
 802091c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020922:	07da      	lsls	r2, r3, #31
 8020924:	d405      	bmi.n	8020932 <_puts_r+0x72>
 8020926:	89a3      	ldrh	r3, [r4, #12]
 8020928:	059b      	lsls	r3, r3, #22
 802092a:	d402      	bmi.n	8020932 <_puts_r+0x72>
 802092c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802092e:	f000 fb25 	bl	8020f7c <__retarget_lock_release_recursive>
 8020932:	4628      	mov	r0, r5
 8020934:	bd70      	pop	{r4, r5, r6, pc}
 8020936:	2b00      	cmp	r3, #0
 8020938:	da04      	bge.n	8020944 <_puts_r+0x84>
 802093a:	69a2      	ldr	r2, [r4, #24]
 802093c:	429a      	cmp	r2, r3
 802093e:	dc06      	bgt.n	802094e <_puts_r+0x8e>
 8020940:	290a      	cmp	r1, #10
 8020942:	d004      	beq.n	802094e <_puts_r+0x8e>
 8020944:	6823      	ldr	r3, [r4, #0]
 8020946:	1c5a      	adds	r2, r3, #1
 8020948:	6022      	str	r2, [r4, #0]
 802094a:	7019      	strb	r1, [r3, #0]
 802094c:	e7cf      	b.n	80208ee <_puts_r+0x2e>
 802094e:	4622      	mov	r2, r4
 8020950:	4628      	mov	r0, r5
 8020952:	f000 f98f 	bl	8020c74 <__swbuf_r>
 8020956:	3001      	adds	r0, #1
 8020958:	d1c9      	bne.n	80208ee <_puts_r+0x2e>
 802095a:	e7df      	b.n	802091c <_puts_r+0x5c>
 802095c:	6823      	ldr	r3, [r4, #0]
 802095e:	250a      	movs	r5, #10
 8020960:	1c5a      	adds	r2, r3, #1
 8020962:	6022      	str	r2, [r4, #0]
 8020964:	701d      	strb	r5, [r3, #0]
 8020966:	e7db      	b.n	8020920 <_puts_r+0x60>

08020968 <puts>:
 8020968:	4b02      	ldr	r3, [pc, #8]	; (8020974 <puts+0xc>)
 802096a:	4601      	mov	r1, r0
 802096c:	6818      	ldr	r0, [r3, #0]
 802096e:	f7ff bfa7 	b.w	80208c0 <_puts_r>
 8020972:	bf00      	nop
 8020974:	2000099c 	.word	0x2000099c

08020978 <setvbuf>:
 8020978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802097c:	461d      	mov	r5, r3
 802097e:	4b54      	ldr	r3, [pc, #336]	; (8020ad0 <setvbuf+0x158>)
 8020980:	681f      	ldr	r7, [r3, #0]
 8020982:	4604      	mov	r4, r0
 8020984:	460e      	mov	r6, r1
 8020986:	4690      	mov	r8, r2
 8020988:	b127      	cbz	r7, 8020994 <setvbuf+0x1c>
 802098a:	6a3b      	ldr	r3, [r7, #32]
 802098c:	b913      	cbnz	r3, 8020994 <setvbuf+0x1c>
 802098e:	4638      	mov	r0, r7
 8020990:	f7ff fef4 	bl	802077c <__sinit>
 8020994:	f1b8 0f02 	cmp.w	r8, #2
 8020998:	d006      	beq.n	80209a8 <setvbuf+0x30>
 802099a:	f1b8 0f01 	cmp.w	r8, #1
 802099e:	f200 8094 	bhi.w	8020aca <setvbuf+0x152>
 80209a2:	2d00      	cmp	r5, #0
 80209a4:	f2c0 8091 	blt.w	8020aca <setvbuf+0x152>
 80209a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80209aa:	07da      	lsls	r2, r3, #31
 80209ac:	d405      	bmi.n	80209ba <setvbuf+0x42>
 80209ae:	89a3      	ldrh	r3, [r4, #12]
 80209b0:	059b      	lsls	r3, r3, #22
 80209b2:	d402      	bmi.n	80209ba <setvbuf+0x42>
 80209b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209b6:	f000 fae0 	bl	8020f7a <__retarget_lock_acquire_recursive>
 80209ba:	4621      	mov	r1, r4
 80209bc:	4638      	mov	r0, r7
 80209be:	f002 ff91 	bl	80238e4 <_fflush_r>
 80209c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80209c4:	b141      	cbz	r1, 80209d8 <setvbuf+0x60>
 80209c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209ca:	4299      	cmp	r1, r3
 80209cc:	d002      	beq.n	80209d4 <setvbuf+0x5c>
 80209ce:	4638      	mov	r0, r7
 80209d0:	f001 f912 	bl	8021bf8 <_free_r>
 80209d4:	2300      	movs	r3, #0
 80209d6:	6363      	str	r3, [r4, #52]	; 0x34
 80209d8:	2300      	movs	r3, #0
 80209da:	61a3      	str	r3, [r4, #24]
 80209dc:	6063      	str	r3, [r4, #4]
 80209de:	89a3      	ldrh	r3, [r4, #12]
 80209e0:	0618      	lsls	r0, r3, #24
 80209e2:	d503      	bpl.n	80209ec <setvbuf+0x74>
 80209e4:	6921      	ldr	r1, [r4, #16]
 80209e6:	4638      	mov	r0, r7
 80209e8:	f001 f906 	bl	8021bf8 <_free_r>
 80209ec:	89a3      	ldrh	r3, [r4, #12]
 80209ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80209f2:	f023 0303 	bic.w	r3, r3, #3
 80209f6:	f1b8 0f02 	cmp.w	r8, #2
 80209fa:	81a3      	strh	r3, [r4, #12]
 80209fc:	d05f      	beq.n	8020abe <setvbuf+0x146>
 80209fe:	ab01      	add	r3, sp, #4
 8020a00:	466a      	mov	r2, sp
 8020a02:	4621      	mov	r1, r4
 8020a04:	4638      	mov	r0, r7
 8020a06:	f002 ffa7 	bl	8023958 <__swhatbuf_r>
 8020a0a:	89a3      	ldrh	r3, [r4, #12]
 8020a0c:	4318      	orrs	r0, r3
 8020a0e:	81a0      	strh	r0, [r4, #12]
 8020a10:	bb2d      	cbnz	r5, 8020a5e <setvbuf+0xe6>
 8020a12:	9d00      	ldr	r5, [sp, #0]
 8020a14:	4628      	mov	r0, r5
 8020a16:	f7fe fe09 	bl	801f62c <malloc>
 8020a1a:	4606      	mov	r6, r0
 8020a1c:	2800      	cmp	r0, #0
 8020a1e:	d150      	bne.n	8020ac2 <setvbuf+0x14a>
 8020a20:	f8dd 9000 	ldr.w	r9, [sp]
 8020a24:	45a9      	cmp	r9, r5
 8020a26:	d13e      	bne.n	8020aa6 <setvbuf+0x12e>
 8020a28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	60a2      	str	r2, [r4, #8]
 8020a30:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020a34:	6022      	str	r2, [r4, #0]
 8020a36:	6122      	str	r2, [r4, #16]
 8020a38:	2201      	movs	r2, #1
 8020a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a3e:	6162      	str	r2, [r4, #20]
 8020a40:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020a42:	f043 0302 	orr.w	r3, r3, #2
 8020a46:	07d1      	lsls	r1, r2, #31
 8020a48:	81a3      	strh	r3, [r4, #12]
 8020a4a:	d404      	bmi.n	8020a56 <setvbuf+0xde>
 8020a4c:	059b      	lsls	r3, r3, #22
 8020a4e:	d402      	bmi.n	8020a56 <setvbuf+0xde>
 8020a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a52:	f000 fa93 	bl	8020f7c <__retarget_lock_release_recursive>
 8020a56:	4628      	mov	r0, r5
 8020a58:	b003      	add	sp, #12
 8020a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a5e:	2e00      	cmp	r6, #0
 8020a60:	d0d8      	beq.n	8020a14 <setvbuf+0x9c>
 8020a62:	6a3b      	ldr	r3, [r7, #32]
 8020a64:	b913      	cbnz	r3, 8020a6c <setvbuf+0xf4>
 8020a66:	4638      	mov	r0, r7
 8020a68:	f7ff fe88 	bl	802077c <__sinit>
 8020a6c:	f1b8 0f01 	cmp.w	r8, #1
 8020a70:	bf08      	it	eq
 8020a72:	89a3      	ldrheq	r3, [r4, #12]
 8020a74:	6026      	str	r6, [r4, #0]
 8020a76:	bf04      	itt	eq
 8020a78:	f043 0301 	orreq.w	r3, r3, #1
 8020a7c:	81a3      	strheq	r3, [r4, #12]
 8020a7e:	89a3      	ldrh	r3, [r4, #12]
 8020a80:	f013 0208 	ands.w	r2, r3, #8
 8020a84:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020a88:	d01d      	beq.n	8020ac6 <setvbuf+0x14e>
 8020a8a:	07da      	lsls	r2, r3, #31
 8020a8c:	bf41      	itttt	mi
 8020a8e:	2200      	movmi	r2, #0
 8020a90:	426d      	negmi	r5, r5
 8020a92:	60a2      	strmi	r2, [r4, #8]
 8020a94:	61a5      	strmi	r5, [r4, #24]
 8020a96:	bf58      	it	pl
 8020a98:	60a5      	strpl	r5, [r4, #8]
 8020a9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020a9c:	f015 0501 	ands.w	r5, r5, #1
 8020aa0:	d0d4      	beq.n	8020a4c <setvbuf+0xd4>
 8020aa2:	2500      	movs	r5, #0
 8020aa4:	e7d7      	b.n	8020a56 <setvbuf+0xde>
 8020aa6:	4648      	mov	r0, r9
 8020aa8:	f7fe fdc0 	bl	801f62c <malloc>
 8020aac:	4606      	mov	r6, r0
 8020aae:	2800      	cmp	r0, #0
 8020ab0:	d0ba      	beq.n	8020a28 <setvbuf+0xb0>
 8020ab2:	89a3      	ldrh	r3, [r4, #12]
 8020ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ab8:	81a3      	strh	r3, [r4, #12]
 8020aba:	464d      	mov	r5, r9
 8020abc:	e7d1      	b.n	8020a62 <setvbuf+0xea>
 8020abe:	2500      	movs	r5, #0
 8020ac0:	e7b4      	b.n	8020a2c <setvbuf+0xb4>
 8020ac2:	46a9      	mov	r9, r5
 8020ac4:	e7f5      	b.n	8020ab2 <setvbuf+0x13a>
 8020ac6:	60a2      	str	r2, [r4, #8]
 8020ac8:	e7e7      	b.n	8020a9a <setvbuf+0x122>
 8020aca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020ace:	e7c2      	b.n	8020a56 <setvbuf+0xde>
 8020ad0:	2000099c 	.word	0x2000099c

08020ad4 <sniprintf>:
 8020ad4:	b40c      	push	{r2, r3}
 8020ad6:	b530      	push	{r4, r5, lr}
 8020ad8:	4b17      	ldr	r3, [pc, #92]	; (8020b38 <sniprintf+0x64>)
 8020ada:	1e0c      	subs	r4, r1, #0
 8020adc:	681d      	ldr	r5, [r3, #0]
 8020ade:	b09d      	sub	sp, #116	; 0x74
 8020ae0:	da08      	bge.n	8020af4 <sniprintf+0x20>
 8020ae2:	238b      	movs	r3, #139	; 0x8b
 8020ae4:	602b      	str	r3, [r5, #0]
 8020ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020aea:	b01d      	add	sp, #116	; 0x74
 8020aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020af0:	b002      	add	sp, #8
 8020af2:	4770      	bx	lr
 8020af4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020afc:	bf14      	ite	ne
 8020afe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020b02:	4623      	moveq	r3, r4
 8020b04:	9304      	str	r3, [sp, #16]
 8020b06:	9307      	str	r3, [sp, #28]
 8020b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020b0c:	9002      	str	r0, [sp, #8]
 8020b0e:	9006      	str	r0, [sp, #24]
 8020b10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020b14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020b16:	ab21      	add	r3, sp, #132	; 0x84
 8020b18:	a902      	add	r1, sp, #8
 8020b1a:	4628      	mov	r0, r5
 8020b1c:	9301      	str	r3, [sp, #4]
 8020b1e:	f002 fc19 	bl	8023354 <_svfiprintf_r>
 8020b22:	1c43      	adds	r3, r0, #1
 8020b24:	bfbc      	itt	lt
 8020b26:	238b      	movlt	r3, #139	; 0x8b
 8020b28:	602b      	strlt	r3, [r5, #0]
 8020b2a:	2c00      	cmp	r4, #0
 8020b2c:	d0dd      	beq.n	8020aea <sniprintf+0x16>
 8020b2e:	9b02      	ldr	r3, [sp, #8]
 8020b30:	2200      	movs	r2, #0
 8020b32:	701a      	strb	r2, [r3, #0]
 8020b34:	e7d9      	b.n	8020aea <sniprintf+0x16>
 8020b36:	bf00      	nop
 8020b38:	2000099c 	.word	0x2000099c

08020b3c <siprintf>:
 8020b3c:	b40e      	push	{r1, r2, r3}
 8020b3e:	b500      	push	{lr}
 8020b40:	b09c      	sub	sp, #112	; 0x70
 8020b42:	ab1d      	add	r3, sp, #116	; 0x74
 8020b44:	9002      	str	r0, [sp, #8]
 8020b46:	9006      	str	r0, [sp, #24]
 8020b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020b4c:	4809      	ldr	r0, [pc, #36]	; (8020b74 <siprintf+0x38>)
 8020b4e:	9107      	str	r1, [sp, #28]
 8020b50:	9104      	str	r1, [sp, #16]
 8020b52:	4909      	ldr	r1, [pc, #36]	; (8020b78 <siprintf+0x3c>)
 8020b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8020b58:	9105      	str	r1, [sp, #20]
 8020b5a:	6800      	ldr	r0, [r0, #0]
 8020b5c:	9301      	str	r3, [sp, #4]
 8020b5e:	a902      	add	r1, sp, #8
 8020b60:	f002 fbf8 	bl	8023354 <_svfiprintf_r>
 8020b64:	9b02      	ldr	r3, [sp, #8]
 8020b66:	2200      	movs	r2, #0
 8020b68:	701a      	strb	r2, [r3, #0]
 8020b6a:	b01c      	add	sp, #112	; 0x70
 8020b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020b70:	b003      	add	sp, #12
 8020b72:	4770      	bx	lr
 8020b74:	2000099c 	.word	0x2000099c
 8020b78:	ffff0208 	.word	0xffff0208

08020b7c <__sread>:
 8020b7c:	b510      	push	{r4, lr}
 8020b7e:	460c      	mov	r4, r1
 8020b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b84:	f000 f99a 	bl	8020ebc <_read_r>
 8020b88:	2800      	cmp	r0, #0
 8020b8a:	bfab      	itete	ge
 8020b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8020b90:	181b      	addge	r3, r3, r0
 8020b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020b96:	bfac      	ite	ge
 8020b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8020b9a:	81a3      	strhlt	r3, [r4, #12]
 8020b9c:	bd10      	pop	{r4, pc}

08020b9e <__swrite>:
 8020b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ba2:	461f      	mov	r7, r3
 8020ba4:	898b      	ldrh	r3, [r1, #12]
 8020ba6:	05db      	lsls	r3, r3, #23
 8020ba8:	4605      	mov	r5, r0
 8020baa:	460c      	mov	r4, r1
 8020bac:	4616      	mov	r6, r2
 8020bae:	d505      	bpl.n	8020bbc <__swrite+0x1e>
 8020bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bb4:	2302      	movs	r3, #2
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	f000 f96e 	bl	8020e98 <_lseek_r>
 8020bbc:	89a3      	ldrh	r3, [r4, #12]
 8020bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020bc6:	81a3      	strh	r3, [r4, #12]
 8020bc8:	4632      	mov	r2, r6
 8020bca:	463b      	mov	r3, r7
 8020bcc:	4628      	mov	r0, r5
 8020bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020bd2:	f000 b995 	b.w	8020f00 <_write_r>

08020bd6 <__sseek>:
 8020bd6:	b510      	push	{r4, lr}
 8020bd8:	460c      	mov	r4, r1
 8020bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bde:	f000 f95b 	bl	8020e98 <_lseek_r>
 8020be2:	1c43      	adds	r3, r0, #1
 8020be4:	89a3      	ldrh	r3, [r4, #12]
 8020be6:	bf15      	itete	ne
 8020be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8020bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020bf2:	81a3      	strheq	r3, [r4, #12]
 8020bf4:	bf18      	it	ne
 8020bf6:	81a3      	strhne	r3, [r4, #12]
 8020bf8:	bd10      	pop	{r4, pc}

08020bfa <__sclose>:
 8020bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bfe:	f000 b93b 	b.w	8020e78 <_close_r>

08020c02 <_vsniprintf_r>:
 8020c02:	b530      	push	{r4, r5, lr}
 8020c04:	4614      	mov	r4, r2
 8020c06:	2c00      	cmp	r4, #0
 8020c08:	b09b      	sub	sp, #108	; 0x6c
 8020c0a:	4605      	mov	r5, r0
 8020c0c:	461a      	mov	r2, r3
 8020c0e:	da05      	bge.n	8020c1c <_vsniprintf_r+0x1a>
 8020c10:	238b      	movs	r3, #139	; 0x8b
 8020c12:	6003      	str	r3, [r0, #0]
 8020c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c18:	b01b      	add	sp, #108	; 0x6c
 8020c1a:	bd30      	pop	{r4, r5, pc}
 8020c1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020c20:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020c24:	bf14      	ite	ne
 8020c26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020c2a:	4623      	moveq	r3, r4
 8020c2c:	9302      	str	r3, [sp, #8]
 8020c2e:	9305      	str	r3, [sp, #20]
 8020c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020c34:	9100      	str	r1, [sp, #0]
 8020c36:	9104      	str	r1, [sp, #16]
 8020c38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020c3c:	4669      	mov	r1, sp
 8020c3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020c40:	f002 fb88 	bl	8023354 <_svfiprintf_r>
 8020c44:	1c43      	adds	r3, r0, #1
 8020c46:	bfbc      	itt	lt
 8020c48:	238b      	movlt	r3, #139	; 0x8b
 8020c4a:	602b      	strlt	r3, [r5, #0]
 8020c4c:	2c00      	cmp	r4, #0
 8020c4e:	d0e3      	beq.n	8020c18 <_vsniprintf_r+0x16>
 8020c50:	9b00      	ldr	r3, [sp, #0]
 8020c52:	2200      	movs	r2, #0
 8020c54:	701a      	strb	r2, [r3, #0]
 8020c56:	e7df      	b.n	8020c18 <_vsniprintf_r+0x16>

08020c58 <vsniprintf>:
 8020c58:	b507      	push	{r0, r1, r2, lr}
 8020c5a:	9300      	str	r3, [sp, #0]
 8020c5c:	4613      	mov	r3, r2
 8020c5e:	460a      	mov	r2, r1
 8020c60:	4601      	mov	r1, r0
 8020c62:	4803      	ldr	r0, [pc, #12]	; (8020c70 <vsniprintf+0x18>)
 8020c64:	6800      	ldr	r0, [r0, #0]
 8020c66:	f7ff ffcc 	bl	8020c02 <_vsniprintf_r>
 8020c6a:	b003      	add	sp, #12
 8020c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c70:	2000099c 	.word	0x2000099c

08020c74 <__swbuf_r>:
 8020c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c76:	460e      	mov	r6, r1
 8020c78:	4614      	mov	r4, r2
 8020c7a:	4605      	mov	r5, r0
 8020c7c:	b118      	cbz	r0, 8020c86 <__swbuf_r+0x12>
 8020c7e:	6a03      	ldr	r3, [r0, #32]
 8020c80:	b90b      	cbnz	r3, 8020c86 <__swbuf_r+0x12>
 8020c82:	f7ff fd7b 	bl	802077c <__sinit>
 8020c86:	69a3      	ldr	r3, [r4, #24]
 8020c88:	60a3      	str	r3, [r4, #8]
 8020c8a:	89a3      	ldrh	r3, [r4, #12]
 8020c8c:	071a      	lsls	r2, r3, #28
 8020c8e:	d525      	bpl.n	8020cdc <__swbuf_r+0x68>
 8020c90:	6923      	ldr	r3, [r4, #16]
 8020c92:	b31b      	cbz	r3, 8020cdc <__swbuf_r+0x68>
 8020c94:	6823      	ldr	r3, [r4, #0]
 8020c96:	6922      	ldr	r2, [r4, #16]
 8020c98:	1a98      	subs	r0, r3, r2
 8020c9a:	6963      	ldr	r3, [r4, #20]
 8020c9c:	b2f6      	uxtb	r6, r6
 8020c9e:	4283      	cmp	r3, r0
 8020ca0:	4637      	mov	r7, r6
 8020ca2:	dc04      	bgt.n	8020cae <__swbuf_r+0x3a>
 8020ca4:	4621      	mov	r1, r4
 8020ca6:	4628      	mov	r0, r5
 8020ca8:	f002 fe1c 	bl	80238e4 <_fflush_r>
 8020cac:	b9e0      	cbnz	r0, 8020ce8 <__swbuf_r+0x74>
 8020cae:	68a3      	ldr	r3, [r4, #8]
 8020cb0:	3b01      	subs	r3, #1
 8020cb2:	60a3      	str	r3, [r4, #8]
 8020cb4:	6823      	ldr	r3, [r4, #0]
 8020cb6:	1c5a      	adds	r2, r3, #1
 8020cb8:	6022      	str	r2, [r4, #0]
 8020cba:	701e      	strb	r6, [r3, #0]
 8020cbc:	6962      	ldr	r2, [r4, #20]
 8020cbe:	1c43      	adds	r3, r0, #1
 8020cc0:	429a      	cmp	r2, r3
 8020cc2:	d004      	beq.n	8020cce <__swbuf_r+0x5a>
 8020cc4:	89a3      	ldrh	r3, [r4, #12]
 8020cc6:	07db      	lsls	r3, r3, #31
 8020cc8:	d506      	bpl.n	8020cd8 <__swbuf_r+0x64>
 8020cca:	2e0a      	cmp	r6, #10
 8020ccc:	d104      	bne.n	8020cd8 <__swbuf_r+0x64>
 8020cce:	4621      	mov	r1, r4
 8020cd0:	4628      	mov	r0, r5
 8020cd2:	f002 fe07 	bl	80238e4 <_fflush_r>
 8020cd6:	b938      	cbnz	r0, 8020ce8 <__swbuf_r+0x74>
 8020cd8:	4638      	mov	r0, r7
 8020cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020cdc:	4621      	mov	r1, r4
 8020cde:	4628      	mov	r0, r5
 8020ce0:	f000 f806 	bl	8020cf0 <__swsetup_r>
 8020ce4:	2800      	cmp	r0, #0
 8020ce6:	d0d5      	beq.n	8020c94 <__swbuf_r+0x20>
 8020ce8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020cec:	e7f4      	b.n	8020cd8 <__swbuf_r+0x64>
	...

08020cf0 <__swsetup_r>:
 8020cf0:	b538      	push	{r3, r4, r5, lr}
 8020cf2:	4b2a      	ldr	r3, [pc, #168]	; (8020d9c <__swsetup_r+0xac>)
 8020cf4:	4605      	mov	r5, r0
 8020cf6:	6818      	ldr	r0, [r3, #0]
 8020cf8:	460c      	mov	r4, r1
 8020cfa:	b118      	cbz	r0, 8020d04 <__swsetup_r+0x14>
 8020cfc:	6a03      	ldr	r3, [r0, #32]
 8020cfe:	b90b      	cbnz	r3, 8020d04 <__swsetup_r+0x14>
 8020d00:	f7ff fd3c 	bl	802077c <__sinit>
 8020d04:	89a3      	ldrh	r3, [r4, #12]
 8020d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d0a:	0718      	lsls	r0, r3, #28
 8020d0c:	d422      	bmi.n	8020d54 <__swsetup_r+0x64>
 8020d0e:	06d9      	lsls	r1, r3, #27
 8020d10:	d407      	bmi.n	8020d22 <__swsetup_r+0x32>
 8020d12:	2309      	movs	r3, #9
 8020d14:	602b      	str	r3, [r5, #0]
 8020d16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020d1a:	81a3      	strh	r3, [r4, #12]
 8020d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d20:	e034      	b.n	8020d8c <__swsetup_r+0x9c>
 8020d22:	0758      	lsls	r0, r3, #29
 8020d24:	d512      	bpl.n	8020d4c <__swsetup_r+0x5c>
 8020d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020d28:	b141      	cbz	r1, 8020d3c <__swsetup_r+0x4c>
 8020d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d2e:	4299      	cmp	r1, r3
 8020d30:	d002      	beq.n	8020d38 <__swsetup_r+0x48>
 8020d32:	4628      	mov	r0, r5
 8020d34:	f000 ff60 	bl	8021bf8 <_free_r>
 8020d38:	2300      	movs	r3, #0
 8020d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8020d3c:	89a3      	ldrh	r3, [r4, #12]
 8020d3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020d42:	81a3      	strh	r3, [r4, #12]
 8020d44:	2300      	movs	r3, #0
 8020d46:	6063      	str	r3, [r4, #4]
 8020d48:	6923      	ldr	r3, [r4, #16]
 8020d4a:	6023      	str	r3, [r4, #0]
 8020d4c:	89a3      	ldrh	r3, [r4, #12]
 8020d4e:	f043 0308 	orr.w	r3, r3, #8
 8020d52:	81a3      	strh	r3, [r4, #12]
 8020d54:	6923      	ldr	r3, [r4, #16]
 8020d56:	b94b      	cbnz	r3, 8020d6c <__swsetup_r+0x7c>
 8020d58:	89a3      	ldrh	r3, [r4, #12]
 8020d5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d62:	d003      	beq.n	8020d6c <__swsetup_r+0x7c>
 8020d64:	4621      	mov	r1, r4
 8020d66:	4628      	mov	r0, r5
 8020d68:	f002 fe1c 	bl	80239a4 <__smakebuf_r>
 8020d6c:	89a0      	ldrh	r0, [r4, #12]
 8020d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d72:	f010 0301 	ands.w	r3, r0, #1
 8020d76:	d00a      	beq.n	8020d8e <__swsetup_r+0x9e>
 8020d78:	2300      	movs	r3, #0
 8020d7a:	60a3      	str	r3, [r4, #8]
 8020d7c:	6963      	ldr	r3, [r4, #20]
 8020d7e:	425b      	negs	r3, r3
 8020d80:	61a3      	str	r3, [r4, #24]
 8020d82:	6923      	ldr	r3, [r4, #16]
 8020d84:	b943      	cbnz	r3, 8020d98 <__swsetup_r+0xa8>
 8020d86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020d8a:	d1c4      	bne.n	8020d16 <__swsetup_r+0x26>
 8020d8c:	bd38      	pop	{r3, r4, r5, pc}
 8020d8e:	0781      	lsls	r1, r0, #30
 8020d90:	bf58      	it	pl
 8020d92:	6963      	ldrpl	r3, [r4, #20]
 8020d94:	60a3      	str	r3, [r4, #8]
 8020d96:	e7f4      	b.n	8020d82 <__swsetup_r+0x92>
 8020d98:	2000      	movs	r0, #0
 8020d9a:	e7f7      	b.n	8020d8c <__swsetup_r+0x9c>
 8020d9c:	2000099c 	.word	0x2000099c

08020da0 <memcmp>:
 8020da0:	b510      	push	{r4, lr}
 8020da2:	3901      	subs	r1, #1
 8020da4:	4402      	add	r2, r0
 8020da6:	4290      	cmp	r0, r2
 8020da8:	d101      	bne.n	8020dae <memcmp+0xe>
 8020daa:	2000      	movs	r0, #0
 8020dac:	e005      	b.n	8020dba <memcmp+0x1a>
 8020dae:	7803      	ldrb	r3, [r0, #0]
 8020db0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020db4:	42a3      	cmp	r3, r4
 8020db6:	d001      	beq.n	8020dbc <memcmp+0x1c>
 8020db8:	1b18      	subs	r0, r3, r4
 8020dba:	bd10      	pop	{r4, pc}
 8020dbc:	3001      	adds	r0, #1
 8020dbe:	e7f2      	b.n	8020da6 <memcmp+0x6>

08020dc0 <memmove>:
 8020dc0:	4288      	cmp	r0, r1
 8020dc2:	b510      	push	{r4, lr}
 8020dc4:	eb01 0402 	add.w	r4, r1, r2
 8020dc8:	d902      	bls.n	8020dd0 <memmove+0x10>
 8020dca:	4284      	cmp	r4, r0
 8020dcc:	4623      	mov	r3, r4
 8020dce:	d807      	bhi.n	8020de0 <memmove+0x20>
 8020dd0:	1e43      	subs	r3, r0, #1
 8020dd2:	42a1      	cmp	r1, r4
 8020dd4:	d008      	beq.n	8020de8 <memmove+0x28>
 8020dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020dde:	e7f8      	b.n	8020dd2 <memmove+0x12>
 8020de0:	4402      	add	r2, r0
 8020de2:	4601      	mov	r1, r0
 8020de4:	428a      	cmp	r2, r1
 8020de6:	d100      	bne.n	8020dea <memmove+0x2a>
 8020de8:	bd10      	pop	{r4, pc}
 8020dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020df2:	e7f7      	b.n	8020de4 <memmove+0x24>

08020df4 <memset>:
 8020df4:	4402      	add	r2, r0
 8020df6:	4603      	mov	r3, r0
 8020df8:	4293      	cmp	r3, r2
 8020dfa:	d100      	bne.n	8020dfe <memset+0xa>
 8020dfc:	4770      	bx	lr
 8020dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8020e02:	e7f9      	b.n	8020df8 <memset+0x4>

08020e04 <strchr>:
 8020e04:	b2c9      	uxtb	r1, r1
 8020e06:	4603      	mov	r3, r0
 8020e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e0c:	b11a      	cbz	r2, 8020e16 <strchr+0x12>
 8020e0e:	428a      	cmp	r2, r1
 8020e10:	d1f9      	bne.n	8020e06 <strchr+0x2>
 8020e12:	4618      	mov	r0, r3
 8020e14:	4770      	bx	lr
 8020e16:	2900      	cmp	r1, #0
 8020e18:	bf18      	it	ne
 8020e1a:	2300      	movne	r3, #0
 8020e1c:	e7f9      	b.n	8020e12 <strchr+0xe>

08020e1e <strncmp>:
 8020e1e:	b510      	push	{r4, lr}
 8020e20:	b16a      	cbz	r2, 8020e3e <strncmp+0x20>
 8020e22:	3901      	subs	r1, #1
 8020e24:	1884      	adds	r4, r0, r2
 8020e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020e2e:	429a      	cmp	r2, r3
 8020e30:	d103      	bne.n	8020e3a <strncmp+0x1c>
 8020e32:	42a0      	cmp	r0, r4
 8020e34:	d001      	beq.n	8020e3a <strncmp+0x1c>
 8020e36:	2a00      	cmp	r2, #0
 8020e38:	d1f5      	bne.n	8020e26 <strncmp+0x8>
 8020e3a:	1ad0      	subs	r0, r2, r3
 8020e3c:	bd10      	pop	{r4, pc}
 8020e3e:	4610      	mov	r0, r2
 8020e40:	e7fc      	b.n	8020e3c <strncmp+0x1e>

08020e42 <strstr>:
 8020e42:	780a      	ldrb	r2, [r1, #0]
 8020e44:	b570      	push	{r4, r5, r6, lr}
 8020e46:	b96a      	cbnz	r2, 8020e64 <strstr+0x22>
 8020e48:	bd70      	pop	{r4, r5, r6, pc}
 8020e4a:	429a      	cmp	r2, r3
 8020e4c:	d109      	bne.n	8020e62 <strstr+0x20>
 8020e4e:	460c      	mov	r4, r1
 8020e50:	4605      	mov	r5, r0
 8020e52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d0f6      	beq.n	8020e48 <strstr+0x6>
 8020e5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8020e5e:	429e      	cmp	r6, r3
 8020e60:	d0f7      	beq.n	8020e52 <strstr+0x10>
 8020e62:	3001      	adds	r0, #1
 8020e64:	7803      	ldrb	r3, [r0, #0]
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	d1ef      	bne.n	8020e4a <strstr+0x8>
 8020e6a:	4618      	mov	r0, r3
 8020e6c:	e7ec      	b.n	8020e48 <strstr+0x6>
	...

08020e70 <_localeconv_r>:
 8020e70:	4800      	ldr	r0, [pc, #0]	; (8020e74 <_localeconv_r+0x4>)
 8020e72:	4770      	bx	lr
 8020e74:	20000a90 	.word	0x20000a90

08020e78 <_close_r>:
 8020e78:	b538      	push	{r3, r4, r5, lr}
 8020e7a:	4d06      	ldr	r5, [pc, #24]	; (8020e94 <_close_r+0x1c>)
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	4604      	mov	r4, r0
 8020e80:	4608      	mov	r0, r1
 8020e82:	602b      	str	r3, [r5, #0]
 8020e84:	f7e2 fb7b 	bl	800357e <_close>
 8020e88:	1c43      	adds	r3, r0, #1
 8020e8a:	d102      	bne.n	8020e92 <_close_r+0x1a>
 8020e8c:	682b      	ldr	r3, [r5, #0]
 8020e8e:	b103      	cbz	r3, 8020e92 <_close_r+0x1a>
 8020e90:	6023      	str	r3, [r4, #0]
 8020e92:	bd38      	pop	{r3, r4, r5, pc}
 8020e94:	20017008 	.word	0x20017008

08020e98 <_lseek_r>:
 8020e98:	b538      	push	{r3, r4, r5, lr}
 8020e9a:	4d07      	ldr	r5, [pc, #28]	; (8020eb8 <_lseek_r+0x20>)
 8020e9c:	4604      	mov	r4, r0
 8020e9e:	4608      	mov	r0, r1
 8020ea0:	4611      	mov	r1, r2
 8020ea2:	2200      	movs	r2, #0
 8020ea4:	602a      	str	r2, [r5, #0]
 8020ea6:	461a      	mov	r2, r3
 8020ea8:	f7e2 fb90 	bl	80035cc <_lseek>
 8020eac:	1c43      	adds	r3, r0, #1
 8020eae:	d102      	bne.n	8020eb6 <_lseek_r+0x1e>
 8020eb0:	682b      	ldr	r3, [r5, #0]
 8020eb2:	b103      	cbz	r3, 8020eb6 <_lseek_r+0x1e>
 8020eb4:	6023      	str	r3, [r4, #0]
 8020eb6:	bd38      	pop	{r3, r4, r5, pc}
 8020eb8:	20017008 	.word	0x20017008

08020ebc <_read_r>:
 8020ebc:	b538      	push	{r3, r4, r5, lr}
 8020ebe:	4d07      	ldr	r5, [pc, #28]	; (8020edc <_read_r+0x20>)
 8020ec0:	4604      	mov	r4, r0
 8020ec2:	4608      	mov	r0, r1
 8020ec4:	4611      	mov	r1, r2
 8020ec6:	2200      	movs	r2, #0
 8020ec8:	602a      	str	r2, [r5, #0]
 8020eca:	461a      	mov	r2, r3
 8020ecc:	f7e2 fb1e 	bl	800350c <_read>
 8020ed0:	1c43      	adds	r3, r0, #1
 8020ed2:	d102      	bne.n	8020eda <_read_r+0x1e>
 8020ed4:	682b      	ldr	r3, [r5, #0]
 8020ed6:	b103      	cbz	r3, 8020eda <_read_r+0x1e>
 8020ed8:	6023      	str	r3, [r4, #0]
 8020eda:	bd38      	pop	{r3, r4, r5, pc}
 8020edc:	20017008 	.word	0x20017008

08020ee0 <_sbrk_r>:
 8020ee0:	b538      	push	{r3, r4, r5, lr}
 8020ee2:	4d06      	ldr	r5, [pc, #24]	; (8020efc <_sbrk_r+0x1c>)
 8020ee4:	2300      	movs	r3, #0
 8020ee6:	4604      	mov	r4, r0
 8020ee8:	4608      	mov	r0, r1
 8020eea:	602b      	str	r3, [r5, #0]
 8020eec:	f7e2 fb7c 	bl	80035e8 <_sbrk>
 8020ef0:	1c43      	adds	r3, r0, #1
 8020ef2:	d102      	bne.n	8020efa <_sbrk_r+0x1a>
 8020ef4:	682b      	ldr	r3, [r5, #0]
 8020ef6:	b103      	cbz	r3, 8020efa <_sbrk_r+0x1a>
 8020ef8:	6023      	str	r3, [r4, #0]
 8020efa:	bd38      	pop	{r3, r4, r5, pc}
 8020efc:	20017008 	.word	0x20017008

08020f00 <_write_r>:
 8020f00:	b538      	push	{r3, r4, r5, lr}
 8020f02:	4d07      	ldr	r5, [pc, #28]	; (8020f20 <_write_r+0x20>)
 8020f04:	4604      	mov	r4, r0
 8020f06:	4608      	mov	r0, r1
 8020f08:	4611      	mov	r1, r2
 8020f0a:	2200      	movs	r2, #0
 8020f0c:	602a      	str	r2, [r5, #0]
 8020f0e:	461a      	mov	r2, r3
 8020f10:	f7e2 fb19 	bl	8003546 <_write>
 8020f14:	1c43      	adds	r3, r0, #1
 8020f16:	d102      	bne.n	8020f1e <_write_r+0x1e>
 8020f18:	682b      	ldr	r3, [r5, #0]
 8020f1a:	b103      	cbz	r3, 8020f1e <_write_r+0x1e>
 8020f1c:	6023      	str	r3, [r4, #0]
 8020f1e:	bd38      	pop	{r3, r4, r5, pc}
 8020f20:	20017008 	.word	0x20017008

08020f24 <__errno>:
 8020f24:	4b01      	ldr	r3, [pc, #4]	; (8020f2c <__errno+0x8>)
 8020f26:	6818      	ldr	r0, [r3, #0]
 8020f28:	4770      	bx	lr
 8020f2a:	bf00      	nop
 8020f2c:	2000099c 	.word	0x2000099c

08020f30 <__libc_init_array>:
 8020f30:	b570      	push	{r4, r5, r6, lr}
 8020f32:	4d0d      	ldr	r5, [pc, #52]	; (8020f68 <__libc_init_array+0x38>)
 8020f34:	4c0d      	ldr	r4, [pc, #52]	; (8020f6c <__libc_init_array+0x3c>)
 8020f36:	1b64      	subs	r4, r4, r5
 8020f38:	10a4      	asrs	r4, r4, #2
 8020f3a:	2600      	movs	r6, #0
 8020f3c:	42a6      	cmp	r6, r4
 8020f3e:	d109      	bne.n	8020f54 <__libc_init_array+0x24>
 8020f40:	4d0b      	ldr	r5, [pc, #44]	; (8020f70 <__libc_init_array+0x40>)
 8020f42:	4c0c      	ldr	r4, [pc, #48]	; (8020f74 <__libc_init_array+0x44>)
 8020f44:	f003 f954 	bl	80241f0 <_init>
 8020f48:	1b64      	subs	r4, r4, r5
 8020f4a:	10a4      	asrs	r4, r4, #2
 8020f4c:	2600      	movs	r6, #0
 8020f4e:	42a6      	cmp	r6, r4
 8020f50:	d105      	bne.n	8020f5e <__libc_init_array+0x2e>
 8020f52:	bd70      	pop	{r4, r5, r6, pc}
 8020f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8020f58:	4798      	blx	r3
 8020f5a:	3601      	adds	r6, #1
 8020f5c:	e7ee      	b.n	8020f3c <__libc_init_array+0xc>
 8020f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020f62:	4798      	blx	r3
 8020f64:	3601      	adds	r6, #1
 8020f66:	e7f2      	b.n	8020f4e <__libc_init_array+0x1e>
 8020f68:	08025f84 	.word	0x08025f84
 8020f6c:	08025f84 	.word	0x08025f84
 8020f70:	08025f84 	.word	0x08025f84
 8020f74:	08025f9c 	.word	0x08025f9c

08020f78 <__retarget_lock_init_recursive>:
 8020f78:	4770      	bx	lr

08020f7a <__retarget_lock_acquire_recursive>:
 8020f7a:	4770      	bx	lr

08020f7c <__retarget_lock_release_recursive>:
 8020f7c:	4770      	bx	lr

08020f7e <strcpy>:
 8020f7e:	4603      	mov	r3, r0
 8020f80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020f84:	f803 2b01 	strb.w	r2, [r3], #1
 8020f88:	2a00      	cmp	r2, #0
 8020f8a:	d1f9      	bne.n	8020f80 <strcpy+0x2>
 8020f8c:	4770      	bx	lr

08020f8e <memcpy>:
 8020f8e:	440a      	add	r2, r1
 8020f90:	4291      	cmp	r1, r2
 8020f92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020f96:	d100      	bne.n	8020f9a <memcpy+0xc>
 8020f98:	4770      	bx	lr
 8020f9a:	b510      	push	{r4, lr}
 8020f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020fa4:	4291      	cmp	r1, r2
 8020fa6:	d1f9      	bne.n	8020f9c <memcpy+0xe>
 8020fa8:	bd10      	pop	{r4, pc}
	...

08020fac <nanf>:
 8020fac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020fb4 <nanf+0x8>
 8020fb0:	4770      	bx	lr
 8020fb2:	bf00      	nop
 8020fb4:	7fc00000 	.word	0x7fc00000

08020fb8 <__assert_func>:
 8020fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020fba:	4614      	mov	r4, r2
 8020fbc:	461a      	mov	r2, r3
 8020fbe:	4b09      	ldr	r3, [pc, #36]	; (8020fe4 <__assert_func+0x2c>)
 8020fc0:	681b      	ldr	r3, [r3, #0]
 8020fc2:	4605      	mov	r5, r0
 8020fc4:	68d8      	ldr	r0, [r3, #12]
 8020fc6:	b14c      	cbz	r4, 8020fdc <__assert_func+0x24>
 8020fc8:	4b07      	ldr	r3, [pc, #28]	; (8020fe8 <__assert_func+0x30>)
 8020fca:	9100      	str	r1, [sp, #0]
 8020fcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020fd0:	4906      	ldr	r1, [pc, #24]	; (8020fec <__assert_func+0x34>)
 8020fd2:	462b      	mov	r3, r5
 8020fd4:	f002 fcae 	bl	8023934 <fiprintf>
 8020fd8:	f002 fd4a 	bl	8023a70 <abort>
 8020fdc:	4b04      	ldr	r3, [pc, #16]	; (8020ff0 <__assert_func+0x38>)
 8020fde:	461c      	mov	r4, r3
 8020fe0:	e7f3      	b.n	8020fca <__assert_func+0x12>
 8020fe2:	bf00      	nop
 8020fe4:	2000099c 	.word	0x2000099c
 8020fe8:	08025ca5 	.word	0x08025ca5
 8020fec:	08025cb2 	.word	0x08025cb2
 8020ff0:	08025ce0 	.word	0x08025ce0

08020ff4 <quorem>:
 8020ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ff8:	6903      	ldr	r3, [r0, #16]
 8020ffa:	690c      	ldr	r4, [r1, #16]
 8020ffc:	42a3      	cmp	r3, r4
 8020ffe:	4607      	mov	r7, r0
 8021000:	db7e      	blt.n	8021100 <quorem+0x10c>
 8021002:	3c01      	subs	r4, #1
 8021004:	f101 0814 	add.w	r8, r1, #20
 8021008:	f100 0514 	add.w	r5, r0, #20
 802100c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021010:	9301      	str	r3, [sp, #4]
 8021012:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802101a:	3301      	adds	r3, #1
 802101c:	429a      	cmp	r2, r3
 802101e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021022:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021026:	fbb2 f6f3 	udiv	r6, r2, r3
 802102a:	d331      	bcc.n	8021090 <quorem+0x9c>
 802102c:	f04f 0e00 	mov.w	lr, #0
 8021030:	4640      	mov	r0, r8
 8021032:	46ac      	mov	ip, r5
 8021034:	46f2      	mov	sl, lr
 8021036:	f850 2b04 	ldr.w	r2, [r0], #4
 802103a:	b293      	uxth	r3, r2
 802103c:	fb06 e303 	mla	r3, r6, r3, lr
 8021040:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021044:	0c1a      	lsrs	r2, r3, #16
 8021046:	b29b      	uxth	r3, r3
 8021048:	ebaa 0303 	sub.w	r3, sl, r3
 802104c:	f8dc a000 	ldr.w	sl, [ip]
 8021050:	fa13 f38a 	uxtah	r3, r3, sl
 8021054:	fb06 220e 	mla	r2, r6, lr, r2
 8021058:	9300      	str	r3, [sp, #0]
 802105a:	9b00      	ldr	r3, [sp, #0]
 802105c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021060:	b292      	uxth	r2, r2
 8021062:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8021066:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802106a:	f8bd 3000 	ldrh.w	r3, [sp]
 802106e:	4581      	cmp	r9, r0
 8021070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021074:	f84c 3b04 	str.w	r3, [ip], #4
 8021078:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802107c:	d2db      	bcs.n	8021036 <quorem+0x42>
 802107e:	f855 300b 	ldr.w	r3, [r5, fp]
 8021082:	b92b      	cbnz	r3, 8021090 <quorem+0x9c>
 8021084:	9b01      	ldr	r3, [sp, #4]
 8021086:	3b04      	subs	r3, #4
 8021088:	429d      	cmp	r5, r3
 802108a:	461a      	mov	r2, r3
 802108c:	d32c      	bcc.n	80210e8 <quorem+0xf4>
 802108e:	613c      	str	r4, [r7, #16]
 8021090:	4638      	mov	r0, r7
 8021092:	f001 f8c3 	bl	802221c <__mcmp>
 8021096:	2800      	cmp	r0, #0
 8021098:	db22      	blt.n	80210e0 <quorem+0xec>
 802109a:	3601      	adds	r6, #1
 802109c:	4629      	mov	r1, r5
 802109e:	2000      	movs	r0, #0
 80210a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80210a4:	f8d1 c000 	ldr.w	ip, [r1]
 80210a8:	b293      	uxth	r3, r2
 80210aa:	1ac3      	subs	r3, r0, r3
 80210ac:	0c12      	lsrs	r2, r2, #16
 80210ae:	fa13 f38c 	uxtah	r3, r3, ip
 80210b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80210b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80210ba:	b29b      	uxth	r3, r3
 80210bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80210c0:	45c1      	cmp	r9, r8
 80210c2:	f841 3b04 	str.w	r3, [r1], #4
 80210c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80210ca:	d2e9      	bcs.n	80210a0 <quorem+0xac>
 80210cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80210d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80210d4:	b922      	cbnz	r2, 80210e0 <quorem+0xec>
 80210d6:	3b04      	subs	r3, #4
 80210d8:	429d      	cmp	r5, r3
 80210da:	461a      	mov	r2, r3
 80210dc:	d30a      	bcc.n	80210f4 <quorem+0x100>
 80210de:	613c      	str	r4, [r7, #16]
 80210e0:	4630      	mov	r0, r6
 80210e2:	b003      	add	sp, #12
 80210e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210e8:	6812      	ldr	r2, [r2, #0]
 80210ea:	3b04      	subs	r3, #4
 80210ec:	2a00      	cmp	r2, #0
 80210ee:	d1ce      	bne.n	802108e <quorem+0x9a>
 80210f0:	3c01      	subs	r4, #1
 80210f2:	e7c9      	b.n	8021088 <quorem+0x94>
 80210f4:	6812      	ldr	r2, [r2, #0]
 80210f6:	3b04      	subs	r3, #4
 80210f8:	2a00      	cmp	r2, #0
 80210fa:	d1f0      	bne.n	80210de <quorem+0xea>
 80210fc:	3c01      	subs	r4, #1
 80210fe:	e7eb      	b.n	80210d8 <quorem+0xe4>
 8021100:	2000      	movs	r0, #0
 8021102:	e7ee      	b.n	80210e2 <quorem+0xee>
 8021104:	0000      	movs	r0, r0
	...

08021108 <_dtoa_r>:
 8021108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802110c:	ed2d 8b02 	vpush	{d8}
 8021110:	69c5      	ldr	r5, [r0, #28]
 8021112:	b091      	sub	sp, #68	; 0x44
 8021114:	ed8d 0b02 	vstr	d0, [sp, #8]
 8021118:	ec59 8b10 	vmov	r8, r9, d0
 802111c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802111e:	9106      	str	r1, [sp, #24]
 8021120:	4606      	mov	r6, r0
 8021122:	9208      	str	r2, [sp, #32]
 8021124:	930c      	str	r3, [sp, #48]	; 0x30
 8021126:	b975      	cbnz	r5, 8021146 <_dtoa_r+0x3e>
 8021128:	2010      	movs	r0, #16
 802112a:	f7fe fa7f 	bl	801f62c <malloc>
 802112e:	4602      	mov	r2, r0
 8021130:	61f0      	str	r0, [r6, #28]
 8021132:	b920      	cbnz	r0, 802113e <_dtoa_r+0x36>
 8021134:	4ba6      	ldr	r3, [pc, #664]	; (80213d0 <_dtoa_r+0x2c8>)
 8021136:	21ef      	movs	r1, #239	; 0xef
 8021138:	48a6      	ldr	r0, [pc, #664]	; (80213d4 <_dtoa_r+0x2cc>)
 802113a:	f7ff ff3d 	bl	8020fb8 <__assert_func>
 802113e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021142:	6005      	str	r5, [r0, #0]
 8021144:	60c5      	str	r5, [r0, #12]
 8021146:	69f3      	ldr	r3, [r6, #28]
 8021148:	6819      	ldr	r1, [r3, #0]
 802114a:	b151      	cbz	r1, 8021162 <_dtoa_r+0x5a>
 802114c:	685a      	ldr	r2, [r3, #4]
 802114e:	604a      	str	r2, [r1, #4]
 8021150:	2301      	movs	r3, #1
 8021152:	4093      	lsls	r3, r2
 8021154:	608b      	str	r3, [r1, #8]
 8021156:	4630      	mov	r0, r6
 8021158:	f000 fdda 	bl	8021d10 <_Bfree>
 802115c:	69f3      	ldr	r3, [r6, #28]
 802115e:	2200      	movs	r2, #0
 8021160:	601a      	str	r2, [r3, #0]
 8021162:	f1b9 0300 	subs.w	r3, r9, #0
 8021166:	bfbb      	ittet	lt
 8021168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802116c:	9303      	strlt	r3, [sp, #12]
 802116e:	2300      	movge	r3, #0
 8021170:	2201      	movlt	r2, #1
 8021172:	bfac      	ite	ge
 8021174:	6023      	strge	r3, [r4, #0]
 8021176:	6022      	strlt	r2, [r4, #0]
 8021178:	4b97      	ldr	r3, [pc, #604]	; (80213d8 <_dtoa_r+0x2d0>)
 802117a:	9c03      	ldr	r4, [sp, #12]
 802117c:	43a3      	bics	r3, r4
 802117e:	d11c      	bne.n	80211ba <_dtoa_r+0xb2>
 8021180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021182:	f242 730f 	movw	r3, #9999	; 0x270f
 8021186:	6013      	str	r3, [r2, #0]
 8021188:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802118c:	ea53 0308 	orrs.w	r3, r3, r8
 8021190:	f000 84fb 	beq.w	8021b8a <_dtoa_r+0xa82>
 8021194:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021196:	b963      	cbnz	r3, 80211b2 <_dtoa_r+0xaa>
 8021198:	4b90      	ldr	r3, [pc, #576]	; (80213dc <_dtoa_r+0x2d4>)
 802119a:	e020      	b.n	80211de <_dtoa_r+0xd6>
 802119c:	4b90      	ldr	r3, [pc, #576]	; (80213e0 <_dtoa_r+0x2d8>)
 802119e:	9301      	str	r3, [sp, #4]
 80211a0:	3308      	adds	r3, #8
 80211a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80211a4:	6013      	str	r3, [r2, #0]
 80211a6:	9801      	ldr	r0, [sp, #4]
 80211a8:	b011      	add	sp, #68	; 0x44
 80211aa:	ecbd 8b02 	vpop	{d8}
 80211ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211b2:	4b8a      	ldr	r3, [pc, #552]	; (80213dc <_dtoa_r+0x2d4>)
 80211b4:	9301      	str	r3, [sp, #4]
 80211b6:	3303      	adds	r3, #3
 80211b8:	e7f3      	b.n	80211a2 <_dtoa_r+0x9a>
 80211ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80211be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80211c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211c6:	d10c      	bne.n	80211e2 <_dtoa_r+0xda>
 80211c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80211ca:	2301      	movs	r3, #1
 80211cc:	6013      	str	r3, [r2, #0]
 80211ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	f000 84d7 	beq.w	8021b84 <_dtoa_r+0xa7c>
 80211d6:	4b83      	ldr	r3, [pc, #524]	; (80213e4 <_dtoa_r+0x2dc>)
 80211d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80211da:	6013      	str	r3, [r2, #0]
 80211dc:	3b01      	subs	r3, #1
 80211de:	9301      	str	r3, [sp, #4]
 80211e0:	e7e1      	b.n	80211a6 <_dtoa_r+0x9e>
 80211e2:	aa0e      	add	r2, sp, #56	; 0x38
 80211e4:	a90f      	add	r1, sp, #60	; 0x3c
 80211e6:	4630      	mov	r0, r6
 80211e8:	eeb0 0b48 	vmov.f64	d0, d8
 80211ec:	f001 f92c 	bl	8022448 <__d2b>
 80211f0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80211f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80211f6:	4605      	mov	r5, r0
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d046      	beq.n	802128a <_dtoa_r+0x182>
 80211fc:	eeb0 7b48 	vmov.f64	d7, d8
 8021200:	ee18 1a90 	vmov	r1, s17
 8021204:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021208:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802120c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8021210:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021214:	2000      	movs	r0, #0
 8021216:	ee07 1a90 	vmov	s15, r1
 802121a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 802121e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80213b8 <_dtoa_r+0x2b0>
 8021222:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021226:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80213c0 <_dtoa_r+0x2b8>
 802122a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802122e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80213c8 <_dtoa_r+0x2c0>
 8021232:	ee07 3a90 	vmov	s15, r3
 8021236:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802123a:	eeb0 7b46 	vmov.f64	d7, d6
 802123e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8021242:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021246:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802124e:	ee16 ba90 	vmov	fp, s13
 8021252:	9009      	str	r0, [sp, #36]	; 0x24
 8021254:	d508      	bpl.n	8021268 <_dtoa_r+0x160>
 8021256:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802125a:	eeb4 6b47 	vcmp.f64	d6, d7
 802125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021262:	bf18      	it	ne
 8021264:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021268:	f1bb 0f16 	cmp.w	fp, #22
 802126c:	d82b      	bhi.n	80212c6 <_dtoa_r+0x1be>
 802126e:	495e      	ldr	r1, [pc, #376]	; (80213e8 <_dtoa_r+0x2e0>)
 8021270:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8021274:	ed91 7b00 	vldr	d7, [r1]
 8021278:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021280:	d501      	bpl.n	8021286 <_dtoa_r+0x17e>
 8021282:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021286:	2100      	movs	r1, #0
 8021288:	e01e      	b.n	80212c8 <_dtoa_r+0x1c0>
 802128a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802128c:	4413      	add	r3, r2
 802128e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8021292:	2920      	cmp	r1, #32
 8021294:	bfc1      	itttt	gt
 8021296:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 802129a:	408c      	lslgt	r4, r1
 802129c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80212a0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80212a4:	bfd6      	itet	le
 80212a6:	f1c1 0120 	rsble	r1, r1, #32
 80212aa:	4321      	orrgt	r1, r4
 80212ac:	fa08 f101 	lslle.w	r1, r8, r1
 80212b0:	ee07 1a90 	vmov	s15, r1
 80212b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80212b8:	3b01      	subs	r3, #1
 80212ba:	ee17 1a90 	vmov	r1, s15
 80212be:	2001      	movs	r0, #1
 80212c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80212c4:	e7a7      	b.n	8021216 <_dtoa_r+0x10e>
 80212c6:	2101      	movs	r1, #1
 80212c8:	1ad2      	subs	r2, r2, r3
 80212ca:	1e53      	subs	r3, r2, #1
 80212cc:	9305      	str	r3, [sp, #20]
 80212ce:	bf45      	ittet	mi
 80212d0:	f1c2 0301 	rsbmi	r3, r2, #1
 80212d4:	9304      	strmi	r3, [sp, #16]
 80212d6:	2300      	movpl	r3, #0
 80212d8:	2300      	movmi	r3, #0
 80212da:	bf4c      	ite	mi
 80212dc:	9305      	strmi	r3, [sp, #20]
 80212de:	9304      	strpl	r3, [sp, #16]
 80212e0:	f1bb 0f00 	cmp.w	fp, #0
 80212e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80212e6:	db18      	blt.n	802131a <_dtoa_r+0x212>
 80212e8:	9b05      	ldr	r3, [sp, #20]
 80212ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80212ee:	445b      	add	r3, fp
 80212f0:	9305      	str	r3, [sp, #20]
 80212f2:	2300      	movs	r3, #0
 80212f4:	9a06      	ldr	r2, [sp, #24]
 80212f6:	2a09      	cmp	r2, #9
 80212f8:	d848      	bhi.n	802138c <_dtoa_r+0x284>
 80212fa:	2a05      	cmp	r2, #5
 80212fc:	bfc4      	itt	gt
 80212fe:	3a04      	subgt	r2, #4
 8021300:	9206      	strgt	r2, [sp, #24]
 8021302:	9a06      	ldr	r2, [sp, #24]
 8021304:	f1a2 0202 	sub.w	r2, r2, #2
 8021308:	bfcc      	ite	gt
 802130a:	2400      	movgt	r4, #0
 802130c:	2401      	movle	r4, #1
 802130e:	2a03      	cmp	r2, #3
 8021310:	d847      	bhi.n	80213a2 <_dtoa_r+0x29a>
 8021312:	e8df f002 	tbb	[pc, r2]
 8021316:	2d0b      	.short	0x2d0b
 8021318:	392b      	.short	0x392b
 802131a:	9b04      	ldr	r3, [sp, #16]
 802131c:	2200      	movs	r2, #0
 802131e:	eba3 030b 	sub.w	r3, r3, fp
 8021322:	9304      	str	r3, [sp, #16]
 8021324:	920a      	str	r2, [sp, #40]	; 0x28
 8021326:	f1cb 0300 	rsb	r3, fp, #0
 802132a:	e7e3      	b.n	80212f4 <_dtoa_r+0x1ec>
 802132c:	2200      	movs	r2, #0
 802132e:	9207      	str	r2, [sp, #28]
 8021330:	9a08      	ldr	r2, [sp, #32]
 8021332:	2a00      	cmp	r2, #0
 8021334:	dc38      	bgt.n	80213a8 <_dtoa_r+0x2a0>
 8021336:	f04f 0a01 	mov.w	sl, #1
 802133a:	46d1      	mov	r9, sl
 802133c:	4652      	mov	r2, sl
 802133e:	f8cd a020 	str.w	sl, [sp, #32]
 8021342:	69f7      	ldr	r7, [r6, #28]
 8021344:	2100      	movs	r1, #0
 8021346:	2004      	movs	r0, #4
 8021348:	f100 0c14 	add.w	ip, r0, #20
 802134c:	4594      	cmp	ip, r2
 802134e:	d930      	bls.n	80213b2 <_dtoa_r+0x2aa>
 8021350:	6079      	str	r1, [r7, #4]
 8021352:	4630      	mov	r0, r6
 8021354:	930d      	str	r3, [sp, #52]	; 0x34
 8021356:	f000 fc9b 	bl	8021c90 <_Balloc>
 802135a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802135c:	9001      	str	r0, [sp, #4]
 802135e:	4602      	mov	r2, r0
 8021360:	2800      	cmp	r0, #0
 8021362:	d145      	bne.n	80213f0 <_dtoa_r+0x2e8>
 8021364:	4b21      	ldr	r3, [pc, #132]	; (80213ec <_dtoa_r+0x2e4>)
 8021366:	f240 11af 	movw	r1, #431	; 0x1af
 802136a:	e6e5      	b.n	8021138 <_dtoa_r+0x30>
 802136c:	2201      	movs	r2, #1
 802136e:	e7de      	b.n	802132e <_dtoa_r+0x226>
 8021370:	2200      	movs	r2, #0
 8021372:	9207      	str	r2, [sp, #28]
 8021374:	9a08      	ldr	r2, [sp, #32]
 8021376:	eb0b 0a02 	add.w	sl, fp, r2
 802137a:	f10a 0901 	add.w	r9, sl, #1
 802137e:	464a      	mov	r2, r9
 8021380:	2a01      	cmp	r2, #1
 8021382:	bfb8      	it	lt
 8021384:	2201      	movlt	r2, #1
 8021386:	e7dc      	b.n	8021342 <_dtoa_r+0x23a>
 8021388:	2201      	movs	r2, #1
 802138a:	e7f2      	b.n	8021372 <_dtoa_r+0x26a>
 802138c:	2401      	movs	r4, #1
 802138e:	2200      	movs	r2, #0
 8021390:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8021394:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8021398:	2100      	movs	r1, #0
 802139a:	46d1      	mov	r9, sl
 802139c:	2212      	movs	r2, #18
 802139e:	9108      	str	r1, [sp, #32]
 80213a0:	e7cf      	b.n	8021342 <_dtoa_r+0x23a>
 80213a2:	2201      	movs	r2, #1
 80213a4:	9207      	str	r2, [sp, #28]
 80213a6:	e7f5      	b.n	8021394 <_dtoa_r+0x28c>
 80213a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80213ac:	46d1      	mov	r9, sl
 80213ae:	4652      	mov	r2, sl
 80213b0:	e7c7      	b.n	8021342 <_dtoa_r+0x23a>
 80213b2:	3101      	adds	r1, #1
 80213b4:	0040      	lsls	r0, r0, #1
 80213b6:	e7c7      	b.n	8021348 <_dtoa_r+0x240>
 80213b8:	636f4361 	.word	0x636f4361
 80213bc:	3fd287a7 	.word	0x3fd287a7
 80213c0:	8b60c8b3 	.word	0x8b60c8b3
 80213c4:	3fc68a28 	.word	0x3fc68a28
 80213c8:	509f79fb 	.word	0x509f79fb
 80213cc:	3fd34413 	.word	0x3fd34413
 80213d0:	08025afc 	.word	0x08025afc
 80213d4:	08025cee 	.word	0x08025cee
 80213d8:	7ff00000 	.word	0x7ff00000
 80213dc:	08025cea 	.word	0x08025cea
 80213e0:	08025ce1 	.word	0x08025ce1
 80213e4:	08025c7d 	.word	0x08025c7d
 80213e8:	08025dd8 	.word	0x08025dd8
 80213ec:	08025d46 	.word	0x08025d46
 80213f0:	69f2      	ldr	r2, [r6, #28]
 80213f2:	9901      	ldr	r1, [sp, #4]
 80213f4:	6011      	str	r1, [r2, #0]
 80213f6:	f1b9 0f0e 	cmp.w	r9, #14
 80213fa:	d86c      	bhi.n	80214d6 <_dtoa_r+0x3ce>
 80213fc:	2c00      	cmp	r4, #0
 80213fe:	d06a      	beq.n	80214d6 <_dtoa_r+0x3ce>
 8021400:	f1bb 0f00 	cmp.w	fp, #0
 8021404:	f340 80a0 	ble.w	8021548 <_dtoa_r+0x440>
 8021408:	4ac1      	ldr	r2, [pc, #772]	; (8021710 <_dtoa_r+0x608>)
 802140a:	f00b 010f 	and.w	r1, fp, #15
 802140e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8021412:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8021416:	ed92 7b00 	vldr	d7, [r2]
 802141a:	ea4f 122b 	mov.w	r2, fp, asr #4
 802141e:	f000 8087 	beq.w	8021530 <_dtoa_r+0x428>
 8021422:	49bc      	ldr	r1, [pc, #752]	; (8021714 <_dtoa_r+0x60c>)
 8021424:	ed91 6b08 	vldr	d6, [r1, #32]
 8021428:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802142c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021430:	f002 020f 	and.w	r2, r2, #15
 8021434:	2103      	movs	r1, #3
 8021436:	48b7      	ldr	r0, [pc, #732]	; (8021714 <_dtoa_r+0x60c>)
 8021438:	2a00      	cmp	r2, #0
 802143a:	d17b      	bne.n	8021534 <_dtoa_r+0x42c>
 802143c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021440:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021444:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802144a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802144e:	2a00      	cmp	r2, #0
 8021450:	f000 80a0 	beq.w	8021594 <_dtoa_r+0x48c>
 8021454:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021458:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021460:	f140 8098 	bpl.w	8021594 <_dtoa_r+0x48c>
 8021464:	f1b9 0f00 	cmp.w	r9, #0
 8021468:	f000 8094 	beq.w	8021594 <_dtoa_r+0x48c>
 802146c:	f1ba 0f00 	cmp.w	sl, #0
 8021470:	dd2f      	ble.n	80214d2 <_dtoa_r+0x3ca>
 8021472:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8021476:	ee27 7b06 	vmul.f64	d7, d7, d6
 802147a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802147e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8021482:	3101      	adds	r1, #1
 8021484:	4654      	mov	r4, sl
 8021486:	ed9d 6b02 	vldr	d6, [sp, #8]
 802148a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802148e:	ee07 1a90 	vmov	s15, r1
 8021492:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021496:	eea7 5b06 	vfma.f64	d5, d7, d6
 802149a:	ee15 7a90 	vmov	r7, s11
 802149e:	ec51 0b15 	vmov	r0, r1, d5
 80214a2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80214a6:	2c00      	cmp	r4, #0
 80214a8:	d177      	bne.n	802159a <_dtoa_r+0x492>
 80214aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80214ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80214b2:	ec41 0b17 	vmov	d7, r0, r1
 80214b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80214ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214be:	f300 826a 	bgt.w	8021996 <_dtoa_r+0x88e>
 80214c2:	eeb1 7b47 	vneg.f64	d7, d7
 80214c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80214ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214ce:	f100 8260 	bmi.w	8021992 <_dtoa_r+0x88a>
 80214d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80214d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80214d8:	2a00      	cmp	r2, #0
 80214da:	f2c0 811d 	blt.w	8021718 <_dtoa_r+0x610>
 80214de:	f1bb 0f0e 	cmp.w	fp, #14
 80214e2:	f300 8119 	bgt.w	8021718 <_dtoa_r+0x610>
 80214e6:	4b8a      	ldr	r3, [pc, #552]	; (8021710 <_dtoa_r+0x608>)
 80214e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80214ec:	ed93 6b00 	vldr	d6, [r3]
 80214f0:	9b08      	ldr	r3, [sp, #32]
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	f280 80b7 	bge.w	8021666 <_dtoa_r+0x55e>
 80214f8:	f1b9 0f00 	cmp.w	r9, #0
 80214fc:	f300 80b3 	bgt.w	8021666 <_dtoa_r+0x55e>
 8021500:	f040 8246 	bne.w	8021990 <_dtoa_r+0x888>
 8021504:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021508:	ee26 6b07 	vmul.f64	d6, d6, d7
 802150c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021510:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021518:	464c      	mov	r4, r9
 802151a:	464f      	mov	r7, r9
 802151c:	f280 821c 	bge.w	8021958 <_dtoa_r+0x850>
 8021520:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021524:	2331      	movs	r3, #49	; 0x31
 8021526:	f808 3b01 	strb.w	r3, [r8], #1
 802152a:	f10b 0b01 	add.w	fp, fp, #1
 802152e:	e218      	b.n	8021962 <_dtoa_r+0x85a>
 8021530:	2102      	movs	r1, #2
 8021532:	e780      	b.n	8021436 <_dtoa_r+0x32e>
 8021534:	07d4      	lsls	r4, r2, #31
 8021536:	d504      	bpl.n	8021542 <_dtoa_r+0x43a>
 8021538:	ed90 6b00 	vldr	d6, [r0]
 802153c:	3101      	adds	r1, #1
 802153e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021542:	1052      	asrs	r2, r2, #1
 8021544:	3008      	adds	r0, #8
 8021546:	e777      	b.n	8021438 <_dtoa_r+0x330>
 8021548:	d022      	beq.n	8021590 <_dtoa_r+0x488>
 802154a:	f1cb 0200 	rsb	r2, fp, #0
 802154e:	4970      	ldr	r1, [pc, #448]	; (8021710 <_dtoa_r+0x608>)
 8021550:	f002 000f 	and.w	r0, r2, #15
 8021554:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021558:	ed91 7b00 	vldr	d7, [r1]
 802155c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8021560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021564:	486b      	ldr	r0, [pc, #428]	; (8021714 <_dtoa_r+0x60c>)
 8021566:	1112      	asrs	r2, r2, #4
 8021568:	2400      	movs	r4, #0
 802156a:	2102      	movs	r1, #2
 802156c:	b92a      	cbnz	r2, 802157a <_dtoa_r+0x472>
 802156e:	2c00      	cmp	r4, #0
 8021570:	f43f af6a 	beq.w	8021448 <_dtoa_r+0x340>
 8021574:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021578:	e766      	b.n	8021448 <_dtoa_r+0x340>
 802157a:	07d7      	lsls	r7, r2, #31
 802157c:	d505      	bpl.n	802158a <_dtoa_r+0x482>
 802157e:	ed90 6b00 	vldr	d6, [r0]
 8021582:	3101      	adds	r1, #1
 8021584:	2401      	movs	r4, #1
 8021586:	ee27 7b06 	vmul.f64	d7, d7, d6
 802158a:	1052      	asrs	r2, r2, #1
 802158c:	3008      	adds	r0, #8
 802158e:	e7ed      	b.n	802156c <_dtoa_r+0x464>
 8021590:	2102      	movs	r1, #2
 8021592:	e759      	b.n	8021448 <_dtoa_r+0x340>
 8021594:	465a      	mov	r2, fp
 8021596:	464c      	mov	r4, r9
 8021598:	e775      	b.n	8021486 <_dtoa_r+0x37e>
 802159a:	ec41 0b17 	vmov	d7, r0, r1
 802159e:	495c      	ldr	r1, [pc, #368]	; (8021710 <_dtoa_r+0x608>)
 80215a0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80215a4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80215a8:	9901      	ldr	r1, [sp, #4]
 80215aa:	440c      	add	r4, r1
 80215ac:	9907      	ldr	r1, [sp, #28]
 80215ae:	b351      	cbz	r1, 8021606 <_dtoa_r+0x4fe>
 80215b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80215b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80215b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80215bc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80215c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80215c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80215c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80215cc:	ee14 1a90 	vmov	r1, s9
 80215d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80215d4:	3130      	adds	r1, #48	; 0x30
 80215d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80215da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80215de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215e2:	f808 1b01 	strb.w	r1, [r8], #1
 80215e6:	d439      	bmi.n	802165c <_dtoa_r+0x554>
 80215e8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80215ec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80215f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215f4:	d472      	bmi.n	80216dc <_dtoa_r+0x5d4>
 80215f6:	45a0      	cmp	r8, r4
 80215f8:	f43f af6b 	beq.w	80214d2 <_dtoa_r+0x3ca>
 80215fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021600:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021604:	e7e0      	b.n	80215c8 <_dtoa_r+0x4c0>
 8021606:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802160a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802160e:	4620      	mov	r0, r4
 8021610:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021614:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021618:	ee14 1a90 	vmov	r1, s9
 802161c:	3130      	adds	r1, #48	; 0x30
 802161e:	f808 1b01 	strb.w	r1, [r8], #1
 8021622:	45a0      	cmp	r8, r4
 8021624:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021628:	ee36 6b45 	vsub.f64	d6, d6, d5
 802162c:	d118      	bne.n	8021660 <_dtoa_r+0x558>
 802162e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021632:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021636:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802163e:	dc4d      	bgt.n	80216dc <_dtoa_r+0x5d4>
 8021640:	ee35 5b47 	vsub.f64	d5, d5, d7
 8021644:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802164c:	f57f af41 	bpl.w	80214d2 <_dtoa_r+0x3ca>
 8021650:	4680      	mov	r8, r0
 8021652:	3801      	subs	r0, #1
 8021654:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021658:	2b30      	cmp	r3, #48	; 0x30
 802165a:	d0f9      	beq.n	8021650 <_dtoa_r+0x548>
 802165c:	4693      	mov	fp, r2
 802165e:	e02a      	b.n	80216b6 <_dtoa_r+0x5ae>
 8021660:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021664:	e7d6      	b.n	8021614 <_dtoa_r+0x50c>
 8021666:	ed9d 7b02 	vldr	d7, [sp, #8]
 802166a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802166e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021672:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8021676:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802167a:	ee15 3a10 	vmov	r3, s10
 802167e:	3330      	adds	r3, #48	; 0x30
 8021680:	f808 3b01 	strb.w	r3, [r8], #1
 8021684:	9b01      	ldr	r3, [sp, #4]
 8021686:	eba8 0303 	sub.w	r3, r8, r3
 802168a:	4599      	cmp	r9, r3
 802168c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021690:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021694:	d133      	bne.n	80216fe <_dtoa_r+0x5f6>
 8021696:	ee37 7b07 	vadd.f64	d7, d7, d7
 802169a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216a2:	dc1a      	bgt.n	80216da <_dtoa_r+0x5d2>
 80216a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80216a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216ac:	d103      	bne.n	80216b6 <_dtoa_r+0x5ae>
 80216ae:	ee15 3a10 	vmov	r3, s10
 80216b2:	07d9      	lsls	r1, r3, #31
 80216b4:	d411      	bmi.n	80216da <_dtoa_r+0x5d2>
 80216b6:	4629      	mov	r1, r5
 80216b8:	4630      	mov	r0, r6
 80216ba:	f000 fb29 	bl	8021d10 <_Bfree>
 80216be:	2300      	movs	r3, #0
 80216c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216c2:	f888 3000 	strb.w	r3, [r8]
 80216c6:	f10b 0301 	add.w	r3, fp, #1
 80216ca:	6013      	str	r3, [r2, #0]
 80216cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	f43f ad69 	beq.w	80211a6 <_dtoa_r+0x9e>
 80216d4:	f8c3 8000 	str.w	r8, [r3]
 80216d8:	e565      	b.n	80211a6 <_dtoa_r+0x9e>
 80216da:	465a      	mov	r2, fp
 80216dc:	4643      	mov	r3, r8
 80216de:	4698      	mov	r8, r3
 80216e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80216e4:	2939      	cmp	r1, #57	; 0x39
 80216e6:	d106      	bne.n	80216f6 <_dtoa_r+0x5ee>
 80216e8:	9901      	ldr	r1, [sp, #4]
 80216ea:	4299      	cmp	r1, r3
 80216ec:	d1f7      	bne.n	80216de <_dtoa_r+0x5d6>
 80216ee:	9801      	ldr	r0, [sp, #4]
 80216f0:	2130      	movs	r1, #48	; 0x30
 80216f2:	3201      	adds	r2, #1
 80216f4:	7001      	strb	r1, [r0, #0]
 80216f6:	7819      	ldrb	r1, [r3, #0]
 80216f8:	3101      	adds	r1, #1
 80216fa:	7019      	strb	r1, [r3, #0]
 80216fc:	e7ae      	b.n	802165c <_dtoa_r+0x554>
 80216fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021702:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802170a:	d1b2      	bne.n	8021672 <_dtoa_r+0x56a>
 802170c:	e7d3      	b.n	80216b6 <_dtoa_r+0x5ae>
 802170e:	bf00      	nop
 8021710:	08025dd8 	.word	0x08025dd8
 8021714:	08025db0 	.word	0x08025db0
 8021718:	9907      	ldr	r1, [sp, #28]
 802171a:	2900      	cmp	r1, #0
 802171c:	f000 80d0 	beq.w	80218c0 <_dtoa_r+0x7b8>
 8021720:	9906      	ldr	r1, [sp, #24]
 8021722:	2901      	cmp	r1, #1
 8021724:	f300 80b4 	bgt.w	8021890 <_dtoa_r+0x788>
 8021728:	9909      	ldr	r1, [sp, #36]	; 0x24
 802172a:	2900      	cmp	r1, #0
 802172c:	f000 80ac 	beq.w	8021888 <_dtoa_r+0x780>
 8021730:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021734:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021738:	461c      	mov	r4, r3
 802173a:	9309      	str	r3, [sp, #36]	; 0x24
 802173c:	9b04      	ldr	r3, [sp, #16]
 802173e:	4413      	add	r3, r2
 8021740:	9304      	str	r3, [sp, #16]
 8021742:	9b05      	ldr	r3, [sp, #20]
 8021744:	2101      	movs	r1, #1
 8021746:	4413      	add	r3, r2
 8021748:	4630      	mov	r0, r6
 802174a:	9305      	str	r3, [sp, #20]
 802174c:	f000 fbe0 	bl	8021f10 <__i2b>
 8021750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021752:	4607      	mov	r7, r0
 8021754:	f1b8 0f00 	cmp.w	r8, #0
 8021758:	d00d      	beq.n	8021776 <_dtoa_r+0x66e>
 802175a:	9a05      	ldr	r2, [sp, #20]
 802175c:	2a00      	cmp	r2, #0
 802175e:	dd0a      	ble.n	8021776 <_dtoa_r+0x66e>
 8021760:	4542      	cmp	r2, r8
 8021762:	9904      	ldr	r1, [sp, #16]
 8021764:	bfa8      	it	ge
 8021766:	4642      	movge	r2, r8
 8021768:	1a89      	subs	r1, r1, r2
 802176a:	9104      	str	r1, [sp, #16]
 802176c:	9905      	ldr	r1, [sp, #20]
 802176e:	eba8 0802 	sub.w	r8, r8, r2
 8021772:	1a8a      	subs	r2, r1, r2
 8021774:	9205      	str	r2, [sp, #20]
 8021776:	b303      	cbz	r3, 80217ba <_dtoa_r+0x6b2>
 8021778:	9a07      	ldr	r2, [sp, #28]
 802177a:	2a00      	cmp	r2, #0
 802177c:	f000 80a5 	beq.w	80218ca <_dtoa_r+0x7c2>
 8021780:	2c00      	cmp	r4, #0
 8021782:	dd13      	ble.n	80217ac <_dtoa_r+0x6a4>
 8021784:	4639      	mov	r1, r7
 8021786:	4622      	mov	r2, r4
 8021788:	4630      	mov	r0, r6
 802178a:	930d      	str	r3, [sp, #52]	; 0x34
 802178c:	f000 fc80 	bl	8022090 <__pow5mult>
 8021790:	462a      	mov	r2, r5
 8021792:	4601      	mov	r1, r0
 8021794:	4607      	mov	r7, r0
 8021796:	4630      	mov	r0, r6
 8021798:	f000 fbd0 	bl	8021f3c <__multiply>
 802179c:	4629      	mov	r1, r5
 802179e:	9009      	str	r0, [sp, #36]	; 0x24
 80217a0:	4630      	mov	r0, r6
 80217a2:	f000 fab5 	bl	8021d10 <_Bfree>
 80217a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80217a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80217aa:	4615      	mov	r5, r2
 80217ac:	1b1a      	subs	r2, r3, r4
 80217ae:	d004      	beq.n	80217ba <_dtoa_r+0x6b2>
 80217b0:	4629      	mov	r1, r5
 80217b2:	4630      	mov	r0, r6
 80217b4:	f000 fc6c 	bl	8022090 <__pow5mult>
 80217b8:	4605      	mov	r5, r0
 80217ba:	2101      	movs	r1, #1
 80217bc:	4630      	mov	r0, r6
 80217be:	f000 fba7 	bl	8021f10 <__i2b>
 80217c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	4604      	mov	r4, r0
 80217c8:	f340 8081 	ble.w	80218ce <_dtoa_r+0x7c6>
 80217cc:	461a      	mov	r2, r3
 80217ce:	4601      	mov	r1, r0
 80217d0:	4630      	mov	r0, r6
 80217d2:	f000 fc5d 	bl	8022090 <__pow5mult>
 80217d6:	9b06      	ldr	r3, [sp, #24]
 80217d8:	2b01      	cmp	r3, #1
 80217da:	4604      	mov	r4, r0
 80217dc:	dd7a      	ble.n	80218d4 <_dtoa_r+0x7cc>
 80217de:	2300      	movs	r3, #0
 80217e0:	9309      	str	r3, [sp, #36]	; 0x24
 80217e2:	6922      	ldr	r2, [r4, #16]
 80217e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80217e8:	6910      	ldr	r0, [r2, #16]
 80217ea:	f000 fb43 	bl	8021e74 <__hi0bits>
 80217ee:	f1c0 0020 	rsb	r0, r0, #32
 80217f2:	9b05      	ldr	r3, [sp, #20]
 80217f4:	4418      	add	r0, r3
 80217f6:	f010 001f 	ands.w	r0, r0, #31
 80217fa:	f000 8093 	beq.w	8021924 <_dtoa_r+0x81c>
 80217fe:	f1c0 0220 	rsb	r2, r0, #32
 8021802:	2a04      	cmp	r2, #4
 8021804:	f340 8085 	ble.w	8021912 <_dtoa_r+0x80a>
 8021808:	9b04      	ldr	r3, [sp, #16]
 802180a:	f1c0 001c 	rsb	r0, r0, #28
 802180e:	4403      	add	r3, r0
 8021810:	9304      	str	r3, [sp, #16]
 8021812:	9b05      	ldr	r3, [sp, #20]
 8021814:	4480      	add	r8, r0
 8021816:	4403      	add	r3, r0
 8021818:	9305      	str	r3, [sp, #20]
 802181a:	9b04      	ldr	r3, [sp, #16]
 802181c:	2b00      	cmp	r3, #0
 802181e:	dd05      	ble.n	802182c <_dtoa_r+0x724>
 8021820:	4629      	mov	r1, r5
 8021822:	461a      	mov	r2, r3
 8021824:	4630      	mov	r0, r6
 8021826:	f000 fc8d 	bl	8022144 <__lshift>
 802182a:	4605      	mov	r5, r0
 802182c:	9b05      	ldr	r3, [sp, #20]
 802182e:	2b00      	cmp	r3, #0
 8021830:	dd05      	ble.n	802183e <_dtoa_r+0x736>
 8021832:	4621      	mov	r1, r4
 8021834:	461a      	mov	r2, r3
 8021836:	4630      	mov	r0, r6
 8021838:	f000 fc84 	bl	8022144 <__lshift>
 802183c:	4604      	mov	r4, r0
 802183e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021840:	2b00      	cmp	r3, #0
 8021842:	d071      	beq.n	8021928 <_dtoa_r+0x820>
 8021844:	4621      	mov	r1, r4
 8021846:	4628      	mov	r0, r5
 8021848:	f000 fce8 	bl	802221c <__mcmp>
 802184c:	2800      	cmp	r0, #0
 802184e:	da6b      	bge.n	8021928 <_dtoa_r+0x820>
 8021850:	2300      	movs	r3, #0
 8021852:	4629      	mov	r1, r5
 8021854:	220a      	movs	r2, #10
 8021856:	4630      	mov	r0, r6
 8021858:	f000 fa7c 	bl	8021d54 <__multadd>
 802185c:	9b07      	ldr	r3, [sp, #28]
 802185e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021862:	4605      	mov	r5, r0
 8021864:	2b00      	cmp	r3, #0
 8021866:	f000 8197 	beq.w	8021b98 <_dtoa_r+0xa90>
 802186a:	4639      	mov	r1, r7
 802186c:	2300      	movs	r3, #0
 802186e:	220a      	movs	r2, #10
 8021870:	4630      	mov	r0, r6
 8021872:	f000 fa6f 	bl	8021d54 <__multadd>
 8021876:	f1ba 0f00 	cmp.w	sl, #0
 802187a:	4607      	mov	r7, r0
 802187c:	f300 8093 	bgt.w	80219a6 <_dtoa_r+0x89e>
 8021880:	9b06      	ldr	r3, [sp, #24]
 8021882:	2b02      	cmp	r3, #2
 8021884:	dc57      	bgt.n	8021936 <_dtoa_r+0x82e>
 8021886:	e08e      	b.n	80219a6 <_dtoa_r+0x89e>
 8021888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802188a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802188e:	e751      	b.n	8021734 <_dtoa_r+0x62c>
 8021890:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8021894:	42a3      	cmp	r3, r4
 8021896:	bfbf      	itttt	lt
 8021898:	1ae2      	sublt	r2, r4, r3
 802189a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802189c:	189b      	addlt	r3, r3, r2
 802189e:	930a      	strlt	r3, [sp, #40]	; 0x28
 80218a0:	bfae      	itee	ge
 80218a2:	1b1c      	subge	r4, r3, r4
 80218a4:	4623      	movlt	r3, r4
 80218a6:	2400      	movlt	r4, #0
 80218a8:	f1b9 0f00 	cmp.w	r9, #0
 80218ac:	bfb5      	itete	lt
 80218ae:	9a04      	ldrlt	r2, [sp, #16]
 80218b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80218b4:	eba2 0809 	sublt.w	r8, r2, r9
 80218b8:	464a      	movge	r2, r9
 80218ba:	bfb8      	it	lt
 80218bc:	2200      	movlt	r2, #0
 80218be:	e73c      	b.n	802173a <_dtoa_r+0x632>
 80218c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80218c4:	9f07      	ldr	r7, [sp, #28]
 80218c6:	461c      	mov	r4, r3
 80218c8:	e744      	b.n	8021754 <_dtoa_r+0x64c>
 80218ca:	461a      	mov	r2, r3
 80218cc:	e770      	b.n	80217b0 <_dtoa_r+0x6a8>
 80218ce:	9b06      	ldr	r3, [sp, #24]
 80218d0:	2b01      	cmp	r3, #1
 80218d2:	dc18      	bgt.n	8021906 <_dtoa_r+0x7fe>
 80218d4:	9b02      	ldr	r3, [sp, #8]
 80218d6:	b9b3      	cbnz	r3, 8021906 <_dtoa_r+0x7fe>
 80218d8:	9b03      	ldr	r3, [sp, #12]
 80218da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80218de:	b9a2      	cbnz	r2, 802190a <_dtoa_r+0x802>
 80218e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80218e4:	0d12      	lsrs	r2, r2, #20
 80218e6:	0512      	lsls	r2, r2, #20
 80218e8:	b18a      	cbz	r2, 802190e <_dtoa_r+0x806>
 80218ea:	9b04      	ldr	r3, [sp, #16]
 80218ec:	3301      	adds	r3, #1
 80218ee:	9304      	str	r3, [sp, #16]
 80218f0:	9b05      	ldr	r3, [sp, #20]
 80218f2:	3301      	adds	r3, #1
 80218f4:	9305      	str	r3, [sp, #20]
 80218f6:	2301      	movs	r3, #1
 80218f8:	9309      	str	r3, [sp, #36]	; 0x24
 80218fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	f47f af70 	bne.w	80217e2 <_dtoa_r+0x6da>
 8021902:	2001      	movs	r0, #1
 8021904:	e775      	b.n	80217f2 <_dtoa_r+0x6ea>
 8021906:	2300      	movs	r3, #0
 8021908:	e7f6      	b.n	80218f8 <_dtoa_r+0x7f0>
 802190a:	9b02      	ldr	r3, [sp, #8]
 802190c:	e7f4      	b.n	80218f8 <_dtoa_r+0x7f0>
 802190e:	9209      	str	r2, [sp, #36]	; 0x24
 8021910:	e7f3      	b.n	80218fa <_dtoa_r+0x7f2>
 8021912:	d082      	beq.n	802181a <_dtoa_r+0x712>
 8021914:	9b04      	ldr	r3, [sp, #16]
 8021916:	321c      	adds	r2, #28
 8021918:	4413      	add	r3, r2
 802191a:	9304      	str	r3, [sp, #16]
 802191c:	9b05      	ldr	r3, [sp, #20]
 802191e:	4490      	add	r8, r2
 8021920:	4413      	add	r3, r2
 8021922:	e779      	b.n	8021818 <_dtoa_r+0x710>
 8021924:	4602      	mov	r2, r0
 8021926:	e7f5      	b.n	8021914 <_dtoa_r+0x80c>
 8021928:	f1b9 0f00 	cmp.w	r9, #0
 802192c:	dc36      	bgt.n	802199c <_dtoa_r+0x894>
 802192e:	9b06      	ldr	r3, [sp, #24]
 8021930:	2b02      	cmp	r3, #2
 8021932:	dd33      	ble.n	802199c <_dtoa_r+0x894>
 8021934:	46ca      	mov	sl, r9
 8021936:	f1ba 0f00 	cmp.w	sl, #0
 802193a:	d10d      	bne.n	8021958 <_dtoa_r+0x850>
 802193c:	4621      	mov	r1, r4
 802193e:	4653      	mov	r3, sl
 8021940:	2205      	movs	r2, #5
 8021942:	4630      	mov	r0, r6
 8021944:	f000 fa06 	bl	8021d54 <__multadd>
 8021948:	4601      	mov	r1, r0
 802194a:	4604      	mov	r4, r0
 802194c:	4628      	mov	r0, r5
 802194e:	f000 fc65 	bl	802221c <__mcmp>
 8021952:	2800      	cmp	r0, #0
 8021954:	f73f ade4 	bgt.w	8021520 <_dtoa_r+0x418>
 8021958:	9b08      	ldr	r3, [sp, #32]
 802195a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802195e:	ea6f 0b03 	mvn.w	fp, r3
 8021962:	f04f 0900 	mov.w	r9, #0
 8021966:	4621      	mov	r1, r4
 8021968:	4630      	mov	r0, r6
 802196a:	f000 f9d1 	bl	8021d10 <_Bfree>
 802196e:	2f00      	cmp	r7, #0
 8021970:	f43f aea1 	beq.w	80216b6 <_dtoa_r+0x5ae>
 8021974:	f1b9 0f00 	cmp.w	r9, #0
 8021978:	d005      	beq.n	8021986 <_dtoa_r+0x87e>
 802197a:	45b9      	cmp	r9, r7
 802197c:	d003      	beq.n	8021986 <_dtoa_r+0x87e>
 802197e:	4649      	mov	r1, r9
 8021980:	4630      	mov	r0, r6
 8021982:	f000 f9c5 	bl	8021d10 <_Bfree>
 8021986:	4639      	mov	r1, r7
 8021988:	4630      	mov	r0, r6
 802198a:	f000 f9c1 	bl	8021d10 <_Bfree>
 802198e:	e692      	b.n	80216b6 <_dtoa_r+0x5ae>
 8021990:	2400      	movs	r4, #0
 8021992:	4627      	mov	r7, r4
 8021994:	e7e0      	b.n	8021958 <_dtoa_r+0x850>
 8021996:	4693      	mov	fp, r2
 8021998:	4627      	mov	r7, r4
 802199a:	e5c1      	b.n	8021520 <_dtoa_r+0x418>
 802199c:	9b07      	ldr	r3, [sp, #28]
 802199e:	46ca      	mov	sl, r9
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	f000 8100 	beq.w	8021ba6 <_dtoa_r+0xa9e>
 80219a6:	f1b8 0f00 	cmp.w	r8, #0
 80219aa:	dd05      	ble.n	80219b8 <_dtoa_r+0x8b0>
 80219ac:	4639      	mov	r1, r7
 80219ae:	4642      	mov	r2, r8
 80219b0:	4630      	mov	r0, r6
 80219b2:	f000 fbc7 	bl	8022144 <__lshift>
 80219b6:	4607      	mov	r7, r0
 80219b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	d05d      	beq.n	8021a7a <_dtoa_r+0x972>
 80219be:	6879      	ldr	r1, [r7, #4]
 80219c0:	4630      	mov	r0, r6
 80219c2:	f000 f965 	bl	8021c90 <_Balloc>
 80219c6:	4680      	mov	r8, r0
 80219c8:	b928      	cbnz	r0, 80219d6 <_dtoa_r+0x8ce>
 80219ca:	4b82      	ldr	r3, [pc, #520]	; (8021bd4 <_dtoa_r+0xacc>)
 80219cc:	4602      	mov	r2, r0
 80219ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80219d2:	f7ff bbb1 	b.w	8021138 <_dtoa_r+0x30>
 80219d6:	693a      	ldr	r2, [r7, #16]
 80219d8:	3202      	adds	r2, #2
 80219da:	0092      	lsls	r2, r2, #2
 80219dc:	f107 010c 	add.w	r1, r7, #12
 80219e0:	300c      	adds	r0, #12
 80219e2:	f7ff fad4 	bl	8020f8e <memcpy>
 80219e6:	2201      	movs	r2, #1
 80219e8:	4641      	mov	r1, r8
 80219ea:	4630      	mov	r0, r6
 80219ec:	f000 fbaa 	bl	8022144 <__lshift>
 80219f0:	9b01      	ldr	r3, [sp, #4]
 80219f2:	3301      	adds	r3, #1
 80219f4:	9304      	str	r3, [sp, #16]
 80219f6:	9b01      	ldr	r3, [sp, #4]
 80219f8:	4453      	add	r3, sl
 80219fa:	9308      	str	r3, [sp, #32]
 80219fc:	9b02      	ldr	r3, [sp, #8]
 80219fe:	f003 0301 	and.w	r3, r3, #1
 8021a02:	46b9      	mov	r9, r7
 8021a04:	9307      	str	r3, [sp, #28]
 8021a06:	4607      	mov	r7, r0
 8021a08:	9b04      	ldr	r3, [sp, #16]
 8021a0a:	4621      	mov	r1, r4
 8021a0c:	3b01      	subs	r3, #1
 8021a0e:	4628      	mov	r0, r5
 8021a10:	9302      	str	r3, [sp, #8]
 8021a12:	f7ff faef 	bl	8020ff4 <quorem>
 8021a16:	4603      	mov	r3, r0
 8021a18:	3330      	adds	r3, #48	; 0x30
 8021a1a:	9005      	str	r0, [sp, #20]
 8021a1c:	4649      	mov	r1, r9
 8021a1e:	4628      	mov	r0, r5
 8021a20:	9309      	str	r3, [sp, #36]	; 0x24
 8021a22:	f000 fbfb 	bl	802221c <__mcmp>
 8021a26:	463a      	mov	r2, r7
 8021a28:	4682      	mov	sl, r0
 8021a2a:	4621      	mov	r1, r4
 8021a2c:	4630      	mov	r0, r6
 8021a2e:	f000 fc11 	bl	8022254 <__mdiff>
 8021a32:	68c2      	ldr	r2, [r0, #12]
 8021a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a36:	4680      	mov	r8, r0
 8021a38:	bb0a      	cbnz	r2, 8021a7e <_dtoa_r+0x976>
 8021a3a:	4601      	mov	r1, r0
 8021a3c:	4628      	mov	r0, r5
 8021a3e:	f000 fbed 	bl	802221c <__mcmp>
 8021a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a44:	4602      	mov	r2, r0
 8021a46:	4641      	mov	r1, r8
 8021a48:	4630      	mov	r0, r6
 8021a4a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8021a4e:	f000 f95f 	bl	8021d10 <_Bfree>
 8021a52:	9b06      	ldr	r3, [sp, #24]
 8021a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a56:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021a5a:	ea43 0102 	orr.w	r1, r3, r2
 8021a5e:	9b07      	ldr	r3, [sp, #28]
 8021a60:	4319      	orrs	r1, r3
 8021a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a64:	d10d      	bne.n	8021a82 <_dtoa_r+0x97a>
 8021a66:	2b39      	cmp	r3, #57	; 0x39
 8021a68:	d029      	beq.n	8021abe <_dtoa_r+0x9b6>
 8021a6a:	f1ba 0f00 	cmp.w	sl, #0
 8021a6e:	dd01      	ble.n	8021a74 <_dtoa_r+0x96c>
 8021a70:	9b05      	ldr	r3, [sp, #20]
 8021a72:	3331      	adds	r3, #49	; 0x31
 8021a74:	9a02      	ldr	r2, [sp, #8]
 8021a76:	7013      	strb	r3, [r2, #0]
 8021a78:	e775      	b.n	8021966 <_dtoa_r+0x85e>
 8021a7a:	4638      	mov	r0, r7
 8021a7c:	e7b8      	b.n	80219f0 <_dtoa_r+0x8e8>
 8021a7e:	2201      	movs	r2, #1
 8021a80:	e7e1      	b.n	8021a46 <_dtoa_r+0x93e>
 8021a82:	f1ba 0f00 	cmp.w	sl, #0
 8021a86:	db06      	blt.n	8021a96 <_dtoa_r+0x98e>
 8021a88:	9906      	ldr	r1, [sp, #24]
 8021a8a:	ea41 0a0a 	orr.w	sl, r1, sl
 8021a8e:	9907      	ldr	r1, [sp, #28]
 8021a90:	ea5a 0a01 	orrs.w	sl, sl, r1
 8021a94:	d120      	bne.n	8021ad8 <_dtoa_r+0x9d0>
 8021a96:	2a00      	cmp	r2, #0
 8021a98:	ddec      	ble.n	8021a74 <_dtoa_r+0x96c>
 8021a9a:	4629      	mov	r1, r5
 8021a9c:	2201      	movs	r2, #1
 8021a9e:	4630      	mov	r0, r6
 8021aa0:	9304      	str	r3, [sp, #16]
 8021aa2:	f000 fb4f 	bl	8022144 <__lshift>
 8021aa6:	4621      	mov	r1, r4
 8021aa8:	4605      	mov	r5, r0
 8021aaa:	f000 fbb7 	bl	802221c <__mcmp>
 8021aae:	2800      	cmp	r0, #0
 8021ab0:	9b04      	ldr	r3, [sp, #16]
 8021ab2:	dc02      	bgt.n	8021aba <_dtoa_r+0x9b2>
 8021ab4:	d1de      	bne.n	8021a74 <_dtoa_r+0x96c>
 8021ab6:	07da      	lsls	r2, r3, #31
 8021ab8:	d5dc      	bpl.n	8021a74 <_dtoa_r+0x96c>
 8021aba:	2b39      	cmp	r3, #57	; 0x39
 8021abc:	d1d8      	bne.n	8021a70 <_dtoa_r+0x968>
 8021abe:	9a02      	ldr	r2, [sp, #8]
 8021ac0:	2339      	movs	r3, #57	; 0x39
 8021ac2:	7013      	strb	r3, [r2, #0]
 8021ac4:	4643      	mov	r3, r8
 8021ac6:	4698      	mov	r8, r3
 8021ac8:	3b01      	subs	r3, #1
 8021aca:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8021ace:	2a39      	cmp	r2, #57	; 0x39
 8021ad0:	d051      	beq.n	8021b76 <_dtoa_r+0xa6e>
 8021ad2:	3201      	adds	r2, #1
 8021ad4:	701a      	strb	r2, [r3, #0]
 8021ad6:	e746      	b.n	8021966 <_dtoa_r+0x85e>
 8021ad8:	2a00      	cmp	r2, #0
 8021ada:	dd03      	ble.n	8021ae4 <_dtoa_r+0x9dc>
 8021adc:	2b39      	cmp	r3, #57	; 0x39
 8021ade:	d0ee      	beq.n	8021abe <_dtoa_r+0x9b6>
 8021ae0:	3301      	adds	r3, #1
 8021ae2:	e7c7      	b.n	8021a74 <_dtoa_r+0x96c>
 8021ae4:	9a04      	ldr	r2, [sp, #16]
 8021ae6:	9908      	ldr	r1, [sp, #32]
 8021ae8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021aec:	428a      	cmp	r2, r1
 8021aee:	d02b      	beq.n	8021b48 <_dtoa_r+0xa40>
 8021af0:	4629      	mov	r1, r5
 8021af2:	2300      	movs	r3, #0
 8021af4:	220a      	movs	r2, #10
 8021af6:	4630      	mov	r0, r6
 8021af8:	f000 f92c 	bl	8021d54 <__multadd>
 8021afc:	45b9      	cmp	r9, r7
 8021afe:	4605      	mov	r5, r0
 8021b00:	f04f 0300 	mov.w	r3, #0
 8021b04:	f04f 020a 	mov.w	r2, #10
 8021b08:	4649      	mov	r1, r9
 8021b0a:	4630      	mov	r0, r6
 8021b0c:	d107      	bne.n	8021b1e <_dtoa_r+0xa16>
 8021b0e:	f000 f921 	bl	8021d54 <__multadd>
 8021b12:	4681      	mov	r9, r0
 8021b14:	4607      	mov	r7, r0
 8021b16:	9b04      	ldr	r3, [sp, #16]
 8021b18:	3301      	adds	r3, #1
 8021b1a:	9304      	str	r3, [sp, #16]
 8021b1c:	e774      	b.n	8021a08 <_dtoa_r+0x900>
 8021b1e:	f000 f919 	bl	8021d54 <__multadd>
 8021b22:	4639      	mov	r1, r7
 8021b24:	4681      	mov	r9, r0
 8021b26:	2300      	movs	r3, #0
 8021b28:	220a      	movs	r2, #10
 8021b2a:	4630      	mov	r0, r6
 8021b2c:	f000 f912 	bl	8021d54 <__multadd>
 8021b30:	4607      	mov	r7, r0
 8021b32:	e7f0      	b.n	8021b16 <_dtoa_r+0xa0e>
 8021b34:	f1ba 0f00 	cmp.w	sl, #0
 8021b38:	9a01      	ldr	r2, [sp, #4]
 8021b3a:	bfcc      	ite	gt
 8021b3c:	46d0      	movgt	r8, sl
 8021b3e:	f04f 0801 	movle.w	r8, #1
 8021b42:	4490      	add	r8, r2
 8021b44:	f04f 0900 	mov.w	r9, #0
 8021b48:	4629      	mov	r1, r5
 8021b4a:	2201      	movs	r2, #1
 8021b4c:	4630      	mov	r0, r6
 8021b4e:	9302      	str	r3, [sp, #8]
 8021b50:	f000 faf8 	bl	8022144 <__lshift>
 8021b54:	4621      	mov	r1, r4
 8021b56:	4605      	mov	r5, r0
 8021b58:	f000 fb60 	bl	802221c <__mcmp>
 8021b5c:	2800      	cmp	r0, #0
 8021b5e:	dcb1      	bgt.n	8021ac4 <_dtoa_r+0x9bc>
 8021b60:	d102      	bne.n	8021b68 <_dtoa_r+0xa60>
 8021b62:	9b02      	ldr	r3, [sp, #8]
 8021b64:	07db      	lsls	r3, r3, #31
 8021b66:	d4ad      	bmi.n	8021ac4 <_dtoa_r+0x9bc>
 8021b68:	4643      	mov	r3, r8
 8021b6a:	4698      	mov	r8, r3
 8021b6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021b70:	2a30      	cmp	r2, #48	; 0x30
 8021b72:	d0fa      	beq.n	8021b6a <_dtoa_r+0xa62>
 8021b74:	e6f7      	b.n	8021966 <_dtoa_r+0x85e>
 8021b76:	9a01      	ldr	r2, [sp, #4]
 8021b78:	429a      	cmp	r2, r3
 8021b7a:	d1a4      	bne.n	8021ac6 <_dtoa_r+0x9be>
 8021b7c:	f10b 0b01 	add.w	fp, fp, #1
 8021b80:	2331      	movs	r3, #49	; 0x31
 8021b82:	e778      	b.n	8021a76 <_dtoa_r+0x96e>
 8021b84:	4b14      	ldr	r3, [pc, #80]	; (8021bd8 <_dtoa_r+0xad0>)
 8021b86:	f7ff bb2a 	b.w	80211de <_dtoa_r+0xd6>
 8021b8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	f47f ab05 	bne.w	802119c <_dtoa_r+0x94>
 8021b92:	4b12      	ldr	r3, [pc, #72]	; (8021bdc <_dtoa_r+0xad4>)
 8021b94:	f7ff bb23 	b.w	80211de <_dtoa_r+0xd6>
 8021b98:	f1ba 0f00 	cmp.w	sl, #0
 8021b9c:	dc03      	bgt.n	8021ba6 <_dtoa_r+0xa9e>
 8021b9e:	9b06      	ldr	r3, [sp, #24]
 8021ba0:	2b02      	cmp	r3, #2
 8021ba2:	f73f aec8 	bgt.w	8021936 <_dtoa_r+0x82e>
 8021ba6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021baa:	4621      	mov	r1, r4
 8021bac:	4628      	mov	r0, r5
 8021bae:	f7ff fa21 	bl	8020ff4 <quorem>
 8021bb2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021bb6:	f808 3b01 	strb.w	r3, [r8], #1
 8021bba:	9a01      	ldr	r2, [sp, #4]
 8021bbc:	eba8 0202 	sub.w	r2, r8, r2
 8021bc0:	4592      	cmp	sl, r2
 8021bc2:	ddb7      	ble.n	8021b34 <_dtoa_r+0xa2c>
 8021bc4:	4629      	mov	r1, r5
 8021bc6:	2300      	movs	r3, #0
 8021bc8:	220a      	movs	r2, #10
 8021bca:	4630      	mov	r0, r6
 8021bcc:	f000 f8c2 	bl	8021d54 <__multadd>
 8021bd0:	4605      	mov	r5, r0
 8021bd2:	e7ea      	b.n	8021baa <_dtoa_r+0xaa2>
 8021bd4:	08025d46 	.word	0x08025d46
 8021bd8:	08025c7c 	.word	0x08025c7c
 8021bdc:	08025ce1 	.word	0x08025ce1

08021be0 <__env_lock>:
 8021be0:	4801      	ldr	r0, [pc, #4]	; (8021be8 <__env_lock+0x8>)
 8021be2:	f7ff b9ca 	b.w	8020f7a <__retarget_lock_acquire_recursive>
 8021be6:	bf00      	nop
 8021be8:	2001700c 	.word	0x2001700c

08021bec <__env_unlock>:
 8021bec:	4801      	ldr	r0, [pc, #4]	; (8021bf4 <__env_unlock+0x8>)
 8021bee:	f7ff b9c5 	b.w	8020f7c <__retarget_lock_release_recursive>
 8021bf2:	bf00      	nop
 8021bf4:	2001700c 	.word	0x2001700c

08021bf8 <_free_r>:
 8021bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021bfa:	2900      	cmp	r1, #0
 8021bfc:	d044      	beq.n	8021c88 <_free_r+0x90>
 8021bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021c02:	9001      	str	r0, [sp, #4]
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	f1a1 0404 	sub.w	r4, r1, #4
 8021c0a:	bfb8      	it	lt
 8021c0c:	18e4      	addlt	r4, r4, r3
 8021c0e:	f7fd fdbd 	bl	801f78c <__malloc_lock>
 8021c12:	4a1e      	ldr	r2, [pc, #120]	; (8021c8c <_free_r+0x94>)
 8021c14:	9801      	ldr	r0, [sp, #4]
 8021c16:	6813      	ldr	r3, [r2, #0]
 8021c18:	b933      	cbnz	r3, 8021c28 <_free_r+0x30>
 8021c1a:	6063      	str	r3, [r4, #4]
 8021c1c:	6014      	str	r4, [r2, #0]
 8021c1e:	b003      	add	sp, #12
 8021c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021c24:	f7fd bdb8 	b.w	801f798 <__malloc_unlock>
 8021c28:	42a3      	cmp	r3, r4
 8021c2a:	d908      	bls.n	8021c3e <_free_r+0x46>
 8021c2c:	6825      	ldr	r5, [r4, #0]
 8021c2e:	1961      	adds	r1, r4, r5
 8021c30:	428b      	cmp	r3, r1
 8021c32:	bf01      	itttt	eq
 8021c34:	6819      	ldreq	r1, [r3, #0]
 8021c36:	685b      	ldreq	r3, [r3, #4]
 8021c38:	1949      	addeq	r1, r1, r5
 8021c3a:	6021      	streq	r1, [r4, #0]
 8021c3c:	e7ed      	b.n	8021c1a <_free_r+0x22>
 8021c3e:	461a      	mov	r2, r3
 8021c40:	685b      	ldr	r3, [r3, #4]
 8021c42:	b10b      	cbz	r3, 8021c48 <_free_r+0x50>
 8021c44:	42a3      	cmp	r3, r4
 8021c46:	d9fa      	bls.n	8021c3e <_free_r+0x46>
 8021c48:	6811      	ldr	r1, [r2, #0]
 8021c4a:	1855      	adds	r5, r2, r1
 8021c4c:	42a5      	cmp	r5, r4
 8021c4e:	d10b      	bne.n	8021c68 <_free_r+0x70>
 8021c50:	6824      	ldr	r4, [r4, #0]
 8021c52:	4421      	add	r1, r4
 8021c54:	1854      	adds	r4, r2, r1
 8021c56:	42a3      	cmp	r3, r4
 8021c58:	6011      	str	r1, [r2, #0]
 8021c5a:	d1e0      	bne.n	8021c1e <_free_r+0x26>
 8021c5c:	681c      	ldr	r4, [r3, #0]
 8021c5e:	685b      	ldr	r3, [r3, #4]
 8021c60:	6053      	str	r3, [r2, #4]
 8021c62:	440c      	add	r4, r1
 8021c64:	6014      	str	r4, [r2, #0]
 8021c66:	e7da      	b.n	8021c1e <_free_r+0x26>
 8021c68:	d902      	bls.n	8021c70 <_free_r+0x78>
 8021c6a:	230c      	movs	r3, #12
 8021c6c:	6003      	str	r3, [r0, #0]
 8021c6e:	e7d6      	b.n	8021c1e <_free_r+0x26>
 8021c70:	6825      	ldr	r5, [r4, #0]
 8021c72:	1961      	adds	r1, r4, r5
 8021c74:	428b      	cmp	r3, r1
 8021c76:	bf04      	itt	eq
 8021c78:	6819      	ldreq	r1, [r3, #0]
 8021c7a:	685b      	ldreq	r3, [r3, #4]
 8021c7c:	6063      	str	r3, [r4, #4]
 8021c7e:	bf04      	itt	eq
 8021c80:	1949      	addeq	r1, r1, r5
 8021c82:	6021      	streq	r1, [r4, #0]
 8021c84:	6054      	str	r4, [r2, #4]
 8021c86:	e7ca      	b.n	8021c1e <_free_r+0x26>
 8021c88:	b003      	add	sp, #12
 8021c8a:	bd30      	pop	{r4, r5, pc}
 8021c8c:	20016ec4 	.word	0x20016ec4

08021c90 <_Balloc>:
 8021c90:	b570      	push	{r4, r5, r6, lr}
 8021c92:	69c6      	ldr	r6, [r0, #28]
 8021c94:	4604      	mov	r4, r0
 8021c96:	460d      	mov	r5, r1
 8021c98:	b976      	cbnz	r6, 8021cb8 <_Balloc+0x28>
 8021c9a:	2010      	movs	r0, #16
 8021c9c:	f7fd fcc6 	bl	801f62c <malloc>
 8021ca0:	4602      	mov	r2, r0
 8021ca2:	61e0      	str	r0, [r4, #28]
 8021ca4:	b920      	cbnz	r0, 8021cb0 <_Balloc+0x20>
 8021ca6:	4b18      	ldr	r3, [pc, #96]	; (8021d08 <_Balloc+0x78>)
 8021ca8:	4818      	ldr	r0, [pc, #96]	; (8021d0c <_Balloc+0x7c>)
 8021caa:	216b      	movs	r1, #107	; 0x6b
 8021cac:	f7ff f984 	bl	8020fb8 <__assert_func>
 8021cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021cb4:	6006      	str	r6, [r0, #0]
 8021cb6:	60c6      	str	r6, [r0, #12]
 8021cb8:	69e6      	ldr	r6, [r4, #28]
 8021cba:	68f3      	ldr	r3, [r6, #12]
 8021cbc:	b183      	cbz	r3, 8021ce0 <_Balloc+0x50>
 8021cbe:	69e3      	ldr	r3, [r4, #28]
 8021cc0:	68db      	ldr	r3, [r3, #12]
 8021cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021cc6:	b9b8      	cbnz	r0, 8021cf8 <_Balloc+0x68>
 8021cc8:	2101      	movs	r1, #1
 8021cca:	fa01 f605 	lsl.w	r6, r1, r5
 8021cce:	1d72      	adds	r2, r6, #5
 8021cd0:	0092      	lsls	r2, r2, #2
 8021cd2:	4620      	mov	r0, r4
 8021cd4:	f7fd fc3a 	bl	801f54c <_calloc_r>
 8021cd8:	b160      	cbz	r0, 8021cf4 <_Balloc+0x64>
 8021cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021cde:	e00e      	b.n	8021cfe <_Balloc+0x6e>
 8021ce0:	2221      	movs	r2, #33	; 0x21
 8021ce2:	2104      	movs	r1, #4
 8021ce4:	4620      	mov	r0, r4
 8021ce6:	f7fd fc31 	bl	801f54c <_calloc_r>
 8021cea:	69e3      	ldr	r3, [r4, #28]
 8021cec:	60f0      	str	r0, [r6, #12]
 8021cee:	68db      	ldr	r3, [r3, #12]
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d1e4      	bne.n	8021cbe <_Balloc+0x2e>
 8021cf4:	2000      	movs	r0, #0
 8021cf6:	bd70      	pop	{r4, r5, r6, pc}
 8021cf8:	6802      	ldr	r2, [r0, #0]
 8021cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021cfe:	2300      	movs	r3, #0
 8021d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021d04:	e7f7      	b.n	8021cf6 <_Balloc+0x66>
 8021d06:	bf00      	nop
 8021d08:	08025afc 	.word	0x08025afc
 8021d0c:	08025d57 	.word	0x08025d57

08021d10 <_Bfree>:
 8021d10:	b570      	push	{r4, r5, r6, lr}
 8021d12:	69c6      	ldr	r6, [r0, #28]
 8021d14:	4605      	mov	r5, r0
 8021d16:	460c      	mov	r4, r1
 8021d18:	b976      	cbnz	r6, 8021d38 <_Bfree+0x28>
 8021d1a:	2010      	movs	r0, #16
 8021d1c:	f7fd fc86 	bl	801f62c <malloc>
 8021d20:	4602      	mov	r2, r0
 8021d22:	61e8      	str	r0, [r5, #28]
 8021d24:	b920      	cbnz	r0, 8021d30 <_Bfree+0x20>
 8021d26:	4b09      	ldr	r3, [pc, #36]	; (8021d4c <_Bfree+0x3c>)
 8021d28:	4809      	ldr	r0, [pc, #36]	; (8021d50 <_Bfree+0x40>)
 8021d2a:	218f      	movs	r1, #143	; 0x8f
 8021d2c:	f7ff f944 	bl	8020fb8 <__assert_func>
 8021d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021d34:	6006      	str	r6, [r0, #0]
 8021d36:	60c6      	str	r6, [r0, #12]
 8021d38:	b13c      	cbz	r4, 8021d4a <_Bfree+0x3a>
 8021d3a:	69eb      	ldr	r3, [r5, #28]
 8021d3c:	6862      	ldr	r2, [r4, #4]
 8021d3e:	68db      	ldr	r3, [r3, #12]
 8021d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021d44:	6021      	str	r1, [r4, #0]
 8021d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021d4a:	bd70      	pop	{r4, r5, r6, pc}
 8021d4c:	08025afc 	.word	0x08025afc
 8021d50:	08025d57 	.word	0x08025d57

08021d54 <__multadd>:
 8021d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d58:	690d      	ldr	r5, [r1, #16]
 8021d5a:	4607      	mov	r7, r0
 8021d5c:	460c      	mov	r4, r1
 8021d5e:	461e      	mov	r6, r3
 8021d60:	f101 0c14 	add.w	ip, r1, #20
 8021d64:	2000      	movs	r0, #0
 8021d66:	f8dc 3000 	ldr.w	r3, [ip]
 8021d6a:	b299      	uxth	r1, r3
 8021d6c:	fb02 6101 	mla	r1, r2, r1, r6
 8021d70:	0c1e      	lsrs	r6, r3, #16
 8021d72:	0c0b      	lsrs	r3, r1, #16
 8021d74:	fb02 3306 	mla	r3, r2, r6, r3
 8021d78:	b289      	uxth	r1, r1
 8021d7a:	3001      	adds	r0, #1
 8021d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021d80:	4285      	cmp	r5, r0
 8021d82:	f84c 1b04 	str.w	r1, [ip], #4
 8021d86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021d8a:	dcec      	bgt.n	8021d66 <__multadd+0x12>
 8021d8c:	b30e      	cbz	r6, 8021dd2 <__multadd+0x7e>
 8021d8e:	68a3      	ldr	r3, [r4, #8]
 8021d90:	42ab      	cmp	r3, r5
 8021d92:	dc19      	bgt.n	8021dc8 <__multadd+0x74>
 8021d94:	6861      	ldr	r1, [r4, #4]
 8021d96:	4638      	mov	r0, r7
 8021d98:	3101      	adds	r1, #1
 8021d9a:	f7ff ff79 	bl	8021c90 <_Balloc>
 8021d9e:	4680      	mov	r8, r0
 8021da0:	b928      	cbnz	r0, 8021dae <__multadd+0x5a>
 8021da2:	4602      	mov	r2, r0
 8021da4:	4b0c      	ldr	r3, [pc, #48]	; (8021dd8 <__multadd+0x84>)
 8021da6:	480d      	ldr	r0, [pc, #52]	; (8021ddc <__multadd+0x88>)
 8021da8:	21ba      	movs	r1, #186	; 0xba
 8021daa:	f7ff f905 	bl	8020fb8 <__assert_func>
 8021dae:	6922      	ldr	r2, [r4, #16]
 8021db0:	3202      	adds	r2, #2
 8021db2:	f104 010c 	add.w	r1, r4, #12
 8021db6:	0092      	lsls	r2, r2, #2
 8021db8:	300c      	adds	r0, #12
 8021dba:	f7ff f8e8 	bl	8020f8e <memcpy>
 8021dbe:	4621      	mov	r1, r4
 8021dc0:	4638      	mov	r0, r7
 8021dc2:	f7ff ffa5 	bl	8021d10 <_Bfree>
 8021dc6:	4644      	mov	r4, r8
 8021dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021dcc:	3501      	adds	r5, #1
 8021dce:	615e      	str	r6, [r3, #20]
 8021dd0:	6125      	str	r5, [r4, #16]
 8021dd2:	4620      	mov	r0, r4
 8021dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dd8:	08025d46 	.word	0x08025d46
 8021ddc:	08025d57 	.word	0x08025d57

08021de0 <__s2b>:
 8021de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021de4:	460c      	mov	r4, r1
 8021de6:	4615      	mov	r5, r2
 8021de8:	461f      	mov	r7, r3
 8021dea:	2209      	movs	r2, #9
 8021dec:	3308      	adds	r3, #8
 8021dee:	4606      	mov	r6, r0
 8021df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8021df4:	2100      	movs	r1, #0
 8021df6:	2201      	movs	r2, #1
 8021df8:	429a      	cmp	r2, r3
 8021dfa:	db09      	blt.n	8021e10 <__s2b+0x30>
 8021dfc:	4630      	mov	r0, r6
 8021dfe:	f7ff ff47 	bl	8021c90 <_Balloc>
 8021e02:	b940      	cbnz	r0, 8021e16 <__s2b+0x36>
 8021e04:	4602      	mov	r2, r0
 8021e06:	4b19      	ldr	r3, [pc, #100]	; (8021e6c <__s2b+0x8c>)
 8021e08:	4819      	ldr	r0, [pc, #100]	; (8021e70 <__s2b+0x90>)
 8021e0a:	21d3      	movs	r1, #211	; 0xd3
 8021e0c:	f7ff f8d4 	bl	8020fb8 <__assert_func>
 8021e10:	0052      	lsls	r2, r2, #1
 8021e12:	3101      	adds	r1, #1
 8021e14:	e7f0      	b.n	8021df8 <__s2b+0x18>
 8021e16:	9b08      	ldr	r3, [sp, #32]
 8021e18:	6143      	str	r3, [r0, #20]
 8021e1a:	2d09      	cmp	r5, #9
 8021e1c:	f04f 0301 	mov.w	r3, #1
 8021e20:	6103      	str	r3, [r0, #16]
 8021e22:	dd16      	ble.n	8021e52 <__s2b+0x72>
 8021e24:	f104 0909 	add.w	r9, r4, #9
 8021e28:	46c8      	mov	r8, r9
 8021e2a:	442c      	add	r4, r5
 8021e2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021e30:	4601      	mov	r1, r0
 8021e32:	3b30      	subs	r3, #48	; 0x30
 8021e34:	220a      	movs	r2, #10
 8021e36:	4630      	mov	r0, r6
 8021e38:	f7ff ff8c 	bl	8021d54 <__multadd>
 8021e3c:	45a0      	cmp	r8, r4
 8021e3e:	d1f5      	bne.n	8021e2c <__s2b+0x4c>
 8021e40:	f1a5 0408 	sub.w	r4, r5, #8
 8021e44:	444c      	add	r4, r9
 8021e46:	1b2d      	subs	r5, r5, r4
 8021e48:	1963      	adds	r3, r4, r5
 8021e4a:	42bb      	cmp	r3, r7
 8021e4c:	db04      	blt.n	8021e58 <__s2b+0x78>
 8021e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e52:	340a      	adds	r4, #10
 8021e54:	2509      	movs	r5, #9
 8021e56:	e7f6      	b.n	8021e46 <__s2b+0x66>
 8021e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021e5c:	4601      	mov	r1, r0
 8021e5e:	3b30      	subs	r3, #48	; 0x30
 8021e60:	220a      	movs	r2, #10
 8021e62:	4630      	mov	r0, r6
 8021e64:	f7ff ff76 	bl	8021d54 <__multadd>
 8021e68:	e7ee      	b.n	8021e48 <__s2b+0x68>
 8021e6a:	bf00      	nop
 8021e6c:	08025d46 	.word	0x08025d46
 8021e70:	08025d57 	.word	0x08025d57

08021e74 <__hi0bits>:
 8021e74:	0c03      	lsrs	r3, r0, #16
 8021e76:	041b      	lsls	r3, r3, #16
 8021e78:	b9d3      	cbnz	r3, 8021eb0 <__hi0bits+0x3c>
 8021e7a:	0400      	lsls	r0, r0, #16
 8021e7c:	2310      	movs	r3, #16
 8021e7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021e82:	bf04      	itt	eq
 8021e84:	0200      	lsleq	r0, r0, #8
 8021e86:	3308      	addeq	r3, #8
 8021e88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021e8c:	bf04      	itt	eq
 8021e8e:	0100      	lsleq	r0, r0, #4
 8021e90:	3304      	addeq	r3, #4
 8021e92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021e96:	bf04      	itt	eq
 8021e98:	0080      	lsleq	r0, r0, #2
 8021e9a:	3302      	addeq	r3, #2
 8021e9c:	2800      	cmp	r0, #0
 8021e9e:	db05      	blt.n	8021eac <__hi0bits+0x38>
 8021ea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021ea4:	f103 0301 	add.w	r3, r3, #1
 8021ea8:	bf08      	it	eq
 8021eaa:	2320      	moveq	r3, #32
 8021eac:	4618      	mov	r0, r3
 8021eae:	4770      	bx	lr
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	e7e4      	b.n	8021e7e <__hi0bits+0xa>

08021eb4 <__lo0bits>:
 8021eb4:	6803      	ldr	r3, [r0, #0]
 8021eb6:	f013 0207 	ands.w	r2, r3, #7
 8021eba:	d00c      	beq.n	8021ed6 <__lo0bits+0x22>
 8021ebc:	07d9      	lsls	r1, r3, #31
 8021ebe:	d422      	bmi.n	8021f06 <__lo0bits+0x52>
 8021ec0:	079a      	lsls	r2, r3, #30
 8021ec2:	bf49      	itett	mi
 8021ec4:	085b      	lsrmi	r3, r3, #1
 8021ec6:	089b      	lsrpl	r3, r3, #2
 8021ec8:	6003      	strmi	r3, [r0, #0]
 8021eca:	2201      	movmi	r2, #1
 8021ecc:	bf5c      	itt	pl
 8021ece:	6003      	strpl	r3, [r0, #0]
 8021ed0:	2202      	movpl	r2, #2
 8021ed2:	4610      	mov	r0, r2
 8021ed4:	4770      	bx	lr
 8021ed6:	b299      	uxth	r1, r3
 8021ed8:	b909      	cbnz	r1, 8021ede <__lo0bits+0x2a>
 8021eda:	0c1b      	lsrs	r3, r3, #16
 8021edc:	2210      	movs	r2, #16
 8021ede:	b2d9      	uxtb	r1, r3
 8021ee0:	b909      	cbnz	r1, 8021ee6 <__lo0bits+0x32>
 8021ee2:	3208      	adds	r2, #8
 8021ee4:	0a1b      	lsrs	r3, r3, #8
 8021ee6:	0719      	lsls	r1, r3, #28
 8021ee8:	bf04      	itt	eq
 8021eea:	091b      	lsreq	r3, r3, #4
 8021eec:	3204      	addeq	r2, #4
 8021eee:	0799      	lsls	r1, r3, #30
 8021ef0:	bf04      	itt	eq
 8021ef2:	089b      	lsreq	r3, r3, #2
 8021ef4:	3202      	addeq	r2, #2
 8021ef6:	07d9      	lsls	r1, r3, #31
 8021ef8:	d403      	bmi.n	8021f02 <__lo0bits+0x4e>
 8021efa:	085b      	lsrs	r3, r3, #1
 8021efc:	f102 0201 	add.w	r2, r2, #1
 8021f00:	d003      	beq.n	8021f0a <__lo0bits+0x56>
 8021f02:	6003      	str	r3, [r0, #0]
 8021f04:	e7e5      	b.n	8021ed2 <__lo0bits+0x1e>
 8021f06:	2200      	movs	r2, #0
 8021f08:	e7e3      	b.n	8021ed2 <__lo0bits+0x1e>
 8021f0a:	2220      	movs	r2, #32
 8021f0c:	e7e1      	b.n	8021ed2 <__lo0bits+0x1e>
	...

08021f10 <__i2b>:
 8021f10:	b510      	push	{r4, lr}
 8021f12:	460c      	mov	r4, r1
 8021f14:	2101      	movs	r1, #1
 8021f16:	f7ff febb 	bl	8021c90 <_Balloc>
 8021f1a:	4602      	mov	r2, r0
 8021f1c:	b928      	cbnz	r0, 8021f2a <__i2b+0x1a>
 8021f1e:	4b05      	ldr	r3, [pc, #20]	; (8021f34 <__i2b+0x24>)
 8021f20:	4805      	ldr	r0, [pc, #20]	; (8021f38 <__i2b+0x28>)
 8021f22:	f240 1145 	movw	r1, #325	; 0x145
 8021f26:	f7ff f847 	bl	8020fb8 <__assert_func>
 8021f2a:	2301      	movs	r3, #1
 8021f2c:	6144      	str	r4, [r0, #20]
 8021f2e:	6103      	str	r3, [r0, #16]
 8021f30:	bd10      	pop	{r4, pc}
 8021f32:	bf00      	nop
 8021f34:	08025d46 	.word	0x08025d46
 8021f38:	08025d57 	.word	0x08025d57

08021f3c <__multiply>:
 8021f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f40:	4691      	mov	r9, r2
 8021f42:	690a      	ldr	r2, [r1, #16]
 8021f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021f48:	429a      	cmp	r2, r3
 8021f4a:	bfb8      	it	lt
 8021f4c:	460b      	movlt	r3, r1
 8021f4e:	460c      	mov	r4, r1
 8021f50:	bfbc      	itt	lt
 8021f52:	464c      	movlt	r4, r9
 8021f54:	4699      	movlt	r9, r3
 8021f56:	6927      	ldr	r7, [r4, #16]
 8021f58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021f5c:	68a3      	ldr	r3, [r4, #8]
 8021f5e:	6861      	ldr	r1, [r4, #4]
 8021f60:	eb07 060a 	add.w	r6, r7, sl
 8021f64:	42b3      	cmp	r3, r6
 8021f66:	b085      	sub	sp, #20
 8021f68:	bfb8      	it	lt
 8021f6a:	3101      	addlt	r1, #1
 8021f6c:	f7ff fe90 	bl	8021c90 <_Balloc>
 8021f70:	b930      	cbnz	r0, 8021f80 <__multiply+0x44>
 8021f72:	4602      	mov	r2, r0
 8021f74:	4b44      	ldr	r3, [pc, #272]	; (8022088 <__multiply+0x14c>)
 8021f76:	4845      	ldr	r0, [pc, #276]	; (802208c <__multiply+0x150>)
 8021f78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021f7c:	f7ff f81c 	bl	8020fb8 <__assert_func>
 8021f80:	f100 0514 	add.w	r5, r0, #20
 8021f84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021f88:	462b      	mov	r3, r5
 8021f8a:	2200      	movs	r2, #0
 8021f8c:	4543      	cmp	r3, r8
 8021f8e:	d321      	bcc.n	8021fd4 <__multiply+0x98>
 8021f90:	f104 0314 	add.w	r3, r4, #20
 8021f94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021f98:	f109 0314 	add.w	r3, r9, #20
 8021f9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021fa0:	9202      	str	r2, [sp, #8]
 8021fa2:	1b3a      	subs	r2, r7, r4
 8021fa4:	3a15      	subs	r2, #21
 8021fa6:	f022 0203 	bic.w	r2, r2, #3
 8021faa:	3204      	adds	r2, #4
 8021fac:	f104 0115 	add.w	r1, r4, #21
 8021fb0:	428f      	cmp	r7, r1
 8021fb2:	bf38      	it	cc
 8021fb4:	2204      	movcc	r2, #4
 8021fb6:	9201      	str	r2, [sp, #4]
 8021fb8:	9a02      	ldr	r2, [sp, #8]
 8021fba:	9303      	str	r3, [sp, #12]
 8021fbc:	429a      	cmp	r2, r3
 8021fbe:	d80c      	bhi.n	8021fda <__multiply+0x9e>
 8021fc0:	2e00      	cmp	r6, #0
 8021fc2:	dd03      	ble.n	8021fcc <__multiply+0x90>
 8021fc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d05b      	beq.n	8022084 <__multiply+0x148>
 8021fcc:	6106      	str	r6, [r0, #16]
 8021fce:	b005      	add	sp, #20
 8021fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fd4:	f843 2b04 	str.w	r2, [r3], #4
 8021fd8:	e7d8      	b.n	8021f8c <__multiply+0x50>
 8021fda:	f8b3 a000 	ldrh.w	sl, [r3]
 8021fde:	f1ba 0f00 	cmp.w	sl, #0
 8021fe2:	d024      	beq.n	802202e <__multiply+0xf2>
 8021fe4:	f104 0e14 	add.w	lr, r4, #20
 8021fe8:	46a9      	mov	r9, r5
 8021fea:	f04f 0c00 	mov.w	ip, #0
 8021fee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021ff2:	f8d9 1000 	ldr.w	r1, [r9]
 8021ff6:	fa1f fb82 	uxth.w	fp, r2
 8021ffa:	b289      	uxth	r1, r1
 8021ffc:	fb0a 110b 	mla	r1, sl, fp, r1
 8022000:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022004:	f8d9 2000 	ldr.w	r2, [r9]
 8022008:	4461      	add	r1, ip
 802200a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802200e:	fb0a c20b 	mla	r2, sl, fp, ip
 8022012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022016:	b289      	uxth	r1, r1
 8022018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802201c:	4577      	cmp	r7, lr
 802201e:	f849 1b04 	str.w	r1, [r9], #4
 8022022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022026:	d8e2      	bhi.n	8021fee <__multiply+0xb2>
 8022028:	9a01      	ldr	r2, [sp, #4]
 802202a:	f845 c002 	str.w	ip, [r5, r2]
 802202e:	9a03      	ldr	r2, [sp, #12]
 8022030:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022034:	3304      	adds	r3, #4
 8022036:	f1b9 0f00 	cmp.w	r9, #0
 802203a:	d021      	beq.n	8022080 <__multiply+0x144>
 802203c:	6829      	ldr	r1, [r5, #0]
 802203e:	f104 0c14 	add.w	ip, r4, #20
 8022042:	46ae      	mov	lr, r5
 8022044:	f04f 0a00 	mov.w	sl, #0
 8022048:	f8bc b000 	ldrh.w	fp, [ip]
 802204c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022050:	fb09 220b 	mla	r2, r9, fp, r2
 8022054:	4452      	add	r2, sl
 8022056:	b289      	uxth	r1, r1
 8022058:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802205c:	f84e 1b04 	str.w	r1, [lr], #4
 8022060:	f85c 1b04 	ldr.w	r1, [ip], #4
 8022064:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022068:	f8be 1000 	ldrh.w	r1, [lr]
 802206c:	fb09 110a 	mla	r1, r9, sl, r1
 8022070:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8022074:	4567      	cmp	r7, ip
 8022076:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802207a:	d8e5      	bhi.n	8022048 <__multiply+0x10c>
 802207c:	9a01      	ldr	r2, [sp, #4]
 802207e:	50a9      	str	r1, [r5, r2]
 8022080:	3504      	adds	r5, #4
 8022082:	e799      	b.n	8021fb8 <__multiply+0x7c>
 8022084:	3e01      	subs	r6, #1
 8022086:	e79b      	b.n	8021fc0 <__multiply+0x84>
 8022088:	08025d46 	.word	0x08025d46
 802208c:	08025d57 	.word	0x08025d57

08022090 <__pow5mult>:
 8022090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022094:	4615      	mov	r5, r2
 8022096:	f012 0203 	ands.w	r2, r2, #3
 802209a:	4606      	mov	r6, r0
 802209c:	460f      	mov	r7, r1
 802209e:	d007      	beq.n	80220b0 <__pow5mult+0x20>
 80220a0:	4c25      	ldr	r4, [pc, #148]	; (8022138 <__pow5mult+0xa8>)
 80220a2:	3a01      	subs	r2, #1
 80220a4:	2300      	movs	r3, #0
 80220a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80220aa:	f7ff fe53 	bl	8021d54 <__multadd>
 80220ae:	4607      	mov	r7, r0
 80220b0:	10ad      	asrs	r5, r5, #2
 80220b2:	d03d      	beq.n	8022130 <__pow5mult+0xa0>
 80220b4:	69f4      	ldr	r4, [r6, #28]
 80220b6:	b97c      	cbnz	r4, 80220d8 <__pow5mult+0x48>
 80220b8:	2010      	movs	r0, #16
 80220ba:	f7fd fab7 	bl	801f62c <malloc>
 80220be:	4602      	mov	r2, r0
 80220c0:	61f0      	str	r0, [r6, #28]
 80220c2:	b928      	cbnz	r0, 80220d0 <__pow5mult+0x40>
 80220c4:	4b1d      	ldr	r3, [pc, #116]	; (802213c <__pow5mult+0xac>)
 80220c6:	481e      	ldr	r0, [pc, #120]	; (8022140 <__pow5mult+0xb0>)
 80220c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80220cc:	f7fe ff74 	bl	8020fb8 <__assert_func>
 80220d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80220d4:	6004      	str	r4, [r0, #0]
 80220d6:	60c4      	str	r4, [r0, #12]
 80220d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80220dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80220e0:	b94c      	cbnz	r4, 80220f6 <__pow5mult+0x66>
 80220e2:	f240 2171 	movw	r1, #625	; 0x271
 80220e6:	4630      	mov	r0, r6
 80220e8:	f7ff ff12 	bl	8021f10 <__i2b>
 80220ec:	2300      	movs	r3, #0
 80220ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80220f2:	4604      	mov	r4, r0
 80220f4:	6003      	str	r3, [r0, #0]
 80220f6:	f04f 0900 	mov.w	r9, #0
 80220fa:	07eb      	lsls	r3, r5, #31
 80220fc:	d50a      	bpl.n	8022114 <__pow5mult+0x84>
 80220fe:	4639      	mov	r1, r7
 8022100:	4622      	mov	r2, r4
 8022102:	4630      	mov	r0, r6
 8022104:	f7ff ff1a 	bl	8021f3c <__multiply>
 8022108:	4639      	mov	r1, r7
 802210a:	4680      	mov	r8, r0
 802210c:	4630      	mov	r0, r6
 802210e:	f7ff fdff 	bl	8021d10 <_Bfree>
 8022112:	4647      	mov	r7, r8
 8022114:	106d      	asrs	r5, r5, #1
 8022116:	d00b      	beq.n	8022130 <__pow5mult+0xa0>
 8022118:	6820      	ldr	r0, [r4, #0]
 802211a:	b938      	cbnz	r0, 802212c <__pow5mult+0x9c>
 802211c:	4622      	mov	r2, r4
 802211e:	4621      	mov	r1, r4
 8022120:	4630      	mov	r0, r6
 8022122:	f7ff ff0b 	bl	8021f3c <__multiply>
 8022126:	6020      	str	r0, [r4, #0]
 8022128:	f8c0 9000 	str.w	r9, [r0]
 802212c:	4604      	mov	r4, r0
 802212e:	e7e4      	b.n	80220fa <__pow5mult+0x6a>
 8022130:	4638      	mov	r0, r7
 8022132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022136:	bf00      	nop
 8022138:	08025ea0 	.word	0x08025ea0
 802213c:	08025afc 	.word	0x08025afc
 8022140:	08025d57 	.word	0x08025d57

08022144 <__lshift>:
 8022144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022148:	460c      	mov	r4, r1
 802214a:	6849      	ldr	r1, [r1, #4]
 802214c:	6923      	ldr	r3, [r4, #16]
 802214e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022152:	68a3      	ldr	r3, [r4, #8]
 8022154:	4607      	mov	r7, r0
 8022156:	4691      	mov	r9, r2
 8022158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802215c:	f108 0601 	add.w	r6, r8, #1
 8022160:	42b3      	cmp	r3, r6
 8022162:	db0b      	blt.n	802217c <__lshift+0x38>
 8022164:	4638      	mov	r0, r7
 8022166:	f7ff fd93 	bl	8021c90 <_Balloc>
 802216a:	4605      	mov	r5, r0
 802216c:	b948      	cbnz	r0, 8022182 <__lshift+0x3e>
 802216e:	4602      	mov	r2, r0
 8022170:	4b28      	ldr	r3, [pc, #160]	; (8022214 <__lshift+0xd0>)
 8022172:	4829      	ldr	r0, [pc, #164]	; (8022218 <__lshift+0xd4>)
 8022174:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8022178:	f7fe ff1e 	bl	8020fb8 <__assert_func>
 802217c:	3101      	adds	r1, #1
 802217e:	005b      	lsls	r3, r3, #1
 8022180:	e7ee      	b.n	8022160 <__lshift+0x1c>
 8022182:	2300      	movs	r3, #0
 8022184:	f100 0114 	add.w	r1, r0, #20
 8022188:	f100 0210 	add.w	r2, r0, #16
 802218c:	4618      	mov	r0, r3
 802218e:	4553      	cmp	r3, sl
 8022190:	db33      	blt.n	80221fa <__lshift+0xb6>
 8022192:	6920      	ldr	r0, [r4, #16]
 8022194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022198:	f104 0314 	add.w	r3, r4, #20
 802219c:	f019 091f 	ands.w	r9, r9, #31
 80221a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80221a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80221a8:	d02b      	beq.n	8022202 <__lshift+0xbe>
 80221aa:	f1c9 0e20 	rsb	lr, r9, #32
 80221ae:	468a      	mov	sl, r1
 80221b0:	2200      	movs	r2, #0
 80221b2:	6818      	ldr	r0, [r3, #0]
 80221b4:	fa00 f009 	lsl.w	r0, r0, r9
 80221b8:	4310      	orrs	r0, r2
 80221ba:	f84a 0b04 	str.w	r0, [sl], #4
 80221be:	f853 2b04 	ldr.w	r2, [r3], #4
 80221c2:	459c      	cmp	ip, r3
 80221c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80221c8:	d8f3      	bhi.n	80221b2 <__lshift+0x6e>
 80221ca:	ebac 0304 	sub.w	r3, ip, r4
 80221ce:	3b15      	subs	r3, #21
 80221d0:	f023 0303 	bic.w	r3, r3, #3
 80221d4:	3304      	adds	r3, #4
 80221d6:	f104 0015 	add.w	r0, r4, #21
 80221da:	4584      	cmp	ip, r0
 80221dc:	bf38      	it	cc
 80221de:	2304      	movcc	r3, #4
 80221e0:	50ca      	str	r2, [r1, r3]
 80221e2:	b10a      	cbz	r2, 80221e8 <__lshift+0xa4>
 80221e4:	f108 0602 	add.w	r6, r8, #2
 80221e8:	3e01      	subs	r6, #1
 80221ea:	4638      	mov	r0, r7
 80221ec:	612e      	str	r6, [r5, #16]
 80221ee:	4621      	mov	r1, r4
 80221f0:	f7ff fd8e 	bl	8021d10 <_Bfree>
 80221f4:	4628      	mov	r0, r5
 80221f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80221fe:	3301      	adds	r3, #1
 8022200:	e7c5      	b.n	802218e <__lshift+0x4a>
 8022202:	3904      	subs	r1, #4
 8022204:	f853 2b04 	ldr.w	r2, [r3], #4
 8022208:	f841 2f04 	str.w	r2, [r1, #4]!
 802220c:	459c      	cmp	ip, r3
 802220e:	d8f9      	bhi.n	8022204 <__lshift+0xc0>
 8022210:	e7ea      	b.n	80221e8 <__lshift+0xa4>
 8022212:	bf00      	nop
 8022214:	08025d46 	.word	0x08025d46
 8022218:	08025d57 	.word	0x08025d57

0802221c <__mcmp>:
 802221c:	b530      	push	{r4, r5, lr}
 802221e:	6902      	ldr	r2, [r0, #16]
 8022220:	690c      	ldr	r4, [r1, #16]
 8022222:	1b12      	subs	r2, r2, r4
 8022224:	d10e      	bne.n	8022244 <__mcmp+0x28>
 8022226:	f100 0314 	add.w	r3, r0, #20
 802222a:	3114      	adds	r1, #20
 802222c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802223c:	42a5      	cmp	r5, r4
 802223e:	d003      	beq.n	8022248 <__mcmp+0x2c>
 8022240:	d305      	bcc.n	802224e <__mcmp+0x32>
 8022242:	2201      	movs	r2, #1
 8022244:	4610      	mov	r0, r2
 8022246:	bd30      	pop	{r4, r5, pc}
 8022248:	4283      	cmp	r3, r0
 802224a:	d3f3      	bcc.n	8022234 <__mcmp+0x18>
 802224c:	e7fa      	b.n	8022244 <__mcmp+0x28>
 802224e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022252:	e7f7      	b.n	8022244 <__mcmp+0x28>

08022254 <__mdiff>:
 8022254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022258:	460c      	mov	r4, r1
 802225a:	4606      	mov	r6, r0
 802225c:	4611      	mov	r1, r2
 802225e:	4620      	mov	r0, r4
 8022260:	4690      	mov	r8, r2
 8022262:	f7ff ffdb 	bl	802221c <__mcmp>
 8022266:	1e05      	subs	r5, r0, #0
 8022268:	d110      	bne.n	802228c <__mdiff+0x38>
 802226a:	4629      	mov	r1, r5
 802226c:	4630      	mov	r0, r6
 802226e:	f7ff fd0f 	bl	8021c90 <_Balloc>
 8022272:	b930      	cbnz	r0, 8022282 <__mdiff+0x2e>
 8022274:	4b3a      	ldr	r3, [pc, #232]	; (8022360 <__mdiff+0x10c>)
 8022276:	4602      	mov	r2, r0
 8022278:	f240 2137 	movw	r1, #567	; 0x237
 802227c:	4839      	ldr	r0, [pc, #228]	; (8022364 <__mdiff+0x110>)
 802227e:	f7fe fe9b 	bl	8020fb8 <__assert_func>
 8022282:	2301      	movs	r3, #1
 8022284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802228c:	bfa4      	itt	ge
 802228e:	4643      	movge	r3, r8
 8022290:	46a0      	movge	r8, r4
 8022292:	4630      	mov	r0, r6
 8022294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022298:	bfa6      	itte	ge
 802229a:	461c      	movge	r4, r3
 802229c:	2500      	movge	r5, #0
 802229e:	2501      	movlt	r5, #1
 80222a0:	f7ff fcf6 	bl	8021c90 <_Balloc>
 80222a4:	b920      	cbnz	r0, 80222b0 <__mdiff+0x5c>
 80222a6:	4b2e      	ldr	r3, [pc, #184]	; (8022360 <__mdiff+0x10c>)
 80222a8:	4602      	mov	r2, r0
 80222aa:	f240 2145 	movw	r1, #581	; 0x245
 80222ae:	e7e5      	b.n	802227c <__mdiff+0x28>
 80222b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80222b4:	6926      	ldr	r6, [r4, #16]
 80222b6:	60c5      	str	r5, [r0, #12]
 80222b8:	f104 0914 	add.w	r9, r4, #20
 80222bc:	f108 0514 	add.w	r5, r8, #20
 80222c0:	f100 0e14 	add.w	lr, r0, #20
 80222c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80222c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80222cc:	f108 0210 	add.w	r2, r8, #16
 80222d0:	46f2      	mov	sl, lr
 80222d2:	2100      	movs	r1, #0
 80222d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80222d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80222dc:	fa11 f88b 	uxtah	r8, r1, fp
 80222e0:	b299      	uxth	r1, r3
 80222e2:	0c1b      	lsrs	r3, r3, #16
 80222e4:	eba8 0801 	sub.w	r8, r8, r1
 80222e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80222ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80222f0:	fa1f f888 	uxth.w	r8, r8
 80222f4:	1419      	asrs	r1, r3, #16
 80222f6:	454e      	cmp	r6, r9
 80222f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80222fc:	f84a 3b04 	str.w	r3, [sl], #4
 8022300:	d8e8      	bhi.n	80222d4 <__mdiff+0x80>
 8022302:	1b33      	subs	r3, r6, r4
 8022304:	3b15      	subs	r3, #21
 8022306:	f023 0303 	bic.w	r3, r3, #3
 802230a:	3304      	adds	r3, #4
 802230c:	3415      	adds	r4, #21
 802230e:	42a6      	cmp	r6, r4
 8022310:	bf38      	it	cc
 8022312:	2304      	movcc	r3, #4
 8022314:	441d      	add	r5, r3
 8022316:	4473      	add	r3, lr
 8022318:	469e      	mov	lr, r3
 802231a:	462e      	mov	r6, r5
 802231c:	4566      	cmp	r6, ip
 802231e:	d30e      	bcc.n	802233e <__mdiff+0xea>
 8022320:	f10c 0203 	add.w	r2, ip, #3
 8022324:	1b52      	subs	r2, r2, r5
 8022326:	f022 0203 	bic.w	r2, r2, #3
 802232a:	3d03      	subs	r5, #3
 802232c:	45ac      	cmp	ip, r5
 802232e:	bf38      	it	cc
 8022330:	2200      	movcc	r2, #0
 8022332:	4413      	add	r3, r2
 8022334:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022338:	b17a      	cbz	r2, 802235a <__mdiff+0x106>
 802233a:	6107      	str	r7, [r0, #16]
 802233c:	e7a4      	b.n	8022288 <__mdiff+0x34>
 802233e:	f856 8b04 	ldr.w	r8, [r6], #4
 8022342:	fa11 f288 	uxtah	r2, r1, r8
 8022346:	1414      	asrs	r4, r2, #16
 8022348:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802234c:	b292      	uxth	r2, r2
 802234e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022352:	f84e 2b04 	str.w	r2, [lr], #4
 8022356:	1421      	asrs	r1, r4, #16
 8022358:	e7e0      	b.n	802231c <__mdiff+0xc8>
 802235a:	3f01      	subs	r7, #1
 802235c:	e7ea      	b.n	8022334 <__mdiff+0xe0>
 802235e:	bf00      	nop
 8022360:	08025d46 	.word	0x08025d46
 8022364:	08025d57 	.word	0x08025d57

08022368 <__ulp>:
 8022368:	b082      	sub	sp, #8
 802236a:	ed8d 0b00 	vstr	d0, [sp]
 802236e:	9a01      	ldr	r2, [sp, #4]
 8022370:	4b0f      	ldr	r3, [pc, #60]	; (80223b0 <__ulp+0x48>)
 8022372:	4013      	ands	r3, r2
 8022374:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8022378:	2b00      	cmp	r3, #0
 802237a:	dc08      	bgt.n	802238e <__ulp+0x26>
 802237c:	425b      	negs	r3, r3
 802237e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8022382:	ea4f 5223 	mov.w	r2, r3, asr #20
 8022386:	da04      	bge.n	8022392 <__ulp+0x2a>
 8022388:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802238c:	4113      	asrs	r3, r2
 802238e:	2200      	movs	r2, #0
 8022390:	e008      	b.n	80223a4 <__ulp+0x3c>
 8022392:	f1a2 0314 	sub.w	r3, r2, #20
 8022396:	2b1e      	cmp	r3, #30
 8022398:	bfda      	itte	le
 802239a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802239e:	40da      	lsrle	r2, r3
 80223a0:	2201      	movgt	r2, #1
 80223a2:	2300      	movs	r3, #0
 80223a4:	4619      	mov	r1, r3
 80223a6:	4610      	mov	r0, r2
 80223a8:	ec41 0b10 	vmov	d0, r0, r1
 80223ac:	b002      	add	sp, #8
 80223ae:	4770      	bx	lr
 80223b0:	7ff00000 	.word	0x7ff00000

080223b4 <__b2d>:
 80223b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223b8:	6906      	ldr	r6, [r0, #16]
 80223ba:	f100 0814 	add.w	r8, r0, #20
 80223be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80223c2:	1f37      	subs	r7, r6, #4
 80223c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80223c8:	4610      	mov	r0, r2
 80223ca:	f7ff fd53 	bl	8021e74 <__hi0bits>
 80223ce:	f1c0 0320 	rsb	r3, r0, #32
 80223d2:	280a      	cmp	r0, #10
 80223d4:	600b      	str	r3, [r1, #0]
 80223d6:	491b      	ldr	r1, [pc, #108]	; (8022444 <__b2d+0x90>)
 80223d8:	dc15      	bgt.n	8022406 <__b2d+0x52>
 80223da:	f1c0 0c0b 	rsb	ip, r0, #11
 80223de:	fa22 f30c 	lsr.w	r3, r2, ip
 80223e2:	45b8      	cmp	r8, r7
 80223e4:	ea43 0501 	orr.w	r5, r3, r1
 80223e8:	bf34      	ite	cc
 80223ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80223ee:	2300      	movcs	r3, #0
 80223f0:	3015      	adds	r0, #21
 80223f2:	fa02 f000 	lsl.w	r0, r2, r0
 80223f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80223fa:	4303      	orrs	r3, r0
 80223fc:	461c      	mov	r4, r3
 80223fe:	ec45 4b10 	vmov	d0, r4, r5
 8022402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022406:	45b8      	cmp	r8, r7
 8022408:	bf3a      	itte	cc
 802240a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802240e:	f1a6 0708 	subcc.w	r7, r6, #8
 8022412:	2300      	movcs	r3, #0
 8022414:	380b      	subs	r0, #11
 8022416:	d012      	beq.n	802243e <__b2d+0x8a>
 8022418:	f1c0 0120 	rsb	r1, r0, #32
 802241c:	fa23 f401 	lsr.w	r4, r3, r1
 8022420:	4082      	lsls	r2, r0
 8022422:	4322      	orrs	r2, r4
 8022424:	4547      	cmp	r7, r8
 8022426:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802242a:	bf8c      	ite	hi
 802242c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8022430:	2200      	movls	r2, #0
 8022432:	4083      	lsls	r3, r0
 8022434:	40ca      	lsrs	r2, r1
 8022436:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802243a:	4313      	orrs	r3, r2
 802243c:	e7de      	b.n	80223fc <__b2d+0x48>
 802243e:	ea42 0501 	orr.w	r5, r2, r1
 8022442:	e7db      	b.n	80223fc <__b2d+0x48>
 8022444:	3ff00000 	.word	0x3ff00000

08022448 <__d2b>:
 8022448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802244c:	460f      	mov	r7, r1
 802244e:	2101      	movs	r1, #1
 8022450:	ec59 8b10 	vmov	r8, r9, d0
 8022454:	4616      	mov	r6, r2
 8022456:	f7ff fc1b 	bl	8021c90 <_Balloc>
 802245a:	4604      	mov	r4, r0
 802245c:	b930      	cbnz	r0, 802246c <__d2b+0x24>
 802245e:	4602      	mov	r2, r0
 8022460:	4b24      	ldr	r3, [pc, #144]	; (80224f4 <__d2b+0xac>)
 8022462:	4825      	ldr	r0, [pc, #148]	; (80224f8 <__d2b+0xb0>)
 8022464:	f240 310f 	movw	r1, #783	; 0x30f
 8022468:	f7fe fda6 	bl	8020fb8 <__assert_func>
 802246c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022474:	bb2d      	cbnz	r5, 80224c2 <__d2b+0x7a>
 8022476:	9301      	str	r3, [sp, #4]
 8022478:	f1b8 0300 	subs.w	r3, r8, #0
 802247c:	d026      	beq.n	80224cc <__d2b+0x84>
 802247e:	4668      	mov	r0, sp
 8022480:	9300      	str	r3, [sp, #0]
 8022482:	f7ff fd17 	bl	8021eb4 <__lo0bits>
 8022486:	e9dd 1200 	ldrd	r1, r2, [sp]
 802248a:	b1e8      	cbz	r0, 80224c8 <__d2b+0x80>
 802248c:	f1c0 0320 	rsb	r3, r0, #32
 8022490:	fa02 f303 	lsl.w	r3, r2, r3
 8022494:	430b      	orrs	r3, r1
 8022496:	40c2      	lsrs	r2, r0
 8022498:	6163      	str	r3, [r4, #20]
 802249a:	9201      	str	r2, [sp, #4]
 802249c:	9b01      	ldr	r3, [sp, #4]
 802249e:	61a3      	str	r3, [r4, #24]
 80224a0:	2b00      	cmp	r3, #0
 80224a2:	bf14      	ite	ne
 80224a4:	2202      	movne	r2, #2
 80224a6:	2201      	moveq	r2, #1
 80224a8:	6122      	str	r2, [r4, #16]
 80224aa:	b1bd      	cbz	r5, 80224dc <__d2b+0x94>
 80224ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80224b0:	4405      	add	r5, r0
 80224b2:	603d      	str	r5, [r7, #0]
 80224b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80224b8:	6030      	str	r0, [r6, #0]
 80224ba:	4620      	mov	r0, r4
 80224bc:	b003      	add	sp, #12
 80224be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80224c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80224c6:	e7d6      	b.n	8022476 <__d2b+0x2e>
 80224c8:	6161      	str	r1, [r4, #20]
 80224ca:	e7e7      	b.n	802249c <__d2b+0x54>
 80224cc:	a801      	add	r0, sp, #4
 80224ce:	f7ff fcf1 	bl	8021eb4 <__lo0bits>
 80224d2:	9b01      	ldr	r3, [sp, #4]
 80224d4:	6163      	str	r3, [r4, #20]
 80224d6:	3020      	adds	r0, #32
 80224d8:	2201      	movs	r2, #1
 80224da:	e7e5      	b.n	80224a8 <__d2b+0x60>
 80224dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80224e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80224e4:	6038      	str	r0, [r7, #0]
 80224e6:	6918      	ldr	r0, [r3, #16]
 80224e8:	f7ff fcc4 	bl	8021e74 <__hi0bits>
 80224ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80224f0:	e7e2      	b.n	80224b8 <__d2b+0x70>
 80224f2:	bf00      	nop
 80224f4:	08025d46 	.word	0x08025d46
 80224f8:	08025d57 	.word	0x08025d57

080224fc <__ratio>:
 80224fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022500:	4688      	mov	r8, r1
 8022502:	4669      	mov	r1, sp
 8022504:	4681      	mov	r9, r0
 8022506:	f7ff ff55 	bl	80223b4 <__b2d>
 802250a:	a901      	add	r1, sp, #4
 802250c:	4640      	mov	r0, r8
 802250e:	ec55 4b10 	vmov	r4, r5, d0
 8022512:	ee10 aa10 	vmov	sl, s0
 8022516:	f7ff ff4d 	bl	80223b4 <__b2d>
 802251a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802251e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8022522:	1ad2      	subs	r2, r2, r3
 8022524:	e9dd 3100 	ldrd	r3, r1, [sp]
 8022528:	1a5b      	subs	r3, r3, r1
 802252a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802252e:	ec57 6b10 	vmov	r6, r7, d0
 8022532:	2b00      	cmp	r3, #0
 8022534:	bfd6      	itet	le
 8022536:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802253a:	462a      	movgt	r2, r5
 802253c:	463a      	movle	r2, r7
 802253e:	46ab      	mov	fp, r5
 8022540:	bfd6      	itet	le
 8022542:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8022546:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 802254a:	ee00 3a90 	vmovle	s1, r3
 802254e:	ec4b ab17 	vmov	d7, sl, fp
 8022552:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8022556:	b003      	add	sp, #12
 8022558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802255c <__copybits>:
 802255c:	3901      	subs	r1, #1
 802255e:	b570      	push	{r4, r5, r6, lr}
 8022560:	1149      	asrs	r1, r1, #5
 8022562:	6914      	ldr	r4, [r2, #16]
 8022564:	3101      	adds	r1, #1
 8022566:	f102 0314 	add.w	r3, r2, #20
 802256a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802256e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022572:	1f05      	subs	r5, r0, #4
 8022574:	42a3      	cmp	r3, r4
 8022576:	d30c      	bcc.n	8022592 <__copybits+0x36>
 8022578:	1aa3      	subs	r3, r4, r2
 802257a:	3b11      	subs	r3, #17
 802257c:	f023 0303 	bic.w	r3, r3, #3
 8022580:	3211      	adds	r2, #17
 8022582:	42a2      	cmp	r2, r4
 8022584:	bf88      	it	hi
 8022586:	2300      	movhi	r3, #0
 8022588:	4418      	add	r0, r3
 802258a:	2300      	movs	r3, #0
 802258c:	4288      	cmp	r0, r1
 802258e:	d305      	bcc.n	802259c <__copybits+0x40>
 8022590:	bd70      	pop	{r4, r5, r6, pc}
 8022592:	f853 6b04 	ldr.w	r6, [r3], #4
 8022596:	f845 6f04 	str.w	r6, [r5, #4]!
 802259a:	e7eb      	b.n	8022574 <__copybits+0x18>
 802259c:	f840 3b04 	str.w	r3, [r0], #4
 80225a0:	e7f4      	b.n	802258c <__copybits+0x30>

080225a2 <__any_on>:
 80225a2:	f100 0214 	add.w	r2, r0, #20
 80225a6:	6900      	ldr	r0, [r0, #16]
 80225a8:	114b      	asrs	r3, r1, #5
 80225aa:	4298      	cmp	r0, r3
 80225ac:	b510      	push	{r4, lr}
 80225ae:	db11      	blt.n	80225d4 <__any_on+0x32>
 80225b0:	dd0a      	ble.n	80225c8 <__any_on+0x26>
 80225b2:	f011 011f 	ands.w	r1, r1, #31
 80225b6:	d007      	beq.n	80225c8 <__any_on+0x26>
 80225b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80225bc:	fa24 f001 	lsr.w	r0, r4, r1
 80225c0:	fa00 f101 	lsl.w	r1, r0, r1
 80225c4:	428c      	cmp	r4, r1
 80225c6:	d10b      	bne.n	80225e0 <__any_on+0x3e>
 80225c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80225cc:	4293      	cmp	r3, r2
 80225ce:	d803      	bhi.n	80225d8 <__any_on+0x36>
 80225d0:	2000      	movs	r0, #0
 80225d2:	bd10      	pop	{r4, pc}
 80225d4:	4603      	mov	r3, r0
 80225d6:	e7f7      	b.n	80225c8 <__any_on+0x26>
 80225d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80225dc:	2900      	cmp	r1, #0
 80225de:	d0f5      	beq.n	80225cc <__any_on+0x2a>
 80225e0:	2001      	movs	r0, #1
 80225e2:	e7f6      	b.n	80225d2 <__any_on+0x30>

080225e4 <_malloc_usable_size_r>:
 80225e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225e8:	1f18      	subs	r0, r3, #4
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	bfbc      	itt	lt
 80225ee:	580b      	ldrlt	r3, [r1, r0]
 80225f0:	18c0      	addlt	r0, r0, r3
 80225f2:	4770      	bx	lr

080225f4 <sulp>:
 80225f4:	b570      	push	{r4, r5, r6, lr}
 80225f6:	4604      	mov	r4, r0
 80225f8:	460d      	mov	r5, r1
 80225fa:	4616      	mov	r6, r2
 80225fc:	ec45 4b10 	vmov	d0, r4, r5
 8022600:	f7ff feb2 	bl	8022368 <__ulp>
 8022604:	b17e      	cbz	r6, 8022626 <sulp+0x32>
 8022606:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802260a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802260e:	2b00      	cmp	r3, #0
 8022610:	dd09      	ble.n	8022626 <sulp+0x32>
 8022612:	051b      	lsls	r3, r3, #20
 8022614:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8022618:	2000      	movs	r0, #0
 802261a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802261e:	ec41 0b17 	vmov	d7, r0, r1
 8022622:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022626:	bd70      	pop	{r4, r5, r6, pc}

08022628 <_strtod_l>:
 8022628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802262c:	ed2d 8b0e 	vpush	{d8-d14}
 8022630:	b097      	sub	sp, #92	; 0x5c
 8022632:	4604      	mov	r4, r0
 8022634:	920d      	str	r2, [sp, #52]	; 0x34
 8022636:	2200      	movs	r2, #0
 8022638:	9212      	str	r2, [sp, #72]	; 0x48
 802263a:	468a      	mov	sl, r1
 802263c:	f04f 0800 	mov.w	r8, #0
 8022640:	f04f 0900 	mov.w	r9, #0
 8022644:	460a      	mov	r2, r1
 8022646:	9211      	str	r2, [sp, #68]	; 0x44
 8022648:	7811      	ldrb	r1, [r2, #0]
 802264a:	292b      	cmp	r1, #43	; 0x2b
 802264c:	d04c      	beq.n	80226e8 <_strtod_l+0xc0>
 802264e:	d839      	bhi.n	80226c4 <_strtod_l+0x9c>
 8022650:	290d      	cmp	r1, #13
 8022652:	d833      	bhi.n	80226bc <_strtod_l+0x94>
 8022654:	2908      	cmp	r1, #8
 8022656:	d833      	bhi.n	80226c0 <_strtod_l+0x98>
 8022658:	2900      	cmp	r1, #0
 802265a:	d03c      	beq.n	80226d6 <_strtod_l+0xae>
 802265c:	2200      	movs	r2, #0
 802265e:	9208      	str	r2, [sp, #32]
 8022660:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022662:	7832      	ldrb	r2, [r6, #0]
 8022664:	2a30      	cmp	r2, #48	; 0x30
 8022666:	f040 80b8 	bne.w	80227da <_strtod_l+0x1b2>
 802266a:	7872      	ldrb	r2, [r6, #1]
 802266c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8022670:	2a58      	cmp	r2, #88	; 0x58
 8022672:	d170      	bne.n	8022756 <_strtod_l+0x12e>
 8022674:	9302      	str	r3, [sp, #8]
 8022676:	9b08      	ldr	r3, [sp, #32]
 8022678:	9301      	str	r3, [sp, #4]
 802267a:	ab12      	add	r3, sp, #72	; 0x48
 802267c:	9300      	str	r3, [sp, #0]
 802267e:	4a91      	ldr	r2, [pc, #580]	; (80228c4 <_strtod_l+0x29c>)
 8022680:	ab13      	add	r3, sp, #76	; 0x4c
 8022682:	a911      	add	r1, sp, #68	; 0x44
 8022684:	4620      	mov	r0, r4
 8022686:	f001 fa61 	bl	8023b4c <__gethex>
 802268a:	f010 070f 	ands.w	r7, r0, #15
 802268e:	4605      	mov	r5, r0
 8022690:	d005      	beq.n	802269e <_strtod_l+0x76>
 8022692:	2f06      	cmp	r7, #6
 8022694:	d12a      	bne.n	80226ec <_strtod_l+0xc4>
 8022696:	3601      	adds	r6, #1
 8022698:	2300      	movs	r3, #0
 802269a:	9611      	str	r6, [sp, #68]	; 0x44
 802269c:	9308      	str	r3, [sp, #32]
 802269e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	f040 8555 	bne.w	8023150 <_strtod_l+0xb28>
 80226a6:	9b08      	ldr	r3, [sp, #32]
 80226a8:	ec49 8b10 	vmov	d0, r8, r9
 80226ac:	b1cb      	cbz	r3, 80226e2 <_strtod_l+0xba>
 80226ae:	eeb1 0b40 	vneg.f64	d0, d0
 80226b2:	b017      	add	sp, #92	; 0x5c
 80226b4:	ecbd 8b0e 	vpop	{d8-d14}
 80226b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226bc:	2920      	cmp	r1, #32
 80226be:	d1cd      	bne.n	802265c <_strtod_l+0x34>
 80226c0:	3201      	adds	r2, #1
 80226c2:	e7c0      	b.n	8022646 <_strtod_l+0x1e>
 80226c4:	292d      	cmp	r1, #45	; 0x2d
 80226c6:	d1c9      	bne.n	802265c <_strtod_l+0x34>
 80226c8:	2101      	movs	r1, #1
 80226ca:	9108      	str	r1, [sp, #32]
 80226cc:	1c51      	adds	r1, r2, #1
 80226ce:	9111      	str	r1, [sp, #68]	; 0x44
 80226d0:	7852      	ldrb	r2, [r2, #1]
 80226d2:	2a00      	cmp	r2, #0
 80226d4:	d1c4      	bne.n	8022660 <_strtod_l+0x38>
 80226d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80226d8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80226dc:	2b00      	cmp	r3, #0
 80226de:	f040 8535 	bne.w	802314c <_strtod_l+0xb24>
 80226e2:	ec49 8b10 	vmov	d0, r8, r9
 80226e6:	e7e4      	b.n	80226b2 <_strtod_l+0x8a>
 80226e8:	2100      	movs	r1, #0
 80226ea:	e7ee      	b.n	80226ca <_strtod_l+0xa2>
 80226ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80226ee:	b13a      	cbz	r2, 8022700 <_strtod_l+0xd8>
 80226f0:	2135      	movs	r1, #53	; 0x35
 80226f2:	a814      	add	r0, sp, #80	; 0x50
 80226f4:	f7ff ff32 	bl	802255c <__copybits>
 80226f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80226fa:	4620      	mov	r0, r4
 80226fc:	f7ff fb08 	bl	8021d10 <_Bfree>
 8022700:	1e7b      	subs	r3, r7, #1
 8022702:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022704:	2b04      	cmp	r3, #4
 8022706:	d806      	bhi.n	8022716 <_strtod_l+0xee>
 8022708:	e8df f003 	tbb	[pc, r3]
 802270c:	201d0314 	.word	0x201d0314
 8022710:	14          	.byte	0x14
 8022711:	00          	.byte	0x00
 8022712:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8022716:	05eb      	lsls	r3, r5, #23
 8022718:	bf48      	it	mi
 802271a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802271e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022722:	0d1b      	lsrs	r3, r3, #20
 8022724:	051b      	lsls	r3, r3, #20
 8022726:	2b00      	cmp	r3, #0
 8022728:	d1b9      	bne.n	802269e <_strtod_l+0x76>
 802272a:	f7fe fbfb 	bl	8020f24 <__errno>
 802272e:	2322      	movs	r3, #34	; 0x22
 8022730:	6003      	str	r3, [r0, #0]
 8022732:	e7b4      	b.n	802269e <_strtod_l+0x76>
 8022734:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8022738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802273c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022740:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8022744:	e7e7      	b.n	8022716 <_strtod_l+0xee>
 8022746:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80228cc <_strtod_l+0x2a4>
 802274a:	e7e4      	b.n	8022716 <_strtod_l+0xee>
 802274c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8022750:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022754:	e7df      	b.n	8022716 <_strtod_l+0xee>
 8022756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022758:	1c5a      	adds	r2, r3, #1
 802275a:	9211      	str	r2, [sp, #68]	; 0x44
 802275c:	785b      	ldrb	r3, [r3, #1]
 802275e:	2b30      	cmp	r3, #48	; 0x30
 8022760:	d0f9      	beq.n	8022756 <_strtod_l+0x12e>
 8022762:	2b00      	cmp	r3, #0
 8022764:	d09b      	beq.n	802269e <_strtod_l+0x76>
 8022766:	2301      	movs	r3, #1
 8022768:	9306      	str	r3, [sp, #24]
 802276a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802276c:	9309      	str	r3, [sp, #36]	; 0x24
 802276e:	2300      	movs	r3, #0
 8022770:	9305      	str	r3, [sp, #20]
 8022772:	9307      	str	r3, [sp, #28]
 8022774:	461e      	mov	r6, r3
 8022776:	220a      	movs	r2, #10
 8022778:	9811      	ldr	r0, [sp, #68]	; 0x44
 802277a:	7805      	ldrb	r5, [r0, #0]
 802277c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8022780:	b2d9      	uxtb	r1, r3
 8022782:	2909      	cmp	r1, #9
 8022784:	d92b      	bls.n	80227de <_strtod_l+0x1b6>
 8022786:	4950      	ldr	r1, [pc, #320]	; (80228c8 <_strtod_l+0x2a0>)
 8022788:	2201      	movs	r2, #1
 802278a:	f7fe fb48 	bl	8020e1e <strncmp>
 802278e:	2800      	cmp	r0, #0
 8022790:	d035      	beq.n	80227fe <_strtod_l+0x1d6>
 8022792:	2000      	movs	r0, #0
 8022794:	462a      	mov	r2, r5
 8022796:	4633      	mov	r3, r6
 8022798:	4683      	mov	fp, r0
 802279a:	4601      	mov	r1, r0
 802279c:	2a65      	cmp	r2, #101	; 0x65
 802279e:	d001      	beq.n	80227a4 <_strtod_l+0x17c>
 80227a0:	2a45      	cmp	r2, #69	; 0x45
 80227a2:	d118      	bne.n	80227d6 <_strtod_l+0x1ae>
 80227a4:	b91b      	cbnz	r3, 80227ae <_strtod_l+0x186>
 80227a6:	9b06      	ldr	r3, [sp, #24]
 80227a8:	4303      	orrs	r3, r0
 80227aa:	d094      	beq.n	80226d6 <_strtod_l+0xae>
 80227ac:	2300      	movs	r3, #0
 80227ae:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80227b2:	f10a 0201 	add.w	r2, sl, #1
 80227b6:	9211      	str	r2, [sp, #68]	; 0x44
 80227b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80227bc:	2a2b      	cmp	r2, #43	; 0x2b
 80227be:	d075      	beq.n	80228ac <_strtod_l+0x284>
 80227c0:	2a2d      	cmp	r2, #45	; 0x2d
 80227c2:	d07b      	beq.n	80228bc <_strtod_l+0x294>
 80227c4:	f04f 0e00 	mov.w	lr, #0
 80227c8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80227cc:	2d09      	cmp	r5, #9
 80227ce:	f240 8083 	bls.w	80228d8 <_strtod_l+0x2b0>
 80227d2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80227d6:	2500      	movs	r5, #0
 80227d8:	e09e      	b.n	8022918 <_strtod_l+0x2f0>
 80227da:	2300      	movs	r3, #0
 80227dc:	e7c4      	b.n	8022768 <_strtod_l+0x140>
 80227de:	2e08      	cmp	r6, #8
 80227e0:	bfd5      	itete	le
 80227e2:	9907      	ldrle	r1, [sp, #28]
 80227e4:	9905      	ldrgt	r1, [sp, #20]
 80227e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80227ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80227ee:	f100 0001 	add.w	r0, r0, #1
 80227f2:	bfd4      	ite	le
 80227f4:	9307      	strle	r3, [sp, #28]
 80227f6:	9305      	strgt	r3, [sp, #20]
 80227f8:	3601      	adds	r6, #1
 80227fa:	9011      	str	r0, [sp, #68]	; 0x44
 80227fc:	e7bc      	b.n	8022778 <_strtod_l+0x150>
 80227fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022800:	1c5a      	adds	r2, r3, #1
 8022802:	9211      	str	r2, [sp, #68]	; 0x44
 8022804:	785a      	ldrb	r2, [r3, #1]
 8022806:	b3ae      	cbz	r6, 8022874 <_strtod_l+0x24c>
 8022808:	4683      	mov	fp, r0
 802280a:	4633      	mov	r3, r6
 802280c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8022810:	2909      	cmp	r1, #9
 8022812:	d912      	bls.n	802283a <_strtod_l+0x212>
 8022814:	2101      	movs	r1, #1
 8022816:	e7c1      	b.n	802279c <_strtod_l+0x174>
 8022818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802281a:	1c5a      	adds	r2, r3, #1
 802281c:	9211      	str	r2, [sp, #68]	; 0x44
 802281e:	785a      	ldrb	r2, [r3, #1]
 8022820:	3001      	adds	r0, #1
 8022822:	2a30      	cmp	r2, #48	; 0x30
 8022824:	d0f8      	beq.n	8022818 <_strtod_l+0x1f0>
 8022826:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802282a:	2b08      	cmp	r3, #8
 802282c:	f200 8495 	bhi.w	802315a <_strtod_l+0xb32>
 8022830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022832:	9309      	str	r3, [sp, #36]	; 0x24
 8022834:	4683      	mov	fp, r0
 8022836:	2000      	movs	r0, #0
 8022838:	4603      	mov	r3, r0
 802283a:	3a30      	subs	r2, #48	; 0x30
 802283c:	f100 0101 	add.w	r1, r0, #1
 8022840:	d012      	beq.n	8022868 <_strtod_l+0x240>
 8022842:	448b      	add	fp, r1
 8022844:	eb00 0c03 	add.w	ip, r0, r3
 8022848:	4619      	mov	r1, r3
 802284a:	250a      	movs	r5, #10
 802284c:	4561      	cmp	r1, ip
 802284e:	d113      	bne.n	8022878 <_strtod_l+0x250>
 8022850:	1819      	adds	r1, r3, r0
 8022852:	2908      	cmp	r1, #8
 8022854:	f103 0301 	add.w	r3, r3, #1
 8022858:	4403      	add	r3, r0
 802285a:	dc1b      	bgt.n	8022894 <_strtod_l+0x26c>
 802285c:	9807      	ldr	r0, [sp, #28]
 802285e:	210a      	movs	r1, #10
 8022860:	fb01 2200 	mla	r2, r1, r0, r2
 8022864:	9207      	str	r2, [sp, #28]
 8022866:	2100      	movs	r1, #0
 8022868:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802286a:	1c50      	adds	r0, r2, #1
 802286c:	9011      	str	r0, [sp, #68]	; 0x44
 802286e:	7852      	ldrb	r2, [r2, #1]
 8022870:	4608      	mov	r0, r1
 8022872:	e7cb      	b.n	802280c <_strtod_l+0x1e4>
 8022874:	4630      	mov	r0, r6
 8022876:	e7d4      	b.n	8022822 <_strtod_l+0x1fa>
 8022878:	2908      	cmp	r1, #8
 802287a:	f101 0101 	add.w	r1, r1, #1
 802287e:	dc03      	bgt.n	8022888 <_strtod_l+0x260>
 8022880:	9f07      	ldr	r7, [sp, #28]
 8022882:	436f      	muls	r7, r5
 8022884:	9707      	str	r7, [sp, #28]
 8022886:	e7e1      	b.n	802284c <_strtod_l+0x224>
 8022888:	2910      	cmp	r1, #16
 802288a:	bfde      	ittt	le
 802288c:	9f05      	ldrle	r7, [sp, #20]
 802288e:	436f      	mulle	r7, r5
 8022890:	9705      	strle	r7, [sp, #20]
 8022892:	e7db      	b.n	802284c <_strtod_l+0x224>
 8022894:	2b10      	cmp	r3, #16
 8022896:	bfdf      	itttt	le
 8022898:	9805      	ldrle	r0, [sp, #20]
 802289a:	210a      	movle	r1, #10
 802289c:	fb01 2200 	mlale	r2, r1, r0, r2
 80228a0:	9205      	strle	r2, [sp, #20]
 80228a2:	e7e0      	b.n	8022866 <_strtod_l+0x23e>
 80228a4:	f04f 0b00 	mov.w	fp, #0
 80228a8:	2101      	movs	r1, #1
 80228aa:	e77c      	b.n	80227a6 <_strtod_l+0x17e>
 80228ac:	f04f 0e00 	mov.w	lr, #0
 80228b0:	f10a 0202 	add.w	r2, sl, #2
 80228b4:	9211      	str	r2, [sp, #68]	; 0x44
 80228b6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80228ba:	e785      	b.n	80227c8 <_strtod_l+0x1a0>
 80228bc:	f04f 0e01 	mov.w	lr, #1
 80228c0:	e7f6      	b.n	80228b0 <_strtod_l+0x288>
 80228c2:	bf00      	nop
 80228c4:	08025eb0 	.word	0x08025eb0
 80228c8:	08025eac 	.word	0x08025eac
 80228cc:	7ff00000 	.word	0x7ff00000
 80228d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228d2:	1c55      	adds	r5, r2, #1
 80228d4:	9511      	str	r5, [sp, #68]	; 0x44
 80228d6:	7852      	ldrb	r2, [r2, #1]
 80228d8:	2a30      	cmp	r2, #48	; 0x30
 80228da:	d0f9      	beq.n	80228d0 <_strtod_l+0x2a8>
 80228dc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80228e0:	2d08      	cmp	r5, #8
 80228e2:	f63f af78 	bhi.w	80227d6 <_strtod_l+0x1ae>
 80228e6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80228ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228ec:	920a      	str	r2, [sp, #40]	; 0x28
 80228ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228f0:	1c55      	adds	r5, r2, #1
 80228f2:	9511      	str	r5, [sp, #68]	; 0x44
 80228f4:	7852      	ldrb	r2, [r2, #1]
 80228f6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80228fa:	2f09      	cmp	r7, #9
 80228fc:	d937      	bls.n	802296e <_strtod_l+0x346>
 80228fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022900:	1bed      	subs	r5, r5, r7
 8022902:	2d08      	cmp	r5, #8
 8022904:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8022908:	dc02      	bgt.n	8022910 <_strtod_l+0x2e8>
 802290a:	4565      	cmp	r5, ip
 802290c:	bfa8      	it	ge
 802290e:	4665      	movge	r5, ip
 8022910:	f1be 0f00 	cmp.w	lr, #0
 8022914:	d000      	beq.n	8022918 <_strtod_l+0x2f0>
 8022916:	426d      	negs	r5, r5
 8022918:	2b00      	cmp	r3, #0
 802291a:	d14d      	bne.n	80229b8 <_strtod_l+0x390>
 802291c:	9b06      	ldr	r3, [sp, #24]
 802291e:	4303      	orrs	r3, r0
 8022920:	f47f aebd 	bne.w	802269e <_strtod_l+0x76>
 8022924:	2900      	cmp	r1, #0
 8022926:	f47f aed6 	bne.w	80226d6 <_strtod_l+0xae>
 802292a:	2a69      	cmp	r2, #105	; 0x69
 802292c:	d027      	beq.n	802297e <_strtod_l+0x356>
 802292e:	dc24      	bgt.n	802297a <_strtod_l+0x352>
 8022930:	2a49      	cmp	r2, #73	; 0x49
 8022932:	d024      	beq.n	802297e <_strtod_l+0x356>
 8022934:	2a4e      	cmp	r2, #78	; 0x4e
 8022936:	f47f aece 	bne.w	80226d6 <_strtod_l+0xae>
 802293a:	4995      	ldr	r1, [pc, #596]	; (8022b90 <_strtod_l+0x568>)
 802293c:	a811      	add	r0, sp, #68	; 0x44
 802293e:	f001 fb45 	bl	8023fcc <__match>
 8022942:	2800      	cmp	r0, #0
 8022944:	f43f aec7 	beq.w	80226d6 <_strtod_l+0xae>
 8022948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802294a:	781b      	ldrb	r3, [r3, #0]
 802294c:	2b28      	cmp	r3, #40	; 0x28
 802294e:	d12d      	bne.n	80229ac <_strtod_l+0x384>
 8022950:	4990      	ldr	r1, [pc, #576]	; (8022b94 <_strtod_l+0x56c>)
 8022952:	aa14      	add	r2, sp, #80	; 0x50
 8022954:	a811      	add	r0, sp, #68	; 0x44
 8022956:	f001 fb4d 	bl	8023ff4 <__hexnan>
 802295a:	2805      	cmp	r0, #5
 802295c:	d126      	bne.n	80229ac <_strtod_l+0x384>
 802295e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022960:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8022964:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8022968:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802296c:	e697      	b.n	802269e <_strtod_l+0x76>
 802296e:	250a      	movs	r5, #10
 8022970:	fb05 2c0c 	mla	ip, r5, ip, r2
 8022974:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8022978:	e7b9      	b.n	80228ee <_strtod_l+0x2c6>
 802297a:	2a6e      	cmp	r2, #110	; 0x6e
 802297c:	e7db      	b.n	8022936 <_strtod_l+0x30e>
 802297e:	4986      	ldr	r1, [pc, #536]	; (8022b98 <_strtod_l+0x570>)
 8022980:	a811      	add	r0, sp, #68	; 0x44
 8022982:	f001 fb23 	bl	8023fcc <__match>
 8022986:	2800      	cmp	r0, #0
 8022988:	f43f aea5 	beq.w	80226d6 <_strtod_l+0xae>
 802298c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802298e:	4983      	ldr	r1, [pc, #524]	; (8022b9c <_strtod_l+0x574>)
 8022990:	3b01      	subs	r3, #1
 8022992:	a811      	add	r0, sp, #68	; 0x44
 8022994:	9311      	str	r3, [sp, #68]	; 0x44
 8022996:	f001 fb19 	bl	8023fcc <__match>
 802299a:	b910      	cbnz	r0, 80229a2 <_strtod_l+0x37a>
 802299c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802299e:	3301      	adds	r3, #1
 80229a0:	9311      	str	r3, [sp, #68]	; 0x44
 80229a2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8022bb0 <_strtod_l+0x588>
 80229a6:	f04f 0800 	mov.w	r8, #0
 80229aa:	e678      	b.n	802269e <_strtod_l+0x76>
 80229ac:	487c      	ldr	r0, [pc, #496]	; (8022ba0 <_strtod_l+0x578>)
 80229ae:	f001 f857 	bl	8023a60 <nan>
 80229b2:	ec59 8b10 	vmov	r8, r9, d0
 80229b6:	e672      	b.n	802269e <_strtod_l+0x76>
 80229b8:	eddd 7a07 	vldr	s15, [sp, #28]
 80229bc:	eba5 020b 	sub.w	r2, r5, fp
 80229c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80229c4:	2e00      	cmp	r6, #0
 80229c6:	bf08      	it	eq
 80229c8:	461e      	moveq	r6, r3
 80229ca:	2b10      	cmp	r3, #16
 80229cc:	9206      	str	r2, [sp, #24]
 80229ce:	461a      	mov	r2, r3
 80229d0:	bfa8      	it	ge
 80229d2:	2210      	movge	r2, #16
 80229d4:	2b09      	cmp	r3, #9
 80229d6:	ec59 8b17 	vmov	r8, r9, d7
 80229da:	dd0c      	ble.n	80229f6 <_strtod_l+0x3ce>
 80229dc:	4971      	ldr	r1, [pc, #452]	; (8022ba4 <_strtod_l+0x57c>)
 80229de:	eddd 6a05 	vldr	s13, [sp, #20]
 80229e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80229e6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80229ea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80229ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 80229f2:	ec59 8b16 	vmov	r8, r9, d6
 80229f6:	2b0f      	cmp	r3, #15
 80229f8:	dc37      	bgt.n	8022a6a <_strtod_l+0x442>
 80229fa:	9906      	ldr	r1, [sp, #24]
 80229fc:	2900      	cmp	r1, #0
 80229fe:	f43f ae4e 	beq.w	802269e <_strtod_l+0x76>
 8022a02:	dd23      	ble.n	8022a4c <_strtod_l+0x424>
 8022a04:	2916      	cmp	r1, #22
 8022a06:	dc0b      	bgt.n	8022a20 <_strtod_l+0x3f8>
 8022a08:	4b66      	ldr	r3, [pc, #408]	; (8022ba4 <_strtod_l+0x57c>)
 8022a0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8022a0e:	ed93 7b00 	vldr	d7, [r3]
 8022a12:	ec49 8b16 	vmov	d6, r8, r9
 8022a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a1a:	ec59 8b17 	vmov	r8, r9, d7
 8022a1e:	e63e      	b.n	802269e <_strtod_l+0x76>
 8022a20:	9806      	ldr	r0, [sp, #24]
 8022a22:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8022a26:	4281      	cmp	r1, r0
 8022a28:	db1f      	blt.n	8022a6a <_strtod_l+0x442>
 8022a2a:	4a5e      	ldr	r2, [pc, #376]	; (8022ba4 <_strtod_l+0x57c>)
 8022a2c:	f1c3 030f 	rsb	r3, r3, #15
 8022a30:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8022a34:	ed91 7b00 	vldr	d7, [r1]
 8022a38:	ec49 8b16 	vmov	d6, r8, r9
 8022a3c:	1ac3      	subs	r3, r0, r3
 8022a3e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022a42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a46:	ed92 6b00 	vldr	d6, [r2]
 8022a4a:	e7e4      	b.n	8022a16 <_strtod_l+0x3ee>
 8022a4c:	9906      	ldr	r1, [sp, #24]
 8022a4e:	3116      	adds	r1, #22
 8022a50:	db0b      	blt.n	8022a6a <_strtod_l+0x442>
 8022a52:	4b54      	ldr	r3, [pc, #336]	; (8022ba4 <_strtod_l+0x57c>)
 8022a54:	ebab 0505 	sub.w	r5, fp, r5
 8022a58:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8022a5c:	ed95 7b00 	vldr	d7, [r5]
 8022a60:	ec49 8b16 	vmov	d6, r8, r9
 8022a64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022a68:	e7d7      	b.n	8022a1a <_strtod_l+0x3f2>
 8022a6a:	9906      	ldr	r1, [sp, #24]
 8022a6c:	1a9a      	subs	r2, r3, r2
 8022a6e:	440a      	add	r2, r1
 8022a70:	2a00      	cmp	r2, #0
 8022a72:	dd6e      	ble.n	8022b52 <_strtod_l+0x52a>
 8022a74:	f012 000f 	ands.w	r0, r2, #15
 8022a78:	d00a      	beq.n	8022a90 <_strtod_l+0x468>
 8022a7a:	494a      	ldr	r1, [pc, #296]	; (8022ba4 <_strtod_l+0x57c>)
 8022a7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022a80:	ed91 7b00 	vldr	d7, [r1]
 8022a84:	ec49 8b16 	vmov	d6, r8, r9
 8022a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a8c:	ec59 8b17 	vmov	r8, r9, d7
 8022a90:	f032 020f 	bics.w	r2, r2, #15
 8022a94:	d04e      	beq.n	8022b34 <_strtod_l+0x50c>
 8022a96:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8022a9a:	dd22      	ble.n	8022ae2 <_strtod_l+0x4ba>
 8022a9c:	2500      	movs	r5, #0
 8022a9e:	462e      	mov	r6, r5
 8022aa0:	9507      	str	r5, [sp, #28]
 8022aa2:	462f      	mov	r7, r5
 8022aa4:	2322      	movs	r3, #34	; 0x22
 8022aa6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8022bb0 <_strtod_l+0x588>
 8022aaa:	6023      	str	r3, [r4, #0]
 8022aac:	f04f 0800 	mov.w	r8, #0
 8022ab0:	9b07      	ldr	r3, [sp, #28]
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	f43f adf3 	beq.w	802269e <_strtod_l+0x76>
 8022ab8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022aba:	4620      	mov	r0, r4
 8022abc:	f7ff f928 	bl	8021d10 <_Bfree>
 8022ac0:	4639      	mov	r1, r7
 8022ac2:	4620      	mov	r0, r4
 8022ac4:	f7ff f924 	bl	8021d10 <_Bfree>
 8022ac8:	4631      	mov	r1, r6
 8022aca:	4620      	mov	r0, r4
 8022acc:	f7ff f920 	bl	8021d10 <_Bfree>
 8022ad0:	9907      	ldr	r1, [sp, #28]
 8022ad2:	4620      	mov	r0, r4
 8022ad4:	f7ff f91c 	bl	8021d10 <_Bfree>
 8022ad8:	4629      	mov	r1, r5
 8022ada:	4620      	mov	r0, r4
 8022adc:	f7ff f918 	bl	8021d10 <_Bfree>
 8022ae0:	e5dd      	b.n	802269e <_strtod_l+0x76>
 8022ae2:	2000      	movs	r0, #0
 8022ae4:	ec49 8b17 	vmov	d7, r8, r9
 8022ae8:	4f2f      	ldr	r7, [pc, #188]	; (8022ba8 <_strtod_l+0x580>)
 8022aea:	1112      	asrs	r2, r2, #4
 8022aec:	4601      	mov	r1, r0
 8022aee:	2a01      	cmp	r2, #1
 8022af0:	dc23      	bgt.n	8022b3a <_strtod_l+0x512>
 8022af2:	b108      	cbz	r0, 8022af8 <_strtod_l+0x4d0>
 8022af4:	ec59 8b17 	vmov	r8, r9, d7
 8022af8:	4a2b      	ldr	r2, [pc, #172]	; (8022ba8 <_strtod_l+0x580>)
 8022afa:	482c      	ldr	r0, [pc, #176]	; (8022bac <_strtod_l+0x584>)
 8022afc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8022b00:	ed92 7b00 	vldr	d7, [r2]
 8022b04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022b08:	ec49 8b16 	vmov	d6, r8, r9
 8022b0c:	4a28      	ldr	r2, [pc, #160]	; (8022bb0 <_strtod_l+0x588>)
 8022b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022b12:	ee17 1a90 	vmov	r1, s15
 8022b16:	400a      	ands	r2, r1
 8022b18:	4282      	cmp	r2, r0
 8022b1a:	ec59 8b17 	vmov	r8, r9, d7
 8022b1e:	d8bd      	bhi.n	8022a9c <_strtod_l+0x474>
 8022b20:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8022b24:	4282      	cmp	r2, r0
 8022b26:	bf86      	itte	hi
 8022b28:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8022bb4 <_strtod_l+0x58c>
 8022b2c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022b30:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8022b34:	2200      	movs	r2, #0
 8022b36:	9205      	str	r2, [sp, #20]
 8022b38:	e076      	b.n	8022c28 <_strtod_l+0x600>
 8022b3a:	f012 0f01 	tst.w	r2, #1
 8022b3e:	d004      	beq.n	8022b4a <_strtod_l+0x522>
 8022b40:	ed97 6b00 	vldr	d6, [r7]
 8022b44:	2001      	movs	r0, #1
 8022b46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022b4a:	3101      	adds	r1, #1
 8022b4c:	1052      	asrs	r2, r2, #1
 8022b4e:	3708      	adds	r7, #8
 8022b50:	e7cd      	b.n	8022aee <_strtod_l+0x4c6>
 8022b52:	d0ef      	beq.n	8022b34 <_strtod_l+0x50c>
 8022b54:	4252      	negs	r2, r2
 8022b56:	f012 000f 	ands.w	r0, r2, #15
 8022b5a:	d00a      	beq.n	8022b72 <_strtod_l+0x54a>
 8022b5c:	4911      	ldr	r1, [pc, #68]	; (8022ba4 <_strtod_l+0x57c>)
 8022b5e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022b62:	ed91 7b00 	vldr	d7, [r1]
 8022b66:	ec49 8b16 	vmov	d6, r8, r9
 8022b6a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022b6e:	ec59 8b17 	vmov	r8, r9, d7
 8022b72:	1112      	asrs	r2, r2, #4
 8022b74:	d0de      	beq.n	8022b34 <_strtod_l+0x50c>
 8022b76:	2a1f      	cmp	r2, #31
 8022b78:	dd1e      	ble.n	8022bb8 <_strtod_l+0x590>
 8022b7a:	2500      	movs	r5, #0
 8022b7c:	462e      	mov	r6, r5
 8022b7e:	9507      	str	r5, [sp, #28]
 8022b80:	462f      	mov	r7, r5
 8022b82:	2322      	movs	r3, #34	; 0x22
 8022b84:	f04f 0800 	mov.w	r8, #0
 8022b88:	f04f 0900 	mov.w	r9, #0
 8022b8c:	6023      	str	r3, [r4, #0]
 8022b8e:	e78f      	b.n	8022ab0 <_strtod_l+0x488>
 8022b90:	08025c79 	.word	0x08025c79
 8022b94:	08025ec4 	.word	0x08025ec4
 8022b98:	08025c71 	.word	0x08025c71
 8022b9c:	08025ce4 	.word	0x08025ce4
 8022ba0:	08025ce0 	.word	0x08025ce0
 8022ba4:	08025dd8 	.word	0x08025dd8
 8022ba8:	08025db0 	.word	0x08025db0
 8022bac:	7ca00000 	.word	0x7ca00000
 8022bb0:	7ff00000 	.word	0x7ff00000
 8022bb4:	7fefffff 	.word	0x7fefffff
 8022bb8:	f012 0110 	ands.w	r1, r2, #16
 8022bbc:	bf18      	it	ne
 8022bbe:	216a      	movne	r1, #106	; 0x6a
 8022bc0:	9105      	str	r1, [sp, #20]
 8022bc2:	ec49 8b17 	vmov	d7, r8, r9
 8022bc6:	49be      	ldr	r1, [pc, #760]	; (8022ec0 <_strtod_l+0x898>)
 8022bc8:	2000      	movs	r0, #0
 8022bca:	07d7      	lsls	r7, r2, #31
 8022bcc:	d504      	bpl.n	8022bd8 <_strtod_l+0x5b0>
 8022bce:	ed91 6b00 	vldr	d6, [r1]
 8022bd2:	2001      	movs	r0, #1
 8022bd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022bd8:	1052      	asrs	r2, r2, #1
 8022bda:	f101 0108 	add.w	r1, r1, #8
 8022bde:	d1f4      	bne.n	8022bca <_strtod_l+0x5a2>
 8022be0:	b108      	cbz	r0, 8022be6 <_strtod_l+0x5be>
 8022be2:	ec59 8b17 	vmov	r8, r9, d7
 8022be6:	9a05      	ldr	r2, [sp, #20]
 8022be8:	b1ba      	cbz	r2, 8022c1a <_strtod_l+0x5f2>
 8022bea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022bee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8022bf2:	2a00      	cmp	r2, #0
 8022bf4:	4648      	mov	r0, r9
 8022bf6:	dd10      	ble.n	8022c1a <_strtod_l+0x5f2>
 8022bf8:	2a1f      	cmp	r2, #31
 8022bfa:	f340 812c 	ble.w	8022e56 <_strtod_l+0x82e>
 8022bfe:	2a34      	cmp	r2, #52	; 0x34
 8022c00:	bfde      	ittt	le
 8022c02:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8022c06:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022c0a:	408a      	lslle	r2, r1
 8022c0c:	f04f 0800 	mov.w	r8, #0
 8022c10:	bfcc      	ite	gt
 8022c12:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8022c16:	ea02 0900 	andle.w	r9, r2, r0
 8022c1a:	ec49 8b17 	vmov	d7, r8, r9
 8022c1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c26:	d0a8      	beq.n	8022b7a <_strtod_l+0x552>
 8022c28:	9a07      	ldr	r2, [sp, #28]
 8022c2a:	9200      	str	r2, [sp, #0]
 8022c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022c2e:	4632      	mov	r2, r6
 8022c30:	4620      	mov	r0, r4
 8022c32:	f7ff f8d5 	bl	8021de0 <__s2b>
 8022c36:	9007      	str	r0, [sp, #28]
 8022c38:	2800      	cmp	r0, #0
 8022c3a:	f43f af2f 	beq.w	8022a9c <_strtod_l+0x474>
 8022c3e:	9a06      	ldr	r2, [sp, #24]
 8022c40:	2a00      	cmp	r2, #0
 8022c42:	ebab 0305 	sub.w	r3, fp, r5
 8022c46:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8022ea0 <_strtod_l+0x878>
 8022c4a:	bfa8      	it	ge
 8022c4c:	2300      	movge	r3, #0
 8022c4e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8022ea8 <_strtod_l+0x880>
 8022c52:	ed9f bb97 	vldr	d11, [pc, #604]	; 8022eb0 <_strtod_l+0x888>
 8022c56:	9309      	str	r3, [sp, #36]	; 0x24
 8022c58:	2500      	movs	r5, #0
 8022c5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8022c60:	462e      	mov	r6, r5
 8022c62:	9b07      	ldr	r3, [sp, #28]
 8022c64:	4620      	mov	r0, r4
 8022c66:	6859      	ldr	r1, [r3, #4]
 8022c68:	f7ff f812 	bl	8021c90 <_Balloc>
 8022c6c:	4607      	mov	r7, r0
 8022c6e:	2800      	cmp	r0, #0
 8022c70:	f43f af18 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022c74:	9b07      	ldr	r3, [sp, #28]
 8022c76:	691a      	ldr	r2, [r3, #16]
 8022c78:	3202      	adds	r2, #2
 8022c7a:	f103 010c 	add.w	r1, r3, #12
 8022c7e:	0092      	lsls	r2, r2, #2
 8022c80:	300c      	adds	r0, #12
 8022c82:	f7fe f984 	bl	8020f8e <memcpy>
 8022c86:	ec49 8b10 	vmov	d0, r8, r9
 8022c8a:	aa14      	add	r2, sp, #80	; 0x50
 8022c8c:	a913      	add	r1, sp, #76	; 0x4c
 8022c8e:	4620      	mov	r0, r4
 8022c90:	f7ff fbda 	bl	8022448 <__d2b>
 8022c94:	ec49 8b18 	vmov	d8, r8, r9
 8022c98:	9012      	str	r0, [sp, #72]	; 0x48
 8022c9a:	2800      	cmp	r0, #0
 8022c9c:	f43f af02 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022ca0:	2101      	movs	r1, #1
 8022ca2:	4620      	mov	r0, r4
 8022ca4:	f7ff f934 	bl	8021f10 <__i2b>
 8022ca8:	4606      	mov	r6, r0
 8022caa:	2800      	cmp	r0, #0
 8022cac:	f43f aefa 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022cb2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	bfab      	itete	ge
 8022cb8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8022cba:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8022cbc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8022cc0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8022cc4:	bfac      	ite	ge
 8022cc6:	eb03 0b02 	addge.w	fp, r3, r2
 8022cca:	eba2 0a03 	sublt.w	sl, r2, r3
 8022cce:	9a05      	ldr	r2, [sp, #20]
 8022cd0:	1a9b      	subs	r3, r3, r2
 8022cd2:	440b      	add	r3, r1
 8022cd4:	4a7b      	ldr	r2, [pc, #492]	; (8022ec4 <_strtod_l+0x89c>)
 8022cd6:	3b01      	subs	r3, #1
 8022cd8:	4293      	cmp	r3, r2
 8022cda:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8022cde:	f280 80cd 	bge.w	8022e7c <_strtod_l+0x854>
 8022ce2:	1ad2      	subs	r2, r2, r3
 8022ce4:	2a1f      	cmp	r2, #31
 8022ce6:	eba1 0102 	sub.w	r1, r1, r2
 8022cea:	f04f 0001 	mov.w	r0, #1
 8022cee:	f300 80b9 	bgt.w	8022e64 <_strtod_l+0x83c>
 8022cf2:	fa00 f302 	lsl.w	r3, r0, r2
 8022cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cf8:	2300      	movs	r3, #0
 8022cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8022cfc:	eb0b 0301 	add.w	r3, fp, r1
 8022d00:	9a05      	ldr	r2, [sp, #20]
 8022d02:	459b      	cmp	fp, r3
 8022d04:	448a      	add	sl, r1
 8022d06:	4492      	add	sl, r2
 8022d08:	465a      	mov	r2, fp
 8022d0a:	bfa8      	it	ge
 8022d0c:	461a      	movge	r2, r3
 8022d0e:	4552      	cmp	r2, sl
 8022d10:	bfa8      	it	ge
 8022d12:	4652      	movge	r2, sl
 8022d14:	2a00      	cmp	r2, #0
 8022d16:	bfc2      	ittt	gt
 8022d18:	1a9b      	subgt	r3, r3, r2
 8022d1a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8022d1e:	ebab 0b02 	subgt.w	fp, fp, r2
 8022d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d24:	2a00      	cmp	r2, #0
 8022d26:	dd18      	ble.n	8022d5a <_strtod_l+0x732>
 8022d28:	4631      	mov	r1, r6
 8022d2a:	4620      	mov	r0, r4
 8022d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d2e:	f7ff f9af 	bl	8022090 <__pow5mult>
 8022d32:	4606      	mov	r6, r0
 8022d34:	2800      	cmp	r0, #0
 8022d36:	f43f aeb5 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022d3a:	4601      	mov	r1, r0
 8022d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022d3e:	4620      	mov	r0, r4
 8022d40:	f7ff f8fc 	bl	8021f3c <__multiply>
 8022d44:	900e      	str	r0, [sp, #56]	; 0x38
 8022d46:	2800      	cmp	r0, #0
 8022d48:	f43f aeac 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022d4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022d4e:	4620      	mov	r0, r4
 8022d50:	f7fe ffde 	bl	8021d10 <_Bfree>
 8022d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d58:	9212      	str	r2, [sp, #72]	; 0x48
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	f300 8093 	bgt.w	8022e86 <_strtod_l+0x85e>
 8022d60:	9b06      	ldr	r3, [sp, #24]
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	dd08      	ble.n	8022d78 <_strtod_l+0x750>
 8022d66:	4639      	mov	r1, r7
 8022d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d6a:	4620      	mov	r0, r4
 8022d6c:	f7ff f990 	bl	8022090 <__pow5mult>
 8022d70:	4607      	mov	r7, r0
 8022d72:	2800      	cmp	r0, #0
 8022d74:	f43f ae96 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022d78:	f1ba 0f00 	cmp.w	sl, #0
 8022d7c:	dd08      	ble.n	8022d90 <_strtod_l+0x768>
 8022d7e:	4639      	mov	r1, r7
 8022d80:	4652      	mov	r2, sl
 8022d82:	4620      	mov	r0, r4
 8022d84:	f7ff f9de 	bl	8022144 <__lshift>
 8022d88:	4607      	mov	r7, r0
 8022d8a:	2800      	cmp	r0, #0
 8022d8c:	f43f ae8a 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022d90:	f1bb 0f00 	cmp.w	fp, #0
 8022d94:	dd08      	ble.n	8022da8 <_strtod_l+0x780>
 8022d96:	4631      	mov	r1, r6
 8022d98:	465a      	mov	r2, fp
 8022d9a:	4620      	mov	r0, r4
 8022d9c:	f7ff f9d2 	bl	8022144 <__lshift>
 8022da0:	4606      	mov	r6, r0
 8022da2:	2800      	cmp	r0, #0
 8022da4:	f43f ae7e 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022da8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022daa:	463a      	mov	r2, r7
 8022dac:	4620      	mov	r0, r4
 8022dae:	f7ff fa51 	bl	8022254 <__mdiff>
 8022db2:	4605      	mov	r5, r0
 8022db4:	2800      	cmp	r0, #0
 8022db6:	f43f ae75 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022dba:	2300      	movs	r3, #0
 8022dbc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022dc0:	60c3      	str	r3, [r0, #12]
 8022dc2:	4631      	mov	r1, r6
 8022dc4:	f7ff fa2a 	bl	802221c <__mcmp>
 8022dc8:	2800      	cmp	r0, #0
 8022dca:	da7f      	bge.n	8022ecc <_strtod_l+0x8a4>
 8022dcc:	ea5a 0a08 	orrs.w	sl, sl, r8
 8022dd0:	f040 80a5 	bne.w	8022f1e <_strtod_l+0x8f6>
 8022dd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022dd8:	2b00      	cmp	r3, #0
 8022dda:	f040 80a0 	bne.w	8022f1e <_strtod_l+0x8f6>
 8022dde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022de2:	0d1b      	lsrs	r3, r3, #20
 8022de4:	051b      	lsls	r3, r3, #20
 8022de6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022dea:	f240 8098 	bls.w	8022f1e <_strtod_l+0x8f6>
 8022dee:	696b      	ldr	r3, [r5, #20]
 8022df0:	b91b      	cbnz	r3, 8022dfa <_strtod_l+0x7d2>
 8022df2:	692b      	ldr	r3, [r5, #16]
 8022df4:	2b01      	cmp	r3, #1
 8022df6:	f340 8092 	ble.w	8022f1e <_strtod_l+0x8f6>
 8022dfa:	4629      	mov	r1, r5
 8022dfc:	2201      	movs	r2, #1
 8022dfe:	4620      	mov	r0, r4
 8022e00:	f7ff f9a0 	bl	8022144 <__lshift>
 8022e04:	4631      	mov	r1, r6
 8022e06:	4605      	mov	r5, r0
 8022e08:	f7ff fa08 	bl	802221c <__mcmp>
 8022e0c:	2800      	cmp	r0, #0
 8022e0e:	f340 8086 	ble.w	8022f1e <_strtod_l+0x8f6>
 8022e12:	9905      	ldr	r1, [sp, #20]
 8022e14:	4a2c      	ldr	r2, [pc, #176]	; (8022ec8 <_strtod_l+0x8a0>)
 8022e16:	464b      	mov	r3, r9
 8022e18:	2900      	cmp	r1, #0
 8022e1a:	f000 809f 	beq.w	8022f5c <_strtod_l+0x934>
 8022e1e:	ea02 0109 	and.w	r1, r2, r9
 8022e22:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022e26:	f300 8099 	bgt.w	8022f5c <_strtod_l+0x934>
 8022e2a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022e2e:	f77f aea8 	ble.w	8022b82 <_strtod_l+0x55a>
 8022e32:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8022eb8 <_strtod_l+0x890>
 8022e36:	ec49 8b16 	vmov	d6, r8, r9
 8022e3a:	4b23      	ldr	r3, [pc, #140]	; (8022ec8 <_strtod_l+0x8a0>)
 8022e3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022e40:	ee17 2a90 	vmov	r2, s15
 8022e44:	4013      	ands	r3, r2
 8022e46:	ec59 8b17 	vmov	r8, r9, d7
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	f47f ae34 	bne.w	8022ab8 <_strtod_l+0x490>
 8022e50:	2322      	movs	r3, #34	; 0x22
 8022e52:	6023      	str	r3, [r4, #0]
 8022e54:	e630      	b.n	8022ab8 <_strtod_l+0x490>
 8022e56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8022e5e:	ea02 0808 	and.w	r8, r2, r8
 8022e62:	e6da      	b.n	8022c1a <_strtod_l+0x5f2>
 8022e64:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8022e68:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8022e6c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8022e70:	33e2      	adds	r3, #226	; 0xe2
 8022e72:	fa00 f303 	lsl.w	r3, r0, r3
 8022e76:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8022e7a:	e73f      	b.n	8022cfc <_strtod_l+0x6d4>
 8022e7c:	2200      	movs	r2, #0
 8022e7e:	2301      	movs	r3, #1
 8022e80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8022e84:	e73a      	b.n	8022cfc <_strtod_l+0x6d4>
 8022e86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022e88:	461a      	mov	r2, r3
 8022e8a:	4620      	mov	r0, r4
 8022e8c:	f7ff f95a 	bl	8022144 <__lshift>
 8022e90:	9012      	str	r0, [sp, #72]	; 0x48
 8022e92:	2800      	cmp	r0, #0
 8022e94:	f47f af64 	bne.w	8022d60 <_strtod_l+0x738>
 8022e98:	e604      	b.n	8022aa4 <_strtod_l+0x47c>
 8022e9a:	bf00      	nop
 8022e9c:	f3af 8000 	nop.w
 8022ea0:	94a03595 	.word	0x94a03595
 8022ea4:	3fcfffff 	.word	0x3fcfffff
 8022ea8:	94a03595 	.word	0x94a03595
 8022eac:	3fdfffff 	.word	0x3fdfffff
 8022eb0:	35afe535 	.word	0x35afe535
 8022eb4:	3fe00000 	.word	0x3fe00000
 8022eb8:	00000000 	.word	0x00000000
 8022ebc:	39500000 	.word	0x39500000
 8022ec0:	08025ed8 	.word	0x08025ed8
 8022ec4:	fffffc02 	.word	0xfffffc02
 8022ec8:	7ff00000 	.word	0x7ff00000
 8022ecc:	46cb      	mov	fp, r9
 8022ece:	d15f      	bne.n	8022f90 <_strtod_l+0x968>
 8022ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022ed4:	f1ba 0f00 	cmp.w	sl, #0
 8022ed8:	d02a      	beq.n	8022f30 <_strtod_l+0x908>
 8022eda:	4aa7      	ldr	r2, [pc, #668]	; (8023178 <_strtod_l+0xb50>)
 8022edc:	4293      	cmp	r3, r2
 8022ede:	d12b      	bne.n	8022f38 <_strtod_l+0x910>
 8022ee0:	9b05      	ldr	r3, [sp, #20]
 8022ee2:	4642      	mov	r2, r8
 8022ee4:	b1fb      	cbz	r3, 8022f26 <_strtod_l+0x8fe>
 8022ee6:	4ba5      	ldr	r3, [pc, #660]	; (802317c <_strtod_l+0xb54>)
 8022ee8:	ea09 0303 	and.w	r3, r9, r3
 8022eec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022ef4:	d81a      	bhi.n	8022f2c <_strtod_l+0x904>
 8022ef6:	0d1b      	lsrs	r3, r3, #20
 8022ef8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022efc:	fa01 f303 	lsl.w	r3, r1, r3
 8022f00:	429a      	cmp	r2, r3
 8022f02:	d119      	bne.n	8022f38 <_strtod_l+0x910>
 8022f04:	4b9e      	ldr	r3, [pc, #632]	; (8023180 <_strtod_l+0xb58>)
 8022f06:	459b      	cmp	fp, r3
 8022f08:	d102      	bne.n	8022f10 <_strtod_l+0x8e8>
 8022f0a:	3201      	adds	r2, #1
 8022f0c:	f43f adca 	beq.w	8022aa4 <_strtod_l+0x47c>
 8022f10:	4b9a      	ldr	r3, [pc, #616]	; (802317c <_strtod_l+0xb54>)
 8022f12:	ea0b 0303 	and.w	r3, fp, r3
 8022f16:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8022f1a:	f04f 0800 	mov.w	r8, #0
 8022f1e:	9b05      	ldr	r3, [sp, #20]
 8022f20:	2b00      	cmp	r3, #0
 8022f22:	d186      	bne.n	8022e32 <_strtod_l+0x80a>
 8022f24:	e5c8      	b.n	8022ab8 <_strtod_l+0x490>
 8022f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022f2a:	e7e9      	b.n	8022f00 <_strtod_l+0x8d8>
 8022f2c:	460b      	mov	r3, r1
 8022f2e:	e7e7      	b.n	8022f00 <_strtod_l+0x8d8>
 8022f30:	ea53 0308 	orrs.w	r3, r3, r8
 8022f34:	f43f af6d 	beq.w	8022e12 <_strtod_l+0x7ea>
 8022f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f3a:	b1cb      	cbz	r3, 8022f70 <_strtod_l+0x948>
 8022f3c:	ea13 0f0b 	tst.w	r3, fp
 8022f40:	d0ed      	beq.n	8022f1e <_strtod_l+0x8f6>
 8022f42:	9a05      	ldr	r2, [sp, #20]
 8022f44:	4640      	mov	r0, r8
 8022f46:	4649      	mov	r1, r9
 8022f48:	f1ba 0f00 	cmp.w	sl, #0
 8022f4c:	d014      	beq.n	8022f78 <_strtod_l+0x950>
 8022f4e:	f7ff fb51 	bl	80225f4 <sulp>
 8022f52:	ee38 7b00 	vadd.f64	d7, d8, d0
 8022f56:	ec59 8b17 	vmov	r8, r9, d7
 8022f5a:	e7e0      	b.n	8022f1e <_strtod_l+0x8f6>
 8022f5c:	4013      	ands	r3, r2
 8022f5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8022f62:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8022f66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8022f6a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022f6e:	e7d6      	b.n	8022f1e <_strtod_l+0x8f6>
 8022f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f72:	ea13 0f08 	tst.w	r3, r8
 8022f76:	e7e3      	b.n	8022f40 <_strtod_l+0x918>
 8022f78:	f7ff fb3c 	bl	80225f4 <sulp>
 8022f7c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8022f80:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8022f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f88:	ec59 8b10 	vmov	r8, r9, d0
 8022f8c:	d1c7      	bne.n	8022f1e <_strtod_l+0x8f6>
 8022f8e:	e5f8      	b.n	8022b82 <_strtod_l+0x55a>
 8022f90:	4631      	mov	r1, r6
 8022f92:	4628      	mov	r0, r5
 8022f94:	f7ff fab2 	bl	80224fc <__ratio>
 8022f98:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8022f9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8022fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fa4:	d85f      	bhi.n	8023066 <_strtod_l+0xa3e>
 8022fa6:	f1ba 0f00 	cmp.w	sl, #0
 8022faa:	d166      	bne.n	802307a <_strtod_l+0xa52>
 8022fac:	f1b8 0f00 	cmp.w	r8, #0
 8022fb0:	d14d      	bne.n	802304e <_strtod_l+0xa26>
 8022fb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022fb6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d162      	bne.n	8023084 <_strtod_l+0xa5c>
 8022fbe:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8022fc2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fca:	d401      	bmi.n	8022fd0 <_strtod_l+0x9a8>
 8022fcc:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022fd0:	eeb1 cb4d 	vneg.f64	d12, d13
 8022fd4:	4869      	ldr	r0, [pc, #420]	; (802317c <_strtod_l+0xb54>)
 8022fd6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8023188 <_strtod_l+0xb60>
 8022fda:	ea0b 0100 	and.w	r1, fp, r0
 8022fde:	4561      	cmp	r1, ip
 8022fe0:	ec53 2b1c 	vmov	r2, r3, d12
 8022fe4:	d17a      	bne.n	80230dc <_strtod_l+0xab4>
 8022fe6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8022fea:	ec49 8b10 	vmov	d0, r8, r9
 8022fee:	910a      	str	r1, [sp, #40]	; 0x28
 8022ff0:	f7ff f9ba 	bl	8022368 <__ulp>
 8022ff4:	ec49 8b1e 	vmov	d14, r8, r9
 8022ff8:	4860      	ldr	r0, [pc, #384]	; (802317c <_strtod_l+0xb54>)
 8022ffa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8022ffe:	ee1e 3a90 	vmov	r3, s29
 8023002:	4a60      	ldr	r2, [pc, #384]	; (8023184 <_strtod_l+0xb5c>)
 8023004:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023006:	4018      	ands	r0, r3
 8023008:	4290      	cmp	r0, r2
 802300a:	ec59 8b1e 	vmov	r8, r9, d14
 802300e:	d93c      	bls.n	802308a <_strtod_l+0xa62>
 8023010:	ee18 2a90 	vmov	r2, s17
 8023014:	4b5a      	ldr	r3, [pc, #360]	; (8023180 <_strtod_l+0xb58>)
 8023016:	429a      	cmp	r2, r3
 8023018:	d104      	bne.n	8023024 <_strtod_l+0x9fc>
 802301a:	ee18 3a10 	vmov	r3, s16
 802301e:	3301      	adds	r3, #1
 8023020:	f43f ad40 	beq.w	8022aa4 <_strtod_l+0x47c>
 8023024:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8023180 <_strtod_l+0xb58>
 8023028:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802302c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802302e:	4620      	mov	r0, r4
 8023030:	f7fe fe6e 	bl	8021d10 <_Bfree>
 8023034:	4639      	mov	r1, r7
 8023036:	4620      	mov	r0, r4
 8023038:	f7fe fe6a 	bl	8021d10 <_Bfree>
 802303c:	4631      	mov	r1, r6
 802303e:	4620      	mov	r0, r4
 8023040:	f7fe fe66 	bl	8021d10 <_Bfree>
 8023044:	4629      	mov	r1, r5
 8023046:	4620      	mov	r0, r4
 8023048:	f7fe fe62 	bl	8021d10 <_Bfree>
 802304c:	e609      	b.n	8022c62 <_strtod_l+0x63a>
 802304e:	f1b8 0f01 	cmp.w	r8, #1
 8023052:	d103      	bne.n	802305c <_strtod_l+0xa34>
 8023054:	f1b9 0f00 	cmp.w	r9, #0
 8023058:	f43f ad93 	beq.w	8022b82 <_strtod_l+0x55a>
 802305c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8023060:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8023064:	e7b6      	b.n	8022fd4 <_strtod_l+0x9ac>
 8023066:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 802306a:	ee20 db0d 	vmul.f64	d13, d0, d13
 802306e:	f1ba 0f00 	cmp.w	sl, #0
 8023072:	d0ad      	beq.n	8022fd0 <_strtod_l+0x9a8>
 8023074:	eeb0 cb4d 	vmov.f64	d12, d13
 8023078:	e7ac      	b.n	8022fd4 <_strtod_l+0x9ac>
 802307a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 802307e:	eeb0 db4c 	vmov.f64	d13, d12
 8023082:	e7a7      	b.n	8022fd4 <_strtod_l+0x9ac>
 8023084:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8023088:	e7a4      	b.n	8022fd4 <_strtod_l+0x9ac>
 802308a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802308e:	9b05      	ldr	r3, [sp, #20]
 8023090:	46cb      	mov	fp, r9
 8023092:	2b00      	cmp	r3, #0
 8023094:	d1ca      	bne.n	802302c <_strtod_l+0xa04>
 8023096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802309a:	0d1b      	lsrs	r3, r3, #20
 802309c:	051b      	lsls	r3, r3, #20
 802309e:	4299      	cmp	r1, r3
 80230a0:	d1c4      	bne.n	802302c <_strtod_l+0xa04>
 80230a2:	ec51 0b1d 	vmov	r0, r1, d13
 80230a6:	f7dd fb57 	bl	8000758 <__aeabi_d2lz>
 80230aa:	f7dd fabf 	bl	800062c <__aeabi_l2d>
 80230ae:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80230b2:	ec41 0b17 	vmov	d7, r0, r1
 80230b6:	ea4b 0b08 	orr.w	fp, fp, r8
 80230ba:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80230be:	ee3d db47 	vsub.f64	d13, d13, d7
 80230c2:	d03c      	beq.n	802313e <_strtod_l+0xb16>
 80230c4:	eeb4 dbca 	vcmpe.f64	d13, d10
 80230c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230cc:	f53f acf4 	bmi.w	8022ab8 <_strtod_l+0x490>
 80230d0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80230d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230d8:	dda8      	ble.n	802302c <_strtod_l+0xa04>
 80230da:	e4ed      	b.n	8022ab8 <_strtod_l+0x490>
 80230dc:	9805      	ldr	r0, [sp, #20]
 80230de:	b1f0      	cbz	r0, 802311e <_strtod_l+0xaf6>
 80230e0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80230e4:	d81b      	bhi.n	802311e <_strtod_l+0xaf6>
 80230e6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8023170 <_strtod_l+0xb48>
 80230ea:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80230ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230f2:	d811      	bhi.n	8023118 <_strtod_l+0xaf0>
 80230f4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80230f8:	ee1d 3a10 	vmov	r3, s26
 80230fc:	2b01      	cmp	r3, #1
 80230fe:	bf38      	it	cc
 8023100:	2301      	movcc	r3, #1
 8023102:	ee0d 3a10 	vmov	s26, r3
 8023106:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 802310a:	f1ba 0f00 	cmp.w	sl, #0
 802310e:	d113      	bne.n	8023138 <_strtod_l+0xb10>
 8023110:	eeb1 7b4d 	vneg.f64	d7, d13
 8023114:	ec53 2b17 	vmov	r2, r3, d7
 8023118:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 802311c:	1a43      	subs	r3, r0, r1
 802311e:	eeb0 0b48 	vmov.f64	d0, d8
 8023122:	ec43 2b1c 	vmov	d12, r2, r3
 8023126:	910a      	str	r1, [sp, #40]	; 0x28
 8023128:	f7ff f91e 	bl	8022368 <__ulp>
 802312c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802312e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8023132:	ec59 8b18 	vmov	r8, r9, d8
 8023136:	e7aa      	b.n	802308e <_strtod_l+0xa66>
 8023138:	eeb0 7b4d 	vmov.f64	d7, d13
 802313c:	e7ea      	b.n	8023114 <_strtod_l+0xaec>
 802313e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8023142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023146:	f57f af71 	bpl.w	802302c <_strtod_l+0xa04>
 802314a:	e4b5      	b.n	8022ab8 <_strtod_l+0x490>
 802314c:	2300      	movs	r3, #0
 802314e:	9308      	str	r3, [sp, #32]
 8023150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023154:	6013      	str	r3, [r2, #0]
 8023156:	f7ff baa6 	b.w	80226a6 <_strtod_l+0x7e>
 802315a:	2a65      	cmp	r2, #101	; 0x65
 802315c:	f43f aba2 	beq.w	80228a4 <_strtod_l+0x27c>
 8023160:	2a45      	cmp	r2, #69	; 0x45
 8023162:	f43f ab9f 	beq.w	80228a4 <_strtod_l+0x27c>
 8023166:	2101      	movs	r1, #1
 8023168:	f7ff bbd8 	b.w	802291c <_strtod_l+0x2f4>
 802316c:	f3af 8000 	nop.w
 8023170:	ffc00000 	.word	0xffc00000
 8023174:	41dfffff 	.word	0x41dfffff
 8023178:	000fffff 	.word	0x000fffff
 802317c:	7ff00000 	.word	0x7ff00000
 8023180:	7fefffff 	.word	0x7fefffff
 8023184:	7c9fffff 	.word	0x7c9fffff
 8023188:	7fe00000 	.word	0x7fe00000

0802318c <_strtod_r>:
 802318c:	4b01      	ldr	r3, [pc, #4]	; (8023194 <_strtod_r+0x8>)
 802318e:	f7ff ba4b 	b.w	8022628 <_strtod_l>
 8023192:	bf00      	nop
 8023194:	200009a0 	.word	0x200009a0

08023198 <_strtol_l.constprop.0>:
 8023198:	2b01      	cmp	r3, #1
 802319a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802319e:	d001      	beq.n	80231a4 <_strtol_l.constprop.0+0xc>
 80231a0:	2b24      	cmp	r3, #36	; 0x24
 80231a2:	d906      	bls.n	80231b2 <_strtol_l.constprop.0+0x1a>
 80231a4:	f7fd febe 	bl	8020f24 <__errno>
 80231a8:	2316      	movs	r3, #22
 80231aa:	6003      	str	r3, [r0, #0]
 80231ac:	2000      	movs	r0, #0
 80231ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80231b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023298 <_strtol_l.constprop.0+0x100>
 80231b6:	460d      	mov	r5, r1
 80231b8:	462e      	mov	r6, r5
 80231ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80231be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80231c2:	f017 0708 	ands.w	r7, r7, #8
 80231c6:	d1f7      	bne.n	80231b8 <_strtol_l.constprop.0+0x20>
 80231c8:	2c2d      	cmp	r4, #45	; 0x2d
 80231ca:	d132      	bne.n	8023232 <_strtol_l.constprop.0+0x9a>
 80231cc:	782c      	ldrb	r4, [r5, #0]
 80231ce:	2701      	movs	r7, #1
 80231d0:	1cb5      	adds	r5, r6, #2
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	d05b      	beq.n	802328e <_strtol_l.constprop.0+0xf6>
 80231d6:	2b10      	cmp	r3, #16
 80231d8:	d109      	bne.n	80231ee <_strtol_l.constprop.0+0x56>
 80231da:	2c30      	cmp	r4, #48	; 0x30
 80231dc:	d107      	bne.n	80231ee <_strtol_l.constprop.0+0x56>
 80231de:	782c      	ldrb	r4, [r5, #0]
 80231e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80231e4:	2c58      	cmp	r4, #88	; 0x58
 80231e6:	d14d      	bne.n	8023284 <_strtol_l.constprop.0+0xec>
 80231e8:	786c      	ldrb	r4, [r5, #1]
 80231ea:	2310      	movs	r3, #16
 80231ec:	3502      	adds	r5, #2
 80231ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80231f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80231f6:	f04f 0e00 	mov.w	lr, #0
 80231fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80231fe:	4676      	mov	r6, lr
 8023200:	fb03 8a19 	mls	sl, r3, r9, r8
 8023204:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8023208:	f1bc 0f09 	cmp.w	ip, #9
 802320c:	d816      	bhi.n	802323c <_strtol_l.constprop.0+0xa4>
 802320e:	4664      	mov	r4, ip
 8023210:	42a3      	cmp	r3, r4
 8023212:	dd24      	ble.n	802325e <_strtol_l.constprop.0+0xc6>
 8023214:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8023218:	d008      	beq.n	802322c <_strtol_l.constprop.0+0x94>
 802321a:	45b1      	cmp	r9, r6
 802321c:	d31c      	bcc.n	8023258 <_strtol_l.constprop.0+0xc0>
 802321e:	d101      	bne.n	8023224 <_strtol_l.constprop.0+0x8c>
 8023220:	45a2      	cmp	sl, r4
 8023222:	db19      	blt.n	8023258 <_strtol_l.constprop.0+0xc0>
 8023224:	fb06 4603 	mla	r6, r6, r3, r4
 8023228:	f04f 0e01 	mov.w	lr, #1
 802322c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023230:	e7e8      	b.n	8023204 <_strtol_l.constprop.0+0x6c>
 8023232:	2c2b      	cmp	r4, #43	; 0x2b
 8023234:	bf04      	itt	eq
 8023236:	782c      	ldrbeq	r4, [r5, #0]
 8023238:	1cb5      	addeq	r5, r6, #2
 802323a:	e7ca      	b.n	80231d2 <_strtol_l.constprop.0+0x3a>
 802323c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023240:	f1bc 0f19 	cmp.w	ip, #25
 8023244:	d801      	bhi.n	802324a <_strtol_l.constprop.0+0xb2>
 8023246:	3c37      	subs	r4, #55	; 0x37
 8023248:	e7e2      	b.n	8023210 <_strtol_l.constprop.0+0x78>
 802324a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802324e:	f1bc 0f19 	cmp.w	ip, #25
 8023252:	d804      	bhi.n	802325e <_strtol_l.constprop.0+0xc6>
 8023254:	3c57      	subs	r4, #87	; 0x57
 8023256:	e7db      	b.n	8023210 <_strtol_l.constprop.0+0x78>
 8023258:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 802325c:	e7e6      	b.n	802322c <_strtol_l.constprop.0+0x94>
 802325e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8023262:	d105      	bne.n	8023270 <_strtol_l.constprop.0+0xd8>
 8023264:	2322      	movs	r3, #34	; 0x22
 8023266:	6003      	str	r3, [r0, #0]
 8023268:	4646      	mov	r6, r8
 802326a:	b942      	cbnz	r2, 802327e <_strtol_l.constprop.0+0xe6>
 802326c:	4630      	mov	r0, r6
 802326e:	e79e      	b.n	80231ae <_strtol_l.constprop.0+0x16>
 8023270:	b107      	cbz	r7, 8023274 <_strtol_l.constprop.0+0xdc>
 8023272:	4276      	negs	r6, r6
 8023274:	2a00      	cmp	r2, #0
 8023276:	d0f9      	beq.n	802326c <_strtol_l.constprop.0+0xd4>
 8023278:	f1be 0f00 	cmp.w	lr, #0
 802327c:	d000      	beq.n	8023280 <_strtol_l.constprop.0+0xe8>
 802327e:	1e69      	subs	r1, r5, #1
 8023280:	6011      	str	r1, [r2, #0]
 8023282:	e7f3      	b.n	802326c <_strtol_l.constprop.0+0xd4>
 8023284:	2430      	movs	r4, #48	; 0x30
 8023286:	2b00      	cmp	r3, #0
 8023288:	d1b1      	bne.n	80231ee <_strtol_l.constprop.0+0x56>
 802328a:	2308      	movs	r3, #8
 802328c:	e7af      	b.n	80231ee <_strtol_l.constprop.0+0x56>
 802328e:	2c30      	cmp	r4, #48	; 0x30
 8023290:	d0a5      	beq.n	80231de <_strtol_l.constprop.0+0x46>
 8023292:	230a      	movs	r3, #10
 8023294:	e7ab      	b.n	80231ee <_strtol_l.constprop.0+0x56>
 8023296:	bf00      	nop
 8023298:	08025b6c 	.word	0x08025b6c

0802329c <_strtol_r>:
 802329c:	f7ff bf7c 	b.w	8023198 <_strtol_l.constprop.0>

080232a0 <__ssputs_r>:
 80232a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80232a4:	688e      	ldr	r6, [r1, #8]
 80232a6:	461f      	mov	r7, r3
 80232a8:	42be      	cmp	r6, r7
 80232aa:	680b      	ldr	r3, [r1, #0]
 80232ac:	4682      	mov	sl, r0
 80232ae:	460c      	mov	r4, r1
 80232b0:	4690      	mov	r8, r2
 80232b2:	d82c      	bhi.n	802330e <__ssputs_r+0x6e>
 80232b4:	898a      	ldrh	r2, [r1, #12]
 80232b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80232ba:	d026      	beq.n	802330a <__ssputs_r+0x6a>
 80232bc:	6965      	ldr	r5, [r4, #20]
 80232be:	6909      	ldr	r1, [r1, #16]
 80232c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80232c4:	eba3 0901 	sub.w	r9, r3, r1
 80232c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80232cc:	1c7b      	adds	r3, r7, #1
 80232ce:	444b      	add	r3, r9
 80232d0:	106d      	asrs	r5, r5, #1
 80232d2:	429d      	cmp	r5, r3
 80232d4:	bf38      	it	cc
 80232d6:	461d      	movcc	r5, r3
 80232d8:	0553      	lsls	r3, r2, #21
 80232da:	d527      	bpl.n	802332c <__ssputs_r+0x8c>
 80232dc:	4629      	mov	r1, r5
 80232de:	f7fc f9d5 	bl	801f68c <_malloc_r>
 80232e2:	4606      	mov	r6, r0
 80232e4:	b360      	cbz	r0, 8023340 <__ssputs_r+0xa0>
 80232e6:	6921      	ldr	r1, [r4, #16]
 80232e8:	464a      	mov	r2, r9
 80232ea:	f7fd fe50 	bl	8020f8e <memcpy>
 80232ee:	89a3      	ldrh	r3, [r4, #12]
 80232f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80232f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80232f8:	81a3      	strh	r3, [r4, #12]
 80232fa:	6126      	str	r6, [r4, #16]
 80232fc:	6165      	str	r5, [r4, #20]
 80232fe:	444e      	add	r6, r9
 8023300:	eba5 0509 	sub.w	r5, r5, r9
 8023304:	6026      	str	r6, [r4, #0]
 8023306:	60a5      	str	r5, [r4, #8]
 8023308:	463e      	mov	r6, r7
 802330a:	42be      	cmp	r6, r7
 802330c:	d900      	bls.n	8023310 <__ssputs_r+0x70>
 802330e:	463e      	mov	r6, r7
 8023310:	6820      	ldr	r0, [r4, #0]
 8023312:	4632      	mov	r2, r6
 8023314:	4641      	mov	r1, r8
 8023316:	f7fd fd53 	bl	8020dc0 <memmove>
 802331a:	68a3      	ldr	r3, [r4, #8]
 802331c:	1b9b      	subs	r3, r3, r6
 802331e:	60a3      	str	r3, [r4, #8]
 8023320:	6823      	ldr	r3, [r4, #0]
 8023322:	4433      	add	r3, r6
 8023324:	6023      	str	r3, [r4, #0]
 8023326:	2000      	movs	r0, #0
 8023328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802332c:	462a      	mov	r2, r5
 802332e:	f7fc faad 	bl	801f88c <_realloc_r>
 8023332:	4606      	mov	r6, r0
 8023334:	2800      	cmp	r0, #0
 8023336:	d1e0      	bne.n	80232fa <__ssputs_r+0x5a>
 8023338:	6921      	ldr	r1, [r4, #16]
 802333a:	4650      	mov	r0, sl
 802333c:	f7fe fc5c 	bl	8021bf8 <_free_r>
 8023340:	230c      	movs	r3, #12
 8023342:	f8ca 3000 	str.w	r3, [sl]
 8023346:	89a3      	ldrh	r3, [r4, #12]
 8023348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802334c:	81a3      	strh	r3, [r4, #12]
 802334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023352:	e7e9      	b.n	8023328 <__ssputs_r+0x88>

08023354 <_svfiprintf_r>:
 8023354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023358:	4698      	mov	r8, r3
 802335a:	898b      	ldrh	r3, [r1, #12]
 802335c:	061b      	lsls	r3, r3, #24
 802335e:	b09d      	sub	sp, #116	; 0x74
 8023360:	4607      	mov	r7, r0
 8023362:	460d      	mov	r5, r1
 8023364:	4614      	mov	r4, r2
 8023366:	d50e      	bpl.n	8023386 <_svfiprintf_r+0x32>
 8023368:	690b      	ldr	r3, [r1, #16]
 802336a:	b963      	cbnz	r3, 8023386 <_svfiprintf_r+0x32>
 802336c:	2140      	movs	r1, #64	; 0x40
 802336e:	f7fc f98d 	bl	801f68c <_malloc_r>
 8023372:	6028      	str	r0, [r5, #0]
 8023374:	6128      	str	r0, [r5, #16]
 8023376:	b920      	cbnz	r0, 8023382 <_svfiprintf_r+0x2e>
 8023378:	230c      	movs	r3, #12
 802337a:	603b      	str	r3, [r7, #0]
 802337c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023380:	e0d0      	b.n	8023524 <_svfiprintf_r+0x1d0>
 8023382:	2340      	movs	r3, #64	; 0x40
 8023384:	616b      	str	r3, [r5, #20]
 8023386:	2300      	movs	r3, #0
 8023388:	9309      	str	r3, [sp, #36]	; 0x24
 802338a:	2320      	movs	r3, #32
 802338c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023390:	f8cd 800c 	str.w	r8, [sp, #12]
 8023394:	2330      	movs	r3, #48	; 0x30
 8023396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802353c <_svfiprintf_r+0x1e8>
 802339a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802339e:	f04f 0901 	mov.w	r9, #1
 80233a2:	4623      	mov	r3, r4
 80233a4:	469a      	mov	sl, r3
 80233a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80233aa:	b10a      	cbz	r2, 80233b0 <_svfiprintf_r+0x5c>
 80233ac:	2a25      	cmp	r2, #37	; 0x25
 80233ae:	d1f9      	bne.n	80233a4 <_svfiprintf_r+0x50>
 80233b0:	ebba 0b04 	subs.w	fp, sl, r4
 80233b4:	d00b      	beq.n	80233ce <_svfiprintf_r+0x7a>
 80233b6:	465b      	mov	r3, fp
 80233b8:	4622      	mov	r2, r4
 80233ba:	4629      	mov	r1, r5
 80233bc:	4638      	mov	r0, r7
 80233be:	f7ff ff6f 	bl	80232a0 <__ssputs_r>
 80233c2:	3001      	adds	r0, #1
 80233c4:	f000 80a9 	beq.w	802351a <_svfiprintf_r+0x1c6>
 80233c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233ca:	445a      	add	r2, fp
 80233cc:	9209      	str	r2, [sp, #36]	; 0x24
 80233ce:	f89a 3000 	ldrb.w	r3, [sl]
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	f000 80a1 	beq.w	802351a <_svfiprintf_r+0x1c6>
 80233d8:	2300      	movs	r3, #0
 80233da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80233de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80233e2:	f10a 0a01 	add.w	sl, sl, #1
 80233e6:	9304      	str	r3, [sp, #16]
 80233e8:	9307      	str	r3, [sp, #28]
 80233ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80233ee:	931a      	str	r3, [sp, #104]	; 0x68
 80233f0:	4654      	mov	r4, sl
 80233f2:	2205      	movs	r2, #5
 80233f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233f8:	4850      	ldr	r0, [pc, #320]	; (802353c <_svfiprintf_r+0x1e8>)
 80233fa:	f7dc ff31 	bl	8000260 <memchr>
 80233fe:	9a04      	ldr	r2, [sp, #16]
 8023400:	b9d8      	cbnz	r0, 802343a <_svfiprintf_r+0xe6>
 8023402:	06d0      	lsls	r0, r2, #27
 8023404:	bf44      	itt	mi
 8023406:	2320      	movmi	r3, #32
 8023408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802340c:	0711      	lsls	r1, r2, #28
 802340e:	bf44      	itt	mi
 8023410:	232b      	movmi	r3, #43	; 0x2b
 8023412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023416:	f89a 3000 	ldrb.w	r3, [sl]
 802341a:	2b2a      	cmp	r3, #42	; 0x2a
 802341c:	d015      	beq.n	802344a <_svfiprintf_r+0xf6>
 802341e:	9a07      	ldr	r2, [sp, #28]
 8023420:	4654      	mov	r4, sl
 8023422:	2000      	movs	r0, #0
 8023424:	f04f 0c0a 	mov.w	ip, #10
 8023428:	4621      	mov	r1, r4
 802342a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802342e:	3b30      	subs	r3, #48	; 0x30
 8023430:	2b09      	cmp	r3, #9
 8023432:	d94d      	bls.n	80234d0 <_svfiprintf_r+0x17c>
 8023434:	b1b0      	cbz	r0, 8023464 <_svfiprintf_r+0x110>
 8023436:	9207      	str	r2, [sp, #28]
 8023438:	e014      	b.n	8023464 <_svfiprintf_r+0x110>
 802343a:	eba0 0308 	sub.w	r3, r0, r8
 802343e:	fa09 f303 	lsl.w	r3, r9, r3
 8023442:	4313      	orrs	r3, r2
 8023444:	9304      	str	r3, [sp, #16]
 8023446:	46a2      	mov	sl, r4
 8023448:	e7d2      	b.n	80233f0 <_svfiprintf_r+0x9c>
 802344a:	9b03      	ldr	r3, [sp, #12]
 802344c:	1d19      	adds	r1, r3, #4
 802344e:	681b      	ldr	r3, [r3, #0]
 8023450:	9103      	str	r1, [sp, #12]
 8023452:	2b00      	cmp	r3, #0
 8023454:	bfbb      	ittet	lt
 8023456:	425b      	neglt	r3, r3
 8023458:	f042 0202 	orrlt.w	r2, r2, #2
 802345c:	9307      	strge	r3, [sp, #28]
 802345e:	9307      	strlt	r3, [sp, #28]
 8023460:	bfb8      	it	lt
 8023462:	9204      	strlt	r2, [sp, #16]
 8023464:	7823      	ldrb	r3, [r4, #0]
 8023466:	2b2e      	cmp	r3, #46	; 0x2e
 8023468:	d10c      	bne.n	8023484 <_svfiprintf_r+0x130>
 802346a:	7863      	ldrb	r3, [r4, #1]
 802346c:	2b2a      	cmp	r3, #42	; 0x2a
 802346e:	d134      	bne.n	80234da <_svfiprintf_r+0x186>
 8023470:	9b03      	ldr	r3, [sp, #12]
 8023472:	1d1a      	adds	r2, r3, #4
 8023474:	681b      	ldr	r3, [r3, #0]
 8023476:	9203      	str	r2, [sp, #12]
 8023478:	2b00      	cmp	r3, #0
 802347a:	bfb8      	it	lt
 802347c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023480:	3402      	adds	r4, #2
 8023482:	9305      	str	r3, [sp, #20]
 8023484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802354c <_svfiprintf_r+0x1f8>
 8023488:	7821      	ldrb	r1, [r4, #0]
 802348a:	2203      	movs	r2, #3
 802348c:	4650      	mov	r0, sl
 802348e:	f7dc fee7 	bl	8000260 <memchr>
 8023492:	b138      	cbz	r0, 80234a4 <_svfiprintf_r+0x150>
 8023494:	9b04      	ldr	r3, [sp, #16]
 8023496:	eba0 000a 	sub.w	r0, r0, sl
 802349a:	2240      	movs	r2, #64	; 0x40
 802349c:	4082      	lsls	r2, r0
 802349e:	4313      	orrs	r3, r2
 80234a0:	3401      	adds	r4, #1
 80234a2:	9304      	str	r3, [sp, #16]
 80234a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234a8:	4825      	ldr	r0, [pc, #148]	; (8023540 <_svfiprintf_r+0x1ec>)
 80234aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80234ae:	2206      	movs	r2, #6
 80234b0:	f7dc fed6 	bl	8000260 <memchr>
 80234b4:	2800      	cmp	r0, #0
 80234b6:	d038      	beq.n	802352a <_svfiprintf_r+0x1d6>
 80234b8:	4b22      	ldr	r3, [pc, #136]	; (8023544 <_svfiprintf_r+0x1f0>)
 80234ba:	bb1b      	cbnz	r3, 8023504 <_svfiprintf_r+0x1b0>
 80234bc:	9b03      	ldr	r3, [sp, #12]
 80234be:	3307      	adds	r3, #7
 80234c0:	f023 0307 	bic.w	r3, r3, #7
 80234c4:	3308      	adds	r3, #8
 80234c6:	9303      	str	r3, [sp, #12]
 80234c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234ca:	4433      	add	r3, r6
 80234cc:	9309      	str	r3, [sp, #36]	; 0x24
 80234ce:	e768      	b.n	80233a2 <_svfiprintf_r+0x4e>
 80234d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80234d4:	460c      	mov	r4, r1
 80234d6:	2001      	movs	r0, #1
 80234d8:	e7a6      	b.n	8023428 <_svfiprintf_r+0xd4>
 80234da:	2300      	movs	r3, #0
 80234dc:	3401      	adds	r4, #1
 80234de:	9305      	str	r3, [sp, #20]
 80234e0:	4619      	mov	r1, r3
 80234e2:	f04f 0c0a 	mov.w	ip, #10
 80234e6:	4620      	mov	r0, r4
 80234e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234ec:	3a30      	subs	r2, #48	; 0x30
 80234ee:	2a09      	cmp	r2, #9
 80234f0:	d903      	bls.n	80234fa <_svfiprintf_r+0x1a6>
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	d0c6      	beq.n	8023484 <_svfiprintf_r+0x130>
 80234f6:	9105      	str	r1, [sp, #20]
 80234f8:	e7c4      	b.n	8023484 <_svfiprintf_r+0x130>
 80234fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80234fe:	4604      	mov	r4, r0
 8023500:	2301      	movs	r3, #1
 8023502:	e7f0      	b.n	80234e6 <_svfiprintf_r+0x192>
 8023504:	ab03      	add	r3, sp, #12
 8023506:	9300      	str	r3, [sp, #0]
 8023508:	462a      	mov	r2, r5
 802350a:	4b0f      	ldr	r3, [pc, #60]	; (8023548 <_svfiprintf_r+0x1f4>)
 802350c:	a904      	add	r1, sp, #16
 802350e:	4638      	mov	r0, r7
 8023510:	f7fc fafa 	bl	801fb08 <_printf_float>
 8023514:	1c42      	adds	r2, r0, #1
 8023516:	4606      	mov	r6, r0
 8023518:	d1d6      	bne.n	80234c8 <_svfiprintf_r+0x174>
 802351a:	89ab      	ldrh	r3, [r5, #12]
 802351c:	065b      	lsls	r3, r3, #25
 802351e:	f53f af2d 	bmi.w	802337c <_svfiprintf_r+0x28>
 8023522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023524:	b01d      	add	sp, #116	; 0x74
 8023526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802352a:	ab03      	add	r3, sp, #12
 802352c:	9300      	str	r3, [sp, #0]
 802352e:	462a      	mov	r2, r5
 8023530:	4b05      	ldr	r3, [pc, #20]	; (8023548 <_svfiprintf_r+0x1f4>)
 8023532:	a904      	add	r1, sp, #16
 8023534:	4638      	mov	r0, r7
 8023536:	f7fc fd6f 	bl	8020018 <_printf_i>
 802353a:	e7eb      	b.n	8023514 <_svfiprintf_r+0x1c0>
 802353c:	08025f00 	.word	0x08025f00
 8023540:	08025f0a 	.word	0x08025f0a
 8023544:	0801fb09 	.word	0x0801fb09
 8023548:	080232a1 	.word	0x080232a1
 802354c:	08025f06 	.word	0x08025f06

08023550 <__sfputc_r>:
 8023550:	6893      	ldr	r3, [r2, #8]
 8023552:	3b01      	subs	r3, #1
 8023554:	2b00      	cmp	r3, #0
 8023556:	b410      	push	{r4}
 8023558:	6093      	str	r3, [r2, #8]
 802355a:	da08      	bge.n	802356e <__sfputc_r+0x1e>
 802355c:	6994      	ldr	r4, [r2, #24]
 802355e:	42a3      	cmp	r3, r4
 8023560:	db01      	blt.n	8023566 <__sfputc_r+0x16>
 8023562:	290a      	cmp	r1, #10
 8023564:	d103      	bne.n	802356e <__sfputc_r+0x1e>
 8023566:	f85d 4b04 	ldr.w	r4, [sp], #4
 802356a:	f7fd bb83 	b.w	8020c74 <__swbuf_r>
 802356e:	6813      	ldr	r3, [r2, #0]
 8023570:	1c58      	adds	r0, r3, #1
 8023572:	6010      	str	r0, [r2, #0]
 8023574:	7019      	strb	r1, [r3, #0]
 8023576:	4608      	mov	r0, r1
 8023578:	f85d 4b04 	ldr.w	r4, [sp], #4
 802357c:	4770      	bx	lr

0802357e <__sfputs_r>:
 802357e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023580:	4606      	mov	r6, r0
 8023582:	460f      	mov	r7, r1
 8023584:	4614      	mov	r4, r2
 8023586:	18d5      	adds	r5, r2, r3
 8023588:	42ac      	cmp	r4, r5
 802358a:	d101      	bne.n	8023590 <__sfputs_r+0x12>
 802358c:	2000      	movs	r0, #0
 802358e:	e007      	b.n	80235a0 <__sfputs_r+0x22>
 8023590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023594:	463a      	mov	r2, r7
 8023596:	4630      	mov	r0, r6
 8023598:	f7ff ffda 	bl	8023550 <__sfputc_r>
 802359c:	1c43      	adds	r3, r0, #1
 802359e:	d1f3      	bne.n	8023588 <__sfputs_r+0xa>
 80235a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080235a4 <_vfiprintf_r>:
 80235a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a8:	460d      	mov	r5, r1
 80235aa:	b09d      	sub	sp, #116	; 0x74
 80235ac:	4614      	mov	r4, r2
 80235ae:	4698      	mov	r8, r3
 80235b0:	4606      	mov	r6, r0
 80235b2:	b118      	cbz	r0, 80235bc <_vfiprintf_r+0x18>
 80235b4:	6a03      	ldr	r3, [r0, #32]
 80235b6:	b90b      	cbnz	r3, 80235bc <_vfiprintf_r+0x18>
 80235b8:	f7fd f8e0 	bl	802077c <__sinit>
 80235bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80235be:	07d9      	lsls	r1, r3, #31
 80235c0:	d405      	bmi.n	80235ce <_vfiprintf_r+0x2a>
 80235c2:	89ab      	ldrh	r3, [r5, #12]
 80235c4:	059a      	lsls	r2, r3, #22
 80235c6:	d402      	bmi.n	80235ce <_vfiprintf_r+0x2a>
 80235c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80235ca:	f7fd fcd6 	bl	8020f7a <__retarget_lock_acquire_recursive>
 80235ce:	89ab      	ldrh	r3, [r5, #12]
 80235d0:	071b      	lsls	r3, r3, #28
 80235d2:	d501      	bpl.n	80235d8 <_vfiprintf_r+0x34>
 80235d4:	692b      	ldr	r3, [r5, #16]
 80235d6:	b99b      	cbnz	r3, 8023600 <_vfiprintf_r+0x5c>
 80235d8:	4629      	mov	r1, r5
 80235da:	4630      	mov	r0, r6
 80235dc:	f7fd fb88 	bl	8020cf0 <__swsetup_r>
 80235e0:	b170      	cbz	r0, 8023600 <_vfiprintf_r+0x5c>
 80235e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80235e4:	07dc      	lsls	r4, r3, #31
 80235e6:	d504      	bpl.n	80235f2 <_vfiprintf_r+0x4e>
 80235e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80235ec:	b01d      	add	sp, #116	; 0x74
 80235ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235f2:	89ab      	ldrh	r3, [r5, #12]
 80235f4:	0598      	lsls	r0, r3, #22
 80235f6:	d4f7      	bmi.n	80235e8 <_vfiprintf_r+0x44>
 80235f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80235fa:	f7fd fcbf 	bl	8020f7c <__retarget_lock_release_recursive>
 80235fe:	e7f3      	b.n	80235e8 <_vfiprintf_r+0x44>
 8023600:	2300      	movs	r3, #0
 8023602:	9309      	str	r3, [sp, #36]	; 0x24
 8023604:	2320      	movs	r3, #32
 8023606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802360a:	f8cd 800c 	str.w	r8, [sp, #12]
 802360e:	2330      	movs	r3, #48	; 0x30
 8023610:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80237c4 <_vfiprintf_r+0x220>
 8023614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023618:	f04f 0901 	mov.w	r9, #1
 802361c:	4623      	mov	r3, r4
 802361e:	469a      	mov	sl, r3
 8023620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023624:	b10a      	cbz	r2, 802362a <_vfiprintf_r+0x86>
 8023626:	2a25      	cmp	r2, #37	; 0x25
 8023628:	d1f9      	bne.n	802361e <_vfiprintf_r+0x7a>
 802362a:	ebba 0b04 	subs.w	fp, sl, r4
 802362e:	d00b      	beq.n	8023648 <_vfiprintf_r+0xa4>
 8023630:	465b      	mov	r3, fp
 8023632:	4622      	mov	r2, r4
 8023634:	4629      	mov	r1, r5
 8023636:	4630      	mov	r0, r6
 8023638:	f7ff ffa1 	bl	802357e <__sfputs_r>
 802363c:	3001      	adds	r0, #1
 802363e:	f000 80a9 	beq.w	8023794 <_vfiprintf_r+0x1f0>
 8023642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023644:	445a      	add	r2, fp
 8023646:	9209      	str	r2, [sp, #36]	; 0x24
 8023648:	f89a 3000 	ldrb.w	r3, [sl]
 802364c:	2b00      	cmp	r3, #0
 802364e:	f000 80a1 	beq.w	8023794 <_vfiprintf_r+0x1f0>
 8023652:	2300      	movs	r3, #0
 8023654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802365c:	f10a 0a01 	add.w	sl, sl, #1
 8023660:	9304      	str	r3, [sp, #16]
 8023662:	9307      	str	r3, [sp, #28]
 8023664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023668:	931a      	str	r3, [sp, #104]	; 0x68
 802366a:	4654      	mov	r4, sl
 802366c:	2205      	movs	r2, #5
 802366e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023672:	4854      	ldr	r0, [pc, #336]	; (80237c4 <_vfiprintf_r+0x220>)
 8023674:	f7dc fdf4 	bl	8000260 <memchr>
 8023678:	9a04      	ldr	r2, [sp, #16]
 802367a:	b9d8      	cbnz	r0, 80236b4 <_vfiprintf_r+0x110>
 802367c:	06d1      	lsls	r1, r2, #27
 802367e:	bf44      	itt	mi
 8023680:	2320      	movmi	r3, #32
 8023682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023686:	0713      	lsls	r3, r2, #28
 8023688:	bf44      	itt	mi
 802368a:	232b      	movmi	r3, #43	; 0x2b
 802368c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023690:	f89a 3000 	ldrb.w	r3, [sl]
 8023694:	2b2a      	cmp	r3, #42	; 0x2a
 8023696:	d015      	beq.n	80236c4 <_vfiprintf_r+0x120>
 8023698:	9a07      	ldr	r2, [sp, #28]
 802369a:	4654      	mov	r4, sl
 802369c:	2000      	movs	r0, #0
 802369e:	f04f 0c0a 	mov.w	ip, #10
 80236a2:	4621      	mov	r1, r4
 80236a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80236a8:	3b30      	subs	r3, #48	; 0x30
 80236aa:	2b09      	cmp	r3, #9
 80236ac:	d94d      	bls.n	802374a <_vfiprintf_r+0x1a6>
 80236ae:	b1b0      	cbz	r0, 80236de <_vfiprintf_r+0x13a>
 80236b0:	9207      	str	r2, [sp, #28]
 80236b2:	e014      	b.n	80236de <_vfiprintf_r+0x13a>
 80236b4:	eba0 0308 	sub.w	r3, r0, r8
 80236b8:	fa09 f303 	lsl.w	r3, r9, r3
 80236bc:	4313      	orrs	r3, r2
 80236be:	9304      	str	r3, [sp, #16]
 80236c0:	46a2      	mov	sl, r4
 80236c2:	e7d2      	b.n	802366a <_vfiprintf_r+0xc6>
 80236c4:	9b03      	ldr	r3, [sp, #12]
 80236c6:	1d19      	adds	r1, r3, #4
 80236c8:	681b      	ldr	r3, [r3, #0]
 80236ca:	9103      	str	r1, [sp, #12]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	bfbb      	ittet	lt
 80236d0:	425b      	neglt	r3, r3
 80236d2:	f042 0202 	orrlt.w	r2, r2, #2
 80236d6:	9307      	strge	r3, [sp, #28]
 80236d8:	9307      	strlt	r3, [sp, #28]
 80236da:	bfb8      	it	lt
 80236dc:	9204      	strlt	r2, [sp, #16]
 80236de:	7823      	ldrb	r3, [r4, #0]
 80236e0:	2b2e      	cmp	r3, #46	; 0x2e
 80236e2:	d10c      	bne.n	80236fe <_vfiprintf_r+0x15a>
 80236e4:	7863      	ldrb	r3, [r4, #1]
 80236e6:	2b2a      	cmp	r3, #42	; 0x2a
 80236e8:	d134      	bne.n	8023754 <_vfiprintf_r+0x1b0>
 80236ea:	9b03      	ldr	r3, [sp, #12]
 80236ec:	1d1a      	adds	r2, r3, #4
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	9203      	str	r2, [sp, #12]
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	bfb8      	it	lt
 80236f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80236fa:	3402      	adds	r4, #2
 80236fc:	9305      	str	r3, [sp, #20]
 80236fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80237d4 <_vfiprintf_r+0x230>
 8023702:	7821      	ldrb	r1, [r4, #0]
 8023704:	2203      	movs	r2, #3
 8023706:	4650      	mov	r0, sl
 8023708:	f7dc fdaa 	bl	8000260 <memchr>
 802370c:	b138      	cbz	r0, 802371e <_vfiprintf_r+0x17a>
 802370e:	9b04      	ldr	r3, [sp, #16]
 8023710:	eba0 000a 	sub.w	r0, r0, sl
 8023714:	2240      	movs	r2, #64	; 0x40
 8023716:	4082      	lsls	r2, r0
 8023718:	4313      	orrs	r3, r2
 802371a:	3401      	adds	r4, #1
 802371c:	9304      	str	r3, [sp, #16]
 802371e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023722:	4829      	ldr	r0, [pc, #164]	; (80237c8 <_vfiprintf_r+0x224>)
 8023724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023728:	2206      	movs	r2, #6
 802372a:	f7dc fd99 	bl	8000260 <memchr>
 802372e:	2800      	cmp	r0, #0
 8023730:	d03f      	beq.n	80237b2 <_vfiprintf_r+0x20e>
 8023732:	4b26      	ldr	r3, [pc, #152]	; (80237cc <_vfiprintf_r+0x228>)
 8023734:	bb1b      	cbnz	r3, 802377e <_vfiprintf_r+0x1da>
 8023736:	9b03      	ldr	r3, [sp, #12]
 8023738:	3307      	adds	r3, #7
 802373a:	f023 0307 	bic.w	r3, r3, #7
 802373e:	3308      	adds	r3, #8
 8023740:	9303      	str	r3, [sp, #12]
 8023742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023744:	443b      	add	r3, r7
 8023746:	9309      	str	r3, [sp, #36]	; 0x24
 8023748:	e768      	b.n	802361c <_vfiprintf_r+0x78>
 802374a:	fb0c 3202 	mla	r2, ip, r2, r3
 802374e:	460c      	mov	r4, r1
 8023750:	2001      	movs	r0, #1
 8023752:	e7a6      	b.n	80236a2 <_vfiprintf_r+0xfe>
 8023754:	2300      	movs	r3, #0
 8023756:	3401      	adds	r4, #1
 8023758:	9305      	str	r3, [sp, #20]
 802375a:	4619      	mov	r1, r3
 802375c:	f04f 0c0a 	mov.w	ip, #10
 8023760:	4620      	mov	r0, r4
 8023762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023766:	3a30      	subs	r2, #48	; 0x30
 8023768:	2a09      	cmp	r2, #9
 802376a:	d903      	bls.n	8023774 <_vfiprintf_r+0x1d0>
 802376c:	2b00      	cmp	r3, #0
 802376e:	d0c6      	beq.n	80236fe <_vfiprintf_r+0x15a>
 8023770:	9105      	str	r1, [sp, #20]
 8023772:	e7c4      	b.n	80236fe <_vfiprintf_r+0x15a>
 8023774:	fb0c 2101 	mla	r1, ip, r1, r2
 8023778:	4604      	mov	r4, r0
 802377a:	2301      	movs	r3, #1
 802377c:	e7f0      	b.n	8023760 <_vfiprintf_r+0x1bc>
 802377e:	ab03      	add	r3, sp, #12
 8023780:	9300      	str	r3, [sp, #0]
 8023782:	462a      	mov	r2, r5
 8023784:	4b12      	ldr	r3, [pc, #72]	; (80237d0 <_vfiprintf_r+0x22c>)
 8023786:	a904      	add	r1, sp, #16
 8023788:	4630      	mov	r0, r6
 802378a:	f7fc f9bd 	bl	801fb08 <_printf_float>
 802378e:	4607      	mov	r7, r0
 8023790:	1c78      	adds	r0, r7, #1
 8023792:	d1d6      	bne.n	8023742 <_vfiprintf_r+0x19e>
 8023794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023796:	07d9      	lsls	r1, r3, #31
 8023798:	d405      	bmi.n	80237a6 <_vfiprintf_r+0x202>
 802379a:	89ab      	ldrh	r3, [r5, #12]
 802379c:	059a      	lsls	r2, r3, #22
 802379e:	d402      	bmi.n	80237a6 <_vfiprintf_r+0x202>
 80237a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80237a2:	f7fd fbeb 	bl	8020f7c <__retarget_lock_release_recursive>
 80237a6:	89ab      	ldrh	r3, [r5, #12]
 80237a8:	065b      	lsls	r3, r3, #25
 80237aa:	f53f af1d 	bmi.w	80235e8 <_vfiprintf_r+0x44>
 80237ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80237b0:	e71c      	b.n	80235ec <_vfiprintf_r+0x48>
 80237b2:	ab03      	add	r3, sp, #12
 80237b4:	9300      	str	r3, [sp, #0]
 80237b6:	462a      	mov	r2, r5
 80237b8:	4b05      	ldr	r3, [pc, #20]	; (80237d0 <_vfiprintf_r+0x22c>)
 80237ba:	a904      	add	r1, sp, #16
 80237bc:	4630      	mov	r0, r6
 80237be:	f7fc fc2b 	bl	8020018 <_printf_i>
 80237c2:	e7e4      	b.n	802378e <_vfiprintf_r+0x1ea>
 80237c4:	08025f00 	.word	0x08025f00
 80237c8:	08025f0a 	.word	0x08025f0a
 80237cc:	0801fb09 	.word	0x0801fb09
 80237d0:	0802357f 	.word	0x0802357f
 80237d4:	08025f06 	.word	0x08025f06

080237d8 <__sflush_r>:
 80237d8:	898a      	ldrh	r2, [r1, #12]
 80237da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80237de:	4605      	mov	r5, r0
 80237e0:	0710      	lsls	r0, r2, #28
 80237e2:	460c      	mov	r4, r1
 80237e4:	d458      	bmi.n	8023898 <__sflush_r+0xc0>
 80237e6:	684b      	ldr	r3, [r1, #4]
 80237e8:	2b00      	cmp	r3, #0
 80237ea:	dc05      	bgt.n	80237f8 <__sflush_r+0x20>
 80237ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	dc02      	bgt.n	80237f8 <__sflush_r+0x20>
 80237f2:	2000      	movs	r0, #0
 80237f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80237f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80237fa:	2e00      	cmp	r6, #0
 80237fc:	d0f9      	beq.n	80237f2 <__sflush_r+0x1a>
 80237fe:	2300      	movs	r3, #0
 8023800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023804:	682f      	ldr	r7, [r5, #0]
 8023806:	6a21      	ldr	r1, [r4, #32]
 8023808:	602b      	str	r3, [r5, #0]
 802380a:	d032      	beq.n	8023872 <__sflush_r+0x9a>
 802380c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802380e:	89a3      	ldrh	r3, [r4, #12]
 8023810:	075a      	lsls	r2, r3, #29
 8023812:	d505      	bpl.n	8023820 <__sflush_r+0x48>
 8023814:	6863      	ldr	r3, [r4, #4]
 8023816:	1ac0      	subs	r0, r0, r3
 8023818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802381a:	b10b      	cbz	r3, 8023820 <__sflush_r+0x48>
 802381c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802381e:	1ac0      	subs	r0, r0, r3
 8023820:	2300      	movs	r3, #0
 8023822:	4602      	mov	r2, r0
 8023824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023826:	6a21      	ldr	r1, [r4, #32]
 8023828:	4628      	mov	r0, r5
 802382a:	47b0      	blx	r6
 802382c:	1c43      	adds	r3, r0, #1
 802382e:	89a3      	ldrh	r3, [r4, #12]
 8023830:	d106      	bne.n	8023840 <__sflush_r+0x68>
 8023832:	6829      	ldr	r1, [r5, #0]
 8023834:	291d      	cmp	r1, #29
 8023836:	d82b      	bhi.n	8023890 <__sflush_r+0xb8>
 8023838:	4a29      	ldr	r2, [pc, #164]	; (80238e0 <__sflush_r+0x108>)
 802383a:	410a      	asrs	r2, r1
 802383c:	07d6      	lsls	r6, r2, #31
 802383e:	d427      	bmi.n	8023890 <__sflush_r+0xb8>
 8023840:	2200      	movs	r2, #0
 8023842:	6062      	str	r2, [r4, #4]
 8023844:	04d9      	lsls	r1, r3, #19
 8023846:	6922      	ldr	r2, [r4, #16]
 8023848:	6022      	str	r2, [r4, #0]
 802384a:	d504      	bpl.n	8023856 <__sflush_r+0x7e>
 802384c:	1c42      	adds	r2, r0, #1
 802384e:	d101      	bne.n	8023854 <__sflush_r+0x7c>
 8023850:	682b      	ldr	r3, [r5, #0]
 8023852:	b903      	cbnz	r3, 8023856 <__sflush_r+0x7e>
 8023854:	6560      	str	r0, [r4, #84]	; 0x54
 8023856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023858:	602f      	str	r7, [r5, #0]
 802385a:	2900      	cmp	r1, #0
 802385c:	d0c9      	beq.n	80237f2 <__sflush_r+0x1a>
 802385e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023862:	4299      	cmp	r1, r3
 8023864:	d002      	beq.n	802386c <__sflush_r+0x94>
 8023866:	4628      	mov	r0, r5
 8023868:	f7fe f9c6 	bl	8021bf8 <_free_r>
 802386c:	2000      	movs	r0, #0
 802386e:	6360      	str	r0, [r4, #52]	; 0x34
 8023870:	e7c0      	b.n	80237f4 <__sflush_r+0x1c>
 8023872:	2301      	movs	r3, #1
 8023874:	4628      	mov	r0, r5
 8023876:	47b0      	blx	r6
 8023878:	1c41      	adds	r1, r0, #1
 802387a:	d1c8      	bne.n	802380e <__sflush_r+0x36>
 802387c:	682b      	ldr	r3, [r5, #0]
 802387e:	2b00      	cmp	r3, #0
 8023880:	d0c5      	beq.n	802380e <__sflush_r+0x36>
 8023882:	2b1d      	cmp	r3, #29
 8023884:	d001      	beq.n	802388a <__sflush_r+0xb2>
 8023886:	2b16      	cmp	r3, #22
 8023888:	d101      	bne.n	802388e <__sflush_r+0xb6>
 802388a:	602f      	str	r7, [r5, #0]
 802388c:	e7b1      	b.n	80237f2 <__sflush_r+0x1a>
 802388e:	89a3      	ldrh	r3, [r4, #12]
 8023890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023894:	81a3      	strh	r3, [r4, #12]
 8023896:	e7ad      	b.n	80237f4 <__sflush_r+0x1c>
 8023898:	690f      	ldr	r7, [r1, #16]
 802389a:	2f00      	cmp	r7, #0
 802389c:	d0a9      	beq.n	80237f2 <__sflush_r+0x1a>
 802389e:	0793      	lsls	r3, r2, #30
 80238a0:	680e      	ldr	r6, [r1, #0]
 80238a2:	bf08      	it	eq
 80238a4:	694b      	ldreq	r3, [r1, #20]
 80238a6:	600f      	str	r7, [r1, #0]
 80238a8:	bf18      	it	ne
 80238aa:	2300      	movne	r3, #0
 80238ac:	eba6 0807 	sub.w	r8, r6, r7
 80238b0:	608b      	str	r3, [r1, #8]
 80238b2:	f1b8 0f00 	cmp.w	r8, #0
 80238b6:	dd9c      	ble.n	80237f2 <__sflush_r+0x1a>
 80238b8:	6a21      	ldr	r1, [r4, #32]
 80238ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80238bc:	4643      	mov	r3, r8
 80238be:	463a      	mov	r2, r7
 80238c0:	4628      	mov	r0, r5
 80238c2:	47b0      	blx	r6
 80238c4:	2800      	cmp	r0, #0
 80238c6:	dc06      	bgt.n	80238d6 <__sflush_r+0xfe>
 80238c8:	89a3      	ldrh	r3, [r4, #12]
 80238ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80238ce:	81a3      	strh	r3, [r4, #12]
 80238d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80238d4:	e78e      	b.n	80237f4 <__sflush_r+0x1c>
 80238d6:	4407      	add	r7, r0
 80238d8:	eba8 0800 	sub.w	r8, r8, r0
 80238dc:	e7e9      	b.n	80238b2 <__sflush_r+0xda>
 80238de:	bf00      	nop
 80238e0:	dfbffffe 	.word	0xdfbffffe

080238e4 <_fflush_r>:
 80238e4:	b538      	push	{r3, r4, r5, lr}
 80238e6:	690b      	ldr	r3, [r1, #16]
 80238e8:	4605      	mov	r5, r0
 80238ea:	460c      	mov	r4, r1
 80238ec:	b913      	cbnz	r3, 80238f4 <_fflush_r+0x10>
 80238ee:	2500      	movs	r5, #0
 80238f0:	4628      	mov	r0, r5
 80238f2:	bd38      	pop	{r3, r4, r5, pc}
 80238f4:	b118      	cbz	r0, 80238fe <_fflush_r+0x1a>
 80238f6:	6a03      	ldr	r3, [r0, #32]
 80238f8:	b90b      	cbnz	r3, 80238fe <_fflush_r+0x1a>
 80238fa:	f7fc ff3f 	bl	802077c <__sinit>
 80238fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023902:	2b00      	cmp	r3, #0
 8023904:	d0f3      	beq.n	80238ee <_fflush_r+0xa>
 8023906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023908:	07d0      	lsls	r0, r2, #31
 802390a:	d404      	bmi.n	8023916 <_fflush_r+0x32>
 802390c:	0599      	lsls	r1, r3, #22
 802390e:	d402      	bmi.n	8023916 <_fflush_r+0x32>
 8023910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023912:	f7fd fb32 	bl	8020f7a <__retarget_lock_acquire_recursive>
 8023916:	4628      	mov	r0, r5
 8023918:	4621      	mov	r1, r4
 802391a:	f7ff ff5d 	bl	80237d8 <__sflush_r>
 802391e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023920:	07da      	lsls	r2, r3, #31
 8023922:	4605      	mov	r5, r0
 8023924:	d4e4      	bmi.n	80238f0 <_fflush_r+0xc>
 8023926:	89a3      	ldrh	r3, [r4, #12]
 8023928:	059b      	lsls	r3, r3, #22
 802392a:	d4e1      	bmi.n	80238f0 <_fflush_r+0xc>
 802392c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802392e:	f7fd fb25 	bl	8020f7c <__retarget_lock_release_recursive>
 8023932:	e7dd      	b.n	80238f0 <_fflush_r+0xc>

08023934 <fiprintf>:
 8023934:	b40e      	push	{r1, r2, r3}
 8023936:	b503      	push	{r0, r1, lr}
 8023938:	4601      	mov	r1, r0
 802393a:	ab03      	add	r3, sp, #12
 802393c:	4805      	ldr	r0, [pc, #20]	; (8023954 <fiprintf+0x20>)
 802393e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023942:	6800      	ldr	r0, [r0, #0]
 8023944:	9301      	str	r3, [sp, #4]
 8023946:	f7ff fe2d 	bl	80235a4 <_vfiprintf_r>
 802394a:	b002      	add	sp, #8
 802394c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023950:	b003      	add	sp, #12
 8023952:	4770      	bx	lr
 8023954:	2000099c 	.word	0x2000099c

08023958 <__swhatbuf_r>:
 8023958:	b570      	push	{r4, r5, r6, lr}
 802395a:	460c      	mov	r4, r1
 802395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023960:	2900      	cmp	r1, #0
 8023962:	b096      	sub	sp, #88	; 0x58
 8023964:	4615      	mov	r5, r2
 8023966:	461e      	mov	r6, r3
 8023968:	da0d      	bge.n	8023986 <__swhatbuf_r+0x2e>
 802396a:	89a3      	ldrh	r3, [r4, #12]
 802396c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023970:	f04f 0100 	mov.w	r1, #0
 8023974:	bf0c      	ite	eq
 8023976:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802397a:	2340      	movne	r3, #64	; 0x40
 802397c:	2000      	movs	r0, #0
 802397e:	6031      	str	r1, [r6, #0]
 8023980:	602b      	str	r3, [r5, #0]
 8023982:	b016      	add	sp, #88	; 0x58
 8023984:	bd70      	pop	{r4, r5, r6, pc}
 8023986:	466a      	mov	r2, sp
 8023988:	f000 f848 	bl	8023a1c <_fstat_r>
 802398c:	2800      	cmp	r0, #0
 802398e:	dbec      	blt.n	802396a <__swhatbuf_r+0x12>
 8023990:	9901      	ldr	r1, [sp, #4]
 8023992:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023996:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802399a:	4259      	negs	r1, r3
 802399c:	4159      	adcs	r1, r3
 802399e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80239a2:	e7eb      	b.n	802397c <__swhatbuf_r+0x24>

080239a4 <__smakebuf_r>:
 80239a4:	898b      	ldrh	r3, [r1, #12]
 80239a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80239a8:	079d      	lsls	r5, r3, #30
 80239aa:	4606      	mov	r6, r0
 80239ac:	460c      	mov	r4, r1
 80239ae:	d507      	bpl.n	80239c0 <__smakebuf_r+0x1c>
 80239b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80239b4:	6023      	str	r3, [r4, #0]
 80239b6:	6123      	str	r3, [r4, #16]
 80239b8:	2301      	movs	r3, #1
 80239ba:	6163      	str	r3, [r4, #20]
 80239bc:	b002      	add	sp, #8
 80239be:	bd70      	pop	{r4, r5, r6, pc}
 80239c0:	ab01      	add	r3, sp, #4
 80239c2:	466a      	mov	r2, sp
 80239c4:	f7ff ffc8 	bl	8023958 <__swhatbuf_r>
 80239c8:	9900      	ldr	r1, [sp, #0]
 80239ca:	4605      	mov	r5, r0
 80239cc:	4630      	mov	r0, r6
 80239ce:	f7fb fe5d 	bl	801f68c <_malloc_r>
 80239d2:	b948      	cbnz	r0, 80239e8 <__smakebuf_r+0x44>
 80239d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80239d8:	059a      	lsls	r2, r3, #22
 80239da:	d4ef      	bmi.n	80239bc <__smakebuf_r+0x18>
 80239dc:	f023 0303 	bic.w	r3, r3, #3
 80239e0:	f043 0302 	orr.w	r3, r3, #2
 80239e4:	81a3      	strh	r3, [r4, #12]
 80239e6:	e7e3      	b.n	80239b0 <__smakebuf_r+0xc>
 80239e8:	89a3      	ldrh	r3, [r4, #12]
 80239ea:	6020      	str	r0, [r4, #0]
 80239ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80239f0:	81a3      	strh	r3, [r4, #12]
 80239f2:	9b00      	ldr	r3, [sp, #0]
 80239f4:	6163      	str	r3, [r4, #20]
 80239f6:	9b01      	ldr	r3, [sp, #4]
 80239f8:	6120      	str	r0, [r4, #16]
 80239fa:	b15b      	cbz	r3, 8023a14 <__smakebuf_r+0x70>
 80239fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a00:	4630      	mov	r0, r6
 8023a02:	f000 f81d 	bl	8023a40 <_isatty_r>
 8023a06:	b128      	cbz	r0, 8023a14 <__smakebuf_r+0x70>
 8023a08:	89a3      	ldrh	r3, [r4, #12]
 8023a0a:	f023 0303 	bic.w	r3, r3, #3
 8023a0e:	f043 0301 	orr.w	r3, r3, #1
 8023a12:	81a3      	strh	r3, [r4, #12]
 8023a14:	89a3      	ldrh	r3, [r4, #12]
 8023a16:	431d      	orrs	r5, r3
 8023a18:	81a5      	strh	r5, [r4, #12]
 8023a1a:	e7cf      	b.n	80239bc <__smakebuf_r+0x18>

08023a1c <_fstat_r>:
 8023a1c:	b538      	push	{r3, r4, r5, lr}
 8023a1e:	4d07      	ldr	r5, [pc, #28]	; (8023a3c <_fstat_r+0x20>)
 8023a20:	2300      	movs	r3, #0
 8023a22:	4604      	mov	r4, r0
 8023a24:	4608      	mov	r0, r1
 8023a26:	4611      	mov	r1, r2
 8023a28:	602b      	str	r3, [r5, #0]
 8023a2a:	f7df fdb4 	bl	8003596 <_fstat>
 8023a2e:	1c43      	adds	r3, r0, #1
 8023a30:	d102      	bne.n	8023a38 <_fstat_r+0x1c>
 8023a32:	682b      	ldr	r3, [r5, #0]
 8023a34:	b103      	cbz	r3, 8023a38 <_fstat_r+0x1c>
 8023a36:	6023      	str	r3, [r4, #0]
 8023a38:	bd38      	pop	{r3, r4, r5, pc}
 8023a3a:	bf00      	nop
 8023a3c:	20017008 	.word	0x20017008

08023a40 <_isatty_r>:
 8023a40:	b538      	push	{r3, r4, r5, lr}
 8023a42:	4d06      	ldr	r5, [pc, #24]	; (8023a5c <_isatty_r+0x1c>)
 8023a44:	2300      	movs	r3, #0
 8023a46:	4604      	mov	r4, r0
 8023a48:	4608      	mov	r0, r1
 8023a4a:	602b      	str	r3, [r5, #0]
 8023a4c:	f7df fdb3 	bl	80035b6 <_isatty>
 8023a50:	1c43      	adds	r3, r0, #1
 8023a52:	d102      	bne.n	8023a5a <_isatty_r+0x1a>
 8023a54:	682b      	ldr	r3, [r5, #0]
 8023a56:	b103      	cbz	r3, 8023a5a <_isatty_r+0x1a>
 8023a58:	6023      	str	r3, [r4, #0]
 8023a5a:	bd38      	pop	{r3, r4, r5, pc}
 8023a5c:	20017008 	.word	0x20017008

08023a60 <nan>:
 8023a60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023a68 <nan+0x8>
 8023a64:	4770      	bx	lr
 8023a66:	bf00      	nop
 8023a68:	00000000 	.word	0x00000000
 8023a6c:	7ff80000 	.word	0x7ff80000

08023a70 <abort>:
 8023a70:	b508      	push	{r3, lr}
 8023a72:	2006      	movs	r0, #6
 8023a74:	f000 fba0 	bl	80241b8 <raise>
 8023a78:	2001      	movs	r0, #1
 8023a7a:	f7df fd3d 	bl	80034f8 <_exit>

08023a7e <rshift>:
 8023a7e:	6903      	ldr	r3, [r0, #16]
 8023a80:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8023a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023a88:	ea4f 1261 	mov.w	r2, r1, asr #5
 8023a8c:	f100 0414 	add.w	r4, r0, #20
 8023a90:	dd45      	ble.n	8023b1e <rshift+0xa0>
 8023a92:	f011 011f 	ands.w	r1, r1, #31
 8023a96:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8023a9a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8023a9e:	d10c      	bne.n	8023aba <rshift+0x3c>
 8023aa0:	f100 0710 	add.w	r7, r0, #16
 8023aa4:	4629      	mov	r1, r5
 8023aa6:	42b1      	cmp	r1, r6
 8023aa8:	d334      	bcc.n	8023b14 <rshift+0x96>
 8023aaa:	1a9b      	subs	r3, r3, r2
 8023aac:	009b      	lsls	r3, r3, #2
 8023aae:	1eea      	subs	r2, r5, #3
 8023ab0:	4296      	cmp	r6, r2
 8023ab2:	bf38      	it	cc
 8023ab4:	2300      	movcc	r3, #0
 8023ab6:	4423      	add	r3, r4
 8023ab8:	e015      	b.n	8023ae6 <rshift+0x68>
 8023aba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8023abe:	f1c1 0820 	rsb	r8, r1, #32
 8023ac2:	40cf      	lsrs	r7, r1
 8023ac4:	f105 0e04 	add.w	lr, r5, #4
 8023ac8:	46a1      	mov	r9, r4
 8023aca:	4576      	cmp	r6, lr
 8023acc:	46f4      	mov	ip, lr
 8023ace:	d815      	bhi.n	8023afc <rshift+0x7e>
 8023ad0:	1a9a      	subs	r2, r3, r2
 8023ad2:	0092      	lsls	r2, r2, #2
 8023ad4:	3a04      	subs	r2, #4
 8023ad6:	3501      	adds	r5, #1
 8023ad8:	42ae      	cmp	r6, r5
 8023ada:	bf38      	it	cc
 8023adc:	2200      	movcc	r2, #0
 8023ade:	18a3      	adds	r3, r4, r2
 8023ae0:	50a7      	str	r7, [r4, r2]
 8023ae2:	b107      	cbz	r7, 8023ae6 <rshift+0x68>
 8023ae4:	3304      	adds	r3, #4
 8023ae6:	1b1a      	subs	r2, r3, r4
 8023ae8:	42a3      	cmp	r3, r4
 8023aea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8023aee:	bf08      	it	eq
 8023af0:	2300      	moveq	r3, #0
 8023af2:	6102      	str	r2, [r0, #16]
 8023af4:	bf08      	it	eq
 8023af6:	6143      	streq	r3, [r0, #20]
 8023af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023afc:	f8dc c000 	ldr.w	ip, [ip]
 8023b00:	fa0c fc08 	lsl.w	ip, ip, r8
 8023b04:	ea4c 0707 	orr.w	r7, ip, r7
 8023b08:	f849 7b04 	str.w	r7, [r9], #4
 8023b0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023b10:	40cf      	lsrs	r7, r1
 8023b12:	e7da      	b.n	8023aca <rshift+0x4c>
 8023b14:	f851 cb04 	ldr.w	ip, [r1], #4
 8023b18:	f847 cf04 	str.w	ip, [r7, #4]!
 8023b1c:	e7c3      	b.n	8023aa6 <rshift+0x28>
 8023b1e:	4623      	mov	r3, r4
 8023b20:	e7e1      	b.n	8023ae6 <rshift+0x68>

08023b22 <__hexdig_fun>:
 8023b22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8023b26:	2b09      	cmp	r3, #9
 8023b28:	d802      	bhi.n	8023b30 <__hexdig_fun+0xe>
 8023b2a:	3820      	subs	r0, #32
 8023b2c:	b2c0      	uxtb	r0, r0
 8023b2e:	4770      	bx	lr
 8023b30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8023b34:	2b05      	cmp	r3, #5
 8023b36:	d801      	bhi.n	8023b3c <__hexdig_fun+0x1a>
 8023b38:	3847      	subs	r0, #71	; 0x47
 8023b3a:	e7f7      	b.n	8023b2c <__hexdig_fun+0xa>
 8023b3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023b40:	2b05      	cmp	r3, #5
 8023b42:	d801      	bhi.n	8023b48 <__hexdig_fun+0x26>
 8023b44:	3827      	subs	r0, #39	; 0x27
 8023b46:	e7f1      	b.n	8023b2c <__hexdig_fun+0xa>
 8023b48:	2000      	movs	r0, #0
 8023b4a:	4770      	bx	lr

08023b4c <__gethex>:
 8023b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b50:	4617      	mov	r7, r2
 8023b52:	680a      	ldr	r2, [r1, #0]
 8023b54:	b085      	sub	sp, #20
 8023b56:	f102 0b02 	add.w	fp, r2, #2
 8023b5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023b5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023b62:	4681      	mov	r9, r0
 8023b64:	468a      	mov	sl, r1
 8023b66:	9302      	str	r3, [sp, #8]
 8023b68:	32fe      	adds	r2, #254	; 0xfe
 8023b6a:	eb02 030b 	add.w	r3, r2, fp
 8023b6e:	46d8      	mov	r8, fp
 8023b70:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8023b74:	9301      	str	r3, [sp, #4]
 8023b76:	2830      	cmp	r0, #48	; 0x30
 8023b78:	d0f7      	beq.n	8023b6a <__gethex+0x1e>
 8023b7a:	f7ff ffd2 	bl	8023b22 <__hexdig_fun>
 8023b7e:	4604      	mov	r4, r0
 8023b80:	2800      	cmp	r0, #0
 8023b82:	d138      	bne.n	8023bf6 <__gethex+0xaa>
 8023b84:	49a7      	ldr	r1, [pc, #668]	; (8023e24 <__gethex+0x2d8>)
 8023b86:	2201      	movs	r2, #1
 8023b88:	4640      	mov	r0, r8
 8023b8a:	f7fd f948 	bl	8020e1e <strncmp>
 8023b8e:	4606      	mov	r6, r0
 8023b90:	2800      	cmp	r0, #0
 8023b92:	d169      	bne.n	8023c68 <__gethex+0x11c>
 8023b94:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023b98:	465d      	mov	r5, fp
 8023b9a:	f7ff ffc2 	bl	8023b22 <__hexdig_fun>
 8023b9e:	2800      	cmp	r0, #0
 8023ba0:	d064      	beq.n	8023c6c <__gethex+0x120>
 8023ba2:	465a      	mov	r2, fp
 8023ba4:	7810      	ldrb	r0, [r2, #0]
 8023ba6:	2830      	cmp	r0, #48	; 0x30
 8023ba8:	4690      	mov	r8, r2
 8023baa:	f102 0201 	add.w	r2, r2, #1
 8023bae:	d0f9      	beq.n	8023ba4 <__gethex+0x58>
 8023bb0:	f7ff ffb7 	bl	8023b22 <__hexdig_fun>
 8023bb4:	2301      	movs	r3, #1
 8023bb6:	fab0 f480 	clz	r4, r0
 8023bba:	0964      	lsrs	r4, r4, #5
 8023bbc:	465e      	mov	r6, fp
 8023bbe:	9301      	str	r3, [sp, #4]
 8023bc0:	4642      	mov	r2, r8
 8023bc2:	4615      	mov	r5, r2
 8023bc4:	3201      	adds	r2, #1
 8023bc6:	7828      	ldrb	r0, [r5, #0]
 8023bc8:	f7ff ffab 	bl	8023b22 <__hexdig_fun>
 8023bcc:	2800      	cmp	r0, #0
 8023bce:	d1f8      	bne.n	8023bc2 <__gethex+0x76>
 8023bd0:	4994      	ldr	r1, [pc, #592]	; (8023e24 <__gethex+0x2d8>)
 8023bd2:	2201      	movs	r2, #1
 8023bd4:	4628      	mov	r0, r5
 8023bd6:	f7fd f922 	bl	8020e1e <strncmp>
 8023bda:	b978      	cbnz	r0, 8023bfc <__gethex+0xb0>
 8023bdc:	b946      	cbnz	r6, 8023bf0 <__gethex+0xa4>
 8023bde:	1c6e      	adds	r6, r5, #1
 8023be0:	4632      	mov	r2, r6
 8023be2:	4615      	mov	r5, r2
 8023be4:	3201      	adds	r2, #1
 8023be6:	7828      	ldrb	r0, [r5, #0]
 8023be8:	f7ff ff9b 	bl	8023b22 <__hexdig_fun>
 8023bec:	2800      	cmp	r0, #0
 8023bee:	d1f8      	bne.n	8023be2 <__gethex+0x96>
 8023bf0:	1b73      	subs	r3, r6, r5
 8023bf2:	009e      	lsls	r6, r3, #2
 8023bf4:	e004      	b.n	8023c00 <__gethex+0xb4>
 8023bf6:	2400      	movs	r4, #0
 8023bf8:	4626      	mov	r6, r4
 8023bfa:	e7e1      	b.n	8023bc0 <__gethex+0x74>
 8023bfc:	2e00      	cmp	r6, #0
 8023bfe:	d1f7      	bne.n	8023bf0 <__gethex+0xa4>
 8023c00:	782b      	ldrb	r3, [r5, #0]
 8023c02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023c06:	2b50      	cmp	r3, #80	; 0x50
 8023c08:	d13d      	bne.n	8023c86 <__gethex+0x13a>
 8023c0a:	786b      	ldrb	r3, [r5, #1]
 8023c0c:	2b2b      	cmp	r3, #43	; 0x2b
 8023c0e:	d02f      	beq.n	8023c70 <__gethex+0x124>
 8023c10:	2b2d      	cmp	r3, #45	; 0x2d
 8023c12:	d031      	beq.n	8023c78 <__gethex+0x12c>
 8023c14:	1c69      	adds	r1, r5, #1
 8023c16:	f04f 0b00 	mov.w	fp, #0
 8023c1a:	7808      	ldrb	r0, [r1, #0]
 8023c1c:	f7ff ff81 	bl	8023b22 <__hexdig_fun>
 8023c20:	1e42      	subs	r2, r0, #1
 8023c22:	b2d2      	uxtb	r2, r2
 8023c24:	2a18      	cmp	r2, #24
 8023c26:	d82e      	bhi.n	8023c86 <__gethex+0x13a>
 8023c28:	f1a0 0210 	sub.w	r2, r0, #16
 8023c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023c30:	f7ff ff77 	bl	8023b22 <__hexdig_fun>
 8023c34:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023c38:	fa5f fc8c 	uxtb.w	ip, ip
 8023c3c:	f1bc 0f18 	cmp.w	ip, #24
 8023c40:	d91d      	bls.n	8023c7e <__gethex+0x132>
 8023c42:	f1bb 0f00 	cmp.w	fp, #0
 8023c46:	d000      	beq.n	8023c4a <__gethex+0xfe>
 8023c48:	4252      	negs	r2, r2
 8023c4a:	4416      	add	r6, r2
 8023c4c:	f8ca 1000 	str.w	r1, [sl]
 8023c50:	b1dc      	cbz	r4, 8023c8a <__gethex+0x13e>
 8023c52:	9b01      	ldr	r3, [sp, #4]
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	bf14      	ite	ne
 8023c58:	f04f 0800 	movne.w	r8, #0
 8023c5c:	f04f 0806 	moveq.w	r8, #6
 8023c60:	4640      	mov	r0, r8
 8023c62:	b005      	add	sp, #20
 8023c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c68:	4645      	mov	r5, r8
 8023c6a:	4626      	mov	r6, r4
 8023c6c:	2401      	movs	r4, #1
 8023c6e:	e7c7      	b.n	8023c00 <__gethex+0xb4>
 8023c70:	f04f 0b00 	mov.w	fp, #0
 8023c74:	1ca9      	adds	r1, r5, #2
 8023c76:	e7d0      	b.n	8023c1a <__gethex+0xce>
 8023c78:	f04f 0b01 	mov.w	fp, #1
 8023c7c:	e7fa      	b.n	8023c74 <__gethex+0x128>
 8023c7e:	230a      	movs	r3, #10
 8023c80:	fb03 0002 	mla	r0, r3, r2, r0
 8023c84:	e7d0      	b.n	8023c28 <__gethex+0xdc>
 8023c86:	4629      	mov	r1, r5
 8023c88:	e7e0      	b.n	8023c4c <__gethex+0x100>
 8023c8a:	eba5 0308 	sub.w	r3, r5, r8
 8023c8e:	3b01      	subs	r3, #1
 8023c90:	4621      	mov	r1, r4
 8023c92:	2b07      	cmp	r3, #7
 8023c94:	dc0a      	bgt.n	8023cac <__gethex+0x160>
 8023c96:	4648      	mov	r0, r9
 8023c98:	f7fd fffa 	bl	8021c90 <_Balloc>
 8023c9c:	4604      	mov	r4, r0
 8023c9e:	b940      	cbnz	r0, 8023cb2 <__gethex+0x166>
 8023ca0:	4b61      	ldr	r3, [pc, #388]	; (8023e28 <__gethex+0x2dc>)
 8023ca2:	4602      	mov	r2, r0
 8023ca4:	21e4      	movs	r1, #228	; 0xe4
 8023ca6:	4861      	ldr	r0, [pc, #388]	; (8023e2c <__gethex+0x2e0>)
 8023ca8:	f7fd f986 	bl	8020fb8 <__assert_func>
 8023cac:	3101      	adds	r1, #1
 8023cae:	105b      	asrs	r3, r3, #1
 8023cb0:	e7ef      	b.n	8023c92 <__gethex+0x146>
 8023cb2:	f100 0a14 	add.w	sl, r0, #20
 8023cb6:	2300      	movs	r3, #0
 8023cb8:	495a      	ldr	r1, [pc, #360]	; (8023e24 <__gethex+0x2d8>)
 8023cba:	f8cd a004 	str.w	sl, [sp, #4]
 8023cbe:	469b      	mov	fp, r3
 8023cc0:	45a8      	cmp	r8, r5
 8023cc2:	d342      	bcc.n	8023d4a <__gethex+0x1fe>
 8023cc4:	9801      	ldr	r0, [sp, #4]
 8023cc6:	f840 bb04 	str.w	fp, [r0], #4
 8023cca:	eba0 000a 	sub.w	r0, r0, sl
 8023cce:	1080      	asrs	r0, r0, #2
 8023cd0:	6120      	str	r0, [r4, #16]
 8023cd2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8023cd6:	4658      	mov	r0, fp
 8023cd8:	f7fe f8cc 	bl	8021e74 <__hi0bits>
 8023cdc:	683d      	ldr	r5, [r7, #0]
 8023cde:	eba8 0000 	sub.w	r0, r8, r0
 8023ce2:	42a8      	cmp	r0, r5
 8023ce4:	dd59      	ble.n	8023d9a <__gethex+0x24e>
 8023ce6:	eba0 0805 	sub.w	r8, r0, r5
 8023cea:	4641      	mov	r1, r8
 8023cec:	4620      	mov	r0, r4
 8023cee:	f7fe fc58 	bl	80225a2 <__any_on>
 8023cf2:	4683      	mov	fp, r0
 8023cf4:	b1b8      	cbz	r0, 8023d26 <__gethex+0x1da>
 8023cf6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8023cfa:	1159      	asrs	r1, r3, #5
 8023cfc:	f003 021f 	and.w	r2, r3, #31
 8023d00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023d04:	f04f 0b01 	mov.w	fp, #1
 8023d08:	fa0b f202 	lsl.w	r2, fp, r2
 8023d0c:	420a      	tst	r2, r1
 8023d0e:	d00a      	beq.n	8023d26 <__gethex+0x1da>
 8023d10:	455b      	cmp	r3, fp
 8023d12:	dd06      	ble.n	8023d22 <__gethex+0x1d6>
 8023d14:	f1a8 0102 	sub.w	r1, r8, #2
 8023d18:	4620      	mov	r0, r4
 8023d1a:	f7fe fc42 	bl	80225a2 <__any_on>
 8023d1e:	2800      	cmp	r0, #0
 8023d20:	d138      	bne.n	8023d94 <__gethex+0x248>
 8023d22:	f04f 0b02 	mov.w	fp, #2
 8023d26:	4641      	mov	r1, r8
 8023d28:	4620      	mov	r0, r4
 8023d2a:	f7ff fea8 	bl	8023a7e <rshift>
 8023d2e:	4446      	add	r6, r8
 8023d30:	68bb      	ldr	r3, [r7, #8]
 8023d32:	42b3      	cmp	r3, r6
 8023d34:	da41      	bge.n	8023dba <__gethex+0x26e>
 8023d36:	4621      	mov	r1, r4
 8023d38:	4648      	mov	r0, r9
 8023d3a:	f7fd ffe9 	bl	8021d10 <_Bfree>
 8023d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d40:	2300      	movs	r3, #0
 8023d42:	6013      	str	r3, [r2, #0]
 8023d44:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8023d48:	e78a      	b.n	8023c60 <__gethex+0x114>
 8023d4a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8023d4e:	2a2e      	cmp	r2, #46	; 0x2e
 8023d50:	d014      	beq.n	8023d7c <__gethex+0x230>
 8023d52:	2b20      	cmp	r3, #32
 8023d54:	d106      	bne.n	8023d64 <__gethex+0x218>
 8023d56:	9b01      	ldr	r3, [sp, #4]
 8023d58:	f843 bb04 	str.w	fp, [r3], #4
 8023d5c:	f04f 0b00 	mov.w	fp, #0
 8023d60:	9301      	str	r3, [sp, #4]
 8023d62:	465b      	mov	r3, fp
 8023d64:	7828      	ldrb	r0, [r5, #0]
 8023d66:	9303      	str	r3, [sp, #12]
 8023d68:	f7ff fedb 	bl	8023b22 <__hexdig_fun>
 8023d6c:	9b03      	ldr	r3, [sp, #12]
 8023d6e:	f000 000f 	and.w	r0, r0, #15
 8023d72:	4098      	lsls	r0, r3
 8023d74:	ea4b 0b00 	orr.w	fp, fp, r0
 8023d78:	3304      	adds	r3, #4
 8023d7a:	e7a1      	b.n	8023cc0 <__gethex+0x174>
 8023d7c:	45a8      	cmp	r8, r5
 8023d7e:	d8e8      	bhi.n	8023d52 <__gethex+0x206>
 8023d80:	2201      	movs	r2, #1
 8023d82:	4628      	mov	r0, r5
 8023d84:	9303      	str	r3, [sp, #12]
 8023d86:	f7fd f84a 	bl	8020e1e <strncmp>
 8023d8a:	4926      	ldr	r1, [pc, #152]	; (8023e24 <__gethex+0x2d8>)
 8023d8c:	9b03      	ldr	r3, [sp, #12]
 8023d8e:	2800      	cmp	r0, #0
 8023d90:	d1df      	bne.n	8023d52 <__gethex+0x206>
 8023d92:	e795      	b.n	8023cc0 <__gethex+0x174>
 8023d94:	f04f 0b03 	mov.w	fp, #3
 8023d98:	e7c5      	b.n	8023d26 <__gethex+0x1da>
 8023d9a:	da0b      	bge.n	8023db4 <__gethex+0x268>
 8023d9c:	eba5 0800 	sub.w	r8, r5, r0
 8023da0:	4621      	mov	r1, r4
 8023da2:	4642      	mov	r2, r8
 8023da4:	4648      	mov	r0, r9
 8023da6:	f7fe f9cd 	bl	8022144 <__lshift>
 8023daa:	eba6 0608 	sub.w	r6, r6, r8
 8023dae:	4604      	mov	r4, r0
 8023db0:	f100 0a14 	add.w	sl, r0, #20
 8023db4:	f04f 0b00 	mov.w	fp, #0
 8023db8:	e7ba      	b.n	8023d30 <__gethex+0x1e4>
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	42b3      	cmp	r3, r6
 8023dbe:	dd73      	ble.n	8023ea8 <__gethex+0x35c>
 8023dc0:	1b9e      	subs	r6, r3, r6
 8023dc2:	42b5      	cmp	r5, r6
 8023dc4:	dc34      	bgt.n	8023e30 <__gethex+0x2e4>
 8023dc6:	68fb      	ldr	r3, [r7, #12]
 8023dc8:	2b02      	cmp	r3, #2
 8023dca:	d023      	beq.n	8023e14 <__gethex+0x2c8>
 8023dcc:	2b03      	cmp	r3, #3
 8023dce:	d025      	beq.n	8023e1c <__gethex+0x2d0>
 8023dd0:	2b01      	cmp	r3, #1
 8023dd2:	d115      	bne.n	8023e00 <__gethex+0x2b4>
 8023dd4:	42b5      	cmp	r5, r6
 8023dd6:	d113      	bne.n	8023e00 <__gethex+0x2b4>
 8023dd8:	2d01      	cmp	r5, #1
 8023dda:	d10b      	bne.n	8023df4 <__gethex+0x2a8>
 8023ddc:	9a02      	ldr	r2, [sp, #8]
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	6013      	str	r3, [r2, #0]
 8023de2:	2301      	movs	r3, #1
 8023de4:	6123      	str	r3, [r4, #16]
 8023de6:	f8ca 3000 	str.w	r3, [sl]
 8023dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023dec:	f04f 0862 	mov.w	r8, #98	; 0x62
 8023df0:	601c      	str	r4, [r3, #0]
 8023df2:	e735      	b.n	8023c60 <__gethex+0x114>
 8023df4:	1e69      	subs	r1, r5, #1
 8023df6:	4620      	mov	r0, r4
 8023df8:	f7fe fbd3 	bl	80225a2 <__any_on>
 8023dfc:	2800      	cmp	r0, #0
 8023dfe:	d1ed      	bne.n	8023ddc <__gethex+0x290>
 8023e00:	4621      	mov	r1, r4
 8023e02:	4648      	mov	r0, r9
 8023e04:	f7fd ff84 	bl	8021d10 <_Bfree>
 8023e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e0a:	2300      	movs	r3, #0
 8023e0c:	6013      	str	r3, [r2, #0]
 8023e0e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8023e12:	e725      	b.n	8023c60 <__gethex+0x114>
 8023e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	d1f2      	bne.n	8023e00 <__gethex+0x2b4>
 8023e1a:	e7df      	b.n	8023ddc <__gethex+0x290>
 8023e1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d1dc      	bne.n	8023ddc <__gethex+0x290>
 8023e22:	e7ed      	b.n	8023e00 <__gethex+0x2b4>
 8023e24:	08025eac 	.word	0x08025eac
 8023e28:	08025d46 	.word	0x08025d46
 8023e2c:	08025f19 	.word	0x08025f19
 8023e30:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8023e34:	f1bb 0f00 	cmp.w	fp, #0
 8023e38:	d133      	bne.n	8023ea2 <__gethex+0x356>
 8023e3a:	f1b8 0f00 	cmp.w	r8, #0
 8023e3e:	d004      	beq.n	8023e4a <__gethex+0x2fe>
 8023e40:	4641      	mov	r1, r8
 8023e42:	4620      	mov	r0, r4
 8023e44:	f7fe fbad 	bl	80225a2 <__any_on>
 8023e48:	4683      	mov	fp, r0
 8023e4a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8023e4e:	2301      	movs	r3, #1
 8023e50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023e54:	f008 081f 	and.w	r8, r8, #31
 8023e58:	fa03 f308 	lsl.w	r3, r3, r8
 8023e5c:	4213      	tst	r3, r2
 8023e5e:	4631      	mov	r1, r6
 8023e60:	4620      	mov	r0, r4
 8023e62:	bf18      	it	ne
 8023e64:	f04b 0b02 	orrne.w	fp, fp, #2
 8023e68:	1bad      	subs	r5, r5, r6
 8023e6a:	f7ff fe08 	bl	8023a7e <rshift>
 8023e6e:	687e      	ldr	r6, [r7, #4]
 8023e70:	f04f 0802 	mov.w	r8, #2
 8023e74:	f1bb 0f00 	cmp.w	fp, #0
 8023e78:	d04a      	beq.n	8023f10 <__gethex+0x3c4>
 8023e7a:	68fb      	ldr	r3, [r7, #12]
 8023e7c:	2b02      	cmp	r3, #2
 8023e7e:	d016      	beq.n	8023eae <__gethex+0x362>
 8023e80:	2b03      	cmp	r3, #3
 8023e82:	d018      	beq.n	8023eb6 <__gethex+0x36a>
 8023e84:	2b01      	cmp	r3, #1
 8023e86:	d109      	bne.n	8023e9c <__gethex+0x350>
 8023e88:	f01b 0f02 	tst.w	fp, #2
 8023e8c:	d006      	beq.n	8023e9c <__gethex+0x350>
 8023e8e:	f8da 3000 	ldr.w	r3, [sl]
 8023e92:	ea4b 0b03 	orr.w	fp, fp, r3
 8023e96:	f01b 0f01 	tst.w	fp, #1
 8023e9a:	d10f      	bne.n	8023ebc <__gethex+0x370>
 8023e9c:	f048 0810 	orr.w	r8, r8, #16
 8023ea0:	e036      	b.n	8023f10 <__gethex+0x3c4>
 8023ea2:	f04f 0b01 	mov.w	fp, #1
 8023ea6:	e7d0      	b.n	8023e4a <__gethex+0x2fe>
 8023ea8:	f04f 0801 	mov.w	r8, #1
 8023eac:	e7e2      	b.n	8023e74 <__gethex+0x328>
 8023eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023eb0:	f1c3 0301 	rsb	r3, r3, #1
 8023eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8023eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d0ef      	beq.n	8023e9c <__gethex+0x350>
 8023ebc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023ec0:	f104 0214 	add.w	r2, r4, #20
 8023ec4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023ec8:	9301      	str	r3, [sp, #4]
 8023eca:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8023ece:	2300      	movs	r3, #0
 8023ed0:	4694      	mov	ip, r2
 8023ed2:	f852 1b04 	ldr.w	r1, [r2], #4
 8023ed6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8023eda:	d01e      	beq.n	8023f1a <__gethex+0x3ce>
 8023edc:	3101      	adds	r1, #1
 8023ede:	f8cc 1000 	str.w	r1, [ip]
 8023ee2:	f1b8 0f02 	cmp.w	r8, #2
 8023ee6:	f104 0214 	add.w	r2, r4, #20
 8023eea:	d13d      	bne.n	8023f68 <__gethex+0x41c>
 8023eec:	683b      	ldr	r3, [r7, #0]
 8023eee:	3b01      	subs	r3, #1
 8023ef0:	42ab      	cmp	r3, r5
 8023ef2:	d10b      	bne.n	8023f0c <__gethex+0x3c0>
 8023ef4:	1169      	asrs	r1, r5, #5
 8023ef6:	2301      	movs	r3, #1
 8023ef8:	f005 051f 	and.w	r5, r5, #31
 8023efc:	fa03 f505 	lsl.w	r5, r3, r5
 8023f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023f04:	421d      	tst	r5, r3
 8023f06:	bf18      	it	ne
 8023f08:	f04f 0801 	movne.w	r8, #1
 8023f0c:	f048 0820 	orr.w	r8, r8, #32
 8023f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023f12:	601c      	str	r4, [r3, #0]
 8023f14:	9b02      	ldr	r3, [sp, #8]
 8023f16:	601e      	str	r6, [r3, #0]
 8023f18:	e6a2      	b.n	8023c60 <__gethex+0x114>
 8023f1a:	4290      	cmp	r0, r2
 8023f1c:	f842 3c04 	str.w	r3, [r2, #-4]
 8023f20:	d8d6      	bhi.n	8023ed0 <__gethex+0x384>
 8023f22:	68a2      	ldr	r2, [r4, #8]
 8023f24:	4593      	cmp	fp, r2
 8023f26:	db17      	blt.n	8023f58 <__gethex+0x40c>
 8023f28:	6861      	ldr	r1, [r4, #4]
 8023f2a:	4648      	mov	r0, r9
 8023f2c:	3101      	adds	r1, #1
 8023f2e:	f7fd feaf 	bl	8021c90 <_Balloc>
 8023f32:	4682      	mov	sl, r0
 8023f34:	b918      	cbnz	r0, 8023f3e <__gethex+0x3f2>
 8023f36:	4b1b      	ldr	r3, [pc, #108]	; (8023fa4 <__gethex+0x458>)
 8023f38:	4602      	mov	r2, r0
 8023f3a:	2184      	movs	r1, #132	; 0x84
 8023f3c:	e6b3      	b.n	8023ca6 <__gethex+0x15a>
 8023f3e:	6922      	ldr	r2, [r4, #16]
 8023f40:	3202      	adds	r2, #2
 8023f42:	f104 010c 	add.w	r1, r4, #12
 8023f46:	0092      	lsls	r2, r2, #2
 8023f48:	300c      	adds	r0, #12
 8023f4a:	f7fd f820 	bl	8020f8e <memcpy>
 8023f4e:	4621      	mov	r1, r4
 8023f50:	4648      	mov	r0, r9
 8023f52:	f7fd fedd 	bl	8021d10 <_Bfree>
 8023f56:	4654      	mov	r4, sl
 8023f58:	6922      	ldr	r2, [r4, #16]
 8023f5a:	1c51      	adds	r1, r2, #1
 8023f5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023f60:	6121      	str	r1, [r4, #16]
 8023f62:	2101      	movs	r1, #1
 8023f64:	6151      	str	r1, [r2, #20]
 8023f66:	e7bc      	b.n	8023ee2 <__gethex+0x396>
 8023f68:	6921      	ldr	r1, [r4, #16]
 8023f6a:	4559      	cmp	r1, fp
 8023f6c:	dd0b      	ble.n	8023f86 <__gethex+0x43a>
 8023f6e:	2101      	movs	r1, #1
 8023f70:	4620      	mov	r0, r4
 8023f72:	f7ff fd84 	bl	8023a7e <rshift>
 8023f76:	68bb      	ldr	r3, [r7, #8]
 8023f78:	3601      	adds	r6, #1
 8023f7a:	42b3      	cmp	r3, r6
 8023f7c:	f6ff aedb 	blt.w	8023d36 <__gethex+0x1ea>
 8023f80:	f04f 0801 	mov.w	r8, #1
 8023f84:	e7c2      	b.n	8023f0c <__gethex+0x3c0>
 8023f86:	f015 051f 	ands.w	r5, r5, #31
 8023f8a:	d0f9      	beq.n	8023f80 <__gethex+0x434>
 8023f8c:	9b01      	ldr	r3, [sp, #4]
 8023f8e:	441a      	add	r2, r3
 8023f90:	f1c5 0520 	rsb	r5, r5, #32
 8023f94:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8023f98:	f7fd ff6c 	bl	8021e74 <__hi0bits>
 8023f9c:	42a8      	cmp	r0, r5
 8023f9e:	dbe6      	blt.n	8023f6e <__gethex+0x422>
 8023fa0:	e7ee      	b.n	8023f80 <__gethex+0x434>
 8023fa2:	bf00      	nop
 8023fa4:	08025d46 	.word	0x08025d46

08023fa8 <L_shift>:
 8023fa8:	f1c2 0208 	rsb	r2, r2, #8
 8023fac:	0092      	lsls	r2, r2, #2
 8023fae:	b570      	push	{r4, r5, r6, lr}
 8023fb0:	f1c2 0620 	rsb	r6, r2, #32
 8023fb4:	6843      	ldr	r3, [r0, #4]
 8023fb6:	6804      	ldr	r4, [r0, #0]
 8023fb8:	fa03 f506 	lsl.w	r5, r3, r6
 8023fbc:	432c      	orrs	r4, r5
 8023fbe:	40d3      	lsrs	r3, r2
 8023fc0:	6004      	str	r4, [r0, #0]
 8023fc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8023fc6:	4288      	cmp	r0, r1
 8023fc8:	d3f4      	bcc.n	8023fb4 <L_shift+0xc>
 8023fca:	bd70      	pop	{r4, r5, r6, pc}

08023fcc <__match>:
 8023fcc:	b530      	push	{r4, r5, lr}
 8023fce:	6803      	ldr	r3, [r0, #0]
 8023fd0:	3301      	adds	r3, #1
 8023fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023fd6:	b914      	cbnz	r4, 8023fde <__match+0x12>
 8023fd8:	6003      	str	r3, [r0, #0]
 8023fda:	2001      	movs	r0, #1
 8023fdc:	bd30      	pop	{r4, r5, pc}
 8023fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023fe2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8023fe6:	2d19      	cmp	r5, #25
 8023fe8:	bf98      	it	ls
 8023fea:	3220      	addls	r2, #32
 8023fec:	42a2      	cmp	r2, r4
 8023fee:	d0f0      	beq.n	8023fd2 <__match+0x6>
 8023ff0:	2000      	movs	r0, #0
 8023ff2:	e7f3      	b.n	8023fdc <__match+0x10>

08023ff4 <__hexnan>:
 8023ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ff8:	680b      	ldr	r3, [r1, #0]
 8023ffa:	6801      	ldr	r1, [r0, #0]
 8023ffc:	115e      	asrs	r6, r3, #5
 8023ffe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8024002:	f013 031f 	ands.w	r3, r3, #31
 8024006:	b087      	sub	sp, #28
 8024008:	bf18      	it	ne
 802400a:	3604      	addne	r6, #4
 802400c:	2500      	movs	r5, #0
 802400e:	1f37      	subs	r7, r6, #4
 8024010:	4682      	mov	sl, r0
 8024012:	4690      	mov	r8, r2
 8024014:	9301      	str	r3, [sp, #4]
 8024016:	f846 5c04 	str.w	r5, [r6, #-4]
 802401a:	46b9      	mov	r9, r7
 802401c:	463c      	mov	r4, r7
 802401e:	9502      	str	r5, [sp, #8]
 8024020:	46ab      	mov	fp, r5
 8024022:	784a      	ldrb	r2, [r1, #1]
 8024024:	1c4b      	adds	r3, r1, #1
 8024026:	9303      	str	r3, [sp, #12]
 8024028:	b342      	cbz	r2, 802407c <__hexnan+0x88>
 802402a:	4610      	mov	r0, r2
 802402c:	9105      	str	r1, [sp, #20]
 802402e:	9204      	str	r2, [sp, #16]
 8024030:	f7ff fd77 	bl	8023b22 <__hexdig_fun>
 8024034:	2800      	cmp	r0, #0
 8024036:	d14f      	bne.n	80240d8 <__hexnan+0xe4>
 8024038:	9a04      	ldr	r2, [sp, #16]
 802403a:	9905      	ldr	r1, [sp, #20]
 802403c:	2a20      	cmp	r2, #32
 802403e:	d818      	bhi.n	8024072 <__hexnan+0x7e>
 8024040:	9b02      	ldr	r3, [sp, #8]
 8024042:	459b      	cmp	fp, r3
 8024044:	dd13      	ble.n	802406e <__hexnan+0x7a>
 8024046:	454c      	cmp	r4, r9
 8024048:	d206      	bcs.n	8024058 <__hexnan+0x64>
 802404a:	2d07      	cmp	r5, #7
 802404c:	dc04      	bgt.n	8024058 <__hexnan+0x64>
 802404e:	462a      	mov	r2, r5
 8024050:	4649      	mov	r1, r9
 8024052:	4620      	mov	r0, r4
 8024054:	f7ff ffa8 	bl	8023fa8 <L_shift>
 8024058:	4544      	cmp	r4, r8
 802405a:	d950      	bls.n	80240fe <__hexnan+0x10a>
 802405c:	2300      	movs	r3, #0
 802405e:	f1a4 0904 	sub.w	r9, r4, #4
 8024062:	f844 3c04 	str.w	r3, [r4, #-4]
 8024066:	f8cd b008 	str.w	fp, [sp, #8]
 802406a:	464c      	mov	r4, r9
 802406c:	461d      	mov	r5, r3
 802406e:	9903      	ldr	r1, [sp, #12]
 8024070:	e7d7      	b.n	8024022 <__hexnan+0x2e>
 8024072:	2a29      	cmp	r2, #41	; 0x29
 8024074:	d155      	bne.n	8024122 <__hexnan+0x12e>
 8024076:	3102      	adds	r1, #2
 8024078:	f8ca 1000 	str.w	r1, [sl]
 802407c:	f1bb 0f00 	cmp.w	fp, #0
 8024080:	d04f      	beq.n	8024122 <__hexnan+0x12e>
 8024082:	454c      	cmp	r4, r9
 8024084:	d206      	bcs.n	8024094 <__hexnan+0xa0>
 8024086:	2d07      	cmp	r5, #7
 8024088:	dc04      	bgt.n	8024094 <__hexnan+0xa0>
 802408a:	462a      	mov	r2, r5
 802408c:	4649      	mov	r1, r9
 802408e:	4620      	mov	r0, r4
 8024090:	f7ff ff8a 	bl	8023fa8 <L_shift>
 8024094:	4544      	cmp	r4, r8
 8024096:	d934      	bls.n	8024102 <__hexnan+0x10e>
 8024098:	f1a8 0204 	sub.w	r2, r8, #4
 802409c:	4623      	mov	r3, r4
 802409e:	f853 1b04 	ldr.w	r1, [r3], #4
 80240a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80240a6:	429f      	cmp	r7, r3
 80240a8:	d2f9      	bcs.n	802409e <__hexnan+0xaa>
 80240aa:	1b3b      	subs	r3, r7, r4
 80240ac:	f023 0303 	bic.w	r3, r3, #3
 80240b0:	3304      	adds	r3, #4
 80240b2:	3e03      	subs	r6, #3
 80240b4:	3401      	adds	r4, #1
 80240b6:	42a6      	cmp	r6, r4
 80240b8:	bf38      	it	cc
 80240ba:	2304      	movcc	r3, #4
 80240bc:	4443      	add	r3, r8
 80240be:	2200      	movs	r2, #0
 80240c0:	f843 2b04 	str.w	r2, [r3], #4
 80240c4:	429f      	cmp	r7, r3
 80240c6:	d2fb      	bcs.n	80240c0 <__hexnan+0xcc>
 80240c8:	683b      	ldr	r3, [r7, #0]
 80240ca:	b91b      	cbnz	r3, 80240d4 <__hexnan+0xe0>
 80240cc:	4547      	cmp	r7, r8
 80240ce:	d126      	bne.n	802411e <__hexnan+0x12a>
 80240d0:	2301      	movs	r3, #1
 80240d2:	603b      	str	r3, [r7, #0]
 80240d4:	2005      	movs	r0, #5
 80240d6:	e025      	b.n	8024124 <__hexnan+0x130>
 80240d8:	3501      	adds	r5, #1
 80240da:	2d08      	cmp	r5, #8
 80240dc:	f10b 0b01 	add.w	fp, fp, #1
 80240e0:	dd06      	ble.n	80240f0 <__hexnan+0xfc>
 80240e2:	4544      	cmp	r4, r8
 80240e4:	d9c3      	bls.n	802406e <__hexnan+0x7a>
 80240e6:	2300      	movs	r3, #0
 80240e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80240ec:	2501      	movs	r5, #1
 80240ee:	3c04      	subs	r4, #4
 80240f0:	6822      	ldr	r2, [r4, #0]
 80240f2:	f000 000f 	and.w	r0, r0, #15
 80240f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80240fa:	6020      	str	r0, [r4, #0]
 80240fc:	e7b7      	b.n	802406e <__hexnan+0x7a>
 80240fe:	2508      	movs	r5, #8
 8024100:	e7b5      	b.n	802406e <__hexnan+0x7a>
 8024102:	9b01      	ldr	r3, [sp, #4]
 8024104:	2b00      	cmp	r3, #0
 8024106:	d0df      	beq.n	80240c8 <__hexnan+0xd4>
 8024108:	f1c3 0320 	rsb	r3, r3, #32
 802410c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024110:	40da      	lsrs	r2, r3
 8024112:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8024116:	4013      	ands	r3, r2
 8024118:	f846 3c04 	str.w	r3, [r6, #-4]
 802411c:	e7d4      	b.n	80240c8 <__hexnan+0xd4>
 802411e:	3f04      	subs	r7, #4
 8024120:	e7d2      	b.n	80240c8 <__hexnan+0xd4>
 8024122:	2004      	movs	r0, #4
 8024124:	b007      	add	sp, #28
 8024126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802412a <__ascii_mbtowc>:
 802412a:	b082      	sub	sp, #8
 802412c:	b901      	cbnz	r1, 8024130 <__ascii_mbtowc+0x6>
 802412e:	a901      	add	r1, sp, #4
 8024130:	b142      	cbz	r2, 8024144 <__ascii_mbtowc+0x1a>
 8024132:	b14b      	cbz	r3, 8024148 <__ascii_mbtowc+0x1e>
 8024134:	7813      	ldrb	r3, [r2, #0]
 8024136:	600b      	str	r3, [r1, #0]
 8024138:	7812      	ldrb	r2, [r2, #0]
 802413a:	1e10      	subs	r0, r2, #0
 802413c:	bf18      	it	ne
 802413e:	2001      	movne	r0, #1
 8024140:	b002      	add	sp, #8
 8024142:	4770      	bx	lr
 8024144:	4610      	mov	r0, r2
 8024146:	e7fb      	b.n	8024140 <__ascii_mbtowc+0x16>
 8024148:	f06f 0001 	mvn.w	r0, #1
 802414c:	e7f8      	b.n	8024140 <__ascii_mbtowc+0x16>

0802414e <__ascii_wctomb>:
 802414e:	b149      	cbz	r1, 8024164 <__ascii_wctomb+0x16>
 8024150:	2aff      	cmp	r2, #255	; 0xff
 8024152:	bf85      	ittet	hi
 8024154:	238a      	movhi	r3, #138	; 0x8a
 8024156:	6003      	strhi	r3, [r0, #0]
 8024158:	700a      	strbls	r2, [r1, #0]
 802415a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802415e:	bf98      	it	ls
 8024160:	2001      	movls	r0, #1
 8024162:	4770      	bx	lr
 8024164:	4608      	mov	r0, r1
 8024166:	4770      	bx	lr

08024168 <_raise_r>:
 8024168:	291f      	cmp	r1, #31
 802416a:	b538      	push	{r3, r4, r5, lr}
 802416c:	4604      	mov	r4, r0
 802416e:	460d      	mov	r5, r1
 8024170:	d904      	bls.n	802417c <_raise_r+0x14>
 8024172:	2316      	movs	r3, #22
 8024174:	6003      	str	r3, [r0, #0]
 8024176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802417a:	bd38      	pop	{r3, r4, r5, pc}
 802417c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802417e:	b112      	cbz	r2, 8024186 <_raise_r+0x1e>
 8024180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024184:	b94b      	cbnz	r3, 802419a <_raise_r+0x32>
 8024186:	4620      	mov	r0, r4
 8024188:	f000 f830 	bl	80241ec <_getpid_r>
 802418c:	462a      	mov	r2, r5
 802418e:	4601      	mov	r1, r0
 8024190:	4620      	mov	r0, r4
 8024192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024196:	f000 b817 	b.w	80241c8 <_kill_r>
 802419a:	2b01      	cmp	r3, #1
 802419c:	d00a      	beq.n	80241b4 <_raise_r+0x4c>
 802419e:	1c59      	adds	r1, r3, #1
 80241a0:	d103      	bne.n	80241aa <_raise_r+0x42>
 80241a2:	2316      	movs	r3, #22
 80241a4:	6003      	str	r3, [r0, #0]
 80241a6:	2001      	movs	r0, #1
 80241a8:	e7e7      	b.n	802417a <_raise_r+0x12>
 80241aa:	2400      	movs	r4, #0
 80241ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80241b0:	4628      	mov	r0, r5
 80241b2:	4798      	blx	r3
 80241b4:	2000      	movs	r0, #0
 80241b6:	e7e0      	b.n	802417a <_raise_r+0x12>

080241b8 <raise>:
 80241b8:	4b02      	ldr	r3, [pc, #8]	; (80241c4 <raise+0xc>)
 80241ba:	4601      	mov	r1, r0
 80241bc:	6818      	ldr	r0, [r3, #0]
 80241be:	f7ff bfd3 	b.w	8024168 <_raise_r>
 80241c2:	bf00      	nop
 80241c4:	2000099c 	.word	0x2000099c

080241c8 <_kill_r>:
 80241c8:	b538      	push	{r3, r4, r5, lr}
 80241ca:	4d07      	ldr	r5, [pc, #28]	; (80241e8 <_kill_r+0x20>)
 80241cc:	2300      	movs	r3, #0
 80241ce:	4604      	mov	r4, r0
 80241d0:	4608      	mov	r0, r1
 80241d2:	4611      	mov	r1, r2
 80241d4:	602b      	str	r3, [r5, #0]
 80241d6:	f7df f97f 	bl	80034d8 <_kill>
 80241da:	1c43      	adds	r3, r0, #1
 80241dc:	d102      	bne.n	80241e4 <_kill_r+0x1c>
 80241de:	682b      	ldr	r3, [r5, #0]
 80241e0:	b103      	cbz	r3, 80241e4 <_kill_r+0x1c>
 80241e2:	6023      	str	r3, [r4, #0]
 80241e4:	bd38      	pop	{r3, r4, r5, pc}
 80241e6:	bf00      	nop
 80241e8:	20017008 	.word	0x20017008

080241ec <_getpid_r>:
 80241ec:	f7df b96c 	b.w	80034c8 <_getpid>

080241f0 <_init>:
 80241f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241f2:	bf00      	nop
 80241f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80241f6:	bc08      	pop	{r3}
 80241f8:	469e      	mov	lr, r3
 80241fa:	4770      	bx	lr

080241fc <_fini>:
 80241fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241fe:	bf00      	nop
 8024200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024202:	bc08      	pop	{r3}
 8024204:	469e      	mov	lr, r3
 8024206:	4770      	bx	lr
