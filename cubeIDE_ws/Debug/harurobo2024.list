
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000241d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dac  080243d0  080243d0  000343d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802617c  0802617c  00040b48  2**0
                  CONTENTS
  4 .ARM          00000008  0802617c  0802617c  0003617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026184  08026184  00040b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08026184  08026184  00036184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802619c  0802619c  0003619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b48  20000000  080261a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016738  20000b48  08026ce8  00040b48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017280  08026ce8  00047280  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b48  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b76  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f33f  00000000  00000000  00040bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c25  00000000  00000000  0006ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  00076b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a8e  00000000  00000000  00078df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db5c  00000000  00000000  000acb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119dde  00000000  00000000  000da6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a5d4  00000000  00000000  001f44b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b48 	.word	0x20000b48
 800021c:	00000000 	.word	0x00000000
 8000220:	080243b8 	.word	0x080243b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b4c 	.word	0x20000b4c
 800023c:	080243b8 	.word	0x080243b8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002e3c 	.word	0x20002e3c
 8000b38:	20000e38 	.word	0x20000e38
 8000b3c:	20002e40 	.word	0x20002e40
 8000b40:	20002e38 	.word	0x20002e38

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fe73 	bl	8004888 <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 ff2d 	bl	8004a28 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002e40 	.word	0x20002e40
 8000be8:	20002e38 	.word	0x20002e38
 8000bec:	20002e3c 	.word	0x20002e3c
 8000bf0:	20000e38 	.word	0x20000e38
 8000bf4:	20000b64 	.word	0x20000b64

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 ff33 	bl	8004a92 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f ff16 	bl	8020a64 <iprintf>
		Error_Handler();
 8000c38:	f002 fe0b 	bl	8003852 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 ff49 	bl	8001ade <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 ff84 	bl	8001b76 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f fe6f 	bl	8020a64 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	080243d0 	.word	0x080243d0
 8000df0:	20000b78 	.word	0x20000b78
 8000df4:	20000b6c 	.word	0x20000b6c
 8000df8:	20000bb8 	.word	0x20000bb8
 8000dfc:	20000c58 	.word	0x20000c58
 8000e00:	20000cf8 	.word	0x20000cf8
 8000e04:	20000d98 	.word	0x20000d98
 8000e08:	080243e8 	.word	0x080243e8
 8000e0c:	20000b68 	.word	0x20000b68

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 fcff 	bl	8003852 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 fce3 	bl	8003852 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 fcd8 	bl	8003852 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000b64 	.word	0x20000b64
 8000ee4:	20000b68 	.word	0x20000b68
 8000ee8:	20000b6c 	.word	0x20000b6c
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fd9c 	bl	8001a84 <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fd8c 	bl	8001a84 <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fd7c 	bl	8001a84 <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fd6c 	bl	8001a84 <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fb2c 	bl	8004628 <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 fc3c 	bl	8003852 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fd4d 	bl	8001a84 <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fd3d 	bl	8001a84 <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fd2d 	bl	8001a84 <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fd1d 	bl	8001a84 <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fadd 	bl	8004628 <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f002 fbed 	bl	8003852 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fcfe 	bl	8001a84 <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fcee 	bl	8001a84 <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fcde 	bl	8001a84 <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fcce 	bl	8001a84 <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fa8e 	bl	8004628 <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f002 fb9e 	bl	8003852 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fcaf 	bl	8001a84 <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fc9f 	bl	8001a84 <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fc8f 	bl	8001a84 <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fc7f 	bl	8001a84 <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fa3f 	bl	8004628 <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f002 fb4f 	bl	8003852 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fc60 	bl	8001a84 <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fc50 	bl	8001a84 <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fc40 	bl	8001a84 <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fc30 	bl	8001a84 <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f9f0 	bl	8004628 <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f002 fb00 	bl	8003852 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000b78 	.word	0x20000b78
 8001258:	20000b64 	.word	0x20000b64
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fc0c 	bl	8001a84 <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fbfc 	bl	8001a84 <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fbec 	bl	8001a84 <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fbdc 	bl	8001a84 <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f99c 	bl	8004628 <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f002 faac 	bl	8003852 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fbbd 	bl	8001a84 <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fbad 	bl	8001a84 <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fb9d 	bl	8001a84 <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fb8d 	bl	8001a84 <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f003 f94d 	bl	8004628 <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f002 fa5d 	bl	8003852 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fa2f 	bl	8004800 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f fbc1 	bl	8020b30 <puts>
		Error_Handler();
 80013ae:	f002 fa50 	bl	8003852 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fc7c 	bl	8004cb6 <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f fb4d 	bl	8020a64 <iprintf>
		Error_Handler();
 80013ca:	f002 fa42 	bl	8003852 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fc6e 	bl	8004cb6 <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f fb3f 	bl	8020a64 <iprintf>
		Error_Handler();
 80013e6:	f002 fa34 	bl	8003852 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b64 	.word	0x20000b64
 80013f8:	080243f0 	.word	0x080243f0
 80013fc:	08024400 	.word	0x08024400

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f fb2a 	bl	8020a64 <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 ffe8 	bl	80043e8 <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f fb16 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f fb03 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f faf0 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f fadc 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f fac9 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f fab5 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f faa1 	bl	8020a64 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08024424 	.word	0x08024424
 8001540:	20000b68 	.word	0x20000b68
 8001544:	20000b78 	.word	0x20000b78
 8001548:	08024444 	.word	0x08024444
 800154c:	08024454 	.word	0x08024454
 8001550:	08024464 	.word	0x08024464
 8001554:	08024474 	.word	0x08024474
 8001558:	08024484 	.word	0x08024484
 800155c:	08024494 	.word	0x08024494
 8001560:	080244a0 	.word	0x080244a0

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fa58 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fa44 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa30 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fa0c 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f9ea 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f9d6 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f9c2 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fe91 	bl	80043e8 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f9a6 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f990 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f978 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d12f      	bne.n	80017ce <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	4619      	mov	r1, r3
 800177a:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 800177c:	0043      	lsls	r3, r0, #1
 800177e:	440b      	add	r3, r1
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	4619      	mov	r1, r3
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 8001796:	0043      	lsls	r3, r0, #1
 8001798:	440b      	add	r3, r1
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	4618      	mov	r0, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 80017b0:	0043      	lsls	r3, r0, #1
 80017b2:	440b      	add	r3, r1
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]
		return ans;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80017cc:	e08f      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d111      	bne.n	80017fa <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	461c      	mov	r4, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	4618      	mov	r0, r3
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <Get_MCMD_Feedback+0x1a0>)
 80017e6:	0063      	lsls	r3, r4, #1
 80017e8:	4403      	add	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80017f8:	e079      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d12f      	bne.n	8001862 <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	4618      	mov	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	4619      	mov	r1, r3
 800180e:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 8001810:	0043      	lsls	r3, r0, #1
 8001812:	440b      	add	r3, r1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	4618      	mov	r0, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	4619      	mov	r1, r3
 8001828:	4a35      	ldr	r2, [pc, #212]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 800182a:	0043      	lsls	r3, r0, #1
 800182c:	440b      	add	r3, r1
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	4619      	mov	r1, r3
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 8001844:	0043      	lsls	r3, r0, #1
 8001846:	440b      	add	r3, r1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60bb      	str	r3, [r7, #8]
		return ans;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800185c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001860:	e045      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d12f      	bne.n	80018ca <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	4618      	mov	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	789b      	ldrb	r3, [r3, #2]
 8001874:	4619      	mov	r1, r3
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 8001878:	0043      	lsls	r3, r0, #1
 800187a:	440b      	add	r3, r1
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	4618      	mov	r0, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	4619      	mov	r1, r3
 8001890:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 8001892:	0043      	lsls	r3, r0, #1
 8001894:	440b      	add	r3, r1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60bb      	str	r3, [r7, #8]
		return ans;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80018c8:	e011      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <Get_MCMD_Feedback+0x1ac>)
 80018da:	f01f f8c3 	bl	8020a64 <iprintf>
		return ans;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ea:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000bb8 	.word	0x20000bb8
 80018fc:	20000c58 	.word	0x20000c58
 8001900:	20000cf8 	.word	0x20000cf8
 8001904:	20000d98 	.word	0x20000d98
 8001908:	080244b0 	.word	0x080244b0

0800190c <ServoDriver_Init>:

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001922:	2101      	movs	r1, #1
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f884 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2208      	movs	r2, #8
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff fa6a 	bl	8000e10 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 8001948:	2102      	movs	r1, #2
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f871 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2208      	movs	r2, #8
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff fa57 	bl	8000e10 <SendBytes>
	fdata[0] = param->angle_offset;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 800196e:	2103      	movs	r1, #3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f85e 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff fa44 	bl	8000e10 <SendBytes>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 800199c:	2104      	movs	r1, #4
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f847 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	463b      	mov	r3, r7
 80019ac:	2204      	movs	r2, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff fa2e 	bl	8000e10 <SendBytes>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <ServoDriver_SendValue+0x2e>
		Error_Handler();
 80019ba:	f001 ff4a 	bl	8003852 <Error_Handler>
	}
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80019d2:	2101      	movs	r1, #1
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f82c 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	1cfb      	adds	r3, r7, #3
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff fa13 	bl	8000e10 <SendBytes>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <AirCylinder_Init+0x2e>
		Error_Handler();
 80019f0:	f001 ff2f 	bl	8003852 <Error_Handler>
	}
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001a08:	2102      	movs	r1, #2
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f811 	bl	8001a32 <Make_CAN_ID_from_CAN_Device>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	1cfb      	adds	r3, r7, #3
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f9f8 	bl	8000e10 <SendBytes>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001a26:	f001 ff14 	bl	8003852 <Error_Handler>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001a32:	b4b0      	push	{r4, r5, r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	02db      	lsls	r3, r3, #11
 8001a4c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	17da      	asrs	r2, r3, #31
 8001a70:	461c      	mov	r4, r3
 8001a72:	4615      	mov	r5, r2
 8001a74:	4622      	mov	r2, r4
 8001a76:	462b      	mov	r3, r5
}
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bcb0      	pop	{r4, r5, r7}
 8001a82:	4770      	bx	lr

08001a84 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 8001a84:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71bb      	strb	r3, [r7, #6]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	717b      	strb	r3, [r7, #5]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	02db      	lsls	r3, r3, #11
 8001aa8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001abe:	793b      	ldrb	r3, [r7, #4]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	17da      	asrs	r2, r3, #31
 8001ac8:	4698      	mov	r8, r3
 8001aca:	4691      	mov	r9, r2
 8001acc:	4642      	mov	r2, r8
 8001ace:	464b      	mov	r3, r9
}
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 8001adc:	4770      	bx	lr

08001ade <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	0942      	lsrs	r2, r0, #5
 8001af6:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001afa:	094b      	lsrs	r3, r1, #5
 8001afc:	b2d3      	uxtb	r3, r2
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	0a02      	lsrs	r2, r0, #8
 8001b14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b18:	0a0b      	lsrs	r3, r1, #8
 8001b1a:	b2d3      	uxtb	r3, r2
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	0ac2      	lsrs	r2, r0, #11
 8001b32:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001b36:	0acb      	lsrs	r3, r1, #11
 8001b38:	b2d3      	uxtb	r3, r2
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	723b      	strb	r3, [r7, #8]
    return ans;
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	8019      	strh	r1, [r3, #0]
 8001b50:	3302      	adds	r3, #2
 8001b52:	0c12      	lsrs	r2, r2, #16
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	2300      	movs	r3, #0
 8001b58:	7b3a      	ldrb	r2, [r7, #12]
 8001b5a:	f362 0307 	bfi	r3, r2, #0, #8
 8001b5e:	7b7a      	ldrb	r2, [r7, #13]
 8001b60:	f362 230f 	bfi	r3, r2, #8, #8
 8001b64:	7bba      	ldrb	r2, [r7, #14]
 8001b66:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	e9c7 0100 	strd	r0, r1, [r7]
 8001b80:	783b      	ldrb	r3, [r7, #0]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <MX_CAN1_Init+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bb2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001bb6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_CAN1_Init+0x64>)
 8001be4:	f002 fc24 	bl	8004430 <HAL_CAN_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001bee:	f001 fe30 	bl	8003852 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20002e44 	.word	0x20002e44
 8001bfc:	40006400 	.word	0x40006400

08001c00 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_CAN_MspInit+0xac>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d13f      	bne.n	8001ca2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_CAN_MspInit+0xb0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c52:	2303      	movs	r3, #3
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c62:	2309      	movs	r3, #9
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <HAL_CAN_MspInit+0xb4>)
 8001c6e:	f003 ff33 	bl	8005ad8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	2013      	movs	r0, #19
 8001c78:	f003 faee 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c7c:	2013      	movs	r0, #19
 8001c7e:	f003 fb07 	bl	8005290 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	2014      	movs	r0, #20
 8001c88:	f003 fae6 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c8c:	2014      	movs	r0, #20
 8001c8e:	f003 faff 	bl	8005290 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2105      	movs	r1, #5
 8001c96:	2015      	movs	r0, #21
 8001c98:	f003 fade 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c9c:	2015      	movs	r0, #21
 8001c9e:	f003 faf7 	bl	8005290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40006400 	.word	0x40006400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001cc4:	f00d fad0 	bl	800f268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <pvPortMallocMicroROS+0x180>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001cd0:	f000 f98a 	bl	8001fe8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <pvPortMallocMicroROS+0x184>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 8092 	bne.w	8001e06 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01f      	beq.n	8001d28 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001ce8:	2208      	movs	r2, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f023 0307 	bic.w	r3, r3, #7
 8001d00:	3308      	adds	r3, #8
 8001d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d12:	b672      	cpsid	i
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	b662      	cpsie	i
 8001d22:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d24:	bf00      	nop
 8001d26:	e7fe      	b.n	8001d26 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06b      	beq.n	8001e06 <pvPortMallocMicroROS+0x14e>
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d866      	bhi.n	8001e06 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <pvPortMallocMicroROS+0x18c>)
 8001d3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <pvPortMallocMicroROS+0x18c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d42:	e004      	b.n	8001d4e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d903      	bls.n	8001d60 <pvPortMallocMicroROS+0xa8>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f1      	bne.n	8001d44 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <pvPortMallocMicroROS+0x180>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d04d      	beq.n	8001e06 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	4413      	add	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	2308      	movs	r3, #8
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d921      	bls.n	8001dd0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	b672      	cpsid	i
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	b662      	cpsie	i
 8001db2:	613b      	str	r3, [r7, #16]
}
 8001db4:	bf00      	nop
 8001db6:	e7fe      	b.n	8001db6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f000 f96e 	bl	80020ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <pvPortMallocMicroROS+0x190>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d203      	bcs.n	8001df2 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <pvPortMallocMicroROS+0x188>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <pvPortMallocMicroROS+0x190>)
 8001df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <pvPortMallocMicroROS+0x184>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e06:	f00d fa3d 	bl	800f284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	b672      	cpsid	i
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	b662      	cpsie	i
 8001e28:	60fb      	str	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	e7fe      	b.n	8001e2c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20006a74 	.word	0x20006a74
 8001e3c:	20006a80 	.word	0x20006a80
 8001e40:	20006a78 	.word	0x20006a78
 8001e44:	20006a6c 	.word	0x20006a6c
 8001e48:	20006a7c 	.word	0x20006a7c

08001e4c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d04c      	beq.n	8001ef8 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001e5e:	2308      	movs	r3, #8
 8001e60:	425b      	negs	r3, r3
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <vPortFreeMicroROS+0xb4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	b672      	cpsid	i
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	b662      	cpsie	i
 8001e8e:	60fb      	str	r3, [r7, #12]
}
 8001e90:	bf00      	nop
 8001e92:	e7fe      	b.n	8001e92 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00c      	beq.n	8001eb6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea0:	b672      	cpsid	i
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	b662      	cpsie	i
 8001eb0:	60bb      	str	r3, [r7, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	e7fe      	b.n	8001eb4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <vPortFreeMicroROS+0xb4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d019      	beq.n	8001ef8 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d115      	bne.n	8001ef8 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <vPortFreeMicroROS+0xb4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001edc:	f00d f9c4 	bl	800f268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <vPortFreeMicroROS+0xb8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <vPortFreeMicroROS+0xb8>)
 8001eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001eee:	6938      	ldr	r0, [r7, #16]
 8001ef0:	f000 f8dc 	bl	80020ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001ef4:	f00d f9c6 	bl	800f284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20006a80 	.word	0x20006a80
 8001f04:	20006a78 	.word	0x20006a78

08001f08 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001f14:	2308      	movs	r3, #8
 8001f16:	425b      	negs	r3, r3
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <getBlockSize+0x38>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

	return count;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20006a80 	.word	0x20006a80

08001f44 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001f4e:	f00d f98b 	bl	800f268 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f7ff feb0 	bl	8001cb8 <pvPortMallocMicroROS>
 8001f58:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <pvPortReallocMicroROS+0x4c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d014      	beq.n	8001f90 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffce 	bl	8001f08 <getBlockSize>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2208      	movs	r2, #8
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d201      	bcs.n	8001f80 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68b8      	ldr	r0, [r7, #8]
 8001f86:	f01f f8e6 	bl	8021156 <memcpy>

		vPortFreeMicroROS(pv);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff5e 	bl	8001e4c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001f90:	f00d f978 	bl	800f284 <xTaskResumeAll>

	return newmem;
 8001f94:	68bb      	ldr	r3, [r7, #8]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001fa8:	f00d f95e 	bl	800f268 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff fe7e 	bl	8001cb8 <pvPortMallocMicroROS>
 8001fbc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001fc2:	e004      	b.n	8001fce <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	613a      	str	r2, [r7, #16]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	617a      	str	r2, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f5      	bne.n	8001fc4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001fd8:	f00d f954 	bl	800f284 <xTaskResumeAll>
  	return mem;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001fee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ff2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <prvHeapInit+0xac>)
 8001ff6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3307      	adds	r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <prvHeapInit+0xac>)
 8002018:	4413      	add	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <prvHeapInit+0xb0>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <prvHeapInit+0xb0>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002034:	2208      	movs	r2, #8
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <prvHeapInit+0xb4>)
 8002048:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <prvHeapInit+0xb4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <prvHeapInit+0xb4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <prvHeapInit+0xb4>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <prvHeapInit+0xb8>)
 8002076:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <prvHeapInit+0xbc>)
 800207e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <prvHeapInit+0xc0>)
 8002082:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20002e6c 	.word	0x20002e6c
 8002098:	20006a6c 	.word	0x20006a6c
 800209c:	20006a74 	.word	0x20006a74
 80020a0:	20006a7c 	.word	0x20006a7c
 80020a4:	20006a78 	.word	0x20006a78
 80020a8:	20006a80 	.word	0x20006a80

080020ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <prvInsertBlockIntoFreeList+0xac>)
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e002      	b.n	80020c0 <prvInsertBlockIntoFreeList+0x14>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d8f7      	bhi.n	80020ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d108      	bne.n	80020ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	441a      	add	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	441a      	add	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d118      	bne.n	8002134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <prvInsertBlockIntoFreeList+0xb0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d00d      	beq.n	800212a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e008      	b.n	800213c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <prvInsertBlockIntoFreeList+0xb0>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e003      	b.n	800213c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d002      	beq.n	800214a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20006a6c 	.word	0x20006a6c
 800215c:	20006a74 	.word	0x20006a74

08002160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_DMA_Init+0x48>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <MX_DMA_Init+0x48>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <MX_DMA_Init+0x48>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	200c      	movs	r0, #12
 8002184:	f003 f868 	bl	8005258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002188:	200c      	movs	r0, #12
 800218a:	f003 f881 	bl	8005290 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2105      	movs	r1, #5
 8002192:	200e      	movs	r0, #14
 8002194:	f003 f860 	bl	8005258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002198:	200e      	movs	r0, #14
 800219a:	f003 f879 	bl	8005290 <HAL_NVIC_EnableIRQ>

}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80021ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80021bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c0:	4904      	ldr	r1, [pc, #16]	; (80021d4 <cubemx_transport_open+0x28>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f007 f800 	bl	80091c8 <HAL_UART_Receive_DMA>
    return true;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20006a84 	.word	0x20006a84

080021d8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80021e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f007 f831 	bl	8009250 <HAL_UART_DMAStop>
    return true;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800220c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002212:	2b20      	cmp	r3, #32
 8002214:	d11a      	bne.n	800224c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f006 ff56 	bl	80090d0 <HAL_UART_Transmit_DMA>
 8002224:	4603      	mov	r3, r0
 8002226:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002228:	e002      	b.n	8002230 <cubemx_transport_write+0x38>
            osDelay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f00b ffb2 	bl	800e194 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <cubemx_transport_write+0x46>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800223a:	2b20      	cmp	r3, #32
 800223c:	d1f5      	bne.n	800222a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <cubemx_transport_write+0x50>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	e002      	b.n	800224e <cubemx_transport_write+0x56>
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800224c:	2300      	movs	r3, #0
    }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800226c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002272:	b672      	cpsid	i
}
 8002274:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <cubemx_transport_read+0x9c>)
 8002284:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002286:	b662      	cpsie	i
}
 8002288:	bf00      	nop
        __enable_irq();
        ms_used++;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002290:	2001      	movs	r0, #1
 8002292:	f00b ff7f 	bl	800e194 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <cubemx_transport_read+0xa0>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <cubemx_transport_read+0x9c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d103      	bne.n	80022aa <cubemx_transport_read+0x52>
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbe3      	blt.n	8002272 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022ae:	e011      	b.n	80022d4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	440b      	add	r3, r1
 80022ba:	4910      	ldr	r1, [pc, #64]	; (80022fc <cubemx_transport_read+0xa4>)
 80022bc:	5c8a      	ldrb	r2, [r1, r2]
 80022be:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022cc:	6013      	str	r3, [r2, #0]
        wrote++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <cubemx_transport_read+0xa0>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <cubemx_transport_read+0x9c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d003      	beq.n	80022e8 <cubemx_transport_read+0x90>
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3e3      	bcc.n	80022b0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80022e8:	69bb      	ldr	r3, [r7, #24]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20007288 	.word	0x20007288
 80022f8:	20007284 	.word	0x20007284
 80022fc:	20006a84 	.word	0x20006a84

08002300 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002308:	f7fe fc76 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800231c:	f7fe fc72 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002330:	f7fe fc62 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002344:	f7fe fc5e 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002358:	f7fe fc4e 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800236c:	f7fe fc4a 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fc44 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20007380 	.word	0x20007380

08002394 <canSetting>:
//can通信の設定
void canSetting(){
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 8002398:	480f      	ldr	r0, [pc, #60]	; (80023d8 <canSetting+0x44>)
 800239a:	f01e fb63 	bl	8020a64 <iprintf>
	osDelay(10);
 800239e:	200a      	movs	r0, #10
 80023a0:	f00b fef8 	bl	800e194 <osDelay>

	CAN_SystemInit(&hcan1);
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <canSetting+0x48>)
 80023a6:	f7fe fd83 	bl	8000eb0 <CAN_SystemInit>

//	num_of_devices.mcmd3 = 0;
	num_of_devices.mcmd3 = 4;
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <canSetting+0x4c>)
 80023ac:	2204      	movs	r2, #4
 80023ae:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <canSetting+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <canSetting+0x4c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 2;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <canSetting+0x4c>)
 80023be:	2202      	movs	r2, #2
 80023c0:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <canSetting+0x50>)
 80023c4:	f01e fb4e 	bl	8020a64 <iprintf>
	osDelay(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f00b fee3 	bl	800e194 <osDelay>
	CAN_WaitConnect(&num_of_devices);
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <canSetting+0x4c>)
 80023d0:	f7ff f816 	bl	8001400 <CAN_WaitConnect>
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	08024500 	.word	0x08024500
 80023dc:	20002e44 	.word	0x20002e44
 80023e0:	20007380 	.word	0x20007380
 80023e4:	08024528 	.word	0x08024528

080023e8 <mcmdMoter1Setting>:

//モータ1のmcmd設定
void mcmdMoter1Setting(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	    mcmd4M1_struct.device.node_type = NODE_MCMD3;
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <mcmdMoter1Setting+0xac>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
	    mcmd4M1_struct.device.node_id = 0;
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <mcmdMoter1Setting+0xac>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
	    mcmd4M1_struct.device.device_num = 0;
 80023f8:	4b26      	ldr	r3, [pc, #152]	; (8002494 <mcmdMoter1Setting+0xac>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	709a      	strb	r2, [r3, #2]

	    mcmd4M1_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002400:	2202      	movs	r2, #2
 8002402:	751a      	strb	r2, [r3, #20]
	    mcmd4M1_struct.ctrl_param.PID_param.kp = 0.055f;
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002406:	4a24      	ldr	r2, [pc, #144]	; (8002498 <mcmdMoter1Setting+0xb0>)
 8002408:	619a      	str	r2, [r3, #24]
	    mcmd4M1_struct.ctrl_param.PID_param.ki = 0.015f;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <mcmdMoter1Setting+0xac>)
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <mcmdMoter1Setting+0xb4>)
 800240e:	61da      	str	r2, [r3, #28]
	    mcmd4M1_struct.ctrl_param.PID_param.kd = 0.02f;
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <mcmdMoter1Setting+0xb8>)
 8002414:	621a      	str	r2, [r3, #32]
	    mcmd4M1_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M1_struct.ctrl_param.accel_limit_size = 2.0f;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M1_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M1_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M1_struct.enc_dir = MCMD_DIR_FW;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002438:	2200      	movs	r2, #0
 800243a:	711a      	strb	r2, [r3, #4]
	    mcmd4M1_struct.rot_dir = MCMD_DIR_FW;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <mcmdMoter1Setting+0xac>)
 800243e:	2200      	movs	r2, #0
 8002440:	715a      	strb	r2, [r3, #5]
	    mcmd4M1_struct.quant_per_unit = 1.0/103500.0f;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <mcmdMoter1Setting+0xbc>)
 8002446:	611a      	str	r2, [r3, #16]

	    mcmd4M1_struct.limit_sw_type = LIMIT_SW_NO;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <mcmdMoter1Setting+0xac>)
 800244a:	2201      	movs	r2, #1
 800244c:	719a      	strb	r2, [r3, #6]
	    mcmd4M1_struct.calib = CALIBRATION_DISABLE;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002450:	2201      	movs	r2, #1
 8002452:	71da      	strb	r2, [r3, #7]
	    mcmd4M1_struct.calib_duty = -0.2f;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <mcmdMoter1Setting+0xc0>)
 8002458:	609a      	str	r2, [r3, #8]
	    mcmd4M1_struct.offset = 0.0f;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <mcmdMoter1Setting+0xac>)
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
	    mcmd4M1_struct.fb_type = MCMD_FB_POS;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002464:	2200      	movs	r2, #0
 8002466:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M1_struct);
 8002468:	480a      	ldr	r0, [pc, #40]	; (8002494 <mcmdMoter1Setting+0xac>)
 800246a:	f7ff f8e3 	bl	8001634 <MCMD_init>
		 osDelay(10);
 800246e:	200a      	movs	r0, #10
 8002470:	f00b fe90 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M1_struct);
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002476:	f7ff f92d 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800247a:	2032      	movs	r0, #50	; 0x32
 800247c:	f00b fe8a 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M1_struct, 0.0f);
 8002480:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80024ac <mcmdMoter1Setting+0xc4>
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <mcmdMoter1Setting+0xac>)
 8002486:	f7ff f951 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M1_struct);
 800248a:	4802      	ldr	r0, [pc, #8]	; (8002494 <mcmdMoter1Setting+0xac>)
 800248c:	f7ff f938 	bl	8001700 <MCMD_Control_Enable>
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20007388 	.word	0x20007388
 8002498:	3d6147ae 	.word	0x3d6147ae
 800249c:	3c75c28f 	.word	0x3c75c28f
 80024a0:	3ca3d70a 	.word	0x3ca3d70a
 80024a4:	37221945 	.word	0x37221945
 80024a8:	be4ccccd 	.word	0xbe4ccccd
 80024ac:	00000000 	.word	0x00000000

080024b0 <mcmdMoter2Setting>:

//モータ2のmcmd設定
void mcmdMoter2Setting(){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	    mcmd4M2_struct.device.node_type = NODE_MCMD3;
 80024b4:	4b29      	ldr	r3, [pc, #164]	; (800255c <mcmdMoter2Setting+0xac>)
 80024b6:	2203      	movs	r2, #3
 80024b8:	701a      	strb	r2, [r3, #0]
	    mcmd4M2_struct.device.node_id = 0;
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <mcmdMoter2Setting+0xac>)
 80024bc:	2200      	movs	r2, #0
 80024be:	705a      	strb	r2, [r3, #1]
	    mcmd4M2_struct.device.device_num = 1;
 80024c0:	4b26      	ldr	r3, [pc, #152]	; (800255c <mcmdMoter2Setting+0xac>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	709a      	strb	r2, [r3, #2]

	    mcmd4M2_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <mcmdMoter2Setting+0xac>)
 80024c8:	2202      	movs	r2, #2
 80024ca:	751a      	strb	r2, [r3, #20]
	    mcmd4M2_struct.ctrl_param.PID_param.kp = 0.055f;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <mcmdMoter2Setting+0xac>)
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <mcmdMoter2Setting+0xb0>)
 80024d0:	619a      	str	r2, [r3, #24]
	    mcmd4M2_struct.ctrl_param.PID_param.ki = 0.015f;
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <mcmdMoter2Setting+0xac>)
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <mcmdMoter2Setting+0xb4>)
 80024d6:	61da      	str	r2, [r3, #28]
	    mcmd4M2_struct.ctrl_param.PID_param.kd = 0.02f;
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <mcmdMoter2Setting+0xac>)
 80024da:	4a23      	ldr	r2, [pc, #140]	; (8002568 <mcmdMoter2Setting+0xb8>)
 80024dc:	621a      	str	r2, [r3, #32]
	    mcmd4M2_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <mcmdMoter2Setting+0xac>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M2_struct.ctrl_param.accel_limit_size = 2.0f;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <mcmdMoter2Setting+0xac>)
 80024e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M2_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <mcmdMoter2Setting+0xac>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M2_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <mcmdMoter2Setting+0xac>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M2_struct.enc_dir = MCMD_DIR_FW;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <mcmdMoter2Setting+0xac>)
 8002500:	2200      	movs	r2, #0
 8002502:	711a      	strb	r2, [r3, #4]
	    mcmd4M2_struct.rot_dir = MCMD_DIR_FW;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <mcmdMoter2Setting+0xac>)
 8002506:	2200      	movs	r2, #0
 8002508:	715a      	strb	r2, [r3, #5]
	    mcmd4M2_struct.quant_per_unit = 1.0/103500.0f;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <mcmdMoter2Setting+0xac>)
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <mcmdMoter2Setting+0xbc>)
 800250e:	611a      	str	r2, [r3, #16]

	    mcmd4M2_struct.limit_sw_type = LIMIT_SW_NO;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <mcmdMoter2Setting+0xac>)
 8002512:	2201      	movs	r2, #1
 8002514:	719a      	strb	r2, [r3, #6]
	    mcmd4M2_struct.calib = CALIBRATION_DISABLE;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <mcmdMoter2Setting+0xac>)
 8002518:	2201      	movs	r2, #1
 800251a:	71da      	strb	r2, [r3, #7]
	    mcmd4M2_struct.calib_duty = -0.2f;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <mcmdMoter2Setting+0xac>)
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <mcmdMoter2Setting+0xc0>)
 8002520:	609a      	str	r2, [r3, #8]
	    mcmd4M2_struct.offset = 0.0f;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <mcmdMoter2Setting+0xac>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
	    mcmd4M2_struct.fb_type = MCMD_FB_POS;
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <mcmdMoter2Setting+0xac>)
 800252c:	2200      	movs	r2, #0
 800252e:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M2_struct);
 8002530:	480a      	ldr	r0, [pc, #40]	; (800255c <mcmdMoter2Setting+0xac>)
 8002532:	f7ff f87f 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002536:	200a      	movs	r0, #10
 8002538:	f00b fe2c 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M2_struct);
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <mcmdMoter2Setting+0xac>)
 800253e:	f7ff f8c9 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f00b fe26 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M2_struct, 0.00f);
 8002548:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002574 <mcmdMoter2Setting+0xc4>
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <mcmdMoter2Setting+0xac>)
 800254e:	f7ff f8ed 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M2_struct);
 8002552:	4802      	ldr	r0, [pc, #8]	; (800255c <mcmdMoter2Setting+0xac>)
 8002554:	f7ff f8d4 	bl	8001700 <MCMD_Control_Enable>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200073c8 	.word	0x200073c8
 8002560:	3d6147ae 	.word	0x3d6147ae
 8002564:	3c75c28f 	.word	0x3c75c28f
 8002568:	3ca3d70a 	.word	0x3ca3d70a
 800256c:	37221945 	.word	0x37221945
 8002570:	be4ccccd 	.word	0xbe4ccccd
 8002574:	00000000 	.word	0x00000000

08002578 <mcmdMoter3Setting>:

void mcmdMoter3Setting(){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	    mcmd4M3_struct.device.node_type = NODE_MCMD3;
 800257c:	4b29      	ldr	r3, [pc, #164]	; (8002624 <mcmdMoter3Setting+0xac>)
 800257e:	2203      	movs	r2, #3
 8002580:	701a      	strb	r2, [r3, #0]
	    mcmd4M3_struct.device.node_id = 2;
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002584:	2202      	movs	r2, #2
 8002586:	705a      	strb	r2, [r3, #1]
	    mcmd4M3_struct.device.device_num = 0;
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <mcmdMoter3Setting+0xac>)
 800258a:	2200      	movs	r2, #0
 800258c:	709a      	strb	r2, [r3, #2]

	    mcmd4M3_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002590:	2202      	movs	r2, #2
 8002592:	751a      	strb	r2, [r3, #20]
	    mcmd4M3_struct.ctrl_param.PID_param.kp = 0.055f;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <mcmdMoter3Setting+0xb0>)
 8002598:	619a      	str	r2, [r3, #24]
	    mcmd4M3_struct.ctrl_param.PID_param.ki = 0.015f;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <mcmdMoter3Setting+0xac>)
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <mcmdMoter3Setting+0xb4>)
 800259e:	61da      	str	r2, [r3, #28]
	    mcmd4M3_struct.ctrl_param.PID_param.kd = 0.02f;
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <mcmdMoter3Setting+0xb8>)
 80025a4:	621a      	str	r2, [r3, #32]
	    mcmd4M3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M3_struct.ctrl_param.accel_limit_size = 2.0f;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M3_struct.enc_dir = MCMD_DIR_FW;
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	711a      	strb	r2, [r3, #4]
	    mcmd4M3_struct.rot_dir = MCMD_DIR_FW;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	715a      	strb	r2, [r3, #5]
	    mcmd4M3_struct.quant_per_unit = 1.0/103500.0f;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <mcmdMoter3Setting+0xbc>)
 80025d6:	611a      	str	r2, [r3, #16]

	    mcmd4M3_struct.limit_sw_type = LIMIT_SW_NO;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025da:	2201      	movs	r2, #1
 80025dc:	719a      	strb	r2, [r3, #6]
	    mcmd4M3_struct.calib = CALIBRATION_DISABLE;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	71da      	strb	r2, [r3, #7]
	    mcmd4M3_struct.calib_duty = -0.2f;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <mcmdMoter3Setting+0xc0>)
 80025e8:	609a      	str	r2, [r3, #8]
	    mcmd4M3_struct.offset = 0.0f;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
	    mcmd4M3_struct.fb_type = MCMD_FB_POS;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M3_struct);
 80025f8:	480a      	ldr	r0, [pc, #40]	; (8002624 <mcmdMoter3Setting+0xac>)
 80025fa:	f7ff f81b 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80025fe:	200a      	movs	r0, #10
 8002600:	f00b fdc8 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M3_struct);
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002606:	f7ff f865 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800260a:	2032      	movs	r0, #50	; 0x32
 800260c:	f00b fdc2 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M3_struct, 0.00f);
 8002610:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800263c <mcmdMoter3Setting+0xc4>
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <mcmdMoter3Setting+0xac>)
 8002616:	f7ff f889 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M3_struct);
 800261a:	4802      	ldr	r0, [pc, #8]	; (8002624 <mcmdMoter3Setting+0xac>)
 800261c:	f7ff f870 	bl	8001700 <MCMD_Control_Enable>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20007408 	.word	0x20007408
 8002628:	3d6147ae 	.word	0x3d6147ae
 800262c:	3c75c28f 	.word	0x3c75c28f
 8002630:	3ca3d70a 	.word	0x3ca3d70a
 8002634:	37221945 	.word	0x37221945
 8002638:	be4ccccd 	.word	0xbe4ccccd
 800263c:	00000000 	.word	0x00000000

08002640 <mcmdMoter4Setting>:

void mcmdMoter4Setting(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	    mcmd4M4_struct.device.node_type = NODE_MCMD3;
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002646:	2203      	movs	r2, #3
 8002648:	701a      	strb	r2, [r3, #0]
	    mcmd4M4_struct.device.node_id =2;
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <mcmdMoter4Setting+0xac>)
 800264c:	2202      	movs	r2, #2
 800264e:	705a      	strb	r2, [r3, #1]
	    mcmd4M4_struct.device.device_num = 1;
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002652:	2201      	movs	r2, #1
 8002654:	709a      	strb	r2, [r3, #2]

	    mcmd4M4_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002658:	2202      	movs	r2, #2
 800265a:	751a      	strb	r2, [r3, #20]
	    mcmd4M4_struct.ctrl_param.PID_param.kp = 0.055f;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <mcmdMoter4Setting+0xac>)
 800265e:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <mcmdMoter4Setting+0xb0>)
 8002660:	619a      	str	r2, [r3, #24]
	    mcmd4M4_struct.ctrl_param.PID_param.ki = 0.015f;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <mcmdMoter4Setting+0xb4>)
 8002666:	61da      	str	r2, [r3, #28]
	    mcmd4M4_struct.ctrl_param.PID_param.kd = 0.02f;
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <mcmdMoter4Setting+0xac>)
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <mcmdMoter4Setting+0xb8>)
 800266c:	621a      	str	r2, [r3, #32]
	    mcmd4M4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M4_struct.ctrl_param.accel_limit_size = 2.0f;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M4_struct.enc_dir = MCMD_DIR_FW;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002690:	2200      	movs	r2, #0
 8002692:	711a      	strb	r2, [r3, #4]
	    mcmd4M4_struct.rot_dir = MCMD_DIR_FW;
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <mcmdMoter4Setting+0xac>)
 8002696:	2200      	movs	r2, #0
 8002698:	715a      	strb	r2, [r3, #5]
	    mcmd4M4_struct.quant_per_unit = 1.0/26850.0f;
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <mcmdMoter4Setting+0xac>)
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <mcmdMoter4Setting+0xbc>)
 800269e:	611a      	str	r2, [r3, #16]

	    mcmd4M4_struct.limit_sw_type = LIMIT_SW_NO;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	719a      	strb	r2, [r3, #6]
	    mcmd4M4_struct.calib = CALIBRATION_DISABLE;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	71da      	strb	r2, [r3, #7]
	    mcmd4M4_struct.calib_duty = -0.2f;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <mcmdMoter4Setting+0xc0>)
 80026b0:	609a      	str	r2, [r3, #8]
	    mcmd4M4_struct.offset = 0.0f;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
	    mcmd4M4_struct.fb_type = MCMD_FB_POS;
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026bc:	2200      	movs	r2, #0
 80026be:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M4_struct);
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026c2:	f7fe ffb7 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80026c6:	200a      	movs	r0, #10
 80026c8:	f00b fd64 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M4_struct);
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026ce:	f7ff f801 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80026d2:	2032      	movs	r0, #50	; 0x32
 80026d4:	f00b fd5e 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);
 80026d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002704 <mcmdMoter4Setting+0xc4>
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026de:	f7ff f825 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M4_struct);
 80026e2:	4802      	ldr	r0, [pc, #8]	; (80026ec <mcmdMoter4Setting+0xac>)
 80026e4:	f7ff f80c 	bl	8001700 <MCMD_Control_Enable>
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20007448 	.word	0x20007448
 80026f0:	3d6147ae 	.word	0x3d6147ae
 80026f4:	3c75c28f 	.word	0x3c75c28f
 80026f8:	3ca3d70a 	.word	0x3ca3d70a
 80026fc:	381c3662 	.word	0x381c3662
 8002700:	be4ccccd 	.word	0xbe4ccccd
 8002704:	00000000 	.word	0x00000000

08002708 <mcmdMoter5Setting>:

void mcmdMoter5Setting(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	    mcmd4M5_struct.device.node_type = NODE_MCMD3;
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800270e:	2203      	movs	r2, #3
 8002710:	701a      	strb	r2, [r3, #0]
	    mcmd4M5_struct.device.node_id =5;
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002714:	2205      	movs	r2, #5
 8002716:	705a      	strb	r2, [r3, #1]
	    mcmd4M5_struct.device.device_num = 0;
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800271a:	2200      	movs	r2, #0
 800271c:	709a      	strb	r2, [r3, #2]

	    mcmd4M5_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002720:	2200      	movs	r2, #0
 8002722:	751a      	strb	r2, [r3, #20]
	    mcmd4M5_struct.ctrl_param.PID_param.kp = 4.5f;
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <mcmdMoter5Setting+0xb4>)
 8002728:	619a      	str	r2, [r3, #24]
	    mcmd4M5_struct.ctrl_param.PID_param.ki = 1.0f;
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800272c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002730:	61da      	str	r2, [r3, #28]
	    mcmd4M5_struct.ctrl_param.PID_param.kd = 0.01f;
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <mcmdMoter5Setting+0xb8>)
 8002736:	621a      	str	r2, [r3, #32]
	    mcmd4M5_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002738:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M5_struct.ctrl_param.accel_limit_size = 2.0f;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002746:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M5_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M5_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M5_struct.enc_dir = MCMD_DIR_BC;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800275a:	2201      	movs	r2, #1
 800275c:	711a      	strb	r2, [r3, #4]
	    mcmd4M5_struct.rot_dir = MCMD_DIR_BC;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002760:	2201      	movs	r2, #1
 8002762:	715a      	strb	r2, [r3, #5]
	    mcmd4M5_struct.quant_per_unit = 1.0/8230.0f;
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <mcmdMoter5Setting+0xbc>)
 8002768:	611a      	str	r2, [r3, #16]

	    mcmd4M5_struct.limit_sw_type = LIMIT_SW_NO;
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800276c:	2201      	movs	r2, #1
 800276e:	719a      	strb	r2, [r3, #6]
	    mcmd4M5_struct.calib = CALIBRATION_DISABLE;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002772:	2201      	movs	r2, #1
 8002774:	71da      	strb	r2, [r3, #7]
	    mcmd4M5_struct.calib_duty = -0.2f;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <mcmdMoter5Setting+0xc0>)
 800277a:	609a      	str	r2, [r3, #8]
	    mcmd4M5_struct.offset = 0.0f;
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
	    mcmd4M5_struct.fb_type = MCMD_FB_POS;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002786:	2200      	movs	r2, #0
 8002788:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M5_struct);
 800278a:	480b      	ldr	r0, [pc, #44]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 800278c:	f7fe ff52 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002790:	200a      	movs	r0, #10
 8002792:	f00b fcff 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M5_struct);
 8002796:	4808      	ldr	r0, [pc, #32]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 8002798:	f7fe ff9c 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800279c:	2032      	movs	r0, #50	; 0x32
 800279e:	f00b fcf9 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M5_struct, 0.00f);
 80027a2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80027cc <mcmdMoter5Setting+0xc4>
 80027a6:	4804      	ldr	r0, [pc, #16]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 80027a8:	f7fe ffc0 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M5_struct);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <mcmdMoter5Setting+0xb0>)
 80027ae:	f7fe ffa7 	bl	8001700 <MCMD_Control_Enable>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20007488 	.word	0x20007488
 80027bc:	40900000 	.word	0x40900000
 80027c0:	3c23d70a 	.word	0x3c23d70a
 80027c4:	38fed167 	.word	0x38fed167
 80027c8:	be4ccccd 	.word	0xbe4ccccd
 80027cc:	00000000 	.word	0x00000000

080027d0 <mcmdMoter6Setting>:

void mcmdMoter6Setting(){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	    mcmd4M6_struct.device.node_type = NODE_MCMD3;
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027d6:	2203      	movs	r2, #3
 80027d8:	701a      	strb	r2, [r3, #0]
	    mcmd4M6_struct.device.node_id =5;
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027dc:	2205      	movs	r2, #5
 80027de:	705a      	strb	r2, [r3, #1]
	    mcmd4M6_struct.device.device_num = 1;
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	709a      	strb	r2, [r3, #2]

	    mcmd4M6_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	751a      	strb	r2, [r3, #20]
	    mcmd4M6_struct.ctrl_param.PID_param.kp = 4.5f;
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <mcmdMoter6Setting+0xb4>)
 80027f0:	619a      	str	r2, [r3, #24]
	    mcmd4M6_struct.ctrl_param.PID_param.ki = 1.0f;
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027f8:	61da      	str	r2, [r3, #28]
	    mcmd4M6_struct.ctrl_param.PID_param.kd = 0.01f;
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <mcmdMoter6Setting+0xb0>)
 80027fc:	4a22      	ldr	r2, [pc, #136]	; (8002888 <mcmdMoter6Setting+0xb8>)
 80027fe:	621a      	str	r2, [r3, #32]
	    mcmd4M6_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M6_struct.ctrl_param.accel_limit_size = 2.0f;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <mcmdMoter6Setting+0xb0>)
 800280a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M6_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M6_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <mcmdMoter6Setting+0xb0>)
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M6_struct.enc_dir = MCMD_DIR_FW;
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002822:	2200      	movs	r2, #0
 8002824:	711a      	strb	r2, [r3, #4]
	    mcmd4M6_struct.rot_dir = MCMD_DIR_FW;
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002828:	2200      	movs	r2, #0
 800282a:	715a      	strb	r2, [r3, #5]
	    mcmd4M6_struct.quant_per_unit = 1.0/8230.0f;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <mcmdMoter6Setting+0xb0>)
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <mcmdMoter6Setting+0xbc>)
 8002830:	611a      	str	r2, [r3, #16]

	    mcmd4M6_struct.limit_sw_type = LIMIT_SW_NO;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002834:	2201      	movs	r2, #1
 8002836:	719a      	strb	r2, [r3, #6]
	    mcmd4M6_struct.calib = CALIBRATION_DISABLE;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <mcmdMoter6Setting+0xb0>)
 800283a:	2201      	movs	r2, #1
 800283c:	71da      	strb	r2, [r3, #7]
	    mcmd4M6_struct.calib_duty = -0.2f;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <mcmdMoter6Setting+0xc0>)
 8002842:	609a      	str	r2, [r3, #8]
	    mcmd4M6_struct.offset = 0.0f;
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
	    mcmd4M6_struct.fb_type = MCMD_FB_POS;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <mcmdMoter6Setting+0xb0>)
 800284e:	2200      	movs	r2, #0
 8002850:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M6_struct);
 8002852:	480b      	ldr	r0, [pc, #44]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002854:	f7fe feee 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002858:	200a      	movs	r0, #10
 800285a:	f00b fc9b 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M6_struct);
 800285e:	4808      	ldr	r0, [pc, #32]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002860:	f7fe ff38 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002864:	2032      	movs	r0, #50	; 0x32
 8002866:	f00b fc95 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M6_struct, 0.00f);
 800286a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002894 <mcmdMoter6Setting+0xc4>
 800286e:	4804      	ldr	r0, [pc, #16]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002870:	f7fe ff5c 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M6_struct);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <mcmdMoter6Setting+0xb0>)
 8002876:	f7fe ff43 	bl	8001700 <MCMD_Control_Enable>
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200074c8 	.word	0x200074c8
 8002884:	40900000 	.word	0x40900000
 8002888:	3c23d70a 	.word	0x3c23d70a
 800288c:	38fed167 	.word	0x38fed167
 8002890:	be4ccccd 	.word	0xbe4ccccd
 8002894:	00000000 	.word	0x00000000

08002898 <mcmdMoter7Setting>:

void mcmdMoter7Setting(){
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	    mcmd4M7_struct.device.node_type = NODE_MCMD3;
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <mcmdMoter7Setting+0xb0>)
 800289e:	2203      	movs	r2, #3
 80028a0:	701a      	strb	r2, [r3, #0]
	    mcmd4M7_struct.device.node_id =3;
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028a4:	2203      	movs	r2, #3
 80028a6:	705a      	strb	r2, [r3, #1]
	    mcmd4M7_struct.device.device_num = 0;
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	709a      	strb	r2, [r3, #2]

	    mcmd4M7_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	751a      	strb	r2, [r3, #20]
	    mcmd4M7_struct.ctrl_param.PID_param.kp = 0.075f;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028b6:	4a25      	ldr	r2, [pc, #148]	; (800294c <mcmdMoter7Setting+0xb4>)
 80028b8:	619a      	str	r2, [r3, #24]
	    mcmd4M7_struct.ctrl_param.PID_param.ki = 0.025f;
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <mcmdMoter7Setting+0xb8>)
 80028be:	61da      	str	r2, [r3, #28]
	    mcmd4M7_struct.ctrl_param.PID_param.kd = 0.01f;
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <mcmdMoter7Setting+0xbc>)
 80028c4:	621a      	str	r2, [r3, #32]
	    mcmd4M7_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M7_struct.ctrl_param.accel_limit_size = 2.0f;
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M7_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M7_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M7_struct.enc_dir = MCMD_DIR_FW;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	711a      	strb	r2, [r3, #4]
	    mcmd4M7_struct.rot_dir = MCMD_DIR_BC;
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	715a      	strb	r2, [r3, #5]
	    mcmd4M7_struct.quant_per_unit = 1.0/1024.0f;
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028f4:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80028f8:	611a      	str	r2, [r3, #16]

	    mcmd4M7_struct.limit_sw_type = LIMIT_SW_NO;
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <mcmdMoter7Setting+0xb0>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	719a      	strb	r2, [r3, #6]
	    mcmd4M7_struct.calib = CALIBRATION_DISABLE;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <mcmdMoter7Setting+0xb0>)
 8002902:	2201      	movs	r2, #1
 8002904:	71da      	strb	r2, [r3, #7]
	    mcmd4M7_struct.calib_duty = -0.2f;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <mcmdMoter7Setting+0xb0>)
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <mcmdMoter7Setting+0xc0>)
 800290a:	609a      	str	r2, [r3, #8]
	    mcmd4M7_struct.offset = 0.0f;
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <mcmdMoter7Setting+0xb0>)
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
	    mcmd4M7_struct.fb_type = MCMD_FB_POS;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <mcmdMoter7Setting+0xb0>)
 8002916:	2200      	movs	r2, #0
 8002918:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M7_struct);
 800291a:	480b      	ldr	r0, [pc, #44]	; (8002948 <mcmdMoter7Setting+0xb0>)
 800291c:	f7fe fe8a 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002920:	200a      	movs	r0, #10
 8002922:	f00b fc37 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M7_struct);
 8002926:	4808      	ldr	r0, [pc, #32]	; (8002948 <mcmdMoter7Setting+0xb0>)
 8002928:	f7fe fed4 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800292c:	2032      	movs	r0, #50	; 0x32
 800292e:	f00b fc31 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M7_struct, 0.00f);
 8002932:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800295c <mcmdMoter7Setting+0xc4>
 8002936:	4804      	ldr	r0, [pc, #16]	; (8002948 <mcmdMoter7Setting+0xb0>)
 8002938:	f7fe fef8 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M7_struct);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <mcmdMoter7Setting+0xb0>)
 800293e:	f7fe fedf 	bl	8001700 <MCMD_Control_Enable>
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20007508 	.word	0x20007508
 800294c:	3d99999a 	.word	0x3d99999a
 8002950:	3ccccccd 	.word	0x3ccccccd
 8002954:	3c23d70a 	.word	0x3c23d70a
 8002958:	be4ccccd 	.word	0xbe4ccccd
 800295c:	00000000 	.word	0x00000000

08002960 <mcmdMoter8Setting>:

void mcmdMoter8Setting(){
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	    mcmd4M8_struct.device.node_type = NODE_MCMD3;
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]
	    mcmd4M8_struct.device.node_id =3;
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 800296c:	2203      	movs	r2, #3
 800296e:	705a      	strb	r2, [r3, #1]
	    mcmd4M8_struct.device.device_num = 1;
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002972:	2201      	movs	r2, #1
 8002974:	709a      	strb	r2, [r3, #2]

	    mcmd4M8_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002978:	2202      	movs	r2, #2
 800297a:	751a      	strb	r2, [r3, #20]
	    mcmd4M8_struct.ctrl_param.PID_param.kp = 0.075f;
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <mcmdMoter8Setting+0xb4>)
 8002980:	619a      	str	r2, [r3, #24]
	    mcmd4M8_struct.ctrl_param.PID_param.ki = 0.025f;
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <mcmdMoter8Setting+0xb8>)
 8002986:	61da      	str	r2, [r3, #28]
	    mcmd4M8_struct.ctrl_param.PID_param.kd = 0.01f;
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 800298a:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <mcmdMoter8Setting+0xbc>)
 800298c:	621a      	str	r2, [r3, #32]
	    mcmd4M8_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M8_struct.ctrl_param.accel_limit_size = 2.0f;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M8_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M8_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M8_struct.enc_dir = MCMD_DIR_FW;
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	711a      	strb	r2, [r3, #4]
	    mcmd4M8_struct.rot_dir = MCMD_DIR_BC;
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	715a      	strb	r2, [r3, #5]
	    mcmd4M8_struct.quant_per_unit = 1.0/1024.0f;
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029bc:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80029c0:	611a      	str	r2, [r3, #16]

	    mcmd4M8_struct.limit_sw_type = LIMIT_SW_NO;
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	719a      	strb	r2, [r3, #6]
	    mcmd4M8_struct.calib = CALIBRATION_DISABLE;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	71da      	strb	r2, [r3, #7]
	    mcmd4M8_struct.calib_duty = -0.2f;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <mcmdMoter8Setting+0xc0>)
 80029d2:	609a      	str	r2, [r3, #8]
	    mcmd4M8_struct.offset = 0.0f;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
	    mcmd4M8_struct.fb_type = MCMD_FB_POS;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M8_struct);
 80029e2:	480b      	ldr	r0, [pc, #44]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029e4:	f7fe fe26 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80029e8:	200a      	movs	r0, #10
 80029ea:	f00b fbd3 	bl	800e194 <osDelay>
		 MCMD_Calib(&mcmd4M8_struct);
 80029ee:	4808      	ldr	r0, [pc, #32]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 80029f0:	f7fe fe70 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80029f4:	2032      	movs	r0, #50	; 0x32
 80029f6:	f00b fbcd 	bl	800e194 <osDelay>
		 MCMD_SetTarget(&mcmd4M8_struct, 0.00f);
 80029fa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002a24 <mcmdMoter8Setting+0xc4>
 80029fe:	4804      	ldr	r0, [pc, #16]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002a00:	f7fe fe94 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M8_struct);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <mcmdMoter8Setting+0xb0>)
 8002a06:	f7fe fe7b 	bl	8001700 <MCMD_Control_Enable>
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20007548 	.word	0x20007548
 8002a14:	3d99999a 	.word	0x3d99999a
 8002a18:	3ccccccd 	.word	0x3ccccccd
 8002a1c:	3c23d70a 	.word	0x3c23d70a
 8002a20:	be4ccccd 	.word	0xbe4ccccd
 8002a24:	00000000 	.word	0x00000000

08002a28 <servo1Setting>:
		 MCMD_SetTarget(&mcmd4Mt_struct, 0.00f);
		 MCMD_Control_Enable(&mcmd4Mt_struct);
}

//サーボ基盤設定
void servo1Setting(){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	servo_device1.node_type = NODE_SERVO;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <servo1Setting+0x44>)
 8002a2e:	2204      	movs	r2, #4
 8002a30:	701a      	strb	r2, [r3, #0]
	servo_device1.node_id = 0;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <servo1Setting+0x44>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	705a      	strb	r2, [r3, #1]
	servo_device1.device_num = 0;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <servo1Setting+0x44>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	709a      	strb	r2, [r3, #2]

	servo_param1.angle_range=270.0f;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <servo1Setting+0x48>)
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <servo1Setting+0x4c>)
 8002a42:	60da      	str	r2, [r3, #12]
	servo_param1.angle_offset=0.0f;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <servo1Setting+0x48>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
	servo_param1.pulse_width_max=2.4f;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <servo1Setting+0x48>)
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <servo1Setting+0x50>)
 8002a50:	605a      	str	r2, [r3, #4]
	servo_param1.pulse_width_min=0.5f;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <servo1Setting+0x48>)
 8002a54:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002a58:	601a      	str	r2, [r3, #0]
	servo_param1.pwm_frequency=50;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <servo1Setting+0x48>)
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <servo1Setting+0x54>)
 8002a5e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002a60:	2032      	movs	r0, #50	; 0x32
 8002a62:	f00b fb97 	bl	800e194 <osDelay>
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000759c 	.word	0x2000759c
 8002a70:	20007588 	.word	0x20007588
 8002a74:	43870000 	.word	0x43870000
 8002a78:	4019999a 	.word	0x4019999a
 8002a7c:	42480000 	.word	0x42480000

08002a80 <servo2Setting>:

void servo2Setting(){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	servo_device2.node_type = NODE_SERVO;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <servo2Setting+0x44>)
 8002a86:	2204      	movs	r2, #4
 8002a88:	701a      	strb	r2, [r3, #0]
	servo_device2.node_id = 0;
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <servo2Setting+0x44>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	705a      	strb	r2, [r3, #1]
	servo_device2.device_num = 1;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <servo2Setting+0x44>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	709a      	strb	r2, [r3, #2]

	servo_param2.angle_range=270.0f;
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <servo2Setting+0x48>)
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <servo2Setting+0x4c>)
 8002a9a:	60da      	str	r2, [r3, #12]
	servo_param2.angle_offset=0.0f;
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <servo2Setting+0x48>)
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
	servo_param2.pulse_width_max=2.4f;
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <servo2Setting+0x48>)
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <servo2Setting+0x50>)
 8002aa8:	605a      	str	r2, [r3, #4]
	servo_param2.pulse_width_min=0.5f;
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <servo2Setting+0x48>)
 8002aac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002ab0:	601a      	str	r2, [r3, #0]
	servo_param2.pwm_frequency=50;
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <servo2Setting+0x48>)
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <servo2Setting+0x54>)
 8002ab6:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002ab8:	2032      	movs	r0, #50	; 0x32
 8002aba:	f00b fb6b 	bl	800e194 <osDelay>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200075b4 	.word	0x200075b4
 8002ac8:	200075a0 	.word	0x200075a0
 8002acc:	43870000 	.word	0x43870000
 8002ad0:	4019999a 	.word	0x4019999a
 8002ad4:	42480000 	.word	0x42480000

08002ad8 <servo3Setting>:

void servo3Setting(){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	servo_device3.node_type = NODE_SERVO;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <servo3Setting+0x44>)
 8002ade:	2204      	movs	r2, #4
 8002ae0:	701a      	strb	r2, [r3, #0]
	servo_device3.node_id = 1;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <servo3Setting+0x44>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	705a      	strb	r2, [r3, #1]
	servo_device3.device_num = 0;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <servo3Setting+0x44>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	709a      	strb	r2, [r3, #2]

	servo_param3.angle_range=270.0f;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <servo3Setting+0x48>)
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <servo3Setting+0x4c>)
 8002af2:	60da      	str	r2, [r3, #12]
	servo_param3.angle_offset=0.0f;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <servo3Setting+0x48>)
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
	servo_param3.pulse_width_max=2.4f;
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <servo3Setting+0x48>)
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <servo3Setting+0x50>)
 8002b00:	605a      	str	r2, [r3, #4]
	servo_param3.pulse_width_min=0.5f;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <servo3Setting+0x48>)
 8002b04:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002b08:	601a      	str	r2, [r3, #0]
	servo_param3.pwm_frequency=50;
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <servo3Setting+0x48>)
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <servo3Setting+0x54>)
 8002b0e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002b10:	2032      	movs	r0, #50	; 0x32
 8002b12:	f00b fb3f 	bl	800e194 <osDelay>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200075cc 	.word	0x200075cc
 8002b20:	200075b8 	.word	0x200075b8
 8002b24:	43870000 	.word	0x43870000
 8002b28:	4019999a 	.word	0x4019999a
 8002b2c:	42480000 	.word	0x42480000

08002b30 <servo4Setting>:
void servo4Setting(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	servo_device4.node_type = NODE_SERVO;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <servo4Setting+0x44>)
 8002b36:	2204      	movs	r2, #4
 8002b38:	701a      	strb	r2, [r3, #0]
	servo_device4.node_id = 1;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <servo4Setting+0x44>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
	servo_device4.device_num = 1;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <servo4Setting+0x44>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	709a      	strb	r2, [r3, #2]

	servo_param4.angle_range=270.0f;
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <servo4Setting+0x48>)
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <servo4Setting+0x4c>)
 8002b4a:	60da      	str	r2, [r3, #12]
	servo_param4.angle_offset=0.0f;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <servo4Setting+0x48>)
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
	servo_param4.pulse_width_max=2.4f;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <servo4Setting+0x48>)
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <servo4Setting+0x50>)
 8002b58:	605a      	str	r2, [r3, #4]
	servo_param4.pulse_width_min=0.5f;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <servo4Setting+0x48>)
 8002b5c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002b60:	601a      	str	r2, [r3, #0]
	servo_param4.pwm_frequency=50;
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <servo4Setting+0x48>)
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <servo4Setting+0x54>)
 8002b66:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002b68:	2032      	movs	r0, #50	; 0x32
 8002b6a:	f00b fb13 	bl	800e194 <osDelay>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200075e4 	.word	0x200075e4
 8002b78:	200075d0 	.word	0x200075d0
 8002b7c:	43870000 	.word	0x43870000
 8002b80:	4019999a 	.word	0x4019999a
 8002b84:	42480000 	.word	0x42480000

08002b88 <servo5Setting>:
void servo5Setting(){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	servo_device5.node_type = NODE_SERVO;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <servo5Setting+0x44>)
 8002b8e:	2204      	movs	r2, #4
 8002b90:	701a      	strb	r2, [r3, #0]
	servo_device5.node_id = 1;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <servo5Setting+0x44>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	705a      	strb	r2, [r3, #1]
	servo_device5.device_num = 2;
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <servo5Setting+0x44>)
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	709a      	strb	r2, [r3, #2]

	servo_param5.angle_range=270.0f;
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <servo5Setting+0x48>)
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <servo5Setting+0x4c>)
 8002ba2:	60da      	str	r2, [r3, #12]
	servo_param5.angle_offset=0.0f;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <servo5Setting+0x48>)
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
	servo_param5.pulse_width_max=2.4f;
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <servo5Setting+0x48>)
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <servo5Setting+0x50>)
 8002bb0:	605a      	str	r2, [r3, #4]
	servo_param5.pulse_width_min=0.5f;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <servo5Setting+0x48>)
 8002bb4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002bb8:	601a      	str	r2, [r3, #0]
	servo_param5.pwm_frequency=50;
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <servo5Setting+0x48>)
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <servo5Setting+0x54>)
 8002bbe:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002bc0:	2032      	movs	r0, #50	; 0x32
 8002bc2:	f00b fae7 	bl	800e194 <osDelay>
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200075fc 	.word	0x200075fc
 8002bd0:	200075e8 	.word	0x200075e8
 8002bd4:	43870000 	.word	0x43870000
 8002bd8:	4019999a 	.word	0x4019999a
 8002bdc:	42480000 	.word	0x42480000

08002be0 <servo6Setting>:
void servo6Setting(){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	servo_device6.node_type = NODE_SERVO;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <servo6Setting+0x44>)
 8002be6:	2204      	movs	r2, #4
 8002be8:	701a      	strb	r2, [r3, #0]
	servo_device6.node_id = 1;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <servo6Setting+0x44>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	705a      	strb	r2, [r3, #1]
	servo_device6.device_num = 3;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <servo6Setting+0x44>)
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	709a      	strb	r2, [r3, #2]

	servo_param6.angle_range=270.0f;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <servo6Setting+0x48>)
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <servo6Setting+0x4c>)
 8002bfa:	60da      	str	r2, [r3, #12]
	servo_param6.angle_offset=0.0f;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <servo6Setting+0x48>)
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
	servo_param6.pulse_width_max=2.4f;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <servo6Setting+0x48>)
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <servo6Setting+0x50>)
 8002c08:	605a      	str	r2, [r3, #4]
	servo_param6.pulse_width_min=0.5f;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <servo6Setting+0x48>)
 8002c0c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002c10:	601a      	str	r2, [r3, #0]
	servo_param6.pwm_frequency=50;
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <servo6Setting+0x48>)
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <servo6Setting+0x54>)
 8002c16:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002c18:	2032      	movs	r0, #50	; 0x32
 8002c1a:	f00b fabb 	bl	800e194 <osDelay>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20007614 	.word	0x20007614
 8002c28:	20007600 	.word	0x20007600
 8002c2c:	43870000 	.word	0x43870000
 8002c30:	4019999a 	.word	0x4019999a
 8002c34:	42480000 	.word	0x42480000

08002c38 <airSetting>:

//エアシリ基盤設定
void airSetting(){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR;
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <airSetting+0x44>)
 8002c40:	2205      	movs	r2, #5
 8002c42:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0;
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <airSetting+0x44>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]

	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	e00c      	b.n	8002c6a <airSetting+0x32>
		air_device.device_num = i; //
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <airSetting+0x44>)
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	7093      	strb	r3, [r2, #2]
		AirCylinder_Init(&air_device, AIR_OFF);
 8002c56:	2100      	movs	r1, #0
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <airSetting+0x44>)
 8002c5a:	f7fe feb4 	bl	80019c6 <AirCylinder_Init>
		HAL_Delay(10);  // このdelayは必要
 8002c5e:	200a      	movs	r0, #10
 8002c60:	f001 fbc2 	bl	80043e8 <HAL_Delay>
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3301      	adds	r3, #1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9ef      	bls.n	8002c50 <airSetting+0x18>
	 }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20007618 	.word	0x20007618

08002c80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c84:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <MX_FREERTOS_Init+0x48>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	4810      	ldr	r0, [pc, #64]	; (8002ccc <MX_FREERTOS_Init+0x4c>)
 8002c8a:	f00b f9dd 	bl	800e048 <osThreadNew>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <MX_FREERTOS_Init+0x50>)
 8002c92:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <MX_FREERTOS_Init+0x54>)
 8002c96:	2100      	movs	r1, #0
 8002c98:	480f      	ldr	r0, [pc, #60]	; (8002cd8 <MX_FREERTOS_Init+0x58>)
 8002c9a:	f00b f9d5 	bl	800e048 <osThreadNew>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <MX_FREERTOS_Init+0x5c>)
 8002ca2:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <MX_FREERTOS_Init+0x60>)
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	480e      	ldr	r0, [pc, #56]	; (8002ce4 <MX_FREERTOS_Init+0x64>)
 8002caa:	f00b f9cd 	bl	800e048 <osThreadNew>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <MX_FREERTOS_Init+0x68>)
 8002cb2:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <MX_FREERTOS_Init+0x6c>)
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <MX_FREERTOS_Init+0x70>)
 8002cba:	f00b f9c5 	bl	800e048 <osThreadNew>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <MX_FREERTOS_Init+0x74>)
 8002cc2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08024750 	.word	0x08024750
 8002ccc:	080030d1 	.word	0x080030d1
 8002cd0:	20007624 	.word	0x20007624
 8002cd4:	08024774 	.word	0x08024774
 8002cd8:	08003561 	.word	0x08003561
 8002cdc:	2000a564 	.word	0x2000a564
 8002ce0:	08024798 	.word	0x08024798
 8002ce4:	080035a9 	.word	0x080035a9
 8002ce8:	2000adc4 	.word	0x2000adc4
 8002cec:	080247bc 	.word	0x080247bc
 8002cf0:	080035b9 	.word	0x080035b9
 8002cf4:	2000b624 	.word	0x2000b624

08002cf8 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 8002cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 8002d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d10:	f00b fa40 	bl	800e194 <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d20:	1884      	adds	r4, r0, r2
 8002d22:	eb41 0503 	adc.w	r5, r1, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d2c:	eb14 0802 	adds.w	r8, r4, r2
 8002d30:	eb45 0903 	adc.w	r9, r5, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	e9c3 8900 	strd	r8, r9, [r3]
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002d44 <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <subscription_callback+0x58>)
 8002d5c:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	ed93 7b06 	vldr	d7, [r3, #24]
 8002d66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <subscription_callback+0x58>)
 8002d6c:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	ed93 7b08 	vldr	d7, [r3, #32]
 8002d76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <subscription_callback+0x58>)
 8002d7c:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002d86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <subscription_callback+0x58>)
 8002d8c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	2000be88 	.word	0x2000be88

08002da0 <print_int>:

//micro-rosでのデバッグ用
void print_int(int num){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 8002da8:	4811      	ldr	r0, [pc, #68]	; (8002df0 <print_int+0x50>)
 8002daa:	f014 fb6f 	bl	801748c <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 8002dae:	f107 0008 	add.w	r0, r7, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <print_int+0x54>)
 8002db6:	210c      	movs	r1, #12
 8002db8:	f01d ff70 	bl	8020c9c <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	220c      	movs	r2, #12
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480a      	ldr	r0, [pc, #40]	; (8002df0 <print_int+0x50>)
 8002dc6:	f014 fbbf 	bl	8017548 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4908      	ldr	r1, [pc, #32]	; (8002df0 <print_int+0x50>)
 8002dce:	480a      	ldr	r0, [pc, #40]	; (8002df8 <print_int+0x58>)
 8002dd0:	f010 ffd6 	bl	8013d80 <rcl_publish>
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <print_int+0x48>
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	f240 21c2 	movw	r1, #706	; 0x2c2
 8002de2:	4806      	ldr	r0, [pc, #24]	; (8002dfc <print_int+0x5c>)
 8002de4:	f01d fe3e 	bl	8020a64 <iprintf>
}
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20007328 	.word	0x20007328
 8002df4:	0802454c 	.word	0x0802454c
 8002df8:	2000761c 	.word	0x2000761c
 8002dfc:	08024550 	.word	0x08024550

08002e00 <manipsub_callback>:

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002e12:	4613      	mov	r3, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ffc3 	bl	8002da0 <print_int>
	  print_int(msub->top_base_arm);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e20:	4613      	mov	r3, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffbc 	bl	8002da0 <print_int>
	  print_int(msub->top_base_hand);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ffb5 	bl	8002da0 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f000 f834 	bl	8002eac <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f000 f89d 	bl	8002f8c <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f000 f876 	bl	8002f4c <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f000 f8af 	bl	8002fcc <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f000 f8c8 	bl	800300c <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f000 f8e1 	bl	800304c <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f000 f8fa 	bl	800308c <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <manipsub_callback+0xa8>)
 8002e9c:	f002 ffe1 	bl	8005e62 <HAL_GPIO_TogglePin>
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40020400 	.word	0x40020400

08002eac <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002eba:	491c      	ldr	r1, [pc, #112]	; (8002f2c <work_arm_deployer+0x80>)
 8002ebc:	481c      	ldr	r0, [pc, #112]	; (8002f30 <work_arm_deployer+0x84>)
 8002ebe:	f7fe fd25 	bl	800190c <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8002ec2:	2064      	movs	r0, #100	; 0x64
 8002ec4:	f00b f966 	bl	800e194 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8002ec8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002f34 <work_arm_deployer+0x88>
 8002ecc:	4818      	ldr	r0, [pc, #96]	; (8002f30 <work_arm_deployer+0x84>)
 8002ece:	f7fe fd5f 	bl	8001990 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002ed2:	4919      	ldr	r1, [pc, #100]	; (8002f38 <work_arm_deployer+0x8c>)
 8002ed4:	4819      	ldr	r0, [pc, #100]	; (8002f3c <work_arm_deployer+0x90>)
 8002ed6:	f7fe fd19 	bl	800190c <ServoDriver_Init>
		osDelay(100);
 8002eda:	2064      	movs	r0, #100	; 0x64
 8002edc:	f00b f95a 	bl	800e194 <osDelay>
		ServoDriver_SendValue(&servo_device2, 145.0f);
 8002ee0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002f40 <work_arm_deployer+0x94>
 8002ee4:	4815      	ldr	r0, [pc, #84]	; (8002f3c <work_arm_deployer+0x90>)
 8002ee6:	f7fe fd53 	bl	8001990 <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device1, 135.0f);
		ServoDriver_Init(&servo_device2, &servo_param2);
		osDelay(100);
		ServoDriver_SendValue(&servo_device2, 60.0f);
	}
}
 8002eea:	e01a      	b.n	8002f22 <work_arm_deployer+0x76>
	}else if(state == 1){
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d117      	bne.n	8002f22 <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <work_arm_deployer+0x80>)
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <work_arm_deployer+0x84>)
 8002ef6:	f7fe fd09 	bl	800190c <ServoDriver_Init>
		osDelay(100);
 8002efa:	2064      	movs	r0, #100	; 0x64
 8002efc:	f00b f94a 	bl	800e194 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8002f00:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002f44 <work_arm_deployer+0x98>
 8002f04:	480a      	ldr	r0, [pc, #40]	; (8002f30 <work_arm_deployer+0x84>)
 8002f06:	f7fe fd43 	bl	8001990 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002f0a:	490b      	ldr	r1, [pc, #44]	; (8002f38 <work_arm_deployer+0x8c>)
 8002f0c:	480b      	ldr	r0, [pc, #44]	; (8002f3c <work_arm_deployer+0x90>)
 8002f0e:	f7fe fcfd 	bl	800190c <ServoDriver_Init>
		osDelay(100);
 8002f12:	2064      	movs	r0, #100	; 0x64
 8002f14:	f00b f93e 	bl	800e194 <osDelay>
		ServoDriver_SendValue(&servo_device2, 60.0f);
 8002f18:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002f48 <work_arm_deployer+0x9c>
 8002f1c:	4807      	ldr	r0, [pc, #28]	; (8002f3c <work_arm_deployer+0x90>)
 8002f1e:	f7fe fd37 	bl	8001990 <ServoDriver_SendValue>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20007588 	.word	0x20007588
 8002f30:	2000759c 	.word	0x2000759c
 8002f34:	42340000 	.word	0x42340000
 8002f38:	200075a0 	.word	0x200075a0
 8002f3c:	200075b4 	.word	0x200075b4
 8002f40:	43110000 	.word	0x43110000
 8002f44:	43070000 	.word	0x43070000
 8002f48:	42700000 	.word	0x42700000

08002f4c <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <work_hand_setter+0x3c>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002f60:	2100      	movs	r1, #0
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <work_hand_setter+0x3c>)
 8002f64:	f7fe fd4a 	bl	80019fc <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002f68:	e009      	b.n	8002f7e <work_hand_setter+0x32>
	  }else if(state == 1){
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <work_hand_setter+0x32>
		  air_device.device_num=1;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <work_hand_setter+0x3c>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002f76:	2101      	movs	r1, #1
 8002f78:	4803      	ldr	r0, [pc, #12]	; (8002f88 <work_hand_setter+0x3c>)
 8002f7a:	f7fe fd3f 	bl	80019fc <AirCylinder_SendOutput>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20007618 	.word	0x20007618

08002f8c <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <work_arm_setter+0x3c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <work_arm_setter+0x3c>)
 8002fa4:	f7fe fd2a 	bl	80019fc <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002fa8:	e009      	b.n	8002fbe <work_arm_setter+0x32>
	  }else if(state == 1){
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d106      	bne.n	8002fbe <work_arm_setter+0x32>
		  air_device.device_num=0;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <work_arm_setter+0x3c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <work_arm_setter+0x3c>)
 8002fba:	f7fe fd1f 	bl	80019fc <AirCylinder_SendOutput>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20007618 	.word	0x20007618

08002fcc <base1_arm_setter>:

	}
}
//base1 high
//base2 low
void base1_arm_setter(int state){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8002fda:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003000 <base1_arm_setter+0x34>
 8002fde:	4809      	ldr	r0, [pc, #36]	; (8003004 <base1_arm_setter+0x38>)
 8002fe0:	f7fe fba4 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.23f);
	}
}
 8002fe4:	e007      	b.n	8002ff6 <base1_arm_setter+0x2a>
	}else if(state == 1){
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d104      	bne.n	8002ff6 <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.23f);
 8002fec:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003008 <base1_arm_setter+0x3c>
 8002ff0:	4804      	ldr	r0, [pc, #16]	; (8003004 <base1_arm_setter+0x38>)
 8002ff2:	f7fe fb9b 	bl	800172c <MCMD_SetTarget>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00000000 	.word	0x00000000
 8003004:	20007488 	.word	0x20007488
 8003008:	3e6b851f 	.word	0x3e6b851f

0800300c <base1_hand_setter>:

void base1_hand_setter(int state){
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

	if(state == 0){
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <base1_hand_setter+0x1e>
		air_device.device_num=3;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <base1_hand_setter+0x3c>)
 800301c:	2203      	movs	r2, #3
 800301e:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8003020:	2100      	movs	r1, #0
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <base1_hand_setter+0x3c>)
 8003024:	f7fe fcea 	bl	80019fc <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8003028:	e009      	b.n	800303e <base1_hand_setter+0x32>
		}else if(state == 1){
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <base1_hand_setter+0x32>
			air_device.device_num=3;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <base1_hand_setter+0x3c>)
 8003032:	2203      	movs	r2, #3
 8003034:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8003036:	2101      	movs	r1, #1
 8003038:	4803      	ldr	r0, [pc, #12]	; (8003048 <base1_hand_setter+0x3c>)
 800303a:	f7fe fcdf 	bl	80019fc <AirCylinder_SendOutput>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20007618 	.word	0x20007618

0800304c <base2_arm_setter>:

void base2_arm_setter(int state){
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 800305a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003080 <base2_arm_setter+0x34>
 800305e:	4809      	ldr	r0, [pc, #36]	; (8003084 <base2_arm_setter+0x38>)
 8003060:	f7fe fb64 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.12f);
	}
}
 8003064:	e007      	b.n	8003076 <base2_arm_setter+0x2a>
	}else if(state == 1){
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d104      	bne.n	8003076 <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.12f);
 800306c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003088 <base2_arm_setter+0x3c>
 8003070:	4804      	ldr	r0, [pc, #16]	; (8003084 <base2_arm_setter+0x38>)
 8003072:	f7fe fb5b 	bl	800172c <MCMD_SetTarget>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	00000000 	.word	0x00000000
 8003084:	200074c8 	.word	0x200074c8
 8003088:	3df5c28f 	.word	0x3df5c28f

0800308c <base2_hand_setter>:

void base2_hand_setter(int state){
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d107      	bne.n	80030aa <base2_hand_setter+0x1e>
		air_device.device_num=2;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <base2_hand_setter+0x3c>)
 800309c:	2202      	movs	r2, #2
 800309e:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 80030a0:	2100      	movs	r1, #0
 80030a2:	4809      	ldr	r0, [pc, #36]	; (80030c8 <base2_hand_setter+0x3c>)
 80030a4:	f7fe fcaa 	bl	80019fc <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 80030a8:	e009      	b.n	80030be <base2_hand_setter+0x32>
		}else if(state == 1){
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d106      	bne.n	80030be <base2_hand_setter+0x32>
			air_device.device_num=2;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <base2_hand_setter+0x3c>)
 80030b2:	2202      	movs	r2, #2
 80030b4:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 80030b6:	2101      	movs	r1, #1
 80030b8:	4803      	ldr	r0, [pc, #12]	; (80030c8 <base2_hand_setter+0x3c>)
 80030ba:	f7fe fc9f 	bl	80019fc <AirCylinder_SendOutput>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20007618 	.word	0x20007618
 80030cc:	00000000 	.word	0x00000000

080030d0 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b0f0      	sub	sp, #448	; 0x1c0
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80030da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030de:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80030e0:	f00d fd3c 	bl	8010b5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 80030e4:	4bd2      	ldr	r3, [pc, #840]	; (8003430 <StartDefaultTask+0x360>)
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	4bd2      	ldr	r3, [pc, #840]	; (8003434 <StartDefaultTask+0x364>)
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4bd2      	ldr	r3, [pc, #840]	; (8003438 <StartDefaultTask+0x368>)
 80030ee:	4ad3      	ldr	r2, [pc, #844]	; (800343c <StartDefaultTask+0x36c>)
 80030f0:	49d3      	ldr	r1, [pc, #844]	; (8003440 <StartDefaultTask+0x370>)
 80030f2:	2001      	movs	r0, #1
 80030f4:	f012 fbfe 	bl	80158f4 <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80030f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80030fc:	4618      	mov	r0, r3
 80030fe:	f012 f88f 	bl	8015220 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8003102:	4bd0      	ldr	r3, [pc, #832]	; (8003444 <StartDefaultTask+0x374>)
 8003104:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8003108:	4bcf      	ldr	r3, [pc, #828]	; (8003448 <StartDefaultTask+0x378>)
 800310a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.reallocate = microros_reallocate;
 800310e:	4bcf      	ldr	r3, [pc, #828]	; (800344c <StartDefaultTask+0x37c>)
 8003110:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8003114:	4bce      	ldr	r3, [pc, #824]	; (8003450 <StartDefaultTask+0x380>)
 8003116:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800311a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800311e:	4618      	mov	r0, r3
 8003120:	f012 f88c 	bl	801523c <rcutils_set_default_allocator>
 8003124:	4603      	mov	r3, r0
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8003130:	f240 314f 	movw	r1, #847	; 0x34f
 8003134:	48c7      	ldr	r0, [pc, #796]	; (8003454 <StartDefaultTask+0x384>)
 8003136:	f01d fc95 	bl	8020a64 <iprintf>
  	}

  	osDelay(100);
 800313a:	2064      	movs	r0, #100	; 0x64
 800313c:	f00b f82a 	bl	800e194 <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8003140:	4bc5      	ldr	r3, [pc, #788]	; (8003458 <StartDefaultTask+0x388>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6898      	ldr	r0, [r3, #8]
 8003146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800314a:	2202      	movs	r2, #2
 800314c:	2100      	movs	r1, #0
 800314e:	f01d fcf7 	bl	8020b40 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8003152:	f010 fa95 	bl	8013680 <rcl_get_zero_initialized_init_options>
 8003156:	4603      	mov	r3, r0
 8003158:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 800315c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003160:	4618      	mov	r0, r3
 8003162:	f012 f889 	bl	8015278 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8003166:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800316a:	4618      	mov	r0, r3
 800316c:	f010 fb90 	bl	8013890 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8003170:	f010 fe4c 	bl	8013e0c <rcl_get_zero_initialized_service>
 8003174:	4603      	mov	r3, r0
 8003176:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	publisher = rcl_get_zero_initialized_publisher();
 800317a:	f010 fd33 	bl	8013be4 <rcl_get_zero_initialized_publisher>
 800317e:	4603      	mov	r3, r0
 8003180:	4ab6      	ldr	r2, [pc, #728]	; (800345c <StartDefaultTask+0x38c>)
 8003182:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8003184:	f010 ff66 	bl	8014054 <rcl_get_zero_initialized_subscription>
 8003188:	4603      	mov	r3, r0
 800318a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 800318e:	f010 ff61 	bl	8014054 <rcl_get_zero_initialized_subscription>
 8003192:	4603      	mov	r3, r0
 8003194:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8003198:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800319c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031a0:	4618      	mov	r0, r3
 80031a2:	f011 fbe7 	bl	8014974 <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 80031a6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80031aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031ae:	4618      	mov	r0, r3
 80031b0:	f010 fce8 	bl	8013b84 <rcl_node_get_default_options>

  	osDelay(100);
 80031b4:	2064      	movs	r0, #100	; 0x64
 80031b6:	f00a ffed 	bl	800e194 <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 80031ba:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80031be:	466a      	mov	r2, sp
 80031c0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80031c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80031cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d2:	4620      	mov	r0, r4
 80031d4:	f010 fa56 	bl	8013684 <rcl_init_options_init>
 80031d8:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 80031dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <StartDefaultTask+0x122>
 80031e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031e8:	f240 3163 	movw	r1, #867	; 0x363
 80031ec:	489c      	ldr	r0, [pc, #624]	; (8003460 <StartDefaultTask+0x390>)
 80031ee:	f01d fc39 	bl	8020a64 <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 80031f2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f010 fb41 	bl	8013880 <rcl_init_options_set_domain_id>
 80031fe:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8003202:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <StartDefaultTask+0x148>
 800320a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800320e:	f44f 7159 	mov.w	r1, #868	; 0x364
 8003212:	4893      	ldr	r0, [pc, #588]	; (8003460 <StartDefaultTask+0x390>)
 8003214:	f01d fc26 	bl	8020a64 <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8003218:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800321c:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8003220:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	f011 fed0 	bl	8014fd0 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8003230:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8003234:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8003238:	f107 0320 	add.w	r3, r7, #32
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	4a88      	ldr	r2, [pc, #544]	; (8003464 <StartDefaultTask+0x394>)
 8003242:	4989      	ldr	r1, [pc, #548]	; (8003468 <StartDefaultTask+0x398>)
 8003244:	f011 fefa 	bl	801503c <rclc_node_init_with_options>
 8003248:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 800324c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <StartDefaultTask+0x192>
 8003254:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003258:	f240 3166 	movw	r1, #870	; 0x366
 800325c:	4880      	ldr	r0, [pc, #512]	; (8003460 <StartDefaultTask+0x390>)
 800325e:	f01d fc01 	bl	8020a64 <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8003262:	f00e f9db 	bl	801161c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8003266:	4602      	mov	r2, r0
 8003268:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800326c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8003270:	4b7e      	ldr	r3, [pc, #504]	; (800346c <StartDefaultTask+0x39c>)
 8003272:	f011 ff59 	bl	8015128 <rclc_service_init_default>
 8003276:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 800327a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <StartDefaultTask+0x1c0>
 8003282:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8003286:	f240 3167 	movw	r1, #871	; 0x367
 800328a:	4875      	ldr	r0, [pc, #468]	; (8003460 <StartDefaultTask+0x390>)
 800328c:	f01d fbea 	bl	8020a64 <iprintf>

	RCCHECK(rclc_publisher_init_default(
 8003290:	f014 f9ea 	bl	8017668 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8003294:	4602      	mov	r2, r0
 8003296:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800329a:	4b75      	ldr	r3, [pc, #468]	; (8003470 <StartDefaultTask+0x3a0>)
 800329c:	486f      	ldr	r0, [pc, #444]	; (800345c <StartDefaultTask+0x38c>)
 800329e:	f011 ff09 	bl	80150b4 <rclc_publisher_init_default>
 80032a2:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 80032a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <StartDefaultTask+0x1ec>
 80032ae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80032b2:	f240 3169 	movw	r1, #873	; 0x369
 80032b6:	486a      	ldr	r0, [pc, #424]	; (8003460 <StartDefaultTask+0x390>)
 80032b8:	f01d fbd4 	bl	8020a64 <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 80032bc:	f00e fade 	bl	801187c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80032c6:	4b6b      	ldr	r3, [pc, #428]	; (8003474 <StartDefaultTask+0x3a4>)
 80032c8:	486b      	ldr	r0, [pc, #428]	; (8003478 <StartDefaultTask+0x3a8>)
 80032ca:	f011 fef3 	bl	80150b4 <rclc_publisher_init_default>
 80032ce:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 80032d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <StartDefaultTask+0x218>
 80032da:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80032de:	f240 316f 	movw	r1, #879	; 0x36f
 80032e2:	485f      	ldr	r0, [pc, #380]	; (8003460 <StartDefaultTask+0x390>)
 80032e4:	f01d fbbe 	bl	8020a64 <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 80032e8:	f00e fab0 	bl	801184c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80032f2:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80032f6:	4b61      	ldr	r3, [pc, #388]	; (800347c <StartDefaultTask+0x3ac>)
 80032f8:	f011 ff50 	bl	801519c <rclc_subscription_init_default>
 80032fc:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8003300:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <StartDefaultTask+0x246>
 8003308:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800330c:	f240 3175 	movw	r1, #885	; 0x375
 8003310:	4853      	ldr	r0, [pc, #332]	; (8003460 <StartDefaultTask+0x390>)
 8003312:	f01d fba7 	bl	8020a64 <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 8003316:	f00e fcbf 	bl	8011c98 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 800331a:	4602      	mov	r2, r0
 800331c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8003320:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <StartDefaultTask+0x3b0>)
 8003326:	f011 ff39 	bl	801519c <rclc_subscription_init_default>
 800332a:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 800332e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <StartDefaultTask+0x274>
 8003336:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800333a:	f240 317b 	movw	r1, #891	; 0x37b
 800333e:	4848      	ldr	r0, [pc, #288]	; (8003460 <StartDefaultTask+0x390>)
 8003340:	f01d fb90 	bl	8020a64 <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 8003344:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003348:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800334c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003350:	2203      	movs	r2, #3
 8003352:	f011 fb19 	bl	8014988 <rclc_executor_init>
 8003356:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 800335a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <StartDefaultTask+0x2a0>
 8003362:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003366:	f240 3181 	movw	r1, #897	; 0x381
 800336a:	483d      	ldr	r0, [pc, #244]	; (8003460 <StartDefaultTask+0x390>)
 800336c:	f01d fb7a 	bl	8020a64 <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8003370:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003374:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003378:	4b42      	ldr	r3, [pc, #264]	; (8003484 <StartDefaultTask+0x3b4>)
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4b42      	ldr	r3, [pc, #264]	; (8003488 <StartDefaultTask+0x3b8>)
 800337e:	4a43      	ldr	r2, [pc, #268]	; (800348c <StartDefaultTask+0x3bc>)
 8003380:	f011 fbbc 	bl	8014afc <rclc_executor_add_service>
 8003384:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8003388:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <StartDefaultTask+0x2ce>
 8003390:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003394:	f240 3183 	movw	r1, #899	; 0x383
 8003398:	4831      	ldr	r0, [pc, #196]	; (8003460 <StartDefaultTask+0x390>)
 800339a:	f01d fb63 	bl	8020a64 <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 800339e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80033a2:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80033a6:	2300      	movs	r3, #0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <StartDefaultTask+0x3c0>)
 80033ac:	4a39      	ldr	r2, [pc, #228]	; (8003494 <StartDefaultTask+0x3c4>)
 80033ae:	f011 fb67 	bl	8014a80 <rclc_executor_add_subscription>
 80033b2:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 80033b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <StartDefaultTask+0x2fc>
 80033be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80033c2:	f44f 7161 	mov.w	r1, #900	; 0x384
 80033c6:	4826      	ldr	r0, [pc, #152]	; (8003460 <StartDefaultTask+0x390>)
 80033c8:	f01d fb4c 	bl	8020a64 <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 80033cc:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80033d0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <StartDefaultTask+0x3c8>)
 80033da:	4a30      	ldr	r2, [pc, #192]	; (800349c <StartDefaultTask+0x3cc>)
 80033dc:	f011 fb50 	bl	8014a80 <rclc_executor_add_subscription>
 80033e0:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 80033e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <StartDefaultTask+0x32a>
 80033ec:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80033f0:	f240 3187 	movw	r1, #903	; 0x387
 80033f4:	481a      	ldr	r0, [pc, #104]	; (8003460 <StartDefaultTask+0x390>)
 80033f6:	f01d fb35 	bl	8020a64 <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 80033fa:	2064      	movs	r0, #100	; 0x64
 80033fc:	f00a feca 	bl	800e194 <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8003400:	4827      	ldr	r0, [pc, #156]	; (80034a0 <StartDefaultTask+0x3d0>)
 8003402:	f014 f843 	bl	801748c <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8003406:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800340a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800340e:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <StartDefaultTask+0x3d4>)
 8003410:	461c      	mov	r4, r3
 8003412:	4615      	mov	r5, r2
 8003414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	2214      	movs	r2, #20
 8003422:	4619      	mov	r1, r3
 8003424:	481e      	ldr	r0, [pc, #120]	; (80034a0 <StartDefaultTask+0x3d0>)
 8003426:	f014 f88f 	bl	8017548 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 800342a:	2200      	movs	r2, #0
 800342c:	e03c      	b.n	80034a8 <StartDefaultTask+0x3d8>
 800342e:	bf00      	nop
 8003430:	08002259 	.word	0x08002259
 8003434:	080021f9 	.word	0x080021f9
 8003438:	080021d9 	.word	0x080021d9
 800343c:	080021ad 	.word	0x080021ad
 8003440:	2000bf90 	.word	0x2000bf90
 8003444:	0800385d 	.word	0x0800385d
 8003448:	080038a1 	.word	0x080038a1
 800344c:	080038d9 	.word	0x080038d9
 8003450:	08003945 	.word	0x08003945
 8003454:	0802457c 	.word	0x0802457c
 8003458:	200009d8 	.word	0x200009d8
 800345c:	2000761c 	.word	0x2000761c
 8003460:	080245a4 	.word	0x080245a4
 8003464:	080245d0 	.word	0x080245d0
 8003468:	080245d4 	.word	0x080245d4
 800346c:	080245dc 	.word	0x080245dc
 8003470:	080245ec 	.word	0x080245ec
 8003474:	080245fc 	.word	0x080245fc
 8003478:	20007620 	.word	0x20007620
 800347c:	08024608 	.word	0x08024608
 8003480:	08024618 	.word	0x08024618
 8003484:	08002cf9 	.word	0x08002cf9
 8003488:	200072a8 	.word	0x200072a8
 800348c:	20007290 	.word	0x20007290
 8003490:	08002d45 	.word	0x08002d45
 8003494:	200072b0 	.word	0x200072b0
 8003498:	08002e01 	.word	0x08002e01
 800349c:	200072e0 	.word	0x200072e0
 80034a0:	20007328 	.word	0x20007328
 80034a4:	08024640 	.word	0x08024640
 80034a8:	4927      	ldr	r1, [pc, #156]	; (8003548 <StartDefaultTask+0x478>)
 80034aa:	4828      	ldr	r0, [pc, #160]	; (800354c <StartDefaultTask+0x47c>)
 80034ac:	f010 fc68 	bl	8013d80 <rcl_publish>
 80034b0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80034b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d006      	beq.n	80034ca <StartDefaultTask+0x3fa>
 80034bc:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80034c0:	f240 3191 	movw	r1, #913	; 0x391
 80034c4:	4822      	ldr	r0, [pc, #136]	; (8003550 <StartDefaultTask+0x480>)
 80034c6:	f01d facd 	bl	8020a64 <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	4821      	ldr	r0, [pc, #132]	; (8003554 <StartDefaultTask+0x484>)
 80034d0:	f002 fcae 	bl	8005e30 <HAL_GPIO_WritePin>

    //CANの設定を実行
	canSetting();
 80034d4:	f7fe ff5e 	bl	8002394 <canSetting>
//	mcmdMoter_Test_Setting();
	mcmdMoter1Setting();
 80034d8:	f7fe ff86 	bl	80023e8 <mcmdMoter1Setting>
	mcmdMoter2Setting();
 80034dc:	f7fe ffe8 	bl	80024b0 <mcmdMoter2Setting>
	mcmdMoter3Setting();
 80034e0:	f7ff f84a 	bl	8002578 <mcmdMoter3Setting>
	mcmdMoter4Setting();
 80034e4:	f7ff f8ac 	bl	8002640 <mcmdMoter4Setting>
	mcmdMoter5Setting();
 80034e8:	f7ff f90e 	bl	8002708 <mcmdMoter5Setting>
	mcmdMoter6Setting();
 80034ec:	f7ff f970 	bl	80027d0 <mcmdMoter6Setting>
	mcmdMoter7Setting();
 80034f0:	f7ff f9d2 	bl	8002898 <mcmdMoter7Setting>
	mcmdMoter8Setting();
 80034f4:	f7ff fa34 	bl	8002960 <mcmdMoter8Setting>
	servo1Setting();
 80034f8:	f7ff fa96 	bl	8002a28 <servo1Setting>
	servo2Setting();
 80034fc:	f7ff fac0 	bl	8002a80 <servo2Setting>
	servo3Setting();
 8003500:	f7ff faea 	bl	8002ad8 <servo3Setting>
	servo4Setting();
 8003504:	f7ff fb14 	bl	8002b30 <servo4Setting>
	servo5Setting();
 8003508:	f7ff fb3e 	bl	8002b88 <servo5Setting>
	servo6Setting();
 800350c:	f7ff fb68 	bl	8002be0 <servo6Setting>
	airSetting();
 8003510:	f7ff fb92 	bl	8002c38 <airSetting>

	printf("All Setting Finished\r\n");
 8003514:	4810      	ldr	r0, [pc, #64]	; (8003558 <StartDefaultTask+0x488>)
 8003516:	f01d fb0b 	bl	8020b30 <puts>
	finishCANsetting = true;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <StartDefaultTask+0x48c>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8003520:	2064      	movs	r0, #100	; 0x64
 8003522:	f00a fe37 	bl	800e194 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8003526:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800352a:	a305      	add	r3, pc, #20	; (adr r3, 8003540 <StartDefaultTask+0x470>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	4608      	mov	r0, r1
 8003532:	f011 fd13 	bl	8014f5c <rclc_executor_spin_some>
//	  RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト

	  osDelay(10);
 8003536:	200a      	movs	r0, #10
 8003538:	f00a fe2c 	bl	800e194 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800353c:	e7f3      	b.n	8003526 <StartDefaultTask+0x456>
 800353e:	bf00      	nop
 8003540:	05f5e100 	.word	0x05f5e100
 8003544:	00000000 	.word	0x00000000
 8003548:	20007328 	.word	0x20007328
 800354c:	2000761c 	.word	0x2000761c
 8003550:	08024550 	.word	0x08024550
 8003554:	40020400 	.word	0x40020400
 8003558:	08024628 	.word	0x08024628
 800355c:	2000be84 	.word	0x2000be84

08003560 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <StartSysCheckTask+0x40>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <StartSysCheckTask+0x38>
		  if(!finishCheck){
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <StartSysCheckTask+0x44>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <StartSysCheckTask+0x38>
			  osDelay(1000);//このdelayは必要？
 800357e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003582:	f00a fe07 	bl	800e194 <osDelay>
//			  mcmdMotorCecker(&mcmd4Mt_struct,MCMD_CTRL_DUTY,0.2f,5000,0.0f);
//			  base_hand_deployer(0);
//			  base1_arm_setter(1);
//			  osDelay(10000);
//			  base2_arm_setter(1);
			  base1_hand_setter(1);
 8003586:	2001      	movs	r0, #1
 8003588:	f7ff fd40 	bl	800300c <base1_hand_setter>
			  base2_hand_setter(1);
 800358c:	2001      	movs	r0, #1
 800358e:	f7ff fd7d 	bl	800308c <base2_hand_setter>
			  finishCheck = true;
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <StartSysCheckTask+0x44>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 8003598:	200a      	movs	r0, #10
 800359a:	f00a fdfb 	bl	800e194 <osDelay>
	  if(finishCANsetting){
 800359e:	e7e3      	b.n	8003568 <StartSysCheckTask+0x8>
 80035a0:	2000be84 	.word	0x2000be84
 80035a4:	2000be98 	.word	0x2000be98

080035a8 <StartMotorRunTask>:
	MCMD_SetTarget(&mcmd4M3_struct,dutyLimmiter(cmd_motor[2]));
	MCMD_SetTarget(&mcmd4M4_struct,dutyLimmiter(cmd_motor[3]));
}
/* USER CODE END Header_StartMotorRunTask */
void StartMotorRunTask(void *argument)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //motorRun();

    osDelay(10);
 80035b0:	200a      	movs	r0, #10
 80035b2:	f00a fdef 	bl	800e194 <osDelay>
 80035b6:	e7fb      	b.n	80035b0 <StartMotorRunTask+0x8>

080035b8 <StartEncorderTask>:
int64_t count1;
int64_t count2;
float quant_per_unit = 1.0/4096.0f;
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

//	  enc.encfontright = Get_MCMD_Feedback(&(mcmd4M1_struct.device)).value;
//	  enc.encfrontleft = Get_MCMD_Feedback(&(mcmd4M2_struct.device)).value;
//	  enc.encbackright = Get_MCMD_Feedback(&(mcmd4M3_struct.device)).value;
//	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
	  enc.enclx = Get_MCMD_Feedback(&(mcmd4M7_struct.device)).value;;
 80035c0:	f107 0308 	add.w	r3, r7, #8
 80035c4:	4911      	ldr	r1, [pc, #68]	; (800360c <StartEncorderTask+0x54>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe f8c8 	bl	800175c <Get_MCMD_Feedback>
 80035cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <StartEncorderTask+0x58>)
 80035d6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	  enc.encly = Get_MCMD_Feedback(&(mcmd4M8_struct.device)).value;;
 80035da:	f107 0310 	add.w	r3, r7, #16
 80035de:	490d      	ldr	r1, [pc, #52]	; (8003614 <StartEncorderTask+0x5c>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe f8bb 	bl	800175c <Get_MCMD_Feedback>
 80035e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <StartEncorderTask+0x58>)
 80035f0:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	  enc.encadditional = 0.0;
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <StartEncorderTask+0x58>)
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
//	  printf("base2 %f \r\n",base2);

//	  printf("enc1: %d\r\n",(int)(count1*quant_per_unit));
//	  printf("enc2: %d\r\n",(int)(count2*quant_per_unit));

    osDelay(1000);
 8003602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003606:	f00a fdc5 	bl	800e194 <osDelay>
	  enc.enclx = Get_MCMD_Feedback(&(mcmd4M7_struct.device)).value;;
 800360a:	e7d9      	b.n	80035c0 <StartEncorderTask+0x8>
 800360c:	20007508 	.word	0x20007508
 8003610:	20007338 	.word	0x20007338
 8003614:	20007548 	.word	0x20007548

08003618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	60da      	str	r2, [r3, #12]
 800362c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <MX_GPIO_Init+0xd8>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <MX_GPIO_Init+0xd8>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <MX_GPIO_Init+0xd8>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <MX_GPIO_Init+0xd8>)
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <MX_GPIO_Init+0xd8>)
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <MX_GPIO_Init+0xd8>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_GPIO_Init+0xd8>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <MX_GPIO_Init+0xd8>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_GPIO_Init+0xd8>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <MX_GPIO_Init+0xdc>)
 80036c6:	f002 fbb3 	bl	8005e30 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80036ca:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80036ce:	61fb      	str	r3, [r7, #28]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d0:	2301      	movs	r3, #1
 80036d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036dc:	f107 031c 	add.w	r3, r7, #28
 80036e0:	4619      	mov	r1, r3
 80036e2:	4804      	ldr	r0, [pc, #16]	; (80036f4 <MX_GPIO_Init+0xdc>)
 80036e4:	f002 f9f8 	bl	8005ad8 <HAL_GPIO_Init>

}
 80036e8:	bf00      	nop
 80036ea:	3730      	adds	r7, #48	; 0x30
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020400 	.word	0x40020400

080036f8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8003702:	1df9      	adds	r1, r7, #7
 8003704:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003708:	2201      	movs	r2, #1
 800370a:	4804      	ldr	r0, [pc, #16]	; (800371c <__io_putchar+0x24>)
 800370c:	f005 fc5c 	bl	8008fc8 <HAL_UART_Transmit>
    return ch;
 8003710:	79fb      	ldrb	r3, [r7, #7]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	2000bf90 	.word	0x2000bf90

08003720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003724:	f000 fe33 	bl	800438e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003728:	f000 f814 	bl	8003754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800372c:	f7ff ff74 	bl	8003618 <MX_GPIO_Init>
  MX_DMA_Init();
 8003730:	f7fe fd16 	bl	8002160 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003734:	f000 fd02 	bl	800413c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003738:	f000 fbd6 	bl	8003ee8 <MX_TIM1_Init>
  MX_CAN1_Init();
 800373c:	f7fe fa2a 	bl	8001b94 <MX_CAN1_Init>
  MX_TIM8_Init();
 8003740:	f000 fc2c 	bl	8003f9c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003744:	f00a fc16 	bl	800df74 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003748:	f7ff fa9a 	bl	8002c80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800374c:	f00a fc46 	bl	800dfdc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003750:	e7fe      	b.n	8003750 <main+0x30>
	...

08003754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b094      	sub	sp, #80	; 0x50
 8003758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800375a:	f107 031c 	add.w	r3, r7, #28
 800375e:	2234      	movs	r2, #52	; 0x34
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f01d fc2a 	bl	8020fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003768:	f107 0308 	add.w	r3, r7, #8
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <SystemClock_Config+0xd8>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <SystemClock_Config+0xd8>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	6413      	str	r3, [r2, #64]	; 0x40
 8003784:	4b29      	ldr	r3, [pc, #164]	; (800382c <SystemClock_Config+0xd8>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <SystemClock_Config+0xdc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003798:	4a25      	ldr	r2, [pc, #148]	; (8003830 <SystemClock_Config+0xdc>)
 800379a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <SystemClock_Config+0xdc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b6:	2302      	movs	r3, #2
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037c0:	2304      	movs	r3, #4
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80037c4:	2360      	movs	r3, #96	; 0x60
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037c8:	2302      	movs	r3, #2
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037cc:	2304      	movs	r3, #4
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037d0:	2302      	movs	r3, #2
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037d4:	f107 031c 	add.w	r3, r7, #28
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 fe65 	bl	80074a8 <HAL_RCC_OscConfig>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037e4:	f000 f835 	bl	8003852 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80037e8:	f003 fe0e 	bl	8007408 <HAL_PWREx_EnableOverDrive>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80037f2:	f000 f82e 	bl	8003852 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f6:	230f      	movs	r3, #15
 80037f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037fa:	2302      	movs	r3, #2
 80037fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800380c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	2103      	movs	r1, #3
 8003814:	4618      	mov	r0, r3
 8003816:	f004 f8f5 	bl	8007a04 <HAL_RCC_ClockConfig>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003820:	f000 f817 	bl	8003852 <Error_Handler>
  }
}
 8003824:	bf00      	nop
 8003826:	3750      	adds	r7, #80	; 0x50
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	40007000 	.word	0x40007000

08003834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d101      	bne.n	800384a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003846:	f000 fdaf 	bl	80043a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003856:	b672      	cpsid	i
}
 8003858:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800385a:	e7fe      	b.n	800385a <Error_Handler+0x8>

0800385c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <microros_allocate+0x3c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <microros_allocate+0x3c>)
 8003874:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <microros_allocate+0x40>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <microros_allocate+0x40>)
 8003884:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fa16 	bl	8001cb8 <pvPortMallocMicroROS>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000be9c 	.word	0x2000be9c
 800389c:	2000bea0 	.word	0x2000bea0

080038a0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00c      	beq.n	80038ca <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fe fb29 	bl	8001f08 <getBlockSize>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4a06      	ldr	r2, [pc, #24]	; (80038d4 <microros_deallocate+0x34>)
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <microros_deallocate+0x34>)
 80038c2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe fac1 	bl	8001e4c <vPortFreeMicroROS>
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	2000bea0 	.word	0x2000bea0

080038d8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80038e4:	4b15      	ldr	r3, [pc, #84]	; (800393c <microros_reallocate+0x64>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <microros_reallocate+0x64>)
 80038f2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <microros_reallocate+0x68>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4413      	add	r3, r2
 80038fe:	461a      	mov	r2, r3
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <microros_reallocate+0x68>)
 8003902:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800390a:	68b8      	ldr	r0, [r7, #8]
 800390c:	f7fe f9d4 	bl	8001cb8 <pvPortMallocMicroROS>
 8003910:	4603      	mov	r3, r0
 8003912:	e00e      	b.n	8003932 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7fe faf7 	bl	8001f08 <getBlockSize>
 800391a:	4603      	mov	r3, r0
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <microros_reallocate+0x68>)
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	461a      	mov	r2, r3
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <microros_reallocate+0x68>)
 8003926:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7fe fb0a 	bl	8001f44 <pvPortReallocMicroROS>
 8003930:	4603      	mov	r3, r0
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000be9c 	.word	0x2000be9c
 8003940:	2000bea0 	.word	0x2000bea0

08003944 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <microros_zero_allocate+0x48>)
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	4413      	add	r3, r2
 800395e:	461a      	mov	r2, r3
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <microros_zero_allocate+0x48>)
 8003962:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	4a08      	ldr	r2, [pc, #32]	; (8003990 <microros_zero_allocate+0x4c>)
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	4413      	add	r3, r2
 8003972:	461a      	mov	r2, r3
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <microros_zero_allocate+0x4c>)
 8003976:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7fe fb0f 	bl	8001f9e <pvPortCallocMicroROS>
 8003980:	4603      	mov	r3, r0
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	2000be9c 	.word	0x2000be9c
 8003990:	2000bea0 	.word	0x2000bea0
 8003994:	00000000 	.word	0x00000000

08003998 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80039aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039ae:	a320      	add	r3, pc, #128	; (adr r3, 8003a30 <UTILS_NanosecondsToTimespec+0x98>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fc fe68 	bl	8000688 <__aeabi_ldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80039c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039c6:	a31a      	add	r3, pc, #104	; (adr r3, 8003a30 <UTILS_NanosecondsToTimespec+0x98>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f7fc fe5c 	bl	8000688 <__aeabi_ldivmod>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da20      	bge.n	8003a1e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <UTILS_NanosecondsToTimespec+0x90>)
 80039e2:	fb82 1203 	smull	r1, r2, r2, r3
 80039e6:	1712      	asrs	r2, r2, #28
 80039e8:	17db      	asrs	r3, r3, #31
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	17c8      	asrs	r0, r1, #31
 80039fa:	460c      	mov	r4, r1
 80039fc:	4605      	mov	r5, r0
 80039fe:	ebb2 0804 	subs.w	r8, r2, r4
 8003a02:	eb63 0905 	sbc.w	r9, r3, r5
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4906      	ldr	r1, [pc, #24]	; (8003a2c <UTILS_NanosecondsToTimespec+0x94>)
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
    }
}
 8003a1e:	bf00      	nop
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a28:	44b82fa1 	.word	0x44b82fa1
 8003a2c:	3b9aca00 	.word	0x3b9aca00
 8003a30:	3b9aca00 	.word	0x3b9aca00
 8003a34:	00000000 	.word	0x00000000

08003a38 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b08e      	sub	sp, #56	; 0x38
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24
 8003a42:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003a44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f00b fe96 	bl	800f790 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	17da      	asrs	r2, r3, #31
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	61fa      	str	r2, [r7, #28]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	69b9      	ldr	r1, [r7, #24]
 8003a76:	000b      	movs	r3, r1
 8003a78:	2200      	movs	r2, #0
 8003a7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2200      	movs	r2, #0
 8003a82:	461c      	mov	r4, r3
 8003a84:	4615      	mov	r5, r2
 8003a86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a8a:	1911      	adds	r1, r2, r4
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	416b      	adcs	r3, r5
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a96:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003a9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	f04f 0500 	mov.w	r5, #0
 8003aaa:	015d      	lsls	r5, r3, #5
 8003aac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003ab0:	0154      	lsls	r4, r2, #5
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	462b      	mov	r3, r5
 8003ab6:	ebb2 0800 	subs.w	r8, r2, r0
 8003aba:	eb63 0901 	sbc.w	r9, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003aca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003ace:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003ad2:	4690      	mov	r8, r2
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	eb18 0a00 	adds.w	sl, r8, r0
 8003ada:	eb49 0b01 	adc.w	fp, r9, r1
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003aea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003af2:	ebb2 040a 	subs.w	r4, r2, sl
 8003af6:	603c      	str	r4, [r7, #0]
 8003af8:	eb63 030b 	sbc.w	r3, r3, fp
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b02:	4623      	mov	r3, r4
 8003b04:	181b      	adds	r3, r3, r0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	462b      	mov	r3, r5
 8003b0a:	eb41 0303 	adc.w	r3, r1, r3
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b16:	f7ff ff3f 	bl	8003998 <UTILS_NanosecondsToTimespec>

    return 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3738      	adds	r7, #56	; 0x38
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b50:	6453      	str	r3, [r2, #68]	; 0x44
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	210f      	movs	r1, #15
 8003b62:	f06f 0001 	mvn.w	r0, #1
 8003b66:	f001 fb77 	bl	8005258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_InitTick+0xe4>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	4a33      	ldr	r2, [pc, #204]	; (8003c5c <HAL_InitTick+0xe4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6413      	str	r3, [r2, #64]	; 0x40
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_InitTick+0xe4>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ba0:	f107 0210 	add.w	r2, r7, #16
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f004 f950 	bl	8007e50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003bba:	f004 f921 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 8003bbe:	6378      	str	r0, [r7, #52]	; 0x34
 8003bc0:	e004      	b.n	8003bcc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003bc2:	f004 f91d 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_InitTick+0xe8>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	0c9b      	lsrs	r3, r3, #18
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_InitTick+0xec>)
 8003bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_InitTick+0xec>)
 8003be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003be8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_InitTick+0xec>)
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_InitTick+0xec>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_InitTick+0xec>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_InitTick+0xec>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003c02:	4818      	ldr	r0, [pc, #96]	; (8003c64 <HAL_InitTick+0xec>)
 8003c04:	f004 fd7e 	bl	8008704 <HAL_TIM_Base_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11b      	bne.n	8003c4e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003c16:	4813      	ldr	r0, [pc, #76]	; (8003c64 <HAL_InitTick+0xec>)
 8003c18:	f004 fdd6 	bl	80087c8 <HAL_TIM_Base_Start_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d111      	bne.n	8003c4e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c2a:	201c      	movs	r0, #28
 8003c2c:	f001 fb30 	bl	8005290 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b0f      	cmp	r3, #15
 8003c34:	d808      	bhi.n	8003c48 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003c36:	2200      	movs	r2, #0
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	201c      	movs	r0, #28
 8003c3c:	f001 fb0c 	bl	8005258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_InitTick+0xf0>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e002      	b.n	8003c4e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3738      	adds	r7, #56	; 0x38
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	431bde83 	.word	0x431bde83
 8003c64:	2000bea4 	.word	0x2000bea4
 8003c68:	20000008 	.word	0x20000008

08003c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c70:	e7fe      	b.n	8003c70 <NMI_Handler+0x4>

08003c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c76:	e7fe      	b.n	8003c76 <HardFault_Handler+0x4>

08003c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c7c:	e7fe      	b.n	8003c7c <MemManage_Handler+0x4>

08003c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <BusFault_Handler+0x4>

08003c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <UsageFault_Handler+0x4>

08003c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA1_Stream1_IRQHandler+0x10>)
 8003c9e:	f001 fca5 	bl	80055ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000c018 	.word	0x2000c018

08003cac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <DMA1_Stream3_IRQHandler+0x10>)
 8003cb2:	f001 fc9b 	bl	80055ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000c078 	.word	0x2000c078

08003cc0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <CAN1_TX_IRQHandler+0x10>)
 8003cc6:	f001 f81c 	bl	8004d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20002e44 	.word	0x20002e44

08003cd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <CAN1_RX0_IRQHandler+0x10>)
 8003cda:	f001 f812 	bl	8004d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20002e44 	.word	0x20002e44

08003ce8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <CAN1_RX1_IRQHandler+0x10>)
 8003cee:	f001 f808 	bl	8004d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20002e44 	.word	0x20002e44

08003cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <TIM2_IRQHandler+0x10>)
 8003d02:	f004 fe7f 	bl	8008a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	2000bea4 	.word	0x2000bea4

08003d10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <USART3_IRQHandler+0x10>)
 8003d16:	f005 fb2d 	bl	8009374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2000bf90 	.word	0x2000bf90

08003d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <OTG_FS_IRQHandler+0x10>)
 8003d2a:	f002 f9fa 	bl	8006122 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20011f04 	.word	0x20011f04

08003d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return 1;
 8003d3c:	2301      	movs	r3, #1
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_kill>:

int _kill(int pid, int sig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d52:	f01d f9cb 	bl	80210ec <__errno>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2216      	movs	r2, #22
 8003d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_exit>:

void _exit (int status)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe7 	bl	8003d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d7a:	e7fe      	b.n	8003d7a <_exit+0x12>

08003d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e00a      	b.n	8003da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d8e:	f3af 8000 	nop.w
 8003d92:	4601      	mov	r1, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	60ba      	str	r2, [r7, #8]
 8003d9a:	b2ca      	uxtb	r2, r1
 8003d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	dbf0      	blt.n	8003d8e <_read+0x12>
  }

  return len;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e009      	b.n	8003ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60ba      	str	r2, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fc91 	bl	80036f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	dbf1      	blt.n	8003dc8 <_write+0x12>
  }
  return len;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_close>:

int _close(int file)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e16:	605a      	str	r2, [r3, #4]
  return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_isatty>:

int _isatty(int file)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <_sbrk+0x5c>)
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <_sbrk+0x60>)
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <_sbrk+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <_sbrk+0x64>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <_sbrk+0x68>)
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <_sbrk+0x64>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e88:	f01d f930 	bl	80210ec <__errno>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	220c      	movs	r2, #12
 8003e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e96:	e009      	b.n	8003eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <_sbrk+0x64>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <_sbrk+0x64>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <_sbrk+0x64>)
 8003ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20080000 	.word	0x20080000
 8003eb8:	00000400 	.word	0x00000400
 8003ebc:	2000bef4 	.word	0x2000bef4
 8003ec0:	20017280 	.word	0x20017280

08003ec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <SystemInit+0x20>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <SystemInit+0x20>)
 8003ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f01d f860 	bl	8020fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efc:	463b      	mov	r3, r7
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f06:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <MX_TIM1_Init+0xb0>)
 8003f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f32:	2303      	movs	r3, #3
 8003f34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	480d      	ldr	r0, [pc, #52]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f5e:	f004 fcab 	bl	80088b8 <HAL_TIM_Encoder_Init>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003f68:	f7ff fc73 	bl	8003852 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f70:	2300      	movs	r3, #0
 8003f72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f78:	463b      	mov	r3, r7
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4805      	ldr	r0, [pc, #20]	; (8003f94 <MX_TIM1_Init+0xac>)
 8003f7e:	f004 ff29 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003f88:	f7ff fc63 	bl	8003852 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f8c:	bf00      	nop
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	2000bef8 	.word	0x2000bef8
 8003f98:	40010000 	.word	0x40010000

08003f9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fa2:	f107 030c 	add.w	r3, r7, #12
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f01d f806 	bl	8020fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003fba:	4b23      	ldr	r3, [pc, #140]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <MX_TIM8_Init+0xb0>)
 8003fbe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <MX_TIM8_Init+0xac>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ffe:	2301      	movs	r3, #1
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004002:	2300      	movs	r3, #0
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	4619      	mov	r1, r3
 8004010:	480d      	ldr	r0, [pc, #52]	; (8004048 <MX_TIM8_Init+0xac>)
 8004012:	f004 fc51 	bl	80088b8 <HAL_TIM_Encoder_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800401c:	f7ff fc19 	bl	8003852 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004024:	2300      	movs	r3, #0
 8004026:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800402c:	463b      	mov	r3, r7
 800402e:	4619      	mov	r1, r3
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <MX_TIM8_Init+0xac>)
 8004032:	f004 fecf 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800403c:	f7ff fc09 	bl	8003852 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004040:	bf00      	nop
 8004042:	3730      	adds	r7, #48	; 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000bf44 	.word	0x2000bf44
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08c      	sub	sp, #48	; 0x30
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <HAL_TIM_Encoder_MspInit+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d129      	bne.n	80040c6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6453      	str	r3, [r2, #68]	; 0x44
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800408a:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a27      	ldr	r2, [pc, #156]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 8004090:	f043 0310 	orr.w	r3, r3, #16
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80040a2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80040a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040b8:	f107 031c 	add.w	r3, r7, #28
 80040bc:	4619      	mov	r1, r3
 80040be:	481c      	ldr	r0, [pc, #112]	; (8004130 <HAL_TIM_Encoder_MspInit+0xe0>)
 80040c0:	f001 fd0a 	bl	8005ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80040c4:	e02c      	b.n	8004120 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(tim_encoderHandle->Instance==TIM8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_TIM_Encoder_MspInit+0xe4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d127      	bne.n	8004120 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	6453      	str	r3, [r2, #68]	; 0x44
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040e8:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	4a0f      	ldr	r2, [pc, #60]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6313      	str	r3, [r2, #48]	; 0x30
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_TIM_Encoder_MspInit+0xdc>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004100:	23c0      	movs	r3, #192	; 0xc0
 8004102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410c:	2300      	movs	r3, #0
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004110:	2303      	movs	r3, #3
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004114:	f107 031c 	add.w	r3, r7, #28
 8004118:	4619      	mov	r1, r3
 800411a:	4807      	ldr	r0, [pc, #28]	; (8004138 <HAL_TIM_Encoder_MspInit+0xe8>)
 800411c:	f001 fcdc 	bl	8005ad8 <HAL_GPIO_Init>
}
 8004120:	bf00      	nop
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40010000 	.word	0x40010000
 800412c:	40023800 	.word	0x40023800
 8004130:	40021000 	.word	0x40021000
 8004134:	40010400 	.word	0x40010400
 8004138:	40020800 	.word	0x40020800

0800413c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <MX_USART3_UART_Init+0x5c>)
 8004144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800414c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004156:	2200      	movs	r2, #0
 8004158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <MX_USART3_UART_Init+0x58>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004162:	220c      	movs	r2, #12
 8004164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <MX_USART3_UART_Init+0x58>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <MX_USART3_UART_Init+0x58>)
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800417e:	4805      	ldr	r0, [pc, #20]	; (8004194 <MX_USART3_UART_Init+0x58>)
 8004180:	f004 fed4 	bl	8008f2c <HAL_UART_Init>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800418a:	f7ff fb62 	bl	8003852 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	2000bf90 	.word	0x2000bf90
 8004198:	40004800 	.word	0x40004800

0800419c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b0ae      	sub	sp, #184	; 0xb8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	2290      	movs	r2, #144	; 0x90
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f01c fefd 	bl	8020fbc <memset>
  if(uartHandle->Instance==USART3)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a56      	ldr	r2, [pc, #344]	; (8004320 <HAL_UART_MspInit+0x184>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	f040 80a4 	bne.w	8004316 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041d4:	2300      	movs	r3, #0
 80041d6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fe69 	bl	8007eb4 <HAL_RCCEx_PeriphCLKConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80041e8:	f7ff fb33 	bl	8003852 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_UART_MspInit+0x188>)
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	4a4c      	ldr	r2, [pc, #304]	; (8004324 <HAL_UART_MspInit+0x188>)
 80041f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f6:	6413      	str	r3, [r2, #64]	; 0x40
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_UART_MspInit+0x188>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004204:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_UART_MspInit+0x188>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	4a46      	ldr	r2, [pc, #280]	; (8004324 <HAL_UART_MspInit+0x188>)
 800420a:	f043 0308 	orr.w	r3, r3, #8
 800420e:	6313      	str	r3, [r2, #48]	; 0x30
 8004210:	4b44      	ldr	r3, [pc, #272]	; (8004324 <HAL_UART_MspInit+0x188>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800421c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	2302      	movs	r3, #2
 8004226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004230:	2303      	movs	r3, #3
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004236:	2307      	movs	r3, #7
 8004238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800423c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004240:	4619      	mov	r1, r3
 8004242:	4839      	ldr	r0, [pc, #228]	; (8004328 <HAL_UART_MspInit+0x18c>)
 8004244:	f001 fc48 	bl	8005ad8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004248:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_UART_MspInit+0x190>)
 800424a:	4a39      	ldr	r2, [pc, #228]	; (8004330 <HAL_UART_MspInit+0x194>)
 800424c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800424e:	4b37      	ldr	r3, [pc, #220]	; (800432c <HAL_UART_MspInit+0x190>)
 8004250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004254:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004256:	4b35      	ldr	r3, [pc, #212]	; (800432c <HAL_UART_MspInit+0x190>)
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_UART_MspInit+0x190>)
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004262:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_UART_MspInit+0x190>)
 8004264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004268:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_UART_MspInit+0x190>)
 800426c:	2200      	movs	r2, #0
 800426e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004270:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_UART_MspInit+0x190>)
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004276:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_UART_MspInit+0x190>)
 8004278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800427c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800427e:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_UART_MspInit+0x190>)
 8004280:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004284:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004286:	4b29      	ldr	r3, [pc, #164]	; (800432c <HAL_UART_MspInit+0x190>)
 8004288:	2200      	movs	r2, #0
 800428a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800428c:	4827      	ldr	r0, [pc, #156]	; (800432c <HAL_UART_MspInit+0x190>)
 800428e:	f001 f80d 	bl	80052ac <HAL_DMA_Init>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8004298:	f7ff fadb 	bl	8003852 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a23      	ldr	r2, [pc, #140]	; (800432c <HAL_UART_MspInit+0x190>)
 80042a0:	675a      	str	r2, [r3, #116]	; 0x74
 80042a2:	4a22      	ldr	r2, [pc, #136]	; (800432c <HAL_UART_MspInit+0x190>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80042a8:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042aa:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80042ae:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042b6:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042b8:	2240      	movs	r2, #64	; 0x40
 80042ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042be:	2200      	movs	r2, #0
 80042c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ca:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042d0:	4b18      	ldr	r3, [pc, #96]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80042d6:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042d8:	2200      	movs	r2, #0
 80042da:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042dc:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80042e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80042ea:	4812      	ldr	r0, [pc, #72]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042ec:	f000 ffde 	bl	80052ac <HAL_DMA_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80042f6:	f7ff faac 	bl	8003852 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <HAL_UART_MspInit+0x198>)
 80042fe:	671a      	str	r2, [r3, #112]	; 0x70
 8004300:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <HAL_UART_MspInit+0x198>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004306:	2200      	movs	r2, #0
 8004308:	2105      	movs	r1, #5
 800430a:	2027      	movs	r0, #39	; 0x27
 800430c:	f000 ffa4 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004310:	2027      	movs	r0, #39	; 0x27
 8004312:	f000 ffbd 	bl	8005290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004316:	bf00      	nop
 8004318:	37b8      	adds	r7, #184	; 0xb8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40004800 	.word	0x40004800
 8004324:	40023800 	.word	0x40023800
 8004328:	40020c00 	.word	0x40020c00
 800432c:	2000c018 	.word	0x2000c018
 8004330:	40026028 	.word	0x40026028
 8004334:	2000c078 	.word	0x2000c078
 8004338:	40026058 	.word	0x40026058

0800433c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800433c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004344:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004348:	e002      	b.n	8004350 <LoopCopyDataInit>

0800434a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800434a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800434c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800434e:	3304      	adds	r3, #4

08004350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004354:	d3f9      	bcc.n	800434a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004356:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004358:	4c0b      	ldr	r4, [pc, #44]	; (8004388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800435a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800435c:	e001      	b.n	8004362 <LoopFillZerobss>

0800435e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800435e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004360:	3204      	adds	r2, #4

08004362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004364:	d3fb      	bcc.n	800435e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004366:	f7ff fdad 	bl	8003ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800436a:	f01c fec5 	bl	80210f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800436e:	f7ff f9d7 	bl	8003720 <main>
  bx  lr    
 8004372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004374:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800437c:	20000b48 	.word	0x20000b48
  ldr r2, =_sidata
 8004380:	080261a0 	.word	0x080261a0
  ldr r2, =_sbss
 8004384:	20000b48 	.word	0x20000b48
  ldr r4, =_ebss
 8004388:	20017280 	.word	0x20017280

0800438c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800438c:	e7fe      	b.n	800438c <ADC_IRQHandler>

0800438e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004392:	2003      	movs	r0, #3
 8004394:	f000 ff55 	bl	8005242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004398:	200f      	movs	r0, #15
 800439a:	f7ff fbed 	bl	8003b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800439e:	f7ff fbc3 	bl	8003b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_IncTick+0x20>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_IncTick+0x24>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_IncTick+0x24>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2000000c 	.word	0x2000000c
 80043cc:	2000c0d8 	.word	0x2000c0d8

080043d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return uwTick;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_GetTick+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000c0d8 	.word	0x2000c0d8

080043e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f0:	f7ff ffee 	bl	80043d0 <HAL_GetTick>
 80043f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004400:	d005      	beq.n	800440e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_Delay+0x44>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800440e:	bf00      	nop
 8004410:	f7ff ffde 	bl	80043d0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d8f7      	bhi.n	8004410 <HAL_Delay+0x28>
  {
  }
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c

08004430 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0ed      	b.n	800461e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fbd6 	bl	8001c00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004464:	f7ff ffb4 	bl	80043d0 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800446a:	e012      	b.n	8004492 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800446c:	f7ff ffb0 	bl	80043d0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b0a      	cmp	r3, #10
 8004478:	d90b      	bls.n	8004492 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2205      	movs	r2, #5
 800448a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0c5      	b.n	800461e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0e5      	beq.n	800446c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0202 	bic.w	r2, r2, #2
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b0:	f7ff ff8e 	bl	80043d0 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044b6:	e012      	b.n	80044de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044b8:	f7ff ff8a 	bl	80043d0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b0a      	cmp	r3, #10
 80044c4:	d90b      	bls.n	80044de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2205      	movs	r2, #5
 80044d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e09f      	b.n	800461e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d108      	bne.n	8004506 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e007      	b.n	8004516 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	7e5b      	ldrb	r3, [r3, #25]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d108      	bne.n	8004530 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7e9b      	ldrb	r3, [r3, #26]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d108      	bne.n	800455a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0220 	orr.w	r2, r2, #32
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e007      	b.n	800456a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0220 	bic.w	r2, r2, #32
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7edb      	ldrb	r3, [r3, #27]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d108      	bne.n	8004584 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0210 	bic.w	r2, r2, #16
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e007      	b.n	8004594 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0210 	orr.w	r2, r2, #16
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7f1b      	ldrb	r3, [r3, #28]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d108      	bne.n	80045ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e007      	b.n	80045be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0208 	bic.w	r2, r2, #8
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7f5b      	ldrb	r3, [r3, #29]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d108      	bne.n	80045d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0204 	orr.w	r2, r2, #4
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e007      	b.n	80045e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	ea42 0103 	orr.w	r1, r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800463e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d003      	beq.n	800464e <HAL_CAN_ConfigFilter+0x26>
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b02      	cmp	r3, #2
 800464a:	f040 80c7 	bne.w	80047dc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a69      	ldr	r2, [pc, #420]	; (80047f8 <HAL_CAN_ConfigFilter+0x1d0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d001      	beq.n	800465c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004658:	4b68      	ldr	r3, [pc, #416]	; (80047fc <HAL_CAN_ConfigFilter+0x1d4>)
 800465a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4a63      	ldr	r2, [pc, #396]	; (80047fc <HAL_CAN_ConfigFilter+0x1d4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d111      	bne.n	8004698 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800467a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	431a      	orrs	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2201      	movs	r2, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d123      	bne.n	800470a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	401a      	ands	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3248      	adds	r2, #72	; 0x48
 80046ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	3348      	adds	r3, #72	; 0x48
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d122      	bne.n	8004758 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	431a      	orrs	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004732:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3248      	adds	r2, #72	; 0x48
 8004738:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800474c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	3348      	adds	r3, #72	; 0x48
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	440b      	add	r3, r1
 8004756:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	43db      	mvns	r3, r3
 800476a:	401a      	ands	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004772:	e007      	b.n	8004784 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	431a      	orrs	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800479e:	e007      	b.n	80047b0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e006      	b.n	80047ea <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40003400 	.word	0x40003400
 80047fc:	40006400 	.word	0x40006400

08004800 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d12e      	bne.n	8004872 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800482c:	f7ff fdd0 	bl	80043d0 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004832:	e012      	b.n	800485a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004834:	f7ff fdcc 	bl	80043d0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b0a      	cmp	r3, #10
 8004840:	d90b      	bls.n	800485a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2205      	movs	r2, #5
 8004852:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e012      	b.n	8004880 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e006      	b.n	8004880 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800489c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80048a6:	7ffb      	ldrb	r3, [r7, #31]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d003      	beq.n	80048b4 <HAL_CAN_AddTxMessage+0x2c>
 80048ac:	7ffb      	ldrb	r3, [r7, #31]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	f040 80ad 	bne.w	8004a0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8095 	beq.w	80049fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	0e1b      	lsrs	r3, r3, #24
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80048de:	2201      	movs	r2, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	409a      	lsls	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10d      	bne.n	800490c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	6809      	ldr	r1, [r1, #0]
 80048fe:	431a      	orrs	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	3318      	adds	r3, #24
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	440b      	add	r3, r1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e00f      	b.n	800492c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004916:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004920:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3318      	adds	r3, #24
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	440b      	add	r3, r1
 800492a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3318      	adds	r3, #24
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	440b      	add	r3, r1
 800493c:	3304      	adds	r3, #4
 800493e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	7d1b      	ldrb	r3, [r3, #20]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d111      	bne.n	800496c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	3318      	adds	r3, #24
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	6811      	ldr	r1, [r2, #0]
 800495c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3318      	adds	r3, #24
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	440b      	add	r3, r1
 8004968:	3304      	adds	r3, #4
 800496a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3307      	adds	r3, #7
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	061a      	lsls	r2, r3, #24
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3306      	adds	r3, #6
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3305      	adds	r3, #5
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	4313      	orrs	r3, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	3204      	adds	r2, #4
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	4610      	mov	r0, r2
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	6811      	ldr	r1, [r2, #0]
 8004994:	ea43 0200 	orr.w	r2, r3, r0
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	440b      	add	r3, r1
 800499e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80049a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3303      	adds	r3, #3
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	061a      	lsls	r2, r3, #24
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3302      	adds	r3, #2
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3301      	adds	r3, #1
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	4313      	orrs	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	4610      	mov	r0, r2
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	6811      	ldr	r1, [r2, #0]
 80049ca:	ea43 0200 	orr.w	r2, r3, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	440b      	add	r3, r1
 80049d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80049d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3318      	adds	r3, #24
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	6811      	ldr	r1, [r2, #0]
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3318      	adds	r3, #24
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	440b      	add	r3, r1
 80049f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e00e      	b.n	8004a1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e006      	b.n	8004a1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3724      	adds	r7, #36	; 0x24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d002      	beq.n	8004a48 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004a42:	7afb      	ldrb	r3, [r7, #11]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11d      	bne.n	8004a84 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004a84:	68fb      	ldr	r3, [r7, #12]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d003      	beq.n	8004ab6 <HAL_CAN_GetRxMessage+0x24>
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f040 80f3 	bne.w	8004c9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10e      	bne.n	8004ada <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d116      	bne.n	8004af8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0e7      	b.n	8004caa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d107      	bne.n	8004af8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0d8      	b.n	8004caa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	331b      	adds	r3, #27
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	4413      	add	r3, r2
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0204 	and.w	r2, r3, #4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10c      	bne.n	8004b30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	331b      	adds	r3, #27
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	4413      	add	r3, r2
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	0d5b      	lsrs	r3, r3, #21
 8004b26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e00b      	b.n	8004b48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	331b      	adds	r3, #27
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	4413      	add	r3, r2
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	331b      	adds	r3, #27
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	4413      	add	r3, r2
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0202 	and.w	r2, r3, #2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	331b      	adds	r3, #27
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	4413      	add	r3, r2
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	331b      	adds	r3, #27
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	4413      	add	r3, r2
 8004b82:	3304      	adds	r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	331b      	adds	r3, #27
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	4413      	add	r3, r2
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	0a1a      	lsrs	r2, r3, #8
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	0c1a      	lsrs	r2, r3, #16
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	3302      	adds	r3, #2
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	0e1a      	lsrs	r2, r3, #24
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	3303      	adds	r3, #3
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	0a1a      	lsrs	r2, r3, #8
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	3305      	adds	r3, #5
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0c1a      	lsrs	r2, r3, #16
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	3306      	adds	r3, #6
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	0e1a      	lsrs	r2, r3, #24
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d108      	bne.n	8004c88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0220 	orr.w	r2, r2, #32
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	e007      	b.n	8004c98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0220 	orr.w	r2, r2, #32
 8004c96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e006      	b.n	8004caa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d002      	beq.n	8004cd4 <HAL_CAN_ActivateNotification+0x1e>
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d109      	bne.n	8004ce8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6959      	ldr	r1, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e006      	b.n	8004cf6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08a      	sub	sp, #40	; 0x28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d07c      	beq.n	8004e42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2201      	movs	r2, #1
 8004d58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fd facb 	bl	8002300 <HAL_CAN_TxMailbox0CompleteCallback>
 8004d6a:	e016      	b.n	8004d9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e00c      	b.n	8004d9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	e002      	b.n	8004d9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fd fabd 	bl	8002314 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d024      	beq.n	8004dee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fd fab5 	bl	8002328 <HAL_CAN_TxMailbox1CompleteCallback>
 8004dbe:	e016      	b.n	8004dee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e00c      	b.n	8004dee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	e002      	b.n	8004dee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fd faa7 	bl	800233c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d024      	beq.n	8004e42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fd fa9f 	bl	8002350 <HAL_CAN_TxMailbox2CompleteCallback>
 8004e12:	e016      	b.n	8004e42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	e00c      	b.n	8004e42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e002      	b.n	8004e42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fd fa91 	bl	8002364 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2210      	movs	r2, #16
 8004e64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8f4 	bl	8005070 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fd fa69 	bl	8002378 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8d6 	bl	8005098 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8bd 	bl	8005084 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8c0 	bl	80050ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8b9 	bl	80050c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d07b      	beq.n	8005050 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d072      	beq.n	8005048 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d043      	beq.n	8005048 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d03e      	beq.n	8005048 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fd0:	2b60      	cmp	r3, #96	; 0x60
 8004fd2:	d02b      	beq.n	800502c <HAL_CAN_IRQHandler+0x32a>
 8004fd4:	2b60      	cmp	r3, #96	; 0x60
 8004fd6:	d82e      	bhi.n	8005036 <HAL_CAN_IRQHandler+0x334>
 8004fd8:	2b50      	cmp	r3, #80	; 0x50
 8004fda:	d022      	beq.n	8005022 <HAL_CAN_IRQHandler+0x320>
 8004fdc:	2b50      	cmp	r3, #80	; 0x50
 8004fde:	d82a      	bhi.n	8005036 <HAL_CAN_IRQHandler+0x334>
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d019      	beq.n	8005018 <HAL_CAN_IRQHandler+0x316>
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d826      	bhi.n	8005036 <HAL_CAN_IRQHandler+0x334>
 8004fe8:	2b30      	cmp	r3, #48	; 0x30
 8004fea:	d010      	beq.n	800500e <HAL_CAN_IRQHandler+0x30c>
 8004fec:	2b30      	cmp	r3, #48	; 0x30
 8004fee:	d822      	bhi.n	8005036 <HAL_CAN_IRQHandler+0x334>
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d002      	beq.n	8004ffa <HAL_CAN_IRQHandler+0x2f8>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d005      	beq.n	8005004 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004ff8:	e01d      	b.n	8005036 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	f043 0308 	orr.w	r3, r3, #8
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005002:	e019      	b.n	8005038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	f043 0310 	orr.w	r3, r3, #16
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800500c:	e014      	b.n	8005038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	f043 0320 	orr.w	r3, r3, #32
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005016:	e00f      	b.n	8005038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005020:	e00a      	b.n	8005038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800502a:	e005      	b.n	8005038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005034:	e000      	b.n	8005038 <HAL_CAN_IRQHandler+0x336>
            break;
 8005036:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005046:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2204      	movs	r2, #4
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f836 	bl	80050d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005068:	bf00      	nop
 800506a:	3728      	adds	r7, #40	; 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <__NVIC_SetPriorityGrouping+0x40>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005104:	4013      	ands	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <__NVIC_SetPriorityGrouping+0x44>)
 8005112:	4313      	orrs	r3, r2
 8005114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005116:	4a04      	ldr	r2, [pc, #16]	; (8005128 <__NVIC_SetPriorityGrouping+0x40>)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	60d3      	str	r3, [r2, #12]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	e000ed00 	.word	0xe000ed00
 800512c:	05fa0000 	.word	0x05fa0000

08005130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005134:	4b04      	ldr	r3, [pc, #16]	; (8005148 <__NVIC_GetPriorityGrouping+0x18>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 0307 	and.w	r3, r3, #7
}
 800513e:	4618      	mov	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	2b00      	cmp	r3, #0
 800515c:	db0b      	blt.n	8005176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 021f 	and.w	r2, r3, #31
 8005164:	4907      	ldr	r1, [pc, #28]	; (8005184 <__NVIC_EnableIRQ+0x38>)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2001      	movs	r0, #1
 800516e:	fa00 f202 	lsl.w	r2, r0, r2
 8005172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	e000e100 	.word	0xe000e100

08005188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005198:	2b00      	cmp	r3, #0
 800519a:	db0a      	blt.n	80051b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	490c      	ldr	r1, [pc, #48]	; (80051d4 <__NVIC_SetPriority+0x4c>)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	0112      	lsls	r2, r2, #4
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	440b      	add	r3, r1
 80051ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b0:	e00a      	b.n	80051c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4908      	ldr	r1, [pc, #32]	; (80051d8 <__NVIC_SetPriority+0x50>)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	3b04      	subs	r3, #4
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	440b      	add	r3, r1
 80051c6:	761a      	strb	r2, [r3, #24]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000e100 	.word	0xe000e100
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f1c3 0307 	rsb	r3, r3, #7
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	bf28      	it	cs
 80051fa:	2304      	movcs	r3, #4
 80051fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3304      	adds	r3, #4
 8005202:	2b06      	cmp	r3, #6
 8005204:	d902      	bls.n	800520c <NVIC_EncodePriority+0x30>
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3b03      	subs	r3, #3
 800520a:	e000      	b.n	800520e <NVIC_EncodePriority+0x32>
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43da      	mvns	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	401a      	ands	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	43d9      	mvns	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	4313      	orrs	r3, r2
         );
}
 8005236:	4618      	mov	r0, r3
 8005238:	3724      	adds	r7, #36	; 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ff4c 	bl	80050e8 <__NVIC_SetPriorityGrouping>
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800526a:	f7ff ff61 	bl	8005130 <__NVIC_GetPriorityGrouping>
 800526e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f7ff ffb1 	bl	80051dc <NVIC_EncodePriority>
 800527a:	4602      	mov	r2, r0
 800527c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ff80 	bl	8005188 <__NVIC_SetPriority>
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800529a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff ff54 	bl	800514c <__NVIC_EnableIRQ>
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052b8:	f7ff f88a 	bl	80043d0 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e099      	b.n	80053fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e8:	e00f      	b.n	800530a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052ea:	f7ff f871 	bl	80043d0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d908      	bls.n	800530a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2203      	movs	r2, #3
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e078      	b.n	80053fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e8      	bne.n	80052ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_DMA_Init+0x158>)
 8005324:	4013      	ands	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800534e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b04      	cmp	r3, #4
 8005362:	d107      	bne.n	8005374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	4313      	orrs	r3, r2
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b04      	cmp	r3, #4
 800539c:	d117      	bne.n	80053ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00e      	beq.n	80053ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fb15 	bl	80059e0 <DMA_CheckFifoParam>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2240      	movs	r2, #64	; 0x40
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053ca:	2301      	movs	r3, #1
 80053cc:	e016      	b.n	80053fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 facc 	bl	8005974 <DMA_CalcBaseAndBitshift>
 80053dc:	4603      	mov	r3, r0
 80053de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	223f      	movs	r2, #63	; 0x3f
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	e010803f 	.word	0xe010803f

08005408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_DMA_Start_IT+0x26>
 800542a:	2302      	movs	r3, #2
 800542c:	e048      	b.n	80054c0 <HAL_DMA_Start_IT+0xb8>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d137      	bne.n	80054b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fa5e 	bl	8005918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005460:	223f      	movs	r2, #63	; 0x3f
 8005462:	409a      	lsls	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0216 	orr.w	r2, r2, #22
 8005476:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005486:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0208 	orr.w	r2, r2, #8
 800549e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e005      	b.n	80054be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
 80054bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054d6:	f7fe ff7b 	bl	80043d0 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d008      	beq.n	80054fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2280      	movs	r2, #128	; 0x80
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e052      	b.n	80055a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0216 	bic.w	r2, r2, #22
 8005508:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005518:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <HAL_DMA_Abort+0x62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0208 	bic.w	r2, r2, #8
 8005538:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800554a:	e013      	b.n	8005574 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800554c:	f7fe ff40 	bl	80043d0 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b05      	cmp	r3, #5
 8005558:	d90c      	bls.n	8005574 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2203      	movs	r2, #3
 8005564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e015      	b.n	80055a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e4      	bne.n	800554c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	223f      	movs	r2, #63	; 0x3f
 8005588:	409a      	lsls	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e00c      	b.n	80055e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2205      	movs	r2, #5
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80055f8:	4b8e      	ldr	r3, [pc, #568]	; (8005834 <HAL_DMA_IRQHandler+0x248>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a8e      	ldr	r2, [pc, #568]	; (8005838 <HAL_DMA_IRQHandler+0x24c>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	0a9b      	lsrs	r3, r3, #10
 8005604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	2208      	movs	r2, #8
 8005618:	409a      	lsls	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01a      	beq.n	8005658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d013      	beq.n	8005658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0204 	bic.w	r2, r2, #4
 800563e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005644:	2208      	movs	r2, #8
 8005646:	409a      	lsls	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f043 0201 	orr.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	2201      	movs	r2, #1
 800565e:	409a      	lsls	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d012      	beq.n	800568e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	2201      	movs	r2, #1
 800567c:	409a      	lsls	r2, r3
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f043 0202 	orr.w	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005692:	2204      	movs	r2, #4
 8005694:	409a      	lsls	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	2204      	movs	r2, #4
 80056b2:	409a      	lsls	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	f043 0204 	orr.w	r2, r3, #4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c8:	2210      	movs	r2, #16
 80056ca:	409a      	lsls	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d043      	beq.n	800575c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03c      	beq.n	800575c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e6:	2210      	movs	r2, #16
 80056e8:	409a      	lsls	r2, r3
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d018      	beq.n	800572e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d024      	beq.n	800575c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
 800571a:	e01f      	b.n	800575c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01b      	beq.n	800575c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
 800572c:	e016      	b.n	800575c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d107      	bne.n	800574c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0208 	bic.w	r2, r2, #8
 800574a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005760:	2220      	movs	r2, #32
 8005762:	409a      	lsls	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 808f 	beq.w	800588c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8087 	beq.w	800588c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	2220      	movs	r2, #32
 8005784:	409a      	lsls	r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b05      	cmp	r3, #5
 8005794:	d136      	bne.n	8005804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0216 	bic.w	r2, r2, #22
 80057a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_DMA_IRQHandler+0x1da>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0208 	bic.w	r2, r2, #8
 80057d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	223f      	movs	r2, #63	; 0x3f
 80057dc:	409a      	lsls	r2, r3
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d07e      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
        }
        return;
 8005802:	e079      	b.n	80058f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01d      	beq.n	800584e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	2b00      	cmp	r3, #0
 8005826:	d031      	beq.n	800588c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
 8005830:	e02c      	b.n	800588c <HAL_DMA_IRQHandler+0x2a0>
 8005832:	bf00      	nop
 8005834:	20000004 	.word	0x20000004
 8005838:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d023      	beq.n	800588c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
 800584c:	e01e      	b.n	800588c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10f      	bne.n	800587c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0210 	bic.w	r2, r2, #16
 800586a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	2b00      	cmp	r3, #0
 8005892:	d032      	beq.n	80058fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d022      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2205      	movs	r2, #5
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d307      	bcc.n	80058d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f2      	bne.n	80058b8 <HAL_DMA_IRQHandler+0x2cc>
 80058d2:	e000      	b.n	80058d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
 80058f6:	e000      	b.n	80058fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80058f8:	bf00      	nop
    }
  }
}
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d108      	bne.n	8005958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005956:	e007      	b.n	8005968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	3b10      	subs	r3, #16
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <DMA_CalcBaseAndBitshift+0x60>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d908      	bls.n	80059b4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <DMA_CalcBaseAndBitshift+0x68>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	659a      	str	r2, [r3, #88]	; 0x58
 80059b2:	e006      	b.n	80059c2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <DMA_CalcBaseAndBitshift+0x68>)
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	aaaaaaab 	.word	0xaaaaaaab
 80059d8:	080247f8 	.word	0x080247f8
 80059dc:	fffffc00 	.word	0xfffffc00

080059e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11f      	bne.n	8005a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d856      	bhi.n	8005aae <DMA_CheckFifoParam+0xce>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <DMA_CheckFifoParam+0x28>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005a2b 	.word	0x08005a2b
 8005a10:	08005a19 	.word	0x08005a19
 8005a14:	08005aaf 	.word	0x08005aaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d046      	beq.n	8005ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a28:	e043      	b.n	8005ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a32:	d140      	bne.n	8005ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a38:	e03d      	b.n	8005ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	d121      	bne.n	8005a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d837      	bhi.n	8005aba <DMA_CheckFifoParam+0xda>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <DMA_CheckFifoParam+0x70>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a67 	.word	0x08005a67
 8005a58:	08005a61 	.word	0x08005a61
 8005a5c:	08005a79 	.word	0x08005a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
      break;
 8005a64:	e030      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d025      	beq.n	8005abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a76:	e022      	b.n	8005abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a80:	d11f      	bne.n	8005ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a86:	e01c      	b.n	8005ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d903      	bls.n	8005a96 <DMA_CheckFifoParam+0xb6>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d003      	beq.n	8005a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a94:	e018      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
      break;
 8005a9a:	e015      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00e      	beq.n	8005ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e00b      	b.n	8005ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e00a      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e008      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e006      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8005aba:	bf00      	nop
 8005abc:	e004      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop

08005ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	; 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e175      	b.n	8005de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005af8:	2201      	movs	r2, #1
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f040 8164 	bne.w	8005dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d005      	beq.n	8005b2e <HAL_GPIO_Init+0x56>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d130      	bne.n	8005b90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	2203      	movs	r2, #3
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4013      	ands	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b64:	2201      	movs	r2, #1
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4013      	ands	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 0201 	and.w	r2, r3, #1
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d017      	beq.n	8005bcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d123      	bne.n	8005c20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	08da      	lsrs	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3208      	adds	r2, #8
 8005be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	220f      	movs	r2, #15
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	08da      	lsrs	r2, r3, #3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3208      	adds	r2, #8
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0203 	and.w	r2, r3, #3
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80be 	beq.w	8005dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c62:	4b66      	ldr	r3, [pc, #408]	; (8005dfc <HAL_GPIO_Init+0x324>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	4a65      	ldr	r2, [pc, #404]	; (8005dfc <HAL_GPIO_Init+0x324>)
 8005c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c6e:	4b63      	ldr	r3, [pc, #396]	; (8005dfc <HAL_GPIO_Init+0x324>)
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c7a:	4a61      	ldr	r2, [pc, #388]	; (8005e00 <HAL_GPIO_Init+0x328>)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	3302      	adds	r3, #2
 8005c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	220f      	movs	r2, #15
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a58      	ldr	r2, [pc, #352]	; (8005e04 <HAL_GPIO_Init+0x32c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d037      	beq.n	8005d16 <HAL_GPIO_Init+0x23e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a57      	ldr	r2, [pc, #348]	; (8005e08 <HAL_GPIO_Init+0x330>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d031      	beq.n	8005d12 <HAL_GPIO_Init+0x23a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a56      	ldr	r2, [pc, #344]	; (8005e0c <HAL_GPIO_Init+0x334>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02b      	beq.n	8005d0e <HAL_GPIO_Init+0x236>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a55      	ldr	r2, [pc, #340]	; (8005e10 <HAL_GPIO_Init+0x338>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d025      	beq.n	8005d0a <HAL_GPIO_Init+0x232>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a54      	ldr	r2, [pc, #336]	; (8005e14 <HAL_GPIO_Init+0x33c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01f      	beq.n	8005d06 <HAL_GPIO_Init+0x22e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a53      	ldr	r2, [pc, #332]	; (8005e18 <HAL_GPIO_Init+0x340>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d019      	beq.n	8005d02 <HAL_GPIO_Init+0x22a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a52      	ldr	r2, [pc, #328]	; (8005e1c <HAL_GPIO_Init+0x344>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_GPIO_Init+0x226>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a51      	ldr	r2, [pc, #324]	; (8005e20 <HAL_GPIO_Init+0x348>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00d      	beq.n	8005cfa <HAL_GPIO_Init+0x222>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a50      	ldr	r2, [pc, #320]	; (8005e24 <HAL_GPIO_Init+0x34c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <HAL_GPIO_Init+0x21e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a4f      	ldr	r2, [pc, #316]	; (8005e28 <HAL_GPIO_Init+0x350>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <HAL_GPIO_Init+0x21a>
 8005cee:	2309      	movs	r3, #9
 8005cf0:	e012      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	e010      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	e00e      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005cfa:	2307      	movs	r3, #7
 8005cfc:	e00c      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005cfe:	2306      	movs	r3, #6
 8005d00:	e00a      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005d02:	2305      	movs	r3, #5
 8005d04:	e008      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005d06:	2304      	movs	r3, #4
 8005d08:	e006      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e004      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e002      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <HAL_GPIO_Init+0x240>
 8005d16:	2300      	movs	r3, #0
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	f002 0203 	and.w	r2, r2, #3
 8005d1e:	0092      	lsls	r2, r2, #2
 8005d20:	4093      	lsls	r3, r2
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d28:	4935      	ldr	r1, [pc, #212]	; (8005e00 <HAL_GPIO_Init+0x328>)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	3302      	adds	r3, #2
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d36:	4b3d      	ldr	r3, [pc, #244]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d5a:	4a34      	ldr	r2, [pc, #208]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d60:	4b32      	ldr	r3, [pc, #200]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d84:	4a29      	ldr	r2, [pc, #164]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d8a:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	43db      	mvns	r3, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4013      	ands	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dae:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <HAL_GPIO_Init+0x354>)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3301      	adds	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	f67f ae86 	bls.w	8005af8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	3724      	adds	r7, #36	; 0x24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40013800 	.word	0x40013800
 8005e04:	40020000 	.word	0x40020000
 8005e08:	40020400 	.word	0x40020400
 8005e0c:	40020800 	.word	0x40020800
 8005e10:	40020c00 	.word	0x40020c00
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40021400 	.word	0x40021400
 8005e1c:	40021800 	.word	0x40021800
 8005e20:	40021c00 	.word	0x40021c00
 8005e24:	40022000 	.word	0x40022000
 8005e28:	40022400 	.word	0x40022400
 8005e2c:	40013c00 	.word	0x40013c00

08005e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e40:	787b      	ldrb	r3, [r7, #1]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e46:	887a      	ldrh	r2, [r7, #2]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e4c:	e003      	b.n	8005e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	041a      	lsls	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	619a      	str	r2, [r3, #24]
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	041a      	lsls	r2, r3, #16
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	43d9      	mvns	r1, r3
 8005e80:	887b      	ldrh	r3, [r7, #2]
 8005e82:	400b      	ands	r3, r1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	619a      	str	r2, [r3, #24]
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e98:	b08f      	sub	sp, #60	; 0x3c
 8005e9a:	af0a      	add	r7, sp, #40	; 0x28
 8005e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e116      	b.n	80060d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f00b f83c 	bl	8010f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2203      	movs	r2, #3
 8005ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f004 fd4f 	bl	800a98a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	687e      	ldr	r6, [r7, #4]
 8005ef4:	466d      	mov	r5, sp
 8005ef6:	f106 0410 	add.w	r4, r6, #16
 8005efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f0a:	1d33      	adds	r3, r6, #4
 8005f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f0e:	6838      	ldr	r0, [r7, #0]
 8005f10:	f004 fc30 	bl	800a774 <USB_CoreInit>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0d7      	b.n	80060d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f004 fd3d 	bl	800a9ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e04a      	b.n	8005fce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f38:	7bfa      	ldrb	r2, [r7, #15]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	333d      	adds	r3, #61	; 0x3d
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f4c:	7bfa      	ldrb	r2, [r7, #15]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	333c      	adds	r3, #60	; 0x3c
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	b298      	uxth	r0, r3
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	3344      	adds	r3, #68	; 0x44
 8005f74:	4602      	mov	r2, r0
 8005f76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f78:	7bfa      	ldrb	r2, [r7, #15]
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	3340      	adds	r3, #64	; 0x40
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3348      	adds	r3, #72	; 0x48
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fa0:	7bfa      	ldrb	r2, [r7, #15]
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	334c      	adds	r3, #76	; 0x4c
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fb4:	7bfa      	ldrb	r2, [r7, #15]
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3354      	adds	r3, #84	; 0x54
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	7bfa      	ldrb	r2, [r7, #15]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3af      	bcc.n	8005f38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	e044      	b.n	8006068 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005fde:	7bfa      	ldrb	r2, [r7, #15]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ff4:	7bfa      	ldrb	r2, [r7, #15]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800600a:	7bfa      	ldrb	r2, [r7, #15]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006020:	7bfa      	ldrb	r2, [r7, #15]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006036:	7bfa      	ldrb	r2, [r7, #15]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800604c:	7bfa      	ldrb	r2, [r7, #15]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	3301      	adds	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d3b5      	bcc.n	8005fde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	687e      	ldr	r6, [r7, #4]
 800607a:	466d      	mov	r5, sp
 800607c:	f106 0410 	add.w	r4, r6, #16
 8006080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800608c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006090:	1d33      	adds	r3, r6, #4
 8006092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006094:	6838      	ldr	r0, [r7, #0]
 8006096:	f004 fcd5 	bl	800aa44 <USB_DevInit>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e014      	b.n	80060d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d102      	bne.n	80060ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f97b 	bl	80073c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f005 fe23 	bl	800bd1a <USB_DevDisconnect>

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_PCD_Start+0x16>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e012      	b.n	800611a <HAL_PCD_Start+0x3c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f004 fc31 	bl	800a968 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f005 fde4 	bl	800bcd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006122:	b590      	push	{r4, r7, lr}
 8006124:	b08d      	sub	sp, #52	; 0x34
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f005 fea2 	bl	800be82 <USB_GetMode>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 84b7 	bne.w	8006ab4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f005 fe06 	bl	800bd5c <USB_ReadInterrupts>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 84ad 	beq.w	8006ab2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f005 fdf3 	bl	800bd5c <USB_ReadInterrupts>
 8006176:	4603      	mov	r3, r0
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d107      	bne.n	8006190 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f002 0202 	and.w	r2, r2, #2
 800618e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f005 fde1 	bl	800bd5c <USB_ReadInterrupts>
 800619a:	4603      	mov	r3, r0
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d161      	bne.n	8006268 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0210 	bic.w	r2, r2, #16
 80061b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	4413      	add	r3, r2
 80061d0:	3304      	adds	r3, #4
 80061d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	0c5b      	lsrs	r3, r3, #17
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d124      	bne.n	800622a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d035      	beq.n	8006258 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	6a38      	ldr	r0, [r7, #32]
 8006200:	f005 fc18 	bl	800ba34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006210:	441a      	add	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006222:	441a      	add	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	621a      	str	r2, [r3, #32]
 8006228:	e016      	b.n	8006258 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	0c5b      	lsrs	r3, r3, #17
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	2b06      	cmp	r3, #6
 8006234:	d110      	bne.n	8006258 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800623c:	2208      	movs	r2, #8
 800623e:	4619      	mov	r1, r3
 8006240:	6a38      	ldr	r0, [r7, #32]
 8006242:	f005 fbf7 	bl	800ba34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006252:	441a      	add	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0210 	orr.w	r2, r2, #16
 8006266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f005 fd75 	bl	800bd5c <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006278:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800627c:	f040 80a7 	bne.w	80063ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f005 fd7a 	bl	800bd82 <USB_ReadDevAllOutEpInterrupt>
 800628e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006290:	e099      	b.n	80063c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 808e 	beq.w	80063ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f005 fd9e 	bl	800bdea <USB_ReadDevOutEPInterrupt>
 80062ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	461a      	mov	r2, r3
 80062c8:	2301      	movs	r3, #1
 80062ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80062cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fef0 	bl	80070b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	2308      	movs	r3, #8
 80062ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80062f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 ffc6 	bl	8007284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	461a      	mov	r2, r3
 8006310:	2310      	movs	r3, #16
 8006312:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d030      	beq.n	8006380 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b80      	cmp	r3, #128	; 0x80
 8006328:	d109      	bne.n	800633e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800633c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	3304      	adds	r3, #4
 8006352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	78db      	ldrb	r3, [r3, #3]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d108      	bne.n	800636e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	b2db      	uxtb	r3, r3
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f00a ff0d 	bl	8011188 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	461a      	mov	r2, r3
 800637c:	2302      	movs	r3, #2
 800637e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	461a      	mov	r2, r3
 8006398:	2320      	movs	r3, #32
 800639a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	3301      	adds	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f af62 	bne.w	8006292 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f005 fcc2 	bl	800bd5c <USB_ReadInterrupts>
 80063d8:	4603      	mov	r3, r0
 80063da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063e2:	f040 80db 	bne.w	800659c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f005 fce3 	bl	800bdb6 <USB_ReadDevAllInEpInterrupt>
 80063f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063f6:	e0cd      	b.n	8006594 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80c2 	beq.w	8006588 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f005 fd09 	bl	800be26 <USB_ReadDevInEPInterrupt>
 8006414:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d057      	beq.n	80064d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	2201      	movs	r2, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	43db      	mvns	r3, r3
 800643a:	69f9      	ldr	r1, [r7, #28]
 800643c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006440:	4013      	ands	r3, r2
 8006442:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	461a      	mov	r2, r3
 8006452:	2301      	movs	r3, #1
 8006454:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d132      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	4613      	mov	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	334c      	adds	r3, #76	; 0x4c
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4403      	add	r3, r0
 800647e:	3348      	adds	r3, #72	; 0x48
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4419      	add	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006488:	4613      	mov	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4403      	add	r3, r0
 8006492:	334c      	adds	r3, #76	; 0x4c
 8006494:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d113      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x3a2>
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	3354      	adds	r3, #84	; 0x54
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d108      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064bc:	461a      	mov	r2, r3
 80064be:	2101      	movs	r1, #1
 80064c0:	f005 fd12 	bl	800bee8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f00a fdd7 	bl	801107e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	461a      	mov	r2, r3
 80064e8:	2308      	movs	r3, #8
 80064ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	461a      	mov	r2, r3
 8006504:	2310      	movs	r3, #16
 8006506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	461a      	mov	r2, r3
 8006520:	2340      	movs	r3, #64	; 0x40
 8006522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d023      	beq.n	8006576 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800652e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006530:	6a38      	ldr	r0, [r7, #32]
 8006532:	f004 fbe5 	bl	800ad00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	3338      	adds	r3, #56	; 0x38
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	3304      	adds	r3, #4
 8006548:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	78db      	ldrb	r3, [r3, #3]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d108      	bne.n	8006564 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f00a fe24 	bl	80111ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	2302      	movs	r3, #2
 8006574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fd08 	bl	8006f98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	3301      	adds	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f af2e 	bne.w	80063f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f005 fbdb 	bl	800bd5c <USB_ReadInterrupts>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b0:	d122      	bne.n	80065f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d108      	bne.n	80065e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80065d8:	2100      	movs	r1, #0
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f00a ff9e 	bl	801151c <HAL_PCDEx_LPM_Callback>
 80065e0:	e002      	b.n	80065e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f00a fdc2 	bl	801116c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80065f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f005 fbad 	bl	800bd5c <USB_ReadInterrupts>
 8006602:	4603      	mov	r3, r0
 8006604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660c:	d112      	bne.n	8006634 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d102      	bne.n	8006624 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f00a fd7e 	bl	8011120 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006632:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f005 fb8f 	bl	800bd5c <USB_ReadInterrupts>
 800663e:	4603      	mov	r3, r0
 8006640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006648:	d121      	bne.n	800668e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006658:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d111      	bne.n	8006688 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800667e:	2101      	movs	r1, #1
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f00a ff4b 	bl	801151c <HAL_PCDEx_LPM_Callback>
 8006686:	e002      	b.n	800668e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f00a fd49 	bl	8011120 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f005 fb62 	bl	800bd5c <USB_ReadInterrupts>
 8006698:	4603      	mov	r3, r0
 800669a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a2:	f040 80b7 	bne.w	8006814 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2110      	movs	r1, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f004 fb1d 	bl	800ad00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	e046      	b.n	800675a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	461a      	mov	r2, r3
 80066da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	461a      	mov	r2, r3
 800670e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006712:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006752:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	3301      	adds	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006760:	429a      	cmp	r2, r3
 8006762:	d3b3      	bcc.n	80066cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006772:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006776:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006790:	f043 030b 	orr.w	r3, r3, #11
 8006794:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a6:	f043 030b 	orr.w	r3, r3, #11
 80067aa:	6453      	str	r3, [r2, #68]	; 0x44
 80067ac:	e015      	b.n	80067da <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067bc:	4619      	mov	r1, r3
 80067be:	f242 032b 	movw	r3, #8235	; 0x202b
 80067c2:	4313      	orrs	r3, r2
 80067c4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d4:	f043 030b 	orr.w	r3, r3, #11
 80067d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067fe:	461a      	mov	r2, r3
 8006800:	f005 fb72 	bl	800bee8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f005 fa9f 	bl	800bd5c <USB_ReadInterrupts>
 800681e:	4603      	mov	r3, r0
 8006820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006828:	d124      	bne.n	8006874 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f005 fb36 	bl	800bea0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f004 fade 	bl	800adfa <USB_GetDevSpeed>
 800683e:	4603      	mov	r3, r0
 8006840:	461a      	mov	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681c      	ldr	r4, [r3, #0]
 800684a:	f001 facd 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 800684e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	4620      	mov	r0, r4
 800685a:	f003 ffe3 	bl	800a824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f00a fc35 	bl	80110ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006872:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f005 fa6f 	bl	800bd5c <USB_ReadInterrupts>
 800687e:	4603      	mov	r3, r0
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d10a      	bne.n	800689e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f00a fc12 	bl	80110b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f002 0208 	and.w	r2, r2, #8
 800689c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f005 fa5a 	bl	800bd5c <USB_ReadInterrupts>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d122      	bne.n	80068f8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068be:	2301      	movs	r3, #1
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
 80068c2:	e014      	b.n	80068ee <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c8:	4613      	mov	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d105      	bne.n	80068e8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fb27 	bl	8006f36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	3301      	adds	r3, #1
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3e5      	bcc.n	80068c4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f005 fa2d 	bl	800bd5c <USB_ReadInterrupts>
 8006902:	4603      	mov	r3, r0
 8006904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690c:	d13b      	bne.n	8006986 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800690e:	2301      	movs	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
 8006912:	e02b      	b.n	800696c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	3340      	adds	r3, #64	; 0x40
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d115      	bne.n	8006966 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800693a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800693c:	2b00      	cmp	r3, #0
 800693e:	da12      	bge.n	8006966 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	333f      	adds	r3, #63	; 0x3f
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fae8 	bl	8006f36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	3301      	adds	r3, #1
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006972:	429a      	cmp	r2, r3
 8006974:	d3ce      	bcc.n	8006914 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f005 f9e6 	bl	800bd5c <USB_ReadInterrupts>
 8006990:	4603      	mov	r3, r0
 8006992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800699a:	d155      	bne.n	8006a48 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800699c:	2301      	movs	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
 80069a0:	e045      	b.n	8006a2e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d12e      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da2b      	bge.n	8006a28 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80069dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d121      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	4613      	mov	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a24:	6053      	str	r3, [r2, #4]
            break;
 8006a26:	e007      	b.n	8006a38 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d3b4      	bcc.n	80069a2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f005 f985 	bl	800bd5c <USB_ReadInterrupts>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5c:	d10a      	bne.n	8006a74 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f00a fbb6 	bl	80111d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f005 f96f 	bl	800bd5c <USB_ReadInterrupts>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d115      	bne.n	8006ab4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f00a fba6 	bl	80111ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6859      	ldr	r1, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	e000      	b.n	8006ab4 <HAL_PCD_IRQHandler+0x992>
      return;
 8006ab2:	bf00      	nop
    }
  }
}
 8006ab4:	3734      	adds	r7, #52	; 0x34
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}

08006aba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_PCD_SetAddress+0x1a>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e013      	b.n	8006afc <HAL_PCD_SetAddress+0x42>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f005 f8cd 	bl	800bc8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	70fb      	strb	r3, [r7, #3]
 8006b16:	460b      	mov	r3, r1
 8006b18:	803b      	strh	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da0f      	bge.n	8006b4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	4613      	mov	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	3338      	adds	r3, #56	; 0x38
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3304      	adds	r3, #4
 8006b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	705a      	strb	r2, [r3, #1]
 8006b48:	e00f      	b.n	8006b6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	3304      	adds	r3, #4
 8006b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b76:	883a      	ldrh	r2, [r7, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	78ba      	ldrb	r2, [r7, #2]
 8006b80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b94:	78bb      	ldrb	r3, [r7, #2]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d102      	bne.n	8006ba0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_PCD_EP_Open+0xaa>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e00e      	b.n	8006bcc <HAL_PCD_EP_Open+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f004 f941 	bl	800ae44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006bca:	7afb      	ldrb	r3, [r7, #11]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	da0f      	bge.n	8006c08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	3338      	adds	r3, #56	; 0x38
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	705a      	strb	r2, [r3, #1]
 8006c06:	e00f      	b.n	8006c28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	f003 020f 	and.w	r2, r3, #15
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3304      	adds	r3, #4
 8006c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_PCD_EP_Close+0x6e>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e00e      	b.n	8006c60 <HAL_PCD_EP_Close+0x8c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f004 f97f 	bl	800af54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	460b      	mov	r3, r1
 8006c76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	f003 020f 	and.w	r2, r3, #15
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3304      	adds	r3, #4
 8006c90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d102      	bne.n	8006cc4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	f004 fc66 	bl	800b5ac <USB_EP0StartXfer>
 8006ce0:	e008      	b.n	8006cf4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	f004 fa0c 	bl	800b10c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006d20:	681b      	ldr	r3, [r3, #0]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	3338      	adds	r3, #56	; 0x38
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	3304      	adds	r3, #4
 8006d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2200      	movs	r2, #0
 8006d66:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d102      	bne.n	8006d88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6979      	ldr	r1, [r7, #20]
 8006da0:	f004 fc04 	bl	800b5ac <USB_EP0StartXfer>
 8006da4:	e008      	b.n	8006db8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	f004 f9aa 	bl	800b10c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d901      	bls.n	8006de0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e050      	b.n	8006e82 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da0f      	bge.n	8006e08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	3338      	adds	r3, #56	; 0x38
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	705a      	strb	r2, [r3, #1]
 8006e06:	e00d      	b.n	8006e24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_PCD_EP_SetStall+0x82>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e01e      	b.n	8006e82 <HAL_PCD_EP_SetStall+0xc0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f004 fe46 	bl	800bae4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	b2d9      	uxtb	r1, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e72:	461a      	mov	r2, r3
 8006e74:	f005 f838 	bl	800bee8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d901      	bls.n	8006ea8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e042      	b.n	8006f2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da0f      	bge.n	8006ed0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	f003 020f 	and.w	r2, r3, #15
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	3338      	adds	r3, #56	; 0x38
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	705a      	strb	r2, [r3, #1]
 8006ece:	e00f      	b.n	8006ef0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	f003 020f 	and.w	r2, r3, #15
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_PCD_EP_ClrStall+0x86>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e00e      	b.n	8006f2e <HAL_PCD_EP_ClrStall+0xa4>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68f9      	ldr	r1, [r7, #12]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f004 fe4e 	bl	800bbc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	da0c      	bge.n	8006f64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	3338      	adds	r3, #56	; 0x38
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	3304      	adds	r3, #4
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	e00c      	b.n	8006f7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f004 fc6d 	bl	800b864 <USB_EPStopXfer>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	3338      	adds	r3, #56	; 0x38
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4413      	add	r3, r2
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1a      	ldr	r2, [r3, #32]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d901      	bls.n	8006fd0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e06c      	b.n	80070aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d902      	bls.n	8006fec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3303      	adds	r3, #3
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ff4:	e02b      	b.n	800704e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	429a      	cmp	r2, r3
 800700a:	d902      	bls.n	8007012 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3303      	adds	r3, #3
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6919      	ldr	r1, [r3, #16]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800702a:	b2db      	uxtb	r3, r3
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	4603      	mov	r3, r0
 8007030:	6978      	ldr	r0, [r7, #20]
 8007032:	f004 fcc1 	bl	800b9b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	441a      	add	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	429a      	cmp	r2, r3
 8007062:	d809      	bhi.n	8007078 <PCD_WriteEmptyTxFifo+0xe0>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800706c:	429a      	cmp	r2, r3
 800706e:	d203      	bcs.n	8007078 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1be      	bne.n	8006ff6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	429a      	cmp	r2, r3
 8007082:	d811      	bhi.n	80070a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	2201      	movs	r2, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	43db      	mvns	r3, r3
 800709e:	6939      	ldr	r1, [r7, #16]
 80070a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a4:	4013      	ands	r3, r2
 80070a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	333c      	adds	r3, #60	; 0x3c
 80070cc:	3304      	adds	r3, #4
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d17b      	bne.n	80071e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d015      	beq.n	8007120 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4a61      	ldr	r2, [pc, #388]	; (800727c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	f240 80b9 	bls.w	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80b3 	beq.w	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	461a      	mov	r2, r3
 8007118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711c:	6093      	str	r3, [r2, #8]
 800711e:	e0a7      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	461a      	mov	r2, r3
 8007138:	2320      	movs	r3, #32
 800713a:	6093      	str	r3, [r2, #8]
 800713c:	e098      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 8093 	bne.w	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	4a4b      	ldr	r2, [pc, #300]	; (800727c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d90f      	bls.n	8007172 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	461a      	mov	r2, r3
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	6093      	str	r3, [r2, #8]
 8007170:	e07e      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	3304      	adds	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	0159      	lsls	r1, r3, #5
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	440b      	add	r3, r1
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d114      	bne.n	80071d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071bc:	461a      	mov	r2, r3
 80071be:	2101      	movs	r1, #1
 80071c0:	f004 fe92 	bl	800bee8 <USB_EP0_OutStart>
 80071c4:	e006      	b.n	80071d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f009 ff34 	bl	8011048 <HAL_PCD_DataOutStageCallback>
 80071e0:	e046      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4a26      	ldr	r2, [pc, #152]	; (8007280 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d124      	bne.n	8007234 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	461a      	mov	r2, r3
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	6093      	str	r3, [r2, #8]
 8007208:	e032      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	2320      	movs	r3, #32
 8007224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f009 ff0b 	bl	8011048 <HAL_PCD_DataOutStageCallback>
 8007232:	e01d      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d114      	bne.n	8007264 <PCD_EP_OutXfrComplete_int+0x1b0>
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d108      	bne.n	8007264 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800725c:	461a      	mov	r2, r3
 800725e:	2100      	movs	r1, #0
 8007260:	f004 fe42 	bl	800bee8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f009 feec 	bl	8011048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	4f54300a 	.word	0x4f54300a
 8007280:	4f54310a 	.word	0x4f54310a

08007284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	333c      	adds	r3, #60	; 0x3c
 800729c:	3304      	adds	r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a15      	ldr	r2, [pc, #84]	; (800730c <PCD_EP_OutSetupPacket_int+0x88>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d90e      	bls.n	80072d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	461a      	mov	r2, r3
 80072d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f009 fea3 	bl	8011024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	; (800730c <PCD_EP_OutSetupPacket_int+0x88>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d90c      	bls.n	8007300 <PCD_EP_OutSetupPacket_int+0x7c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d108      	bne.n	8007300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072f8:	461a      	mov	r2, r3
 80072fa:	2101      	movs	r1, #1
 80072fc:	f004 fdf4 	bl	800bee8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	4f54300a 	.word	0x4f54300a

08007310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
 800731c:	4613      	mov	r3, r2
 800731e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800732e:	883b      	ldrh	r3, [r7, #0]
 8007330:	0419      	lsls	r1, r3, #16
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	430a      	orrs	r2, r1
 800733a:	629a      	str	r2, [r3, #40]	; 0x28
 800733c:	e028      	b.n	8007390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4413      	add	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e00d      	b.n	800736e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	3340      	adds	r3, #64	; 0x40
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	3301      	adds	r3, #1
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	3b01      	subs	r3, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d3ec      	bcc.n	8007352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007378:	883b      	ldrh	r3, [r7, #0]
 800737a:	0418      	lsls	r0, r3, #16
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	3b01      	subs	r3, #1
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	4302      	orrs	r2, r0
 8007388:	3340      	adds	r3, #64	; 0x40
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	887a      	ldrh	r2, [r7, #2]
 80073b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <HAL_PCDEx_ActivateLPM+0x44>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	10000003 	.word	0x10000003

08007408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007412:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	4a22      	ldr	r2, [pc, #136]	; (80074a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741c:	6413      	str	r3, [r2, #64]	; 0x40
 800741e:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007436:	f7fc ffcb 	bl	80043d0 <HAL_GetTick>
 800743a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800743c:	e009      	b.n	8007452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800743e:	f7fc ffc7 	bl	80043d0 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800744c:	d901      	bls.n	8007452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e022      	b.n	8007498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745e:	d1ee      	bne.n	800743e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007460:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800746c:	f7fc ffb0 	bl	80043d0 <HAL_GetTick>
 8007470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007472:	e009      	b.n	8007488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007474:	f7fc ffac 	bl	80043d0 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007482:	d901      	bls.n	8007488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e007      	b.n	8007498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007494:	d1ee      	bne.n	8007474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40007000 	.word	0x40007000

080074a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80074b0:	2300      	movs	r3, #0
 80074b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e29b      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8087 	beq.w	80075da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074cc:	4b96      	ldr	r3, [pc, #600]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d00c      	beq.n	80074f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d8:	4b93      	ldr	r3, [pc, #588]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d112      	bne.n	800750a <HAL_RCC_OscConfig+0x62>
 80074e4:	4b90      	ldr	r3, [pc, #576]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d10b      	bne.n	800750a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f2:	4b8d      	ldr	r3, [pc, #564]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d06c      	beq.n	80075d8 <HAL_RCC_OscConfig+0x130>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d168      	bne.n	80075d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e275      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0x7a>
 8007514:	4b84      	ldr	r3, [pc, #528]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a83      	ldr	r2, [pc, #524]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e02e      	b.n	8007580 <HAL_RCC_OscConfig+0xd8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x9c>
 800752a:	4b7f      	ldr	r3, [pc, #508]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a7e      	ldr	r2, [pc, #504]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b7c      	ldr	r3, [pc, #496]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7b      	ldr	r2, [pc, #492]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800753c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e01d      	b.n	8007580 <HAL_RCC_OscConfig+0xd8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800754c:	d10c      	bne.n	8007568 <HAL_RCC_OscConfig+0xc0>
 800754e:	4b76      	ldr	r3, [pc, #472]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a75      	ldr	r2, [pc, #468]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	4b73      	ldr	r3, [pc, #460]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a72      	ldr	r2, [pc, #456]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e00b      	b.n	8007580 <HAL_RCC_OscConfig+0xd8>
 8007568:	4b6f      	ldr	r3, [pc, #444]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a6e      	ldr	r2, [pc, #440]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800756e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4b6c      	ldr	r3, [pc, #432]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a6b      	ldr	r2, [pc, #428]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800757a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800757e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d013      	beq.n	80075b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fc ff22 	bl	80043d0 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007590:	f7fc ff1e 	bl	80043d0 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b64      	cmp	r3, #100	; 0x64
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e229      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a2:	4b61      	ldr	r3, [pc, #388]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0xe8>
 80075ae:	e014      	b.n	80075da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fc ff0e 	bl	80043d0 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075b8:	f7fc ff0a 	bl	80043d0 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	; 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e215      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ca:	4b57      	ldr	r3, [pc, #348]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f0      	bne.n	80075b8 <HAL_RCC_OscConfig+0x110>
 80075d6:	e000      	b.n	80075da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d069      	beq.n	80076ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075e6:	4b50      	ldr	r3, [pc, #320]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 030c 	and.w	r3, r3, #12
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075f2:	4b4d      	ldr	r3, [pc, #308]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d11c      	bne.n	8007638 <HAL_RCC_OscConfig+0x190>
 80075fe:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d116      	bne.n	8007638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800760a:	4b47      	ldr	r3, [pc, #284]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_RCC_OscConfig+0x17a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d001      	beq.n	8007622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e1e9      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007622:	4b41      	ldr	r3, [pc, #260]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	493d      	ldr	r1, [pc, #244]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007632:	4313      	orrs	r3, r2
 8007634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007636:	e040      	b.n	80076ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007640:	4b39      	ldr	r3, [pc, #228]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a38      	ldr	r2, [pc, #224]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fc fec0 	bl	80043d0 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007654:	f7fc febc 	bl	80043d0 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e1c7      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007666:	4b30      	ldr	r3, [pc, #192]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007672:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4929      	ldr	r1, [pc, #164]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]
 8007686:	e018      	b.n	80076ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fc fe9c 	bl	80043d0 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800769c:	f7fc fe98 	bl	80043d0 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e1a3      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ae:	4b1e      	ldr	r3, [pc, #120]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d038      	beq.n	8007738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d019      	beq.n	8007702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ce:	4b16      	ldr	r3, [pc, #88]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076da:	f7fc fe79 	bl	80043d0 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e2:	f7fc fe75 	bl	80043d0 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e180      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <HAL_RCC_OscConfig+0x23a>
 8007700:	e01a      	b.n	8007738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	4a08      	ldr	r2, [pc, #32]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fc fe5f 	bl	80043d0 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007714:	e00a      	b.n	800772c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7fc fe5b 	bl	80043d0 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d903      	bls.n	800772c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e166      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
 8007728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800772c:	4b92      	ldr	r3, [pc, #584]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800772e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ee      	bne.n	8007716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80a4 	beq.w	800788e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007746:	4b8c      	ldr	r3, [pc, #560]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10d      	bne.n	800776e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	4b89      	ldr	r3, [pc, #548]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	4a88      	ldr	r2, [pc, #544]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775c:	6413      	str	r3, [r2, #64]	; 0x40
 800775e:	4b86      	ldr	r3, [pc, #536]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800776e:	4b83      	ldr	r3, [pc, #524]	; (800797c <HAL_RCC_OscConfig+0x4d4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d118      	bne.n	80077ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800777a:	4b80      	ldr	r3, [pc, #512]	; (800797c <HAL_RCC_OscConfig+0x4d4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a7f      	ldr	r2, [pc, #508]	; (800797c <HAL_RCC_OscConfig+0x4d4>)
 8007780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007786:	f7fc fe23 	bl	80043d0 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778e:	f7fc fe1f 	bl	80043d0 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b64      	cmp	r3, #100	; 0x64
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e12a      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a0:	4b76      	ldr	r3, [pc, #472]	; (800797c <HAL_RCC_OscConfig+0x4d4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x31a>
 80077b4:	4b70      	ldr	r3, [pc, #448]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b8:	4a6f      	ldr	r2, [pc, #444]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	6713      	str	r3, [r2, #112]	; 0x70
 80077c0:	e02d      	b.n	800781e <HAL_RCC_OscConfig+0x376>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x33c>
 80077ca:	4b6b      	ldr	r3, [pc, #428]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	4a6a      	ldr	r2, [pc, #424]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70
 80077d6:	4b68      	ldr	r3, [pc, #416]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	4a67      	ldr	r2, [pc, #412]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077dc:	f023 0304 	bic.w	r3, r3, #4
 80077e0:	6713      	str	r3, [r2, #112]	; 0x70
 80077e2:	e01c      	b.n	800781e <HAL_RCC_OscConfig+0x376>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d10c      	bne.n	8007806 <HAL_RCC_OscConfig+0x35e>
 80077ec:	4b62      	ldr	r3, [pc, #392]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	4a61      	ldr	r2, [pc, #388]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077f2:	f043 0304 	orr.w	r3, r3, #4
 80077f6:	6713      	str	r3, [r2, #112]	; 0x70
 80077f8:	4b5f      	ldr	r3, [pc, #380]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	4a5e      	ldr	r2, [pc, #376]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6713      	str	r3, [r2, #112]	; 0x70
 8007804:	e00b      	b.n	800781e <HAL_RCC_OscConfig+0x376>
 8007806:	4b5c      	ldr	r3, [pc, #368]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	4a5b      	ldr	r2, [pc, #364]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	6713      	str	r3, [r2, #112]	; 0x70
 8007812:	4b59      	ldr	r3, [pc, #356]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	4a58      	ldr	r2, [pc, #352]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007818:	f023 0304 	bic.w	r3, r3, #4
 800781c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d015      	beq.n	8007852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007826:	f7fc fdd3 	bl	80043d0 <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800782c:	e00a      	b.n	8007844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782e:	f7fc fdcf 	bl	80043d0 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	f241 3288 	movw	r2, #5000	; 0x1388
 800783c:	4293      	cmp	r3, r2
 800783e:	d901      	bls.n	8007844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e0d8      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007844:	4b4c      	ldr	r3, [pc, #304]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0ee      	beq.n	800782e <HAL_RCC_OscConfig+0x386>
 8007850:	e014      	b.n	800787c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007852:	f7fc fdbd 	bl	80043d0 <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007858:	e00a      	b.n	8007870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fc fdb9 	bl	80043d0 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e0c2      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007870:	4b41      	ldr	r3, [pc, #260]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1ee      	bne.n	800785a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d105      	bne.n	800788e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007882:	4b3d      	ldr	r3, [pc, #244]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4a3c      	ldr	r2, [pc, #240]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80ae 	beq.w	80079f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007898:	4b37      	ldr	r3, [pc, #220]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 030c 	and.w	r3, r3, #12
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d06d      	beq.n	8007980 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d14b      	bne.n	8007944 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ac:	4b32      	ldr	r3, [pc, #200]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a31      	ldr	r2, [pc, #196]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80078b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fc fd8a 	bl	80043d0 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c0:	f7fc fd86 	bl	80043d0 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e091      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d2:	4b29      	ldr	r3, [pc, #164]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f0      	bne.n	80078c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69da      	ldr	r2, [r3, #28]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	085b      	lsrs	r3, r3, #1
 80078f6:	3b01      	subs	r3, #1
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	061b      	lsls	r3, r3, #24
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	071b      	lsls	r3, r3, #28
 800790a:	491b      	ldr	r1, [pc, #108]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800790c:	4313      	orrs	r3, r2
 800790e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007910:	4b19      	ldr	r3, [pc, #100]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a18      	ldr	r2, [pc, #96]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800791a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fc fd58 	bl	80043d0 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007924:	f7fc fd54 	bl	80043d0 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e05f      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCC_OscConfig+0x47c>
 8007942:	e057      	b.n	80079f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007944:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a0b      	ldr	r2, [pc, #44]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800794a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800794e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7fc fd3e 	bl	80043d0 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007958:	f7fc fd3a 	bl	80043d0 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e045      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796a:	4b03      	ldr	r3, [pc, #12]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0x4b0>
 8007976:	e03d      	b.n	80079f4 <HAL_RCC_OscConfig+0x54c>
 8007978:	40023800 	.word	0x40023800
 800797c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007980:	4b1f      	ldr	r3, [pc, #124]	; (8007a00 <HAL_RCC_OscConfig+0x558>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d030      	beq.n	80079f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007998:	429a      	cmp	r2, r3
 800799a:	d129      	bne.n	80079f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d122      	bne.n	80079f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079b0:	4013      	ands	r3, r2
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d119      	bne.n	80079f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	3b01      	subs	r3, #1
 80079ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d10f      	bne.n	80079f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079dc:	429a      	cmp	r2, r3
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40023800 	.word	0x40023800

08007a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0d0      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a1c:	4b6a      	ldr	r3, [pc, #424]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d910      	bls.n	8007a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a2a:	4b67      	ldr	r3, [pc, #412]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f023 020f 	bic.w	r2, r3, #15
 8007a32:	4965      	ldr	r1, [pc, #404]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a3a:	4b63      	ldr	r3, [pc, #396]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d001      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0b8      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d020      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a64:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	4a58      	ldr	r2, [pc, #352]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a7c:	4b53      	ldr	r3, [pc, #332]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	4a52      	ldr	r2, [pc, #328]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a88:	4b50      	ldr	r3, [pc, #320]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	494d      	ldr	r1, [pc, #308]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d040      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d107      	bne.n	8007abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aae:	4b47      	ldr	r3, [pc, #284]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d115      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e07f      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d107      	bne.n	8007ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ac6:	4b41      	ldr	r3, [pc, #260]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e073      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad6:	4b3d      	ldr	r3, [pc, #244]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e06b      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ae6:	4b39      	ldr	r3, [pc, #228]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f023 0203 	bic.w	r2, r3, #3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4936      	ldr	r1, [pc, #216]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af8:	f7fc fc6a 	bl	80043d0 <HAL_GetTick>
 8007afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007afe:	e00a      	b.n	8007b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b00:	f7fc fc66 	bl	80043d0 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e053      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b16:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 020c 	and.w	r2, r3, #12
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d1eb      	bne.n	8007b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b28:	4b27      	ldr	r3, [pc, #156]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d210      	bcs.n	8007b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b36:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f023 020f 	bic.w	r2, r3, #15
 8007b3e:	4922      	ldr	r1, [pc, #136]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b46:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d001      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e032      	b.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d008      	beq.n	8007b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b64:	4b19      	ldr	r3, [pc, #100]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4916      	ldr	r1, [pc, #88]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b82:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	490e      	ldr	r1, [pc, #56]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b96:	f000 f821 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <HAL_RCC_ClockConfig+0x1c8>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	091b      	lsrs	r3, r3, #4
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	490a      	ldr	r1, [pc, #40]	; (8007bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8007ba8:	5ccb      	ldrb	r3, [r1, r3]
 8007baa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8007bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bb2:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fb ffde 	bl	8003b78 <HAL_InitTick>

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40023c00 	.word	0x40023c00
 8007bcc:	40023800 	.word	0x40023800
 8007bd0:	080247e0 	.word	0x080247e0
 8007bd4:	20000004 	.word	0x20000004
 8007bd8:	20000008 	.word	0x20000008

08007bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be0:	b094      	sub	sp, #80	; 0x50
 8007be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	647b      	str	r3, [r7, #68]	; 0x44
 8007be8:	2300      	movs	r3, #0
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bec:	2300      	movs	r3, #0
 8007bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bf4:	4b79      	ldr	r3, [pc, #484]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 030c 	and.w	r3, r3, #12
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d00d      	beq.n	8007c1c <HAL_RCC_GetSysClockFreq+0x40>
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	f200 80e1 	bhi.w	8007dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_RCC_GetSysClockFreq+0x34>
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d003      	beq.n	8007c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c0e:	e0db      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c10:	4b73      	ldr	r3, [pc, #460]	; (8007de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c14:	e0db      	b.n	8007dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c16:	4b73      	ldr	r3, [pc, #460]	; (8007de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c1a:	e0d8      	b.n	8007dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c1c:	4b6f      	ldr	r3, [pc, #444]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c24:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c26:	4b6d      	ldr	r3, [pc, #436]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d063      	beq.n	8007cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c32:	4b6a      	ldr	r3, [pc, #424]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	099b      	lsrs	r3, r3, #6
 8007c38:	2200      	movs	r2, #0
 8007c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f04f 0100 	mov.w	r1, #0
 8007c5a:	0159      	lsls	r1, r3, #5
 8007c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c60:	0150      	lsls	r0, r2, #5
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4621      	mov	r1, r4
 8007c68:	1a51      	subs	r1, r2, r1
 8007c6a:	6139      	str	r1, [r7, #16]
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c80:	4659      	mov	r1, fp
 8007c82:	018b      	lsls	r3, r1, #6
 8007c84:	4651      	mov	r1, sl
 8007c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	018a      	lsls	r2, r1, #6
 8007c8e:	4651      	mov	r1, sl
 8007c90:	ebb2 0801 	subs.w	r8, r2, r1
 8007c94:	4659      	mov	r1, fp
 8007c96:	eb63 0901 	sbc.w	r9, r3, r1
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cae:	4690      	mov	r8, r2
 8007cb0:	4699      	mov	r9, r3
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	eb18 0303 	adds.w	r3, r8, r3
 8007cb8:	60bb      	str	r3, [r7, #8]
 8007cba:	462b      	mov	r3, r5
 8007cbc:	eb49 0303 	adc.w	r3, r9, r3
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cce:	4629      	mov	r1, r5
 8007cd0:	024b      	lsls	r3, r1, #9
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cd8:	4621      	mov	r1, r4
 8007cda:	024a      	lsls	r2, r1, #9
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cec:	f7f8 fd1c 	bl	8000728 <__aeabi_uldivmod>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf8:	e058      	b.n	8007dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfa:	4b38      	ldr	r3, [pc, #224]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	2200      	movs	r2, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	4611      	mov	r1, r2
 8007d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d0a:	623b      	str	r3, [r7, #32]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d14:	4642      	mov	r2, r8
 8007d16:	464b      	mov	r3, r9
 8007d18:	f04f 0000 	mov.w	r0, #0
 8007d1c:	f04f 0100 	mov.w	r1, #0
 8007d20:	0159      	lsls	r1, r3, #5
 8007d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d26:	0150      	lsls	r0, r2, #5
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d32:	4649      	mov	r1, r9
 8007d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8007d50:	eb63 050b 	sbc.w	r5, r3, fp
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	00eb      	lsls	r3, r5, #3
 8007d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d62:	00e2      	lsls	r2, r4, #3
 8007d64:	4614      	mov	r4, r2
 8007d66:	461d      	mov	r5, r3
 8007d68:	4643      	mov	r3, r8
 8007d6a:	18e3      	adds	r3, r4, r3
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	464b      	mov	r3, r9
 8007d70:	eb45 0303 	adc.w	r3, r5, r3
 8007d74:	607b      	str	r3, [r7, #4]
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d82:	4629      	mov	r1, r5
 8007d84:	028b      	lsls	r3, r1, #10
 8007d86:	4621      	mov	r1, r4
 8007d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	028a      	lsls	r2, r1, #10
 8007d90:	4610      	mov	r0, r2
 8007d92:	4619      	mov	r1, r3
 8007d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d96:	2200      	movs	r2, #0
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	61fa      	str	r2, [r7, #28]
 8007d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da0:	f7f8 fcc2 	bl	8000728 <__aeabi_uldivmod>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4613      	mov	r3, r2
 8007daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	3301      	adds	r3, #1
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dc6:	e002      	b.n	8007dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dc8:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3750      	adds	r7, #80	; 0x50
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dda:	bf00      	nop
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	00f42400 	.word	0x00f42400
 8007de4:	007a1200 	.word	0x007a1200

08007de8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dec:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dee:	681b      	ldr	r3, [r3, #0]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000004 	.word	0x20000004

08007e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e04:	f7ff fff0 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	0a9b      	lsrs	r3, r3, #10
 8007e10:	f003 0307 	and.w	r3, r3, #7
 8007e14:	4903      	ldr	r1, [pc, #12]	; (8007e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e16:	5ccb      	ldrb	r3, [r1, r3]
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40023800 	.word	0x40023800
 8007e24:	080247f0 	.word	0x080247f0

08007e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e2c:	f7ff ffdc 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 8007e30:	4602      	mov	r2, r0
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	0b5b      	lsrs	r3, r3, #13
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	4903      	ldr	r1, [pc, #12]	; (8007e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e3e:	5ccb      	ldrb	r3, [r1, r3]
 8007e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	080247f0 	.word	0x080247f0

08007e50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e60:	4b12      	ldr	r3, [pc, #72]	; (8007eac <HAL_RCC_GetClockConfig+0x5c>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0203 	and.w	r2, r3, #3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e6c:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <HAL_RCC_GetClockConfig+0x5c>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <HAL_RCC_GetClockConfig+0x5c>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e84:	4b09      	ldr	r3, [pc, #36]	; (8007eac <HAL_RCC_GetClockConfig+0x5c>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	08db      	lsrs	r3, r3, #3
 8007e8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <HAL_RCC_GetClockConfig+0x60>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 020f 	and.w	r2, r3, #15
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	601a      	str	r2, [r3, #0]
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	40023c00 	.word	0x40023c00

08007eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d012      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007edc:	4b69      	ldr	r3, [pc, #420]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	4a68      	ldr	r2, [pc, #416]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ee6:	6093      	str	r3, [r2, #8]
 8007ee8:	4b66      	ldr	r3, [pc, #408]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef0:	4964      	ldr	r1, [pc, #400]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007efe:	2301      	movs	r3, #1
 8007f00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d017      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f0e:	4b5d      	ldr	r3, [pc, #372]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1c:	4959      	ldr	r1, [pc, #356]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2c:	d101      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d017      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f4a:	4b4e      	ldr	r3, [pc, #312]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	494a      	ldr	r1, [pc, #296]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f68:	d101      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f86:	2301      	movs	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 808b 	beq.w	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f98:	4b3a      	ldr	r3, [pc, #232]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	4a39      	ldr	r2, [pc, #228]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa4:	4b37      	ldr	r3, [pc, #220]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fb0:	4b35      	ldr	r3, [pc, #212]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a34      	ldr	r2, [pc, #208]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbc:	f7fc fa08 	bl	80043d0 <HAL_GetTick>
 8007fc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc4:	f7fc fa04 	bl	80043d0 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	; 0x64
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e38f      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fd6:	4b2c      	ldr	r3, [pc, #176]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fe2:	4b28      	ldr	r3, [pc, #160]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d035      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d02e      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008000:	4b20      	ldr	r3, [pc, #128]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008008:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800800a:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008014:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008016:	4b1b      	ldr	r3, [pc, #108]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008022:	4a18      	ldr	r2, [pc, #96]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008028:	4b16      	ldr	r3, [pc, #88]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b01      	cmp	r3, #1
 8008032:	d114      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008034:	f7fc f9cc 	bl	80043d0 <HAL_GetTick>
 8008038:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800803a:	e00a      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800803c:	f7fc f9c8 	bl	80043d0 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f241 3288 	movw	r2, #5000	; 0x1388
 800804a:	4293      	cmp	r3, r2
 800804c:	d901      	bls.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e351      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0ee      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800806a:	d111      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800806c:	4b05      	ldr	r3, [pc, #20]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008078:	4b04      	ldr	r3, [pc, #16]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800807a:	400b      	ands	r3, r1
 800807c:	4901      	ldr	r1, [pc, #4]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
 8008082:	e00b      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008084:	40023800 	.word	0x40023800
 8008088:	40007000 	.word	0x40007000
 800808c:	0ffffcff 	.word	0x0ffffcff
 8008090:	4bac      	ldr	r3, [pc, #688]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	4aab      	ldr	r2, [pc, #684]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008096:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800809a:	6093      	str	r3, [r2, #8]
 800809c:	4ba9      	ldr	r3, [pc, #676]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800809e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a8:	49a6      	ldr	r1, [pc, #664]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0310 	and.w	r3, r3, #16
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d010      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080ba:	4ba2      	ldr	r3, [pc, #648]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c0:	4aa0      	ldr	r2, [pc, #640]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80080ca:	4b9e      	ldr	r3, [pc, #632]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	499b      	ldr	r1, [pc, #620]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080e8:	4b96      	ldr	r3, [pc, #600]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f6:	4993      	ldr	r1, [pc, #588]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800810a:	4b8e      	ldr	r3, [pc, #568]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008110:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008118:	498a      	ldr	r1, [pc, #552]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800812c:	4b85      	ldr	r3, [pc, #532]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008132:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800813a:	4982      	ldr	r1, [pc, #520]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800814e:	4b7d      	ldr	r3, [pc, #500]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815c:	4979      	ldr	r1, [pc, #484]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008170:	4b74      	ldr	r3, [pc, #464]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008176:	f023 0203 	bic.w	r2, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	4971      	ldr	r1, [pc, #452]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008180:	4313      	orrs	r3, r2
 8008182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008192:	4b6c      	ldr	r3, [pc, #432]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008198:	f023 020c 	bic.w	r2, r3, #12
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a0:	4968      	ldr	r1, [pc, #416]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081b4:	4b63      	ldr	r3, [pc, #396]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c2:	4960      	ldr	r1, [pc, #384]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081d6:	4b5b      	ldr	r3, [pc, #364]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e4:	4957      	ldr	r1, [pc, #348]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00a      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081f8:	4b52      	ldr	r3, [pc, #328]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008206:	494f      	ldr	r1, [pc, #316]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008208:	4313      	orrs	r3, r2
 800820a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800821a:	4b4a      	ldr	r3, [pc, #296]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008220:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008228:	4946      	ldr	r1, [pc, #280]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800822a:	4313      	orrs	r3, r2
 800822c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800823c:	4b41      	ldr	r3, [pc, #260]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824a:	493e      	ldr	r1, [pc, #248]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800824c:	4313      	orrs	r3, r2
 800824e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800825e:	4b39      	ldr	r3, [pc, #228]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008264:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826c:	4935      	ldr	r1, [pc, #212]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008280:	4b30      	ldr	r3, [pc, #192]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800828e:	492d      	ldr	r1, [pc, #180]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008290:	4313      	orrs	r3, r2
 8008292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d011      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082a2:	4b28      	ldr	r3, [pc, #160]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b0:	4924      	ldr	r1, [pc, #144]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c0:	d101      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082e2:	4b18      	ldr	r3, [pc, #96]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f0:	4914      	ldr	r1, [pc, #80]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008314:	490b      	ldr	r1, [pc, #44]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00f      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008338:	4902      	ldr	r1, [pc, #8]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008342:	bf00      	nop
 8008344:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008354:	4b8a      	ldr	r3, [pc, #552]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008364:	4986      	ldr	r1, [pc, #536]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008378:	4b81      	ldr	r3, [pc, #516]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800837a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800837e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008388:	497d      	ldr	r1, [pc, #500]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800838a:	4313      	orrs	r3, r2
 800838c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d006      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80d6 	beq.w	8008550 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083a4:	4b76      	ldr	r3, [pc, #472]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a75      	ldr	r2, [pc, #468]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b0:	f7fc f80e 	bl	80043d0 <HAL_GetTick>
 80083b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083b6:	e008      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083b8:	f7fc f80a 	bl	80043d0 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b64      	cmp	r3, #100	; 0x64
 80083c4:	d901      	bls.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e195      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083ca:	4b6d      	ldr	r3, [pc, #436]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f0      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d021      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d11d      	bne.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083ea:	4b65      	ldr	r3, [pc, #404]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f0:	0c1b      	lsrs	r3, r3, #16
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083f8:	4b61      	ldr	r3, [pc, #388]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083fe:	0e1b      	lsrs	r3, r3, #24
 8008400:	f003 030f 	and.w	r3, r3, #15
 8008404:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	019a      	lsls	r2, r3, #6
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	431a      	orrs	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	061b      	lsls	r3, r3, #24
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	071b      	lsls	r3, r3, #28
 800841e:	4958      	ldr	r1, [pc, #352]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008420:	4313      	orrs	r3, r2
 8008422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843a:	d00a      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02e      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008450:	d129      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008452:	4b4b      	ldr	r3, [pc, #300]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008458:	0c1b      	lsrs	r3, r3, #16
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008460:	4b47      	ldr	r3, [pc, #284]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008466:	0f1b      	lsrs	r3, r3, #28
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	019a      	lsls	r2, r3, #6
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	431a      	orrs	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	071b      	lsls	r3, r3, #28
 8008486:	493e      	ldr	r1, [pc, #248]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800848e:	4b3c      	ldr	r3, [pc, #240]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008494:	f023 021f 	bic.w	r2, r3, #31
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	3b01      	subs	r3, #1
 800849e:	4938      	ldr	r1, [pc, #224]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01d      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084b2:	4b33      	ldr	r3, [pc, #204]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b8:	0e1b      	lsrs	r3, r3, #24
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084c0:	4b2f      	ldr	r3, [pc, #188]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c6:	0f1b      	lsrs	r3, r3, #28
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	019a      	lsls	r2, r3, #6
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	431a      	orrs	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	431a      	orrs	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	071b      	lsls	r3, r3, #28
 80084e6:	4926      	ldr	r1, [pc, #152]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d011      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	019a      	lsls	r2, r3, #6
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	071b      	lsls	r3, r3, #28
 8008516:	491a      	ldr	r1, [pc, #104]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a17      	ldr	r2, [pc, #92]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852a:	f7fb ff51 	bl	80043d0 <HAL_GetTick>
 800852e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008530:	e008      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008532:	f7fb ff4d 	bl	80043d0 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b64      	cmp	r3, #100	; 0x64
 800853e:	d901      	bls.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e0d8      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0f0      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2b01      	cmp	r3, #1
 8008554:	f040 80ce 	bne.w	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a08      	ldr	r2, [pc, #32]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800855e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008564:	f7fb ff34 	bl	80043d0 <HAL_GetTick>
 8008568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800856a:	e00b      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800856c:	f7fb ff30 	bl	80043d0 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b64      	cmp	r3, #100	; 0x64
 8008578:	d904      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e0bb      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800857e:	bf00      	nop
 8008580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008584:	4b5e      	ldr	r3, [pc, #376]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008590:	d0ec      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d02e      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d12a      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085ba:	4b51      	ldr	r3, [pc, #324]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085c8:	4b4d      	ldr	r3, [pc, #308]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	019a      	lsls	r2, r3, #6
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	041b      	lsls	r3, r3, #16
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	061b      	lsls	r3, r3, #24
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	071b      	lsls	r3, r3, #28
 80085ee:	4944      	ldr	r1, [pc, #272]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085f6:	4b42      	ldr	r3, [pc, #264]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	3b01      	subs	r3, #1
 8008606:	021b      	lsls	r3, r3, #8
 8008608:	493d      	ldr	r1, [pc, #244]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800860a:	4313      	orrs	r3, r2
 800860c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d022      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008624:	d11d      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862c:	0e1b      	lsrs	r3, r3, #24
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008634:	4b32      	ldr	r3, [pc, #200]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863a:	0f1b      	lsrs	r3, r3, #28
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	019a      	lsls	r2, r3, #6
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	041b      	lsls	r3, r3, #16
 800864e:	431a      	orrs	r2, r3
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	061b      	lsls	r3, r3, #24
 8008654:	431a      	orrs	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	071b      	lsls	r3, r3, #28
 800865a:	4929      	ldr	r1, [pc, #164]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d028      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008674:	0e1b      	lsrs	r3, r3, #24
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800867c:	4b20      	ldr	r3, [pc, #128]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	019a      	lsls	r2, r3, #6
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	431a      	orrs	r2, r3
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	071b      	lsls	r3, r3, #28
 80086a2:	4917      	ldr	r1, [pc, #92]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80086aa:	4b15      	ldr	r3, [pc, #84]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4911      	ldr	r1, [pc, #68]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a0e      	ldr	r2, [pc, #56]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086cc:	f7fb fe80 	bl	80043d0 <HAL_GetTick>
 80086d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086d2:	e008      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086d4:	f7fb fe7c 	bl	80043d0 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b64      	cmp	r3, #100	; 0x64
 80086e0:	d901      	bls.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e007      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f2:	d1ef      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	40023800 	.word	0x40023800

08008704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e049      	b.n	80087aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f841 	bl	80087b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f000 faa6 	bl	8008c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d001      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e054      	b.n	800888a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0201 	orr.w	r2, r2, #1
 80087f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a26      	ldr	r2, [pc, #152]	; (8008898 <HAL_TIM_Base_Start_IT+0xd0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d022      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880a:	d01d      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a22      	ldr	r2, [pc, #136]	; (800889c <HAL_TIM_Base_Start_IT+0xd4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d018      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d013      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1f      	ldr	r2, [pc, #124]	; (80088a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00e      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d009      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a1c      	ldr	r2, [pc, #112]	; (80088ac <HAL_TIM_Base_Start_IT+0xe4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d004      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0x80>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d115      	bne.n	8008874 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <HAL_TIM_Base_Start_IT+0xec>)
 8008850:	4013      	ands	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b06      	cmp	r3, #6
 8008858:	d015      	beq.n	8008886 <HAL_TIM_Base_Start_IT+0xbe>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008860:	d011      	beq.n	8008886 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0201 	orr.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008872:	e008      	b.n	8008886 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e000      	b.n	8008888 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40010400 	.word	0x40010400
 80088ac:	40014000 	.word	0x40014000
 80088b0:	40001800 	.word	0x40001800
 80088b4:	00010007 	.word	0x00010007

080088b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e08f      	b.n	80089ec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fb fbb5 	bl	8004050 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2202      	movs	r2, #2
 80088ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6899      	ldr	r1, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b3e      	ldr	r3, [pc, #248]	; (80089f4 <HAL_TIM_Encoder_Init+0x13c>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f000 f9c3 	bl	8008c94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4b31      	ldr	r3, [pc, #196]	; (80089f8 <HAL_TIM_Encoder_Init+0x140>)
 8008934:	4013      	ands	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	4313      	orrs	r3, r2
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <HAL_TIM_Encoder_Init+0x144>)
 800894e:	4013      	ands	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4b2a      	ldr	r3, [pc, #168]	; (8008a00 <HAL_TIM_Encoder_Init+0x148>)
 8008956:	4013      	ands	r3, r2
 8008958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	4313      	orrs	r3, r2
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	011a      	lsls	r2, r3, #4
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	031b      	lsls	r3, r3, #12
 8008978:	4313      	orrs	r3, r2
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008986:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800898e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	4313      	orrs	r3, r2
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	fffebff8 	.word	0xfffebff8
 80089f8:	fffffcfc 	.word	0xfffffcfc
 80089fc:	fffff3f3 	.word	0xfffff3f3
 8008a00:	ffff0f0f 	.word	0xffff0f0f

08008a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d122      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d11b      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0202 	mvn.w	r2, #2
 8008a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f905 	bl	8008c56 <HAL_TIM_IC_CaptureCallback>
 8008a4c:	e005      	b.n	8008a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f8f7 	bl	8008c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f908 	bl	8008c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d122      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d11b      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0204 	mvn.w	r2, #4
 8008a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f8db 	bl	8008c56 <HAL_TIM_IC_CaptureCallback>
 8008aa0:	e005      	b.n	8008aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f8cd 	bl	8008c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f8de 	bl	8008c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d122      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d11b      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f06f 0208 	mvn.w	r2, #8
 8008ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2204      	movs	r2, #4
 8008ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8b1 	bl	8008c56 <HAL_TIM_IC_CaptureCallback>
 8008af4:	e005      	b.n	8008b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8a3 	bl	8008c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8b4 	bl	8008c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d122      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d11b      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0210 	mvn.w	r2, #16
 8008b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2208      	movs	r2, #8
 8008b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f887 	bl	8008c56 <HAL_TIM_IC_CaptureCallback>
 8008b48:	e005      	b.n	8008b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f879 	bl	8008c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f88a 	bl	8008c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d10e      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d107      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0201 	mvn.w	r2, #1
 8008b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fa fe56 	bl	8003834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d10e      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba0:	2b80      	cmp	r3, #128	; 0x80
 8008ba2:	d107      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f9a8 	bl	8008f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc2:	d10e      	bne.n	8008be2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bce:	2b80      	cmp	r3, #128	; 0x80
 8008bd0:	d107      	bne.n	8008be2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f99b 	bl	8008f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b40      	cmp	r3, #64	; 0x40
 8008bee:	d10e      	bne.n	8008c0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfa:	2b40      	cmp	r3, #64	; 0x40
 8008bfc:	d107      	bne.n	8008c0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f838 	bl	8008c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	d10e      	bne.n	8008c3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d107      	bne.n	8008c3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f06f 0220 	mvn.w	r2, #32
 8008c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f95b 	bl	8008ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
	...

08008c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a40      	ldr	r2, [pc, #256]	; (8008da8 <TIM_Base_SetConfig+0x114>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d013      	beq.n	8008cd4 <TIM_Base_SetConfig+0x40>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb2:	d00f      	beq.n	8008cd4 <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a3d      	ldr	r2, [pc, #244]	; (8008dac <TIM_Base_SetConfig+0x118>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00b      	beq.n	8008cd4 <TIM_Base_SetConfig+0x40>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a3c      	ldr	r2, [pc, #240]	; (8008db0 <TIM_Base_SetConfig+0x11c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d007      	beq.n	8008cd4 <TIM_Base_SetConfig+0x40>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a3b      	ldr	r2, [pc, #236]	; (8008db4 <TIM_Base_SetConfig+0x120>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d003      	beq.n	8008cd4 <TIM_Base_SetConfig+0x40>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a3a      	ldr	r2, [pc, #232]	; (8008db8 <TIM_Base_SetConfig+0x124>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d108      	bne.n	8008ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2f      	ldr	r2, [pc, #188]	; (8008da8 <TIM_Base_SetConfig+0x114>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d02b      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf4:	d027      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	; (8008dac <TIM_Base_SetConfig+0x118>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d023      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2b      	ldr	r2, [pc, #172]	; (8008db0 <TIM_Base_SetConfig+0x11c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d01f      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2a      	ldr	r2, [pc, #168]	; (8008db4 <TIM_Base_SetConfig+0x120>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d01b      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a29      	ldr	r2, [pc, #164]	; (8008db8 <TIM_Base_SetConfig+0x124>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d017      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a28      	ldr	r2, [pc, #160]	; (8008dbc <TIM_Base_SetConfig+0x128>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d013      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a27      	ldr	r2, [pc, #156]	; (8008dc0 <TIM_Base_SetConfig+0x12c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00f      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a26      	ldr	r2, [pc, #152]	; (8008dc4 <TIM_Base_SetConfig+0x130>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00b      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a25      	ldr	r2, [pc, #148]	; (8008dc8 <TIM_Base_SetConfig+0x134>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d007      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <TIM_Base_SetConfig+0x138>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d003      	beq.n	8008d46 <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <TIM_Base_SetConfig+0x13c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d108      	bne.n	8008d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <TIM_Base_SetConfig+0x114>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d003      	beq.n	8008d8c <TIM_Base_SetConfig+0xf8>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a0c      	ldr	r2, [pc, #48]	; (8008db8 <TIM_Base_SetConfig+0x124>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d103      	bne.n	8008d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	615a      	str	r2, [r3, #20]
}
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40010000 	.word	0x40010000
 8008dac:	40000400 	.word	0x40000400
 8008db0:	40000800 	.word	0x40000800
 8008db4:	40000c00 	.word	0x40000c00
 8008db8:	40010400 	.word	0x40010400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40014400 	.word	0x40014400
 8008dc4:	40014800 	.word	0x40014800
 8008dc8:	40001800 	.word	0x40001800
 8008dcc:	40001c00 	.word	0x40001c00
 8008dd0:	40002000 	.word	0x40002000

08008dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e06d      	b.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a30      	ldr	r2, [pc, #192]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d004      	beq.n	8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a2f      	ldr	r2, [pc, #188]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d108      	bne.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a20      	ldr	r2, [pc, #128]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d022      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5e:	d01d      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1d      	ldr	r2, [pc, #116]	; (8008edc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d018      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1a      	ldr	r2, [pc, #104]	; (8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00e      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a16      	ldr	r2, [pc, #88]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a15      	ldr	r2, [pc, #84]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d10c      	bne.n	8008eb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	40010000 	.word	0x40010000
 8008ed8:	40010400 	.word	0x40010400
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40000800 	.word	0x40000800
 8008ee4:	40000c00 	.word	0x40000c00
 8008ee8:	40014000 	.word	0x40014000
 8008eec:	40001800 	.word	0x40001800

08008ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e040      	b.n	8008fc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fb f924 	bl	800419c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2224      	movs	r2, #36	; 0x24
 8008f58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fd32 	bl	80099d4 <UART_SetConfig>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e022      	b.n	8008fc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 ff8a 	bl	8009e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0201 	orr.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 f811 	bl	8009fe0 <UART_CheckIdleState>
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d171      	bne.n	80090c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <HAL_UART_Transmit+0x24>
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e06a      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2221      	movs	r2, #33	; 0x21
 8008ffc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ffe:	f7fb f9e7 	bl	80043d0 <HAL_GetTick>
 8009002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	88fa      	ldrh	r2, [r7, #6]
 8009008:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	88fa      	ldrh	r2, [r7, #6]
 8009010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d108      	bne.n	8009030 <HAL_UART_Transmit+0x68>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	e003      	b.n	8009038 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009038:	e02c      	b.n	8009094 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2200      	movs	r2, #0
 8009042:	2180      	movs	r1, #128	; 0x80
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f001 f818 	bl	800a07a <UART_WaitOnFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e038      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	3302      	adds	r3, #2
 800906e:	61bb      	str	r3, [r7, #24]
 8009070:	e007      	b.n	8009082 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	781a      	ldrb	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1cc      	bne.n	800903a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2200      	movs	r2, #0
 80090a8:	2140      	movs	r1, #64	; 0x40
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 ffe5 	bl	800a07a <UART_WaitOnFlagUntilTimeout>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e005      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e000      	b.n	80090c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80090c4:	2302      	movs	r3, #2
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08a      	sub	sp, #40	; 0x28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d165      	bne.n	80091b2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <HAL_UART_Transmit_DMA+0x22>
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e05e      	b.n	80091b4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	88fa      	ldrh	r2, [r7, #6]
 8009100:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88fa      	ldrh	r2, [r7, #6]
 8009108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2221      	movs	r2, #33	; 0x21
 8009118:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	2b00      	cmp	r3, #0
 8009120:	d027      	beq.n	8009172 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009126:	4a25      	ldr	r2, [pc, #148]	; (80091bc <HAL_UART_Transmit_DMA+0xec>)
 8009128:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912e:	4a24      	ldr	r2, [pc, #144]	; (80091c0 <HAL_UART_Transmit_DMA+0xf0>)
 8009130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	4a23      	ldr	r2, [pc, #140]	; (80091c4 <HAL_UART_Transmit_DMA+0xf4>)
 8009138:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913e:	2200      	movs	r2, #0
 8009140:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914a:	4619      	mov	r1, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3328      	adds	r3, #40	; 0x28
 8009152:	461a      	mov	r2, r3
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	f7fc f957 	bl	8005408 <HAL_DMA_Start_IT>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d008      	beq.n	8009172 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2210      	movs	r2, #16
 8009164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2220      	movs	r2, #32
 800916c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e020      	b.n	80091b4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2240      	movs	r2, #64	; 0x40
 8009178:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3308      	adds	r3, #8
 8009180:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	613b      	str	r3, [r7, #16]
   return(result);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919a:	623a      	str	r2, [r7, #32]
 800919c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	69f9      	ldr	r1, [r7, #28]
 80091a0:	6a3a      	ldr	r2, [r7, #32]
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e5      	bne.n	800917a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e000      	b.n	80091b4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3728      	adds	r7, #40	; 0x28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	0800a45d 	.word	0x0800a45d
 80091c0:	0800a4f3 	.word	0x0800a4f3
 80091c4:	0800a675 	.word	0x0800a675

080091c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091dc:	2b20      	cmp	r3, #32
 80091de:	d132      	bne.n	8009246 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <HAL_UART_Receive_DMA+0x24>
 80091e6:	88fb      	ldrh	r3, [r7, #6]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e02b      	b.n	8009248 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d018      	beq.n	8009236 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	613b      	str	r3, [r7, #16]
   return(result);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	623b      	str	r3, [r7, #32]
 8009224:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	69f9      	ldr	r1, [r7, #28]
 8009228:	6a3a      	ldr	r2, [r7, #32]
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e6      	bne.n	8009204 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	461a      	mov	r2, r3
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 ffe3 	bl	800a208 <UART_Start_Receive_DMA>
 8009242:	4603      	mov	r3, r0
 8009244:	e000      	b.n	8009248 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009246:	2302      	movs	r3, #2
  }
}
 8009248:	4618      	mov	r0, r3
 800924a:	3728      	adds	r7, #40	; 0x28
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b090      	sub	sp, #64	; 0x40
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009264:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009270:	2b80      	cmp	r3, #128	; 0x80
 8009272:	d139      	bne.n	80092e8 <HAL_UART_DMAStop+0x98>
 8009274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009276:	2b21      	cmp	r3, #33	; 0x21
 8009278:	d136      	bne.n	80092e8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	61fb      	str	r3, [r7, #28]
   return(result);
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009290:	637b      	str	r3, [r7, #52]	; 0x34
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800929a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800929c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e5      	bne.n	800927a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d015      	beq.n	80092e2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fc f904 	bl	80054c8 <HAL_DMA_Abort>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fc fb18 	bl	8005900 <HAL_DMA_GetError>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d105      	bne.n	80092e2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2210      	movs	r2, #16
 80092da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e044      	b.n	800936c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 f830 	bl	800a348 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f2:	2b40      	cmp	r3, #64	; 0x40
 80092f4:	d139      	bne.n	800936a <HAL_UART_DMAStop+0x11a>
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	2b22      	cmp	r3, #34	; 0x22
 80092fa:	d136      	bne.n	800936a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	60bb      	str	r3, [r7, #8]
   return(result);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009312:	633b      	str	r3, [r7, #48]	; 0x30
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931c:	61ba      	str	r2, [r7, #24]
 800931e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6979      	ldr	r1, [r7, #20]
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	613b      	str	r3, [r7, #16]
   return(result);
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009334:	2b00      	cmp	r3, #0
 8009336:	d015      	beq.n	8009364 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933c:	4618      	mov	r0, r3
 800933e:	f7fc f8c3 	bl	80054c8 <HAL_DMA_Abort>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00d      	beq.n	8009364 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800934c:	4618      	mov	r0, r3
 800934e:	f7fc fad7 	bl	8005900 <HAL_DMA_GetError>
 8009352:	4603      	mov	r3, r0
 8009354:	2b20      	cmp	r3, #32
 8009356:	d105      	bne.n	8009364 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2210      	movs	r2, #16
 800935c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e003      	b.n	800936c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 f815 	bl	800a394 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3740      	adds	r7, #64	; 0x40
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b0ba      	sub	sp, #232	; 0xe8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800939a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800939e:	f640 030f 	movw	r3, #2063	; 0x80f
 80093a2:	4013      	ands	r3, r2
 80093a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80093a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d115      	bne.n	80093dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80093b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00f      	beq.n	80093dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c0:	f003 0320 	and.w	r3, r3, #32
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d009      	beq.n	80093dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 82ac 	beq.w	800992a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
      }
      return;
 80093da:	e2a6      	b.n	800992a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 8117 	beq.w	8009614 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80093f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80093f6:	4b85      	ldr	r3, [pc, #532]	; (800960c <HAL_UART_IRQHandler+0x298>)
 80093f8:	4013      	ands	r3, r2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 810a 	beq.w	8009614 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d011      	beq.n	8009430 <HAL_UART_IRQHandler+0xbc>
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009426:	f043 0201 	orr.w	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d011      	beq.n	8009460 <HAL_UART_IRQHandler+0xec>
 800943c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00b      	beq.n	8009460 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2202      	movs	r2, #2
 800944e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009456:	f043 0204 	orr.w	r2, r3, #4
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d011      	beq.n	8009490 <HAL_UART_IRQHandler+0x11c>
 800946c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00b      	beq.n	8009490 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2204      	movs	r2, #4
 800947e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009486:	f043 0202 	orr.w	r2, r3, #2
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b00      	cmp	r3, #0
 800949a:	d017      	beq.n	80094cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800949c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80094a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2208      	movs	r2, #8
 80094ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c2:	f043 0208 	orr.w	r2, r3, #8
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d012      	beq.n	80094fe <HAL_UART_IRQHandler+0x18a>
 80094d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00c      	beq.n	80094fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f4:	f043 0220 	orr.w	r2, r3, #32
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 8212 	beq.w	800992e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00d      	beq.n	8009532 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d005      	beq.n	8009556 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800954a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800954e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009552:	2b00      	cmp	r3, #0
 8009554:	d04f      	beq.n	80095f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 ff1c 	bl	800a394 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d141      	bne.n	80095ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009596:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800959a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1d9      	bne.n	800956a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d013      	beq.n	80095e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c2:	4a13      	ldr	r2, [pc, #76]	; (8009610 <HAL_UART_IRQHandler+0x29c>)
 80095c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fb ffec 	bl	80055a8 <HAL_DMA_Abort_IT>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d017      	beq.n	8009606 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80095e0:	4610      	mov	r0, r2
 80095e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e4:	e00f      	b.n	8009606 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9d4 	bl	8009994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ec:	e00b      	b.n	8009606 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f9d0 	bl	8009994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f4:	e007      	b.n	8009606 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f9cc 	bl	8009994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009604:	e193      	b.n	800992e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009606:	bf00      	nop
    return;
 8009608:	e191      	b.n	800992e <HAL_UART_IRQHandler+0x5ba>
 800960a:	bf00      	nop
 800960c:	04000120 	.word	0x04000120
 8009610:	0800a6f3 	.word	0x0800a6f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009618:	2b01      	cmp	r3, #1
 800961a:	f040 814c 	bne.w	80098b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800961e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009622:	f003 0310 	and.w	r3, r3, #16
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 8145 	beq.w	80098b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800962c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 813e 	beq.w	80098b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2210      	movs	r2, #16
 8009640:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964c:	2b40      	cmp	r3, #64	; 0x40
 800964e:	f040 80b6 	bne.w	80097be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800965e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 8165 	beq.w	8009932 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800966e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009672:	429a      	cmp	r2, r3
 8009674:	f080 815d 	bcs.w	8009932 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800967e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968c:	f000 8086 	beq.w	800979c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	461a      	mov	r2, r3
 80096b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80096d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1da      	bne.n	8009690 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009702:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009706:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e1      	bne.n	80096da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800973a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800973c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009740:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e3      	bne.n	8009716 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800976a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800976c:	f023 0310 	bic.w	r3, r3, #16
 8009770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800977e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009780:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800978c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e4      	bne.n	800975c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009796:	4618      	mov	r0, r3
 8009798:	f7fb fe96 	bl	80054c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f8f6 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097bc:	e0b9      	b.n	8009932 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097d8:	b29b      	uxth	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80ab 	beq.w	8009936 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80097e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80a6 	beq.w	8009936 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800980c:	647b      	str	r3, [r7, #68]	; 0x44
 800980e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800981a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e4      	bne.n	80097ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	623b      	str	r3, [r7, #32]
   return(result);
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	f023 0301 	bic.w	r3, r3, #1
 8009836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009844:	633a      	str	r2, [r7, #48]	; 0x30
 8009846:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800984a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e3      	bne.n	8009820 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	60fb      	str	r3, [r7, #12]
   return(result);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	69b9      	ldr	r1, [r7, #24]
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	617b      	str	r3, [r7, #20]
   return(result);
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e4      	bne.n	800986c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2202      	movs	r2, #2
 80098a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f87a 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098b4:	e03f      	b.n	8009936 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00e      	beq.n	80098e0 <HAL_UART_IRQHandler+0x56c>
 80098c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f871 	bl	80099c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098de:	e02d      	b.n	800993c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00e      	beq.n	800990a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d008      	beq.n	800990a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01c      	beq.n	800993a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
    }
    return;
 8009908:	e017      	b.n	800993a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	d012      	beq.n	800993c <HAL_UART_IRQHandler+0x5c8>
 8009916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00c      	beq.n	800993c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fefb 	bl	800a71e <UART_EndTransmit_IT>
    return;
 8009928:	e008      	b.n	800993c <HAL_UART_IRQHandler+0x5c8>
      return;
 800992a:	bf00      	nop
 800992c:	e006      	b.n	800993c <HAL_UART_IRQHandler+0x5c8>
    return;
 800992e:	bf00      	nop
 8009930:	e004      	b.n	800993c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <HAL_UART_IRQHandler+0x5c8>
    return;
 800993a:	bf00      	nop
  }

}
 800993c:	37e8      	adds	r7, #232	; 0xe8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop

08009944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4ba6      	ldr	r3, [pc, #664]	; (8009c98 <UART_SetConfig+0x2c4>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	6812      	ldr	r2, [r2, #0]
 8009a06:	6979      	ldr	r1, [r7, #20]
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a94      	ldr	r2, [pc, #592]	; (8009c9c <UART_SetConfig+0x2c8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d120      	bne.n	8009a92 <UART_SetConfig+0xbe>
 8009a50:	4b93      	ldr	r3, [pc, #588]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d816      	bhi.n	8009a8c <UART_SetConfig+0xb8>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <UART_SetConfig+0x90>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a81 	.word	0x08009a81
 8009a6c:	08009a7b 	.word	0x08009a7b
 8009a70:	08009a87 	.word	0x08009a87
 8009a74:	2301      	movs	r3, #1
 8009a76:	77fb      	strb	r3, [r7, #31]
 8009a78:	e150      	b.n	8009d1c <UART_SetConfig+0x348>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	77fb      	strb	r3, [r7, #31]
 8009a7e:	e14d      	b.n	8009d1c <UART_SetConfig+0x348>
 8009a80:	2304      	movs	r3, #4
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e14a      	b.n	8009d1c <UART_SetConfig+0x348>
 8009a86:	2308      	movs	r3, #8
 8009a88:	77fb      	strb	r3, [r7, #31]
 8009a8a:	e147      	b.n	8009d1c <UART_SetConfig+0x348>
 8009a8c:	2310      	movs	r3, #16
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e144      	b.n	8009d1c <UART_SetConfig+0x348>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a83      	ldr	r2, [pc, #524]	; (8009ca4 <UART_SetConfig+0x2d0>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d132      	bne.n	8009b02 <UART_SetConfig+0x12e>
 8009a9c:	4b80      	ldr	r3, [pc, #512]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa2:	f003 030c 	and.w	r3, r3, #12
 8009aa6:	2b0c      	cmp	r3, #12
 8009aa8:	d828      	bhi.n	8009afc <UART_SetConfig+0x128>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <UART_SetConfig+0xdc>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009ae5 	.word	0x08009ae5
 8009ab4:	08009afd 	.word	0x08009afd
 8009ab8:	08009afd 	.word	0x08009afd
 8009abc:	08009afd 	.word	0x08009afd
 8009ac0:	08009af1 	.word	0x08009af1
 8009ac4:	08009afd 	.word	0x08009afd
 8009ac8:	08009afd 	.word	0x08009afd
 8009acc:	08009afd 	.word	0x08009afd
 8009ad0:	08009aeb 	.word	0x08009aeb
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009afd 	.word	0x08009afd
 8009adc:	08009afd 	.word	0x08009afd
 8009ae0:	08009af7 	.word	0x08009af7
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	77fb      	strb	r3, [r7, #31]
 8009ae8:	e118      	b.n	8009d1c <UART_SetConfig+0x348>
 8009aea:	2302      	movs	r3, #2
 8009aec:	77fb      	strb	r3, [r7, #31]
 8009aee:	e115      	b.n	8009d1c <UART_SetConfig+0x348>
 8009af0:	2304      	movs	r3, #4
 8009af2:	77fb      	strb	r3, [r7, #31]
 8009af4:	e112      	b.n	8009d1c <UART_SetConfig+0x348>
 8009af6:	2308      	movs	r3, #8
 8009af8:	77fb      	strb	r3, [r7, #31]
 8009afa:	e10f      	b.n	8009d1c <UART_SetConfig+0x348>
 8009afc:	2310      	movs	r3, #16
 8009afe:	77fb      	strb	r3, [r7, #31]
 8009b00:	e10c      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a68      	ldr	r2, [pc, #416]	; (8009ca8 <UART_SetConfig+0x2d4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d120      	bne.n	8009b4e <UART_SetConfig+0x17a>
 8009b0c:	4b64      	ldr	r3, [pc, #400]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b16:	2b30      	cmp	r3, #48	; 0x30
 8009b18:	d013      	beq.n	8009b42 <UART_SetConfig+0x16e>
 8009b1a:	2b30      	cmp	r3, #48	; 0x30
 8009b1c:	d814      	bhi.n	8009b48 <UART_SetConfig+0x174>
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d009      	beq.n	8009b36 <UART_SetConfig+0x162>
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d810      	bhi.n	8009b48 <UART_SetConfig+0x174>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <UART_SetConfig+0x15c>
 8009b2a:	2b10      	cmp	r3, #16
 8009b2c:	d006      	beq.n	8009b3c <UART_SetConfig+0x168>
 8009b2e:	e00b      	b.n	8009b48 <UART_SetConfig+0x174>
 8009b30:	2300      	movs	r3, #0
 8009b32:	77fb      	strb	r3, [r7, #31]
 8009b34:	e0f2      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b36:	2302      	movs	r3, #2
 8009b38:	77fb      	strb	r3, [r7, #31]
 8009b3a:	e0ef      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	77fb      	strb	r3, [r7, #31]
 8009b40:	e0ec      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b42:	2308      	movs	r3, #8
 8009b44:	77fb      	strb	r3, [r7, #31]
 8009b46:	e0e9      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	77fb      	strb	r3, [r7, #31]
 8009b4c:	e0e6      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a56      	ldr	r2, [pc, #344]	; (8009cac <UART_SetConfig+0x2d8>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d120      	bne.n	8009b9a <UART_SetConfig+0x1c6>
 8009b58:	4b51      	ldr	r3, [pc, #324]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b62:	2bc0      	cmp	r3, #192	; 0xc0
 8009b64:	d013      	beq.n	8009b8e <UART_SetConfig+0x1ba>
 8009b66:	2bc0      	cmp	r3, #192	; 0xc0
 8009b68:	d814      	bhi.n	8009b94 <UART_SetConfig+0x1c0>
 8009b6a:	2b80      	cmp	r3, #128	; 0x80
 8009b6c:	d009      	beq.n	8009b82 <UART_SetConfig+0x1ae>
 8009b6e:	2b80      	cmp	r3, #128	; 0x80
 8009b70:	d810      	bhi.n	8009b94 <UART_SetConfig+0x1c0>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <UART_SetConfig+0x1a8>
 8009b76:	2b40      	cmp	r3, #64	; 0x40
 8009b78:	d006      	beq.n	8009b88 <UART_SetConfig+0x1b4>
 8009b7a:	e00b      	b.n	8009b94 <UART_SetConfig+0x1c0>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	e0cc      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b82:	2302      	movs	r3, #2
 8009b84:	77fb      	strb	r3, [r7, #31]
 8009b86:	e0c9      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	77fb      	strb	r3, [r7, #31]
 8009b8c:	e0c6      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b8e:	2308      	movs	r3, #8
 8009b90:	77fb      	strb	r3, [r7, #31]
 8009b92:	e0c3      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b94:	2310      	movs	r3, #16
 8009b96:	77fb      	strb	r3, [r7, #31]
 8009b98:	e0c0      	b.n	8009d1c <UART_SetConfig+0x348>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a44      	ldr	r2, [pc, #272]	; (8009cb0 <UART_SetConfig+0x2dc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d125      	bne.n	8009bf0 <UART_SetConfig+0x21c>
 8009ba4:	4b3e      	ldr	r3, [pc, #248]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb2:	d017      	beq.n	8009be4 <UART_SetConfig+0x210>
 8009bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb8:	d817      	bhi.n	8009bea <UART_SetConfig+0x216>
 8009bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bbe:	d00b      	beq.n	8009bd8 <UART_SetConfig+0x204>
 8009bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc4:	d811      	bhi.n	8009bea <UART_SetConfig+0x216>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <UART_SetConfig+0x1fe>
 8009bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bce:	d006      	beq.n	8009bde <UART_SetConfig+0x20a>
 8009bd0:	e00b      	b.n	8009bea <UART_SetConfig+0x216>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e0a1      	b.n	8009d1c <UART_SetConfig+0x348>
 8009bd8:	2302      	movs	r3, #2
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e09e      	b.n	8009d1c <UART_SetConfig+0x348>
 8009bde:	2304      	movs	r3, #4
 8009be0:	77fb      	strb	r3, [r7, #31]
 8009be2:	e09b      	b.n	8009d1c <UART_SetConfig+0x348>
 8009be4:	2308      	movs	r3, #8
 8009be6:	77fb      	strb	r3, [r7, #31]
 8009be8:	e098      	b.n	8009d1c <UART_SetConfig+0x348>
 8009bea:	2310      	movs	r3, #16
 8009bec:	77fb      	strb	r3, [r7, #31]
 8009bee:	e095      	b.n	8009d1c <UART_SetConfig+0x348>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a2f      	ldr	r2, [pc, #188]	; (8009cb4 <UART_SetConfig+0x2e0>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d125      	bne.n	8009c46 <UART_SetConfig+0x272>
 8009bfa:	4b29      	ldr	r3, [pc, #164]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c08:	d017      	beq.n	8009c3a <UART_SetConfig+0x266>
 8009c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c0e:	d817      	bhi.n	8009c40 <UART_SetConfig+0x26c>
 8009c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c14:	d00b      	beq.n	8009c2e <UART_SetConfig+0x25a>
 8009c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c1a:	d811      	bhi.n	8009c40 <UART_SetConfig+0x26c>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <UART_SetConfig+0x254>
 8009c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c24:	d006      	beq.n	8009c34 <UART_SetConfig+0x260>
 8009c26:	e00b      	b.n	8009c40 <UART_SetConfig+0x26c>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	77fb      	strb	r3, [r7, #31]
 8009c2c:	e076      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	77fb      	strb	r3, [r7, #31]
 8009c32:	e073      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c34:	2304      	movs	r3, #4
 8009c36:	77fb      	strb	r3, [r7, #31]
 8009c38:	e070      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	77fb      	strb	r3, [r7, #31]
 8009c3e:	e06d      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c40:	2310      	movs	r3, #16
 8009c42:	77fb      	strb	r3, [r7, #31]
 8009c44:	e06a      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a1b      	ldr	r2, [pc, #108]	; (8009cb8 <UART_SetConfig+0x2e4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d138      	bne.n	8009cc2 <UART_SetConfig+0x2ee>
 8009c50:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <UART_SetConfig+0x2cc>)
 8009c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009c5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c5e:	d017      	beq.n	8009c90 <UART_SetConfig+0x2bc>
 8009c60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c64:	d82a      	bhi.n	8009cbc <UART_SetConfig+0x2e8>
 8009c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6a:	d00b      	beq.n	8009c84 <UART_SetConfig+0x2b0>
 8009c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c70:	d824      	bhi.n	8009cbc <UART_SetConfig+0x2e8>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <UART_SetConfig+0x2aa>
 8009c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c7a:	d006      	beq.n	8009c8a <UART_SetConfig+0x2b6>
 8009c7c:	e01e      	b.n	8009cbc <UART_SetConfig+0x2e8>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	77fb      	strb	r3, [r7, #31]
 8009c82:	e04b      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c84:	2302      	movs	r3, #2
 8009c86:	77fb      	strb	r3, [r7, #31]
 8009c88:	e048      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c8a:	2304      	movs	r3, #4
 8009c8c:	77fb      	strb	r3, [r7, #31]
 8009c8e:	e045      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c90:	2308      	movs	r3, #8
 8009c92:	77fb      	strb	r3, [r7, #31]
 8009c94:	e042      	b.n	8009d1c <UART_SetConfig+0x348>
 8009c96:	bf00      	nop
 8009c98:	efff69f3 	.word	0xefff69f3
 8009c9c:	40011000 	.word	0x40011000
 8009ca0:	40023800 	.word	0x40023800
 8009ca4:	40004400 	.word	0x40004400
 8009ca8:	40004800 	.word	0x40004800
 8009cac:	40004c00 	.word	0x40004c00
 8009cb0:	40005000 	.word	0x40005000
 8009cb4:	40011400 	.word	0x40011400
 8009cb8:	40007800 	.word	0x40007800
 8009cbc:	2310      	movs	r3, #16
 8009cbe:	77fb      	strb	r3, [r7, #31]
 8009cc0:	e02c      	b.n	8009d1c <UART_SetConfig+0x348>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a72      	ldr	r2, [pc, #456]	; (8009e90 <UART_SetConfig+0x4bc>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d125      	bne.n	8009d18 <UART_SetConfig+0x344>
 8009ccc:	4b71      	ldr	r3, [pc, #452]	; (8009e94 <UART_SetConfig+0x4c0>)
 8009cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009cd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009cda:	d017      	beq.n	8009d0c <UART_SetConfig+0x338>
 8009cdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ce0:	d817      	bhi.n	8009d12 <UART_SetConfig+0x33e>
 8009ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce6:	d00b      	beq.n	8009d00 <UART_SetConfig+0x32c>
 8009ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cec:	d811      	bhi.n	8009d12 <UART_SetConfig+0x33e>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <UART_SetConfig+0x326>
 8009cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cf6:	d006      	beq.n	8009d06 <UART_SetConfig+0x332>
 8009cf8:	e00b      	b.n	8009d12 <UART_SetConfig+0x33e>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	77fb      	strb	r3, [r7, #31]
 8009cfe:	e00d      	b.n	8009d1c <UART_SetConfig+0x348>
 8009d00:	2302      	movs	r3, #2
 8009d02:	77fb      	strb	r3, [r7, #31]
 8009d04:	e00a      	b.n	8009d1c <UART_SetConfig+0x348>
 8009d06:	2304      	movs	r3, #4
 8009d08:	77fb      	strb	r3, [r7, #31]
 8009d0a:	e007      	b.n	8009d1c <UART_SetConfig+0x348>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	77fb      	strb	r3, [r7, #31]
 8009d10:	e004      	b.n	8009d1c <UART_SetConfig+0x348>
 8009d12:	2310      	movs	r3, #16
 8009d14:	77fb      	strb	r3, [r7, #31]
 8009d16:	e001      	b.n	8009d1c <UART_SetConfig+0x348>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d24:	d15b      	bne.n	8009dde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d26:	7ffb      	ldrb	r3, [r7, #31]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d828      	bhi.n	8009d7e <UART_SetConfig+0x3aa>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <UART_SetConfig+0x360>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d69 	.word	0x08009d69
 8009d40:	08009d7f 	.word	0x08009d7f
 8009d44:	08009d6f 	.word	0x08009d6f
 8009d48:	08009d7f 	.word	0x08009d7f
 8009d4c:	08009d7f 	.word	0x08009d7f
 8009d50:	08009d7f 	.word	0x08009d7f
 8009d54:	08009d77 	.word	0x08009d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d58:	f7fe f852 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 8009d5c:	61b8      	str	r0, [r7, #24]
        break;
 8009d5e:	e013      	b.n	8009d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d60:	f7fe f862 	bl	8007e28 <HAL_RCC_GetPCLK2Freq>
 8009d64:	61b8      	str	r0, [r7, #24]
        break;
 8009d66:	e00f      	b.n	8009d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d68:	4b4b      	ldr	r3, [pc, #300]	; (8009e98 <UART_SetConfig+0x4c4>)
 8009d6a:	61bb      	str	r3, [r7, #24]
        break;
 8009d6c:	e00c      	b.n	8009d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d6e:	f7fd ff35 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 8009d72:	61b8      	str	r0, [r7, #24]
        break;
 8009d74:	e008      	b.n	8009d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d7a:	61bb      	str	r3, [r7, #24]
        break;
 8009d7c:	e004      	b.n	8009d88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	77bb      	strb	r3, [r7, #30]
        break;
 8009d86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d074      	beq.n	8009e78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	005a      	lsls	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	441a      	add	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2b0f      	cmp	r3, #15
 8009da8:	d916      	bls.n	8009dd8 <UART_SetConfig+0x404>
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db0:	d212      	bcs.n	8009dd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f023 030f 	bic.w	r3, r3, #15
 8009dba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	085b      	lsrs	r3, r3, #1
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	89fa      	ldrh	r2, [r7, #14]
 8009dd4:	60da      	str	r2, [r3, #12]
 8009dd6:	e04f      	b.n	8009e78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	77bb      	strb	r3, [r7, #30]
 8009ddc:	e04c      	b.n	8009e78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dde:	7ffb      	ldrb	r3, [r7, #31]
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	d828      	bhi.n	8009e36 <UART_SetConfig+0x462>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <UART_SetConfig+0x418>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e11 	.word	0x08009e11
 8009df0:	08009e19 	.word	0x08009e19
 8009df4:	08009e21 	.word	0x08009e21
 8009df8:	08009e37 	.word	0x08009e37
 8009dfc:	08009e27 	.word	0x08009e27
 8009e00:	08009e37 	.word	0x08009e37
 8009e04:	08009e37 	.word	0x08009e37
 8009e08:	08009e37 	.word	0x08009e37
 8009e0c:	08009e2f 	.word	0x08009e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e10:	f7fd fff6 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 8009e14:	61b8      	str	r0, [r7, #24]
        break;
 8009e16:	e013      	b.n	8009e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e18:	f7fe f806 	bl	8007e28 <HAL_RCC_GetPCLK2Freq>
 8009e1c:	61b8      	str	r0, [r7, #24]
        break;
 8009e1e:	e00f      	b.n	8009e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e20:	4b1d      	ldr	r3, [pc, #116]	; (8009e98 <UART_SetConfig+0x4c4>)
 8009e22:	61bb      	str	r3, [r7, #24]
        break;
 8009e24:	e00c      	b.n	8009e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e26:	f7fd fed9 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 8009e2a:	61b8      	str	r0, [r7, #24]
        break;
 8009e2c:	e008      	b.n	8009e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e32:	61bb      	str	r3, [r7, #24]
        break;
 8009e34:	e004      	b.n	8009e40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	77bb      	strb	r3, [r7, #30]
        break;
 8009e3e:	bf00      	nop
    }

    if (pclk != 0U)
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d018      	beq.n	8009e78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	085a      	lsrs	r2, r3, #1
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	441a      	add	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2b0f      	cmp	r3, #15
 8009e5e:	d909      	bls.n	8009e74 <UART_SetConfig+0x4a0>
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e66:	d205      	bcs.n	8009e74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	60da      	str	r2, [r3, #12]
 8009e72:	e001      	b.n	8009e78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009e84:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	40007c00 	.word	0x40007c00
 8009e94:	40023800 	.word	0x40023800
 8009e98:	00f42400 	.word	0x00f42400

08009e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00a      	beq.n	8009f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	f003 0308 	and.w	r3, r3, #8
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00a      	beq.n	8009f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d01a      	beq.n	8009fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f9a:	d10a      	bne.n	8009fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00a      	beq.n	8009fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	605a      	str	r2, [r3, #4]
  }
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ff0:	f7fa f9ee 	bl	80043d0 <HAL_GetTick>
 8009ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	2b08      	cmp	r3, #8
 800a002:	d10e      	bne.n	800a022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f831 	bl	800a07a <UART_WaitOnFlagUntilTimeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e027      	b.n	800a072 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	d10e      	bne.n	800a04e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f81b 	bl	800a07a <UART_WaitOnFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e011      	b.n	800a072 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2220      	movs	r2, #32
 800a058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b09c      	sub	sp, #112	; 0x70
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	4613      	mov	r3, r2
 800a088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a08a:	e0a7      	b.n	800a1dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a08c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a092:	f000 80a3 	beq.w	800a1dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a096:	f7fa f99b 	bl	80043d0 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d302      	bcc.n	800a0ac <UART_WaitOnFlagUntilTimeout+0x32>
 800a0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d13f      	bne.n	800a12c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0c0:	667b      	str	r3, [r7, #100]	; 0x64
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e6      	bne.n	800a0ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	663b      	str	r3, [r7, #96]	; 0x60
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800a100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e5      	bne.n	800a0de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e068      	b.n	800a1fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	d050      	beq.n	800a1dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a148:	d148      	bne.n	800a1dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a152:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
 800a174:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e6      	bne.n	800a154 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3308      	adds	r3, #8
 800a18c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	613b      	str	r3, [r7, #16]
   return(result);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1a6:	623a      	str	r2, [r7, #32]
 800a1a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	69f9      	ldr	r1, [r7, #28]
 800a1ac:	6a3a      	ldr	r2, [r7, #32]
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e5      	bne.n	800a186 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e010      	b.n	800a1fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	69da      	ldr	r2, [r3, #28]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	bf0c      	ite	eq
 800a1ec:	2301      	moveq	r3, #1
 800a1ee:	2300      	movne	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	f43f af48 	beq.w	800a08c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3770      	adds	r7, #112	; 0x70
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b096      	sub	sp, #88	; 0x58
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2222      	movs	r2, #34	; 0x22
 800a230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d028      	beq.n	800a28e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a240:	4a3e      	ldr	r2, [pc, #248]	; (800a33c <UART_Start_Receive_DMA+0x134>)
 800a242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a248:	4a3d      	ldr	r2, [pc, #244]	; (800a340 <UART_Start_Receive_DMA+0x138>)
 800a24a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a250:	4a3c      	ldr	r2, [pc, #240]	; (800a344 <UART_Start_Receive_DMA+0x13c>)
 800a252:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a258:	2200      	movs	r2, #0
 800a25a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3324      	adds	r3, #36	; 0x24
 800a266:	4619      	mov	r1, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	461a      	mov	r2, r3
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	f7fb f8ca 	bl	8005408 <HAL_DMA_Start_IT>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d009      	beq.n	800a28e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2210      	movs	r2, #16
 800a27e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e051      	b.n	800a332 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d018      	beq.n	800a2c8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2b6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	f043 0301 	orr.w	r3, r3, #1
 800a2de:	653b      	str	r3, [r7, #80]	; 0x50
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2e8:	637a      	str	r2, [r7, #52]	; 0x34
 800a2ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e5      	bne.n	800a2c8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	613b      	str	r3, [r7, #16]
   return(result);
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a312:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a31c:	623a      	str	r2, [r7, #32]
 800a31e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	69f9      	ldr	r1, [r7, #28]
 800a322:	6a3a      	ldr	r2, [r7, #32]
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	61bb      	str	r3, [r7, #24]
   return(result);
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e5      	bne.n	800a2fc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3758      	adds	r7, #88	; 0x58
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	0800a50f 	.word	0x0800a50f
 800a340:	0800a637 	.word	0x0800a637
 800a344:	0800a675 	.word	0x0800a675

0800a348 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b089      	sub	sp, #36	; 0x24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a364:	61fb      	str	r3, [r7, #28]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	61bb      	str	r3, [r7, #24]
 800a370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6979      	ldr	r1, [r7, #20]
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	613b      	str	r3, [r7, #16]
   return(result);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e6      	bne.n	800a350 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a388:	bf00      	nop
 800a38a:	3724      	adds	r7, #36	; 0x24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b095      	sub	sp, #84	; 0x54
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ba:	643b      	str	r3, [r7, #64]	; 0x40
 800a3bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3c2:	e841 2300 	strex	r3, r2, [r1]
 800a3c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1e6      	bne.n	800a39c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	f023 0301 	bic.w	r3, r3, #1
 800a3e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e5      	bne.n	800a3ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a406:	2b01      	cmp	r3, #1
 800a408:	d118      	bne.n	800a43c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	60bb      	str	r3, [r7, #8]
   return(result);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f023 0310 	bic.w	r3, r3, #16
 800a41e:	647b      	str	r3, [r7, #68]	; 0x44
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a428:	61bb      	str	r3, [r7, #24]
 800a42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6979      	ldr	r1, [r7, #20]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	613b      	str	r3, [r7, #16]
   return(result);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e6      	bne.n	800a40a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a450:	bf00      	nop
 800a452:	3754      	adds	r7, #84	; 0x54
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b090      	sub	sp, #64	; 0x40
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a472:	d037      	beq.n	800a4e4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a476:	2200      	movs	r2, #0
 800a478:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3308      	adds	r3, #8
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	623b      	str	r3, [r7, #32]
   return(result);
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a492:	63bb      	str	r3, [r7, #56]	; 0x38
 800a494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3308      	adds	r3, #8
 800a49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a49c:	633a      	str	r2, [r7, #48]	; 0x30
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e5      	bne.n	800a47c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	69b9      	ldr	r1, [r7, #24]
 800a4d4:	69fa      	ldr	r2, [r7, #28]
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	617b      	str	r3, [r7, #20]
   return(result);
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e6      	bne.n	800a4b0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4e2:	e002      	b.n	800a4ea <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a4e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a4e6:	f7ff fa2d 	bl	8009944 <HAL_UART_TxCpltCallback>
}
 800a4ea:	bf00      	nop
 800a4ec:	3740      	adds	r7, #64	; 0x40
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fa29 	bl	8009958 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a506:	bf00      	nop
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b09c      	sub	sp, #112	; 0x70
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a524:	d071      	beq.n	800a60a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a53c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a53e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a542:	66bb      	str	r3, [r7, #104]	; 0x68
 800a544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a54c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a54e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e6      	bne.n	800a52e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3308      	adds	r3, #8
 800a566:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a572:	f023 0301 	bic.w	r3, r3, #1
 800a576:	667b      	str	r3, [r7, #100]	; 0x64
 800a578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3308      	adds	r3, #8
 800a57e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a580:	647a      	str	r2, [r7, #68]	; 0x44
 800a582:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e5      	bne.n	800a560 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5aa:	663b      	str	r3, [r7, #96]	; 0x60
 800a5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5b4:	633a      	str	r2, [r7, #48]	; 0x30
 800a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e5      	bne.n	800a594 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d118      	bne.n	800a60a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	e853 3f00 	ldrex	r3, [r3]
 800a5e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f023 0310 	bic.w	r3, r3, #16
 800a5ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	69b9      	ldr	r1, [r7, #24]
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	e841 2300 	strex	r3, r2, [r1]
 800a602:	617b      	str	r3, [r7, #20]
   return(result);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e6      	bne.n	800a5d8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a60c:	2200      	movs	r2, #0
 800a60e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a614:	2b01      	cmp	r3, #1
 800a616:	d107      	bne.n	800a628 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a61e:	4619      	mov	r1, r3
 800a620:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a622:	f7ff f9c1 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a626:	e002      	b.n	800a62e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a628:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a62a:	f7ff f99f 	bl	800996c <HAL_UART_RxCpltCallback>
}
 800a62e:	bf00      	nop
 800a630:	3770      	adds	r7, #112	; 0x70
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d109      	bne.n	800a666 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a658:	085b      	lsrs	r3, r3, #1
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4619      	mov	r1, r3
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff f9a2 	bl	80099a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a664:	e002      	b.n	800a66c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff f98a 	bl	8009980 <HAL_UART_RxHalfCpltCallback>
}
 800a66c:	bf00      	nop
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a680:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a686:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69a:	2b80      	cmp	r3, #128	; 0x80
 800a69c:	d109      	bne.n	800a6b2 <UART_DMAError+0x3e>
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b21      	cmp	r3, #33	; 0x21
 800a6a2:	d106      	bne.n	800a6b2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a6ac:	6978      	ldr	r0, [r7, #20]
 800a6ae:	f7ff fe4b 	bl	800a348 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	d109      	bne.n	800a6d4 <UART_DMAError+0x60>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b22      	cmp	r3, #34	; 0x22
 800a6c4:	d106      	bne.n	800a6d4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a6ce:	6978      	ldr	r0, [r7, #20]
 800a6d0:	f7ff fe60 	bl	800a394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6da:	f043 0210 	orr.w	r2, r3, #16
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6e4:	6978      	ldr	r0, [r7, #20]
 800a6e6:	f7ff f955 	bl	8009994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6ea:	bf00      	nop
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff f93f 	bl	8009994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b088      	sub	sp, #32
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	60bb      	str	r3, [r7, #8]
   return(result);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	6979      	ldr	r1, [r7, #20]
 800a74a:	69ba      	ldr	r2, [r7, #24]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	613b      	str	r3, [r7, #16]
   return(result);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e6      	bne.n	800a726 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2220      	movs	r2, #32
 800a75c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff f8ed 	bl	8009944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a76a:	bf00      	nop
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
	...

0800a774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a774:	b084      	sub	sp, #16
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	f107 001c 	add.w	r0, r7, #28
 800a782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d120      	bne.n	800a7ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68da      	ldr	r2, [r3, #12]
 800a79c:	4b20      	ldr	r3, [pc, #128]	; (800a820 <USB_CoreInit+0xac>)
 800a79e:	4013      	ands	r3, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d105      	bne.n	800a7c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fbee 	bl	800bfa4 <USB_CoreReset>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]
 800a7cc:	e010      	b.n	800a7f0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 fbe2 	bl	800bfa4 <USB_CoreReset>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d10b      	bne.n	800a80e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f043 0206 	orr.w	r2, r3, #6
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f043 0220 	orr.w	r2, r3, #32
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a81a:	b004      	add	sp, #16
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	ffbdffbf 	.word	0xffbdffbf

0800a824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d165      	bne.n	800a904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4a41      	ldr	r2, [pc, #260]	; (800a940 <USB_SetTurnaroundTime+0x11c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d906      	bls.n	800a84e <USB_SetTurnaroundTime+0x2a>
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4a40      	ldr	r2, [pc, #256]	; (800a944 <USB_SetTurnaroundTime+0x120>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d202      	bcs.n	800a84e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a848:	230f      	movs	r3, #15
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e062      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	4a3c      	ldr	r2, [pc, #240]	; (800a944 <USB_SetTurnaroundTime+0x120>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d306      	bcc.n	800a864 <USB_SetTurnaroundTime+0x40>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4a3b      	ldr	r2, [pc, #236]	; (800a948 <USB_SetTurnaroundTime+0x124>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d202      	bcs.n	800a864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a85e:	230e      	movs	r3, #14
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	e057      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4a38      	ldr	r2, [pc, #224]	; (800a948 <USB_SetTurnaroundTime+0x124>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d306      	bcc.n	800a87a <USB_SetTurnaroundTime+0x56>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4a37      	ldr	r2, [pc, #220]	; (800a94c <USB_SetTurnaroundTime+0x128>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d202      	bcs.n	800a87a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a874:	230d      	movs	r3, #13
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e04c      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4a33      	ldr	r2, [pc, #204]	; (800a94c <USB_SetTurnaroundTime+0x128>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d306      	bcc.n	800a890 <USB_SetTurnaroundTime+0x6c>
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	4a32      	ldr	r2, [pc, #200]	; (800a950 <USB_SetTurnaroundTime+0x12c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d802      	bhi.n	800a890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a88a:	230c      	movs	r3, #12
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	e041      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4a2f      	ldr	r2, [pc, #188]	; (800a950 <USB_SetTurnaroundTime+0x12c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d906      	bls.n	800a8a6 <USB_SetTurnaroundTime+0x82>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4a2e      	ldr	r2, [pc, #184]	; (800a954 <USB_SetTurnaroundTime+0x130>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d802      	bhi.n	800a8a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8a0:	230b      	movs	r3, #11
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e036      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4a2a      	ldr	r2, [pc, #168]	; (800a954 <USB_SetTurnaroundTime+0x130>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d906      	bls.n	800a8bc <USB_SetTurnaroundTime+0x98>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	4a29      	ldr	r2, [pc, #164]	; (800a958 <USB_SetTurnaroundTime+0x134>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d802      	bhi.n	800a8bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8b6:	230a      	movs	r3, #10
 800a8b8:	617b      	str	r3, [r7, #20]
 800a8ba:	e02b      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4a26      	ldr	r2, [pc, #152]	; (800a958 <USB_SetTurnaroundTime+0x134>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d906      	bls.n	800a8d2 <USB_SetTurnaroundTime+0xae>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4a25      	ldr	r2, [pc, #148]	; (800a95c <USB_SetTurnaroundTime+0x138>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d202      	bcs.n	800a8d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8cc:	2309      	movs	r3, #9
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e020      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4a21      	ldr	r2, [pc, #132]	; (800a95c <USB_SetTurnaroundTime+0x138>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d306      	bcc.n	800a8e8 <USB_SetTurnaroundTime+0xc4>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4a20      	ldr	r2, [pc, #128]	; (800a960 <USB_SetTurnaroundTime+0x13c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d802      	bhi.n	800a8e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e015      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4a1d      	ldr	r2, [pc, #116]	; (800a960 <USB_SetTurnaroundTime+0x13c>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d906      	bls.n	800a8fe <USB_SetTurnaroundTime+0xda>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4a1c      	ldr	r2, [pc, #112]	; (800a964 <USB_SetTurnaroundTime+0x140>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d202      	bcs.n	800a8fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a8f8:	2307      	movs	r3, #7
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e00a      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a8fe:	2306      	movs	r3, #6
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e007      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a904:	79fb      	ldrb	r3, [r7, #7]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d102      	bne.n	800a910 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a90a:	2309      	movs	r3, #9
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	e001      	b.n	800a914 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a910:	2309      	movs	r3, #9
 800a912:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68da      	ldr	r2, [r3, #12]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	029b      	lsls	r3, r3, #10
 800a928:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a92c:	431a      	orrs	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	371c      	adds	r7, #28
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	00d8acbf 	.word	0x00d8acbf
 800a944:	00e4e1c0 	.word	0x00e4e1c0
 800a948:	00f42400 	.word	0x00f42400
 800a94c:	01067380 	.word	0x01067380
 800a950:	011a499f 	.word	0x011a499f
 800a954:	01312cff 	.word	0x01312cff
 800a958:	014ca43f 	.word	0x014ca43f
 800a95c:	016e3600 	.word	0x016e3600
 800a960:	01a6ab1f 	.word	0x01a6ab1f
 800a964:	01e84800 	.word	0x01e84800

0800a968 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f043 0201 	orr.w	r2, r3, #1
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f023 0201 	bic.w	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d115      	bne.n	800a9fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9da:	2001      	movs	r0, #1
 800a9dc:	f7f9 fd04 	bl	80043e8 <HAL_Delay>
      ms++;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f001 fa4b 	bl	800be82 <USB_GetMode>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d01e      	beq.n	800aa30 <USB_SetCurrentMode+0x84>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b31      	cmp	r3, #49	; 0x31
 800a9f6:	d9f0      	bls.n	800a9da <USB_SetCurrentMode+0x2e>
 800a9f8:	e01a      	b.n	800aa30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d115      	bne.n	800aa2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	f7f9 fceb 	bl	80043e8 <HAL_Delay>
      ms++;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3301      	adds	r3, #1
 800aa16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 fa32 	bl	800be82 <USB_GetMode>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <USB_SetCurrentMode+0x84>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b31      	cmp	r3, #49	; 0x31
 800aa28:	d9f0      	bls.n	800aa0c <USB_SetCurrentMode+0x60>
 800aa2a:	e001      	b.n	800aa30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e005      	b.n	800aa3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b32      	cmp	r3, #50	; 0x32
 800aa34:	d101      	bne.n	800aa3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa44:	b084      	sub	sp, #16
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b086      	sub	sp, #24
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa5e:	2300      	movs	r3, #0
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	e009      	b.n	800aa78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3340      	adds	r3, #64	; 0x40
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	2200      	movs	r2, #0
 800aa70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2b0e      	cmp	r3, #14
 800aa7c:	d9f2      	bls.n	800aa64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d11c      	bne.n	800aabe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e005      	b.n	800aaca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aad0:	461a      	mov	r2, r3
 800aad2:	2300      	movs	r3, #0
 800aad4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aadc:	4619      	mov	r1, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae4:	461a      	mov	r2, r3
 800aae6:	680b      	ldr	r3, [r1, #0]
 800aae8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d10c      	bne.n	800ab0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f965 	bl	800adc8 <USB_SetDevSpeed>
 800aafe:	e008      	b.n	800ab12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab00:	2101      	movs	r1, #1
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f960 	bl	800adc8 <USB_SetDevSpeed>
 800ab08:	e003      	b.n	800ab12 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab0a:	2103      	movs	r1, #3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f95b 	bl	800adc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab12:	2110      	movs	r1, #16
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f8f3 	bl	800ad00 <USB_FlushTxFifo>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f91f 	bl	800ad68 <USB_FlushRxFifo>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab46:	461a      	mov	r2, r3
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab52:	461a      	mov	r2, r3
 800ab54:	2300      	movs	r3, #0
 800ab56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	613b      	str	r3, [r7, #16]
 800ab5c:	e043      	b.n	800abe6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab74:	d118      	bne.n	800aba8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	e013      	b.n	800abba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	e008      	b.n	800abba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb4:	461a      	mov	r2, r3
 800abb6:	2300      	movs	r3, #0
 800abb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc6:	461a      	mov	r2, r3
 800abc8:	2300      	movs	r3, #0
 800abca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd8:	461a      	mov	r2, r3
 800abda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	3301      	adds	r3, #1
 800abe4:	613b      	str	r3, [r7, #16]
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	429a      	cmp	r2, r3
 800abec:	d3b7      	bcc.n	800ab5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abee:	2300      	movs	r3, #0
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e043      	b.n	800ac7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac0a:	d118      	bne.n	800ac3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	e013      	b.n	800ac50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac34:	461a      	mov	r2, r3
 800ac36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	e008      	b.n	800ac50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	2300      	movs	r3, #0
 800ac60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	613b      	str	r3, [r7, #16]
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d3b7      	bcc.n	800abf4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aca4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d105      	bne.n	800acb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f043 0210 	orr.w	r2, r3, #16
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	699a      	ldr	r2, [r3, #24]
 800acbc:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <USB_DevInit+0x2b4>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800acc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d005      	beq.n	800acd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	f043 0208 	orr.w	r2, r3, #8
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d105      	bne.n	800ace8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	4b06      	ldr	r3, [pc, #24]	; (800acfc <USB_DevInit+0x2b8>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ace8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acf4:	b004      	add	sp, #16
 800acf6:	4770      	bx	lr
 800acf8:	803c3800 	.word	0x803c3800
 800acfc:	40000004 	.word	0x40000004

0800ad00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3301      	adds	r3, #1
 800ad12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <USB_FlushTxFifo+0x64>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d901      	bls.n	800ad20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e01b      	b.n	800ad58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	daf2      	bge.n	800ad0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	019b      	lsls	r3, r3, #6
 800ad30:	f043 0220 	orr.w	r2, r3, #32
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	4a08      	ldr	r2, [pc, #32]	; (800ad64 <USB_FlushTxFifo+0x64>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d901      	bls.n	800ad4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad46:	2303      	movs	r3, #3
 800ad48:	e006      	b.n	800ad58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	f003 0320 	and.w	r3, r3, #32
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d0f0      	beq.n	800ad38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	00030d40 	.word	0x00030d40

0800ad68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	4a11      	ldr	r2, [pc, #68]	; (800adc4 <USB_FlushRxFifo+0x5c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d901      	bls.n	800ad86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e018      	b.n	800adb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	daf2      	bge.n	800ad74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2210      	movs	r2, #16
 800ad96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4a08      	ldr	r2, [pc, #32]	; (800adc4 <USB_FlushRxFifo+0x5c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d901      	bls.n	800adaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e006      	b.n	800adb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	f003 0310 	and.w	r3, r3, #16
 800adb2:	2b10      	cmp	r3, #16
 800adb4:	d0f0      	beq.n	800ad98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	00030d40 	.word	0x00030d40

0800adc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ade8:	4313      	orrs	r3, r2
 800adea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b087      	sub	sp, #28
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f003 0306 	and.w	r3, r3, #6
 800ae12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d102      	bne.n	800ae20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]
 800ae1e:	e00a      	b.n	800ae36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d002      	beq.n	800ae2c <USB_GetDevSpeed+0x32>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b06      	cmp	r3, #6
 800ae2a:	d102      	bne.n	800ae32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	75fb      	strb	r3, [r7, #23]
 800ae30:	e001      	b.n	800ae36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae32:	230f      	movs	r3, #15
 800ae34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	371c      	adds	r7, #28
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d139      	bne.n	800aed4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae66:	69da      	ldr	r2, [r3, #28]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f003 030f 	and.w	r3, r3, #15
 800ae70:	2101      	movs	r1, #1
 800ae72:	fa01 f303 	lsl.w	r3, r1, r3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	68f9      	ldr	r1, [r7, #12]
 800ae7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d153      	bne.n	800af40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	791b      	ldrb	r3, [r3, #4]
 800aeb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aeb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	059b      	lsls	r3, r3, #22
 800aeba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aebc:	431a      	orrs	r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	0159      	lsls	r1, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	440b      	add	r3, r1
 800aec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeca:	4619      	mov	r1, r3
 800aecc:	4b20      	ldr	r3, [pc, #128]	; (800af50 <USB_ActivateEndpoint+0x10c>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	600b      	str	r3, [r1, #0]
 800aed2:	e035      	b.n	800af40 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeda:	69da      	ldr	r2, [r3, #28]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	2101      	movs	r1, #1
 800aee6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeea:	041b      	lsls	r3, r3, #16
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aef2:	4313      	orrs	r3, r2
 800aef4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	015a      	lsls	r2, r3, #5
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	4413      	add	r3, r2
 800aefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d119      	bne.n	800af40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	791b      	ldrb	r3, [r3, #4]
 800af26:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af28:	430b      	orrs	r3, r1
 800af2a:	431a      	orrs	r2, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	0159      	lsls	r1, r3, #5
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	440b      	add	r3, r1
 800af34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af38:	4619      	mov	r1, r3
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <USB_ActivateEndpoint+0x10c>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	10008000 	.word	0x10008000

0800af54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d161      	bne.n	800b034 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af86:	d11f      	bne.n	800afc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	0151      	lsls	r1, r2, #5
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	440a      	add	r2, r1
 800af9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	0151      	lsls	r1, r2, #5
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	440a      	add	r2, r1
 800afbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	f003 030f 	and.w	r3, r3, #15
 800afd8:	2101      	movs	r1, #1
 800afda:	fa01 f303 	lsl.w	r3, r1, r3
 800afde:	b29b      	uxth	r3, r3
 800afe0:	43db      	mvns	r3, r3
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afe8:	4013      	ands	r3, r2
 800afea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff2:	69da      	ldr	r2, [r3, #28]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	f003 030f 	and.w	r3, r3, #15
 800affc:	2101      	movs	r1, #1
 800affe:	fa01 f303 	lsl.w	r3, r1, r3
 800b002:	b29b      	uxth	r3, r3
 800b004:	43db      	mvns	r3, r3
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b00c:	4013      	ands	r3, r2
 800b00e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	0159      	lsls	r1, r3, #5
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	440b      	add	r3, r1
 800b026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02a:	4619      	mov	r1, r3
 800b02c:	4b35      	ldr	r3, [pc, #212]	; (800b104 <USB_DeactivateEndpoint+0x1b0>)
 800b02e:	4013      	ands	r3, r2
 800b030:	600b      	str	r3, [r1, #0]
 800b032:	e060      	b.n	800b0f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b04a:	d11f      	bne.n	800b08c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4413      	add	r3, r2
 800b054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	0151      	lsls	r1, r2, #5
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	440a      	add	r2, r1
 800b062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b06a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	0151      	lsls	r1, r2, #5
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	440a      	add	r2, r1
 800b082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b08a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f003 030f 	and.w	r3, r3, #15
 800b09c:	2101      	movs	r1, #1
 800b09e:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a2:	041b      	lsls	r3, r3, #16
 800b0a4:	43db      	mvns	r3, r3
 800b0a6:	68f9      	ldr	r1, [r7, #12]
 800b0a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	f003 030f 	and.w	r3, r3, #15
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c6:	041b      	lsls	r3, r3, #16
 800b0c8:	43db      	mvns	r3, r3
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	0159      	lsls	r1, r3, #5
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	440b      	add	r3, r1
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <USB_DeactivateEndpoint+0x1b4>)
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	ec337800 	.word	0xec337800
 800b108:	eff37800 	.word	0xeff37800

0800b10c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af02      	add	r7, sp, #8
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	f040 8163 	bne.w	800b3f4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d132      	bne.n	800b19c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	015a      	lsls	r2, r3, #5
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	4413      	add	r3, r2
 800b13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	0159      	lsls	r1, r3, #5
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	440b      	add	r3, r1
 800b14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b150:	4619      	mov	r1, r3
 800b152:	4ba5      	ldr	r3, [pc, #660]	; (800b3e8 <USB_EPStartXfer+0x2dc>)
 800b154:	4013      	ands	r3, r2
 800b156:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b184:	691a      	ldr	r2, [r3, #16]
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	0159      	lsls	r1, r3, #5
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	440b      	add	r3, r1
 800b18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b192:	4619      	mov	r1, r3
 800b194:	4b95      	ldr	r3, [pc, #596]	; (800b3ec <USB_EPStartXfer+0x2e0>)
 800b196:	4013      	ands	r3, r2
 800b198:	610b      	str	r3, [r1, #16]
 800b19a:	e074      	b.n	800b286 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a8:	691a      	ldr	r2, [r3, #16]
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	0159      	lsls	r1, r3, #5
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	440b      	add	r3, r1
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4b8c      	ldr	r3, [pc, #560]	; (800b3ec <USB_EPStartXfer+0x2e0>)
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	0159      	lsls	r1, r3, #5
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	440b      	add	r3, r1
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4b83      	ldr	r3, [pc, #524]	; (800b3e8 <USB_EPStartXfer+0x2dc>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6999      	ldr	r1, [r3, #24]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	440b      	add	r3, r1
 800b1f8:	1e59      	subs	r1, r3, #1
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800b202:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b204:	4b7a      	ldr	r3, [pc, #488]	; (800b3f0 <USB_EPStartXfer+0x2e4>)
 800b206:	400b      	ands	r3, r1
 800b208:	69b9      	ldr	r1, [r7, #24]
 800b20a:	0148      	lsls	r0, r1, #5
 800b20c:	69f9      	ldr	r1, [r7, #28]
 800b20e:	4401      	add	r1, r0
 800b210:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b214:	4313      	orrs	r3, r2
 800b216:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b22e:	69b9      	ldr	r1, [r7, #24]
 800b230:	0148      	lsls	r0, r1, #5
 800b232:	69f9      	ldr	r1, [r7, #28]
 800b234:	4401      	add	r1, r0
 800b236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b23a:	4313      	orrs	r3, r2
 800b23c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	791b      	ldrb	r3, [r3, #4]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d11f      	bne.n	800b286 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	0151      	lsls	r1, r2, #5
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	440a      	add	r2, r1
 800b25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b260:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b264:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	0151      	lsls	r1, r2, #5
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	440a      	add	r2, r1
 800b27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b284:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d14b      	bne.n	800b324 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d009      	beq.n	800b2a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	791b      	ldrb	r3, [r3, #4]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d128      	bne.n	800b302 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d110      	bne.n	800b2e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	e00f      	b.n	800b302 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b300:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	0151      	lsls	r1, r2, #5
 800b314:	69fa      	ldr	r2, [r7, #28]
 800b316:	440a      	add	r2, r1
 800b318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b31c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	e137      	b.n	800b594 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	0151      	lsls	r1, r2, #5
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	440a      	add	r2, r1
 800b33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b342:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	791b      	ldrb	r3, [r3, #4]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d015      	beq.n	800b378 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 811f 	beq.w	800b594 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	2101      	movs	r1, #1
 800b368:	fa01 f303 	lsl.w	r3, r1, r3
 800b36c:	69f9      	ldr	r1, [r7, #28]
 800b36e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b372:	4313      	orrs	r3, r2
 800b374:	634b      	str	r3, [r1, #52]	; 0x34
 800b376:	e10d      	b.n	800b594 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b384:	2b00      	cmp	r3, #0
 800b386:	d110      	bne.n	800b3aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	e00f      	b.n	800b3ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	6919      	ldr	r1, [r3, #16]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	b298      	uxth	r0, r3
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	4603      	mov	r3, r0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 faea 	bl	800b9b8 <USB_WritePacket>
 800b3e4:	e0d6      	b.n	800b594 <USB_EPStartXfer+0x488>
 800b3e6:	bf00      	nop
 800b3e8:	e007ffff 	.word	0xe007ffff
 800b3ec:	fff80000 	.word	0xfff80000
 800b3f0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b400:	691a      	ldr	r2, [r3, #16]
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	0159      	lsls	r1, r3, #5
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	440b      	add	r3, r1
 800b40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40e:	4619      	mov	r1, r3
 800b410:	4b63      	ldr	r3, [pc, #396]	; (800b5a0 <USB_EPStartXfer+0x494>)
 800b412:	4013      	ands	r3, r2
 800b414:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b422:	691a      	ldr	r2, [r3, #16]
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	0159      	lsls	r1, r3, #5
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	440b      	add	r3, r1
 800b42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b430:	4619      	mov	r1, r3
 800b432:	4b5c      	ldr	r3, [pc, #368]	; (800b5a4 <USB_EPStartXfer+0x498>)
 800b434:	4013      	ands	r3, r2
 800b436:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d123      	bne.n	800b488 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44c:	691a      	ldr	r2, [r3, #16]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b456:	69b9      	ldr	r1, [r7, #24]
 800b458:	0148      	lsls	r0, r1, #5
 800b45a:	69f9      	ldr	r1, [r7, #28]
 800b45c:	4401      	add	r1, r0
 800b45e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b462:	4313      	orrs	r3, r2
 800b464:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b484:	6113      	str	r3, [r2, #16]
 800b486:	e037      	b.n	800b4f8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	699a      	ldr	r2, [r3, #24]
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	4413      	add	r3, r2
 800b492:	1e5a      	subs	r2, r3, #1
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	8afa      	ldrh	r2, [r7, #22]
 800b4a4:	fb03 f202 	mul.w	r2, r3, r2
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	8afb      	ldrh	r3, [r7, #22]
 800b4bc:	04d9      	lsls	r1, r3, #19
 800b4be:	4b3a      	ldr	r3, [pc, #232]	; (800b5a8 <USB_EPStartXfer+0x49c>)
 800b4c0:	400b      	ands	r3, r1
 800b4c2:	69b9      	ldr	r1, [r7, #24]
 800b4c4:	0148      	lsls	r0, r1, #5
 800b4c6:	69f9      	ldr	r1, [r7, #28]
 800b4c8:	4401      	add	r1, r0
 800b4ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	015a      	lsls	r2, r3, #5
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	4413      	add	r3, r2
 800b4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4de:	691a      	ldr	r2, [r3, #16]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4e8:	69b9      	ldr	r1, [r7, #24]
 800b4ea:	0148      	lsls	r0, r1, #5
 800b4ec:	69f9      	ldr	r1, [r7, #28]
 800b4ee:	4401      	add	r1, r0
 800b4f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d10d      	bne.n	800b51a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d009      	beq.n	800b51a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	6919      	ldr	r1, [r3, #16]
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	015a      	lsls	r2, r3, #5
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	4413      	add	r3, r2
 800b512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b516:	460a      	mov	r2, r1
 800b518:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	791b      	ldrb	r3, [r3, #4]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d128      	bne.n	800b574 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d110      	bne.n	800b554 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	0151      	lsls	r1, r2, #5
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	440a      	add	r2, r1
 800b548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b54c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	e00f      	b.n	800b574 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	0151      	lsls	r1, r2, #5
 800b566:	69fa      	ldr	r2, [r7, #28]
 800b568:	440a      	add	r2, r1
 800b56a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b56e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b572:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	0151      	lsls	r1, r2, #5
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	440a      	add	r2, r1
 800b58a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b58e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3720      	adds	r7, #32
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	fff80000 	.word	0xfff80000
 800b5a4:	e007ffff 	.word	0xe007ffff
 800b5a8:	1ff80000 	.word	0x1ff80000

0800b5ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	785b      	ldrb	r3, [r3, #1]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	f040 80ce 	bne.w	800b76a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d132      	bne.n	800b63c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e2:	691a      	ldr	r2, [r3, #16]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	0159      	lsls	r1, r3, #5
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	440b      	add	r3, r1
 800b5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4b9a      	ldr	r3, [pc, #616]	; (800b85c <USB_EP0StartXfer+0x2b0>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	0151      	lsls	r1, r2, #5
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	440a      	add	r2, r1
 800b60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b624:	691a      	ldr	r2, [r3, #16]
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	0159      	lsls	r1, r3, #5
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	440b      	add	r3, r1
 800b62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b632:	4619      	mov	r1, r3
 800b634:	4b8a      	ldr	r3, [pc, #552]	; (800b860 <USB_EP0StartXfer+0x2b4>)
 800b636:	4013      	ands	r3, r2
 800b638:	610b      	str	r3, [r1, #16]
 800b63a:	e04e      	b.n	800b6da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b648:	691a      	ldr	r2, [r3, #16]
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	0159      	lsls	r1, r3, #5
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	440b      	add	r3, r1
 800b652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b656:	4619      	mov	r1, r3
 800b658:	4b81      	ldr	r3, [pc, #516]	; (800b860 <USB_EP0StartXfer+0x2b4>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	015a      	lsls	r2, r3, #5
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	4413      	add	r3, r2
 800b666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	0159      	lsls	r1, r3, #5
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	440b      	add	r3, r1
 800b674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b678:	4619      	mov	r1, r3
 800b67a:	4b78      	ldr	r3, [pc, #480]	; (800b85c <USB_EP0StartXfer+0x2b0>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	699a      	ldr	r2, [r3, #24]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d903      	bls.n	800b694 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	0151      	lsls	r1, r2, #5
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	440a      	add	r2, r1
 800b6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	691a      	ldr	r2, [r3, #16]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ca:	6939      	ldr	r1, [r7, #16]
 800b6cc:	0148      	lsls	r0, r1, #5
 800b6ce:	6979      	ldr	r1, [r7, #20]
 800b6d0:	4401      	add	r1, r0
 800b6d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d11e      	bne.n	800b71e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d009      	beq.n	800b6fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	015a      	lsls	r2, r3, #5
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	4413      	add	r3, r2
 800b704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	0151      	lsls	r1, r2, #5
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	440a      	add	r2, r1
 800b712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	e097      	b.n	800b84e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	015a      	lsls	r2, r3, #5
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	4413      	add	r3, r2
 800b726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	0151      	lsls	r1, r2, #5
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	440a      	add	r2, r1
 800b734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b73c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 8083 	beq.w	800b84e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b74e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	f003 030f 	and.w	r3, r3, #15
 800b758:	2101      	movs	r1, #1
 800b75a:	fa01 f303 	lsl.w	r3, r1, r3
 800b75e:	6979      	ldr	r1, [r7, #20]
 800b760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b764:	4313      	orrs	r3, r2
 800b766:	634b      	str	r3, [r1, #52]	; 0x34
 800b768:	e071      	b.n	800b84e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	0159      	lsls	r1, r3, #5
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	440b      	add	r3, r1
 800b780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b784:	4619      	mov	r1, r3
 800b786:	4b36      	ldr	r3, [pc, #216]	; (800b860 <USB_EP0StartXfer+0x2b4>)
 800b788:	4013      	ands	r3, r2
 800b78a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	4413      	add	r3, r2
 800b794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b798:	691a      	ldr	r2, [r3, #16]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	0159      	lsls	r1, r3, #5
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	440b      	add	r3, r1
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4b2c      	ldr	r3, [pc, #176]	; (800b85c <USB_EP0StartXfer+0x2b0>)
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	0151      	lsls	r1, r2, #5
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	440a      	add	r2, r1
 800b7dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	015a      	lsls	r2, r3, #5
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f2:	691a      	ldr	r2, [r3, #16]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7fc:	6939      	ldr	r1, [r7, #16]
 800b7fe:	0148      	lsls	r0, r1, #5
 800b800:	6979      	ldr	r1, [r7, #20]
 800b802:	4401      	add	r1, r0
 800b804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b808:	4313      	orrs	r3, r2
 800b80a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d10d      	bne.n	800b82e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d009      	beq.n	800b82e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	6919      	ldr	r1, [r3, #16]
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	015a      	lsls	r2, r3, #5
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	4413      	add	r3, r2
 800b826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82a:	460a      	mov	r2, r1
 800b82c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	015a      	lsls	r2, r3, #5
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	4413      	add	r3, r2
 800b836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	0151      	lsls	r1, r2, #5
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	440a      	add	r2, r1
 800b844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b848:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b84c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	e007ffff 	.word	0xe007ffff
 800b860:	fff80000 	.word	0xfff80000

0800b864 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d14a      	bne.n	800b918 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b89a:	f040 8086 	bne.w	800b9aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	7812      	ldrb	r2, [r2, #0]
 800b8b2:	0151      	lsls	r1, r2, #5
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	440a      	add	r2, r1
 800b8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	7812      	ldrb	r2, [r2, #0]
 800b8d6:	0151      	lsls	r1, r2, #5
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	440a      	add	r2, r1
 800b8dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d902      	bls.n	800b8fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b8fa:	e056      	b.n	800b9aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b914:	d0e7      	beq.n	800b8e6 <USB_EPStopXfer+0x82>
 800b916:	e048      	b.n	800b9aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b92c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b930:	d13b      	bne.n	800b9aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	0151      	lsls	r1, r2, #5
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	440a      	add	r2, r1
 800b94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b954:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	7812      	ldrb	r2, [r2, #0]
 800b96a:	0151      	lsls	r1, r2, #5
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	440a      	add	r2, r1
 800b970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b978:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3301      	adds	r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f242 7210 	movw	r2, #10000	; 0x2710
 800b986:	4293      	cmp	r3, r2
 800b988:	d902      	bls.n	800b990 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	75fb      	strb	r3, [r7, #23]
          break;
 800b98e:	e00c      	b.n	800b9aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9a8:	d0e7      	beq.n	800b97a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b089      	sub	sp, #36	; 0x24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	71fb      	strb	r3, [r7, #7]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b9d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d123      	bne.n	800ba26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b9de:	88bb      	ldrh	r3, [r7, #4]
 800b9e0:	3303      	adds	r3, #3
 800b9e2:	089b      	lsrs	r3, r3, #2
 800b9e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61bb      	str	r3, [r7, #24]
 800b9ea:	e018      	b.n	800ba1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	031a      	lsls	r2, r3, #12
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	3301      	adds	r3, #1
 800ba04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	3301      	adds	r3, #1
 800ba16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	61bb      	str	r3, [r7, #24]
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d3e2      	bcc.n	800b9ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3724      	adds	r7, #36	; 0x24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b08b      	sub	sp, #44	; 0x2c
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ba4a:	88fb      	ldrh	r3, [r7, #6]
 800ba4c:	089b      	lsrs	r3, r3, #2
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ba52:	88fb      	ldrh	r3, [r7, #6]
 800ba54:	f003 0303 	and.w	r3, r3, #3
 800ba58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	623b      	str	r3, [r7, #32]
 800ba5e:	e014      	b.n	800ba8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	3301      	adds	r3, #1
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	3301      	adds	r3, #1
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	3301      	adds	r3, #1
 800ba82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	3301      	adds	r3, #1
 800ba88:	623b      	str	r3, [r7, #32]
 800ba8a:	6a3a      	ldr	r2, [r7, #32]
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d3e6      	bcc.n	800ba60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ba92:	8bfb      	ldrh	r3, [r7, #30]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01e      	beq.n	800bad6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa2:	461a      	mov	r2, r3
 800baa4:	f107 0310 	add.w	r3, r7, #16
 800baa8:	6812      	ldr	r2, [r2, #0]
 800baaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	fa22 f303 	lsr.w	r3, r2, r3
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	701a      	strb	r2, [r3, #0]
      i++;
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	3301      	adds	r3, #1
 800bac2:	623b      	str	r3, [r7, #32]
      pDest++;
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	3301      	adds	r3, #1
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800baca:	8bfb      	ldrh	r3, [r7, #30]
 800bacc:	3b01      	subs	r3, #1
 800bace:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bad0:	8bfb      	ldrh	r3, [r7, #30]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1ea      	bne.n	800baac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bad8:	4618      	mov	r0, r3
 800bada:	372c      	adds	r7, #44	; 0x2c
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	785b      	ldrb	r3, [r3, #1]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d12c      	bne.n	800bb5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	db12      	blt.n	800bb38 <USB_EPSetStall+0x54>
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00f      	beq.n	800bb38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	015a      	lsls	r2, r3, #5
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	0151      	lsls	r1, r2, #5
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	440a      	add	r2, r1
 800bb2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	0151      	lsls	r1, r2, #5
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	440a      	add	r2, r1
 800bb4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	e02b      	b.n	800bbb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	015a      	lsls	r2, r3, #5
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	4413      	add	r3, r2
 800bb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	db12      	blt.n	800bb92 <USB_EPSetStall+0xae>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00f      	beq.n	800bb92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	0151      	lsls	r1, r2, #5
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	440a      	add	r2, r1
 800bb88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68ba      	ldr	r2, [r7, #8]
 800bba2:	0151      	lsls	r1, r2, #5
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	440a      	add	r2, r1
 800bba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	785b      	ldrb	r3, [r3, #1]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d128      	bne.n	800bc2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	015a      	lsls	r2, r3, #5
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	0151      	lsls	r1, r2, #5
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	440a      	add	r2, r1
 800bbf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	791b      	ldrb	r3, [r3, #4]
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d003      	beq.n	800bc0c <USB_EPClearStall+0x4c>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	791b      	ldrb	r3, [r3, #4]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d138      	bne.n	800bc7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	0151      	lsls	r1, r2, #5
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	440a      	add	r2, r1
 800bc22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc2a:	6013      	str	r3, [r2, #0]
 800bc2c:	e027      	b.n	800bc7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	0151      	lsls	r1, r2, #5
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	440a      	add	r2, r1
 800bc44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	791b      	ldrb	r3, [r3, #4]
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d003      	beq.n	800bc5e <USB_EPClearStall+0x9e>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	791b      	ldrb	r3, [r3, #4]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d10f      	bne.n	800bc7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	015a      	lsls	r2, r3, #5
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	0151      	lsls	r1, r2, #5
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	440a      	add	r2, r1
 800bc74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bcae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	78fb      	ldrb	r3, [r7, #3]
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bcc0:	68f9      	ldr	r1, [r7, #12]
 800bcc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcf2:	f023 0303 	bic.w	r3, r3, #3
 800bcf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd06:	f023 0302 	bic.w	r3, r3, #2
 800bd0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b085      	sub	sp, #20
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd34:	f023 0303 	bic.w	r3, r3, #3
 800bd38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd48:	f043 0302 	orr.w	r3, r3, #2
 800bd4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	4013      	ands	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bd74:	68fb      	ldr	r3, [r7, #12]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b085      	sub	sp, #20
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	4013      	ands	r3, r2
 800bda4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	0c1b      	lsrs	r3, r3, #16
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b085      	sub	sp, #20
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	b29b      	uxth	r3, r3
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b085      	sub	sp, #20
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4413      	add	r3, r2
 800be02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	4013      	ands	r3, r2
 800be16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be18:	68bb      	ldr	r3, [r7, #8]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be26:	b480      	push	{r7}
 800be28:	b087      	sub	sp, #28
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	460b      	mov	r3, r1
 800be30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	fa22 f303 	lsr.w	r3, r2, r3
 800be56:	01db      	lsls	r3, r3, #7
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	693a      	ldr	r2, [r7, #16]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	4013      	ands	r3, r2
 800be72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be74:	68bb      	ldr	r3, [r7, #8]
}
 800be76:	4618      	mov	r0, r3
 800be78:	371c      	adds	r7, #28
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	f003 0301 	and.w	r3, r3, #1
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
	...

0800bea0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beba:	4619      	mov	r1, r3
 800bebc:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <USB_ActivateSetup+0x44>)
 800bebe:	4013      	ands	r3, r2
 800bec0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	fffff800 	.word	0xfffff800

0800bee8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	460b      	mov	r3, r1
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	333c      	adds	r3, #60	; 0x3c
 800befe:	3304      	adds	r3, #4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	4a26      	ldr	r2, [pc, #152]	; (800bfa0 <USB_EP0_OutStart+0xb8>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d90a      	bls.n	800bf22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf1c:	d101      	bne.n	800bf22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e037      	b.n	800bf92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf50:	f043 0318 	orr.w	r3, r3, #24
 800bf54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bf68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bf6a:	7afb      	ldrb	r3, [r7, #11]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d10f      	bne.n	800bf90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf76:	461a      	mov	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bf8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	371c      	adds	r7, #28
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	4f54300a 	.word	0x4f54300a

0800bfa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	4a13      	ldr	r2, [pc, #76]	; (800c008 <USB_CoreReset+0x64>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d901      	bls.n	800bfc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e01b      	b.n	800bffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	daf2      	bge.n	800bfb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	f043 0201 	orr.w	r2, r3, #1
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4a09      	ldr	r2, [pc, #36]	; (800c008 <USB_CoreReset+0x64>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d901      	bls.n	800bfec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e006      	b.n	800bffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d0f0      	beq.n	800bfda <USB_CoreReset+0x36>

  return HAL_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	00030d40 	.word	0x00030d40

0800c00c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c018:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c01c:	f013 fbea 	bl	801f7f4 <malloc>
 800c020:	4603      	mov	r3, r0
 800c022:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	32b0      	adds	r2, #176	; 0xb0
 800c034:	2100      	movs	r1, #0
 800c036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c03a:	2302      	movs	r3, #2
 800c03c:	e0d4      	b.n	800c1e8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c03e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c042:	2100      	movs	r1, #0
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f014 ffb9 	bl	8020fbc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	32b0      	adds	r2, #176	; 0xb0
 800c054:	68f9      	ldr	r1, [r7, #12]
 800c056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32b0      	adds	r2, #176	; 0xb0
 800c064:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	7c1b      	ldrb	r3, [r3, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d138      	bne.n	800c0e8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c076:	4b5e      	ldr	r3, [pc, #376]	; (800c1f0 <USBD_CDC_Init+0x1e4>)
 800c078:	7819      	ldrb	r1, [r3, #0]
 800c07a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c07e:	2202      	movs	r2, #2
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f005 f928 	bl	80112d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c086:	4b5a      	ldr	r3, [pc, #360]	; (800c1f0 <USBD_CDC_Init+0x1e4>)
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	f003 020f 	and.w	r2, r3, #15
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	4613      	mov	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	440b      	add	r3, r1
 800c09a:	3324      	adds	r3, #36	; 0x24
 800c09c:	2201      	movs	r2, #1
 800c09e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c0a0:	4b54      	ldr	r3, [pc, #336]	; (800c1f4 <USBD_CDC_Init+0x1e8>)
 800c0a2:	7819      	ldrb	r1, [r3, #0]
 800c0a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0a8:	2202      	movs	r2, #2
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f005 f913 	bl	80112d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c0b0:	4b50      	ldr	r3, [pc, #320]	; (800c1f4 <USBD_CDC_Init+0x1e8>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	f003 020f 	and.w	r2, r3, #15
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c0cc:	4b4a      	ldr	r3, [pc, #296]	; (800c1f8 <USBD_CDC_Init+0x1ec>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f003 020f 	and.w	r2, r3, #15
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	440b      	add	r3, r1
 800c0e0:	3326      	adds	r3, #38	; 0x26
 800c0e2:	2210      	movs	r2, #16
 800c0e4:	801a      	strh	r2, [r3, #0]
 800c0e6:	e035      	b.n	800c154 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c0e8:	4b41      	ldr	r3, [pc, #260]	; (800c1f0 <USBD_CDC_Init+0x1e4>)
 800c0ea:	7819      	ldrb	r1, [r3, #0]
 800c0ec:	2340      	movs	r3, #64	; 0x40
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f005 f8f0 	bl	80112d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c0f6:	4b3e      	ldr	r3, [pc, #248]	; (800c1f0 <USBD_CDC_Init+0x1e4>)
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	f003 020f 	and.w	r2, r3, #15
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	4613      	mov	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	440b      	add	r3, r1
 800c10a:	3324      	adds	r3, #36	; 0x24
 800c10c:	2201      	movs	r2, #1
 800c10e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c110:	4b38      	ldr	r3, [pc, #224]	; (800c1f4 <USBD_CDC_Init+0x1e8>)
 800c112:	7819      	ldrb	r1, [r3, #0]
 800c114:	2340      	movs	r3, #64	; 0x40
 800c116:	2202      	movs	r2, #2
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f005 f8dc 	bl	80112d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c11e:	4b35      	ldr	r3, [pc, #212]	; (800c1f4 <USBD_CDC_Init+0x1e8>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	f003 020f 	and.w	r2, r3, #15
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	440b      	add	r3, r1
 800c132:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c136:	2201      	movs	r2, #1
 800c138:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c13a:	4b2f      	ldr	r3, [pc, #188]	; (800c1f8 <USBD_CDC_Init+0x1ec>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	f003 020f 	and.w	r2, r3, #15
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	4613      	mov	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	440b      	add	r3, r1
 800c14e:	3326      	adds	r3, #38	; 0x26
 800c150:	2210      	movs	r2, #16
 800c152:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c154:	4b28      	ldr	r3, [pc, #160]	; (800c1f8 <USBD_CDC_Init+0x1ec>)
 800c156:	7819      	ldrb	r1, [r3, #0]
 800c158:	2308      	movs	r3, #8
 800c15a:	2203      	movs	r2, #3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f005 f8ba 	bl	80112d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c162:	4b25      	ldr	r3, [pc, #148]	; (800c1f8 <USBD_CDC_Init+0x1ec>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	f003 020f 	and.w	r2, r3, #15
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	4613      	mov	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	440b      	add	r3, r1
 800c176:	3324      	adds	r3, #36	; 0x24
 800c178:	2201      	movs	r2, #1
 800c17a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	33b0      	adds	r3, #176	; 0xb0
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e018      	b.n	800c1e8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	7c1b      	ldrb	r3, [r3, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c1be:	4b0d      	ldr	r3, [pc, #52]	; (800c1f4 <USBD_CDC_Init+0x1e8>)
 800c1c0:	7819      	ldrb	r1, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f005 f971 	bl	80114b4 <USBD_LL_PrepareReceive>
 800c1d2:	e008      	b.n	800c1e6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c1d4:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <USBD_CDC_Init+0x1e8>)
 800c1d6:	7819      	ldrb	r1, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1de:	2340      	movs	r3, #64	; 0x40
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f005 f967 	bl	80114b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20000097 	.word	0x20000097
 800c1f4:	20000098 	.word	0x20000098
 800c1f8:	20000099 	.word	0x20000099

0800c1fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c208:	4b3a      	ldr	r3, [pc, #232]	; (800c2f4 <USBD_CDC_DeInit+0xf8>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f005 f887 	bl	8011322 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c214:	4b37      	ldr	r3, [pc, #220]	; (800c2f4 <USBD_CDC_DeInit+0xf8>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f003 020f 	and.w	r2, r3, #15
 800c21c:	6879      	ldr	r1, [r7, #4]
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	440b      	add	r3, r1
 800c228:	3324      	adds	r3, #36	; 0x24
 800c22a:	2200      	movs	r2, #0
 800c22c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c22e:	4b32      	ldr	r3, [pc, #200]	; (800c2f8 <USBD_CDC_DeInit+0xfc>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f005 f874 	bl	8011322 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c23a:	4b2f      	ldr	r3, [pc, #188]	; (800c2f8 <USBD_CDC_DeInit+0xfc>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	f003 020f 	and.w	r2, r3, #15
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c252:	2200      	movs	r2, #0
 800c254:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c256:	4b29      	ldr	r3, [pc, #164]	; (800c2fc <USBD_CDC_DeInit+0x100>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f005 f860 	bl	8011322 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c262:	4b26      	ldr	r3, [pc, #152]	; (800c2fc <USBD_CDC_DeInit+0x100>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	f003 020f 	and.w	r2, r3, #15
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	440b      	add	r3, r1
 800c276:	3324      	adds	r3, #36	; 0x24
 800c278:	2200      	movs	r2, #0
 800c27a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c27c:	4b1f      	ldr	r3, [pc, #124]	; (800c2fc <USBD_CDC_DeInit+0x100>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	f003 020f 	and.w	r2, r3, #15
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	4613      	mov	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	440b      	add	r3, r1
 800c290:	3326      	adds	r3, #38	; 0x26
 800c292:	2200      	movs	r2, #0
 800c294:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	32b0      	adds	r2, #176	; 0xb0
 800c2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d01f      	beq.n	800c2e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	33b0      	adds	r3, #176	; 0xb0
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	32b0      	adds	r2, #176	; 0xb0
 800c2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f013 fa9a 	bl	801f804 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	32b0      	adds	r2, #176	; 0xb0
 800c2da:	2100      	movs	r1, #0
 800c2dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20000097 	.word	0x20000097
 800c2f8:	20000098 	.word	0x20000098
 800c2fc:	20000099 	.word	0x20000099

0800c300 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	32b0      	adds	r2, #176	; 0xb0
 800c314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c318:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e0bf      	b.n	800c4b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d050      	beq.n	800c3de <USBD_CDC_Setup+0xde>
 800c33c:	2b20      	cmp	r3, #32
 800c33e:	f040 80af 	bne.w	800c4a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	88db      	ldrh	r3, [r3, #6]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d03a      	beq.n	800c3c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b25b      	sxtb	r3, r3
 800c350:	2b00      	cmp	r3, #0
 800c352:	da1b      	bge.n	800c38c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	33b0      	adds	r3, #176	; 0xb0
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c36a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	88d2      	ldrh	r2, [r2, #6]
 800c370:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	88db      	ldrh	r3, [r3, #6]
 800c376:	2b07      	cmp	r3, #7
 800c378:	bf28      	it	cs
 800c37a:	2307      	movcs	r3, #7
 800c37c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	89fa      	ldrh	r2, [r7, #14]
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f001 fd6d 	bl	800de64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c38a:	e090      	b.n	800c4ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	785a      	ldrb	r2, [r3, #1]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	88db      	ldrh	r3, [r3, #6]
 800c39a:	2b3f      	cmp	r3, #63	; 0x3f
 800c39c:	d803      	bhi.n	800c3a6 <USBD_CDC_Setup+0xa6>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	88db      	ldrh	r3, [r3, #6]
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	e000      	b.n	800c3a8 <USBD_CDC_Setup+0xa8>
 800c3a6:	2240      	movs	r2, #64	; 0x40
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c3ae:	6939      	ldr	r1, [r7, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f001 fd7f 	bl	800debc <USBD_CtlPrepareRx>
      break;
 800c3be:	e076      	b.n	800c4ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	33b0      	adds	r3, #176	; 0xb0
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	7850      	ldrb	r0, [r2, #1]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	4798      	blx	r3
      break;
 800c3dc:	e067      	b.n	800c4ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	2b0b      	cmp	r3, #11
 800c3e4:	d851      	bhi.n	800c48a <USBD_CDC_Setup+0x18a>
 800c3e6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ec <USBD_CDC_Setup+0xec>)
 800c3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ec:	0800c41d 	.word	0x0800c41d
 800c3f0:	0800c499 	.word	0x0800c499
 800c3f4:	0800c48b 	.word	0x0800c48b
 800c3f8:	0800c48b 	.word	0x0800c48b
 800c3fc:	0800c48b 	.word	0x0800c48b
 800c400:	0800c48b 	.word	0x0800c48b
 800c404:	0800c48b 	.word	0x0800c48b
 800c408:	0800c48b 	.word	0x0800c48b
 800c40c:	0800c48b 	.word	0x0800c48b
 800c410:	0800c48b 	.word	0x0800c48b
 800c414:	0800c447 	.word	0x0800c447
 800c418:	0800c471 	.word	0x0800c471
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b03      	cmp	r3, #3
 800c426:	d107      	bne.n	800c438 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c428:	f107 030a 	add.w	r3, r7, #10
 800c42c:	2202      	movs	r2, #2
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 fd17 	bl	800de64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c436:	e032      	b.n	800c49e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f001 fca1 	bl	800dd82 <USBD_CtlError>
            ret = USBD_FAIL;
 800c440:	2303      	movs	r3, #3
 800c442:	75fb      	strb	r3, [r7, #23]
          break;
 800c444:	e02b      	b.n	800c49e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d107      	bne.n	800c462 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c452:	f107 030d 	add.w	r3, r7, #13
 800c456:	2201      	movs	r2, #1
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f001 fd02 	bl	800de64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c460:	e01d      	b.n	800c49e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 fc8c 	bl	800dd82 <USBD_CtlError>
            ret = USBD_FAIL;
 800c46a:	2303      	movs	r3, #3
 800c46c:	75fb      	strb	r3, [r7, #23]
          break;
 800c46e:	e016      	b.n	800c49e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b03      	cmp	r3, #3
 800c47a:	d00f      	beq.n	800c49c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f001 fc7f 	bl	800dd82 <USBD_CtlError>
            ret = USBD_FAIL;
 800c484:	2303      	movs	r3, #3
 800c486:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c488:	e008      	b.n	800c49c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c48a:	6839      	ldr	r1, [r7, #0]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 fc78 	bl	800dd82 <USBD_CtlError>
          ret = USBD_FAIL;
 800c492:	2303      	movs	r3, #3
 800c494:	75fb      	strb	r3, [r7, #23]
          break;
 800c496:	e002      	b.n	800c49e <USBD_CDC_Setup+0x19e>
          break;
 800c498:	bf00      	nop
 800c49a:	e008      	b.n	800c4ae <USBD_CDC_Setup+0x1ae>
          break;
 800c49c:	bf00      	nop
      }
      break;
 800c49e:	e006      	b.n	800c4ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f001 fc6d 	bl	800dd82 <USBD_CtlError>
      ret = USBD_FAIL;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c4ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	32b0      	adds	r2, #176	; 0xb0
 800c4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e065      	b.n	800c5ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	32b0      	adds	r2, #176	; 0xb0
 800c4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4f2:	78fb      	ldrb	r3, [r7, #3]
 800c4f4:	f003 020f 	and.w	r2, r3, #15
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	440b      	add	r3, r1
 800c504:	3318      	adds	r3, #24
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d02f      	beq.n	800c56c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c50c:	78fb      	ldrb	r3, [r7, #3]
 800c50e:	f003 020f 	and.w	r2, r3, #15
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	4613      	mov	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	440b      	add	r3, r1
 800c51e:	3318      	adds	r3, #24
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	78fb      	ldrb	r3, [r7, #3]
 800c524:	f003 010f 	and.w	r1, r3, #15
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	460b      	mov	r3, r1
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	440b      	add	r3, r1
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4403      	add	r3, r0
 800c534:	3348      	adds	r3, #72	; 0x48
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	fbb2 f1f3 	udiv	r1, r2, r3
 800c53c:	fb01 f303 	mul.w	r3, r1, r3
 800c540:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c542:	2b00      	cmp	r3, #0
 800c544:	d112      	bne.n	800c56c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c546:	78fb      	ldrb	r3, [r7, #3]
 800c548:	f003 020f 	and.w	r2, r3, #15
 800c54c:	6879      	ldr	r1, [r7, #4]
 800c54e:	4613      	mov	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	440b      	add	r3, r1
 800c558:	3318      	adds	r3, #24
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c55e:	78f9      	ldrb	r1, [r7, #3]
 800c560:	2300      	movs	r3, #0
 800c562:	2200      	movs	r2, #0
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f004 ff84 	bl	8011472 <USBD_LL_Transmit>
 800c56a:	e01f      	b.n	800c5ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	33b0      	adds	r3, #176	; 0xb0
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d010      	beq.n	800c5ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	33b0      	adds	r3, #176	; 0xb0
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c5a8:	78fa      	ldrb	r2, [r7, #3]
 800c5aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	32b0      	adds	r2, #176	; 0xb0
 800c5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	32b0      	adds	r2, #176	; 0xb0
 800c5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e01a      	b.n	800c61e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f004 ff82 	bl	80114f6 <USBD_LL_GetRxDataSize>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	33b0      	adds	r3, #176	; 0xb0
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c618:	4611      	mov	r1, r2
 800c61a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b084      	sub	sp, #16
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	32b0      	adds	r2, #176	; 0xb0
 800c638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	e025      	b.n	800c694 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	33b0      	adds	r3, #176	; 0xb0
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01a      	beq.n	800c692 <USBD_CDC_EP0_RxReady+0x6c>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c662:	2bff      	cmp	r3, #255	; 0xff
 800c664:	d015      	beq.n	800c692 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	33b0      	adds	r3, #176	; 0xb0
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c67e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c686:	b292      	uxth	r2, r2
 800c688:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	22ff      	movs	r2, #255	; 0xff
 800c68e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6a4:	2182      	movs	r1, #130	; 0x82
 800c6a6:	4818      	ldr	r0, [pc, #96]	; (800c708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c6a8:	f000 fd09 	bl	800d0be <USBD_GetEpDesc>
 800c6ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	4815      	ldr	r0, [pc, #84]	; (800c708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c6b2:	f000 fd04 	bl	800d0be <USBD_GetEpDesc>
 800c6b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6b8:	2181      	movs	r1, #129	; 0x81
 800c6ba:	4813      	ldr	r0, [pc, #76]	; (800c708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c6bc:	f000 fcff 	bl	800d0be <USBD_GetEpDesc>
 800c6c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	2210      	movs	r2, #16
 800c6cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d006      	beq.n	800c6e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6dc:	711a      	strb	r2, [r3, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d006      	beq.n	800c6f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6f0:	711a      	strb	r2, [r3, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2243      	movs	r2, #67	; 0x43
 800c6fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6fc:	4b02      	ldr	r3, [pc, #8]	; (800c708 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	20000054 	.word	0x20000054

0800c70c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c714:	2182      	movs	r1, #130	; 0x82
 800c716:	4818      	ldr	r0, [pc, #96]	; (800c778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c718:	f000 fcd1 	bl	800d0be <USBD_GetEpDesc>
 800c71c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c71e:	2101      	movs	r1, #1
 800c720:	4815      	ldr	r0, [pc, #84]	; (800c778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c722:	f000 fccc 	bl	800d0be <USBD_GetEpDesc>
 800c726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c728:	2181      	movs	r1, #129	; 0x81
 800c72a:	4813      	ldr	r0, [pc, #76]	; (800c778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c72c:	f000 fcc7 	bl	800d0be <USBD_GetEpDesc>
 800c730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2210      	movs	r2, #16
 800c73c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d006      	beq.n	800c752 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2200      	movs	r2, #0
 800c748:	711a      	strb	r2, [r3, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f042 0202 	orr.w	r2, r2, #2
 800c750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d006      	beq.n	800c766 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	711a      	strb	r2, [r3, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f042 0202 	orr.w	r2, r2, #2
 800c764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2243      	movs	r2, #67	; 0x43
 800c76a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c76c:	4b02      	ldr	r3, [pc, #8]	; (800c778 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20000054 	.word	0x20000054

0800c77c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c784:	2182      	movs	r1, #130	; 0x82
 800c786:	4818      	ldr	r0, [pc, #96]	; (800c7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c788:	f000 fc99 	bl	800d0be <USBD_GetEpDesc>
 800c78c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c78e:	2101      	movs	r1, #1
 800c790:	4815      	ldr	r0, [pc, #84]	; (800c7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c792:	f000 fc94 	bl	800d0be <USBD_GetEpDesc>
 800c796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c798:	2181      	movs	r1, #129	; 0x81
 800c79a:	4813      	ldr	r0, [pc, #76]	; (800c7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c79c:	f000 fc8f 	bl	800d0be <USBD_GetEpDesc>
 800c7a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2210      	movs	r2, #16
 800c7ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d006      	beq.n	800c7c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7bc:	711a      	strb	r2, [r3, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d006      	beq.n	800c7d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7d0:	711a      	strb	r2, [r3, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2243      	movs	r2, #67	; 0x43
 800c7da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c7dc:	4b02      	ldr	r3, [pc, #8]	; (800c7e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3718      	adds	r7, #24
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000054 	.word	0x20000054

0800c7ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	220a      	movs	r2, #10
 800c7f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c7fa:	4b03      	ldr	r3, [pc, #12]	; (800c808 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	20000010 	.word	0x20000010

0800c80c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d101      	bne.n	800c820 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c81c:	2303      	movs	r3, #3
 800c81e:	e009      	b.n	800c834 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	33b0      	adds	r3, #176	; 0xb0
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	32b0      	adds	r2, #176	; 0xb0
 800c856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c862:	2303      	movs	r3, #3
 800c864:	e008      	b.n	800c878 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	371c      	adds	r7, #28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	32b0      	adds	r2, #176	; 0xb0
 800c898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c89c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	e004      	b.n	800c8b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
	...

0800c8c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	32b0      	adds	r2, #176	; 0xb0
 800c8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	32b0      	adds	r2, #176	; 0xb0
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e018      	b.n	800c920 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7c1b      	ldrb	r3, [r3, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10a      	bne.n	800c90c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <USBD_CDC_ReceivePacket+0x68>)
 800c8f8:	7819      	ldrb	r1, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c900:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f004 fdd5 	bl	80114b4 <USBD_LL_PrepareReceive>
 800c90a:	e008      	b.n	800c91e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c90c:	4b06      	ldr	r3, [pc, #24]	; (800c928 <USBD_CDC_ReceivePacket+0x68>)
 800c90e:	7819      	ldrb	r1, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c916:	2340      	movs	r3, #64	; 0x40
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f004 fdcb 	bl	80114b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20000098 	.word	0x20000098

0800c92c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4613      	mov	r3, r2
 800c938:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c940:	2303      	movs	r3, #3
 800c942:	e01f      	b.n	800c984 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d003      	beq.n	800c96a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	79fa      	ldrb	r2, [r7, #7]
 800c976:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f004 fc45 	bl	8011208 <USBD_LL_Init>
 800c97e:	4603      	mov	r3, r0
 800c980:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c982:	7dfb      	ldrb	r3, [r7, #23]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c996:	2300      	movs	r3, #0
 800c998:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e025      	b.n	800c9f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	32ae      	adds	r2, #174	; 0xae
 800c9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00f      	beq.n	800c9e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	32ae      	adds	r2, #174	; 0xae
 800c9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d0:	f107 020e 	add.w	r2, r7, #14
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	4602      	mov	r2, r0
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f004 fc4d 	bl	80112a0 <USBD_LL_Start>
 800ca06:	4603      	mov	r3, r0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	460b      	mov	r3, r1
 800ca30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d009      	beq.n	800ca54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	78fa      	ldrb	r2, [r7, #3]
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	4798      	blx	r3
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	78fa      	ldrb	r2, [r7, #3]
 800ca78:	4611      	mov	r1, r2
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	4798      	blx	r3
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca84:	2303      	movs	r3, #3
 800ca86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f001 f932 	bl	800dd0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cab8:	461a      	mov	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cac6:	f003 031f 	and.w	r3, r3, #31
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d01a      	beq.n	800cb04 <USBD_LL_SetupStage+0x72>
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d822      	bhi.n	800cb18 <USBD_LL_SetupStage+0x86>
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <USBD_LL_SetupStage+0x4a>
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d00a      	beq.n	800caf0 <USBD_LL_SetupStage+0x5e>
 800cada:	e01d      	b.n	800cb18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fb5f 	bl	800d1a8 <USBD_StdDevReq>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]
      break;
 800caee:	e020      	b.n	800cb32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fbc7 	bl	800d28c <USBD_StdItfReq>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73fb      	strb	r3, [r7, #15]
      break;
 800cb02:	e016      	b.n	800cb32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fc29 	bl	800d364 <USBD_StdEPReq>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
      break;
 800cb16:	e00c      	b.n	800cb32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f004 fc1a 	bl	8011360 <USBD_LL_StallEP>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb30:	bf00      	nop
  }

  return ret;
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	460b      	mov	r3, r1
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cb4e:	7afb      	ldrb	r3, [r7, #11]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d16e      	bne.n	800cc32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cb5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	f040 8098 	bne.w	800cc98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d913      	bls.n	800cb9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	689a      	ldr	r2, [r3, #8]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	1ad2      	subs	r2, r2, r3
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	bf28      	it	cs
 800cb8e:	4613      	movcs	r3, r2
 800cb90:	461a      	mov	r2, r3
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f001 f9ae 	bl	800def6 <USBD_CtlContinueRx>
 800cb9a:	e07d      	b.n	800cc98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cba2:	f003 031f 	and.w	r3, r3, #31
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d014      	beq.n	800cbd4 <USBD_LL_DataOutStage+0x98>
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d81d      	bhi.n	800cbea <USBD_LL_DataOutStage+0xae>
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d002      	beq.n	800cbb8 <USBD_LL_DataOutStage+0x7c>
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d003      	beq.n	800cbbe <USBD_LL_DataOutStage+0x82>
 800cbb6:	e018      	b.n	800cbea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	75bb      	strb	r3, [r7, #22]
            break;
 800cbbc:	e018      	b.n	800cbf0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 fa5e 	bl	800d08a <USBD_CoreFindIF>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	75bb      	strb	r3, [r7, #22]
            break;
 800cbd2:	e00d      	b.n	800cbf0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	4619      	mov	r1, r3
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 fa60 	bl	800d0a4 <USBD_CoreFindEP>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	75bb      	strb	r3, [r7, #22]
            break;
 800cbe8:	e002      	b.n	800cbf0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbea:	2300      	movs	r3, #0
 800cbec:	75bb      	strb	r3, [r7, #22]
            break;
 800cbee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbf0:	7dbb      	ldrb	r3, [r7, #22]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d119      	bne.n	800cc2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d113      	bne.n	800cc2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cc02:	7dba      	ldrb	r2, [r7, #22]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	32ae      	adds	r2, #174	; 0xae
 800cc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00b      	beq.n	800cc2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cc12:	7dba      	ldrb	r2, [r7, #22]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc1a:	7dba      	ldrb	r2, [r7, #22]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	32ae      	adds	r2, #174	; 0xae
 800cc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f001 f974 	bl	800df18 <USBD_CtlSendStatus>
 800cc30:	e032      	b.n	800cc98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc32:	7afb      	ldrb	r3, [r7, #11]
 800cc34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 fa31 	bl	800d0a4 <USBD_CoreFindEP>
 800cc42:	4603      	mov	r3, r0
 800cc44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc46:	7dbb      	ldrb	r3, [r7, #22]
 800cc48:	2bff      	cmp	r3, #255	; 0xff
 800cc4a:	d025      	beq.n	800cc98 <USBD_LL_DataOutStage+0x15c>
 800cc4c:	7dbb      	ldrb	r3, [r7, #22]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d122      	bne.n	800cc98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d117      	bne.n	800cc8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc5e:	7dba      	ldrb	r2, [r7, #22]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	32ae      	adds	r2, #174	; 0xae
 800cc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00f      	beq.n	800cc8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cc6e:	7dba      	ldrb	r2, [r7, #22]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc76:	7dba      	ldrb	r2, [r7, #22]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	32ae      	adds	r2, #174	; 0xae
 800cc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	7afa      	ldrb	r2, [r7, #11]
 800cc84:	4611      	mov	r1, r2
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	4798      	blx	r3
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	e000      	b.n	800cc9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b086      	sub	sp, #24
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	460b      	mov	r3, r1
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d16f      	bne.n	800cd96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3314      	adds	r3, #20
 800ccba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d15a      	bne.n	800cd7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	689a      	ldr	r2, [r3, #8]
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d914      	bls.n	800ccfc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	689a      	ldr	r2, [r3, #8]
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	1ad2      	subs	r2, r2, r3
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	461a      	mov	r2, r3
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f001 f8d6 	bl	800de9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f004 fbdd 	bl	80114b4 <USBD_LL_PrepareReceive>
 800ccfa:	e03f      	b.n	800cd7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	68da      	ldr	r2, [r3, #12]
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d11c      	bne.n	800cd42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d316      	bcc.n	800cd42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d20f      	bcs.n	800cd42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd22:	2200      	movs	r2, #0
 800cd24:	2100      	movs	r1, #0
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f001 f8b7 	bl	800de9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd34:	2300      	movs	r3, #0
 800cd36:	2200      	movs	r2, #0
 800cd38:	2100      	movs	r1, #0
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f004 fbba 	bl	80114b4 <USBD_LL_PrepareReceive>
 800cd40:	e01c      	b.n	800cd7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d10f      	bne.n	800cd6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d009      	beq.n	800cd6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd6e:	2180      	movs	r1, #128	; 0x80
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f004 faf5 	bl	8011360 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f001 f8e1 	bl	800df3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d03a      	beq.n	800cdfc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff fe42 	bl	800ca10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cd94:	e032      	b.n	800cdfc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cd96:	7afb      	ldrb	r3, [r7, #11]
 800cd98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	4619      	mov	r1, r3
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f97f 	bl	800d0a4 <USBD_CoreFindEP>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2bff      	cmp	r3, #255	; 0xff
 800cdae:	d025      	beq.n	800cdfc <USBD_LL_DataInStage+0x15a>
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d122      	bne.n	800cdfc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d11c      	bne.n	800cdfc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdc2:	7dfa      	ldrb	r2, [r7, #23]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	32ae      	adds	r2, #174	; 0xae
 800cdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d014      	beq.n	800cdfc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cdd2:	7dfa      	ldrb	r2, [r7, #23]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cdda:	7dfa      	ldrb	r2, [r7, #23]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	32ae      	adds	r2, #174	; 0xae
 800cde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	7afa      	ldrb	r2, [r7, #11]
 800cde8:	4611      	mov	r1, r2
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	4798      	blx	r3
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cdf2:	7dbb      	ldrb	r3, [r7, #22]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cdf8:	7dbb      	ldrb	r3, [r7, #22]
 800cdfa:	e000      	b.n	800cdfe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2201      	movs	r2, #1
 800ce16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d014      	beq.n	800ce6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	6852      	ldr	r2, [r2, #4]
 800ce5a:	b2d2      	uxtb	r2, r2
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	4798      	blx	r3
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	2200      	movs	r2, #0
 800ce70:	2100      	movs	r1, #0
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f004 fa2f 	bl	80112d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2240      	movs	r2, #64	; 0x40
 800ce84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce88:	2340      	movs	r3, #64	; 0x40
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	2180      	movs	r1, #128	; 0x80
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f004 fa21 	bl	80112d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2240      	movs	r2, #64	; 0x40
 800ce9e:	621a      	str	r2, [r3, #32]

  return ret;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	78fa      	ldrb	r2, [r7, #3]
 800ceba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	370c      	adds	r7, #12
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ceca:	b480      	push	{r7}
 800cecc:	b083      	sub	sp, #12
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2204      	movs	r2, #4
 800cee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b04      	cmp	r3, #4
 800cf08:	d106      	bne.n	800cf18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	d110      	bne.n	800cf5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00b      	beq.n	800cf5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d005      	beq.n	800cf5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf56:	69db      	ldr	r3, [r3, #28]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b082      	sub	sp, #8
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
 800cf6e:	460b      	mov	r3, r1
 800cf70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	32ae      	adds	r2, #174	; 0xae
 800cf7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf84:	2303      	movs	r3, #3
 800cf86:	e01c      	b.n	800cfc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b03      	cmp	r3, #3
 800cf92:	d115      	bne.n	800cfc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	32ae      	adds	r2, #174	; 0xae
 800cf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa2:	6a1b      	ldr	r3, [r3, #32]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	32ae      	adds	r2, #174	; 0xae
 800cfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	78fa      	ldrb	r2, [r7, #3]
 800cfba:	4611      	mov	r1, r2
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	32ae      	adds	r2, #174	; 0xae
 800cfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e01c      	b.n	800d026 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	d115      	bne.n	800d024 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	32ae      	adds	r2, #174	; 0xae
 800d002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00b      	beq.n	800d024 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	32ae      	adds	r2, #174	; 0xae
 800d016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	78fa      	ldrb	r2, [r7, #3]
 800d01e:	4611      	mov	r1, r2
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00e      	beq.n	800d080 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	6852      	ldr	r2, [r2, #4]
 800d06e:	b2d2      	uxtb	r2, r2
 800d070:	4611      	mov	r1, r2
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	4798      	blx	r3
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d07c:	2303      	movs	r3, #3
 800d07e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d080:	7bfb      	ldrb	r3, [r7, #15]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	460b      	mov	r3, r1
 800d094:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d096:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b086      	sub	sp, #24
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	885b      	ldrh	r3, [r3, #2]
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d920      	bls.n	800d128 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d0ee:	e013      	b.n	800d118 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d0f0:	f107 030a 	add.w	r3, r7, #10
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6978      	ldr	r0, [r7, #20]
 800d0f8:	f000 f81b 	bl	800d132 <USBD_GetNextDesc>
 800d0fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	2b05      	cmp	r3, #5
 800d104:	d108      	bne.n	800d118 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	789b      	ldrb	r3, [r3, #2]
 800d10e:	78fa      	ldrb	r2, [r7, #3]
 800d110:	429a      	cmp	r2, r3
 800d112:	d008      	beq.n	800d126 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	885b      	ldrh	r3, [r3, #2]
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	897b      	ldrh	r3, [r7, #10]
 800d120:	429a      	cmp	r2, r3
 800d122:	d8e5      	bhi.n	800d0f0 <USBD_GetEpDesc+0x32>
 800d124:	e000      	b.n	800d128 <USBD_GetEpDesc+0x6a>
          break;
 800d126:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d128:	693b      	ldr	r3, [r7, #16]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d132:	b480      	push	{r7}
 800d134:	b085      	sub	sp, #20
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	881a      	ldrh	r2, [r3, #0]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	4413      	add	r3, r2
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4413      	add	r3, r2
 800d15c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d15e:	68fb      	ldr	r3, [r7, #12]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	3301      	adds	r3, #1
 800d182:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d18a:	8a3b      	ldrh	r3, [r7, #16]
 800d18c:	021b      	lsls	r3, r3, #8
 800d18e:	b21a      	sxth	r2, r3
 800d190:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d194:	4313      	orrs	r3, r2
 800d196:	b21b      	sxth	r3, r3
 800d198:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d19a:	89fb      	ldrh	r3, [r7, #14]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	371c      	adds	r7, #28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1be:	2b40      	cmp	r3, #64	; 0x40
 800d1c0:	d005      	beq.n	800d1ce <USBD_StdDevReq+0x26>
 800d1c2:	2b40      	cmp	r3, #64	; 0x40
 800d1c4:	d857      	bhi.n	800d276 <USBD_StdDevReq+0xce>
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00f      	beq.n	800d1ea <USBD_StdDevReq+0x42>
 800d1ca:	2b20      	cmp	r3, #32
 800d1cc:	d153      	bne.n	800d276 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	32ae      	adds	r2, #174	; 0xae
 800d1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	4798      	blx	r3
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e8:	e04a      	b.n	800d280 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	785b      	ldrb	r3, [r3, #1]
 800d1ee:	2b09      	cmp	r3, #9
 800d1f0:	d83b      	bhi.n	800d26a <USBD_StdDevReq+0xc2>
 800d1f2:	a201      	add	r2, pc, #4	; (adr r2, 800d1f8 <USBD_StdDevReq+0x50>)
 800d1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f8:	0800d24d 	.word	0x0800d24d
 800d1fc:	0800d261 	.word	0x0800d261
 800d200:	0800d26b 	.word	0x0800d26b
 800d204:	0800d257 	.word	0x0800d257
 800d208:	0800d26b 	.word	0x0800d26b
 800d20c:	0800d22b 	.word	0x0800d22b
 800d210:	0800d221 	.word	0x0800d221
 800d214:	0800d26b 	.word	0x0800d26b
 800d218:	0800d243 	.word	0x0800d243
 800d21c:	0800d235 	.word	0x0800d235
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fa3c 	bl	800d6a0 <USBD_GetDescriptor>
          break;
 800d228:	e024      	b.n	800d274 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fbcb 	bl	800d9c8 <USBD_SetAddress>
          break;
 800d232:	e01f      	b.n	800d274 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fc0a 	bl	800da50 <USBD_SetConfig>
 800d23c:	4603      	mov	r3, r0
 800d23e:	73fb      	strb	r3, [r7, #15]
          break;
 800d240:	e018      	b.n	800d274 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fcad 	bl	800dba4 <USBD_GetConfig>
          break;
 800d24a:	e013      	b.n	800d274 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fcde 	bl	800dc10 <USBD_GetStatus>
          break;
 800d254:	e00e      	b.n	800d274 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fd0d 	bl	800dc78 <USBD_SetFeature>
          break;
 800d25e:	e009      	b.n	800d274 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fd31 	bl	800dcca <USBD_ClrFeature>
          break;
 800d268:	e004      	b.n	800d274 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fd88 	bl	800dd82 <USBD_CtlError>
          break;
 800d272:	bf00      	nop
      }
      break;
 800d274:	e004      	b.n	800d280 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fd82 	bl	800dd82 <USBD_CtlError>
      break;
 800d27e:	bf00      	nop
  }

  return ret;
 800d280:	7bfb      	ldrb	r3, [r7, #15]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop

0800d28c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2a2:	2b40      	cmp	r3, #64	; 0x40
 800d2a4:	d005      	beq.n	800d2b2 <USBD_StdItfReq+0x26>
 800d2a6:	2b40      	cmp	r3, #64	; 0x40
 800d2a8:	d852      	bhi.n	800d350 <USBD_StdItfReq+0xc4>
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d001      	beq.n	800d2b2 <USBD_StdItfReq+0x26>
 800d2ae:	2b20      	cmp	r3, #32
 800d2b0:	d14e      	bne.n	800d350 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d840      	bhi.n	800d342 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	889b      	ldrh	r3, [r3, #4]
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d836      	bhi.n	800d338 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	889b      	ldrh	r3, [r3, #4]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff fed9 	bl	800d08a <USBD_CoreFindIF>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	2bff      	cmp	r3, #255	; 0xff
 800d2e0:	d01d      	beq.n	800d31e <USBD_StdItfReq+0x92>
 800d2e2:	7bbb      	ldrb	r3, [r7, #14]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11a      	bne.n	800d31e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d2e8:	7bba      	ldrb	r2, [r7, #14]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	32ae      	adds	r2, #174	; 0xae
 800d2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00f      	beq.n	800d318 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d2f8:	7bba      	ldrb	r2, [r7, #14]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d300:	7bba      	ldrb	r2, [r7, #14]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	32ae      	adds	r2, #174	; 0xae
 800d306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	4798      	blx	r3
 800d312:	4603      	mov	r3, r0
 800d314:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d316:	e004      	b.n	800d322 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d318:	2303      	movs	r3, #3
 800d31a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d31c:	e001      	b.n	800d322 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d31e:	2303      	movs	r3, #3
 800d320:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	88db      	ldrh	r3, [r3, #6]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d110      	bne.n	800d34c <USBD_StdItfReq+0xc0>
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10d      	bne.n	800d34c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fdf1 	bl	800df18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d336:	e009      	b.n	800d34c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d338:	6839      	ldr	r1, [r7, #0]
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fd21 	bl	800dd82 <USBD_CtlError>
          break;
 800d340:	e004      	b.n	800d34c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fd1c 	bl	800dd82 <USBD_CtlError>
          break;
 800d34a:	e000      	b.n	800d34e <USBD_StdItfReq+0xc2>
          break;
 800d34c:	bf00      	nop
      }
      break;
 800d34e:	e004      	b.n	800d35a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d350:	6839      	ldr	r1, [r7, #0]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fd15 	bl	800dd82 <USBD_CtlError>
      break;
 800d358:	bf00      	nop
  }

  return ret;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	889b      	ldrh	r3, [r3, #4]
 800d376:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d380:	2b40      	cmp	r3, #64	; 0x40
 800d382:	d007      	beq.n	800d394 <USBD_StdEPReq+0x30>
 800d384:	2b40      	cmp	r3, #64	; 0x40
 800d386:	f200 817f 	bhi.w	800d688 <USBD_StdEPReq+0x324>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d02a      	beq.n	800d3e4 <USBD_StdEPReq+0x80>
 800d38e:	2b20      	cmp	r3, #32
 800d390:	f040 817a 	bne.w	800d688 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff fe83 	bl	800d0a4 <USBD_CoreFindEP>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3a2:	7b7b      	ldrb	r3, [r7, #13]
 800d3a4:	2bff      	cmp	r3, #255	; 0xff
 800d3a6:	f000 8174 	beq.w	800d692 <USBD_StdEPReq+0x32e>
 800d3aa:	7b7b      	ldrb	r3, [r7, #13]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f040 8170 	bne.w	800d692 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d3b2:	7b7a      	ldrb	r2, [r7, #13]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3ba:	7b7a      	ldrb	r2, [r7, #13]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	32ae      	adds	r2, #174	; 0xae
 800d3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 8163 	beq.w	800d692 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3cc:	7b7a      	ldrb	r2, [r7, #13]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	32ae      	adds	r2, #174	; 0xae
 800d3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	4798      	blx	r3
 800d3de:	4603      	mov	r3, r0
 800d3e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3e2:	e156      	b.n	800d692 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	785b      	ldrb	r3, [r3, #1]
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d008      	beq.n	800d3fe <USBD_StdEPReq+0x9a>
 800d3ec:	2b03      	cmp	r3, #3
 800d3ee:	f300 8145 	bgt.w	800d67c <USBD_StdEPReq+0x318>
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 809b 	beq.w	800d52e <USBD_StdEPReq+0x1ca>
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d03c      	beq.n	800d476 <USBD_StdEPReq+0x112>
 800d3fc:	e13e      	b.n	800d67c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b02      	cmp	r3, #2
 800d408:	d002      	beq.n	800d410 <USBD_StdEPReq+0xac>
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d016      	beq.n	800d43c <USBD_StdEPReq+0xd8>
 800d40e:	e02c      	b.n	800d46a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00d      	beq.n	800d432 <USBD_StdEPReq+0xce>
 800d416:	7bbb      	ldrb	r3, [r7, #14]
 800d418:	2b80      	cmp	r3, #128	; 0x80
 800d41a:	d00a      	beq.n	800d432 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d41c:	7bbb      	ldrb	r3, [r7, #14]
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f003 ff9d 	bl	8011360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d426:	2180      	movs	r1, #128	; 0x80
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f003 ff99 	bl	8011360 <USBD_LL_StallEP>
 800d42e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d430:	e020      	b.n	800d474 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 fca4 	bl	800dd82 <USBD_CtlError>
              break;
 800d43a:	e01b      	b.n	800d474 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	885b      	ldrh	r3, [r3, #2]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10e      	bne.n	800d462 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00b      	beq.n	800d462 <USBD_StdEPReq+0xfe>
 800d44a:	7bbb      	ldrb	r3, [r7, #14]
 800d44c:	2b80      	cmp	r3, #128	; 0x80
 800d44e:	d008      	beq.n	800d462 <USBD_StdEPReq+0xfe>
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	88db      	ldrh	r3, [r3, #6]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d104      	bne.n	800d462 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f003 ff7f 	bl	8011360 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fd58 	bl	800df18 <USBD_CtlSendStatus>

              break;
 800d468:	e004      	b.n	800d474 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fc88 	bl	800dd82 <USBD_CtlError>
              break;
 800d472:	bf00      	nop
          }
          break;
 800d474:	e107      	b.n	800d686 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d002      	beq.n	800d488 <USBD_StdEPReq+0x124>
 800d482:	2b03      	cmp	r3, #3
 800d484:	d016      	beq.n	800d4b4 <USBD_StdEPReq+0x150>
 800d486:	e04b      	b.n	800d520 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d488:	7bbb      	ldrb	r3, [r7, #14]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00d      	beq.n	800d4aa <USBD_StdEPReq+0x146>
 800d48e:	7bbb      	ldrb	r3, [r7, #14]
 800d490:	2b80      	cmp	r3, #128	; 0x80
 800d492:	d00a      	beq.n	800d4aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f003 ff61 	bl	8011360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d49e:	2180      	movs	r1, #128	; 0x80
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f003 ff5d 	bl	8011360 <USBD_LL_StallEP>
 800d4a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4a8:	e040      	b.n	800d52c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fc68 	bl	800dd82 <USBD_CtlError>
              break;
 800d4b2:	e03b      	b.n	800d52c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	885b      	ldrh	r3, [r3, #2]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d136      	bne.n	800d52a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d004      	beq.n	800d4d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f003 ff67 	bl	801139e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fd21 	bl	800df18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4d6:	7bbb      	ldrb	r3, [r7, #14]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fde2 	bl	800d0a4 <USBD_CoreFindEP>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4e4:	7b7b      	ldrb	r3, [r7, #13]
 800d4e6:	2bff      	cmp	r3, #255	; 0xff
 800d4e8:	d01f      	beq.n	800d52a <USBD_StdEPReq+0x1c6>
 800d4ea:	7b7b      	ldrb	r3, [r7, #13]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d11c      	bne.n	800d52a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d4f0:	7b7a      	ldrb	r2, [r7, #13]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d4f8:	7b7a      	ldrb	r2, [r7, #13]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	32ae      	adds	r2, #174	; 0xae
 800d4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d010      	beq.n	800d52a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d508:	7b7a      	ldrb	r2, [r7, #13]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	32ae      	adds	r2, #174	; 0xae
 800d50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	4798      	blx	r3
 800d51a:	4603      	mov	r3, r0
 800d51c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d51e:	e004      	b.n	800d52a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fc2d 	bl	800dd82 <USBD_CtlError>
              break;
 800d528:	e000      	b.n	800d52c <USBD_StdEPReq+0x1c8>
              break;
 800d52a:	bf00      	nop
          }
          break;
 800d52c:	e0ab      	b.n	800d686 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b02      	cmp	r3, #2
 800d538:	d002      	beq.n	800d540 <USBD_StdEPReq+0x1dc>
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d032      	beq.n	800d5a4 <USBD_StdEPReq+0x240>
 800d53e:	e097      	b.n	800d670 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d540:	7bbb      	ldrb	r3, [r7, #14]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d007      	beq.n	800d556 <USBD_StdEPReq+0x1f2>
 800d546:	7bbb      	ldrb	r3, [r7, #14]
 800d548:	2b80      	cmp	r3, #128	; 0x80
 800d54a:	d004      	beq.n	800d556 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fc17 	bl	800dd82 <USBD_CtlError>
                break;
 800d554:	e091      	b.n	800d67a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	da0b      	bge.n	800d576 <USBD_StdEPReq+0x212>
 800d55e:	7bbb      	ldrb	r3, [r7, #14]
 800d560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	3310      	adds	r3, #16
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	4413      	add	r3, r2
 800d572:	3304      	adds	r3, #4
 800d574:	e00b      	b.n	800d58e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d576:	7bbb      	ldrb	r3, [r7, #14]
 800d578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d57c:	4613      	mov	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4413      	add	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	4413      	add	r3, r2
 800d58c:	3304      	adds	r3, #4
 800d58e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2202      	movs	r2, #2
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fc61 	bl	800de64 <USBD_CtlSendData>
              break;
 800d5a2:	e06a      	b.n	800d67a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	da11      	bge.n	800d5d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5ac:	7bbb      	ldrb	r3, [r7, #14]
 800d5ae:	f003 020f 	and.w	r2, r3, #15
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	440b      	add	r3, r1
 800d5be:	3324      	adds	r3, #36	; 0x24
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d117      	bne.n	800d5f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fbda 	bl	800dd82 <USBD_CtlError>
                  break;
 800d5ce:	e054      	b.n	800d67a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5d0:	7bbb      	ldrb	r3, [r7, #14]
 800d5d2:	f003 020f 	and.w	r2, r3, #15
 800d5d6:	6879      	ldr	r1, [r7, #4]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	440b      	add	r3, r1
 800d5e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d5e6:	881b      	ldrh	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fbc7 	bl	800dd82 <USBD_CtlError>
                  break;
 800d5f4:	e041      	b.n	800d67a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	da0b      	bge.n	800d616 <USBD_StdEPReq+0x2b2>
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d604:	4613      	mov	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	3310      	adds	r3, #16
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	4413      	add	r3, r2
 800d612:	3304      	adds	r3, #4
 800d614:	e00b      	b.n	800d62e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d616:	7bbb      	ldrb	r3, [r7, #14]
 800d618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d61c:	4613      	mov	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	4413      	add	r3, r2
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	4413      	add	r3, r2
 800d62c:	3304      	adds	r3, #4
 800d62e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d630:	7bbb      	ldrb	r3, [r7, #14]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d002      	beq.n	800d63c <USBD_StdEPReq+0x2d8>
 800d636:	7bbb      	ldrb	r3, [r7, #14]
 800d638:	2b80      	cmp	r3, #128	; 0x80
 800d63a:	d103      	bne.n	800d644 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2200      	movs	r2, #0
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	e00e      	b.n	800d662 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d644:	7bbb      	ldrb	r3, [r7, #14]
 800d646:	4619      	mov	r1, r3
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f003 fec7 	bl	80113dc <USBD_LL_IsStallEP>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d003      	beq.n	800d65c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	2201      	movs	r2, #1
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	e002      	b.n	800d662 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2200      	movs	r2, #0
 800d660:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2202      	movs	r2, #2
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fbfb 	bl	800de64 <USBD_CtlSendData>
              break;
 800d66e:	e004      	b.n	800d67a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fb85 	bl	800dd82 <USBD_CtlError>
              break;
 800d678:	bf00      	nop
          }
          break;
 800d67a:	e004      	b.n	800d686 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fb7f 	bl	800dd82 <USBD_CtlError>
          break;
 800d684:	bf00      	nop
      }
      break;
 800d686:	e005      	b.n	800d694 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d688:	6839      	ldr	r1, [r7, #0]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fb79 	bl	800dd82 <USBD_CtlError>
      break;
 800d690:	e000      	b.n	800d694 <USBD_StdEPReq+0x330>
      break;
 800d692:	bf00      	nop
  }

  return ret;
 800d694:	7bfb      	ldrb	r3, [r7, #15]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
	...

0800d6a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	885b      	ldrh	r3, [r3, #2]
 800d6ba:	0a1b      	lsrs	r3, r3, #8
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	2b0e      	cmp	r3, #14
 800d6c2:	f200 8152 	bhi.w	800d96a <USBD_GetDescriptor+0x2ca>
 800d6c6:	a201      	add	r2, pc, #4	; (adr r2, 800d6cc <USBD_GetDescriptor+0x2c>)
 800d6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6cc:	0800d73d 	.word	0x0800d73d
 800d6d0:	0800d755 	.word	0x0800d755
 800d6d4:	0800d795 	.word	0x0800d795
 800d6d8:	0800d96b 	.word	0x0800d96b
 800d6dc:	0800d96b 	.word	0x0800d96b
 800d6e0:	0800d90b 	.word	0x0800d90b
 800d6e4:	0800d937 	.word	0x0800d937
 800d6e8:	0800d96b 	.word	0x0800d96b
 800d6ec:	0800d96b 	.word	0x0800d96b
 800d6f0:	0800d96b 	.word	0x0800d96b
 800d6f4:	0800d96b 	.word	0x0800d96b
 800d6f8:	0800d96b 	.word	0x0800d96b
 800d6fc:	0800d96b 	.word	0x0800d96b
 800d700:	0800d96b 	.word	0x0800d96b
 800d704:	0800d709 	.word	0x0800d709
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d70e:	69db      	ldr	r3, [r3, #28]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00b      	beq.n	800d72c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d71a:	69db      	ldr	r3, [r3, #28]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	7c12      	ldrb	r2, [r2, #16]
 800d720:	f107 0108 	add.w	r1, r7, #8
 800d724:	4610      	mov	r0, r2
 800d726:	4798      	blx	r3
 800d728:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d72a:	e126      	b.n	800d97a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fb27 	bl	800dd82 <USBD_CtlError>
        err++;
 800d734:	7afb      	ldrb	r3, [r7, #11]
 800d736:	3301      	adds	r3, #1
 800d738:	72fb      	strb	r3, [r7, #11]
      break;
 800d73a:	e11e      	b.n	800d97a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	7c12      	ldrb	r2, [r2, #16]
 800d748:	f107 0108 	add.w	r1, r7, #8
 800d74c:	4610      	mov	r0, r2
 800d74e:	4798      	blx	r3
 800d750:	60f8      	str	r0, [r7, #12]
      break;
 800d752:	e112      	b.n	800d97a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	7c1b      	ldrb	r3, [r3, #16]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10d      	bne.n	800d778 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d764:	f107 0208 	add.w	r2, r7, #8
 800d768:	4610      	mov	r0, r2
 800d76a:	4798      	blx	r3
 800d76c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3301      	adds	r3, #1
 800d772:	2202      	movs	r2, #2
 800d774:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d776:	e100      	b.n	800d97a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d780:	f107 0208 	add.w	r2, r7, #8
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
 800d788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	2202      	movs	r2, #2
 800d790:	701a      	strb	r2, [r3, #0]
      break;
 800d792:	e0f2      	b.n	800d97a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	885b      	ldrh	r3, [r3, #2]
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	2b05      	cmp	r3, #5
 800d79c:	f200 80ac 	bhi.w	800d8f8 <USBD_GetDescriptor+0x258>
 800d7a0:	a201      	add	r2, pc, #4	; (adr r2, 800d7a8 <USBD_GetDescriptor+0x108>)
 800d7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a6:	bf00      	nop
 800d7a8:	0800d7c1 	.word	0x0800d7c1
 800d7ac:	0800d7f5 	.word	0x0800d7f5
 800d7b0:	0800d829 	.word	0x0800d829
 800d7b4:	0800d85d 	.word	0x0800d85d
 800d7b8:	0800d891 	.word	0x0800d891
 800d7bc:	0800d8c5 	.word	0x0800d8c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00b      	beq.n	800d7e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	7c12      	ldrb	r2, [r2, #16]
 800d7d8:	f107 0108 	add.w	r1, r7, #8
 800d7dc:	4610      	mov	r0, r2
 800d7de:	4798      	blx	r3
 800d7e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7e2:	e091      	b.n	800d908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 facb 	bl	800dd82 <USBD_CtlError>
            err++;
 800d7ec:	7afb      	ldrb	r3, [r7, #11]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7f2:	e089      	b.n	800d908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00b      	beq.n	800d818 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	7c12      	ldrb	r2, [r2, #16]
 800d80c:	f107 0108 	add.w	r1, r7, #8
 800d810:	4610      	mov	r0, r2
 800d812:	4798      	blx	r3
 800d814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d816:	e077      	b.n	800d908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d818:	6839      	ldr	r1, [r7, #0]
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 fab1 	bl	800dd82 <USBD_CtlError>
            err++;
 800d820:	7afb      	ldrb	r3, [r7, #11]
 800d822:	3301      	adds	r3, #1
 800d824:	72fb      	strb	r3, [r7, #11]
          break;
 800d826:	e06f      	b.n	800d908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00b      	beq.n	800d84c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	7c12      	ldrb	r2, [r2, #16]
 800d840:	f107 0108 	add.w	r1, r7, #8
 800d844:	4610      	mov	r0, r2
 800d846:	4798      	blx	r3
 800d848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d84a:	e05d      	b.n	800d908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d84c:	6839      	ldr	r1, [r7, #0]
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 fa97 	bl	800dd82 <USBD_CtlError>
            err++;
 800d854:	7afb      	ldrb	r3, [r7, #11]
 800d856:	3301      	adds	r3, #1
 800d858:	72fb      	strb	r3, [r7, #11]
          break;
 800d85a:	e055      	b.n	800d908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00b      	beq.n	800d880 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	7c12      	ldrb	r2, [r2, #16]
 800d874:	f107 0108 	add.w	r1, r7, #8
 800d878:	4610      	mov	r0, r2
 800d87a:	4798      	blx	r3
 800d87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d87e:	e043      	b.n	800d908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fa7d 	bl	800dd82 <USBD_CtlError>
            err++;
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	3301      	adds	r3, #1
 800d88c:	72fb      	strb	r3, [r7, #11]
          break;
 800d88e:	e03b      	b.n	800d908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00b      	beq.n	800d8b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	7c12      	ldrb	r2, [r2, #16]
 800d8a8:	f107 0108 	add.w	r1, r7, #8
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4798      	blx	r3
 800d8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8b2:	e029      	b.n	800d908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fa63 	bl	800dd82 <USBD_CtlError>
            err++;
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8c2:	e021      	b.n	800d908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	7c12      	ldrb	r2, [r2, #16]
 800d8dc:	f107 0108 	add.w	r1, r7, #8
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
 800d8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8e6:	e00f      	b.n	800d908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fa49 	bl	800dd82 <USBD_CtlError>
            err++;
 800d8f0:	7afb      	ldrb	r3, [r7, #11]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d8f6:	e007      	b.n	800d908 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fa41 	bl	800dd82 <USBD_CtlError>
          err++;
 800d900:	7afb      	ldrb	r3, [r7, #11]
 800d902:	3301      	adds	r3, #1
 800d904:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d906:	bf00      	nop
      }
      break;
 800d908:	e037      	b.n	800d97a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	7c1b      	ldrb	r3, [r3, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d109      	bne.n	800d926 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91a:	f107 0208 	add.w	r2, r7, #8
 800d91e:	4610      	mov	r0, r2
 800d920:	4798      	blx	r3
 800d922:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d924:	e029      	b.n	800d97a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fa2a 	bl	800dd82 <USBD_CtlError>
        err++;
 800d92e:	7afb      	ldrb	r3, [r7, #11]
 800d930:	3301      	adds	r3, #1
 800d932:	72fb      	strb	r3, [r7, #11]
      break;
 800d934:	e021      	b.n	800d97a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7c1b      	ldrb	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10d      	bne.n	800d95a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d946:	f107 0208 	add.w	r2, r7, #8
 800d94a:	4610      	mov	r0, r2
 800d94c:	4798      	blx	r3
 800d94e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3301      	adds	r3, #1
 800d954:	2207      	movs	r2, #7
 800d956:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d958:	e00f      	b.n	800d97a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fa10 	bl	800dd82 <USBD_CtlError>
        err++;
 800d962:	7afb      	ldrb	r3, [r7, #11]
 800d964:	3301      	adds	r3, #1
 800d966:	72fb      	strb	r3, [r7, #11]
      break;
 800d968:	e007      	b.n	800d97a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fa08 	bl	800dd82 <USBD_CtlError>
      err++;
 800d972:	7afb      	ldrb	r3, [r7, #11]
 800d974:	3301      	adds	r3, #1
 800d976:	72fb      	strb	r3, [r7, #11]
      break;
 800d978:	bf00      	nop
  }

  if (err != 0U)
 800d97a:	7afb      	ldrb	r3, [r7, #11]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d11e      	bne.n	800d9be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	88db      	ldrh	r3, [r3, #6]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d016      	beq.n	800d9b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d988:	893b      	ldrh	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00e      	beq.n	800d9ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	88da      	ldrh	r2, [r3, #6]
 800d992:	893b      	ldrh	r3, [r7, #8]
 800d994:	4293      	cmp	r3, r2
 800d996:	bf28      	it	cs
 800d998:	4613      	movcs	r3, r2
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d99e:	893b      	ldrh	r3, [r7, #8]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	68f9      	ldr	r1, [r7, #12]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fa5d 	bl	800de64 <USBD_CtlSendData>
 800d9aa:	e009      	b.n	800d9c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d9ac:	6839      	ldr	r1, [r7, #0]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f9e7 	bl	800dd82 <USBD_CtlError>
 800d9b4:	e004      	b.n	800d9c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 faae 	bl	800df18 <USBD_CtlSendStatus>
 800d9bc:	e000      	b.n	800d9c0 <USBD_GetDescriptor+0x320>
    return;
 800d9be:	bf00      	nop
  }
}
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop

0800d9c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	889b      	ldrh	r3, [r3, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d131      	bne.n	800da3e <USBD_SetAddress+0x76>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	88db      	ldrh	r3, [r3, #6]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d12d      	bne.n	800da3e <USBD_SetAddress+0x76>
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	885b      	ldrh	r3, [r3, #2]
 800d9e6:	2b7f      	cmp	r3, #127	; 0x7f
 800d9e8:	d829      	bhi.n	800da3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d104      	bne.n	800da0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f9bc 	bl	800dd82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da0a:	e01d      	b.n	800da48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7bfa      	ldrb	r2, [r7, #15]
 800da10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	4619      	mov	r1, r3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f003 fd0b 	bl	8011434 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 fa7a 	bl	800df18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d004      	beq.n	800da34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2202      	movs	r2, #2
 800da2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da32:	e009      	b.n	800da48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3c:	e004      	b.n	800da48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da3e:	6839      	ldr	r1, [r7, #0]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f99e 	bl	800dd82 <USBD_CtlError>
  }
}
 800da46:	bf00      	nop
 800da48:	bf00      	nop
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	885b      	ldrh	r3, [r3, #2]
 800da62:	b2da      	uxtb	r2, r3
 800da64:	4b4e      	ldr	r3, [pc, #312]	; (800dba0 <USBD_SetConfig+0x150>)
 800da66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da68:	4b4d      	ldr	r3, [pc, #308]	; (800dba0 <USBD_SetConfig+0x150>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d905      	bls.n	800da7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f985 	bl	800dd82 <USBD_CtlError>
    return USBD_FAIL;
 800da78:	2303      	movs	r3, #3
 800da7a:	e08c      	b.n	800db96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2b02      	cmp	r3, #2
 800da86:	d002      	beq.n	800da8e <USBD_SetConfig+0x3e>
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d029      	beq.n	800dae0 <USBD_SetConfig+0x90>
 800da8c:	e075      	b.n	800db7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da8e:	4b44      	ldr	r3, [pc, #272]	; (800dba0 <USBD_SetConfig+0x150>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d020      	beq.n	800dad8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da96:	4b42      	ldr	r3, [pc, #264]	; (800dba0 <USBD_SetConfig+0x150>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800daa0:	4b3f      	ldr	r3, [pc, #252]	; (800dba0 <USBD_SetConfig+0x150>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7fe ffbd 	bl	800ca26 <USBD_SetClassConfig>
 800daac:	4603      	mov	r3, r0
 800daae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d008      	beq.n	800dac8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f962 	bl	800dd82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2202      	movs	r2, #2
 800dac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dac6:	e065      	b.n	800db94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fa25 	bl	800df18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2203      	movs	r2, #3
 800dad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dad6:	e05d      	b.n	800db94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fa1d 	bl	800df18 <USBD_CtlSendStatus>
      break;
 800dade:	e059      	b.n	800db94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dae0:	4b2f      	ldr	r3, [pc, #188]	; (800dba0 <USBD_SetConfig+0x150>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d112      	bne.n	800db0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800daf0:	4b2b      	ldr	r3, [pc, #172]	; (800dba0 <USBD_SetConfig+0x150>)
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	461a      	mov	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dafa:	4b29      	ldr	r3, [pc, #164]	; (800dba0 <USBD_SetConfig+0x150>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7fe ffac 	bl	800ca5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fa06 	bl	800df18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db0c:	e042      	b.n	800db94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800db0e:	4b24      	ldr	r3, [pc, #144]	; (800dba0 <USBD_SetConfig+0x150>)
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d02a      	beq.n	800db72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	b2db      	uxtb	r3, r3
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7fe ff9a 	bl	800ca5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800db2a:	4b1d      	ldr	r3, [pc, #116]	; (800dba0 <USBD_SetConfig+0x150>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	461a      	mov	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db34:	4b1a      	ldr	r3, [pc, #104]	; (800dba0 <USBD_SetConfig+0x150>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	4619      	mov	r1, r3
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7fe ff73 	bl	800ca26 <USBD_SetClassConfig>
 800db40:	4603      	mov	r3, r0
 800db42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00f      	beq.n	800db6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f918 	bl	800dd82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7fe ff7f 	bl	800ca5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db68:	e014      	b.n	800db94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f9d4 	bl	800df18 <USBD_CtlSendStatus>
      break;
 800db70:	e010      	b.n	800db94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f9d0 	bl	800df18 <USBD_CtlSendStatus>
      break;
 800db78:	e00c      	b.n	800db94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f900 	bl	800dd82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db82:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <USBD_SetConfig+0x150>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	4619      	mov	r1, r3
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7fe ff68 	bl	800ca5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db8e:	2303      	movs	r3, #3
 800db90:	73fb      	strb	r3, [r7, #15]
      break;
 800db92:	bf00      	nop
  }

  return ret;
 800db94:	7bfb      	ldrb	r3, [r7, #15]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	2000c0dc 	.word	0x2000c0dc

0800dba4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	88db      	ldrh	r3, [r3, #6]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d004      	beq.n	800dbc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f8e2 	bl	800dd82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dbbe:	e023      	b.n	800dc08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	dc02      	bgt.n	800dbd2 <USBD_GetConfig+0x2e>
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dc03      	bgt.n	800dbd8 <USBD_GetConfig+0x34>
 800dbd0:	e015      	b.n	800dbfe <USBD_GetConfig+0x5a>
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d00b      	beq.n	800dbee <USBD_GetConfig+0x4a>
 800dbd6:	e012      	b.n	800dbfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f93c 	bl	800de64 <USBD_CtlSendData>
        break;
 800dbec:	e00c      	b.n	800dc08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 f934 	bl	800de64 <USBD_CtlSendData>
        break;
 800dbfc:	e004      	b.n	800dc08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbfe:	6839      	ldr	r1, [r7, #0]
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f8be 	bl	800dd82 <USBD_CtlError>
        break;
 800dc06:	bf00      	nop
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	3b01      	subs	r3, #1
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d81e      	bhi.n	800dc66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	88db      	ldrh	r3, [r3, #6]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d004      	beq.n	800dc3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 f8a5 	bl	800dd82 <USBD_CtlError>
        break;
 800dc38:	e01a      	b.n	800dc70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d005      	beq.n	800dc56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	f043 0202 	orr.w	r2, r3, #2
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	330c      	adds	r3, #12
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f900 	bl	800de64 <USBD_CtlSendData>
      break;
 800dc64:	e004      	b.n	800dc70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f88a 	bl	800dd82 <USBD_CtlError>
      break;
 800dc6e:	bf00      	nop
  }
}
 800dc70:	bf00      	nop
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	885b      	ldrh	r3, [r3, #2]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d107      	bne.n	800dc9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f940 	bl	800df18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc98:	e013      	b.n	800dcc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	885b      	ldrh	r3, [r3, #2]
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d10b      	bne.n	800dcba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	889b      	ldrh	r3, [r3, #4]
 800dca6:	0a1b      	lsrs	r3, r3, #8
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 f930 	bl	800df18 <USBD_CtlSendStatus>
}
 800dcb8:	e003      	b.n	800dcc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f860 	bl	800dd82 <USBD_CtlError>
}
 800dcc2:	bf00      	nop
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b082      	sub	sp, #8
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d80b      	bhi.n	800dcfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	885b      	ldrh	r3, [r3, #2]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d10c      	bne.n	800dd04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f910 	bl	800df18 <USBD_CtlSendStatus>
      }
      break;
 800dcf8:	e004      	b.n	800dd04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f840 	bl	800dd82 <USBD_CtlError>
      break;
 800dd02:	e000      	b.n	800dd06 <USBD_ClrFeature+0x3c>
      break;
 800dd04:	bf00      	nop
  }
}
 800dd06:	bf00      	nop
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	781a      	ldrb	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3301      	adds	r3, #1
 800dd28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	781a      	ldrb	r2, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3301      	adds	r3, #1
 800dd36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff fa17 	bl	800d16c <SWAPBYTE>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	461a      	mov	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f7ff fa0a 	bl	800d16c <SWAPBYTE>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3301      	adds	r3, #1
 800dd64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f7ff f9fd 	bl	800d16c <SWAPBYTE>
 800dd72:	4603      	mov	r3, r0
 800dd74:	461a      	mov	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	80da      	strh	r2, [r3, #6]
}
 800dd7a:	bf00      	nop
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd8c:	2180      	movs	r1, #128	; 0x80
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f003 fae6 	bl	8011360 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd94:	2100      	movs	r1, #0
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f003 fae2 	bl	8011360 <USBD_LL_StallEP>
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d036      	beq.n	800de28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ddbe:	6938      	ldr	r0, [r7, #16]
 800ddc0:	f000 f836 	bl	800de30 <USBD_GetLen>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddd2:	7dfb      	ldrb	r3, [r7, #23]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	7812      	ldrb	r2, [r2, #0]
 800dddc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	3301      	adds	r3, #1
 800dde2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dde4:	7dfb      	ldrb	r3, [r7, #23]
 800dde6:	68ba      	ldr	r2, [r7, #8]
 800dde8:	4413      	add	r3, r2
 800ddea:	2203      	movs	r2, #3
 800ddec:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ddf4:	e013      	b.n	800de1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ddf6:	7dfb      	ldrb	r3, [r7, #23]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	7812      	ldrb	r2, [r2, #0]
 800de00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	3301      	adds	r3, #1
 800de06:	613b      	str	r3, [r7, #16]
    idx++;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	3301      	adds	r3, #1
 800de0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	4413      	add	r3, r2
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
    idx++;
 800de18:	7dfb      	ldrb	r3, [r7, #23]
 800de1a:	3301      	adds	r3, #1
 800de1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1e7      	bne.n	800ddf6 <USBD_GetString+0x52>
 800de26:	e000      	b.n	800de2a <USBD_GetString+0x86>
    return;
 800de28:	bf00      	nop
  }
}
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de38:	2300      	movs	r3, #0
 800de3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de40:	e005      	b.n	800de4e <USBD_GetLen+0x1e>
  {
    len++;
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	3301      	adds	r3, #1
 800de46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	3301      	adds	r3, #1
 800de4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1f5      	bne.n	800de42 <USBD_GetLen+0x12>
  }

  return len;
 800de56:	7bfb      	ldrb	r3, [r7, #15]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2202      	movs	r2, #2
 800de74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	2100      	movs	r1, #0
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f003 faf1 	bl	8011472 <USBD_LL_Transmit>

  return USBD_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	2100      	movs	r1, #0
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f003 fae0 	bl	8011472 <USBD_LL_Transmit>

  return USBD_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2203      	movs	r2, #3
 800decc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	2100      	movs	r1, #0
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f003 fae4 	bl	80114b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b084      	sub	sp, #16
 800defa:	af00      	add	r7, sp, #0
 800defc:	60f8      	str	r0, [r7, #12]
 800defe:	60b9      	str	r1, [r7, #8]
 800df00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	2100      	movs	r1, #0
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f003 fad3 	bl	80114b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2204      	movs	r2, #4
 800df24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df28:	2300      	movs	r3, #0
 800df2a:	2200      	movs	r2, #0
 800df2c:	2100      	movs	r1, #0
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f003 fa9f 	bl	8011472 <USBD_LL_Transmit>

  return USBD_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b082      	sub	sp, #8
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2205      	movs	r2, #5
 800df4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df4e:	2300      	movs	r3, #0
 800df50:	2200      	movs	r2, #0
 800df52:	2100      	movs	r1, #0
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f003 faad 	bl	80114b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800df68:	bf00      	nop
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
	...

0800df74 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df7a:	f3ef 8305 	mrs	r3, IPSR
 800df7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800df80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10f      	bne.n	800dfa6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df86:	f3ef 8310 	mrs	r3, PRIMASK
 800df8a:	607b      	str	r3, [r7, #4]
  return(result);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d105      	bne.n	800df9e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df92:	f3ef 8311 	mrs	r3, BASEPRI
 800df96:	603b      	str	r3, [r7, #0]
  return(result);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d007      	beq.n	800dfae <osKernelInitialize+0x3a>
 800df9e:	4b0e      	ldr	r3, [pc, #56]	; (800dfd8 <osKernelInitialize+0x64>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d103      	bne.n	800dfae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dfa6:	f06f 0305 	mvn.w	r3, #5
 800dfaa:	60fb      	str	r3, [r7, #12]
 800dfac:	e00c      	b.n	800dfc8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dfae:	4b0a      	ldr	r3, [pc, #40]	; (800dfd8 <osKernelInitialize+0x64>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d105      	bne.n	800dfc2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dfb6:	4b08      	ldr	r3, [pc, #32]	; (800dfd8 <osKernelInitialize+0x64>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	e002      	b.n	800dfc8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dfc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	2000c0e0 	.word	0x2000c0e0

0800dfdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfe2:	f3ef 8305 	mrs	r3, IPSR
 800dfe6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10f      	bne.n	800e00e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfee:	f3ef 8310 	mrs	r3, PRIMASK
 800dff2:	607b      	str	r3, [r7, #4]
  return(result);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d105      	bne.n	800e006 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dffa:	f3ef 8311 	mrs	r3, BASEPRI
 800dffe:	603b      	str	r3, [r7, #0]
  return(result);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d007      	beq.n	800e016 <osKernelStart+0x3a>
 800e006:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <osKernelStart+0x68>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d103      	bne.n	800e016 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e00e:	f06f 0305 	mvn.w	r3, #5
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	e010      	b.n	800e038 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <osKernelStart+0x68>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d109      	bne.n	800e032 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e01e:	f7ff ffa1 	bl	800df64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e022:	4b08      	ldr	r3, [pc, #32]	; (800e044 <osKernelStart+0x68>)
 800e024:	2202      	movs	r2, #2
 800e026:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e028:	f001 f8b4 	bl	800f194 <vTaskStartScheduler>
      stat = osOK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	e002      	b.n	800e038 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e036:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e038:	68fb      	ldr	r3, [r7, #12]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	2000c0e0 	.word	0x2000c0e0

0800e048 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e048:	b580      	push	{r7, lr}
 800e04a:	b090      	sub	sp, #64	; 0x40
 800e04c:	af04      	add	r7, sp, #16
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e054:	2300      	movs	r3, #0
 800e056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e058:	f3ef 8305 	mrs	r3, IPSR
 800e05c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e05e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e060:	2b00      	cmp	r3, #0
 800e062:	f040 808f 	bne.w	800e184 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e066:	f3ef 8310 	mrs	r3, PRIMASK
 800e06a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d105      	bne.n	800e07e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e072:	f3ef 8311 	mrs	r3, BASEPRI
 800e076:	617b      	str	r3, [r7, #20]
  return(result);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <osThreadNew+0x3e>
 800e07e:	4b44      	ldr	r3, [pc, #272]	; (800e190 <osThreadNew+0x148>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b02      	cmp	r3, #2
 800e084:	d07e      	beq.n	800e184 <osThreadNew+0x13c>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d07b      	beq.n	800e184 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e08c:	2380      	movs	r3, #128	; 0x80
 800e08e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e090:	2318      	movs	r3, #24
 800e092:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e094:	2300      	movs	r3, #0
 800e096:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e09c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d045      	beq.n	800e130 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <osThreadNew+0x6a>
        name = attr->name;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	699b      	ldr	r3, [r3, #24]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d002      	beq.n	800e0c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d008      	beq.n	800e0d8 <osThreadNew+0x90>
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	2b38      	cmp	r3, #56	; 0x38
 800e0ca:	d805      	bhi.n	800e0d8 <osThreadNew+0x90>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	f003 0301 	and.w	r3, r3, #1
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <osThreadNew+0x94>
        return (NULL);
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e054      	b.n	800e186 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d003      	beq.n	800e0ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	089b      	lsrs	r3, r3, #2
 800e0ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00e      	beq.n	800e112 <osThreadNew+0xca>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	2b5b      	cmp	r3, #91	; 0x5b
 800e0fa:	d90a      	bls.n	800e112 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e100:	2b00      	cmp	r3, #0
 800e102:	d006      	beq.n	800e112 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	695b      	ldr	r3, [r3, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d002      	beq.n	800e112 <osThreadNew+0xca>
        mem = 1;
 800e10c:	2301      	movs	r3, #1
 800e10e:	623b      	str	r3, [r7, #32]
 800e110:	e010      	b.n	800e134 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10c      	bne.n	800e134 <osThreadNew+0xec>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d108      	bne.n	800e134 <osThreadNew+0xec>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d104      	bne.n	800e134 <osThreadNew+0xec>
          mem = 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	623b      	str	r3, [r7, #32]
 800e12e:	e001      	b.n	800e134 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d110      	bne.n	800e15c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e142:	9202      	str	r2, [sp, #8]
 800e144:	9301      	str	r3, [sp, #4]
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e14e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f000 fe3f 	bl	800edd4 <xTaskCreateStatic>
 800e156:	4603      	mov	r3, r0
 800e158:	613b      	str	r3, [r7, #16]
 800e15a:	e013      	b.n	800e184 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d110      	bne.n	800e184 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	b29a      	uxth	r2, r3
 800e166:	f107 0310 	add.w	r3, r7, #16
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f000 fe90 	bl	800ee9a <xTaskCreate>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d001      	beq.n	800e184 <osThreadNew+0x13c>
          hTask = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e184:	693b      	ldr	r3, [r7, #16]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3730      	adds	r7, #48	; 0x30
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	2000c0e0 	.word	0x2000c0e0

0800e194 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e19c:	f3ef 8305 	mrs	r3, IPSR
 800e1a0:	613b      	str	r3, [r7, #16]
  return(result);
 800e1a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10f      	bne.n	800e1c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d105      	bne.n	800e1c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1b4:	f3ef 8311 	mrs	r3, BASEPRI
 800e1b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d007      	beq.n	800e1d0 <osDelay+0x3c>
 800e1c0:	4b0a      	ldr	r3, [pc, #40]	; (800e1ec <osDelay+0x58>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d103      	bne.n	800e1d0 <osDelay+0x3c>
    stat = osErrorISR;
 800e1c8:	f06f 0305 	mvn.w	r3, #5
 800e1cc:	617b      	str	r3, [r7, #20]
 800e1ce:	e007      	b.n	800e1e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 ffa4 	bl	800f128 <vTaskDelay>
    }
  }

  return (stat);
 800e1e0:	697b      	ldr	r3, [r7, #20]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	2000c0e0 	.word	0x2000c0e0

0800e1f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	4a07      	ldr	r2, [pc, #28]	; (800e21c <vApplicationGetIdleTaskMemory+0x2c>)
 800e200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	4a06      	ldr	r2, [pc, #24]	; (800e220 <vApplicationGetIdleTaskMemory+0x30>)
 800e206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2280      	movs	r2, #128	; 0x80
 800e20c:	601a      	str	r2, [r3, #0]
}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	2000c0e4 	.word	0x2000c0e4
 800e220:	2000c140 	.word	0x2000c140

0800e224 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4a07      	ldr	r2, [pc, #28]	; (800e250 <vApplicationGetTimerTaskMemory+0x2c>)
 800e234:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	4a06      	ldr	r2, [pc, #24]	; (800e254 <vApplicationGetTimerTaskMemory+0x30>)
 800e23a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e242:	601a      	str	r2, [r3, #0]
}
 800e244:	bf00      	nop
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	2000c340 	.word	0x2000c340
 800e254:	2000c39c 	.word	0x2000c39c

0800e258 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f103 0208 	add.w	r2, r3, #8
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e270:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f103 0208 	add.w	r2, r3, #8
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f103 0208 	add.w	r2, r3, #8
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e28c:	bf00      	nop
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e2a6:	bf00      	nop
 800e2a8:	370c      	adds	r7, #12
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2b2:	b480      	push	{r7}
 800e2b4:	b085      	sub	sp, #20
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	689a      	ldr	r2, [r3, #8]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	1c5a      	adds	r2, r3, #1
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	601a      	str	r2, [r3, #0]
}
 800e2ee:	bf00      	nop
 800e2f0:	3714      	adds	r7, #20
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2fa:	b480      	push	{r7}
 800e2fc:	b085      	sub	sp, #20
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e310:	d103      	bne.n	800e31a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e00c      	b.n	800e334 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	3308      	adds	r3, #8
 800e31e:	60fb      	str	r3, [r7, #12]
 800e320:	e002      	b.n	800e328 <vListInsert+0x2e>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	429a      	cmp	r2, r3
 800e332:	d2f6      	bcs.n	800e322 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	683a      	ldr	r2, [r7, #0]
 800e34e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	601a      	str	r2, [r3, #0]
}
 800e360:	bf00      	nop
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	6892      	ldr	r2, [r2, #8]
 800e382:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	6852      	ldr	r2, [r2, #4]
 800e38c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	429a      	cmp	r2, r3
 800e396:	d103      	bne.n	800e3a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	689a      	ldr	r2, [r3, #8]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	1e5a      	subs	r2, r3, #1
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10c      	bne.n	800e3ee <xQueueGenericReset+0x2e>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	b672      	cpsid	i
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	b662      	cpsie	i
 800e3e8:	60bb      	str	r3, [r7, #8]
}
 800e3ea:	bf00      	nop
 800e3ec:	e7fe      	b.n	800e3ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e3ee:	f002 f8a5 	bl	801053c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3fa:	68f9      	ldr	r1, [r7, #12]
 800e3fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3fe:	fb01 f303 	mul.w	r3, r1, r3
 800e402:	441a      	add	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2200      	movs	r2, #0
 800e40c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41e:	3b01      	subs	r3, #1
 800e420:	68f9      	ldr	r1, [r7, #12]
 800e422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e424:	fb01 f303 	mul.w	r3, r1, r3
 800e428:	441a      	add	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	22ff      	movs	r2, #255	; 0xff
 800e432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	22ff      	movs	r2, #255	; 0xff
 800e43a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d114      	bne.n	800e46e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d01a      	beq.n	800e482 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	3310      	adds	r3, #16
 800e450:	4618      	mov	r0, r3
 800e452:	f001 f937 	bl	800f6c4 <xTaskRemoveFromEventList>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d012      	beq.n	800e482 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e45c:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <xQueueGenericReset+0xd0>)
 800e45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e462:	601a      	str	r2, [r3, #0]
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	e009      	b.n	800e482 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3310      	adds	r3, #16
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fef0 	bl	800e258 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3324      	adds	r3, #36	; 0x24
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7ff feeb 	bl	800e258 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e482:	f002 f88f 	bl	80105a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e486:	2301      	movs	r3, #1
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	e000ed04 	.word	0xe000ed04

0800e494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e494:	b580      	push	{r7, lr}
 800e496:	b08e      	sub	sp, #56	; 0x38
 800e498:	af02      	add	r7, sp, #8
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
 800e4a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10c      	bne.n	800e4c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	b672      	cpsid	i
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	b662      	cpsie	i
 800e4bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10c      	bne.n	800e4e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	b672      	cpsid	i
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	b662      	cpsie	i
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4de:	bf00      	nop
 800e4e0:	e7fe      	b.n	800e4e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <xQueueGenericCreateStatic+0x5a>
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <xQueueGenericCreateStatic+0x5e>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e000      	b.n	800e4f4 <xQueueGenericCreateStatic+0x60>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10c      	bne.n	800e512 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	b672      	cpsid	i
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	b662      	cpsie	i
 800e50c:	623b      	str	r3, [r7, #32]
}
 800e50e:	bf00      	nop
 800e510:	e7fe      	b.n	800e510 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d102      	bne.n	800e51e <xQueueGenericCreateStatic+0x8a>
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <xQueueGenericCreateStatic+0x8e>
 800e51e:	2301      	movs	r3, #1
 800e520:	e000      	b.n	800e524 <xQueueGenericCreateStatic+0x90>
 800e522:	2300      	movs	r3, #0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10c      	bne.n	800e542 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	b672      	cpsid	i
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	b662      	cpsie	i
 800e53c:	61fb      	str	r3, [r7, #28]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e542:	2350      	movs	r3, #80	; 0x50
 800e544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2b50      	cmp	r3, #80	; 0x50
 800e54a:	d00c      	beq.n	800e566 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e550:	b672      	cpsid	i
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	b662      	cpsie	i
 800e560:	61bb      	str	r3, [r7, #24]
}
 800e562:	bf00      	nop
 800e564:	e7fe      	b.n	800e564 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e566:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00d      	beq.n	800e58e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	2201      	movs	r2, #1
 800e576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e57a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	4613      	mov	r3, r2
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	68b9      	ldr	r1, [r7, #8]
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 f805 	bl	800e598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e590:	4618      	mov	r0, r3
 800e592:	3730      	adds	r7, #48	; 0x30
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d103      	bne.n	800e5b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	69ba      	ldr	r2, [r7, #24]
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	e002      	b.n	800e5ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	69b8      	ldr	r0, [r7, #24]
 800e5ca:	f7ff fef9 	bl	800e3c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	78fa      	ldrb	r2, [r7, #3]
 800e5d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5d6:	bf00      	nop
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
	...

0800e5e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b08e      	sub	sp, #56	; 0x38
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
 800e5ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10c      	bne.n	800e616 <xQueueGenericSend+0x36>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	b672      	cpsid	i
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	b662      	cpsie	i
 800e610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e612:	bf00      	nop
 800e614:	e7fe      	b.n	800e614 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d103      	bne.n	800e624 <xQueueGenericSend+0x44>
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <xQueueGenericSend+0x48>
 800e624:	2301      	movs	r3, #1
 800e626:	e000      	b.n	800e62a <xQueueGenericSend+0x4a>
 800e628:	2300      	movs	r3, #0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10c      	bne.n	800e648 <xQueueGenericSend+0x68>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	b672      	cpsid	i
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	b662      	cpsie	i
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e644:	bf00      	nop
 800e646:	e7fe      	b.n	800e646 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	d103      	bne.n	800e656 <xQueueGenericSend+0x76>
 800e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e652:	2b01      	cmp	r3, #1
 800e654:	d101      	bne.n	800e65a <xQueueGenericSend+0x7a>
 800e656:	2301      	movs	r3, #1
 800e658:	e000      	b.n	800e65c <xQueueGenericSend+0x7c>
 800e65a:	2300      	movs	r3, #0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d10c      	bne.n	800e67a <xQueueGenericSend+0x9a>
	__asm volatile
 800e660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e664:	b672      	cpsid	i
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	b662      	cpsie	i
 800e674:	623b      	str	r3, [r7, #32]
}
 800e676:	bf00      	nop
 800e678:	e7fe      	b.n	800e678 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e67a:	f001 fa11 	bl	800faa0 <xTaskGetSchedulerState>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <xQueueGenericSend+0xaa>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <xQueueGenericSend+0xae>
 800e68a:	2301      	movs	r3, #1
 800e68c:	e000      	b.n	800e690 <xQueueGenericSend+0xb0>
 800e68e:	2300      	movs	r3, #0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10c      	bne.n	800e6ae <xQueueGenericSend+0xce>
	__asm volatile
 800e694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e698:	b672      	cpsid	i
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	b662      	cpsie	i
 800e6a8:	61fb      	str	r3, [r7, #28]
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6ae:	f001 ff45 	bl	801053c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d302      	bcc.n	800e6c4 <xQueueGenericSend+0xe4>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d129      	bne.n	800e718 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	68b9      	ldr	r1, [r7, #8]
 800e6c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6ca:	f000 fa15 	bl	800eaf8 <prvCopyDataToQueue>
 800e6ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d010      	beq.n	800e6fa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	3324      	adds	r3, #36	; 0x24
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f000 fff1 	bl	800f6c4 <xTaskRemoveFromEventList>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d013      	beq.n	800e710 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e6e8:	4b3f      	ldr	r3, [pc, #252]	; (800e7e8 <xQueueGenericSend+0x208>)
 800e6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ee:	601a      	str	r2, [r3, #0]
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	e00a      	b.n	800e710 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d007      	beq.n	800e710 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e700:	4b39      	ldr	r3, [pc, #228]	; (800e7e8 <xQueueGenericSend+0x208>)
 800e702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e710:	f001 ff48 	bl	80105a4 <vPortExitCritical>
				return pdPASS;
 800e714:	2301      	movs	r3, #1
 800e716:	e063      	b.n	800e7e0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d103      	bne.n	800e726 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e71e:	f001 ff41 	bl	80105a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e722:	2300      	movs	r3, #0
 800e724:	e05c      	b.n	800e7e0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d106      	bne.n	800e73a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e72c:	f107 0314 	add.w	r3, r7, #20
 800e730:	4618      	mov	r0, r3
 800e732:	f001 f855 	bl	800f7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e736:	2301      	movs	r3, #1
 800e738:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e73a:	f001 ff33 	bl	80105a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e73e:	f000 fd93 	bl	800f268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e742:	f001 fefb 	bl	801053c <vPortEnterCritical>
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e74c:	b25b      	sxtb	r3, r3
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e752:	d103      	bne.n	800e75c <xQueueGenericSend+0x17c>
 800e754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e762:	b25b      	sxtb	r3, r3
 800e764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e768:	d103      	bne.n	800e772 <xQueueGenericSend+0x192>
 800e76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e772:	f001 ff17 	bl	80105a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e776:	1d3a      	adds	r2, r7, #4
 800e778:	f107 0314 	add.w	r3, r7, #20
 800e77c:	4611      	mov	r1, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f001 f844 	bl	800f80c <xTaskCheckForTimeOut>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d124      	bne.n	800e7d4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e78a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e78c:	f000 faac 	bl	800ece8 <prvIsQueueFull>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d018      	beq.n	800e7c8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	3310      	adds	r3, #16
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	4611      	mov	r1, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 ff3c 	bl	800f61c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7a6:	f000 fa37 	bl	800ec18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e7aa:	f000 fd6b 	bl	800f284 <xTaskResumeAll>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f47f af7c 	bne.w	800e6ae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e7b6:	4b0c      	ldr	r3, [pc, #48]	; (800e7e8 <xQueueGenericSend+0x208>)
 800e7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7bc:	601a      	str	r2, [r3, #0]
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	e772      	b.n	800e6ae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7ca:	f000 fa25 	bl	800ec18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7ce:	f000 fd59 	bl	800f284 <xTaskResumeAll>
 800e7d2:	e76c      	b.n	800e6ae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7d6:	f000 fa1f 	bl	800ec18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7da:	f000 fd53 	bl	800f284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3738      	adds	r7, #56	; 0x38
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	e000ed04 	.word	0xe000ed04

0800e7ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08e      	sub	sp, #56	; 0x38
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10c      	bne.n	800e81e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	b672      	cpsid	i
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	b662      	cpsie	i
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e81a:	bf00      	nop
 800e81c:	e7fe      	b.n	800e81c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d103      	bne.n	800e82c <xQueueGenericSendFromISR+0x40>
 800e824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <xQueueGenericSendFromISR+0x44>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e000      	b.n	800e832 <xQueueGenericSendFromISR+0x46>
 800e830:	2300      	movs	r3, #0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10c      	bne.n	800e850 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	b672      	cpsid	i
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	b662      	cpsie	i
 800e84a:	623b      	str	r3, [r7, #32]
}
 800e84c:	bf00      	nop
 800e84e:	e7fe      	b.n	800e84e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b02      	cmp	r3, #2
 800e854:	d103      	bne.n	800e85e <xQueueGenericSendFromISR+0x72>
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d101      	bne.n	800e862 <xQueueGenericSendFromISR+0x76>
 800e85e:	2301      	movs	r3, #1
 800e860:	e000      	b.n	800e864 <xQueueGenericSendFromISR+0x78>
 800e862:	2300      	movs	r3, #0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10c      	bne.n	800e882 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86c:	b672      	cpsid	i
 800e86e:	f383 8811 	msr	BASEPRI, r3
 800e872:	f3bf 8f6f 	isb	sy
 800e876:	f3bf 8f4f 	dsb	sy
 800e87a:	b662      	cpsie	i
 800e87c:	61fb      	str	r3, [r7, #28]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e882:	f001 ff43 	bl	801070c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e886:	f3ef 8211 	mrs	r2, BASEPRI
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	b672      	cpsid	i
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	b662      	cpsie	i
 800e89e:	61ba      	str	r2, [r7, #24]
 800e8a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e8a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d302      	bcc.n	800e8b8 <xQueueGenericSendFromISR+0xcc>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d12c      	bne.n	800e912 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	68b9      	ldr	r1, [r7, #8]
 800e8c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c8:	f000 f916 	bl	800eaf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8d4:	d112      	bne.n	800e8fc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d016      	beq.n	800e90c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	3324      	adds	r3, #36	; 0x24
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f000 feee 	bl	800f6c4 <xTaskRemoveFromEventList>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00e      	beq.n	800e90c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00b      	beq.n	800e90c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	e007      	b.n	800e90c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e8fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e900:	3301      	adds	r3, #1
 800e902:	b2db      	uxtb	r3, r3
 800e904:	b25a      	sxtb	r2, r3
 800e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e90c:	2301      	movs	r3, #1
 800e90e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e910:	e001      	b.n	800e916 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e912:	2300      	movs	r3, #0
 800e914:	637b      	str	r3, [r7, #52]	; 0x34
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e920:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e924:	4618      	mov	r0, r3
 800e926:	3738      	adds	r7, #56	; 0x38
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b08c      	sub	sp, #48	; 0x30
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e938:	2300      	movs	r3, #0
 800e93a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10c      	bne.n	800e960 <xQueueReceive+0x34>
	__asm volatile
 800e946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94a:	b672      	cpsid	i
 800e94c:	f383 8811 	msr	BASEPRI, r3
 800e950:	f3bf 8f6f 	isb	sy
 800e954:	f3bf 8f4f 	dsb	sy
 800e958:	b662      	cpsie	i
 800e95a:	623b      	str	r3, [r7, #32]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <xQueueReceive+0x42>
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <xQueueReceive+0x46>
 800e96e:	2301      	movs	r3, #1
 800e970:	e000      	b.n	800e974 <xQueueReceive+0x48>
 800e972:	2300      	movs	r3, #0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10c      	bne.n	800e992 <xQueueReceive+0x66>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	b672      	cpsid	i
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	b662      	cpsie	i
 800e98c:	61fb      	str	r3, [r7, #28]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e992:	f001 f885 	bl	800faa0 <xTaskGetSchedulerState>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d102      	bne.n	800e9a2 <xQueueReceive+0x76>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d101      	bne.n	800e9a6 <xQueueReceive+0x7a>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e000      	b.n	800e9a8 <xQueueReceive+0x7c>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10c      	bne.n	800e9c6 <xQueueReceive+0x9a>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b0:	b672      	cpsid	i
 800e9b2:	f383 8811 	msr	BASEPRI, r3
 800e9b6:	f3bf 8f6f 	isb	sy
 800e9ba:	f3bf 8f4f 	dsb	sy
 800e9be:	b662      	cpsie	i
 800e9c0:	61bb      	str	r3, [r7, #24]
}
 800e9c2:	bf00      	nop
 800e9c4:	e7fe      	b.n	800e9c4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9c6:	f001 fdb9 	bl	801053c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d01f      	beq.n	800ea16 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9d6:	68b9      	ldr	r1, [r7, #8]
 800e9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9da:	f000 f8f7 	bl	800ebcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e0:	1e5a      	subs	r2, r3, #1
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00f      	beq.n	800ea0e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f0:	3310      	adds	r3, #16
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 fe66 	bl	800f6c4 <xTaskRemoveFromEventList>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9fe:	4b3d      	ldr	r3, [pc, #244]	; (800eaf4 <xQueueReceive+0x1c8>)
 800ea00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea0e:	f001 fdc9 	bl	80105a4 <vPortExitCritical>
				return pdPASS;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e069      	b.n	800eaea <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d103      	bne.n	800ea24 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea1c:	f001 fdc2 	bl	80105a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea20:	2300      	movs	r3, #0
 800ea22:	e062      	b.n	800eaea <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d106      	bne.n	800ea38 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea2a:	f107 0310 	add.w	r3, r7, #16
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f000 fed6 	bl	800f7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea34:	2301      	movs	r3, #1
 800ea36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea38:	f001 fdb4 	bl	80105a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea3c:	f000 fc14 	bl	800f268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea40:	f001 fd7c 	bl	801053c <vPortEnterCritical>
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea4a:	b25b      	sxtb	r3, r3
 800ea4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea50:	d103      	bne.n	800ea5a <xQueueReceive+0x12e>
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea60:	b25b      	sxtb	r3, r3
 800ea62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea66:	d103      	bne.n	800ea70 <xQueueReceive+0x144>
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea70:	f001 fd98 	bl	80105a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea74:	1d3a      	adds	r2, r7, #4
 800ea76:	f107 0310 	add.w	r3, r7, #16
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 fec5 	bl	800f80c <xTaskCheckForTimeOut>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d123      	bne.n	800ead0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea8a:	f000 f917 	bl	800ecbc <prvIsQueueEmpty>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d017      	beq.n	800eac4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	3324      	adds	r3, #36	; 0x24
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	4611      	mov	r1, r2
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 fdbd 	bl	800f61c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eaa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaa4:	f000 f8b8 	bl	800ec18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eaa8:	f000 fbec 	bl	800f284 <xTaskResumeAll>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d189      	bne.n	800e9c6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800eab2:	4b10      	ldr	r3, [pc, #64]	; (800eaf4 <xQueueReceive+0x1c8>)
 800eab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	e780      	b.n	800e9c6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eac6:	f000 f8a7 	bl	800ec18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eaca:	f000 fbdb 	bl	800f284 <xTaskResumeAll>
 800eace:	e77a      	b.n	800e9c6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ead0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ead2:	f000 f8a1 	bl	800ec18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ead6:	f000 fbd5 	bl	800f284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eadc:	f000 f8ee 	bl	800ecbc <prvIsQueueEmpty>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f43f af6f 	beq.w	800e9c6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3730      	adds	r7, #48	; 0x30
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	e000ed04 	.word	0xe000ed04

0800eaf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb04:	2300      	movs	r3, #0
 800eb06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10d      	bne.n	800eb32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d14d      	bne.n	800ebba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 ffda 	bl	800fadc <xTaskPriorityDisinherit>
 800eb28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	609a      	str	r2, [r3, #8]
 800eb30:	e043      	b.n	800ebba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d119      	bne.n	800eb6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6858      	ldr	r0, [r3, #4]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb40:	461a      	mov	r2, r3
 800eb42:	68b9      	ldr	r1, [r7, #8]
 800eb44:	f012 fb07 	bl	8021156 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb50:	441a      	add	r2, r3
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	685a      	ldr	r2, [r3, #4]
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d32b      	bcc.n	800ebba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	605a      	str	r2, [r3, #4]
 800eb6a:	e026      	b.n	800ebba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	68d8      	ldr	r0, [r3, #12]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb74:	461a      	mov	r2, r3
 800eb76:	68b9      	ldr	r1, [r7, #8]
 800eb78:	f012 faed 	bl	8021156 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	68da      	ldr	r2, [r3, #12]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	425b      	negs	r3, r3
 800eb86:	441a      	add	r2, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d207      	bcs.n	800eba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	689a      	ldr	r2, [r3, #8]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eba0:	425b      	negs	r3, r3
 800eba2:	441a      	add	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d105      	bne.n	800ebba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ebc2:	697b      	ldr	r3, [r7, #20]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3718      	adds	r7, #24
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d018      	beq.n	800ec10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68da      	ldr	r2, [r3, #12]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe6:	441a      	add	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	68da      	ldr	r2, [r3, #12]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d303      	bcc.n	800ec00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	68d9      	ldr	r1, [r3, #12]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6838      	ldr	r0, [r7, #0]
 800ec0c:	f012 faa3 	bl	8021156 <memcpy>
	}
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec20:	f001 fc8c 	bl	801053c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec2c:	e011      	b.n	800ec52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d012      	beq.n	800ec5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3324      	adds	r3, #36	; 0x24
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 fd42 	bl	800f6c4 <xTaskRemoveFromEventList>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec46:	f000 fe47 	bl	800f8d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	dce9      	bgt.n	800ec2e <prvUnlockQueue+0x16>
 800ec5a:	e000      	b.n	800ec5e <prvUnlockQueue+0x46>
					break;
 800ec5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	22ff      	movs	r2, #255	; 0xff
 800ec62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec66:	f001 fc9d 	bl	80105a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec6a:	f001 fc67 	bl	801053c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec76:	e011      	b.n	800ec9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d012      	beq.n	800eca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3310      	adds	r3, #16
 800ec84:	4618      	mov	r0, r3
 800ec86:	f000 fd1d 	bl	800f6c4 <xTaskRemoveFromEventList>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec90:	f000 fe22 	bl	800f8d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec94:	7bbb      	ldrb	r3, [r7, #14]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	dce9      	bgt.n	800ec78 <prvUnlockQueue+0x60>
 800eca4:	e000      	b.n	800eca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	22ff      	movs	r2, #255	; 0xff
 800ecac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ecb0:	f001 fc78 	bl	80105a4 <vPortExitCritical>
}
 800ecb4:	bf00      	nop
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ecc4:	f001 fc3a 	bl	801053c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d102      	bne.n	800ecd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	e001      	b.n	800ecda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecda:	f001 fc63 	bl	80105a4 <vPortExitCritical>

	return xReturn;
 800ecde:	68fb      	ldr	r3, [r7, #12]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ecf0:	f001 fc24 	bl	801053c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d102      	bne.n	800ed06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed00:	2301      	movs	r3, #1
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	e001      	b.n	800ed0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed0a:	f001 fc4b 	bl	80105a4 <vPortExitCritical>

	return xReturn;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed22:	2300      	movs	r3, #0
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	e014      	b.n	800ed52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed28:	4a0f      	ldr	r2, [pc, #60]	; (800ed68 <vQueueAddToRegistry+0x50>)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10b      	bne.n	800ed4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed34:	490c      	ldr	r1, [pc, #48]	; (800ed68 <vQueueAddToRegistry+0x50>)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed3e:	4a0a      	ldr	r2, [pc, #40]	; (800ed68 <vQueueAddToRegistry+0x50>)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	4413      	add	r3, r2
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ed4a:	e006      	b.n	800ed5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	60fb      	str	r3, [r7, #12]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2b07      	cmp	r3, #7
 800ed56:	d9e7      	bls.n	800ed28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed58:	bf00      	nop
 800ed5a:	bf00      	nop
 800ed5c:	3714      	adds	r7, #20
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	2000c79c 	.word	0x2000c79c

0800ed6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed7c:	f001 fbde 	bl	801053c <vPortEnterCritical>
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed86:	b25b      	sxtb	r3, r3
 800ed88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed8c:	d103      	bne.n	800ed96 <vQueueWaitForMessageRestricted+0x2a>
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed9c:	b25b      	sxtb	r3, r3
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eda2:	d103      	bne.n	800edac <vQueueWaitForMessageRestricted+0x40>
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edac:	f001 fbfa 	bl	80105a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	3324      	adds	r3, #36	; 0x24
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	68b9      	ldr	r1, [r7, #8]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 fc51 	bl	800f668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800edc6:	6978      	ldr	r0, [r7, #20]
 800edc8:	f7ff ff26 	bl	800ec18 <prvUnlockQueue>
	}
 800edcc:	bf00      	nop
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08e      	sub	sp, #56	; 0x38
 800edd8:	af04      	add	r7, sp, #16
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ede2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10c      	bne.n	800ee02 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ede8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edec:	b672      	cpsid	i
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	b662      	cpsie	i
 800edfc:	623b      	str	r3, [r7, #32]
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ee02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d10c      	bne.n	800ee22 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	b672      	cpsid	i
 800ee0e:	f383 8811 	msr	BASEPRI, r3
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	b662      	cpsie	i
 800ee1c:	61fb      	str	r3, [r7, #28]
}
 800ee1e:	bf00      	nop
 800ee20:	e7fe      	b.n	800ee20 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee22:	235c      	movs	r3, #92	; 0x5c
 800ee24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	2b5c      	cmp	r3, #92	; 0x5c
 800ee2a:	d00c      	beq.n	800ee46 <xTaskCreateStatic+0x72>
	__asm volatile
 800ee2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee30:	b672      	cpsid	i
 800ee32:	f383 8811 	msr	BASEPRI, r3
 800ee36:	f3bf 8f6f 	isb	sy
 800ee3a:	f3bf 8f4f 	dsb	sy
 800ee3e:	b662      	cpsie	i
 800ee40:	61bb      	str	r3, [r7, #24]
}
 800ee42:	bf00      	nop
 800ee44:	e7fe      	b.n	800ee44 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ee46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ee48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d01e      	beq.n	800ee8c <xTaskCreateStatic+0xb8>
 800ee4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d01b      	beq.n	800ee8c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	2202      	movs	r2, #2
 800ee62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee66:	2300      	movs	r3, #0
 800ee68:	9303      	str	r3, [sp, #12]
 800ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6c:	9302      	str	r3, [sp, #8]
 800ee6e:	f107 0314 	add.w	r3, r7, #20
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	68b9      	ldr	r1, [r7, #8]
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f000 f850 	bl	800ef24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee86:	f000 f8df 	bl	800f048 <prvAddNewTaskToReadyList>
 800ee8a:	e001      	b.n	800ee90 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee90:	697b      	ldr	r3, [r7, #20]
	}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3728      	adds	r7, #40	; 0x28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b08c      	sub	sp, #48	; 0x30
 800ee9e:	af04      	add	r7, sp, #16
 800eea0:	60f8      	str	r0, [r7, #12]
 800eea2:	60b9      	str	r1, [r7, #8]
 800eea4:	603b      	str	r3, [r7, #0]
 800eea6:	4613      	mov	r3, r2
 800eea8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eeaa:	88fb      	ldrh	r3, [r7, #6]
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f001 fc70 	bl	8010794 <pvPortMalloc>
 800eeb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00e      	beq.n	800eeda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eebc:	205c      	movs	r0, #92	; 0x5c
 800eebe:	f001 fc69 	bl	8010794 <pvPortMalloc>
 800eec2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d003      	beq.n	800eed2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	697a      	ldr	r2, [r7, #20]
 800eece:	631a      	str	r2, [r3, #48]	; 0x30
 800eed0:	e005      	b.n	800eede <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eed2:	6978      	ldr	r0, [r7, #20]
 800eed4:	f001 fd28 	bl	8010928 <vPortFree>
 800eed8:	e001      	b.n	800eede <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d017      	beq.n	800ef14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eeec:	88fa      	ldrh	r2, [r7, #6]
 800eeee:	2300      	movs	r3, #0
 800eef0:	9303      	str	r3, [sp, #12]
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	9302      	str	r3, [sp, #8]
 800eef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	68b9      	ldr	r1, [r7, #8]
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f000 f80e 	bl	800ef24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef08:	69f8      	ldr	r0, [r7, #28]
 800ef0a:	f000 f89d 	bl	800f048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	61bb      	str	r3, [r7, #24]
 800ef12:	e002      	b.n	800ef1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3720      	adds	r7, #32
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b088      	sub	sp, #32
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
 800ef30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	21a5      	movs	r1, #165	; 0xa5
 800ef3e:	f012 f83d 	bl	8020fbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ef4c:	440b      	add	r3, r1
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4413      	add	r3, r2
 800ef52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	f023 0307 	bic.w	r3, r3, #7
 800ef5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	f003 0307 	and.w	r3, r3, #7
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00c      	beq.n	800ef80 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ef66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6a:	b672      	cpsid	i
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	b662      	cpsie	i
 800ef7a:	617b      	str	r3, [r7, #20]
}
 800ef7c:	bf00      	nop
 800ef7e:	e7fe      	b.n	800ef7e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d01f      	beq.n	800efc6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef86:	2300      	movs	r3, #0
 800ef88:	61fb      	str	r3, [r7, #28]
 800ef8a:	e012      	b.n	800efb2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef8c:	68ba      	ldr	r2, [r7, #8]
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	4413      	add	r3, r2
 800ef92:	7819      	ldrb	r1, [r3, #0]
 800ef94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	4413      	add	r3, r2
 800ef9a:	3334      	adds	r3, #52	; 0x34
 800ef9c:	460a      	mov	r2, r1
 800ef9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	4413      	add	r3, r2
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d006      	beq.n	800efba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	3301      	adds	r3, #1
 800efb0:	61fb      	str	r3, [r7, #28]
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	2b0f      	cmp	r3, #15
 800efb6:	d9e9      	bls.n	800ef8c <prvInitialiseNewTask+0x68>
 800efb8:	e000      	b.n	800efbc <prvInitialiseNewTask+0x98>
			{
				break;
 800efba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800efbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800efc4:	e003      	b.n	800efce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800efce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd0:	2b37      	cmp	r3, #55	; 0x37
 800efd2:	d901      	bls.n	800efd8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800efd4:	2337      	movs	r3, #55	; 0x37
 800efd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	2200      	movs	r2, #0
 800efe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efec:	3304      	adds	r3, #4
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff f952 	bl	800e298 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	3318      	adds	r3, #24
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff f94d 	bl	800e298 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f006:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	2200      	movs	r2, #0
 800f018:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	2200      	movs	r2, #0
 800f01e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	68f9      	ldr	r1, [r7, #12]
 800f026:	69b8      	ldr	r0, [r7, #24]
 800f028:	f001 f97a 	bl	8010320 <pxPortInitialiseStack>
 800f02c:	4602      	mov	r2, r0
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f03c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f03e:	bf00      	nop
 800f040:	3720      	adds	r7, #32
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
	...

0800f048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f050:	f001 fa74 	bl	801053c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f054:	4b2d      	ldr	r3, [pc, #180]	; (800f10c <prvAddNewTaskToReadyList+0xc4>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	3301      	adds	r3, #1
 800f05a:	4a2c      	ldr	r2, [pc, #176]	; (800f10c <prvAddNewTaskToReadyList+0xc4>)
 800f05c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f05e:	4b2c      	ldr	r3, [pc, #176]	; (800f110 <prvAddNewTaskToReadyList+0xc8>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d109      	bne.n	800f07a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f066:	4a2a      	ldr	r2, [pc, #168]	; (800f110 <prvAddNewTaskToReadyList+0xc8>)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f06c:	4b27      	ldr	r3, [pc, #156]	; (800f10c <prvAddNewTaskToReadyList+0xc4>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d110      	bne.n	800f096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f074:	f000 fc54 	bl	800f920 <prvInitialiseTaskLists>
 800f078:	e00d      	b.n	800f096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f07a:	4b26      	ldr	r3, [pc, #152]	; (800f114 <prvAddNewTaskToReadyList+0xcc>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d109      	bne.n	800f096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f082:	4b23      	ldr	r3, [pc, #140]	; (800f110 <prvAddNewTaskToReadyList+0xc8>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d802      	bhi.n	800f096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f090:	4a1f      	ldr	r2, [pc, #124]	; (800f110 <prvAddNewTaskToReadyList+0xc8>)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f096:	4b20      	ldr	r3, [pc, #128]	; (800f118 <prvAddNewTaskToReadyList+0xd0>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	3301      	adds	r3, #1
 800f09c:	4a1e      	ldr	r2, [pc, #120]	; (800f118 <prvAddNewTaskToReadyList+0xd0>)
 800f09e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f0a0:	4b1d      	ldr	r3, [pc, #116]	; (800f118 <prvAddNewTaskToReadyList+0xd0>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ac:	4b1b      	ldr	r3, [pc, #108]	; (800f11c <prvAddNewTaskToReadyList+0xd4>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d903      	bls.n	800f0bc <prvAddNewTaskToReadyList+0x74>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b8:	4a18      	ldr	r2, [pc, #96]	; (800f11c <prvAddNewTaskToReadyList+0xd4>)
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4a15      	ldr	r2, [pc, #84]	; (800f120 <prvAddNewTaskToReadyList+0xd8>)
 800f0ca:	441a      	add	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	3304      	adds	r3, #4
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f7ff f8ed 	bl	800e2b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f0d8:	f001 fa64 	bl	80105a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f0dc:	4b0d      	ldr	r3, [pc, #52]	; (800f114 <prvAddNewTaskToReadyList+0xcc>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00e      	beq.n	800f102 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f0e4:	4b0a      	ldr	r3, [pc, #40]	; (800f110 <prvAddNewTaskToReadyList+0xc8>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d207      	bcs.n	800f102 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f0f2:	4b0c      	ldr	r3, [pc, #48]	; (800f124 <prvAddNewTaskToReadyList+0xdc>)
 800f0f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f8:	601a      	str	r2, [r3, #0]
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f102:	bf00      	nop
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	2000ccb0 	.word	0x2000ccb0
 800f110:	2000c7dc 	.word	0x2000c7dc
 800f114:	2000ccbc 	.word	0x2000ccbc
 800f118:	2000cccc 	.word	0x2000cccc
 800f11c:	2000ccb8 	.word	0x2000ccb8
 800f120:	2000c7e0 	.word	0x2000c7e0
 800f124:	e000ed04 	.word	0xe000ed04

0800f128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f130:	2300      	movs	r3, #0
 800f132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d019      	beq.n	800f16e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f13a:	4b14      	ldr	r3, [pc, #80]	; (800f18c <vTaskDelay+0x64>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00c      	beq.n	800f15c <vTaskDelay+0x34>
	__asm volatile
 800f142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f146:	b672      	cpsid	i
 800f148:	f383 8811 	msr	BASEPRI, r3
 800f14c:	f3bf 8f6f 	isb	sy
 800f150:	f3bf 8f4f 	dsb	sy
 800f154:	b662      	cpsie	i
 800f156:	60bb      	str	r3, [r7, #8]
}
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f15c:	f000 f884 	bl	800f268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f160:	2100      	movs	r1, #0
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fd2c 	bl	800fbc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f168:	f000 f88c 	bl	800f284 <xTaskResumeAll>
 800f16c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d107      	bne.n	800f184 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f174:	4b06      	ldr	r3, [pc, #24]	; (800f190 <vTaskDelay+0x68>)
 800f176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f184:	bf00      	nop
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	2000ccd8 	.word	0x2000ccd8
 800f190:	e000ed04 	.word	0xe000ed04

0800f194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b08a      	sub	sp, #40	; 0x28
 800f198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f19a:	2300      	movs	r3, #0
 800f19c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f1a2:	463a      	mov	r2, r7
 800f1a4:	1d39      	adds	r1, r7, #4
 800f1a6:	f107 0308 	add.w	r3, r7, #8
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff f820 	bl	800e1f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	9202      	str	r2, [sp, #8]
 800f1b8:	9301      	str	r3, [sp, #4]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	460a      	mov	r2, r1
 800f1c2:	4923      	ldr	r1, [pc, #140]	; (800f250 <vTaskStartScheduler+0xbc>)
 800f1c4:	4823      	ldr	r0, [pc, #140]	; (800f254 <vTaskStartScheduler+0xc0>)
 800f1c6:	f7ff fe05 	bl	800edd4 <xTaskCreateStatic>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	4a22      	ldr	r2, [pc, #136]	; (800f258 <vTaskStartScheduler+0xc4>)
 800f1ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f1d0:	4b21      	ldr	r3, [pc, #132]	; (800f258 <vTaskStartScheduler+0xc4>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	e001      	b.n	800f1e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d102      	bne.n	800f1ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f1e8:	f000 fd3e 	bl	800fc68 <xTimerCreateTimerTask>
 800f1ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d118      	bne.n	800f226 <vTaskStartScheduler+0x92>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	b672      	cpsid	i
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	b662      	cpsie	i
 800f208:	613b      	str	r3, [r7, #16]
}
 800f20a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f20c:	4b13      	ldr	r3, [pc, #76]	; (800f25c <vTaskStartScheduler+0xc8>)
 800f20e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f212:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f214:	4b12      	ldr	r3, [pc, #72]	; (800f260 <vTaskStartScheduler+0xcc>)
 800f216:	2201      	movs	r2, #1
 800f218:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f21a:	4b12      	ldr	r3, [pc, #72]	; (800f264 <vTaskStartScheduler+0xd0>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f220:	f001 f90e 	bl	8010440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f224:	e010      	b.n	800f248 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f22c:	d10c      	bne.n	800f248 <vTaskStartScheduler+0xb4>
	__asm volatile
 800f22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f232:	b672      	cpsid	i
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	b662      	cpsie	i
 800f242:	60fb      	str	r3, [r7, #12]
}
 800f244:	bf00      	nop
 800f246:	e7fe      	b.n	800f246 <vTaskStartScheduler+0xb2>
}
 800f248:	bf00      	nop
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	080246d4 	.word	0x080246d4
 800f254:	0800f8f1 	.word	0x0800f8f1
 800f258:	2000ccd4 	.word	0x2000ccd4
 800f25c:	2000ccd0 	.word	0x2000ccd0
 800f260:	2000ccbc 	.word	0x2000ccbc
 800f264:	2000ccb4 	.word	0x2000ccb4

0800f268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f268:	b480      	push	{r7}
 800f26a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f26c:	4b04      	ldr	r3, [pc, #16]	; (800f280 <vTaskSuspendAll+0x18>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	3301      	adds	r3, #1
 800f272:	4a03      	ldr	r2, [pc, #12]	; (800f280 <vTaskSuspendAll+0x18>)
 800f274:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f276:	bf00      	nop
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	2000ccd8 	.word	0x2000ccd8

0800f284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f28a:	2300      	movs	r3, #0
 800f28c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f28e:	2300      	movs	r3, #0
 800f290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f292:	4b43      	ldr	r3, [pc, #268]	; (800f3a0 <xTaskResumeAll+0x11c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10c      	bne.n	800f2b4 <xTaskResumeAll+0x30>
	__asm volatile
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	b672      	cpsid	i
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	b662      	cpsie	i
 800f2ae:	603b      	str	r3, [r7, #0]
}
 800f2b0:	bf00      	nop
 800f2b2:	e7fe      	b.n	800f2b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f2b4:	f001 f942 	bl	801053c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f2b8:	4b39      	ldr	r3, [pc, #228]	; (800f3a0 <xTaskResumeAll+0x11c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	4a38      	ldr	r2, [pc, #224]	; (800f3a0 <xTaskResumeAll+0x11c>)
 800f2c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2c2:	4b37      	ldr	r3, [pc, #220]	; (800f3a0 <xTaskResumeAll+0x11c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d162      	bne.n	800f390 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2ca:	4b36      	ldr	r3, [pc, #216]	; (800f3a4 <xTaskResumeAll+0x120>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d05e      	beq.n	800f390 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2d2:	e02f      	b.n	800f334 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2d4:	4b34      	ldr	r3, [pc, #208]	; (800f3a8 <xTaskResumeAll+0x124>)
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	3318      	adds	r3, #24
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7ff f843 	bl	800e36c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7ff f83e 	bl	800e36c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f4:	4b2d      	ldr	r3, [pc, #180]	; (800f3ac <xTaskResumeAll+0x128>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d903      	bls.n	800f304 <xTaskResumeAll+0x80>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f300:	4a2a      	ldr	r2, [pc, #168]	; (800f3ac <xTaskResumeAll+0x128>)
 800f302:	6013      	str	r3, [r2, #0]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f308:	4613      	mov	r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	4413      	add	r3, r2
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4a27      	ldr	r2, [pc, #156]	; (800f3b0 <xTaskResumeAll+0x12c>)
 800f312:	441a      	add	r2, r3
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	3304      	adds	r3, #4
 800f318:	4619      	mov	r1, r3
 800f31a:	4610      	mov	r0, r2
 800f31c:	f7fe ffc9 	bl	800e2b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f324:	4b23      	ldr	r3, [pc, #140]	; (800f3b4 <xTaskResumeAll+0x130>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d302      	bcc.n	800f334 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f32e:	4b22      	ldr	r3, [pc, #136]	; (800f3b8 <xTaskResumeAll+0x134>)
 800f330:	2201      	movs	r2, #1
 800f332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f334:	4b1c      	ldr	r3, [pc, #112]	; (800f3a8 <xTaskResumeAll+0x124>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1cb      	bne.n	800f2d4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f342:	f000 fb8d 	bl	800fa60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f346:	4b1d      	ldr	r3, [pc, #116]	; (800f3bc <xTaskResumeAll+0x138>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d010      	beq.n	800f374 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f352:	f000 f847 	bl	800f3e4 <xTaskIncrementTick>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d002      	beq.n	800f362 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f35c:	4b16      	ldr	r3, [pc, #88]	; (800f3b8 <xTaskResumeAll+0x134>)
 800f35e:	2201      	movs	r2, #1
 800f360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	3b01      	subs	r3, #1
 800f366:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1f1      	bne.n	800f352 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f36e:	4b13      	ldr	r3, [pc, #76]	; (800f3bc <xTaskResumeAll+0x138>)
 800f370:	2200      	movs	r2, #0
 800f372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f374:	4b10      	ldr	r3, [pc, #64]	; (800f3b8 <xTaskResumeAll+0x134>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d009      	beq.n	800f390 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f37c:	2301      	movs	r3, #1
 800f37e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f380:	4b0f      	ldr	r3, [pc, #60]	; (800f3c0 <xTaskResumeAll+0x13c>)
 800f382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f386:	601a      	str	r2, [r3, #0]
 800f388:	f3bf 8f4f 	dsb	sy
 800f38c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f390:	f001 f908 	bl	80105a4 <vPortExitCritical>

	return xAlreadyYielded;
 800f394:	68bb      	ldr	r3, [r7, #8]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	2000ccd8 	.word	0x2000ccd8
 800f3a4:	2000ccb0 	.word	0x2000ccb0
 800f3a8:	2000cc70 	.word	0x2000cc70
 800f3ac:	2000ccb8 	.word	0x2000ccb8
 800f3b0:	2000c7e0 	.word	0x2000c7e0
 800f3b4:	2000c7dc 	.word	0x2000c7dc
 800f3b8:	2000ccc4 	.word	0x2000ccc4
 800f3bc:	2000ccc0 	.word	0x2000ccc0
 800f3c0:	e000ed04 	.word	0xe000ed04

0800f3c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f3ca:	4b05      	ldr	r3, [pc, #20]	; (800f3e0 <xTaskGetTickCount+0x1c>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f3d0:	687b      	ldr	r3, [r7, #4]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	2000ccb4 	.word	0x2000ccb4

0800f3e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3ee:	4b50      	ldr	r3, [pc, #320]	; (800f530 <xTaskIncrementTick+0x14c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f040 808b 	bne.w	800f50e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f3f8:	4b4e      	ldr	r3, [pc, #312]	; (800f534 <xTaskIncrementTick+0x150>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f400:	4a4c      	ldr	r2, [pc, #304]	; (800f534 <xTaskIncrementTick+0x150>)
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d122      	bne.n	800f452 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f40c:	4b4a      	ldr	r3, [pc, #296]	; (800f538 <xTaskIncrementTick+0x154>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00c      	beq.n	800f430 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41a:	b672      	cpsid	i
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	b662      	cpsie	i
 800f42a:	603b      	str	r3, [r7, #0]
}
 800f42c:	bf00      	nop
 800f42e:	e7fe      	b.n	800f42e <xTaskIncrementTick+0x4a>
 800f430:	4b41      	ldr	r3, [pc, #260]	; (800f538 <xTaskIncrementTick+0x154>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	60fb      	str	r3, [r7, #12]
 800f436:	4b41      	ldr	r3, [pc, #260]	; (800f53c <xTaskIncrementTick+0x158>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4a3f      	ldr	r2, [pc, #252]	; (800f538 <xTaskIncrementTick+0x154>)
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	4a3f      	ldr	r2, [pc, #252]	; (800f53c <xTaskIncrementTick+0x158>)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	4b3e      	ldr	r3, [pc, #248]	; (800f540 <xTaskIncrementTick+0x15c>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3301      	adds	r3, #1
 800f44a:	4a3d      	ldr	r2, [pc, #244]	; (800f540 <xTaskIncrementTick+0x15c>)
 800f44c:	6013      	str	r3, [r2, #0]
 800f44e:	f000 fb07 	bl	800fa60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f452:	4b3c      	ldr	r3, [pc, #240]	; (800f544 <xTaskIncrementTick+0x160>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d349      	bcc.n	800f4f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f45c:	4b36      	ldr	r3, [pc, #216]	; (800f538 <xTaskIncrementTick+0x154>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d104      	bne.n	800f470 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f466:	4b37      	ldr	r3, [pc, #220]	; (800f544 <xTaskIncrementTick+0x160>)
 800f468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f46c:	601a      	str	r2, [r3, #0]
					break;
 800f46e:	e03f      	b.n	800f4f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f470:	4b31      	ldr	r3, [pc, #196]	; (800f538 <xTaskIncrementTick+0x154>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f480:	693a      	ldr	r2, [r7, #16]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d203      	bcs.n	800f490 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f488:	4a2e      	ldr	r2, [pc, #184]	; (800f544 <xTaskIncrementTick+0x160>)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f48e:	e02f      	b.n	800f4f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	3304      	adds	r3, #4
 800f494:	4618      	mov	r0, r3
 800f496:	f7fe ff69 	bl	800e36c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d004      	beq.n	800f4ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	3318      	adds	r3, #24
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe ff60 	bl	800e36c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b0:	4b25      	ldr	r3, [pc, #148]	; (800f548 <xTaskIncrementTick+0x164>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d903      	bls.n	800f4c0 <xTaskIncrementTick+0xdc>
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4bc:	4a22      	ldr	r2, [pc, #136]	; (800f548 <xTaskIncrementTick+0x164>)
 800f4be:	6013      	str	r3, [r2, #0]
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4413      	add	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4a1f      	ldr	r2, [pc, #124]	; (800f54c <xTaskIncrementTick+0x168>)
 800f4ce:	441a      	add	r2, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	f7fe feeb 	bl	800e2b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e0:	4b1b      	ldr	r3, [pc, #108]	; (800f550 <xTaskIncrementTick+0x16c>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d3b8      	bcc.n	800f45c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4ee:	e7b5      	b.n	800f45c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f4f0:	4b17      	ldr	r3, [pc, #92]	; (800f550 <xTaskIncrementTick+0x16c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f6:	4915      	ldr	r1, [pc, #84]	; (800f54c <xTaskIncrementTick+0x168>)
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	440b      	add	r3, r1
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d907      	bls.n	800f518 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f508:	2301      	movs	r3, #1
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	e004      	b.n	800f518 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f50e:	4b11      	ldr	r3, [pc, #68]	; (800f554 <xTaskIncrementTick+0x170>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3301      	adds	r3, #1
 800f514:	4a0f      	ldr	r2, [pc, #60]	; (800f554 <xTaskIncrementTick+0x170>)
 800f516:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f518:	4b0f      	ldr	r3, [pc, #60]	; (800f558 <xTaskIncrementTick+0x174>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d001      	beq.n	800f524 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f520:	2301      	movs	r3, #1
 800f522:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f524:	697b      	ldr	r3, [r7, #20]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3718      	adds	r7, #24
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	2000ccd8 	.word	0x2000ccd8
 800f534:	2000ccb4 	.word	0x2000ccb4
 800f538:	2000cc68 	.word	0x2000cc68
 800f53c:	2000cc6c 	.word	0x2000cc6c
 800f540:	2000ccc8 	.word	0x2000ccc8
 800f544:	2000ccd0 	.word	0x2000ccd0
 800f548:	2000ccb8 	.word	0x2000ccb8
 800f54c:	2000c7e0 	.word	0x2000c7e0
 800f550:	2000c7dc 	.word	0x2000c7dc
 800f554:	2000ccc0 	.word	0x2000ccc0
 800f558:	2000ccc4 	.word	0x2000ccc4

0800f55c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f55c:	b480      	push	{r7}
 800f55e:	b085      	sub	sp, #20
 800f560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f562:	4b29      	ldr	r3, [pc, #164]	; (800f608 <vTaskSwitchContext+0xac>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d003      	beq.n	800f572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f56a:	4b28      	ldr	r3, [pc, #160]	; (800f60c <vTaskSwitchContext+0xb0>)
 800f56c:	2201      	movs	r2, #1
 800f56e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f570:	e043      	b.n	800f5fa <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f572:	4b26      	ldr	r3, [pc, #152]	; (800f60c <vTaskSwitchContext+0xb0>)
 800f574:	2200      	movs	r2, #0
 800f576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f578:	4b25      	ldr	r3, [pc, #148]	; (800f610 <vTaskSwitchContext+0xb4>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	e012      	b.n	800f5a6 <vTaskSwitchContext+0x4a>
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10c      	bne.n	800f5a0 <vTaskSwitchContext+0x44>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	b672      	cpsid	i
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	b662      	cpsie	i
 800f59a:	607b      	str	r3, [r7, #4]
}
 800f59c:	bf00      	nop
 800f59e:	e7fe      	b.n	800f59e <vTaskSwitchContext+0x42>
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	491b      	ldr	r1, [pc, #108]	; (800f614 <vTaskSwitchContext+0xb8>)
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	440b      	add	r3, r1
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d0e2      	beq.n	800f580 <vTaskSwitchContext+0x24>
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4a13      	ldr	r2, [pc, #76]	; (800f614 <vTaskSwitchContext+0xb8>)
 800f5c6:	4413      	add	r3, r2
 800f5c8:	60bb      	str	r3, [r7, #8]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	685a      	ldr	r2, [r3, #4]
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	605a      	str	r2, [r3, #4]
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	685a      	ldr	r2, [r3, #4]
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	3308      	adds	r3, #8
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d104      	bne.n	800f5ea <vTaskSwitchContext+0x8e>
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	685a      	ldr	r2, [r3, #4]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	605a      	str	r2, [r3, #4]
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	4a09      	ldr	r2, [pc, #36]	; (800f618 <vTaskSwitchContext+0xbc>)
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	4a06      	ldr	r2, [pc, #24]	; (800f610 <vTaskSwitchContext+0xb4>)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6013      	str	r3, [r2, #0]
}
 800f5fa:	bf00      	nop
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	2000ccd8 	.word	0x2000ccd8
 800f60c:	2000ccc4 	.word	0x2000ccc4
 800f610:	2000ccb8 	.word	0x2000ccb8
 800f614:	2000c7e0 	.word	0x2000c7e0
 800f618:	2000c7dc 	.word	0x2000c7dc

0800f61c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10c      	bne.n	800f646 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	b672      	cpsid	i
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	b662      	cpsie	i
 800f640:	60fb      	str	r3, [r7, #12]
}
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f646:	4b07      	ldr	r3, [pc, #28]	; (800f664 <vTaskPlaceOnEventList+0x48>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3318      	adds	r3, #24
 800f64c:	4619      	mov	r1, r3
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7fe fe53 	bl	800e2fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f654:	2101      	movs	r1, #1
 800f656:	6838      	ldr	r0, [r7, #0]
 800f658:	f000 fab2 	bl	800fbc0 <prvAddCurrentTaskToDelayedList>
}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	2000c7dc 	.word	0x2000c7dc

0800f668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d10c      	bne.n	800f694 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67e:	b672      	cpsid	i
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	b662      	cpsie	i
 800f68e:	617b      	str	r3, [r7, #20]
}
 800f690:	bf00      	nop
 800f692:	e7fe      	b.n	800f692 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f694:	4b0a      	ldr	r3, [pc, #40]	; (800f6c0 <vTaskPlaceOnEventListRestricted+0x58>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3318      	adds	r3, #24
 800f69a:	4619      	mov	r1, r3
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f7fe fe08 	bl	800e2b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d002      	beq.n	800f6ae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f6ae:	6879      	ldr	r1, [r7, #4]
 800f6b0:	68b8      	ldr	r0, [r7, #8]
 800f6b2:	f000 fa85 	bl	800fbc0 <prvAddCurrentTaskToDelayedList>
	}
 800f6b6:	bf00      	nop
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	2000c7dc 	.word	0x2000c7dc

0800f6c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d10c      	bne.n	800f6f4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6de:	b672      	cpsid	i
 800f6e0:	f383 8811 	msr	BASEPRI, r3
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	f3bf 8f4f 	dsb	sy
 800f6ec:	b662      	cpsie	i
 800f6ee:	60fb      	str	r3, [r7, #12]
}
 800f6f0:	bf00      	nop
 800f6f2:	e7fe      	b.n	800f6f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	3318      	adds	r3, #24
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe fe37 	bl	800e36c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6fe:	4b1e      	ldr	r3, [pc, #120]	; (800f778 <xTaskRemoveFromEventList+0xb4>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d11d      	bne.n	800f742 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3304      	adds	r3, #4
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fe fe2e 	bl	800e36c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f714:	4b19      	ldr	r3, [pc, #100]	; (800f77c <xTaskRemoveFromEventList+0xb8>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d903      	bls.n	800f724 <xTaskRemoveFromEventList+0x60>
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f720:	4a16      	ldr	r2, [pc, #88]	; (800f77c <xTaskRemoveFromEventList+0xb8>)
 800f722:	6013      	str	r3, [r2, #0]
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f728:	4613      	mov	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4413      	add	r3, r2
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	4a13      	ldr	r2, [pc, #76]	; (800f780 <xTaskRemoveFromEventList+0xbc>)
 800f732:	441a      	add	r2, r3
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	3304      	adds	r3, #4
 800f738:	4619      	mov	r1, r3
 800f73a:	4610      	mov	r0, r2
 800f73c:	f7fe fdb9 	bl	800e2b2 <vListInsertEnd>
 800f740:	e005      	b.n	800f74e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	3318      	adds	r3, #24
 800f746:	4619      	mov	r1, r3
 800f748:	480e      	ldr	r0, [pc, #56]	; (800f784 <xTaskRemoveFromEventList+0xc0>)
 800f74a:	f7fe fdb2 	bl	800e2b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f752:	4b0d      	ldr	r3, [pc, #52]	; (800f788 <xTaskRemoveFromEventList+0xc4>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f758:	429a      	cmp	r2, r3
 800f75a:	d905      	bls.n	800f768 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f75c:	2301      	movs	r3, #1
 800f75e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f760:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <xTaskRemoveFromEventList+0xc8>)
 800f762:	2201      	movs	r2, #1
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	e001      	b.n	800f76c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f768:	2300      	movs	r3, #0
 800f76a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f76c:	697b      	ldr	r3, [r7, #20]
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	2000ccd8 	.word	0x2000ccd8
 800f77c:	2000ccb8 	.word	0x2000ccb8
 800f780:	2000c7e0 	.word	0x2000c7e0
 800f784:	2000cc70 	.word	0x2000cc70
 800f788:	2000c7dc 	.word	0x2000c7dc
 800f78c:	2000ccc4 	.word	0x2000ccc4

0800f790 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10c      	bne.n	800f7b8 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a2:	b672      	cpsid	i
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	b662      	cpsie	i
 800f7b2:	60fb      	str	r3, [r7, #12]
}
 800f7b4:	bf00      	nop
 800f7b6:	e7fe      	b.n	800f7b6 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f7b8:	f000 fec0 	bl	801053c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f7bc:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <vTaskSetTimeOutState+0x48>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f7c4:	4b05      	ldr	r3, [pc, #20]	; (800f7dc <vTaskSetTimeOutState+0x4c>)
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f7cc:	f000 feea 	bl	80105a4 <vPortExitCritical>
}
 800f7d0:	bf00      	nop
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	2000ccc8 	.word	0x2000ccc8
 800f7dc:	2000ccb4 	.word	0x2000ccb4

0800f7e0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f7e8:	4b06      	ldr	r3, [pc, #24]	; (800f804 <vTaskInternalSetTimeOutState+0x24>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f7f0:	4b05      	ldr	r3, [pc, #20]	; (800f808 <vTaskInternalSetTimeOutState+0x28>)
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	605a      	str	r2, [r3, #4]
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr
 800f804:	2000ccc8 	.word	0x2000ccc8
 800f808:	2000ccb4 	.word	0x2000ccb4

0800f80c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b088      	sub	sp, #32
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d10c      	bne.n	800f836 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f820:	b672      	cpsid	i
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	b662      	cpsie	i
 800f830:	613b      	str	r3, [r7, #16]
}
 800f832:	bf00      	nop
 800f834:	e7fe      	b.n	800f834 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10c      	bne.n	800f856 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f840:	b672      	cpsid	i
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	b662      	cpsie	i
 800f850:	60fb      	str	r3, [r7, #12]
}
 800f852:	bf00      	nop
 800f854:	e7fe      	b.n	800f854 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f856:	f000 fe71 	bl	801053c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f85a:	4b1d      	ldr	r3, [pc, #116]	; (800f8d0 <xTaskCheckForTimeOut+0xc4>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	69ba      	ldr	r2, [r7, #24]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f872:	d102      	bne.n	800f87a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f874:	2300      	movs	r3, #0
 800f876:	61fb      	str	r3, [r7, #28]
 800f878:	e023      	b.n	800f8c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	4b15      	ldr	r3, [pc, #84]	; (800f8d4 <xTaskCheckForTimeOut+0xc8>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d007      	beq.n	800f896 <xTaskCheckForTimeOut+0x8a>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	69ba      	ldr	r2, [r7, #24]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d302      	bcc.n	800f896 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f890:	2301      	movs	r3, #1
 800f892:	61fb      	str	r3, [r7, #28]
 800f894:	e015      	b.n	800f8c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d20b      	bcs.n	800f8b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	1ad2      	subs	r2, r2, r3
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff ff97 	bl	800f7e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	61fb      	str	r3, [r7, #28]
 800f8b6:	e004      	b.n	800f8c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f8c2:	f000 fe6f 	bl	80105a4 <vPortExitCritical>

	return xReturn;
 800f8c6:	69fb      	ldr	r3, [r7, #28]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3720      	adds	r7, #32
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	2000ccb4 	.word	0x2000ccb4
 800f8d4:	2000ccc8 	.word	0x2000ccc8

0800f8d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f8d8:	b480      	push	{r7}
 800f8da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f8dc:	4b03      	ldr	r3, [pc, #12]	; (800f8ec <vTaskMissedYield+0x14>)
 800f8de:	2201      	movs	r2, #1
 800f8e0:	601a      	str	r2, [r3, #0]
}
 800f8e2:	bf00      	nop
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	2000ccc4 	.word	0x2000ccc4

0800f8f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f8f8:	f000 f852 	bl	800f9a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <prvIdleTask+0x28>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d9f9      	bls.n	800f8f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f904:	4b05      	ldr	r3, [pc, #20]	; (800f91c <prvIdleTask+0x2c>)
 800f906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f914:	e7f0      	b.n	800f8f8 <prvIdleTask+0x8>
 800f916:	bf00      	nop
 800f918:	2000c7e0 	.word	0x2000c7e0
 800f91c:	e000ed04 	.word	0xe000ed04

0800f920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f926:	2300      	movs	r3, #0
 800f928:	607b      	str	r3, [r7, #4]
 800f92a:	e00c      	b.n	800f946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	4613      	mov	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4413      	add	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4a12      	ldr	r2, [pc, #72]	; (800f980 <prvInitialiseTaskLists+0x60>)
 800f938:	4413      	add	r3, r2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fe fc8c 	bl	800e258 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3301      	adds	r3, #1
 800f944:	607b      	str	r3, [r7, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2b37      	cmp	r3, #55	; 0x37
 800f94a:	d9ef      	bls.n	800f92c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f94c:	480d      	ldr	r0, [pc, #52]	; (800f984 <prvInitialiseTaskLists+0x64>)
 800f94e:	f7fe fc83 	bl	800e258 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f952:	480d      	ldr	r0, [pc, #52]	; (800f988 <prvInitialiseTaskLists+0x68>)
 800f954:	f7fe fc80 	bl	800e258 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f958:	480c      	ldr	r0, [pc, #48]	; (800f98c <prvInitialiseTaskLists+0x6c>)
 800f95a:	f7fe fc7d 	bl	800e258 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f95e:	480c      	ldr	r0, [pc, #48]	; (800f990 <prvInitialiseTaskLists+0x70>)
 800f960:	f7fe fc7a 	bl	800e258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f964:	480b      	ldr	r0, [pc, #44]	; (800f994 <prvInitialiseTaskLists+0x74>)
 800f966:	f7fe fc77 	bl	800e258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f96a:	4b0b      	ldr	r3, [pc, #44]	; (800f998 <prvInitialiseTaskLists+0x78>)
 800f96c:	4a05      	ldr	r2, [pc, #20]	; (800f984 <prvInitialiseTaskLists+0x64>)
 800f96e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <prvInitialiseTaskLists+0x7c>)
 800f972:	4a05      	ldr	r2, [pc, #20]	; (800f988 <prvInitialiseTaskLists+0x68>)
 800f974:	601a      	str	r2, [r3, #0]
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	2000c7e0 	.word	0x2000c7e0
 800f984:	2000cc40 	.word	0x2000cc40
 800f988:	2000cc54 	.word	0x2000cc54
 800f98c:	2000cc70 	.word	0x2000cc70
 800f990:	2000cc84 	.word	0x2000cc84
 800f994:	2000cc9c 	.word	0x2000cc9c
 800f998:	2000cc68 	.word	0x2000cc68
 800f99c:	2000cc6c 	.word	0x2000cc6c

0800f9a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f9a6:	e019      	b.n	800f9dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f9a8:	f000 fdc8 	bl	801053c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ac:	4b10      	ldr	r3, [pc, #64]	; (800f9f0 <prvCheckTasksWaitingTermination+0x50>)
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe fcd7 	bl	800e36c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f9be:	4b0d      	ldr	r3, [pc, #52]	; (800f9f4 <prvCheckTasksWaitingTermination+0x54>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3b01      	subs	r3, #1
 800f9c4:	4a0b      	ldr	r2, [pc, #44]	; (800f9f4 <prvCheckTasksWaitingTermination+0x54>)
 800f9c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f9c8:	4b0b      	ldr	r3, [pc, #44]	; (800f9f8 <prvCheckTasksWaitingTermination+0x58>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	4a0a      	ldr	r2, [pc, #40]	; (800f9f8 <prvCheckTasksWaitingTermination+0x58>)
 800f9d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f9d2:	f000 fde7 	bl	80105a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f810 	bl	800f9fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f9dc:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <prvCheckTasksWaitingTermination+0x58>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d1e1      	bne.n	800f9a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f9e4:	bf00      	nop
 800f9e6:	bf00      	nop
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	2000cc84 	.word	0x2000cc84
 800f9f4:	2000ccb0 	.word	0x2000ccb0
 800f9f8:	2000cc98 	.word	0x2000cc98

0800f9fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d108      	bne.n	800fa20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 ff88 	bl	8010928 <vPortFree>
				vPortFree( pxTCB );
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 ff85 	bl	8010928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fa1e:	e01a      	b.n	800fa56 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d103      	bne.n	800fa32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 ff7c 	bl	8010928 <vPortFree>
	}
 800fa30:	e011      	b.n	800fa56 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d00c      	beq.n	800fa56 <prvDeleteTCB+0x5a>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa40:	b672      	cpsid	i
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	b662      	cpsie	i
 800fa50:	60fb      	str	r3, [r7, #12]
}
 800fa52:	bf00      	nop
 800fa54:	e7fe      	b.n	800fa54 <prvDeleteTCB+0x58>
	}
 800fa56:	bf00      	nop
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
	...

0800fa60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa66:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <prvResetNextTaskUnblockTime+0x38>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d104      	bne.n	800fa7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa70:	4b0a      	ldr	r3, [pc, #40]	; (800fa9c <prvResetNextTaskUnblockTime+0x3c>)
 800fa72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fa78:	e008      	b.n	800fa8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa7a:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <prvResetNextTaskUnblockTime+0x38>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	4a04      	ldr	r2, [pc, #16]	; (800fa9c <prvResetNextTaskUnblockTime+0x3c>)
 800fa8a:	6013      	str	r3, [r2, #0]
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	2000cc68 	.word	0x2000cc68
 800fa9c:	2000ccd0 	.word	0x2000ccd0

0800faa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800faa6:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <xTaskGetSchedulerState+0x34>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d102      	bne.n	800fab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800faae:	2301      	movs	r3, #1
 800fab0:	607b      	str	r3, [r7, #4]
 800fab2:	e008      	b.n	800fac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fab4:	4b08      	ldr	r3, [pc, #32]	; (800fad8 <xTaskGetSchedulerState+0x38>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fabc:	2302      	movs	r3, #2
 800fabe:	607b      	str	r3, [r7, #4]
 800fac0:	e001      	b.n	800fac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fac2:	2300      	movs	r3, #0
 800fac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fac6:	687b      	ldr	r3, [r7, #4]
	}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr
 800fad4:	2000ccbc 	.word	0x2000ccbc
 800fad8:	2000ccd8 	.word	0x2000ccd8

0800fadc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fae8:	2300      	movs	r3, #0
 800faea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d05a      	beq.n	800fba8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800faf2:	4b30      	ldr	r3, [pc, #192]	; (800fbb4 <xTaskPriorityDisinherit+0xd8>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	693a      	ldr	r2, [r7, #16]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d00c      	beq.n	800fb16 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	b672      	cpsid	i
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	b662      	cpsie	i
 800fb10:	60fb      	str	r3, [r7, #12]
}
 800fb12:	bf00      	nop
 800fb14:	e7fe      	b.n	800fb14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10c      	bne.n	800fb38 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb22:	b672      	cpsid	i
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	b662      	cpsie	i
 800fb32:	60bb      	str	r3, [r7, #8]
}
 800fb34:	bf00      	nop
 800fb36:	e7fe      	b.n	800fb36 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb3c:	1e5a      	subs	r2, r3, #1
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d02c      	beq.n	800fba8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d128      	bne.n	800fba8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	3304      	adds	r3, #4
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fe fc06 	bl	800e36c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb78:	4b0f      	ldr	r3, [pc, #60]	; (800fbb8 <xTaskPriorityDisinherit+0xdc>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d903      	bls.n	800fb88 <xTaskPriorityDisinherit+0xac>
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb84:	4a0c      	ldr	r2, [pc, #48]	; (800fbb8 <xTaskPriorityDisinherit+0xdc>)
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	4a09      	ldr	r2, [pc, #36]	; (800fbbc <xTaskPriorityDisinherit+0xe0>)
 800fb96:	441a      	add	r2, r3
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7fe fb87 	bl	800e2b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fba4:	2301      	movs	r3, #1
 800fba6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fba8:	697b      	ldr	r3, [r7, #20]
	}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3718      	adds	r7, #24
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	2000c7dc 	.word	0x2000c7dc
 800fbb8:	2000ccb8 	.word	0x2000ccb8
 800fbbc:	2000c7e0 	.word	0x2000c7e0

0800fbc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fbca:	4b21      	ldr	r3, [pc, #132]	; (800fc50 <prvAddCurrentTaskToDelayedList+0x90>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fbd0:	4b20      	ldr	r3, [pc, #128]	; (800fc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	3304      	adds	r3, #4
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fbc8 	bl	800e36c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbe2:	d10a      	bne.n	800fbfa <prvAddCurrentTaskToDelayedList+0x3a>
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d007      	beq.n	800fbfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbea:	4b1a      	ldr	r3, [pc, #104]	; (800fc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	4819      	ldr	r0, [pc, #100]	; (800fc58 <prvAddCurrentTaskToDelayedList+0x98>)
 800fbf4:	f7fe fb5d 	bl	800e2b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fbf8:	e026      	b.n	800fc48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4413      	add	r3, r2
 800fc00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fc02:	4b14      	ldr	r3, [pc, #80]	; (800fc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d209      	bcs.n	800fc26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fc12:	4b12      	ldr	r3, [pc, #72]	; (800fc5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	4b0f      	ldr	r3, [pc, #60]	; (800fc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	4610      	mov	r0, r2
 800fc20:	f7fe fb6b 	bl	800e2fa <vListInsert>
}
 800fc24:	e010      	b.n	800fc48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fc26:	4b0e      	ldr	r3, [pc, #56]	; (800fc60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	4b0a      	ldr	r3, [pc, #40]	; (800fc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3304      	adds	r3, #4
 800fc30:	4619      	mov	r1, r3
 800fc32:	4610      	mov	r0, r2
 800fc34:	f7fe fb61 	bl	800e2fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fc38:	4b0a      	ldr	r3, [pc, #40]	; (800fc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	68ba      	ldr	r2, [r7, #8]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d202      	bcs.n	800fc48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fc42:	4a08      	ldr	r2, [pc, #32]	; (800fc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	6013      	str	r3, [r2, #0]
}
 800fc48:	bf00      	nop
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	2000ccb4 	.word	0x2000ccb4
 800fc54:	2000c7dc 	.word	0x2000c7dc
 800fc58:	2000cc9c 	.word	0x2000cc9c
 800fc5c:	2000cc6c 	.word	0x2000cc6c
 800fc60:	2000cc68 	.word	0x2000cc68
 800fc64:	2000ccd0 	.word	0x2000ccd0

0800fc68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08a      	sub	sp, #40	; 0x28
 800fc6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fc72:	f000 fb15 	bl	80102a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fc76:	4b1d      	ldr	r3, [pc, #116]	; (800fcec <xTimerCreateTimerTask+0x84>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d021      	beq.n	800fcc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fc82:	2300      	movs	r3, #0
 800fc84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fc86:	1d3a      	adds	r2, r7, #4
 800fc88:	f107 0108 	add.w	r1, r7, #8
 800fc8c:	f107 030c 	add.w	r3, r7, #12
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fe fac7 	bl	800e224 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fc96:	6879      	ldr	r1, [r7, #4]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	9202      	str	r2, [sp, #8]
 800fc9e:	9301      	str	r3, [sp, #4]
 800fca0:	2302      	movs	r3, #2
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	2300      	movs	r3, #0
 800fca6:	460a      	mov	r2, r1
 800fca8:	4911      	ldr	r1, [pc, #68]	; (800fcf0 <xTimerCreateTimerTask+0x88>)
 800fcaa:	4812      	ldr	r0, [pc, #72]	; (800fcf4 <xTimerCreateTimerTask+0x8c>)
 800fcac:	f7ff f892 	bl	800edd4 <xTaskCreateStatic>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	4a11      	ldr	r2, [pc, #68]	; (800fcf8 <xTimerCreateTimerTask+0x90>)
 800fcb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fcb6:	4b10      	ldr	r3, [pc, #64]	; (800fcf8 <xTimerCreateTimerTask+0x90>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d001      	beq.n	800fcc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10c      	bne.n	800fce2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800fcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fccc:	b672      	cpsid	i
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	b662      	cpsie	i
 800fcdc:	613b      	str	r3, [r7, #16]
}
 800fcde:	bf00      	nop
 800fce0:	e7fe      	b.n	800fce0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fce2:	697b      	ldr	r3, [r7, #20]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3718      	adds	r7, #24
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	2000cd0c 	.word	0x2000cd0c
 800fcf0:	080246dc 	.word	0x080246dc
 800fcf4:	0800fe39 	.word	0x0800fe39
 800fcf8:	2000cd10 	.word	0x2000cd10

0800fcfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b08a      	sub	sp, #40	; 0x28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
 800fd08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10c      	bne.n	800fd2e <xTimerGenericCommand+0x32>
	__asm volatile
 800fd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd18:	b672      	cpsid	i
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	b662      	cpsie	i
 800fd28:	623b      	str	r3, [r7, #32]
}
 800fd2a:	bf00      	nop
 800fd2c:	e7fe      	b.n	800fd2c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fd2e:	4b1a      	ldr	r3, [pc, #104]	; (800fd98 <xTimerGenericCommand+0x9c>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d02a      	beq.n	800fd8c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2b05      	cmp	r3, #5
 800fd46:	dc18      	bgt.n	800fd7a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fd48:	f7ff feaa 	bl	800faa0 <xTaskGetSchedulerState>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	d109      	bne.n	800fd66 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fd52:	4b11      	ldr	r3, [pc, #68]	; (800fd98 <xTimerGenericCommand+0x9c>)
 800fd54:	6818      	ldr	r0, [r3, #0]
 800fd56:	f107 0110 	add.w	r1, r7, #16
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd5e:	f7fe fc3f 	bl	800e5e0 <xQueueGenericSend>
 800fd62:	6278      	str	r0, [r7, #36]	; 0x24
 800fd64:	e012      	b.n	800fd8c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fd66:	4b0c      	ldr	r3, [pc, #48]	; (800fd98 <xTimerGenericCommand+0x9c>)
 800fd68:	6818      	ldr	r0, [r3, #0]
 800fd6a:	f107 0110 	add.w	r1, r7, #16
 800fd6e:	2300      	movs	r3, #0
 800fd70:	2200      	movs	r2, #0
 800fd72:	f7fe fc35 	bl	800e5e0 <xQueueGenericSend>
 800fd76:	6278      	str	r0, [r7, #36]	; 0x24
 800fd78:	e008      	b.n	800fd8c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fd7a:	4b07      	ldr	r3, [pc, #28]	; (800fd98 <xTimerGenericCommand+0x9c>)
 800fd7c:	6818      	ldr	r0, [r3, #0]
 800fd7e:	f107 0110 	add.w	r1, r7, #16
 800fd82:	2300      	movs	r3, #0
 800fd84:	683a      	ldr	r2, [r7, #0]
 800fd86:	f7fe fd31 	bl	800e7ec <xQueueGenericSendFromISR>
 800fd8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3728      	adds	r7, #40	; 0x28
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	2000cd0c 	.word	0x2000cd0c

0800fd9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b088      	sub	sp, #32
 800fda0:	af02      	add	r7, sp, #8
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda6:	4b23      	ldr	r3, [pc, #140]	; (800fe34 <prvProcessExpiredTimer+0x98>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe fad9 	bl	800e36c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdc0:	f003 0304 	and.w	r3, r3, #4
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d024      	beq.n	800fe12 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	699a      	ldr	r2, [r3, #24]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	18d1      	adds	r1, r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f000 f8d3 	bl	800ff80 <prvInsertTimerInActiveList>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d021      	beq.n	800fe24 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fde0:	2300      	movs	r3, #0
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	2300      	movs	r3, #0
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	2100      	movs	r1, #0
 800fdea:	6978      	ldr	r0, [r7, #20]
 800fdec:	f7ff ff86 	bl	800fcfc <xTimerGenericCommand>
 800fdf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d115      	bne.n	800fe24 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	b672      	cpsid	i
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	b662      	cpsie	i
 800fe0c:	60fb      	str	r3, [r7, #12]
}
 800fe0e:	bf00      	nop
 800fe10:	e7fe      	b.n	800fe10 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe18:	f023 0301 	bic.w	r3, r3, #1
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	6a1b      	ldr	r3, [r3, #32]
 800fe28:	6978      	ldr	r0, [r7, #20]
 800fe2a:	4798      	blx	r3
}
 800fe2c:	bf00      	nop
 800fe2e:	3718      	adds	r7, #24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	2000cd04 	.word	0x2000cd04

0800fe38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe40:	f107 0308 	add.w	r3, r7, #8
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 f857 	bl	800fef8 <prvGetNextExpireTime>
 800fe4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 f803 	bl	800fe5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fe56:	f000 f8d5 	bl	8010004 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe5a:	e7f1      	b.n	800fe40 <prvTimerTask+0x8>

0800fe5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fe66:	f7ff f9ff 	bl	800f268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe6a:	f107 0308 	add.w	r3, r7, #8
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f000 f866 	bl	800ff40 <prvSampleTimeNow>
 800fe74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d130      	bne.n	800fede <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d10a      	bne.n	800fe98 <prvProcessTimerOrBlockTask+0x3c>
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d806      	bhi.n	800fe98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fe8a:	f7ff f9fb 	bl	800f284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fe8e:	68f9      	ldr	r1, [r7, #12]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7ff ff83 	bl	800fd9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fe96:	e024      	b.n	800fee2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d008      	beq.n	800feb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fe9e:	4b13      	ldr	r3, [pc, #76]	; (800feec <prvProcessTimerOrBlockTask+0x90>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <prvProcessTimerOrBlockTask+0x50>
 800fea8:	2301      	movs	r3, #1
 800feaa:	e000      	b.n	800feae <prvProcessTimerOrBlockTask+0x52>
 800feac:	2300      	movs	r3, #0
 800feae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800feb0:	4b0f      	ldr	r3, [pc, #60]	; (800fef0 <prvProcessTimerOrBlockTask+0x94>)
 800feb2:	6818      	ldr	r0, [r3, #0]
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	683a      	ldr	r2, [r7, #0]
 800febc:	4619      	mov	r1, r3
 800febe:	f7fe ff55 	bl	800ed6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fec2:	f7ff f9df 	bl	800f284 <xTaskResumeAll>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d10a      	bne.n	800fee2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fecc:	4b09      	ldr	r3, [pc, #36]	; (800fef4 <prvProcessTimerOrBlockTask+0x98>)
 800fece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	f3bf 8f6f 	isb	sy
}
 800fedc:	e001      	b.n	800fee2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fede:	f7ff f9d1 	bl	800f284 <xTaskResumeAll>
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	2000cd08 	.word	0x2000cd08
 800fef0:	2000cd0c 	.word	0x2000cd0c
 800fef4:	e000ed04 	.word	0xe000ed04

0800fef8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ff00:	4b0e      	ldr	r3, [pc, #56]	; (800ff3c <prvGetNextExpireTime+0x44>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d101      	bne.n	800ff0e <prvGetNextExpireTime+0x16>
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	e000      	b.n	800ff10 <prvGetNextExpireTime+0x18>
 800ff0e:	2200      	movs	r2, #0
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d105      	bne.n	800ff28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff1c:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <prvGetNextExpireTime+0x44>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	e001      	b.n	800ff2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3714      	adds	r7, #20
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	2000cd04 	.word	0x2000cd04

0800ff40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ff48:	f7ff fa3c 	bl	800f3c4 <xTaskGetTickCount>
 800ff4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ff4e:	4b0b      	ldr	r3, [pc, #44]	; (800ff7c <prvSampleTimeNow+0x3c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d205      	bcs.n	800ff64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ff58:	f000 f93c 	bl	80101d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	601a      	str	r2, [r3, #0]
 800ff62:	e002      	b.n	800ff6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2200      	movs	r2, #0
 800ff68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ff6a:	4a04      	ldr	r2, [pc, #16]	; (800ff7c <prvSampleTimeNow+0x3c>)
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ff70:	68fb      	ldr	r3, [r7, #12]
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	2000cd14 	.word	0x2000cd14

0800ff80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	607a      	str	r2, [r7, #4]
 800ff8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	68ba      	ldr	r2, [r7, #8]
 800ff96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d812      	bhi.n	800ffcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	1ad2      	subs	r2, r2, r3
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	699b      	ldr	r3, [r3, #24]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d302      	bcc.n	800ffba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	e01b      	b.n	800fff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ffba:	4b10      	ldr	r3, [pc, #64]	; (800fffc <prvInsertTimerInActiveList+0x7c>)
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	f7fe f998 	bl	800e2fa <vListInsert>
 800ffca:	e012      	b.n	800fff2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d206      	bcs.n	800ffe2 <prvInsertTimerInActiveList+0x62>
 800ffd4:	68ba      	ldr	r2, [r7, #8]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d302      	bcc.n	800ffe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	617b      	str	r3, [r7, #20]
 800ffe0:	e007      	b.n	800fff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ffe2:	4b07      	ldr	r3, [pc, #28]	; (8010000 <prvInsertTimerInActiveList+0x80>)
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	3304      	adds	r3, #4
 800ffea:	4619      	mov	r1, r3
 800ffec:	4610      	mov	r0, r2
 800ffee:	f7fe f984 	bl	800e2fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fff2:	697b      	ldr	r3, [r7, #20]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	2000cd08 	.word	0x2000cd08
 8010000:	2000cd04 	.word	0x2000cd04

08010004 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08e      	sub	sp, #56	; 0x38
 8010008:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801000a:	e0d0      	b.n	80101ae <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	da1a      	bge.n	8010048 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010012:	1d3b      	adds	r3, r7, #4
 8010014:	3304      	adds	r3, #4
 8010016:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10c      	bne.n	8010038 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010022:	b672      	cpsid	i
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	b662      	cpsie	i
 8010032:	61fb      	str	r3, [r7, #28]
}
 8010034:	bf00      	nop
 8010036:	e7fe      	b.n	8010036 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801003e:	6850      	ldr	r0, [r2, #4]
 8010040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010042:	6892      	ldr	r2, [r2, #8]
 8010044:	4611      	mov	r1, r2
 8010046:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f2c0 80af 	blt.w	80101ae <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d004      	beq.n	8010066 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801005c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005e:	3304      	adds	r3, #4
 8010060:	4618      	mov	r0, r3
 8010062:	f7fe f983 	bl	800e36c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010066:	463b      	mov	r3, r7
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff ff69 	bl	800ff40 <prvSampleTimeNow>
 801006e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b09      	cmp	r3, #9
 8010074:	f200 809a 	bhi.w	80101ac <prvProcessReceivedCommands+0x1a8>
 8010078:	a201      	add	r2, pc, #4	; (adr r2, 8010080 <prvProcessReceivedCommands+0x7c>)
 801007a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007e:	bf00      	nop
 8010080:	080100a9 	.word	0x080100a9
 8010084:	080100a9 	.word	0x080100a9
 8010088:	080100a9 	.word	0x080100a9
 801008c:	08010121 	.word	0x08010121
 8010090:	08010135 	.word	0x08010135
 8010094:	08010183 	.word	0x08010183
 8010098:	080100a9 	.word	0x080100a9
 801009c:	080100a9 	.word	0x080100a9
 80100a0:	08010121 	.word	0x08010121
 80100a4:	08010135 	.word	0x08010135
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80100a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100ae:	f043 0301 	orr.w	r3, r3, #1
 80100b2:	b2da      	uxtb	r2, r3
 80100b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100be:	699b      	ldr	r3, [r3, #24]
 80100c0:	18d1      	adds	r1, r2, r3
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100c8:	f7ff ff5a 	bl	800ff80 <prvInsertTimerInActiveList>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d06d      	beq.n	80101ae <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d4:	6a1b      	ldr	r3, [r3, #32]
 80100d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80100da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100e0:	f003 0304 	and.w	r3, r3, #4
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d062      	beq.n	80101ae <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80100e8:	68ba      	ldr	r2, [r7, #8]
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	699b      	ldr	r3, [r3, #24]
 80100ee:	441a      	add	r2, r3
 80100f0:	2300      	movs	r3, #0
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	2300      	movs	r3, #0
 80100f6:	2100      	movs	r1, #0
 80100f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100fa:	f7ff fdff 	bl	800fcfc <xTimerGenericCommand>
 80100fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d153      	bne.n	80101ae <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010a:	b672      	cpsid	i
 801010c:	f383 8811 	msr	BASEPRI, r3
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	f3bf 8f4f 	dsb	sy
 8010118:	b662      	cpsie	i
 801011a:	61bb      	str	r3, [r7, #24]
}
 801011c:	bf00      	nop
 801011e:	e7fe      	b.n	801011e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010126:	f023 0301 	bic.w	r3, r3, #1
 801012a:	b2da      	uxtb	r2, r3
 801012c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010132:	e03c      	b.n	80101ae <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801013a:	f043 0301 	orr.w	r3, r3, #1
 801013e:	b2da      	uxtb	r2, r3
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014e:	699b      	ldr	r3, [r3, #24]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10c      	bne.n	801016e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010158:	b672      	cpsid	i
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	b662      	cpsie	i
 8010168:	617b      	str	r3, [r7, #20]
}
 801016a:	bf00      	nop
 801016c:	e7fe      	b.n	801016c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801016e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010170:	699a      	ldr	r2, [r3, #24]
 8010172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010174:	18d1      	adds	r1, r2, r3
 8010176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801017a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801017c:	f7ff ff00 	bl	800ff80 <prvInsertTimerInActiveList>
					break;
 8010180:	e015      	b.n	80101ae <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d103      	bne.n	8010198 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010192:	f000 fbc9 	bl	8010928 <vPortFree>
 8010196:	e00a      	b.n	80101ae <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801019e:	f023 0301 	bic.w	r3, r3, #1
 80101a2:	b2da      	uxtb	r2, r3
 80101a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80101aa:	e000      	b.n	80101ae <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80101ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80101ae:	4b08      	ldr	r3, [pc, #32]	; (80101d0 <prvProcessReceivedCommands+0x1cc>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	1d39      	adds	r1, r7, #4
 80101b4:	2200      	movs	r2, #0
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fe fbb8 	bl	800e92c <xQueueReceive>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f47f af24 	bne.w	801000c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop
 80101c8:	3730      	adds	r7, #48	; 0x30
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	2000cd0c 	.word	0x2000cd0c

080101d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101da:	e04a      	b.n	8010272 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101dc:	4b2e      	ldr	r3, [pc, #184]	; (8010298 <prvSwitchTimerLists+0xc4>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e6:	4b2c      	ldr	r3, [pc, #176]	; (8010298 <prvSwitchTimerLists+0xc4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	3304      	adds	r3, #4
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe f8b9 	bl	800e36c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6a1b      	ldr	r3, [r3, #32]
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010208:	f003 0304 	and.w	r3, r3, #4
 801020c:	2b00      	cmp	r3, #0
 801020e:	d030      	beq.n	8010272 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	4413      	add	r3, r2
 8010218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	429a      	cmp	r2, r3
 8010220:	d90e      	bls.n	8010240 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801022e:	4b1a      	ldr	r3, [pc, #104]	; (8010298 <prvSwitchTimerLists+0xc4>)
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	3304      	adds	r3, #4
 8010236:	4619      	mov	r1, r3
 8010238:	4610      	mov	r0, r2
 801023a:	f7fe f85e 	bl	800e2fa <vListInsert>
 801023e:	e018      	b.n	8010272 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010240:	2300      	movs	r3, #0
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	2300      	movs	r3, #0
 8010246:	693a      	ldr	r2, [r7, #16]
 8010248:	2100      	movs	r1, #0
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f7ff fd56 	bl	800fcfc <xTimerGenericCommand>
 8010250:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d10c      	bne.n	8010272 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025c:	b672      	cpsid	i
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	b662      	cpsie	i
 801026c:	603b      	str	r3, [r7, #0]
}
 801026e:	bf00      	nop
 8010270:	e7fe      	b.n	8010270 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010272:	4b09      	ldr	r3, [pc, #36]	; (8010298 <prvSwitchTimerLists+0xc4>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1af      	bne.n	80101dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801027c:	4b06      	ldr	r3, [pc, #24]	; (8010298 <prvSwitchTimerLists+0xc4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010282:	4b06      	ldr	r3, [pc, #24]	; (801029c <prvSwitchTimerLists+0xc8>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a04      	ldr	r2, [pc, #16]	; (8010298 <prvSwitchTimerLists+0xc4>)
 8010288:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801028a:	4a04      	ldr	r2, [pc, #16]	; (801029c <prvSwitchTimerLists+0xc8>)
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	6013      	str	r3, [r2, #0]
}
 8010290:	bf00      	nop
 8010292:	3718      	adds	r7, #24
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	2000cd04 	.word	0x2000cd04
 801029c:	2000cd08 	.word	0x2000cd08

080102a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80102a6:	f000 f949 	bl	801053c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80102aa:	4b15      	ldr	r3, [pc, #84]	; (8010300 <prvCheckForValidListAndQueue+0x60>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d120      	bne.n	80102f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80102b2:	4814      	ldr	r0, [pc, #80]	; (8010304 <prvCheckForValidListAndQueue+0x64>)
 80102b4:	f7fd ffd0 	bl	800e258 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80102b8:	4813      	ldr	r0, [pc, #76]	; (8010308 <prvCheckForValidListAndQueue+0x68>)
 80102ba:	f7fd ffcd 	bl	800e258 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80102be:	4b13      	ldr	r3, [pc, #76]	; (801030c <prvCheckForValidListAndQueue+0x6c>)
 80102c0:	4a10      	ldr	r2, [pc, #64]	; (8010304 <prvCheckForValidListAndQueue+0x64>)
 80102c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80102c4:	4b12      	ldr	r3, [pc, #72]	; (8010310 <prvCheckForValidListAndQueue+0x70>)
 80102c6:	4a10      	ldr	r2, [pc, #64]	; (8010308 <prvCheckForValidListAndQueue+0x68>)
 80102c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80102ca:	2300      	movs	r3, #0
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	4b11      	ldr	r3, [pc, #68]	; (8010314 <prvCheckForValidListAndQueue+0x74>)
 80102d0:	4a11      	ldr	r2, [pc, #68]	; (8010318 <prvCheckForValidListAndQueue+0x78>)
 80102d2:	2110      	movs	r1, #16
 80102d4:	200a      	movs	r0, #10
 80102d6:	f7fe f8dd 	bl	800e494 <xQueueGenericCreateStatic>
 80102da:	4603      	mov	r3, r0
 80102dc:	4a08      	ldr	r2, [pc, #32]	; (8010300 <prvCheckForValidListAndQueue+0x60>)
 80102de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80102e0:	4b07      	ldr	r3, [pc, #28]	; (8010300 <prvCheckForValidListAndQueue+0x60>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d005      	beq.n	80102f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80102e8:	4b05      	ldr	r3, [pc, #20]	; (8010300 <prvCheckForValidListAndQueue+0x60>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	490b      	ldr	r1, [pc, #44]	; (801031c <prvCheckForValidListAndQueue+0x7c>)
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe fd12 	bl	800ed18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80102f4:	f000 f956 	bl	80105a4 <vPortExitCritical>
}
 80102f8:	bf00      	nop
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	2000cd0c 	.word	0x2000cd0c
 8010304:	2000ccdc 	.word	0x2000ccdc
 8010308:	2000ccf0 	.word	0x2000ccf0
 801030c:	2000cd04 	.word	0x2000cd04
 8010310:	2000cd08 	.word	0x2000cd08
 8010314:	2000cdb8 	.word	0x2000cdb8
 8010318:	2000cd18 	.word	0x2000cd18
 801031c:	080246e4 	.word	0x080246e4

08010320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010320:	b480      	push	{r7}
 8010322:	b085      	sub	sp, #20
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	3b04      	subs	r3, #4
 8010330:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	3b04      	subs	r3, #4
 801033e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	f023 0201 	bic.w	r2, r3, #1
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3b04      	subs	r3, #4
 801034e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010350:	4a0c      	ldr	r2, [pc, #48]	; (8010384 <pxPortInitialiseStack+0x64>)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3b14      	subs	r3, #20
 801035a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	3b04      	subs	r3, #4
 8010366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f06f 0202 	mvn.w	r2, #2
 801036e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	3b20      	subs	r3, #32
 8010374:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010376:	68fb      	ldr	r3, [r7, #12]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3714      	adds	r7, #20
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr
 8010384:	08010389 	.word	0x08010389

08010388 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010388:	b480      	push	{r7}
 801038a:	b085      	sub	sp, #20
 801038c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010392:	4b14      	ldr	r3, [pc, #80]	; (80103e4 <prvTaskExitError+0x5c>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801039a:	d00c      	beq.n	80103b6 <prvTaskExitError+0x2e>
	__asm volatile
 801039c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a0:	b672      	cpsid	i
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	b662      	cpsie	i
 80103b0:	60fb      	str	r3, [r7, #12]
}
 80103b2:	bf00      	nop
 80103b4:	e7fe      	b.n	80103b4 <prvTaskExitError+0x2c>
	__asm volatile
 80103b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ba:	b672      	cpsid	i
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	b662      	cpsie	i
 80103ca:	60bb      	str	r3, [r7, #8]
}
 80103cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80103ce:	bf00      	nop
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d0fc      	beq.n	80103d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80103d6:	bf00      	nop
 80103d8:	bf00      	nop
 80103da:	3714      	adds	r7, #20
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr
 80103e4:	2000009c 	.word	0x2000009c
	...

080103f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103f0:	4b07      	ldr	r3, [pc, #28]	; (8010410 <pxCurrentTCBConst2>)
 80103f2:	6819      	ldr	r1, [r3, #0]
 80103f4:	6808      	ldr	r0, [r1, #0]
 80103f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	f380 8809 	msr	PSP, r0
 80103fe:	f3bf 8f6f 	isb	sy
 8010402:	f04f 0000 	mov.w	r0, #0
 8010406:	f380 8811 	msr	BASEPRI, r0
 801040a:	4770      	bx	lr
 801040c:	f3af 8000 	nop.w

08010410 <pxCurrentTCBConst2>:
 8010410:	2000c7dc 	.word	0x2000c7dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010414:	bf00      	nop
 8010416:	bf00      	nop

08010418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010418:	4808      	ldr	r0, [pc, #32]	; (801043c <prvPortStartFirstTask+0x24>)
 801041a:	6800      	ldr	r0, [r0, #0]
 801041c:	6800      	ldr	r0, [r0, #0]
 801041e:	f380 8808 	msr	MSP, r0
 8010422:	f04f 0000 	mov.w	r0, #0
 8010426:	f380 8814 	msr	CONTROL, r0
 801042a:	b662      	cpsie	i
 801042c:	b661      	cpsie	f
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	f3bf 8f6f 	isb	sy
 8010436:	df00      	svc	0
 8010438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801043a:	bf00      	nop
 801043c:	e000ed08 	.word	0xe000ed08

08010440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010446:	4b37      	ldr	r3, [pc, #220]	; (8010524 <xPortStartScheduler+0xe4>)
 8010448:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	b2db      	uxtb	r3, r3
 8010450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	22ff      	movs	r2, #255	; 0xff
 8010456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	b2db      	uxtb	r3, r3
 801045e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010460:	78fb      	ldrb	r3, [r7, #3]
 8010462:	b2db      	uxtb	r3, r3
 8010464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010468:	b2da      	uxtb	r2, r3
 801046a:	4b2f      	ldr	r3, [pc, #188]	; (8010528 <xPortStartScheduler+0xe8>)
 801046c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801046e:	4b2f      	ldr	r3, [pc, #188]	; (801052c <xPortStartScheduler+0xec>)
 8010470:	2207      	movs	r2, #7
 8010472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010474:	e009      	b.n	801048a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010476:	4b2d      	ldr	r3, [pc, #180]	; (801052c <xPortStartScheduler+0xec>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	3b01      	subs	r3, #1
 801047c:	4a2b      	ldr	r2, [pc, #172]	; (801052c <xPortStartScheduler+0xec>)
 801047e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010480:	78fb      	ldrb	r3, [r7, #3]
 8010482:	b2db      	uxtb	r3, r3
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	b2db      	uxtb	r3, r3
 8010488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	b2db      	uxtb	r3, r3
 801048e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010492:	2b80      	cmp	r3, #128	; 0x80
 8010494:	d0ef      	beq.n	8010476 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010496:	4b25      	ldr	r3, [pc, #148]	; (801052c <xPortStartScheduler+0xec>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f1c3 0307 	rsb	r3, r3, #7
 801049e:	2b04      	cmp	r3, #4
 80104a0:	d00c      	beq.n	80104bc <xPortStartScheduler+0x7c>
	__asm volatile
 80104a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a6:	b672      	cpsid	i
 80104a8:	f383 8811 	msr	BASEPRI, r3
 80104ac:	f3bf 8f6f 	isb	sy
 80104b0:	f3bf 8f4f 	dsb	sy
 80104b4:	b662      	cpsie	i
 80104b6:	60bb      	str	r3, [r7, #8]
}
 80104b8:	bf00      	nop
 80104ba:	e7fe      	b.n	80104ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104bc:	4b1b      	ldr	r3, [pc, #108]	; (801052c <xPortStartScheduler+0xec>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	021b      	lsls	r3, r3, #8
 80104c2:	4a1a      	ldr	r2, [pc, #104]	; (801052c <xPortStartScheduler+0xec>)
 80104c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104c6:	4b19      	ldr	r3, [pc, #100]	; (801052c <xPortStartScheduler+0xec>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104ce:	4a17      	ldr	r2, [pc, #92]	; (801052c <xPortStartScheduler+0xec>)
 80104d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	b2da      	uxtb	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80104da:	4b15      	ldr	r3, [pc, #84]	; (8010530 <xPortStartScheduler+0xf0>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4a14      	ldr	r2, [pc, #80]	; (8010530 <xPortStartScheduler+0xf0>)
 80104e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104e6:	4b12      	ldr	r3, [pc, #72]	; (8010530 <xPortStartScheduler+0xf0>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4a11      	ldr	r2, [pc, #68]	; (8010530 <xPortStartScheduler+0xf0>)
 80104ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104f2:	f000 f8dd 	bl	80106b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104f6:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <xPortStartScheduler+0xf4>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80104fc:	f000 f8fc 	bl	80106f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010500:	4b0d      	ldr	r3, [pc, #52]	; (8010538 <xPortStartScheduler+0xf8>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4a0c      	ldr	r2, [pc, #48]	; (8010538 <xPortStartScheduler+0xf8>)
 8010506:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801050a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801050c:	f7ff ff84 	bl	8010418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010510:	f7ff f824 	bl	800f55c <vTaskSwitchContext>
	prvTaskExitError();
 8010514:	f7ff ff38 	bl	8010388 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	e000e400 	.word	0xe000e400
 8010528:	2000ce08 	.word	0x2000ce08
 801052c:	2000ce0c 	.word	0x2000ce0c
 8010530:	e000ed20 	.word	0xe000ed20
 8010534:	2000009c 	.word	0x2000009c
 8010538:	e000ef34 	.word	0xe000ef34

0801053c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
	__asm volatile
 8010542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010546:	b672      	cpsid	i
 8010548:	f383 8811 	msr	BASEPRI, r3
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	f3bf 8f4f 	dsb	sy
 8010554:	b662      	cpsie	i
 8010556:	607b      	str	r3, [r7, #4]
}
 8010558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801055a:	4b10      	ldr	r3, [pc, #64]	; (801059c <vPortEnterCritical+0x60>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	3301      	adds	r3, #1
 8010560:	4a0e      	ldr	r2, [pc, #56]	; (801059c <vPortEnterCritical+0x60>)
 8010562:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010564:	4b0d      	ldr	r3, [pc, #52]	; (801059c <vPortEnterCritical+0x60>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d111      	bne.n	8010590 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801056c:	4b0c      	ldr	r3, [pc, #48]	; (80105a0 <vPortEnterCritical+0x64>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00c      	beq.n	8010590 <vPortEnterCritical+0x54>
	__asm volatile
 8010576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057a:	b672      	cpsid	i
 801057c:	f383 8811 	msr	BASEPRI, r3
 8010580:	f3bf 8f6f 	isb	sy
 8010584:	f3bf 8f4f 	dsb	sy
 8010588:	b662      	cpsie	i
 801058a:	603b      	str	r3, [r7, #0]
}
 801058c:	bf00      	nop
 801058e:	e7fe      	b.n	801058e <vPortEnterCritical+0x52>
	}
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr
 801059c:	2000009c 	.word	0x2000009c
 80105a0:	e000ed04 	.word	0xe000ed04

080105a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80105aa:	4b13      	ldr	r3, [pc, #76]	; (80105f8 <vPortExitCritical+0x54>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10c      	bne.n	80105cc <vPortExitCritical+0x28>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	b672      	cpsid	i
 80105b8:	f383 8811 	msr	BASEPRI, r3
 80105bc:	f3bf 8f6f 	isb	sy
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	b662      	cpsie	i
 80105c6:	607b      	str	r3, [r7, #4]
}
 80105c8:	bf00      	nop
 80105ca:	e7fe      	b.n	80105ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80105cc:	4b0a      	ldr	r3, [pc, #40]	; (80105f8 <vPortExitCritical+0x54>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3b01      	subs	r3, #1
 80105d2:	4a09      	ldr	r2, [pc, #36]	; (80105f8 <vPortExitCritical+0x54>)
 80105d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80105d6:	4b08      	ldr	r3, [pc, #32]	; (80105f8 <vPortExitCritical+0x54>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d105      	bne.n	80105ea <vPortExitCritical+0x46>
 80105de:	2300      	movs	r3, #0
 80105e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	f383 8811 	msr	BASEPRI, r3
}
 80105e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80105ea:	bf00      	nop
 80105ec:	370c      	adds	r7, #12
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	2000009c 	.word	0x2000009c
 80105fc:	00000000 	.word	0x00000000

08010600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010600:	f3ef 8009 	mrs	r0, PSP
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	4b15      	ldr	r3, [pc, #84]	; (8010660 <pxCurrentTCBConst>)
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	f01e 0f10 	tst.w	lr, #16
 8010610:	bf08      	it	eq
 8010612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061a:	6010      	str	r0, [r2, #0]
 801061c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010624:	b672      	cpsid	i
 8010626:	f380 8811 	msr	BASEPRI, r0
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	b662      	cpsie	i
 8010634:	f7fe ff92 	bl	800f55c <vTaskSwitchContext>
 8010638:	f04f 0000 	mov.w	r0, #0
 801063c:	f380 8811 	msr	BASEPRI, r0
 8010640:	bc09      	pop	{r0, r3}
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	6808      	ldr	r0, [r1, #0]
 8010646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064a:	f01e 0f10 	tst.w	lr, #16
 801064e:	bf08      	it	eq
 8010650:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010654:	f380 8809 	msr	PSP, r0
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop

08010660 <pxCurrentTCBConst>:
 8010660:	2000c7dc 	.word	0x2000c7dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010664:	bf00      	nop
 8010666:	bf00      	nop

08010668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
	__asm volatile
 801066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010672:	b672      	cpsid	i
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	b662      	cpsie	i
 8010682:	607b      	str	r3, [r7, #4]
}
 8010684:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010686:	f7fe fead 	bl	800f3e4 <xTaskIncrementTick>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010690:	4b06      	ldr	r3, [pc, #24]	; (80106ac <SysTick_Handler+0x44>)
 8010692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	2300      	movs	r3, #0
 801069a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	f383 8811 	msr	BASEPRI, r3
}
 80106a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	e000ed04 	.word	0xe000ed04

080106b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80106b0:	b480      	push	{r7}
 80106b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80106b4:	4b0b      	ldr	r3, [pc, #44]	; (80106e4 <vPortSetupTimerInterrupt+0x34>)
 80106b6:	2200      	movs	r2, #0
 80106b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80106ba:	4b0b      	ldr	r3, [pc, #44]	; (80106e8 <vPortSetupTimerInterrupt+0x38>)
 80106bc:	2200      	movs	r2, #0
 80106be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80106c0:	4b0a      	ldr	r3, [pc, #40]	; (80106ec <vPortSetupTimerInterrupt+0x3c>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a0a      	ldr	r2, [pc, #40]	; (80106f0 <vPortSetupTimerInterrupt+0x40>)
 80106c6:	fba2 2303 	umull	r2, r3, r2, r3
 80106ca:	099b      	lsrs	r3, r3, #6
 80106cc:	4a09      	ldr	r2, [pc, #36]	; (80106f4 <vPortSetupTimerInterrupt+0x44>)
 80106ce:	3b01      	subs	r3, #1
 80106d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80106d2:	4b04      	ldr	r3, [pc, #16]	; (80106e4 <vPortSetupTimerInterrupt+0x34>)
 80106d4:	2207      	movs	r2, #7
 80106d6:	601a      	str	r2, [r3, #0]
}
 80106d8:	bf00      	nop
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	e000e010 	.word	0xe000e010
 80106e8:	e000e018 	.word	0xe000e018
 80106ec:	20000004 	.word	0x20000004
 80106f0:	10624dd3 	.word	0x10624dd3
 80106f4:	e000e014 	.word	0xe000e014

080106f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80106f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010708 <vPortEnableVFP+0x10>
 80106fc:	6801      	ldr	r1, [r0, #0]
 80106fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010702:	6001      	str	r1, [r0, #0]
 8010704:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010706:	bf00      	nop
 8010708:	e000ed88 	.word	0xe000ed88

0801070c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010712:	f3ef 8305 	mrs	r3, IPSR
 8010716:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2b0f      	cmp	r3, #15
 801071c:	d916      	bls.n	801074c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801071e:	4a19      	ldr	r2, [pc, #100]	; (8010784 <vPortValidateInterruptPriority+0x78>)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	4413      	add	r3, r2
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010728:	4b17      	ldr	r3, [pc, #92]	; (8010788 <vPortValidateInterruptPriority+0x7c>)
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	7afa      	ldrb	r2, [r7, #11]
 801072e:	429a      	cmp	r2, r3
 8010730:	d20c      	bcs.n	801074c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010736:	b672      	cpsid	i
 8010738:	f383 8811 	msr	BASEPRI, r3
 801073c:	f3bf 8f6f 	isb	sy
 8010740:	f3bf 8f4f 	dsb	sy
 8010744:	b662      	cpsie	i
 8010746:	607b      	str	r3, [r7, #4]
}
 8010748:	bf00      	nop
 801074a:	e7fe      	b.n	801074a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801074c:	4b0f      	ldr	r3, [pc, #60]	; (801078c <vPortValidateInterruptPriority+0x80>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010754:	4b0e      	ldr	r3, [pc, #56]	; (8010790 <vPortValidateInterruptPriority+0x84>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	d90c      	bls.n	8010776 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	b672      	cpsid	i
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	b662      	cpsie	i
 8010770:	603b      	str	r3, [r7, #0]
}
 8010772:	bf00      	nop
 8010774:	e7fe      	b.n	8010774 <vPortValidateInterruptPriority+0x68>
	}
 8010776:	bf00      	nop
 8010778:	3714      	adds	r7, #20
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	e000e3f0 	.word	0xe000e3f0
 8010788:	2000ce08 	.word	0x2000ce08
 801078c:	e000ed0c 	.word	0xe000ed0c
 8010790:	2000ce0c 	.word	0x2000ce0c

08010794 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08a      	sub	sp, #40	; 0x28
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801079c:	2300      	movs	r3, #0
 801079e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80107a0:	f7fe fd62 	bl	800f268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80107a4:	4b5b      	ldr	r3, [pc, #364]	; (8010914 <pvPortMalloc+0x180>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d101      	bne.n	80107b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80107ac:	f000 f91a 	bl	80109e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80107b0:	4b59      	ldr	r3, [pc, #356]	; (8010918 <pvPortMalloc+0x184>)
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4013      	ands	r3, r2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f040 8092 	bne.w	80108e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d01f      	beq.n	8010804 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80107c4:	2208      	movs	r2, #8
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4413      	add	r3, r2
 80107ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f003 0307 	and.w	r3, r3, #7
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d016      	beq.n	8010804 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f023 0307 	bic.w	r3, r3, #7
 80107dc:	3308      	adds	r3, #8
 80107de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f003 0307 	and.w	r3, r3, #7
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00c      	beq.n	8010804 <pvPortMalloc+0x70>
	__asm volatile
 80107ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ee:	b672      	cpsid	i
 80107f0:	f383 8811 	msr	BASEPRI, r3
 80107f4:	f3bf 8f6f 	isb	sy
 80107f8:	f3bf 8f4f 	dsb	sy
 80107fc:	b662      	cpsie	i
 80107fe:	617b      	str	r3, [r7, #20]
}
 8010800:	bf00      	nop
 8010802:	e7fe      	b.n	8010802 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d06b      	beq.n	80108e2 <pvPortMalloc+0x14e>
 801080a:	4b44      	ldr	r3, [pc, #272]	; (801091c <pvPortMalloc+0x188>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	429a      	cmp	r2, r3
 8010812:	d866      	bhi.n	80108e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010814:	4b42      	ldr	r3, [pc, #264]	; (8010920 <pvPortMalloc+0x18c>)
 8010816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010818:	4b41      	ldr	r3, [pc, #260]	; (8010920 <pvPortMalloc+0x18c>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801081e:	e004      	b.n	801082a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	429a      	cmp	r2, r3
 8010832:	d903      	bls.n	801083c <pvPortMalloc+0xa8>
 8010834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1f1      	bne.n	8010820 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801083c:	4b35      	ldr	r3, [pc, #212]	; (8010914 <pvPortMalloc+0x180>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010842:	429a      	cmp	r2, r3
 8010844:	d04d      	beq.n	80108e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2208      	movs	r2, #8
 801084c:	4413      	add	r3, r2
 801084e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	6a3b      	ldr	r3, [r7, #32]
 8010856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085a:	685a      	ldr	r2, [r3, #4]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	1ad2      	subs	r2, r2, r3
 8010860:	2308      	movs	r3, #8
 8010862:	005b      	lsls	r3, r3, #1
 8010864:	429a      	cmp	r2, r3
 8010866:	d921      	bls.n	80108ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	f003 0307 	and.w	r3, r3, #7
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00c      	beq.n	8010894 <pvPortMalloc+0x100>
	__asm volatile
 801087a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087e:	b672      	cpsid	i
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	b662      	cpsie	i
 801088e:	613b      	str	r3, [r7, #16]
}
 8010890:	bf00      	nop
 8010892:	e7fe      	b.n	8010892 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	685a      	ldr	r2, [r3, #4]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	1ad2      	subs	r2, r2, r3
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80108a6:	69b8      	ldr	r0, [r7, #24]
 80108a8:	f000 f8fe 	bl	8010aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108ac:	4b1b      	ldr	r3, [pc, #108]	; (801091c <pvPortMalloc+0x188>)
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	4a19      	ldr	r2, [pc, #100]	; (801091c <pvPortMalloc+0x188>)
 80108b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108ba:	4b18      	ldr	r3, [pc, #96]	; (801091c <pvPortMalloc+0x188>)
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	4b19      	ldr	r3, [pc, #100]	; (8010924 <pvPortMalloc+0x190>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d203      	bcs.n	80108ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80108c6:	4b15      	ldr	r3, [pc, #84]	; (801091c <pvPortMalloc+0x188>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	4a16      	ldr	r2, [pc, #88]	; (8010924 <pvPortMalloc+0x190>)
 80108cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d0:	685a      	ldr	r2, [r3, #4]
 80108d2:	4b11      	ldr	r3, [pc, #68]	; (8010918 <pvPortMalloc+0x184>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	431a      	orrs	r2, r3
 80108d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80108dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108de:	2200      	movs	r2, #0
 80108e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80108e2:	f7fe fccf 	bl	800f284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	f003 0307 	and.w	r3, r3, #7
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00c      	beq.n	801090a <pvPortMalloc+0x176>
	__asm volatile
 80108f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f4:	b672      	cpsid	i
 80108f6:	f383 8811 	msr	BASEPRI, r3
 80108fa:	f3bf 8f6f 	isb	sy
 80108fe:	f3bf 8f4f 	dsb	sy
 8010902:	b662      	cpsie	i
 8010904:	60fb      	str	r3, [r7, #12]
}
 8010906:	bf00      	nop
 8010908:	e7fe      	b.n	8010908 <pvPortMalloc+0x174>
	return pvReturn;
 801090a:	69fb      	ldr	r3, [r7, #28]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3728      	adds	r7, #40	; 0x28
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	20010a18 	.word	0x20010a18
 8010918:	20010a24 	.word	0x20010a24
 801091c:	20010a1c 	.word	0x20010a1c
 8010920:	20010a10 	.word	0x20010a10
 8010924:	20010a20 	.word	0x20010a20

08010928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d04c      	beq.n	80109d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801093a:	2308      	movs	r3, #8
 801093c:	425b      	negs	r3, r3
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	4413      	add	r3, r2
 8010942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	4b23      	ldr	r3, [pc, #140]	; (80109dc <vPortFree+0xb4>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4013      	ands	r3, r2
 8010952:	2b00      	cmp	r3, #0
 8010954:	d10c      	bne.n	8010970 <vPortFree+0x48>
	__asm volatile
 8010956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095a:	b672      	cpsid	i
 801095c:	f383 8811 	msr	BASEPRI, r3
 8010960:	f3bf 8f6f 	isb	sy
 8010964:	f3bf 8f4f 	dsb	sy
 8010968:	b662      	cpsie	i
 801096a:	60fb      	str	r3, [r7, #12]
}
 801096c:	bf00      	nop
 801096e:	e7fe      	b.n	801096e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00c      	beq.n	8010992 <vPortFree+0x6a>
	__asm volatile
 8010978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097c:	b672      	cpsid	i
 801097e:	f383 8811 	msr	BASEPRI, r3
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	b662      	cpsie	i
 801098c:	60bb      	str	r3, [r7, #8]
}
 801098e:	bf00      	nop
 8010990:	e7fe      	b.n	8010990 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	685a      	ldr	r2, [r3, #4]
 8010996:	4b11      	ldr	r3, [pc, #68]	; (80109dc <vPortFree+0xb4>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4013      	ands	r3, r2
 801099c:	2b00      	cmp	r3, #0
 801099e:	d019      	beq.n	80109d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d115      	bne.n	80109d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	685a      	ldr	r2, [r3, #4]
 80109ac:	4b0b      	ldr	r3, [pc, #44]	; (80109dc <vPortFree+0xb4>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	43db      	mvns	r3, r3
 80109b2:	401a      	ands	r2, r3
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80109b8:	f7fe fc56 	bl	800f268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	685a      	ldr	r2, [r3, #4]
 80109c0:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <vPortFree+0xb8>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	4413      	add	r3, r2
 80109c6:	4a06      	ldr	r2, [pc, #24]	; (80109e0 <vPortFree+0xb8>)
 80109c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80109ca:	6938      	ldr	r0, [r7, #16]
 80109cc:	f000 f86c 	bl	8010aa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80109d0:	f7fe fc58 	bl	800f284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80109d4:	bf00      	nop
 80109d6:	3718      	adds	r7, #24
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20010a24 	.word	0x20010a24
 80109e0:	20010a1c 	.word	0x20010a1c

080109e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80109ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80109f0:	4b27      	ldr	r3, [pc, #156]	; (8010a90 <prvHeapInit+0xac>)
 80109f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f003 0307 	and.w	r3, r3, #7
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00c      	beq.n	8010a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3307      	adds	r3, #7
 8010a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f023 0307 	bic.w	r3, r3, #7
 8010a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	4a1f      	ldr	r2, [pc, #124]	; (8010a90 <prvHeapInit+0xac>)
 8010a14:	4413      	add	r3, r2
 8010a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a1c:	4a1d      	ldr	r2, [pc, #116]	; (8010a94 <prvHeapInit+0xb0>)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a22:	4b1c      	ldr	r3, [pc, #112]	; (8010a94 <prvHeapInit+0xb0>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010a30:	2208      	movs	r2, #8
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	1a9b      	subs	r3, r3, r2
 8010a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f023 0307 	bic.w	r3, r3, #7
 8010a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	4a15      	ldr	r2, [pc, #84]	; (8010a98 <prvHeapInit+0xb4>)
 8010a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a46:	4b14      	ldr	r3, [pc, #80]	; (8010a98 <prvHeapInit+0xb4>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a4e:	4b12      	ldr	r3, [pc, #72]	; (8010a98 <prvHeapInit+0xb4>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	1ad2      	subs	r2, r2, r3
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a64:	4b0c      	ldr	r3, [pc, #48]	; (8010a98 <prvHeapInit+0xb4>)
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	4a0a      	ldr	r2, [pc, #40]	; (8010a9c <prvHeapInit+0xb8>)
 8010a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	4a09      	ldr	r2, [pc, #36]	; (8010aa0 <prvHeapInit+0xbc>)
 8010a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a7c:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <prvHeapInit+0xc0>)
 8010a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010a82:	601a      	str	r2, [r3, #0]
}
 8010a84:	bf00      	nop
 8010a86:	3714      	adds	r7, #20
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr
 8010a90:	2000ce10 	.word	0x2000ce10
 8010a94:	20010a10 	.word	0x20010a10
 8010a98:	20010a18 	.word	0x20010a18
 8010a9c:	20010a20 	.word	0x20010a20
 8010aa0:	20010a1c 	.word	0x20010a1c
 8010aa4:	20010a24 	.word	0x20010a24

08010aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ab0:	4b28      	ldr	r3, [pc, #160]	; (8010b54 <prvInsertBlockIntoFreeList+0xac>)
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e002      	b.n	8010abc <prvInsertBlockIntoFreeList+0x14>
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d8f7      	bhi.n	8010ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	68ba      	ldr	r2, [r7, #8]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d108      	bne.n	8010aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	685a      	ldr	r2, [r3, #4]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	441a      	add	r2, r3
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	68ba      	ldr	r2, [r7, #8]
 8010af4:	441a      	add	r2, r3
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d118      	bne.n	8010b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	4b15      	ldr	r3, [pc, #84]	; (8010b58 <prvInsertBlockIntoFreeList+0xb0>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d00d      	beq.n	8010b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	685a      	ldr	r2, [r3, #4]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	441a      	add	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	601a      	str	r2, [r3, #0]
 8010b24:	e008      	b.n	8010b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b26:	4b0c      	ldr	r3, [pc, #48]	; (8010b58 <prvInsertBlockIntoFreeList+0xb0>)
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	e003      	b.n	8010b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d002      	beq.n	8010b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b46:	bf00      	nop
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	20010a10 	.word	0x20010a10
 8010b58:	20010a18 	.word	0x20010a18

08010b5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010b60:	2200      	movs	r2, #0
 8010b62:	4912      	ldr	r1, [pc, #72]	; (8010bac <MX_USB_DEVICE_Init+0x50>)
 8010b64:	4812      	ldr	r0, [pc, #72]	; (8010bb0 <MX_USB_DEVICE_Init+0x54>)
 8010b66:	f7fb fee1 	bl	800c92c <USBD_Init>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d001      	beq.n	8010b74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010b70:	f7f2 fe6f 	bl	8003852 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010b74:	490f      	ldr	r1, [pc, #60]	; (8010bb4 <MX_USB_DEVICE_Init+0x58>)
 8010b76:	480e      	ldr	r0, [pc, #56]	; (8010bb0 <MX_USB_DEVICE_Init+0x54>)
 8010b78:	f7fb ff08 	bl	800c98c <USBD_RegisterClass>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b82:	f7f2 fe66 	bl	8003852 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010b86:	490c      	ldr	r1, [pc, #48]	; (8010bb8 <MX_USB_DEVICE_Init+0x5c>)
 8010b88:	4809      	ldr	r0, [pc, #36]	; (8010bb0 <MX_USB_DEVICE_Init+0x54>)
 8010b8a:	f7fb fe3f 	bl	800c80c <USBD_CDC_RegisterInterface>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d001      	beq.n	8010b98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b94:	f7f2 fe5d 	bl	8003852 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b98:	4805      	ldr	r0, [pc, #20]	; (8010bb0 <MX_USB_DEVICE_Init+0x54>)
 8010b9a:	f7fb ff2d 	bl	800c9f8 <USBD_Start>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d001      	beq.n	8010ba8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010ba4:	f7f2 fe55 	bl	8003852 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010ba8:	bf00      	nop
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	200000b4 	.word	0x200000b4
 8010bb0:	20010a28 	.word	0x20010a28
 8010bb4:	2000001c 	.word	0x2000001c
 8010bb8:	200000a0 	.word	0x200000a0

08010bbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	4905      	ldr	r1, [pc, #20]	; (8010bd8 <CDC_Init_FS+0x1c>)
 8010bc4:	4805      	ldr	r0, [pc, #20]	; (8010bdc <CDC_Init_FS+0x20>)
 8010bc6:	f7fb fe3b 	bl	800c840 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010bca:	4905      	ldr	r1, [pc, #20]	; (8010be0 <CDC_Init_FS+0x24>)
 8010bcc:	4803      	ldr	r0, [pc, #12]	; (8010bdc <CDC_Init_FS+0x20>)
 8010bce:	f7fb fe59 	bl	800c884 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010bd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	20011504 	.word	0x20011504
 8010bdc:	20010a28 	.word	0x20010a28
 8010be0:	20010d04 	.word	0x20010d04

08010be4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010be4:	b480      	push	{r7}
 8010be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010be8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	6039      	str	r1, [r7, #0]
 8010bfe:	71fb      	strb	r3, [r7, #7]
 8010c00:	4613      	mov	r3, r2
 8010c02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010c04:	79fb      	ldrb	r3, [r7, #7]
 8010c06:	2b23      	cmp	r3, #35	; 0x23
 8010c08:	d84a      	bhi.n	8010ca0 <CDC_Control_FS+0xac>
 8010c0a:	a201      	add	r2, pc, #4	; (adr r2, 8010c10 <CDC_Control_FS+0x1c>)
 8010c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c10:	08010ca1 	.word	0x08010ca1
 8010c14:	08010ca1 	.word	0x08010ca1
 8010c18:	08010ca1 	.word	0x08010ca1
 8010c1c:	08010ca1 	.word	0x08010ca1
 8010c20:	08010ca1 	.word	0x08010ca1
 8010c24:	08010ca1 	.word	0x08010ca1
 8010c28:	08010ca1 	.word	0x08010ca1
 8010c2c:	08010ca1 	.word	0x08010ca1
 8010c30:	08010ca1 	.word	0x08010ca1
 8010c34:	08010ca1 	.word	0x08010ca1
 8010c38:	08010ca1 	.word	0x08010ca1
 8010c3c:	08010ca1 	.word	0x08010ca1
 8010c40:	08010ca1 	.word	0x08010ca1
 8010c44:	08010ca1 	.word	0x08010ca1
 8010c48:	08010ca1 	.word	0x08010ca1
 8010c4c:	08010ca1 	.word	0x08010ca1
 8010c50:	08010ca1 	.word	0x08010ca1
 8010c54:	08010ca1 	.word	0x08010ca1
 8010c58:	08010ca1 	.word	0x08010ca1
 8010c5c:	08010ca1 	.word	0x08010ca1
 8010c60:	08010ca1 	.word	0x08010ca1
 8010c64:	08010ca1 	.word	0x08010ca1
 8010c68:	08010ca1 	.word	0x08010ca1
 8010c6c:	08010ca1 	.word	0x08010ca1
 8010c70:	08010ca1 	.word	0x08010ca1
 8010c74:	08010ca1 	.word	0x08010ca1
 8010c78:	08010ca1 	.word	0x08010ca1
 8010c7c:	08010ca1 	.word	0x08010ca1
 8010c80:	08010ca1 	.word	0x08010ca1
 8010c84:	08010ca1 	.word	0x08010ca1
 8010c88:	08010ca1 	.word	0x08010ca1
 8010c8c:	08010ca1 	.word	0x08010ca1
 8010c90:	08010ca1 	.word	0x08010ca1
 8010c94:	08010ca1 	.word	0x08010ca1
 8010c98:	08010ca1 	.word	0x08010ca1
 8010c9c:	08010ca1 	.word	0x08010ca1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010ca0:	bf00      	nop
  }

  return (USBD_OK);
 8010ca2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010cba:	6879      	ldr	r1, [r7, #4]
 8010cbc:	4805      	ldr	r0, [pc, #20]	; (8010cd4 <CDC_Receive_FS+0x24>)
 8010cbe:	f7fb fde1 	bl	800c884 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010cc2:	4804      	ldr	r0, [pc, #16]	; (8010cd4 <CDC_Receive_FS+0x24>)
 8010cc4:	f7fb fdfc 	bl	800c8c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010cc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20010a28 	.word	0x20010a28

08010cd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b087      	sub	sp, #28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	371c      	adds	r7, #28
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
	...

08010cfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	6039      	str	r1, [r7, #0]
 8010d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	2212      	movs	r2, #18
 8010d0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010d0e:	4b03      	ldr	r3, [pc, #12]	; (8010d1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	370c      	adds	r7, #12
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr
 8010d1c:	200000d4 	.word	0x200000d4

08010d20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	4603      	mov	r3, r0
 8010d28:	6039      	str	r1, [r7, #0]
 8010d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d32:	4b03      	ldr	r3, [pc, #12]	; (8010d40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	200000f4 	.word	0x200000f4

08010d44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	6039      	str	r1, [r7, #0]
 8010d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d105      	bne.n	8010d62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d56:	683a      	ldr	r2, [r7, #0]
 8010d58:	4907      	ldr	r1, [pc, #28]	; (8010d78 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d5a:	4808      	ldr	r0, [pc, #32]	; (8010d7c <USBD_FS_ProductStrDescriptor+0x38>)
 8010d5c:	f7fd f822 	bl	800dda4 <USBD_GetString>
 8010d60:	e004      	b.n	8010d6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	4904      	ldr	r1, [pc, #16]	; (8010d78 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d66:	4805      	ldr	r0, [pc, #20]	; (8010d7c <USBD_FS_ProductStrDescriptor+0x38>)
 8010d68:	f7fd f81c 	bl	800dda4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d6c:	4b02      	ldr	r3, [pc, #8]	; (8010d78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3708      	adds	r7, #8
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	20011d04 	.word	0x20011d04
 8010d7c:	080246ec 	.word	0x080246ec

08010d80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	4603      	mov	r3, r0
 8010d88:	6039      	str	r1, [r7, #0]
 8010d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	4904      	ldr	r1, [pc, #16]	; (8010da0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010d90:	4804      	ldr	r0, [pc, #16]	; (8010da4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010d92:	f7fd f807 	bl	800dda4 <USBD_GetString>
  return USBD_StrDesc;
 8010d96:	4b02      	ldr	r3, [pc, #8]	; (8010da0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	20011d04 	.word	0x20011d04
 8010da4:	08024704 	.word	0x08024704

08010da8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	4603      	mov	r3, r0
 8010db0:	6039      	str	r1, [r7, #0]
 8010db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	221a      	movs	r2, #26
 8010db8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010dba:	f000 f855 	bl	8010e68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010dbe:	4b02      	ldr	r3, [pc, #8]	; (8010dc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	200000f8 	.word	0x200000f8

08010dcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	6039      	str	r1, [r7, #0]
 8010dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d105      	bne.n	8010dea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dde:	683a      	ldr	r2, [r7, #0]
 8010de0:	4907      	ldr	r1, [pc, #28]	; (8010e00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010de2:	4808      	ldr	r0, [pc, #32]	; (8010e04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010de4:	f7fc ffde 	bl	800dda4 <USBD_GetString>
 8010de8:	e004      	b.n	8010df4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dea:	683a      	ldr	r2, [r7, #0]
 8010dec:	4904      	ldr	r1, [pc, #16]	; (8010e00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dee:	4805      	ldr	r0, [pc, #20]	; (8010e04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010df0:	f7fc ffd8 	bl	800dda4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010df4:	4b02      	ldr	r3, [pc, #8]	; (8010e00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	20011d04 	.word	0x20011d04
 8010e04:	08024718 	.word	0x08024718

08010e08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4603      	mov	r3, r0
 8010e10:	6039      	str	r1, [r7, #0]
 8010e12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e14:	79fb      	ldrb	r3, [r7, #7]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d105      	bne.n	8010e26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	4907      	ldr	r1, [pc, #28]	; (8010e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e1e:	4808      	ldr	r0, [pc, #32]	; (8010e40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e20:	f7fc ffc0 	bl	800dda4 <USBD_GetString>
 8010e24:	e004      	b.n	8010e30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e26:	683a      	ldr	r2, [r7, #0]
 8010e28:	4904      	ldr	r1, [pc, #16]	; (8010e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e2a:	4805      	ldr	r0, [pc, #20]	; (8010e40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e2c:	f7fc ffba 	bl	800dda4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e30:	4b02      	ldr	r3, [pc, #8]	; (8010e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	20011d04 	.word	0x20011d04
 8010e40:	08024724 	.word	0x08024724

08010e44 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	6039      	str	r1, [r7, #0]
 8010e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	220c      	movs	r2, #12
 8010e54:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010e56:	4b03      	ldr	r3, [pc, #12]	; (8010e64 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	200000e8 	.word	0x200000e8

08010e68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e6e:	4b0f      	ldr	r3, [pc, #60]	; (8010eac <Get_SerialNum+0x44>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e74:	4b0e      	ldr	r3, [pc, #56]	; (8010eb0 <Get_SerialNum+0x48>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010e7a:	4b0e      	ldr	r3, [pc, #56]	; (8010eb4 <Get_SerialNum+0x4c>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4413      	add	r3, r2
 8010e86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d009      	beq.n	8010ea2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010e8e:	2208      	movs	r2, #8
 8010e90:	4909      	ldr	r1, [pc, #36]	; (8010eb8 <Get_SerialNum+0x50>)
 8010e92:	68f8      	ldr	r0, [r7, #12]
 8010e94:	f000 f814 	bl	8010ec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010e98:	2204      	movs	r2, #4
 8010e9a:	4908      	ldr	r1, [pc, #32]	; (8010ebc <Get_SerialNum+0x54>)
 8010e9c:	68b8      	ldr	r0, [r7, #8]
 8010e9e:	f000 f80f 	bl	8010ec0 <IntToUnicode>
  }
}
 8010ea2:	bf00      	nop
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	1ff0f420 	.word	0x1ff0f420
 8010eb0:	1ff0f424 	.word	0x1ff0f424
 8010eb4:	1ff0f428 	.word	0x1ff0f428
 8010eb8:	200000fa 	.word	0x200000fa
 8010ebc:	2000010a 	.word	0x2000010a

08010ec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b087      	sub	sp, #28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	75fb      	strb	r3, [r7, #23]
 8010ed6:	e027      	b.n	8010f28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	0f1b      	lsrs	r3, r3, #28
 8010edc:	2b09      	cmp	r3, #9
 8010ede:	d80b      	bhi.n	8010ef8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	0f1b      	lsrs	r3, r3, #28
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	7dfb      	ldrb	r3, [r7, #23]
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	4619      	mov	r1, r3
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	440b      	add	r3, r1
 8010ef0:	3230      	adds	r2, #48	; 0x30
 8010ef2:	b2d2      	uxtb	r2, r2
 8010ef4:	701a      	strb	r2, [r3, #0]
 8010ef6:	e00a      	b.n	8010f0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	0f1b      	lsrs	r3, r3, #28
 8010efc:	b2da      	uxtb	r2, r3
 8010efe:	7dfb      	ldrb	r3, [r7, #23]
 8010f00:	005b      	lsls	r3, r3, #1
 8010f02:	4619      	mov	r1, r3
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	440b      	add	r3, r1
 8010f08:	3237      	adds	r2, #55	; 0x37
 8010f0a:	b2d2      	uxtb	r2, r2
 8010f0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	011b      	lsls	r3, r3, #4
 8010f12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010f14:	7dfb      	ldrb	r3, [r7, #23]
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	3301      	adds	r3, #1
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	2200      	movs	r2, #0
 8010f20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
 8010f24:	3301      	adds	r3, #1
 8010f26:	75fb      	strb	r3, [r7, #23]
 8010f28:	7dfa      	ldrb	r2, [r7, #23]
 8010f2a:	79fb      	ldrb	r3, [r7, #7]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d3d3      	bcc.n	8010ed8 <IntToUnicode+0x18>
  }
}
 8010f30:	bf00      	nop
 8010f32:	bf00      	nop
 8010f34:	371c      	adds	r7, #28
 8010f36:	46bd      	mov	sp, r7
 8010f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3c:	4770      	bx	lr
	...

08010f40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b0ae      	sub	sp, #184	; 0xb8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	601a      	str	r2, [r3, #0]
 8010f50:	605a      	str	r2, [r3, #4]
 8010f52:	609a      	str	r2, [r3, #8]
 8010f54:	60da      	str	r2, [r3, #12]
 8010f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010f58:	f107 0314 	add.w	r3, r7, #20
 8010f5c:	2290      	movs	r2, #144	; 0x90
 8010f5e:	2100      	movs	r1, #0
 8010f60:	4618      	mov	r0, r3
 8010f62:	f010 f82b 	bl	8020fbc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f6e:	d151      	bne.n	8011014 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010f74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010f76:	2300      	movs	r3, #0
 8010f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010f7c:	f107 0314 	add.w	r3, r7, #20
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7f6 ff97 	bl	8007eb4 <HAL_RCCEx_PeriphCLKConfig>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010f8c:	f7f2 fc61 	bl	8003852 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f90:	4b22      	ldr	r3, [pc, #136]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f94:	4a21      	ldr	r2, [pc, #132]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010f96:	f043 0301 	orr.w	r3, r3, #1
 8010f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8010f9c:	4b1f      	ldr	r3, [pc, #124]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fa0:	f003 0301 	and.w	r3, r3, #1
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010fa8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fb0:	2302      	movs	r3, #2
 8010fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010fc2:	230a      	movs	r3, #10
 8010fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4814      	ldr	r0, [pc, #80]	; (8011020 <HAL_PCD_MspInit+0xe0>)
 8010fd0:	f7f4 fd82 	bl	8005ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010fd4:	4b11      	ldr	r3, [pc, #68]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd8:	4a10      	ldr	r2, [pc, #64]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fde:	6353      	str	r3, [r2, #52]	; 0x34
 8010fe0:	4b0e      	ldr	r3, [pc, #56]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fe8:	60fb      	str	r3, [r7, #12]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	4b0b      	ldr	r3, [pc, #44]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ff0:	4a0a      	ldr	r2, [pc, #40]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8010ff8:	4b08      	ldr	r3, [pc, #32]	; (801101c <HAL_PCD_MspInit+0xdc>)
 8010ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011000:	60bb      	str	r3, [r7, #8]
 8011002:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011004:	2200      	movs	r2, #0
 8011006:	2105      	movs	r1, #5
 8011008:	2043      	movs	r0, #67	; 0x43
 801100a:	f7f4 f925 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801100e:	2043      	movs	r0, #67	; 0x43
 8011010:	f7f4 f93e 	bl	8005290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011014:	bf00      	nop
 8011016:	37b8      	adds	r7, #184	; 0xb8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	40023800 	.word	0x40023800
 8011020:	40020000 	.word	0x40020000

08011024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011038:	4619      	mov	r1, r3
 801103a:	4610      	mov	r0, r2
 801103c:	f7fb fd29 	bl	800ca92 <USBD_LL_SetupStage>
}
 8011040:	bf00      	nop
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	460b      	mov	r3, r1
 8011052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801105a:	78fa      	ldrb	r2, [r7, #3]
 801105c:	6879      	ldr	r1, [r7, #4]
 801105e:	4613      	mov	r3, r2
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4413      	add	r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	440b      	add	r3, r1
 8011068:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	78fb      	ldrb	r3, [r7, #3]
 8011070:	4619      	mov	r1, r3
 8011072:	f7fb fd63 	bl	800cb3c <USBD_LL_DataOutStage>
}
 8011076:	bf00      	nop
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801107e:	b580      	push	{r7, lr}
 8011080:	b082      	sub	sp, #8
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
 8011086:	460b      	mov	r3, r1
 8011088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011090:	78fa      	ldrb	r2, [r7, #3]
 8011092:	6879      	ldr	r1, [r7, #4]
 8011094:	4613      	mov	r3, r2
 8011096:	00db      	lsls	r3, r3, #3
 8011098:	4413      	add	r3, r2
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	440b      	add	r3, r1
 801109e:	334c      	adds	r3, #76	; 0x4c
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	78fb      	ldrb	r3, [r7, #3]
 80110a4:	4619      	mov	r1, r3
 80110a6:	f7fb fdfc 	bl	800cca2 <USBD_LL_DataInStage>
}
 80110aa:	bf00      	nop
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b082      	sub	sp, #8
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fb ff30 	bl	800cf26 <USBD_LL_SOF>
}
 80110c6:	bf00      	nop
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b084      	sub	sp, #16
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80110d6:	2301      	movs	r3, #1
 80110d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d102      	bne.n	80110e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80110e2:	2300      	movs	r3, #0
 80110e4:	73fb      	strb	r3, [r7, #15]
 80110e6:	e008      	b.n	80110fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	d102      	bne.n	80110f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80110f0:	2301      	movs	r3, #1
 80110f2:	73fb      	strb	r3, [r7, #15]
 80110f4:	e001      	b.n	80110fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80110f6:	f7f2 fbac 	bl	8003852 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011100:	7bfa      	ldrb	r2, [r7, #15]
 8011102:	4611      	mov	r1, r2
 8011104:	4618      	mov	r0, r3
 8011106:	f7fb fed0 	bl	800ceaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011110:	4618      	mov	r0, r3
 8011112:	f7fb fe78 	bl	800ce06 <USBD_LL_Reset>
}
 8011116:	bf00      	nop
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
	...

08011120 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801112e:	4618      	mov	r0, r3
 8011130:	f7fb fecb 	bl	800ceca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	6812      	ldr	r2, [r2, #0]
 8011142:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011146:	f043 0301 	orr.w	r3, r3, #1
 801114a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6a1b      	ldr	r3, [r3, #32]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d005      	beq.n	8011160 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011154:	4b04      	ldr	r3, [pc, #16]	; (8011168 <HAL_PCD_SuspendCallback+0x48>)
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	4a03      	ldr	r2, [pc, #12]	; (8011168 <HAL_PCD_SuspendCallback+0x48>)
 801115a:	f043 0306 	orr.w	r3, r3, #6
 801115e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011160:	bf00      	nop
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	e000ed00 	.word	0xe000ed00

0801116c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801117a:	4618      	mov	r0, r3
 801117c:	f7fb febb 	bl	800cef6 <USBD_LL_Resume>
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	460b      	mov	r3, r1
 8011192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801119a:	78fa      	ldrb	r2, [r7, #3]
 801119c:	4611      	mov	r1, r2
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fb ff13 	bl	800cfca <USBD_LL_IsoOUTIncomplete>
}
 80111a4:	bf00      	nop
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80111be:	78fa      	ldrb	r2, [r7, #3]
 80111c0:	4611      	mov	r1, r2
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fb fecf 	bl	800cf66 <USBD_LL_IsoINIncomplete>
}
 80111c8:	bf00      	nop
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fb ff25 	bl	800d02e <USBD_LL_DevConnected>
}
 80111e4:	bf00      	nop
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fb ff22 	bl	800d044 <USBD_LL_DevDisconnected>
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d13c      	bne.n	8011292 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011218:	4a20      	ldr	r2, [pc, #128]	; (801129c <USBD_LL_Init+0x94>)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	4a1e      	ldr	r2, [pc, #120]	; (801129c <USBD_LL_Init+0x94>)
 8011224:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011228:	4b1c      	ldr	r3, [pc, #112]	; (801129c <USBD_LL_Init+0x94>)
 801122a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801122e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011230:	4b1a      	ldr	r3, [pc, #104]	; (801129c <USBD_LL_Init+0x94>)
 8011232:	2206      	movs	r2, #6
 8011234:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011236:	4b19      	ldr	r3, [pc, #100]	; (801129c <USBD_LL_Init+0x94>)
 8011238:	2202      	movs	r2, #2
 801123a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801123c:	4b17      	ldr	r3, [pc, #92]	; (801129c <USBD_LL_Init+0x94>)
 801123e:	2200      	movs	r2, #0
 8011240:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011242:	4b16      	ldr	r3, [pc, #88]	; (801129c <USBD_LL_Init+0x94>)
 8011244:	2202      	movs	r2, #2
 8011246:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011248:	4b14      	ldr	r3, [pc, #80]	; (801129c <USBD_LL_Init+0x94>)
 801124a:	2200      	movs	r2, #0
 801124c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801124e:	4b13      	ldr	r3, [pc, #76]	; (801129c <USBD_LL_Init+0x94>)
 8011250:	2200      	movs	r2, #0
 8011252:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011254:	4b11      	ldr	r3, [pc, #68]	; (801129c <USBD_LL_Init+0x94>)
 8011256:	2200      	movs	r2, #0
 8011258:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801125a:	4b10      	ldr	r3, [pc, #64]	; (801129c <USBD_LL_Init+0x94>)
 801125c:	2200      	movs	r2, #0
 801125e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011260:	4b0e      	ldr	r3, [pc, #56]	; (801129c <USBD_LL_Init+0x94>)
 8011262:	2200      	movs	r2, #0
 8011264:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011266:	480d      	ldr	r0, [pc, #52]	; (801129c <USBD_LL_Init+0x94>)
 8011268:	f7f4 fe15 	bl	8005e96 <HAL_PCD_Init>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011272:	f7f2 faee 	bl	8003852 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011276:	2180      	movs	r1, #128	; 0x80
 8011278:	4808      	ldr	r0, [pc, #32]	; (801129c <USBD_LL_Init+0x94>)
 801127a:	f7f6 f890 	bl	800739e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801127e:	2240      	movs	r2, #64	; 0x40
 8011280:	2100      	movs	r1, #0
 8011282:	4806      	ldr	r0, [pc, #24]	; (801129c <USBD_LL_Init+0x94>)
 8011284:	f7f6 f844 	bl	8007310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011288:	2280      	movs	r2, #128	; 0x80
 801128a:	2101      	movs	r1, #1
 801128c:	4803      	ldr	r0, [pc, #12]	; (801129c <USBD_LL_Init+0x94>)
 801128e:	f7f6 f83f 	bl	8007310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	20011f04 	.word	0x20011f04

080112a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112a8:	2300      	movs	r3, #0
 80112aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7f4 ff11 	bl	80060de <HAL_PCD_Start>
 80112bc:	4603      	mov	r3, r0
 80112be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112c0:	7bfb      	ldrb	r3, [r7, #15]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f000 f97e 	bl	80115c4 <USBD_Get_USB_Status>
 80112c8:	4603      	mov	r3, r0
 80112ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b084      	sub	sp, #16
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
 80112de:	4608      	mov	r0, r1
 80112e0:	4611      	mov	r1, r2
 80112e2:	461a      	mov	r2, r3
 80112e4:	4603      	mov	r3, r0
 80112e6:	70fb      	strb	r3, [r7, #3]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70bb      	strb	r3, [r7, #2]
 80112ec:	4613      	mov	r3, r2
 80112ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112f4:	2300      	movs	r3, #0
 80112f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80112fe:	78bb      	ldrb	r3, [r7, #2]
 8011300:	883a      	ldrh	r2, [r7, #0]
 8011302:	78f9      	ldrb	r1, [r7, #3]
 8011304:	f7f5 fbfe 	bl	8006b04 <HAL_PCD_EP_Open>
 8011308:	4603      	mov	r3, r0
 801130a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801130c:	7bfb      	ldrb	r3, [r7, #15]
 801130e:	4618      	mov	r0, r3
 8011310:	f000 f958 	bl	80115c4 <USBD_Get_USB_Status>
 8011314:	4603      	mov	r3, r0
 8011316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011318:	7bbb      	ldrb	r3, [r7, #14]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}

08011322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011322:	b580      	push	{r7, lr}
 8011324:	b084      	sub	sp, #16
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
 801132a:	460b      	mov	r3, r1
 801132c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801132e:	2300      	movs	r3, #0
 8011330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011332:	2300      	movs	r3, #0
 8011334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801133c:	78fa      	ldrb	r2, [r7, #3]
 801133e:	4611      	mov	r1, r2
 8011340:	4618      	mov	r0, r3
 8011342:	f7f5 fc47 	bl	8006bd4 <HAL_PCD_EP_Close>
 8011346:	4603      	mov	r3, r0
 8011348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801134a:	7bfb      	ldrb	r3, [r7, #15]
 801134c:	4618      	mov	r0, r3
 801134e:	f000 f939 	bl	80115c4 <USBD_Get_USB_Status>
 8011352:	4603      	mov	r3, r0
 8011354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011356:	7bbb      	ldrb	r3, [r7, #14]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	460b      	mov	r3, r1
 801136a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801136c:	2300      	movs	r3, #0
 801136e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011370:	2300      	movs	r3, #0
 8011372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801137a:	78fa      	ldrb	r2, [r7, #3]
 801137c:	4611      	mov	r1, r2
 801137e:	4618      	mov	r0, r3
 8011380:	f7f5 fd1f 	bl	8006dc2 <HAL_PCD_EP_SetStall>
 8011384:	4603      	mov	r3, r0
 8011386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011388:	7bfb      	ldrb	r3, [r7, #15]
 801138a:	4618      	mov	r0, r3
 801138c:	f000 f91a 	bl	80115c4 <USBD_Get_USB_Status>
 8011390:	4603      	mov	r3, r0
 8011392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011394:	7bbb      	ldrb	r3, [r7, #14]
}
 8011396:	4618      	mov	r0, r3
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b084      	sub	sp, #16
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
 80113a6:	460b      	mov	r3, r1
 80113a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113aa:	2300      	movs	r3, #0
 80113ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113b8:	78fa      	ldrb	r2, [r7, #3]
 80113ba:	4611      	mov	r1, r2
 80113bc:	4618      	mov	r0, r3
 80113be:	f7f5 fd64 	bl	8006e8a <HAL_PCD_EP_ClrStall>
 80113c2:	4603      	mov	r3, r0
 80113c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f000 f8fb 	bl	80115c4 <USBD_Get_USB_Status>
 80113ce:	4603      	mov	r3, r0
 80113d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3710      	adds	r7, #16
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113dc:	b480      	push	{r7}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	da0b      	bge.n	8011410 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113f8:	78fb      	ldrb	r3, [r7, #3]
 80113fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113fe:	68f9      	ldr	r1, [r7, #12]
 8011400:	4613      	mov	r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	4413      	add	r3, r2
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	440b      	add	r3, r1
 801140a:	333e      	adds	r3, #62	; 0x3e
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	e00b      	b.n	8011428 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011410:	78fb      	ldrb	r3, [r7, #3]
 8011412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011416:	68f9      	ldr	r1, [r7, #12]
 8011418:	4613      	mov	r3, r2
 801141a:	00db      	lsls	r3, r3, #3
 801141c:	4413      	add	r3, r2
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	440b      	add	r3, r1
 8011422:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011426:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011428:	4618      	mov	r0, r3
 801142a:	3714      	adds	r7, #20
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	460b      	mov	r3, r1
 801143e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011440:	2300      	movs	r3, #0
 8011442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011444:	2300      	movs	r3, #0
 8011446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801144e:	78fa      	ldrb	r2, [r7, #3]
 8011450:	4611      	mov	r1, r2
 8011452:	4618      	mov	r0, r3
 8011454:	f7f5 fb31 	bl	8006aba <HAL_PCD_SetAddress>
 8011458:	4603      	mov	r3, r0
 801145a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801145c:	7bfb      	ldrb	r3, [r7, #15]
 801145e:	4618      	mov	r0, r3
 8011460:	f000 f8b0 	bl	80115c4 <USBD_Get_USB_Status>
 8011464:	4603      	mov	r3, r0
 8011466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011468:	7bbb      	ldrb	r3, [r7, #14]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b086      	sub	sp, #24
 8011476:	af00      	add	r7, sp, #0
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	607a      	str	r2, [r7, #4]
 801147c:	603b      	str	r3, [r7, #0]
 801147e:	460b      	mov	r3, r1
 8011480:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011486:	2300      	movs	r3, #0
 8011488:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011490:	7af9      	ldrb	r1, [r7, #11]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	f7f5 fc4a 	bl	8006d2e <HAL_PCD_EP_Transmit>
 801149a:	4603      	mov	r3, r0
 801149c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801149e:	7dfb      	ldrb	r3, [r7, #23]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f000 f88f 	bl	80115c4 <USBD_Get_USB_Status>
 80114a6:	4603      	mov	r3, r0
 80114a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3718      	adds	r7, #24
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	607a      	str	r2, [r7, #4]
 80114be:	603b      	str	r3, [r7, #0]
 80114c0:	460b      	mov	r3, r1
 80114c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114c4:	2300      	movs	r3, #0
 80114c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80114d2:	7af9      	ldrb	r1, [r7, #11]
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	f7f5 fbc6 	bl	8006c68 <HAL_PCD_EP_Receive>
 80114dc:	4603      	mov	r3, r0
 80114de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114e0:	7dfb      	ldrb	r3, [r7, #23]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f000 f86e 	bl	80115c4 <USBD_Get_USB_Status>
 80114e8:	4603      	mov	r3, r0
 80114ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3718      	adds	r7, #24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b082      	sub	sp, #8
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
 80114fe:	460b      	mov	r3, r1
 8011500:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011508:	78fa      	ldrb	r2, [r7, #3]
 801150a:	4611      	mov	r1, r2
 801150c:	4618      	mov	r0, r3
 801150e:	f7f5 fbf6 	bl	8006cfe <HAL_PCD_EP_GetRxCount>
 8011512:	4603      	mov	r3, r0
}
 8011514:	4618      	mov	r0, r3
 8011516:	3708      	adds	r7, #8
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011528:	78fb      	ldrb	r3, [r7, #3]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d002      	beq.n	8011534 <HAL_PCDEx_LPM_Callback+0x18>
 801152e:	2b01      	cmp	r3, #1
 8011530:	d01f      	beq.n	8011572 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011532:	e03b      	b.n	80115ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a1b      	ldr	r3, [r3, #32]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d007      	beq.n	801154c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801153c:	f000 f83c 	bl	80115b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011540:	4b1c      	ldr	r3, [pc, #112]	; (80115b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	4a1b      	ldr	r2, [pc, #108]	; (80115b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011546:	f023 0306 	bic.w	r3, r3, #6
 801154a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	6812      	ldr	r2, [r2, #0]
 801155a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801155e:	f023 0301 	bic.w	r3, r3, #1
 8011562:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801156a:	4618      	mov	r0, r3
 801156c:	f7fb fcc3 	bl	800cef6 <USBD_LL_Resume>
    break;
 8011570:	e01c      	b.n	80115ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	6812      	ldr	r2, [r2, #0]
 8011580:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011584:	f043 0301 	orr.w	r3, r3, #1
 8011588:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011590:	4618      	mov	r0, r3
 8011592:	f7fb fc9a 	bl	800ceca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a1b      	ldr	r3, [r3, #32]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d005      	beq.n	80115aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801159e:	4b05      	ldr	r3, [pc, #20]	; (80115b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	4a04      	ldr	r2, [pc, #16]	; (80115b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80115a4:	f043 0306 	orr.w	r3, r3, #6
 80115a8:	6113      	str	r3, [r2, #16]
    break;
 80115aa:	bf00      	nop
}
 80115ac:	bf00      	nop
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	e000ed00 	.word	0xe000ed00

080115b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80115bc:	f7f2 f8ca 	bl	8003754 <SystemClock_Config>
}
 80115c0:	bf00      	nop
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	4603      	mov	r3, r0
 80115cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80115d2:	79fb      	ldrb	r3, [r7, #7]
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	d817      	bhi.n	8011608 <USBD_Get_USB_Status+0x44>
 80115d8:	a201      	add	r2, pc, #4	; (adr r2, 80115e0 <USBD_Get_USB_Status+0x1c>)
 80115da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115de:	bf00      	nop
 80115e0:	080115f1 	.word	0x080115f1
 80115e4:	080115f7 	.word	0x080115f7
 80115e8:	080115fd 	.word	0x080115fd
 80115ec:	08011603 	.word	0x08011603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80115f0:	2300      	movs	r3, #0
 80115f2:	73fb      	strb	r3, [r7, #15]
    break;
 80115f4:	e00b      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80115f6:	2303      	movs	r3, #3
 80115f8:	73fb      	strb	r3, [r7, #15]
    break;
 80115fa:	e008      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80115fc:	2301      	movs	r3, #1
 80115fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011600:	e005      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011602:	2303      	movs	r3, #3
 8011604:	73fb      	strb	r3, [r7, #15]
    break;
 8011606:	e002      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011608:	2303      	movs	r3, #3
 801160a:	73fb      	strb	r3, [r7, #15]
    break;
 801160c:	bf00      	nop
  }
  return usb_status;
 801160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011610:	4618      	mov	r0, r3
 8011612:	3714      	adds	r7, #20
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	b10a      	cbz	r2, 8011626 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8011622:	4803      	ldr	r0, [pc, #12]	; (8011630 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8011624:	4770      	bx	lr
 8011626:	4a03      	ldr	r2, [pc, #12]	; (8011634 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8011628:	4801      	ldr	r0, [pc, #4]	; (8011630 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801162a:	6812      	ldr	r2, [r2, #0]
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	4770      	bx	lr
 8011630:	2000011c 	.word	0x2000011c
 8011634:	200008f4 	.word	0x200008f4

08011638 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011638:	4b04      	ldr	r3, [pc, #16]	; (801164c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801163a:	4805      	ldr	r0, [pc, #20]	; (8011650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	4905      	ldr	r1, [pc, #20]	; (8011654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8011640:	4a05      	ldr	r2, [pc, #20]	; (8011658 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8011642:	6003      	str	r3, [r0, #0]
 8011644:	600b      	str	r3, [r1, #0]
 8011646:	6013      	str	r3, [r2, #0]
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	200008f4 	.word	0x200008f4
 8011650:	20000138 	.word	0x20000138
 8011654:	20000144 	.word	0x20000144
 8011658:	2000011c 	.word	0x2000011c

0801165c <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 801165c:	f006 b894 	b.w	8017788 <custom_test_msgs__srv__AddThreeInts_Request__init>

08011660 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8011660:	f006 b896 	b.w	8017790 <custom_test_msgs__srv__AddThreeInts_Request__fini>

08011664 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8011664:	f006 b896 	b.w	8017794 <custom_test_msgs__srv__AddThreeInts_Response__init>

08011668 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8011668:	f006 b898 	b.w	801779c <custom_test_msgs__srv__AddThreeInts_Response__fini>

0801166c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 801166c:	4b04      	ldr	r3, [pc, #16]	; (8011680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	b10a      	cbz	r2, 8011676 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8011672:	4803      	ldr	r0, [pc, #12]	; (8011680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8011674:	4770      	bx	lr
 8011676:	4a03      	ldr	r2, [pc, #12]	; (8011684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8011678:	4801      	ldr	r0, [pc, #4]	; (8011680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801167a:	6812      	ldr	r2, [r2, #0]
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	4770      	bx	lr
 8011680:	20000204 	.word	0x20000204
 8011684:	200008f8 	.word	0x200008f8

08011688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8011688:	4b04      	ldr	r3, [pc, #16]	; (801169c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	b10a      	cbz	r2, 8011692 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 801168e:	4803      	ldr	r0, [pc, #12]	; (801169c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011690:	4770      	bx	lr
 8011692:	4a03      	ldr	r2, [pc, #12]	; (80116a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8011694:	4801      	ldr	r0, [pc, #4]	; (801169c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011696:	6812      	ldr	r2, [r2, #0]
 8011698:	601a      	str	r2, [r3, #0]
 801169a:	4770      	bx	lr
 801169c:	2000024c 	.word	0x2000024c
 80116a0:	200008f8 	.word	0x200008f8

080116a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80116a4:	4b13      	ldr	r3, [pc, #76]	; (80116f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	b132      	cbz	r2, 80116b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	689a      	ldr	r2, [r3, #8]
 80116ae:	b152      	cbz	r2, 80116c6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 80116b0:	68da      	ldr	r2, [r3, #12]
 80116b2:	b182      	cbz	r2, 80116d6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 80116b4:	480f      	ldr	r0, [pc, #60]	; (80116f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80116b6:	4770      	bx	lr
 80116b8:	4a0f      	ldr	r2, [pc, #60]	; (80116f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80116ba:	6812      	ldr	r2, [r2, #0]
 80116bc:	601a      	str	r2, [r3, #0]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	689a      	ldr	r2, [r3, #8]
 80116c2:	2a00      	cmp	r2, #0
 80116c4:	d1f4      	bne.n	80116b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 80116c6:	4a0d      	ldr	r2, [pc, #52]	; (80116fc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 80116c8:	6811      	ldr	r1, [r2, #0]
 80116ca:	b179      	cbz	r1, 80116ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 80116cc:	6852      	ldr	r2, [r2, #4]
 80116ce:	609a      	str	r2, [r3, #8]
 80116d0:	68da      	ldr	r2, [r3, #12]
 80116d2:	2a00      	cmp	r2, #0
 80116d4:	d1ee      	bne.n	80116b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 80116d6:	4a0a      	ldr	r2, [pc, #40]	; (8011700 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 80116d8:	6811      	ldr	r1, [r2, #0]
 80116da:	b119      	cbz	r1, 80116e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 80116dc:	6852      	ldr	r2, [r2, #4]
 80116de:	4805      	ldr	r0, [pc, #20]	; (80116f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80116e0:	60da      	str	r2, [r3, #12]
 80116e2:	4770      	bx	lr
 80116e4:	4904      	ldr	r1, [pc, #16]	; (80116f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80116e6:	6809      	ldr	r1, [r1, #0]
 80116e8:	6011      	str	r1, [r2, #0]
 80116ea:	e7f7      	b.n	80116dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 80116ec:	4902      	ldr	r1, [pc, #8]	; (80116f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80116ee:	6809      	ldr	r1, [r1, #0]
 80116f0:	6011      	str	r1, [r2, #0]
 80116f2:	e7eb      	b.n	80116cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 80116f4:	20000268 	.word	0x20000268
 80116f8:	200008f8 	.word	0x200008f8
 80116fc:	20000204 	.word	0x20000204
 8011700:	2000024c 	.word	0x2000024c

08011704 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011704:	4800      	ldr	r0, [pc, #0]	; (8011708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8011706:	4770      	bx	lr
 8011708:	20000290 	.word	0x20000290

0801170c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 801170c:	4800      	ldr	r0, [pc, #0]	; (8011710 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 801170e:	4770      	bx	lr
 8011710:	2000029c 	.word	0x2000029c

08011714 <_AddThreeInts_Response__max_serialized_size>:
 8011714:	2108      	movs	r1, #8
 8011716:	2000      	movs	r0, #0
 8011718:	b508      	push	{r3, lr}
 801171a:	f001 fee9 	bl	80134f0 <ucdr_alignment>
 801171e:	3008      	adds	r0, #8
 8011720:	bd08      	pop	{r3, pc}
 8011722:	bf00      	nop

08011724 <_AddThreeInts_Response__cdr_deserialize>:
 8011724:	b109      	cbz	r1, 801172a <_AddThreeInts_Response__cdr_deserialize+0x6>
 8011726:	f001 bc2f 	b.w	8012f88 <ucdr_deserialize_int64_t>
 801172a:	4608      	mov	r0, r1
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop

08011730 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8011730:	b1b8      	cbz	r0, 8011762 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8011732:	b538      	push	{r3, r4, r5, lr}
 8011734:	460d      	mov	r5, r1
 8011736:	2108      	movs	r1, #8
 8011738:	4628      	mov	r0, r5
 801173a:	f001 fed9 	bl	80134f0 <ucdr_alignment>
 801173e:	f105 0308 	add.w	r3, r5, #8
 8011742:	2108      	movs	r1, #8
 8011744:	f1c5 0508 	rsb	r5, r5, #8
 8011748:	181c      	adds	r4, r3, r0
 801174a:	4620      	mov	r0, r4
 801174c:	f001 fed0 	bl	80134f0 <ucdr_alignment>
 8011750:	2108      	movs	r1, #8
 8011752:	4408      	add	r0, r1
 8011754:	4404      	add	r4, r0
 8011756:	4620      	mov	r0, r4
 8011758:	f001 feca 	bl	80134f0 <ucdr_alignment>
 801175c:	4428      	add	r0, r5
 801175e:	4420      	add	r0, r4
 8011760:	bd38      	pop	{r3, r4, r5, pc}
 8011762:	4770      	bx	lr

08011764 <_AddThreeInts_Response__get_serialized_size>:
 8011764:	b130      	cbz	r0, 8011774 <_AddThreeInts_Response__get_serialized_size+0x10>
 8011766:	2108      	movs	r1, #8
 8011768:	2000      	movs	r0, #0
 801176a:	b508      	push	{r3, lr}
 801176c:	f001 fec0 	bl	80134f0 <ucdr_alignment>
 8011770:	3008      	adds	r0, #8
 8011772:	bd08      	pop	{r3, pc}
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop

08011778 <_AddThreeInts_Request__cdr_deserialize>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	460c      	mov	r4, r1
 801177c:	b171      	cbz	r1, 801179c <_AddThreeInts_Request__cdr_deserialize+0x24>
 801177e:	4605      	mov	r5, r0
 8011780:	f001 fc02 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011784:	f104 0108 	add.w	r1, r4, #8
 8011788:	4628      	mov	r0, r5
 801178a:	f001 fbfd 	bl	8012f88 <ucdr_deserialize_int64_t>
 801178e:	f104 0110 	add.w	r1, r4, #16
 8011792:	4628      	mov	r0, r5
 8011794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011798:	f001 bbf6 	b.w	8012f88 <ucdr_deserialize_int64_t>
 801179c:	4608      	mov	r0, r1
 801179e:	bd38      	pop	{r3, r4, r5, pc}

080117a0 <_AddThreeInts_Request__cdr_serialize>:
 80117a0:	b198      	cbz	r0, 80117ca <_AddThreeInts_Request__cdr_serialize+0x2a>
 80117a2:	b570      	push	{r4, r5, r6, lr}
 80117a4:	460d      	mov	r5, r1
 80117a6:	4604      	mov	r4, r0
 80117a8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80117ac:	4608      	mov	r0, r1
 80117ae:	f001 fb1b 	bl	8012de8 <ucdr_serialize_int64_t>
 80117b2:	4628      	mov	r0, r5
 80117b4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80117b8:	f001 fb16 	bl	8012de8 <ucdr_serialize_int64_t>
 80117bc:	4628      	mov	r0, r5
 80117be:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80117c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117c6:	f001 bb0f 	b.w	8012de8 <ucdr_serialize_int64_t>
 80117ca:	4770      	bx	lr

080117cc <_AddThreeInts_Response__cdr_serialize>:
 80117cc:	b120      	cbz	r0, 80117d8 <_AddThreeInts_Response__cdr_serialize+0xc>
 80117ce:	e9d0 2300 	ldrd	r2, r3, [r0]
 80117d2:	4608      	mov	r0, r1
 80117d4:	f001 bb08 	b.w	8012de8 <ucdr_serialize_int64_t>
 80117d8:	4770      	bx	lr
 80117da:	bf00      	nop

080117dc <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 80117dc:	b138      	cbz	r0, 80117ee <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 80117de:	b508      	push	{r3, lr}
 80117e0:	460b      	mov	r3, r1
 80117e2:	2108      	movs	r1, #8
 80117e4:	4618      	mov	r0, r3
 80117e6:	f001 fe83 	bl	80134f0 <ucdr_alignment>
 80117ea:	3008      	adds	r0, #8
 80117ec:	bd08      	pop	{r3, pc}
 80117ee:	4770      	bx	lr

080117f0 <_AddThreeInts_Request__get_serialized_size>:
 80117f0:	b190      	cbz	r0, 8011818 <_AddThreeInts_Request__get_serialized_size+0x28>
 80117f2:	2108      	movs	r1, #8
 80117f4:	2000      	movs	r0, #0
 80117f6:	b510      	push	{r4, lr}
 80117f8:	f001 fe7a 	bl	80134f0 <ucdr_alignment>
 80117fc:	2108      	movs	r1, #8
 80117fe:	1844      	adds	r4, r0, r1
 8011800:	4620      	mov	r0, r4
 8011802:	f001 fe75 	bl	80134f0 <ucdr_alignment>
 8011806:	2108      	movs	r1, #8
 8011808:	4408      	add	r0, r1
 801180a:	4404      	add	r4, r0
 801180c:	4620      	mov	r0, r4
 801180e:	f001 fe6f 	bl	80134f0 <ucdr_alignment>
 8011812:	3008      	adds	r0, #8
 8011814:	4420      	add	r0, r4
 8011816:	bd10      	pop	{r4, pc}
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop

0801181c <_AddThreeInts_Request__max_serialized_size>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	2108      	movs	r1, #8
 8011820:	2000      	movs	r0, #0
 8011822:	f001 fe65 	bl	80134f0 <ucdr_alignment>
 8011826:	2108      	movs	r1, #8
 8011828:	1845      	adds	r5, r0, r1
 801182a:	4628      	mov	r0, r5
 801182c:	f001 fe60 	bl	80134f0 <ucdr_alignment>
 8011830:	2108      	movs	r1, #8
 8011832:	1844      	adds	r4, r0, r1
 8011834:	442c      	add	r4, r5
 8011836:	4620      	mov	r0, r4
 8011838:	f001 fe5a 	bl	80134f0 <ucdr_alignment>
 801183c:	3008      	adds	r0, #8
 801183e:	4420      	add	r0, r4
 8011840:	bd38      	pop	{r3, r4, r5, pc}
 8011842:	bf00      	nop

08011844 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011844:	4800      	ldr	r0, [pc, #0]	; (8011848 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 8011846:	4770      	bx	lr
 8011848:	20000284 	.word	0x20000284

0801184c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 801184c:	4b04      	ldr	r3, [pc, #16]	; (8011860 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	b10a      	cbz	r2, 8011856 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 8011852:	4803      	ldr	r0, [pc, #12]	; (8011860 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011854:	4770      	bx	lr
 8011856:	4a03      	ldr	r2, [pc, #12]	; (8011864 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011858:	4801      	ldr	r0, [pc, #4]	; (8011860 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801185a:	6812      	ldr	r2, [r2, #0]
 801185c:	601a      	str	r2, [r3, #0]
 801185e:	4770      	bx	lr
 8011860:	200002e8 	.word	0x200002e8
 8011864:	200008f4 	.word	0x200008f4

08011868 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011868:	4a02      	ldr	r2, [pc, #8]	; (8011874 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 801186a:	4b03      	ldr	r3, [pc, #12]	; (8011878 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 801186c:	6812      	ldr	r2, [r2, #0]
 801186e:	601a      	str	r2, [r3, #0]
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	200008f4 	.word	0x200008f4
 8011878:	200002e8 	.word	0x200002e8

0801187c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 801187c:	4b04      	ldr	r3, [pc, #16]	; (8011890 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	b10a      	cbz	r2, 8011886 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8011882:	4803      	ldr	r0, [pc, #12]	; (8011890 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011884:	4770      	bx	lr
 8011886:	4a03      	ldr	r2, [pc, #12]	; (8011894 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011888:	4801      	ldr	r0, [pc, #4]	; (8011890 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801188a:	6812      	ldr	r2, [r2, #0]
 801188c:	601a      	str	r2, [r3, #0]
 801188e:	4770      	bx	lr
 8011890:	200002fc 	.word	0x200002fc
 8011894:	200008f4 	.word	0x200008f4

08011898 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011898:	4a02      	ldr	r2, [pc, #8]	; (80118a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 801189a:	4b03      	ldr	r3, [pc, #12]	; (80118a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 801189c:	6812      	ldr	r2, [r2, #0]
 801189e:	601a      	str	r2, [r3, #0]
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	200008f4 	.word	0x200008f4
 80118a8:	200002fc 	.word	0x200002fc

080118ac <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 80118ac:	f005 bf78 	b.w	80177a0 <drive_msgs__msg__Omni__init>

080118b0 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 80118b0:	f005 bf88 	b.w	80177c4 <drive_msgs__msg__Omni__fini>

080118b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80118b4:	4b04      	ldr	r3, [pc, #16]	; (80118c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	b10a      	cbz	r2, 80118be <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80118ba:	4803      	ldr	r0, [pc, #12]	; (80118c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80118bc:	4770      	bx	lr
 80118be:	4a03      	ldr	r2, [pc, #12]	; (80118cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80118c0:	4801      	ldr	r0, [pc, #4]	; (80118c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80118c2:	6812      	ldr	r2, [r2, #0]
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	4770      	bx	lr
 80118c8:	20000434 	.word	0x20000434
 80118cc:	200008f8 	.word	0x200008f8

080118d0 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 80118d0:	f005 bf7c 	b.w	80177cc <drive_msgs__msg__OmniEnc__init>

080118d4 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 80118d4:	f005 bf8c 	b.w	80177f0 <drive_msgs__msg__OmniEnc__fini>

080118d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80118d8:	4b04      	ldr	r3, [pc, #16]	; (80118ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	b10a      	cbz	r2, 80118e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80118de:	4803      	ldr	r0, [pc, #12]	; (80118ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80118e0:	4770      	bx	lr
 80118e2:	4a03      	ldr	r2, [pc, #12]	; (80118f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80118e4:	4801      	ldr	r0, [pc, #4]	; (80118ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80118e6:	6812      	ldr	r2, [r2, #0]
 80118e8:	601a      	str	r2, [r3, #0]
 80118ea:	4770      	bx	lr
 80118ec:	20000620 	.word	0x20000620
 80118f0:	200008f8 	.word	0x200008f8

080118f4 <_Omni__cdr_serialize>:
 80118f4:	b330      	cbz	r0, 8011944 <_Omni__cdr_serialize+0x50>
 80118f6:	b570      	push	{r4, r5, r6, lr}
 80118f8:	6806      	ldr	r6, [r0, #0]
 80118fa:	4604      	mov	r4, r0
 80118fc:	460d      	mov	r5, r1
 80118fe:	b1f6      	cbz	r6, 801193e <_Omni__cdr_serialize+0x4a>
 8011900:	4630      	mov	r0, r6
 8011902:	f7ee fcfd 	bl	8000300 <strlen>
 8011906:	1c42      	adds	r2, r0, #1
 8011908:	4631      	mov	r1, r6
 801190a:	6060      	str	r0, [r4, #4]
 801190c:	4628      	mov	r0, r5
 801190e:	f001 fe5f 	bl	80135d0 <ucdr_serialize_sequence_char>
 8011912:	4628      	mov	r0, r5
 8011914:	ed94 0b04 	vldr	d0, [r4, #16]
 8011918:	f001 fbfc 	bl	8013114 <ucdr_serialize_double>
 801191c:	4628      	mov	r0, r5
 801191e:	ed94 0b06 	vldr	d0, [r4, #24]
 8011922:	f001 fbf7 	bl	8013114 <ucdr_serialize_double>
 8011926:	4628      	mov	r0, r5
 8011928:	ed94 0b08 	vldr	d0, [r4, #32]
 801192c:	f001 fbf2 	bl	8013114 <ucdr_serialize_double>
 8011930:	4628      	mov	r0, r5
 8011932:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801193a:	f001 bbeb 	b.w	8013114 <ucdr_serialize_double>
 801193e:	4632      	mov	r2, r6
 8011940:	4630      	mov	r0, r6
 8011942:	e7e1      	b.n	8011908 <_Omni__cdr_serialize+0x14>
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop

08011948 <get_serialized_size_drive_msgs__msg__Omni>:
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	4604      	mov	r4, r0
 801194c:	b310      	cbz	r0, 8011994 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 801194e:	460d      	mov	r5, r1
 8011950:	2104      	movs	r1, #4
 8011952:	4628      	mov	r0, r5
 8011954:	f001 fdcc 	bl	80134f0 <ucdr_alignment>
 8011958:	6866      	ldr	r6, [r4, #4]
 801195a:	1d6b      	adds	r3, r5, #5
 801195c:	2108      	movs	r1, #8
 801195e:	f1c5 0508 	rsb	r5, r5, #8
 8011962:	4433      	add	r3, r6
 8011964:	181e      	adds	r6, r3, r0
 8011966:	4630      	mov	r0, r6
 8011968:	f001 fdc2 	bl	80134f0 <ucdr_alignment>
 801196c:	2108      	movs	r1, #8
 801196e:	1844      	adds	r4, r0, r1
 8011970:	4426      	add	r6, r4
 8011972:	4630      	mov	r0, r6
 8011974:	f001 fdbc 	bl	80134f0 <ucdr_alignment>
 8011978:	2108      	movs	r1, #8
 801197a:	1844      	adds	r4, r0, r1
 801197c:	4434      	add	r4, r6
 801197e:	4620      	mov	r0, r4
 8011980:	f001 fdb6 	bl	80134f0 <ucdr_alignment>
 8011984:	2108      	movs	r1, #8
 8011986:	4408      	add	r0, r1
 8011988:	4404      	add	r4, r0
 801198a:	4620      	mov	r0, r4
 801198c:	f001 fdb0 	bl	80134f0 <ucdr_alignment>
 8011990:	4428      	add	r0, r5
 8011992:	4420      	add	r0, r4
 8011994:	bd70      	pop	{r4, r5, r6, pc}
 8011996:	bf00      	nop

08011998 <_Omni__cdr_deserialize>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	460c      	mov	r4, r1
 801199c:	b082      	sub	sp, #8
 801199e:	b329      	cbz	r1, 80119ec <_Omni__cdr_deserialize+0x54>
 80119a0:	688e      	ldr	r6, [r1, #8]
 80119a2:	ab01      	add	r3, sp, #4
 80119a4:	6809      	ldr	r1, [r1, #0]
 80119a6:	4605      	mov	r5, r0
 80119a8:	4632      	mov	r2, r6
 80119aa:	f001 fe23 	bl	80135f4 <ucdr_deserialize_sequence_char>
 80119ae:	9b01      	ldr	r3, [sp, #4]
 80119b0:	b9c0      	cbnz	r0, 80119e4 <_Omni__cdr_deserialize+0x4c>
 80119b2:	429e      	cmp	r6, r3
 80119b4:	d31d      	bcc.n	80119f2 <_Omni__cdr_deserialize+0x5a>
 80119b6:	f104 0110 	add.w	r1, r4, #16
 80119ba:	4628      	mov	r0, r5
 80119bc:	f001 fc7a 	bl	80132b4 <ucdr_deserialize_double>
 80119c0:	f104 0118 	add.w	r1, r4, #24
 80119c4:	4628      	mov	r0, r5
 80119c6:	f001 fc75 	bl	80132b4 <ucdr_deserialize_double>
 80119ca:	f104 0120 	add.w	r1, r4, #32
 80119ce:	4628      	mov	r0, r5
 80119d0:	f001 fc70 	bl	80132b4 <ucdr_deserialize_double>
 80119d4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80119d8:	4628      	mov	r0, r5
 80119da:	b002      	add	sp, #8
 80119dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119e0:	f001 bc68 	b.w	80132b4 <ucdr_deserialize_double>
 80119e4:	b103      	cbz	r3, 80119e8 <_Omni__cdr_deserialize+0x50>
 80119e6:	3b01      	subs	r3, #1
 80119e8:	6063      	str	r3, [r4, #4]
 80119ea:	e7e4      	b.n	80119b6 <_Omni__cdr_deserialize+0x1e>
 80119ec:	4608      	mov	r0, r1
 80119ee:	b002      	add	sp, #8
 80119f0:	bd70      	pop	{r4, r5, r6, pc}
 80119f2:	2101      	movs	r1, #1
 80119f4:	75a8      	strb	r0, [r5, #22]
 80119f6:	7569      	strb	r1, [r5, #21]
 80119f8:	6060      	str	r0, [r4, #4]
 80119fa:	4628      	mov	r0, r5
 80119fc:	f001 fd90 	bl	8013520 <ucdr_align_to>
 8011a00:	9901      	ldr	r1, [sp, #4]
 8011a02:	4628      	mov	r0, r5
 8011a04:	f001 fdc4 	bl	8013590 <ucdr_advance_buffer>
 8011a08:	e7d5      	b.n	80119b6 <_Omni__cdr_deserialize+0x1e>
 8011a0a:	bf00      	nop

08011a0c <_Omni__max_serialized_size>:
 8011a0c:	b538      	push	{r3, r4, r5, lr}
 8011a0e:	2108      	movs	r1, #8
 8011a10:	2000      	movs	r0, #0
 8011a12:	f001 fd6d 	bl	80134f0 <ucdr_alignment>
 8011a16:	2108      	movs	r1, #8
 8011a18:	1845      	adds	r5, r0, r1
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f001 fd68 	bl	80134f0 <ucdr_alignment>
 8011a20:	2108      	movs	r1, #8
 8011a22:	1844      	adds	r4, r0, r1
 8011a24:	442c      	add	r4, r5
 8011a26:	4620      	mov	r0, r4
 8011a28:	f001 fd62 	bl	80134f0 <ucdr_alignment>
 8011a2c:	2108      	movs	r1, #8
 8011a2e:	4408      	add	r0, r1
 8011a30:	4404      	add	r4, r0
 8011a32:	4620      	mov	r0, r4
 8011a34:	f001 fd5c 	bl	80134f0 <ucdr_alignment>
 8011a38:	3008      	adds	r0, #8
 8011a3a:	4420      	add	r0, r4
 8011a3c:	bd38      	pop	{r3, r4, r5, pc}
 8011a3e:	bf00      	nop

08011a40 <_Omni__get_serialized_size>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	4604      	mov	r4, r0
 8011a44:	b1f0      	cbz	r0, 8011a84 <_Omni__get_serialized_size+0x44>
 8011a46:	2104      	movs	r1, #4
 8011a48:	2000      	movs	r0, #0
 8011a4a:	f001 fd51 	bl	80134f0 <ucdr_alignment>
 8011a4e:	6863      	ldr	r3, [r4, #4]
 8011a50:	2108      	movs	r1, #8
 8011a52:	3305      	adds	r3, #5
 8011a54:	181d      	adds	r5, r3, r0
 8011a56:	4628      	mov	r0, r5
 8011a58:	f001 fd4a 	bl	80134f0 <ucdr_alignment>
 8011a5c:	2108      	movs	r1, #8
 8011a5e:	1844      	adds	r4, r0, r1
 8011a60:	4425      	add	r5, r4
 8011a62:	4628      	mov	r0, r5
 8011a64:	f001 fd44 	bl	80134f0 <ucdr_alignment>
 8011a68:	2108      	movs	r1, #8
 8011a6a:	1844      	adds	r4, r0, r1
 8011a6c:	442c      	add	r4, r5
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f001 fd3e 	bl	80134f0 <ucdr_alignment>
 8011a74:	2108      	movs	r1, #8
 8011a76:	4408      	add	r0, r1
 8011a78:	4404      	add	r4, r0
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f001 fd38 	bl	80134f0 <ucdr_alignment>
 8011a80:	3008      	adds	r0, #8
 8011a82:	4420      	add	r0, r4
 8011a84:	bd38      	pop	{r3, r4, r5, pc}
 8011a86:	bf00      	nop

08011a88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011a88:	4800      	ldr	r0, [pc, #0]	; (8011a8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 8011a8a:	4770      	bx	lr
 8011a8c:	2000062c 	.word	0x2000062c

08011a90 <_OmniEnc__cdr_serialize>:
 8011a90:	b3a8      	cbz	r0, 8011afe <_OmniEnc__cdr_serialize+0x6e>
 8011a92:	b570      	push	{r4, r5, r6, lr}
 8011a94:	6806      	ldr	r6, [r0, #0]
 8011a96:	4604      	mov	r4, r0
 8011a98:	460d      	mov	r5, r1
 8011a9a:	b36e      	cbz	r6, 8011af8 <_OmniEnc__cdr_serialize+0x68>
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f7ee fc2f 	bl	8000300 <strlen>
 8011aa2:	1c42      	adds	r2, r0, #1
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	6060      	str	r0, [r4, #4]
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f001 fd91 	bl	80135d0 <ucdr_serialize_sequence_char>
 8011aae:	4628      	mov	r0, r5
 8011ab0:	ed94 0b04 	vldr	d0, [r4, #16]
 8011ab4:	f001 fb2e 	bl	8013114 <ucdr_serialize_double>
 8011ab8:	4628      	mov	r0, r5
 8011aba:	ed94 0b06 	vldr	d0, [r4, #24]
 8011abe:	f001 fb29 	bl	8013114 <ucdr_serialize_double>
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	ed94 0b08 	vldr	d0, [r4, #32]
 8011ac8:	f001 fb24 	bl	8013114 <ucdr_serialize_double>
 8011acc:	4628      	mov	r0, r5
 8011ace:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011ad2:	f001 fb1f 	bl	8013114 <ucdr_serialize_double>
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 8011adc:	f001 fb1a 	bl	8013114 <ucdr_serialize_double>
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8011ae6:	f001 fb15 	bl	8013114 <ucdr_serialize_double>
 8011aea:	4628      	mov	r0, r5
 8011aec:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8011af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011af4:	f001 bb0e 	b.w	8013114 <ucdr_serialize_double>
 8011af8:	4632      	mov	r2, r6
 8011afa:	4630      	mov	r0, r6
 8011afc:	e7d2      	b.n	8011aa4 <_OmniEnc__cdr_serialize+0x14>
 8011afe:	4770      	bx	lr

08011b00 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	460c      	mov	r4, r1
 8011b04:	4605      	mov	r5, r0
 8011b06:	2104      	movs	r1, #4
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f001 fcf1 	bl	80134f0 <ucdr_alignment>
 8011b0e:	686b      	ldr	r3, [r5, #4]
 8011b10:	2108      	movs	r1, #8
 8011b12:	4423      	add	r3, r4
 8011b14:	f1c4 0408 	rsb	r4, r4, #8
 8011b18:	3305      	adds	r3, #5
 8011b1a:	18c6      	adds	r6, r0, r3
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	f001 fce7 	bl	80134f0 <ucdr_alignment>
 8011b22:	2108      	movs	r1, #8
 8011b24:	1845      	adds	r5, r0, r1
 8011b26:	442e      	add	r6, r5
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f001 fce1 	bl	80134f0 <ucdr_alignment>
 8011b2e:	2108      	movs	r1, #8
 8011b30:	1845      	adds	r5, r0, r1
 8011b32:	4435      	add	r5, r6
 8011b34:	4628      	mov	r0, r5
 8011b36:	f001 fcdb 	bl	80134f0 <ucdr_alignment>
 8011b3a:	2108      	movs	r1, #8
 8011b3c:	4408      	add	r0, r1
 8011b3e:	4405      	add	r5, r0
 8011b40:	4628      	mov	r0, r5
 8011b42:	f001 fcd5 	bl	80134f0 <ucdr_alignment>
 8011b46:	2108      	movs	r1, #8
 8011b48:	4408      	add	r0, r1
 8011b4a:	1946      	adds	r6, r0, r5
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f001 fccf 	bl	80134f0 <ucdr_alignment>
 8011b52:	2108      	movs	r1, #8
 8011b54:	1845      	adds	r5, r0, r1
 8011b56:	4435      	add	r5, r6
 8011b58:	4628      	mov	r0, r5
 8011b5a:	f001 fcc9 	bl	80134f0 <ucdr_alignment>
 8011b5e:	2108      	movs	r1, #8
 8011b60:	4408      	add	r0, r1
 8011b62:	4405      	add	r5, r0
 8011b64:	4628      	mov	r0, r5
 8011b66:	f001 fcc3 	bl	80134f0 <ucdr_alignment>
 8011b6a:	4420      	add	r0, r4
 8011b6c:	4428      	add	r0, r5
 8011b6e:	bd70      	pop	{r4, r5, r6, pc}

08011b70 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8011b70:	b108      	cbz	r0, 8011b76 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8011b72:	f7ff bfc5 	b.w	8011b00 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011b76:	4770      	bx	lr

08011b78 <_OmniEnc__get_serialized_size>:
 8011b78:	b110      	cbz	r0, 8011b80 <_OmniEnc__get_serialized_size+0x8>
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	f7ff bfc0 	b.w	8011b00 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop

08011b84 <_OmniEnc__cdr_deserialize>:
 8011b84:	b570      	push	{r4, r5, r6, lr}
 8011b86:	460c      	mov	r4, r1
 8011b88:	b082      	sub	sp, #8
 8011b8a:	b3a1      	cbz	r1, 8011bf6 <_OmniEnc__cdr_deserialize+0x72>
 8011b8c:	688e      	ldr	r6, [r1, #8]
 8011b8e:	ab01      	add	r3, sp, #4
 8011b90:	6809      	ldr	r1, [r1, #0]
 8011b92:	4605      	mov	r5, r0
 8011b94:	4632      	mov	r2, r6
 8011b96:	f001 fd2d 	bl	80135f4 <ucdr_deserialize_sequence_char>
 8011b9a:	9b01      	ldr	r3, [sp, #4]
 8011b9c:	bb38      	cbnz	r0, 8011bee <_OmniEnc__cdr_deserialize+0x6a>
 8011b9e:	429e      	cmp	r6, r3
 8011ba0:	d32c      	bcc.n	8011bfc <_OmniEnc__cdr_deserialize+0x78>
 8011ba2:	f104 0110 	add.w	r1, r4, #16
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f001 fb84 	bl	80132b4 <ucdr_deserialize_double>
 8011bac:	f104 0118 	add.w	r1, r4, #24
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f001 fb7f 	bl	80132b4 <ucdr_deserialize_double>
 8011bb6:	f104 0120 	add.w	r1, r4, #32
 8011bba:	4628      	mov	r0, r5
 8011bbc:	f001 fb7a 	bl	80132b4 <ucdr_deserialize_double>
 8011bc0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f001 fb75 	bl	80132b4 <ucdr_deserialize_double>
 8011bca:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f001 fb70 	bl	80132b4 <ucdr_deserialize_double>
 8011bd4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f001 fb6b 	bl	80132b4 <ucdr_deserialize_double>
 8011bde:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011be2:	4628      	mov	r0, r5
 8011be4:	b002      	add	sp, #8
 8011be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bea:	f001 bb63 	b.w	80132b4 <ucdr_deserialize_double>
 8011bee:	b103      	cbz	r3, 8011bf2 <_OmniEnc__cdr_deserialize+0x6e>
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	6063      	str	r3, [r4, #4]
 8011bf4:	e7d5      	b.n	8011ba2 <_OmniEnc__cdr_deserialize+0x1e>
 8011bf6:	4608      	mov	r0, r1
 8011bf8:	b002      	add	sp, #8
 8011bfa:	bd70      	pop	{r4, r5, r6, pc}
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	75a8      	strb	r0, [r5, #22]
 8011c00:	7569      	strb	r1, [r5, #21]
 8011c02:	6060      	str	r0, [r4, #4]
 8011c04:	4628      	mov	r0, r5
 8011c06:	f001 fc8b 	bl	8013520 <ucdr_align_to>
 8011c0a:	9901      	ldr	r1, [sp, #4]
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f001 fcbf 	bl	8013590 <ucdr_advance_buffer>
 8011c12:	e7c6      	b.n	8011ba2 <_OmniEnc__cdr_deserialize+0x1e>

08011c14 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	460c      	mov	r4, r1
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	2108      	movs	r1, #8
 8011c1e:	f104 0508 	add.w	r5, r4, #8
 8011c22:	4620      	mov	r0, r4
 8011c24:	701a      	strb	r2, [r3, #0]
 8011c26:	f1c4 0408 	rsb	r4, r4, #8
 8011c2a:	f001 fc61 	bl	80134f0 <ucdr_alignment>
 8011c2e:	4405      	add	r5, r0
 8011c30:	2108      	movs	r1, #8
 8011c32:	4628      	mov	r0, r5
 8011c34:	f001 fc5c 	bl	80134f0 <ucdr_alignment>
 8011c38:	2108      	movs	r1, #8
 8011c3a:	1846      	adds	r6, r0, r1
 8011c3c:	442e      	add	r6, r5
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f001 fc56 	bl	80134f0 <ucdr_alignment>
 8011c44:	2108      	movs	r1, #8
 8011c46:	1845      	adds	r5, r0, r1
 8011c48:	442e      	add	r6, r5
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f001 fc50 	bl	80134f0 <ucdr_alignment>
 8011c50:	2108      	movs	r1, #8
 8011c52:	4408      	add	r0, r1
 8011c54:	4406      	add	r6, r0
 8011c56:	4630      	mov	r0, r6
 8011c58:	f001 fc4a 	bl	80134f0 <ucdr_alignment>
 8011c5c:	2108      	movs	r1, #8
 8011c5e:	1845      	adds	r5, r0, r1
 8011c60:	4435      	add	r5, r6
 8011c62:	4628      	mov	r0, r5
 8011c64:	f001 fc44 	bl	80134f0 <ucdr_alignment>
 8011c68:	2108      	movs	r1, #8
 8011c6a:	4408      	add	r0, r1
 8011c6c:	4405      	add	r5, r0
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f001 fc3e 	bl	80134f0 <ucdr_alignment>
 8011c74:	4420      	add	r0, r4
 8011c76:	4428      	add	r0, r5
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
 8011c7a:	bf00      	nop

08011c7c <_OmniEnc__max_serialized_size>:
 8011c7c:	b500      	push	{lr}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	2100      	movs	r1, #0
 8011c82:	f10d 0007 	add.w	r0, sp, #7
 8011c86:	f7ff ffc5 	bl	8011c14 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8011c8a:	b003      	add	sp, #12
 8011c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08011c90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011c90:	4800      	ldr	r0, [pc, #0]	; (8011c94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8011c92:	4770      	bx	lr
 8011c94:	20000654 	.word	0x20000654

08011c98 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011c98:	4b04      	ldr	r3, [pc, #16]	; (8011cac <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	b10a      	cbz	r2, 8011ca2 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011c9e:	4803      	ldr	r0, [pc, #12]	; (8011cac <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011ca0:	4770      	bx	lr
 8011ca2:	4a03      	ldr	r2, [pc, #12]	; (8011cb0 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011ca4:	4801      	ldr	r0, [pc, #4]	; (8011cac <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011ca6:	6812      	ldr	r2, [r2, #0]
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	4770      	bx	lr
 8011cac:	20000684 	.word	0x20000684
 8011cb0:	200008f4 	.word	0x200008f4

08011cb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011cb4:	4a02      	ldr	r2, [pc, #8]	; (8011cc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8011cb6:	4b03      	ldr	r3, [pc, #12]	; (8011cc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8011cb8:	6812      	ldr	r2, [r2, #0]
 8011cba:	601a      	str	r2, [r3, #0]
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	200008f4 	.word	0x200008f4
 8011cc4:	20000684 	.word	0x20000684

08011cc8 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8011cc8:	f005 bd96 	b.w	80177f8 <manip_msgs__msg__Cmd__init>

08011ccc <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 8011ccc:	f005 bd98 	b.w	8017800 <manip_msgs__msg__Cmd__fini>

08011cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011cd0:	4b04      	ldr	r3, [pc, #16]	; (8011ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	b10a      	cbz	r2, 8011cda <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011cd6:	4803      	ldr	r0, [pc, #12]	; (8011ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011cd8:	4770      	bx	lr
 8011cda:	4a03      	ldr	r2, [pc, #12]	; (8011ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011cdc:	4801      	ldr	r0, [pc, #4]	; (8011ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011cde:	6812      	ldr	r2, [r2, #0]
 8011ce0:	601a      	str	r2, [r3, #0]
 8011ce2:	4770      	bx	lr
 8011ce4:	200008ac 	.word	0x200008ac
 8011ce8:	200008f8 	.word	0x200008f8

08011cec <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 8011cec:	b570      	push	{r4, r5, r6, lr}
 8011cee:	2108      	movs	r1, #8
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	f001 fbfd 	bl	80134f0 <ucdr_alignment>
 8011cf6:	2108      	movs	r1, #8
 8011cf8:	1866      	adds	r6, r4, r1
 8011cfa:	f1c4 0408 	rsb	r4, r4, #8
 8011cfe:	1985      	adds	r5, r0, r6
 8011d00:	4628      	mov	r0, r5
 8011d02:	f001 fbf5 	bl	80134f0 <ucdr_alignment>
 8011d06:	2108      	movs	r1, #8
 8011d08:	1846      	adds	r6, r0, r1
 8011d0a:	442e      	add	r6, r5
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f001 fbef 	bl	80134f0 <ucdr_alignment>
 8011d12:	2108      	movs	r1, #8
 8011d14:	1845      	adds	r5, r0, r1
 8011d16:	442e      	add	r6, r5
 8011d18:	4630      	mov	r0, r6
 8011d1a:	f001 fbe9 	bl	80134f0 <ucdr_alignment>
 8011d1e:	2108      	movs	r1, #8
 8011d20:	1845      	adds	r5, r0, r1
 8011d22:	4435      	add	r5, r6
 8011d24:	4628      	mov	r0, r5
 8011d26:	f001 fbe3 	bl	80134f0 <ucdr_alignment>
 8011d2a:	2108      	movs	r1, #8
 8011d2c:	4408      	add	r0, r1
 8011d2e:	4405      	add	r5, r0
 8011d30:	4628      	mov	r0, r5
 8011d32:	f001 fbdd 	bl	80134f0 <ucdr_alignment>
 8011d36:	2108      	movs	r1, #8
 8011d38:	4408      	add	r0, r1
 8011d3a:	1946      	adds	r6, r0, r5
 8011d3c:	4630      	mov	r0, r6
 8011d3e:	f001 fbd7 	bl	80134f0 <ucdr_alignment>
 8011d42:	2108      	movs	r1, #8
 8011d44:	1845      	adds	r5, r0, r1
 8011d46:	4435      	add	r5, r6
 8011d48:	4628      	mov	r0, r5
 8011d4a:	f001 fbd1 	bl	80134f0 <ucdr_alignment>
 8011d4e:	2108      	movs	r1, #8
 8011d50:	4408      	add	r0, r1
 8011d52:	4405      	add	r5, r0
 8011d54:	4628      	mov	r0, r5
 8011d56:	f001 fbcb 	bl	80134f0 <ucdr_alignment>
 8011d5a:	4420      	add	r0, r4
 8011d5c:	4428      	add	r0, r5
 8011d5e:	bd70      	pop	{r4, r5, r6, pc}

08011d60 <get_serialized_size_manip_msgs__msg__Cmd>:
 8011d60:	b110      	cbz	r0, 8011d68 <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8011d62:	4608      	mov	r0, r1
 8011d64:	f7ff bfc2 	b.w	8011cec <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop

08011d6c <_Cmd__get_serialized_size>:
 8011d6c:	b110      	cbz	r0, 8011d74 <_Cmd__get_serialized_size+0x8>
 8011d6e:	2000      	movs	r0, #0
 8011d70:	f7ff bfbc 	b.w	8011cec <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop

08011d78 <_Cmd__cdr_deserialize>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	b361      	cbz	r1, 8011dd8 <_Cmd__cdr_deserialize+0x60>
 8011d7e:	4605      	mov	r5, r0
 8011d80:	f001 f902 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011d84:	f104 0108 	add.w	r1, r4, #8
 8011d88:	4628      	mov	r0, r5
 8011d8a:	f001 f8fd 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011d8e:	f104 0110 	add.w	r1, r4, #16
 8011d92:	4628      	mov	r0, r5
 8011d94:	f001 f8f8 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011d98:	f104 0118 	add.w	r1, r4, #24
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f001 f8f3 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011da2:	f104 0120 	add.w	r1, r4, #32
 8011da6:	4628      	mov	r0, r5
 8011da8:	f001 f8ee 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011dac:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011db0:	4628      	mov	r0, r5
 8011db2:	f001 f8e9 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011db6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011dba:	4628      	mov	r0, r5
 8011dbc:	f001 f8e4 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011dc0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	f001 f8df 	bl	8012f88 <ucdr_deserialize_int64_t>
 8011dca:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011dce:	4628      	mov	r0, r5
 8011dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dd4:	f001 b8d8 	b.w	8012f88 <ucdr_deserialize_int64_t>
 8011dd8:	4608      	mov	r0, r1
 8011dda:	bd38      	pop	{r3, r4, r5, pc}

08011ddc <_Cmd__cdr_serialize>:
 8011ddc:	b388      	cbz	r0, 8011e42 <_Cmd__cdr_serialize+0x66>
 8011dde:	b570      	push	{r4, r5, r6, lr}
 8011de0:	460d      	mov	r5, r1
 8011de2:	4604      	mov	r4, r0
 8011de4:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011de8:	4608      	mov	r0, r1
 8011dea:	f000 fffd 	bl	8012de8 <ucdr_serialize_int64_t>
 8011dee:	4628      	mov	r0, r5
 8011df0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011df4:	f000 fff8 	bl	8012de8 <ucdr_serialize_int64_t>
 8011df8:	4628      	mov	r0, r5
 8011dfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011dfe:	f000 fff3 	bl	8012de8 <ucdr_serialize_int64_t>
 8011e02:	4628      	mov	r0, r5
 8011e04:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011e08:	f000 ffee 	bl	8012de8 <ucdr_serialize_int64_t>
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011e12:	f000 ffe9 	bl	8012de8 <ucdr_serialize_int64_t>
 8011e16:	4628      	mov	r0, r5
 8011e18:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8011e1c:	f000 ffe4 	bl	8012de8 <ucdr_serialize_int64_t>
 8011e20:	4628      	mov	r0, r5
 8011e22:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011e26:	f000 ffdf 	bl	8012de8 <ucdr_serialize_int64_t>
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011e30:	f000 ffda 	bl	8012de8 <ucdr_serialize_int64_t>
 8011e34:	4628      	mov	r0, r5
 8011e36:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8011e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e3e:	f000 bfd3 	b.w	8012de8 <ucdr_serialize_int64_t>
 8011e42:	4770      	bx	lr

08011e44 <max_serialized_size_manip_msgs__msg__Cmd>:
 8011e44:	b570      	push	{r4, r5, r6, lr}
 8011e46:	460c      	mov	r4, r1
 8011e48:	2301      	movs	r3, #1
 8011e4a:	2108      	movs	r1, #8
 8011e4c:	f104 0608 	add.w	r6, r4, #8
 8011e50:	7003      	strb	r3, [r0, #0]
 8011e52:	4620      	mov	r0, r4
 8011e54:	f1c4 0408 	rsb	r4, r4, #8
 8011e58:	f001 fb4a 	bl	80134f0 <ucdr_alignment>
 8011e5c:	1985      	adds	r5, r0, r6
 8011e5e:	2108      	movs	r1, #8
 8011e60:	4628      	mov	r0, r5
 8011e62:	f001 fb45 	bl	80134f0 <ucdr_alignment>
 8011e66:	2108      	movs	r1, #8
 8011e68:	1846      	adds	r6, r0, r1
 8011e6a:	442e      	add	r6, r5
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f001 fb3f 	bl	80134f0 <ucdr_alignment>
 8011e72:	2108      	movs	r1, #8
 8011e74:	1845      	adds	r5, r0, r1
 8011e76:	442e      	add	r6, r5
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f001 fb39 	bl	80134f0 <ucdr_alignment>
 8011e7e:	2108      	movs	r1, #8
 8011e80:	1845      	adds	r5, r0, r1
 8011e82:	4435      	add	r5, r6
 8011e84:	4628      	mov	r0, r5
 8011e86:	f001 fb33 	bl	80134f0 <ucdr_alignment>
 8011e8a:	2108      	movs	r1, #8
 8011e8c:	4408      	add	r0, r1
 8011e8e:	4405      	add	r5, r0
 8011e90:	4628      	mov	r0, r5
 8011e92:	f001 fb2d 	bl	80134f0 <ucdr_alignment>
 8011e96:	2108      	movs	r1, #8
 8011e98:	4408      	add	r0, r1
 8011e9a:	1946      	adds	r6, r0, r5
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f001 fb27 	bl	80134f0 <ucdr_alignment>
 8011ea2:	2108      	movs	r1, #8
 8011ea4:	1845      	adds	r5, r0, r1
 8011ea6:	4435      	add	r5, r6
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	f001 fb21 	bl	80134f0 <ucdr_alignment>
 8011eae:	2108      	movs	r1, #8
 8011eb0:	4408      	add	r0, r1
 8011eb2:	4405      	add	r5, r0
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f001 fb1b 	bl	80134f0 <ucdr_alignment>
 8011eba:	4420      	add	r0, r4
 8011ebc:	4428      	add	r0, r5
 8011ebe:	bd70      	pop	{r4, r5, r6, pc}

08011ec0 <_Cmd__max_serialized_size>:
 8011ec0:	b500      	push	{lr}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	f10d 0007 	add.w	r0, sp, #7
 8011eca:	f7ff ffbb 	bl	8011e44 <max_serialized_size_manip_msgs__msg__Cmd>
 8011ece:	b003      	add	sp, #12
 8011ed0:	f85d fb04 	ldr.w	pc, [sp], #4

08011ed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011ed4:	4800      	ldr	r0, [pc, #0]	; (8011ed8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8011ed6:	4770      	bx	lr
 8011ed8:	200008b8 	.word	0x200008b8

08011edc <ucdr_serialize_bool>:
 8011edc:	b538      	push	{r3, r4, r5, lr}
 8011ede:	460d      	mov	r5, r1
 8011ee0:	2101      	movs	r1, #1
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	f001 fab8 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8011ee8:	b148      	cbz	r0, 8011efe <ucdr_serialize_bool+0x22>
 8011eea:	68a3      	ldr	r3, [r4, #8]
 8011eec:	2101      	movs	r1, #1
 8011eee:	701d      	strb	r5, [r3, #0]
 8011ef0:	68a2      	ldr	r2, [r4, #8]
 8011ef2:	6923      	ldr	r3, [r4, #16]
 8011ef4:	440a      	add	r2, r1
 8011ef6:	7561      	strb	r1, [r4, #21]
 8011ef8:	440b      	add	r3, r1
 8011efa:	60a2      	str	r2, [r4, #8]
 8011efc:	6123      	str	r3, [r4, #16]
 8011efe:	7da0      	ldrb	r0, [r4, #22]
 8011f00:	f080 0001 	eor.w	r0, r0, #1
 8011f04:	bd38      	pop	{r3, r4, r5, pc}
 8011f06:	bf00      	nop

08011f08 <ucdr_deserialize_bool>:
 8011f08:	b538      	push	{r3, r4, r5, lr}
 8011f0a:	460d      	mov	r5, r1
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	4604      	mov	r4, r0
 8011f10:	f001 faa2 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8011f14:	b160      	cbz	r0, 8011f30 <ucdr_deserialize_bool+0x28>
 8011f16:	68a2      	ldr	r2, [r4, #8]
 8011f18:	2101      	movs	r1, #1
 8011f1a:	6923      	ldr	r3, [r4, #16]
 8011f1c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011f20:	440b      	add	r3, r1
 8011f22:	3800      	subs	r0, #0
 8011f24:	bf18      	it	ne
 8011f26:	2001      	movne	r0, #1
 8011f28:	7028      	strb	r0, [r5, #0]
 8011f2a:	60a2      	str	r2, [r4, #8]
 8011f2c:	6123      	str	r3, [r4, #16]
 8011f2e:	7561      	strb	r1, [r4, #21]
 8011f30:	7da0      	ldrb	r0, [r4, #22]
 8011f32:	f080 0001 	eor.w	r0, r0, #1
 8011f36:	bd38      	pop	{r3, r4, r5, pc}

08011f38 <ucdr_serialize_uint8_t>:
 8011f38:	b538      	push	{r3, r4, r5, lr}
 8011f3a:	460d      	mov	r5, r1
 8011f3c:	2101      	movs	r1, #1
 8011f3e:	4604      	mov	r4, r0
 8011f40:	f001 fa8a 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8011f44:	b148      	cbz	r0, 8011f5a <ucdr_serialize_uint8_t+0x22>
 8011f46:	68a3      	ldr	r3, [r4, #8]
 8011f48:	2101      	movs	r1, #1
 8011f4a:	701d      	strb	r5, [r3, #0]
 8011f4c:	68a2      	ldr	r2, [r4, #8]
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	440a      	add	r2, r1
 8011f52:	7561      	strb	r1, [r4, #21]
 8011f54:	440b      	add	r3, r1
 8011f56:	60a2      	str	r2, [r4, #8]
 8011f58:	6123      	str	r3, [r4, #16]
 8011f5a:	7da0      	ldrb	r0, [r4, #22]
 8011f5c:	f080 0001 	eor.w	r0, r0, #1
 8011f60:	bd38      	pop	{r3, r4, r5, pc}
 8011f62:	bf00      	nop

08011f64 <ucdr_deserialize_uint8_t>:
 8011f64:	b538      	push	{r3, r4, r5, lr}
 8011f66:	460d      	mov	r5, r1
 8011f68:	2101      	movs	r1, #1
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	f001 fa74 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8011f70:	b150      	cbz	r0, 8011f88 <ucdr_deserialize_uint8_t+0x24>
 8011f72:	68a3      	ldr	r3, [r4, #8]
 8011f74:	2101      	movs	r1, #1
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	702b      	strb	r3, [r5, #0]
 8011f7a:	68a2      	ldr	r2, [r4, #8]
 8011f7c:	6923      	ldr	r3, [r4, #16]
 8011f7e:	440a      	add	r2, r1
 8011f80:	7561      	strb	r1, [r4, #21]
 8011f82:	440b      	add	r3, r1
 8011f84:	60a2      	str	r2, [r4, #8]
 8011f86:	6123      	str	r3, [r4, #16]
 8011f88:	7da0      	ldrb	r0, [r4, #22]
 8011f8a:	f080 0001 	eor.w	r0, r0, #1
 8011f8e:	bd38      	pop	{r3, r4, r5, pc}

08011f90 <ucdr_serialize_uint16_t>:
 8011f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f94:	460b      	mov	r3, r1
 8011f96:	b082      	sub	sp, #8
 8011f98:	4604      	mov	r4, r0
 8011f9a:	2102      	movs	r1, #2
 8011f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011fa0:	f001 faae 	bl	8013500 <ucdr_buffer_alignment>
 8011fa4:	4601      	mov	r1, r0
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	7d67      	ldrb	r7, [r4, #21]
 8011faa:	f001 faf1 	bl	8013590 <ucdr_advance_buffer>
 8011fae:	2102      	movs	r1, #2
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f001 fa45 	bl	8013440 <ucdr_check_buffer_available_for>
 8011fb6:	bb78      	cbnz	r0, 8012018 <ucdr_serialize_uint16_t+0x88>
 8011fb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011fbc:	42ab      	cmp	r3, r5
 8011fbe:	d926      	bls.n	801200e <ucdr_serialize_uint16_t+0x7e>
 8011fc0:	1b5e      	subs	r6, r3, r5
 8011fc2:	60a3      	str	r3, [r4, #8]
 8011fc4:	6923      	ldr	r3, [r4, #16]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f1c6 0802 	rsb	r8, r6, #2
 8011fcc:	4433      	add	r3, r6
 8011fce:	4641      	mov	r1, r8
 8011fd0:	6123      	str	r3, [r4, #16]
 8011fd2:	f001 fa41 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d03b      	beq.n	8012052 <ucdr_serialize_uint16_t+0xc2>
 8011fda:	7d23      	ldrb	r3, [r4, #20]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d04a      	beq.n	8012076 <ucdr_serialize_uint16_t+0xe6>
 8011fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011fe4:	702b      	strb	r3, [r5, #0]
 8011fe6:	2e00      	cmp	r6, #0
 8011fe8:	d040      	beq.n	801206c <ucdr_serialize_uint16_t+0xdc>
 8011fea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011fee:	706b      	strb	r3, [r5, #1]
 8011ff0:	6923      	ldr	r3, [r4, #16]
 8011ff2:	2102      	movs	r1, #2
 8011ff4:	68a2      	ldr	r2, [r4, #8]
 8011ff6:	3302      	adds	r3, #2
 8011ff8:	7da0      	ldrb	r0, [r4, #22]
 8011ffa:	4442      	add	r2, r8
 8011ffc:	7561      	strb	r1, [r4, #21]
 8011ffe:	1b9e      	subs	r6, r3, r6
 8012000:	f080 0001 	eor.w	r0, r0, #1
 8012004:	60a2      	str	r2, [r4, #8]
 8012006:	6126      	str	r6, [r4, #16]
 8012008:	b002      	add	sp, #8
 801200a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801200e:	2102      	movs	r1, #2
 8012010:	4620      	mov	r0, r4
 8012012:	f001 fa21 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012016:	b190      	cbz	r0, 801203e <ucdr_serialize_uint16_t+0xae>
 8012018:	7d23      	ldrb	r3, [r4, #20]
 801201a:	2b01      	cmp	r3, #1
 801201c:	68a3      	ldr	r3, [r4, #8]
 801201e:	d014      	beq.n	801204a <ucdr_serialize_uint16_t+0xba>
 8012020:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012024:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012028:	7019      	strb	r1, [r3, #0]
 801202a:	68a3      	ldr	r3, [r4, #8]
 801202c:	705a      	strb	r2, [r3, #1]
 801202e:	2102      	movs	r1, #2
 8012030:	68a2      	ldr	r2, [r4, #8]
 8012032:	6923      	ldr	r3, [r4, #16]
 8012034:	440a      	add	r2, r1
 8012036:	7561      	strb	r1, [r4, #21]
 8012038:	440b      	add	r3, r1
 801203a:	60a2      	str	r2, [r4, #8]
 801203c:	6123      	str	r3, [r4, #16]
 801203e:	7da0      	ldrb	r0, [r4, #22]
 8012040:	f080 0001 	eor.w	r0, r0, #1
 8012044:	b002      	add	sp, #8
 8012046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801204e:	801a      	strh	r2, [r3, #0]
 8012050:	e7ed      	b.n	801202e <ucdr_serialize_uint16_t+0x9e>
 8012052:	68a2      	ldr	r2, [r4, #8]
 8012054:	6923      	ldr	r3, [r4, #16]
 8012056:	7da0      	ldrb	r0, [r4, #22]
 8012058:	1b92      	subs	r2, r2, r6
 801205a:	1b9b      	subs	r3, r3, r6
 801205c:	7567      	strb	r7, [r4, #21]
 801205e:	f080 0001 	eor.w	r0, r0, #1
 8012062:	60a2      	str	r2, [r4, #8]
 8012064:	6123      	str	r3, [r4, #16]
 8012066:	b002      	add	sp, #8
 8012068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206c:	68a3      	ldr	r3, [r4, #8]
 801206e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012072:	701a      	strb	r2, [r3, #0]
 8012074:	e7bc      	b.n	8011ff0 <ucdr_serialize_uint16_t+0x60>
 8012076:	4628      	mov	r0, r5
 8012078:	f10d 0506 	add.w	r5, sp, #6
 801207c:	4632      	mov	r2, r6
 801207e:	4629      	mov	r1, r5
 8012080:	f00f f869 	bl	8021156 <memcpy>
 8012084:	4642      	mov	r2, r8
 8012086:	19a9      	adds	r1, r5, r6
 8012088:	68a0      	ldr	r0, [r4, #8]
 801208a:	f00f f864 	bl	8021156 <memcpy>
 801208e:	e7af      	b.n	8011ff0 <ucdr_serialize_uint16_t+0x60>

08012090 <ucdr_serialize_endian_uint16_t>:
 8012090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012094:	4604      	mov	r4, r0
 8012096:	b083      	sub	sp, #12
 8012098:	460d      	mov	r5, r1
 801209a:	2102      	movs	r1, #2
 801209c:	f8ad 2006 	strh.w	r2, [sp, #6]
 80120a0:	f001 fa2e 	bl	8013500 <ucdr_buffer_alignment>
 80120a4:	4601      	mov	r1, r0
 80120a6:	4620      	mov	r0, r4
 80120a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80120ac:	f001 fa70 	bl	8013590 <ucdr_advance_buffer>
 80120b0:	2102      	movs	r1, #2
 80120b2:	4620      	mov	r0, r4
 80120b4:	f001 f9c4 	bl	8013440 <ucdr_check_buffer_available_for>
 80120b8:	bb70      	cbnz	r0, 8012118 <ucdr_serialize_endian_uint16_t+0x88>
 80120ba:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80120be:	42be      	cmp	r6, r7
 80120c0:	d925      	bls.n	801210e <ucdr_serialize_endian_uint16_t+0x7e>
 80120c2:	6923      	ldr	r3, [r4, #16]
 80120c4:	4620      	mov	r0, r4
 80120c6:	60a6      	str	r6, [r4, #8]
 80120c8:	1bf6      	subs	r6, r6, r7
 80120ca:	4433      	add	r3, r6
 80120cc:	f1c6 0902 	rsb	r9, r6, #2
 80120d0:	6123      	str	r3, [r4, #16]
 80120d2:	4649      	mov	r1, r9
 80120d4:	f001 f9c0 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80120d8:	2800      	cmp	r0, #0
 80120da:	d039      	beq.n	8012150 <ucdr_serialize_endian_uint16_t+0xc0>
 80120dc:	2d01      	cmp	r5, #1
 80120de:	d04a      	beq.n	8012176 <ucdr_serialize_endian_uint16_t+0xe6>
 80120e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120e4:	703b      	strb	r3, [r7, #0]
 80120e6:	2e00      	cmp	r6, #0
 80120e8:	d040      	beq.n	801216c <ucdr_serialize_endian_uint16_t+0xdc>
 80120ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120ee:	707b      	strb	r3, [r7, #1]
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	2102      	movs	r1, #2
 80120f4:	68a2      	ldr	r2, [r4, #8]
 80120f6:	7da0      	ldrb	r0, [r4, #22]
 80120f8:	3302      	adds	r3, #2
 80120fa:	444a      	add	r2, r9
 80120fc:	7561      	strb	r1, [r4, #21]
 80120fe:	1b9b      	subs	r3, r3, r6
 8012100:	f080 0001 	eor.w	r0, r0, #1
 8012104:	60a2      	str	r2, [r4, #8]
 8012106:	6123      	str	r3, [r4, #16]
 8012108:	b003      	add	sp, #12
 801210a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801210e:	2102      	movs	r1, #2
 8012110:	4620      	mov	r0, r4
 8012112:	f001 f9a1 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012116:	b188      	cbz	r0, 801213c <ucdr_serialize_endian_uint16_t+0xac>
 8012118:	2d01      	cmp	r5, #1
 801211a:	68a3      	ldr	r3, [r4, #8]
 801211c:	d014      	beq.n	8012148 <ucdr_serialize_endian_uint16_t+0xb8>
 801211e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012122:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012126:	7019      	strb	r1, [r3, #0]
 8012128:	68a3      	ldr	r3, [r4, #8]
 801212a:	705a      	strb	r2, [r3, #1]
 801212c:	2102      	movs	r1, #2
 801212e:	68a2      	ldr	r2, [r4, #8]
 8012130:	6923      	ldr	r3, [r4, #16]
 8012132:	440a      	add	r2, r1
 8012134:	7561      	strb	r1, [r4, #21]
 8012136:	440b      	add	r3, r1
 8012138:	60a2      	str	r2, [r4, #8]
 801213a:	6123      	str	r3, [r4, #16]
 801213c:	7da0      	ldrb	r0, [r4, #22]
 801213e:	f080 0001 	eor.w	r0, r0, #1
 8012142:	b003      	add	sp, #12
 8012144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012148:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801214c:	801a      	strh	r2, [r3, #0]
 801214e:	e7ed      	b.n	801212c <ucdr_serialize_endian_uint16_t+0x9c>
 8012150:	68a2      	ldr	r2, [r4, #8]
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	7da0      	ldrb	r0, [r4, #22]
 8012156:	1b92      	subs	r2, r2, r6
 8012158:	1b9b      	subs	r3, r3, r6
 801215a:	f884 8015 	strb.w	r8, [r4, #21]
 801215e:	f080 0001 	eor.w	r0, r0, #1
 8012162:	60a2      	str	r2, [r4, #8]
 8012164:	6123      	str	r3, [r4, #16]
 8012166:	b003      	add	sp, #12
 8012168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801216c:	68a3      	ldr	r3, [r4, #8]
 801216e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012172:	701a      	strb	r2, [r3, #0]
 8012174:	e7bc      	b.n	80120f0 <ucdr_serialize_endian_uint16_t+0x60>
 8012176:	f10d 0506 	add.w	r5, sp, #6
 801217a:	4632      	mov	r2, r6
 801217c:	4638      	mov	r0, r7
 801217e:	4629      	mov	r1, r5
 8012180:	f00e ffe9 	bl	8021156 <memcpy>
 8012184:	464a      	mov	r2, r9
 8012186:	19a9      	adds	r1, r5, r6
 8012188:	68a0      	ldr	r0, [r4, #8]
 801218a:	f00e ffe4 	bl	8021156 <memcpy>
 801218e:	e7af      	b.n	80120f0 <ucdr_serialize_endian_uint16_t+0x60>

08012190 <ucdr_deserialize_uint16_t>:
 8012190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012194:	4604      	mov	r4, r0
 8012196:	460d      	mov	r5, r1
 8012198:	2102      	movs	r1, #2
 801219a:	f001 f9b1 	bl	8013500 <ucdr_buffer_alignment>
 801219e:	4601      	mov	r1, r0
 80121a0:	4620      	mov	r0, r4
 80121a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80121a6:	f001 f9f3 	bl	8013590 <ucdr_advance_buffer>
 80121aa:	2102      	movs	r1, #2
 80121ac:	4620      	mov	r0, r4
 80121ae:	f001 f947 	bl	8013440 <ucdr_check_buffer_available_for>
 80121b2:	bb60      	cbnz	r0, 801220e <ucdr_deserialize_uint16_t+0x7e>
 80121b4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80121b8:	42be      	cmp	r6, r7
 80121ba:	d923      	bls.n	8012204 <ucdr_deserialize_uint16_t+0x74>
 80121bc:	6923      	ldr	r3, [r4, #16]
 80121be:	4620      	mov	r0, r4
 80121c0:	60a6      	str	r6, [r4, #8]
 80121c2:	1bf6      	subs	r6, r6, r7
 80121c4:	4433      	add	r3, r6
 80121c6:	f1c6 0902 	rsb	r9, r6, #2
 80121ca:	6123      	str	r3, [r4, #16]
 80121cc:	4649      	mov	r1, r9
 80121ce:	f001 f943 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d034      	beq.n	8012240 <ucdr_deserialize_uint16_t+0xb0>
 80121d6:	7d23      	ldrb	r3, [r4, #20]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d042      	beq.n	8012262 <ucdr_deserialize_uint16_t+0xd2>
 80121dc:	787b      	ldrb	r3, [r7, #1]
 80121de:	702b      	strb	r3, [r5, #0]
 80121e0:	2e00      	cmp	r6, #0
 80121e2:	d03a      	beq.n	801225a <ucdr_deserialize_uint16_t+0xca>
 80121e4:	783b      	ldrb	r3, [r7, #0]
 80121e6:	706b      	strb	r3, [r5, #1]
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	2102      	movs	r1, #2
 80121ec:	68a2      	ldr	r2, [r4, #8]
 80121ee:	3302      	adds	r3, #2
 80121f0:	7da0      	ldrb	r0, [r4, #22]
 80121f2:	444a      	add	r2, r9
 80121f4:	7561      	strb	r1, [r4, #21]
 80121f6:	1b9b      	subs	r3, r3, r6
 80121f8:	f080 0001 	eor.w	r0, r0, #1
 80121fc:	60a2      	str	r2, [r4, #8]
 80121fe:	6123      	str	r3, [r4, #16]
 8012200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012204:	2102      	movs	r1, #2
 8012206:	4620      	mov	r0, r4
 8012208:	f001 f926 	bl	8013458 <ucdr_check_final_buffer_behavior>
 801220c:	b180      	cbz	r0, 8012230 <ucdr_deserialize_uint16_t+0xa0>
 801220e:	7d23      	ldrb	r3, [r4, #20]
 8012210:	2b01      	cmp	r3, #1
 8012212:	68a3      	ldr	r3, [r4, #8]
 8012214:	d011      	beq.n	801223a <ucdr_deserialize_uint16_t+0xaa>
 8012216:	785b      	ldrb	r3, [r3, #1]
 8012218:	702b      	strb	r3, [r5, #0]
 801221a:	68a3      	ldr	r3, [r4, #8]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	706b      	strb	r3, [r5, #1]
 8012220:	2102      	movs	r1, #2
 8012222:	68a2      	ldr	r2, [r4, #8]
 8012224:	6923      	ldr	r3, [r4, #16]
 8012226:	440a      	add	r2, r1
 8012228:	7561      	strb	r1, [r4, #21]
 801222a:	440b      	add	r3, r1
 801222c:	60a2      	str	r2, [r4, #8]
 801222e:	6123      	str	r3, [r4, #16]
 8012230:	7da0      	ldrb	r0, [r4, #22]
 8012232:	f080 0001 	eor.w	r0, r0, #1
 8012236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223a:	881b      	ldrh	r3, [r3, #0]
 801223c:	802b      	strh	r3, [r5, #0]
 801223e:	e7ef      	b.n	8012220 <ucdr_deserialize_uint16_t+0x90>
 8012240:	68a2      	ldr	r2, [r4, #8]
 8012242:	6923      	ldr	r3, [r4, #16]
 8012244:	1b92      	subs	r2, r2, r6
 8012246:	7da0      	ldrb	r0, [r4, #22]
 8012248:	1b9b      	subs	r3, r3, r6
 801224a:	f884 8015 	strb.w	r8, [r4, #21]
 801224e:	f080 0001 	eor.w	r0, r0, #1
 8012252:	60a2      	str	r2, [r4, #8]
 8012254:	6123      	str	r3, [r4, #16]
 8012256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225a:	68a3      	ldr	r3, [r4, #8]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	706b      	strb	r3, [r5, #1]
 8012260:	e7c2      	b.n	80121e8 <ucdr_deserialize_uint16_t+0x58>
 8012262:	4639      	mov	r1, r7
 8012264:	4632      	mov	r2, r6
 8012266:	4628      	mov	r0, r5
 8012268:	f00e ff75 	bl	8021156 <memcpy>
 801226c:	464a      	mov	r2, r9
 801226e:	19a8      	adds	r0, r5, r6
 8012270:	68a1      	ldr	r1, [r4, #8]
 8012272:	f00e ff70 	bl	8021156 <memcpy>
 8012276:	e7b7      	b.n	80121e8 <ucdr_deserialize_uint16_t+0x58>

08012278 <ucdr_deserialize_endian_uint16_t>:
 8012278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801227c:	4604      	mov	r4, r0
 801227e:	460e      	mov	r6, r1
 8012280:	2102      	movs	r1, #2
 8012282:	4615      	mov	r5, r2
 8012284:	f001 f93c 	bl	8013500 <ucdr_buffer_alignment>
 8012288:	4601      	mov	r1, r0
 801228a:	4620      	mov	r0, r4
 801228c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012290:	f001 f97e 	bl	8013590 <ucdr_advance_buffer>
 8012294:	2102      	movs	r1, #2
 8012296:	4620      	mov	r0, r4
 8012298:	f001 f8d2 	bl	8013440 <ucdr_check_buffer_available_for>
 801229c:	bb70      	cbnz	r0, 80122fc <ucdr_deserialize_endian_uint16_t+0x84>
 801229e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80122a2:	454f      	cmp	r7, r9
 80122a4:	d925      	bls.n	80122f2 <ucdr_deserialize_endian_uint16_t+0x7a>
 80122a6:	6923      	ldr	r3, [r4, #16]
 80122a8:	4620      	mov	r0, r4
 80122aa:	60a7      	str	r7, [r4, #8]
 80122ac:	eba7 0709 	sub.w	r7, r7, r9
 80122b0:	443b      	add	r3, r7
 80122b2:	f1c7 0a02 	rsb	sl, r7, #2
 80122b6:	6123      	str	r3, [r4, #16]
 80122b8:	4651      	mov	r1, sl
 80122ba:	f001 f8cd 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d034      	beq.n	801232c <ucdr_deserialize_endian_uint16_t+0xb4>
 80122c2:	2e01      	cmp	r6, #1
 80122c4:	d043      	beq.n	801234e <ucdr_deserialize_endian_uint16_t+0xd6>
 80122c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80122ca:	702b      	strb	r3, [r5, #0]
 80122cc:	2f00      	cmp	r7, #0
 80122ce:	d03a      	beq.n	8012346 <ucdr_deserialize_endian_uint16_t+0xce>
 80122d0:	f899 3000 	ldrb.w	r3, [r9]
 80122d4:	706b      	strb	r3, [r5, #1]
 80122d6:	6923      	ldr	r3, [r4, #16]
 80122d8:	2102      	movs	r1, #2
 80122da:	68a2      	ldr	r2, [r4, #8]
 80122dc:	3302      	adds	r3, #2
 80122de:	7da0      	ldrb	r0, [r4, #22]
 80122e0:	4452      	add	r2, sl
 80122e2:	7561      	strb	r1, [r4, #21]
 80122e4:	1bdb      	subs	r3, r3, r7
 80122e6:	f080 0001 	eor.w	r0, r0, #1
 80122ea:	60a2      	str	r2, [r4, #8]
 80122ec:	6123      	str	r3, [r4, #16]
 80122ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f2:	2102      	movs	r1, #2
 80122f4:	4620      	mov	r0, r4
 80122f6:	f001 f8af 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80122fa:	b178      	cbz	r0, 801231c <ucdr_deserialize_endian_uint16_t+0xa4>
 80122fc:	2e01      	cmp	r6, #1
 80122fe:	68a3      	ldr	r3, [r4, #8]
 8012300:	d011      	beq.n	8012326 <ucdr_deserialize_endian_uint16_t+0xae>
 8012302:	785b      	ldrb	r3, [r3, #1]
 8012304:	702b      	strb	r3, [r5, #0]
 8012306:	68a3      	ldr	r3, [r4, #8]
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	706b      	strb	r3, [r5, #1]
 801230c:	2102      	movs	r1, #2
 801230e:	68a2      	ldr	r2, [r4, #8]
 8012310:	6923      	ldr	r3, [r4, #16]
 8012312:	440a      	add	r2, r1
 8012314:	7561      	strb	r1, [r4, #21]
 8012316:	440b      	add	r3, r1
 8012318:	60a2      	str	r2, [r4, #8]
 801231a:	6123      	str	r3, [r4, #16]
 801231c:	7da0      	ldrb	r0, [r4, #22]
 801231e:	f080 0001 	eor.w	r0, r0, #1
 8012322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012326:	881b      	ldrh	r3, [r3, #0]
 8012328:	802b      	strh	r3, [r5, #0]
 801232a:	e7ef      	b.n	801230c <ucdr_deserialize_endian_uint16_t+0x94>
 801232c:	68a2      	ldr	r2, [r4, #8]
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	1bd2      	subs	r2, r2, r7
 8012332:	7da0      	ldrb	r0, [r4, #22]
 8012334:	1bdb      	subs	r3, r3, r7
 8012336:	f884 8015 	strb.w	r8, [r4, #21]
 801233a:	f080 0001 	eor.w	r0, r0, #1
 801233e:	60a2      	str	r2, [r4, #8]
 8012340:	6123      	str	r3, [r4, #16]
 8012342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012346:	68a3      	ldr	r3, [r4, #8]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	706b      	strb	r3, [r5, #1]
 801234c:	e7c3      	b.n	80122d6 <ucdr_deserialize_endian_uint16_t+0x5e>
 801234e:	4649      	mov	r1, r9
 8012350:	463a      	mov	r2, r7
 8012352:	4628      	mov	r0, r5
 8012354:	f00e feff 	bl	8021156 <memcpy>
 8012358:	4652      	mov	r2, sl
 801235a:	19e8      	adds	r0, r5, r7
 801235c:	68a1      	ldr	r1, [r4, #8]
 801235e:	f00e fefa 	bl	8021156 <memcpy>
 8012362:	e7b8      	b.n	80122d6 <ucdr_deserialize_endian_uint16_t+0x5e>

08012364 <ucdr_serialize_uint32_t>:
 8012364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012368:	b082      	sub	sp, #8
 801236a:	4604      	mov	r4, r0
 801236c:	9101      	str	r1, [sp, #4]
 801236e:	2104      	movs	r1, #4
 8012370:	f001 f8c6 	bl	8013500 <ucdr_buffer_alignment>
 8012374:	4601      	mov	r1, r0
 8012376:	4620      	mov	r0, r4
 8012378:	7d67      	ldrb	r7, [r4, #21]
 801237a:	f001 f909 	bl	8013590 <ucdr_advance_buffer>
 801237e:	2104      	movs	r1, #4
 8012380:	4620      	mov	r0, r4
 8012382:	f001 f85d 	bl	8013440 <ucdr_check_buffer_available_for>
 8012386:	2800      	cmp	r0, #0
 8012388:	d139      	bne.n	80123fe <ucdr_serialize_uint32_t+0x9a>
 801238a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801238e:	42ab      	cmp	r3, r5
 8012390:	d930      	bls.n	80123f4 <ucdr_serialize_uint32_t+0x90>
 8012392:	1b5e      	subs	r6, r3, r5
 8012394:	60a3      	str	r3, [r4, #8]
 8012396:	6923      	ldr	r3, [r4, #16]
 8012398:	4620      	mov	r0, r4
 801239a:	f1c6 0804 	rsb	r8, r6, #4
 801239e:	4433      	add	r3, r6
 80123a0:	4641      	mov	r1, r8
 80123a2:	6123      	str	r3, [r4, #16]
 80123a4:	f001 f858 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d04c      	beq.n	8012446 <ucdr_serialize_uint32_t+0xe2>
 80123ac:	7d23      	ldrb	r3, [r4, #20]
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d063      	beq.n	801247a <ucdr_serialize_uint32_t+0x116>
 80123b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80123b6:	702b      	strb	r3, [r5, #0]
 80123b8:	2e00      	cmp	r6, #0
 80123ba:	d051      	beq.n	8012460 <ucdr_serialize_uint32_t+0xfc>
 80123bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80123c0:	2e01      	cmp	r6, #1
 80123c2:	706b      	strb	r3, [r5, #1]
 80123c4:	d050      	beq.n	8012468 <ucdr_serialize_uint32_t+0x104>
 80123c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80123ca:	2e02      	cmp	r6, #2
 80123cc:	70ab      	strb	r3, [r5, #2]
 80123ce:	d04f      	beq.n	8012470 <ucdr_serialize_uint32_t+0x10c>
 80123d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80123d4:	70eb      	strb	r3, [r5, #3]
 80123d6:	6923      	ldr	r3, [r4, #16]
 80123d8:	2104      	movs	r1, #4
 80123da:	68a2      	ldr	r2, [r4, #8]
 80123dc:	3304      	adds	r3, #4
 80123de:	7da0      	ldrb	r0, [r4, #22]
 80123e0:	4442      	add	r2, r8
 80123e2:	7561      	strb	r1, [r4, #21]
 80123e4:	1b9e      	subs	r6, r3, r6
 80123e6:	f080 0001 	eor.w	r0, r0, #1
 80123ea:	60a2      	str	r2, [r4, #8]
 80123ec:	6126      	str	r6, [r4, #16]
 80123ee:	b002      	add	sp, #8
 80123f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f4:	2104      	movs	r1, #4
 80123f6:	4620      	mov	r0, r4
 80123f8:	f001 f82e 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80123fc:	b1d0      	cbz	r0, 8012434 <ucdr_serialize_uint32_t+0xd0>
 80123fe:	7d23      	ldrb	r3, [r4, #20]
 8012400:	2b01      	cmp	r3, #1
 8012402:	68a3      	ldr	r3, [r4, #8]
 8012404:	d01c      	beq.n	8012440 <ucdr_serialize_uint32_t+0xdc>
 8012406:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801240a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801240e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012412:	7018      	strb	r0, [r3, #0]
 8012414:	68a3      	ldr	r3, [r4, #8]
 8012416:	705a      	strb	r2, [r3, #1]
 8012418:	68a3      	ldr	r3, [r4, #8]
 801241a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801241e:	7099      	strb	r1, [r3, #2]
 8012420:	68a3      	ldr	r3, [r4, #8]
 8012422:	70da      	strb	r2, [r3, #3]
 8012424:	2104      	movs	r1, #4
 8012426:	68a2      	ldr	r2, [r4, #8]
 8012428:	6923      	ldr	r3, [r4, #16]
 801242a:	440a      	add	r2, r1
 801242c:	7561      	strb	r1, [r4, #21]
 801242e:	440b      	add	r3, r1
 8012430:	60a2      	str	r2, [r4, #8]
 8012432:	6123      	str	r3, [r4, #16]
 8012434:	7da0      	ldrb	r0, [r4, #22]
 8012436:	f080 0001 	eor.w	r0, r0, #1
 801243a:	b002      	add	sp, #8
 801243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012440:	9a01      	ldr	r2, [sp, #4]
 8012442:	601a      	str	r2, [r3, #0]
 8012444:	e7ee      	b.n	8012424 <ucdr_serialize_uint32_t+0xc0>
 8012446:	68a2      	ldr	r2, [r4, #8]
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	7da0      	ldrb	r0, [r4, #22]
 801244c:	1b92      	subs	r2, r2, r6
 801244e:	1b9b      	subs	r3, r3, r6
 8012450:	7567      	strb	r7, [r4, #21]
 8012452:	f080 0001 	eor.w	r0, r0, #1
 8012456:	60a2      	str	r2, [r4, #8]
 8012458:	6123      	str	r3, [r4, #16]
 801245a:	b002      	add	sp, #8
 801245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012460:	68a3      	ldr	r3, [r4, #8]
 8012462:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012466:	701a      	strb	r2, [r3, #0]
 8012468:	68a3      	ldr	r3, [r4, #8]
 801246a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801246e:	701a      	strb	r2, [r3, #0]
 8012470:	68a3      	ldr	r3, [r4, #8]
 8012472:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012476:	701a      	strb	r2, [r3, #0]
 8012478:	e7ad      	b.n	80123d6 <ucdr_serialize_uint32_t+0x72>
 801247a:	4628      	mov	r0, r5
 801247c:	ad01      	add	r5, sp, #4
 801247e:	4632      	mov	r2, r6
 8012480:	4629      	mov	r1, r5
 8012482:	f00e fe68 	bl	8021156 <memcpy>
 8012486:	4642      	mov	r2, r8
 8012488:	19a9      	adds	r1, r5, r6
 801248a:	68a0      	ldr	r0, [r4, #8]
 801248c:	f00e fe63 	bl	8021156 <memcpy>
 8012490:	e7a1      	b.n	80123d6 <ucdr_serialize_uint32_t+0x72>
 8012492:	bf00      	nop

08012494 <ucdr_serialize_endian_uint32_t>:
 8012494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012498:	4604      	mov	r4, r0
 801249a:	b083      	sub	sp, #12
 801249c:	460d      	mov	r5, r1
 801249e:	2104      	movs	r1, #4
 80124a0:	9201      	str	r2, [sp, #4]
 80124a2:	f001 f82d 	bl	8013500 <ucdr_buffer_alignment>
 80124a6:	4601      	mov	r1, r0
 80124a8:	4620      	mov	r0, r4
 80124aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80124ae:	f001 f86f 	bl	8013590 <ucdr_advance_buffer>
 80124b2:	2104      	movs	r1, #4
 80124b4:	4620      	mov	r0, r4
 80124b6:	f000 ffc3 	bl	8013440 <ucdr_check_buffer_available_for>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d138      	bne.n	8012530 <ucdr_serialize_endian_uint32_t+0x9c>
 80124be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80124c2:	42b7      	cmp	r7, r6
 80124c4:	d92f      	bls.n	8012526 <ucdr_serialize_endian_uint32_t+0x92>
 80124c6:	6923      	ldr	r3, [r4, #16]
 80124c8:	4620      	mov	r0, r4
 80124ca:	60a7      	str	r7, [r4, #8]
 80124cc:	1bbf      	subs	r7, r7, r6
 80124ce:	443b      	add	r3, r7
 80124d0:	f1c7 0904 	rsb	r9, r7, #4
 80124d4:	6123      	str	r3, [r4, #16]
 80124d6:	4649      	mov	r1, r9
 80124d8:	f000 ffbe 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80124dc:	2800      	cmp	r0, #0
 80124de:	d04a      	beq.n	8012576 <ucdr_serialize_endian_uint32_t+0xe2>
 80124e0:	2d01      	cmp	r5, #1
 80124e2:	d063      	beq.n	80125ac <ucdr_serialize_endian_uint32_t+0x118>
 80124e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80124e8:	7033      	strb	r3, [r6, #0]
 80124ea:	2f00      	cmp	r7, #0
 80124ec:	d051      	beq.n	8012592 <ucdr_serialize_endian_uint32_t+0xfe>
 80124ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80124f2:	2f01      	cmp	r7, #1
 80124f4:	7073      	strb	r3, [r6, #1]
 80124f6:	d050      	beq.n	801259a <ucdr_serialize_endian_uint32_t+0x106>
 80124f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80124fc:	2f02      	cmp	r7, #2
 80124fe:	70b3      	strb	r3, [r6, #2]
 8012500:	d04f      	beq.n	80125a2 <ucdr_serialize_endian_uint32_t+0x10e>
 8012502:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012506:	70f3      	strb	r3, [r6, #3]
 8012508:	6923      	ldr	r3, [r4, #16]
 801250a:	2104      	movs	r1, #4
 801250c:	68a2      	ldr	r2, [r4, #8]
 801250e:	7da0      	ldrb	r0, [r4, #22]
 8012510:	3304      	adds	r3, #4
 8012512:	444a      	add	r2, r9
 8012514:	7561      	strb	r1, [r4, #21]
 8012516:	1bdb      	subs	r3, r3, r7
 8012518:	f080 0001 	eor.w	r0, r0, #1
 801251c:	60a2      	str	r2, [r4, #8]
 801251e:	6123      	str	r3, [r4, #16]
 8012520:	b003      	add	sp, #12
 8012522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012526:	2104      	movs	r1, #4
 8012528:	4620      	mov	r0, r4
 801252a:	f000 ff95 	bl	8013458 <ucdr_check_final_buffer_behavior>
 801252e:	b1c8      	cbz	r0, 8012564 <ucdr_serialize_endian_uint32_t+0xd0>
 8012530:	2d01      	cmp	r5, #1
 8012532:	68a3      	ldr	r3, [r4, #8]
 8012534:	d01c      	beq.n	8012570 <ucdr_serialize_endian_uint32_t+0xdc>
 8012536:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801253a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801253e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012542:	7018      	strb	r0, [r3, #0]
 8012544:	68a3      	ldr	r3, [r4, #8]
 8012546:	705a      	strb	r2, [r3, #1]
 8012548:	68a3      	ldr	r3, [r4, #8]
 801254a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801254e:	7099      	strb	r1, [r3, #2]
 8012550:	68a3      	ldr	r3, [r4, #8]
 8012552:	70da      	strb	r2, [r3, #3]
 8012554:	2104      	movs	r1, #4
 8012556:	68a2      	ldr	r2, [r4, #8]
 8012558:	6923      	ldr	r3, [r4, #16]
 801255a:	440a      	add	r2, r1
 801255c:	7561      	strb	r1, [r4, #21]
 801255e:	440b      	add	r3, r1
 8012560:	60a2      	str	r2, [r4, #8]
 8012562:	6123      	str	r3, [r4, #16]
 8012564:	7da0      	ldrb	r0, [r4, #22]
 8012566:	f080 0001 	eor.w	r0, r0, #1
 801256a:	b003      	add	sp, #12
 801256c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012570:	9a01      	ldr	r2, [sp, #4]
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	e7ee      	b.n	8012554 <ucdr_serialize_endian_uint32_t+0xc0>
 8012576:	68a2      	ldr	r2, [r4, #8]
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	7da0      	ldrb	r0, [r4, #22]
 801257c:	1bd2      	subs	r2, r2, r7
 801257e:	1bdb      	subs	r3, r3, r7
 8012580:	f884 8015 	strb.w	r8, [r4, #21]
 8012584:	f080 0001 	eor.w	r0, r0, #1
 8012588:	60a2      	str	r2, [r4, #8]
 801258a:	6123      	str	r3, [r4, #16]
 801258c:	b003      	add	sp, #12
 801258e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012592:	68a3      	ldr	r3, [r4, #8]
 8012594:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012598:	701a      	strb	r2, [r3, #0]
 801259a:	68a3      	ldr	r3, [r4, #8]
 801259c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125a0:	701a      	strb	r2, [r3, #0]
 80125a2:	68a3      	ldr	r3, [r4, #8]
 80125a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125a8:	701a      	strb	r2, [r3, #0]
 80125aa:	e7ad      	b.n	8012508 <ucdr_serialize_endian_uint32_t+0x74>
 80125ac:	ad01      	add	r5, sp, #4
 80125ae:	463a      	mov	r2, r7
 80125b0:	4630      	mov	r0, r6
 80125b2:	4629      	mov	r1, r5
 80125b4:	f00e fdcf 	bl	8021156 <memcpy>
 80125b8:	464a      	mov	r2, r9
 80125ba:	19e9      	adds	r1, r5, r7
 80125bc:	68a0      	ldr	r0, [r4, #8]
 80125be:	f00e fdca 	bl	8021156 <memcpy>
 80125c2:	e7a1      	b.n	8012508 <ucdr_serialize_endian_uint32_t+0x74>

080125c4 <ucdr_deserialize_uint32_t>:
 80125c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125c8:	4604      	mov	r4, r0
 80125ca:	460d      	mov	r5, r1
 80125cc:	2104      	movs	r1, #4
 80125ce:	f000 ff97 	bl	8013500 <ucdr_buffer_alignment>
 80125d2:	4601      	mov	r1, r0
 80125d4:	4620      	mov	r0, r4
 80125d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80125da:	f000 ffd9 	bl	8013590 <ucdr_advance_buffer>
 80125de:	2104      	movs	r1, #4
 80125e0:	4620      	mov	r0, r4
 80125e2:	f000 ff2d 	bl	8013440 <ucdr_check_buffer_available_for>
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d138      	bne.n	801265c <ucdr_deserialize_uint32_t+0x98>
 80125ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80125ee:	42b7      	cmp	r7, r6
 80125f0:	d92f      	bls.n	8012652 <ucdr_deserialize_uint32_t+0x8e>
 80125f2:	6923      	ldr	r3, [r4, #16]
 80125f4:	4620      	mov	r0, r4
 80125f6:	60a7      	str	r7, [r4, #8]
 80125f8:	1bbf      	subs	r7, r7, r6
 80125fa:	443b      	add	r3, r7
 80125fc:	f1c7 0904 	rsb	r9, r7, #4
 8012600:	6123      	str	r3, [r4, #16]
 8012602:	4649      	mov	r1, r9
 8012604:	f000 ff28 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012608:	2800      	cmp	r0, #0
 801260a:	d046      	beq.n	801269a <ucdr_deserialize_uint32_t+0xd6>
 801260c:	7d23      	ldrb	r3, [r4, #20]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d05c      	beq.n	80126cc <ucdr_deserialize_uint32_t+0x108>
 8012612:	78f3      	ldrb	r3, [r6, #3]
 8012614:	702b      	strb	r3, [r5, #0]
 8012616:	2f00      	cmp	r7, #0
 8012618:	d04c      	beq.n	80126b4 <ucdr_deserialize_uint32_t+0xf0>
 801261a:	78b3      	ldrb	r3, [r6, #2]
 801261c:	2f01      	cmp	r7, #1
 801261e:	706b      	strb	r3, [r5, #1]
 8012620:	f105 0302 	add.w	r3, r5, #2
 8012624:	d04a      	beq.n	80126bc <ucdr_deserialize_uint32_t+0xf8>
 8012626:	7873      	ldrb	r3, [r6, #1]
 8012628:	2f02      	cmp	r7, #2
 801262a:	70ab      	strb	r3, [r5, #2]
 801262c:	f105 0303 	add.w	r3, r5, #3
 8012630:	d048      	beq.n	80126c4 <ucdr_deserialize_uint32_t+0x100>
 8012632:	7833      	ldrb	r3, [r6, #0]
 8012634:	70eb      	strb	r3, [r5, #3]
 8012636:	6923      	ldr	r3, [r4, #16]
 8012638:	2104      	movs	r1, #4
 801263a:	68a2      	ldr	r2, [r4, #8]
 801263c:	3304      	adds	r3, #4
 801263e:	7da0      	ldrb	r0, [r4, #22]
 8012640:	444a      	add	r2, r9
 8012642:	7561      	strb	r1, [r4, #21]
 8012644:	1bdb      	subs	r3, r3, r7
 8012646:	f080 0001 	eor.w	r0, r0, #1
 801264a:	60a2      	str	r2, [r4, #8]
 801264c:	6123      	str	r3, [r4, #16]
 801264e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012652:	2104      	movs	r1, #4
 8012654:	4620      	mov	r0, r4
 8012656:	f000 feff 	bl	8013458 <ucdr_check_final_buffer_behavior>
 801265a:	b1b0      	cbz	r0, 801268a <ucdr_deserialize_uint32_t+0xc6>
 801265c:	7d23      	ldrb	r3, [r4, #20]
 801265e:	2b01      	cmp	r3, #1
 8012660:	68a3      	ldr	r3, [r4, #8]
 8012662:	d017      	beq.n	8012694 <ucdr_deserialize_uint32_t+0xd0>
 8012664:	78db      	ldrb	r3, [r3, #3]
 8012666:	702b      	strb	r3, [r5, #0]
 8012668:	68a3      	ldr	r3, [r4, #8]
 801266a:	789b      	ldrb	r3, [r3, #2]
 801266c:	706b      	strb	r3, [r5, #1]
 801266e:	68a3      	ldr	r3, [r4, #8]
 8012670:	785b      	ldrb	r3, [r3, #1]
 8012672:	70ab      	strb	r3, [r5, #2]
 8012674:	68a3      	ldr	r3, [r4, #8]
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	70eb      	strb	r3, [r5, #3]
 801267a:	2104      	movs	r1, #4
 801267c:	68a2      	ldr	r2, [r4, #8]
 801267e:	6923      	ldr	r3, [r4, #16]
 8012680:	440a      	add	r2, r1
 8012682:	7561      	strb	r1, [r4, #21]
 8012684:	440b      	add	r3, r1
 8012686:	60a2      	str	r2, [r4, #8]
 8012688:	6123      	str	r3, [r4, #16]
 801268a:	7da0      	ldrb	r0, [r4, #22]
 801268c:	f080 0001 	eor.w	r0, r0, #1
 8012690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	602b      	str	r3, [r5, #0]
 8012698:	e7ef      	b.n	801267a <ucdr_deserialize_uint32_t+0xb6>
 801269a:	68a2      	ldr	r2, [r4, #8]
 801269c:	6923      	ldr	r3, [r4, #16]
 801269e:	1bd2      	subs	r2, r2, r7
 80126a0:	7da0      	ldrb	r0, [r4, #22]
 80126a2:	1bdb      	subs	r3, r3, r7
 80126a4:	f884 8015 	strb.w	r8, [r4, #21]
 80126a8:	f080 0001 	eor.w	r0, r0, #1
 80126ac:	60a2      	str	r2, [r4, #8]
 80126ae:	6123      	str	r3, [r4, #16]
 80126b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126b4:	68a3      	ldr	r3, [r4, #8]
 80126b6:	789b      	ldrb	r3, [r3, #2]
 80126b8:	706b      	strb	r3, [r5, #1]
 80126ba:	1cab      	adds	r3, r5, #2
 80126bc:	68a2      	ldr	r2, [r4, #8]
 80126be:	7852      	ldrb	r2, [r2, #1]
 80126c0:	f803 2b01 	strb.w	r2, [r3], #1
 80126c4:	68a2      	ldr	r2, [r4, #8]
 80126c6:	7812      	ldrb	r2, [r2, #0]
 80126c8:	701a      	strb	r2, [r3, #0]
 80126ca:	e7b4      	b.n	8012636 <ucdr_deserialize_uint32_t+0x72>
 80126cc:	4631      	mov	r1, r6
 80126ce:	463a      	mov	r2, r7
 80126d0:	4628      	mov	r0, r5
 80126d2:	f00e fd40 	bl	8021156 <memcpy>
 80126d6:	464a      	mov	r2, r9
 80126d8:	19e8      	adds	r0, r5, r7
 80126da:	68a1      	ldr	r1, [r4, #8]
 80126dc:	f00e fd3b 	bl	8021156 <memcpy>
 80126e0:	e7a9      	b.n	8012636 <ucdr_deserialize_uint32_t+0x72>
 80126e2:	bf00      	nop

080126e4 <ucdr_deserialize_endian_uint32_t>:
 80126e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126e8:	4604      	mov	r4, r0
 80126ea:	460e      	mov	r6, r1
 80126ec:	2104      	movs	r1, #4
 80126ee:	4615      	mov	r5, r2
 80126f0:	f000 ff06 	bl	8013500 <ucdr_buffer_alignment>
 80126f4:	4601      	mov	r1, r0
 80126f6:	4620      	mov	r0, r4
 80126f8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80126fc:	f000 ff48 	bl	8013590 <ucdr_advance_buffer>
 8012700:	2104      	movs	r1, #4
 8012702:	4620      	mov	r0, r4
 8012704:	f000 fe9c 	bl	8013440 <ucdr_check_buffer_available_for>
 8012708:	2800      	cmp	r0, #0
 801270a:	d13c      	bne.n	8012786 <ucdr_deserialize_endian_uint32_t+0xa2>
 801270c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012710:	42bb      	cmp	r3, r7
 8012712:	d933      	bls.n	801277c <ucdr_deserialize_endian_uint32_t+0x98>
 8012714:	eba3 0907 	sub.w	r9, r3, r7
 8012718:	60a3      	str	r3, [r4, #8]
 801271a:	6923      	ldr	r3, [r4, #16]
 801271c:	4620      	mov	r0, r4
 801271e:	f1c9 0a04 	rsb	sl, r9, #4
 8012722:	444b      	add	r3, r9
 8012724:	4651      	mov	r1, sl
 8012726:	6123      	str	r3, [r4, #16]
 8012728:	f000 fe96 	bl	8013458 <ucdr_check_final_buffer_behavior>
 801272c:	2800      	cmp	r0, #0
 801272e:	d048      	beq.n	80127c2 <ucdr_deserialize_endian_uint32_t+0xde>
 8012730:	2e01      	cmp	r6, #1
 8012732:	d061      	beq.n	80127f8 <ucdr_deserialize_endian_uint32_t+0x114>
 8012734:	78fb      	ldrb	r3, [r7, #3]
 8012736:	702b      	strb	r3, [r5, #0]
 8012738:	f1b9 0f00 	cmp.w	r9, #0
 801273c:	d050      	beq.n	80127e0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801273e:	78bb      	ldrb	r3, [r7, #2]
 8012740:	f1b9 0f01 	cmp.w	r9, #1
 8012744:	706b      	strb	r3, [r5, #1]
 8012746:	f105 0302 	add.w	r3, r5, #2
 801274a:	d04d      	beq.n	80127e8 <ucdr_deserialize_endian_uint32_t+0x104>
 801274c:	787b      	ldrb	r3, [r7, #1]
 801274e:	f1b9 0f02 	cmp.w	r9, #2
 8012752:	70ab      	strb	r3, [r5, #2]
 8012754:	f105 0303 	add.w	r3, r5, #3
 8012758:	d04a      	beq.n	80127f0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801275a:	783b      	ldrb	r3, [r7, #0]
 801275c:	70eb      	strb	r3, [r5, #3]
 801275e:	6923      	ldr	r3, [r4, #16]
 8012760:	2104      	movs	r1, #4
 8012762:	68a2      	ldr	r2, [r4, #8]
 8012764:	3304      	adds	r3, #4
 8012766:	7da0      	ldrb	r0, [r4, #22]
 8012768:	4452      	add	r2, sl
 801276a:	7561      	strb	r1, [r4, #21]
 801276c:	eba3 0309 	sub.w	r3, r3, r9
 8012770:	f080 0001 	eor.w	r0, r0, #1
 8012774:	60a2      	str	r2, [r4, #8]
 8012776:	6123      	str	r3, [r4, #16]
 8012778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277c:	2104      	movs	r1, #4
 801277e:	4620      	mov	r0, r4
 8012780:	f000 fe6a 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012784:	b1a8      	cbz	r0, 80127b2 <ucdr_deserialize_endian_uint32_t+0xce>
 8012786:	2e01      	cmp	r6, #1
 8012788:	68a3      	ldr	r3, [r4, #8]
 801278a:	d017      	beq.n	80127bc <ucdr_deserialize_endian_uint32_t+0xd8>
 801278c:	78db      	ldrb	r3, [r3, #3]
 801278e:	702b      	strb	r3, [r5, #0]
 8012790:	68a3      	ldr	r3, [r4, #8]
 8012792:	789b      	ldrb	r3, [r3, #2]
 8012794:	706b      	strb	r3, [r5, #1]
 8012796:	68a3      	ldr	r3, [r4, #8]
 8012798:	785b      	ldrb	r3, [r3, #1]
 801279a:	70ab      	strb	r3, [r5, #2]
 801279c:	68a3      	ldr	r3, [r4, #8]
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	70eb      	strb	r3, [r5, #3]
 80127a2:	2104      	movs	r1, #4
 80127a4:	68a2      	ldr	r2, [r4, #8]
 80127a6:	6923      	ldr	r3, [r4, #16]
 80127a8:	440a      	add	r2, r1
 80127aa:	7561      	strb	r1, [r4, #21]
 80127ac:	440b      	add	r3, r1
 80127ae:	60a2      	str	r2, [r4, #8]
 80127b0:	6123      	str	r3, [r4, #16]
 80127b2:	7da0      	ldrb	r0, [r4, #22]
 80127b4:	f080 0001 	eor.w	r0, r0, #1
 80127b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	602b      	str	r3, [r5, #0]
 80127c0:	e7ef      	b.n	80127a2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80127c2:	68a2      	ldr	r2, [r4, #8]
 80127c4:	6923      	ldr	r3, [r4, #16]
 80127c6:	eba2 0209 	sub.w	r2, r2, r9
 80127ca:	7da0      	ldrb	r0, [r4, #22]
 80127cc:	eba3 0309 	sub.w	r3, r3, r9
 80127d0:	f884 8015 	strb.w	r8, [r4, #21]
 80127d4:	f080 0001 	eor.w	r0, r0, #1
 80127d8:	60a2      	str	r2, [r4, #8]
 80127da:	6123      	str	r3, [r4, #16]
 80127dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127e0:	68a3      	ldr	r3, [r4, #8]
 80127e2:	789b      	ldrb	r3, [r3, #2]
 80127e4:	706b      	strb	r3, [r5, #1]
 80127e6:	1cab      	adds	r3, r5, #2
 80127e8:	68a2      	ldr	r2, [r4, #8]
 80127ea:	7852      	ldrb	r2, [r2, #1]
 80127ec:	f803 2b01 	strb.w	r2, [r3], #1
 80127f0:	68a2      	ldr	r2, [r4, #8]
 80127f2:	7812      	ldrb	r2, [r2, #0]
 80127f4:	701a      	strb	r2, [r3, #0]
 80127f6:	e7b2      	b.n	801275e <ucdr_deserialize_endian_uint32_t+0x7a>
 80127f8:	4639      	mov	r1, r7
 80127fa:	464a      	mov	r2, r9
 80127fc:	4628      	mov	r0, r5
 80127fe:	f00e fcaa 	bl	8021156 <memcpy>
 8012802:	4652      	mov	r2, sl
 8012804:	eb05 0009 	add.w	r0, r5, r9
 8012808:	68a1      	ldr	r1, [r4, #8]
 801280a:	f00e fca4 	bl	8021156 <memcpy>
 801280e:	e7a6      	b.n	801275e <ucdr_deserialize_endian_uint32_t+0x7a>

08012810 <ucdr_serialize_uint64_t>:
 8012810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012814:	4604      	mov	r4, r0
 8012816:	b082      	sub	sp, #8
 8012818:	2108      	movs	r1, #8
 801281a:	e9cd 2300 	strd	r2, r3, [sp]
 801281e:	f000 fe6f 	bl	8013500 <ucdr_buffer_alignment>
 8012822:	4601      	mov	r1, r0
 8012824:	4620      	mov	r0, r4
 8012826:	7d67      	ldrb	r7, [r4, #21]
 8012828:	f000 feb2 	bl	8013590 <ucdr_advance_buffer>
 801282c:	2108      	movs	r1, #8
 801282e:	4620      	mov	r0, r4
 8012830:	f000 fe06 	bl	8013440 <ucdr_check_buffer_available_for>
 8012834:	2800      	cmp	r0, #0
 8012836:	d14e      	bne.n	80128d6 <ucdr_serialize_uint64_t+0xc6>
 8012838:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801283c:	42ab      	cmp	r3, r5
 801283e:	d945      	bls.n	80128cc <ucdr_serialize_uint64_t+0xbc>
 8012840:	1b5e      	subs	r6, r3, r5
 8012842:	60a3      	str	r3, [r4, #8]
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	4620      	mov	r0, r4
 8012848:	f1c6 0808 	rsb	r8, r6, #8
 801284c:	4433      	add	r3, r6
 801284e:	4641      	mov	r1, r8
 8012850:	6123      	str	r3, [r4, #16]
 8012852:	f000 fe01 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012856:	2800      	cmp	r0, #0
 8012858:	d074      	beq.n	8012944 <ucdr_serialize_uint64_t+0x134>
 801285a:	7d23      	ldrb	r3, [r4, #20]
 801285c:	2b01      	cmp	r3, #1
 801285e:	f000 809b 	beq.w	8012998 <ucdr_serialize_uint64_t+0x188>
 8012862:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012866:	702b      	strb	r3, [r5, #0]
 8012868:	2e00      	cmp	r6, #0
 801286a:	d078      	beq.n	801295e <ucdr_serialize_uint64_t+0x14e>
 801286c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012870:	2e01      	cmp	r6, #1
 8012872:	706b      	strb	r3, [r5, #1]
 8012874:	d077      	beq.n	8012966 <ucdr_serialize_uint64_t+0x156>
 8012876:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801287a:	2e02      	cmp	r6, #2
 801287c:	70ab      	strb	r3, [r5, #2]
 801287e:	d076      	beq.n	801296e <ucdr_serialize_uint64_t+0x15e>
 8012880:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012884:	2e03      	cmp	r6, #3
 8012886:	70eb      	strb	r3, [r5, #3]
 8012888:	d075      	beq.n	8012976 <ucdr_serialize_uint64_t+0x166>
 801288a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801288e:	2e04      	cmp	r6, #4
 8012890:	712b      	strb	r3, [r5, #4]
 8012892:	d074      	beq.n	801297e <ucdr_serialize_uint64_t+0x16e>
 8012894:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012898:	2e05      	cmp	r6, #5
 801289a:	716b      	strb	r3, [r5, #5]
 801289c:	d073      	beq.n	8012986 <ucdr_serialize_uint64_t+0x176>
 801289e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80128a2:	2e06      	cmp	r6, #6
 80128a4:	71ab      	strb	r3, [r5, #6]
 80128a6:	d072      	beq.n	801298e <ucdr_serialize_uint64_t+0x17e>
 80128a8:	f89d 3000 	ldrb.w	r3, [sp]
 80128ac:	71eb      	strb	r3, [r5, #7]
 80128ae:	6923      	ldr	r3, [r4, #16]
 80128b0:	2108      	movs	r1, #8
 80128b2:	68a2      	ldr	r2, [r4, #8]
 80128b4:	3308      	adds	r3, #8
 80128b6:	7da0      	ldrb	r0, [r4, #22]
 80128b8:	4442      	add	r2, r8
 80128ba:	7561      	strb	r1, [r4, #21]
 80128bc:	1b9e      	subs	r6, r3, r6
 80128be:	f080 0001 	eor.w	r0, r0, #1
 80128c2:	60a2      	str	r2, [r4, #8]
 80128c4:	6126      	str	r6, [r4, #16]
 80128c6:	b002      	add	sp, #8
 80128c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128cc:	2108      	movs	r1, #8
 80128ce:	4620      	mov	r0, r4
 80128d0:	f000 fdc2 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80128d4:	b350      	cbz	r0, 801292c <ucdr_serialize_uint64_t+0x11c>
 80128d6:	7d23      	ldrb	r3, [r4, #20]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d02d      	beq.n	8012938 <ucdr_serialize_uint64_t+0x128>
 80128dc:	68a3      	ldr	r3, [r4, #8]
 80128de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80128e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80128ea:	7018      	strb	r0, [r3, #0]
 80128ec:	68a3      	ldr	r3, [r4, #8]
 80128ee:	705a      	strb	r2, [r3, #1]
 80128f0:	68a3      	ldr	r3, [r4, #8]
 80128f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80128f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80128fa:	7099      	strb	r1, [r3, #2]
 80128fc:	68a3      	ldr	r3, [r4, #8]
 80128fe:	70da      	strb	r2, [r3, #3]
 8012900:	68a3      	ldr	r3, [r4, #8]
 8012902:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012906:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801290a:	7118      	strb	r0, [r3, #4]
 801290c:	68a3      	ldr	r3, [r4, #8]
 801290e:	715a      	strb	r2, [r3, #5]
 8012910:	68a3      	ldr	r3, [r4, #8]
 8012912:	f89d 2000 	ldrb.w	r2, [sp]
 8012916:	7199      	strb	r1, [r3, #6]
 8012918:	68a3      	ldr	r3, [r4, #8]
 801291a:	71da      	strb	r2, [r3, #7]
 801291c:	2108      	movs	r1, #8
 801291e:	68a2      	ldr	r2, [r4, #8]
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	440a      	add	r2, r1
 8012924:	7561      	strb	r1, [r4, #21]
 8012926:	440b      	add	r3, r1
 8012928:	60a2      	str	r2, [r4, #8]
 801292a:	6123      	str	r3, [r4, #16]
 801292c:	7da0      	ldrb	r0, [r4, #22]
 801292e:	f080 0001 	eor.w	r0, r0, #1
 8012932:	b002      	add	sp, #8
 8012934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012938:	466b      	mov	r3, sp
 801293a:	68a2      	ldr	r2, [r4, #8]
 801293c:	cb03      	ldmia	r3!, {r0, r1}
 801293e:	6010      	str	r0, [r2, #0]
 8012940:	6051      	str	r1, [r2, #4]
 8012942:	e7eb      	b.n	801291c <ucdr_serialize_uint64_t+0x10c>
 8012944:	68a2      	ldr	r2, [r4, #8]
 8012946:	6923      	ldr	r3, [r4, #16]
 8012948:	7da0      	ldrb	r0, [r4, #22]
 801294a:	1b92      	subs	r2, r2, r6
 801294c:	1b9b      	subs	r3, r3, r6
 801294e:	7567      	strb	r7, [r4, #21]
 8012950:	f080 0001 	eor.w	r0, r0, #1
 8012954:	60a2      	str	r2, [r4, #8]
 8012956:	6123      	str	r3, [r4, #16]
 8012958:	b002      	add	sp, #8
 801295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801295e:	68a3      	ldr	r3, [r4, #8]
 8012960:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012964:	701a      	strb	r2, [r3, #0]
 8012966:	68a3      	ldr	r3, [r4, #8]
 8012968:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801296c:	701a      	strb	r2, [r3, #0]
 801296e:	68a3      	ldr	r3, [r4, #8]
 8012970:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012974:	701a      	strb	r2, [r3, #0]
 8012976:	68a3      	ldr	r3, [r4, #8]
 8012978:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801297c:	701a      	strb	r2, [r3, #0]
 801297e:	68a3      	ldr	r3, [r4, #8]
 8012980:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012984:	701a      	strb	r2, [r3, #0]
 8012986:	68a3      	ldr	r3, [r4, #8]
 8012988:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801298c:	701a      	strb	r2, [r3, #0]
 801298e:	68a3      	ldr	r3, [r4, #8]
 8012990:	f89d 2000 	ldrb.w	r2, [sp]
 8012994:	701a      	strb	r2, [r3, #0]
 8012996:	e78a      	b.n	80128ae <ucdr_serialize_uint64_t+0x9e>
 8012998:	4628      	mov	r0, r5
 801299a:	466d      	mov	r5, sp
 801299c:	4632      	mov	r2, r6
 801299e:	4629      	mov	r1, r5
 80129a0:	f00e fbd9 	bl	8021156 <memcpy>
 80129a4:	4642      	mov	r2, r8
 80129a6:	19a9      	adds	r1, r5, r6
 80129a8:	68a0      	ldr	r0, [r4, #8]
 80129aa:	f00e fbd4 	bl	8021156 <memcpy>
 80129ae:	e77e      	b.n	80128ae <ucdr_serialize_uint64_t+0x9e>

080129b0 <ucdr_serialize_int16_t>:
 80129b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b4:	460b      	mov	r3, r1
 80129b6:	b082      	sub	sp, #8
 80129b8:	4604      	mov	r4, r0
 80129ba:	2102      	movs	r1, #2
 80129bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80129c0:	f000 fd9e 	bl	8013500 <ucdr_buffer_alignment>
 80129c4:	4601      	mov	r1, r0
 80129c6:	4620      	mov	r0, r4
 80129c8:	7d67      	ldrb	r7, [r4, #21]
 80129ca:	f000 fde1 	bl	8013590 <ucdr_advance_buffer>
 80129ce:	2102      	movs	r1, #2
 80129d0:	4620      	mov	r0, r4
 80129d2:	f000 fd35 	bl	8013440 <ucdr_check_buffer_available_for>
 80129d6:	bb78      	cbnz	r0, 8012a38 <ucdr_serialize_int16_t+0x88>
 80129d8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80129dc:	42ab      	cmp	r3, r5
 80129de:	d926      	bls.n	8012a2e <ucdr_serialize_int16_t+0x7e>
 80129e0:	1b5e      	subs	r6, r3, r5
 80129e2:	60a3      	str	r3, [r4, #8]
 80129e4:	6923      	ldr	r3, [r4, #16]
 80129e6:	4620      	mov	r0, r4
 80129e8:	f1c6 0802 	rsb	r8, r6, #2
 80129ec:	4433      	add	r3, r6
 80129ee:	4641      	mov	r1, r8
 80129f0:	6123      	str	r3, [r4, #16]
 80129f2:	f000 fd31 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d03b      	beq.n	8012a72 <ucdr_serialize_int16_t+0xc2>
 80129fa:	7d23      	ldrb	r3, [r4, #20]
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	d04a      	beq.n	8012a96 <ucdr_serialize_int16_t+0xe6>
 8012a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012a04:	702b      	strb	r3, [r5, #0]
 8012a06:	2e00      	cmp	r6, #0
 8012a08:	d040      	beq.n	8012a8c <ucdr_serialize_int16_t+0xdc>
 8012a0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012a0e:	706b      	strb	r3, [r5, #1]
 8012a10:	6923      	ldr	r3, [r4, #16]
 8012a12:	2102      	movs	r1, #2
 8012a14:	68a2      	ldr	r2, [r4, #8]
 8012a16:	3302      	adds	r3, #2
 8012a18:	7da0      	ldrb	r0, [r4, #22]
 8012a1a:	4442      	add	r2, r8
 8012a1c:	7561      	strb	r1, [r4, #21]
 8012a1e:	1b9e      	subs	r6, r3, r6
 8012a20:	f080 0001 	eor.w	r0, r0, #1
 8012a24:	60a2      	str	r2, [r4, #8]
 8012a26:	6126      	str	r6, [r4, #16]
 8012a28:	b002      	add	sp, #8
 8012a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2e:	2102      	movs	r1, #2
 8012a30:	4620      	mov	r0, r4
 8012a32:	f000 fd11 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012a36:	b190      	cbz	r0, 8012a5e <ucdr_serialize_int16_t+0xae>
 8012a38:	7d23      	ldrb	r3, [r4, #20]
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	68a3      	ldr	r3, [r4, #8]
 8012a3e:	d014      	beq.n	8012a6a <ucdr_serialize_int16_t+0xba>
 8012a40:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012a44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a48:	7019      	strb	r1, [r3, #0]
 8012a4a:	68a3      	ldr	r3, [r4, #8]
 8012a4c:	705a      	strb	r2, [r3, #1]
 8012a4e:	2102      	movs	r1, #2
 8012a50:	68a2      	ldr	r2, [r4, #8]
 8012a52:	6923      	ldr	r3, [r4, #16]
 8012a54:	440a      	add	r2, r1
 8012a56:	7561      	strb	r1, [r4, #21]
 8012a58:	440b      	add	r3, r1
 8012a5a:	60a2      	str	r2, [r4, #8]
 8012a5c:	6123      	str	r3, [r4, #16]
 8012a5e:	7da0      	ldrb	r0, [r4, #22]
 8012a60:	f080 0001 	eor.w	r0, r0, #1
 8012a64:	b002      	add	sp, #8
 8012a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012a6e:	801a      	strh	r2, [r3, #0]
 8012a70:	e7ed      	b.n	8012a4e <ucdr_serialize_int16_t+0x9e>
 8012a72:	68a2      	ldr	r2, [r4, #8]
 8012a74:	6923      	ldr	r3, [r4, #16]
 8012a76:	7da0      	ldrb	r0, [r4, #22]
 8012a78:	1b92      	subs	r2, r2, r6
 8012a7a:	1b9b      	subs	r3, r3, r6
 8012a7c:	7567      	strb	r7, [r4, #21]
 8012a7e:	f080 0001 	eor.w	r0, r0, #1
 8012a82:	60a2      	str	r2, [r4, #8]
 8012a84:	6123      	str	r3, [r4, #16]
 8012a86:	b002      	add	sp, #8
 8012a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a8c:	68a3      	ldr	r3, [r4, #8]
 8012a8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a92:	701a      	strb	r2, [r3, #0]
 8012a94:	e7bc      	b.n	8012a10 <ucdr_serialize_int16_t+0x60>
 8012a96:	4628      	mov	r0, r5
 8012a98:	f10d 0506 	add.w	r5, sp, #6
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	f00e fb59 	bl	8021156 <memcpy>
 8012aa4:	4642      	mov	r2, r8
 8012aa6:	19a9      	adds	r1, r5, r6
 8012aa8:	68a0      	ldr	r0, [r4, #8]
 8012aaa:	f00e fb54 	bl	8021156 <memcpy>
 8012aae:	e7af      	b.n	8012a10 <ucdr_serialize_int16_t+0x60>

08012ab0 <ucdr_deserialize_int16_t>:
 8012ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	460d      	mov	r5, r1
 8012ab8:	2102      	movs	r1, #2
 8012aba:	f000 fd21 	bl	8013500 <ucdr_buffer_alignment>
 8012abe:	4601      	mov	r1, r0
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012ac6:	f000 fd63 	bl	8013590 <ucdr_advance_buffer>
 8012aca:	2102      	movs	r1, #2
 8012acc:	4620      	mov	r0, r4
 8012ace:	f000 fcb7 	bl	8013440 <ucdr_check_buffer_available_for>
 8012ad2:	bb60      	cbnz	r0, 8012b2e <ucdr_deserialize_int16_t+0x7e>
 8012ad4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012ad8:	42be      	cmp	r6, r7
 8012ada:	d923      	bls.n	8012b24 <ucdr_deserialize_int16_t+0x74>
 8012adc:	6923      	ldr	r3, [r4, #16]
 8012ade:	4620      	mov	r0, r4
 8012ae0:	60a6      	str	r6, [r4, #8]
 8012ae2:	1bf6      	subs	r6, r6, r7
 8012ae4:	4433      	add	r3, r6
 8012ae6:	f1c6 0902 	rsb	r9, r6, #2
 8012aea:	6123      	str	r3, [r4, #16]
 8012aec:	4649      	mov	r1, r9
 8012aee:	f000 fcb3 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d034      	beq.n	8012b60 <ucdr_deserialize_int16_t+0xb0>
 8012af6:	7d23      	ldrb	r3, [r4, #20]
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d042      	beq.n	8012b82 <ucdr_deserialize_int16_t+0xd2>
 8012afc:	787b      	ldrb	r3, [r7, #1]
 8012afe:	702b      	strb	r3, [r5, #0]
 8012b00:	2e00      	cmp	r6, #0
 8012b02:	d03a      	beq.n	8012b7a <ucdr_deserialize_int16_t+0xca>
 8012b04:	783b      	ldrb	r3, [r7, #0]
 8012b06:	706b      	strb	r3, [r5, #1]
 8012b08:	6923      	ldr	r3, [r4, #16]
 8012b0a:	2102      	movs	r1, #2
 8012b0c:	68a2      	ldr	r2, [r4, #8]
 8012b0e:	3302      	adds	r3, #2
 8012b10:	7da0      	ldrb	r0, [r4, #22]
 8012b12:	444a      	add	r2, r9
 8012b14:	7561      	strb	r1, [r4, #21]
 8012b16:	1b9b      	subs	r3, r3, r6
 8012b18:	f080 0001 	eor.w	r0, r0, #1
 8012b1c:	60a2      	str	r2, [r4, #8]
 8012b1e:	6123      	str	r3, [r4, #16]
 8012b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b24:	2102      	movs	r1, #2
 8012b26:	4620      	mov	r0, r4
 8012b28:	f000 fc96 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012b2c:	b180      	cbz	r0, 8012b50 <ucdr_deserialize_int16_t+0xa0>
 8012b2e:	7d23      	ldrb	r3, [r4, #20]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	68a3      	ldr	r3, [r4, #8]
 8012b34:	d011      	beq.n	8012b5a <ucdr_deserialize_int16_t+0xaa>
 8012b36:	785b      	ldrb	r3, [r3, #1]
 8012b38:	702b      	strb	r3, [r5, #0]
 8012b3a:	68a3      	ldr	r3, [r4, #8]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	706b      	strb	r3, [r5, #1]
 8012b40:	2102      	movs	r1, #2
 8012b42:	68a2      	ldr	r2, [r4, #8]
 8012b44:	6923      	ldr	r3, [r4, #16]
 8012b46:	440a      	add	r2, r1
 8012b48:	7561      	strb	r1, [r4, #21]
 8012b4a:	440b      	add	r3, r1
 8012b4c:	60a2      	str	r2, [r4, #8]
 8012b4e:	6123      	str	r3, [r4, #16]
 8012b50:	7da0      	ldrb	r0, [r4, #22]
 8012b52:	f080 0001 	eor.w	r0, r0, #1
 8012b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b5a:	881b      	ldrh	r3, [r3, #0]
 8012b5c:	802b      	strh	r3, [r5, #0]
 8012b5e:	e7ef      	b.n	8012b40 <ucdr_deserialize_int16_t+0x90>
 8012b60:	68a2      	ldr	r2, [r4, #8]
 8012b62:	6923      	ldr	r3, [r4, #16]
 8012b64:	1b92      	subs	r2, r2, r6
 8012b66:	7da0      	ldrb	r0, [r4, #22]
 8012b68:	1b9b      	subs	r3, r3, r6
 8012b6a:	f884 8015 	strb.w	r8, [r4, #21]
 8012b6e:	f080 0001 	eor.w	r0, r0, #1
 8012b72:	60a2      	str	r2, [r4, #8]
 8012b74:	6123      	str	r3, [r4, #16]
 8012b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b7a:	68a3      	ldr	r3, [r4, #8]
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	706b      	strb	r3, [r5, #1]
 8012b80:	e7c2      	b.n	8012b08 <ucdr_deserialize_int16_t+0x58>
 8012b82:	4639      	mov	r1, r7
 8012b84:	4632      	mov	r2, r6
 8012b86:	4628      	mov	r0, r5
 8012b88:	f00e fae5 	bl	8021156 <memcpy>
 8012b8c:	464a      	mov	r2, r9
 8012b8e:	19a8      	adds	r0, r5, r6
 8012b90:	68a1      	ldr	r1, [r4, #8]
 8012b92:	f00e fae0 	bl	8021156 <memcpy>
 8012b96:	e7b7      	b.n	8012b08 <ucdr_deserialize_int16_t+0x58>

08012b98 <ucdr_serialize_int32_t>:
 8012b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	b082      	sub	sp, #8
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	9101      	str	r1, [sp, #4]
 8012ba2:	2104      	movs	r1, #4
 8012ba4:	f000 fcac 	bl	8013500 <ucdr_buffer_alignment>
 8012ba8:	4601      	mov	r1, r0
 8012baa:	4620      	mov	r0, r4
 8012bac:	7d67      	ldrb	r7, [r4, #21]
 8012bae:	f000 fcef 	bl	8013590 <ucdr_advance_buffer>
 8012bb2:	2104      	movs	r1, #4
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f000 fc43 	bl	8013440 <ucdr_check_buffer_available_for>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d139      	bne.n	8012c32 <ucdr_serialize_int32_t+0x9a>
 8012bbe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012bc2:	42ab      	cmp	r3, r5
 8012bc4:	d930      	bls.n	8012c28 <ucdr_serialize_int32_t+0x90>
 8012bc6:	1b5e      	subs	r6, r3, r5
 8012bc8:	60a3      	str	r3, [r4, #8]
 8012bca:	6923      	ldr	r3, [r4, #16]
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f1c6 0804 	rsb	r8, r6, #4
 8012bd2:	4433      	add	r3, r6
 8012bd4:	4641      	mov	r1, r8
 8012bd6:	6123      	str	r3, [r4, #16]
 8012bd8:	f000 fc3e 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d04c      	beq.n	8012c7a <ucdr_serialize_int32_t+0xe2>
 8012be0:	7d23      	ldrb	r3, [r4, #20]
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d063      	beq.n	8012cae <ucdr_serialize_int32_t+0x116>
 8012be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012bea:	702b      	strb	r3, [r5, #0]
 8012bec:	2e00      	cmp	r6, #0
 8012bee:	d051      	beq.n	8012c94 <ucdr_serialize_int32_t+0xfc>
 8012bf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012bf4:	2e01      	cmp	r6, #1
 8012bf6:	706b      	strb	r3, [r5, #1]
 8012bf8:	d050      	beq.n	8012c9c <ucdr_serialize_int32_t+0x104>
 8012bfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012bfe:	2e02      	cmp	r6, #2
 8012c00:	70ab      	strb	r3, [r5, #2]
 8012c02:	d04f      	beq.n	8012ca4 <ucdr_serialize_int32_t+0x10c>
 8012c04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c08:	70eb      	strb	r3, [r5, #3]
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	2104      	movs	r1, #4
 8012c0e:	68a2      	ldr	r2, [r4, #8]
 8012c10:	3304      	adds	r3, #4
 8012c12:	7da0      	ldrb	r0, [r4, #22]
 8012c14:	4442      	add	r2, r8
 8012c16:	7561      	strb	r1, [r4, #21]
 8012c18:	1b9e      	subs	r6, r3, r6
 8012c1a:	f080 0001 	eor.w	r0, r0, #1
 8012c1e:	60a2      	str	r2, [r4, #8]
 8012c20:	6126      	str	r6, [r4, #16]
 8012c22:	b002      	add	sp, #8
 8012c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c28:	2104      	movs	r1, #4
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f000 fc14 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012c30:	b1d0      	cbz	r0, 8012c68 <ucdr_serialize_int32_t+0xd0>
 8012c32:	7d23      	ldrb	r3, [r4, #20]
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	68a3      	ldr	r3, [r4, #8]
 8012c38:	d01c      	beq.n	8012c74 <ucdr_serialize_int32_t+0xdc>
 8012c3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012c3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c42:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012c46:	7018      	strb	r0, [r3, #0]
 8012c48:	68a3      	ldr	r3, [r4, #8]
 8012c4a:	705a      	strb	r2, [r3, #1]
 8012c4c:	68a3      	ldr	r3, [r4, #8]
 8012c4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012c52:	7099      	strb	r1, [r3, #2]
 8012c54:	68a3      	ldr	r3, [r4, #8]
 8012c56:	70da      	strb	r2, [r3, #3]
 8012c58:	2104      	movs	r1, #4
 8012c5a:	68a2      	ldr	r2, [r4, #8]
 8012c5c:	6923      	ldr	r3, [r4, #16]
 8012c5e:	440a      	add	r2, r1
 8012c60:	7561      	strb	r1, [r4, #21]
 8012c62:	440b      	add	r3, r1
 8012c64:	60a2      	str	r2, [r4, #8]
 8012c66:	6123      	str	r3, [r4, #16]
 8012c68:	7da0      	ldrb	r0, [r4, #22]
 8012c6a:	f080 0001 	eor.w	r0, r0, #1
 8012c6e:	b002      	add	sp, #8
 8012c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c74:	9a01      	ldr	r2, [sp, #4]
 8012c76:	601a      	str	r2, [r3, #0]
 8012c78:	e7ee      	b.n	8012c58 <ucdr_serialize_int32_t+0xc0>
 8012c7a:	68a2      	ldr	r2, [r4, #8]
 8012c7c:	6923      	ldr	r3, [r4, #16]
 8012c7e:	7da0      	ldrb	r0, [r4, #22]
 8012c80:	1b92      	subs	r2, r2, r6
 8012c82:	1b9b      	subs	r3, r3, r6
 8012c84:	7567      	strb	r7, [r4, #21]
 8012c86:	f080 0001 	eor.w	r0, r0, #1
 8012c8a:	60a2      	str	r2, [r4, #8]
 8012c8c:	6123      	str	r3, [r4, #16]
 8012c8e:	b002      	add	sp, #8
 8012c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c94:	68a3      	ldr	r3, [r4, #8]
 8012c96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c9a:	701a      	strb	r2, [r3, #0]
 8012c9c:	68a3      	ldr	r3, [r4, #8]
 8012c9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012ca2:	701a      	strb	r2, [r3, #0]
 8012ca4:	68a3      	ldr	r3, [r4, #8]
 8012ca6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012caa:	701a      	strb	r2, [r3, #0]
 8012cac:	e7ad      	b.n	8012c0a <ucdr_serialize_int32_t+0x72>
 8012cae:	4628      	mov	r0, r5
 8012cb0:	ad01      	add	r5, sp, #4
 8012cb2:	4632      	mov	r2, r6
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	f00e fa4e 	bl	8021156 <memcpy>
 8012cba:	4642      	mov	r2, r8
 8012cbc:	19a9      	adds	r1, r5, r6
 8012cbe:	68a0      	ldr	r0, [r4, #8]
 8012cc0:	f00e fa49 	bl	8021156 <memcpy>
 8012cc4:	e7a1      	b.n	8012c0a <ucdr_serialize_int32_t+0x72>
 8012cc6:	bf00      	nop

08012cc8 <ucdr_deserialize_int32_t>:
 8012cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ccc:	4604      	mov	r4, r0
 8012cce:	460d      	mov	r5, r1
 8012cd0:	2104      	movs	r1, #4
 8012cd2:	f000 fc15 	bl	8013500 <ucdr_buffer_alignment>
 8012cd6:	4601      	mov	r1, r0
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012cde:	f000 fc57 	bl	8013590 <ucdr_advance_buffer>
 8012ce2:	2104      	movs	r1, #4
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f000 fbab 	bl	8013440 <ucdr_check_buffer_available_for>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d138      	bne.n	8012d60 <ucdr_deserialize_int32_t+0x98>
 8012cee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012cf2:	42b7      	cmp	r7, r6
 8012cf4:	d92f      	bls.n	8012d56 <ucdr_deserialize_int32_t+0x8e>
 8012cf6:	6923      	ldr	r3, [r4, #16]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	60a7      	str	r7, [r4, #8]
 8012cfc:	1bbf      	subs	r7, r7, r6
 8012cfe:	443b      	add	r3, r7
 8012d00:	f1c7 0904 	rsb	r9, r7, #4
 8012d04:	6123      	str	r3, [r4, #16]
 8012d06:	4649      	mov	r1, r9
 8012d08:	f000 fba6 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d046      	beq.n	8012d9e <ucdr_deserialize_int32_t+0xd6>
 8012d10:	7d23      	ldrb	r3, [r4, #20]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d05c      	beq.n	8012dd0 <ucdr_deserialize_int32_t+0x108>
 8012d16:	78f3      	ldrb	r3, [r6, #3]
 8012d18:	702b      	strb	r3, [r5, #0]
 8012d1a:	2f00      	cmp	r7, #0
 8012d1c:	d04c      	beq.n	8012db8 <ucdr_deserialize_int32_t+0xf0>
 8012d1e:	78b3      	ldrb	r3, [r6, #2]
 8012d20:	2f01      	cmp	r7, #1
 8012d22:	706b      	strb	r3, [r5, #1]
 8012d24:	f105 0302 	add.w	r3, r5, #2
 8012d28:	d04a      	beq.n	8012dc0 <ucdr_deserialize_int32_t+0xf8>
 8012d2a:	7873      	ldrb	r3, [r6, #1]
 8012d2c:	2f02      	cmp	r7, #2
 8012d2e:	70ab      	strb	r3, [r5, #2]
 8012d30:	f105 0303 	add.w	r3, r5, #3
 8012d34:	d048      	beq.n	8012dc8 <ucdr_deserialize_int32_t+0x100>
 8012d36:	7833      	ldrb	r3, [r6, #0]
 8012d38:	70eb      	strb	r3, [r5, #3]
 8012d3a:	6923      	ldr	r3, [r4, #16]
 8012d3c:	2104      	movs	r1, #4
 8012d3e:	68a2      	ldr	r2, [r4, #8]
 8012d40:	3304      	adds	r3, #4
 8012d42:	7da0      	ldrb	r0, [r4, #22]
 8012d44:	444a      	add	r2, r9
 8012d46:	7561      	strb	r1, [r4, #21]
 8012d48:	1bdb      	subs	r3, r3, r7
 8012d4a:	f080 0001 	eor.w	r0, r0, #1
 8012d4e:	60a2      	str	r2, [r4, #8]
 8012d50:	6123      	str	r3, [r4, #16]
 8012d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d56:	2104      	movs	r1, #4
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f000 fb7d 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012d5e:	b1b0      	cbz	r0, 8012d8e <ucdr_deserialize_int32_t+0xc6>
 8012d60:	7d23      	ldrb	r3, [r4, #20]
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	68a3      	ldr	r3, [r4, #8]
 8012d66:	d017      	beq.n	8012d98 <ucdr_deserialize_int32_t+0xd0>
 8012d68:	78db      	ldrb	r3, [r3, #3]
 8012d6a:	702b      	strb	r3, [r5, #0]
 8012d6c:	68a3      	ldr	r3, [r4, #8]
 8012d6e:	789b      	ldrb	r3, [r3, #2]
 8012d70:	706b      	strb	r3, [r5, #1]
 8012d72:	68a3      	ldr	r3, [r4, #8]
 8012d74:	785b      	ldrb	r3, [r3, #1]
 8012d76:	70ab      	strb	r3, [r5, #2]
 8012d78:	68a3      	ldr	r3, [r4, #8]
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	70eb      	strb	r3, [r5, #3]
 8012d7e:	2104      	movs	r1, #4
 8012d80:	68a2      	ldr	r2, [r4, #8]
 8012d82:	6923      	ldr	r3, [r4, #16]
 8012d84:	440a      	add	r2, r1
 8012d86:	7561      	strb	r1, [r4, #21]
 8012d88:	440b      	add	r3, r1
 8012d8a:	60a2      	str	r2, [r4, #8]
 8012d8c:	6123      	str	r3, [r4, #16]
 8012d8e:	7da0      	ldrb	r0, [r4, #22]
 8012d90:	f080 0001 	eor.w	r0, r0, #1
 8012d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	602b      	str	r3, [r5, #0]
 8012d9c:	e7ef      	b.n	8012d7e <ucdr_deserialize_int32_t+0xb6>
 8012d9e:	68a2      	ldr	r2, [r4, #8]
 8012da0:	6923      	ldr	r3, [r4, #16]
 8012da2:	1bd2      	subs	r2, r2, r7
 8012da4:	7da0      	ldrb	r0, [r4, #22]
 8012da6:	1bdb      	subs	r3, r3, r7
 8012da8:	f884 8015 	strb.w	r8, [r4, #21]
 8012dac:	f080 0001 	eor.w	r0, r0, #1
 8012db0:	60a2      	str	r2, [r4, #8]
 8012db2:	6123      	str	r3, [r4, #16]
 8012db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012db8:	68a3      	ldr	r3, [r4, #8]
 8012dba:	789b      	ldrb	r3, [r3, #2]
 8012dbc:	706b      	strb	r3, [r5, #1]
 8012dbe:	1cab      	adds	r3, r5, #2
 8012dc0:	68a2      	ldr	r2, [r4, #8]
 8012dc2:	7852      	ldrb	r2, [r2, #1]
 8012dc4:	f803 2b01 	strb.w	r2, [r3], #1
 8012dc8:	68a2      	ldr	r2, [r4, #8]
 8012dca:	7812      	ldrb	r2, [r2, #0]
 8012dcc:	701a      	strb	r2, [r3, #0]
 8012dce:	e7b4      	b.n	8012d3a <ucdr_deserialize_int32_t+0x72>
 8012dd0:	4631      	mov	r1, r6
 8012dd2:	463a      	mov	r2, r7
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	f00e f9be 	bl	8021156 <memcpy>
 8012dda:	464a      	mov	r2, r9
 8012ddc:	19e8      	adds	r0, r5, r7
 8012dde:	68a1      	ldr	r1, [r4, #8]
 8012de0:	f00e f9b9 	bl	8021156 <memcpy>
 8012de4:	e7a9      	b.n	8012d3a <ucdr_deserialize_int32_t+0x72>
 8012de6:	bf00      	nop

08012de8 <ucdr_serialize_int64_t>:
 8012de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dec:	4604      	mov	r4, r0
 8012dee:	b082      	sub	sp, #8
 8012df0:	2108      	movs	r1, #8
 8012df2:	e9cd 2300 	strd	r2, r3, [sp]
 8012df6:	f000 fb83 	bl	8013500 <ucdr_buffer_alignment>
 8012dfa:	4601      	mov	r1, r0
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	7d67      	ldrb	r7, [r4, #21]
 8012e00:	f000 fbc6 	bl	8013590 <ucdr_advance_buffer>
 8012e04:	2108      	movs	r1, #8
 8012e06:	4620      	mov	r0, r4
 8012e08:	f000 fb1a 	bl	8013440 <ucdr_check_buffer_available_for>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d14e      	bne.n	8012eae <ucdr_serialize_int64_t+0xc6>
 8012e10:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012e14:	42ab      	cmp	r3, r5
 8012e16:	d945      	bls.n	8012ea4 <ucdr_serialize_int64_t+0xbc>
 8012e18:	1b5e      	subs	r6, r3, r5
 8012e1a:	60a3      	str	r3, [r4, #8]
 8012e1c:	6923      	ldr	r3, [r4, #16]
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f1c6 0808 	rsb	r8, r6, #8
 8012e24:	4433      	add	r3, r6
 8012e26:	4641      	mov	r1, r8
 8012e28:	6123      	str	r3, [r4, #16]
 8012e2a:	f000 fb15 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d074      	beq.n	8012f1c <ucdr_serialize_int64_t+0x134>
 8012e32:	7d23      	ldrb	r3, [r4, #20]
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	f000 809b 	beq.w	8012f70 <ucdr_serialize_int64_t+0x188>
 8012e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e3e:	702b      	strb	r3, [r5, #0]
 8012e40:	2e00      	cmp	r6, #0
 8012e42:	d078      	beq.n	8012f36 <ucdr_serialize_int64_t+0x14e>
 8012e44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e48:	2e01      	cmp	r6, #1
 8012e4a:	706b      	strb	r3, [r5, #1]
 8012e4c:	d077      	beq.n	8012f3e <ucdr_serialize_int64_t+0x156>
 8012e4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012e52:	2e02      	cmp	r6, #2
 8012e54:	70ab      	strb	r3, [r5, #2]
 8012e56:	d076      	beq.n	8012f46 <ucdr_serialize_int64_t+0x15e>
 8012e58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e5c:	2e03      	cmp	r6, #3
 8012e5e:	70eb      	strb	r3, [r5, #3]
 8012e60:	d075      	beq.n	8012f4e <ucdr_serialize_int64_t+0x166>
 8012e62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012e66:	2e04      	cmp	r6, #4
 8012e68:	712b      	strb	r3, [r5, #4]
 8012e6a:	d074      	beq.n	8012f56 <ucdr_serialize_int64_t+0x16e>
 8012e6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012e70:	2e05      	cmp	r6, #5
 8012e72:	716b      	strb	r3, [r5, #5]
 8012e74:	d073      	beq.n	8012f5e <ucdr_serialize_int64_t+0x176>
 8012e76:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012e7a:	2e06      	cmp	r6, #6
 8012e7c:	71ab      	strb	r3, [r5, #6]
 8012e7e:	d072      	beq.n	8012f66 <ucdr_serialize_int64_t+0x17e>
 8012e80:	f89d 3000 	ldrb.w	r3, [sp]
 8012e84:	71eb      	strb	r3, [r5, #7]
 8012e86:	6923      	ldr	r3, [r4, #16]
 8012e88:	2108      	movs	r1, #8
 8012e8a:	68a2      	ldr	r2, [r4, #8]
 8012e8c:	3308      	adds	r3, #8
 8012e8e:	7da0      	ldrb	r0, [r4, #22]
 8012e90:	4442      	add	r2, r8
 8012e92:	7561      	strb	r1, [r4, #21]
 8012e94:	1b9e      	subs	r6, r3, r6
 8012e96:	f080 0001 	eor.w	r0, r0, #1
 8012e9a:	60a2      	str	r2, [r4, #8]
 8012e9c:	6126      	str	r6, [r4, #16]
 8012e9e:	b002      	add	sp, #8
 8012ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea4:	2108      	movs	r1, #8
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f000 fad6 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012eac:	b350      	cbz	r0, 8012f04 <ucdr_serialize_int64_t+0x11c>
 8012eae:	7d23      	ldrb	r3, [r4, #20]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d02d      	beq.n	8012f10 <ucdr_serialize_int64_t+0x128>
 8012eb4:	68a3      	ldr	r3, [r4, #8]
 8012eb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012eba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ebe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012ec2:	7018      	strb	r0, [r3, #0]
 8012ec4:	68a3      	ldr	r3, [r4, #8]
 8012ec6:	705a      	strb	r2, [r3, #1]
 8012ec8:	68a3      	ldr	r3, [r4, #8]
 8012eca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012ece:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012ed2:	7099      	strb	r1, [r3, #2]
 8012ed4:	68a3      	ldr	r3, [r4, #8]
 8012ed6:	70da      	strb	r2, [r3, #3]
 8012ed8:	68a3      	ldr	r3, [r4, #8]
 8012eda:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012ede:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012ee2:	7118      	strb	r0, [r3, #4]
 8012ee4:	68a3      	ldr	r3, [r4, #8]
 8012ee6:	715a      	strb	r2, [r3, #5]
 8012ee8:	68a3      	ldr	r3, [r4, #8]
 8012eea:	f89d 2000 	ldrb.w	r2, [sp]
 8012eee:	7199      	strb	r1, [r3, #6]
 8012ef0:	68a3      	ldr	r3, [r4, #8]
 8012ef2:	71da      	strb	r2, [r3, #7]
 8012ef4:	2108      	movs	r1, #8
 8012ef6:	68a2      	ldr	r2, [r4, #8]
 8012ef8:	6923      	ldr	r3, [r4, #16]
 8012efa:	440a      	add	r2, r1
 8012efc:	7561      	strb	r1, [r4, #21]
 8012efe:	440b      	add	r3, r1
 8012f00:	60a2      	str	r2, [r4, #8]
 8012f02:	6123      	str	r3, [r4, #16]
 8012f04:	7da0      	ldrb	r0, [r4, #22]
 8012f06:	f080 0001 	eor.w	r0, r0, #1
 8012f0a:	b002      	add	sp, #8
 8012f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f10:	466b      	mov	r3, sp
 8012f12:	68a2      	ldr	r2, [r4, #8]
 8012f14:	cb03      	ldmia	r3!, {r0, r1}
 8012f16:	6010      	str	r0, [r2, #0]
 8012f18:	6051      	str	r1, [r2, #4]
 8012f1a:	e7eb      	b.n	8012ef4 <ucdr_serialize_int64_t+0x10c>
 8012f1c:	68a2      	ldr	r2, [r4, #8]
 8012f1e:	6923      	ldr	r3, [r4, #16]
 8012f20:	7da0      	ldrb	r0, [r4, #22]
 8012f22:	1b92      	subs	r2, r2, r6
 8012f24:	1b9b      	subs	r3, r3, r6
 8012f26:	7567      	strb	r7, [r4, #21]
 8012f28:	f080 0001 	eor.w	r0, r0, #1
 8012f2c:	60a2      	str	r2, [r4, #8]
 8012f2e:	6123      	str	r3, [r4, #16]
 8012f30:	b002      	add	sp, #8
 8012f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f36:	68a3      	ldr	r3, [r4, #8]
 8012f38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f3c:	701a      	strb	r2, [r3, #0]
 8012f3e:	68a3      	ldr	r3, [r4, #8]
 8012f40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012f44:	701a      	strb	r2, [r3, #0]
 8012f46:	68a3      	ldr	r3, [r4, #8]
 8012f48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f4c:	701a      	strb	r2, [r3, #0]
 8012f4e:	68a3      	ldr	r3, [r4, #8]
 8012f50:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012f54:	701a      	strb	r2, [r3, #0]
 8012f56:	68a3      	ldr	r3, [r4, #8]
 8012f58:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f5c:	701a      	strb	r2, [r3, #0]
 8012f5e:	68a3      	ldr	r3, [r4, #8]
 8012f60:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012f64:	701a      	strb	r2, [r3, #0]
 8012f66:	68a3      	ldr	r3, [r4, #8]
 8012f68:	f89d 2000 	ldrb.w	r2, [sp]
 8012f6c:	701a      	strb	r2, [r3, #0]
 8012f6e:	e78a      	b.n	8012e86 <ucdr_serialize_int64_t+0x9e>
 8012f70:	4628      	mov	r0, r5
 8012f72:	466d      	mov	r5, sp
 8012f74:	4632      	mov	r2, r6
 8012f76:	4629      	mov	r1, r5
 8012f78:	f00e f8ed 	bl	8021156 <memcpy>
 8012f7c:	4642      	mov	r2, r8
 8012f7e:	19a9      	adds	r1, r5, r6
 8012f80:	68a0      	ldr	r0, [r4, #8]
 8012f82:	f00e f8e8 	bl	8021156 <memcpy>
 8012f86:	e77e      	b.n	8012e86 <ucdr_serialize_int64_t+0x9e>

08012f88 <ucdr_deserialize_int64_t>:
 8012f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	460d      	mov	r5, r1
 8012f90:	2108      	movs	r1, #8
 8012f92:	f000 fab5 	bl	8013500 <ucdr_buffer_alignment>
 8012f96:	4601      	mov	r1, r0
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f9e:	f000 faf7 	bl	8013590 <ucdr_advance_buffer>
 8012fa2:	2108      	movs	r1, #8
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	f000 fa4b 	bl	8013440 <ucdr_check_buffer_available_for>
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d151      	bne.n	8013052 <ucdr_deserialize_int64_t+0xca>
 8012fae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012fb2:	42be      	cmp	r6, r7
 8012fb4:	d948      	bls.n	8013048 <ucdr_deserialize_int64_t+0xc0>
 8012fb6:	6923      	ldr	r3, [r4, #16]
 8012fb8:	4620      	mov	r0, r4
 8012fba:	60a6      	str	r6, [r4, #8]
 8012fbc:	1bf6      	subs	r6, r6, r7
 8012fbe:	4433      	add	r3, r6
 8012fc0:	f1c6 0908 	rsb	r9, r6, #8
 8012fc4:	6123      	str	r3, [r4, #16]
 8012fc6:	4649      	mov	r1, r9
 8012fc8:	f000 fa46 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d06d      	beq.n	80130ac <ucdr_deserialize_int64_t+0x124>
 8012fd0:	7d23      	ldrb	r3, [r4, #20]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	f000 8093 	beq.w	80130fe <ucdr_deserialize_int64_t+0x176>
 8012fd8:	79fb      	ldrb	r3, [r7, #7]
 8012fda:	702b      	strb	r3, [r5, #0]
 8012fdc:	2e00      	cmp	r6, #0
 8012fde:	d072      	beq.n	80130c6 <ucdr_deserialize_int64_t+0x13e>
 8012fe0:	79bb      	ldrb	r3, [r7, #6]
 8012fe2:	2e01      	cmp	r6, #1
 8012fe4:	706b      	strb	r3, [r5, #1]
 8012fe6:	f105 0302 	add.w	r3, r5, #2
 8012fea:	d070      	beq.n	80130ce <ucdr_deserialize_int64_t+0x146>
 8012fec:	797b      	ldrb	r3, [r7, #5]
 8012fee:	2e02      	cmp	r6, #2
 8012ff0:	70ab      	strb	r3, [r5, #2]
 8012ff2:	f105 0303 	add.w	r3, r5, #3
 8012ff6:	d06e      	beq.n	80130d6 <ucdr_deserialize_int64_t+0x14e>
 8012ff8:	793b      	ldrb	r3, [r7, #4]
 8012ffa:	2e03      	cmp	r6, #3
 8012ffc:	70eb      	strb	r3, [r5, #3]
 8012ffe:	f105 0304 	add.w	r3, r5, #4
 8013002:	d06c      	beq.n	80130de <ucdr_deserialize_int64_t+0x156>
 8013004:	78fb      	ldrb	r3, [r7, #3]
 8013006:	2e04      	cmp	r6, #4
 8013008:	712b      	strb	r3, [r5, #4]
 801300a:	f105 0305 	add.w	r3, r5, #5
 801300e:	d06a      	beq.n	80130e6 <ucdr_deserialize_int64_t+0x15e>
 8013010:	78bb      	ldrb	r3, [r7, #2]
 8013012:	2e05      	cmp	r6, #5
 8013014:	716b      	strb	r3, [r5, #5]
 8013016:	f105 0306 	add.w	r3, r5, #6
 801301a:	d068      	beq.n	80130ee <ucdr_deserialize_int64_t+0x166>
 801301c:	787b      	ldrb	r3, [r7, #1]
 801301e:	2e06      	cmp	r6, #6
 8013020:	71ab      	strb	r3, [r5, #6]
 8013022:	f105 0307 	add.w	r3, r5, #7
 8013026:	d066      	beq.n	80130f6 <ucdr_deserialize_int64_t+0x16e>
 8013028:	783b      	ldrb	r3, [r7, #0]
 801302a:	71eb      	strb	r3, [r5, #7]
 801302c:	6923      	ldr	r3, [r4, #16]
 801302e:	2108      	movs	r1, #8
 8013030:	68a2      	ldr	r2, [r4, #8]
 8013032:	3308      	adds	r3, #8
 8013034:	7da0      	ldrb	r0, [r4, #22]
 8013036:	444a      	add	r2, r9
 8013038:	7561      	strb	r1, [r4, #21]
 801303a:	1b9e      	subs	r6, r3, r6
 801303c:	f080 0001 	eor.w	r0, r0, #1
 8013040:	60a2      	str	r2, [r4, #8]
 8013042:	6126      	str	r6, [r4, #16]
 8013044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013048:	2108      	movs	r1, #8
 801304a:	4620      	mov	r0, r4
 801304c:	f000 fa04 	bl	8013458 <ucdr_check_final_buffer_behavior>
 8013050:	b310      	cbz	r0, 8013098 <ucdr_deserialize_int64_t+0x110>
 8013052:	7d23      	ldrb	r3, [r4, #20]
 8013054:	2b01      	cmp	r3, #1
 8013056:	68a3      	ldr	r3, [r4, #8]
 8013058:	d023      	beq.n	80130a2 <ucdr_deserialize_int64_t+0x11a>
 801305a:	79db      	ldrb	r3, [r3, #7]
 801305c:	702b      	strb	r3, [r5, #0]
 801305e:	68a3      	ldr	r3, [r4, #8]
 8013060:	799b      	ldrb	r3, [r3, #6]
 8013062:	706b      	strb	r3, [r5, #1]
 8013064:	68a3      	ldr	r3, [r4, #8]
 8013066:	795b      	ldrb	r3, [r3, #5]
 8013068:	70ab      	strb	r3, [r5, #2]
 801306a:	68a3      	ldr	r3, [r4, #8]
 801306c:	791b      	ldrb	r3, [r3, #4]
 801306e:	70eb      	strb	r3, [r5, #3]
 8013070:	68a3      	ldr	r3, [r4, #8]
 8013072:	78db      	ldrb	r3, [r3, #3]
 8013074:	712b      	strb	r3, [r5, #4]
 8013076:	68a3      	ldr	r3, [r4, #8]
 8013078:	789b      	ldrb	r3, [r3, #2]
 801307a:	716b      	strb	r3, [r5, #5]
 801307c:	68a3      	ldr	r3, [r4, #8]
 801307e:	785b      	ldrb	r3, [r3, #1]
 8013080:	71ab      	strb	r3, [r5, #6]
 8013082:	68a3      	ldr	r3, [r4, #8]
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	71eb      	strb	r3, [r5, #7]
 8013088:	2108      	movs	r1, #8
 801308a:	68a2      	ldr	r2, [r4, #8]
 801308c:	6923      	ldr	r3, [r4, #16]
 801308e:	440a      	add	r2, r1
 8013090:	7561      	strb	r1, [r4, #21]
 8013092:	440b      	add	r3, r1
 8013094:	60a2      	str	r2, [r4, #8]
 8013096:	6123      	str	r3, [r4, #16]
 8013098:	7da0      	ldrb	r0, [r4, #22]
 801309a:	f080 0001 	eor.w	r0, r0, #1
 801309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	602a      	str	r2, [r5, #0]
 80130a8:	606b      	str	r3, [r5, #4]
 80130aa:	e7ed      	b.n	8013088 <ucdr_deserialize_int64_t+0x100>
 80130ac:	68a2      	ldr	r2, [r4, #8]
 80130ae:	6923      	ldr	r3, [r4, #16]
 80130b0:	1b92      	subs	r2, r2, r6
 80130b2:	7da0      	ldrb	r0, [r4, #22]
 80130b4:	1b9b      	subs	r3, r3, r6
 80130b6:	f884 8015 	strb.w	r8, [r4, #21]
 80130ba:	f080 0001 	eor.w	r0, r0, #1
 80130be:	60a2      	str	r2, [r4, #8]
 80130c0:	6123      	str	r3, [r4, #16]
 80130c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130c6:	68a3      	ldr	r3, [r4, #8]
 80130c8:	799b      	ldrb	r3, [r3, #6]
 80130ca:	706b      	strb	r3, [r5, #1]
 80130cc:	1cab      	adds	r3, r5, #2
 80130ce:	68a2      	ldr	r2, [r4, #8]
 80130d0:	7952      	ldrb	r2, [r2, #5]
 80130d2:	f803 2b01 	strb.w	r2, [r3], #1
 80130d6:	68a2      	ldr	r2, [r4, #8]
 80130d8:	7912      	ldrb	r2, [r2, #4]
 80130da:	f803 2b01 	strb.w	r2, [r3], #1
 80130de:	68a2      	ldr	r2, [r4, #8]
 80130e0:	78d2      	ldrb	r2, [r2, #3]
 80130e2:	f803 2b01 	strb.w	r2, [r3], #1
 80130e6:	68a2      	ldr	r2, [r4, #8]
 80130e8:	7892      	ldrb	r2, [r2, #2]
 80130ea:	f803 2b01 	strb.w	r2, [r3], #1
 80130ee:	68a2      	ldr	r2, [r4, #8]
 80130f0:	7852      	ldrb	r2, [r2, #1]
 80130f2:	f803 2b01 	strb.w	r2, [r3], #1
 80130f6:	68a2      	ldr	r2, [r4, #8]
 80130f8:	7812      	ldrb	r2, [r2, #0]
 80130fa:	701a      	strb	r2, [r3, #0]
 80130fc:	e796      	b.n	801302c <ucdr_deserialize_int64_t+0xa4>
 80130fe:	4639      	mov	r1, r7
 8013100:	4632      	mov	r2, r6
 8013102:	4628      	mov	r0, r5
 8013104:	f00e f827 	bl	8021156 <memcpy>
 8013108:	464a      	mov	r2, r9
 801310a:	19a8      	adds	r0, r5, r6
 801310c:	68a1      	ldr	r1, [r4, #8]
 801310e:	f00e f822 	bl	8021156 <memcpy>
 8013112:	e78b      	b.n	801302c <ucdr_deserialize_int64_t+0xa4>

08013114 <ucdr_serialize_double>:
 8013114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013118:	4604      	mov	r4, r0
 801311a:	b082      	sub	sp, #8
 801311c:	2108      	movs	r1, #8
 801311e:	ed8d 0b00 	vstr	d0, [sp]
 8013122:	f000 f9ed 	bl	8013500 <ucdr_buffer_alignment>
 8013126:	4601      	mov	r1, r0
 8013128:	4620      	mov	r0, r4
 801312a:	7d67      	ldrb	r7, [r4, #21]
 801312c:	f000 fa30 	bl	8013590 <ucdr_advance_buffer>
 8013130:	2108      	movs	r1, #8
 8013132:	4620      	mov	r0, r4
 8013134:	f000 f984 	bl	8013440 <ucdr_check_buffer_available_for>
 8013138:	2800      	cmp	r0, #0
 801313a:	d14e      	bne.n	80131da <ucdr_serialize_double+0xc6>
 801313c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013140:	42ab      	cmp	r3, r5
 8013142:	d945      	bls.n	80131d0 <ucdr_serialize_double+0xbc>
 8013144:	1b5e      	subs	r6, r3, r5
 8013146:	60a3      	str	r3, [r4, #8]
 8013148:	6923      	ldr	r3, [r4, #16]
 801314a:	4620      	mov	r0, r4
 801314c:	f1c6 0808 	rsb	r8, r6, #8
 8013150:	4433      	add	r3, r6
 8013152:	4641      	mov	r1, r8
 8013154:	6123      	str	r3, [r4, #16]
 8013156:	f000 f97f 	bl	8013458 <ucdr_check_final_buffer_behavior>
 801315a:	2800      	cmp	r0, #0
 801315c:	d074      	beq.n	8013248 <ucdr_serialize_double+0x134>
 801315e:	7d23      	ldrb	r3, [r4, #20]
 8013160:	2b01      	cmp	r3, #1
 8013162:	f000 809b 	beq.w	801329c <ucdr_serialize_double+0x188>
 8013166:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801316a:	702b      	strb	r3, [r5, #0]
 801316c:	2e00      	cmp	r6, #0
 801316e:	d078      	beq.n	8013262 <ucdr_serialize_double+0x14e>
 8013170:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013174:	2e01      	cmp	r6, #1
 8013176:	706b      	strb	r3, [r5, #1]
 8013178:	d077      	beq.n	801326a <ucdr_serialize_double+0x156>
 801317a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801317e:	2e02      	cmp	r6, #2
 8013180:	70ab      	strb	r3, [r5, #2]
 8013182:	d076      	beq.n	8013272 <ucdr_serialize_double+0x15e>
 8013184:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013188:	2e03      	cmp	r6, #3
 801318a:	70eb      	strb	r3, [r5, #3]
 801318c:	d075      	beq.n	801327a <ucdr_serialize_double+0x166>
 801318e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013192:	2e04      	cmp	r6, #4
 8013194:	712b      	strb	r3, [r5, #4]
 8013196:	d074      	beq.n	8013282 <ucdr_serialize_double+0x16e>
 8013198:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801319c:	2e05      	cmp	r6, #5
 801319e:	716b      	strb	r3, [r5, #5]
 80131a0:	d073      	beq.n	801328a <ucdr_serialize_double+0x176>
 80131a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80131a6:	2e06      	cmp	r6, #6
 80131a8:	71ab      	strb	r3, [r5, #6]
 80131aa:	d072      	beq.n	8013292 <ucdr_serialize_double+0x17e>
 80131ac:	f89d 3000 	ldrb.w	r3, [sp]
 80131b0:	71eb      	strb	r3, [r5, #7]
 80131b2:	6923      	ldr	r3, [r4, #16]
 80131b4:	2108      	movs	r1, #8
 80131b6:	68a2      	ldr	r2, [r4, #8]
 80131b8:	3308      	adds	r3, #8
 80131ba:	7da0      	ldrb	r0, [r4, #22]
 80131bc:	4442      	add	r2, r8
 80131be:	7561      	strb	r1, [r4, #21]
 80131c0:	1b9e      	subs	r6, r3, r6
 80131c2:	f080 0001 	eor.w	r0, r0, #1
 80131c6:	60a2      	str	r2, [r4, #8]
 80131c8:	6126      	str	r6, [r4, #16]
 80131ca:	b002      	add	sp, #8
 80131cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d0:	2108      	movs	r1, #8
 80131d2:	4620      	mov	r0, r4
 80131d4:	f000 f940 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80131d8:	b350      	cbz	r0, 8013230 <ucdr_serialize_double+0x11c>
 80131da:	7d23      	ldrb	r3, [r4, #20]
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d02d      	beq.n	801323c <ucdr_serialize_double+0x128>
 80131e0:	68a3      	ldr	r3, [r4, #8]
 80131e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80131e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80131ee:	7018      	strb	r0, [r3, #0]
 80131f0:	68a3      	ldr	r3, [r4, #8]
 80131f2:	705a      	strb	r2, [r3, #1]
 80131f4:	68a3      	ldr	r3, [r4, #8]
 80131f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131fa:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80131fe:	7099      	strb	r1, [r3, #2]
 8013200:	68a3      	ldr	r3, [r4, #8]
 8013202:	70da      	strb	r2, [r3, #3]
 8013204:	68a3      	ldr	r3, [r4, #8]
 8013206:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801320a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801320e:	7118      	strb	r0, [r3, #4]
 8013210:	68a3      	ldr	r3, [r4, #8]
 8013212:	715a      	strb	r2, [r3, #5]
 8013214:	68a3      	ldr	r3, [r4, #8]
 8013216:	f89d 2000 	ldrb.w	r2, [sp]
 801321a:	7199      	strb	r1, [r3, #6]
 801321c:	68a3      	ldr	r3, [r4, #8]
 801321e:	71da      	strb	r2, [r3, #7]
 8013220:	2108      	movs	r1, #8
 8013222:	68a2      	ldr	r2, [r4, #8]
 8013224:	6923      	ldr	r3, [r4, #16]
 8013226:	440a      	add	r2, r1
 8013228:	7561      	strb	r1, [r4, #21]
 801322a:	440b      	add	r3, r1
 801322c:	60a2      	str	r2, [r4, #8]
 801322e:	6123      	str	r3, [r4, #16]
 8013230:	7da0      	ldrb	r0, [r4, #22]
 8013232:	f080 0001 	eor.w	r0, r0, #1
 8013236:	b002      	add	sp, #8
 8013238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801323c:	466b      	mov	r3, sp
 801323e:	68a2      	ldr	r2, [r4, #8]
 8013240:	cb03      	ldmia	r3!, {r0, r1}
 8013242:	6010      	str	r0, [r2, #0]
 8013244:	6051      	str	r1, [r2, #4]
 8013246:	e7eb      	b.n	8013220 <ucdr_serialize_double+0x10c>
 8013248:	68a2      	ldr	r2, [r4, #8]
 801324a:	6923      	ldr	r3, [r4, #16]
 801324c:	7da0      	ldrb	r0, [r4, #22]
 801324e:	1b92      	subs	r2, r2, r6
 8013250:	1b9b      	subs	r3, r3, r6
 8013252:	7567      	strb	r7, [r4, #21]
 8013254:	f080 0001 	eor.w	r0, r0, #1
 8013258:	60a2      	str	r2, [r4, #8]
 801325a:	6123      	str	r3, [r4, #16]
 801325c:	b002      	add	sp, #8
 801325e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013262:	68a3      	ldr	r3, [r4, #8]
 8013264:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013268:	701a      	strb	r2, [r3, #0]
 801326a:	68a3      	ldr	r3, [r4, #8]
 801326c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013270:	701a      	strb	r2, [r3, #0]
 8013272:	68a3      	ldr	r3, [r4, #8]
 8013274:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013278:	701a      	strb	r2, [r3, #0]
 801327a:	68a3      	ldr	r3, [r4, #8]
 801327c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013280:	701a      	strb	r2, [r3, #0]
 8013282:	68a3      	ldr	r3, [r4, #8]
 8013284:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013288:	701a      	strb	r2, [r3, #0]
 801328a:	68a3      	ldr	r3, [r4, #8]
 801328c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013290:	701a      	strb	r2, [r3, #0]
 8013292:	68a3      	ldr	r3, [r4, #8]
 8013294:	f89d 2000 	ldrb.w	r2, [sp]
 8013298:	701a      	strb	r2, [r3, #0]
 801329a:	e78a      	b.n	80131b2 <ucdr_serialize_double+0x9e>
 801329c:	4628      	mov	r0, r5
 801329e:	466d      	mov	r5, sp
 80132a0:	4632      	mov	r2, r6
 80132a2:	4629      	mov	r1, r5
 80132a4:	f00d ff57 	bl	8021156 <memcpy>
 80132a8:	4642      	mov	r2, r8
 80132aa:	19a9      	adds	r1, r5, r6
 80132ac:	68a0      	ldr	r0, [r4, #8]
 80132ae:	f00d ff52 	bl	8021156 <memcpy>
 80132b2:	e77e      	b.n	80131b2 <ucdr_serialize_double+0x9e>

080132b4 <ucdr_deserialize_double>:
 80132b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b8:	4604      	mov	r4, r0
 80132ba:	460d      	mov	r5, r1
 80132bc:	2108      	movs	r1, #8
 80132be:	f000 f91f 	bl	8013500 <ucdr_buffer_alignment>
 80132c2:	4601      	mov	r1, r0
 80132c4:	4620      	mov	r0, r4
 80132c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80132ca:	f000 f961 	bl	8013590 <ucdr_advance_buffer>
 80132ce:	2108      	movs	r1, #8
 80132d0:	4620      	mov	r0, r4
 80132d2:	f000 f8b5 	bl	8013440 <ucdr_check_buffer_available_for>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	d151      	bne.n	801337e <ucdr_deserialize_double+0xca>
 80132da:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80132de:	42be      	cmp	r6, r7
 80132e0:	d948      	bls.n	8013374 <ucdr_deserialize_double+0xc0>
 80132e2:	6923      	ldr	r3, [r4, #16]
 80132e4:	4620      	mov	r0, r4
 80132e6:	60a6      	str	r6, [r4, #8]
 80132e8:	1bf6      	subs	r6, r6, r7
 80132ea:	4433      	add	r3, r6
 80132ec:	f1c6 0908 	rsb	r9, r6, #8
 80132f0:	6123      	str	r3, [r4, #16]
 80132f2:	4649      	mov	r1, r9
 80132f4:	f000 f8b0 	bl	8013458 <ucdr_check_final_buffer_behavior>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d06d      	beq.n	80133d8 <ucdr_deserialize_double+0x124>
 80132fc:	7d23      	ldrb	r3, [r4, #20]
 80132fe:	2b01      	cmp	r3, #1
 8013300:	f000 8093 	beq.w	801342a <ucdr_deserialize_double+0x176>
 8013304:	79fb      	ldrb	r3, [r7, #7]
 8013306:	702b      	strb	r3, [r5, #0]
 8013308:	2e00      	cmp	r6, #0
 801330a:	d072      	beq.n	80133f2 <ucdr_deserialize_double+0x13e>
 801330c:	79bb      	ldrb	r3, [r7, #6]
 801330e:	2e01      	cmp	r6, #1
 8013310:	706b      	strb	r3, [r5, #1]
 8013312:	f105 0302 	add.w	r3, r5, #2
 8013316:	d070      	beq.n	80133fa <ucdr_deserialize_double+0x146>
 8013318:	797b      	ldrb	r3, [r7, #5]
 801331a:	2e02      	cmp	r6, #2
 801331c:	70ab      	strb	r3, [r5, #2]
 801331e:	f105 0303 	add.w	r3, r5, #3
 8013322:	d06e      	beq.n	8013402 <ucdr_deserialize_double+0x14e>
 8013324:	793b      	ldrb	r3, [r7, #4]
 8013326:	2e03      	cmp	r6, #3
 8013328:	70eb      	strb	r3, [r5, #3]
 801332a:	f105 0304 	add.w	r3, r5, #4
 801332e:	d06c      	beq.n	801340a <ucdr_deserialize_double+0x156>
 8013330:	78fb      	ldrb	r3, [r7, #3]
 8013332:	2e04      	cmp	r6, #4
 8013334:	712b      	strb	r3, [r5, #4]
 8013336:	f105 0305 	add.w	r3, r5, #5
 801333a:	d06a      	beq.n	8013412 <ucdr_deserialize_double+0x15e>
 801333c:	78bb      	ldrb	r3, [r7, #2]
 801333e:	2e05      	cmp	r6, #5
 8013340:	716b      	strb	r3, [r5, #5]
 8013342:	f105 0306 	add.w	r3, r5, #6
 8013346:	d068      	beq.n	801341a <ucdr_deserialize_double+0x166>
 8013348:	787b      	ldrb	r3, [r7, #1]
 801334a:	2e06      	cmp	r6, #6
 801334c:	71ab      	strb	r3, [r5, #6]
 801334e:	f105 0307 	add.w	r3, r5, #7
 8013352:	d066      	beq.n	8013422 <ucdr_deserialize_double+0x16e>
 8013354:	783b      	ldrb	r3, [r7, #0]
 8013356:	71eb      	strb	r3, [r5, #7]
 8013358:	6923      	ldr	r3, [r4, #16]
 801335a:	2108      	movs	r1, #8
 801335c:	68a2      	ldr	r2, [r4, #8]
 801335e:	3308      	adds	r3, #8
 8013360:	7da0      	ldrb	r0, [r4, #22]
 8013362:	444a      	add	r2, r9
 8013364:	7561      	strb	r1, [r4, #21]
 8013366:	1b9e      	subs	r6, r3, r6
 8013368:	f080 0001 	eor.w	r0, r0, #1
 801336c:	60a2      	str	r2, [r4, #8]
 801336e:	6126      	str	r6, [r4, #16]
 8013370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013374:	2108      	movs	r1, #8
 8013376:	4620      	mov	r0, r4
 8013378:	f000 f86e 	bl	8013458 <ucdr_check_final_buffer_behavior>
 801337c:	b310      	cbz	r0, 80133c4 <ucdr_deserialize_double+0x110>
 801337e:	7d23      	ldrb	r3, [r4, #20]
 8013380:	2b01      	cmp	r3, #1
 8013382:	68a3      	ldr	r3, [r4, #8]
 8013384:	d023      	beq.n	80133ce <ucdr_deserialize_double+0x11a>
 8013386:	79db      	ldrb	r3, [r3, #7]
 8013388:	702b      	strb	r3, [r5, #0]
 801338a:	68a3      	ldr	r3, [r4, #8]
 801338c:	799b      	ldrb	r3, [r3, #6]
 801338e:	706b      	strb	r3, [r5, #1]
 8013390:	68a3      	ldr	r3, [r4, #8]
 8013392:	795b      	ldrb	r3, [r3, #5]
 8013394:	70ab      	strb	r3, [r5, #2]
 8013396:	68a3      	ldr	r3, [r4, #8]
 8013398:	791b      	ldrb	r3, [r3, #4]
 801339a:	70eb      	strb	r3, [r5, #3]
 801339c:	68a3      	ldr	r3, [r4, #8]
 801339e:	78db      	ldrb	r3, [r3, #3]
 80133a0:	712b      	strb	r3, [r5, #4]
 80133a2:	68a3      	ldr	r3, [r4, #8]
 80133a4:	789b      	ldrb	r3, [r3, #2]
 80133a6:	716b      	strb	r3, [r5, #5]
 80133a8:	68a3      	ldr	r3, [r4, #8]
 80133aa:	785b      	ldrb	r3, [r3, #1]
 80133ac:	71ab      	strb	r3, [r5, #6]
 80133ae:	68a3      	ldr	r3, [r4, #8]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	71eb      	strb	r3, [r5, #7]
 80133b4:	2108      	movs	r1, #8
 80133b6:	68a2      	ldr	r2, [r4, #8]
 80133b8:	6923      	ldr	r3, [r4, #16]
 80133ba:	440a      	add	r2, r1
 80133bc:	7561      	strb	r1, [r4, #21]
 80133be:	440b      	add	r3, r1
 80133c0:	60a2      	str	r2, [r4, #8]
 80133c2:	6123      	str	r3, [r4, #16]
 80133c4:	7da0      	ldrb	r0, [r4, #22]
 80133c6:	f080 0001 	eor.w	r0, r0, #1
 80133ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	602a      	str	r2, [r5, #0]
 80133d4:	606b      	str	r3, [r5, #4]
 80133d6:	e7ed      	b.n	80133b4 <ucdr_deserialize_double+0x100>
 80133d8:	68a2      	ldr	r2, [r4, #8]
 80133da:	6923      	ldr	r3, [r4, #16]
 80133dc:	1b92      	subs	r2, r2, r6
 80133de:	7da0      	ldrb	r0, [r4, #22]
 80133e0:	1b9b      	subs	r3, r3, r6
 80133e2:	f884 8015 	strb.w	r8, [r4, #21]
 80133e6:	f080 0001 	eor.w	r0, r0, #1
 80133ea:	60a2      	str	r2, [r4, #8]
 80133ec:	6123      	str	r3, [r4, #16]
 80133ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f2:	68a3      	ldr	r3, [r4, #8]
 80133f4:	799b      	ldrb	r3, [r3, #6]
 80133f6:	706b      	strb	r3, [r5, #1]
 80133f8:	1cab      	adds	r3, r5, #2
 80133fa:	68a2      	ldr	r2, [r4, #8]
 80133fc:	7952      	ldrb	r2, [r2, #5]
 80133fe:	f803 2b01 	strb.w	r2, [r3], #1
 8013402:	68a2      	ldr	r2, [r4, #8]
 8013404:	7912      	ldrb	r2, [r2, #4]
 8013406:	f803 2b01 	strb.w	r2, [r3], #1
 801340a:	68a2      	ldr	r2, [r4, #8]
 801340c:	78d2      	ldrb	r2, [r2, #3]
 801340e:	f803 2b01 	strb.w	r2, [r3], #1
 8013412:	68a2      	ldr	r2, [r4, #8]
 8013414:	7892      	ldrb	r2, [r2, #2]
 8013416:	f803 2b01 	strb.w	r2, [r3], #1
 801341a:	68a2      	ldr	r2, [r4, #8]
 801341c:	7852      	ldrb	r2, [r2, #1]
 801341e:	f803 2b01 	strb.w	r2, [r3], #1
 8013422:	68a2      	ldr	r2, [r4, #8]
 8013424:	7812      	ldrb	r2, [r2, #0]
 8013426:	701a      	strb	r2, [r3, #0]
 8013428:	e796      	b.n	8013358 <ucdr_deserialize_double+0xa4>
 801342a:	4639      	mov	r1, r7
 801342c:	4632      	mov	r2, r6
 801342e:	4628      	mov	r0, r5
 8013430:	f00d fe91 	bl	8021156 <memcpy>
 8013434:	464a      	mov	r2, r9
 8013436:	19a8      	adds	r0, r5, r6
 8013438:	68a1      	ldr	r1, [r4, #8]
 801343a:	f00d fe8c 	bl	8021156 <memcpy>
 801343e:	e78b      	b.n	8013358 <ucdr_deserialize_double+0xa4>

08013440 <ucdr_check_buffer_available_for>:
 8013440:	7d83      	ldrb	r3, [r0, #22]
 8013442:	b93b      	cbnz	r3, 8013454 <ucdr_check_buffer_available_for+0x14>
 8013444:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013448:	4419      	add	r1, r3
 801344a:	4288      	cmp	r0, r1
 801344c:	bf34      	ite	cc
 801344e:	2000      	movcc	r0, #0
 8013450:	2001      	movcs	r0, #1
 8013452:	4770      	bx	lr
 8013454:	2000      	movs	r0, #0
 8013456:	4770      	bx	lr

08013458 <ucdr_check_final_buffer_behavior>:
 8013458:	7d83      	ldrb	r3, [r0, #22]
 801345a:	b943      	cbnz	r3, 801346e <ucdr_check_final_buffer_behavior+0x16>
 801345c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013460:	b510      	push	{r4, lr}
 8013462:	4291      	cmp	r1, r2
 8013464:	4604      	mov	r4, r0
 8013466:	d205      	bcs.n	8013474 <ucdr_check_final_buffer_behavior+0x1c>
 8013468:	2301      	movs	r3, #1
 801346a:	4618      	mov	r0, r3
 801346c:	bd10      	pop	{r4, pc}
 801346e:	2300      	movs	r3, #0
 8013470:	4618      	mov	r0, r3
 8013472:	4770      	bx	lr
 8013474:	6982      	ldr	r2, [r0, #24]
 8013476:	b13a      	cbz	r2, 8013488 <ucdr_check_final_buffer_behavior+0x30>
 8013478:	69c1      	ldr	r1, [r0, #28]
 801347a:	4790      	blx	r2
 801347c:	f080 0301 	eor.w	r3, r0, #1
 8013480:	75a0      	strb	r0, [r4, #22]
 8013482:	b2db      	uxtb	r3, r3
 8013484:	4618      	mov	r0, r3
 8013486:	bd10      	pop	{r4, pc}
 8013488:	2001      	movs	r0, #1
 801348a:	75a0      	strb	r0, [r4, #22]
 801348c:	e7fa      	b.n	8013484 <ucdr_check_final_buffer_behavior+0x2c>
 801348e:	bf00      	nop

08013490 <ucdr_set_on_full_buffer_callback>:
 8013490:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop

08013498 <ucdr_init_buffer_origin_offset_endian>:
 8013498:	b410      	push	{r4}
 801349a:	9c01      	ldr	r4, [sp, #4]
 801349c:	440a      	add	r2, r1
 801349e:	6001      	str	r1, [r0, #0]
 80134a0:	6042      	str	r2, [r0, #4]
 80134a2:	190a      	adds	r2, r1, r4
 80134a4:	441c      	add	r4, r3
 80134a6:	6082      	str	r2, [r0, #8]
 80134a8:	2200      	movs	r2, #0
 80134aa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80134ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80134b2:	7542      	strb	r2, [r0, #21]
 80134b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134b8:	7582      	strb	r2, [r0, #22]
 80134ba:	7503      	strb	r3, [r0, #20]
 80134bc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80134c0:	4770      	bx	lr
 80134c2:	bf00      	nop

080134c4 <ucdr_init_buffer_origin_offset>:
 80134c4:	b510      	push	{r4, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	9c04      	ldr	r4, [sp, #16]
 80134ca:	9400      	str	r4, [sp, #0]
 80134cc:	2401      	movs	r4, #1
 80134ce:	9401      	str	r4, [sp, #4]
 80134d0:	f7ff ffe2 	bl	8013498 <ucdr_init_buffer_origin_offset_endian>
 80134d4:	b002      	add	sp, #8
 80134d6:	bd10      	pop	{r4, pc}

080134d8 <ucdr_init_buffer_origin>:
 80134d8:	b510      	push	{r4, lr}
 80134da:	2400      	movs	r4, #0
 80134dc:	b082      	sub	sp, #8
 80134de:	9400      	str	r4, [sp, #0]
 80134e0:	f7ff fff0 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 80134e4:	b002      	add	sp, #8
 80134e6:	bd10      	pop	{r4, pc}

080134e8 <ucdr_init_buffer>:
 80134e8:	2300      	movs	r3, #0
 80134ea:	f7ff bff5 	b.w	80134d8 <ucdr_init_buffer_origin>
 80134ee:	bf00      	nop

080134f0 <ucdr_alignment>:
 80134f0:	fbb0 f2f1 	udiv	r2, r0, r1
 80134f4:	fb02 0011 	mls	r0, r2, r1, r0
 80134f8:	1e4b      	subs	r3, r1, #1
 80134fa:	1a08      	subs	r0, r1, r0
 80134fc:	4018      	ands	r0, r3
 80134fe:	4770      	bx	lr

08013500 <ucdr_buffer_alignment>:
 8013500:	7d43      	ldrb	r3, [r0, #21]
 8013502:	428b      	cmp	r3, r1
 8013504:	d209      	bcs.n	801351a <ucdr_buffer_alignment+0x1a>
 8013506:	6903      	ldr	r3, [r0, #16]
 8013508:	1e4a      	subs	r2, r1, #1
 801350a:	fbb3 f0f1 	udiv	r0, r3, r1
 801350e:	fb01 3010 	mls	r0, r1, r0, r3
 8013512:	1a09      	subs	r1, r1, r0
 8013514:	ea01 0002 	and.w	r0, r1, r2
 8013518:	4770      	bx	lr
 801351a:	2000      	movs	r0, #0
 801351c:	4770      	bx	lr
 801351e:	bf00      	nop

08013520 <ucdr_align_to>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	4604      	mov	r4, r0
 8013524:	460d      	mov	r5, r1
 8013526:	f7ff ffeb 	bl	8013500 <ucdr_buffer_alignment>
 801352a:	68a3      	ldr	r3, [r4, #8]
 801352c:	7565      	strb	r5, [r4, #21]
 801352e:	181a      	adds	r2, r3, r0
 8013530:	6923      	ldr	r3, [r4, #16]
 8013532:	4418      	add	r0, r3
 8013534:	6863      	ldr	r3, [r4, #4]
 8013536:	4293      	cmp	r3, r2
 8013538:	6120      	str	r0, [r4, #16]
 801353a:	bf28      	it	cs
 801353c:	4613      	movcs	r3, r2
 801353e:	60a3      	str	r3, [r4, #8]
 8013540:	bd38      	pop	{r3, r4, r5, pc}
 8013542:	bf00      	nop

08013544 <ucdr_buffer_length>:
 8013544:	6882      	ldr	r2, [r0, #8]
 8013546:	6800      	ldr	r0, [r0, #0]
 8013548:	1a10      	subs	r0, r2, r0
 801354a:	4770      	bx	lr

0801354c <ucdr_buffer_remaining>:
 801354c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013550:	1a10      	subs	r0, r2, r0
 8013552:	4770      	bx	lr

08013554 <ucdr_check_final_buffer_behavior_array>:
 8013554:	b538      	push	{r3, r4, r5, lr}
 8013556:	7d83      	ldrb	r3, [r0, #22]
 8013558:	b9a3      	cbnz	r3, 8013584 <ucdr_check_final_buffer_behavior_array+0x30>
 801355a:	4604      	mov	r4, r0
 801355c:	460d      	mov	r5, r1
 801355e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013562:	429a      	cmp	r2, r3
 8013564:	d300      	bcc.n	8013568 <ucdr_check_final_buffer_behavior_array+0x14>
 8013566:	b931      	cbnz	r1, 8013576 <ucdr_check_final_buffer_behavior_array+0x22>
 8013568:	4620      	mov	r0, r4
 801356a:	f7ff ffef 	bl	801354c <ucdr_buffer_remaining>
 801356e:	42a8      	cmp	r0, r5
 8013570:	bf28      	it	cs
 8013572:	4628      	movcs	r0, r5
 8013574:	bd38      	pop	{r3, r4, r5, pc}
 8013576:	6983      	ldr	r3, [r0, #24]
 8013578:	b133      	cbz	r3, 8013588 <ucdr_check_final_buffer_behavior_array+0x34>
 801357a:	69c1      	ldr	r1, [r0, #28]
 801357c:	4798      	blx	r3
 801357e:	75a0      	strb	r0, [r4, #22]
 8013580:	2800      	cmp	r0, #0
 8013582:	d0f1      	beq.n	8013568 <ucdr_check_final_buffer_behavior_array+0x14>
 8013584:	2000      	movs	r0, #0
 8013586:	bd38      	pop	{r3, r4, r5, pc}
 8013588:	2301      	movs	r3, #1
 801358a:	7583      	strb	r3, [r0, #22]
 801358c:	e7fa      	b.n	8013584 <ucdr_check_final_buffer_behavior_array+0x30>
 801358e:	bf00      	nop

08013590 <ucdr_advance_buffer>:
 8013590:	b538      	push	{r3, r4, r5, lr}
 8013592:	4604      	mov	r4, r0
 8013594:	460d      	mov	r5, r1
 8013596:	f7ff ff53 	bl	8013440 <ucdr_check_buffer_available_for>
 801359a:	b178      	cbz	r0, 80135bc <ucdr_advance_buffer+0x2c>
 801359c:	6923      	ldr	r3, [r4, #16]
 801359e:	68a2      	ldr	r2, [r4, #8]
 80135a0:	442b      	add	r3, r5
 80135a2:	442a      	add	r2, r5
 80135a4:	6123      	str	r3, [r4, #16]
 80135a6:	2301      	movs	r3, #1
 80135a8:	60a2      	str	r2, [r4, #8]
 80135aa:	7563      	strb	r3, [r4, #21]
 80135ac:	bd38      	pop	{r3, r4, r5, pc}
 80135ae:	68a2      	ldr	r2, [r4, #8]
 80135b0:	1a2d      	subs	r5, r5, r0
 80135b2:	6923      	ldr	r3, [r4, #16]
 80135b4:	4402      	add	r2, r0
 80135b6:	4418      	add	r0, r3
 80135b8:	60a2      	str	r2, [r4, #8]
 80135ba:	6120      	str	r0, [r4, #16]
 80135bc:	4629      	mov	r1, r5
 80135be:	2201      	movs	r2, #1
 80135c0:	4620      	mov	r0, r4
 80135c2:	f7ff ffc7 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d1f1      	bne.n	80135ae <ucdr_advance_buffer+0x1e>
 80135ca:	2301      	movs	r3, #1
 80135cc:	7563      	strb	r3, [r4, #21]
 80135ce:	bd38      	pop	{r3, r4, r5, pc}

080135d0 <ucdr_serialize_sequence_char>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	4615      	mov	r5, r2
 80135d4:	460e      	mov	r6, r1
 80135d6:	7d01      	ldrb	r1, [r0, #20]
 80135d8:	4604      	mov	r4, r0
 80135da:	f7fe ff5b 	bl	8012494 <ucdr_serialize_endian_uint32_t>
 80135de:	b90d      	cbnz	r5, 80135e4 <ucdr_serialize_sequence_char+0x14>
 80135e0:	2001      	movs	r0, #1
 80135e2:	bd70      	pop	{r4, r5, r6, pc}
 80135e4:	462b      	mov	r3, r5
 80135e6:	4632      	mov	r2, r6
 80135e8:	7d21      	ldrb	r1, [r4, #20]
 80135ea:	4620      	mov	r0, r4
 80135ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135f0:	f004 b908 	b.w	8017804 <ucdr_serialize_endian_array_char>

080135f4 <ucdr_deserialize_sequence_char>:
 80135f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135f8:	461d      	mov	r5, r3
 80135fa:	4616      	mov	r6, r2
 80135fc:	460f      	mov	r7, r1
 80135fe:	461a      	mov	r2, r3
 8013600:	7d01      	ldrb	r1, [r0, #20]
 8013602:	4604      	mov	r4, r0
 8013604:	f7ff f86e 	bl	80126e4 <ucdr_deserialize_endian_uint32_t>
 8013608:	682b      	ldr	r3, [r5, #0]
 801360a:	429e      	cmp	r6, r3
 801360c:	d201      	bcs.n	8013612 <ucdr_deserialize_sequence_char+0x1e>
 801360e:	2201      	movs	r2, #1
 8013610:	75a2      	strb	r2, [r4, #22]
 8013612:	b913      	cbnz	r3, 801361a <ucdr_deserialize_sequence_char+0x26>
 8013614:	2001      	movs	r0, #1
 8013616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801361a:	463a      	mov	r2, r7
 801361c:	7d21      	ldrb	r1, [r4, #20]
 801361e:	4620      	mov	r0, r4
 8013620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013624:	f004 b920 	b.w	8017868 <ucdr_deserialize_endian_array_char>

08013628 <ucdr_serialize_sequence_uint8_t>:
 8013628:	b570      	push	{r4, r5, r6, lr}
 801362a:	4615      	mov	r5, r2
 801362c:	460e      	mov	r6, r1
 801362e:	7d01      	ldrb	r1, [r0, #20]
 8013630:	4604      	mov	r4, r0
 8013632:	f7fe ff2f 	bl	8012494 <ucdr_serialize_endian_uint32_t>
 8013636:	b90d      	cbnz	r5, 801363c <ucdr_serialize_sequence_uint8_t+0x14>
 8013638:	2001      	movs	r0, #1
 801363a:	bd70      	pop	{r4, r5, r6, pc}
 801363c:	462b      	mov	r3, r5
 801363e:	4632      	mov	r2, r6
 8013640:	7d21      	ldrb	r1, [r4, #20]
 8013642:	4620      	mov	r0, r4
 8013644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013648:	f004 b974 	b.w	8017934 <ucdr_serialize_endian_array_uint8_t>

0801364c <ucdr_deserialize_sequence_uint8_t>:
 801364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013650:	461d      	mov	r5, r3
 8013652:	4616      	mov	r6, r2
 8013654:	460f      	mov	r7, r1
 8013656:	461a      	mov	r2, r3
 8013658:	7d01      	ldrb	r1, [r0, #20]
 801365a:	4604      	mov	r4, r0
 801365c:	f7ff f842 	bl	80126e4 <ucdr_deserialize_endian_uint32_t>
 8013660:	682b      	ldr	r3, [r5, #0]
 8013662:	429e      	cmp	r6, r3
 8013664:	d201      	bcs.n	801366a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8013666:	2201      	movs	r2, #1
 8013668:	75a2      	strb	r2, [r4, #22]
 801366a:	b913      	cbnz	r3, 8013672 <ucdr_deserialize_sequence_uint8_t+0x26>
 801366c:	2001      	movs	r0, #1
 801366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013672:	463a      	mov	r2, r7
 8013674:	7d21      	ldrb	r1, [r4, #20]
 8013676:	4620      	mov	r0, r4
 8013678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367c:	f004 b9c0 	b.w	8017a00 <ucdr_deserialize_endian_array_uint8_t>

08013680 <rcl_get_zero_initialized_init_options>:
 8013680:	2000      	movs	r0, #0
 8013682:	4770      	bx	lr

08013684 <rcl_init_options_init>:
 8013684:	b084      	sub	sp, #16
 8013686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013688:	b097      	sub	sp, #92	; 0x5c
 801368a:	ae1d      	add	r6, sp, #116	; 0x74
 801368c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013690:	2800      	cmp	r0, #0
 8013692:	d058      	beq.n	8013746 <rcl_init_options_init+0xc2>
 8013694:	6803      	ldr	r3, [r0, #0]
 8013696:	4605      	mov	r5, r0
 8013698:	b133      	cbz	r3, 80136a8 <rcl_init_options_init+0x24>
 801369a:	2464      	movs	r4, #100	; 0x64
 801369c:	4620      	mov	r0, r4
 801369e:	b017      	add	sp, #92	; 0x5c
 80136a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80136a4:	b004      	add	sp, #16
 80136a6:	4770      	bx	lr
 80136a8:	4630      	mov	r0, r6
 80136aa:	f001 fdf3 	bl	8015294 <rcutils_allocator_is_valid>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	d049      	beq.n	8013746 <rcl_init_options_init+0xc2>
 80136b2:	46b4      	mov	ip, r6
 80136b4:	ac11      	add	r4, sp, #68	; 0x44
 80136b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80136ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136bc:	f8dc 3000 	ldr.w	r3, [ip]
 80136c0:	2050      	movs	r0, #80	; 0x50
 80136c2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80136c8:	4798      	blx	r3
 80136ca:	4604      	mov	r4, r0
 80136cc:	6028      	str	r0, [r5, #0]
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d03b      	beq.n	801374a <rcl_init_options_init+0xc6>
 80136d2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80136d6:	4686      	mov	lr, r0
 80136d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80136dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80136e0:	f8dc 3000 	ldr.w	r3, [ip]
 80136e4:	a802      	add	r0, sp, #8
 80136e6:	f8ce 3000 	str.w	r3, [lr]
 80136ea:	f001 fff1 	bl	80156d0 <rmw_get_zero_initialized_init_options>
 80136ee:	f10d 0e08 	add.w	lr, sp, #8
 80136f2:	f104 0c18 	add.w	ip, r4, #24
 80136f6:	682f      	ldr	r7, [r5, #0]
 80136f8:	ac20      	add	r4, sp, #128	; 0x80
 80136fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801370a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801370e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013712:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013716:	e88c 0003 	stmia.w	ip, {r0, r1}
 801371a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801371e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013722:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013726:	f107 0018 	add.w	r0, r7, #24
 801372a:	f002 f8f9 	bl	8015920 <rmw_init_options_init>
 801372e:	4604      	mov	r4, r0
 8013730:	2800      	cmp	r0, #0
 8013732:	d0b3      	beq.n	801369c <rcl_init_options_init+0x18>
 8013734:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013738:	6828      	ldr	r0, [r5, #0]
 801373a:	4798      	blx	r3
 801373c:	4620      	mov	r0, r4
 801373e:	f007 ff8d 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 8013742:	4604      	mov	r4, r0
 8013744:	e7aa      	b.n	801369c <rcl_init_options_init+0x18>
 8013746:	240b      	movs	r4, #11
 8013748:	e7a8      	b.n	801369c <rcl_init_options_init+0x18>
 801374a:	240a      	movs	r4, #10
 801374c:	e7a6      	b.n	801369c <rcl_init_options_init+0x18>
 801374e:	bf00      	nop

08013750 <rcl_init_options_fini>:
 8013750:	b530      	push	{r4, r5, lr}
 8013752:	b087      	sub	sp, #28
 8013754:	b1f0      	cbz	r0, 8013794 <rcl_init_options_fini+0x44>
 8013756:	6803      	ldr	r3, [r0, #0]
 8013758:	4604      	mov	r4, r0
 801375a:	b1db      	cbz	r3, 8013794 <rcl_init_options_fini+0x44>
 801375c:	469c      	mov	ip, r3
 801375e:	f10d 0e04 	add.w	lr, sp, #4
 8013762:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013766:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801376a:	f8dc 3000 	ldr.w	r3, [ip]
 801376e:	a801      	add	r0, sp, #4
 8013770:	f8ce 3000 	str.w	r3, [lr]
 8013774:	f001 fd8e 	bl	8015294 <rcutils_allocator_is_valid>
 8013778:	b160      	cbz	r0, 8013794 <rcl_init_options_fini+0x44>
 801377a:	6820      	ldr	r0, [r4, #0]
 801377c:	3018      	adds	r0, #24
 801377e:	f002 f989 	bl	8015a94 <rmw_init_options_fini>
 8013782:	4605      	mov	r5, r0
 8013784:	b950      	cbnz	r0, 801379c <rcl_init_options_fini+0x4c>
 8013786:	6820      	ldr	r0, [r4, #0]
 8013788:	9b02      	ldr	r3, [sp, #8]
 801378a:	9905      	ldr	r1, [sp, #20]
 801378c:	4798      	blx	r3
 801378e:	4628      	mov	r0, r5
 8013790:	b007      	add	sp, #28
 8013792:	bd30      	pop	{r4, r5, pc}
 8013794:	250b      	movs	r5, #11
 8013796:	4628      	mov	r0, r5
 8013798:	b007      	add	sp, #28
 801379a:	bd30      	pop	{r4, r5, pc}
 801379c:	f007 ff5e 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 80137a0:	4605      	mov	r5, r0
 80137a2:	e7f8      	b.n	8013796 <rcl_init_options_fini+0x46>

080137a4 <rcl_init_options_copy>:
 80137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	b094      	sub	sp, #80	; 0x50
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d05b      	beq.n	8013866 <rcl_init_options_copy+0xc2>
 80137ae:	4604      	mov	r4, r0
 80137b0:	6800      	ldr	r0, [r0, #0]
 80137b2:	2800      	cmp	r0, #0
 80137b4:	d057      	beq.n	8013866 <rcl_init_options_copy+0xc2>
 80137b6:	460e      	mov	r6, r1
 80137b8:	f001 fd6c 	bl	8015294 <rcutils_allocator_is_valid>
 80137bc:	2e00      	cmp	r6, #0
 80137be:	d052      	beq.n	8013866 <rcl_init_options_copy+0xc2>
 80137c0:	f080 0001 	eor.w	r0, r0, #1
 80137c4:	b2c0      	uxtb	r0, r0
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d14d      	bne.n	8013866 <rcl_init_options_copy+0xc2>
 80137ca:	6833      	ldr	r3, [r6, #0]
 80137cc:	b123      	cbz	r3, 80137d8 <rcl_init_options_copy+0x34>
 80137ce:	2464      	movs	r4, #100	; 0x64
 80137d0:	4620      	mov	r0, r4
 80137d2:	b014      	add	sp, #80	; 0x50
 80137d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137d8:	6827      	ldr	r7, [r4, #0]
 80137da:	ad0f      	add	r5, sp, #60	; 0x3c
 80137dc:	46bc      	mov	ip, r7
 80137de:	f8d7 8000 	ldr.w	r8, [r7]
 80137e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137e8:	f8dc 3000 	ldr.w	r3, [ip]
 80137ec:	2050      	movs	r0, #80	; 0x50
 80137ee:	4619      	mov	r1, r3
 80137f0:	602b      	str	r3, [r5, #0]
 80137f2:	47c0      	blx	r8
 80137f4:	4605      	mov	r5, r0
 80137f6:	6030      	str	r0, [r6, #0]
 80137f8:	b3d0      	cbz	r0, 8013870 <rcl_init_options_copy+0xcc>
 80137fa:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80137fe:	4686      	mov	lr, r0
 8013800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013808:	f8dc 3000 	ldr.w	r3, [ip]
 801380c:	4668      	mov	r0, sp
 801380e:	f8ce 3000 	str.w	r3, [lr]
 8013812:	f001 ff5d 	bl	80156d0 <rmw_get_zero_initialized_init_options>
 8013816:	46ee      	mov	lr, sp
 8013818:	f105 0c18 	add.w	ip, r5, #24
 801381c:	6824      	ldr	r4, [r4, #0]
 801381e:	6835      	ldr	r5, [r6, #0]
 8013820:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013828:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801382c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013830:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013838:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801383c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013840:	f104 0018 	add.w	r0, r4, #24
 8013844:	f105 0118 	add.w	r1, r5, #24
 8013848:	f002 f8d2 	bl	80159f0 <rmw_init_options_copy>
 801384c:	4604      	mov	r4, r0
 801384e:	2800      	cmp	r0, #0
 8013850:	d0be      	beq.n	80137d0 <rcl_init_options_copy+0x2c>
 8013852:	f001 fd45 	bl	80152e0 <rcutils_get_error_string>
 8013856:	f001 fd5b 	bl	8015310 <rcutils_reset_error>
 801385a:	4630      	mov	r0, r6
 801385c:	f7ff ff78 	bl	8013750 <rcl_init_options_fini>
 8013860:	b140      	cbz	r0, 8013874 <rcl_init_options_copy+0xd0>
 8013862:	4604      	mov	r4, r0
 8013864:	e7b4      	b.n	80137d0 <rcl_init_options_copy+0x2c>
 8013866:	240b      	movs	r4, #11
 8013868:	4620      	mov	r0, r4
 801386a:	b014      	add	sp, #80	; 0x50
 801386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013870:	240a      	movs	r4, #10
 8013872:	e7ad      	b.n	80137d0 <rcl_init_options_copy+0x2c>
 8013874:	4620      	mov	r0, r4
 8013876:	b014      	add	sp, #80	; 0x50
 8013878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801387c:	f007 beee 	b.w	801b65c <rcl_convert_rmw_ret_to_rcl_ret>

08013880 <rcl_init_options_set_domain_id>:
 8013880:	b120      	cbz	r0, 801388c <rcl_init_options_set_domain_id+0xc>
 8013882:	6803      	ldr	r3, [r0, #0]
 8013884:	b113      	cbz	r3, 801388c <rcl_init_options_set_domain_id+0xc>
 8013886:	2000      	movs	r0, #0
 8013888:	6259      	str	r1, [r3, #36]	; 0x24
 801388a:	4770      	bx	lr
 801388c:	200b      	movs	r0, #11
 801388e:	4770      	bx	lr

08013890 <rcl_get_zero_initialized_node>:
 8013890:	4a03      	ldr	r2, [pc, #12]	; (80138a0 <rcl_get_zero_initialized_node+0x10>)
 8013892:	4603      	mov	r3, r0
 8013894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013898:	e883 0003 	stmia.w	r3, {r0, r1}
 801389c:	4618      	mov	r0, r3
 801389e:	4770      	bx	lr
 80138a0:	08025068 	.word	0x08025068

080138a4 <rcl_node_init>:
 80138a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a8:	b0a9      	sub	sp, #164	; 0xa4
 80138aa:	4604      	mov	r4, r0
 80138ac:	460e      	mov	r6, r1
 80138ae:	4615      	mov	r5, r2
 80138b0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80138b4:	a823      	add	r0, sp, #140	; 0x8c
 80138b6:	461f      	mov	r7, r3
 80138b8:	f007 ffe0 	bl	801b87c <rcl_guard_condition_get_default_options>
 80138bc:	f1b8 0f00 	cmp.w	r8, #0
 80138c0:	f000 80f3 	beq.w	8013aaa <rcl_node_init+0x206>
 80138c4:	4640      	mov	r0, r8
 80138c6:	f001 fce5 	bl	8015294 <rcutils_allocator_is_valid>
 80138ca:	2d00      	cmp	r5, #0
 80138cc:	bf18      	it	ne
 80138ce:	2c00      	cmpne	r4, #0
 80138d0:	f080 0001 	eor.w	r0, r0, #1
 80138d4:	bf0c      	ite	eq
 80138d6:	f04f 0c01 	moveq.w	ip, #1
 80138da:	f04f 0c00 	movne.w	ip, #0
 80138de:	2e00      	cmp	r6, #0
 80138e0:	bf08      	it	eq
 80138e2:	f04c 0c01 	orreq.w	ip, ip, #1
 80138e6:	ea4c 0c00 	orr.w	ip, ip, r0
 80138ea:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80138ee:	f040 80dc 	bne.w	8013aaa <rcl_node_init+0x206>
 80138f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80138f6:	f1ba 0f00 	cmp.w	sl, #0
 80138fa:	f040 80fc 	bne.w	8013af6 <rcl_node_init+0x252>
 80138fe:	2f00      	cmp	r7, #0
 8013900:	f000 80d3 	beq.w	8013aaa <rcl_node_init+0x206>
 8013904:	4638      	mov	r0, r7
 8013906:	f007 fec7 	bl	801b698 <rcl_context_is_valid>
 801390a:	4683      	mov	fp, r0
 801390c:	2800      	cmp	r0, #0
 801390e:	f000 80d2 	beq.w	8013ab6 <rcl_node_init+0x212>
 8013912:	4652      	mov	r2, sl
 8013914:	4630      	mov	r0, r6
 8013916:	a922      	add	r1, sp, #136	; 0x88
 8013918:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 801391c:	f001 ff8a 	bl	8015834 <rmw_validate_node_name>
 8013920:	4682      	mov	sl, r0
 8013922:	2800      	cmp	r0, #0
 8013924:	f040 80c3 	bne.w	8013aae <rcl_node_init+0x20a>
 8013928:	9822      	ldr	r0, [sp, #136]	; 0x88
 801392a:	2800      	cmp	r0, #0
 801392c:	f040 80f1 	bne.w	8013b12 <rcl_node_init+0x26e>
 8013930:	4628      	mov	r0, r5
 8013932:	f7ec fce5 	bl	8000300 <strlen>
 8013936:	2800      	cmp	r0, #0
 8013938:	f040 80c0 	bne.w	8013abc <rcl_node_init+0x218>
 801393c:	4d79      	ldr	r5, [pc, #484]	; (8013b24 <rcl_node_init+0x280>)
 801393e:	a922      	add	r1, sp, #136	; 0x88
 8013940:	2200      	movs	r2, #0
 8013942:	4628      	mov	r0, r5
 8013944:	f001 ff58 	bl	80157f8 <rmw_validate_namespace>
 8013948:	4682      	mov	sl, r0
 801394a:	2800      	cmp	r0, #0
 801394c:	f040 80af 	bne.w	8013aae <rcl_node_init+0x20a>
 8013950:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013952:	2800      	cmp	r0, #0
 8013954:	f040 80d5 	bne.w	8013b02 <rcl_node_init+0x25e>
 8013958:	f8d8 3000 	ldr.w	r3, [r8]
 801395c:	2078      	movs	r0, #120	; 0x78
 801395e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013962:	4798      	blx	r3
 8013964:	4682      	mov	sl, r0
 8013966:	6060      	str	r0, [r4, #4]
 8013968:	2800      	cmp	r0, #0
 801396a:	f000 80cf 	beq.w	8013b0c <rcl_node_init+0x268>
 801396e:	2200      	movs	r2, #0
 8013970:	2300      	movs	r3, #0
 8013972:	a808      	add	r0, sp, #32
 8013974:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8013978:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 801397c:	f000 f902 	bl	8013b84 <rcl_node_get_default_options>
 8013980:	a908      	add	r1, sp, #32
 8013982:	4650      	mov	r0, sl
 8013984:	2268      	movs	r2, #104	; 0x68
 8013986:	f00d fbe6 	bl	8021156 <memcpy>
 801398a:	6861      	ldr	r1, [r4, #4]
 801398c:	4640      	mov	r0, r8
 801398e:	6027      	str	r7, [r4, #0]
 8013990:	f000 f906 	bl	8013ba0 <rcl_node_options_copy>
 8013994:	2800      	cmp	r0, #0
 8013996:	d158      	bne.n	8013a4a <rcl_node_init+0x1a6>
 8013998:	4628      	mov	r0, r5
 801399a:	f7ec fcb1 	bl	8000300 <strlen>
 801399e:	4428      	add	r0, r5
 80139a0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80139a4:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80139a8:	2b2f      	cmp	r3, #47	; 0x2f
 80139aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	bf0c      	ite	eq
 80139b2:	4b5d      	ldreq	r3, [pc, #372]	; (8013b28 <rcl_node_init+0x284>)
 80139b4:	4b5d      	ldrne	r3, [pc, #372]	; (8013b2c <rcl_node_init+0x288>)
 80139b6:	9302      	str	r3, [sp, #8]
 80139b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80139bc:	9301      	str	r3, [sp, #4]
 80139be:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80139c2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80139c6:	f001 fcbf 	bl	8015348 <rcutils_format_string_limit>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 80139d0:	4631      	mov	r1, r6
 80139d2:	6818      	ldr	r0, [r3, #0]
 80139d4:	462a      	mov	r2, r5
 80139d6:	6866      	ldr	r6, [r4, #4]
 80139d8:	3028      	adds	r0, #40	; 0x28
 80139da:	f002 fa87 	bl	8015eec <rmw_create_node>
 80139de:	6863      	ldr	r3, [r4, #4]
 80139e0:	66b0      	str	r0, [r6, #104]	; 0x68
 80139e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80139e4:	2800      	cmp	r0, #0
 80139e6:	d032      	beq.n	8013a4e <rcl_node_init+0x1aa>
 80139e8:	f002 fb10 	bl	801600c <rmw_node_get_graph_guard_condition>
 80139ec:	4682      	mov	sl, r0
 80139ee:	b360      	cbz	r0, 8013a4a <rcl_node_init+0x1a6>
 80139f0:	f8d8 3000 	ldr.w	r3, [r8]
 80139f4:	2008      	movs	r0, #8
 80139f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139fa:	6866      	ldr	r6, [r4, #4]
 80139fc:	4798      	blx	r3
 80139fe:	6863      	ldr	r3, [r4, #4]
 8013a00:	66f0      	str	r0, [r6, #108]	; 0x6c
 8013a02:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8013a06:	f1bb 0f00 	cmp.w	fp, #0
 8013a0a:	d020      	beq.n	8013a4e <rcl_node_init+0x1aa>
 8013a0c:	a806      	add	r0, sp, #24
 8013a0e:	ae23      	add	r6, sp, #140	; 0x8c
 8013a10:	f007 fea8 	bl	801b764 <rcl_get_zero_initialized_guard_condition>
 8013a14:	a806      	add	r0, sp, #24
 8013a16:	6863      	ldr	r3, [r4, #4]
 8013a18:	46c4      	mov	ip, r8
 8013a1a:	c803      	ldmia	r0, {r0, r1}
 8013a1c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8013a20:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013a24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8013a2e:	6033      	str	r3, [r6, #0]
 8013a30:	ab28      	add	r3, sp, #160	; 0xa0
 8013a32:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013a36:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013a3a:	4651      	mov	r1, sl
 8013a3c:	463a      	mov	r2, r7
 8013a3e:	4670      	mov	r0, lr
 8013a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013a42:	f007 fe99 	bl	801b778 <rcl_guard_condition_init_from_rmw>
 8013a46:	4682      	mov	sl, r0
 8013a48:	b328      	cbz	r0, 8013a96 <rcl_node_init+0x1f2>
 8013a4a:	6863      	ldr	r3, [r4, #4]
 8013a4c:	b1f3      	cbz	r3, 8013a8c <rcl_node_init+0x1e8>
 8013a4e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8013a50:	b128      	cbz	r0, 8013a5e <rcl_node_init+0x1ba>
 8013a52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a5a:	4798      	blx	r3
 8013a5c:	6863      	ldr	r3, [r4, #4]
 8013a5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013a60:	b110      	cbz	r0, 8013a68 <rcl_node_init+0x1c4>
 8013a62:	f002 fa55 	bl	8015f10 <rmw_destroy_node>
 8013a66:	6863      	ldr	r3, [r4, #4]
 8013a68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013a6a:	b148      	cbz	r0, 8013a80 <rcl_node_init+0x1dc>
 8013a6c:	f007 fee0 	bl	801b830 <rcl_guard_condition_fini>
 8013a70:	6863      	ldr	r3, [r4, #4]
 8013a72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a76:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013a78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a7c:	4798      	blx	r3
 8013a7e:	6863      	ldr	r3, [r4, #4]
 8013a80:	4618      	mov	r0, r3
 8013a82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a8a:	4798      	blx	r3
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	f04f 0a01 	mov.w	sl, #1
 8013a92:	e9c4 3300 	strd	r3, r3, [r4]
 8013a96:	f1b9 0f00 	cmp.w	r9, #0
 8013a9a:	d008      	beq.n	8013aae <rcl_node_init+0x20a>
 8013a9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013aa6:	4798      	blx	r3
 8013aa8:	e001      	b.n	8013aae <rcl_node_init+0x20a>
 8013aaa:	f04f 0a0b 	mov.w	sl, #11
 8013aae:	4650      	mov	r0, sl
 8013ab0:	b029      	add	sp, #164	; 0xa4
 8013ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab6:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8013aba:	e7f8      	b.n	8013aae <rcl_node_init+0x20a>
 8013abc:	782b      	ldrb	r3, [r5, #0]
 8013abe:	2b2f      	cmp	r3, #47	; 0x2f
 8013ac0:	f43f af3d 	beq.w	801393e <rcl_node_init+0x9a>
 8013ac4:	9503      	str	r5, [sp, #12]
 8013ac6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013aca:	9300      	str	r3, [sp, #0]
 8013acc:	4b18      	ldr	r3, [pc, #96]	; (8013b30 <rcl_node_init+0x28c>)
 8013ace:	9302      	str	r3, [sp, #8]
 8013ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ad4:	9301      	str	r3, [sp, #4]
 8013ad6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013ada:	f001 fc35 	bl	8015348 <rcutils_format_string_limit>
 8013ade:	4605      	mov	r5, r0
 8013ae0:	b1e0      	cbz	r0, 8013b1c <rcl_node_init+0x278>
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	a922      	add	r1, sp, #136	; 0x88
 8013ae6:	9222      	str	r2, [sp, #136]	; 0x88
 8013ae8:	f001 fe86 	bl	80157f8 <rmw_validate_namespace>
 8013aec:	4682      	mov	sl, r0
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d1d4      	bne.n	8013a9c <rcl_node_init+0x1f8>
 8013af2:	46d9      	mov	r9, fp
 8013af4:	e72c      	b.n	8013950 <rcl_node_init+0xac>
 8013af6:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8013afa:	4650      	mov	r0, sl
 8013afc:	b029      	add	sp, #164	; 0xa4
 8013afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b02:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8013b06:	f001 fe89 	bl	801581c <rmw_namespace_validation_result_string>
 8013b0a:	e7c4      	b.n	8013a96 <rcl_node_init+0x1f2>
 8013b0c:	f04f 0a0a 	mov.w	sl, #10
 8013b10:	e7c1      	b.n	8013a96 <rcl_node_init+0x1f2>
 8013b12:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8013b16:	f001 fee1 	bl	80158dc <rmw_node_name_validation_result_string>
 8013b1a:	e7c8      	b.n	8013aae <rcl_node_init+0x20a>
 8013b1c:	f04f 0a0a 	mov.w	sl, #10
 8013b20:	e7c5      	b.n	8013aae <rcl_node_init+0x20a>
 8013b22:	bf00      	nop
 8013b24:	08025050 	.word	0x08025050
 8013b28:	08025058 	.word	0x08025058
 8013b2c:	08025060 	.word	0x08025060
 8013b30:	08025054 	.word	0x08025054

08013b34 <rcl_node_is_valid>:
 8013b34:	b130      	cbz	r0, 8013b44 <rcl_node_is_valid+0x10>
 8013b36:	6843      	ldr	r3, [r0, #4]
 8013b38:	b123      	cbz	r3, 8013b44 <rcl_node_is_valid+0x10>
 8013b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b3c:	b113      	cbz	r3, 8013b44 <rcl_node_is_valid+0x10>
 8013b3e:	6800      	ldr	r0, [r0, #0]
 8013b40:	f007 bdaa 	b.w	801b698 <rcl_context_is_valid>
 8013b44:	2000      	movs	r0, #0
 8013b46:	4770      	bx	lr

08013b48 <rcl_node_get_name>:
 8013b48:	b120      	cbz	r0, 8013b54 <rcl_node_get_name+0xc>
 8013b4a:	6840      	ldr	r0, [r0, #4]
 8013b4c:	b110      	cbz	r0, 8013b54 <rcl_node_get_name+0xc>
 8013b4e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013b50:	b100      	cbz	r0, 8013b54 <rcl_node_get_name+0xc>
 8013b52:	6880      	ldr	r0, [r0, #8]
 8013b54:	4770      	bx	lr
 8013b56:	bf00      	nop

08013b58 <rcl_node_get_namespace>:
 8013b58:	b120      	cbz	r0, 8013b64 <rcl_node_get_namespace+0xc>
 8013b5a:	6840      	ldr	r0, [r0, #4]
 8013b5c:	b110      	cbz	r0, 8013b64 <rcl_node_get_namespace+0xc>
 8013b5e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013b60:	b100      	cbz	r0, 8013b64 <rcl_node_get_namespace+0xc>
 8013b62:	68c0      	ldr	r0, [r0, #12]
 8013b64:	4770      	bx	lr
 8013b66:	bf00      	nop

08013b68 <rcl_node_get_options>:
 8013b68:	b128      	cbz	r0, 8013b76 <rcl_node_get_options+0xe>
 8013b6a:	6840      	ldr	r0, [r0, #4]
 8013b6c:	b118      	cbz	r0, 8013b76 <rcl_node_get_options+0xe>
 8013b6e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	bf08      	it	eq
 8013b74:	2000      	moveq	r0, #0
 8013b76:	4770      	bx	lr

08013b78 <rcl_node_get_rmw_handle>:
 8013b78:	b110      	cbz	r0, 8013b80 <rcl_node_get_rmw_handle+0x8>
 8013b7a:	6840      	ldr	r0, [r0, #4]
 8013b7c:	b100      	cbz	r0, 8013b80 <rcl_node_get_rmw_handle+0x8>
 8013b7e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop

08013b84 <rcl_node_get_default_options>:
 8013b84:	b510      	push	{r4, lr}
 8013b86:	4604      	mov	r4, r0
 8013b88:	2268      	movs	r2, #104	; 0x68
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	f00d fa16 	bl	8020fbc <memset>
 8013b90:	4620      	mov	r0, r4
 8013b92:	f001 fb71 	bl	8015278 <rcutils_get_default_allocator>
 8013b96:	2301      	movs	r3, #1
 8013b98:	4620      	mov	r0, r4
 8013b9a:	7523      	strb	r3, [r4, #20]
 8013b9c:	bd10      	pop	{r4, pc}
 8013b9e:	bf00      	nop

08013ba0 <rcl_node_options_copy>:
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	bf18      	it	ne
 8013ba4:	4288      	cmpne	r0, r1
 8013ba6:	d01b      	beq.n	8013be0 <rcl_node_options_copy+0x40>
 8013ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013baa:	fab1 f681 	clz	r6, r1
 8013bae:	460c      	mov	r4, r1
 8013bb0:	0976      	lsrs	r6, r6, #5
 8013bb2:	b199      	cbz	r1, 8013bdc <rcl_node_options_copy+0x3c>
 8013bb4:	4605      	mov	r5, r0
 8013bb6:	8a87      	ldrh	r7, [r0, #20]
 8013bb8:	4684      	mov	ip, r0
 8013bba:	468e      	mov	lr, r1
 8013bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013bc2:	682b      	ldr	r3, [r5, #0]
 8013bc4:	2250      	movs	r2, #80	; 0x50
 8013bc6:	f10c 0118 	add.w	r1, ip, #24
 8013bca:	f104 0018 	add.w	r0, r4, #24
 8013bce:	f8ce 3000 	str.w	r3, [lr]
 8013bd2:	82a7      	strh	r7, [r4, #20]
 8013bd4:	f00d fabf 	bl	8021156 <memcpy>
 8013bd8:	4630      	mov	r0, r6
 8013bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bdc:	200b      	movs	r0, #11
 8013bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013be0:	200b      	movs	r0, #11
 8013be2:	4770      	bx	lr

08013be4 <rcl_get_zero_initialized_publisher>:
 8013be4:	4b01      	ldr	r3, [pc, #4]	; (8013bec <rcl_get_zero_initialized_publisher+0x8>)
 8013be6:	6818      	ldr	r0, [r3, #0]
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop
 8013bec:	08025070 	.word	0x08025070

08013bf0 <rcl_publisher_init>:
 8013bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bf4:	b088      	sub	sp, #32
 8013bf6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013bf8:	2e00      	cmp	r6, #0
 8013bfa:	d06b      	beq.n	8013cd4 <rcl_publisher_init+0xe4>
 8013bfc:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8013c00:	4605      	mov	r5, r0
 8013c02:	460f      	mov	r7, r1
 8013c04:	4690      	mov	r8, r2
 8013c06:	4650      	mov	r0, sl
 8013c08:	4699      	mov	r9, r3
 8013c0a:	f001 fb43 	bl	8015294 <rcutils_allocator_is_valid>
 8013c0e:	f080 0401 	eor.w	r4, r0, #1
 8013c12:	b2e4      	uxtb	r4, r4
 8013c14:	2c00      	cmp	r4, #0
 8013c16:	d15d      	bne.n	8013cd4 <rcl_publisher_init+0xe4>
 8013c18:	2d00      	cmp	r5, #0
 8013c1a:	d05b      	beq.n	8013cd4 <rcl_publisher_init+0xe4>
 8013c1c:	682b      	ldr	r3, [r5, #0]
 8013c1e:	b123      	cbz	r3, 8013c2a <rcl_publisher_init+0x3a>
 8013c20:	2464      	movs	r4, #100	; 0x64
 8013c22:	4620      	mov	r0, r4
 8013c24:	b008      	add	sp, #32
 8013c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c2a:	4638      	mov	r0, r7
 8013c2c:	f7ff ff82 	bl	8013b34 <rcl_node_is_valid>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d054      	beq.n	8013cde <rcl_publisher_init+0xee>
 8013c34:	f1b8 0f00 	cmp.w	r8, #0
 8013c38:	d04c      	beq.n	8013cd4 <rcl_publisher_init+0xe4>
 8013c3a:	fab9 f389 	clz	r3, r9
 8013c3e:	095b      	lsrs	r3, r3, #5
 8013c40:	f1b9 0f00 	cmp.w	r9, #0
 8013c44:	d046      	beq.n	8013cd4 <rcl_publisher_init+0xe4>
 8013c46:	aa07      	add	r2, sp, #28
 8013c48:	9307      	str	r3, [sp, #28]
 8013c4a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013c4e:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8013c52:	9205      	str	r2, [sp, #20]
 8013c54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c5c:	4649      	mov	r1, r9
 8013c5e:	4638      	mov	r0, r7
 8013c60:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013c64:	f007 ff54 	bl	801bb10 <rcl_node_resolve_name>
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d14f      	bne.n	8013d0c <rcl_publisher_init+0x11c>
 8013c6c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013c6e:	20c8      	movs	r0, #200	; 0xc8
 8013c70:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013c72:	4798      	blx	r3
 8013c74:	6028      	str	r0, [r5, #0]
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d050      	beq.n	8013d1c <rcl_publisher_init+0x12c>
 8013c7a:	4638      	mov	r0, r7
 8013c7c:	f7ff ff7c 	bl	8013b78 <rcl_node_get_rmw_handle>
 8013c80:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8013c84:	4641      	mov	r1, r8
 8013c86:	9a07      	ldr	r2, [sp, #28]
 8013c88:	9300      	str	r3, [sp, #0]
 8013c8a:	4633      	mov	r3, r6
 8013c8c:	682c      	ldr	r4, [r5, #0]
 8013c8e:	f002 fa27 	bl	80160e0 <rmw_create_publisher>
 8013c92:	682b      	ldr	r3, [r5, #0]
 8013c94:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013c98:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013c9c:	b370      	cbz	r0, 8013cfc <rcl_publisher_init+0x10c>
 8013c9e:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8013ca2:	f002 fb01 	bl	80162a8 <rmw_publisher_get_actual_qos>
 8013ca6:	682b      	ldr	r3, [r5, #0]
 8013ca8:	4604      	mov	r4, r0
 8013caa:	b9d0      	cbnz	r0, 8013ce2 <rcl_publisher_init+0xf2>
 8013cac:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8013cb0:	4631      	mov	r1, r6
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8013cb8:	2270      	movs	r2, #112	; 0x70
 8013cba:	f00d fa4c 	bl	8021156 <memcpy>
 8013cbe:	683a      	ldr	r2, [r7, #0]
 8013cc0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8013cc4:	9807      	ldr	r0, [sp, #28]
 8013cc6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013cc8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013cca:	4798      	blx	r3
 8013ccc:	4620      	mov	r0, r4
 8013cce:	b008      	add	sp, #32
 8013cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd4:	240b      	movs	r4, #11
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	b008      	add	sp, #32
 8013cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cde:	24c8      	movs	r4, #200	; 0xc8
 8013ce0:	e79f      	b.n	8013c22 <rcl_publisher_init+0x32>
 8013ce2:	b1cb      	cbz	r3, 8013d18 <rcl_publisher_init+0x128>
 8013ce4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013ce8:	b142      	cbz	r2, 8013cfc <rcl_publisher_init+0x10c>
 8013cea:	4638      	mov	r0, r7
 8013cec:	f7ff ff44 	bl	8013b78 <rcl_node_get_rmw_handle>
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013cf6:	f002 faeb 	bl	80162d0 <rmw_destroy_publisher>
 8013cfa:	682b      	ldr	r3, [r5, #0]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013d00:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013d02:	2401      	movs	r4, #1
 8013d04:	4790      	blx	r2
 8013d06:	2300      	movs	r3, #0
 8013d08:	602b      	str	r3, [r5, #0]
 8013d0a:	e7db      	b.n	8013cc4 <rcl_publisher_init+0xd4>
 8013d0c:	2867      	cmp	r0, #103	; 0x67
 8013d0e:	d007      	beq.n	8013d20 <rcl_publisher_init+0x130>
 8013d10:	2869      	cmp	r0, #105	; 0x69
 8013d12:	d005      	beq.n	8013d20 <rcl_publisher_init+0x130>
 8013d14:	280a      	cmp	r0, #10
 8013d16:	d001      	beq.n	8013d1c <rcl_publisher_init+0x12c>
 8013d18:	2401      	movs	r4, #1
 8013d1a:	e7d3      	b.n	8013cc4 <rcl_publisher_init+0xd4>
 8013d1c:	240a      	movs	r4, #10
 8013d1e:	e7d1      	b.n	8013cc4 <rcl_publisher_init+0xd4>
 8013d20:	2467      	movs	r4, #103	; 0x67
 8013d22:	e7cf      	b.n	8013cc4 <rcl_publisher_init+0xd4>

08013d24 <rcl_publisher_get_default_options>:
 8013d24:	b570      	push	{r4, r5, r6, lr}
 8013d26:	4d14      	ldr	r5, [pc, #80]	; (8013d78 <rcl_publisher_get_default_options+0x54>)
 8013d28:	b088      	sub	sp, #32
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	2250      	movs	r2, #80	; 0x50
 8013d2e:	4913      	ldr	r1, [pc, #76]	; (8013d7c <rcl_publisher_get_default_options+0x58>)
 8013d30:	4628      	mov	r0, r5
 8013d32:	f00d fa10 	bl	8021156 <memcpy>
 8013d36:	a802      	add	r0, sp, #8
 8013d38:	f001 fa9e 	bl	8015278 <rcutils_get_default_allocator>
 8013d3c:	f10d 0c08 	add.w	ip, sp, #8
 8013d40:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013d44:	466e      	mov	r6, sp
 8013d46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d4e:	f8dc 3000 	ldr.w	r3, [ip]
 8013d52:	4630      	mov	r0, r6
 8013d54:	f8ce 3000 	str.w	r3, [lr]
 8013d58:	f001 fcca 	bl	80156f0 <rmw_get_default_publisher_options>
 8013d5c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013d60:	2270      	movs	r2, #112	; 0x70
 8013d62:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013d66:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d6a:	4629      	mov	r1, r5
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f00d f9f2 	bl	8021156 <memcpy>
 8013d72:	4620      	mov	r0, r4
 8013d74:	b008      	add	sp, #32
 8013d76:	bd70      	pop	{r4, r5, r6, pc}
 8013d78:	20012410 	.word	0x20012410
 8013d7c:	08025078 	.word	0x08025078

08013d80 <rcl_publish>:
 8013d80:	b1f8      	cbz	r0, 8013dc2 <rcl_publish+0x42>
 8013d82:	6803      	ldr	r3, [r0, #0]
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	4604      	mov	r4, r0
 8013d88:	b1b3      	cbz	r3, 8013db8 <rcl_publish+0x38>
 8013d8a:	4616      	mov	r6, r2
 8013d8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013d90:	b192      	cbz	r2, 8013db8 <rcl_publish+0x38>
 8013d92:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013d96:	460d      	mov	r5, r1
 8013d98:	f007 fc7e 	bl	801b698 <rcl_context_is_valid>
 8013d9c:	b160      	cbz	r0, 8013db8 <rcl_publish+0x38>
 8013d9e:	6823      	ldr	r3, [r4, #0]
 8013da0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013da4:	b140      	cbz	r0, 8013db8 <rcl_publish+0x38>
 8013da6:	b155      	cbz	r5, 8013dbe <rcl_publish+0x3e>
 8013da8:	4632      	mov	r2, r6
 8013daa:	4629      	mov	r1, r5
 8013dac:	f002 f938 	bl	8016020 <rmw_publish>
 8013db0:	3800      	subs	r0, #0
 8013db2:	bf18      	it	ne
 8013db4:	2001      	movne	r0, #1
 8013db6:	bd70      	pop	{r4, r5, r6, pc}
 8013db8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013dbc:	bd70      	pop	{r4, r5, r6, pc}
 8013dbe:	200b      	movs	r0, #11
 8013dc0:	bd70      	pop	{r4, r5, r6, pc}
 8013dc2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013dc6:	4770      	bx	lr

08013dc8 <rcl_publisher_is_valid>:
 8013dc8:	b1a0      	cbz	r0, 8013df4 <rcl_publisher_is_valid+0x2c>
 8013dca:	6803      	ldr	r3, [r0, #0]
 8013dcc:	b510      	push	{r4, lr}
 8013dce:	4604      	mov	r4, r0
 8013dd0:	b173      	cbz	r3, 8013df0 <rcl_publisher_is_valid+0x28>
 8013dd2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013dd6:	b15a      	cbz	r2, 8013df0 <rcl_publisher_is_valid+0x28>
 8013dd8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013ddc:	f007 fc5c 	bl	801b698 <rcl_context_is_valid>
 8013de0:	b130      	cbz	r0, 8013df0 <rcl_publisher_is_valid+0x28>
 8013de2:	6823      	ldr	r3, [r4, #0]
 8013de4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013de8:	3800      	subs	r0, #0
 8013dea:	bf18      	it	ne
 8013dec:	2001      	movne	r0, #1
 8013dee:	bd10      	pop	{r4, pc}
 8013df0:	2000      	movs	r0, #0
 8013df2:	bd10      	pop	{r4, pc}
 8013df4:	2000      	movs	r0, #0
 8013df6:	4770      	bx	lr

08013df8 <rcl_publisher_is_valid_except_context>:
 8013df8:	b130      	cbz	r0, 8013e08 <rcl_publisher_is_valid_except_context+0x10>
 8013dfa:	6800      	ldr	r0, [r0, #0]
 8013dfc:	b120      	cbz	r0, 8013e08 <rcl_publisher_is_valid_except_context+0x10>
 8013dfe:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013e02:	3800      	subs	r0, #0
 8013e04:	bf18      	it	ne
 8013e06:	2001      	movne	r0, #1
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop

08013e0c <rcl_get_zero_initialized_service>:
 8013e0c:	4b01      	ldr	r3, [pc, #4]	; (8013e14 <rcl_get_zero_initialized_service+0x8>)
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop
 8013e14:	080250c8 	.word	0x080250c8

08013e18 <rcl_service_init>:
 8013e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e1c:	b088      	sub	sp, #32
 8013e1e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013e20:	b1ff      	cbz	r7, 8013e62 <rcl_service_init+0x4a>
 8013e22:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013e26:	4605      	mov	r5, r0
 8013e28:	460e      	mov	r6, r1
 8013e2a:	4691      	mov	r9, r2
 8013e2c:	4650      	mov	r0, sl
 8013e2e:	4698      	mov	r8, r3
 8013e30:	f001 fa30 	bl	8015294 <rcutils_allocator_is_valid>
 8013e34:	f080 0401 	eor.w	r4, r0, #1
 8013e38:	b2e4      	uxtb	r4, r4
 8013e3a:	b994      	cbnz	r4, 8013e62 <rcl_service_init+0x4a>
 8013e3c:	b18d      	cbz	r5, 8013e62 <rcl_service_init+0x4a>
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f7ff fe78 	bl	8013b34 <rcl_node_is_valid>
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d05d      	beq.n	8013f04 <rcl_service_init+0xec>
 8013e48:	f1b8 0f00 	cmp.w	r8, #0
 8013e4c:	d009      	beq.n	8013e62 <rcl_service_init+0x4a>
 8013e4e:	f1b9 0f00 	cmp.w	r9, #0
 8013e52:	d006      	beq.n	8013e62 <rcl_service_init+0x4a>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	b14b      	cbz	r3, 8013e6c <rcl_service_init+0x54>
 8013e58:	2464      	movs	r4, #100	; 0x64
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	b008      	add	sp, #32
 8013e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e62:	240b      	movs	r4, #11
 8013e64:	4620      	mov	r0, r4
 8013e66:	b008      	add	sp, #32
 8013e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e6c:	aa07      	add	r2, sp, #28
 8013e6e:	9304      	str	r3, [sp, #16]
 8013e70:	9307      	str	r3, [sp, #28]
 8013e72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e76:	9205      	str	r2, [sp, #20]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	9203      	str	r2, [sp, #12]
 8013e7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013e84:	4641      	mov	r1, r8
 8013e86:	4630      	mov	r0, r6
 8013e88:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013e8c:	f007 fe40 	bl	801bb10 <rcl_node_resolve_name>
 8013e90:	2800      	cmp	r0, #0
 8013e92:	d146      	bne.n	8013f22 <rcl_service_init+0x10a>
 8013e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e96:	f44f 7088 	mov.w	r0, #272	; 0x110
 8013e9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013e9c:	4798      	blx	r3
 8013e9e:	6028      	str	r0, [r5, #0]
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	d046      	beq.n	8013f32 <rcl_service_init+0x11a>
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f7ff fe67 	bl	8013b78 <rcl_node_get_rmw_handle>
 8013eaa:	463b      	mov	r3, r7
 8013eac:	4649      	mov	r1, r9
 8013eae:	9a07      	ldr	r2, [sp, #28]
 8013eb0:	682c      	ldr	r4, [r5, #0]
 8013eb2:	f002 fbb1 	bl	8016618 <rmw_create_service>
 8013eb6:	682b      	ldr	r3, [r5, #0]
 8013eb8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8013ebc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013ec0:	b338      	cbz	r0, 8013f12 <rcl_service_init+0xfa>
 8013ec2:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8013ec6:	f002 fcd9 	bl	801687c <rmw_service_request_subscription_get_actual_qos>
 8013eca:	bb00      	cbnz	r0, 8013f0e <rcl_service_init+0xf6>
 8013ecc:	682b      	ldr	r3, [r5, #0]
 8013ece:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8013ed2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013ed6:	f002 fcbd 	bl	8016854 <rmw_service_response_publisher_get_actual_qos>
 8013eda:	4604      	mov	r4, r0
 8013edc:	b9b8      	cbnz	r0, 8013f0e <rcl_service_init+0xf6>
 8013ede:	6828      	ldr	r0, [r5, #0]
 8013ee0:	2268      	movs	r2, #104	; 0x68
 8013ee2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013eec:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8013ef0:	f00d f931 	bl	8021156 <memcpy>
 8013ef4:	9807      	ldr	r0, [sp, #28]
 8013ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ef8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013efa:	4798      	blx	r3
 8013efc:	4620      	mov	r0, r4
 8013efe:	b008      	add	sp, #32
 8013f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f04:	24c8      	movs	r4, #200	; 0xc8
 8013f06:	4620      	mov	r0, r4
 8013f08:	b008      	add	sp, #32
 8013f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f0e:	682b      	ldr	r3, [r5, #0]
 8013f10:	b16b      	cbz	r3, 8013f2e <rcl_service_init+0x116>
 8013f12:	4618      	mov	r0, r3
 8013f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013f18:	2401      	movs	r4, #1
 8013f1a:	4790      	blx	r2
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	602b      	str	r3, [r5, #0]
 8013f20:	e7e8      	b.n	8013ef4 <rcl_service_init+0xdc>
 8013f22:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	d905      	bls.n	8013f36 <rcl_service_init+0x11e>
 8013f2a:	280a      	cmp	r0, #10
 8013f2c:	d001      	beq.n	8013f32 <rcl_service_init+0x11a>
 8013f2e:	2401      	movs	r4, #1
 8013f30:	e7e0      	b.n	8013ef4 <rcl_service_init+0xdc>
 8013f32:	240a      	movs	r4, #10
 8013f34:	e7de      	b.n	8013ef4 <rcl_service_init+0xdc>
 8013f36:	2468      	movs	r4, #104	; 0x68
 8013f38:	e7dc      	b.n	8013ef4 <rcl_service_init+0xdc>
 8013f3a:	bf00      	nop

08013f3c <rcl_service_get_default_options>:
 8013f3c:	b530      	push	{r4, r5, lr}
 8013f3e:	4d0f      	ldr	r5, [pc, #60]	; (8013f7c <rcl_service_get_default_options+0x40>)
 8013f40:	b087      	sub	sp, #28
 8013f42:	4604      	mov	r4, r0
 8013f44:	2250      	movs	r2, #80	; 0x50
 8013f46:	490e      	ldr	r1, [pc, #56]	; (8013f80 <rcl_service_get_default_options+0x44>)
 8013f48:	4628      	mov	r0, r5
 8013f4a:	f00d f904 	bl	8021156 <memcpy>
 8013f4e:	4668      	mov	r0, sp
 8013f50:	f001 f992 	bl	8015278 <rcutils_get_default_allocator>
 8013f54:	46ec      	mov	ip, sp
 8013f56:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013f5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f62:	f8dc 3000 	ldr.w	r3, [ip]
 8013f66:	2268      	movs	r2, #104	; 0x68
 8013f68:	4629      	mov	r1, r5
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	f8ce 3000 	str.w	r3, [lr]
 8013f70:	f00d f8f1 	bl	8021156 <memcpy>
 8013f74:	4620      	mov	r0, r4
 8013f76:	b007      	add	sp, #28
 8013f78:	bd30      	pop	{r4, r5, pc}
 8013f7a:	bf00      	nop
 8013f7c:	20012480 	.word	0x20012480
 8013f80:	080250d0 	.word	0x080250d0

08013f84 <rcl_service_get_rmw_handle>:
 8013f84:	b118      	cbz	r0, 8013f8e <rcl_service_get_rmw_handle+0xa>
 8013f86:	6800      	ldr	r0, [r0, #0]
 8013f88:	b108      	cbz	r0, 8013f8e <rcl_service_get_rmw_handle+0xa>
 8013f8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013f8e:	4770      	bx	lr

08013f90 <rcl_take_request>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	468e      	mov	lr, r1
 8013f94:	b08c      	sub	sp, #48	; 0x30
 8013f96:	460c      	mov	r4, r1
 8013f98:	4616      	mov	r6, r2
 8013f9a:	f10d 0c18 	add.w	ip, sp, #24
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fa8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013fac:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013fb0:	b30d      	cbz	r5, 8013ff6 <rcl_take_request+0x66>
 8013fb2:	682b      	ldr	r3, [r5, #0]
 8013fb4:	b1fb      	cbz	r3, 8013ff6 <rcl_take_request+0x66>
 8013fb6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013fba:	b1e0      	cbz	r0, 8013ff6 <rcl_take_request+0x66>
 8013fbc:	b336      	cbz	r6, 801400c <rcl_take_request+0x7c>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	4632      	mov	r2, r6
 8013fc2:	a902      	add	r1, sp, #8
 8013fc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8013fc8:	f10d 0307 	add.w	r3, sp, #7
 8013fcc:	f002 fa22 	bl	8016414 <rmw_take_request>
 8013fd0:	4605      	mov	r5, r0
 8013fd2:	b198      	cbz	r0, 8013ffc <rcl_take_request+0x6c>
 8013fd4:	280a      	cmp	r0, #10
 8013fd6:	bf18      	it	ne
 8013fd8:	2501      	movne	r5, #1
 8013fda:	f10d 0e18 	add.w	lr, sp, #24
 8013fde:	46a4      	mov	ip, r4
 8013fe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fe8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013fec:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	b00c      	add	sp, #48	; 0x30
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	f44f 7516 	mov.w	r5, #600	; 0x258
 8013ffa:	e7ee      	b.n	8013fda <rcl_take_request+0x4a>
 8013ffc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014000:	f240 2359 	movw	r3, #601	; 0x259
 8014004:	2a00      	cmp	r2, #0
 8014006:	bf08      	it	eq
 8014008:	461d      	moveq	r5, r3
 801400a:	e7e6      	b.n	8013fda <rcl_take_request+0x4a>
 801400c:	250b      	movs	r5, #11
 801400e:	e7e4      	b.n	8013fda <rcl_take_request+0x4a>

08014010 <rcl_send_response>:
 8014010:	b170      	cbz	r0, 8014030 <rcl_send_response+0x20>
 8014012:	6800      	ldr	r0, [r0, #0]
 8014014:	b160      	cbz	r0, 8014030 <rcl_send_response+0x20>
 8014016:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801401a:	b148      	cbz	r0, 8014030 <rcl_send_response+0x20>
 801401c:	b169      	cbz	r1, 801403a <rcl_send_response+0x2a>
 801401e:	b510      	push	{r4, lr}
 8014020:	b14a      	cbz	r2, 8014036 <rcl_send_response+0x26>
 8014022:	f002 fa55 	bl	80164d0 <rmw_send_response>
 8014026:	b110      	cbz	r0, 801402e <rcl_send_response+0x1e>
 8014028:	2802      	cmp	r0, #2
 801402a:	bf18      	it	ne
 801402c:	2001      	movne	r0, #1
 801402e:	bd10      	pop	{r4, pc}
 8014030:	f44f 7016 	mov.w	r0, #600	; 0x258
 8014034:	4770      	bx	lr
 8014036:	200b      	movs	r0, #11
 8014038:	bd10      	pop	{r4, pc}
 801403a:	200b      	movs	r0, #11
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop

08014040 <rcl_service_is_valid>:
 8014040:	b130      	cbz	r0, 8014050 <rcl_service_is_valid+0x10>
 8014042:	6800      	ldr	r0, [r0, #0]
 8014044:	b120      	cbz	r0, 8014050 <rcl_service_is_valid+0x10>
 8014046:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801404a:	3800      	subs	r0, #0
 801404c:	bf18      	it	ne
 801404e:	2001      	movne	r0, #1
 8014050:	4770      	bx	lr
 8014052:	bf00      	nop

08014054 <rcl_get_zero_initialized_subscription>:
 8014054:	4b01      	ldr	r3, [pc, #4]	; (801405c <rcl_get_zero_initialized_subscription+0x8>)
 8014056:	6818      	ldr	r0, [r3, #0]
 8014058:	4770      	bx	lr
 801405a:	bf00      	nop
 801405c:	08025120 	.word	0x08025120

08014060 <rcl_subscription_init>:
 8014060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014064:	b088      	sub	sp, #32
 8014066:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014068:	b1ff      	cbz	r7, 80140aa <rcl_subscription_init+0x4a>
 801406a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 801406e:	4605      	mov	r5, r0
 8014070:	460e      	mov	r6, r1
 8014072:	4691      	mov	r9, r2
 8014074:	4650      	mov	r0, sl
 8014076:	4698      	mov	r8, r3
 8014078:	f001 f90c 	bl	8015294 <rcutils_allocator_is_valid>
 801407c:	f080 0401 	eor.w	r4, r0, #1
 8014080:	b2e4      	uxtb	r4, r4
 8014082:	b994      	cbnz	r4, 80140aa <rcl_subscription_init+0x4a>
 8014084:	b18d      	cbz	r5, 80140aa <rcl_subscription_init+0x4a>
 8014086:	4630      	mov	r0, r6
 8014088:	f7ff fd54 	bl	8013b34 <rcl_node_is_valid>
 801408c:	2800      	cmp	r0, #0
 801408e:	d055      	beq.n	801413c <rcl_subscription_init+0xdc>
 8014090:	f1b9 0f00 	cmp.w	r9, #0
 8014094:	d009      	beq.n	80140aa <rcl_subscription_init+0x4a>
 8014096:	f1b8 0f00 	cmp.w	r8, #0
 801409a:	d006      	beq.n	80140aa <rcl_subscription_init+0x4a>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	b14b      	cbz	r3, 80140b4 <rcl_subscription_init+0x54>
 80140a0:	2464      	movs	r4, #100	; 0x64
 80140a2:	4620      	mov	r0, r4
 80140a4:	b008      	add	sp, #32
 80140a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140aa:	240b      	movs	r4, #11
 80140ac:	4620      	mov	r0, r4
 80140ae:	b008      	add	sp, #32
 80140b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80140b8:	aa07      	add	r2, sp, #28
 80140ba:	9307      	str	r3, [sp, #28]
 80140bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80140c0:	9205      	str	r2, [sp, #20]
 80140c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80140ca:	4641      	mov	r1, r8
 80140cc:	4630      	mov	r0, r6
 80140ce:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80140d2:	f007 fd1d 	bl	801bb10 <rcl_node_resolve_name>
 80140d6:	2800      	cmp	r0, #0
 80140d8:	d15f      	bne.n	801419a <rcl_subscription_init+0x13a>
 80140da:	21c8      	movs	r1, #200	; 0xc8
 80140dc:	2001      	movs	r0, #1
 80140de:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 80140e2:	4798      	blx	r3
 80140e4:	6028      	str	r0, [r5, #0]
 80140e6:	2800      	cmp	r0, #0
 80140e8:	d05f      	beq.n	80141aa <rcl_subscription_init+0x14a>
 80140ea:	4630      	mov	r0, r6
 80140ec:	f7ff fd44 	bl	8013b78 <rcl_node_get_rmw_handle>
 80140f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80140f4:	4649      	mov	r1, r9
 80140f6:	9a07      	ldr	r2, [sp, #28]
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	463b      	mov	r3, r7
 80140fc:	682c      	ldr	r4, [r5, #0]
 80140fe:	f002 fbd1 	bl	80168a4 <rmw_create_subscription>
 8014102:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8014106:	682c      	ldr	r4, [r5, #0]
 8014108:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 801410c:	b348      	cbz	r0, 8014162 <rcl_subscription_init+0x102>
 801410e:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8014112:	f002 fcbd 	bl	8016a90 <rmw_subscription_get_actual_qos>
 8014116:	4604      	mov	r4, r0
 8014118:	b9a8      	cbnz	r0, 8014146 <rcl_subscription_init+0xe6>
 801411a:	6828      	ldr	r0, [r5, #0]
 801411c:	2270      	movs	r2, #112	; 0x70
 801411e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8014122:	4639      	mov	r1, r7
 8014124:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8014128:	f00d f815 	bl	8021156 <memcpy>
 801412c:	9807      	ldr	r0, [sp, #28]
 801412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014130:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014132:	4798      	blx	r3
 8014134:	4620      	mov	r0, r4
 8014136:	b008      	add	sp, #32
 8014138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801413c:	24c8      	movs	r4, #200	; 0xc8
 801413e:	4620      	mov	r0, r4
 8014140:	b008      	add	sp, #32
 8014142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014146:	682c      	ldr	r4, [r5, #0]
 8014148:	b36c      	cbz	r4, 80141a6 <rcl_subscription_init+0x146>
 801414a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801414e:	b14b      	cbz	r3, 8014164 <rcl_subscription_init+0x104>
 8014150:	4630      	mov	r0, r6
 8014152:	f7ff fd11 	bl	8013b78 <rcl_node_get_rmw_handle>
 8014156:	682b      	ldr	r3, [r5, #0]
 8014158:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801415c:	f002 fcac 	bl	8016ab8 <rmw_destroy_subscription>
 8014160:	682c      	ldr	r4, [r5, #0]
 8014162:	b194      	cbz	r4, 801418a <rcl_subscription_init+0x12a>
 8014164:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8014168:	4630      	mov	r0, r6
 801416a:	f001 f893 	bl	8015294 <rcutils_allocator_is_valid>
 801416e:	b158      	cbz	r0, 8014188 <rcl_subscription_init+0x128>
 8014170:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8014172:	b148      	cbz	r0, 8014188 <rcl_subscription_init+0x128>
 8014174:	4631      	mov	r1, r6
 8014176:	f001 fac3 	bl	8015700 <rmw_subscription_content_filter_options_fini>
 801417a:	4606      	mov	r6, r0
 801417c:	b9c8      	cbnz	r0, 80141b2 <rcl_subscription_init+0x152>
 801417e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014180:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014182:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8014184:	4798      	blx	r3
 8014186:	66e6      	str	r6, [r4, #108]	; 0x6c
 8014188:	682c      	ldr	r4, [r5, #0]
 801418a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801418c:	4620      	mov	r0, r4
 801418e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014190:	2401      	movs	r4, #1
 8014192:	4798      	blx	r3
 8014194:	2300      	movs	r3, #0
 8014196:	602b      	str	r3, [r5, #0]
 8014198:	e7c8      	b.n	801412c <rcl_subscription_init+0xcc>
 801419a:	2867      	cmp	r0, #103	; 0x67
 801419c:	d007      	beq.n	80141ae <rcl_subscription_init+0x14e>
 801419e:	2869      	cmp	r0, #105	; 0x69
 80141a0:	d005      	beq.n	80141ae <rcl_subscription_init+0x14e>
 80141a2:	280a      	cmp	r0, #10
 80141a4:	d001      	beq.n	80141aa <rcl_subscription_init+0x14a>
 80141a6:	2401      	movs	r4, #1
 80141a8:	e7c0      	b.n	801412c <rcl_subscription_init+0xcc>
 80141aa:	240a      	movs	r4, #10
 80141ac:	e7be      	b.n	801412c <rcl_subscription_init+0xcc>
 80141ae:	2467      	movs	r4, #103	; 0x67
 80141b0:	e7bc      	b.n	801412c <rcl_subscription_init+0xcc>
 80141b2:	f007 fa53 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 80141b6:	682c      	ldr	r4, [r5, #0]
 80141b8:	e7e7      	b.n	801418a <rcl_subscription_init+0x12a>
 80141ba:	bf00      	nop

080141bc <rcl_subscription_get_default_options>:
 80141bc:	b570      	push	{r4, r5, r6, lr}
 80141be:	4d14      	ldr	r5, [pc, #80]	; (8014210 <rcl_subscription_get_default_options+0x54>)
 80141c0:	b08a      	sub	sp, #40	; 0x28
 80141c2:	4604      	mov	r4, r0
 80141c4:	2250      	movs	r2, #80	; 0x50
 80141c6:	4913      	ldr	r1, [pc, #76]	; (8014214 <rcl_subscription_get_default_options+0x58>)
 80141c8:	4628      	mov	r0, r5
 80141ca:	f00c ffc4 	bl	8021156 <memcpy>
 80141ce:	a804      	add	r0, sp, #16
 80141d0:	f001 f852 	bl	8015278 <rcutils_get_default_allocator>
 80141d4:	f10d 0c10 	add.w	ip, sp, #16
 80141d8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80141dc:	466e      	mov	r6, sp
 80141de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80141e6:	f8dc 3000 	ldr.w	r3, [ip]
 80141ea:	4630      	mov	r0, r6
 80141ec:	f8ce 3000 	str.w	r3, [lr]
 80141f0:	f001 faa0 	bl	8015734 <rmw_get_default_subscription_options>
 80141f4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80141f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80141fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014200:	2270      	movs	r2, #112	; 0x70
 8014202:	4629      	mov	r1, r5
 8014204:	4620      	mov	r0, r4
 8014206:	f00c ffa6 	bl	8021156 <memcpy>
 801420a:	4620      	mov	r0, r4
 801420c:	b00a      	add	sp, #40	; 0x28
 801420e:	bd70      	pop	{r4, r5, r6, pc}
 8014210:	200124e8 	.word	0x200124e8
 8014214:	08025128 	.word	0x08025128

08014218 <rcl_take>:
 8014218:	2800      	cmp	r0, #0
 801421a:	d049      	beq.n	80142b0 <rcl_take+0x98>
 801421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014220:	4615      	mov	r5, r2
 8014222:	6802      	ldr	r2, [r0, #0]
 8014224:	b0a4      	sub	sp, #144	; 0x90
 8014226:	4604      	mov	r4, r0
 8014228:	2a00      	cmp	r2, #0
 801422a:	d039      	beq.n	80142a0 <rcl_take+0x88>
 801422c:	461f      	mov	r7, r3
 801422e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8014232:	b3ab      	cbz	r3, 80142a0 <rcl_take+0x88>
 8014234:	460e      	mov	r6, r1
 8014236:	2900      	cmp	r1, #0
 8014238:	d038      	beq.n	80142ac <rcl_take+0x94>
 801423a:	2d00      	cmp	r5, #0
 801423c:	d03c      	beq.n	80142b8 <rcl_take+0xa0>
 801423e:	a802      	add	r0, sp, #8
 8014240:	f04f 0800 	mov.w	r8, #0
 8014244:	f001 fa7c 	bl	8015740 <rmw_get_zero_initialized_message_info>
 8014248:	f10d 0c08 	add.w	ip, sp, #8
 801424c:	46ae      	mov	lr, r5
 801424e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014252:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801425a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801425e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014262:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014266:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801426a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801426e:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8014272:	462b      	mov	r3, r5
 8014274:	6820      	ldr	r0, [r4, #0]
 8014276:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801427a:	4631      	mov	r1, r6
 801427c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014280:	9700      	str	r7, [sp, #0]
 8014282:	f002 fc7b 	bl	8016b7c <rmw_take_with_info>
 8014286:	4603      	mov	r3, r0
 8014288:	b9c0      	cbnz	r0, 80142bc <rcl_take+0xa4>
 801428a:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801428e:	f240 1291 	movw	r2, #401	; 0x191
 8014292:	2900      	cmp	r1, #0
 8014294:	bf08      	it	eq
 8014296:	4613      	moveq	r3, r2
 8014298:	4618      	mov	r0, r3
 801429a:	b024      	add	sp, #144	; 0x90
 801429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80142a4:	4618      	mov	r0, r3
 80142a6:	b024      	add	sp, #144	; 0x90
 80142a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142ac:	230b      	movs	r3, #11
 80142ae:	e7f3      	b.n	8014298 <rcl_take+0x80>
 80142b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80142b4:	4618      	mov	r0, r3
 80142b6:	4770      	bx	lr
 80142b8:	ad14      	add	r5, sp, #80	; 0x50
 80142ba:	e7c0      	b.n	801423e <rcl_take+0x26>
 80142bc:	f007 f9ce 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 80142c0:	4603      	mov	r3, r0
 80142c2:	e7e9      	b.n	8014298 <rcl_take+0x80>

080142c4 <rcl_subscription_get_rmw_handle>:
 80142c4:	b118      	cbz	r0, 80142ce <rcl_subscription_get_rmw_handle+0xa>
 80142c6:	6800      	ldr	r0, [r0, #0]
 80142c8:	b108      	cbz	r0, 80142ce <rcl_subscription_get_rmw_handle+0xa>
 80142ca:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80142ce:	4770      	bx	lr

080142d0 <rcl_subscription_is_valid>:
 80142d0:	b130      	cbz	r0, 80142e0 <rcl_subscription_is_valid+0x10>
 80142d2:	6800      	ldr	r0, [r0, #0]
 80142d4:	b120      	cbz	r0, 80142e0 <rcl_subscription_is_valid+0x10>
 80142d6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80142da:	3800      	subs	r0, #0
 80142dc:	bf18      	it	ne
 80142de:	2001      	movne	r0, #1
 80142e0:	4770      	bx	lr
 80142e2:	bf00      	nop

080142e4 <_rclc_check_for_new_data>:
 80142e4:	2800      	cmp	r0, #0
 80142e6:	d046      	beq.n	8014376 <_rclc_check_for_new_data+0x92>
 80142e8:	4603      	mov	r3, r0
 80142ea:	b530      	push	{r4, r5, lr}
 80142ec:	7802      	ldrb	r2, [r0, #0]
 80142ee:	b085      	sub	sp, #20
 80142f0:	2a0a      	cmp	r2, #10
 80142f2:	d842      	bhi.n	801437a <_rclc_check_for_new_data+0x96>
 80142f4:	e8df f002 	tbb	[pc, r2]
 80142f8:	14181212 	.word	0x14181212
 80142fc:	06060614 	.word	0x06060614
 8014300:	2e1a      	.short	0x2e1a
 8014302:	16          	.byte	0x16
 8014303:	00          	.byte	0x00
 8014304:	6a0a      	ldr	r2, [r1, #32]
 8014306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014308:	2000      	movs	r0, #0
 801430a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801430e:	1a12      	subs	r2, r2, r0
 8014310:	bf18      	it	ne
 8014312:	2201      	movne	r2, #1
 8014314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014318:	b005      	add	sp, #20
 801431a:	bd30      	pop	{r4, r5, pc}
 801431c:	680a      	ldr	r2, [r1, #0]
 801431e:	e7f2      	b.n	8014306 <_rclc_check_for_new_data+0x22>
 8014320:	698a      	ldr	r2, [r1, #24]
 8014322:	e7f0      	b.n	8014306 <_rclc_check_for_new_data+0x22>
 8014324:	688a      	ldr	r2, [r1, #8]
 8014326:	e7ee      	b.n	8014306 <_rclc_check_for_new_data+0x22>
 8014328:	690a      	ldr	r2, [r1, #16]
 801432a:	e7ec      	b.n	8014306 <_rclc_check_for_new_data+0x22>
 801432c:	685c      	ldr	r4, [r3, #4]
 801432e:	4608      	mov	r0, r1
 8014330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801433c:	f104 0110 	add.w	r1, r4, #16
 8014340:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014344:	9500      	str	r5, [sp, #0]
 8014346:	f104 0341 	add.w	r3, r4, #65	; 0x41
 801434a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801434e:	f008 ff4b 	bl	801d1e8 <rcl_action_client_wait_set_get_entities_ready>
 8014352:	e7e1      	b.n	8014318 <_rclc_check_for_new_data+0x34>
 8014354:	685c      	ldr	r4, [r3, #4]
 8014356:	4608      	mov	r0, r1
 8014358:	f104 0222 	add.w	r2, r4, #34	; 0x22
 801435c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014360:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8014364:	e9cd 2100 	strd	r2, r1, [sp]
 8014368:	f104 0220 	add.w	r2, r4, #32
 801436c:	f104 0110 	add.w	r1, r4, #16
 8014370:	f009 f952 	bl	801d618 <rcl_action_server_wait_set_get_entities_ready>
 8014374:	e7d0      	b.n	8014318 <_rclc_check_for_new_data+0x34>
 8014376:	200b      	movs	r0, #11
 8014378:	4770      	bx	lr
 801437a:	2001      	movs	r0, #1
 801437c:	e7cc      	b.n	8014318 <_rclc_check_for_new_data+0x34>
 801437e:	bf00      	nop

08014380 <_rclc_take_new_data>:
 8014380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014382:	b09b      	sub	sp, #108	; 0x6c
 8014384:	2800      	cmp	r0, #0
 8014386:	f000 8088 	beq.w	801449a <_rclc_take_new_data+0x11a>
 801438a:	7803      	ldrb	r3, [r0, #0]
 801438c:	4604      	mov	r4, r0
 801438e:	2b0a      	cmp	r3, #10
 8014390:	f200 8167 	bhi.w	8014662 <_rclc_take_new_data+0x2e2>
 8014394:	e8df f003 	tbb	[pc, r3]
 8014398:	44152d2d 	.word	0x44152d2d
 801439c:	19191944 	.word	0x19191944
 80143a0:	065a      	.short	0x065a
 80143a2:	15          	.byte	0x15
 80143a3:	00          	.byte	0x00
 80143a4:	6840      	ldr	r0, [r0, #4]
 80143a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	f040 80b2 	bne.w	8014514 <_rclc_take_new_data+0x194>
 80143b0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	f040 80e4 	bne.w	8014582 <_rclc_take_new_data+0x202>
 80143ba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d16f      	bne.n	80144a2 <_rclc_take_new_data+0x122>
 80143c2:	2500      	movs	r5, #0
 80143c4:	4628      	mov	r0, r5
 80143c6:	b01b      	add	sp, #108	; 0x6c
 80143c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80143cc:	6a0b      	ldr	r3, [r1, #32]
 80143ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d0f5      	beq.n	80143c2 <_rclc_take_new_data+0x42>
 80143d6:	6882      	ldr	r2, [r0, #8]
 80143d8:	f100 0110 	add.w	r1, r0, #16
 80143dc:	6840      	ldr	r0, [r0, #4]
 80143de:	f7ff fdd7 	bl	8013f90 <rcl_take_request>
 80143e2:	4605      	mov	r5, r0
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d0ec      	beq.n	80143c2 <_rclc_take_new_data+0x42>
 80143e8:	f240 2359 	movw	r3, #601	; 0x259
 80143ec:	4298      	cmp	r0, r3
 80143ee:	d013      	beq.n	8014418 <_rclc_take_new_data+0x98>
 80143f0:	e029      	b.n	8014446 <_rclc_take_new_data+0xc6>
 80143f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80143f4:	680b      	ldr	r3, [r1, #0]
 80143f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d0e1      	beq.n	80143c2 <_rclc_take_new_data+0x42>
 80143fe:	2300      	movs	r3, #0
 8014400:	aa0a      	add	r2, sp, #40	; 0x28
 8014402:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8014406:	f7ff ff07 	bl	8014218 <rcl_take>
 801440a:	4605      	mov	r5, r0
 801440c:	2800      	cmp	r0, #0
 801440e:	d0d9      	beq.n	80143c4 <_rclc_take_new_data+0x44>
 8014410:	f240 1391 	movw	r3, #401	; 0x191
 8014414:	4298      	cmp	r0, r3
 8014416:	d116      	bne.n	8014446 <_rclc_take_new_data+0xc6>
 8014418:	2300      	movs	r3, #0
 801441a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801441e:	e7d1      	b.n	80143c4 <_rclc_take_new_data+0x44>
 8014420:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014422:	698b      	ldr	r3, [r1, #24]
 8014424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d0ca      	beq.n	80143c2 <_rclc_take_new_data+0x42>
 801442c:	6882      	ldr	r2, [r0, #8]
 801442e:	f100 0110 	add.w	r1, r0, #16
 8014432:	6840      	ldr	r0, [r0, #4]
 8014434:	f007 f8c0 	bl	801b5b8 <rcl_take_response>
 8014438:	4605      	mov	r5, r0
 801443a:	2800      	cmp	r0, #0
 801443c:	d0c1      	beq.n	80143c2 <_rclc_take_new_data+0x42>
 801443e:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014442:	4298      	cmp	r0, r3
 8014444:	d0be      	beq.n	80143c4 <_rclc_take_new_data+0x44>
 8014446:	f000 ff63 	bl	8015310 <rcutils_reset_error>
 801444a:	e7bb      	b.n	80143c4 <_rclc_take_new_data+0x44>
 801444c:	6840      	ldr	r0, [r0, #4]
 801444e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8014452:	2b00      	cmp	r3, #0
 8014454:	d17d      	bne.n	8014552 <_rclc_take_new_data+0x1d2>
 8014456:	69c3      	ldr	r3, [r0, #28]
 8014458:	b11b      	cbz	r3, 8014462 <_rclc_take_new_data+0xe2>
 801445a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801445e:	2b00      	cmp	r3, #0
 8014460:	d144      	bne.n	80144ec <_rclc_take_new_data+0x16c>
 8014462:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014466:	2b00      	cmp	r3, #0
 8014468:	f040 80ac 	bne.w	80145c4 <_rclc_take_new_data+0x244>
 801446c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014470:	2b00      	cmp	r3, #0
 8014472:	d0a6      	beq.n	80143c2 <_rclc_take_new_data+0x42>
 8014474:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014476:	a90a      	add	r1, sp, #40	; 0x28
 8014478:	3010      	adds	r0, #16
 801447a:	f008 fd8d 	bl	801cf98 <rcl_action_take_result_response>
 801447e:	4605      	mov	r5, r0
 8014480:	2800      	cmp	r0, #0
 8014482:	d1e0      	bne.n	8014446 <_rclc_take_new_data+0xc6>
 8014484:	6860      	ldr	r0, [r4, #4]
 8014486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801448a:	f009 f9f5 	bl	801d878 <rclc_action_find_handle_by_result_request_sequence_number>
 801448e:	2800      	cmp	r0, #0
 8014490:	d098      	beq.n	80143c4 <_rclc_take_new_data+0x44>
 8014492:	2301      	movs	r3, #1
 8014494:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8014498:	e794      	b.n	80143c4 <_rclc_take_new_data+0x44>
 801449a:	250b      	movs	r5, #11
 801449c:	4628      	mov	r0, r5
 801449e:	b01b      	add	sp, #108	; 0x6c
 80144a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a2:	ae04      	add	r6, sp, #16
 80144a4:	3010      	adds	r0, #16
 80144a6:	aa0a      	add	r2, sp, #40	; 0x28
 80144a8:	4631      	mov	r1, r6
 80144aa:	f008 ffe9 	bl	801d480 <rcl_action_take_cancel_request>
 80144ae:	4605      	mov	r5, r0
 80144b0:	2800      	cmp	r0, #0
 80144b2:	d1c8      	bne.n	8014446 <_rclc_take_new_data+0xc6>
 80144b4:	a90a      	add	r1, sp, #40	; 0x28
 80144b6:	6860      	ldr	r0, [r4, #4]
 80144b8:	f009 f99e 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 80144bc:	4607      	mov	r7, r0
 80144be:	2800      	cmp	r0, #0
 80144c0:	f000 80bb 	beq.w	801463a <_rclc_take_new_data+0x2ba>
 80144c4:	2101      	movs	r1, #1
 80144c6:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80144ca:	f009 f91f 	bl	801d70c <rcl_action_transition_goal_state>
 80144ce:	2803      	cmp	r0, #3
 80144d0:	4684      	mov	ip, r0
 80144d2:	f040 80a7 	bne.w	8014624 <_rclc_take_new_data+0x2a4>
 80144d6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80144da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80144dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80144e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80144e6:	f887 c008 	strb.w	ip, [r7, #8]
 80144ea:	e76b      	b.n	80143c4 <_rclc_take_new_data+0x44>
 80144ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80144ee:	3010      	adds	r0, #16
 80144f0:	f008 fdd2 	bl	801d098 <rcl_action_take_feedback>
 80144f4:	4605      	mov	r5, r0
 80144f6:	2800      	cmp	r0, #0
 80144f8:	d1a5      	bne.n	8014446 <_rclc_take_new_data+0xc6>
 80144fa:	6860      	ldr	r0, [r4, #4]
 80144fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80144fe:	f009 f97b 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 8014502:	4603      	mov	r3, r0
 8014504:	2800      	cmp	r0, #0
 8014506:	f000 80a3 	beq.w	8014650 <_rclc_take_new_data+0x2d0>
 801450a:	2201      	movs	r2, #1
 801450c:	6860      	ldr	r0, [r4, #4]
 801450e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8014512:	e7a6      	b.n	8014462 <_rclc_take_new_data+0xe2>
 8014514:	f009 f94a 	bl	801d7ac <rclc_action_take_goal_handle>
 8014518:	4606      	mov	r6, r0
 801451a:	6860      	ldr	r0, [r4, #4]
 801451c:	2e00      	cmp	r6, #0
 801451e:	f43f af47 	beq.w	80143b0 <_rclc_take_new_data+0x30>
 8014522:	6070      	str	r0, [r6, #4]
 8014524:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014528:	69f2      	ldr	r2, [r6, #28]
 801452a:	3010      	adds	r0, #16
 801452c:	f008 fef2 	bl	801d314 <rcl_action_take_goal_request>
 8014530:	4605      	mov	r5, r0
 8014532:	2800      	cmp	r0, #0
 8014534:	f040 808e 	bne.w	8014654 <_rclc_take_new_data+0x2d4>
 8014538:	69f7      	ldr	r7, [r6, #28]
 801453a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801453c:	7235      	strb	r5, [r6, #8]
 801453e:	f8c6 0009 	str.w	r0, [r6, #9]
 8014542:	f8c6 100d 	str.w	r1, [r6, #13]
 8014546:	6860      	ldr	r0, [r4, #4]
 8014548:	f8c6 2011 	str.w	r2, [r6, #17]
 801454c:	f8c6 3015 	str.w	r3, [r6, #21]
 8014550:	e72e      	b.n	80143b0 <_rclc_take_new_data+0x30>
 8014552:	aa04      	add	r2, sp, #16
 8014554:	a90a      	add	r1, sp, #40	; 0x28
 8014556:	3010      	adds	r0, #16
 8014558:	f008 fca6 	bl	801cea8 <rcl_action_take_goal_response>
 801455c:	4605      	mov	r5, r0
 801455e:	2800      	cmp	r0, #0
 8014560:	f47f af71 	bne.w	8014446 <_rclc_take_new_data+0xc6>
 8014564:	6860      	ldr	r0, [r4, #4]
 8014566:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801456a:	f009 f973 	bl	801d854 <rclc_action_find_handle_by_goal_request_sequence_number>
 801456e:	b130      	cbz	r0, 801457e <_rclc_take_new_data+0x1fe>
 8014570:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014574:	2201      	movs	r2, #1
 8014576:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 801457a:	f880 2020 	strb.w	r2, [r0, #32]
 801457e:	6860      	ldr	r0, [r4, #4]
 8014580:	e769      	b.n	8014456 <_rclc_take_new_data+0xd6>
 8014582:	3010      	adds	r0, #16
 8014584:	aa04      	add	r2, sp, #16
 8014586:	a90a      	add	r1, sp, #40	; 0x28
 8014588:	f008 ff3a 	bl	801d400 <rcl_action_take_result_request>
 801458c:	4605      	mov	r5, r0
 801458e:	2800      	cmp	r0, #0
 8014590:	f47f af59 	bne.w	8014446 <_rclc_take_new_data+0xc6>
 8014594:	a904      	add	r1, sp, #16
 8014596:	6860      	ldr	r0, [r4, #4]
 8014598:	f009 f92e 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 801459c:	4607      	mov	r7, r0
 801459e:	b160      	cbz	r0, 80145ba <_rclc_take_new_data+0x23a>
 80145a0:	ad0a      	add	r5, sp, #40	; 0x28
 80145a2:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80145a6:	f04f 0c02 	mov.w	ip, #2
 80145aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80145ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80145ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80145b2:	e886 0003 	stmia.w	r6, {r0, r1}
 80145b6:	f887 c008 	strb.w	ip, [r7, #8]
 80145ba:	6860      	ldr	r0, [r4, #4]
 80145bc:	2300      	movs	r3, #0
 80145be:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80145c2:	e6fa      	b.n	80143ba <_rclc_take_new_data+0x3a>
 80145c4:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80145c8:	a90a      	add	r1, sp, #40	; 0x28
 80145ca:	3010      	adds	r0, #16
 80145cc:	f008 fd24 	bl	801d018 <rcl_action_take_cancel_response>
 80145d0:	4605      	mov	r5, r0
 80145d2:	2800      	cmp	r0, #0
 80145d4:	f47f af37 	bne.w	8014446 <_rclc_take_new_data+0xc6>
 80145d8:	6860      	ldr	r0, [r4, #4]
 80145da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80145de:	f009 f95d 	bl	801d89c <rclc_action_find_handle_by_cancel_request_sequence_number>
 80145e2:	4606      	mov	r6, r0
 80145e4:	6860      	ldr	r0, [r4, #4]
 80145e6:	2e00      	cmp	r6, #0
 80145e8:	f43f af40 	beq.w	801446c <_rclc_take_new_data+0xec>
 80145ec:	2701      	movs	r7, #1
 80145ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80145f0:	84b7      	strh	r7, [r6, #36]	; 0x24
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f43f af3a 	beq.w	801446c <_rclc_take_new_data+0xec>
 80145f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80145fa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80145fe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014602:	f009 f8f9 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 8014606:	b138      	cbz	r0, 8014618 <_rclc_take_new_data+0x298>
 8014608:	6860      	ldr	r0, [r4, #4]
 801460a:	3501      	adds	r5, #1
 801460c:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8014610:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014612:	42ab      	cmp	r3, r5
 8014614:	d8f0      	bhi.n	80145f8 <_rclc_take_new_data+0x278>
 8014616:	e729      	b.n	801446c <_rclc_take_new_data+0xec>
 8014618:	6860      	ldr	r0, [r4, #4]
 801461a:	3501      	adds	r5, #1
 801461c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801461e:	42ab      	cmp	r3, r5
 8014620:	d8ea      	bhi.n	80145f8 <_rclc_take_new_data+0x278>
 8014622:	e723      	b.n	801446c <_rclc_take_new_data+0xec>
 8014624:	ab06      	add	r3, sp, #24
 8014626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014628:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801462c:	2103      	movs	r1, #3
 801462e:	6860      	ldr	r0, [r4, #4]
 8014630:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014634:	f009 f9a8 	bl	801d988 <rclc_action_server_goal_cancel_reject>
 8014638:	e6c4      	b.n	80143c4 <_rclc_take_new_data+0x44>
 801463a:	ab06      	add	r3, sp, #24
 801463c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801463e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014642:	2102      	movs	r1, #2
 8014644:	6860      	ldr	r0, [r4, #4]
 8014646:	e896 000c 	ldmia.w	r6, {r2, r3}
 801464a:	f009 f99d 	bl	801d988 <rclc_action_server_goal_cancel_reject>
 801464e:	e6b9      	b.n	80143c4 <_rclc_take_new_data+0x44>
 8014650:	6860      	ldr	r0, [r4, #4]
 8014652:	e706      	b.n	8014462 <_rclc_take_new_data+0xe2>
 8014654:	4631      	mov	r1, r6
 8014656:	6860      	ldr	r0, [r4, #4]
 8014658:	f009 f8b8 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 801465c:	f000 fe58 	bl	8015310 <rcutils_reset_error>
 8014660:	e6b0      	b.n	80143c4 <_rclc_take_new_data+0x44>
 8014662:	2501      	movs	r5, #1
 8014664:	e6ae      	b.n	80143c4 <_rclc_take_new_data+0x44>
 8014666:	bf00      	nop

08014668 <_rclc_execute.part.0>:
 8014668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801466a:	7803      	ldrb	r3, [r0, #0]
 801466c:	b085      	sub	sp, #20
 801466e:	4604      	mov	r4, r0
 8014670:	2b0a      	cmp	r3, #10
 8014672:	f200 8139 	bhi.w	80148e8 <_rclc_execute.part.0+0x280>
 8014676:	e8df f003 	tbb	[pc, r3]
 801467a:	4268      	.short	0x4268
 801467c:	06a75b4d 	.word	0x06a75b4d
 8014680:	721d0606 	.word	0x721d0606
 8014684:	62          	.byte	0x62
 8014685:	00          	.byte	0x00
 8014686:	2b06      	cmp	r3, #6
 8014688:	f000 8126 	beq.w	80148d8 <_rclc_execute.part.0+0x270>
 801468c:	2b07      	cmp	r3, #7
 801468e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014690:	f040 811c 	bne.w	80148cc <_rclc_execute.part.0+0x264>
 8014694:	f104 0510 	add.w	r5, r4, #16
 8014698:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 801469c:	6880      	ldr	r0, [r0, #8]
 801469e:	4798      	blx	r3
 80146a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80146a2:	4629      	mov	r1, r5
 80146a4:	6860      	ldr	r0, [r4, #4]
 80146a6:	f7ff fcb3 	bl	8014010 <rcl_send_response>
 80146aa:	4604      	mov	r4, r0
 80146ac:	b378      	cbz	r0, 801470e <_rclc_execute.part.0+0xa6>
 80146ae:	f000 fe2f 	bl	8015310 <rcutils_reset_error>
 80146b2:	e02c      	b.n	801470e <_rclc_execute.part.0+0xa6>
 80146b4:	6840      	ldr	r0, [r0, #4]
 80146b6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	f000 808e 	beq.w	80147dc <_rclc_execute.part.0+0x174>
 80146c0:	2600      	movs	r6, #0
 80146c2:	2701      	movs	r7, #1
 80146c4:	e004      	b.n	80146d0 <_rclc_execute.part.0+0x68>
 80146c6:	f009 f84b 	bl	801d760 <rclc_action_send_result_request>
 80146ca:	b998      	cbnz	r0, 80146f4 <_rclc_execute.part.0+0x8c>
 80146cc:	722f      	strb	r7, [r5, #8]
 80146ce:	6860      	ldr	r0, [r4, #4]
 80146d0:	f009 f8f6 	bl	801d8c0 <rclc_action_find_first_handle_with_goal_response>
 80146d4:	4605      	mov	r5, r0
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d07f      	beq.n	80147da <_rclc_execute.part.0+0x172>
 80146da:	6863      	ldr	r3, [r4, #4]
 80146dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80146de:	699b      	ldr	r3, [r3, #24]
 80146e0:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 80146e4:	f885 6020 	strb.w	r6, [r5, #32]
 80146e8:	4798      	blx	r3
 80146ea:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80146ee:	4628      	mov	r0, r5
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d1e8      	bne.n	80146c6 <_rclc_execute.part.0+0x5e>
 80146f4:	6860      	ldr	r0, [r4, #4]
 80146f6:	4629      	mov	r1, r5
 80146f8:	f009 f868 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 80146fc:	e7e7      	b.n	80146ce <_rclc_execute.part.0+0x66>
 80146fe:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8014702:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8014706:	b100      	cbz	r0, 801470a <_rclc_execute.part.0+0xa2>
 8014708:	68a0      	ldr	r0, [r4, #8]
 801470a:	2400      	movs	r4, #0
 801470c:	4798      	blx	r3
 801470e:	4620      	mov	r0, r4
 8014710:	b005      	add	sp, #20
 8014712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014714:	6840      	ldr	r0, [r0, #4]
 8014716:	f007 fc7d 	bl	801c014 <rcl_timer_call>
 801471a:	f240 3321 	movw	r3, #801	; 0x321
 801471e:	4604      	mov	r4, r0
 8014720:	4298      	cmp	r0, r3
 8014722:	d001      	beq.n	8014728 <_rclc_execute.part.0+0xc0>
 8014724:	2800      	cmp	r0, #0
 8014726:	d1c2      	bne.n	80146ae <_rclc_execute.part.0+0x46>
 8014728:	2400      	movs	r4, #0
 801472a:	4620      	mov	r0, r4
 801472c:	b005      	add	sp, #20
 801472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014730:	2400      	movs	r4, #0
 8014732:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014734:	6880      	ldr	r0, [r0, #8]
 8014736:	4798      	blx	r3
 8014738:	4620      	mov	r0, r4
 801473a:	b005      	add	sp, #20
 801473c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801473e:	2400      	movs	r4, #0
 8014740:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014742:	4798      	blx	r3
 8014744:	4620      	mov	r0, r4
 8014746:	b005      	add	sp, #20
 8014748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801474a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801474e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014750:	b100      	cbz	r0, 8014754 <_rclc_execute.part.0+0xec>
 8014752:	68a0      	ldr	r0, [r4, #8]
 8014754:	2400      	movs	r4, #0
 8014756:	4798      	blx	r3
 8014758:	4620      	mov	r0, r4
 801475a:	b005      	add	sp, #20
 801475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801475e:	6840      	ldr	r0, [r0, #4]
 8014760:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014764:	bb3b      	cbnz	r3, 80147b6 <_rclc_execute.part.0+0x14e>
 8014766:	f890 3020 	ldrb.w	r3, [r0, #32]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d07d      	beq.n	801486a <_rclc_execute.part.0+0x202>
 801476e:	f640 0634 	movw	r6, #2100	; 0x834
 8014772:	2701      	movs	r7, #1
 8014774:	e007      	b.n	8014786 <_rclc_execute.part.0+0x11e>
 8014776:	4628      	mov	r0, r5
 8014778:	f009 f8ba 	bl	801d8f0 <rclc_action_server_response_goal_request>
 801477c:	4629      	mov	r1, r5
 801477e:	6860      	ldr	r0, [r4, #4]
 8014780:	f009 f824 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014784:	6860      	ldr	r0, [r4, #4]
 8014786:	2100      	movs	r1, #0
 8014788:	f009 f84c 	bl	801d824 <rclc_action_find_first_handle_by_status>
 801478c:	4605      	mov	r5, r0
 801478e:	2800      	cmp	r0, #0
 8014790:	d068      	beq.n	8014864 <_rclc_execute.part.0+0x1fc>
 8014792:	6863      	ldr	r3, [r4, #4]
 8014794:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	4798      	blx	r3
 801479a:	42b0      	cmp	r0, r6
 801479c:	f04f 0100 	mov.w	r1, #0
 80147a0:	d1e9      	bne.n	8014776 <_rclc_execute.part.0+0x10e>
 80147a2:	2101      	movs	r1, #1
 80147a4:	4628      	mov	r0, r5
 80147a6:	f009 f8a3 	bl	801d8f0 <rclc_action_server_response_goal_request>
 80147aa:	722f      	strb	r7, [r5, #8]
 80147ac:	e7ea      	b.n	8014784 <_rclc_execute.part.0+0x11c>
 80147ae:	6848      	ldr	r0, [r1, #4]
 80147b0:	f009 f80c 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 80147b4:	6860      	ldr	r0, [r4, #4]
 80147b6:	f009 f841 	bl	801d83c <rclc_action_find_first_terminated_handle>
 80147ba:	4601      	mov	r1, r0
 80147bc:	2800      	cmp	r0, #0
 80147be:	d1f6      	bne.n	80147ae <_rclc_execute.part.0+0x146>
 80147c0:	6860      	ldr	r0, [r4, #4]
 80147c2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80147c6:	e7ce      	b.n	8014766 <_rclc_execute.part.0+0xfe>
 80147c8:	2400      	movs	r4, #0
 80147ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80147cc:	f100 0110 	add.w	r1, r0, #16
 80147d0:	6880      	ldr	r0, [r0, #8]
 80147d2:	4798      	blx	r3
 80147d4:	4620      	mov	r0, r4
 80147d6:	b005      	add	sp, #20
 80147d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147da:	6860      	ldr	r0, [r4, #4]
 80147dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80147e0:	b18b      	cbz	r3, 8014806 <_rclc_execute.part.0+0x19e>
 80147e2:	68c5      	ldr	r5, [r0, #12]
 80147e4:	b32d      	cbz	r5, 8014832 <_rclc_execute.part.0+0x1ca>
 80147e6:	2600      	movs	r6, #0
 80147e8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80147ec:	b143      	cbz	r3, 8014800 <_rclc_execute.part.0+0x198>
 80147ee:	69c3      	ldr	r3, [r0, #28]
 80147f0:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 80147f4:	b123      	cbz	r3, 8014800 <_rclc_execute.part.0+0x198>
 80147f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80147f8:	4628      	mov	r0, r5
 80147fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80147fc:	4798      	blx	r3
 80147fe:	6860      	ldr	r0, [r4, #4]
 8014800:	682d      	ldr	r5, [r5, #0]
 8014802:	2d00      	cmp	r5, #0
 8014804:	d1f0      	bne.n	80147e8 <_rclc_execute.part.0+0x180>
 8014806:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801480a:	b193      	cbz	r3, 8014832 <_rclc_execute.part.0+0x1ca>
 801480c:	68c5      	ldr	r5, [r0, #12]
 801480e:	b185      	cbz	r5, 8014832 <_rclc_execute.part.0+0x1ca>
 8014810:	2600      	movs	r6, #0
 8014812:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8014816:	b14b      	cbz	r3, 801482c <_rclc_execute.part.0+0x1c4>
 8014818:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801481a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 801481e:	b12b      	cbz	r3, 801482c <_rclc_execute.part.0+0x1c4>
 8014820:	4628      	mov	r0, r5
 8014822:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8014826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014828:	4798      	blx	r3
 801482a:	6860      	ldr	r0, [r4, #4]
 801482c:	682d      	ldr	r5, [r5, #0]
 801482e:	2d00      	cmp	r5, #0
 8014830:	d1ef      	bne.n	8014812 <_rclc_execute.part.0+0x1aa>
 8014832:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014836:	2b00      	cmp	r3, #0
 8014838:	f43f af76 	beq.w	8014728 <_rclc_execute.part.0+0xc0>
 801483c:	2700      	movs	r7, #0
 801483e:	e00b      	b.n	8014858 <_rclc_execute.part.0+0x1f0>
 8014840:	6863      	ldr	r3, [r4, #4]
 8014842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014846:	6a1e      	ldr	r6, [r3, #32]
 8014848:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 801484c:	47b0      	blx	r6
 801484e:	6860      	ldr	r0, [r4, #4]
 8014850:	4629      	mov	r1, r5
 8014852:	f008 ffbb 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014856:	6860      	ldr	r0, [r4, #4]
 8014858:	f009 f83e 	bl	801d8d8 <rclc_action_find_first_handle_with_result_response>
 801485c:	4605      	mov	r5, r0
 801485e:	2800      	cmp	r0, #0
 8014860:	d1ee      	bne.n	8014840 <_rclc_execute.part.0+0x1d8>
 8014862:	e761      	b.n	8014728 <_rclc_execute.part.0+0xc0>
 8014864:	6860      	ldr	r0, [r4, #4]
 8014866:	f880 5020 	strb.w	r5, [r0, #32]
 801486a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801486e:	2b00      	cmp	r3, #0
 8014870:	f43f af5a 	beq.w	8014728 <_rclc_execute.part.0+0xc0>
 8014874:	68c5      	ldr	r5, [r0, #12]
 8014876:	b1b5      	cbz	r5, 80148a6 <_rclc_execute.part.0+0x23e>
 8014878:	2602      	movs	r6, #2
 801487a:	e001      	b.n	8014880 <_rclc_execute.part.0+0x218>
 801487c:	682d      	ldr	r5, [r5, #0]
 801487e:	b195      	cbz	r5, 80148a6 <_rclc_execute.part.0+0x23e>
 8014880:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014884:	2b03      	cmp	r3, #3
 8014886:	d1f9      	bne.n	801487c <_rclc_execute.part.0+0x214>
 8014888:	69c3      	ldr	r3, [r0, #28]
 801488a:	4628      	mov	r0, r5
 801488c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801488e:	4798      	blx	r3
 8014890:	4603      	mov	r3, r0
 8014892:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8014896:	4628      	mov	r0, r5
 8014898:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801489c:	b143      	cbz	r3, 80148b0 <_rclc_execute.part.0+0x248>
 801489e:	f009 f847 	bl	801d930 <rclc_action_server_goal_cancel_accept>
 80148a2:	6860      	ldr	r0, [r4, #4]
 80148a4:	e7ea      	b.n	801487c <_rclc_execute.part.0+0x214>
 80148a6:	2300      	movs	r3, #0
 80148a8:	461c      	mov	r4, r3
 80148aa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80148ae:	e72e      	b.n	801470e <_rclc_execute.part.0+0xa6>
 80148b0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80148b2:	f105 0758 	add.w	r7, r5, #88	; 0x58
 80148b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80148ba:	2101      	movs	r1, #1
 80148bc:	6860      	ldr	r0, [r4, #4]
 80148be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148c2:	f009 f861 	bl	801d988 <rclc_action_server_goal_cancel_reject>
 80148c6:	722e      	strb	r6, [r5, #8]
 80148c8:	6860      	ldr	r0, [r4, #4]
 80148ca:	e7d7      	b.n	801487c <_rclc_execute.part.0+0x214>
 80148cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80148ce:	f104 0510 	add.w	r5, r4, #16
 80148d2:	6880      	ldr	r0, [r0, #8]
 80148d4:	4798      	blx	r3
 80148d6:	e6e3      	b.n	80146a0 <_rclc_execute.part.0+0x38>
 80148d8:	f100 0510 	add.w	r5, r0, #16
 80148dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80148de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80148e0:	4629      	mov	r1, r5
 80148e2:	6880      	ldr	r0, [r0, #8]
 80148e4:	4798      	blx	r3
 80148e6:	e6db      	b.n	80146a0 <_rclc_execute.part.0+0x38>
 80148e8:	2401      	movs	r4, #1
 80148ea:	e710      	b.n	801470e <_rclc_execute.part.0+0xa6>

080148ec <rclc_executor_trigger_any>:
 80148ec:	2800      	cmp	r0, #0
 80148ee:	d03d      	beq.n	801496c <rclc_executor_trigger_any+0x80>
 80148f0:	2900      	cmp	r1, #0
 80148f2:	d03c      	beq.n	801496e <rclc_executor_trigger_any+0x82>
 80148f4:	4603      	mov	r3, r0
 80148f6:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80148fa:	2200      	movs	r2, #0
 80148fc:	2800      	cmp	r0, #0
 80148fe:	d035      	beq.n	801496c <rclc_executor_trigger_any+0x80>
 8014900:	b430      	push	{r4, r5}
 8014902:	f893 c000 	ldrb.w	ip, [r3]
 8014906:	f1bc 0f08 	cmp.w	ip, #8
 801490a:	d11d      	bne.n	8014948 <rclc_executor_trigger_any+0x5c>
 801490c:	685c      	ldr	r4, [r3, #4]
 801490e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014910:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8014914:	d105      	bne.n	8014922 <rclc_executor_trigger_any+0x36>
 8014916:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801491a:	b910      	cbnz	r0, 8014922 <rclc_executor_trigger_any+0x36>
 801491c:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8014920:	b128      	cbz	r0, 801492e <rclc_executor_trigger_any+0x42>
 8014922:	bc30      	pop	{r4, r5}
 8014924:	4770      	bx	lr
 8014926:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 801492a:	2800      	cmp	r0, #0
 801492c:	d1f9      	bne.n	8014922 <rclc_executor_trigger_any+0x36>
 801492e:	3201      	adds	r2, #1
 8014930:	3340      	adds	r3, #64	; 0x40
 8014932:	4291      	cmp	r1, r2
 8014934:	d017      	beq.n	8014966 <rclc_executor_trigger_any+0x7a>
 8014936:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 801493a:	2800      	cmp	r0, #0
 801493c:	d0f1      	beq.n	8014922 <rclc_executor_trigger_any+0x36>
 801493e:	f893 c000 	ldrb.w	ip, [r3]
 8014942:	f1bc 0f08 	cmp.w	ip, #8
 8014946:	d0e1      	beq.n	801490c <rclc_executor_trigger_any+0x20>
 8014948:	f1bc 0f09 	cmp.w	ip, #9
 801494c:	d1eb      	bne.n	8014926 <rclc_executor_trigger_any+0x3a>
 801494e:	685c      	ldr	r4, [r3, #4]
 8014950:	6a25      	ldr	r5, [r4, #32]
 8014952:	2d00      	cmp	r5, #0
 8014954:	d1e5      	bne.n	8014922 <rclc_executor_trigger_any+0x36>
 8014956:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 801495a:	2800      	cmp	r0, #0
 801495c:	d1e1      	bne.n	8014922 <rclc_executor_trigger_any+0x36>
 801495e:	3201      	adds	r2, #1
 8014960:	3340      	adds	r3, #64	; 0x40
 8014962:	4291      	cmp	r1, r2
 8014964:	d1e7      	bne.n	8014936 <rclc_executor_trigger_any+0x4a>
 8014966:	2000      	movs	r0, #0
 8014968:	bc30      	pop	{r4, r5}
 801496a:	4770      	bx	lr
 801496c:	4770      	bx	lr
 801496e:	4608      	mov	r0, r1
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop

08014974 <rclc_executor_get_zero_initialized_executor>:
 8014974:	b510      	push	{r4, lr}
 8014976:	4604      	mov	r4, r0
 8014978:	2288      	movs	r2, #136	; 0x88
 801497a:	4902      	ldr	r1, [pc, #8]	; (8014984 <rclc_executor_get_zero_initialized_executor+0x10>)
 801497c:	f00c fbeb 	bl	8021156 <memcpy>
 8014980:	4620      	mov	r0, r4
 8014982:	bd10      	pop	{r4, pc}
 8014984:	08025178 	.word	0x08025178

08014988 <rclc_executor_init>:
 8014988:	2900      	cmp	r1, #0
 801498a:	d06a      	beq.n	8014a62 <rclc_executor_init+0xda>
 801498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014990:	4605      	mov	r5, r0
 8014992:	b0b0      	sub	sp, #192	; 0xc0
 8014994:	2800      	cmp	r0, #0
 8014996:	d05c      	beq.n	8014a52 <rclc_executor_init+0xca>
 8014998:	4616      	mov	r6, r2
 801499a:	4618      	mov	r0, r3
 801499c:	4688      	mov	r8, r1
 801499e:	461f      	mov	r7, r3
 80149a0:	f000 fc78 	bl	8015294 <rcutils_allocator_is_valid>
 80149a4:	2e00      	cmp	r6, #0
 80149a6:	d054      	beq.n	8014a52 <rclc_executor_init+0xca>
 80149a8:	f080 0401 	eor.w	r4, r0, #1
 80149ac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80149b0:	d14f      	bne.n	8014a52 <rclc_executor_init+0xca>
 80149b2:	2288      	movs	r2, #136	; 0x88
 80149b4:	4930      	ldr	r1, [pc, #192]	; (8014a78 <rclc_executor_init+0xf0>)
 80149b6:	a80e      	add	r0, sp, #56	; 0x38
 80149b8:	f00c fbcd 	bl	8021156 <memcpy>
 80149bc:	a90e      	add	r1, sp, #56	; 0x38
 80149be:	2288      	movs	r2, #136	; 0x88
 80149c0:	4628      	mov	r0, r5
 80149c2:	f00c fbc8 	bl	8021156 <memcpy>
 80149c6:	4668      	mov	r0, sp
 80149c8:	f8c5 8000 	str.w	r8, [r5]
 80149cc:	60ae      	str	r6, [r5, #8]
 80149ce:	f007 fc97 	bl	801c300 <rcl_get_zero_initialized_wait_set>
 80149d2:	46ec      	mov	ip, sp
 80149d4:	f105 0e14 	add.w	lr, r5, #20
 80149d8:	f8d7 8000 	ldr.w	r8, [r7]
 80149dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149f0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014a70 <rclc_executor_init+0xe8>
 80149f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149f8:	f8dc 3000 	ldr.w	r3, [ip]
 80149fc:	01b0      	lsls	r0, r6, #6
 80149fe:	6939      	ldr	r1, [r7, #16]
 8014a00:	f8ce 3000 	str.w	r3, [lr]
 8014a04:	612f      	str	r7, [r5, #16]
 8014a06:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8014a0a:	47c0      	blx	r8
 8014a0c:	6068      	str	r0, [r5, #4]
 8014a0e:	b908      	cbnz	r0, 8014a14 <rclc_executor_init+0x8c>
 8014a10:	e029      	b.n	8014a66 <rclc_executor_init+0xde>
 8014a12:	6868      	ldr	r0, [r5, #4]
 8014a14:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014a18:	3401      	adds	r4, #1
 8014a1a:	4631      	mov	r1, r6
 8014a1c:	f000 fac0 	bl	8014fa0 <rclc_executor_handle_init>
 8014a20:	42a6      	cmp	r6, r4
 8014a22:	d8f6      	bhi.n	8014a12 <rclc_executor_init+0x8a>
 8014a24:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014a28:	f000 faae 	bl	8014f88 <rclc_executor_handle_counters_zero_init>
 8014a2c:	4a13      	ldr	r2, [pc, #76]	; (8014a7c <rclc_executor_init+0xf4>)
 8014a2e:	2300      	movs	r3, #0
 8014a30:	6868      	ldr	r0, [r5, #4]
 8014a32:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8014a36:	b168      	cbz	r0, 8014a54 <rclc_executor_init+0xcc>
 8014a38:	68ab      	ldr	r3, [r5, #8]
 8014a3a:	b173      	cbz	r3, 8014a5a <rclc_executor_init+0xd2>
 8014a3c:	692a      	ldr	r2, [r5, #16]
 8014a3e:	fab2 f382 	clz	r3, r2
 8014a42:	095b      	lsrs	r3, r3, #5
 8014a44:	b14a      	cbz	r2, 8014a5a <rclc_executor_init+0xd2>
 8014a46:	4618      	mov	r0, r3
 8014a48:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8014a4c:	b030      	add	sp, #192	; 0xc0
 8014a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a52:	200b      	movs	r0, #11
 8014a54:	b030      	add	sp, #192	; 0xc0
 8014a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	b030      	add	sp, #192	; 0xc0
 8014a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a62:	200b      	movs	r0, #11
 8014a64:	4770      	bx	lr
 8014a66:	200a      	movs	r0, #10
 8014a68:	e7f4      	b.n	8014a54 <rclc_executor_init+0xcc>
 8014a6a:	bf00      	nop
 8014a6c:	f3af 8000 	nop.w
 8014a70:	3b9aca00 	.word	0x3b9aca00
 8014a74:	00000000 	.word	0x00000000
 8014a78:	08025178 	.word	0x08025178
 8014a7c:	080148ed 	.word	0x080148ed

08014a80 <rclc_executor_add_subscription>:
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	bf18      	it	ne
 8014a84:	2a00      	cmpne	r2, #0
 8014a86:	b570      	push	{r4, r5, r6, lr}
 8014a88:	4604      	mov	r4, r0
 8014a8a:	bf0c      	ite	eq
 8014a8c:	2001      	moveq	r0, #1
 8014a8e:	2000      	movne	r0, #0
 8014a90:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014a94:	2900      	cmp	r1, #0
 8014a96:	bf08      	it	eq
 8014a98:	f040 0001 	orreq.w	r0, r0, #1
 8014a9c:	bb28      	cbnz	r0, 8014aea <rclc_executor_add_subscription+0x6a>
 8014a9e:	fab4 f584 	clz	r5, r4
 8014aa2:	096d      	lsrs	r5, r5, #5
 8014aa4:	b30c      	cbz	r4, 8014aea <rclc_executor_add_subscription+0x6a>
 8014aa6:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014aaa:	4286      	cmp	r6, r0
 8014aac:	d301      	bcc.n	8014ab2 <rclc_executor_add_subscription+0x32>
 8014aae:	2001      	movs	r0, #1
 8014ab0:	bd70      	pop	{r4, r5, r6, pc}
 8014ab2:	6860      	ldr	r0, [r4, #4]
 8014ab4:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014ab8:	f800 500e 	strb.w	r5, [r0, lr]
 8014abc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014ac0:	3601      	adds	r6, #1
 8014ac2:	6303      	str	r3, [r0, #48]	; 0x30
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014ac8:	f104 0514 	add.w	r5, r4, #20
 8014acc:	f880 c001 	strb.w	ip, [r0, #1]
 8014ad0:	8703      	strh	r3, [r0, #56]	; 0x38
 8014ad2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	60e6      	str	r6, [r4, #12]
 8014ada:	f007 fc25 	bl	801c328 <rcl_wait_set_is_valid>
 8014ade:	b930      	cbnz	r0, 8014aee <rclc_executor_add_subscription+0x6e>
 8014ae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	64a3      	str	r3, [r4, #72]	; 0x48
 8014ae8:	bd70      	pop	{r4, r5, r6, pc}
 8014aea:	200b      	movs	r0, #11
 8014aec:	bd70      	pop	{r4, r5, r6, pc}
 8014aee:	4628      	mov	r0, r5
 8014af0:	f007 fc20 	bl	801c334 <rcl_wait_set_fini>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d0f3      	beq.n	8014ae0 <rclc_executor_add_subscription+0x60>
 8014af8:	bd70      	pop	{r4, r5, r6, pc}
 8014afa:	bf00      	nop

08014afc <rclc_executor_add_service>:
 8014afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014afe:	9d06      	ldr	r5, [sp, #24]
 8014b00:	4604      	mov	r4, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	bf18      	it	ne
 8014b06:	2d00      	cmpne	r5, #0
 8014b08:	bf0c      	ite	eq
 8014b0a:	2001      	moveq	r0, #1
 8014b0c:	2000      	movne	r0, #0
 8014b0e:	2a00      	cmp	r2, #0
 8014b10:	bf08      	it	eq
 8014b12:	f040 0001 	orreq.w	r0, r0, #1
 8014b16:	2900      	cmp	r1, #0
 8014b18:	bf08      	it	eq
 8014b1a:	f040 0001 	orreq.w	r0, r0, #1
 8014b1e:	bb40      	cbnz	r0, 8014b72 <rclc_executor_add_service+0x76>
 8014b20:	fab4 f684 	clz	r6, r4
 8014b24:	0976      	lsrs	r6, r6, #5
 8014b26:	b324      	cbz	r4, 8014b72 <rclc_executor_add_service+0x76>
 8014b28:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014b2c:	42b8      	cmp	r0, r7
 8014b2e:	d301      	bcc.n	8014b34 <rclc_executor_add_service+0x38>
 8014b30:	2001      	movs	r0, #1
 8014b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b34:	6867      	ldr	r7, [r4, #4]
 8014b36:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014b3a:	f100 0c01 	add.w	ip, r0, #1
 8014b3e:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014b42:	6283      	str	r3, [r0, #40]	; 0x28
 8014b44:	2305      	movs	r3, #5
 8014b46:	6305      	str	r5, [r0, #48]	; 0x30
 8014b48:	f104 0514 	add.w	r5, r4, #20
 8014b4c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014b50:	f827 300e 	strh.w	r3, [r7, lr]
 8014b54:	2301      	movs	r3, #1
 8014b56:	62c6      	str	r6, [r0, #44]	; 0x2c
 8014b58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014b62:	f007 fbe1 	bl	801c328 <rcl_wait_set_is_valid>
 8014b66:	b930      	cbnz	r0, 8014b76 <rclc_executor_add_service+0x7a>
 8014b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014b6a:	2000      	movs	r0, #0
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	6563      	str	r3, [r4, #84]	; 0x54
 8014b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b72:	200b      	movs	r0, #11
 8014b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b76:	4628      	mov	r0, r5
 8014b78:	f007 fbdc 	bl	801c334 <rcl_wait_set_fini>
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	d0f3      	beq.n	8014b68 <rclc_executor_add_service+0x6c>
 8014b80:	e7d7      	b.n	8014b32 <rclc_executor_add_service+0x36>
 8014b82:	bf00      	nop

08014b84 <rclc_executor_prepare>:
 8014b84:	2800      	cmp	r0, #0
 8014b86:	d044      	beq.n	8014c12 <rclc_executor_prepare+0x8e>
 8014b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b8a:	f100 0514 	add.w	r5, r0, #20
 8014b8e:	b09b      	sub	sp, #108	; 0x6c
 8014b90:	4604      	mov	r4, r0
 8014b92:	4628      	mov	r0, r5
 8014b94:	f007 fbc8 	bl	801c328 <rcl_wait_set_is_valid>
 8014b98:	b110      	cbz	r0, 8014ba0 <rclc_executor_prepare+0x1c>
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	b01b      	add	sp, #108	; 0x6c
 8014b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	f007 fbc7 	bl	801c334 <rcl_wait_set_fini>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d130      	bne.n	8014c0c <rclc_executor_prepare+0x88>
 8014baa:	a80c      	add	r0, sp, #48	; 0x30
 8014bac:	ae04      	add	r6, sp, #16
 8014bae:	f007 fba7 	bl	801c300 <rcl_get_zero_initialized_wait_set>
 8014bb2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014bb6:	46ae      	mov	lr, r5
 8014bb8:	6927      	ldr	r7, [r4, #16]
 8014bba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bd2:	f8dc 3000 	ldr.w	r3, [ip]
 8014bd6:	f8ce 3000 	str.w	r3, [lr]
 8014bda:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014bdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	4628      	mov	r0, r5
 8014be2:	6822      	ldr	r2, [r4, #0]
 8014be4:	6033      	str	r3, [r6, #0]
 8014be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014be8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014bea:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014bee:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8014bf2:	e9cd 2100 	strd	r2, r1, [sp]
 8014bf6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014bf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014bfa:	f007 fe9b 	bl	801c934 <rcl_wait_set_init>
 8014bfe:	2800      	cmp	r0, #0
 8014c00:	d0cc      	beq.n	8014b9c <rclc_executor_prepare+0x18>
 8014c02:	900b      	str	r0, [sp, #44]	; 0x2c
 8014c04:	f000 fb84 	bl	8015310 <rcutils_reset_error>
 8014c08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014c0a:	e7c7      	b.n	8014b9c <rclc_executor_prepare+0x18>
 8014c0c:	f000 fb80 	bl	8015310 <rcutils_reset_error>
 8014c10:	e7cb      	b.n	8014baa <rclc_executor_prepare+0x26>
 8014c12:	200b      	movs	r0, #11
 8014c14:	4770      	bx	lr
 8014c16:	bf00      	nop

08014c18 <rclc_executor_spin_some.part.0>:
 8014c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	4691      	mov	r9, r2
 8014c20:	4698      	mov	r8, r3
 8014c22:	f7ff ffaf 	bl	8014b84 <rclc_executor_prepare>
 8014c26:	f105 0614 	add.w	r6, r5, #20
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	f007 fc4e 	bl	801c4cc <rcl_wait_set_clear>
 8014c30:	4607      	mov	r7, r0
 8014c32:	2800      	cmp	r0, #0
 8014c34:	f040 80a8 	bne.w	8014d88 <rclc_executor_spin_some.part.0+0x170>
 8014c38:	68ab      	ldr	r3, [r5, #8]
 8014c3a:	b30b      	cbz	r3, 8014c80 <rclc_executor_spin_some.part.0+0x68>
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	6869      	ldr	r1, [r5, #4]
 8014c40:	01a2      	lsls	r2, r4, #6
 8014c42:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014c46:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8014c4a:	b1cb      	cbz	r3, 8014c80 <rclc_executor_spin_some.part.0+0x68>
 8014c4c:	5c8b      	ldrb	r3, [r1, r2]
 8014c4e:	2b0a      	cmp	r3, #10
 8014c50:	f200 80de 	bhi.w	8014e10 <rclc_executor_spin_some.part.0+0x1f8>
 8014c54:	e8df f003 	tbb	[pc, r3]
 8014c58:	8da99d9d 	.word	0x8da99d9d
 8014c5c:	0606068d 	.word	0x0606068d
 8014c60:	c1ce      	.short	0xc1ce
 8014c62:	b5          	.byte	0xb5
 8014c63:	00          	.byte	0x00
 8014c64:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014c68:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014c6c:	4630      	mov	r0, r6
 8014c6e:	f007 ff7d 	bl	801cb6c <rcl_wait_set_add_service>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	f040 8087 	bne.w	8014d86 <rclc_executor_spin_some.part.0+0x16e>
 8014c78:	3401      	adds	r4, #1
 8014c7a:	68ab      	ldr	r3, [r5, #8]
 8014c7c:	429c      	cmp	r4, r3
 8014c7e:	d3de      	bcc.n	8014c3e <rclc_executor_spin_some.part.0+0x26>
 8014c80:	4643      	mov	r3, r8
 8014c82:	464a      	mov	r2, r9
 8014c84:	4630      	mov	r0, r6
 8014c86:	f007 ff9f 	bl	801cbc8 <rcl_wait>
 8014c8a:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	f000 80c6 	beq.w	8014e20 <rclc_executor_spin_some.part.0+0x208>
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	f040 80bb 	bne.w	8014e10 <rclc_executor_spin_some.part.0+0x1f8>
 8014c9a:	68ab      	ldr	r3, [r5, #8]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	f000 8159 	beq.w	8014f54 <rclc_executor_spin_some.part.0+0x33c>
 8014ca2:	2400      	movs	r4, #0
 8014ca4:	f240 1991 	movw	r9, #401	; 0x191
 8014ca8:	46a0      	mov	r8, r4
 8014caa:	e00a      	b.n	8014cc2 <rclc_executor_spin_some.part.0+0xaa>
 8014cac:	f7ff fb1a 	bl	80142e4 <_rclc_check_for_new_data>
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	b110      	cbz	r0, 8014cba <rclc_executor_spin_some.part.0+0xa2>
 8014cb4:	4548      	cmp	r0, r9
 8014cb6:	f040 80b1 	bne.w	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014cba:	68ab      	ldr	r3, [r5, #8]
 8014cbc:	4598      	cmp	r8, r3
 8014cbe:	f080 8126 	bcs.w	8014f0e <rclc_executor_spin_some.part.0+0x2f6>
 8014cc2:	686a      	ldr	r2, [r5, #4]
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014cca:	f108 0801 	add.w	r8, r8, #1
 8014cce:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014cd2:	f1bc 0f00 	cmp.w	ip, #0
 8014cd6:	d1e9      	bne.n	8014cac <rclc_executor_spin_some.part.0+0x94>
 8014cd8:	4619      	mov	r1, r3
 8014cda:	4610      	mov	r0, r2
 8014cdc:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014ce0:	4798      	blx	r3
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	f000 809a 	beq.w	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014ce8:	68ab      	ldr	r3, [r5, #8]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	f000 8096 	beq.w	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014cf0:	f04f 0800 	mov.w	r8, #0
 8014cf4:	f240 1991 	movw	r9, #401	; 0x191
 8014cf8:	e009      	b.n	8014d0e <rclc_executor_spin_some.part.0+0xf6>
 8014cfa:	f7ff fb41 	bl	8014380 <_rclc_take_new_data>
 8014cfe:	4604      	mov	r4, r0
 8014d00:	b110      	cbz	r0, 8014d08 <rclc_executor_spin_some.part.0+0xf0>
 8014d02:	4548      	cmp	r0, r9
 8014d04:	f040 808a 	bne.w	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014d08:	68ab      	ldr	r3, [r5, #8]
 8014d0a:	4598      	cmp	r8, r3
 8014d0c:	d209      	bcs.n	8014d22 <rclc_executor_spin_some.part.0+0x10a>
 8014d0e:	6868      	ldr	r0, [r5, #4]
 8014d10:	4631      	mov	r1, r6
 8014d12:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014d16:	f108 0801 	add.w	r8, r8, #1
 8014d1a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8014d1e:	2a00      	cmp	r2, #0
 8014d20:	d1eb      	bne.n	8014cfa <rclc_executor_spin_some.part.0+0xe2>
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d07a      	beq.n	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014d26:	2600      	movs	r6, #0
 8014d28:	e00e      	b.n	8014d48 <rclc_executor_spin_some.part.0+0x130>
 8014d2a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014d2e:	2a08      	cmp	r2, #8
 8014d30:	f000 80fc 	beq.w	8014f2c <rclc_executor_spin_some.part.0+0x314>
 8014d34:	2a09      	cmp	r2, #9
 8014d36:	f000 80ee 	beq.w	8014f16 <rclc_executor_spin_some.part.0+0x2fe>
 8014d3a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8014d3e:	b98a      	cbnz	r2, 8014d64 <rclc_executor_spin_some.part.0+0x14c>
 8014d40:	3601      	adds	r6, #1
 8014d42:	429e      	cmp	r6, r3
 8014d44:	d267      	bcs.n	8014e16 <rclc_executor_spin_some.part.0+0x1fe>
 8014d46:	2400      	movs	r4, #0
 8014d48:	686a      	ldr	r2, [r5, #4]
 8014d4a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014d4e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014d52:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8014d56:	2900      	cmp	r1, #0
 8014d58:	d060      	beq.n	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014d5a:	7841      	ldrb	r1, [r0, #1]
 8014d5c:	2900      	cmp	r1, #0
 8014d5e:	d0e4      	beq.n	8014d2a <rclc_executor_spin_some.part.0+0x112>
 8014d60:	2901      	cmp	r1, #1
 8014d62:	d1ed      	bne.n	8014d40 <rclc_executor_spin_some.part.0+0x128>
 8014d64:	f7ff fc80 	bl	8014668 <_rclc_execute.part.0>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	f040 80b5 	bne.w	8014ed8 <rclc_executor_spin_some.part.0+0x2c0>
 8014d6e:	68ab      	ldr	r3, [r5, #8]
 8014d70:	e7e6      	b.n	8014d40 <rclc_executor_spin_some.part.0+0x128>
 8014d72:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014d76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f007 feca 	bl	801cb14 <rcl_wait_set_add_client>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	f43f af79 	beq.w	8014c78 <rclc_executor_spin_some.part.0+0x60>
 8014d86:	4607      	mov	r7, r0
 8014d88:	f000 fac2 	bl	8015310 <rcutils_reset_error>
 8014d8c:	4638      	mov	r0, r7
 8014d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d92:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014d96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f007 fb6a 	bl	801c474 <rcl_wait_set_add_subscription>
 8014da0:	2800      	cmp	r0, #0
 8014da2:	f43f af69 	beq.w	8014c78 <rclc_executor_spin_some.part.0+0x60>
 8014da6:	4607      	mov	r7, r0
 8014da8:	e7ee      	b.n	8014d88 <rclc_executor_spin_some.part.0+0x170>
 8014daa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014dae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014db2:	4630      	mov	r0, r6
 8014db4:	f007 fe7e 	bl	801cab4 <rcl_wait_set_add_timer>
 8014db8:	2800      	cmp	r0, #0
 8014dba:	f43f af5d 	beq.w	8014c78 <rclc_executor_spin_some.part.0+0x60>
 8014dbe:	4607      	mov	r7, r0
 8014dc0:	e7e2      	b.n	8014d88 <rclc_executor_spin_some.part.0+0x170>
 8014dc2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014dc6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014dca:	4630      	mov	r0, r6
 8014dcc:	f007 fe46 	bl	801ca5c <rcl_wait_set_add_guard_condition>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	f43f af51 	beq.w	8014c78 <rclc_executor_spin_some.part.0+0x60>
 8014dd6:	4607      	mov	r7, r0
 8014dd8:	e7d6      	b.n	8014d88 <rclc_executor_spin_some.part.0+0x170>
 8014dda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014dde:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014de2:	4630      	mov	r0, r6
 8014de4:	3110      	adds	r1, #16
 8014de6:	f008 fbc3 	bl	801d570 <rcl_action_wait_set_add_action_server>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	f43f af44 	beq.w	8014c78 <rclc_executor_spin_some.part.0+0x60>
 8014df0:	4607      	mov	r7, r0
 8014df2:	e7c9      	b.n	8014d88 <rclc_executor_spin_some.part.0+0x170>
 8014df4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014df8:	2300      	movs	r3, #0
 8014dfa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014dfe:	4630      	mov	r0, r6
 8014e00:	3110      	adds	r1, #16
 8014e02:	f008 f98d 	bl	801d120 <rcl_action_wait_set_add_action_client>
 8014e06:	2800      	cmp	r0, #0
 8014e08:	f43f af36 	beq.w	8014c78 <rclc_executor_spin_some.part.0+0x60>
 8014e0c:	4607      	mov	r7, r0
 8014e0e:	e7bb      	b.n	8014d88 <rclc_executor_spin_some.part.0+0x170>
 8014e10:	2701      	movs	r7, #1
 8014e12:	f000 fa7d 	bl	8015310 <rcutils_reset_error>
 8014e16:	4638      	mov	r0, r7
 8014e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e1c:	4627      	mov	r7, r4
 8014e1e:	e7fa      	b.n	8014e16 <rclc_executor_spin_some.part.0+0x1fe>
 8014e20:	68ab      	ldr	r3, [r5, #8]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f000 8093 	beq.w	8014f4e <rclc_executor_spin_some.part.0+0x336>
 8014e28:	2400      	movs	r4, #0
 8014e2a:	f240 1991 	movw	r9, #401	; 0x191
 8014e2e:	46a0      	mov	r8, r4
 8014e30:	e008      	b.n	8014e44 <rclc_executor_spin_some.part.0+0x22c>
 8014e32:	f7ff fa57 	bl	80142e4 <_rclc_check_for_new_data>
 8014e36:	4604      	mov	r4, r0
 8014e38:	b108      	cbz	r0, 8014e3e <rclc_executor_spin_some.part.0+0x226>
 8014e3a:	4548      	cmp	r0, r9
 8014e3c:	d1ee      	bne.n	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014e3e:	68ab      	ldr	r3, [r5, #8]
 8014e40:	4598      	cmp	r8, r3
 8014e42:	d266      	bcs.n	8014f12 <rclc_executor_spin_some.part.0+0x2fa>
 8014e44:	686a      	ldr	r2, [r5, #4]
 8014e46:	4631      	mov	r1, r6
 8014e48:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014e4c:	f108 0801 	add.w	r8, r8, #1
 8014e50:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014e54:	f1bc 0f00 	cmp.w	ip, #0
 8014e58:	d1eb      	bne.n	8014e32 <rclc_executor_spin_some.part.0+0x21a>
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	4610      	mov	r0, r2
 8014e5e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014e62:	4798      	blx	r3
 8014e64:	2800      	cmp	r0, #0
 8014e66:	d0d9      	beq.n	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014e68:	68ab      	ldr	r3, [r5, #8]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d0d6      	beq.n	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014e6e:	f04f 0a00 	mov.w	sl, #0
 8014e72:	f240 1891 	movw	r8, #401	; 0x191
 8014e76:	f240 2959 	movw	r9, #601	; 0x259
 8014e7a:	e00e      	b.n	8014e9a <rclc_executor_spin_some.part.0+0x282>
 8014e7c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014e80:	2b08      	cmp	r3, #8
 8014e82:	d034      	beq.n	8014eee <rclc_executor_spin_some.part.0+0x2d6>
 8014e84:	2b09      	cmp	r3, #9
 8014e86:	d029      	beq.n	8014edc <rclc_executor_spin_some.part.0+0x2c4>
 8014e88:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014e8c:	bb03      	cbnz	r3, 8014ed0 <rclc_executor_spin_some.part.0+0x2b8>
 8014e8e:	f10a 0a01 	add.w	sl, sl, #1
 8014e92:	68ab      	ldr	r3, [r5, #8]
 8014e94:	459a      	cmp	sl, r3
 8014e96:	d2be      	bcs.n	8014e16 <rclc_executor_spin_some.part.0+0x1fe>
 8014e98:	2400      	movs	r4, #0
 8014e9a:	6868      	ldr	r0, [r5, #4]
 8014e9c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014ea0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014ea4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d0b7      	beq.n	8014e1c <rclc_executor_spin_some.part.0+0x204>
 8014eac:	4631      	mov	r1, r6
 8014eae:	f7ff fa67 	bl	8014380 <_rclc_take_new_data>
 8014eb2:	2800      	cmp	r0, #0
 8014eb4:	bf18      	it	ne
 8014eb6:	4540      	cmpne	r0, r8
 8014eb8:	d001      	beq.n	8014ebe <rclc_executor_spin_some.part.0+0x2a6>
 8014eba:	4548      	cmp	r0, r9
 8014ebc:	d10c      	bne.n	8014ed8 <rclc_executor_spin_some.part.0+0x2c0>
 8014ebe:	686b      	ldr	r3, [r5, #4]
 8014ec0:	eb13 000b 	adds.w	r0, r3, fp
 8014ec4:	d021      	beq.n	8014f0a <rclc_executor_spin_some.part.0+0x2f2>
 8014ec6:	7842      	ldrb	r2, [r0, #1]
 8014ec8:	2a00      	cmp	r2, #0
 8014eca:	d0d7      	beq.n	8014e7c <rclc_executor_spin_some.part.0+0x264>
 8014ecc:	2a01      	cmp	r2, #1
 8014ece:	d1de      	bne.n	8014e8e <rclc_executor_spin_some.part.0+0x276>
 8014ed0:	f7ff fbca 	bl	8014668 <_rclc_execute.part.0>
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d0da      	beq.n	8014e8e <rclc_executor_spin_some.part.0+0x276>
 8014ed8:	4607      	mov	r7, r0
 8014eda:	e79c      	b.n	8014e16 <rclc_executor_spin_some.part.0+0x1fe>
 8014edc:	6843      	ldr	r3, [r0, #4]
 8014ede:	6a1a      	ldr	r2, [r3, #32]
 8014ee0:	2a00      	cmp	r2, #0
 8014ee2:	d1f5      	bne.n	8014ed0 <rclc_executor_spin_some.part.0+0x2b8>
 8014ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d0d0      	beq.n	8014e8e <rclc_executor_spin_some.part.0+0x276>
 8014eec:	e7f0      	b.n	8014ed0 <rclc_executor_spin_some.part.0+0x2b8>
 8014eee:	6843      	ldr	r3, [r0, #4]
 8014ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014ef2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8014ef6:	d1eb      	bne.n	8014ed0 <rclc_executor_spin_some.part.0+0x2b8>
 8014ef8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014efc:	2a00      	cmp	r2, #0
 8014efe:	d1e7      	bne.n	8014ed0 <rclc_executor_spin_some.part.0+0x2b8>
 8014f00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d0c2      	beq.n	8014e8e <rclc_executor_spin_some.part.0+0x276>
 8014f08:	e7e2      	b.n	8014ed0 <rclc_executor_spin_some.part.0+0x2b8>
 8014f0a:	270b      	movs	r7, #11
 8014f0c:	e783      	b.n	8014e16 <rclc_executor_spin_some.part.0+0x1fe>
 8014f0e:	686a      	ldr	r2, [r5, #4]
 8014f10:	e6e2      	b.n	8014cd8 <rclc_executor_spin_some.part.0+0xc0>
 8014f12:	686a      	ldr	r2, [r5, #4]
 8014f14:	e7a1      	b.n	8014e5a <rclc_executor_spin_some.part.0+0x242>
 8014f16:	6842      	ldr	r2, [r0, #4]
 8014f18:	6a11      	ldr	r1, [r2, #32]
 8014f1a:	2900      	cmp	r1, #0
 8014f1c:	f47f af22 	bne.w	8014d64 <rclc_executor_spin_some.part.0+0x14c>
 8014f20:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014f24:	2a00      	cmp	r2, #0
 8014f26:	f43f af0b 	beq.w	8014d40 <rclc_executor_spin_some.part.0+0x128>
 8014f2a:	e71b      	b.n	8014d64 <rclc_executor_spin_some.part.0+0x14c>
 8014f2c:	6842      	ldr	r2, [r0, #4]
 8014f2e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014f30:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8014f34:	f47f af16 	bne.w	8014d64 <rclc_executor_spin_some.part.0+0x14c>
 8014f38:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8014f3c:	2900      	cmp	r1, #0
 8014f3e:	f47f af11 	bne.w	8014d64 <rclc_executor_spin_some.part.0+0x14c>
 8014f42:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8014f46:	2a00      	cmp	r2, #0
 8014f48:	f43f aefa 	beq.w	8014d40 <rclc_executor_spin_some.part.0+0x128>
 8014f4c:	e70a      	b.n	8014d64 <rclc_executor_spin_some.part.0+0x14c>
 8014f4e:	686a      	ldr	r2, [r5, #4]
 8014f50:	461c      	mov	r4, r3
 8014f52:	e782      	b.n	8014e5a <rclc_executor_spin_some.part.0+0x242>
 8014f54:	686a      	ldr	r2, [r5, #4]
 8014f56:	461c      	mov	r4, r3
 8014f58:	e6be      	b.n	8014cd8 <rclc_executor_spin_some.part.0+0xc0>
 8014f5a:	bf00      	nop

08014f5c <rclc_executor_spin_some>:
 8014f5c:	b190      	cbz	r0, 8014f84 <rclc_executor_spin_some+0x28>
 8014f5e:	b570      	push	{r4, r5, r6, lr}
 8014f60:	4604      	mov	r4, r0
 8014f62:	6800      	ldr	r0, [r0, #0]
 8014f64:	4616      	mov	r6, r2
 8014f66:	461d      	mov	r5, r3
 8014f68:	f006 fb96 	bl	801b698 <rcl_context_is_valid>
 8014f6c:	b130      	cbz	r0, 8014f7c <rclc_executor_spin_some+0x20>
 8014f6e:	4632      	mov	r2, r6
 8014f70:	462b      	mov	r3, r5
 8014f72:	4620      	mov	r0, r4
 8014f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f78:	f7ff be4e 	b.w	8014c18 <rclc_executor_spin_some.part.0>
 8014f7c:	f000 f9c8 	bl	8015310 <rcutils_reset_error>
 8014f80:	2001      	movs	r0, #1
 8014f82:	bd70      	pop	{r4, r5, r6, pc}
 8014f84:	200b      	movs	r0, #11
 8014f86:	4770      	bx	lr

08014f88 <rclc_executor_handle_counters_zero_init>:
 8014f88:	b130      	cbz	r0, 8014f98 <rclc_executor_handle_counters_zero_init+0x10>
 8014f8a:	2220      	movs	r2, #32
 8014f8c:	2100      	movs	r1, #0
 8014f8e:	b508      	push	{r3, lr}
 8014f90:	f00c f814 	bl	8020fbc <memset>
 8014f94:	2000      	movs	r0, #0
 8014f96:	bd08      	pop	{r3, pc}
 8014f98:	200b      	movs	r0, #11
 8014f9a:	4770      	bx	lr
 8014f9c:	0000      	movs	r0, r0
	...

08014fa0 <rclc_executor_handle_init>:
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	b178      	cbz	r0, 8014fc4 <rclc_executor_handle_init+0x24>
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f04f 0c0b 	mov.w	ip, #11
 8014faa:	6341      	str	r1, [r0, #52]	; 0x34
 8014fac:	4610      	mov	r0, r2
 8014fae:	f8a3 c000 	strh.w	ip, [r3]
 8014fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8014fb4:	871a      	strh	r2, [r3, #56]	; 0x38
 8014fb6:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8014fc8 <rclc_executor_handle_init+0x28>
 8014fba:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014fbe:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8014fc2:	4770      	bx	lr
 8014fc4:	200b      	movs	r0, #11
 8014fc6:	4770      	bx	lr
	...

08014fd0 <rclc_support_init_with_options>:
 8014fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fd4:	b083      	sub	sp, #12
 8014fd6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	bf18      	it	ne
 8014fdc:	2f00      	cmpne	r7, #0
 8014fde:	d027      	beq.n	8015030 <rclc_support_init_with_options+0x60>
 8014fe0:	4604      	mov	r4, r0
 8014fe2:	b328      	cbz	r0, 8015030 <rclc_support_init_with_options+0x60>
 8014fe4:	46e9      	mov	r9, sp
 8014fe6:	461d      	mov	r5, r3
 8014fe8:	460e      	mov	r6, r1
 8014fea:	4690      	mov	r8, r2
 8014fec:	4648      	mov	r0, r9
 8014fee:	f006 fb49 	bl	801b684 <rcl_get_zero_initialized_context>
 8014ff2:	462a      	mov	r2, r5
 8014ff4:	4623      	mov	r3, r4
 8014ff6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014ffa:	e884 0003 	stmia.w	r4, {r0, r1}
 8014ffe:	4641      	mov	r1, r8
 8015000:	4630      	mov	r0, r6
 8015002:	f006 fc5d 	bl	801b8c0 <rcl_init>
 8015006:	4605      	mov	r5, r0
 8015008:	b960      	cbnz	r0, 8015024 <rclc_support_init_with_options+0x54>
 801500a:	463a      	mov	r2, r7
 801500c:	f104 010c 	add.w	r1, r4, #12
 8015010:	2003      	movs	r0, #3
 8015012:	60a7      	str	r7, [r4, #8]
 8015014:	f006 ff6a 	bl	801beec <rcl_clock_init>
 8015018:	4605      	mov	r5, r0
 801501a:	b918      	cbnz	r0, 8015024 <rclc_support_init_with_options+0x54>
 801501c:	4628      	mov	r0, r5
 801501e:	b003      	add	sp, #12
 8015020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015024:	f000 f974 	bl	8015310 <rcutils_reset_error>
 8015028:	4628      	mov	r0, r5
 801502a:	b003      	add	sp, #12
 801502c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015030:	250b      	movs	r5, #11
 8015032:	4628      	mov	r0, r5
 8015034:	b003      	add	sp, #12
 8015036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801503a:	bf00      	nop

0801503c <rclc_node_init_with_options>:
 801503c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015040:	b087      	sub	sp, #28
 8015042:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015044:	2e00      	cmp	r6, #0
 8015046:	bf18      	it	ne
 8015048:	2b00      	cmpne	r3, #0
 801504a:	bf0c      	ite	eq
 801504c:	f04f 0c01 	moveq.w	ip, #1
 8015050:	f04f 0c00 	movne.w	ip, #0
 8015054:	2a00      	cmp	r2, #0
 8015056:	bf08      	it	eq
 8015058:	f04c 0c01 	orreq.w	ip, ip, #1
 801505c:	2900      	cmp	r1, #0
 801505e:	bf08      	it	eq
 8015060:	f04c 0c01 	orreq.w	ip, ip, #1
 8015064:	f1bc 0f00 	cmp.w	ip, #0
 8015068:	d118      	bne.n	801509c <rclc_node_init_with_options+0x60>
 801506a:	4604      	mov	r4, r0
 801506c:	b1b0      	cbz	r0, 801509c <rclc_node_init_with_options+0x60>
 801506e:	f10d 0910 	add.w	r9, sp, #16
 8015072:	460d      	mov	r5, r1
 8015074:	4698      	mov	r8, r3
 8015076:	4617      	mov	r7, r2
 8015078:	4648      	mov	r0, r9
 801507a:	f7fe fc09 	bl	8013890 <rcl_get_zero_initialized_node>
 801507e:	9600      	str	r6, [sp, #0]
 8015080:	4643      	mov	r3, r8
 8015082:	463a      	mov	r2, r7
 8015084:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015088:	e884 0003 	stmia.w	r4, {r0, r1}
 801508c:	4629      	mov	r1, r5
 801508e:	4620      	mov	r0, r4
 8015090:	f7fe fc08 	bl	80138a4 <rcl_node_init>
 8015094:	b930      	cbnz	r0, 80150a4 <rclc_node_init_with_options+0x68>
 8015096:	b007      	add	sp, #28
 8015098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801509c:	200b      	movs	r0, #11
 801509e:	b007      	add	sp, #28
 80150a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150a4:	9003      	str	r0, [sp, #12]
 80150a6:	f000 f933 	bl	8015310 <rcutils_reset_error>
 80150aa:	9803      	ldr	r0, [sp, #12]
 80150ac:	b007      	add	sp, #28
 80150ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150b2:	bf00      	nop

080150b4 <rclc_publisher_init_default>:
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	bf18      	it	ne
 80150b8:	2a00      	cmpne	r2, #0
 80150ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150be:	4616      	mov	r6, r2
 80150c0:	bf0c      	ite	eq
 80150c2:	2201      	moveq	r2, #1
 80150c4:	2200      	movne	r2, #0
 80150c6:	b0a0      	sub	sp, #128	; 0x80
 80150c8:	2900      	cmp	r1, #0
 80150ca:	bf08      	it	eq
 80150cc:	f042 0201 	orreq.w	r2, r2, #1
 80150d0:	bb1a      	cbnz	r2, 801511a <rclc_publisher_init_default+0x66>
 80150d2:	4604      	mov	r4, r0
 80150d4:	b308      	cbz	r0, 801511a <rclc_publisher_init_default+0x66>
 80150d6:	f10d 0810 	add.w	r8, sp, #16
 80150da:	461f      	mov	r7, r3
 80150dc:	460d      	mov	r5, r1
 80150de:	f7fe fd81 	bl	8013be4 <rcl_get_zero_initialized_publisher>
 80150e2:	6020      	str	r0, [r4, #0]
 80150e4:	4640      	mov	r0, r8
 80150e6:	f7fe fe1d 	bl	8013d24 <rcl_publisher_get_default_options>
 80150ea:	2250      	movs	r2, #80	; 0x50
 80150ec:	490d      	ldr	r1, [pc, #52]	; (8015124 <rclc_publisher_init_default+0x70>)
 80150ee:	4640      	mov	r0, r8
 80150f0:	f00c f831 	bl	8021156 <memcpy>
 80150f4:	463b      	mov	r3, r7
 80150f6:	4632      	mov	r2, r6
 80150f8:	4629      	mov	r1, r5
 80150fa:	4620      	mov	r0, r4
 80150fc:	f8cd 8000 	str.w	r8, [sp]
 8015100:	f7fe fd76 	bl	8013bf0 <rcl_publisher_init>
 8015104:	b910      	cbnz	r0, 801510c <rclc_publisher_init_default+0x58>
 8015106:	b020      	add	sp, #128	; 0x80
 8015108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801510c:	9003      	str	r0, [sp, #12]
 801510e:	f000 f8ff 	bl	8015310 <rcutils_reset_error>
 8015112:	9803      	ldr	r0, [sp, #12]
 8015114:	b020      	add	sp, #128	; 0x80
 8015116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801511a:	200b      	movs	r0, #11
 801511c:	b020      	add	sp, #128	; 0x80
 801511e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015122:	bf00      	nop
 8015124:	08025200 	.word	0x08025200

08015128 <rclc_service_init_default>:
 8015128:	2b00      	cmp	r3, #0
 801512a:	bf18      	it	ne
 801512c:	2a00      	cmpne	r2, #0
 801512e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015132:	4616      	mov	r6, r2
 8015134:	bf0c      	ite	eq
 8015136:	2201      	moveq	r2, #1
 8015138:	2200      	movne	r2, #0
 801513a:	b09e      	sub	sp, #120	; 0x78
 801513c:	2900      	cmp	r1, #0
 801513e:	bf08      	it	eq
 8015140:	f042 0201 	orreq.w	r2, r2, #1
 8015144:	bb1a      	cbnz	r2, 801518e <rclc_service_init_default+0x66>
 8015146:	4604      	mov	r4, r0
 8015148:	b308      	cbz	r0, 801518e <rclc_service_init_default+0x66>
 801514a:	f10d 0810 	add.w	r8, sp, #16
 801514e:	461f      	mov	r7, r3
 8015150:	460d      	mov	r5, r1
 8015152:	f7fe fe5b 	bl	8013e0c <rcl_get_zero_initialized_service>
 8015156:	6020      	str	r0, [r4, #0]
 8015158:	4640      	mov	r0, r8
 801515a:	f7fe feef 	bl	8013f3c <rcl_service_get_default_options>
 801515e:	2250      	movs	r2, #80	; 0x50
 8015160:	490d      	ldr	r1, [pc, #52]	; (8015198 <rclc_service_init_default+0x70>)
 8015162:	4640      	mov	r0, r8
 8015164:	f00b fff7 	bl	8021156 <memcpy>
 8015168:	463b      	mov	r3, r7
 801516a:	4632      	mov	r2, r6
 801516c:	4629      	mov	r1, r5
 801516e:	4620      	mov	r0, r4
 8015170:	f8cd 8000 	str.w	r8, [sp]
 8015174:	f7fe fe50 	bl	8013e18 <rcl_service_init>
 8015178:	b910      	cbnz	r0, 8015180 <rclc_service_init_default+0x58>
 801517a:	b01e      	add	sp, #120	; 0x78
 801517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015180:	9003      	str	r0, [sp, #12]
 8015182:	f000 f8c5 	bl	8015310 <rcutils_reset_error>
 8015186:	9803      	ldr	r0, [sp, #12]
 8015188:	b01e      	add	sp, #120	; 0x78
 801518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801518e:	200b      	movs	r0, #11
 8015190:	b01e      	add	sp, #120	; 0x78
 8015192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015196:	bf00      	nop
 8015198:	08025250 	.word	0x08025250

0801519c <rclc_subscription_init_default>:
 801519c:	2b00      	cmp	r3, #0
 801519e:	bf18      	it	ne
 80151a0:	2a00      	cmpne	r2, #0
 80151a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a6:	4616      	mov	r6, r2
 80151a8:	bf0c      	ite	eq
 80151aa:	2201      	moveq	r2, #1
 80151ac:	2200      	movne	r2, #0
 80151ae:	b0a0      	sub	sp, #128	; 0x80
 80151b0:	2900      	cmp	r1, #0
 80151b2:	bf08      	it	eq
 80151b4:	f042 0201 	orreq.w	r2, r2, #1
 80151b8:	bb1a      	cbnz	r2, 8015202 <rclc_subscription_init_default+0x66>
 80151ba:	4604      	mov	r4, r0
 80151bc:	b308      	cbz	r0, 8015202 <rclc_subscription_init_default+0x66>
 80151be:	f10d 0810 	add.w	r8, sp, #16
 80151c2:	461f      	mov	r7, r3
 80151c4:	460d      	mov	r5, r1
 80151c6:	f7fe ff45 	bl	8014054 <rcl_get_zero_initialized_subscription>
 80151ca:	6020      	str	r0, [r4, #0]
 80151cc:	4640      	mov	r0, r8
 80151ce:	f7fe fff5 	bl	80141bc <rcl_subscription_get_default_options>
 80151d2:	2250      	movs	r2, #80	; 0x50
 80151d4:	490d      	ldr	r1, [pc, #52]	; (801520c <rclc_subscription_init_default+0x70>)
 80151d6:	4640      	mov	r0, r8
 80151d8:	f00b ffbd 	bl	8021156 <memcpy>
 80151dc:	463b      	mov	r3, r7
 80151de:	4632      	mov	r2, r6
 80151e0:	4629      	mov	r1, r5
 80151e2:	4620      	mov	r0, r4
 80151e4:	f8cd 8000 	str.w	r8, [sp]
 80151e8:	f7fe ff3a 	bl	8014060 <rcl_subscription_init>
 80151ec:	b910      	cbnz	r0, 80151f4 <rclc_subscription_init_default+0x58>
 80151ee:	b020      	add	sp, #128	; 0x80
 80151f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f4:	9003      	str	r0, [sp, #12]
 80151f6:	f000 f88b 	bl	8015310 <rcutils_reset_error>
 80151fa:	9803      	ldr	r0, [sp, #12]
 80151fc:	b020      	add	sp, #128	; 0x80
 80151fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015202:	200b      	movs	r0, #11
 8015204:	b020      	add	sp, #128	; 0x80
 8015206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801520a:	bf00      	nop
 801520c:	080252a0 	.word	0x080252a0

08015210 <__default_zero_allocate>:
 8015210:	f00a ba78 	b.w	801f704 <calloc>

08015214 <__default_reallocate>:
 8015214:	f00a bc16 	b.w	801fa44 <realloc>

08015218 <__default_deallocate>:
 8015218:	f00a baf4 	b.w	801f804 <free>

0801521c <__default_allocate>:
 801521c:	f00a baea 	b.w	801f7f4 <malloc>

08015220 <rcutils_get_zero_initialized_allocator>:
 8015220:	b510      	push	{r4, lr}
 8015222:	4c05      	ldr	r4, [pc, #20]	; (8015238 <rcutils_get_zero_initialized_allocator+0x18>)
 8015224:	4686      	mov	lr, r0
 8015226:	4684      	mov	ip, r0
 8015228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801522a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801522e:	6823      	ldr	r3, [r4, #0]
 8015230:	4670      	mov	r0, lr
 8015232:	f8cc 3000 	str.w	r3, [ip]
 8015236:	bd10      	pop	{r4, pc}
 8015238:	080252f0 	.word	0x080252f0

0801523c <rcutils_set_default_allocator>:
 801523c:	b1a8      	cbz	r0, 801526a <rcutils_set_default_allocator+0x2e>
 801523e:	6802      	ldr	r2, [r0, #0]
 8015240:	b1a2      	cbz	r2, 801526c <rcutils_set_default_allocator+0x30>
 8015242:	6841      	ldr	r1, [r0, #4]
 8015244:	b1a1      	cbz	r1, 8015270 <rcutils_set_default_allocator+0x34>
 8015246:	b410      	push	{r4}
 8015248:	68c4      	ldr	r4, [r0, #12]
 801524a:	b164      	cbz	r4, 8015266 <rcutils_set_default_allocator+0x2a>
 801524c:	6880      	ldr	r0, [r0, #8]
 801524e:	b138      	cbz	r0, 8015260 <rcutils_set_default_allocator+0x24>
 8015250:	4b08      	ldr	r3, [pc, #32]	; (8015274 <rcutils_set_default_allocator+0x38>)
 8015252:	601a      	str	r2, [r3, #0]
 8015254:	2200      	movs	r2, #0
 8015256:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801525a:	2001      	movs	r0, #1
 801525c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8015260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015264:	4770      	bx	lr
 8015266:	4620      	mov	r0, r4
 8015268:	e7fa      	b.n	8015260 <rcutils_set_default_allocator+0x24>
 801526a:	4770      	bx	lr
 801526c:	4610      	mov	r0, r2
 801526e:	4770      	bx	lr
 8015270:	4608      	mov	r0, r1
 8015272:	4770      	bx	lr
 8015274:	200008e0 	.word	0x200008e0

08015278 <rcutils_get_default_allocator>:
 8015278:	b510      	push	{r4, lr}
 801527a:	4c05      	ldr	r4, [pc, #20]	; (8015290 <rcutils_get_default_allocator+0x18>)
 801527c:	4686      	mov	lr, r0
 801527e:	4684      	mov	ip, r0
 8015280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015286:	6823      	ldr	r3, [r4, #0]
 8015288:	4670      	mov	r0, lr
 801528a:	f8cc 3000 	str.w	r3, [ip]
 801528e:	bd10      	pop	{r4, pc}
 8015290:	200008e0 	.word	0x200008e0

08015294 <rcutils_allocator_is_valid>:
 8015294:	b158      	cbz	r0, 80152ae <rcutils_allocator_is_valid+0x1a>
 8015296:	6803      	ldr	r3, [r0, #0]
 8015298:	b143      	cbz	r3, 80152ac <rcutils_allocator_is_valid+0x18>
 801529a:	6843      	ldr	r3, [r0, #4]
 801529c:	b133      	cbz	r3, 80152ac <rcutils_allocator_is_valid+0x18>
 801529e:	68c3      	ldr	r3, [r0, #12]
 80152a0:	b123      	cbz	r3, 80152ac <rcutils_allocator_is_valid+0x18>
 80152a2:	6880      	ldr	r0, [r0, #8]
 80152a4:	3800      	subs	r0, #0
 80152a6:	bf18      	it	ne
 80152a8:	2001      	movne	r0, #1
 80152aa:	4770      	bx	lr
 80152ac:	4618      	mov	r0, r3
 80152ae:	4770      	bx	lr

080152b0 <rcutils_get_env>:
 80152b0:	b168      	cbz	r0, 80152ce <rcutils_get_env+0x1e>
 80152b2:	b510      	push	{r4, lr}
 80152b4:	460c      	mov	r4, r1
 80152b6:	b129      	cbz	r1, 80152c4 <rcutils_get_env+0x14>
 80152b8:	f00a fa54 	bl	801f764 <getenv>
 80152bc:	b120      	cbz	r0, 80152c8 <rcutils_get_env+0x18>
 80152be:	6020      	str	r0, [r4, #0]
 80152c0:	2000      	movs	r0, #0
 80152c2:	bd10      	pop	{r4, pc}
 80152c4:	4803      	ldr	r0, [pc, #12]	; (80152d4 <rcutils_get_env+0x24>)
 80152c6:	bd10      	pop	{r4, pc}
 80152c8:	4b03      	ldr	r3, [pc, #12]	; (80152d8 <rcutils_get_env+0x28>)
 80152ca:	6023      	str	r3, [r4, #0]
 80152cc:	bd10      	pop	{r4, pc}
 80152ce:	4803      	ldr	r0, [pc, #12]	; (80152dc <rcutils_get_env+0x2c>)
 80152d0:	4770      	bx	lr
 80152d2:	bf00      	nop
 80152d4:	08025320 	.word	0x08025320
 80152d8:	080256d8 	.word	0x080256d8
 80152dc:	08025304 	.word	0x08025304

080152e0 <rcutils_get_error_string>:
 80152e0:	4b06      	ldr	r3, [pc, #24]	; (80152fc <rcutils_get_error_string+0x1c>)
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	b13b      	cbz	r3, 80152f6 <rcutils_get_error_string+0x16>
 80152e6:	4b06      	ldr	r3, [pc, #24]	; (8015300 <rcutils_get_error_string+0x20>)
 80152e8:	781a      	ldrb	r2, [r3, #0]
 80152ea:	b90a      	cbnz	r2, 80152f0 <rcutils_get_error_string+0x10>
 80152ec:	2201      	movs	r2, #1
 80152ee:	701a      	strb	r2, [r3, #0]
 80152f0:	4b04      	ldr	r3, [pc, #16]	; (8015304 <rcutils_get_error_string+0x24>)
 80152f2:	7818      	ldrb	r0, [r3, #0]
 80152f4:	4770      	bx	lr
 80152f6:	4b04      	ldr	r3, [pc, #16]	; (8015308 <rcutils_get_error_string+0x28>)
 80152f8:	7818      	ldrb	r0, [r3, #0]
 80152fa:	4770      	bx	lr
 80152fc:	20012558 	.word	0x20012558
 8015300:	20012571 	.word	0x20012571
 8015304:	20012570 	.word	0x20012570
 8015308:	080249a0 	.word	0x080249a0
 801530c:	00000000 	.word	0x00000000

08015310 <rcutils_reset_error>:
 8015310:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8015330 <rcutils_reset_error+0x20>
 8015314:	2300      	movs	r3, #0
 8015316:	4a08      	ldr	r2, [pc, #32]	; (8015338 <rcutils_reset_error+0x28>)
 8015318:	4808      	ldr	r0, [pc, #32]	; (801533c <rcutils_reset_error+0x2c>)
 801531a:	8013      	strh	r3, [r2, #0]
 801531c:	4908      	ldr	r1, [pc, #32]	; (8015340 <rcutils_reset_error+0x30>)
 801531e:	7003      	strb	r3, [r0, #0]
 8015320:	700b      	strb	r3, [r1, #0]
 8015322:	ed82 7b02 	vstr	d7, [r2, #8]
 8015326:	4a07      	ldr	r2, [pc, #28]	; (8015344 <rcutils_reset_error+0x34>)
 8015328:	7013      	strb	r3, [r2, #0]
 801532a:	4770      	bx	lr
 801532c:	f3af 8000 	nop.w
	...
 8015338:	20012560 	.word	0x20012560
 801533c:	20012571 	.word	0x20012571
 8015340:	20012570 	.word	0x20012570
 8015344:	20012558 	.word	0x20012558

08015348 <rcutils_format_string_limit>:
 8015348:	b40f      	push	{r0, r1, r2, r3}
 801534a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801534c:	b083      	sub	sp, #12
 801534e:	ac08      	add	r4, sp, #32
 8015350:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015356:	b326      	cbz	r6, 80153a2 <rcutils_format_string_limit+0x5a>
 8015358:	a808      	add	r0, sp, #32
 801535a:	f7ff ff9b 	bl	8015294 <rcutils_allocator_is_valid>
 801535e:	b300      	cbz	r0, 80153a2 <rcutils_format_string_limit+0x5a>
 8015360:	2100      	movs	r1, #0
 8015362:	ab0f      	add	r3, sp, #60	; 0x3c
 8015364:	4632      	mov	r2, r6
 8015366:	4608      	mov	r0, r1
 8015368:	e9cd 3300 	strd	r3, r3, [sp]
 801536c:	f000 f906 	bl	801557c <rcutils_vsnprintf>
 8015370:	1c43      	adds	r3, r0, #1
 8015372:	4605      	mov	r5, r0
 8015374:	d015      	beq.n	80153a2 <rcutils_format_string_limit+0x5a>
 8015376:	1c47      	adds	r7, r0, #1
 8015378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801537a:	429f      	cmp	r7, r3
 801537c:	d901      	bls.n	8015382 <rcutils_format_string_limit+0x3a>
 801537e:	1e5d      	subs	r5, r3, #1
 8015380:	461f      	mov	r7, r3
 8015382:	9b08      	ldr	r3, [sp, #32]
 8015384:	4638      	mov	r0, r7
 8015386:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015388:	4798      	blx	r3
 801538a:	4604      	mov	r4, r0
 801538c:	b148      	cbz	r0, 80153a2 <rcutils_format_string_limit+0x5a>
 801538e:	4632      	mov	r2, r6
 8015390:	4639      	mov	r1, r7
 8015392:	9b01      	ldr	r3, [sp, #4]
 8015394:	f000 f8f2 	bl	801557c <rcutils_vsnprintf>
 8015398:	2800      	cmp	r0, #0
 801539a:	db09      	blt.n	80153b0 <rcutils_format_string_limit+0x68>
 801539c:	2300      	movs	r3, #0
 801539e:	5563      	strb	r3, [r4, r5]
 80153a0:	e000      	b.n	80153a4 <rcutils_format_string_limit+0x5c>
 80153a2:	2400      	movs	r4, #0
 80153a4:	4620      	mov	r0, r4
 80153a6:	b003      	add	sp, #12
 80153a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153ac:	b004      	add	sp, #16
 80153ae:	4770      	bx	lr
 80153b0:	4620      	mov	r0, r4
 80153b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80153b6:	2400      	movs	r4, #0
 80153b8:	4798      	blx	r3
 80153ba:	e7f3      	b.n	80153a4 <rcutils_format_string_limit+0x5c>

080153bc <rcutils_repl_str>:
 80153bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c0:	ed2d 8b02 	vpush	{d8}
 80153c4:	b087      	sub	sp, #28
 80153c6:	2600      	movs	r6, #0
 80153c8:	4680      	mov	r8, r0
 80153ca:	468a      	mov	sl, r1
 80153cc:	9000      	str	r0, [sp, #0]
 80153ce:	4608      	mov	r0, r1
 80153d0:	ee08 2a10 	vmov	s16, r2
 80153d4:	4699      	mov	r9, r3
 80153d6:	2510      	movs	r5, #16
 80153d8:	f7ea ff92 	bl	8000300 <strlen>
 80153dc:	4637      	mov	r7, r6
 80153de:	46b3      	mov	fp, r6
 80153e0:	9001      	str	r0, [sp, #4]
 80153e2:	e01e      	b.n	8015422 <rcutils_repl_str+0x66>
 80153e4:	f10b 0b01 	add.w	fp, fp, #1
 80153e8:	9b01      	ldr	r3, [sp, #4]
 80153ea:	455e      	cmp	r6, fp
 80153ec:	eb04 0803 	add.w	r8, r4, r3
 80153f0:	d211      	bcs.n	8015416 <rcutils_repl_str+0x5a>
 80153f2:	442e      	add	r6, r5
 80153f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80153f8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80153fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015400:	00b1      	lsls	r1, r6, #2
 8015402:	4798      	blx	r3
 8015404:	2800      	cmp	r0, #0
 8015406:	f000 8088 	beq.w	801551a <rcutils_repl_str+0x15e>
 801540a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801540e:	4607      	mov	r7, r0
 8015410:	bf28      	it	cs
 8015412:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8015416:	9a00      	ldr	r2, [sp, #0]
 8015418:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801541c:	1aa4      	subs	r4, r4, r2
 801541e:	f843 4c04 	str.w	r4, [r3, #-4]
 8015422:	4651      	mov	r1, sl
 8015424:	4640      	mov	r0, r8
 8015426:	f00b fdf0 	bl	802100a <strstr>
 801542a:	4604      	mov	r4, r0
 801542c:	4638      	mov	r0, r7
 801542e:	2c00      	cmp	r4, #0
 8015430:	d1d8      	bne.n	80153e4 <rcutils_repl_str+0x28>
 8015432:	4640      	mov	r0, r8
 8015434:	f7ea ff64 	bl	8000300 <strlen>
 8015438:	9b00      	ldr	r3, [sp, #0]
 801543a:	eba8 0803 	sub.w	r8, r8, r3
 801543e:	eb08 0400 	add.w	r4, r8, r0
 8015442:	9402      	str	r4, [sp, #8]
 8015444:	f1bb 0f00 	cmp.w	fp, #0
 8015448:	d045      	beq.n	80154d6 <rcutils_repl_str+0x11a>
 801544a:	ee18 0a10 	vmov	r0, s16
 801544e:	f7ea ff57 	bl	8000300 <strlen>
 8015452:	9a01      	ldr	r2, [sp, #4]
 8015454:	4606      	mov	r6, r0
 8015456:	f8d9 3000 	ldr.w	r3, [r9]
 801545a:	1a82      	subs	r2, r0, r2
 801545c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015460:	fb0b 4202 	mla	r2, fp, r2, r4
 8015464:	1c50      	adds	r0, r2, #1
 8015466:	9205      	str	r2, [sp, #20]
 8015468:	4798      	blx	r3
 801546a:	4682      	mov	sl, r0
 801546c:	2800      	cmp	r0, #0
 801546e:	d054      	beq.n	801551a <rcutils_repl_str+0x15e>
 8015470:	683a      	ldr	r2, [r7, #0]
 8015472:	463d      	mov	r5, r7
 8015474:	9900      	ldr	r1, [sp, #0]
 8015476:	2401      	movs	r4, #1
 8015478:	f00b fe6d 	bl	8021156 <memcpy>
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8015482:	eb0a 0803 	add.w	r8, sl, r3
 8015486:	ee18 7a10 	vmov	r7, s16
 801548a:	f8dd a000 	ldr.w	sl, [sp]
 801548e:	f8cd 9000 	str.w	r9, [sp]
 8015492:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015496:	4632      	mov	r2, r6
 8015498:	4639      	mov	r1, r7
 801549a:	4640      	mov	r0, r8
 801549c:	44b0      	add	r8, r6
 801549e:	f00b fe5a 	bl	8021156 <memcpy>
 80154a2:	f855 2b04 	ldr.w	r2, [r5], #4
 80154a6:	45a3      	cmp	fp, r4
 80154a8:	444a      	add	r2, r9
 80154aa:	eb0a 0102 	add.w	r1, sl, r2
 80154ae:	d02a      	beq.n	8015506 <rcutils_repl_str+0x14a>
 80154b0:	6828      	ldr	r0, [r5, #0]
 80154b2:	1a82      	subs	r2, r0, r2
 80154b4:	4640      	mov	r0, r8
 80154b6:	4490      	add	r8, r2
 80154b8:	f00b fe4d 	bl	8021156 <memcpy>
 80154bc:	1c62      	adds	r2, r4, #1
 80154be:	45a3      	cmp	fp, r4
 80154c0:	4614      	mov	r4, r2
 80154c2:	d8e8      	bhi.n	8015496 <rcutils_repl_str+0xda>
 80154c4:	f8dd 9000 	ldr.w	r9, [sp]
 80154c8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80154cc:	2300      	movs	r3, #0
 80154ce:	9a05      	ldr	r2, [sp, #20]
 80154d0:	f80a 3002 	strb.w	r3, [sl, r2]
 80154d4:	e00b      	b.n	80154ee <rcutils_repl_str+0x132>
 80154d6:	4620      	mov	r0, r4
 80154d8:	f8d9 3000 	ldr.w	r3, [r9]
 80154dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80154e0:	3001      	adds	r0, #1
 80154e2:	4798      	blx	r3
 80154e4:	4682      	mov	sl, r0
 80154e6:	b110      	cbz	r0, 80154ee <rcutils_repl_str+0x132>
 80154e8:	9900      	ldr	r1, [sp, #0]
 80154ea:	f00b fe2c 	bl	8021146 <strcpy>
 80154ee:	4638      	mov	r0, r7
 80154f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80154f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80154f8:	4798      	blx	r3
 80154fa:	4650      	mov	r0, sl
 80154fc:	b007      	add	sp, #28
 80154fe:	ecbd 8b02 	vpop	{d8}
 8015502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015506:	9b02      	ldr	r3, [sp, #8]
 8015508:	4640      	mov	r0, r8
 801550a:	f8dd 9000 	ldr.w	r9, [sp]
 801550e:	1a9a      	subs	r2, r3, r2
 8015510:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015514:	f00b fe1f 	bl	8021156 <memcpy>
 8015518:	e7d8      	b.n	80154cc <rcutils_repl_str+0x110>
 801551a:	f04f 0a00 	mov.w	sl, #0
 801551e:	e7e6      	b.n	80154ee <rcutils_repl_str+0x132>

08015520 <rcutils_snprintf>:
 8015520:	b40c      	push	{r2, r3}
 8015522:	b530      	push	{r4, r5, lr}
 8015524:	b083      	sub	sp, #12
 8015526:	ab06      	add	r3, sp, #24
 8015528:	f853 2b04 	ldr.w	r2, [r3], #4
 801552c:	9301      	str	r3, [sp, #4]
 801552e:	b1e2      	cbz	r2, 801556a <rcutils_snprintf+0x4a>
 8015530:	fab0 f480 	clz	r4, r0
 8015534:	fab1 f581 	clz	r5, r1
 8015538:	ea50 0c01 	orrs.w	ip, r0, r1
 801553c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015540:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015544:	d008      	beq.n	8015558 <rcutils_snprintf+0x38>
 8015546:	b984      	cbnz	r4, 801556a <rcutils_snprintf+0x4a>
 8015548:	b97d      	cbnz	r5, 801556a <rcutils_snprintf+0x4a>
 801554a:	f00b fc69 	bl	8020e20 <vsniprintf>
 801554e:	b003      	add	sp, #12
 8015550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015554:	b002      	add	sp, #8
 8015556:	4770      	bx	lr
 8015558:	4661      	mov	r1, ip
 801555a:	4660      	mov	r0, ip
 801555c:	f00b fc60 	bl	8020e20 <vsniprintf>
 8015560:	b003      	add	sp, #12
 8015562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015566:	b002      	add	sp, #8
 8015568:	4770      	bx	lr
 801556a:	f00b fdbf 	bl	80210ec <__errno>
 801556e:	2216      	movs	r2, #22
 8015570:	4603      	mov	r3, r0
 8015572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015576:	601a      	str	r2, [r3, #0]
 8015578:	e7e9      	b.n	801554e <rcutils_snprintf+0x2e>
 801557a:	bf00      	nop

0801557c <rcutils_vsnprintf>:
 801557c:	b570      	push	{r4, r5, r6, lr}
 801557e:	b1b2      	cbz	r2, 80155ae <rcutils_vsnprintf+0x32>
 8015580:	fab0 f480 	clz	r4, r0
 8015584:	fab1 f581 	clz	r5, r1
 8015588:	ea50 0c01 	orrs.w	ip, r0, r1
 801558c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015590:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015594:	d005      	beq.n	80155a2 <rcutils_vsnprintf+0x26>
 8015596:	b954      	cbnz	r4, 80155ae <rcutils_vsnprintf+0x32>
 8015598:	b94d      	cbnz	r5, 80155ae <rcutils_vsnprintf+0x32>
 801559a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801559e:	f00b bc3f 	b.w	8020e20 <vsniprintf>
 80155a2:	4661      	mov	r1, ip
 80155a4:	4660      	mov	r0, ip
 80155a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155aa:	f00b bc39 	b.w	8020e20 <vsniprintf>
 80155ae:	f00b fd9d 	bl	80210ec <__errno>
 80155b2:	2316      	movs	r3, #22
 80155b4:	6003      	str	r3, [r0, #0]
 80155b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155ba:	bd70      	pop	{r4, r5, r6, pc}

080155bc <rcutils_strdup>:
 80155bc:	b084      	sub	sp, #16
 80155be:	b570      	push	{r4, r5, r6, lr}
 80155c0:	b082      	sub	sp, #8
 80155c2:	4605      	mov	r5, r0
 80155c4:	ac07      	add	r4, sp, #28
 80155c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80155ca:	b1b0      	cbz	r0, 80155fa <rcutils_strdup+0x3e>
 80155cc:	f7ea fe98 	bl	8000300 <strlen>
 80155d0:	1c42      	adds	r2, r0, #1
 80155d2:	9b07      	ldr	r3, [sp, #28]
 80155d4:	4606      	mov	r6, r0
 80155d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155d8:	4610      	mov	r0, r2
 80155da:	9201      	str	r2, [sp, #4]
 80155dc:	4798      	blx	r3
 80155de:	4604      	mov	r4, r0
 80155e0:	b128      	cbz	r0, 80155ee <rcutils_strdup+0x32>
 80155e2:	9a01      	ldr	r2, [sp, #4]
 80155e4:	4629      	mov	r1, r5
 80155e6:	f00b fdb6 	bl	8021156 <memcpy>
 80155ea:	2300      	movs	r3, #0
 80155ec:	55a3      	strb	r3, [r4, r6]
 80155ee:	4620      	mov	r0, r4
 80155f0:	b002      	add	sp, #8
 80155f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155f6:	b004      	add	sp, #16
 80155f8:	4770      	bx	lr
 80155fa:	4604      	mov	r4, r0
 80155fc:	e7f7      	b.n	80155ee <rcutils_strdup+0x32>
 80155fe:	bf00      	nop

08015600 <rcutils_strndup>:
 8015600:	b082      	sub	sp, #8
 8015602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015604:	ac06      	add	r4, sp, #24
 8015606:	4605      	mov	r5, r0
 8015608:	e884 000c 	stmia.w	r4, {r2, r3}
 801560c:	b188      	cbz	r0, 8015632 <rcutils_strndup+0x32>
 801560e:	1c4f      	adds	r7, r1, #1
 8015610:	460e      	mov	r6, r1
 8015612:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015614:	4638      	mov	r0, r7
 8015616:	4790      	blx	r2
 8015618:	4604      	mov	r4, r0
 801561a:	b128      	cbz	r0, 8015628 <rcutils_strndup+0x28>
 801561c:	463a      	mov	r2, r7
 801561e:	4629      	mov	r1, r5
 8015620:	f00b fd99 	bl	8021156 <memcpy>
 8015624:	2300      	movs	r3, #0
 8015626:	55a3      	strb	r3, [r4, r6]
 8015628:	4620      	mov	r0, r4
 801562a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801562e:	b002      	add	sp, #8
 8015630:	4770      	bx	lr
 8015632:	4604      	mov	r4, r0
 8015634:	e7f8      	b.n	8015628 <rcutils_strndup+0x28>
 8015636:	bf00      	nop

08015638 <rcutils_system_time_now>:
 8015638:	b300      	cbz	r0, 801567c <rcutils_system_time_now+0x44>
 801563a:	b570      	push	{r4, r5, r6, lr}
 801563c:	b084      	sub	sp, #16
 801563e:	4604      	mov	r4, r0
 8015640:	2001      	movs	r0, #1
 8015642:	4669      	mov	r1, sp
 8015644:	f7ee f9f8 	bl	8003a38 <clock_gettime>
 8015648:	e9dd 3100 	ldrd	r3, r1, [sp]
 801564c:	2900      	cmp	r1, #0
 801564e:	db12      	blt.n	8015676 <rcutils_system_time_now+0x3e>
 8015650:	ea53 0201 	orrs.w	r2, r3, r1
 8015654:	9d02      	ldr	r5, [sp, #8]
 8015656:	d101      	bne.n	801565c <rcutils_system_time_now+0x24>
 8015658:	2d00      	cmp	r5, #0
 801565a:	db0c      	blt.n	8015676 <rcutils_system_time_now+0x3e>
 801565c:	4e08      	ldr	r6, [pc, #32]	; (8015680 <rcutils_system_time_now+0x48>)
 801565e:	2000      	movs	r0, #0
 8015660:	fba3 3206 	umull	r3, r2, r3, r6
 8015664:	195b      	adds	r3, r3, r5
 8015666:	fb06 2201 	mla	r2, r6, r1, r2
 801566a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801566e:	e9c4 3200 	strd	r3, r2, [r4]
 8015672:	b004      	add	sp, #16
 8015674:	bd70      	pop	{r4, r5, r6, pc}
 8015676:	2002      	movs	r0, #2
 8015678:	b004      	add	sp, #16
 801567a:	bd70      	pop	{r4, r5, r6, pc}
 801567c:	200b      	movs	r0, #11
 801567e:	4770      	bx	lr
 8015680:	3b9aca00 	.word	0x3b9aca00

08015684 <rcutils_steady_time_now>:
 8015684:	b300      	cbz	r0, 80156c8 <rcutils_steady_time_now+0x44>
 8015686:	b570      	push	{r4, r5, r6, lr}
 8015688:	b084      	sub	sp, #16
 801568a:	4604      	mov	r4, r0
 801568c:	2000      	movs	r0, #0
 801568e:	4669      	mov	r1, sp
 8015690:	f7ee f9d2 	bl	8003a38 <clock_gettime>
 8015694:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015698:	2900      	cmp	r1, #0
 801569a:	db12      	blt.n	80156c2 <rcutils_steady_time_now+0x3e>
 801569c:	ea53 0201 	orrs.w	r2, r3, r1
 80156a0:	9d02      	ldr	r5, [sp, #8]
 80156a2:	d101      	bne.n	80156a8 <rcutils_steady_time_now+0x24>
 80156a4:	2d00      	cmp	r5, #0
 80156a6:	db0c      	blt.n	80156c2 <rcutils_steady_time_now+0x3e>
 80156a8:	4e08      	ldr	r6, [pc, #32]	; (80156cc <rcutils_steady_time_now+0x48>)
 80156aa:	2000      	movs	r0, #0
 80156ac:	fba3 3206 	umull	r3, r2, r3, r6
 80156b0:	195b      	adds	r3, r3, r5
 80156b2:	fb06 2201 	mla	r2, r6, r1, r2
 80156b6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80156ba:	e9c4 3200 	strd	r3, r2, [r4]
 80156be:	b004      	add	sp, #16
 80156c0:	bd70      	pop	{r4, r5, r6, pc}
 80156c2:	2002      	movs	r0, #2
 80156c4:	b004      	add	sp, #16
 80156c6:	bd70      	pop	{r4, r5, r6, pc}
 80156c8:	200b      	movs	r0, #11
 80156ca:	4770      	bx	lr
 80156cc:	3b9aca00 	.word	0x3b9aca00

080156d0 <rmw_get_zero_initialized_init_options>:
 80156d0:	b510      	push	{r4, lr}
 80156d2:	4604      	mov	r4, r0
 80156d4:	2238      	movs	r2, #56	; 0x38
 80156d6:	2100      	movs	r1, #0
 80156d8:	f00b fc70 	bl	8020fbc <memset>
 80156dc:	f104 0010 	add.w	r0, r4, #16
 80156e0:	f000 f80a 	bl	80156f8 <rmw_get_default_security_options>
 80156e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156e8:	4620      	mov	r0, r4
 80156ea:	60e3      	str	r3, [r4, #12]
 80156ec:	bd10      	pop	{r4, pc}
 80156ee:	bf00      	nop

080156f0 <rmw_get_default_publisher_options>:
 80156f0:	2200      	movs	r2, #0
 80156f2:	6002      	str	r2, [r0, #0]
 80156f4:	7102      	strb	r2, [r0, #4]
 80156f6:	4770      	bx	lr

080156f8 <rmw_get_default_security_options>:
 80156f8:	2200      	movs	r2, #0
 80156fa:	7002      	strb	r2, [r0, #0]
 80156fc:	6042      	str	r2, [r0, #4]
 80156fe:	4770      	bx	lr

08015700 <rmw_subscription_content_filter_options_fini>:
 8015700:	b1b0      	cbz	r0, 8015730 <rmw_subscription_content_filter_options_fini+0x30>
 8015702:	b538      	push	{r3, r4, r5, lr}
 8015704:	4604      	mov	r4, r0
 8015706:	4608      	mov	r0, r1
 8015708:	460d      	mov	r5, r1
 801570a:	f7ff fdc3 	bl	8015294 <rcutils_allocator_is_valid>
 801570e:	b168      	cbz	r0, 801572c <rmw_subscription_content_filter_options_fini+0x2c>
 8015710:	6820      	ldr	r0, [r4, #0]
 8015712:	b120      	cbz	r0, 801571e <rmw_subscription_content_filter_options_fini+0x1e>
 8015714:	686b      	ldr	r3, [r5, #4]
 8015716:	6929      	ldr	r1, [r5, #16]
 8015718:	4798      	blx	r3
 801571a:	2300      	movs	r3, #0
 801571c:	6023      	str	r3, [r4, #0]
 801571e:	1d20      	adds	r0, r4, #4
 8015720:	f008 fa06 	bl	801db30 <rcutils_string_array_fini>
 8015724:	3800      	subs	r0, #0
 8015726:	bf18      	it	ne
 8015728:	2001      	movne	r0, #1
 801572a:	bd38      	pop	{r3, r4, r5, pc}
 801572c:	200b      	movs	r0, #11
 801572e:	bd38      	pop	{r3, r4, r5, pc}
 8015730:	200b      	movs	r0, #11
 8015732:	4770      	bx	lr

08015734 <rmw_get_default_subscription_options>:
 8015734:	2200      	movs	r2, #0
 8015736:	e9c0 2200 	strd	r2, r2, [r0]
 801573a:	6082      	str	r2, [r0, #8]
 801573c:	4770      	bx	lr
 801573e:	bf00      	nop

08015740 <rmw_get_zero_initialized_message_info>:
 8015740:	b510      	push	{r4, lr}
 8015742:	4604      	mov	r4, r0
 8015744:	2240      	movs	r2, #64	; 0x40
 8015746:	2100      	movs	r1, #0
 8015748:	f00b fc38 	bl	8020fbc <memset>
 801574c:	4620      	mov	r0, r4
 801574e:	bd10      	pop	{r4, pc}

08015750 <rmw_validate_namespace_with_size>:
 8015750:	2800      	cmp	r0, #0
 8015752:	d043      	beq.n	80157dc <rmw_validate_namespace_with_size+0x8c>
 8015754:	b570      	push	{r4, r5, r6, lr}
 8015756:	4614      	mov	r4, r2
 8015758:	b0c2      	sub	sp, #264	; 0x108
 801575a:	b32a      	cbz	r2, 80157a8 <rmw_validate_namespace_with_size+0x58>
 801575c:	2901      	cmp	r1, #1
 801575e:	460d      	mov	r5, r1
 8015760:	461e      	mov	r6, r3
 8015762:	d102      	bne.n	801576a <rmw_validate_namespace_with_size+0x1a>
 8015764:	7803      	ldrb	r3, [r0, #0]
 8015766:	2b2f      	cmp	r3, #47	; 0x2f
 8015768:	d012      	beq.n	8015790 <rmw_validate_namespace_with_size+0x40>
 801576a:	aa01      	add	r2, sp, #4
 801576c:	4669      	mov	r1, sp
 801576e:	f008 fbd3 	bl	801df18 <rmw_validate_full_topic_name>
 8015772:	b980      	cbnz	r0, 8015796 <rmw_validate_namespace_with_size+0x46>
 8015774:	9a00      	ldr	r2, [sp, #0]
 8015776:	b14a      	cbz	r2, 801578c <rmw_validate_namespace_with_size+0x3c>
 8015778:	2a07      	cmp	r2, #7
 801577a:	d007      	beq.n	801578c <rmw_validate_namespace_with_size+0x3c>
 801577c:	1e53      	subs	r3, r2, #1
 801577e:	2b05      	cmp	r3, #5
 8015780:	d82e      	bhi.n	80157e0 <rmw_validate_namespace_with_size+0x90>
 8015782:	e8df f003 	tbb	[pc, r3]
 8015786:	1f1c      	.short	0x1f1c
 8015788:	14282522 	.word	0x14282522
 801578c:	2df5      	cmp	r5, #245	; 0xf5
 801578e:	d804      	bhi.n	801579a <rmw_validate_namespace_with_size+0x4a>
 8015790:	2300      	movs	r3, #0
 8015792:	4618      	mov	r0, r3
 8015794:	6023      	str	r3, [r4, #0]
 8015796:	b042      	add	sp, #264	; 0x108
 8015798:	bd70      	pop	{r4, r5, r6, pc}
 801579a:	2307      	movs	r3, #7
 801579c:	6023      	str	r3, [r4, #0]
 801579e:	2e00      	cmp	r6, #0
 80157a0:	d0f9      	beq.n	8015796 <rmw_validate_namespace_with_size+0x46>
 80157a2:	23f4      	movs	r3, #244	; 0xf4
 80157a4:	6033      	str	r3, [r6, #0]
 80157a6:	e7f6      	b.n	8015796 <rmw_validate_namespace_with_size+0x46>
 80157a8:	200b      	movs	r0, #11
 80157aa:	b042      	add	sp, #264	; 0x108
 80157ac:	bd70      	pop	{r4, r5, r6, pc}
 80157ae:	2306      	movs	r3, #6
 80157b0:	6023      	str	r3, [r4, #0]
 80157b2:	2e00      	cmp	r6, #0
 80157b4:	d0ef      	beq.n	8015796 <rmw_validate_namespace_with_size+0x46>
 80157b6:	9b01      	ldr	r3, [sp, #4]
 80157b8:	6033      	str	r3, [r6, #0]
 80157ba:	b042      	add	sp, #264	; 0x108
 80157bc:	bd70      	pop	{r4, r5, r6, pc}
 80157be:	2301      	movs	r3, #1
 80157c0:	6023      	str	r3, [r4, #0]
 80157c2:	e7f6      	b.n	80157b2 <rmw_validate_namespace_with_size+0x62>
 80157c4:	2302      	movs	r3, #2
 80157c6:	6023      	str	r3, [r4, #0]
 80157c8:	e7f3      	b.n	80157b2 <rmw_validate_namespace_with_size+0x62>
 80157ca:	2303      	movs	r3, #3
 80157cc:	6023      	str	r3, [r4, #0]
 80157ce:	e7f0      	b.n	80157b2 <rmw_validate_namespace_with_size+0x62>
 80157d0:	2304      	movs	r3, #4
 80157d2:	6023      	str	r3, [r4, #0]
 80157d4:	e7ed      	b.n	80157b2 <rmw_validate_namespace_with_size+0x62>
 80157d6:	2305      	movs	r3, #5
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	e7ea      	b.n	80157b2 <rmw_validate_namespace_with_size+0x62>
 80157dc:	200b      	movs	r0, #11
 80157de:	4770      	bx	lr
 80157e0:	4613      	mov	r3, r2
 80157e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80157e6:	4a03      	ldr	r2, [pc, #12]	; (80157f4 <rmw_validate_namespace_with_size+0xa4>)
 80157e8:	a802      	add	r0, sp, #8
 80157ea:	f7ff fe99 	bl	8015520 <rcutils_snprintf>
 80157ee:	2001      	movs	r0, #1
 80157f0:	e7d1      	b.n	8015796 <rmw_validate_namespace_with_size+0x46>
 80157f2:	bf00      	nop
 80157f4:	0802533c 	.word	0x0802533c

080157f8 <rmw_validate_namespace>:
 80157f8:	b168      	cbz	r0, 8015816 <rmw_validate_namespace+0x1e>
 80157fa:	b570      	push	{r4, r5, r6, lr}
 80157fc:	460d      	mov	r5, r1
 80157fe:	4616      	mov	r6, r2
 8015800:	4604      	mov	r4, r0
 8015802:	f7ea fd7d 	bl	8000300 <strlen>
 8015806:	4633      	mov	r3, r6
 8015808:	4601      	mov	r1, r0
 801580a:	462a      	mov	r2, r5
 801580c:	4620      	mov	r0, r4
 801580e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015812:	f7ff bf9d 	b.w	8015750 <rmw_validate_namespace_with_size>
 8015816:	200b      	movs	r0, #11
 8015818:	4770      	bx	lr
 801581a:	bf00      	nop

0801581c <rmw_namespace_validation_result_string>:
 801581c:	2807      	cmp	r0, #7
 801581e:	d803      	bhi.n	8015828 <rmw_namespace_validation_result_string+0xc>
 8015820:	4b02      	ldr	r3, [pc, #8]	; (801582c <rmw_namespace_validation_result_string+0x10>)
 8015822:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015826:	4770      	bx	lr
 8015828:	4801      	ldr	r0, [pc, #4]	; (8015830 <rmw_namespace_validation_result_string+0x14>)
 801582a:	4770      	bx	lr
 801582c:	08025534 	.word	0x08025534
 8015830:	0802538c 	.word	0x0802538c

08015834 <rmw_validate_node_name>:
 8015834:	2800      	cmp	r0, #0
 8015836:	d042      	beq.n	80158be <rmw_validate_node_name+0x8a>
 8015838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801583c:	460d      	mov	r5, r1
 801583e:	2900      	cmp	r1, #0
 8015840:	d03f      	beq.n	80158c2 <rmw_validate_node_name+0x8e>
 8015842:	4604      	mov	r4, r0
 8015844:	4616      	mov	r6, r2
 8015846:	f7ea fd5b 	bl	8000300 <strlen>
 801584a:	b310      	cbz	r0, 8015892 <rmw_validate_node_name+0x5e>
 801584c:	1e63      	subs	r3, r4, #1
 801584e:	f1c4 0101 	rsb	r1, r4, #1
 8015852:	eb03 0800 	add.w	r8, r3, r0
 8015856:	18cf      	adds	r7, r1, r3
 8015858:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801585c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8015860:	f02e 0c20 	bic.w	ip, lr, #32
 8015864:	2a09      	cmp	r2, #9
 8015866:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801586a:	d905      	bls.n	8015878 <rmw_validate_node_name+0x44>
 801586c:	f1bc 0f19 	cmp.w	ip, #25
 8015870:	d902      	bls.n	8015878 <rmw_validate_node_name+0x44>
 8015872:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8015876:	d114      	bne.n	80158a2 <rmw_validate_node_name+0x6e>
 8015878:	4598      	cmp	r8, r3
 801587a:	d1ec      	bne.n	8015856 <rmw_validate_node_name+0x22>
 801587c:	7822      	ldrb	r2, [r4, #0]
 801587e:	4b16      	ldr	r3, [pc, #88]	; (80158d8 <rmw_validate_node_name+0xa4>)
 8015880:	5cd3      	ldrb	r3, [r2, r3]
 8015882:	f013 0304 	ands.w	r3, r3, #4
 8015886:	d113      	bne.n	80158b0 <rmw_validate_node_name+0x7c>
 8015888:	28ff      	cmp	r0, #255	; 0xff
 801588a:	d81c      	bhi.n	80158c6 <rmw_validate_node_name+0x92>
 801588c:	4618      	mov	r0, r3
 801588e:	602b      	str	r3, [r5, #0]
 8015890:	e00c      	b.n	80158ac <rmw_validate_node_name+0x78>
 8015892:	2301      	movs	r3, #1
 8015894:	602b      	str	r3, [r5, #0]
 8015896:	b17e      	cbz	r6, 80158b8 <rmw_validate_node_name+0x84>
 8015898:	2300      	movs	r3, #0
 801589a:	4618      	mov	r0, r3
 801589c:	6033      	str	r3, [r6, #0]
 801589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158a2:	2302      	movs	r3, #2
 80158a4:	602b      	str	r3, [r5, #0]
 80158a6:	b13e      	cbz	r6, 80158b8 <rmw_validate_node_name+0x84>
 80158a8:	2000      	movs	r0, #0
 80158aa:	6037      	str	r7, [r6, #0]
 80158ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158b0:	2303      	movs	r3, #3
 80158b2:	602b      	str	r3, [r5, #0]
 80158b4:	2e00      	cmp	r6, #0
 80158b6:	d1ef      	bne.n	8015898 <rmw_validate_node_name+0x64>
 80158b8:	2000      	movs	r0, #0
 80158ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158be:	200b      	movs	r0, #11
 80158c0:	4770      	bx	lr
 80158c2:	200b      	movs	r0, #11
 80158c4:	e7f2      	b.n	80158ac <rmw_validate_node_name+0x78>
 80158c6:	2204      	movs	r2, #4
 80158c8:	602a      	str	r2, [r5, #0]
 80158ca:	2e00      	cmp	r6, #0
 80158cc:	d0f4      	beq.n	80158b8 <rmw_validate_node_name+0x84>
 80158ce:	22fe      	movs	r2, #254	; 0xfe
 80158d0:	4618      	mov	r0, r3
 80158d2:	6032      	str	r2, [r6, #0]
 80158d4:	e7ea      	b.n	80158ac <rmw_validate_node_name+0x78>
 80158d6:	bf00      	nop
 80158d8:	08025d6c 	.word	0x08025d6c

080158dc <rmw_node_name_validation_result_string>:
 80158dc:	2804      	cmp	r0, #4
 80158de:	d803      	bhi.n	80158e8 <rmw_node_name_validation_result_string+0xc>
 80158e0:	4b02      	ldr	r3, [pc, #8]	; (80158ec <rmw_node_name_validation_result_string+0x10>)
 80158e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80158e6:	4770      	bx	lr
 80158e8:	4801      	ldr	r0, [pc, #4]	; (80158f0 <rmw_node_name_validation_result_string+0x14>)
 80158ea:	4770      	bx	lr
 80158ec:	08025640 	.word	0x08025640
 80158f0:	08025554 	.word	0x08025554

080158f4 <rmw_uros_set_custom_transport>:
 80158f4:	b470      	push	{r4, r5, r6}
 80158f6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80158fa:	b162      	cbz	r2, 8015916 <rmw_uros_set_custom_transport+0x22>
 80158fc:	b15b      	cbz	r3, 8015916 <rmw_uros_set_custom_transport+0x22>
 80158fe:	b155      	cbz	r5, 8015916 <rmw_uros_set_custom_transport+0x22>
 8015900:	b14e      	cbz	r6, 8015916 <rmw_uros_set_custom_transport+0x22>
 8015902:	4c06      	ldr	r4, [pc, #24]	; (801591c <rmw_uros_set_custom_transport+0x28>)
 8015904:	7020      	strb	r0, [r4, #0]
 8015906:	2000      	movs	r0, #0
 8015908:	6166      	str	r6, [r4, #20]
 801590a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801590e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015912:	bc70      	pop	{r4, r5, r6}
 8015914:	4770      	bx	lr
 8015916:	200b      	movs	r0, #11
 8015918:	bc70      	pop	{r4, r5, r6}
 801591a:	4770      	bx	lr
 801591c:	20012574 	.word	0x20012574

08015920 <rmw_init_options_init>:
 8015920:	b084      	sub	sp, #16
 8015922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015924:	b083      	sub	sp, #12
 8015926:	ad09      	add	r5, sp, #36	; 0x24
 8015928:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801592c:	b130      	cbz	r0, 801593c <rmw_init_options_init+0x1c>
 801592e:	4604      	mov	r4, r0
 8015930:	4628      	mov	r0, r5
 8015932:	f7ff fcaf 	bl	8015294 <rcutils_allocator_is_valid>
 8015936:	b108      	cbz	r0, 801593c <rmw_init_options_init+0x1c>
 8015938:	68a6      	ldr	r6, [r4, #8]
 801593a:	b12e      	cbz	r6, 8015948 <rmw_init_options_init+0x28>
 801593c:	200b      	movs	r0, #11
 801593e:	b003      	add	sp, #12
 8015940:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015944:	b004      	add	sp, #16
 8015946:	4770      	bx	lr
 8015948:	2200      	movs	r2, #0
 801594a:	2300      	movs	r3, #0
 801594c:	f104 0c20 	add.w	ip, r4, #32
 8015950:	f8df e098 	ldr.w	lr, [pc, #152]	; 80159ec <rmw_init_options_init+0xcc>
 8015954:	466f      	mov	r7, sp
 8015956:	e9c4 2300 	strd	r2, r3, [r4]
 801595a:	4b20      	ldr	r3, [pc, #128]	; (80159dc <rmw_init_options_init+0xbc>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	60a3      	str	r3, [r4, #8]
 8015960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015962:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015966:	682b      	ldr	r3, [r5, #0]
 8015968:	4638      	mov	r0, r7
 801596a:	f8cc 3000 	str.w	r3, [ip]
 801596e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8015972:	60e6      	str	r6, [r4, #12]
 8015974:	f7ff fec0 	bl	80156f8 <rmw_get_default_security_options>
 8015978:	f104 0310 	add.w	r3, r4, #16
 801597c:	2203      	movs	r2, #3
 801597e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015982:	e883 0003 	stmia.w	r3, {r0, r1}
 8015986:	4816      	ldr	r0, [pc, #88]	; (80159e0 <rmw_init_options_init+0xc0>)
 8015988:	4916      	ldr	r1, [pc, #88]	; (80159e4 <rmw_init_options_init+0xc4>)
 801598a:	7626      	strb	r6, [r4, #24]
 801598c:	f001 fa62 	bl	8016e54 <rmw_uxrce_init_init_options_impl_memory>
 8015990:	4813      	ldr	r0, [pc, #76]	; (80159e0 <rmw_init_options_init+0xc0>)
 8015992:	f008 fc25 	bl	801e1e0 <get_memory>
 8015996:	b1f0      	cbz	r0, 80159d6 <rmw_init_options_init+0xb6>
 8015998:	4a13      	ldr	r2, [pc, #76]	; (80159e8 <rmw_init_options_init+0xc8>)
 801599a:	6883      	ldr	r3, [r0, #8]
 801599c:	6851      	ldr	r1, [r2, #4]
 801599e:	6363      	str	r3, [r4, #52]	; 0x34
 80159a0:	7810      	ldrb	r0, [r2, #0]
 80159a2:	6159      	str	r1, [r3, #20]
 80159a4:	68d1      	ldr	r1, [r2, #12]
 80159a6:	7418      	strb	r0, [r3, #16]
 80159a8:	61d9      	str	r1, [r3, #28]
 80159aa:	6911      	ldr	r1, [r2, #16]
 80159ac:	6219      	str	r1, [r3, #32]
 80159ae:	6951      	ldr	r1, [r2, #20]
 80159b0:	6892      	ldr	r2, [r2, #8]
 80159b2:	6259      	str	r1, [r3, #36]	; 0x24
 80159b4:	619a      	str	r2, [r3, #24]
 80159b6:	f004 fb65 	bl	801a084 <uxr_nanos>
 80159ba:	f009 ffd7 	bl	801f96c <srand>
 80159be:	f00a f803 	bl	801f9c8 <rand>
 80159c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159c4:	6298      	str	r0, [r3, #40]	; 0x28
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d0f9      	beq.n	80159be <rmw_init_options_init+0x9e>
 80159ca:	2000      	movs	r0, #0
 80159cc:	b003      	add	sp, #12
 80159ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80159d2:	b004      	add	sp, #16
 80159d4:	4770      	bx	lr
 80159d6:	2001      	movs	r0, #1
 80159d8:	e7b1      	b.n	801593e <rmw_init_options_init+0x1e>
 80159da:	bf00      	nop
 80159dc:	08025cc4 	.word	0x08025cc4
 80159e0:	20016fcc 	.word	0x20016fcc
 80159e4:	20012868 	.word	0x20012868
 80159e8:	20012574 	.word	0x20012574
 80159ec:	08025050 	.word	0x08025050

080159f0 <rmw_init_options_copy>:
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d047      	beq.n	8015a84 <rmw_init_options_copy+0x94>
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	460d      	mov	r5, r1
 80159f8:	b149      	cbz	r1, 8015a0e <rmw_init_options_copy+0x1e>
 80159fa:	4604      	mov	r4, r0
 80159fc:	6880      	ldr	r0, [r0, #8]
 80159fe:	b120      	cbz	r0, 8015a0a <rmw_init_options_copy+0x1a>
 8015a00:	4b22      	ldr	r3, [pc, #136]	; (8015a8c <rmw_init_options_copy+0x9c>)
 8015a02:	6819      	ldr	r1, [r3, #0]
 8015a04:	f7ea fc1c 	bl	8000240 <strcmp>
 8015a08:	bba8      	cbnz	r0, 8015a76 <rmw_init_options_copy+0x86>
 8015a0a:	68ab      	ldr	r3, [r5, #8]
 8015a0c:	b11b      	cbz	r3, 8015a16 <rmw_init_options_copy+0x26>
 8015a0e:	f04f 0c0b 	mov.w	ip, #11
 8015a12:	4660      	mov	r0, ip
 8015a14:	bd70      	pop	{r4, r5, r6, pc}
 8015a16:	4623      	mov	r3, r4
 8015a18:	462a      	mov	r2, r5
 8015a1a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015a1e:	f8d3 e000 	ldr.w	lr, [r3]
 8015a22:	3310      	adds	r3, #16
 8015a24:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8015a28:	3210      	adds	r2, #16
 8015a2a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8015a2e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015a32:	42b3      	cmp	r3, r6
 8015a34:	f842 ec10 	str.w	lr, [r2, #-16]
 8015a38:	f842 cc0c 	str.w	ip, [r2, #-12]
 8015a3c:	f842 0c08 	str.w	r0, [r2, #-8]
 8015a40:	f842 1c04 	str.w	r1, [r2, #-4]
 8015a44:	d1eb      	bne.n	8015a1e <rmw_init_options_copy+0x2e>
 8015a46:	6819      	ldr	r1, [r3, #0]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	4811      	ldr	r0, [pc, #68]	; (8015a90 <rmw_init_options_copy+0xa0>)
 8015a4c:	6011      	str	r1, [r2, #0]
 8015a4e:	6053      	str	r3, [r2, #4]
 8015a50:	f008 fbc6 	bl	801e1e0 <get_memory>
 8015a54:	b198      	cbz	r0, 8015a7e <rmw_init_options_copy+0x8e>
 8015a56:	6883      	ldr	r3, [r0, #8]
 8015a58:	f04f 0c00 	mov.w	ip, #0
 8015a5c:	636b      	str	r3, [r5, #52]	; 0x34
 8015a5e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015a60:	f103 0410 	add.w	r4, r3, #16
 8015a64:	3510      	adds	r5, #16
 8015a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015a72:	4660      	mov	r0, ip
 8015a74:	bd70      	pop	{r4, r5, r6, pc}
 8015a76:	f04f 0c0c 	mov.w	ip, #12
 8015a7a:	4660      	mov	r0, ip
 8015a7c:	bd70      	pop	{r4, r5, r6, pc}
 8015a7e:	f04f 0c01 	mov.w	ip, #1
 8015a82:	e7c6      	b.n	8015a12 <rmw_init_options_copy+0x22>
 8015a84:	f04f 0c0b 	mov.w	ip, #11
 8015a88:	4660      	mov	r0, ip
 8015a8a:	4770      	bx	lr
 8015a8c:	08025cc4 	.word	0x08025cc4
 8015a90:	20016fcc 	.word	0x20016fcc

08015a94 <rmw_init_options_fini>:
 8015a94:	b510      	push	{r4, lr}
 8015a96:	b08e      	sub	sp, #56	; 0x38
 8015a98:	b388      	cbz	r0, 8015afe <rmw_init_options_fini+0x6a>
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	3020      	adds	r0, #32
 8015a9e:	f7ff fbf9 	bl	8015294 <rcutils_allocator_is_valid>
 8015aa2:	b360      	cbz	r0, 8015afe <rmw_init_options_fini+0x6a>
 8015aa4:	68a0      	ldr	r0, [r4, #8]
 8015aa6:	b120      	cbz	r0, 8015ab2 <rmw_init_options_fini+0x1e>
 8015aa8:	4b1a      	ldr	r3, [pc, #104]	; (8015b14 <rmw_init_options_fini+0x80>)
 8015aaa:	6819      	ldr	r1, [r3, #0]
 8015aac:	f7ea fbc8 	bl	8000240 <strcmp>
 8015ab0:	bb68      	cbnz	r0, 8015b0e <rmw_init_options_fini+0x7a>
 8015ab2:	4b19      	ldr	r3, [pc, #100]	; (8015b18 <rmw_init_options_fini+0x84>)
 8015ab4:	6819      	ldr	r1, [r3, #0]
 8015ab6:	b331      	cbz	r1, 8015b06 <rmw_init_options_fini+0x72>
 8015ab8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015aba:	e001      	b.n	8015ac0 <rmw_init_options_fini+0x2c>
 8015abc:	6849      	ldr	r1, [r1, #4]
 8015abe:	b311      	cbz	r1, 8015b06 <rmw_init_options_fini+0x72>
 8015ac0:	688b      	ldr	r3, [r1, #8]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d1fa      	bne.n	8015abc <rmw_init_options_fini+0x28>
 8015ac6:	4814      	ldr	r0, [pc, #80]	; (8015b18 <rmw_init_options_fini+0x84>)
 8015ac8:	f008 fb9a 	bl	801e200 <put_memory>
 8015acc:	4668      	mov	r0, sp
 8015ace:	f7ff fdff 	bl	80156d0 <rmw_get_zero_initialized_init_options>
 8015ad2:	46ee      	mov	lr, sp
 8015ad4:	46a4      	mov	ip, r4
 8015ad6:	2400      	movs	r4, #0
 8015ad8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015adc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ae0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015aec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015af0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015af4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015af8:	4620      	mov	r0, r4
 8015afa:	b00e      	add	sp, #56	; 0x38
 8015afc:	bd10      	pop	{r4, pc}
 8015afe:	240b      	movs	r4, #11
 8015b00:	4620      	mov	r0, r4
 8015b02:	b00e      	add	sp, #56	; 0x38
 8015b04:	bd10      	pop	{r4, pc}
 8015b06:	2401      	movs	r4, #1
 8015b08:	4620      	mov	r0, r4
 8015b0a:	b00e      	add	sp, #56	; 0x38
 8015b0c:	bd10      	pop	{r4, pc}
 8015b0e:	240c      	movs	r4, #12
 8015b10:	e7f2      	b.n	8015af8 <rmw_init_options_fini+0x64>
 8015b12:	bf00      	nop
 8015b14:	08025cc4 	.word	0x08025cc4
 8015b18:	20016fcc 	.word	0x20016fcc

08015b1c <rmw_init>:
 8015b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b20:	b083      	sub	sp, #12
 8015b22:	2800      	cmp	r0, #0
 8015b24:	f000 80d3 	beq.w	8015cce <rmw_init+0x1b2>
 8015b28:	460e      	mov	r6, r1
 8015b2a:	2900      	cmp	r1, #0
 8015b2c:	f000 80cf 	beq.w	8015cce <rmw_init+0x1b2>
 8015b30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015b32:	4605      	mov	r5, r0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	f000 80ca 	beq.w	8015cce <rmw_init+0x1b2>
 8015b3a:	4b78      	ldr	r3, [pc, #480]	; (8015d1c <rmw_init+0x200>)
 8015b3c:	6880      	ldr	r0, [r0, #8]
 8015b3e:	681f      	ldr	r7, [r3, #0]
 8015b40:	b128      	cbz	r0, 8015b4e <rmw_init+0x32>
 8015b42:	4639      	mov	r1, r7
 8015b44:	f7ea fb7c 	bl	8000240 <strcmp>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	f040 80ca 	bne.w	8015ce2 <rmw_init+0x1c6>
 8015b4e:	4c74      	ldr	r4, [pc, #464]	; (8015d20 <rmw_init+0x204>)
 8015b50:	f04f 0800 	mov.w	r8, #0
 8015b54:	4973      	ldr	r1, [pc, #460]	; (8015d24 <rmw_init+0x208>)
 8015b56:	4874      	ldr	r0, [pc, #464]	; (8015d28 <rmw_init+0x20c>)
 8015b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b5c:	60b7      	str	r7, [r6, #8]
 8015b5e:	e9c6 2300 	strd	r2, r3, [r6]
 8015b62:	68eb      	ldr	r3, [r5, #12]
 8015b64:	2201      	movs	r2, #1
 8015b66:	64b3      	str	r3, [r6, #72]	; 0x48
 8015b68:	f001 f914 	bl	8016d94 <rmw_uxrce_init_session_memory>
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	2204      	movs	r2, #4
 8015b70:	496e      	ldr	r1, [pc, #440]	; (8015d2c <rmw_init+0x210>)
 8015b72:	f001 f94f 	bl	8016e14 <rmw_uxrce_init_static_input_buffer_memory>
 8015b76:	486c      	ldr	r0, [pc, #432]	; (8015d28 <rmw_init+0x20c>)
 8015b78:	f884 800d 	strb.w	r8, [r4, #13]
 8015b7c:	f008 fb30 	bl	801e1e0 <get_memory>
 8015b80:	2800      	cmp	r0, #0
 8015b82:	f000 80a9 	beq.w	8015cd8 <rmw_init+0x1bc>
 8015b86:	6884      	ldr	r4, [r0, #8]
 8015b88:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015b8a:	f104 0910 	add.w	r9, r4, #16
 8015b8e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015b90:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015b94:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015b98:	9101      	str	r1, [sp, #4]
 8015b9a:	4661      	mov	r1, ip
 8015b9c:	6a00      	ldr	r0, [r0, #32]
 8015b9e:	9000      	str	r0, [sp, #0]
 8015ba0:	4648      	mov	r0, r9
 8015ba2:	f002 fa19 	bl	8017fd8 <uxr_set_custom_transport_callbacks>
 8015ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015baa:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8015bae:	4960      	ldr	r1, [pc, #384]	; (8015d30 <rmw_init+0x214>)
 8015bb0:	4860      	ldr	r0, [pc, #384]	; (8015d34 <rmw_init+0x218>)
 8015bb2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015bb6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8015bba:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8015bbe:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015bc8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015bcc:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015bd0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8015bd4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8015bd6:	f001 f8bd 	bl	8016d54 <rmw_uxrce_init_node_memory>
 8015bda:	2205      	movs	r2, #5
 8015bdc:	4956      	ldr	r1, [pc, #344]	; (8015d38 <rmw_init+0x21c>)
 8015bde:	4857      	ldr	r0, [pc, #348]	; (8015d3c <rmw_init+0x220>)
 8015be0:	f001 f898 	bl	8016d14 <rmw_uxrce_init_subscription_memory>
 8015be4:	220a      	movs	r2, #10
 8015be6:	4956      	ldr	r1, [pc, #344]	; (8015d40 <rmw_init+0x224>)
 8015be8:	4856      	ldr	r0, [pc, #344]	; (8015d44 <rmw_init+0x228>)
 8015bea:	f001 f873 	bl	8016cd4 <rmw_uxrce_init_publisher_memory>
 8015bee:	2201      	movs	r2, #1
 8015bf0:	4955      	ldr	r1, [pc, #340]	; (8015d48 <rmw_init+0x22c>)
 8015bf2:	4856      	ldr	r0, [pc, #344]	; (8015d4c <rmw_init+0x230>)
 8015bf4:	f001 f82e 	bl	8016c54 <rmw_uxrce_init_service_memory>
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	4955      	ldr	r1, [pc, #340]	; (8015d50 <rmw_init+0x234>)
 8015bfc:	4855      	ldr	r0, [pc, #340]	; (8015d54 <rmw_init+0x238>)
 8015bfe:	f001 f849 	bl	8016c94 <rmw_uxrce_init_client_memory>
 8015c02:	220f      	movs	r2, #15
 8015c04:	4954      	ldr	r1, [pc, #336]	; (8015d58 <rmw_init+0x23c>)
 8015c06:	4855      	ldr	r0, [pc, #340]	; (8015d5c <rmw_init+0x240>)
 8015c08:	f001 f8e4 	bl	8016dd4 <rmw_uxrce_init_topic_memory>
 8015c0c:	2203      	movs	r2, #3
 8015c0e:	4954      	ldr	r1, [pc, #336]	; (8015d60 <rmw_init+0x244>)
 8015c10:	4854      	ldr	r0, [pc, #336]	; (8015d64 <rmw_init+0x248>)
 8015c12:	f001 f91f 	bl	8016e54 <rmw_uxrce_init_init_options_impl_memory>
 8015c16:	2204      	movs	r2, #4
 8015c18:	4953      	ldr	r1, [pc, #332]	; (8015d68 <rmw_init+0x24c>)
 8015c1a:	4854      	ldr	r0, [pc, #336]	; (8015d6c <rmw_init+0x250>)
 8015c1c:	f001 f93a 	bl	8016e94 <rmw_uxrce_init_wait_set_memory>
 8015c20:	4953      	ldr	r1, [pc, #332]	; (8015d70 <rmw_init+0x254>)
 8015c22:	4854      	ldr	r0, [pc, #336]	; (8015d74 <rmw_init+0x258>)
 8015c24:	2204      	movs	r2, #4
 8015c26:	f001 f955 	bl	8016ed4 <rmw_uxrce_init_guard_condition_memory>
 8015c2a:	4642      	mov	r2, r8
 8015c2c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8015c2e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015c30:	f000 fff8 	bl	8016c24 <rmw_uxrce_transport_init>
 8015c34:	4607      	mov	r7, r0
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d158      	bne.n	8015cec <rmw_init+0x1d0>
 8015c3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015c3c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015c40:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015c46:	4628      	mov	r0, r5
 8015c48:	f002 fbf6 	bl	8018438 <uxr_init_session>
 8015c4c:	4622      	mov	r2, r4
 8015c4e:	494a      	ldr	r1, [pc, #296]	; (8015d78 <rmw_init+0x25c>)
 8015c50:	4628      	mov	r0, r5
 8015c52:	f002 fc15 	bl	8018480 <uxr_set_topic_callback>
 8015c56:	463a      	mov	r2, r7
 8015c58:	4948      	ldr	r1, [pc, #288]	; (8015d7c <rmw_init+0x260>)
 8015c5a:	4628      	mov	r0, r5
 8015c5c:	f002 fc0c 	bl	8018478 <uxr_set_status_callback>
 8015c60:	463a      	mov	r2, r7
 8015c62:	4947      	ldr	r1, [pc, #284]	; (8015d80 <rmw_init+0x264>)
 8015c64:	4628      	mov	r0, r5
 8015c66:	f002 fc0f 	bl	8018488 <uxr_set_request_callback>
 8015c6a:	463a      	mov	r2, r7
 8015c6c:	4945      	ldr	r1, [pc, #276]	; (8015d84 <rmw_init+0x268>)
 8015c6e:	4628      	mov	r0, r5
 8015c70:	f002 fc0e 	bl	8018490 <uxr_set_reply_callback>
 8015c74:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015c78:	2304      	movs	r3, #4
 8015c7a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015c7e:	0092      	lsls	r2, r2, #2
 8015c80:	4628      	mov	r0, r5
 8015c82:	f002 fc45 	bl	8018510 <uxr_create_input_reliable_stream>
 8015c86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015c8a:	2304      	movs	r3, #4
 8015c8c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015c90:	0092      	lsls	r2, r2, #2
 8015c92:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015c96:	4628      	mov	r0, r5
 8015c98:	f002 fc10 	bl	80184bc <uxr_create_output_reliable_stream>
 8015c9c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	f002 fc2f 	bl	8018504 <uxr_create_input_best_effort_stream>
 8015ca6:	f241 3194 	movw	r1, #5012	; 0x1394
 8015caa:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015cae:	4628      	mov	r0, r5
 8015cb0:	4421      	add	r1, r4
 8015cb2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015cb6:	f002 fbef 	bl	8018498 <uxr_create_output_best_effort_stream>
 8015cba:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	f003 f978 	bl	8018fb4 <uxr_create_session>
 8015cc4:	b1f8      	cbz	r0, 8015d06 <rmw_init+0x1ea>
 8015cc6:	4638      	mov	r0, r7
 8015cc8:	b003      	add	sp, #12
 8015cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cce:	270b      	movs	r7, #11
 8015cd0:	4638      	mov	r0, r7
 8015cd2:	b003      	add	sp, #12
 8015cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cd8:	2701      	movs	r7, #1
 8015cda:	4638      	mov	r0, r7
 8015cdc:	b003      	add	sp, #12
 8015cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ce2:	270c      	movs	r7, #12
 8015ce4:	4638      	mov	r0, r7
 8015ce6:	b003      	add	sp, #12
 8015ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cec:	4648      	mov	r0, r9
 8015cee:	f002 f9b1 	bl	8018054 <uxr_close_custom_transport>
 8015cf2:	4621      	mov	r1, r4
 8015cf4:	480c      	ldr	r0, [pc, #48]	; (8015d28 <rmw_init+0x20c>)
 8015cf6:	f008 fa83 	bl	801e200 <put_memory>
 8015cfa:	4638      	mov	r0, r7
 8015cfc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015d00:	b003      	add	sp, #12
 8015d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d06:	4648      	mov	r0, r9
 8015d08:	f002 f9a4 	bl	8018054 <uxr_close_custom_transport>
 8015d0c:	4621      	mov	r1, r4
 8015d0e:	4806      	ldr	r0, [pc, #24]	; (8015d28 <rmw_init+0x20c>)
 8015d10:	f008 fa76 	bl	801e200 <put_memory>
 8015d14:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015d16:	2701      	movs	r7, #1
 8015d18:	e7d5      	b.n	8015cc6 <rmw_init+0x1aa>
 8015d1a:	bf00      	nop
 8015d1c:	08025cc4 	.word	0x08025cc4
 8015d20:	2001701c 	.word	0x2001701c
 8015d24:	200132c8 	.word	0x200132c8
 8015d28:	2001700c 	.word	0x2001700c
 8015d2c:	20014870 	.word	0x20014870
 8015d30:	200128ec 	.word	0x200128ec
 8015d34:	20016fdc 	.word	0x20016fdc
 8015d38:	20016970 	.word	0x20016970
 8015d3c:	2001702c 	.word	0x2001702c
 8015d40:	20012990 	.word	0x20012990
 8015d44:	20016fec 	.word	0x20016fec
 8015d48:	20013200 	.word	0x20013200
 8015d4c:	20016ffc 	.word	0x20016ffc
 8015d50:	20012720 	.word	0x20012720
 8015d54:	2001270c 	.word	0x2001270c
 8015d58:	20016da8 	.word	0x20016da8
 8015d5c:	2001703c 	.word	0x2001703c
 8015d60:	20012868 	.word	0x20012868
 8015d64:	20016fcc 	.word	0x20016fcc
 8015d68:	20016f4c 	.word	0x20016f4c
 8015d6c:	2001704c 	.word	0x2001704c
 8015d70:	200127e8 	.word	0x200127e8
 8015d74:	20016fbc 	.word	0x20016fbc
 8015d78:	0801e019 	.word	0x0801e019
 8015d7c:	0801e011 	.word	0x0801e011
 8015d80:	0801e0b1 	.word	0x0801e0b1
 8015d84:	0801e14d 	.word	0x0801e14d

08015d88 <rmw_context_fini>:
 8015d88:	4b17      	ldr	r3, [pc, #92]	; (8015de8 <rmw_context_fini+0x60>)
 8015d8a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015d8c:	b570      	push	{r4, r5, r6, lr}
 8015d8e:	681c      	ldr	r4, [r3, #0]
 8015d90:	4605      	mov	r5, r0
 8015d92:	b334      	cbz	r4, 8015de2 <rmw_context_fini+0x5a>
 8015d94:	2600      	movs	r6, #0
 8015d96:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015d9a:	6902      	ldr	r2, [r0, #16]
 8015d9c:	428a      	cmp	r2, r1
 8015d9e:	d018      	beq.n	8015dd2 <rmw_context_fini+0x4a>
 8015da0:	2c00      	cmp	r4, #0
 8015da2:	d1f8      	bne.n	8015d96 <rmw_context_fini+0xe>
 8015da4:	b189      	cbz	r1, 8015dca <rmw_context_fini+0x42>
 8015da6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015daa:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015dae:	789b      	ldrb	r3, [r3, #2]
 8015db0:	2b01      	cmp	r3, #1
 8015db2:	bf14      	ite	ne
 8015db4:	210a      	movne	r1, #10
 8015db6:	2100      	moveq	r1, #0
 8015db8:	f003 f8d4 	bl	8018f64 <uxr_delete_session_retries>
 8015dbc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015dbe:	f001 f8a9 	bl	8016f14 <rmw_uxrce_fini_session_memory>
 8015dc2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015dc4:	3010      	adds	r0, #16
 8015dc6:	f002 f945 	bl	8018054 <uxr_close_custom_transport>
 8015dca:	2300      	movs	r3, #0
 8015dcc:	4630      	mov	r0, r6
 8015dce:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015dd0:	bd70      	pop	{r4, r5, r6, pc}
 8015dd2:	3018      	adds	r0, #24
 8015dd4:	f000 f89c 	bl	8015f10 <rmw_destroy_node>
 8015dd8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015dda:	4606      	mov	r6, r0
 8015ddc:	2c00      	cmp	r4, #0
 8015dde:	d1da      	bne.n	8015d96 <rmw_context_fini+0xe>
 8015de0:	e7e0      	b.n	8015da4 <rmw_context_fini+0x1c>
 8015de2:	4626      	mov	r6, r4
 8015de4:	e7de      	b.n	8015da4 <rmw_context_fini+0x1c>
 8015de6:	bf00      	nop
 8015de8:	20016fdc 	.word	0x20016fdc

08015dec <create_node>:
 8015dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015df0:	b083      	sub	sp, #12
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d064      	beq.n	8015ec0 <create_node+0xd4>
 8015df6:	4606      	mov	r6, r0
 8015df8:	4838      	ldr	r0, [pc, #224]	; (8015edc <create_node+0xf0>)
 8015dfa:	460f      	mov	r7, r1
 8015dfc:	4690      	mov	r8, r2
 8015dfe:	461d      	mov	r5, r3
 8015e00:	f008 f9ee 	bl	801e1e0 <get_memory>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d05b      	beq.n	8015ec0 <create_node+0xd4>
 8015e08:	6884      	ldr	r4, [r0, #8]
 8015e0a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015e0c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015e10:	f104 0518 	add.w	r5, r4, #24
 8015e14:	6123      	str	r3, [r4, #16]
 8015e16:	f008 fa4b 	bl	801e2b0 <rmw_get_implementation_identifier>
 8015e1a:	f8c4 9020 	str.w	r9, [r4, #32]
 8015e1e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015e22:	4630      	mov	r0, r6
 8015e24:	f7ea fa6c 	bl	8000300 <strlen>
 8015e28:	1c42      	adds	r2, r0, #1
 8015e2a:	2a3c      	cmp	r2, #60	; 0x3c
 8015e2c:	d840      	bhi.n	8015eb0 <create_node+0xc4>
 8015e2e:	4648      	mov	r0, r9
 8015e30:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015e34:	4631      	mov	r1, r6
 8015e36:	f00b f98e 	bl	8021156 <memcpy>
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015e40:	f7ea fa5e 	bl	8000300 <strlen>
 8015e44:	1c42      	adds	r2, r0, #1
 8015e46:	2a3c      	cmp	r2, #60	; 0x3c
 8015e48:	d832      	bhi.n	8015eb0 <create_node+0xc4>
 8015e4a:	4639      	mov	r1, r7
 8015e4c:	4648      	mov	r0, r9
 8015e4e:	f00b f982 	bl	8021156 <memcpy>
 8015e52:	6923      	ldr	r3, [r4, #16]
 8015e54:	2101      	movs	r1, #1
 8015e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e5a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015e5e:	1842      	adds	r2, r0, r1
 8015e60:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015e64:	f002 f8fa 	bl	801805c <uxr_object_id>
 8015e68:	6160      	str	r0, [r4, #20]
 8015e6a:	783b      	ldrb	r3, [r7, #0]
 8015e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8015e6e:	d12c      	bne.n	8015eca <create_node+0xde>
 8015e70:	787b      	ldrb	r3, [r7, #1]
 8015e72:	bb53      	cbnz	r3, 8015eca <create_node+0xde>
 8015e74:	4633      	mov	r3, r6
 8015e76:	4a1a      	ldr	r2, [pc, #104]	; (8015ee0 <create_node+0xf4>)
 8015e78:	213c      	movs	r1, #60	; 0x3c
 8015e7a:	481a      	ldr	r0, [pc, #104]	; (8015ee4 <create_node+0xf8>)
 8015e7c:	f00a ff0e 	bl	8020c9c <sniprintf>
 8015e80:	6920      	ldr	r0, [r4, #16]
 8015e82:	2106      	movs	r1, #6
 8015e84:	fa1f f388 	uxth.w	r3, r8
 8015e88:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015e8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e90:	9101      	str	r1, [sp, #4]
 8015e92:	4914      	ldr	r1, [pc, #80]	; (8015ee4 <create_node+0xf8>)
 8015e94:	9100      	str	r1, [sp, #0]
 8015e96:	6811      	ldr	r1, [r2, #0]
 8015e98:	6962      	ldr	r2, [r4, #20]
 8015e9a:	f001 fe31 	bl	8017b00 <uxr_buffer_create_participant_bin>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	6920      	ldr	r0, [r4, #16]
 8015ea2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015ea6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015eaa:	f001 f9b7 	bl	801721c <run_xrce_session>
 8015eae:	b918      	cbnz	r0, 8015eb8 <create_node+0xcc>
 8015eb0:	4628      	mov	r0, r5
 8015eb2:	2500      	movs	r5, #0
 8015eb4:	f001 f834 	bl	8016f20 <rmw_uxrce_fini_node_memory>
 8015eb8:	4628      	mov	r0, r5
 8015eba:	b003      	add	sp, #12
 8015ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ec0:	2500      	movs	r5, #0
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	b003      	add	sp, #12
 8015ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eca:	463b      	mov	r3, r7
 8015ecc:	4a06      	ldr	r2, [pc, #24]	; (8015ee8 <create_node+0xfc>)
 8015ece:	213c      	movs	r1, #60	; 0x3c
 8015ed0:	9600      	str	r6, [sp, #0]
 8015ed2:	4804      	ldr	r0, [pc, #16]	; (8015ee4 <create_node+0xf8>)
 8015ed4:	f00a fee2 	bl	8020c9c <sniprintf>
 8015ed8:	e7d2      	b.n	8015e80 <create_node+0x94>
 8015eda:	bf00      	nop
 8015edc:	20016fdc 	.word	0x20016fdc
 8015ee0:	08025664 	.word	0x08025664
 8015ee4:	20012590 	.word	0x20012590
 8015ee8:	08025060 	.word	0x08025060

08015eec <rmw_create_node>:
 8015eec:	468c      	mov	ip, r1
 8015eee:	4611      	mov	r1, r2
 8015ef0:	f1bc 0f00 	cmp.w	ip, #0
 8015ef4:	d00a      	beq.n	8015f0c <rmw_create_node+0x20>
 8015ef6:	f89c 3000 	ldrb.w	r3, [ip]
 8015efa:	b13b      	cbz	r3, 8015f0c <rmw_create_node+0x20>
 8015efc:	b132      	cbz	r2, 8015f0c <rmw_create_node+0x20>
 8015efe:	7813      	ldrb	r3, [r2, #0]
 8015f00:	b123      	cbz	r3, 8015f0c <rmw_create_node+0x20>
 8015f02:	4603      	mov	r3, r0
 8015f04:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015f06:	4660      	mov	r0, ip
 8015f08:	f7ff bf70 	b.w	8015dec <create_node>
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	4770      	bx	lr

08015f10 <rmw_destroy_node>:
 8015f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f12:	b328      	cbz	r0, 8015f60 <rmw_destroy_node+0x50>
 8015f14:	4607      	mov	r7, r0
 8015f16:	6800      	ldr	r0, [r0, #0]
 8015f18:	b120      	cbz	r0, 8015f24 <rmw_destroy_node+0x14>
 8015f1a:	4b37      	ldr	r3, [pc, #220]	; (8015ff8 <rmw_destroy_node+0xe8>)
 8015f1c:	6819      	ldr	r1, [r3, #0]
 8015f1e:	f7ea f98f 	bl	8000240 <strcmp>
 8015f22:	b9e8      	cbnz	r0, 8015f60 <rmw_destroy_node+0x50>
 8015f24:	687d      	ldr	r5, [r7, #4]
 8015f26:	b1dd      	cbz	r5, 8015f60 <rmw_destroy_node+0x50>
 8015f28:	4b34      	ldr	r3, [pc, #208]	; (8015ffc <rmw_destroy_node+0xec>)
 8015f2a:	681c      	ldr	r4, [r3, #0]
 8015f2c:	2c00      	cmp	r4, #0
 8015f2e:	d060      	beq.n	8015ff2 <rmw_destroy_node+0xe2>
 8015f30:	2600      	movs	r6, #0
 8015f32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015f36:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015f3a:	429d      	cmp	r5, r3
 8015f3c:	d013      	beq.n	8015f66 <rmw_destroy_node+0x56>
 8015f3e:	2c00      	cmp	r4, #0
 8015f40:	d1f7      	bne.n	8015f32 <rmw_destroy_node+0x22>
 8015f42:	4b2f      	ldr	r3, [pc, #188]	; (8016000 <rmw_destroy_node+0xf0>)
 8015f44:	681c      	ldr	r4, [r3, #0]
 8015f46:	b1c4      	cbz	r4, 8015f7a <rmw_destroy_node+0x6a>
 8015f48:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015f4c:	6a0b      	ldr	r3, [r1, #32]
 8015f4e:	429d      	cmp	r5, r3
 8015f50:	d1f9      	bne.n	8015f46 <rmw_destroy_node+0x36>
 8015f52:	317c      	adds	r1, #124	; 0x7c
 8015f54:	4638      	mov	r0, r7
 8015f56:	f000 fdaf 	bl	8016ab8 <rmw_destroy_subscription>
 8015f5a:	2801      	cmp	r0, #1
 8015f5c:	4606      	mov	r6, r0
 8015f5e:	d1f2      	bne.n	8015f46 <rmw_destroy_node+0x36>
 8015f60:	2601      	movs	r6, #1
 8015f62:	4630      	mov	r0, r6
 8015f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f66:	3184      	adds	r1, #132	; 0x84
 8015f68:	4638      	mov	r0, r7
 8015f6a:	f000 f9b1 	bl	80162d0 <rmw_destroy_publisher>
 8015f6e:	2801      	cmp	r0, #1
 8015f70:	4606      	mov	r6, r0
 8015f72:	d0f5      	beq.n	8015f60 <rmw_destroy_node+0x50>
 8015f74:	2c00      	cmp	r4, #0
 8015f76:	d1dc      	bne.n	8015f32 <rmw_destroy_node+0x22>
 8015f78:	e7e3      	b.n	8015f42 <rmw_destroy_node+0x32>
 8015f7a:	4b22      	ldr	r3, [pc, #136]	; (8016004 <rmw_destroy_node+0xf4>)
 8015f7c:	681c      	ldr	r4, [r3, #0]
 8015f7e:	b16c      	cbz	r4, 8015f9c <rmw_destroy_node+0x8c>
 8015f80:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015f84:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015f86:	429d      	cmp	r5, r3
 8015f88:	d1f9      	bne.n	8015f7e <rmw_destroy_node+0x6e>
 8015f8a:	317c      	adds	r1, #124	; 0x7c
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	f000 fc1d 	bl	80167cc <rmw_destroy_service>
 8015f92:	2801      	cmp	r0, #1
 8015f94:	4606      	mov	r6, r0
 8015f96:	d0e3      	beq.n	8015f60 <rmw_destroy_node+0x50>
 8015f98:	2c00      	cmp	r4, #0
 8015f9a:	d1f1      	bne.n	8015f80 <rmw_destroy_node+0x70>
 8015f9c:	4b1a      	ldr	r3, [pc, #104]	; (8016008 <rmw_destroy_node+0xf8>)
 8015f9e:	681c      	ldr	r4, [r3, #0]
 8015fa0:	b16c      	cbz	r4, 8015fbe <rmw_destroy_node+0xae>
 8015fa2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015fa6:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015fa8:	429d      	cmp	r5, r3
 8015faa:	d1f9      	bne.n	8015fa0 <rmw_destroy_node+0x90>
 8015fac:	317c      	adds	r1, #124	; 0x7c
 8015fae:	4638      	mov	r0, r7
 8015fb0:	f008 f93a 	bl	801e228 <rmw_destroy_client>
 8015fb4:	2801      	cmp	r0, #1
 8015fb6:	4606      	mov	r6, r0
 8015fb8:	d0d2      	beq.n	8015f60 <rmw_destroy_node+0x50>
 8015fba:	2c00      	cmp	r4, #0
 8015fbc:	d1f1      	bne.n	8015fa2 <rmw_destroy_node+0x92>
 8015fbe:	6928      	ldr	r0, [r5, #16]
 8015fc0:	696a      	ldr	r2, [r5, #20]
 8015fc2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015fc6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fca:	6819      	ldr	r1, [r3, #0]
 8015fcc:	f001 fd4c 	bl	8017a68 <uxr_buffer_delete_entity>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	6928      	ldr	r0, [r5, #16]
 8015fd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015fd8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015fdc:	f001 f91e 	bl	801721c <run_xrce_session>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	bf08      	it	eq
 8015fe8:	2602      	moveq	r6, #2
 8015fea:	f000 ff99 	bl	8016f20 <rmw_uxrce_fini_node_memory>
 8015fee:	4630      	mov	r0, r6
 8015ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ff2:	4626      	mov	r6, r4
 8015ff4:	e7a5      	b.n	8015f42 <rmw_destroy_node+0x32>
 8015ff6:	bf00      	nop
 8015ff8:	08025cc4 	.word	0x08025cc4
 8015ffc:	20016fec 	.word	0x20016fec
 8016000:	2001702c 	.word	0x2001702c
 8016004:	20016ffc 	.word	0x20016ffc
 8016008:	2001270c 	.word	0x2001270c

0801600c <rmw_node_get_graph_guard_condition>:
 801600c:	6843      	ldr	r3, [r0, #4]
 801600e:	6918      	ldr	r0, [r3, #16]
 8016010:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8016014:	4770      	bx	lr
 8016016:	bf00      	nop

08016018 <flush_session>:
 8016018:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801601a:	f002 be59 	b.w	8018cd0 <uxr_run_session_until_confirm_delivery>
 801601e:	bf00      	nop

08016020 <rmw_publish>:
 8016020:	2800      	cmp	r0, #0
 8016022:	d053      	beq.n	80160cc <rmw_publish+0xac>
 8016024:	b570      	push	{r4, r5, r6, lr}
 8016026:	460d      	mov	r5, r1
 8016028:	b08e      	sub	sp, #56	; 0x38
 801602a:	2900      	cmp	r1, #0
 801602c:	d04b      	beq.n	80160c6 <rmw_publish+0xa6>
 801602e:	4604      	mov	r4, r0
 8016030:	6800      	ldr	r0, [r0, #0]
 8016032:	f001 fa05 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 8016036:	2800      	cmp	r0, #0
 8016038:	d045      	beq.n	80160c6 <rmw_publish+0xa6>
 801603a:	6866      	ldr	r6, [r4, #4]
 801603c:	2e00      	cmp	r6, #0
 801603e:	d042      	beq.n	80160c6 <rmw_publish+0xa6>
 8016040:	69b4      	ldr	r4, [r6, #24]
 8016042:	4628      	mov	r0, r5
 8016044:	6923      	ldr	r3, [r4, #16]
 8016046:	4798      	blx	r3
 8016048:	69f3      	ldr	r3, [r6, #28]
 801604a:	9005      	str	r0, [sp, #20]
 801604c:	b113      	cbz	r3, 8016054 <rmw_publish+0x34>
 801604e:	a805      	add	r0, sp, #20
 8016050:	4798      	blx	r3
 8016052:	9805      	ldr	r0, [sp, #20]
 8016054:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016058:	691b      	ldr	r3, [r3, #16]
 801605a:	9000      	str	r0, [sp, #0]
 801605c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016060:	6972      	ldr	r2, [r6, #20]
 8016062:	ab06      	add	r3, sp, #24
 8016064:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8016066:	f004 f8ad 	bl	801a1c4 <uxr_prepare_output_stream>
 801606a:	b1d8      	cbz	r0, 80160a4 <rmw_publish+0x84>
 801606c:	68a3      	ldr	r3, [r4, #8]
 801606e:	a906      	add	r1, sp, #24
 8016070:	4628      	mov	r0, r5
 8016072:	4798      	blx	r3
 8016074:	6a33      	ldr	r3, [r6, #32]
 8016076:	4604      	mov	r4, r0
 8016078:	b10b      	cbz	r3, 801607e <rmw_publish+0x5e>
 801607a:	a806      	add	r0, sp, #24
 801607c:	4798      	blx	r3
 801607e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8016082:	2b01      	cmp	r3, #1
 8016084:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016088:	d022      	beq.n	80160d0 <rmw_publish+0xb0>
 801608a:	6918      	ldr	r0, [r3, #16]
 801608c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 801608e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016092:	f002 fe1d 	bl	8018cd0 <uxr_run_session_until_confirm_delivery>
 8016096:	4020      	ands	r0, r4
 8016098:	b2c4      	uxtb	r4, r0
 801609a:	f084 0001 	eor.w	r0, r4, #1
 801609e:	b2c0      	uxtb	r0, r0
 80160a0:	b00e      	add	sp, #56	; 0x38
 80160a2:	bd70      	pop	{r4, r5, r6, pc}
 80160a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80160a8:	6918      	ldr	r0, [r3, #16]
 80160aa:	9b05      	ldr	r3, [sp, #20]
 80160ac:	9602      	str	r6, [sp, #8]
 80160ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160b2:	9300      	str	r3, [sp, #0]
 80160b4:	4b09      	ldr	r3, [pc, #36]	; (80160dc <rmw_publish+0xbc>)
 80160b6:	9301      	str	r3, [sp, #4]
 80160b8:	ab06      	add	r3, sp, #24
 80160ba:	6972      	ldr	r2, [r6, #20]
 80160bc:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80160be:	f004 f8b1 	bl	801a224 <uxr_prepare_output_stream_fragmented>
 80160c2:	2800      	cmp	r0, #0
 80160c4:	d1d2      	bne.n	801606c <rmw_publish+0x4c>
 80160c6:	2001      	movs	r0, #1
 80160c8:	b00e      	add	sp, #56	; 0x38
 80160ca:	bd70      	pop	{r4, r5, r6, pc}
 80160cc:	2001      	movs	r0, #1
 80160ce:	4770      	bx	lr
 80160d0:	6918      	ldr	r0, [r3, #16]
 80160d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160d6:	f002 fa41 	bl	801855c <uxr_flash_output_streams>
 80160da:	e7de      	b.n	801609a <rmw_publish+0x7a>
 80160dc:	08016019 	.word	0x08016019

080160e0 <rmw_create_publisher>:
 80160e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e4:	b087      	sub	sp, #28
 80160e6:	2800      	cmp	r0, #0
 80160e8:	f000 80d2 	beq.w	8016290 <rmw_create_publisher+0x1b0>
 80160ec:	460e      	mov	r6, r1
 80160ee:	2900      	cmp	r1, #0
 80160f0:	f000 80ce 	beq.w	8016290 <rmw_create_publisher+0x1b0>
 80160f4:	4604      	mov	r4, r0
 80160f6:	6800      	ldr	r0, [r0, #0]
 80160f8:	4615      	mov	r5, r2
 80160fa:	461f      	mov	r7, r3
 80160fc:	f001 f9a0 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 8016100:	f080 0001 	eor.w	r0, r0, #1
 8016104:	b2c0      	uxtb	r0, r0
 8016106:	2800      	cmp	r0, #0
 8016108:	f040 80c2 	bne.w	8016290 <rmw_create_publisher+0x1b0>
 801610c:	2d00      	cmp	r5, #0
 801610e:	f000 80bf 	beq.w	8016290 <rmw_create_publisher+0x1b0>
 8016112:	782b      	ldrb	r3, [r5, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	f000 80bb 	beq.w	8016290 <rmw_create_publisher+0x1b0>
 801611a:	2f00      	cmp	r7, #0
 801611c:	f000 80b8 	beq.w	8016290 <rmw_create_publisher+0x1b0>
 8016120:	485e      	ldr	r0, [pc, #376]	; (801629c <rmw_create_publisher+0x1bc>)
 8016122:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016126:	f008 f85b 	bl	801e1e0 <get_memory>
 801612a:	2800      	cmp	r0, #0
 801612c:	f000 80b0 	beq.w	8016290 <rmw_create_publisher+0x1b0>
 8016130:	6884      	ldr	r4, [r0, #8]
 8016132:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8016136:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 801613a:	f008 f8b9 	bl	801e2b0 <rmw_get_implementation_identifier>
 801613e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8016142:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8016146:	4628      	mov	r0, r5
 8016148:	f7ea f8da 	bl	8000300 <strlen>
 801614c:	3001      	adds	r0, #1
 801614e:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8016152:	283c      	cmp	r0, #60	; 0x3c
 8016154:	f200 808f 	bhi.w	8016276 <rmw_create_publisher+0x196>
 8016158:	462b      	mov	r3, r5
 801615a:	4a51      	ldr	r2, [pc, #324]	; (80162a0 <rmw_create_publisher+0x1c0>)
 801615c:	213c      	movs	r1, #60	; 0x3c
 801615e:	4650      	mov	r0, sl
 8016160:	f00a fd9c 	bl	8020c9c <sniprintf>
 8016164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016168:	4639      	mov	r1, r7
 801616a:	2250      	movs	r2, #80	; 0x50
 801616c:	67e3      	str	r3, [r4, #124]	; 0x7c
 801616e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016172:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8016176:	f00a ffee 	bl	8021156 <memcpy>
 801617a:	7a3b      	ldrb	r3, [r7, #8]
 801617c:	4630      	mov	r0, r6
 801617e:	4949      	ldr	r1, [pc, #292]	; (80162a4 <rmw_create_publisher+0x1c4>)
 8016180:	2b02      	cmp	r3, #2
 8016182:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016186:	bf0c      	ite	eq
 8016188:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 801618c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8016190:	67a3      	str	r3, [r4, #120]	; 0x78
 8016192:	2300      	movs	r3, #0
 8016194:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016198:	f001 f960 	bl	801745c <get_message_typesupport_handle>
 801619c:	2800      	cmp	r0, #0
 801619e:	d06a      	beq.n	8016276 <rmw_create_publisher+0x196>
 80161a0:	6842      	ldr	r2, [r0, #4]
 80161a2:	61a2      	str	r2, [r4, #24]
 80161a4:	2a00      	cmp	r2, #0
 80161a6:	d066      	beq.n	8016276 <rmw_create_publisher+0x196>
 80161a8:	4629      	mov	r1, r5
 80161aa:	463b      	mov	r3, r7
 80161ac:	4648      	mov	r0, r9
 80161ae:	f008 f8af 	bl	801e310 <create_topic>
 80161b2:	6260      	str	r0, [r4, #36]	; 0x24
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d062      	beq.n	801627e <rmw_create_publisher+0x19e>
 80161b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80161bc:	2103      	movs	r1, #3
 80161be:	2506      	movs	r5, #6
 80161c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 80161c8:	1c42      	adds	r2, r0, #1
 80161ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 80161ce:	f001 ff45 	bl	801805c <uxr_object_id>
 80161d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80161d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80161da:	6120      	str	r0, [r4, #16]
 80161dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80161e0:	6910      	ldr	r0, [r2, #16]
 80161e2:	9500      	str	r5, [sp, #0]
 80161e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80161e8:	6819      	ldr	r1, [r3, #0]
 80161ea:	6922      	ldr	r2, [r4, #16]
 80161ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80161f0:	f001 fcee 	bl	8017bd0 <uxr_buffer_create_publisher_bin>
 80161f4:	4602      	mov	r2, r0
 80161f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80161fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80161fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016202:	f001 f80b 	bl	801721c <run_xrce_session>
 8016206:	b3b0      	cbz	r0, 8016276 <rmw_create_publisher+0x196>
 8016208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801620c:	2105      	movs	r1, #5
 801620e:	f10d 0a10 	add.w	sl, sp, #16
 8016212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016216:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 801621a:	1c42      	adds	r2, r0, #1
 801621c:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8016220:	f001 ff1c 	bl	801805c <uxr_object_id>
 8016224:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016228:	4639      	mov	r1, r7
 801622a:	6160      	str	r0, [r4, #20]
 801622c:	691e      	ldr	r6, [r3, #16]
 801622e:	4650      	mov	r0, sl
 8016230:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016234:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8016238:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 801623c:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8016240:	f001 f808 	bl	8017254 <convert_qos_profile>
 8016244:	9503      	str	r5, [sp, #12]
 8016246:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801624a:	9001      	str	r0, [sp, #4]
 801624c:	4630      	mov	r0, r6
 801624e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016252:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801625e:	f001 fd17 	bl	8017c90 <uxr_buffer_create_datawriter_bin>
 8016262:	4602      	mov	r2, r0
 8016264:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016268:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801626c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016270:	f000 ffd4 	bl	801721c <run_xrce_session>
 8016274:	b970      	cbnz	r0, 8016294 <rmw_create_publisher+0x1b4>
 8016276:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016278:	b108      	cbz	r0, 801627e <rmw_create_publisher+0x19e>
 801627a:	f000 fec1 	bl	8017000 <rmw_uxrce_fini_topic_memory>
 801627e:	4640      	mov	r0, r8
 8016280:	f04f 0800 	mov.w	r8, #0
 8016284:	f000 fe64 	bl	8016f50 <rmw_uxrce_fini_publisher_memory>
 8016288:	4640      	mov	r0, r8
 801628a:	b007      	add	sp, #28
 801628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016290:	f04f 0800 	mov.w	r8, #0
 8016294:	4640      	mov	r0, r8
 8016296:	b007      	add	sp, #28
 8016298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629c:	20016fec 	.word	0x20016fec
 80162a0:	08025664 	.word	0x08025664
 80162a4:	0802490c 	.word	0x0802490c

080162a8 <rmw_publisher_get_actual_qos>:
 80162a8:	b178      	cbz	r0, 80162ca <rmw_publisher_get_actual_qos+0x22>
 80162aa:	b510      	push	{r4, lr}
 80162ac:	fab1 f481 	clz	r4, r1
 80162b0:	0964      	lsrs	r4, r4, #5
 80162b2:	b141      	cbz	r1, 80162c6 <rmw_publisher_get_actual_qos+0x1e>
 80162b4:	6843      	ldr	r3, [r0, #4]
 80162b6:	2250      	movs	r2, #80	; 0x50
 80162b8:	4608      	mov	r0, r1
 80162ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80162be:	f00a ff4a 	bl	8021156 <memcpy>
 80162c2:	4620      	mov	r0, r4
 80162c4:	bd10      	pop	{r4, pc}
 80162c6:	200b      	movs	r0, #11
 80162c8:	bd10      	pop	{r4, pc}
 80162ca:	200b      	movs	r0, #11
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop

080162d0 <rmw_destroy_publisher>:
 80162d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d4:	b128      	cbz	r0, 80162e2 <rmw_destroy_publisher+0x12>
 80162d6:	4604      	mov	r4, r0
 80162d8:	6800      	ldr	r0, [r0, #0]
 80162da:	460d      	mov	r5, r1
 80162dc:	f001 f8b0 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 80162e0:	b918      	cbnz	r0, 80162ea <rmw_destroy_publisher+0x1a>
 80162e2:	2401      	movs	r4, #1
 80162e4:	4620      	mov	r0, r4
 80162e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ea:	6863      	ldr	r3, [r4, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d0f8      	beq.n	80162e2 <rmw_destroy_publisher+0x12>
 80162f0:	fab5 f485 	clz	r4, r5
 80162f4:	0964      	lsrs	r4, r4, #5
 80162f6:	2d00      	cmp	r5, #0
 80162f8:	d0f3      	beq.n	80162e2 <rmw_destroy_publisher+0x12>
 80162fa:	6828      	ldr	r0, [r5, #0]
 80162fc:	f001 f8a0 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 8016300:	2800      	cmp	r0, #0
 8016302:	d0ee      	beq.n	80162e2 <rmw_destroy_publisher+0x12>
 8016304:	686e      	ldr	r6, [r5, #4]
 8016306:	2e00      	cmp	r6, #0
 8016308:	d0eb      	beq.n	80162e2 <rmw_destroy_publisher+0x12>
 801630a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801630c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016310:	f008 f84e 	bl	801e3b0 <destroy_topic>
 8016314:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016318:	6972      	ldr	r2, [r6, #20]
 801631a:	6918      	ldr	r0, [r3, #16]
 801631c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016320:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016324:	6819      	ldr	r1, [r3, #0]
 8016326:	f001 fb9f 	bl	8017a68 <uxr_buffer_delete_entity>
 801632a:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801632e:	4680      	mov	r8, r0
 8016330:	6932      	ldr	r2, [r6, #16]
 8016332:	6918      	ldr	r0, [r3, #16]
 8016334:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016338:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801633c:	6819      	ldr	r1, [r3, #0]
 801633e:	f001 fb93 	bl	8017a68 <uxr_buffer_delete_entity>
 8016342:	4606      	mov	r6, r0
 8016344:	6938      	ldr	r0, [r7, #16]
 8016346:	4642      	mov	r2, r8
 8016348:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801634c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016350:	f000 ff64 	bl	801721c <run_xrce_session>
 8016354:	693f      	ldr	r7, [r7, #16]
 8016356:	4632      	mov	r2, r6
 8016358:	4606      	mov	r6, r0
 801635a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801635e:	4638      	mov	r0, r7
 8016360:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016364:	f000 ff5a 	bl	801721c <run_xrce_session>
 8016368:	b126      	cbz	r6, 8016374 <rmw_destroy_publisher+0xa4>
 801636a:	b118      	cbz	r0, 8016374 <rmw_destroy_publisher+0xa4>
 801636c:	4628      	mov	r0, r5
 801636e:	f000 fdef 	bl	8016f50 <rmw_uxrce_fini_publisher_memory>
 8016372:	e7b7      	b.n	80162e4 <rmw_destroy_publisher+0x14>
 8016374:	2402      	movs	r4, #2
 8016376:	e7f9      	b.n	801636c <rmw_destroy_publisher+0x9c>

08016378 <rmw_send_request>:
 8016378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801637c:	4604      	mov	r4, r0
 801637e:	6800      	ldr	r0, [r0, #0]
 8016380:	b08b      	sub	sp, #44	; 0x2c
 8016382:	460e      	mov	r6, r1
 8016384:	4615      	mov	r5, r2
 8016386:	b128      	cbz	r0, 8016394 <rmw_send_request+0x1c>
 8016388:	4b21      	ldr	r3, [pc, #132]	; (8016410 <rmw_send_request+0x98>)
 801638a:	6819      	ldr	r1, [r3, #0]
 801638c:	f7e9 ff58 	bl	8000240 <strcmp>
 8016390:	2800      	cmp	r0, #0
 8016392:	d139      	bne.n	8016408 <rmw_send_request+0x90>
 8016394:	6864      	ldr	r4, [r4, #4]
 8016396:	2700      	movs	r7, #0
 8016398:	6963      	ldr	r3, [r4, #20]
 801639a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801639e:	689b      	ldr	r3, [r3, #8]
 80163a0:	4798      	blx	r3
 80163a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80163a6:	4630      	mov	r0, r6
 80163a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163ac:	4798      	blx	r3
 80163ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163b2:	9000      	str	r0, [sp, #0]
 80163b4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80163b8:	6922      	ldr	r2, [r4, #16]
 80163ba:	ab02      	add	r3, sp, #8
 80163bc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80163be:	f003 ff01 	bl	801a1c4 <uxr_prepare_output_stream>
 80163c2:	e9c5 0700 	strd	r0, r7, [r5]
 80163c6:	b198      	cbz	r0, 80163f0 <rmw_send_request+0x78>
 80163c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80163cc:	a902      	add	r1, sp, #8
 80163ce:	4630      	mov	r0, r6
 80163d0:	4798      	blx	r3
 80163d2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80163d6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d00c      	beq.n	80163f8 <rmw_send_request+0x80>
 80163de:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80163e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80163e4:	f002 fc74 	bl	8018cd0 <uxr_run_session_until_confirm_delivery>
 80163e8:	4638      	mov	r0, r7
 80163ea:	b00b      	add	sp, #44	; 0x2c
 80163ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163f0:	2001      	movs	r0, #1
 80163f2:	b00b      	add	sp, #44	; 0x2c
 80163f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80163fc:	f002 f8ae 	bl	801855c <uxr_flash_output_streams>
 8016400:	4638      	mov	r0, r7
 8016402:	b00b      	add	sp, #44	; 0x2c
 8016404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016408:	200c      	movs	r0, #12
 801640a:	b00b      	add	sp, #44	; 0x2c
 801640c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016410:	08025cc4 	.word	0x08025cc4

08016414 <rmw_take_request>:
 8016414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016418:	4605      	mov	r5, r0
 801641a:	6800      	ldr	r0, [r0, #0]
 801641c:	b089      	sub	sp, #36	; 0x24
 801641e:	460c      	mov	r4, r1
 8016420:	4690      	mov	r8, r2
 8016422:	461e      	mov	r6, r3
 8016424:	b128      	cbz	r0, 8016432 <rmw_take_request+0x1e>
 8016426:	4b28      	ldr	r3, [pc, #160]	; (80164c8 <rmw_take_request+0xb4>)
 8016428:	6819      	ldr	r1, [r3, #0]
 801642a:	f7e9 ff09 	bl	8000240 <strcmp>
 801642e:	2800      	cmp	r0, #0
 8016430:	d146      	bne.n	80164c0 <rmw_take_request+0xac>
 8016432:	b10e      	cbz	r6, 8016438 <rmw_take_request+0x24>
 8016434:	2300      	movs	r3, #0
 8016436:	7033      	strb	r3, [r6, #0]
 8016438:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801643c:	f000 fe70 	bl	8017120 <rmw_uxrce_clean_expired_static_input_buffer>
 8016440:	4648      	mov	r0, r9
 8016442:	f000 fe43 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016446:	4607      	mov	r7, r0
 8016448:	b3b0      	cbz	r0, 80164b8 <rmw_take_request+0xa4>
 801644a:	6885      	ldr	r5, [r0, #8]
 801644c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8016450:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8016454:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8016458:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801645c:	7423      	strb	r3, [r4, #16]
 801645e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8016462:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8016466:	f8a4 2011 	strh.w	r2, [r4, #17]
 801646a:	74e3      	strb	r3, [r4, #19]
 801646c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8016470:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8016474:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8016478:	6161      	str	r1, [r4, #20]
 801647a:	61a2      	str	r2, [r4, #24]
 801647c:	61e3      	str	r3, [r4, #28]
 801647e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	4798      	blx	r3
 8016486:	6844      	ldr	r4, [r0, #4]
 8016488:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801648c:	f105 0110 	add.w	r1, r5, #16
 8016490:	4668      	mov	r0, sp
 8016492:	f7fd f829 	bl	80134e8 <ucdr_init_buffer>
 8016496:	4641      	mov	r1, r8
 8016498:	68e3      	ldr	r3, [r4, #12]
 801649a:	4668      	mov	r0, sp
 801649c:	4798      	blx	r3
 801649e:	4639      	mov	r1, r7
 80164a0:	4604      	mov	r4, r0
 80164a2:	480a      	ldr	r0, [pc, #40]	; (80164cc <rmw_take_request+0xb8>)
 80164a4:	f007 feac 	bl	801e200 <put_memory>
 80164a8:	b106      	cbz	r6, 80164ac <rmw_take_request+0x98>
 80164aa:	7034      	strb	r4, [r6, #0]
 80164ac:	f084 0001 	eor.w	r0, r4, #1
 80164b0:	b2c0      	uxtb	r0, r0
 80164b2:	b009      	add	sp, #36	; 0x24
 80164b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164b8:	2001      	movs	r0, #1
 80164ba:	b009      	add	sp, #36	; 0x24
 80164bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164c0:	200c      	movs	r0, #12
 80164c2:	b009      	add	sp, #36	; 0x24
 80164c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164c8:	08025cc4 	.word	0x08025cc4
 80164cc:	2001701c 	.word	0x2001701c

080164d0 <rmw_send_response>:
 80164d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164d2:	4605      	mov	r5, r0
 80164d4:	6800      	ldr	r0, [r0, #0]
 80164d6:	b091      	sub	sp, #68	; 0x44
 80164d8:	460c      	mov	r4, r1
 80164da:	4616      	mov	r6, r2
 80164dc:	b128      	cbz	r0, 80164ea <rmw_send_response+0x1a>
 80164de:	4b29      	ldr	r3, [pc, #164]	; (8016584 <rmw_send_response+0xb4>)
 80164e0:	6819      	ldr	r1, [r3, #0]
 80164e2:	f7e9 fead 	bl	8000240 <strcmp>
 80164e6:	2800      	cmp	r0, #0
 80164e8:	d141      	bne.n	801656e <rmw_send_response+0x9e>
 80164ea:	686d      	ldr	r5, [r5, #4]
 80164ec:	68a1      	ldr	r1, [r4, #8]
 80164ee:	6860      	ldr	r0, [r4, #4]
 80164f0:	6faf      	ldr	r7, [r5, #120]	; 0x78
 80164f2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80164f6:	9307      	str	r3, [sp, #28]
 80164f8:	4623      	mov	r3, r4
 80164fa:	9206      	str	r2, [sp, #24]
 80164fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016500:	789b      	ldrb	r3, [r3, #2]
 8016502:	f88d 2017 	strb.w	r2, [sp, #23]
 8016506:	f88d 3016 	strb.w	r3, [sp, #22]
 801650a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801650e:	68e2      	ldr	r2, [r4, #12]
 8016510:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016514:	ab02      	add	r3, sp, #8
 8016516:	696c      	ldr	r4, [r5, #20]
 8016518:	c307      	stmia	r3!, {r0, r1, r2}
 801651a:	68e3      	ldr	r3, [r4, #12]
 801651c:	4798      	blx	r3
 801651e:	6844      	ldr	r4, [r0, #4]
 8016520:	4630      	mov	r0, r6
 8016522:	6923      	ldr	r3, [r4, #16]
 8016524:	4798      	blx	r3
 8016526:	f100 0318 	add.w	r3, r0, #24
 801652a:	6938      	ldr	r0, [r7, #16]
 801652c:	9300      	str	r3, [sp, #0]
 801652e:	ab08      	add	r3, sp, #32
 8016530:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016534:	692a      	ldr	r2, [r5, #16]
 8016536:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8016538:	f003 fe44 	bl	801a1c4 <uxr_prepare_output_stream>
 801653c:	b910      	cbnz	r0, 8016544 <rmw_send_response+0x74>
 801653e:	2001      	movs	r0, #1
 8016540:	b011      	add	sp, #68	; 0x44
 8016542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016544:	a902      	add	r1, sp, #8
 8016546:	a808      	add	r0, sp, #32
 8016548:	f004 ffa8 	bl	801b49c <uxr_serialize_SampleIdentity>
 801654c:	68a3      	ldr	r3, [r4, #8]
 801654e:	a908      	add	r1, sp, #32
 8016550:	4630      	mov	r0, r6
 8016552:	4798      	blx	r3
 8016554:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8016558:	6938      	ldr	r0, [r7, #16]
 801655a:	2b01      	cmp	r3, #1
 801655c:	d00a      	beq.n	8016574 <rmw_send_response+0xa4>
 801655e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8016560:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016564:	f002 fbb4 	bl	8018cd0 <uxr_run_session_until_confirm_delivery>
 8016568:	2000      	movs	r0, #0
 801656a:	b011      	add	sp, #68	; 0x44
 801656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801656e:	200c      	movs	r0, #12
 8016570:	b011      	add	sp, #68	; 0x44
 8016572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016574:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016578:	f001 fff0 	bl	801855c <uxr_flash_output_streams>
 801657c:	2000      	movs	r0, #0
 801657e:	b011      	add	sp, #68	; 0x44
 8016580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016582:	bf00      	nop
 8016584:	08025cc4 	.word	0x08025cc4

08016588 <rmw_take_response>:
 8016588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801658c:	4604      	mov	r4, r0
 801658e:	6800      	ldr	r0, [r0, #0]
 8016590:	b088      	sub	sp, #32
 8016592:	460f      	mov	r7, r1
 8016594:	4690      	mov	r8, r2
 8016596:	461d      	mov	r5, r3
 8016598:	b120      	cbz	r0, 80165a4 <rmw_take_response+0x1c>
 801659a:	4b1d      	ldr	r3, [pc, #116]	; (8016610 <rmw_take_response+0x88>)
 801659c:	6819      	ldr	r1, [r3, #0]
 801659e:	f7e9 fe4f 	bl	8000240 <strcmp>
 80165a2:	bb68      	cbnz	r0, 8016600 <rmw_take_response+0x78>
 80165a4:	b10d      	cbz	r5, 80165aa <rmw_take_response+0x22>
 80165a6:	2300      	movs	r3, #0
 80165a8:	702b      	strb	r3, [r5, #0]
 80165aa:	6864      	ldr	r4, [r4, #4]
 80165ac:	f000 fdb8 	bl	8017120 <rmw_uxrce_clean_expired_static_input_buffer>
 80165b0:	4620      	mov	r0, r4
 80165b2:	f000 fd8b 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 80165b6:	4606      	mov	r6, r0
 80165b8:	b330      	cbz	r0, 8016608 <rmw_take_response+0x80>
 80165ba:	6963      	ldr	r3, [r4, #20]
 80165bc:	6884      	ldr	r4, [r0, #8]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80165c4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80165c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80165cc:	4798      	blx	r3
 80165ce:	6847      	ldr	r7, [r0, #4]
 80165d0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80165d4:	f104 0110 	add.w	r1, r4, #16
 80165d8:	4668      	mov	r0, sp
 80165da:	f7fc ff85 	bl	80134e8 <ucdr_init_buffer>
 80165de:	4641      	mov	r1, r8
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	4668      	mov	r0, sp
 80165e4:	4798      	blx	r3
 80165e6:	4631      	mov	r1, r6
 80165e8:	4604      	mov	r4, r0
 80165ea:	480a      	ldr	r0, [pc, #40]	; (8016614 <rmw_take_response+0x8c>)
 80165ec:	f007 fe08 	bl	801e200 <put_memory>
 80165f0:	b105      	cbz	r5, 80165f4 <rmw_take_response+0x6c>
 80165f2:	702c      	strb	r4, [r5, #0]
 80165f4:	f084 0001 	eor.w	r0, r4, #1
 80165f8:	b2c0      	uxtb	r0, r0
 80165fa:	b008      	add	sp, #32
 80165fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016600:	200c      	movs	r0, #12
 8016602:	b008      	add	sp, #32
 8016604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016608:	2001      	movs	r0, #1
 801660a:	b008      	add	sp, #32
 801660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016610:	08025cc4 	.word	0x08025cc4
 8016614:	2001701c 	.word	0x2001701c

08016618 <rmw_create_service>:
 8016618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661c:	b091      	sub	sp, #68	; 0x44
 801661e:	2900      	cmp	r1, #0
 8016620:	f000 80bb 	beq.w	801679a <rmw_create_service+0x182>
 8016624:	4606      	mov	r6, r0
 8016626:	2800      	cmp	r0, #0
 8016628:	f000 80b7 	beq.w	801679a <rmw_create_service+0x182>
 801662c:	4614      	mov	r4, r2
 801662e:	6800      	ldr	r0, [r0, #0]
 8016630:	4689      	mov	r9, r1
 8016632:	461d      	mov	r5, r3
 8016634:	f000 ff04 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 8016638:	2c00      	cmp	r4, #0
 801663a:	f000 80ae 	beq.w	801679a <rmw_create_service+0x182>
 801663e:	f080 0001 	eor.w	r0, r0, #1
 8016642:	b2c0      	uxtb	r0, r0
 8016644:	2800      	cmp	r0, #0
 8016646:	f040 80a8 	bne.w	801679a <rmw_create_service+0x182>
 801664a:	7823      	ldrb	r3, [r4, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	f000 80a4 	beq.w	801679a <rmw_create_service+0x182>
 8016652:	2d00      	cmp	r5, #0
 8016654:	f000 80a1 	beq.w	801679a <rmw_create_service+0x182>
 8016658:	4856      	ldr	r0, [pc, #344]	; (80167b4 <rmw_create_service+0x19c>)
 801665a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801665e:	f007 fdbf 	bl	801e1e0 <get_memory>
 8016662:	4606      	mov	r6, r0
 8016664:	2800      	cmp	r0, #0
 8016666:	f000 8099 	beq.w	801679c <rmw_create_service+0x184>
 801666a:	6887      	ldr	r7, [r0, #8]
 801666c:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8016670:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8016674:	f007 fe1c 	bl	801e2b0 <rmw_get_implementation_identifier>
 8016678:	67f8      	str	r0, [r7, #124]	; 0x7c
 801667a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801667e:	4620      	mov	r0, r4
 8016680:	f7e9 fe3e 	bl	8000300 <strlen>
 8016684:	1c42      	adds	r2, r0, #1
 8016686:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801668a:	2a3c      	cmp	r2, #60	; 0x3c
 801668c:	f200 808a 	bhi.w	80167a4 <rmw_create_service+0x18c>
 8016690:	4621      	mov	r1, r4
 8016692:	4650      	mov	r0, sl
 8016694:	f00a fd5f 	bl	8021156 <memcpy>
 8016698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801669c:	4629      	mov	r1, r5
 801669e:	2250      	movs	r2, #80	; 0x50
 80166a0:	f107 0020 	add.w	r0, r7, #32
 80166a4:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 80166a8:	677b      	str	r3, [r7, #116]	; 0x74
 80166aa:	f00a fd54 	bl	8021156 <memcpy>
 80166ae:	4648      	mov	r0, r9
 80166b0:	4941      	ldr	r1, [pc, #260]	; (80167b8 <rmw_create_service+0x1a0>)
 80166b2:	f000 fedf 	bl	8017474 <get_service_typesupport_handle>
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d074      	beq.n	80167a4 <rmw_create_service+0x18c>
 80166ba:	6843      	ldr	r3, [r0, #4]
 80166bc:	617b      	str	r3, [r7, #20]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d070      	beq.n	80167a4 <rmw_create_service+0x18c>
 80166c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80166c6:	2108      	movs	r1, #8
 80166c8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80167c0 <rmw_create_service+0x1a8>
 80166cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166d0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80167c4 <rmw_create_service+0x1ac>
 80166d4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80166d8:	1c42      	adds	r2, r0, #1
 80166da:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80166de:	f001 fcbd 	bl	801805c <uxr_object_id>
 80166e2:	2364      	movs	r3, #100	; 0x64
 80166e4:	6138      	str	r0, [r7, #16]
 80166e6:	4652      	mov	r2, sl
 80166e8:	4649      	mov	r1, r9
 80166ea:	6978      	ldr	r0, [r7, #20]
 80166ec:	f000 fdfc 	bl	80172e8 <generate_service_types>
 80166f0:	2800      	cmp	r0, #0
 80166f2:	d057      	beq.n	80167a4 <rmw_create_service+0x18c>
 80166f4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80167c8 <rmw_create_service+0x1b0>
 80166f8:	233c      	movs	r3, #60	; 0x3c
 80166fa:	4a30      	ldr	r2, [pc, #192]	; (80167bc <rmw_create_service+0x1a4>)
 80166fc:	4620      	mov	r0, r4
 80166fe:	4659      	mov	r1, fp
 8016700:	f000 fdc0 	bl	8017284 <generate_service_topics>
 8016704:	2800      	cmp	r0, #0
 8016706:	d04d      	beq.n	80167a4 <rmw_create_service+0x18c>
 8016708:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801670c:	a80c      	add	r0, sp, #48	; 0x30
 801670e:	4629      	mov	r1, r5
 8016710:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8016714:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016718:	f000 fd9c 	bl	8017254 <convert_qos_profile>
 801671c:	4a27      	ldr	r2, [pc, #156]	; (80167bc <rmw_create_service+0x1a4>)
 801671e:	a80c      	add	r0, sp, #48	; 0x30
 8016720:	9400      	str	r4, [sp, #0]
 8016722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016724:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016728:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801672c:	c803      	ldmia	r0, {r0, r1}
 801672e:	9a08      	ldr	r2, [sp, #32]
 8016730:	9005      	str	r0, [sp, #20]
 8016732:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016736:	2306      	movs	r3, #6
 8016738:	f8ad 1018 	strh.w	r1, [sp, #24]
 801673c:	9307      	str	r3, [sp, #28]
 801673e:	6811      	ldr	r1, [r2, #0]
 8016740:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016744:	693a      	ldr	r2, [r7, #16]
 8016746:	f001 fb91 	bl	8017e6c <uxr_buffer_create_replier_bin>
 801674a:	4602      	mov	r2, r0
 801674c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016750:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016754:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016758:	f000 fd60 	bl	801721c <run_xrce_session>
 801675c:	b310      	cbz	r0, 80167a4 <rmw_create_service+0x18c>
 801675e:	7a2b      	ldrb	r3, [r5, #8]
 8016760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016764:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016768:	2b02      	cmp	r3, #2
 801676a:	920e      	str	r2, [sp, #56]	; 0x38
 801676c:	f04f 0200 	mov.w	r2, #0
 8016770:	920f      	str	r2, [sp, #60]	; 0x3c
 8016772:	bf0c      	ite	eq
 8016774:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8016778:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801677c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016780:	930b      	str	r3, [sp, #44]	; 0x2c
 8016782:	ab0e      	add	r3, sp, #56	; 0x38
 8016784:	673a      	str	r2, [r7, #112]	; 0x70
 8016786:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801678a:	9300      	str	r3, [sp, #0]
 801678c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801678e:	6811      	ldr	r1, [r2, #0]
 8016790:	693a      	ldr	r2, [r7, #16]
 8016792:	f001 fc93 	bl	80180bc <uxr_buffer_request_data>
 8016796:	8338      	strh	r0, [r7, #24]
 8016798:	e000      	b.n	801679c <rmw_create_service+0x184>
 801679a:	2600      	movs	r6, #0
 801679c:	4630      	mov	r0, r6
 801679e:	b011      	add	sp, #68	; 0x44
 80167a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a4:	4630      	mov	r0, r6
 80167a6:	2600      	movs	r6, #0
 80167a8:	f000 fbfe 	bl	8016fa8 <rmw_uxrce_fini_service_memory>
 80167ac:	4630      	mov	r0, r6
 80167ae:	b011      	add	sp, #68	; 0x44
 80167b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b4:	20016ffc 	.word	0x20016ffc
 80167b8:	0802490c 	.word	0x0802490c
 80167bc:	2001266c 	.word	0x2001266c
 80167c0:	200126a8 	.word	0x200126a8
 80167c4:	20012608 	.word	0x20012608
 80167c8:	200125cc 	.word	0x200125cc

080167cc <rmw_destroy_service>:
 80167cc:	b570      	push	{r4, r5, r6, lr}
 80167ce:	b128      	cbz	r0, 80167dc <rmw_destroy_service+0x10>
 80167d0:	4604      	mov	r4, r0
 80167d2:	6800      	ldr	r0, [r0, #0]
 80167d4:	460d      	mov	r5, r1
 80167d6:	f000 fe33 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 80167da:	b910      	cbnz	r0, 80167e2 <rmw_destroy_service+0x16>
 80167dc:	2401      	movs	r4, #1
 80167de:	4620      	mov	r0, r4
 80167e0:	bd70      	pop	{r4, r5, r6, pc}
 80167e2:	6863      	ldr	r3, [r4, #4]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d0f9      	beq.n	80167dc <rmw_destroy_service+0x10>
 80167e8:	2d00      	cmp	r5, #0
 80167ea:	d0f7      	beq.n	80167dc <rmw_destroy_service+0x10>
 80167ec:	6828      	ldr	r0, [r5, #0]
 80167ee:	f000 fe27 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 80167f2:	2800      	cmp	r0, #0
 80167f4:	d0f2      	beq.n	80167dc <rmw_destroy_service+0x10>
 80167f6:	686e      	ldr	r6, [r5, #4]
 80167f8:	2e00      	cmp	r6, #0
 80167fa:	d0ef      	beq.n	80167dc <rmw_destroy_service+0x10>
 80167fc:	6864      	ldr	r4, [r4, #4]
 80167fe:	6932      	ldr	r2, [r6, #16]
 8016800:	6920      	ldr	r0, [r4, #16]
 8016802:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016806:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801680a:	6819      	ldr	r1, [r3, #0]
 801680c:	f001 fc90 	bl	8018130 <uxr_buffer_cancel_data>
 8016810:	4602      	mov	r2, r0
 8016812:	6920      	ldr	r0, [r4, #16]
 8016814:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016818:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801681c:	f000 fcfe 	bl	801721c <run_xrce_session>
 8016820:	6920      	ldr	r0, [r4, #16]
 8016822:	6932      	ldr	r2, [r6, #16]
 8016824:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016828:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801682c:	6819      	ldr	r1, [r3, #0]
 801682e:	f001 f91b 	bl	8017a68 <uxr_buffer_delete_entity>
 8016832:	4602      	mov	r2, r0
 8016834:	6920      	ldr	r0, [r4, #16]
 8016836:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801683a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801683e:	f000 fced 	bl	801721c <run_xrce_session>
 8016842:	4603      	mov	r3, r0
 8016844:	4628      	mov	r0, r5
 8016846:	2b00      	cmp	r3, #0
 8016848:	bf14      	ite	ne
 801684a:	2400      	movne	r4, #0
 801684c:	2402      	moveq	r4, #2
 801684e:	f000 fbab 	bl	8016fa8 <rmw_uxrce_fini_service_memory>
 8016852:	e7c4      	b.n	80167de <rmw_destroy_service+0x12>

08016854 <rmw_service_response_publisher_get_actual_qos>:
 8016854:	b181      	cbz	r1, 8016878 <rmw_service_response_publisher_get_actual_qos+0x24>
 8016856:	4603      	mov	r3, r0
 8016858:	b510      	push	{r4, lr}
 801685a:	fab0 f480 	clz	r4, r0
 801685e:	0964      	lsrs	r4, r4, #5
 8016860:	b140      	cbz	r0, 8016874 <rmw_service_response_publisher_get_actual_qos+0x20>
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	4608      	mov	r0, r1
 8016866:	2250      	movs	r2, #80	; 0x50
 8016868:	f103 0120 	add.w	r1, r3, #32
 801686c:	f00a fc73 	bl	8021156 <memcpy>
 8016870:	4620      	mov	r0, r4
 8016872:	bd10      	pop	{r4, pc}
 8016874:	200b      	movs	r0, #11
 8016876:	bd10      	pop	{r4, pc}
 8016878:	200b      	movs	r0, #11
 801687a:	4770      	bx	lr

0801687c <rmw_service_request_subscription_get_actual_qos>:
 801687c:	b178      	cbz	r0, 801689e <rmw_service_request_subscription_get_actual_qos+0x22>
 801687e:	b510      	push	{r4, lr}
 8016880:	fab1 f481 	clz	r4, r1
 8016884:	0964      	lsrs	r4, r4, #5
 8016886:	b141      	cbz	r1, 801689a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8016888:	6843      	ldr	r3, [r0, #4]
 801688a:	2250      	movs	r2, #80	; 0x50
 801688c:	4608      	mov	r0, r1
 801688e:	f103 0120 	add.w	r1, r3, #32
 8016892:	f00a fc60 	bl	8021156 <memcpy>
 8016896:	4620      	mov	r0, r4
 8016898:	bd10      	pop	{r4, pc}
 801689a:	200b      	movs	r0, #11
 801689c:	bd10      	pop	{r4, pc}
 801689e:	200b      	movs	r0, #11
 80168a0:	4770      	bx	lr
 80168a2:	bf00      	nop

080168a4 <rmw_create_subscription>:
 80168a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a8:	b08d      	sub	sp, #52	; 0x34
 80168aa:	2900      	cmp	r1, #0
 80168ac:	f000 80d8 	beq.w	8016a60 <rmw_create_subscription+0x1bc>
 80168b0:	4604      	mov	r4, r0
 80168b2:	2800      	cmp	r0, #0
 80168b4:	f000 80d4 	beq.w	8016a60 <rmw_create_subscription+0x1bc>
 80168b8:	6800      	ldr	r0, [r0, #0]
 80168ba:	460e      	mov	r6, r1
 80168bc:	4615      	mov	r5, r2
 80168be:	461f      	mov	r7, r3
 80168c0:	f000 fdbe 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 80168c4:	f080 0001 	eor.w	r0, r0, #1
 80168c8:	b2c0      	uxtb	r0, r0
 80168ca:	2800      	cmp	r0, #0
 80168cc:	f040 80c8 	bne.w	8016a60 <rmw_create_subscription+0x1bc>
 80168d0:	2d00      	cmp	r5, #0
 80168d2:	f000 80c5 	beq.w	8016a60 <rmw_create_subscription+0x1bc>
 80168d6:	782b      	ldrb	r3, [r5, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 80c1 	beq.w	8016a60 <rmw_create_subscription+0x1bc>
 80168de:	2f00      	cmp	r7, #0
 80168e0:	f000 80be 	beq.w	8016a60 <rmw_create_subscription+0x1bc>
 80168e4:	4867      	ldr	r0, [pc, #412]	; (8016a84 <rmw_create_subscription+0x1e0>)
 80168e6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80168ea:	f007 fc79 	bl	801e1e0 <get_memory>
 80168ee:	4604      	mov	r4, r0
 80168f0:	2800      	cmp	r0, #0
 80168f2:	f000 80b6 	beq.w	8016a62 <rmw_create_subscription+0x1be>
 80168f6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80168fa:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 80168fe:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8016902:	f007 fcd5 	bl	801e2b0 <rmw_get_implementation_identifier>
 8016906:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801690a:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801690e:	4628      	mov	r0, r5
 8016910:	f7e9 fcf6 	bl	8000300 <strlen>
 8016914:	3001      	adds	r0, #1
 8016916:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801691a:	283c      	cmp	r0, #60	; 0x3c
 801691c:	f200 80a5 	bhi.w	8016a6a <rmw_create_subscription+0x1c6>
 8016920:	462b      	mov	r3, r5
 8016922:	4a59      	ldr	r2, [pc, #356]	; (8016a88 <rmw_create_subscription+0x1e4>)
 8016924:	213c      	movs	r1, #60	; 0x3c
 8016926:	4650      	mov	r0, sl
 8016928:	f00a f9b8 	bl	8020c9c <sniprintf>
 801692c:	4639      	mov	r1, r7
 801692e:	2250      	movs	r2, #80	; 0x50
 8016930:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8016934:	f8c8 9020 	str.w	r9, [r8, #32]
 8016938:	f00a fc0d 	bl	8021156 <memcpy>
 801693c:	4630      	mov	r0, r6
 801693e:	4953      	ldr	r1, [pc, #332]	; (8016a8c <rmw_create_subscription+0x1e8>)
 8016940:	f000 fd8c 	bl	801745c <get_message_typesupport_handle>
 8016944:	2800      	cmp	r0, #0
 8016946:	f000 8090 	beq.w	8016a6a <rmw_create_subscription+0x1c6>
 801694a:	6842      	ldr	r2, [r0, #4]
 801694c:	f8c8 2018 	str.w	r2, [r8, #24]
 8016950:	2a00      	cmp	r2, #0
 8016952:	f000 808a 	beq.w	8016a6a <rmw_create_subscription+0x1c6>
 8016956:	4629      	mov	r1, r5
 8016958:	463b      	mov	r3, r7
 801695a:	4648      	mov	r0, r9
 801695c:	f007 fcd8 	bl	801e310 <create_topic>
 8016960:	f8c8 001c 	str.w	r0, [r8, #28]
 8016964:	2800      	cmp	r0, #0
 8016966:	f000 8085 	beq.w	8016a74 <rmw_create_subscription+0x1d0>
 801696a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801696e:	2104      	movs	r1, #4
 8016970:	2506      	movs	r5, #6
 8016972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016976:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801697a:	1c42      	adds	r2, r0, #1
 801697c:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8016980:	f001 fb6c 	bl	801805c <uxr_object_id>
 8016984:	f8c8 0010 	str.w	r0, [r8, #16]
 8016988:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801698c:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8016990:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016994:	9500      	str	r5, [sp, #0]
 8016996:	6819      	ldr	r1, [r3, #0]
 8016998:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801699c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80169a0:	f001 f946 	bl	8017c30 <uxr_buffer_create_subscriber_bin>
 80169a4:	4602      	mov	r2, r0
 80169a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80169aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80169ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80169b2:	f000 fc33 	bl	801721c <run_xrce_session>
 80169b6:	2800      	cmp	r0, #0
 80169b8:	d057      	beq.n	8016a6a <rmw_create_subscription+0x1c6>
 80169ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80169be:	4629      	mov	r1, r5
 80169c0:	ae08      	add	r6, sp, #32
 80169c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169c6:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80169ca:	1c42      	adds	r2, r0, #1
 80169cc:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80169d0:	f001 fb44 	bl	801805c <uxr_object_id>
 80169d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80169d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80169dc:	4639      	mov	r1, r7
 80169de:	f8c8 0014 	str.w	r0, [r8, #20]
 80169e2:	4630      	mov	r0, r6
 80169e4:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80169e8:	9305      	str	r3, [sp, #20]
 80169ea:	f000 fc33 	bl	8017254 <convert_qos_profile>
 80169ee:	9503      	str	r5, [sp, #12]
 80169f0:	9b05      	ldr	r3, [sp, #20]
 80169f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80169f6:	9001      	str	r0, [sp, #4]
 80169f8:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80169fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016a00:	691b      	ldr	r3, [r3, #16]
 8016a02:	9300      	str	r3, [sp, #0]
 8016a04:	f8db 1000 	ldr.w	r1, [fp]
 8016a08:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8016a0c:	f001 f9b6 	bl	8017d7c <uxr_buffer_create_datareader_bin>
 8016a10:	4602      	mov	r2, r0
 8016a12:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016a16:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016a1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016a1e:	f000 fbfd 	bl	801721c <run_xrce_session>
 8016a22:	b310      	cbz	r0, 8016a6a <rmw_create_subscription+0x1c6>
 8016a24:	7a3b      	ldrb	r3, [r7, #8]
 8016a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016a2e:	2b02      	cmp	r3, #2
 8016a30:	920a      	str	r2, [sp, #40]	; 0x28
 8016a32:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016a36:	f04f 0200 	mov.w	r2, #0
 8016a3a:	bf08      	it	eq
 8016a3c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8016a40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016a44:	bf18      	it	ne
 8016a46:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8016a4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8016a4c:	9307      	str	r3, [sp, #28]
 8016a4e:	ab0a      	add	r3, sp, #40	; 0x28
 8016a50:	9300      	str	r3, [sp, #0]
 8016a52:	9b07      	ldr	r3, [sp, #28]
 8016a54:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016a58:	6809      	ldr	r1, [r1, #0]
 8016a5a:	f001 fb2f 	bl	80180bc <uxr_buffer_request_data>
 8016a5e:	e000      	b.n	8016a62 <rmw_create_subscription+0x1be>
 8016a60:	2400      	movs	r4, #0
 8016a62:	4620      	mov	r0, r4
 8016a64:	b00d      	add	sp, #52	; 0x34
 8016a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a6a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8016a6e:	b108      	cbz	r0, 8016a74 <rmw_create_subscription+0x1d0>
 8016a70:	f000 fac6 	bl	8017000 <rmw_uxrce_fini_topic_memory>
 8016a74:	4620      	mov	r0, r4
 8016a76:	2400      	movs	r4, #0
 8016a78:	f000 fa80 	bl	8016f7c <rmw_uxrce_fini_subscription_memory>
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	b00d      	add	sp, #52	; 0x34
 8016a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a84:	2001702c 	.word	0x2001702c
 8016a88:	08025664 	.word	0x08025664
 8016a8c:	0802490c 	.word	0x0802490c

08016a90 <rmw_subscription_get_actual_qos>:
 8016a90:	b178      	cbz	r0, 8016ab2 <rmw_subscription_get_actual_qos+0x22>
 8016a92:	b510      	push	{r4, lr}
 8016a94:	fab1 f481 	clz	r4, r1
 8016a98:	0964      	lsrs	r4, r4, #5
 8016a9a:	b141      	cbz	r1, 8016aae <rmw_subscription_get_actual_qos+0x1e>
 8016a9c:	6843      	ldr	r3, [r0, #4]
 8016a9e:	2250      	movs	r2, #80	; 0x50
 8016aa0:	4608      	mov	r0, r1
 8016aa2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016aa6:	f00a fb56 	bl	8021156 <memcpy>
 8016aaa:	4620      	mov	r0, r4
 8016aac:	bd10      	pop	{r4, pc}
 8016aae:	200b      	movs	r0, #11
 8016ab0:	bd10      	pop	{r4, pc}
 8016ab2:	200b      	movs	r0, #11
 8016ab4:	4770      	bx	lr
 8016ab6:	bf00      	nop

08016ab8 <rmw_destroy_subscription>:
 8016ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016abc:	b128      	cbz	r0, 8016aca <rmw_destroy_subscription+0x12>
 8016abe:	4604      	mov	r4, r0
 8016ac0:	6800      	ldr	r0, [r0, #0]
 8016ac2:	460d      	mov	r5, r1
 8016ac4:	f000 fcbc 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 8016ac8:	b918      	cbnz	r0, 8016ad2 <rmw_destroy_subscription+0x1a>
 8016aca:	2401      	movs	r4, #1
 8016acc:	4620      	mov	r0, r4
 8016ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad2:	6863      	ldr	r3, [r4, #4]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d0f8      	beq.n	8016aca <rmw_destroy_subscription+0x12>
 8016ad8:	fab5 f485 	clz	r4, r5
 8016adc:	0964      	lsrs	r4, r4, #5
 8016ade:	2d00      	cmp	r5, #0
 8016ae0:	d0f3      	beq.n	8016aca <rmw_destroy_subscription+0x12>
 8016ae2:	6828      	ldr	r0, [r5, #0]
 8016ae4:	f000 fcac 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0ee      	beq.n	8016aca <rmw_destroy_subscription+0x12>
 8016aec:	686e      	ldr	r6, [r5, #4]
 8016aee:	2e00      	cmp	r6, #0
 8016af0:	d0eb      	beq.n	8016aca <rmw_destroy_subscription+0x12>
 8016af2:	6a37      	ldr	r7, [r6, #32]
 8016af4:	6972      	ldr	r2, [r6, #20]
 8016af6:	6938      	ldr	r0, [r7, #16]
 8016af8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016afc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016b00:	6819      	ldr	r1, [r3, #0]
 8016b02:	f001 fb15 	bl	8018130 <uxr_buffer_cancel_data>
 8016b06:	4602      	mov	r2, r0
 8016b08:	6938      	ldr	r0, [r7, #16]
 8016b0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016b0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016b12:	f000 fb83 	bl	801721c <run_xrce_session>
 8016b16:	69f0      	ldr	r0, [r6, #28]
 8016b18:	f007 fc4a 	bl	801e3b0 <destroy_topic>
 8016b1c:	6a33      	ldr	r3, [r6, #32]
 8016b1e:	6972      	ldr	r2, [r6, #20]
 8016b20:	6918      	ldr	r0, [r3, #16]
 8016b22:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016b26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016b2a:	6819      	ldr	r1, [r3, #0]
 8016b2c:	f000 ff9c 	bl	8017a68 <uxr_buffer_delete_entity>
 8016b30:	6a33      	ldr	r3, [r6, #32]
 8016b32:	4680      	mov	r8, r0
 8016b34:	6932      	ldr	r2, [r6, #16]
 8016b36:	6918      	ldr	r0, [r3, #16]
 8016b38:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016b3c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016b40:	6819      	ldr	r1, [r3, #0]
 8016b42:	f000 ff91 	bl	8017a68 <uxr_buffer_delete_entity>
 8016b46:	4606      	mov	r6, r0
 8016b48:	6938      	ldr	r0, [r7, #16]
 8016b4a:	4642      	mov	r2, r8
 8016b4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016b50:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016b54:	f000 fb62 	bl	801721c <run_xrce_session>
 8016b58:	693f      	ldr	r7, [r7, #16]
 8016b5a:	4632      	mov	r2, r6
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016b62:	4638      	mov	r0, r7
 8016b64:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016b68:	f000 fb58 	bl	801721c <run_xrce_session>
 8016b6c:	b126      	cbz	r6, 8016b78 <rmw_destroy_subscription+0xc0>
 8016b6e:	b118      	cbz	r0, 8016b78 <rmw_destroy_subscription+0xc0>
 8016b70:	4628      	mov	r0, r5
 8016b72:	f000 fa03 	bl	8016f7c <rmw_uxrce_fini_subscription_memory>
 8016b76:	e7a9      	b.n	8016acc <rmw_destroy_subscription+0x14>
 8016b78:	2402      	movs	r4, #2
 8016b7a:	e7f9      	b.n	8016b70 <rmw_destroy_subscription+0xb8>

08016b7c <rmw_take_with_info>:
 8016b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b7e:	4604      	mov	r4, r0
 8016b80:	6800      	ldr	r0, [r0, #0]
 8016b82:	b089      	sub	sp, #36	; 0x24
 8016b84:	460f      	mov	r7, r1
 8016b86:	4615      	mov	r5, r2
 8016b88:	b128      	cbz	r0, 8016b96 <rmw_take_with_info+0x1a>
 8016b8a:	4b24      	ldr	r3, [pc, #144]	; (8016c1c <rmw_take_with_info+0xa0>)
 8016b8c:	6819      	ldr	r1, [r3, #0]
 8016b8e:	f7e9 fb57 	bl	8000240 <strcmp>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d13e      	bne.n	8016c14 <rmw_take_with_info+0x98>
 8016b96:	b305      	cbz	r5, 8016bda <rmw_take_with_info+0x5e>
 8016b98:	2300      	movs	r3, #0
 8016b9a:	6864      	ldr	r4, [r4, #4]
 8016b9c:	702b      	strb	r3, [r5, #0]
 8016b9e:	f000 fabf 	bl	8017120 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	f000 fa92 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016ba8:	4606      	mov	r6, r0
 8016baa:	b1f0      	cbz	r0, 8016bea <rmw_take_with_info+0x6e>
 8016bac:	6881      	ldr	r1, [r0, #8]
 8016bae:	4668      	mov	r0, sp
 8016bb0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016bb4:	3110      	adds	r1, #16
 8016bb6:	f7fc fc97 	bl	80134e8 <ucdr_init_buffer>
 8016bba:	69a3      	ldr	r3, [r4, #24]
 8016bbc:	4639      	mov	r1, r7
 8016bbe:	4668      	mov	r0, sp
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	4798      	blx	r3
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	4631      	mov	r1, r6
 8016bc8:	4815      	ldr	r0, [pc, #84]	; (8016c20 <rmw_take_with_info+0xa4>)
 8016bca:	f007 fb19 	bl	801e200 <put_memory>
 8016bce:	702c      	strb	r4, [r5, #0]
 8016bd0:	f084 0001 	eor.w	r0, r4, #1
 8016bd4:	b2c0      	uxtb	r0, r0
 8016bd6:	b009      	add	sp, #36	; 0x24
 8016bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bda:	6864      	ldr	r4, [r4, #4]
 8016bdc:	f000 faa0 	bl	8017120 <rmw_uxrce_clean_expired_static_input_buffer>
 8016be0:	4620      	mov	r0, r4
 8016be2:	f000 fa73 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016be6:	4605      	mov	r5, r0
 8016be8:	b910      	cbnz	r0, 8016bf0 <rmw_take_with_info+0x74>
 8016bea:	2001      	movs	r0, #1
 8016bec:	b009      	add	sp, #36	; 0x24
 8016bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bf0:	68a9      	ldr	r1, [r5, #8]
 8016bf2:	4668      	mov	r0, sp
 8016bf4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016bf8:	3110      	adds	r1, #16
 8016bfa:	f7fc fc75 	bl	80134e8 <ucdr_init_buffer>
 8016bfe:	69a3      	ldr	r3, [r4, #24]
 8016c00:	4639      	mov	r1, r7
 8016c02:	4668      	mov	r0, sp
 8016c04:	68db      	ldr	r3, [r3, #12]
 8016c06:	4798      	blx	r3
 8016c08:	4629      	mov	r1, r5
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	4804      	ldr	r0, [pc, #16]	; (8016c20 <rmw_take_with_info+0xa4>)
 8016c0e:	f007 faf7 	bl	801e200 <put_memory>
 8016c12:	e7dd      	b.n	8016bd0 <rmw_take_with_info+0x54>
 8016c14:	200c      	movs	r0, #12
 8016c16:	b009      	add	sp, #36	; 0x24
 8016c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	08025cc4 	.word	0x08025cc4
 8016c20:	2001701c 	.word	0x2001701c

08016c24 <rmw_uxrce_transport_init>:
 8016c24:	b508      	push	{r3, lr}
 8016c26:	b108      	cbz	r0, 8016c2c <rmw_uxrce_transport_init+0x8>
 8016c28:	f100 0210 	add.w	r2, r0, #16
 8016c2c:	b139      	cbz	r1, 8016c3e <rmw_uxrce_transport_init+0x1a>
 8016c2e:	6949      	ldr	r1, [r1, #20]
 8016c30:	4610      	mov	r0, r2
 8016c32:	f001 f9db 	bl	8017fec <uxr_init_custom_transport>
 8016c36:	f080 0001 	eor.w	r0, r0, #1
 8016c3a:	b2c0      	uxtb	r0, r0
 8016c3c:	bd08      	pop	{r3, pc}
 8016c3e:	4b04      	ldr	r3, [pc, #16]	; (8016c50 <rmw_uxrce_transport_init+0x2c>)
 8016c40:	4610      	mov	r0, r2
 8016c42:	6859      	ldr	r1, [r3, #4]
 8016c44:	f001 f9d2 	bl	8017fec <uxr_init_custom_transport>
 8016c48:	f080 0001 	eor.w	r0, r0, #1
 8016c4c:	b2c0      	uxtb	r0, r0
 8016c4e:	bd08      	pop	{r3, pc}
 8016c50:	20012574 	.word	0x20012574

08016c54 <rmw_uxrce_init_service_memory>:
 8016c54:	b1e2      	cbz	r2, 8016c90 <rmw_uxrce_init_service_memory+0x3c>
 8016c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c5a:	7b05      	ldrb	r5, [r0, #12]
 8016c5c:	4606      	mov	r6, r0
 8016c5e:	b9ad      	cbnz	r5, 8016c8c <rmw_uxrce_init_service_memory+0x38>
 8016c60:	23c8      	movs	r3, #200	; 0xc8
 8016c62:	4617      	mov	r7, r2
 8016c64:	460c      	mov	r4, r1
 8016c66:	46a8      	mov	r8, r5
 8016c68:	6083      	str	r3, [r0, #8]
 8016c6a:	f240 1301 	movw	r3, #257	; 0x101
 8016c6e:	e9c0 5500 	strd	r5, r5, [r0]
 8016c72:	8183      	strh	r3, [r0, #12]
 8016c74:	3501      	adds	r5, #1
 8016c76:	4621      	mov	r1, r4
 8016c78:	4630      	mov	r0, r6
 8016c7a:	f007 fac1 	bl	801e200 <put_memory>
 8016c7e:	42af      	cmp	r7, r5
 8016c80:	60a4      	str	r4, [r4, #8]
 8016c82:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016c86:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016c8a:	d1f3      	bne.n	8016c74 <rmw_uxrce_init_service_memory+0x20>
 8016c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c90:	4770      	bx	lr
 8016c92:	bf00      	nop

08016c94 <rmw_uxrce_init_client_memory>:
 8016c94:	b1e2      	cbz	r2, 8016cd0 <rmw_uxrce_init_client_memory+0x3c>
 8016c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9a:	7b05      	ldrb	r5, [r0, #12]
 8016c9c:	4606      	mov	r6, r0
 8016c9e:	b9ad      	cbnz	r5, 8016ccc <rmw_uxrce_init_client_memory+0x38>
 8016ca0:	23c8      	movs	r3, #200	; 0xc8
 8016ca2:	4617      	mov	r7, r2
 8016ca4:	460c      	mov	r4, r1
 8016ca6:	46a8      	mov	r8, r5
 8016ca8:	6083      	str	r3, [r0, #8]
 8016caa:	f240 1301 	movw	r3, #257	; 0x101
 8016cae:	e9c0 5500 	strd	r5, r5, [r0]
 8016cb2:	8183      	strh	r3, [r0, #12]
 8016cb4:	3501      	adds	r5, #1
 8016cb6:	4621      	mov	r1, r4
 8016cb8:	4630      	mov	r0, r6
 8016cba:	f007 faa1 	bl	801e200 <put_memory>
 8016cbe:	42af      	cmp	r7, r5
 8016cc0:	60a4      	str	r4, [r4, #8]
 8016cc2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016cc6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016cca:	d1f3      	bne.n	8016cb4 <rmw_uxrce_init_client_memory+0x20>
 8016ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop

08016cd4 <rmw_uxrce_init_publisher_memory>:
 8016cd4:	b1e2      	cbz	r2, 8016d10 <rmw_uxrce_init_publisher_memory+0x3c>
 8016cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cda:	7b05      	ldrb	r5, [r0, #12]
 8016cdc:	4606      	mov	r6, r0
 8016cde:	b9ad      	cbnz	r5, 8016d0c <rmw_uxrce_init_publisher_memory+0x38>
 8016ce0:	23d8      	movs	r3, #216	; 0xd8
 8016ce2:	4617      	mov	r7, r2
 8016ce4:	460c      	mov	r4, r1
 8016ce6:	46a8      	mov	r8, r5
 8016ce8:	6083      	str	r3, [r0, #8]
 8016cea:	f240 1301 	movw	r3, #257	; 0x101
 8016cee:	e9c0 5500 	strd	r5, r5, [r0]
 8016cf2:	8183      	strh	r3, [r0, #12]
 8016cf4:	3501      	adds	r5, #1
 8016cf6:	4621      	mov	r1, r4
 8016cf8:	4630      	mov	r0, r6
 8016cfa:	f007 fa81 	bl	801e200 <put_memory>
 8016cfe:	42af      	cmp	r7, r5
 8016d00:	60a4      	str	r4, [r4, #8]
 8016d02:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016d06:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016d0a:	d1f3      	bne.n	8016cf4 <rmw_uxrce_init_publisher_memory+0x20>
 8016d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d10:	4770      	bx	lr
 8016d12:	bf00      	nop

08016d14 <rmw_uxrce_init_subscription_memory>:
 8016d14:	b1e2      	cbz	r2, 8016d50 <rmw_uxrce_init_subscription_memory+0x3c>
 8016d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d1a:	7b05      	ldrb	r5, [r0, #12]
 8016d1c:	4606      	mov	r6, r0
 8016d1e:	b9ad      	cbnz	r5, 8016d4c <rmw_uxrce_init_subscription_memory+0x38>
 8016d20:	23d8      	movs	r3, #216	; 0xd8
 8016d22:	4617      	mov	r7, r2
 8016d24:	460c      	mov	r4, r1
 8016d26:	46a8      	mov	r8, r5
 8016d28:	6083      	str	r3, [r0, #8]
 8016d2a:	f240 1301 	movw	r3, #257	; 0x101
 8016d2e:	e9c0 5500 	strd	r5, r5, [r0]
 8016d32:	8183      	strh	r3, [r0, #12]
 8016d34:	3501      	adds	r5, #1
 8016d36:	4621      	mov	r1, r4
 8016d38:	4630      	mov	r0, r6
 8016d3a:	f007 fa61 	bl	801e200 <put_memory>
 8016d3e:	42af      	cmp	r7, r5
 8016d40:	60a4      	str	r4, [r4, #8]
 8016d42:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016d46:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016d4a:	d1f3      	bne.n	8016d34 <rmw_uxrce_init_subscription_memory+0x20>
 8016d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d50:	4770      	bx	lr
 8016d52:	bf00      	nop

08016d54 <rmw_uxrce_init_node_memory>:
 8016d54:	b1e2      	cbz	r2, 8016d90 <rmw_uxrce_init_node_memory+0x3c>
 8016d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d5a:	7b05      	ldrb	r5, [r0, #12]
 8016d5c:	4606      	mov	r6, r0
 8016d5e:	b9ad      	cbnz	r5, 8016d8c <rmw_uxrce_init_node_memory+0x38>
 8016d60:	23a4      	movs	r3, #164	; 0xa4
 8016d62:	4617      	mov	r7, r2
 8016d64:	460c      	mov	r4, r1
 8016d66:	46a8      	mov	r8, r5
 8016d68:	6083      	str	r3, [r0, #8]
 8016d6a:	f240 1301 	movw	r3, #257	; 0x101
 8016d6e:	e9c0 5500 	strd	r5, r5, [r0]
 8016d72:	8183      	strh	r3, [r0, #12]
 8016d74:	3501      	adds	r5, #1
 8016d76:	4621      	mov	r1, r4
 8016d78:	4630      	mov	r0, r6
 8016d7a:	f007 fa41 	bl	801e200 <put_memory>
 8016d7e:	42af      	cmp	r7, r5
 8016d80:	60a4      	str	r4, [r4, #8]
 8016d82:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8016d86:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016d8a:	d1f3      	bne.n	8016d74 <rmw_uxrce_init_node_memory+0x20>
 8016d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d90:	4770      	bx	lr
 8016d92:	bf00      	nop

08016d94 <rmw_uxrce_init_session_memory>:
 8016d94:	b1ea      	cbz	r2, 8016dd2 <rmw_uxrce_init_session_memory+0x3e>
 8016d96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d9a:	7b05      	ldrb	r5, [r0, #12]
 8016d9c:	4606      	mov	r6, r0
 8016d9e:	b9b5      	cbnz	r5, 8016dce <rmw_uxrce_init_session_memory+0x3a>
 8016da0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016da4:	f240 1301 	movw	r3, #257	; 0x101
 8016da8:	4617      	mov	r7, r2
 8016daa:	460c      	mov	r4, r1
 8016dac:	46a9      	mov	r9, r5
 8016dae:	f8c0 8008 	str.w	r8, [r0, #8]
 8016db2:	8183      	strh	r3, [r0, #12]
 8016db4:	e9c0 5500 	strd	r5, r5, [r0]
 8016db8:	3501      	adds	r5, #1
 8016dba:	4621      	mov	r1, r4
 8016dbc:	4630      	mov	r0, r6
 8016dbe:	f007 fa1f 	bl	801e200 <put_memory>
 8016dc2:	42af      	cmp	r7, r5
 8016dc4:	60a4      	str	r4, [r4, #8]
 8016dc6:	f884 900c 	strb.w	r9, [r4, #12]
 8016dca:	4444      	add	r4, r8
 8016dcc:	d1f4      	bne.n	8016db8 <rmw_uxrce_init_session_memory+0x24>
 8016dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dd2:	4770      	bx	lr

08016dd4 <rmw_uxrce_init_topic_memory>:
 8016dd4:	b1e2      	cbz	r2, 8016e10 <rmw_uxrce_init_topic_memory+0x3c>
 8016dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dda:	7b05      	ldrb	r5, [r0, #12]
 8016ddc:	4606      	mov	r6, r0
 8016dde:	b9ad      	cbnz	r5, 8016e0c <rmw_uxrce_init_topic_memory+0x38>
 8016de0:	231c      	movs	r3, #28
 8016de2:	4617      	mov	r7, r2
 8016de4:	460c      	mov	r4, r1
 8016de6:	46a8      	mov	r8, r5
 8016de8:	6083      	str	r3, [r0, #8]
 8016dea:	f240 1301 	movw	r3, #257	; 0x101
 8016dee:	e9c0 5500 	strd	r5, r5, [r0]
 8016df2:	8183      	strh	r3, [r0, #12]
 8016df4:	3501      	adds	r5, #1
 8016df6:	4621      	mov	r1, r4
 8016df8:	4630      	mov	r0, r6
 8016dfa:	f007 fa01 	bl	801e200 <put_memory>
 8016dfe:	42af      	cmp	r7, r5
 8016e00:	60a4      	str	r4, [r4, #8]
 8016e02:	f104 041c 	add.w	r4, r4, #28
 8016e06:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016e0a:	d1f3      	bne.n	8016df4 <rmw_uxrce_init_topic_memory+0x20>
 8016e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e10:	4770      	bx	lr
 8016e12:	bf00      	nop

08016e14 <rmw_uxrce_init_static_input_buffer_memory>:
 8016e14:	b1ea      	cbz	r2, 8016e52 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e1a:	7b05      	ldrb	r5, [r0, #12]
 8016e1c:	4606      	mov	r6, r0
 8016e1e:	b9b5      	cbnz	r5, 8016e4e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016e20:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016e24:	4617      	mov	r7, r2
 8016e26:	460c      	mov	r4, r1
 8016e28:	46a8      	mov	r8, r5
 8016e2a:	6083      	str	r3, [r0, #8]
 8016e2c:	f240 1301 	movw	r3, #257	; 0x101
 8016e30:	e9c0 5500 	strd	r5, r5, [r0]
 8016e34:	8183      	strh	r3, [r0, #12]
 8016e36:	3501      	adds	r5, #1
 8016e38:	4621      	mov	r1, r4
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f007 f9e0 	bl	801e200 <put_memory>
 8016e40:	42af      	cmp	r7, r5
 8016e42:	60a4      	str	r4, [r4, #8]
 8016e44:	f884 800c 	strb.w	r8, [r4, #12]
 8016e48:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016e4c:	d1f3      	bne.n	8016e36 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e52:	4770      	bx	lr

08016e54 <rmw_uxrce_init_init_options_impl_memory>:
 8016e54:	b1e2      	cbz	r2, 8016e90 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5a:	7b05      	ldrb	r5, [r0, #12]
 8016e5c:	4606      	mov	r6, r0
 8016e5e:	b9ad      	cbnz	r5, 8016e8c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016e60:	232c      	movs	r3, #44	; 0x2c
 8016e62:	4617      	mov	r7, r2
 8016e64:	460c      	mov	r4, r1
 8016e66:	46a8      	mov	r8, r5
 8016e68:	6083      	str	r3, [r0, #8]
 8016e6a:	f240 1301 	movw	r3, #257	; 0x101
 8016e6e:	e9c0 5500 	strd	r5, r5, [r0]
 8016e72:	8183      	strh	r3, [r0, #12]
 8016e74:	3501      	adds	r5, #1
 8016e76:	4621      	mov	r1, r4
 8016e78:	4630      	mov	r0, r6
 8016e7a:	f007 f9c1 	bl	801e200 <put_memory>
 8016e7e:	42af      	cmp	r7, r5
 8016e80:	60a4      	str	r4, [r4, #8]
 8016e82:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8016e86:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016e8a:	d1f3      	bne.n	8016e74 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e90:	4770      	bx	lr
 8016e92:	bf00      	nop

08016e94 <rmw_uxrce_init_wait_set_memory>:
 8016e94:	b1e2      	cbz	r2, 8016ed0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9a:	7b05      	ldrb	r5, [r0, #12]
 8016e9c:	4606      	mov	r6, r0
 8016e9e:	b9ad      	cbnz	r5, 8016ecc <rmw_uxrce_init_wait_set_memory+0x38>
 8016ea0:	231c      	movs	r3, #28
 8016ea2:	4617      	mov	r7, r2
 8016ea4:	460c      	mov	r4, r1
 8016ea6:	46a8      	mov	r8, r5
 8016ea8:	6083      	str	r3, [r0, #8]
 8016eaa:	f240 1301 	movw	r3, #257	; 0x101
 8016eae:	e9c0 5500 	strd	r5, r5, [r0]
 8016eb2:	8183      	strh	r3, [r0, #12]
 8016eb4:	3501      	adds	r5, #1
 8016eb6:	4621      	mov	r1, r4
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f007 f9a1 	bl	801e200 <put_memory>
 8016ebe:	42af      	cmp	r7, r5
 8016ec0:	60a4      	str	r4, [r4, #8]
 8016ec2:	f104 041c 	add.w	r4, r4, #28
 8016ec6:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016eca:	d1f3      	bne.n	8016eb4 <rmw_uxrce_init_wait_set_memory+0x20>
 8016ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed0:	4770      	bx	lr
 8016ed2:	bf00      	nop

08016ed4 <rmw_uxrce_init_guard_condition_memory>:
 8016ed4:	b1e2      	cbz	r2, 8016f10 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eda:	7b05      	ldrb	r5, [r0, #12]
 8016edc:	4606      	mov	r6, r0
 8016ede:	b9ad      	cbnz	r5, 8016f0c <rmw_uxrce_init_guard_condition_memory+0x38>
 8016ee0:	2320      	movs	r3, #32
 8016ee2:	4617      	mov	r7, r2
 8016ee4:	460c      	mov	r4, r1
 8016ee6:	46a8      	mov	r8, r5
 8016ee8:	6083      	str	r3, [r0, #8]
 8016eea:	f240 1301 	movw	r3, #257	; 0x101
 8016eee:	e9c0 5500 	strd	r5, r5, [r0]
 8016ef2:	8183      	strh	r3, [r0, #12]
 8016ef4:	3501      	adds	r5, #1
 8016ef6:	4621      	mov	r1, r4
 8016ef8:	4630      	mov	r0, r6
 8016efa:	f007 f981 	bl	801e200 <put_memory>
 8016efe:	42af      	cmp	r7, r5
 8016f00:	60a4      	str	r4, [r4, #8]
 8016f02:	f104 0420 	add.w	r4, r4, #32
 8016f06:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016f0a:	d1f3      	bne.n	8016ef4 <rmw_uxrce_init_guard_condition_memory+0x20>
 8016f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f10:	4770      	bx	lr
 8016f12:	bf00      	nop

08016f14 <rmw_uxrce_fini_session_memory>:
 8016f14:	4601      	mov	r1, r0
 8016f16:	4801      	ldr	r0, [pc, #4]	; (8016f1c <rmw_uxrce_fini_session_memory+0x8>)
 8016f18:	f007 b972 	b.w	801e200 <put_memory>
 8016f1c:	2001700c 	.word	0x2001700c

08016f20 <rmw_uxrce_fini_node_memory>:
 8016f20:	b538      	push	{r3, r4, r5, lr}
 8016f22:	4604      	mov	r4, r0
 8016f24:	6800      	ldr	r0, [r0, #0]
 8016f26:	b128      	cbz	r0, 8016f34 <rmw_uxrce_fini_node_memory+0x14>
 8016f28:	4b07      	ldr	r3, [pc, #28]	; (8016f48 <rmw_uxrce_fini_node_memory+0x28>)
 8016f2a:	6819      	ldr	r1, [r3, #0]
 8016f2c:	f7e9 f988 	bl	8000240 <strcmp>
 8016f30:	b940      	cbnz	r0, 8016f44 <rmw_uxrce_fini_node_memory+0x24>
 8016f32:	6020      	str	r0, [r4, #0]
 8016f34:	6861      	ldr	r1, [r4, #4]
 8016f36:	b129      	cbz	r1, 8016f44 <rmw_uxrce_fini_node_memory+0x24>
 8016f38:	2500      	movs	r5, #0
 8016f3a:	4804      	ldr	r0, [pc, #16]	; (8016f4c <rmw_uxrce_fini_node_memory+0x2c>)
 8016f3c:	610d      	str	r5, [r1, #16]
 8016f3e:	f007 f95f 	bl	801e200 <put_memory>
 8016f42:	6065      	str	r5, [r4, #4]
 8016f44:	bd38      	pop	{r3, r4, r5, pc}
 8016f46:	bf00      	nop
 8016f48:	08025cc4 	.word	0x08025cc4
 8016f4c:	20016fdc 	.word	0x20016fdc

08016f50 <rmw_uxrce_fini_publisher_memory>:
 8016f50:	b510      	push	{r4, lr}
 8016f52:	4604      	mov	r4, r0
 8016f54:	6800      	ldr	r0, [r0, #0]
 8016f56:	b128      	cbz	r0, 8016f64 <rmw_uxrce_fini_publisher_memory+0x14>
 8016f58:	4b06      	ldr	r3, [pc, #24]	; (8016f74 <rmw_uxrce_fini_publisher_memory+0x24>)
 8016f5a:	6819      	ldr	r1, [r3, #0]
 8016f5c:	f7e9 f970 	bl	8000240 <strcmp>
 8016f60:	b938      	cbnz	r0, 8016f72 <rmw_uxrce_fini_publisher_memory+0x22>
 8016f62:	6020      	str	r0, [r4, #0]
 8016f64:	6861      	ldr	r1, [r4, #4]
 8016f66:	b121      	cbz	r1, 8016f72 <rmw_uxrce_fini_publisher_memory+0x22>
 8016f68:	4803      	ldr	r0, [pc, #12]	; (8016f78 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016f6a:	f007 f949 	bl	801e200 <put_memory>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	6063      	str	r3, [r4, #4]
 8016f72:	bd10      	pop	{r4, pc}
 8016f74:	08025cc4 	.word	0x08025cc4
 8016f78:	20016fec 	.word	0x20016fec

08016f7c <rmw_uxrce_fini_subscription_memory>:
 8016f7c:	b510      	push	{r4, lr}
 8016f7e:	4604      	mov	r4, r0
 8016f80:	6800      	ldr	r0, [r0, #0]
 8016f82:	b128      	cbz	r0, 8016f90 <rmw_uxrce_fini_subscription_memory+0x14>
 8016f84:	4b06      	ldr	r3, [pc, #24]	; (8016fa0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016f86:	6819      	ldr	r1, [r3, #0]
 8016f88:	f7e9 f95a 	bl	8000240 <strcmp>
 8016f8c:	b938      	cbnz	r0, 8016f9e <rmw_uxrce_fini_subscription_memory+0x22>
 8016f8e:	6020      	str	r0, [r4, #0]
 8016f90:	6861      	ldr	r1, [r4, #4]
 8016f92:	b121      	cbz	r1, 8016f9e <rmw_uxrce_fini_subscription_memory+0x22>
 8016f94:	4803      	ldr	r0, [pc, #12]	; (8016fa4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8016f96:	f007 f933 	bl	801e200 <put_memory>
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	6063      	str	r3, [r4, #4]
 8016f9e:	bd10      	pop	{r4, pc}
 8016fa0:	08025cc4 	.word	0x08025cc4
 8016fa4:	2001702c 	.word	0x2001702c

08016fa8 <rmw_uxrce_fini_service_memory>:
 8016fa8:	b510      	push	{r4, lr}
 8016faa:	4604      	mov	r4, r0
 8016fac:	6800      	ldr	r0, [r0, #0]
 8016fae:	b128      	cbz	r0, 8016fbc <rmw_uxrce_fini_service_memory+0x14>
 8016fb0:	4b06      	ldr	r3, [pc, #24]	; (8016fcc <rmw_uxrce_fini_service_memory+0x24>)
 8016fb2:	6819      	ldr	r1, [r3, #0]
 8016fb4:	f7e9 f944 	bl	8000240 <strcmp>
 8016fb8:	b938      	cbnz	r0, 8016fca <rmw_uxrce_fini_service_memory+0x22>
 8016fba:	6020      	str	r0, [r4, #0]
 8016fbc:	6861      	ldr	r1, [r4, #4]
 8016fbe:	b121      	cbz	r1, 8016fca <rmw_uxrce_fini_service_memory+0x22>
 8016fc0:	4803      	ldr	r0, [pc, #12]	; (8016fd0 <rmw_uxrce_fini_service_memory+0x28>)
 8016fc2:	f007 f91d 	bl	801e200 <put_memory>
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	6063      	str	r3, [r4, #4]
 8016fca:	bd10      	pop	{r4, pc}
 8016fcc:	08025cc4 	.word	0x08025cc4
 8016fd0:	20016ffc 	.word	0x20016ffc

08016fd4 <rmw_uxrce_fini_client_memory>:
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	6800      	ldr	r0, [r0, #0]
 8016fda:	b128      	cbz	r0, 8016fe8 <rmw_uxrce_fini_client_memory+0x14>
 8016fdc:	4b06      	ldr	r3, [pc, #24]	; (8016ff8 <rmw_uxrce_fini_client_memory+0x24>)
 8016fde:	6819      	ldr	r1, [r3, #0]
 8016fe0:	f7e9 f92e 	bl	8000240 <strcmp>
 8016fe4:	b938      	cbnz	r0, 8016ff6 <rmw_uxrce_fini_client_memory+0x22>
 8016fe6:	6020      	str	r0, [r4, #0]
 8016fe8:	6861      	ldr	r1, [r4, #4]
 8016fea:	b121      	cbz	r1, 8016ff6 <rmw_uxrce_fini_client_memory+0x22>
 8016fec:	4803      	ldr	r0, [pc, #12]	; (8016ffc <rmw_uxrce_fini_client_memory+0x28>)
 8016fee:	f007 f907 	bl	801e200 <put_memory>
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	6063      	str	r3, [r4, #4]
 8016ff6:	bd10      	pop	{r4, pc}
 8016ff8:	08025cc4 	.word	0x08025cc4
 8016ffc:	2001270c 	.word	0x2001270c

08017000 <rmw_uxrce_fini_topic_memory>:
 8017000:	b510      	push	{r4, lr}
 8017002:	4604      	mov	r4, r0
 8017004:	4803      	ldr	r0, [pc, #12]	; (8017014 <rmw_uxrce_fini_topic_memory+0x14>)
 8017006:	4621      	mov	r1, r4
 8017008:	f007 f8fa 	bl	801e200 <put_memory>
 801700c:	2300      	movs	r3, #0
 801700e:	61a3      	str	r3, [r4, #24]
 8017010:	bd10      	pop	{r4, pc}
 8017012:	bf00      	nop
 8017014:	2001703c 	.word	0x2001703c

08017018 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8017018:	b082      	sub	sp, #8
 801701a:	492b      	ldr	r1, [pc, #172]	; (80170c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801701c:	b530      	push	{r4, r5, lr}
 801701e:	680d      	ldr	r5, [r1, #0]
 8017020:	ac03      	add	r4, sp, #12
 8017022:	e884 000c 	stmia.w	r4, {r2, r3}
 8017026:	461c      	mov	r4, r3
 8017028:	2d00      	cmp	r5, #0
 801702a:	d04b      	beq.n	80170c4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801702c:	462b      	mov	r3, r5
 801702e:	2100      	movs	r1, #0
 8017030:	689a      	ldr	r2, [r3, #8]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8017038:	4290      	cmp	r0, r2
 801703a:	bf08      	it	eq
 801703c:	3101      	addeq	r1, #1
 801703e:	2b00      	cmp	r3, #0
 8017040:	d1f6      	bne.n	8017030 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8017042:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017046:	2b02      	cmp	r3, #2
 8017048:	d029      	beq.n	801709e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801704a:	d820      	bhi.n	801708e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801704c:	428c      	cmp	r4, r1
 801704e:	d828      	bhi.n	80170a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8017050:	fab4 f284 	clz	r2, r4
 8017054:	0952      	lsrs	r2, r2, #5
 8017056:	b324      	cbz	r4, 80170a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8017058:	b1dd      	cbz	r5, 8017092 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801705a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801705e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8017062:	e001      	b.n	8017068 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8017064:	686d      	ldr	r5, [r5, #4]
 8017066:	b1ad      	cbz	r5, 8017094 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8017068:	68ab      	ldr	r3, [r5, #8]
 801706a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 801706e:	4288      	cmp	r0, r1
 8017070:	d1f8      	bne.n	8017064 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8017072:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8017076:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 801707a:	4561      	cmp	r1, ip
 801707c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017080:	eb73 0e04 	sbcs.w	lr, r3, r4
 8017084:	daee      	bge.n	8017064 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8017086:	468c      	mov	ip, r1
 8017088:	461c      	mov	r4, r3
 801708a:	462a      	mov	r2, r5
 801708c:	e7ea      	b.n	8017064 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801708e:	2b03      	cmp	r3, #3
 8017090:	d0dc      	beq.n	801704c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8017092:	2200      	movs	r2, #0
 8017094:	4610      	mov	r0, r2
 8017096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801709a:	b002      	add	sp, #8
 801709c:	4770      	bx	lr
 801709e:	428c      	cmp	r4, r1
 80170a0:	d905      	bls.n	80170ae <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80170a2:	4809      	ldr	r0, [pc, #36]	; (80170c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80170a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170a8:	b002      	add	sp, #8
 80170aa:	f007 b899 	b.w	801e1e0 <get_memory>
 80170ae:	fab4 f284 	clz	r2, r4
 80170b2:	0952      	lsrs	r2, r2, #5
 80170b4:	2c00      	cmp	r4, #0
 80170b6:	d1ed      	bne.n	8017094 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80170b8:	4803      	ldr	r0, [pc, #12]	; (80170c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80170ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170be:	b002      	add	sp, #8
 80170c0:	f007 b88e 	b.w	801e1e0 <get_memory>
 80170c4:	4629      	mov	r1, r5
 80170c6:	e7bc      	b.n	8017042 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80170c8:	2001701c 	.word	0x2001701c

080170cc <rmw_uxrce_find_static_input_buffer_by_owner>:
 80170cc:	4b12      	ldr	r3, [pc, #72]	; (8017118 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	b530      	push	{r4, r5, lr}
 80170d2:	b1f3      	cbz	r3, 8017112 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80170d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80170d8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 80170dc:	2400      	movs	r4, #0
 80170de:	e001      	b.n	80170e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80170e0:	685b      	ldr	r3, [r3, #4]
 80170e2:	b1a3      	cbz	r3, 801710e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80170e4:	689a      	ldr	r2, [r3, #8]
 80170e6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80170ea:	4288      	cmp	r0, r1
 80170ec:	d1f8      	bne.n	80170e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80170ee:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 80170f2:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 80170f6:	4571      	cmp	r1, lr
 80170f8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80170fc:	eb72 050c 	sbcs.w	r5, r2, ip
 8017100:	daee      	bge.n	80170e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8017102:	461c      	mov	r4, r3
 8017104:	685b      	ldr	r3, [r3, #4]
 8017106:	468e      	mov	lr, r1
 8017108:	4694      	mov	ip, r2
 801710a:	2b00      	cmp	r3, #0
 801710c:	d1ea      	bne.n	80170e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801710e:	4620      	mov	r0, r4
 8017110:	bd30      	pop	{r4, r5, pc}
 8017112:	461c      	mov	r4, r3
 8017114:	4620      	mov	r0, r4
 8017116:	bd30      	pop	{r4, r5, pc}
 8017118:	2001701c 	.word	0x2001701c
 801711c:	00000000 	.word	0x00000000

08017120 <rmw_uxrce_clean_expired_static_input_buffer>:
 8017120:	4b3d      	ldr	r3, [pc, #244]	; (8017218 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8017122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017126:	681f      	ldr	r7, [r3, #0]
 8017128:	ed2d 8b06 	vpush	{d8-d10}
 801712c:	b08d      	sub	sp, #52	; 0x34
 801712e:	f007 fae3 	bl	801e6f8 <rmw_uros_epoch_nanos>
 8017132:	2f00      	cmp	r7, #0
 8017134:	d05d      	beq.n	80171f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017136:	46b8      	mov	r8, r7
 8017138:	4681      	mov	r9, r0
 801713a:	468a      	mov	sl, r1
 801713c:	ac04      	add	r4, sp, #16
 801713e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017142:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8017146:	2b04      	cmp	r3, #4
 8017148:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8017200 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801714c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8017208 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8017150:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8017210 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8017154:	d03f      	beq.n	80171d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8017156:	2b05      	cmp	r3, #5
 8017158:	d044      	beq.n	80171e4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801715a:	2b03      	cmp	r3, #3
 801715c:	d03b      	beq.n	80171d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801715e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8017162:	ed8d ab06 	vstr	d10, [sp, #24]
 8017166:	ab08      	add	r3, sp, #32
 8017168:	ed8d 8b08 	vstr	d8, [sp, #32]
 801716c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8017170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017172:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017176:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801717a:	f006 fe45 	bl	801de08 <rmw_time_equal>
 801717e:	b118      	cbz	r0, 8017188 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8017180:	ed8d 9b04 	vstr	d9, [sp, #16]
 8017184:	ed8d 8b06 	vstr	d8, [sp, #24]
 8017188:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 801718c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8017190:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8017194:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8017198:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801719c:	f006 fe8a 	bl	801deb4 <rmw_time_total_nsec>
 80171a0:	1830      	adds	r0, r6, r0
 80171a2:	eb47 0101 	adc.w	r1, r7, r1
 80171a6:	4548      	cmp	r0, r9
 80171a8:	eb71 030a 	sbcs.w	r3, r1, sl
 80171ac:	db05      	blt.n	80171ba <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80171ae:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80171b2:	4591      	cmp	r9, r2
 80171b4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80171b8:	da03      	bge.n	80171c2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80171ba:	4641      	mov	r1, r8
 80171bc:	4816      	ldr	r0, [pc, #88]	; (8017218 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80171be:	f007 f81f 	bl	801e200 <put_memory>
 80171c2:	f1bb 0f00 	cmp.w	fp, #0
 80171c6:	d014      	beq.n	80171f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80171c8:	46d8      	mov	r8, fp
 80171ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80171ce:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 80171d2:	2b04      	cmp	r3, #4
 80171d4:	d1bf      	bne.n	8017156 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80171d6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80171da:	3340      	adds	r3, #64	; 0x40
 80171dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80171de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80171e2:	e7c0      	b.n	8017166 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80171e4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80171e8:	3348      	adds	r3, #72	; 0x48
 80171ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80171ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80171f0:	e7b9      	b.n	8017166 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80171f2:	b00d      	add	sp, #52	; 0x34
 80171f4:	ecbd 8b06 	vpop	{d8-d10}
 80171f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fc:	f3af 8000 	nop.w
	...
 8017208:	00000001 	.word	0x00000001
 801720c:	00000000 	.word	0x00000000
 8017210:	0000001e 	.word	0x0000001e
 8017214:	00000000 	.word	0x00000000
 8017218:	2001701c 	.word	0x2001701c

0801721c <run_xrce_session>:
 801721c:	b510      	push	{r4, lr}
 801721e:	788c      	ldrb	r4, [r1, #2]
 8017220:	b086      	sub	sp, #24
 8017222:	2c01      	cmp	r4, #1
 8017224:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017228:	d00c      	beq.n	8017244 <run_xrce_session+0x28>
 801722a:	2401      	movs	r4, #1
 801722c:	4619      	mov	r1, r3
 801722e:	f10d 020e 	add.w	r2, sp, #14
 8017232:	f10d 0317 	add.w	r3, sp, #23
 8017236:	9400      	str	r4, [sp, #0]
 8017238:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801723c:	f001 fd6c 	bl	8018d18 <uxr_run_session_until_all_status>
 8017240:	b006      	add	sp, #24
 8017242:	bd10      	pop	{r4, pc}
 8017244:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017248:	f001 f988 	bl	801855c <uxr_flash_output_streams>
 801724c:	4620      	mov	r0, r4
 801724e:	b006      	add	sp, #24
 8017250:	bd10      	pop	{r4, pc}
 8017252:	bf00      	nop

08017254 <convert_qos_profile>:
 8017254:	7a4a      	ldrb	r2, [r1, #9]
 8017256:	f891 c008 	ldrb.w	ip, [r1, #8]
 801725a:	2a02      	cmp	r2, #2
 801725c:	bf18      	it	ne
 801725e:	2200      	movne	r2, #0
 8017260:	7002      	strb	r2, [r0, #0]
 8017262:	f1ac 0202 	sub.w	r2, ip, #2
 8017266:	fab2 f282 	clz	r2, r2
 801726a:	0952      	lsrs	r2, r2, #5
 801726c:	7042      	strb	r2, [r0, #1]
 801726e:	780a      	ldrb	r2, [r1, #0]
 8017270:	8889      	ldrh	r1, [r1, #4]
 8017272:	f1a2 0202 	sub.w	r2, r2, #2
 8017276:	8081      	strh	r1, [r0, #4]
 8017278:	fab2 f282 	clz	r2, r2
 801727c:	0952      	lsrs	r2, r2, #5
 801727e:	7082      	strb	r2, [r0, #2]
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop

08017284 <generate_service_topics>:
 8017284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017286:	461d      	mov	r5, r3
 8017288:	b083      	sub	sp, #12
 801728a:	4606      	mov	r6, r0
 801728c:	4c11      	ldr	r4, [pc, #68]	; (80172d4 <generate_service_topics+0x50>)
 801728e:	4608      	mov	r0, r1
 8017290:	4b11      	ldr	r3, [pc, #68]	; (80172d8 <generate_service_topics+0x54>)
 8017292:	4617      	mov	r7, r2
 8017294:	4629      	mov	r1, r5
 8017296:	4a11      	ldr	r2, [pc, #68]	; (80172dc <generate_service_topics+0x58>)
 8017298:	9401      	str	r4, [sp, #4]
 801729a:	9600      	str	r6, [sp, #0]
 801729c:	f009 fcfe 	bl	8020c9c <sniprintf>
 80172a0:	4a0f      	ldr	r2, [pc, #60]	; (80172e0 <generate_service_topics+0x5c>)
 80172a2:	4604      	mov	r4, r0
 80172a4:	4b0f      	ldr	r3, [pc, #60]	; (80172e4 <generate_service_topics+0x60>)
 80172a6:	9201      	str	r2, [sp, #4]
 80172a8:	4638      	mov	r0, r7
 80172aa:	4a0c      	ldr	r2, [pc, #48]	; (80172dc <generate_service_topics+0x58>)
 80172ac:	4629      	mov	r1, r5
 80172ae:	9600      	str	r6, [sp, #0]
 80172b0:	f009 fcf4 	bl	8020c9c <sniprintf>
 80172b4:	2c00      	cmp	r4, #0
 80172b6:	bfa8      	it	ge
 80172b8:	42a5      	cmpge	r5, r4
 80172ba:	bfcc      	ite	gt
 80172bc:	2401      	movgt	r4, #1
 80172be:	2400      	movle	r4, #0
 80172c0:	dd05      	ble.n	80172ce <generate_service_topics+0x4a>
 80172c2:	2800      	cmp	r0, #0
 80172c4:	bfa8      	it	ge
 80172c6:	4285      	cmpge	r5, r0
 80172c8:	bfcc      	ite	gt
 80172ca:	2401      	movgt	r4, #1
 80172cc:	2400      	movle	r4, #0
 80172ce:	4620      	mov	r0, r4
 80172d0:	b003      	add	sp, #12
 80172d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172d4:	08025680 	.word	0x08025680
 80172d8:	0802567c 	.word	0x0802567c
 80172dc:	08025660 	.word	0x08025660
 80172e0:	08025674 	.word	0x08025674
 80172e4:	08025670 	.word	0x08025670

080172e8 <generate_service_types>:
 80172e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ec:	4606      	mov	r6, r0
 80172ee:	b087      	sub	sp, #28
 80172f0:	461c      	mov	r4, r3
 80172f2:	6883      	ldr	r3, [r0, #8]
 80172f4:	460d      	mov	r5, r1
 80172f6:	4617      	mov	r7, r2
 80172f8:	4798      	blx	r3
 80172fa:	68f3      	ldr	r3, [r6, #12]
 80172fc:	4606      	mov	r6, r0
 80172fe:	4798      	blx	r3
 8017300:	2300      	movs	r3, #0
 8017302:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8017306:	6872      	ldr	r2, [r6, #4]
 8017308:	702b      	strb	r3, [r5, #0]
 801730a:	6813      	ldr	r3, [r2, #0]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d03f      	beq.n	8017390 <generate_service_types+0xa8>
 8017310:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80173a4 <generate_service_types+0xbc>
 8017314:	4649      	mov	r1, r9
 8017316:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80173ac <generate_service_types+0xc4>
 801731a:	4628      	mov	r0, r5
 801731c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80173b0 <generate_service_types+0xc8>
 8017320:	f8cd 8014 	str.w	r8, [sp, #20]
 8017324:	6852      	ldr	r2, [r2, #4]
 8017326:	9100      	str	r1, [sp, #0]
 8017328:	4621      	mov	r1, r4
 801732a:	f8cd 8008 	str.w	r8, [sp, #8]
 801732e:	f8cd a004 	str.w	sl, [sp, #4]
 8017332:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017336:	4a1a      	ldr	r2, [pc, #104]	; (80173a0 <generate_service_types+0xb8>)
 8017338:	f009 fcb0 	bl	8020c9c <sniprintf>
 801733c:	2300      	movs	r3, #0
 801733e:	42a0      	cmp	r0, r4
 8017340:	ea6f 0600 	mvn.w	r6, r0
 8017344:	703b      	strb	r3, [r7, #0]
 8017346:	f8db 3000 	ldr.w	r3, [fp]
 801734a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801734e:	bfac      	ite	ge
 8017350:	2500      	movge	r5, #0
 8017352:	2501      	movlt	r5, #1
 8017354:	b30b      	cbz	r3, 801739a <generate_service_types+0xb2>
 8017356:	4a13      	ldr	r2, [pc, #76]	; (80173a4 <generate_service_types+0xbc>)
 8017358:	f8cd 8014 	str.w	r8, [sp, #20]
 801735c:	402e      	ands	r6, r5
 801735e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8017362:	4638      	mov	r0, r7
 8017364:	9104      	str	r1, [sp, #16]
 8017366:	4621      	mov	r1, r4
 8017368:	e9cd 2a00 	strd	r2, sl, [sp]
 801736c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017370:	4a0b      	ldr	r2, [pc, #44]	; (80173a0 <generate_service_types+0xb8>)
 8017372:	f009 fc93 	bl	8020c9c <sniprintf>
 8017376:	2800      	cmp	r0, #0
 8017378:	bfb4      	ite	lt
 801737a:	2600      	movlt	r6, #0
 801737c:	f006 0601 	andge.w	r6, r6, #1
 8017380:	42a0      	cmp	r0, r4
 8017382:	bfac      	ite	ge
 8017384:	2000      	movge	r0, #0
 8017386:	f006 0001 	andlt.w	r0, r6, #1
 801738a:	b007      	add	sp, #28
 801738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017390:	4b05      	ldr	r3, [pc, #20]	; (80173a8 <generate_service_types+0xc0>)
 8017392:	f8df 9010 	ldr.w	r9, [pc, #16]	; 80173a4 <generate_service_types+0xbc>
 8017396:	4619      	mov	r1, r3
 8017398:	e7bd      	b.n	8017316 <generate_service_types+0x2e>
 801739a:	4b03      	ldr	r3, [pc, #12]	; (80173a8 <generate_service_types+0xc0>)
 801739c:	461a      	mov	r2, r3
 801739e:	e7db      	b.n	8017358 <generate_service_types+0x70>
 80173a0:	08025658 	.word	0x08025658
 80173a4:	08025654 	.word	0x08025654
 80173a8:	080256d8 	.word	0x080256d8
 80173ac:	08025668 	.word	0x08025668
 80173b0:	0802566c 	.word	0x0802566c

080173b4 <generate_type_name>:
 80173b4:	2300      	movs	r3, #0
 80173b6:	b530      	push	{r4, r5, lr}
 80173b8:	700b      	strb	r3, [r1, #0]
 80173ba:	b087      	sub	sp, #28
 80173bc:	6803      	ldr	r3, [r0, #0]
 80173be:	4614      	mov	r4, r2
 80173c0:	b1bb      	cbz	r3, 80173f2 <generate_type_name+0x3e>
 80173c2:	4a0e      	ldr	r2, [pc, #56]	; (80173fc <generate_type_name+0x48>)
 80173c4:	4615      	mov	r5, r2
 80173c6:	9500      	str	r5, [sp, #0]
 80173c8:	9203      	str	r2, [sp, #12]
 80173ca:	4d0d      	ldr	r5, [pc, #52]	; (8017400 <generate_type_name+0x4c>)
 80173cc:	6842      	ldr	r2, [r0, #4]
 80173ce:	4608      	mov	r0, r1
 80173d0:	490c      	ldr	r1, [pc, #48]	; (8017404 <generate_type_name+0x50>)
 80173d2:	9204      	str	r2, [sp, #16]
 80173d4:	9105      	str	r1, [sp, #20]
 80173d6:	9102      	str	r1, [sp, #8]
 80173d8:	4621      	mov	r1, r4
 80173da:	4a0b      	ldr	r2, [pc, #44]	; (8017408 <generate_type_name+0x54>)
 80173dc:	9501      	str	r5, [sp, #4]
 80173de:	f009 fc5d 	bl	8020c9c <sniprintf>
 80173e2:	2800      	cmp	r0, #0
 80173e4:	bfa8      	it	ge
 80173e6:	4284      	cmpge	r4, r0
 80173e8:	bfcc      	ite	gt
 80173ea:	2001      	movgt	r0, #1
 80173ec:	2000      	movle	r0, #0
 80173ee:	b007      	add	sp, #28
 80173f0:	bd30      	pop	{r4, r5, pc}
 80173f2:	4b06      	ldr	r3, [pc, #24]	; (801740c <generate_type_name+0x58>)
 80173f4:	4a01      	ldr	r2, [pc, #4]	; (80173fc <generate_type_name+0x48>)
 80173f6:	461d      	mov	r5, r3
 80173f8:	e7e5      	b.n	80173c6 <generate_type_name+0x12>
 80173fa:	bf00      	nop
 80173fc:	08025654 	.word	0x08025654
 8017400:	0802566c 	.word	0x0802566c
 8017404:	08025668 	.word	0x08025668
 8017408:	08025658 	.word	0x08025658
 801740c:	080256d8 	.word	0x080256d8

08017410 <generate_topic_name>:
 8017410:	b530      	push	{r4, r5, lr}
 8017412:	4614      	mov	r4, r2
 8017414:	b083      	sub	sp, #12
 8017416:	4605      	mov	r5, r0
 8017418:	4b07      	ldr	r3, [pc, #28]	; (8017438 <generate_topic_name+0x28>)
 801741a:	4a08      	ldr	r2, [pc, #32]	; (801743c <generate_topic_name+0x2c>)
 801741c:	4608      	mov	r0, r1
 801741e:	9500      	str	r5, [sp, #0]
 8017420:	4621      	mov	r1, r4
 8017422:	f009 fc3b 	bl	8020c9c <sniprintf>
 8017426:	2800      	cmp	r0, #0
 8017428:	bfa8      	it	ge
 801742a:	4284      	cmpge	r4, r0
 801742c:	bfcc      	ite	gt
 801742e:	2001      	movgt	r0, #1
 8017430:	2000      	movle	r0, #0
 8017432:	b003      	add	sp, #12
 8017434:	bd30      	pop	{r4, r5, pc}
 8017436:	bf00      	nop
 8017438:	08025688 	.word	0x08025688
 801743c:	08025058 	.word	0x08025058

08017440 <is_uxrce_rmw_identifier_valid>:
 8017440:	b510      	push	{r4, lr}
 8017442:	4604      	mov	r4, r0
 8017444:	b140      	cbz	r0, 8017458 <is_uxrce_rmw_identifier_valid+0x18>
 8017446:	f006 ff33 	bl	801e2b0 <rmw_get_implementation_identifier>
 801744a:	4601      	mov	r1, r0
 801744c:	4620      	mov	r0, r4
 801744e:	f7e8 fef7 	bl	8000240 <strcmp>
 8017452:	fab0 f080 	clz	r0, r0
 8017456:	0940      	lsrs	r0, r0, #5
 8017458:	bd10      	pop	{r4, pc}
 801745a:	bf00      	nop

0801745c <get_message_typesupport_handle>:
 801745c:	6883      	ldr	r3, [r0, #8]
 801745e:	4718      	bx	r3

08017460 <get_message_typesupport_handle_function>:
 8017460:	b510      	push	{r4, lr}
 8017462:	4604      	mov	r4, r0
 8017464:	6800      	ldr	r0, [r0, #0]
 8017466:	f7e8 feeb 	bl	8000240 <strcmp>
 801746a:	2800      	cmp	r0, #0
 801746c:	bf0c      	ite	eq
 801746e:	4620      	moveq	r0, r4
 8017470:	2000      	movne	r0, #0
 8017472:	bd10      	pop	{r4, pc}

08017474 <get_service_typesupport_handle>:
 8017474:	6883      	ldr	r3, [r0, #8]
 8017476:	4718      	bx	r3

08017478 <get_service_typesupport_handle_function>:
 8017478:	b510      	push	{r4, lr}
 801747a:	4604      	mov	r4, r0
 801747c:	6800      	ldr	r0, [r0, #0]
 801747e:	f7e8 fedf 	bl	8000240 <strcmp>
 8017482:	2800      	cmp	r0, #0
 8017484:	bf0c      	ite	eq
 8017486:	4620      	moveq	r0, r4
 8017488:	2000      	movne	r0, #0
 801748a:	bd10      	pop	{r4, pc}

0801748c <rosidl_runtime_c__String__init>:
 801748c:	b510      	push	{r4, lr}
 801748e:	4604      	mov	r4, r0
 8017490:	b086      	sub	sp, #24
 8017492:	b170      	cbz	r0, 80174b2 <rosidl_runtime_c__String__init+0x26>
 8017494:	a801      	add	r0, sp, #4
 8017496:	f7fd feef 	bl	8015278 <rcutils_get_default_allocator>
 801749a:	9b01      	ldr	r3, [sp, #4]
 801749c:	9905      	ldr	r1, [sp, #20]
 801749e:	2001      	movs	r0, #1
 80174a0:	4798      	blx	r3
 80174a2:	6020      	str	r0, [r4, #0]
 80174a4:	b128      	cbz	r0, 80174b2 <rosidl_runtime_c__String__init+0x26>
 80174a6:	2100      	movs	r1, #0
 80174a8:	2201      	movs	r2, #1
 80174aa:	7001      	strb	r1, [r0, #0]
 80174ac:	4610      	mov	r0, r2
 80174ae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80174b2:	b006      	add	sp, #24
 80174b4:	bd10      	pop	{r4, pc}
 80174b6:	bf00      	nop

080174b8 <rosidl_runtime_c__String__fini>:
 80174b8:	b320      	cbz	r0, 8017504 <rosidl_runtime_c__String__fini+0x4c>
 80174ba:	6803      	ldr	r3, [r0, #0]
 80174bc:	b510      	push	{r4, lr}
 80174be:	4604      	mov	r4, r0
 80174c0:	b086      	sub	sp, #24
 80174c2:	b173      	cbz	r3, 80174e2 <rosidl_runtime_c__String__fini+0x2a>
 80174c4:	6883      	ldr	r3, [r0, #8]
 80174c6:	b1f3      	cbz	r3, 8017506 <rosidl_runtime_c__String__fini+0x4e>
 80174c8:	a801      	add	r0, sp, #4
 80174ca:	f7fd fed5 	bl	8015278 <rcutils_get_default_allocator>
 80174ce:	9b02      	ldr	r3, [sp, #8]
 80174d0:	9905      	ldr	r1, [sp, #20]
 80174d2:	6820      	ldr	r0, [r4, #0]
 80174d4:	4798      	blx	r3
 80174d6:	2300      	movs	r3, #0
 80174d8:	e9c4 3300 	strd	r3, r3, [r4]
 80174dc:	60a3      	str	r3, [r4, #8]
 80174de:	b006      	add	sp, #24
 80174e0:	bd10      	pop	{r4, pc}
 80174e2:	6843      	ldr	r3, [r0, #4]
 80174e4:	b9db      	cbnz	r3, 801751e <rosidl_runtime_c__String__fini+0x66>
 80174e6:	6883      	ldr	r3, [r0, #8]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d0f8      	beq.n	80174de <rosidl_runtime_c__String__fini+0x26>
 80174ec:	4b12      	ldr	r3, [pc, #72]	; (8017538 <rosidl_runtime_c__String__fini+0x80>)
 80174ee:	2251      	movs	r2, #81	; 0x51
 80174f0:	2101      	movs	r1, #1
 80174f2:	4812      	ldr	r0, [pc, #72]	; (801753c <rosidl_runtime_c__String__fini+0x84>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	f009 faa6 	bl	8020a48 <fwrite>
 80174fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017500:	f008 f91e 	bl	801f740 <exit>
 8017504:	4770      	bx	lr
 8017506:	4b0c      	ldr	r3, [pc, #48]	; (8017538 <rosidl_runtime_c__String__fini+0x80>)
 8017508:	224c      	movs	r2, #76	; 0x4c
 801750a:	2101      	movs	r1, #1
 801750c:	480c      	ldr	r0, [pc, #48]	; (8017540 <rosidl_runtime_c__String__fini+0x88>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	68db      	ldr	r3, [r3, #12]
 8017512:	f009 fa99 	bl	8020a48 <fwrite>
 8017516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801751a:	f008 f911 	bl	801f740 <exit>
 801751e:	4b06      	ldr	r3, [pc, #24]	; (8017538 <rosidl_runtime_c__String__fini+0x80>)
 8017520:	224e      	movs	r2, #78	; 0x4e
 8017522:	2101      	movs	r1, #1
 8017524:	4807      	ldr	r0, [pc, #28]	; (8017544 <rosidl_runtime_c__String__fini+0x8c>)
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	68db      	ldr	r3, [r3, #12]
 801752a:	f009 fa8d 	bl	8020a48 <fwrite>
 801752e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017532:	f008 f905 	bl	801f740 <exit>
 8017536:	bf00      	nop
 8017538:	200009d8 	.word	0x200009d8
 801753c:	0802572c 	.word	0x0802572c
 8017540:	0802568c 	.word	0x0802568c
 8017544:	080256dc 	.word	0x080256dc

08017548 <rosidl_runtime_c__String__assignn>:
 8017548:	2900      	cmp	r1, #0
 801754a:	bf18      	it	ne
 801754c:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8017550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017554:	bf0c      	ite	eq
 8017556:	2401      	moveq	r4, #1
 8017558:	2400      	movne	r4, #0
 801755a:	b087      	sub	sp, #28
 801755c:	2800      	cmp	r0, #0
 801755e:	bf08      	it	eq
 8017560:	f044 0401 	orreq.w	r4, r4, #1
 8017564:	b124      	cbz	r4, 8017570 <rosidl_runtime_c__String__assignn+0x28>
 8017566:	2400      	movs	r4, #0
 8017568:	4620      	mov	r0, r4
 801756a:	b007      	add	sp, #28
 801756c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017570:	4616      	mov	r6, r2
 8017572:	4605      	mov	r5, r0
 8017574:	a801      	add	r0, sp, #4
 8017576:	460f      	mov	r7, r1
 8017578:	f106 0901 	add.w	r9, r6, #1
 801757c:	f7fd fe7c 	bl	8015278 <rcutils_get_default_allocator>
 8017580:	9b03      	ldr	r3, [sp, #12]
 8017582:	9a05      	ldr	r2, [sp, #20]
 8017584:	4649      	mov	r1, r9
 8017586:	6828      	ldr	r0, [r5, #0]
 8017588:	4798      	blx	r3
 801758a:	4680      	mov	r8, r0
 801758c:	2800      	cmp	r0, #0
 801758e:	d0eb      	beq.n	8017568 <rosidl_runtime_c__String__assignn+0x20>
 8017590:	4639      	mov	r1, r7
 8017592:	4632      	mov	r2, r6
 8017594:	f009 fddf 	bl	8021156 <memcpy>
 8017598:	f808 4006 	strb.w	r4, [r8, r6]
 801759c:	2401      	movs	r4, #1
 801759e:	f8c5 9008 	str.w	r9, [r5, #8]
 80175a2:	4620      	mov	r0, r4
 80175a4:	e9c5 8600 	strd	r8, r6, [r5]
 80175a8:	b007      	add	sp, #28
 80175aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175ae:	bf00      	nop

080175b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80175b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b4:	6805      	ldr	r5, [r0, #0]
 80175b6:	4604      	mov	r4, r0
 80175b8:	460e      	mov	r6, r1
 80175ba:	4628      	mov	r0, r5
 80175bc:	f7e8 fe40 	bl	8000240 <strcmp>
 80175c0:	b1c8      	cbz	r0, 80175f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80175c2:	4b11      	ldr	r3, [pc, #68]	; (8017608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	429d      	cmp	r5, r3
 80175c8:	d112      	bne.n	80175f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80175ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80175ce:	f8d8 4000 	ldr.w	r4, [r8]
 80175d2:	b16c      	cbz	r4, 80175f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80175d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80175d8:	2700      	movs	r7, #0
 80175da:	3d04      	subs	r5, #4
 80175dc:	4631      	mov	r1, r6
 80175de:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80175e2:	f7e8 fe2d 	bl	8000240 <strcmp>
 80175e6:	00bb      	lsls	r3, r7, #2
 80175e8:	b140      	cbz	r0, 80175fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80175ea:	3701      	adds	r7, #1
 80175ec:	42bc      	cmp	r4, r7
 80175ee:	d1f5      	bne.n	80175dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80175f0:	2000      	movs	r0, #0
 80175f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f6:	4620      	mov	r0, r4
 80175f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017604:	58d3      	ldr	r3, [r2, r3]
 8017606:	4718      	bx	r3
 8017608:	200008f4 	.word	0x200008f4

0801760c <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 801760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017610:	6805      	ldr	r5, [r0, #0]
 8017612:	4604      	mov	r4, r0
 8017614:	460e      	mov	r6, r1
 8017616:	4628      	mov	r0, r5
 8017618:	f7e8 fe12 	bl	8000240 <strcmp>
 801761c:	b1c8      	cbz	r0, 8017652 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801761e:	4b11      	ldr	r3, [pc, #68]	; (8017664 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	429d      	cmp	r5, r3
 8017624:	d112      	bne.n	801764c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017626:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801762a:	f8d8 4000 	ldr.w	r4, [r8]
 801762e:	b16c      	cbz	r4, 801764c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017630:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017634:	2700      	movs	r7, #0
 8017636:	3d04      	subs	r5, #4
 8017638:	4631      	mov	r1, r6
 801763a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801763e:	f7e8 fdff 	bl	8000240 <strcmp>
 8017642:	00bb      	lsls	r3, r7, #2
 8017644:	b140      	cbz	r0, 8017658 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8017646:	3701      	adds	r7, #1
 8017648:	42bc      	cmp	r4, r7
 801764a:	d1f5      	bne.n	8017638 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801764c:	2000      	movs	r0, #0
 801764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017652:	4620      	mov	r0, r4
 8017654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017658:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801765c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017660:	58d3      	ldr	r3, [r2, r3]
 8017662:	4718      	bx	r3
 8017664:	200008f4 	.word	0x200008f4

08017668 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017668:	4b04      	ldr	r3, [pc, #16]	; (801767c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	b10a      	cbz	r2, 8017672 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801766e:	4803      	ldr	r0, [pc, #12]	; (801767c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017670:	4770      	bx	lr
 8017672:	4a03      	ldr	r2, [pc, #12]	; (8017680 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8017674:	4801      	ldr	r0, [pc, #4]	; (801767c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017676:	6812      	ldr	r2, [r2, #0]
 8017678:	601a      	str	r2, [r3, #0]
 801767a:	4770      	bx	lr
 801767c:	20000904 	.word	0x20000904
 8017680:	200008f4 	.word	0x200008f4

08017684 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017684:	4a02      	ldr	r2, [pc, #8]	; (8017690 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8017686:	4b03      	ldr	r3, [pc, #12]	; (8017694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8017688:	6812      	ldr	r2, [r2, #0]
 801768a:	601a      	str	r2, [r3, #0]
 801768c:	4770      	bx	lr
 801768e:	bf00      	nop
 8017690:	200008f4 	.word	0x200008f4
 8017694:	20000904 	.word	0x20000904

08017698 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8017698:	f007 b83c 	b.w	801e714 <std_msgs__msg__String__init>

0801769c <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 801769c:	f007 b84c 	b.w	801e738 <std_msgs__msg__String__fini>

080176a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 80176a0:	4b04      	ldr	r3, [pc, #16]	; (80176b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	b10a      	cbz	r2, 80176aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80176a6:	4803      	ldr	r0, [pc, #12]	; (80176b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80176a8:	4770      	bx	lr
 80176aa:	4a03      	ldr	r2, [pc, #12]	; (80176b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80176ac:	4801      	ldr	r0, [pc, #4]	; (80176b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80176ae:	6812      	ldr	r2, [r2, #0]
 80176b0:	601a      	str	r2, [r3, #0]
 80176b2:	4770      	bx	lr
 80176b4:	2000094c 	.word	0x2000094c
 80176b8:	200008f8 	.word	0x200008f8

080176bc <_String__max_serialized_size>:
 80176bc:	2000      	movs	r0, #0
 80176be:	4770      	bx	lr

080176c0 <_String__cdr_serialize>:
 80176c0:	b1c8      	cbz	r0, 80176f6 <_String__cdr_serialize+0x36>
 80176c2:	b570      	push	{r4, r5, r6, lr}
 80176c4:	6806      	ldr	r6, [r0, #0]
 80176c6:	4604      	mov	r4, r0
 80176c8:	460d      	mov	r5, r1
 80176ca:	b15e      	cbz	r6, 80176e4 <_String__cdr_serialize+0x24>
 80176cc:	4630      	mov	r0, r6
 80176ce:	f7e8 fe17 	bl	8000300 <strlen>
 80176d2:	4603      	mov	r3, r0
 80176d4:	1c42      	adds	r2, r0, #1
 80176d6:	4631      	mov	r1, r6
 80176d8:	4628      	mov	r0, r5
 80176da:	6063      	str	r3, [r4, #4]
 80176dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176e0:	f7fb bf76 	b.w	80135d0 <ucdr_serialize_sequence_char>
 80176e4:	4633      	mov	r3, r6
 80176e6:	4632      	mov	r2, r6
 80176e8:	4631      	mov	r1, r6
 80176ea:	4628      	mov	r0, r5
 80176ec:	6063      	str	r3, [r4, #4]
 80176ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176f2:	f7fb bf6d 	b.w	80135d0 <ucdr_serialize_sequence_char>
 80176f6:	4770      	bx	lr

080176f8 <get_serialized_size_std_msgs__msg__String>:
 80176f8:	b510      	push	{r4, lr}
 80176fa:	4604      	mov	r4, r0
 80176fc:	b130      	cbz	r0, 801770c <get_serialized_size_std_msgs__msg__String+0x14>
 80176fe:	4608      	mov	r0, r1
 8017700:	2104      	movs	r1, #4
 8017702:	f7fb fef5 	bl	80134f0 <ucdr_alignment>
 8017706:	6863      	ldr	r3, [r4, #4]
 8017708:	3305      	adds	r3, #5
 801770a:	4418      	add	r0, r3
 801770c:	bd10      	pop	{r4, pc}
 801770e:	bf00      	nop

08017710 <_String__cdr_deserialize>:
 8017710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017712:	460c      	mov	r4, r1
 8017714:	b083      	sub	sp, #12
 8017716:	b1a1      	cbz	r1, 8017742 <_String__cdr_deserialize+0x32>
 8017718:	688f      	ldr	r7, [r1, #8]
 801771a:	ab01      	add	r3, sp, #4
 801771c:	6809      	ldr	r1, [r1, #0]
 801771e:	4606      	mov	r6, r0
 8017720:	463a      	mov	r2, r7
 8017722:	f7fb ff67 	bl	80135f4 <ucdr_deserialize_sequence_char>
 8017726:	9b01      	ldr	r3, [sp, #4]
 8017728:	4605      	mov	r5, r0
 801772a:	b920      	cbnz	r0, 8017736 <_String__cdr_deserialize+0x26>
 801772c:	429f      	cmp	r7, r3
 801772e:	d30c      	bcc.n	801774a <_String__cdr_deserialize+0x3a>
 8017730:	4628      	mov	r0, r5
 8017732:	b003      	add	sp, #12
 8017734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017736:	b103      	cbz	r3, 801773a <_String__cdr_deserialize+0x2a>
 8017738:	3b01      	subs	r3, #1
 801773a:	4628      	mov	r0, r5
 801773c:	6063      	str	r3, [r4, #4]
 801773e:	b003      	add	sp, #12
 8017740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017742:	460d      	mov	r5, r1
 8017744:	4628      	mov	r0, r5
 8017746:	b003      	add	sp, #12
 8017748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801774a:	2101      	movs	r1, #1
 801774c:	4630      	mov	r0, r6
 801774e:	75b5      	strb	r5, [r6, #22]
 8017750:	7571      	strb	r1, [r6, #21]
 8017752:	6065      	str	r5, [r4, #4]
 8017754:	f7fb fee4 	bl	8013520 <ucdr_align_to>
 8017758:	4630      	mov	r0, r6
 801775a:	9901      	ldr	r1, [sp, #4]
 801775c:	f7fb ff18 	bl	8013590 <ucdr_advance_buffer>
 8017760:	4628      	mov	r0, r5
 8017762:	b003      	add	sp, #12
 8017764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017766:	bf00      	nop

08017768 <_String__get_serialized_size>:
 8017768:	b510      	push	{r4, lr}
 801776a:	4604      	mov	r4, r0
 801776c:	b130      	cbz	r0, 801777c <_String__get_serialized_size+0x14>
 801776e:	2104      	movs	r1, #4
 8017770:	2000      	movs	r0, #0
 8017772:	f7fb febd 	bl	80134f0 <ucdr_alignment>
 8017776:	6863      	ldr	r3, [r4, #4]
 8017778:	3305      	adds	r3, #5
 801777a:	4418      	add	r0, r3
 801777c:	bd10      	pop	{r4, pc}
 801777e:	bf00      	nop

08017780 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017780:	4800      	ldr	r0, [pc, #0]	; (8017784 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8017782:	4770      	bx	lr
 8017784:	20000958 	.word	0x20000958

08017788 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8017788:	3800      	subs	r0, #0
 801778a:	bf18      	it	ne
 801778c:	2001      	movne	r0, #1
 801778e:	4770      	bx	lr

08017790 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8017790:	4770      	bx	lr
 8017792:	bf00      	nop

08017794 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 8017794:	3800      	subs	r0, #0
 8017796:	bf18      	it	ne
 8017798:	2001      	movne	r0, #1
 801779a:	4770      	bx	lr

0801779c <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 801779c:	4770      	bx	lr
 801779e:	bf00      	nop

080177a0 <drive_msgs__msg__Omni__init>:
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4604      	mov	r4, r0
 80177a4:	b128      	cbz	r0, 80177b2 <drive_msgs__msg__Omni__init+0x12>
 80177a6:	f7ff fe71 	bl	801748c <rosidl_runtime_c__String__init>
 80177aa:	4605      	mov	r5, r0
 80177ac:	b120      	cbz	r0, 80177b8 <drive_msgs__msg__Omni__init+0x18>
 80177ae:	4628      	mov	r0, r5
 80177b0:	bd38      	pop	{r3, r4, r5, pc}
 80177b2:	4605      	mov	r5, r0
 80177b4:	4628      	mov	r0, r5
 80177b6:	bd38      	pop	{r3, r4, r5, pc}
 80177b8:	4620      	mov	r0, r4
 80177ba:	f7ff fe7d 	bl	80174b8 <rosidl_runtime_c__String__fini>
 80177be:	4628      	mov	r0, r5
 80177c0:	bd38      	pop	{r3, r4, r5, pc}
 80177c2:	bf00      	nop

080177c4 <drive_msgs__msg__Omni__fini>:
 80177c4:	b108      	cbz	r0, 80177ca <drive_msgs__msg__Omni__fini+0x6>
 80177c6:	f7ff be77 	b.w	80174b8 <rosidl_runtime_c__String__fini>
 80177ca:	4770      	bx	lr

080177cc <drive_msgs__msg__OmniEnc__init>:
 80177cc:	b538      	push	{r3, r4, r5, lr}
 80177ce:	4604      	mov	r4, r0
 80177d0:	b128      	cbz	r0, 80177de <drive_msgs__msg__OmniEnc__init+0x12>
 80177d2:	f7ff fe5b 	bl	801748c <rosidl_runtime_c__String__init>
 80177d6:	4605      	mov	r5, r0
 80177d8:	b120      	cbz	r0, 80177e4 <drive_msgs__msg__OmniEnc__init+0x18>
 80177da:	4628      	mov	r0, r5
 80177dc:	bd38      	pop	{r3, r4, r5, pc}
 80177de:	4605      	mov	r5, r0
 80177e0:	4628      	mov	r0, r5
 80177e2:	bd38      	pop	{r3, r4, r5, pc}
 80177e4:	4620      	mov	r0, r4
 80177e6:	f7ff fe67 	bl	80174b8 <rosidl_runtime_c__String__fini>
 80177ea:	4628      	mov	r0, r5
 80177ec:	bd38      	pop	{r3, r4, r5, pc}
 80177ee:	bf00      	nop

080177f0 <drive_msgs__msg__OmniEnc__fini>:
 80177f0:	b108      	cbz	r0, 80177f6 <drive_msgs__msg__OmniEnc__fini+0x6>
 80177f2:	f7ff be61 	b.w	80174b8 <rosidl_runtime_c__String__fini>
 80177f6:	4770      	bx	lr

080177f8 <manip_msgs__msg__Cmd__init>:
 80177f8:	3800      	subs	r0, #0
 80177fa:	bf18      	it	ne
 80177fc:	2001      	movne	r0, #1
 80177fe:	4770      	bx	lr

08017800 <manip_msgs__msg__Cmd__fini>:
 8017800:	4770      	bx	lr
 8017802:	bf00      	nop

08017804 <ucdr_serialize_endian_array_char>:
 8017804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017808:	4619      	mov	r1, r3
 801780a:	461f      	mov	r7, r3
 801780c:	4605      	mov	r5, r0
 801780e:	4690      	mov	r8, r2
 8017810:	f7fb fe16 	bl	8013440 <ucdr_check_buffer_available_for>
 8017814:	b9e0      	cbnz	r0, 8017850 <ucdr_serialize_endian_array_char+0x4c>
 8017816:	463e      	mov	r6, r7
 8017818:	e00b      	b.n	8017832 <ucdr_serialize_endian_array_char+0x2e>
 801781a:	4441      	add	r1, r8
 801781c:	68a8      	ldr	r0, [r5, #8]
 801781e:	4622      	mov	r2, r4
 8017820:	1b36      	subs	r6, r6, r4
 8017822:	f009 fc98 	bl	8021156 <memcpy>
 8017826:	68ab      	ldr	r3, [r5, #8]
 8017828:	6928      	ldr	r0, [r5, #16]
 801782a:	4423      	add	r3, r4
 801782c:	4420      	add	r0, r4
 801782e:	60ab      	str	r3, [r5, #8]
 8017830:	6128      	str	r0, [r5, #16]
 8017832:	4631      	mov	r1, r6
 8017834:	2201      	movs	r2, #1
 8017836:	4628      	mov	r0, r5
 8017838:	f7fb fe8c 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 801783c:	1bb9      	subs	r1, r7, r6
 801783e:	4604      	mov	r4, r0
 8017840:	2800      	cmp	r0, #0
 8017842:	d1ea      	bne.n	801781a <ucdr_serialize_endian_array_char+0x16>
 8017844:	2301      	movs	r3, #1
 8017846:	7da8      	ldrb	r0, [r5, #22]
 8017848:	756b      	strb	r3, [r5, #21]
 801784a:	4058      	eors	r0, r3
 801784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017850:	463a      	mov	r2, r7
 8017852:	4641      	mov	r1, r8
 8017854:	68a8      	ldr	r0, [r5, #8]
 8017856:	f009 fc7e 	bl	8021156 <memcpy>
 801785a:	68aa      	ldr	r2, [r5, #8]
 801785c:	692b      	ldr	r3, [r5, #16]
 801785e:	443a      	add	r2, r7
 8017860:	443b      	add	r3, r7
 8017862:	60aa      	str	r2, [r5, #8]
 8017864:	612b      	str	r3, [r5, #16]
 8017866:	e7ed      	b.n	8017844 <ucdr_serialize_endian_array_char+0x40>

08017868 <ucdr_deserialize_endian_array_char>:
 8017868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801786c:	4619      	mov	r1, r3
 801786e:	461f      	mov	r7, r3
 8017870:	4605      	mov	r5, r0
 8017872:	4690      	mov	r8, r2
 8017874:	f7fb fde4 	bl	8013440 <ucdr_check_buffer_available_for>
 8017878:	b9e8      	cbnz	r0, 80178b6 <ucdr_deserialize_endian_array_char+0x4e>
 801787a:	463e      	mov	r6, r7
 801787c:	e00c      	b.n	8017898 <ucdr_deserialize_endian_array_char+0x30>
 801787e:	eb08 0003 	add.w	r0, r8, r3
 8017882:	68a9      	ldr	r1, [r5, #8]
 8017884:	4622      	mov	r2, r4
 8017886:	1b36      	subs	r6, r6, r4
 8017888:	f009 fc65 	bl	8021156 <memcpy>
 801788c:	68ab      	ldr	r3, [r5, #8]
 801788e:	6928      	ldr	r0, [r5, #16]
 8017890:	4423      	add	r3, r4
 8017892:	4420      	add	r0, r4
 8017894:	60ab      	str	r3, [r5, #8]
 8017896:	6128      	str	r0, [r5, #16]
 8017898:	4631      	mov	r1, r6
 801789a:	2201      	movs	r2, #1
 801789c:	4628      	mov	r0, r5
 801789e:	f7fb fe59 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 80178a2:	1bbb      	subs	r3, r7, r6
 80178a4:	4604      	mov	r4, r0
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d1e9      	bne.n	801787e <ucdr_deserialize_endian_array_char+0x16>
 80178aa:	2301      	movs	r3, #1
 80178ac:	7da8      	ldrb	r0, [r5, #22]
 80178ae:	756b      	strb	r3, [r5, #21]
 80178b0:	4058      	eors	r0, r3
 80178b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b6:	463a      	mov	r2, r7
 80178b8:	68a9      	ldr	r1, [r5, #8]
 80178ba:	4640      	mov	r0, r8
 80178bc:	f009 fc4b 	bl	8021156 <memcpy>
 80178c0:	68aa      	ldr	r2, [r5, #8]
 80178c2:	692b      	ldr	r3, [r5, #16]
 80178c4:	443a      	add	r2, r7
 80178c6:	443b      	add	r3, r7
 80178c8:	60aa      	str	r2, [r5, #8]
 80178ca:	612b      	str	r3, [r5, #16]
 80178cc:	e7ed      	b.n	80178aa <ucdr_deserialize_endian_array_char+0x42>
 80178ce:	bf00      	nop

080178d0 <ucdr_serialize_array_uint8_t>:
 80178d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178d4:	4688      	mov	r8, r1
 80178d6:	4611      	mov	r1, r2
 80178d8:	4617      	mov	r7, r2
 80178da:	4605      	mov	r5, r0
 80178dc:	f7fb fdb0 	bl	8013440 <ucdr_check_buffer_available_for>
 80178e0:	b9e0      	cbnz	r0, 801791c <ucdr_serialize_array_uint8_t+0x4c>
 80178e2:	463e      	mov	r6, r7
 80178e4:	e00b      	b.n	80178fe <ucdr_serialize_array_uint8_t+0x2e>
 80178e6:	4441      	add	r1, r8
 80178e8:	68a8      	ldr	r0, [r5, #8]
 80178ea:	4622      	mov	r2, r4
 80178ec:	1b36      	subs	r6, r6, r4
 80178ee:	f009 fc32 	bl	8021156 <memcpy>
 80178f2:	68ab      	ldr	r3, [r5, #8]
 80178f4:	6928      	ldr	r0, [r5, #16]
 80178f6:	4423      	add	r3, r4
 80178f8:	4420      	add	r0, r4
 80178fa:	60ab      	str	r3, [r5, #8]
 80178fc:	6128      	str	r0, [r5, #16]
 80178fe:	4631      	mov	r1, r6
 8017900:	2201      	movs	r2, #1
 8017902:	4628      	mov	r0, r5
 8017904:	f7fb fe26 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 8017908:	1bb9      	subs	r1, r7, r6
 801790a:	4604      	mov	r4, r0
 801790c:	2800      	cmp	r0, #0
 801790e:	d1ea      	bne.n	80178e6 <ucdr_serialize_array_uint8_t+0x16>
 8017910:	2301      	movs	r3, #1
 8017912:	7da8      	ldrb	r0, [r5, #22]
 8017914:	756b      	strb	r3, [r5, #21]
 8017916:	4058      	eors	r0, r3
 8017918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801791c:	463a      	mov	r2, r7
 801791e:	4641      	mov	r1, r8
 8017920:	68a8      	ldr	r0, [r5, #8]
 8017922:	f009 fc18 	bl	8021156 <memcpy>
 8017926:	68aa      	ldr	r2, [r5, #8]
 8017928:	692b      	ldr	r3, [r5, #16]
 801792a:	443a      	add	r2, r7
 801792c:	443b      	add	r3, r7
 801792e:	60aa      	str	r2, [r5, #8]
 8017930:	612b      	str	r3, [r5, #16]
 8017932:	e7ed      	b.n	8017910 <ucdr_serialize_array_uint8_t+0x40>

08017934 <ucdr_serialize_endian_array_uint8_t>:
 8017934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017938:	4619      	mov	r1, r3
 801793a:	461f      	mov	r7, r3
 801793c:	4605      	mov	r5, r0
 801793e:	4690      	mov	r8, r2
 8017940:	f7fb fd7e 	bl	8013440 <ucdr_check_buffer_available_for>
 8017944:	b9e0      	cbnz	r0, 8017980 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017946:	463e      	mov	r6, r7
 8017948:	e00b      	b.n	8017962 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801794a:	4441      	add	r1, r8
 801794c:	68a8      	ldr	r0, [r5, #8]
 801794e:	4622      	mov	r2, r4
 8017950:	1b36      	subs	r6, r6, r4
 8017952:	f009 fc00 	bl	8021156 <memcpy>
 8017956:	68ab      	ldr	r3, [r5, #8]
 8017958:	6928      	ldr	r0, [r5, #16]
 801795a:	4423      	add	r3, r4
 801795c:	4420      	add	r0, r4
 801795e:	60ab      	str	r3, [r5, #8]
 8017960:	6128      	str	r0, [r5, #16]
 8017962:	4631      	mov	r1, r6
 8017964:	2201      	movs	r2, #1
 8017966:	4628      	mov	r0, r5
 8017968:	f7fb fdf4 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 801796c:	1bb9      	subs	r1, r7, r6
 801796e:	4604      	mov	r4, r0
 8017970:	2800      	cmp	r0, #0
 8017972:	d1ea      	bne.n	801794a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017974:	2301      	movs	r3, #1
 8017976:	7da8      	ldrb	r0, [r5, #22]
 8017978:	756b      	strb	r3, [r5, #21]
 801797a:	4058      	eors	r0, r3
 801797c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017980:	463a      	mov	r2, r7
 8017982:	4641      	mov	r1, r8
 8017984:	68a8      	ldr	r0, [r5, #8]
 8017986:	f009 fbe6 	bl	8021156 <memcpy>
 801798a:	68aa      	ldr	r2, [r5, #8]
 801798c:	692b      	ldr	r3, [r5, #16]
 801798e:	443a      	add	r2, r7
 8017990:	443b      	add	r3, r7
 8017992:	60aa      	str	r2, [r5, #8]
 8017994:	612b      	str	r3, [r5, #16]
 8017996:	e7ed      	b.n	8017974 <ucdr_serialize_endian_array_uint8_t+0x40>

08017998 <ucdr_deserialize_array_uint8_t>:
 8017998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801799c:	4688      	mov	r8, r1
 801799e:	4611      	mov	r1, r2
 80179a0:	4617      	mov	r7, r2
 80179a2:	4605      	mov	r5, r0
 80179a4:	f7fb fd4c 	bl	8013440 <ucdr_check_buffer_available_for>
 80179a8:	b9e8      	cbnz	r0, 80179e6 <ucdr_deserialize_array_uint8_t+0x4e>
 80179aa:	463e      	mov	r6, r7
 80179ac:	e00c      	b.n	80179c8 <ucdr_deserialize_array_uint8_t+0x30>
 80179ae:	eb08 0003 	add.w	r0, r8, r3
 80179b2:	68a9      	ldr	r1, [r5, #8]
 80179b4:	4622      	mov	r2, r4
 80179b6:	1b36      	subs	r6, r6, r4
 80179b8:	f009 fbcd 	bl	8021156 <memcpy>
 80179bc:	68ab      	ldr	r3, [r5, #8]
 80179be:	6928      	ldr	r0, [r5, #16]
 80179c0:	4423      	add	r3, r4
 80179c2:	4420      	add	r0, r4
 80179c4:	60ab      	str	r3, [r5, #8]
 80179c6:	6128      	str	r0, [r5, #16]
 80179c8:	4631      	mov	r1, r6
 80179ca:	2201      	movs	r2, #1
 80179cc:	4628      	mov	r0, r5
 80179ce:	f7fb fdc1 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 80179d2:	1bbb      	subs	r3, r7, r6
 80179d4:	4604      	mov	r4, r0
 80179d6:	2800      	cmp	r0, #0
 80179d8:	d1e9      	bne.n	80179ae <ucdr_deserialize_array_uint8_t+0x16>
 80179da:	2301      	movs	r3, #1
 80179dc:	7da8      	ldrb	r0, [r5, #22]
 80179de:	756b      	strb	r3, [r5, #21]
 80179e0:	4058      	eors	r0, r3
 80179e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e6:	463a      	mov	r2, r7
 80179e8:	68a9      	ldr	r1, [r5, #8]
 80179ea:	4640      	mov	r0, r8
 80179ec:	f009 fbb3 	bl	8021156 <memcpy>
 80179f0:	68aa      	ldr	r2, [r5, #8]
 80179f2:	692b      	ldr	r3, [r5, #16]
 80179f4:	443a      	add	r2, r7
 80179f6:	443b      	add	r3, r7
 80179f8:	60aa      	str	r2, [r5, #8]
 80179fa:	612b      	str	r3, [r5, #16]
 80179fc:	e7ed      	b.n	80179da <ucdr_deserialize_array_uint8_t+0x42>
 80179fe:	bf00      	nop

08017a00 <ucdr_deserialize_endian_array_uint8_t>:
 8017a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a04:	4619      	mov	r1, r3
 8017a06:	461f      	mov	r7, r3
 8017a08:	4605      	mov	r5, r0
 8017a0a:	4690      	mov	r8, r2
 8017a0c:	f7fb fd18 	bl	8013440 <ucdr_check_buffer_available_for>
 8017a10:	b9e8      	cbnz	r0, 8017a4e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8017a12:	463e      	mov	r6, r7
 8017a14:	e00c      	b.n	8017a30 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8017a16:	eb08 0003 	add.w	r0, r8, r3
 8017a1a:	68a9      	ldr	r1, [r5, #8]
 8017a1c:	4622      	mov	r2, r4
 8017a1e:	1b36      	subs	r6, r6, r4
 8017a20:	f009 fb99 	bl	8021156 <memcpy>
 8017a24:	68ab      	ldr	r3, [r5, #8]
 8017a26:	6928      	ldr	r0, [r5, #16]
 8017a28:	4423      	add	r3, r4
 8017a2a:	4420      	add	r0, r4
 8017a2c:	60ab      	str	r3, [r5, #8]
 8017a2e:	6128      	str	r0, [r5, #16]
 8017a30:	4631      	mov	r1, r6
 8017a32:	2201      	movs	r2, #1
 8017a34:	4628      	mov	r0, r5
 8017a36:	f7fb fd8d 	bl	8013554 <ucdr_check_final_buffer_behavior_array>
 8017a3a:	1bbb      	subs	r3, r7, r6
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	2800      	cmp	r0, #0
 8017a40:	d1e9      	bne.n	8017a16 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017a42:	2301      	movs	r3, #1
 8017a44:	7da8      	ldrb	r0, [r5, #22]
 8017a46:	756b      	strb	r3, [r5, #21]
 8017a48:	4058      	eors	r0, r3
 8017a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a4e:	463a      	mov	r2, r7
 8017a50:	68a9      	ldr	r1, [r5, #8]
 8017a52:	4640      	mov	r0, r8
 8017a54:	f009 fb7f 	bl	8021156 <memcpy>
 8017a58:	68aa      	ldr	r2, [r5, #8]
 8017a5a:	692b      	ldr	r3, [r5, #16]
 8017a5c:	443a      	add	r2, r7
 8017a5e:	443b      	add	r3, r7
 8017a60:	60aa      	str	r2, [r5, #8]
 8017a62:	612b      	str	r3, [r5, #16]
 8017a64:	e7ed      	b.n	8017a42 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8017a66:	bf00      	nop

08017a68 <uxr_buffer_delete_entity>:
 8017a68:	b510      	push	{r4, lr}
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	b08e      	sub	sp, #56	; 0x38
 8017a6e:	4604      	mov	r4, r0
 8017a70:	9103      	str	r1, [sp, #12]
 8017a72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017a76:	2303      	movs	r3, #3
 8017a78:	2204      	movs	r2, #4
 8017a7a:	9300      	str	r3, [sp, #0]
 8017a7c:	ab06      	add	r3, sp, #24
 8017a7e:	f001 fb77 	bl	8019170 <uxr_prepare_stream_to_write_submessage>
 8017a82:	b918      	cbnz	r0, 8017a8c <uxr_buffer_delete_entity+0x24>
 8017a84:	4604      	mov	r4, r0
 8017a86:	4620      	mov	r0, r4
 8017a88:	b00e      	add	sp, #56	; 0x38
 8017a8a:	bd10      	pop	{r4, pc}
 8017a8c:	9902      	ldr	r1, [sp, #8]
 8017a8e:	aa05      	add	r2, sp, #20
 8017a90:	4620      	mov	r0, r4
 8017a92:	f001 fca9 	bl	80193e8 <uxr_init_base_object_request>
 8017a96:	4604      	mov	r4, r0
 8017a98:	a905      	add	r1, sp, #20
 8017a9a:	a806      	add	r0, sp, #24
 8017a9c:	f003 fbae 	bl	801b1fc <uxr_serialize_DELETE_Payload>
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	b00e      	add	sp, #56	; 0x38
 8017aa4:	bd10      	pop	{r4, pc}
 8017aa6:	bf00      	nop

08017aa8 <uxr_common_create_entity>:
 8017aa8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017aac:	b510      	push	{r4, lr}
 8017aae:	f1bc 0f01 	cmp.w	ip, #1
 8017ab2:	b08c      	sub	sp, #48	; 0x30
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	9202      	str	r2, [sp, #8]
 8017ab8:	bf0c      	ite	eq
 8017aba:	f003 0201 	andeq.w	r2, r3, #1
 8017abe:	2200      	movne	r2, #0
 8017ac0:	330e      	adds	r3, #14
 8017ac2:	9103      	str	r1, [sp, #12]
 8017ac4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017ac8:	441a      	add	r2, r3
 8017aca:	ab04      	add	r3, sp, #16
 8017acc:	9101      	str	r1, [sp, #4]
 8017ace:	2101      	movs	r1, #1
 8017ad0:	b292      	uxth	r2, r2
 8017ad2:	9100      	str	r1, [sp, #0]
 8017ad4:	9903      	ldr	r1, [sp, #12]
 8017ad6:	f001 fb4b 	bl	8019170 <uxr_prepare_stream_to_write_submessage>
 8017ada:	b918      	cbnz	r0, 8017ae4 <uxr_common_create_entity+0x3c>
 8017adc:	4604      	mov	r4, r0
 8017ade:	4620      	mov	r0, r4
 8017ae0:	b00c      	add	sp, #48	; 0x30
 8017ae2:	bd10      	pop	{r4, pc}
 8017ae4:	9902      	ldr	r1, [sp, #8]
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017aea:	f001 fc7d 	bl	80193e8 <uxr_init_base_object_request>
 8017aee:	4604      	mov	r4, r0
 8017af0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017af2:	a804      	add	r0, sp, #16
 8017af4:	f003 fadc 	bl	801b0b0 <uxr_serialize_CREATE_Payload>
 8017af8:	4620      	mov	r0, r4
 8017afa:	b00c      	add	sp, #48	; 0x30
 8017afc:	bd10      	pop	{r4, pc}
 8017afe:	bf00      	nop

08017b00 <uxr_buffer_create_participant_bin>:
 8017b00:	b570      	push	{r4, r5, r6, lr}
 8017b02:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8017b06:	4605      	mov	r5, r0
 8017b08:	ac11      	add	r4, sp, #68	; 0x44
 8017b0a:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8017b0e:	2303      	movs	r3, #3
 8017b10:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8017b14:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017b18:	7223      	strb	r3, [r4, #8]
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	2201      	movs	r2, #1
 8017b1e:	f88d 3014 	strb.w	r3, [sp, #20]
 8017b22:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8017b24:	7122      	strb	r2, [r4, #4]
 8017b26:	b1cb      	cbz	r3, 8017b5c <uxr_buffer_create_participant_bin+0x5c>
 8017b28:	f88d 201c 	strb.w	r2, [sp, #28]
 8017b2c:	9308      	str	r3, [sp, #32]
 8017b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b32:	a915      	add	r1, sp, #84	; 0x54
 8017b34:	a809      	add	r0, sp, #36	; 0x24
 8017b36:	f7fb fcd7 	bl	80134e8 <ucdr_init_buffer>
 8017b3a:	a905      	add	r1, sp, #20
 8017b3c:	a809      	add	r0, sp, #36	; 0x24
 8017b3e:	f002 fe6d 	bl	801a81c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8017b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b44:	9600      	str	r6, [sp, #0]
 8017b46:	4628      	mov	r0, r5
 8017b48:	9401      	str	r4, [sp, #4]
 8017b4a:	60e3      	str	r3, [r4, #12]
 8017b4c:	b29b      	uxth	r3, r3
 8017b4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017b52:	f7ff ffa9 	bl	8017aa8 <uxr_common_create_entity>
 8017b56:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8017b5a:	bd70      	pop	{r4, r5, r6, pc}
 8017b5c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017b60:	e7e5      	b.n	8017b2e <uxr_buffer_create_participant_bin+0x2e>
 8017b62:	bf00      	nop

08017b64 <uxr_buffer_create_topic_bin>:
 8017b64:	b570      	push	{r4, r5, r6, lr}
 8017b66:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	9105      	str	r1, [sp, #20]
 8017b70:	a997      	add	r1, sp, #604	; 0x25c
 8017b72:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8017b76:	ac13      	add	r4, sp, #76	; 0x4c
 8017b78:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017b7c:	2302      	movs	r3, #2
 8017b7e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8017b82:	f000 fa8d 	bl	80180a0 <uxr_object_id_to_raw>
 8017b86:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8017b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b8c:	a917      	add	r1, sp, #92	; 0x5c
 8017b8e:	a80b      	add	r0, sp, #44	; 0x2c
 8017b90:	9306      	str	r3, [sp, #24]
 8017b92:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8017b94:	930a      	str	r3, [sp, #40]	; 0x28
 8017b96:	2303      	movs	r3, #3
 8017b98:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	f88d 301c 	strb.w	r3, [sp, #28]
 8017ba8:	f7fb fc9e 	bl	80134e8 <ucdr_init_buffer>
 8017bac:	a906      	add	r1, sp, #24
 8017bae:	a80b      	add	r0, sp, #44	; 0x2c
 8017bb0:	f002 fe56 	bl	801a860 <uxr_serialize_OBJK_Topic_Binary>
 8017bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bb6:	4628      	mov	r0, r5
 8017bb8:	9600      	str	r6, [sp, #0]
 8017bba:	9316      	str	r3, [sp, #88]	; 0x58
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	9401      	str	r4, [sp, #4]
 8017bc0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017bc4:	f7ff ff70 	bl	8017aa8 <uxr_common_create_entity>
 8017bc8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8017bcc:	bd70      	pop	{r4, r5, r6, pc}
 8017bce:	bf00      	nop

08017bd0 <uxr_buffer_create_publisher_bin>:
 8017bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bd2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8017bd6:	2603      	movs	r6, #3
 8017bd8:	4605      	mov	r5, r0
 8017bda:	4618      	mov	r0, r3
 8017bdc:	9105      	str	r1, [sp, #20]
 8017bde:	a992      	add	r1, sp, #584	; 0x248
 8017be0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8017be4:	ac0e      	add	r4, sp, #56	; 0x38
 8017be6:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8017bea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017bee:	f000 fa57 	bl	80180a0 <uxr_object_id_to_raw>
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017bf8:	a912      	add	r1, sp, #72	; 0x48
 8017bfa:	a806      	add	r0, sp, #24
 8017bfc:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017c00:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017c04:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8017c08:	f7fb fc6e 	bl	80134e8 <ucdr_init_buffer>
 8017c0c:	a993      	add	r1, sp, #588	; 0x24c
 8017c0e:	a806      	add	r0, sp, #24
 8017c10:	f002 feda 	bl	801a9c8 <uxr_serialize_OBJK_Publisher_Binary>
 8017c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c16:	4628      	mov	r0, r5
 8017c18:	9700      	str	r7, [sp, #0]
 8017c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8017c1c:	b29b      	uxth	r3, r3
 8017c1e:	9401      	str	r4, [sp, #4]
 8017c20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c24:	f7ff ff40 	bl	8017aa8 <uxr_common_create_entity>
 8017c28:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8017c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c2e:	bf00      	nop

08017c30 <uxr_buffer_create_subscriber_bin>:
 8017c30:	b570      	push	{r4, r5, r6, lr}
 8017c32:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8017c36:	4605      	mov	r5, r0
 8017c38:	4618      	mov	r0, r3
 8017c3a:	9105      	str	r1, [sp, #20]
 8017c3c:	a992      	add	r1, sp, #584	; 0x248
 8017c3e:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8017c42:	ac0e      	add	r4, sp, #56	; 0x38
 8017c44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017c48:	2304      	movs	r3, #4
 8017c4a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8017c4e:	f000 fa27 	bl	80180a0 <uxr_object_id_to_raw>
 8017c52:	2300      	movs	r3, #0
 8017c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c58:	a912      	add	r1, sp, #72	; 0x48
 8017c5a:	a806      	add	r0, sp, #24
 8017c5c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017c60:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017c64:	2303      	movs	r3, #3
 8017c66:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017c6a:	f7fb fc3d 	bl	80134e8 <ucdr_init_buffer>
 8017c6e:	a993      	add	r1, sp, #588	; 0x24c
 8017c70:	a806      	add	r0, sp, #24
 8017c72:	f002 ff59 	bl	801ab28 <uxr_serialize_OBJK_Subscriber_Binary>
 8017c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c78:	4628      	mov	r0, r5
 8017c7a:	9600      	str	r6, [sp, #0]
 8017c7c:	9311      	str	r3, [sp, #68]	; 0x44
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	9401      	str	r4, [sp, #4]
 8017c82:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c86:	f7ff ff0f 	bl	8017aa8 <uxr_common_create_entity>
 8017c8a:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8017c8e:	bd70      	pop	{r4, r5, r6, pc}

08017c90 <uxr_buffer_create_datawriter_bin>:
 8017c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c94:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017c98:	4606      	mov	r6, r0
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	2703      	movs	r7, #3
 8017c9e:	ac1d      	add	r4, sp, #116	; 0x74
 8017ca0:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8017ca4:	9105      	str	r1, [sp, #20]
 8017ca6:	a9a1      	add	r1, sp, #644	; 0x284
 8017ca8:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8017cac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017cb0:	2305      	movs	r3, #5
 8017cb2:	7123      	strb	r3, [r4, #4]
 8017cb4:	f000 f9f4 	bl	80180a0 <uxr_object_id_to_raw>
 8017cb8:	a90e      	add	r1, sp, #56	; 0x38
 8017cba:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8017cbc:	7227      	strb	r7, [r4, #8]
 8017cbe:	f000 f9ef 	bl	80180a0 <uxr_object_id_to_raw>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017cc8:	3d00      	subs	r5, #0
 8017cca:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8017cce:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017cd2:	bf18      	it	ne
 8017cd4:	2501      	movne	r5, #1
 8017cd6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017cda:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017cde:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017ce2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017cec:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017cf0:	bb8a      	cbnz	r2, 8017d56 <uxr_buffer_create_datawriter_bin+0xc6>
 8017cf2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017cf6:	f04f 0c13 	mov.w	ip, #19
 8017cfa:	250b      	movs	r5, #11
 8017cfc:	2221      	movs	r2, #33	; 0x21
 8017cfe:	2111      	movs	r1, #17
 8017d00:	2009      	movs	r0, #9
 8017d02:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017d06:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017d0a:	b923      	cbnz	r3, 8017d16 <uxr_buffer_create_datawriter_bin+0x86>
 8017d0c:	4672      	mov	r2, lr
 8017d0e:	4661      	mov	r1, ip
 8017d10:	4628      	mov	r0, r5
 8017d12:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017d16:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017d1a:	2b01      	cmp	r3, #1
 8017d1c:	d025      	beq.n	8017d6a <uxr_buffer_create_datawriter_bin+0xda>
 8017d1e:	2b03      	cmp	r3, #3
 8017d20:	d029      	beq.n	8017d76 <uxr_buffer_create_datawriter_bin+0xe6>
 8017d22:	b32b      	cbz	r3, 8017d70 <uxr_buffer_create_datawriter_bin+0xe0>
 8017d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017d28:	a921      	add	r1, sp, #132	; 0x84
 8017d2a:	a806      	add	r0, sp, #24
 8017d2c:	f7fb fbdc 	bl	80134e8 <ucdr_init_buffer>
 8017d30:	a90e      	add	r1, sp, #56	; 0x38
 8017d32:	a806      	add	r0, sp, #24
 8017d34:	f002 ffaa 	bl	801ac8c <uxr_serialize_OBJK_DataWriter_Binary>
 8017d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d3a:	f8cd 8000 	str.w	r8, [sp]
 8017d3e:	4630      	mov	r0, r6
 8017d40:	9401      	str	r4, [sp, #4]
 8017d42:	60e3      	str	r3, [r4, #12]
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017d4a:	f7ff fead 	bl	8017aa8 <uxr_common_create_entity>
 8017d4e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d56:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017d5a:	f04f 0c12 	mov.w	ip, #18
 8017d5e:	250a      	movs	r5, #10
 8017d60:	2220      	movs	r2, #32
 8017d62:	2110      	movs	r1, #16
 8017d64:	2008      	movs	r0, #8
 8017d66:	2702      	movs	r7, #2
 8017d68:	e7cd      	b.n	8017d06 <uxr_buffer_create_datawriter_bin+0x76>
 8017d6a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017d6e:	e7d9      	b.n	8017d24 <uxr_buffer_create_datawriter_bin+0x94>
 8017d70:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017d74:	e7d6      	b.n	8017d24 <uxr_buffer_create_datawriter_bin+0x94>
 8017d76:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017d7a:	e7d3      	b.n	8017d24 <uxr_buffer_create_datawriter_bin+0x94>

08017d7c <uxr_buffer_create_datareader_bin>:
 8017d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d80:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017d84:	4606      	mov	r6, r0
 8017d86:	4618      	mov	r0, r3
 8017d88:	2703      	movs	r7, #3
 8017d8a:	ac1f      	add	r4, sp, #124	; 0x7c
 8017d8c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8017d90:	9105      	str	r1, [sp, #20]
 8017d92:	a9a3      	add	r1, sp, #652	; 0x28c
 8017d94:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8017d98:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017d9c:	2306      	movs	r3, #6
 8017d9e:	7123      	strb	r3, [r4, #4]
 8017da0:	f000 f97e 	bl	80180a0 <uxr_object_id_to_raw>
 8017da4:	a90e      	add	r1, sp, #56	; 0x38
 8017da6:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017da8:	7227      	strb	r7, [r4, #8]
 8017daa:	f000 f979 	bl	80180a0 <uxr_object_id_to_raw>
 8017dae:	2300      	movs	r3, #0
 8017db0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017db4:	3d00      	subs	r5, #0
 8017db6:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8017dba:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8017dbe:	bf18      	it	ne
 8017dc0:	2501      	movne	r5, #1
 8017dc2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017dc6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017dca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017dce:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017dd2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017ddc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017de0:	bb8a      	cbnz	r2, 8017e46 <uxr_buffer_create_datareader_bin+0xca>
 8017de2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017de6:	f04f 0c13 	mov.w	ip, #19
 8017dea:	250b      	movs	r5, #11
 8017dec:	2221      	movs	r2, #33	; 0x21
 8017dee:	2111      	movs	r1, #17
 8017df0:	2009      	movs	r0, #9
 8017df2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017df6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017dfa:	b923      	cbnz	r3, 8017e06 <uxr_buffer_create_datareader_bin+0x8a>
 8017dfc:	4672      	mov	r2, lr
 8017dfe:	4661      	mov	r1, ip
 8017e00:	4628      	mov	r0, r5
 8017e02:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017e06:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d025      	beq.n	8017e5a <uxr_buffer_create_datareader_bin+0xde>
 8017e0e:	2b03      	cmp	r3, #3
 8017e10:	d029      	beq.n	8017e66 <uxr_buffer_create_datareader_bin+0xea>
 8017e12:	b32b      	cbz	r3, 8017e60 <uxr_buffer_create_datareader_bin+0xe4>
 8017e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e18:	a923      	add	r1, sp, #140	; 0x8c
 8017e1a:	a806      	add	r0, sp, #24
 8017e1c:	f7fb fb64 	bl	80134e8 <ucdr_init_buffer>
 8017e20:	a90e      	add	r1, sp, #56	; 0x38
 8017e22:	a806      	add	r0, sp, #24
 8017e24:	f002 fef6 	bl	801ac14 <uxr_serialize_OBJK_DataReader_Binary>
 8017e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e2a:	f8cd 8000 	str.w	r8, [sp]
 8017e2e:	4630      	mov	r0, r6
 8017e30:	9401      	str	r4, [sp, #4]
 8017e32:	60e3      	str	r3, [r4, #12]
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017e3a:	f7ff fe35 	bl	8017aa8 <uxr_common_create_entity>
 8017e3e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e46:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017e4a:	f04f 0c12 	mov.w	ip, #18
 8017e4e:	250a      	movs	r5, #10
 8017e50:	2220      	movs	r2, #32
 8017e52:	2110      	movs	r1, #16
 8017e54:	2008      	movs	r0, #8
 8017e56:	2702      	movs	r7, #2
 8017e58:	e7cd      	b.n	8017df6 <uxr_buffer_create_datareader_bin+0x7a>
 8017e5a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017e5e:	e7d9      	b.n	8017e14 <uxr_buffer_create_datareader_bin+0x98>
 8017e60:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017e64:	e7d6      	b.n	8017e14 <uxr_buffer_create_datareader_bin+0x98>
 8017e66:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017e6a:	e7d3      	b.n	8017e14 <uxr_buffer_create_datareader_bin+0x98>

08017e6c <uxr_buffer_create_replier_bin>:
 8017e6c:	b570      	push	{r4, r5, r6, lr}
 8017e6e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017e72:	4605      	mov	r5, r0
 8017e74:	4618      	mov	r0, r3
 8017e76:	9105      	str	r1, [sp, #20]
 8017e78:	a999      	add	r1, sp, #612	; 0x264
 8017e7a:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8017e7e:	ac15      	add	r4, sp, #84	; 0x54
 8017e80:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017e84:	2308      	movs	r3, #8
 8017e86:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8017e8a:	f000 f909 	bl	80180a0 <uxr_object_id_to_raw>
 8017e8e:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8017e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e94:	a919      	add	r1, sp, #100	; 0x64
 8017e96:	a80d      	add	r0, sp, #52	; 0x34
 8017e98:	9306      	str	r3, [sp, #24]
 8017e9a:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8017e9c:	9307      	str	r3, [sp, #28]
 8017e9e:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8017ea0:	9308      	str	r3, [sp, #32]
 8017ea2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8017ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8017ea6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8017eaa:	2301      	movs	r3, #1
 8017eac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017eb0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017eb4:	2303      	movs	r3, #3
 8017eb6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8017eba:	f7fb fb15 	bl	80134e8 <ucdr_init_buffer>
 8017ebe:	a906      	add	r1, sp, #24
 8017ec0:	a80d      	add	r0, sp, #52	; 0x34
 8017ec2:	f002 ff0f 	bl	801ace4 <uxr_serialize_OBJK_Replier_Binary>
 8017ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ec8:	4628      	mov	r0, r5
 8017eca:	9600      	str	r6, [sp, #0]
 8017ecc:	9318      	str	r3, [sp, #96]	; 0x60
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	9401      	str	r4, [sp, #4]
 8017ed2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017ed6:	f7ff fde7 	bl	8017aa8 <uxr_common_create_entity>
 8017eda:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8017ede:	bd70      	pop	{r4, r5, r6, pc}

08017ee0 <get_custom_error>:
 8017ee0:	4b01      	ldr	r3, [pc, #4]	; (8017ee8 <get_custom_error+0x8>)
 8017ee2:	7818      	ldrb	r0, [r3, #0]
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop
 8017ee8:	2001705c 	.word	0x2001705c

08017eec <recv_custom_msg>:
 8017eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef0:	4693      	mov	fp, r2
 8017ef2:	b089      	sub	sp, #36	; 0x24
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	468a      	mov	sl, r1
 8017efa:	9305      	str	r3, [sp, #20]
 8017efc:	f88d 201e 	strb.w	r2, [sp, #30]
 8017f00:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017f04:	b322      	cbz	r2, 8017f50 <recv_custom_msg+0x64>
 8017f06:	f200 2902 	addw	r9, r0, #514	; 0x202
 8017f0a:	f10d 081f 	add.w	r8, sp, #31
 8017f0e:	af05      	add	r7, sp, #20
 8017f10:	f10d 061e 	add.w	r6, sp, #30
 8017f14:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017f18:	e002      	b.n	8017f20 <recv_custom_msg+0x34>
 8017f1a:	9b05      	ldr	r3, [sp, #20]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	dd0f      	ble.n	8017f40 <recv_custom_msg+0x54>
 8017f20:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8017f24:	4623      	mov	r3, r4
 8017f26:	4622      	mov	r2, r4
 8017f28:	4648      	mov	r0, r9
 8017f2a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017f2e:	e9cd 5600 	strd	r5, r6, [sp]
 8017f32:	f001 fc6f 	bl	8019814 <uxr_read_framed_msg>
 8017f36:	2800      	cmp	r0, #0
 8017f38:	d0ef      	beq.n	8017f1a <recv_custom_msg+0x2e>
 8017f3a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017f3e:	b1b3      	cbz	r3, 8017f6e <recv_custom_msg+0x82>
 8017f40:	4b0f      	ldr	r3, [pc, #60]	; (8017f80 <recv_custom_msg+0x94>)
 8017f42:	2000      	movs	r0, #0
 8017f44:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017f48:	701a      	strb	r2, [r3, #0]
 8017f4a:	b009      	add	sp, #36	; 0x24
 8017f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f50:	f10d 021f 	add.w	r2, sp, #31
 8017f54:	4601      	mov	r1, r0
 8017f56:	9200      	str	r2, [sp, #0]
 8017f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017f5c:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017f60:	47a8      	blx	r5
 8017f62:	2800      	cmp	r0, #0
 8017f64:	d0ec      	beq.n	8017f40 <recv_custom_msg+0x54>
 8017f66:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d1e8      	bne.n	8017f40 <recv_custom_msg+0x54>
 8017f6e:	f8cb 0000 	str.w	r0, [fp]
 8017f72:	2001      	movs	r0, #1
 8017f74:	f8ca 4000 	str.w	r4, [sl]
 8017f78:	b009      	add	sp, #36	; 0x24
 8017f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f7e:	bf00      	nop
 8017f80:	2001705c 	.word	0x2001705c

08017f84 <send_custom_msg>:
 8017f84:	b530      	push	{r4, r5, lr}
 8017f86:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8017f8a:	b087      	sub	sp, #28
 8017f8c:	4614      	mov	r4, r2
 8017f8e:	b995      	cbnz	r5, 8017fb6 <send_custom_msg+0x32>
 8017f90:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017f94:	f10d 0317 	add.w	r3, sp, #23
 8017f98:	47a8      	blx	r5
 8017f9a:	1e03      	subs	r3, r0, #0
 8017f9c:	bf18      	it	ne
 8017f9e:	2301      	movne	r3, #1
 8017fa0:	42a0      	cmp	r0, r4
 8017fa2:	bf18      	it	ne
 8017fa4:	2300      	movne	r3, #0
 8017fa6:	b91b      	cbnz	r3, 8017fb0 <send_custom_msg+0x2c>
 8017fa8:	4a0a      	ldr	r2, [pc, #40]	; (8017fd4 <send_custom_msg+0x50>)
 8017faa:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017fae:	7011      	strb	r1, [r2, #0]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	b007      	add	sp, #28
 8017fb4:	bd30      	pop	{r4, r5, pc}
 8017fb6:	460b      	mov	r3, r1
 8017fb8:	2200      	movs	r2, #0
 8017fba:	f10d 0117 	add.w	r1, sp, #23
 8017fbe:	9400      	str	r4, [sp, #0]
 8017fc0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017fc4:	4602      	mov	r2, r0
 8017fc6:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017fca:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017fce:	f001 fa43 	bl	8019458 <uxr_write_framed_msg>
 8017fd2:	e7e2      	b.n	8017f9a <send_custom_msg+0x16>
 8017fd4:	2001705c 	.word	0x2001705c

08017fd8 <uxr_set_custom_transport_callbacks>:
 8017fd8:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017fdc:	9901      	ldr	r1, [sp, #4]
 8017fde:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017fe2:	9b00      	ldr	r3, [sp, #0]
 8017fe4:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop

08017fec <uxr_init_custom_transport>:
 8017fec:	b538      	push	{r3, r4, r5, lr}
 8017fee:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017ff2:	b303      	cbz	r3, 8018036 <uxr_init_custom_transport+0x4a>
 8017ff4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	b1e2      	cbz	r2, 8018036 <uxr_init_custom_transport+0x4a>
 8017ffc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018000:	b1ca      	cbz	r2, 8018036 <uxr_init_custom_transport+0x4a>
 8018002:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8018006:	b1b2      	cbz	r2, 8018036 <uxr_init_custom_transport+0x4a>
 8018008:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801800c:	4798      	blx	r3
 801800e:	4605      	mov	r5, r0
 8018010:	b188      	cbz	r0, 8018036 <uxr_init_custom_transport+0x4a>
 8018012:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8018016:	b98b      	cbnz	r3, 801803c <uxr_init_custom_transport+0x50>
 8018018:	4b0b      	ldr	r3, [pc, #44]	; (8018048 <uxr_init_custom_transport+0x5c>)
 801801a:	4628      	mov	r0, r5
 801801c:	490b      	ldr	r1, [pc, #44]	; (801804c <uxr_init_custom_transport+0x60>)
 801801e:	4a0c      	ldr	r2, [pc, #48]	; (8018050 <uxr_init_custom_transport+0x64>)
 8018020:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8018024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018028:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801802c:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018030:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8018034:	bd38      	pop	{r3, r4, r5, pc}
 8018036:	2500      	movs	r5, #0
 8018038:	4628      	mov	r0, r5
 801803a:	bd38      	pop	{r3, r4, r5, pc}
 801803c:	2100      	movs	r1, #0
 801803e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8018042:	f001 fa03 	bl	801944c <uxr_init_framing_io>
 8018046:	e7e7      	b.n	8018018 <uxr_init_custom_transport+0x2c>
 8018048:	08017eed 	.word	0x08017eed
 801804c:	08017f85 	.word	0x08017f85
 8018050:	08017ee1 	.word	0x08017ee1

08018054 <uxr_close_custom_transport>:
 8018054:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8018058:	4718      	bx	r3
 801805a:	bf00      	nop

0801805c <uxr_object_id>:
 801805c:	b082      	sub	sp, #8
 801805e:	2300      	movs	r3, #0
 8018060:	f88d 1006 	strb.w	r1, [sp, #6]
 8018064:	f360 030f 	bfi	r3, r0, #0, #16
 8018068:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801806c:	f362 431f 	bfi	r3, r2, #16, #16
 8018070:	4618      	mov	r0, r3
 8018072:	b002      	add	sp, #8
 8018074:	4770      	bx	lr
 8018076:	bf00      	nop

08018078 <uxr_object_id_from_raw>:
 8018078:	7843      	ldrb	r3, [r0, #1]
 801807a:	b082      	sub	sp, #8
 801807c:	7801      	ldrb	r1, [r0, #0]
 801807e:	2000      	movs	r0, #0
 8018080:	091a      	lsrs	r2, r3, #4
 8018082:	f003 030f 	and.w	r3, r3, #15
 8018086:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801808a:	f88d 3006 	strb.w	r3, [sp, #6]
 801808e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018092:	f362 000f 	bfi	r0, r2, #0, #16
 8018096:	f363 401f 	bfi	r0, r3, #16, #16
 801809a:	b002      	add	sp, #8
 801809c:	4770      	bx	lr
 801809e:	bf00      	nop

080180a0 <uxr_object_id_to_raw>:
 80180a0:	4602      	mov	r2, r0
 80180a2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80180a6:	b082      	sub	sp, #8
 80180a8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80180ac:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80180b0:	f881 c000 	strb.w	ip, [r1]
 80180b4:	7048      	strb	r0, [r1, #1]
 80180b6:	b002      	add	sp, #8
 80180b8:	4770      	bx	lr
 80180ba:	bf00      	nop

080180bc <uxr_buffer_request_data>:
 80180bc:	b530      	push	{r4, r5, lr}
 80180be:	b095      	sub	sp, #84	; 0x54
 80180c0:	4604      	mov	r4, r0
 80180c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80180c4:	9303      	str	r3, [sp, #12]
 80180c6:	2d00      	cmp	r5, #0
 80180c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80180cc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80180d0:	f04f 0200 	mov.w	r2, #0
 80180d4:	bf14      	ite	ne
 80180d6:	2101      	movne	r1, #1
 80180d8:	4611      	moveq	r1, r2
 80180da:	f88d 201d 	strb.w	r2, [sp, #29]
 80180de:	f88d 201e 	strb.w	r2, [sp, #30]
 80180e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80180e6:	d021      	beq.n	801812c <uxr_buffer_request_data+0x70>
 80180e8:	686b      	ldr	r3, [r5, #4]
 80180ea:	2210      	movs	r2, #16
 80180ec:	6829      	ldr	r1, [r5, #0]
 80180ee:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80180f2:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 80180f6:	2308      	movs	r3, #8
 80180f8:	2100      	movs	r1, #0
 80180fa:	4620      	mov	r0, r4
 80180fc:	e9cd 3100 	strd	r3, r1, [sp]
 8018100:	ab0c      	add	r3, sp, #48	; 0x30
 8018102:	9905      	ldr	r1, [sp, #20]
 8018104:	f001 f834 	bl	8019170 <uxr_prepare_stream_to_write_submessage>
 8018108:	b918      	cbnz	r0, 8018112 <uxr_buffer_request_data+0x56>
 801810a:	4604      	mov	r4, r0
 801810c:	4620      	mov	r0, r4
 801810e:	b015      	add	sp, #84	; 0x54
 8018110:	bd30      	pop	{r4, r5, pc}
 8018112:	9904      	ldr	r1, [sp, #16]
 8018114:	aa06      	add	r2, sp, #24
 8018116:	4620      	mov	r0, r4
 8018118:	f001 f966 	bl	80193e8 <uxr_init_base_object_request>
 801811c:	4604      	mov	r4, r0
 801811e:	a906      	add	r1, sp, #24
 8018120:	a80c      	add	r0, sp, #48	; 0x30
 8018122:	f003 f915 	bl	801b350 <uxr_serialize_READ_DATA_Payload>
 8018126:	4620      	mov	r0, r4
 8018128:	b015      	add	sp, #84	; 0x54
 801812a:	bd30      	pop	{r4, r5, pc}
 801812c:	2208      	movs	r2, #8
 801812e:	e7e2      	b.n	80180f6 <uxr_buffer_request_data+0x3a>

08018130 <uxr_buffer_cancel_data>:
 8018130:	b510      	push	{r4, lr}
 8018132:	2300      	movs	r3, #0
 8018134:	b094      	sub	sp, #80	; 0x50
 8018136:	4604      	mov	r4, r0
 8018138:	9205      	str	r2, [sp, #20]
 801813a:	9301      	str	r3, [sp, #4]
 801813c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018140:	f88d 301e 	strb.w	r3, [sp, #30]
 8018144:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8018148:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801814c:	2308      	movs	r3, #8
 801814e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018152:	2201      	movs	r2, #1
 8018154:	9300      	str	r3, [sp, #0]
 8018156:	ab0c      	add	r3, sp, #48	; 0x30
 8018158:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801815c:	2210      	movs	r2, #16
 801815e:	f001 f807 	bl	8019170 <uxr_prepare_stream_to_write_submessage>
 8018162:	b918      	cbnz	r0, 801816c <uxr_buffer_cancel_data+0x3c>
 8018164:	4604      	mov	r4, r0
 8018166:	4620      	mov	r0, r4
 8018168:	b014      	add	sp, #80	; 0x50
 801816a:	bd10      	pop	{r4, pc}
 801816c:	9905      	ldr	r1, [sp, #20]
 801816e:	aa06      	add	r2, sp, #24
 8018170:	4620      	mov	r0, r4
 8018172:	f001 f939 	bl	80193e8 <uxr_init_base_object_request>
 8018176:	4604      	mov	r4, r0
 8018178:	a906      	add	r1, sp, #24
 801817a:	a80c      	add	r0, sp, #48	; 0x30
 801817c:	f003 f8e8 	bl	801b350 <uxr_serialize_READ_DATA_Payload>
 8018180:	4620      	mov	r0, r4
 8018182:	b014      	add	sp, #80	; 0x50
 8018184:	bd10      	pop	{r4, pc}
 8018186:	bf00      	nop

08018188 <read_submessage_format>:
 8018188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801818c:	b095      	sub	sp, #84	; 0x54
 801818e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8018192:	b113      	cbz	r3, 801819a <read_submessage_format+0x12>
 8018194:	b015      	add	sp, #84	; 0x54
 8018196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801819a:	4606      	mov	r6, r0
 801819c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801819e:	460c      	mov	r4, r1
 80181a0:	4615      	mov	r5, r2
 80181a2:	9004      	str	r0, [sp, #16]
 80181a4:	4699      	mov	r9, r3
 80181a6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80181a8:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80181ac:	9005      	str	r0, [sp, #20]
 80181ae:	a80c      	add	r0, sp, #48	; 0x30
 80181b0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80181b4:	1a52      	subs	r2, r2, r1
 80181b6:	f7fb f997 	bl	80134e8 <ucdr_init_buffer>
 80181ba:	a80c      	add	r0, sp, #48	; 0x30
 80181bc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80181c0:	f7fb f966 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 80181c4:	69e2      	ldr	r2, [r4, #28]
 80181c6:	b19a      	cbz	r2, 80181f0 <read_submessage_format+0x68>
 80181c8:	f1b8 0f07 	cmp.w	r8, #7
 80181cc:	f882 9014 	strb.w	r9, [r2, #20]
 80181d0:	d040      	beq.n	8018254 <read_submessage_format+0xcc>
 80181d2:	f1b8 0f08 	cmp.w	r8, #8
 80181d6:	d02e      	beq.n	8018236 <read_submessage_format+0xae>
 80181d8:	f1b8 0f06 	cmp.w	r8, #6
 80181dc:	d011      	beq.n	8018202 <read_submessage_format+0x7a>
 80181de:	2301      	movs	r3, #1
 80181e0:	7513      	strb	r3, [r2, #20]
 80181e2:	4629      	mov	r1, r5
 80181e4:	4620      	mov	r0, r4
 80181e6:	f7fb f9d3 	bl	8013590 <ucdr_advance_buffer>
 80181ea:	b015      	add	sp, #84	; 0x54
 80181ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181f0:	f1b8 0f07 	cmp.w	r8, #7
 80181f4:	d02e      	beq.n	8018254 <read_submessage_format+0xcc>
 80181f6:	f1b8 0f08 	cmp.w	r8, #8
 80181fa:	d01c      	beq.n	8018236 <read_submessage_format+0xae>
 80181fc:	f1b8 0f06 	cmp.w	r8, #6
 8018200:	d1ef      	bne.n	80181e2 <read_submessage_format+0x5a>
 8018202:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8018206:	f1b8 0f00 	cmp.w	r8, #0
 801820a:	d011      	beq.n	8018230 <read_submessage_format+0xa8>
 801820c:	ab0c      	add	r3, sp, #48	; 0x30
 801820e:	9501      	str	r5, [sp, #4]
 8018210:	463a      	mov	r2, r7
 8018212:	4630      	mov	r0, r6
 8018214:	9300      	str	r3, [sp, #0]
 8018216:	2306      	movs	r3, #6
 8018218:	f88d 3016 	strb.w	r3, [sp, #22]
 801821c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8018220:	9302      	str	r3, [sp, #8]
 8018222:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018226:	47c0      	blx	r8
 8018228:	2301      	movs	r3, #1
 801822a:	69e2      	ldr	r2, [r4, #28]
 801822c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018230:	2a00      	cmp	r2, #0
 8018232:	d1d4      	bne.n	80181de <read_submessage_format+0x56>
 8018234:	e7d5      	b.n	80181e2 <read_submessage_format+0x5a>
 8018236:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801823a:	2b00      	cmp	r3, #0
 801823c:	d0f8      	beq.n	8018230 <read_submessage_format+0xa8>
 801823e:	a80c      	add	r0, sp, #48	; 0x30
 8018240:	a906      	add	r1, sp, #24
 8018242:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018246:	f003 f94f 	bl	801b4e8 <uxr_deserialize_SampleIdentity>
 801824a:	b9a0      	cbnz	r0, 8018276 <read_submessage_format+0xee>
 801824c:	69e2      	ldr	r2, [r4, #28]
 801824e:	2a00      	cmp	r2, #0
 8018250:	d1c5      	bne.n	80181de <read_submessage_format+0x56>
 8018252:	e7c6      	b.n	80181e2 <read_submessage_format+0x5a>
 8018254:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8018258:	b13b      	cbz	r3, 801826a <read_submessage_format+0xe2>
 801825a:	a906      	add	r1, sp, #24
 801825c:	a80c      	add	r0, sp, #48	; 0x30
 801825e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018262:	f002 fe15 	bl	801ae90 <uxr_deserialize_BaseObjectRequest>
 8018266:	bb60      	cbnz	r0, 80182c2 <read_submessage_format+0x13a>
 8018268:	69e2      	ldr	r2, [r4, #28]
 801826a:	68a3      	ldr	r3, [r4, #8]
 801826c:	442b      	add	r3, r5
 801826e:	60a3      	str	r3, [r4, #8]
 8018270:	2a00      	cmp	r2, #0
 8018272:	d1b4      	bne.n	80181de <read_submessage_format+0x56>
 8018274:	e7b5      	b.n	80181e2 <read_submessage_format+0x5a>
 8018276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018278:	a80c      	add	r0, sp, #48	; 0x30
 801827a:	eba8 0803 	sub.w	r8, r8, r3
 801827e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8018282:	44a8      	add	r8, r5
 8018284:	1a52      	subs	r2, r2, r1
 8018286:	f7fb f92f 	bl	80134e8 <ucdr_init_buffer>
 801828a:	a80c      	add	r0, sp, #48	; 0x30
 801828c:	fa1f f888 	uxth.w	r8, r8
 8018290:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018294:	f7fb f8fc 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 8018298:	ab0c      	add	r3, sp, #48	; 0x30
 801829a:	2108      	movs	r1, #8
 801829c:	f8cd 8004 	str.w	r8, [sp, #4]
 80182a0:	9300      	str	r3, [sp, #0]
 80182a2:	463a      	mov	r2, r7
 80182a4:	f88d 1016 	strb.w	r1, [sp, #22]
 80182a8:	ab06      	add	r3, sp, #24
 80182aa:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 80182ae:	4630      	mov	r0, r6
 80182b0:	9102      	str	r1, [sp, #8]
 80182b2:	9905      	ldr	r1, [sp, #20]
 80182b4:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 80182b8:	47b8      	blx	r7
 80182ba:	2301      	movs	r3, #1
 80182bc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80182c0:	e7c4      	b.n	801824c <read_submessage_format+0xc4>
 80182c2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80182c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182c8:	a80c      	add	r0, sp, #48	; 0x30
 80182ca:	1a52      	subs	r2, r2, r1
 80182cc:	eba8 0803 	sub.w	r8, r8, r3
 80182d0:	f7fb f90a 	bl	80134e8 <ucdr_init_buffer>
 80182d4:	a80c      	add	r0, sp, #48	; 0x30
 80182d6:	44a8      	add	r8, r5
 80182d8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80182dc:	f7fb f8d8 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 80182e0:	ab0c      	add	r3, sp, #48	; 0x30
 80182e2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80182e6:	fa1f f888 	uxth.w	r8, r8
 80182ea:	9300      	str	r3, [sp, #0]
 80182ec:	463a      	mov	r2, r7
 80182ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80182f2:	4630      	mov	r0, r6
 80182f4:	f8cd 8004 	str.w	r8, [sp, #4]
 80182f8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80182fc:	2107      	movs	r1, #7
 80182fe:	f88d 1016 	strb.w	r1, [sp, #22]
 8018302:	b29b      	uxth	r3, r3
 8018304:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8018308:	9102      	str	r1, [sp, #8]
 801830a:	9905      	ldr	r1, [sp, #20]
 801830c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8018310:	47b8      	blx	r7
 8018312:	2301      	movs	r3, #1
 8018314:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018318:	e7a6      	b.n	8018268 <read_submessage_format+0xe0>
 801831a:	bf00      	nop

0801831c <on_get_fragmentation_info>:
 801831c:	b500      	push	{lr}
 801831e:	b08b      	sub	sp, #44	; 0x2c
 8018320:	4601      	mov	r1, r0
 8018322:	2204      	movs	r2, #4
 8018324:	a802      	add	r0, sp, #8
 8018326:	f7fb f8df 	bl	80134e8 <ucdr_init_buffer>
 801832a:	f10d 0305 	add.w	r3, sp, #5
 801832e:	f10d 0206 	add.w	r2, sp, #6
 8018332:	a901      	add	r1, sp, #4
 8018334:	a802      	add	r0, sp, #8
 8018336:	f001 fe5d 	bl	8019ff4 <uxr_read_submessage_header>
 801833a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801833e:	2b0d      	cmp	r3, #13
 8018340:	d003      	beq.n	801834a <on_get_fragmentation_info+0x2e>
 8018342:	2000      	movs	r0, #0
 8018344:	b00b      	add	sp, #44	; 0x2c
 8018346:	f85d fb04 	ldr.w	pc, [sp], #4
 801834a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801834e:	f013 0f02 	tst.w	r3, #2
 8018352:	bf14      	ite	ne
 8018354:	2002      	movne	r0, #2
 8018356:	2001      	moveq	r0, #1
 8018358:	b00b      	add	sp, #44	; 0x2c
 801835a:	f85d fb04 	ldr.w	pc, [sp], #4
 801835e:	bf00      	nop

08018360 <read_submessage_get_info>:
 8018360:	b570      	push	{r4, r5, r6, lr}
 8018362:	2500      	movs	r5, #0
 8018364:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8018368:	460e      	mov	r6, r1
 801836a:	4604      	mov	r4, r0
 801836c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8018370:	4629      	mov	r1, r5
 8018372:	a810      	add	r0, sp, #64	; 0x40
 8018374:	9503      	str	r5, [sp, #12]
 8018376:	9504      	str	r5, [sp, #16]
 8018378:	f008 fe20 	bl	8020fbc <memset>
 801837c:	a903      	add	r1, sp, #12
 801837e:	4630      	mov	r0, r6
 8018380:	f002 ff26 	bl	801b1d0 <uxr_deserialize_GET_INFO_Payload>
 8018384:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018388:	4620      	mov	r0, r4
 801838a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801838e:	f001 f823 	bl	80193d8 <uxr_session_header_offset>
 8018392:	462b      	mov	r3, r5
 8018394:	220c      	movs	r2, #12
 8018396:	a905      	add	r1, sp, #20
 8018398:	9000      	str	r0, [sp, #0]
 801839a:	a808      	add	r0, sp, #32
 801839c:	f7fb f892 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 80183a0:	a910      	add	r1, sp, #64	; 0x40
 80183a2:	a808      	add	r0, sp, #32
 80183a4:	f002 ff88 	bl	801b2b8 <uxr_serialize_INFO_Payload>
 80183a8:	9b08      	ldr	r3, [sp, #32]
 80183aa:	462a      	mov	r2, r5
 80183ac:	4629      	mov	r1, r5
 80183ae:	4620      	mov	r0, r4
 80183b0:	f000 ffbe 	bl	8019330 <uxr_stamp_session_header>
 80183b4:	a808      	add	r0, sp, #32
 80183b6:	f7fb f8c5 	bl	8013544 <ucdr_buffer_length>
 80183ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80183bc:	4602      	mov	r2, r0
 80183be:	a905      	add	r1, sp, #20
 80183c0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80183c4:	47a0      	blx	r4
 80183c6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80183ca:	bd70      	pop	{r4, r5, r6, pc}

080183cc <write_submessage_acknack.isra.0>:
 80183cc:	b570      	push	{r4, r5, r6, lr}
 80183ce:	b092      	sub	sp, #72	; 0x48
 80183d0:	4605      	mov	r5, r0
 80183d2:	460e      	mov	r6, r1
 80183d4:	4614      	mov	r4, r2
 80183d6:	f000 ffff 	bl	80193d8 <uxr_session_header_offset>
 80183da:	a905      	add	r1, sp, #20
 80183dc:	9000      	str	r0, [sp, #0]
 80183de:	2300      	movs	r3, #0
 80183e0:	a80a      	add	r0, sp, #40	; 0x28
 80183e2:	2211      	movs	r2, #17
 80183e4:	f7fb f86e 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 80183e8:	2218      	movs	r2, #24
 80183ea:	2300      	movs	r3, #0
 80183ec:	210a      	movs	r1, #10
 80183ee:	fb02 5404 	mla	r4, r2, r4, r5
 80183f2:	a80a      	add	r0, sp, #40	; 0x28
 80183f4:	2205      	movs	r2, #5
 80183f6:	3450      	adds	r4, #80	; 0x50
 80183f8:	f001 fde2 	bl	8019fc0 <uxr_buffer_submessage_header>
 80183fc:	a903      	add	r1, sp, #12
 80183fe:	4620      	mov	r0, r4
 8018400:	f006 fb50 	bl	801eaa4 <uxr_compute_acknack>
 8018404:	ba40      	rev16	r0, r0
 8018406:	a903      	add	r1, sp, #12
 8018408:	f88d 6010 	strb.w	r6, [sp, #16]
 801840c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018410:	a80a      	add	r0, sp, #40	; 0x28
 8018412:	f002 ffc3 	bl	801b39c <uxr_serialize_ACKNACK_Payload>
 8018416:	2200      	movs	r2, #0
 8018418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801841a:	4628      	mov	r0, r5
 801841c:	4611      	mov	r1, r2
 801841e:	f000 ff87 	bl	8019330 <uxr_stamp_session_header>
 8018422:	a80a      	add	r0, sp, #40	; 0x28
 8018424:	f7fb f88e 	bl	8013544 <ucdr_buffer_length>
 8018428:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801842a:	4602      	mov	r2, r0
 801842c:	a905      	add	r1, sp, #20
 801842e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018432:	47a0      	blx	r4
 8018434:	b012      	add	sp, #72	; 0x48
 8018436:	bd70      	pop	{r4, r5, r6, pc}

08018438 <uxr_init_session>:
 8018438:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8018470 <uxr_init_session+0x38>
 801843c:	2300      	movs	r3, #0
 801843e:	b510      	push	{r4, lr}
 8018440:	4604      	mov	r4, r0
 8018442:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8018446:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 801844a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 801844e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8018452:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8018456:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 801845a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 801845e:	2181      	movs	r1, #129	; 0x81
 8018460:	f000 feca 	bl	80191f8 <uxr_init_session_info>
 8018464:	f104 0008 	add.w	r0, r4, #8
 8018468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801846c:	f001 bcc4 	b.w	8019df8 <uxr_init_stream_storage>
	...

08018478 <uxr_set_status_callback>:
 8018478:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801847c:	4770      	bx	lr
 801847e:	bf00      	nop

08018480 <uxr_set_topic_callback>:
 8018480:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8018484:	4770      	bx	lr
 8018486:	bf00      	nop

08018488 <uxr_set_request_callback>:
 8018488:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801848c:	4770      	bx	lr
 801848e:	bf00      	nop

08018490 <uxr_set_reply_callback>:
 8018490:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop

08018498 <uxr_create_output_best_effort_stream>:
 8018498:	b510      	push	{r4, lr}
 801849a:	4604      	mov	r4, r0
 801849c:	b084      	sub	sp, #16
 801849e:	e9cd 2100 	strd	r2, r1, [sp]
 80184a2:	f000 ff99 	bl	80193d8 <uxr_session_header_offset>
 80184a6:	4603      	mov	r3, r0
 80184a8:	f104 0008 	add.w	r0, r4, #8
 80184ac:	e9dd 2100 	ldrd	r2, r1, [sp]
 80184b0:	b004      	add	sp, #16
 80184b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184b6:	f001 bce5 	b.w	8019e84 <uxr_add_output_best_effort_buffer>
 80184ba:	bf00      	nop

080184bc <uxr_create_output_reliable_stream>:
 80184bc:	b530      	push	{r4, r5, lr}
 80184be:	b089      	sub	sp, #36	; 0x24
 80184c0:	4604      	mov	r4, r0
 80184c2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80184c6:	9303      	str	r3, [sp, #12]
 80184c8:	f000 ff86 	bl	80193d8 <uxr_session_header_offset>
 80184cc:	4605      	mov	r5, r0
 80184ce:	9905      	ldr	r1, [sp, #20]
 80184d0:	f104 0008 	add.w	r0, r4, #8
 80184d4:	9500      	str	r5, [sp, #0]
 80184d6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80184da:	f001 fce7 	bl	8019eac <uxr_add_output_reliable_buffer>
 80184de:	2200      	movs	r2, #0
 80184e0:	fa5f fc80 	uxtb.w	ip, r0
 80184e4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80184e8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80184ec:	0e03      	lsrs	r3, r0, #24
 80184ee:	f36c 0207 	bfi	r2, ip, #0, #8
 80184f2:	f364 220f 	bfi	r2, r4, #8, #8
 80184f6:	f361 4217 	bfi	r2, r1, #16, #8
 80184fa:	f363 621f 	bfi	r2, r3, #24, #8
 80184fe:	4610      	mov	r0, r2
 8018500:	b009      	add	sp, #36	; 0x24
 8018502:	bd30      	pop	{r4, r5, pc}

08018504 <uxr_create_input_best_effort_stream>:
 8018504:	b082      	sub	sp, #8
 8018506:	3008      	adds	r0, #8
 8018508:	b002      	add	sp, #8
 801850a:	f001 bce9 	b.w	8019ee0 <uxr_add_input_best_effort_buffer>
 801850e:	bf00      	nop

08018510 <uxr_create_input_reliable_stream>:
 8018510:	b510      	push	{r4, lr}
 8018512:	4c0c      	ldr	r4, [pc, #48]	; (8018544 <uxr_create_input_reliable_stream+0x34>)
 8018514:	b084      	sub	sp, #16
 8018516:	3008      	adds	r0, #8
 8018518:	9400      	str	r4, [sp, #0]
 801851a:	f001 fcf7 	bl	8019f0c <uxr_add_input_reliable_buffer>
 801851e:	2200      	movs	r2, #0
 8018520:	fa5f fe80 	uxtb.w	lr, r0
 8018524:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018528:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801852c:	0e03      	lsrs	r3, r0, #24
 801852e:	f36e 0207 	bfi	r2, lr, #0, #8
 8018532:	f36c 220f 	bfi	r2, ip, #8, #8
 8018536:	f361 4217 	bfi	r2, r1, #16, #8
 801853a:	f363 621f 	bfi	r2, r3, #24, #8
 801853e:	4610      	mov	r0, r2
 8018540:	b004      	add	sp, #16
 8018542:	bd10      	pop	{r4, pc}
 8018544:	0801831d 	.word	0x0801831d

08018548 <uxr_epoch_nanos>:
 8018548:	b510      	push	{r4, lr}
 801854a:	4604      	mov	r4, r0
 801854c:	f001 fd9a 	bl	801a084 <uxr_nanos>
 8018550:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8018554:	1ac0      	subs	r0, r0, r3
 8018556:	eb61 0102 	sbc.w	r1, r1, r2
 801855a:	bd10      	pop	{r4, pc}

0801855c <uxr_flash_output_streams>:
 801855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018560:	7e03      	ldrb	r3, [r0, #24]
 8018562:	b084      	sub	sp, #16
 8018564:	4604      	mov	r4, r0
 8018566:	b1fb      	cbz	r3, 80185a8 <uxr_flash_output_streams+0x4c>
 8018568:	f04f 0900 	mov.w	r9, #0
 801856c:	f10d 0802 	add.w	r8, sp, #2
 8018570:	af03      	add	r7, sp, #12
 8018572:	ae02      	add	r6, sp, #8
 8018574:	4648      	mov	r0, r9
 8018576:	2201      	movs	r2, #1
 8018578:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801857c:	4611      	mov	r1, r2
 801857e:	3508      	adds	r5, #8
 8018580:	f001 fbe0 	bl	8019d44 <uxr_stream_id>
 8018584:	4684      	mov	ip, r0
 8018586:	4643      	mov	r3, r8
 8018588:	463a      	mov	r2, r7
 801858a:	4631      	mov	r1, r6
 801858c:	4628      	mov	r0, r5
 801858e:	f8cd c004 	str.w	ip, [sp, #4]
 8018592:	f006 fb11 	bl	801ebb8 <uxr_prepare_best_effort_buffer_to_send>
 8018596:	2800      	cmp	r0, #0
 8018598:	d13d      	bne.n	8018616 <uxr_flash_output_streams+0xba>
 801859a:	f109 0901 	add.w	r9, r9, #1
 801859e:	7e23      	ldrb	r3, [r4, #24]
 80185a0:	fa5f f089 	uxtb.w	r0, r9
 80185a4:	4283      	cmp	r3, r0
 80185a6:	d8e6      	bhi.n	8018576 <uxr_flash_output_streams+0x1a>
 80185a8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80185ac:	b383      	cbz	r3, 8018610 <uxr_flash_output_streams+0xb4>
 80185ae:	f04f 0900 	mov.w	r9, #0
 80185b2:	f10d 0802 	add.w	r8, sp, #2
 80185b6:	af03      	add	r7, sp, #12
 80185b8:	ae02      	add	r6, sp, #8
 80185ba:	4648      	mov	r0, r9
 80185bc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80185c0:	2201      	movs	r2, #1
 80185c2:	2102      	movs	r1, #2
 80185c4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80185c8:	f001 fbbc 	bl	8019d44 <uxr_stream_id>
 80185cc:	9001      	str	r0, [sp, #4]
 80185ce:	3520      	adds	r5, #32
 80185d0:	e00c      	b.n	80185ec <uxr_flash_output_streams+0x90>
 80185d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80185d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80185da:	9b02      	ldr	r3, [sp, #8]
 80185dc:	f000 fea8 	bl	8019330 <uxr_stamp_session_header>
 80185e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80185e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80185e6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80185ea:	47d0      	blx	sl
 80185ec:	4643      	mov	r3, r8
 80185ee:	463a      	mov	r2, r7
 80185f0:	4631      	mov	r1, r6
 80185f2:	4628      	mov	r0, r5
 80185f4:	f006 fd04 	bl	801f000 <uxr_prepare_next_reliable_buffer_to_send>
 80185f8:	4603      	mov	r3, r0
 80185fa:	4620      	mov	r0, r4
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d1e8      	bne.n	80185d2 <uxr_flash_output_streams+0x76>
 8018600:	f109 0901 	add.w	r9, r9, #1
 8018604:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018608:	fa5f f089 	uxtb.w	r0, r9
 801860c:	4283      	cmp	r3, r0
 801860e:	d8d5      	bhi.n	80185bc <uxr_flash_output_streams+0x60>
 8018610:	b004      	add	sp, #16
 8018612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018616:	9b02      	ldr	r3, [sp, #8]
 8018618:	4620      	mov	r0, r4
 801861a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801861e:	f109 0901 	add.w	r9, r9, #1
 8018622:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018626:	f000 fe83 	bl	8019330 <uxr_stamp_session_header>
 801862a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801862c:	9a03      	ldr	r2, [sp, #12]
 801862e:	685d      	ldr	r5, [r3, #4]
 8018630:	6818      	ldr	r0, [r3, #0]
 8018632:	9902      	ldr	r1, [sp, #8]
 8018634:	47a8      	blx	r5
 8018636:	7e23      	ldrb	r3, [r4, #24]
 8018638:	fa5f f089 	uxtb.w	r0, r9
 801863c:	4283      	cmp	r3, r0
 801863e:	d89a      	bhi.n	8018576 <uxr_flash_output_streams+0x1a>
 8018640:	e7b2      	b.n	80185a8 <uxr_flash_output_streams+0x4c>
 8018642:	bf00      	nop

08018644 <read_submessage_info>:
 8018644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018648:	460d      	mov	r5, r1
 801864a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801864e:	4606      	mov	r6, r0
 8018650:	4669      	mov	r1, sp
 8018652:	4628      	mov	r0, r5
 8018654:	f002 fcce 	bl	801aff4 <uxr_deserialize_BaseObjectReply>
 8018658:	4604      	mov	r4, r0
 801865a:	a902      	add	r1, sp, #8
 801865c:	4628      	mov	r0, r5
 801865e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8018662:	f7f9 fc51 	bl	8011f08 <ucdr_deserialize_bool>
 8018666:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801866a:	4004      	ands	r4, r0
 801866c:	b2e4      	uxtb	r4, r4
 801866e:	b95b      	cbnz	r3, 8018688 <read_submessage_info+0x44>
 8018670:	a987      	add	r1, sp, #540	; 0x21c
 8018672:	4628      	mov	r0, r5
 8018674:	f7f9 fc48 	bl	8011f08 <ucdr_deserialize_bool>
 8018678:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801867c:	4680      	mov	r8, r0
 801867e:	b94b      	cbnz	r3, 8018694 <read_submessage_info+0x50>
 8018680:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8018684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018688:	a903      	add	r1, sp, #12
 801868a:	4628      	mov	r0, r5
 801868c:	f002 fb5e 	bl	801ad4c <uxr_deserialize_ObjectVariant>
 8018690:	4004      	ands	r4, r0
 8018692:	e7ed      	b.n	8018670 <read_submessage_info+0x2c>
 8018694:	a988      	add	r1, sp, #544	; 0x220
 8018696:	4628      	mov	r0, r5
 8018698:	f7f9 fc64 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801869c:	ea14 0f08 	tst.w	r4, r8
 80186a0:	d0ee      	beq.n	8018680 <read_submessage_info+0x3c>
 80186a2:	2800      	cmp	r0, #0
 80186a4:	d0ec      	beq.n	8018680 <read_submessage_info+0x3c>
 80186a6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80186aa:	2b0d      	cmp	r3, #13
 80186ac:	d1e8      	bne.n	8018680 <read_submessage_info+0x3c>
 80186ae:	a98a      	add	r1, sp, #552	; 0x228
 80186b0:	4628      	mov	r0, r5
 80186b2:	f7fa f9fd 	bl	8012ab0 <ucdr_deserialize_int16_t>
 80186b6:	b138      	cbz	r0, 80186c8 <read_submessage_info+0x84>
 80186b8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80186bc:	2b00      	cmp	r3, #0
 80186be:	dd06      	ble.n	80186ce <read_submessage_info+0x8a>
 80186c0:	2f00      	cmp	r7, #0
 80186c2:	bf14      	ite	ne
 80186c4:	2001      	movne	r0, #1
 80186c6:	2002      	moveq	r0, #2
 80186c8:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80186cc:	e7d8      	b.n	8018680 <read_submessage_info+0x3c>
 80186ce:	2000      	movs	r0, #0
 80186d0:	e7fa      	b.n	80186c8 <read_submessage_info+0x84>
 80186d2:	bf00      	nop

080186d4 <read_submessage_list>:
 80186d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d8:	4604      	mov	r4, r0
 80186da:	b097      	sub	sp, #92	; 0x5c
 80186dc:	460d      	mov	r5, r1
 80186de:	4ec1      	ldr	r6, [pc, #772]	; (80189e4 <read_submessage_list+0x310>)
 80186e0:	9209      	str	r2, [sp, #36]	; 0x24
 80186e2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80186e6:	aa0c      	add	r2, sp, #48	; 0x30
 80186e8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80186ec:	4628      	mov	r0, r5
 80186ee:	f001 fc81 	bl	8019ff4 <uxr_read_submessage_header>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	f000 8142 	beq.w	801897c <read_submessage_list+0x2a8>
 80186f8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80186fc:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018700:	3b02      	subs	r3, #2
 8018702:	2b0d      	cmp	r3, #13
 8018704:	d8ed      	bhi.n	80186e2 <read_submessage_list+0xe>
 8018706:	a101      	add	r1, pc, #4	; (adr r1, 801870c <read_submessage_list+0x38>)
 8018708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801870c:	08018973 	.word	0x08018973
 8018710:	080186e3 	.word	0x080186e3
 8018714:	08018963 	.word	0x08018963
 8018718:	08018901 	.word	0x08018901
 801871c:	080188f7 	.word	0x080188f7
 8018720:	080186e3 	.word	0x080186e3
 8018724:	080186e3 	.word	0x080186e3
 8018728:	0801884d 	.word	0x0801884d
 801872c:	080187df 	.word	0x080187df
 8018730:	0801879f 	.word	0x0801879f
 8018734:	080186e3 	.word	0x080186e3
 8018738:	080186e3 	.word	0x080186e3
 801873c:	080186e3 	.word	0x080186e3
 8018740:	08018745 	.word	0x08018745
 8018744:	a910      	add	r1, sp, #64	; 0x40
 8018746:	4628      	mov	r0, r5
 8018748:	f002 fe7c 	bl	801b444 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801874c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8018750:	f1b8 0f00 	cmp.w	r8, #0
 8018754:	f000 811a 	beq.w	801898c <read_submessage_list+0x2b8>
 8018758:	f001 fc94 	bl	801a084 <uxr_nanos>
 801875c:	4602      	mov	r2, r0
 801875e:	460b      	mov	r3, r1
 8018760:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8018764:	2100      	movs	r1, #0
 8018766:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018768:	9006      	str	r0, [sp, #24]
 801876a:	468c      	mov	ip, r1
 801876c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801876e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018772:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018774:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018778:	468c      	mov	ip, r1
 801877a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801877c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018780:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8018784:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8018788:	fbc7 0106 	smlal	r0, r1, r7, r6
 801878c:	e9cd 0100 	strd	r0, r1, [sp]
 8018790:	4620      	mov	r0, r4
 8018792:	47c0      	blx	r8
 8018794:	f04f 0301 	mov.w	r3, #1
 8018798:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 801879c:	e7a1      	b.n	80186e2 <read_submessage_list+0xe>
 801879e:	a910      	add	r1, sp, #64	; 0x40
 80187a0:	4628      	mov	r0, r5
 80187a2:	f002 fe3b 	bl	801b41c <uxr_deserialize_HEARTBEAT_Payload>
 80187a6:	2100      	movs	r1, #0
 80187a8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80187ac:	f001 faf8 	bl	8019da0 <uxr_stream_id_from_raw>
 80187b0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80187b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80187b6:	f104 0008 	add.w	r0, r4, #8
 80187ba:	4641      	mov	r1, r8
 80187bc:	f001 fbde 	bl	8019f7c <uxr_get_input_reliable_stream>
 80187c0:	2800      	cmp	r0, #0
 80187c2:	d08e      	beq.n	80186e2 <read_submessage_list+0xe>
 80187c4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80187c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80187cc:	f006 f95e 	bl	801ea8c <uxr_process_heartbeat>
 80187d0:	4642      	mov	r2, r8
 80187d2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80187d6:	4620      	mov	r0, r4
 80187d8:	f7ff fdf8 	bl	80183cc <write_submessage_acknack.isra.0>
 80187dc:	e781      	b.n	80186e2 <read_submessage_list+0xe>
 80187de:	a910      	add	r1, sp, #64	; 0x40
 80187e0:	4628      	mov	r0, r5
 80187e2:	f002 fdf3 	bl	801b3cc <uxr_deserialize_ACKNACK_Payload>
 80187e6:	2100      	movs	r1, #0
 80187e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80187ec:	f001 fad8 	bl	8019da0 <uxr_stream_id_from_raw>
 80187f0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80187f4:	900d      	str	r0, [sp, #52]	; 0x34
 80187f6:	f104 0008 	add.w	r0, r4, #8
 80187fa:	f001 fba9 	bl	8019f50 <uxr_get_output_reliable_stream>
 80187fe:	4680      	mov	r8, r0
 8018800:	2800      	cmp	r0, #0
 8018802:	f43f af6e 	beq.w	80186e2 <read_submessage_list+0xe>
 8018806:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801880a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801880e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8018812:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018816:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801881a:	b289      	uxth	r1, r1
 801881c:	f006 fc98 	bl	801f150 <uxr_process_acknack>
 8018820:	4640      	mov	r0, r8
 8018822:	f006 fc59 	bl	801f0d8 <uxr_begin_output_nack_buffer_it>
 8018826:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 801882a:	e005      	b.n	8018838 <read_submessage_list+0x164>
 801882c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801882e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8018832:	e9d3 0900 	ldrd	r0, r9, [r3]
 8018836:	47c8      	blx	r9
 8018838:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 801883c:	aa0f      	add	r2, sp, #60	; 0x3c
 801883e:	4651      	mov	r1, sl
 8018840:	4640      	mov	r0, r8
 8018842:	f006 fc4b 	bl	801f0dc <uxr_next_reliable_nack_buffer_to_send>
 8018846:	2800      	cmp	r0, #0
 8018848:	d1f0      	bne.n	801882c <read_submessage_list+0x158>
 801884a:	e74a      	b.n	80186e2 <read_submessage_list+0xe>
 801884c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018850:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018854:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8018858:	4628      	mov	r0, r5
 801885a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801885e:	4651      	mov	r1, sl
 8018860:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8018864:	f1a8 0804 	sub.w	r8, r8, #4
 8018868:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 801886c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8018870:	fa1f f888 	uxth.w	r8, r8
 8018874:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018878:	f009 090e 	and.w	r9, r9, #14
 801887c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8018880:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8018884:	f002 fb04 	bl	801ae90 <uxr_deserialize_BaseObjectRequest>
 8018888:	4650      	mov	r0, sl
 801888a:	a90f      	add	r1, sp, #60	; 0x3c
 801888c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018890:	f000 fdca 	bl	8019428 <uxr_parse_base_object_request>
 8018894:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018896:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 801889a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 801889e:	9110      	str	r1, [sp, #64]	; 0x40
 80188a0:	f1bb 0f00 	cmp.w	fp, #0
 80188a4:	d006      	beq.n	80188b4 <read_submessage_list+0x1e0>
 80188a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80188aa:	4652      	mov	r2, sl
 80188ac:	4620      	mov	r0, r4
 80188ae:	9300      	str	r3, [sp, #0]
 80188b0:	2300      	movs	r3, #0
 80188b2:	47d8      	blx	fp
 80188b4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80188b6:	b182      	cbz	r2, 80188da <read_submessage_list+0x206>
 80188b8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80188ba:	f04f 0c00 	mov.w	ip, #0
 80188be:	3902      	subs	r1, #2
 80188c0:	e003      	b.n	80188ca <read_submessage_list+0x1f6>
 80188c2:	f10c 0c01 	add.w	ip, ip, #1
 80188c6:	4594      	cmp	ip, r2
 80188c8:	d007      	beq.n	80188da <read_submessage_list+0x206>
 80188ca:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80188ce:	4553      	cmp	r3, sl
 80188d0:	d1f7      	bne.n	80188c2 <read_submessage_list+0x1ee>
 80188d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80188d4:	2200      	movs	r2, #0
 80188d6:	f803 200c 	strb.w	r2, [r3, ip]
 80188da:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80188de:	464b      	mov	r3, r9
 80188e0:	4642      	mov	r2, r8
 80188e2:	4620      	mov	r0, r4
 80188e4:	9102      	str	r1, [sp, #8]
 80188e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80188e8:	9101      	str	r1, [sp, #4]
 80188ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80188ec:	9100      	str	r1, [sp, #0]
 80188ee:	4629      	mov	r1, r5
 80188f0:	f7ff fc4a 	bl	8018188 <read_submessage_format>
 80188f4:	e6f5      	b.n	80186e2 <read_submessage_list+0xe>
 80188f6:	4629      	mov	r1, r5
 80188f8:	4620      	mov	r0, r4
 80188fa:	f7ff fea3 	bl	8018644 <read_submessage_info>
 80188fe:	e6f0      	b.n	80186e2 <read_submessage_list+0xe>
 8018900:	2a00      	cmp	r2, #0
 8018902:	d03e      	beq.n	8018982 <read_submessage_list+0x2ae>
 8018904:	a910      	add	r1, sp, #64	; 0x40
 8018906:	4628      	mov	r0, r5
 8018908:	f002 fcb8 	bl	801b27c <uxr_deserialize_STATUS_Payload>
 801890c:	a90e      	add	r1, sp, #56	; 0x38
 801890e:	aa0d      	add	r2, sp, #52	; 0x34
 8018910:	a810      	add	r0, sp, #64	; 0x40
 8018912:	f000 fd89 	bl	8019428 <uxr_parse_base_object_request>
 8018916:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018918:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801891c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018920:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8018924:	910f      	str	r1, [sp, #60]	; 0x3c
 8018926:	f1ba 0f00 	cmp.w	sl, #0
 801892a:	d006      	beq.n	801893a <read_submessage_list+0x266>
 801892c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018930:	4642      	mov	r2, r8
 8018932:	4620      	mov	r0, r4
 8018934:	9300      	str	r3, [sp, #0]
 8018936:	464b      	mov	r3, r9
 8018938:	47d0      	blx	sl
 801893a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801893c:	2a00      	cmp	r2, #0
 801893e:	f43f aed0 	beq.w	80186e2 <read_submessage_list+0xe>
 8018942:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8018944:	2100      	movs	r1, #0
 8018946:	3802      	subs	r0, #2
 8018948:	e003      	b.n	8018952 <read_submessage_list+0x27e>
 801894a:	3101      	adds	r1, #1
 801894c:	4291      	cmp	r1, r2
 801894e:	f43f aec8 	beq.w	80186e2 <read_submessage_list+0xe>
 8018952:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8018956:	4543      	cmp	r3, r8
 8018958:	d1f7      	bne.n	801894a <read_submessage_list+0x276>
 801895a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801895c:	f803 9001 	strb.w	r9, [r3, r1]
 8018960:	e6bf      	b.n	80186e2 <read_submessage_list+0xe>
 8018962:	2a00      	cmp	r2, #0
 8018964:	f47f aebd 	bne.w	80186e2 <read_submessage_list+0xe>
 8018968:	4629      	mov	r1, r5
 801896a:	4620      	mov	r0, r4
 801896c:	f000 fca0 	bl	80192b0 <uxr_read_create_session_status>
 8018970:	e6b7      	b.n	80186e2 <read_submessage_list+0xe>
 8018972:	4629      	mov	r1, r5
 8018974:	4620      	mov	r0, r4
 8018976:	f7ff fcf3 	bl	8018360 <read_submessage_get_info>
 801897a:	e6b2      	b.n	80186e2 <read_submessage_list+0xe>
 801897c:	b017      	add	sp, #92	; 0x5c
 801897e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018982:	4629      	mov	r1, r5
 8018984:	4620      	mov	r0, r4
 8018986:	f000 fca1 	bl	80192cc <uxr_read_delete_session_status>
 801898a:	e6aa      	b.n	80186e2 <read_submessage_list+0xe>
 801898c:	f001 fb7a 	bl	801a084 <uxr_nanos>
 8018990:	4642      	mov	r2, r8
 8018992:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018996:	fbc7 3206 	smlal	r3, r2, r7, r6
 801899a:	1818      	adds	r0, r3, r0
 801899c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801899e:	eb42 0101 	adc.w	r1, r2, r1
 80189a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80189a4:	4642      	mov	r2, r8
 80189a6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80189aa:	469c      	mov	ip, r3
 80189ac:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80189b0:	fbc3 7806 	smlal	r7, r8, r3, r6
 80189b4:	4643      	mov	r3, r8
 80189b6:	eb1c 0c07 	adds.w	ip, ip, r7
 80189ba:	eb42 0203 	adc.w	r2, r2, r3
 80189be:	ebb0 030c 	subs.w	r3, r0, ip
 80189c2:	eb61 0202 	sbc.w	r2, r1, r2
 80189c6:	2a00      	cmp	r2, #0
 80189c8:	db08      	blt.n	80189dc <read_submessage_list+0x308>
 80189ca:	085b      	lsrs	r3, r3, #1
 80189cc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80189d0:	1052      	asrs	r2, r2, #1
 80189d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80189d6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80189da:	e6db      	b.n	8018794 <read_submessage_list+0xc0>
 80189dc:	3301      	adds	r3, #1
 80189de:	f142 0200 	adc.w	r2, r2, #0
 80189e2:	e7f2      	b.n	80189ca <read_submessage_list+0x2f6>
 80189e4:	3b9aca00 	.word	0x3b9aca00

080189e8 <listen_message_reliably>:
 80189e8:	1e0b      	subs	r3, r1, #0
 80189ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ee:	bfb8      	it	lt
 80189f0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80189f4:	b09d      	sub	sp, #116	; 0x74
 80189f6:	4680      	mov	r8, r0
 80189f8:	9305      	str	r3, [sp, #20]
 80189fa:	f001 fb27 	bl	801a04c <uxr_millis>
 80189fe:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8018a02:	4681      	mov	r9, r0
 8018a04:	2a00      	cmp	r2, #0
 8018a06:	f000 809a 	beq.w	8018b3e <listen_message_reliably+0x156>
 8018a0a:	2600      	movs	r6, #0
 8018a0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018a10:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8018a14:	460f      	mov	r7, r1
 8018a16:	4630      	mov	r0, r6
 8018a18:	9303      	str	r3, [sp, #12]
 8018a1a:	e00e      	b.n	8018a3a <listen_message_reliably+0x52>
 8018a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018a1e:	3601      	adds	r6, #1
 8018a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a22:	455a      	cmp	r2, fp
 8018a24:	9903      	ldr	r1, [sp, #12]
 8018a26:	b2f0      	uxtb	r0, r6
 8018a28:	eb73 0101 	sbcs.w	r1, r3, r1
 8018a2c:	da01      	bge.n	8018a32 <listen_message_reliably+0x4a>
 8018a2e:	4693      	mov	fp, r2
 8018a30:	9303      	str	r3, [sp, #12]
 8018a32:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018a36:	4283      	cmp	r3, r0
 8018a38:	d95f      	bls.n	8018afa <listen_message_reliably+0x112>
 8018a3a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8018a3e:	2102      	movs	r1, #2
 8018a40:	2201      	movs	r2, #1
 8018a42:	00e4      	lsls	r4, r4, #3
 8018a44:	f001 f97e 	bl	8019d44 <uxr_stream_id>
 8018a48:	4601      	mov	r1, r0
 8018a4a:	f104 0520 	add.w	r5, r4, #32
 8018a4e:	463b      	mov	r3, r7
 8018a50:	464a      	mov	r2, r9
 8018a52:	9109      	str	r1, [sp, #36]	; 0x24
 8018a54:	4445      	add	r5, r8
 8018a56:	4628      	mov	r0, r5
 8018a58:	f006 fb12 	bl	801f080 <uxr_update_output_stream_heartbeat_timestamp>
 8018a5c:	eb08 0304 	add.w	r3, r8, r4
 8018a60:	2800      	cmp	r0, #0
 8018a62:	d0db      	beq.n	8018a1c <listen_message_reliably+0x34>
 8018a64:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8018a68:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8018a6c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018a70:	4640      	mov	r0, r8
 8018a72:	3501      	adds	r5, #1
 8018a74:	4444      	add	r4, r8
 8018a76:	9304      	str	r3, [sp, #16]
 8018a78:	f000 fcae 	bl	80193d8 <uxr_session_header_offset>
 8018a7c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018a80:	2300      	movs	r3, #0
 8018a82:	2211      	movs	r2, #17
 8018a84:	a90c      	add	r1, sp, #48	; 0x30
 8018a86:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8018a8a:	9000      	str	r0, [sp, #0]
 8018a8c:	4650      	mov	r0, sl
 8018a8e:	3601      	adds	r6, #1
 8018a90:	f7fa fd18 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 8018a94:	2300      	movs	r3, #0
 8018a96:	2205      	movs	r2, #5
 8018a98:	210b      	movs	r1, #11
 8018a9a:	4650      	mov	r0, sl
 8018a9c:	f001 fa90 	bl	8019fc0 <uxr_buffer_submessage_header>
 8018aa0:	2101      	movs	r1, #1
 8018aa2:	8968      	ldrh	r0, [r5, #10]
 8018aa4:	f006 fbb0 	bl	801f208 <uxr_seq_num_add>
 8018aa8:	892b      	ldrh	r3, [r5, #8]
 8018aaa:	4602      	mov	r2, r0
 8018aac:	a90a      	add	r1, sp, #40	; 0x28
 8018aae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018ab2:	4650      	mov	r0, sl
 8018ab4:	9b04      	ldr	r3, [sp, #16]
 8018ab6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018aba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018abe:	f002 fc99 	bl	801b3f4 <uxr_serialize_HEARTBEAT_Payload>
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018ac6:	4640      	mov	r0, r8
 8018ac8:	4611      	mov	r1, r2
 8018aca:	f000 fc31 	bl	8019330 <uxr_stamp_session_header>
 8018ace:	4650      	mov	r0, sl
 8018ad0:	f7fa fd38 	bl	8013544 <ucdr_buffer_length>
 8018ad4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018ad8:	4602      	mov	r2, r0
 8018ada:	a90c      	add	r1, sp, #48	; 0x30
 8018adc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018ae0:	47a8      	blx	r5
 8018ae2:	9903      	ldr	r1, [sp, #12]
 8018ae4:	b2f0      	uxtb	r0, r6
 8018ae6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8018aea:	455a      	cmp	r2, fp
 8018aec:	eb73 0101 	sbcs.w	r1, r3, r1
 8018af0:	db9d      	blt.n	8018a2e <listen_message_reliably+0x46>
 8018af2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018af6:	4283      	cmp	r3, r0
 8018af8:	d89f      	bhi.n	8018a3a <listen_message_reliably+0x52>
 8018afa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018afe:	9a03      	ldr	r2, [sp, #12]
 8018b00:	429a      	cmp	r2, r3
 8018b02:	bf08      	it	eq
 8018b04:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8018b08:	d019      	beq.n	8018b3e <listen_message_reliably+0x156>
 8018b0a:	ebab 0309 	sub.w	r3, fp, r9
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	9d05      	ldr	r5, [sp, #20]
 8018b12:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8018b16:	aa08      	add	r2, sp, #32
 8018b18:	bf08      	it	eq
 8018b1a:	2301      	moveq	r3, #1
 8018b1c:	a907      	add	r1, sp, #28
 8018b1e:	6884      	ldr	r4, [r0, #8]
 8018b20:	429d      	cmp	r5, r3
 8018b22:	6800      	ldr	r0, [r0, #0]
 8018b24:	bfa8      	it	ge
 8018b26:	461d      	movge	r5, r3
 8018b28:	462b      	mov	r3, r5
 8018b2a:	47a0      	blx	r4
 8018b2c:	b948      	cbnz	r0, 8018b42 <listen_message_reliably+0x15a>
 8018b2e:	9b05      	ldr	r3, [sp, #20]
 8018b30:	1b5b      	subs	r3, r3, r5
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	9305      	str	r3, [sp, #20]
 8018b36:	f73f af60 	bgt.w	80189fa <listen_message_reliably+0x12>
 8018b3a:	4604      	mov	r4, r0
 8018b3c:	e012      	b.n	8018b64 <listen_message_reliably+0x17c>
 8018b3e:	9b05      	ldr	r3, [sp, #20]
 8018b40:	e7e5      	b.n	8018b0e <listen_message_reliably+0x126>
 8018b42:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018b46:	4604      	mov	r4, r0
 8018b48:	2500      	movs	r5, #0
 8018b4a:	a80c      	add	r0, sp, #48	; 0x30
 8018b4c:	f7fa fccc 	bl	80134e8 <ucdr_init_buffer>
 8018b50:	f10d 031a 	add.w	r3, sp, #26
 8018b54:	aa06      	add	r2, sp, #24
 8018b56:	a90c      	add	r1, sp, #48	; 0x30
 8018b58:	4640      	mov	r0, r8
 8018b5a:	f88d 5018 	strb.w	r5, [sp, #24]
 8018b5e:	f000 fbfb 	bl	8019358 <uxr_read_session_header>
 8018b62:	b918      	cbnz	r0, 8018b6c <listen_message_reliably+0x184>
 8018b64:	4620      	mov	r0, r4
 8018b66:	b01d      	add	sp, #116	; 0x74
 8018b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b6c:	4629      	mov	r1, r5
 8018b6e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018b72:	f001 f915 	bl	8019da0 <uxr_stream_id_from_raw>
 8018b76:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018b7a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8018b7e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8018b82:	2e01      	cmp	r6, #1
 8018b84:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018b88:	d04b      	beq.n	8018c22 <listen_message_reliably+0x23a>
 8018b8a:	2e02      	cmp	r6, #2
 8018b8c:	d00f      	beq.n	8018bae <listen_message_reliably+0x1c6>
 8018b8e:	2e00      	cmp	r6, #0
 8018b90:	d1e8      	bne.n	8018b64 <listen_message_reliably+0x17c>
 8018b92:	4631      	mov	r1, r6
 8018b94:	4630      	mov	r0, r6
 8018b96:	f001 f903 	bl	8019da0 <uxr_stream_id_from_raw>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	a90c      	add	r1, sp, #48	; 0x30
 8018b9e:	4640      	mov	r0, r8
 8018ba0:	920a      	str	r2, [sp, #40]	; 0x28
 8018ba2:	f7ff fd97 	bl	80186d4 <read_submessage_list>
 8018ba6:	4620      	mov	r0, r4
 8018ba8:	b01d      	add	sp, #116	; 0x74
 8018baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bae:	4629      	mov	r1, r5
 8018bb0:	f108 0008 	add.w	r0, r8, #8
 8018bb4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8018bb8:	f001 f9e0 	bl	8019f7c <uxr_get_input_reliable_stream>
 8018bbc:	4607      	mov	r7, r0
 8018bbe:	b338      	cbz	r0, 8018c10 <listen_message_reliably+0x228>
 8018bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018bc2:	a80c      	add	r0, sp, #48	; 0x30
 8018bc4:	9203      	str	r2, [sp, #12]
 8018bc6:	f7fa fcc1 	bl	801354c <ucdr_buffer_remaining>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	f10d 0019 	add.w	r0, sp, #25
 8018bd0:	9a03      	ldr	r2, [sp, #12]
 8018bd2:	4651      	mov	r1, sl
 8018bd4:	9000      	str	r0, [sp, #0]
 8018bd6:	4638      	mov	r0, r7
 8018bd8:	f005 fe5c 	bl	801e894 <uxr_receive_reliable_message>
 8018bdc:	b1c0      	cbz	r0, 8018c10 <listen_message_reliably+0x228>
 8018bde:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018be2:	b393      	cbz	r3, 8018c4a <listen_message_reliably+0x262>
 8018be4:	ae14      	add	r6, sp, #80	; 0x50
 8018be6:	f04f 0a02 	mov.w	sl, #2
 8018bea:	e00a      	b.n	8018c02 <listen_message_reliably+0x21a>
 8018bec:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8018bf0:	4631      	mov	r1, r6
 8018bf2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8018bf6:	4640      	mov	r0, r8
 8018bf8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018bfe:	f7ff fd69 	bl	80186d4 <read_submessage_list>
 8018c02:	2204      	movs	r2, #4
 8018c04:	4631      	mov	r1, r6
 8018c06:	4638      	mov	r0, r7
 8018c08:	f005 fec6 	bl	801e998 <uxr_next_input_reliable_buffer_available>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	d1ed      	bne.n	8018bec <listen_message_reliably+0x204>
 8018c10:	4640      	mov	r0, r8
 8018c12:	462a      	mov	r2, r5
 8018c14:	4649      	mov	r1, r9
 8018c16:	f7ff fbd9 	bl	80183cc <write_submessage_acknack.isra.0>
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	b01d      	add	sp, #116	; 0x74
 8018c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c22:	4629      	mov	r1, r5
 8018c24:	f108 0008 	add.w	r0, r8, #8
 8018c28:	f001 f99e 	bl	8019f68 <uxr_get_input_best_effort_stream>
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	d099      	beq.n	8018b64 <listen_message_reliably+0x17c>
 8018c30:	4651      	mov	r1, sl
 8018c32:	f005 fda5 	bl	801e780 <uxr_receive_best_effort_message>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d094      	beq.n	8018b64 <listen_message_reliably+0x17c>
 8018c3a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018c3e:	a90c      	add	r1, sp, #48	; 0x30
 8018c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c42:	4640      	mov	r0, r8
 8018c44:	f7ff fd46 	bl	80186d4 <read_submessage_list>
 8018c48:	e78c      	b.n	8018b64 <listen_message_reliably+0x17c>
 8018c4a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018c4e:	a90c      	add	r1, sp, #48	; 0x30
 8018c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c52:	4640      	mov	r0, r8
 8018c54:	f7ff fd3e 	bl	80186d4 <read_submessage_list>
 8018c58:	e7c4      	b.n	8018be4 <listen_message_reliably+0x1fc>
 8018c5a:	bf00      	nop

08018c5c <uxr_run_session_timeout>:
 8018c5c:	b570      	push	{r4, r5, r6, lr}
 8018c5e:	4604      	mov	r4, r0
 8018c60:	460d      	mov	r5, r1
 8018c62:	f001 f9f3 	bl	801a04c <uxr_millis>
 8018c66:	4606      	mov	r6, r0
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f7ff fc77 	bl	801855c <uxr_flash_output_streams>
 8018c6e:	4629      	mov	r1, r5
 8018c70:	4620      	mov	r0, r4
 8018c72:	f7ff feb9 	bl	80189e8 <listen_message_reliably>
 8018c76:	f001 f9e9 	bl	801a04c <uxr_millis>
 8018c7a:	1b83      	subs	r3, r0, r6
 8018c7c:	1ae9      	subs	r1, r5, r3
 8018c7e:	2900      	cmp	r1, #0
 8018c80:	dcf6      	bgt.n	8018c70 <uxr_run_session_timeout+0x14>
 8018c82:	f104 0008 	add.w	r0, r4, #8
 8018c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c8a:	f001 b983 	b.w	8019f94 <uxr_output_streams_confirmed>
 8018c8e:	bf00      	nop

08018c90 <uxr_run_session_until_data>:
 8018c90:	b570      	push	{r4, r5, r6, lr}
 8018c92:	4604      	mov	r4, r0
 8018c94:	460d      	mov	r5, r1
 8018c96:	f001 f9d9 	bl	801a04c <uxr_millis>
 8018c9a:	4606      	mov	r6, r0
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f7ff fc5d 	bl	801855c <uxr_flash_output_streams>
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	4629      	mov	r1, r5
 8018ca6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018caa:	e005      	b.n	8018cb8 <uxr_run_session_until_data+0x28>
 8018cac:	f001 f9ce 	bl	801a04c <uxr_millis>
 8018cb0:	1b83      	subs	r3, r0, r6
 8018cb2:	1ae9      	subs	r1, r5, r3
 8018cb4:	2900      	cmp	r1, #0
 8018cb6:	dd07      	ble.n	8018cc8 <uxr_run_session_until_data+0x38>
 8018cb8:	4620      	mov	r0, r4
 8018cba:	f7ff fe95 	bl	80189e8 <listen_message_reliably>
 8018cbe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018cc2:	2800      	cmp	r0, #0
 8018cc4:	d0f2      	beq.n	8018cac <uxr_run_session_until_data+0x1c>
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018ccc:	bd70      	pop	{r4, r5, r6, pc}
 8018cce:	bf00      	nop

08018cd0 <uxr_run_session_until_confirm_delivery>:
 8018cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd4:	4606      	mov	r6, r0
 8018cd6:	460d      	mov	r5, r1
 8018cd8:	f001 f9b8 	bl	801a04c <uxr_millis>
 8018cdc:	4607      	mov	r7, r0
 8018cde:	4630      	mov	r0, r6
 8018ce0:	f106 0808 	add.w	r8, r6, #8
 8018ce4:	f7ff fc3a 	bl	801855c <uxr_flash_output_streams>
 8018ce8:	2d00      	cmp	r5, #0
 8018cea:	db10      	blt.n	8018d0e <uxr_run_session_until_confirm_delivery+0x3e>
 8018cec:	462c      	mov	r4, r5
 8018cee:	e006      	b.n	8018cfe <uxr_run_session_until_confirm_delivery+0x2e>
 8018cf0:	f7ff fe7a 	bl	80189e8 <listen_message_reliably>
 8018cf4:	f001 f9aa 	bl	801a04c <uxr_millis>
 8018cf8:	1bc3      	subs	r3, r0, r7
 8018cfa:	1aec      	subs	r4, r5, r3
 8018cfc:	d407      	bmi.n	8018d0e <uxr_run_session_until_confirm_delivery+0x3e>
 8018cfe:	4640      	mov	r0, r8
 8018d00:	f001 f948 	bl	8019f94 <uxr_output_streams_confirmed>
 8018d04:	4603      	mov	r3, r0
 8018d06:	4621      	mov	r1, r4
 8018d08:	4630      	mov	r0, r6
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d0f0      	beq.n	8018cf0 <uxr_run_session_until_confirm_delivery+0x20>
 8018d0e:	4640      	mov	r0, r8
 8018d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d14:	f001 b93e 	b.w	8019f94 <uxr_output_streams_confirmed>

08018d18 <uxr_run_session_until_all_status>:
 8018d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d1c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018d20:	4606      	mov	r6, r0
 8018d22:	4688      	mov	r8, r1
 8018d24:	4692      	mov	sl, r2
 8018d26:	461f      	mov	r7, r3
 8018d28:	f7ff fc18 	bl	801855c <uxr_flash_output_streams>
 8018d2c:	f1bb 0f00 	cmp.w	fp, #0
 8018d30:	d004      	beq.n	8018d3c <uxr_run_session_until_all_status+0x24>
 8018d32:	465a      	mov	r2, fp
 8018d34:	21ff      	movs	r1, #255	; 0xff
 8018d36:	4638      	mov	r0, r7
 8018d38:	f008 f940 	bl	8020fbc <memset>
 8018d3c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018d40:	1e7d      	subs	r5, r7, #1
 8018d42:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8018d46:	f001 f981 	bl	801a04c <uxr_millis>
 8018d4a:	4641      	mov	r1, r8
 8018d4c:	4681      	mov	r9, r0
 8018d4e:	4630      	mov	r0, r6
 8018d50:	f7ff fe4a 	bl	80189e8 <listen_message_reliably>
 8018d54:	f001 f97a 	bl	801a04c <uxr_millis>
 8018d58:	eba0 0009 	sub.w	r0, r0, r9
 8018d5c:	eba8 0100 	sub.w	r1, r8, r0
 8018d60:	f1bb 0f00 	cmp.w	fp, #0
 8018d64:	d029      	beq.n	8018dba <uxr_run_session_until_all_status+0xa2>
 8018d66:	46ae      	mov	lr, r5
 8018d68:	f04f 0c00 	mov.w	ip, #0
 8018d6c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018d70:	2cff      	cmp	r4, #255	; 0xff
 8018d72:	d015      	beq.n	8018da0 <uxr_run_session_until_all_status+0x88>
 8018d74:	f10c 0c01 	add.w	ip, ip, #1
 8018d78:	45e3      	cmp	fp, ip
 8018d7a:	d8f7      	bhi.n	8018d6c <uxr_run_session_until_all_status+0x54>
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018d80:	e000      	b.n	8018d84 <uxr_run_session_until_all_status+0x6c>
 8018d82:	b158      	cbz	r0, 8018d9c <uxr_run_session_until_all_status+0x84>
 8018d84:	462b      	mov	r3, r5
 8018d86:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018d8a:	3302      	adds	r3, #2
 8018d8c:	2801      	cmp	r0, #1
 8018d8e:	eba3 0307 	sub.w	r3, r3, r7
 8018d92:	bf8c      	ite	hi
 8018d94:	2000      	movhi	r0, #0
 8018d96:	2001      	movls	r0, #1
 8018d98:	459b      	cmp	fp, r3
 8018d9a:	d8f2      	bhi.n	8018d82 <uxr_run_session_until_all_status+0x6a>
 8018d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018da4:	f10c 0c01 	add.w	ip, ip, #1
 8018da8:	45dc      	cmp	ip, fp
 8018daa:	d201      	bcs.n	8018db0 <uxr_run_session_until_all_status+0x98>
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d0dd      	beq.n	8018d6c <uxr_run_session_until_all_status+0x54>
 8018db0:	2900      	cmp	r1, #0
 8018db2:	dde3      	ble.n	8018d7c <uxr_run_session_until_all_status+0x64>
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d1ca      	bne.n	8018d4e <uxr_run_session_until_all_status+0x36>
 8018db8:	e7e0      	b.n	8018d7c <uxr_run_session_until_all_status+0x64>
 8018dba:	2001      	movs	r0, #1
 8018dbc:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dc4 <wait_session_status>:
 8018dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc8:	4604      	mov	r4, r0
 8018dca:	b09d      	sub	sp, #116	; 0x74
 8018dcc:	20ff      	movs	r0, #255	; 0xff
 8018dce:	9303      	str	r3, [sp, #12]
 8018dd0:	7160      	strb	r0, [r4, #5]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	f000 80b6 	beq.w	8018f44 <wait_session_status+0x180>
 8018dd8:	4689      	mov	r9, r1
 8018dda:	4692      	mov	sl, r2
 8018ddc:	f04f 0b00 	mov.w	fp, #0
 8018de0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018de2:	4652      	mov	r2, sl
 8018de4:	4649      	mov	r1, r9
 8018de6:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018dea:	47a8      	blx	r5
 8018dec:	f001 f92e 	bl	801a04c <uxr_millis>
 8018df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018df4:	4605      	mov	r5, r0
 8018df6:	e009      	b.n	8018e0c <wait_session_status+0x48>
 8018df8:	f001 f928 	bl	801a04c <uxr_millis>
 8018dfc:	1b40      	subs	r0, r0, r5
 8018dfe:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	dd40      	ble.n	8018e88 <wait_session_status+0xc4>
 8018e06:	7960      	ldrb	r0, [r4, #5]
 8018e08:	28ff      	cmp	r0, #255	; 0xff
 8018e0a:	d145      	bne.n	8018e98 <wait_session_status+0xd4>
 8018e0c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018e0e:	a908      	add	r1, sp, #32
 8018e10:	6896      	ldr	r6, [r2, #8]
 8018e12:	6810      	ldr	r0, [r2, #0]
 8018e14:	aa09      	add	r2, sp, #36	; 0x24
 8018e16:	47b0      	blx	r6
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	d0ed      	beq.n	8018df8 <wait_session_status+0x34>
 8018e1c:	a80c      	add	r0, sp, #48	; 0x30
 8018e1e:	2600      	movs	r6, #0
 8018e20:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018e24:	f7fa fb60 	bl	80134e8 <ucdr_init_buffer>
 8018e28:	f10d 031e 	add.w	r3, sp, #30
 8018e2c:	aa07      	add	r2, sp, #28
 8018e2e:	a90c      	add	r1, sp, #48	; 0x30
 8018e30:	4620      	mov	r0, r4
 8018e32:	f88d 601c 	strb.w	r6, [sp, #28]
 8018e36:	f000 fa8f 	bl	8019358 <uxr_read_session_header>
 8018e3a:	2800      	cmp	r0, #0
 8018e3c:	d0dc      	beq.n	8018df8 <wait_session_status+0x34>
 8018e3e:	4631      	mov	r1, r6
 8018e40:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018e44:	f000 ffac 	bl	8019da0 <uxr_stream_id_from_raw>
 8018e48:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018e4c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018e50:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018e54:	2f01      	cmp	r7, #1
 8018e56:	9302      	str	r3, [sp, #8]
 8018e58:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018e5c:	d05c      	beq.n	8018f18 <wait_session_status+0x154>
 8018e5e:	2f02      	cmp	r7, #2
 8018e60:	d020      	beq.n	8018ea4 <wait_session_status+0xe0>
 8018e62:	2f00      	cmp	r7, #0
 8018e64:	d1c8      	bne.n	8018df8 <wait_session_status+0x34>
 8018e66:	4639      	mov	r1, r7
 8018e68:	4638      	mov	r0, r7
 8018e6a:	f000 ff99 	bl	8019da0 <uxr_stream_id_from_raw>
 8018e6e:	a90c      	add	r1, sp, #48	; 0x30
 8018e70:	4602      	mov	r2, r0
 8018e72:	900b      	str	r0, [sp, #44]	; 0x2c
 8018e74:	4620      	mov	r0, r4
 8018e76:	f7ff fc2d 	bl	80186d4 <read_submessage_list>
 8018e7a:	f001 f8e7 	bl	801a04c <uxr_millis>
 8018e7e:	1b40      	subs	r0, r0, r5
 8018e80:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	dcbe      	bgt.n	8018e06 <wait_session_status+0x42>
 8018e88:	f10b 0b01 	add.w	fp, fp, #1
 8018e8c:	9b03      	ldr	r3, [sp, #12]
 8018e8e:	7960      	ldrb	r0, [r4, #5]
 8018e90:	455b      	cmp	r3, fp
 8018e92:	d001      	beq.n	8018e98 <wait_session_status+0xd4>
 8018e94:	28ff      	cmp	r0, #255	; 0xff
 8018e96:	d0a3      	beq.n	8018de0 <wait_session_status+0x1c>
 8018e98:	38ff      	subs	r0, #255	; 0xff
 8018e9a:	bf18      	it	ne
 8018e9c:	2001      	movne	r0, #1
 8018e9e:	b01d      	add	sp, #116	; 0x74
 8018ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ea4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8018ea8:	4631      	mov	r1, r6
 8018eaa:	f104 0008 	add.w	r0, r4, #8
 8018eae:	9304      	str	r3, [sp, #16]
 8018eb0:	f001 f864 	bl	8019f7c <uxr_get_input_reliable_stream>
 8018eb4:	4680      	mov	r8, r0
 8018eb6:	b348      	cbz	r0, 8018f0c <wait_session_status+0x148>
 8018eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018eba:	a80c      	add	r0, sp, #48	; 0x30
 8018ebc:	9205      	str	r2, [sp, #20]
 8018ebe:	f7fa fb45 	bl	801354c <ucdr_buffer_remaining>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	f10d 001d 	add.w	r0, sp, #29
 8018ec8:	9a05      	ldr	r2, [sp, #20]
 8018eca:	9000      	str	r0, [sp, #0]
 8018ecc:	4640      	mov	r0, r8
 8018ece:	9902      	ldr	r1, [sp, #8]
 8018ed0:	f005 fce0 	bl	801e894 <uxr_receive_reliable_message>
 8018ed4:	b1d0      	cbz	r0, 8018f0c <wait_session_status+0x148>
 8018ed6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d03a      	beq.n	8018f54 <wait_session_status+0x190>
 8018ede:	9f04      	ldr	r7, [sp, #16]
 8018ee0:	e00a      	b.n	8018ef8 <wait_session_status+0x134>
 8018ee2:	f04f 0302 	mov.w	r3, #2
 8018ee6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8018eea:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018eee:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8018ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ef4:	f7ff fbee 	bl	80186d4 <read_submessage_list>
 8018ef8:	a914      	add	r1, sp, #80	; 0x50
 8018efa:	2204      	movs	r2, #4
 8018efc:	4640      	mov	r0, r8
 8018efe:	f005 fd4b 	bl	801e998 <uxr_next_input_reliable_buffer_available>
 8018f02:	4603      	mov	r3, r0
 8018f04:	a914      	add	r1, sp, #80	; 0x50
 8018f06:	4620      	mov	r0, r4
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d1ea      	bne.n	8018ee2 <wait_session_status+0x11e>
 8018f0c:	4632      	mov	r2, r6
 8018f0e:	9904      	ldr	r1, [sp, #16]
 8018f10:	4620      	mov	r0, r4
 8018f12:	f7ff fa5b 	bl	80183cc <write_submessage_acknack.isra.0>
 8018f16:	e76f      	b.n	8018df8 <wait_session_status+0x34>
 8018f18:	4631      	mov	r1, r6
 8018f1a:	f104 0008 	add.w	r0, r4, #8
 8018f1e:	f001 f823 	bl	8019f68 <uxr_get_input_best_effort_stream>
 8018f22:	2800      	cmp	r0, #0
 8018f24:	f43f af68 	beq.w	8018df8 <wait_session_status+0x34>
 8018f28:	9902      	ldr	r1, [sp, #8]
 8018f2a:	f005 fc29 	bl	801e780 <uxr_receive_best_effort_message>
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	f43f af62 	beq.w	8018df8 <wait_session_status+0x34>
 8018f34:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018f38:	a90c      	add	r1, sp, #48	; 0x30
 8018f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f3c:	4620      	mov	r0, r4
 8018f3e:	f7ff fbc9 	bl	80186d4 <read_submessage_list>
 8018f42:	e759      	b.n	8018df8 <wait_session_status+0x34>
 8018f44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018f46:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018f4a:	47a0      	blx	r4
 8018f4c:	2001      	movs	r0, #1
 8018f4e:	b01d      	add	sp, #116	; 0x74
 8018f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f54:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018f58:	a90c      	add	r1, sp, #48	; 0x30
 8018f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	f7ff fbb9 	bl	80186d4 <read_submessage_list>
 8018f62:	e7bc      	b.n	8018ede <wait_session_status+0x11a>

08018f64 <uxr_delete_session_retries>:
 8018f64:	b530      	push	{r4, r5, lr}
 8018f66:	b08f      	sub	sp, #60	; 0x3c
 8018f68:	4604      	mov	r4, r0
 8018f6a:	460d      	mov	r5, r1
 8018f6c:	f000 fa34 	bl	80193d8 <uxr_session_header_offset>
 8018f70:	2300      	movs	r3, #0
 8018f72:	2210      	movs	r2, #16
 8018f74:	a902      	add	r1, sp, #8
 8018f76:	9000      	str	r0, [sp, #0]
 8018f78:	a806      	add	r0, sp, #24
 8018f7a:	f7fa faa3 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 8018f7e:	a906      	add	r1, sp, #24
 8018f80:	4620      	mov	r0, r4
 8018f82:	f000 f979 	bl	8019278 <uxr_buffer_delete_session>
 8018f86:	2200      	movs	r2, #0
 8018f88:	9b06      	ldr	r3, [sp, #24]
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	4611      	mov	r1, r2
 8018f8e:	f000 f9cf 	bl	8019330 <uxr_stamp_session_header>
 8018f92:	a806      	add	r0, sp, #24
 8018f94:	f7fa fad6 	bl	8013544 <ucdr_buffer_length>
 8018f98:	462b      	mov	r3, r5
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	a902      	add	r1, sp, #8
 8018f9e:	4620      	mov	r0, r4
 8018fa0:	f7ff ff10 	bl	8018dc4 <wait_session_status>
 8018fa4:	b118      	cbz	r0, 8018fae <uxr_delete_session_retries+0x4a>
 8018fa6:	7960      	ldrb	r0, [r4, #5]
 8018fa8:	fab0 f080 	clz	r0, r0
 8018fac:	0940      	lsrs	r0, r0, #5
 8018fae:	b00f      	add	sp, #60	; 0x3c
 8018fb0:	bd30      	pop	{r4, r5, pc}
 8018fb2:	bf00      	nop

08018fb4 <uxr_create_session>:
 8018fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	f100 0b08 	add.w	fp, r0, #8
 8018fbc:	4604      	mov	r4, r0
 8018fbe:	b0ab      	sub	sp, #172	; 0xac
 8018fc0:	4658      	mov	r0, fp
 8018fc2:	465e      	mov	r6, fp
 8018fc4:	f000 ff22 	bl	8019e0c <uxr_reset_stream_storage>
 8018fc8:	4620      	mov	r0, r4
 8018fca:	f000 fa05 	bl	80193d8 <uxr_session_header_offset>
 8018fce:	2300      	movs	r3, #0
 8018fd0:	221c      	movs	r2, #28
 8018fd2:	a90b      	add	r1, sp, #44	; 0x2c
 8018fd4:	9000      	str	r0, [sp, #0]
 8018fd6:	a812      	add	r0, sp, #72	; 0x48
 8018fd8:	f7fa fa74 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 8018fdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018fde:	a912      	add	r1, sp, #72	; 0x48
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	8a1a      	ldrh	r2, [r3, #16]
 8018fe4:	3a04      	subs	r2, #4
 8018fe6:	b292      	uxth	r2, r2
 8018fe8:	f000 f91c 	bl	8019224 <uxr_buffer_create_session>
 8018fec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018fee:	4620      	mov	r0, r4
 8018ff0:	f000 f98a 	bl	8019308 <uxr_stamp_create_session_header>
 8018ff4:	a812      	add	r0, sp, #72	; 0x48
 8018ff6:	f7fa faa5 	bl	8013544 <ucdr_buffer_length>
 8018ffa:	23ff      	movs	r3, #255	; 0xff
 8018ffc:	4681      	mov	r9, r0
 8018ffe:	7163      	strb	r3, [r4, #5]
 8019000:	230a      	movs	r3, #10
 8019002:	9303      	str	r3, [sp, #12]
 8019004:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019006:	464a      	mov	r2, r9
 8019008:	a90b      	add	r1, sp, #44	; 0x2c
 801900a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801900e:	47a8      	blx	r5
 8019010:	f001 f81c 	bl	801a04c <uxr_millis>
 8019014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019018:	4605      	mov	r5, r0
 801901a:	e009      	b.n	8019030 <uxr_create_session+0x7c>
 801901c:	f001 f816 	bl	801a04c <uxr_millis>
 8019020:	1b40      	subs	r0, r0, r5
 8019022:	7962      	ldrb	r2, [r4, #5]
 8019024:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8019028:	2b00      	cmp	r3, #0
 801902a:	dd38      	ble.n	801909e <uxr_create_session+0xea>
 801902c:	2aff      	cmp	r2, #255	; 0xff
 801902e:	d13c      	bne.n	80190aa <uxr_create_session+0xf6>
 8019030:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8019032:	a907      	add	r1, sp, #28
 8019034:	6897      	ldr	r7, [r2, #8]
 8019036:	6810      	ldr	r0, [r2, #0]
 8019038:	aa08      	add	r2, sp, #32
 801903a:	47b8      	blx	r7
 801903c:	2800      	cmp	r0, #0
 801903e:	d0ed      	beq.n	801901c <uxr_create_session+0x68>
 8019040:	a81a      	add	r0, sp, #104	; 0x68
 8019042:	2700      	movs	r7, #0
 8019044:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8019048:	f7fa fa4e 	bl	80134e8 <ucdr_init_buffer>
 801904c:	f10d 031a 	add.w	r3, sp, #26
 8019050:	aa06      	add	r2, sp, #24
 8019052:	a91a      	add	r1, sp, #104	; 0x68
 8019054:	4620      	mov	r0, r4
 8019056:	f88d 7018 	strb.w	r7, [sp, #24]
 801905a:	f000 f97d 	bl	8019358 <uxr_read_session_header>
 801905e:	2800      	cmp	r0, #0
 8019060:	d0dc      	beq.n	801901c <uxr_create_session+0x68>
 8019062:	4639      	mov	r1, r7
 8019064:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8019068:	f000 fe9a 	bl	8019da0 <uxr_stream_id_from_raw>
 801906c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019070:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8019074:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8019078:	2f01      	cmp	r7, #1
 801907a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801907e:	d053      	beq.n	8019128 <uxr_create_session+0x174>
 8019080:	2f02      	cmp	r7, #2
 8019082:	d018      	beq.n	80190b6 <uxr_create_session+0x102>
 8019084:	2f00      	cmp	r7, #0
 8019086:	d1c9      	bne.n	801901c <uxr_create_session+0x68>
 8019088:	4639      	mov	r1, r7
 801908a:	4638      	mov	r0, r7
 801908c:	f000 fe88 	bl	8019da0 <uxr_stream_id_from_raw>
 8019090:	a91a      	add	r1, sp, #104	; 0x68
 8019092:	4602      	mov	r2, r0
 8019094:	900a      	str	r0, [sp, #40]	; 0x28
 8019096:	4620      	mov	r0, r4
 8019098:	f7ff fb1c 	bl	80186d4 <read_submessage_list>
 801909c:	e7be      	b.n	801901c <uxr_create_session+0x68>
 801909e:	9b03      	ldr	r3, [sp, #12]
 80190a0:	3b01      	subs	r3, #1
 80190a2:	9303      	str	r3, [sp, #12]
 80190a4:	d001      	beq.n	80190aa <uxr_create_session+0xf6>
 80190a6:	2aff      	cmp	r2, #255	; 0xff
 80190a8:	d0ac      	beq.n	8019004 <uxr_create_session+0x50>
 80190aa:	2a00      	cmp	r2, #0
 80190ac:	d051      	beq.n	8019152 <uxr_create_session+0x19e>
 80190ae:	2000      	movs	r0, #0
 80190b0:	b02b      	add	sp, #172	; 0xac
 80190b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80190ba:	4641      	mov	r1, r8
 80190bc:	4630      	mov	r0, r6
 80190be:	9304      	str	r3, [sp, #16]
 80190c0:	f000 ff5c 	bl	8019f7c <uxr_get_input_reliable_stream>
 80190c4:	4682      	mov	sl, r0
 80190c6:	b348      	cbz	r0, 801911c <uxr_create_session+0x168>
 80190c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80190ca:	a81a      	add	r0, sp, #104	; 0x68
 80190cc:	9205      	str	r2, [sp, #20]
 80190ce:	f7fa fa3d 	bl	801354c <ucdr_buffer_remaining>
 80190d2:	4603      	mov	r3, r0
 80190d4:	f10d 0019 	add.w	r0, sp, #25
 80190d8:	9a05      	ldr	r2, [sp, #20]
 80190da:	4659      	mov	r1, fp
 80190dc:	9000      	str	r0, [sp, #0]
 80190de:	4650      	mov	r0, sl
 80190e0:	f005 fbd8 	bl	801e894 <uxr_receive_reliable_message>
 80190e4:	b1d0      	cbz	r0, 801911c <uxr_create_session+0x168>
 80190e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d038      	beq.n	8019160 <uxr_create_session+0x1ac>
 80190ee:	9f04      	ldr	r7, [sp, #16]
 80190f0:	e00a      	b.n	8019108 <uxr_create_session+0x154>
 80190f2:	f04f 0302 	mov.w	r3, #2
 80190f6:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80190fa:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 80190fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019104:	f7ff fae6 	bl	80186d4 <read_submessage_list>
 8019108:	a922      	add	r1, sp, #136	; 0x88
 801910a:	2204      	movs	r2, #4
 801910c:	4650      	mov	r0, sl
 801910e:	f005 fc43 	bl	801e998 <uxr_next_input_reliable_buffer_available>
 8019112:	4603      	mov	r3, r0
 8019114:	a922      	add	r1, sp, #136	; 0x88
 8019116:	4620      	mov	r0, r4
 8019118:	2b00      	cmp	r3, #0
 801911a:	d1ea      	bne.n	80190f2 <uxr_create_session+0x13e>
 801911c:	4642      	mov	r2, r8
 801911e:	9904      	ldr	r1, [sp, #16]
 8019120:	4620      	mov	r0, r4
 8019122:	f7ff f953 	bl	80183cc <write_submessage_acknack.isra.0>
 8019126:	e779      	b.n	801901c <uxr_create_session+0x68>
 8019128:	4641      	mov	r1, r8
 801912a:	4630      	mov	r0, r6
 801912c:	f000 ff1c 	bl	8019f68 <uxr_get_input_best_effort_stream>
 8019130:	2800      	cmp	r0, #0
 8019132:	f43f af73 	beq.w	801901c <uxr_create_session+0x68>
 8019136:	4659      	mov	r1, fp
 8019138:	f005 fb22 	bl	801e780 <uxr_receive_best_effort_message>
 801913c:	2800      	cmp	r0, #0
 801913e:	f43f af6d 	beq.w	801901c <uxr_create_session+0x68>
 8019142:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8019146:	a91a      	add	r1, sp, #104	; 0x68
 8019148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801914a:	4620      	mov	r0, r4
 801914c:	f7ff fac2 	bl	80186d4 <read_submessage_list>
 8019150:	e764      	b.n	801901c <uxr_create_session+0x68>
 8019152:	4630      	mov	r0, r6
 8019154:	f000 fe5a 	bl	8019e0c <uxr_reset_stream_storage>
 8019158:	2001      	movs	r0, #1
 801915a:	b02b      	add	sp, #172	; 0xac
 801915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019160:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8019164:	a91a      	add	r1, sp, #104	; 0x68
 8019166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019168:	4620      	mov	r0, r4
 801916a:	f7ff fab3 	bl	80186d4 <read_submessage_list>
 801916e:	e7be      	b.n	80190ee <uxr_create_session+0x13a>

08019170 <uxr_prepare_stream_to_write_submessage>:
 8019170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019174:	b082      	sub	sp, #8
 8019176:	4604      	mov	r4, r0
 8019178:	4610      	mov	r0, r2
 801917a:	4615      	mov	r5, r2
 801917c:	461e      	mov	r6, r3
 801917e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8019182:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8019186:	f105 0904 	add.w	r9, r5, #4
 801918a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801918e:	9101      	str	r1, [sp, #4]
 8019190:	f000 ff56 	bl	801a040 <uxr_submessage_padding>
 8019194:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019198:	4481      	add	r9, r0
 801919a:	2b01      	cmp	r3, #1
 801919c:	d01d      	beq.n	80191da <uxr_prepare_stream_to_write_submessage+0x6a>
 801919e:	2b02      	cmp	r3, #2
 80191a0:	d116      	bne.n	80191d0 <uxr_prepare_stream_to_write_submessage+0x60>
 80191a2:	f104 0008 	add.w	r0, r4, #8
 80191a6:	4651      	mov	r1, sl
 80191a8:	f000 fed2 	bl	8019f50 <uxr_get_output_reliable_stream>
 80191ac:	4604      	mov	r4, r0
 80191ae:	b158      	cbz	r0, 80191c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80191b0:	4649      	mov	r1, r9
 80191b2:	4632      	mov	r2, r6
 80191b4:	f005 fdb6 	bl	801ed24 <uxr_prepare_reliable_buffer_to_write>
 80191b8:	4604      	mov	r4, r0
 80191ba:	b12c      	cbz	r4, 80191c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80191bc:	4643      	mov	r3, r8
 80191be:	b2aa      	uxth	r2, r5
 80191c0:	4639      	mov	r1, r7
 80191c2:	4630      	mov	r0, r6
 80191c4:	f000 fefc 	bl	8019fc0 <uxr_buffer_submessage_header>
 80191c8:	4620      	mov	r0, r4
 80191ca:	b002      	add	sp, #8
 80191cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191d0:	2400      	movs	r4, #0
 80191d2:	4620      	mov	r0, r4
 80191d4:	b002      	add	sp, #8
 80191d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191da:	f104 0008 	add.w	r0, r4, #8
 80191de:	4651      	mov	r1, sl
 80191e0:	f000 feae 	bl	8019f40 <uxr_get_output_best_effort_stream>
 80191e4:	4604      	mov	r4, r0
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d0ee      	beq.n	80191c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80191ea:	4649      	mov	r1, r9
 80191ec:	4632      	mov	r2, r6
 80191ee:	f005 fcc3 	bl	801eb78 <uxr_prepare_best_effort_buffer_to_write>
 80191f2:	4604      	mov	r4, r0
 80191f4:	e7e1      	b.n	80191ba <uxr_prepare_stream_to_write_submessage+0x4a>
 80191f6:	bf00      	nop

080191f8 <uxr_init_session_info>:
 80191f8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80191fc:	23ff      	movs	r3, #255	; 0xff
 80191fe:	7102      	strb	r2, [r0, #4]
 8019200:	f880 c001 	strb.w	ip, [r0, #1]
 8019204:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019208:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801920c:	7001      	strb	r1, [r0, #0]
 801920e:	f880 c002 	strb.w	ip, [r0, #2]
 8019212:	7143      	strb	r3, [r0, #5]
 8019214:	70c2      	strb	r2, [r0, #3]
 8019216:	b500      	push	{lr}
 8019218:	f04f 0e09 	mov.w	lr, #9
 801921c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8019220:	f85d fb04 	ldr.w	pc, [sp], #4

08019224 <uxr_buffer_create_session>:
 8019224:	b530      	push	{r4, r5, lr}
 8019226:	2300      	movs	r3, #0
 8019228:	b089      	sub	sp, #36	; 0x24
 801922a:	4d12      	ldr	r5, [pc, #72]	; (8019274 <uxr_buffer_create_session+0x50>)
 801922c:	460c      	mov	r4, r1
 801922e:	9307      	str	r3, [sp, #28]
 8019230:	4619      	mov	r1, r3
 8019232:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019236:	2201      	movs	r2, #1
 8019238:	9301      	str	r3, [sp, #4]
 801923a:	80c2      	strh	r2, [r0, #6]
 801923c:	f88d 2004 	strb.w	r2, [sp, #4]
 8019240:	682a      	ldr	r2, [r5, #0]
 8019242:	9303      	str	r3, [sp, #12]
 8019244:	9200      	str	r2, [sp, #0]
 8019246:	88aa      	ldrh	r2, [r5, #4]
 8019248:	9306      	str	r3, [sp, #24]
 801924a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801924e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8019252:	9202      	str	r2, [sp, #8]
 8019254:	7802      	ldrb	r2, [r0, #0]
 8019256:	4620      	mov	r0, r4
 8019258:	f88d 200c 	strb.w	r2, [sp, #12]
 801925c:	2210      	movs	r2, #16
 801925e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8019262:	f000 fead 	bl	8019fc0 <uxr_buffer_submessage_header>
 8019266:	4669      	mov	r1, sp
 8019268:	4620      	mov	r0, r4
 801926a:	f001 ff1f 	bl	801b0ac <uxr_serialize_CREATE_CLIENT_Payload>
 801926e:	b009      	add	sp, #36	; 0x24
 8019270:	bd30      	pop	{r4, r5, pc}
 8019272:	bf00      	nop
 8019274:	08024734 	.word	0x08024734

08019278 <uxr_buffer_delete_session>:
 8019278:	4a0c      	ldr	r2, [pc, #48]	; (80192ac <uxr_buffer_delete_session+0x34>)
 801927a:	2302      	movs	r3, #2
 801927c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8019280:	b510      	push	{r4, lr}
 8019282:	460c      	mov	r4, r1
 8019284:	b082      	sub	sp, #8
 8019286:	8911      	ldrh	r1, [r2, #8]
 8019288:	2204      	movs	r2, #4
 801928a:	80c3      	strh	r3, [r0, #6]
 801928c:	2300      	movs	r3, #0
 801928e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8019292:	4620      	mov	r0, r4
 8019294:	2103      	movs	r1, #3
 8019296:	f8ad c004 	strh.w	ip, [sp, #4]
 801929a:	f000 fe91 	bl	8019fc0 <uxr_buffer_submessage_header>
 801929e:	a901      	add	r1, sp, #4
 80192a0:	4620      	mov	r0, r4
 80192a2:	f001 ffab 	bl	801b1fc <uxr_serialize_DELETE_Payload>
 80192a6:	b002      	add	sp, #8
 80192a8:	bd10      	pop	{r4, pc}
 80192aa:	bf00      	nop
 80192ac:	08024734 	.word	0x08024734

080192b0 <uxr_read_create_session_status>:
 80192b0:	b510      	push	{r4, lr}
 80192b2:	460b      	mov	r3, r1
 80192b4:	b088      	sub	sp, #32
 80192b6:	4604      	mov	r4, r0
 80192b8:	a901      	add	r1, sp, #4
 80192ba:	4618      	mov	r0, r3
 80192bc:	f001 ffae 	bl	801b21c <uxr_deserialize_STATUS_AGENT_Payload>
 80192c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80192c4:	7163      	strb	r3, [r4, #5]
 80192c6:	b008      	add	sp, #32
 80192c8:	bd10      	pop	{r4, pc}
 80192ca:	bf00      	nop

080192cc <uxr_read_delete_session_status>:
 80192cc:	b510      	push	{r4, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	4604      	mov	r4, r0
 80192d2:	4608      	mov	r0, r1
 80192d4:	a902      	add	r1, sp, #8
 80192d6:	f001 ffd1 	bl	801b27c <uxr_deserialize_STATUS_Payload>
 80192da:	88e3      	ldrh	r3, [r4, #6]
 80192dc:	2b02      	cmp	r3, #2
 80192de:	d001      	beq.n	80192e4 <uxr_read_delete_session_status+0x18>
 80192e0:	b004      	add	sp, #16
 80192e2:	bd10      	pop	{r4, pc}
 80192e4:	f10d 000a 	add.w	r0, sp, #10
 80192e8:	f7fe fec6 	bl	8018078 <uxr_object_id_from_raw>
 80192ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80192f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80192f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	2b02      	cmp	r3, #2
 80192fc:	d1f0      	bne.n	80192e0 <uxr_read_delete_session_status+0x14>
 80192fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019302:	7163      	strb	r3, [r4, #5]
 8019304:	e7ec      	b.n	80192e0 <uxr_read_delete_session_status+0x14>
 8019306:	bf00      	nop

08019308 <uxr_stamp_create_session_header>:
 8019308:	b510      	push	{r4, lr}
 801930a:	2208      	movs	r2, #8
 801930c:	b08a      	sub	sp, #40	; 0x28
 801930e:	4604      	mov	r4, r0
 8019310:	eb0d 0002 	add.w	r0, sp, r2
 8019314:	f7fa f8e8 	bl	80134e8 <ucdr_init_buffer>
 8019318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801931c:	2300      	movs	r3, #0
 801931e:	a802      	add	r0, sp, #8
 8019320:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8019324:	9400      	str	r4, [sp, #0]
 8019326:	461a      	mov	r2, r3
 8019328:	f001 f846 	bl	801a3b8 <uxr_serialize_message_header>
 801932c:	b00a      	add	sp, #40	; 0x28
 801932e:	bd10      	pop	{r4, pc}

08019330 <uxr_stamp_session_header>:
 8019330:	b530      	push	{r4, r5, lr}
 8019332:	b08d      	sub	sp, #52	; 0x34
 8019334:	4604      	mov	r4, r0
 8019336:	460d      	mov	r5, r1
 8019338:	4619      	mov	r1, r3
 801933a:	a804      	add	r0, sp, #16
 801933c:	9203      	str	r2, [sp, #12]
 801933e:	2208      	movs	r2, #8
 8019340:	f7fa f8d2 	bl	80134e8 <ucdr_init_buffer>
 8019344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019348:	9b03      	ldr	r3, [sp, #12]
 801934a:	462a      	mov	r2, r5
 801934c:	a804      	add	r0, sp, #16
 801934e:	9400      	str	r4, [sp, #0]
 8019350:	f001 f832 	bl	801a3b8 <uxr_serialize_message_header>
 8019354:	b00d      	add	sp, #52	; 0x34
 8019356:	bd30      	pop	{r4, r5, pc}

08019358 <uxr_read_session_header>:
 8019358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801935c:	4607      	mov	r7, r0
 801935e:	b084      	sub	sp, #16
 8019360:	4608      	mov	r0, r1
 8019362:	460c      	mov	r4, r1
 8019364:	4615      	mov	r5, r2
 8019366:	461e      	mov	r6, r3
 8019368:	f7fa f8f0 	bl	801354c <ucdr_buffer_remaining>
 801936c:	2808      	cmp	r0, #8
 801936e:	d803      	bhi.n	8019378 <uxr_read_session_header+0x20>
 8019370:	2000      	movs	r0, #0
 8019372:	b004      	add	sp, #16
 8019374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019378:	f10d 080c 	add.w	r8, sp, #12
 801937c:	4633      	mov	r3, r6
 801937e:	462a      	mov	r2, r5
 8019380:	4620      	mov	r0, r4
 8019382:	f10d 010b 	add.w	r1, sp, #11
 8019386:	f8cd 8000 	str.w	r8, [sp]
 801938a:	f001 f833 	bl	801a3f4 <uxr_deserialize_message_header>
 801938e:	783a      	ldrb	r2, [r7, #0]
 8019390:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8019394:	4293      	cmp	r3, r2
 8019396:	d1eb      	bne.n	8019370 <uxr_read_session_header+0x18>
 8019398:	061b      	lsls	r3, r3, #24
 801939a:	d41b      	bmi.n	80193d4 <uxr_read_session_header+0x7c>
 801939c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80193a0:	787b      	ldrb	r3, [r7, #1]
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d003      	beq.n	80193ae <uxr_read_session_header+0x56>
 80193a6:	2001      	movs	r0, #1
 80193a8:	f080 0001 	eor.w	r0, r0, #1
 80193ac:	e7e1      	b.n	8019372 <uxr_read_session_header+0x1a>
 80193ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80193b2:	1cb8      	adds	r0, r7, #2
 80193b4:	78bb      	ldrb	r3, [r7, #2]
 80193b6:	429a      	cmp	r2, r3
 80193b8:	d1f5      	bne.n	80193a6 <uxr_read_session_header+0x4e>
 80193ba:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80193be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80193c2:	429a      	cmp	r2, r3
 80193c4:	d1ef      	bne.n	80193a6 <uxr_read_session_header+0x4e>
 80193c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80193ca:	7843      	ldrb	r3, [r0, #1]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d1ea      	bne.n	80193a6 <uxr_read_session_header+0x4e>
 80193d0:	2000      	movs	r0, #0
 80193d2:	e7e9      	b.n	80193a8 <uxr_read_session_header+0x50>
 80193d4:	2001      	movs	r0, #1
 80193d6:	e7cc      	b.n	8019372 <uxr_read_session_header+0x1a>

080193d8 <uxr_session_header_offset>:
 80193d8:	f990 3000 	ldrsb.w	r3, [r0]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	bfac      	ite	ge
 80193e0:	2008      	movge	r0, #8
 80193e2:	2004      	movlt	r0, #4
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop

080193e8 <uxr_init_base_object_request>:
 80193e8:	b510      	push	{r4, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80193f0:	9101      	str	r1, [sp, #4]
 80193f2:	88c3      	ldrh	r3, [r0, #6]
 80193f4:	f1a3 010a 	sub.w	r1, r3, #10
 80193f8:	b289      	uxth	r1, r1
 80193fa:	42a1      	cmp	r1, r4
 80193fc:	d80f      	bhi.n	801941e <uxr_init_base_object_request+0x36>
 80193fe:	3301      	adds	r3, #1
 8019400:	b29c      	uxth	r4, r3
 8019402:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8019406:	b2db      	uxtb	r3, r3
 8019408:	80c4      	strh	r4, [r0, #6]
 801940a:	1c91      	adds	r1, r2, #2
 801940c:	9801      	ldr	r0, [sp, #4]
 801940e:	f882 c000 	strb.w	ip, [r2]
 8019412:	7053      	strb	r3, [r2, #1]
 8019414:	f7fe fe44 	bl	80180a0 <uxr_object_id_to_raw>
 8019418:	4620      	mov	r0, r4
 801941a:	b002      	add	sp, #8
 801941c:	bd10      	pop	{r4, pc}
 801941e:	230a      	movs	r3, #10
 8019420:	f04f 0c00 	mov.w	ip, #0
 8019424:	461c      	mov	r4, r3
 8019426:	e7ef      	b.n	8019408 <uxr_init_base_object_request+0x20>

08019428 <uxr_parse_base_object_request>:
 8019428:	b570      	push	{r4, r5, r6, lr}
 801942a:	4604      	mov	r4, r0
 801942c:	3002      	adds	r0, #2
 801942e:	460d      	mov	r5, r1
 8019430:	4616      	mov	r6, r2
 8019432:	f7fe fe21 	bl	8018078 <uxr_object_id_from_raw>
 8019436:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801943a:	8028      	strh	r0, [r5, #0]
 801943c:	806b      	strh	r3, [r5, #2]
 801943e:	7822      	ldrb	r2, [r4, #0]
 8019440:	7863      	ldrb	r3, [r4, #1]
 8019442:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019446:	8033      	strh	r3, [r6, #0]
 8019448:	bd70      	pop	{r4, r5, r6, pc}
 801944a:	bf00      	nop

0801944c <uxr_init_framing_io>:
 801944c:	2300      	movs	r3, #0
 801944e:	7041      	strb	r1, [r0, #1]
 8019450:	7003      	strb	r3, [r0, #0]
 8019452:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019454:	4770      	bx	lr
 8019456:	bf00      	nop

08019458 <uxr_write_framed_msg>:
 8019458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801945c:	4617      	mov	r7, r2
 801945e:	7842      	ldrb	r2, [r0, #1]
 8019460:	460e      	mov	r6, r1
 8019462:	b083      	sub	sp, #12
 8019464:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019468:	469b      	mov	fp, r3
 801946a:	237e      	movs	r3, #126	; 0x7e
 801946c:	4604      	mov	r4, r0
 801946e:	2901      	cmp	r1, #1
 8019470:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8019474:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019478:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801947c:	f240 8115 	bls.w	80196aa <uxr_write_framed_msg+0x252>
 8019480:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019484:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019488:	2202      	movs	r2, #2
 801948a:	2901      	cmp	r1, #1
 801948c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019490:	d952      	bls.n	8019538 <uxr_write_framed_msg+0xe0>
 8019492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019494:	2103      	movs	r1, #3
 8019496:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801949a:	b2dd      	uxtb	r5, r3
 801949c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80194a0:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80194a4:	2a01      	cmp	r2, #1
 80194a6:	d95c      	bls.n	8019562 <uxr_write_framed_msg+0x10a>
 80194a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194aa:	1862      	adds	r2, r4, r1
 80194ac:	3101      	adds	r1, #1
 80194ae:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80194b2:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 80194b6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80194ba:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80194be:	2a01      	cmp	r2, #1
 80194c0:	d961      	bls.n	8019586 <uxr_write_framed_msg+0x12e>
 80194c2:	1c4a      	adds	r2, r1, #1
 80194c4:	4421      	add	r1, r4
 80194c6:	b2d2      	uxtb	r2, r2
 80194c8:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80194cc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d06a      	beq.n	80195aa <uxr_write_framed_msg+0x152>
 80194d4:	f04f 0800 	mov.w	r8, #0
 80194d8:	46c1      	mov	r9, r8
 80194da:	e016      	b.n	801950a <uxr_write_framed_msg+0xb2>
 80194dc:	2a29      	cmp	r2, #41	; 0x29
 80194de:	d868      	bhi.n	80195b2 <uxr_write_framed_msg+0x15a>
 80194e0:	18a0      	adds	r0, r4, r2
 80194e2:	3201      	adds	r2, #1
 80194e4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80194e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80194ec:	ea88 0101 	eor.w	r1, r8, r1
 80194f0:	4b7d      	ldr	r3, [pc, #500]	; (80196e8 <uxr_write_framed_msg+0x290>)
 80194f2:	f109 0901 	add.w	r9, r9, #1
 80194f6:	b2c9      	uxtb	r1, r1
 80194f8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80194fc:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019502:	454b      	cmp	r3, r9
 8019504:	d969      	bls.n	80195da <uxr_write_framed_msg+0x182>
 8019506:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801950a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801950e:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019512:	2801      	cmp	r0, #1
 8019514:	d8e2      	bhi.n	80194dc <uxr_write_framed_msg+0x84>
 8019516:	1c50      	adds	r0, r2, #1
 8019518:	b2c0      	uxtb	r0, r0
 801951a:	2829      	cmp	r0, #41	; 0x29
 801951c:	d849      	bhi.n	80195b2 <uxr_write_framed_msg+0x15a>
 801951e:	18a0      	adds	r0, r4, r2
 8019520:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019524:	3202      	adds	r2, #2
 8019526:	f081 0520 	eor.w	r5, r1, #32
 801952a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801952e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019532:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019536:	e7d9      	b.n	80194ec <uxr_write_framed_msg+0x94>
 8019538:	2104      	movs	r1, #4
 801953a:	f04f 0c03 	mov.w	ip, #3
 801953e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019540:	4422      	add	r2, r4
 8019542:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019546:	44a4      	add	ip, r4
 8019548:	b2dd      	uxtb	r5, r3
 801954a:	f080 0020 	eor.w	r0, r0, #32
 801954e:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8019552:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019556:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801955a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801955e:	2a01      	cmp	r2, #1
 8019560:	d8a2      	bhi.n	80194a8 <uxr_write_framed_msg+0x50>
 8019562:	1862      	adds	r2, r4, r1
 8019564:	207d      	movs	r0, #125	; 0x7d
 8019566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019568:	f085 0520 	eor.w	r5, r5, #32
 801956c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8019570:	3102      	adds	r1, #2
 8019572:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019576:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801957a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801957e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019582:	2a01      	cmp	r2, #1
 8019584:	d89d      	bhi.n	80194c2 <uxr_write_framed_msg+0x6a>
 8019586:	1c4d      	adds	r5, r1, #1
 8019588:	1c8a      	adds	r2, r1, #2
 801958a:	f080 0020 	eor.w	r0, r0, #32
 801958e:	4421      	add	r1, r4
 8019590:	fa54 f585 	uxtab	r5, r4, r5
 8019594:	b2d2      	uxtb	r2, r2
 8019596:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801959a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801959e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80195a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d194      	bne.n	80194d4 <uxr_write_framed_msg+0x7c>
 80195aa:	4619      	mov	r1, r3
 80195ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 80195b0:	e019      	b.n	80195e6 <uxr_write_framed_msg+0x18e>
 80195b2:	2500      	movs	r5, #0
 80195b4:	e000      	b.n	80195b8 <uxr_write_framed_msg+0x160>
 80195b6:	b160      	cbz	r0, 80195d2 <uxr_write_framed_msg+0x17a>
 80195b8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80195bc:	1b52      	subs	r2, r2, r5
 80195be:	4653      	mov	r3, sl
 80195c0:	4638      	mov	r0, r7
 80195c2:	4421      	add	r1, r4
 80195c4:	47b0      	blx	r6
 80195c6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80195ca:	4405      	add	r5, r0
 80195cc:	4295      	cmp	r5, r2
 80195ce:	d3f2      	bcc.n	80195b6 <uxr_write_framed_msg+0x15e>
 80195d0:	d066      	beq.n	80196a0 <uxr_write_framed_msg+0x248>
 80195d2:	2000      	movs	r0, #0
 80195d4:	b003      	add	sp, #12
 80195d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195da:	fa5f f188 	uxtb.w	r1, r8
 80195de:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80195e2:	f8ad 8004 	strh.w	r8, [sp, #4]
 80195e6:	f04f 0900 	mov.w	r9, #0
 80195ea:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80195ee:	46c8      	mov	r8, r9
 80195f0:	e013      	b.n	801961a <uxr_write_framed_msg+0x1c2>
 80195f2:	2a29      	cmp	r2, #41	; 0x29
 80195f4:	d824      	bhi.n	8019640 <uxr_write_framed_msg+0x1e8>
 80195f6:	18a3      	adds	r3, r4, r2
 80195f8:	3201      	adds	r2, #1
 80195fa:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80195fe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019602:	f109 0901 	add.w	r9, r9, #1
 8019606:	f1b9 0f02 	cmp.w	r9, #2
 801960a:	d02d      	beq.n	8019668 <uxr_write_framed_msg+0x210>
 801960c:	f109 0308 	add.w	r3, r9, #8
 8019610:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019614:	446b      	add	r3, sp
 8019616:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801961a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801961e:	2b01      	cmp	r3, #1
 8019620:	d8e7      	bhi.n	80195f2 <uxr_write_framed_msg+0x19a>
 8019622:	1c53      	adds	r3, r2, #1
 8019624:	b2db      	uxtb	r3, r3
 8019626:	2b29      	cmp	r3, #41	; 0x29
 8019628:	d80a      	bhi.n	8019640 <uxr_write_framed_msg+0x1e8>
 801962a:	18a3      	adds	r3, r4, r2
 801962c:	f081 0120 	eor.w	r1, r1, #32
 8019630:	3202      	adds	r2, #2
 8019632:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8019636:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801963a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801963e:	e7e0      	b.n	8019602 <uxr_write_framed_msg+0x1aa>
 8019640:	2500      	movs	r5, #0
 8019642:	e001      	b.n	8019648 <uxr_write_framed_msg+0x1f0>
 8019644:	2800      	cmp	r0, #0
 8019646:	d0c4      	beq.n	80195d2 <uxr_write_framed_msg+0x17a>
 8019648:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801964c:	1b52      	subs	r2, r2, r5
 801964e:	4653      	mov	r3, sl
 8019650:	4638      	mov	r0, r7
 8019652:	4421      	add	r1, r4
 8019654:	47b0      	blx	r6
 8019656:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801965a:	4405      	add	r5, r0
 801965c:	4295      	cmp	r5, r2
 801965e:	d3f1      	bcc.n	8019644 <uxr_write_framed_msg+0x1ec>
 8019660:	d1b7      	bne.n	80195d2 <uxr_write_framed_msg+0x17a>
 8019662:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8019666:	e7d1      	b.n	801960c <uxr_write_framed_msg+0x1b4>
 8019668:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801966c:	b19a      	cbz	r2, 8019696 <uxr_write_framed_msg+0x23e>
 801966e:	2500      	movs	r5, #0
 8019670:	e001      	b.n	8019676 <uxr_write_framed_msg+0x21e>
 8019672:	2800      	cmp	r0, #0
 8019674:	d0ad      	beq.n	80195d2 <uxr_write_framed_msg+0x17a>
 8019676:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801967a:	1b52      	subs	r2, r2, r5
 801967c:	4653      	mov	r3, sl
 801967e:	4638      	mov	r0, r7
 8019680:	4421      	add	r1, r4
 8019682:	47b0      	blx	r6
 8019684:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019688:	4405      	add	r5, r0
 801968a:	4295      	cmp	r5, r2
 801968c:	d3f1      	bcc.n	8019672 <uxr_write_framed_msg+0x21a>
 801968e:	d1a0      	bne.n	80195d2 <uxr_write_framed_msg+0x17a>
 8019690:	2300      	movs	r3, #0
 8019692:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019698:	b298      	uxth	r0, r3
 801969a:	b003      	add	sp, #12
 801969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a0:	f04f 0300 	mov.w	r3, #0
 80196a4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80196a8:	e72a      	b.n	8019500 <uxr_write_framed_msg+0xa8>
 80196aa:	217d      	movs	r1, #125	; 0x7d
 80196ac:	f082 0220 	eor.w	r2, r2, #32
 80196b0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80196b4:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80196b8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80196bc:	2203      	movs	r2, #3
 80196be:	2901      	cmp	r1, #1
 80196c0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80196c4:	d803      	bhi.n	80196ce <uxr_write_framed_msg+0x276>
 80196c6:	2105      	movs	r1, #5
 80196c8:	f04f 0c04 	mov.w	ip, #4
 80196cc:	e737      	b.n	801953e <uxr_write_framed_msg+0xe6>
 80196ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196d0:	2104      	movs	r1, #4
 80196d2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80196d6:	b2dd      	uxtb	r5, r3
 80196d8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80196dc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80196e0:	2a01      	cmp	r2, #1
 80196e2:	f63f aee1 	bhi.w	80194a8 <uxr_write_framed_msg+0x50>
 80196e6:	e73c      	b.n	8019562 <uxr_write_framed_msg+0x10a>
 80196e8:	080258c4 	.word	0x080258c4

080196ec <uxr_framing_read_transport>:
 80196ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f0:	4604      	mov	r4, r0
 80196f2:	b085      	sub	sp, #20
 80196f4:	4692      	mov	sl, r2
 80196f6:	4689      	mov	r9, r1
 80196f8:	461d      	mov	r5, r3
 80196fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80196fc:	f000 fca6 	bl	801a04c <uxr_millis>
 8019700:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019704:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019708:	4680      	mov	r8, r0
 801970a:	42ba      	cmp	r2, r7
 801970c:	d05f      	beq.n	80197ce <uxr_framing_read_transport+0xe2>
 801970e:	d817      	bhi.n	8019740 <uxr_framing_read_transport+0x54>
 8019710:	3f01      	subs	r7, #1
 8019712:	1aba      	subs	r2, r7, r2
 8019714:	2700      	movs	r7, #0
 8019716:	b2d2      	uxtb	r2, r2
 8019718:	42b2      	cmp	r2, r6
 801971a:	d81a      	bhi.n	8019752 <uxr_framing_read_transport+0x66>
 801971c:	19d3      	adds	r3, r2, r7
 801971e:	42b3      	cmp	r3, r6
 8019720:	d852      	bhi.n	80197c8 <uxr_framing_read_transport+0xdc>
 8019722:	b9d2      	cbnz	r2, 801975a <uxr_framing_read_transport+0x6e>
 8019724:	2600      	movs	r6, #0
 8019726:	f000 fc91 	bl	801a04c <uxr_millis>
 801972a:	682b      	ldr	r3, [r5, #0]
 801972c:	eba0 0008 	sub.w	r0, r0, r8
 8019730:	1a1b      	subs	r3, r3, r0
 8019732:	4630      	mov	r0, r6
 8019734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019738:	602b      	str	r3, [r5, #0]
 801973a:	b005      	add	sp, #20
 801973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019740:	2f00      	cmp	r7, #0
 8019742:	d060      	beq.n	8019806 <uxr_framing_read_transport+0x11a>
 8019744:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8019748:	3f01      	subs	r7, #1
 801974a:	b2d2      	uxtb	r2, r2
 801974c:	b2ff      	uxtb	r7, r7
 801974e:	42b2      	cmp	r2, r6
 8019750:	d9e4      	bls.n	801971c <uxr_framing_read_transport+0x30>
 8019752:	b2f2      	uxtb	r2, r6
 8019754:	2700      	movs	r7, #0
 8019756:	2a00      	cmp	r2, #0
 8019758:	d0e4      	beq.n	8019724 <uxr_framing_read_transport+0x38>
 801975a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801975c:	4650      	mov	r0, sl
 801975e:	9203      	str	r2, [sp, #12]
 8019760:	9300      	str	r3, [sp, #0]
 8019762:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019766:	682b      	ldr	r3, [r5, #0]
 8019768:	3102      	adds	r1, #2
 801976a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019810 <uxr_framing_read_transport+0x124>
 801976e:	4421      	add	r1, r4
 8019770:	47c8      	blx	r9
 8019772:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019776:	4606      	mov	r6, r0
 8019778:	4403      	add	r3, r0
 801977a:	0859      	lsrs	r1, r3, #1
 801977c:	fbab 2101 	umull	r2, r1, fp, r1
 8019780:	222a      	movs	r2, #42	; 0x2a
 8019782:	0889      	lsrs	r1, r1, #2
 8019784:	fb02 3111 	mls	r1, r2, r1, r3
 8019788:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801978c:	2800      	cmp	r0, #0
 801978e:	d0c9      	beq.n	8019724 <uxr_framing_read_transport+0x38>
 8019790:	9a03      	ldr	r2, [sp, #12]
 8019792:	4290      	cmp	r0, r2
 8019794:	d1c7      	bne.n	8019726 <uxr_framing_read_transport+0x3a>
 8019796:	2f00      	cmp	r7, #0
 8019798:	d0c5      	beq.n	8019726 <uxr_framing_read_transport+0x3a>
 801979a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801979c:	3102      	adds	r1, #2
 801979e:	463a      	mov	r2, r7
 80197a0:	4650      	mov	r0, sl
 80197a2:	4421      	add	r1, r4
 80197a4:	9300      	str	r3, [sp, #0]
 80197a6:	2300      	movs	r3, #0
 80197a8:	47c8      	blx	r9
 80197aa:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80197ae:	4406      	add	r6, r0
 80197b0:	1813      	adds	r3, r2, r0
 80197b2:	085a      	lsrs	r2, r3, #1
 80197b4:	fbab 1b02 	umull	r1, fp, fp, r2
 80197b8:	222a      	movs	r2, #42	; 0x2a
 80197ba:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80197be:	fb02 331b 	mls	r3, r2, fp, r3
 80197c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80197c6:	e7ae      	b.n	8019726 <uxr_framing_read_transport+0x3a>
 80197c8:	1ab6      	subs	r6, r6, r2
 80197ca:	b2f7      	uxtb	r7, r6
 80197cc:	e7a9      	b.n	8019722 <uxr_framing_read_transport+0x36>
 80197ce:	2300      	movs	r3, #0
 80197d0:	2e28      	cmp	r6, #40	; 0x28
 80197d2:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80197d4:	d9bd      	bls.n	8019752 <uxr_framing_read_transport+0x66>
 80197d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197d8:	2229      	movs	r2, #41	; 0x29
 80197da:	1ca1      	adds	r1, r4, #2
 80197dc:	4650      	mov	r0, sl
 80197de:	9300      	str	r3, [sp, #0]
 80197e0:	682b      	ldr	r3, [r5, #0]
 80197e2:	47c8      	blx	r9
 80197e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80197e8:	4606      	mov	r6, r0
 80197ea:	212a      	movs	r1, #42	; 0x2a
 80197ec:	4403      	add	r3, r0
 80197ee:	4808      	ldr	r0, [pc, #32]	; (8019810 <uxr_framing_read_transport+0x124>)
 80197f0:	085a      	lsrs	r2, r3, #1
 80197f2:	fba0 0202 	umull	r0, r2, r0, r2
 80197f6:	0892      	lsrs	r2, r2, #2
 80197f8:	fb01 3312 	mls	r3, r1, r2, r3
 80197fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019800:	2e00      	cmp	r6, #0
 8019802:	d08f      	beq.n	8019724 <uxr_framing_read_transport+0x38>
 8019804:	e78f      	b.n	8019726 <uxr_framing_read_transport+0x3a>
 8019806:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801980a:	b2d2      	uxtb	r2, r2
 801980c:	e784      	b.n	8019718 <uxr_framing_read_transport+0x2c>
 801980e:	bf00      	nop
 8019810:	30c30c31 	.word	0x30c30c31

08019814 <uxr_read_framed_msg>:
 8019814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019818:	461e      	mov	r6, r3
 801981a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801981e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8019822:	b083      	sub	sp, #12
 8019824:	4604      	mov	r4, r0
 8019826:	4688      	mov	r8, r1
 8019828:	429d      	cmp	r5, r3
 801982a:	4691      	mov	r9, r2
 801982c:	f000 818c 	beq.w	8019b48 <uxr_read_framed_msg+0x334>
 8019830:	7823      	ldrb	r3, [r4, #0]
 8019832:	4dc3      	ldr	r5, [pc, #780]	; (8019b40 <uxr_read_framed_msg+0x32c>)
 8019834:	4fc3      	ldr	r7, [pc, #780]	; (8019b44 <uxr_read_framed_msg+0x330>)
 8019836:	2b07      	cmp	r3, #7
 8019838:	d8fd      	bhi.n	8019836 <uxr_read_framed_msg+0x22>
 801983a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801983e:	011c      	.short	0x011c
 8019840:	00d900fb 	.word	0x00d900fb
 8019844:	008f00ba 	.word	0x008f00ba
 8019848:	00320051 	.word	0x00320051
 801984c:	0008      	.short	0x0008
 801984e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019852:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019856:	4299      	cmp	r1, r3
 8019858:	f000 814d 	beq.w	8019af6 <uxr_read_framed_msg+0x2e2>
 801985c:	18e2      	adds	r2, r4, r3
 801985e:	7892      	ldrb	r2, [r2, #2]
 8019860:	2a7d      	cmp	r2, #125	; 0x7d
 8019862:	f000 81b8 	beq.w	8019bd6 <uxr_read_framed_msg+0x3c2>
 8019866:	3301      	adds	r3, #1
 8019868:	212a      	movs	r1, #42	; 0x2a
 801986a:	2a7e      	cmp	r2, #126	; 0x7e
 801986c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019870:	fba5 c000 	umull	ip, r0, r5, r0
 8019874:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019878:	fb01 3310 	mls	r3, r1, r0, r3
 801987c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019880:	f000 8257 	beq.w	8019d32 <uxr_read_framed_msg+0x51e>
 8019884:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019886:	2000      	movs	r0, #0
 8019888:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801988a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801988e:	7020      	strb	r0, [r4, #0]
 8019890:	b29b      	uxth	r3, r3
 8019892:	4299      	cmp	r1, r3
 8019894:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019896:	f000 8178 	beq.w	8019b8a <uxr_read_framed_msg+0x376>
 801989a:	2000      	movs	r0, #0
 801989c:	b003      	add	sp, #12
 801989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80198a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80198aa:	4298      	cmp	r0, r3
 80198ac:	f000 8132 	beq.w	8019b14 <uxr_read_framed_msg+0x300>
 80198b0:	18e2      	adds	r2, r4, r3
 80198b2:	7891      	ldrb	r1, [r2, #2]
 80198b4:	297d      	cmp	r1, #125	; 0x7d
 80198b6:	f000 8170 	beq.w	8019b9a <uxr_read_framed_msg+0x386>
 80198ba:	3301      	adds	r3, #1
 80198bc:	202a      	movs	r0, #42	; 0x2a
 80198be:	297e      	cmp	r1, #126	; 0x7e
 80198c0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80198c4:	fba5 c202 	umull	ip, r2, r5, r2
 80198c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80198cc:	fb00 3312 	mls	r3, r0, r2, r3
 80198d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198d4:	f000 821d 	beq.w	8019d12 <uxr_read_framed_msg+0x4fe>
 80198d8:	2307      	movs	r3, #7
 80198da:	86a1      	strh	r1, [r4, #52]	; 0x34
 80198dc:	7023      	strb	r3, [r4, #0]
 80198de:	e7aa      	b.n	8019836 <uxr_read_framed_msg+0x22>
 80198e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80198e2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80198e6:	459e      	cmp	lr, r3
 80198e8:	d827      	bhi.n	801993a <uxr_read_framed_msg+0x126>
 80198ea:	e032      	b.n	8019952 <uxr_read_framed_msg+0x13e>
 80198ec:	fba5 b101 	umull	fp, r1, r5, r1
 80198f0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80198f4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80198f8:	0889      	lsrs	r1, r1, #2
 80198fa:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80198fe:	fb0b 0111 	mls	r1, fp, r1, r0
 8019902:	f000 80d4 	beq.w	8019aae <uxr_read_framed_msg+0x29a>
 8019906:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801990a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801990e:	f000 80cb 	beq.w	8019aa8 <uxr_read_framed_msg+0x294>
 8019912:	f806 c003 	strb.w	ip, [r6, r3]
 8019916:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019918:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801991a:	ea80 010c 	eor.w	r1, r0, ip
 801991e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019922:	3301      	adds	r3, #1
 8019924:	b2c9      	uxtb	r1, r1
 8019926:	b29b      	uxth	r3, r3
 8019928:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801992c:	4573      	cmp	r3, lr
 801992e:	8663      	strh	r3, [r4, #50]	; 0x32
 8019930:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019934:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019936:	f080 811d 	bcs.w	8019b74 <uxr_read_framed_msg+0x360>
 801993a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801993e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019942:	1c50      	adds	r0, r2, #1
 8019944:	eb04 0c02 	add.w	ip, r4, r2
 8019948:	4592      	cmp	sl, r2
 801994a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801994e:	d1cd      	bne.n	80198ec <uxr_read_framed_msg+0xd8>
 8019950:	459e      	cmp	lr, r3
 8019952:	f040 8114 	bne.w	8019b7e <uxr_read_framed_msg+0x36a>
 8019956:	2306      	movs	r3, #6
 8019958:	7023      	strb	r3, [r4, #0]
 801995a:	e76c      	b.n	8019836 <uxr_read_framed_msg+0x22>
 801995c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019960:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019964:	4298      	cmp	r0, r3
 8019966:	f000 80c6 	beq.w	8019af6 <uxr_read_framed_msg+0x2e2>
 801996a:	18e2      	adds	r2, r4, r3
 801996c:	7891      	ldrb	r1, [r2, #2]
 801996e:	297d      	cmp	r1, #125	; 0x7d
 8019970:	f000 8193 	beq.w	8019c9a <uxr_read_framed_msg+0x486>
 8019974:	3301      	adds	r3, #1
 8019976:	202a      	movs	r0, #42	; 0x2a
 8019978:	297e      	cmp	r1, #126	; 0x7e
 801997a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801997e:	fba5 c202 	umull	ip, r2, r5, r2
 8019982:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019986:	fb00 3312 	mls	r3, r0, r2, r3
 801998a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801998e:	f000 81d0 	beq.w	8019d32 <uxr_read_framed_msg+0x51e>
 8019992:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019994:	2000      	movs	r0, #0
 8019996:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801999a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801999c:	8660      	strh	r0, [r4, #50]	; 0x32
 801999e:	b29b      	uxth	r3, r3
 80199a0:	86e0      	strh	r0, [r4, #54]	; 0x36
 80199a2:	428b      	cmp	r3, r1
 80199a4:	8623      	strh	r3, [r4, #48]	; 0x30
 80199a6:	f240 80e2 	bls.w	8019b6e <uxr_read_framed_msg+0x35a>
 80199aa:	7020      	strb	r0, [r4, #0]
 80199ac:	b003      	add	sp, #12
 80199ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199b2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80199b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80199ba:	4298      	cmp	r0, r3
 80199bc:	f000 80aa 	beq.w	8019b14 <uxr_read_framed_msg+0x300>
 80199c0:	18e2      	adds	r2, r4, r3
 80199c2:	7891      	ldrb	r1, [r2, #2]
 80199c4:	297d      	cmp	r1, #125	; 0x7d
 80199c6:	f000 8186 	beq.w	8019cd6 <uxr_read_framed_msg+0x4c2>
 80199ca:	3301      	adds	r3, #1
 80199cc:	202a      	movs	r0, #42	; 0x2a
 80199ce:	297e      	cmp	r1, #126	; 0x7e
 80199d0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80199d4:	fba5 c202 	umull	ip, r2, r5, r2
 80199d8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80199dc:	fb00 3312 	mls	r3, r0, r2, r3
 80199e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80199e4:	f000 8195 	beq.w	8019d12 <uxr_read_framed_msg+0x4fe>
 80199e8:	2304      	movs	r3, #4
 80199ea:	8621      	strh	r1, [r4, #48]	; 0x30
 80199ec:	7023      	strb	r3, [r4, #0]
 80199ee:	e722      	b.n	8019836 <uxr_read_framed_msg+0x22>
 80199f0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80199f4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80199f8:	4290      	cmp	r0, r2
 80199fa:	f000 80b4 	beq.w	8019b66 <uxr_read_framed_msg+0x352>
 80199fe:	18a3      	adds	r3, r4, r2
 8019a00:	7899      	ldrb	r1, [r3, #2]
 8019a02:	297d      	cmp	r1, #125	; 0x7d
 8019a04:	f000 8107 	beq.w	8019c16 <uxr_read_framed_msg+0x402>
 8019a08:	3201      	adds	r2, #1
 8019a0a:	232a      	movs	r3, #42	; 0x2a
 8019a0c:	297e      	cmp	r1, #126	; 0x7e
 8019a0e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019a12:	fba5 c000 	umull	ip, r0, r5, r0
 8019a16:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019a1a:	fb03 2210 	mls	r2, r3, r0, r2
 8019a1e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019a22:	f000 818a 	beq.w	8019d3a <uxr_read_framed_msg+0x526>
 8019a26:	7863      	ldrb	r3, [r4, #1]
 8019a28:	428b      	cmp	r3, r1
 8019a2a:	bf0c      	ite	eq
 8019a2c:	2303      	moveq	r3, #3
 8019a2e:	2300      	movne	r3, #0
 8019a30:	7023      	strb	r3, [r4, #0]
 8019a32:	e700      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019a34:	2300      	movs	r3, #0
 8019a36:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019a3a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019a3e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019a42:	4299      	cmp	r1, r3
 8019a44:	d06a      	beq.n	8019b1c <uxr_read_framed_msg+0x308>
 8019a46:	18e2      	adds	r2, r4, r3
 8019a48:	7890      	ldrb	r0, [r2, #2]
 8019a4a:	287d      	cmp	r0, #125	; 0x7d
 8019a4c:	f000 8100 	beq.w	8019c50 <uxr_read_framed_msg+0x43c>
 8019a50:	3301      	adds	r3, #1
 8019a52:	212a      	movs	r1, #42	; 0x2a
 8019a54:	287e      	cmp	r0, #126	; 0x7e
 8019a56:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8019a5a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019a5e:	fba5 c202 	umull	ip, r2, r5, r2
 8019a62:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a66:	fb01 3312 	mls	r3, r1, r2, r3
 8019a6a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a6e:	d055      	beq.n	8019b1c <uxr_read_framed_msg+0x308>
 8019a70:	2302      	movs	r3, #2
 8019a72:	7023      	strb	r3, [r4, #0]
 8019a74:	e6df      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019a76:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8019a7a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019a7e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019a82:	1c5a      	adds	r2, r3, #1
 8019a84:	459c      	cmp	ip, r3
 8019a86:	eb04 0103 	add.w	r1, r4, r3
 8019a8a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019a8e:	f43f af04 	beq.w	801989a <uxr_read_framed_msg+0x86>
 8019a92:	fba5 0303 	umull	r0, r3, r5, r3
 8019a96:	7889      	ldrb	r1, [r1, #2]
 8019a98:	089b      	lsrs	r3, r3, #2
 8019a9a:	297e      	cmp	r1, #126	; 0x7e
 8019a9c:	fb0e 2313 	mls	r3, lr, r3, r2
 8019aa0:	b2db      	uxtb	r3, r3
 8019aa2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019aa6:	d1ec      	bne.n	8019a82 <uxr_read_framed_msg+0x26e>
 8019aa8:	2301      	movs	r3, #1
 8019aaa:	7023      	strb	r3, [r4, #0]
 8019aac:	e6c3      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019aae:	1c50      	adds	r0, r2, #1
 8019ab0:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019ab4:	3202      	adds	r2, #2
 8019ab6:	0841      	lsrs	r1, r0, #1
 8019ab8:	fba5 c101 	umull	ip, r1, r5, r1
 8019abc:	0889      	lsrs	r1, r1, #2
 8019abe:	fb0b 0111 	mls	r1, fp, r1, r0
 8019ac2:	1860      	adds	r0, r4, r1
 8019ac4:	b2c9      	uxtb	r1, r1
 8019ac6:	458a      	cmp	sl, r1
 8019ac8:	f43f af42 	beq.w	8019950 <uxr_read_framed_msg+0x13c>
 8019acc:	0851      	lsrs	r1, r2, #1
 8019ace:	7880      	ldrb	r0, [r0, #2]
 8019ad0:	fba5 a101 	umull	sl, r1, r5, r1
 8019ad4:	287e      	cmp	r0, #126	; 0x7e
 8019ad6:	f080 0c20 	eor.w	ip, r0, #32
 8019ada:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019ade:	fb0b 2211 	mls	r2, fp, r1, r2
 8019ae2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019ae6:	f47f af14 	bne.w	8019912 <uxr_read_framed_msg+0xfe>
 8019aea:	459e      	cmp	lr, r3
 8019aec:	f43f af33 	beq.w	8019956 <uxr_read_framed_msg+0x142>
 8019af0:	2301      	movs	r3, #1
 8019af2:	7023      	strb	r3, [r4, #0]
 8019af4:	e69f      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019af8:	9300      	str	r3, [sp, #0]
 8019afa:	2301      	movs	r3, #1
 8019afc:	9301      	str	r3, [sp, #4]
 8019afe:	464a      	mov	r2, r9
 8019b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b02:	4641      	mov	r1, r8
 8019b04:	4620      	mov	r0, r4
 8019b06:	f7ff fdf1 	bl	80196ec <uxr_framing_read_transport>
 8019b0a:	2800      	cmp	r0, #0
 8019b0c:	f43f aec5 	beq.w	801989a <uxr_read_framed_msg+0x86>
 8019b10:	7823      	ldrb	r3, [r4, #0]
 8019b12:	e690      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b16:	9300      	str	r3, [sp, #0]
 8019b18:	2302      	movs	r3, #2
 8019b1a:	e7ef      	b.n	8019afc <uxr_read_framed_msg+0x2e8>
 8019b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b1e:	464a      	mov	r2, r9
 8019b20:	4641      	mov	r1, r8
 8019b22:	4620      	mov	r0, r4
 8019b24:	9300      	str	r3, [sp, #0]
 8019b26:	2304      	movs	r3, #4
 8019b28:	9301      	str	r3, [sp, #4]
 8019b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b2c:	f7ff fdde 	bl	80196ec <uxr_framing_read_transport>
 8019b30:	2800      	cmp	r0, #0
 8019b32:	d1ed      	bne.n	8019b10 <uxr_read_framed_msg+0x2fc>
 8019b34:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019b38:	2b7e      	cmp	r3, #126	; 0x7e
 8019b3a:	d0e9      	beq.n	8019b10 <uxr_read_framed_msg+0x2fc>
 8019b3c:	e6ad      	b.n	801989a <uxr_read_framed_msg+0x86>
 8019b3e:	bf00      	nop
 8019b40:	30c30c31 	.word	0x30c30c31
 8019b44:	080258c4 	.word	0x080258c4
 8019b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b4a:	9300      	str	r3, [sp, #0]
 8019b4c:	2305      	movs	r3, #5
 8019b4e:	9301      	str	r3, [sp, #4]
 8019b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b52:	f7ff fdcb 	bl	80196ec <uxr_framing_read_transport>
 8019b56:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019b5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	f43f ae9b 	beq.w	801989a <uxr_read_framed_msg+0x86>
 8019b64:	e664      	b.n	8019830 <uxr_read_framed_msg+0x1c>
 8019b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b68:	9300      	str	r3, [sp, #0]
 8019b6a:	2303      	movs	r3, #3
 8019b6c:	e7c6      	b.n	8019afc <uxr_read_framed_msg+0x2e8>
 8019b6e:	2305      	movs	r3, #5
 8019b70:	7023      	strb	r3, [r4, #0]
 8019b72:	e660      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019b74:	f43f aeef 	beq.w	8019956 <uxr_read_framed_msg+0x142>
 8019b78:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019b7c:	d094      	beq.n	8019aa8 <uxr_read_framed_msg+0x294>
 8019b7e:	ebae 0303 	sub.w	r3, lr, r3
 8019b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b84:	3302      	adds	r3, #2
 8019b86:	9200      	str	r2, [sp, #0]
 8019b88:	e7b8      	b.n	8019afc <uxr_read_framed_msg+0x2e8>
 8019b8a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019b90:	7013      	strb	r3, [r2, #0]
 8019b92:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019b94:	b003      	add	sp, #12
 8019b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b9a:	1c59      	adds	r1, r3, #1
 8019b9c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019ba0:	084a      	lsrs	r2, r1, #1
 8019ba2:	fba5 e202 	umull	lr, r2, r5, r2
 8019ba6:	0892      	lsrs	r2, r2, #2
 8019ba8:	fb0c 1212 	mls	r2, ip, r2, r1
 8019bac:	b2d1      	uxtb	r1, r2
 8019bae:	4288      	cmp	r0, r1
 8019bb0:	d0b0      	beq.n	8019b14 <uxr_read_framed_msg+0x300>
 8019bb2:	3302      	adds	r3, #2
 8019bb4:	4422      	add	r2, r4
 8019bb6:	7891      	ldrb	r1, [r2, #2]
 8019bb8:	085a      	lsrs	r2, r3, #1
 8019bba:	fba5 0202 	umull	r0, r2, r5, r2
 8019bbe:	297e      	cmp	r1, #126	; 0x7e
 8019bc0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019bc4:	fb0c 3312 	mls	r3, ip, r2, r3
 8019bc8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019bcc:	f000 80a1 	beq.w	8019d12 <uxr_read_framed_msg+0x4fe>
 8019bd0:	f081 0120 	eor.w	r1, r1, #32
 8019bd4:	e680      	b.n	80198d8 <uxr_read_framed_msg+0xc4>
 8019bd6:	f103 0c01 	add.w	ip, r3, #1
 8019bda:	202a      	movs	r0, #42	; 0x2a
 8019bdc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019be0:	fba5 e202 	umull	lr, r2, r5, r2
 8019be4:	0892      	lsrs	r2, r2, #2
 8019be6:	fb00 c212 	mls	r2, r0, r2, ip
 8019bea:	fa5f fc82 	uxtb.w	ip, r2
 8019bee:	4561      	cmp	r1, ip
 8019bf0:	d081      	beq.n	8019af6 <uxr_read_framed_msg+0x2e2>
 8019bf2:	3302      	adds	r3, #2
 8019bf4:	4422      	add	r2, r4
 8019bf6:	0859      	lsrs	r1, r3, #1
 8019bf8:	7892      	ldrb	r2, [r2, #2]
 8019bfa:	fba5 c101 	umull	ip, r1, r5, r1
 8019bfe:	2a7e      	cmp	r2, #126	; 0x7e
 8019c00:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019c04:	fb00 3311 	mls	r3, r0, r1, r3
 8019c08:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019c0c:	f000 8091 	beq.w	8019d32 <uxr_read_framed_msg+0x51e>
 8019c10:	f082 0220 	eor.w	r2, r2, #32
 8019c14:	e636      	b.n	8019884 <uxr_read_framed_msg+0x70>
 8019c16:	1c51      	adds	r1, r2, #1
 8019c18:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019c1c:	084b      	lsrs	r3, r1, #1
 8019c1e:	fba5 e303 	umull	lr, r3, r5, r3
 8019c22:	089b      	lsrs	r3, r3, #2
 8019c24:	fb0c 1313 	mls	r3, ip, r3, r1
 8019c28:	b2d9      	uxtb	r1, r3
 8019c2a:	4288      	cmp	r0, r1
 8019c2c:	d09b      	beq.n	8019b66 <uxr_read_framed_msg+0x352>
 8019c2e:	3202      	adds	r2, #2
 8019c30:	4423      	add	r3, r4
 8019c32:	0850      	lsrs	r0, r2, #1
 8019c34:	789b      	ldrb	r3, [r3, #2]
 8019c36:	fba5 1000 	umull	r1, r0, r5, r0
 8019c3a:	2b7e      	cmp	r3, #126	; 0x7e
 8019c3c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019c40:	fb0c 2210 	mls	r2, ip, r0, r2
 8019c44:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019c48:	d077      	beq.n	8019d3a <uxr_read_framed_msg+0x526>
 8019c4a:	f083 0120 	eor.w	r1, r3, #32
 8019c4e:	e6ea      	b.n	8019a26 <uxr_read_framed_msg+0x212>
 8019c50:	f103 0c01 	add.w	ip, r3, #1
 8019c54:	202a      	movs	r0, #42	; 0x2a
 8019c56:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019c5a:	fba5 e202 	umull	lr, r2, r5, r2
 8019c5e:	0892      	lsrs	r2, r2, #2
 8019c60:	fb00 c212 	mls	r2, r0, r2, ip
 8019c64:	fa5f fc82 	uxtb.w	ip, r2
 8019c68:	4561      	cmp	r1, ip
 8019c6a:	f43f af57 	beq.w	8019b1c <uxr_read_framed_msg+0x308>
 8019c6e:	3302      	adds	r3, #2
 8019c70:	4422      	add	r2, r4
 8019c72:	7891      	ldrb	r1, [r2, #2]
 8019c74:	085a      	lsrs	r2, r3, #1
 8019c76:	fba5 c202 	umull	ip, r2, r5, r2
 8019c7a:	297e      	cmp	r1, #126	; 0x7e
 8019c7c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019c80:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019c84:	fb00 3312 	mls	r3, r0, r2, r3
 8019c88:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019c8c:	f43f af46 	beq.w	8019b1c <uxr_read_framed_msg+0x308>
 8019c90:	f081 0120 	eor.w	r1, r1, #32
 8019c94:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019c98:	e6ea      	b.n	8019a70 <uxr_read_framed_msg+0x25c>
 8019c9a:	1c59      	adds	r1, r3, #1
 8019c9c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019ca0:	084a      	lsrs	r2, r1, #1
 8019ca2:	fba5 e202 	umull	lr, r2, r5, r2
 8019ca6:	0892      	lsrs	r2, r2, #2
 8019ca8:	fb0c 1212 	mls	r2, ip, r2, r1
 8019cac:	b2d1      	uxtb	r1, r2
 8019cae:	4288      	cmp	r0, r1
 8019cb0:	f43f af21 	beq.w	8019af6 <uxr_read_framed_msg+0x2e2>
 8019cb4:	3302      	adds	r3, #2
 8019cb6:	4422      	add	r2, r4
 8019cb8:	7891      	ldrb	r1, [r2, #2]
 8019cba:	085a      	lsrs	r2, r3, #1
 8019cbc:	fba5 0202 	umull	r0, r2, r5, r2
 8019cc0:	297e      	cmp	r1, #126	; 0x7e
 8019cc2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019cc6:	fb0c 3312 	mls	r3, ip, r2, r3
 8019cca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019cce:	d030      	beq.n	8019d32 <uxr_read_framed_msg+0x51e>
 8019cd0:	f081 0120 	eor.w	r1, r1, #32
 8019cd4:	e65d      	b.n	8019992 <uxr_read_framed_msg+0x17e>
 8019cd6:	1c59      	adds	r1, r3, #1
 8019cd8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019cdc:	084a      	lsrs	r2, r1, #1
 8019cde:	fba5 e202 	umull	lr, r2, r5, r2
 8019ce2:	0892      	lsrs	r2, r2, #2
 8019ce4:	fb0c 1212 	mls	r2, ip, r2, r1
 8019ce8:	b2d1      	uxtb	r1, r2
 8019cea:	4288      	cmp	r0, r1
 8019cec:	f43f af12 	beq.w	8019b14 <uxr_read_framed_msg+0x300>
 8019cf0:	3302      	adds	r3, #2
 8019cf2:	4422      	add	r2, r4
 8019cf4:	7891      	ldrb	r1, [r2, #2]
 8019cf6:	085a      	lsrs	r2, r3, #1
 8019cf8:	fba5 0202 	umull	r0, r2, r5, r2
 8019cfc:	297e      	cmp	r1, #126	; 0x7e
 8019cfe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019d02:	fb0c 3312 	mls	r3, ip, r2, r3
 8019d06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019d0a:	d002      	beq.n	8019d12 <uxr_read_framed_msg+0x4fe>
 8019d0c:	f081 0120 	eor.w	r1, r1, #32
 8019d10:	e66a      	b.n	80199e8 <uxr_read_framed_msg+0x1d4>
 8019d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d14:	9300      	str	r3, [sp, #0]
 8019d16:	2302      	movs	r3, #2
 8019d18:	9301      	str	r3, [sp, #4]
 8019d1a:	464a      	mov	r2, r9
 8019d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d1e:	4641      	mov	r1, r8
 8019d20:	4620      	mov	r0, r4
 8019d22:	f7ff fce3 	bl	80196ec <uxr_framing_read_transport>
 8019d26:	2800      	cmp	r0, #0
 8019d28:	f47f aef2 	bne.w	8019b10 <uxr_read_framed_msg+0x2fc>
 8019d2c:	2301      	movs	r3, #1
 8019d2e:	7023      	strb	r3, [r4, #0]
 8019d30:	e581      	b.n	8019836 <uxr_read_framed_msg+0x22>
 8019d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d34:	9300      	str	r3, [sp, #0]
 8019d36:	2301      	movs	r3, #1
 8019d38:	e7ee      	b.n	8019d18 <uxr_read_framed_msg+0x504>
 8019d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d3c:	9300      	str	r3, [sp, #0]
 8019d3e:	2303      	movs	r3, #3
 8019d40:	e7ea      	b.n	8019d18 <uxr_read_framed_msg+0x504>
 8019d42:	bf00      	nop

08019d44 <uxr_stream_id>:
 8019d44:	2901      	cmp	r1, #1
 8019d46:	4684      	mov	ip, r0
 8019d48:	b500      	push	{lr}
 8019d4a:	b083      	sub	sp, #12
 8019d4c:	d01f      	beq.n	8019d8e <uxr_stream_id+0x4a>
 8019d4e:	2902      	cmp	r1, #2
 8019d50:	f04f 0e00 	mov.w	lr, #0
 8019d54:	d020      	beq.n	8019d98 <uxr_stream_id+0x54>
 8019d56:	2300      	movs	r3, #0
 8019d58:	2000      	movs	r0, #0
 8019d5a:	f36e 0307 	bfi	r3, lr, #0, #8
 8019d5e:	f36c 230f 	bfi	r3, ip, #8, #8
 8019d62:	f361 4317 	bfi	r3, r1, #16, #8
 8019d66:	f362 631f 	bfi	r3, r2, #24, #8
 8019d6a:	fa5f fc83 	uxtb.w	ip, r3
 8019d6e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019d72:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019d76:	0e1b      	lsrs	r3, r3, #24
 8019d78:	f36c 0007 	bfi	r0, ip, #0, #8
 8019d7c:	f361 200f 	bfi	r0, r1, #8, #8
 8019d80:	f362 4017 	bfi	r0, r2, #16, #8
 8019d84:	f363 601f 	bfi	r0, r3, #24, #8
 8019d88:	b003      	add	sp, #12
 8019d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d8e:	f100 0e01 	add.w	lr, r0, #1
 8019d92:	fa5f fe8e 	uxtb.w	lr, lr
 8019d96:	e7de      	b.n	8019d56 <uxr_stream_id+0x12>
 8019d98:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8019d9c:	e7db      	b.n	8019d56 <uxr_stream_id+0x12>
 8019d9e:	bf00      	nop

08019da0 <uxr_stream_id_from_raw>:
 8019da0:	b082      	sub	sp, #8
 8019da2:	b130      	cbz	r0, 8019db2 <uxr_stream_id_from_raw+0x12>
 8019da4:	0603      	lsls	r3, r0, #24
 8019da6:	d421      	bmi.n	8019dec <uxr_stream_id_from_raw+0x4c>
 8019da8:	1e42      	subs	r2, r0, #1
 8019daa:	f04f 0c01 	mov.w	ip, #1
 8019dae:	b2d2      	uxtb	r2, r2
 8019db0:	e001      	b.n	8019db6 <uxr_stream_id_from_raw+0x16>
 8019db2:	4684      	mov	ip, r0
 8019db4:	4602      	mov	r2, r0
 8019db6:	2300      	movs	r3, #0
 8019db8:	f360 0307 	bfi	r3, r0, #0, #8
 8019dbc:	2000      	movs	r0, #0
 8019dbe:	f362 230f 	bfi	r3, r2, #8, #8
 8019dc2:	f36c 4317 	bfi	r3, ip, #16, #8
 8019dc6:	f361 631f 	bfi	r3, r1, #24, #8
 8019dca:	fa5f fc83 	uxtb.w	ip, r3
 8019dce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019dd2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019dd6:	0e1b      	lsrs	r3, r3, #24
 8019dd8:	f36c 0007 	bfi	r0, ip, #0, #8
 8019ddc:	f361 200f 	bfi	r0, r1, #8, #8
 8019de0:	f362 4017 	bfi	r0, r2, #16, #8
 8019de4:	f363 601f 	bfi	r0, r3, #24, #8
 8019de8:	b002      	add	sp, #8
 8019dea:	4770      	bx	lr
 8019dec:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019df0:	f04f 0c02 	mov.w	ip, #2
 8019df4:	e7df      	b.n	8019db6 <uxr_stream_id_from_raw+0x16>
 8019df6:	bf00      	nop

08019df8 <uxr_init_stream_storage>:
 8019df8:	2300      	movs	r3, #0
 8019dfa:	7403      	strb	r3, [r0, #16]
 8019dfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019e00:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019e04:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019e08:	4770      	bx	lr
 8019e0a:	bf00      	nop

08019e0c <uxr_reset_stream_storage>:
 8019e0c:	b570      	push	{r4, r5, r6, lr}
 8019e0e:	7c03      	ldrb	r3, [r0, #16]
 8019e10:	4604      	mov	r4, r0
 8019e12:	b14b      	cbz	r3, 8019e28 <uxr_reset_stream_storage+0x1c>
 8019e14:	4606      	mov	r6, r0
 8019e16:	2500      	movs	r5, #0
 8019e18:	4630      	mov	r0, r6
 8019e1a:	3501      	adds	r5, #1
 8019e1c:	f004 fea6 	bl	801eb6c <uxr_reset_output_best_effort_stream>
 8019e20:	7c23      	ldrb	r3, [r4, #16]
 8019e22:	3610      	adds	r6, #16
 8019e24:	42ab      	cmp	r3, r5
 8019e26:	d8f7      	bhi.n	8019e18 <uxr_reset_stream_storage+0xc>
 8019e28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e2c:	b15b      	cbz	r3, 8019e46 <uxr_reset_stream_storage+0x3a>
 8019e2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019e32:	2500      	movs	r5, #0
 8019e34:	4630      	mov	r0, r6
 8019e36:	3501      	adds	r5, #1
 8019e38:	f004 fc9e 	bl	801e778 <uxr_reset_input_best_effort_stream>
 8019e3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e40:	3602      	adds	r6, #2
 8019e42:	42ab      	cmp	r3, r5
 8019e44:	d8f6      	bhi.n	8019e34 <uxr_reset_stream_storage+0x28>
 8019e46:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019e4a:	b15b      	cbz	r3, 8019e64 <uxr_reset_stream_storage+0x58>
 8019e4c:	f104 0618 	add.w	r6, r4, #24
 8019e50:	2500      	movs	r5, #0
 8019e52:	4630      	mov	r0, r6
 8019e54:	3501      	adds	r5, #1
 8019e56:	f004 ff37 	bl	801ecc8 <uxr_reset_output_reliable_stream>
 8019e5a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019e5e:	3628      	adds	r6, #40	; 0x28
 8019e60:	42ab      	cmp	r3, r5
 8019e62:	d8f6      	bhi.n	8019e52 <uxr_reset_stream_storage+0x46>
 8019e64:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019e68:	b15b      	cbz	r3, 8019e82 <uxr_reset_stream_storage+0x76>
 8019e6a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019e6e:	2500      	movs	r5, #0
 8019e70:	4630      	mov	r0, r6
 8019e72:	3501      	adds	r5, #1
 8019e74:	f004 fcec 	bl	801e850 <uxr_reset_input_reliable_stream>
 8019e78:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019e7c:	3618      	adds	r6, #24
 8019e7e:	42ab      	cmp	r3, r5
 8019e80:	d8f6      	bhi.n	8019e70 <uxr_reset_stream_storage+0x64>
 8019e82:	bd70      	pop	{r4, r5, r6, pc}

08019e84 <uxr_add_output_best_effort_buffer>:
 8019e84:	b510      	push	{r4, lr}
 8019e86:	7c04      	ldrb	r4, [r0, #16]
 8019e88:	b082      	sub	sp, #8
 8019e8a:	f104 0c01 	add.w	ip, r4, #1
 8019e8e:	f880 c010 	strb.w	ip, [r0, #16]
 8019e92:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019e96:	f004 fe5f 	bl	801eb58 <uxr_init_output_best_effort_stream>
 8019e9a:	2201      	movs	r2, #1
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	4611      	mov	r1, r2
 8019ea0:	b002      	add	sp, #8
 8019ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ea6:	f7ff bf4d 	b.w	8019d44 <uxr_stream_id>
 8019eaa:	bf00      	nop

08019eac <uxr_add_output_reliable_buffer>:
 8019eac:	b510      	push	{r4, lr}
 8019eae:	b084      	sub	sp, #16
 8019eb0:	4684      	mov	ip, r0
 8019eb2:	2028      	movs	r0, #40	; 0x28
 8019eb4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019eb8:	9400      	str	r4, [sp, #0]
 8019eba:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8019ebe:	fb00 c004 	mla	r0, r0, r4, ip
 8019ec2:	f104 0e01 	add.w	lr, r4, #1
 8019ec6:	3018      	adds	r0, #24
 8019ec8:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8019ecc:	f004 fec4 	bl	801ec58 <uxr_init_output_reliable_stream>
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	2102      	movs	r1, #2
 8019ed4:	4620      	mov	r0, r4
 8019ed6:	b004      	add	sp, #16
 8019ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019edc:	f7ff bf32 	b.w	8019d44 <uxr_stream_id>

08019ee0 <uxr_add_input_best_effort_buffer>:
 8019ee0:	b510      	push	{r4, lr}
 8019ee2:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	1c62      	adds	r2, r4, #1
 8019eea:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8019eee:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019ef2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019ef6:	f004 fc3b 	bl	801e770 <uxr_init_input_best_effort_stream>
 8019efa:	2200      	movs	r2, #0
 8019efc:	2101      	movs	r1, #1
 8019efe:	4620      	mov	r0, r4
 8019f00:	b002      	add	sp, #8
 8019f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f06:	f7ff bf1d 	b.w	8019d44 <uxr_stream_id>
 8019f0a:	bf00      	nop

08019f0c <uxr_add_input_reliable_buffer>:
 8019f0c:	b510      	push	{r4, lr}
 8019f0e:	b084      	sub	sp, #16
 8019f10:	4684      	mov	ip, r0
 8019f12:	2018      	movs	r0, #24
 8019f14:	9c06      	ldr	r4, [sp, #24]
 8019f16:	9400      	str	r4, [sp, #0]
 8019f18:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019f1c:	fb00 c004 	mla	r0, r0, r4, ip
 8019f20:	f104 0e01 	add.w	lr, r4, #1
 8019f24:	3048      	adds	r0, #72	; 0x48
 8019f26:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8019f2a:	f004 fc6b 	bl	801e804 <uxr_init_input_reliable_stream>
 8019f2e:	2200      	movs	r2, #0
 8019f30:	2102      	movs	r1, #2
 8019f32:	4620      	mov	r0, r4
 8019f34:	b004      	add	sp, #16
 8019f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f3a:	f7ff bf03 	b.w	8019d44 <uxr_stream_id>
 8019f3e:	bf00      	nop

08019f40 <uxr_get_output_best_effort_stream>:
 8019f40:	7c03      	ldrb	r3, [r0, #16]
 8019f42:	428b      	cmp	r3, r1
 8019f44:	bf8c      	ite	hi
 8019f46:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019f4a:	2000      	movls	r0, #0
 8019f4c:	4770      	bx	lr
 8019f4e:	bf00      	nop

08019f50 <uxr_get_output_reliable_stream>:
 8019f50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019f54:	428b      	cmp	r3, r1
 8019f56:	d904      	bls.n	8019f62 <uxr_get_output_reliable_stream+0x12>
 8019f58:	2328      	movs	r3, #40	; 0x28
 8019f5a:	fb03 0001 	mla	r0, r3, r1, r0
 8019f5e:	3018      	adds	r0, #24
 8019f60:	4770      	bx	lr
 8019f62:	2000      	movs	r0, #0
 8019f64:	4770      	bx	lr
 8019f66:	bf00      	nop

08019f68 <uxr_get_input_best_effort_stream>:
 8019f68:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019f6c:	428b      	cmp	r3, r1
 8019f6e:	d903      	bls.n	8019f78 <uxr_get_input_best_effort_stream+0x10>
 8019f70:	3121      	adds	r1, #33	; 0x21
 8019f72:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019f76:	4770      	bx	lr
 8019f78:	2000      	movs	r0, #0
 8019f7a:	4770      	bx	lr

08019f7c <uxr_get_input_reliable_stream>:
 8019f7c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019f80:	428b      	cmp	r3, r1
 8019f82:	d904      	bls.n	8019f8e <uxr_get_input_reliable_stream+0x12>
 8019f84:	2318      	movs	r3, #24
 8019f86:	fb03 0001 	mla	r0, r3, r1, r0
 8019f8a:	3048      	adds	r0, #72	; 0x48
 8019f8c:	4770      	bx	lr
 8019f8e:	2000      	movs	r0, #0
 8019f90:	4770      	bx	lr
 8019f92:	bf00      	nop

08019f94 <uxr_output_streams_confirmed>:
 8019f94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019f98:	b183      	cbz	r3, 8019fbc <uxr_output_streams_confirmed+0x28>
 8019f9a:	b570      	push	{r4, r5, r6, lr}
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	f100 0518 	add.w	r5, r0, #24
 8019fa2:	2400      	movs	r4, #0
 8019fa4:	e000      	b.n	8019fa8 <uxr_output_streams_confirmed+0x14>
 8019fa6:	b140      	cbz	r0, 8019fba <uxr_output_streams_confirmed+0x26>
 8019fa8:	4628      	mov	r0, r5
 8019faa:	3401      	adds	r4, #1
 8019fac:	f005 f900 	bl	801f1b0 <uxr_is_output_up_to_date>
 8019fb0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8019fb4:	3528      	adds	r5, #40	; 0x28
 8019fb6:	42a3      	cmp	r3, r4
 8019fb8:	d8f5      	bhi.n	8019fa6 <uxr_output_streams_confirmed+0x12>
 8019fba:	bd70      	pop	{r4, r5, r6, pc}
 8019fbc:	2001      	movs	r0, #1
 8019fbe:	4770      	bx	lr

08019fc0 <uxr_buffer_submessage_header>:
 8019fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fc2:	460e      	mov	r6, r1
 8019fc4:	2104      	movs	r1, #4
 8019fc6:	4604      	mov	r4, r0
 8019fc8:	4615      	mov	r5, r2
 8019fca:	461f      	mov	r7, r3
 8019fcc:	f7f9 faa8 	bl	8013520 <ucdr_align_to>
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	4631      	mov	r1, r6
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	ea47 0203 	orr.w	r2, r7, r3
 8019fda:	7523      	strb	r3, [r4, #20]
 8019fdc:	462b      	mov	r3, r5
 8019fde:	f000 fa29 	bl	801a434 <uxr_serialize_submessage_header>
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f7f9 fab2 	bl	801354c <ucdr_buffer_remaining>
 8019fe8:	42a8      	cmp	r0, r5
 8019fea:	bf34      	ite	cc
 8019fec:	2000      	movcc	r0, #0
 8019fee:	2001      	movcs	r0, #1
 8019ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ff2:	bf00      	nop

08019ff4 <uxr_read_submessage_header>:
 8019ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ff8:	4604      	mov	r4, r0
 8019ffa:	460d      	mov	r5, r1
 8019ffc:	2104      	movs	r1, #4
 8019ffe:	4616      	mov	r6, r2
 801a000:	4698      	mov	r8, r3
 801a002:	f7f9 fa8d 	bl	8013520 <ucdr_align_to>
 801a006:	4620      	mov	r0, r4
 801a008:	f7f9 faa0 	bl	801354c <ucdr_buffer_remaining>
 801a00c:	2803      	cmp	r0, #3
 801a00e:	bf8c      	ite	hi
 801a010:	2701      	movhi	r7, #1
 801a012:	2700      	movls	r7, #0
 801a014:	d802      	bhi.n	801a01c <uxr_read_submessage_header+0x28>
 801a016:	4638      	mov	r0, r7
 801a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a01c:	4633      	mov	r3, r6
 801a01e:	4642      	mov	r2, r8
 801a020:	4620      	mov	r0, r4
 801a022:	4629      	mov	r1, r5
 801a024:	f000 fa1a 	bl	801a45c <uxr_deserialize_submessage_header>
 801a028:	f898 3000 	ldrb.w	r3, [r8]
 801a02c:	4638      	mov	r0, r7
 801a02e:	f003 0201 	and.w	r2, r3, #1
 801a032:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a036:	f888 3000 	strb.w	r3, [r8]
 801a03a:	7522      	strb	r2, [r4, #20]
 801a03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a040 <uxr_submessage_padding>:
 801a040:	f010 0003 	ands.w	r0, r0, #3
 801a044:	bf18      	it	ne
 801a046:	f1c0 0004 	rsbne	r0, r0, #4
 801a04a:	4770      	bx	lr

0801a04c <uxr_millis>:
 801a04c:	b510      	push	{r4, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	2001      	movs	r0, #1
 801a052:	4669      	mov	r1, sp
 801a054:	f7e9 fcf0 	bl	8003a38 <clock_gettime>
 801a058:	4908      	ldr	r1, [pc, #32]	; (801a07c <uxr_millis+0x30>)
 801a05a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801a05e:	fba0 0301 	umull	r0, r3, r0, r1
 801a062:	1900      	adds	r0, r0, r4
 801a064:	fb01 3102 	mla	r1, r1, r2, r3
 801a068:	4a05      	ldr	r2, [pc, #20]	; (801a080 <uxr_millis+0x34>)
 801a06a:	f04f 0300 	mov.w	r3, #0
 801a06e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801a072:	f7e6 fb09 	bl	8000688 <__aeabi_ldivmod>
 801a076:	b004      	add	sp, #16
 801a078:	bd10      	pop	{r4, pc}
 801a07a:	bf00      	nop
 801a07c:	3b9aca00 	.word	0x3b9aca00
 801a080:	000f4240 	.word	0x000f4240

0801a084 <uxr_nanos>:
 801a084:	b510      	push	{r4, lr}
 801a086:	b084      	sub	sp, #16
 801a088:	2001      	movs	r0, #1
 801a08a:	4669      	mov	r1, sp
 801a08c:	f7e9 fcd4 	bl	8003a38 <clock_gettime>
 801a090:	4a06      	ldr	r2, [pc, #24]	; (801a0ac <uxr_nanos+0x28>)
 801a092:	9800      	ldr	r0, [sp, #0]
 801a094:	9902      	ldr	r1, [sp, #8]
 801a096:	fba0 0302 	umull	r0, r3, r0, r2
 801a09a:	9c01      	ldr	r4, [sp, #4]
 801a09c:	1840      	adds	r0, r0, r1
 801a09e:	fb02 3304 	mla	r3, r2, r4, r3
 801a0a2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801a0a6:	b004      	add	sp, #16
 801a0a8:	bd10      	pop	{r4, pc}
 801a0aa:	bf00      	nop
 801a0ac:	3b9aca00 	.word	0x3b9aca00

0801a0b0 <on_full_output_buffer_fragmented>:
 801a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0b4:	460c      	mov	r4, r1
 801a0b6:	b08a      	sub	sp, #40	; 0x28
 801a0b8:	4606      	mov	r6, r0
 801a0ba:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801a0be:	f104 0008 	add.w	r0, r4, #8
 801a0c2:	f7ff ff45 	bl	8019f50 <uxr_get_output_reliable_stream>
 801a0c6:	4605      	mov	r5, r0
 801a0c8:	f005 f87c 	bl	801f1c4 <get_available_free_slots>
 801a0cc:	b968      	cbnz	r0, 801a0ea <on_full_output_buffer_fragmented+0x3a>
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801a0d4:	4798      	blx	r3
 801a0d6:	b918      	cbnz	r0, 801a0e0 <on_full_output_buffer_fragmented+0x30>
 801a0d8:	2001      	movs	r0, #1
 801a0da:	b00a      	add	sp, #40	; 0x28
 801a0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	f005 f86f 	bl	801f1c4 <get_available_free_slots>
 801a0e6:	2800      	cmp	r0, #0
 801a0e8:	d0f6      	beq.n	801a0d8 <on_full_output_buffer_fragmented+0x28>
 801a0ea:	8929      	ldrh	r1, [r5, #8]
 801a0ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a0f0:	89eb      	ldrh	r3, [r5, #14]
 801a0f2:	7b28      	ldrb	r0, [r5, #12]
 801a0f4:	686f      	ldr	r7, [r5, #4]
 801a0f6:	1a12      	subs	r2, r2, r0
 801a0f8:	fbb3 f0f1 	udiv	r0, r3, r1
 801a0fc:	fbb7 f7f1 	udiv	r7, r7, r1
 801a100:	fb01 3110 	mls	r1, r1, r0, r3
 801a104:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801a108:	b289      	uxth	r1, r1
 801a10a:	fb07 f101 	mul.w	r1, r7, r1
 801a10e:	3f04      	subs	r7, #4
 801a110:	443a      	add	r2, r7
 801a112:	3104      	adds	r1, #4
 801a114:	fa1f f882 	uxth.w	r8, r2
 801a118:	463a      	mov	r2, r7
 801a11a:	eba3 0308 	sub.w	r3, r3, r8
 801a11e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801a122:	682b      	ldr	r3, [r5, #0]
 801a124:	4419      	add	r1, r3
 801a126:	2300      	movs	r3, #0
 801a128:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a12c:	9000      	str	r0, [sp, #0]
 801a12e:	a802      	add	r0, sp, #8
 801a130:	f7f9 f9c8 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801a134:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801a138:	f102 0308 	add.w	r3, r2, #8
 801a13c:	42bb      	cmp	r3, r7
 801a13e:	d927      	bls.n	801a190 <on_full_output_buffer_fragmented+0xe0>
 801a140:	4642      	mov	r2, r8
 801a142:	2300      	movs	r3, #0
 801a144:	210d      	movs	r1, #13
 801a146:	a802      	add	r0, sp, #8
 801a148:	f7ff ff3a 	bl	8019fc0 <uxr_buffer_submessage_header>
 801a14c:	8929      	ldrh	r1, [r5, #8]
 801a14e:	89eb      	ldrh	r3, [r5, #14]
 801a150:	686a      	ldr	r2, [r5, #4]
 801a152:	fbb3 f0f1 	udiv	r0, r3, r1
 801a156:	fbb2 f2f1 	udiv	r2, r2, r1
 801a15a:	fb01 3310 	mls	r3, r1, r0, r3
 801a15e:	b29b      	uxth	r3, r3
 801a160:	fb02 f303 	mul.w	r3, r2, r3
 801a164:	682a      	ldr	r2, [r5, #0]
 801a166:	50d7      	str	r7, [r2, r3]
 801a168:	2101      	movs	r1, #1
 801a16a:	89e8      	ldrh	r0, [r5, #14]
 801a16c:	f005 f84c 	bl	801f208 <uxr_seq_num_add>
 801a170:	9904      	ldr	r1, [sp, #16]
 801a172:	9a03      	ldr	r2, [sp, #12]
 801a174:	81e8      	strh	r0, [r5, #14]
 801a176:	4630      	mov	r0, r6
 801a178:	1a52      	subs	r2, r2, r1
 801a17a:	f7f9 f9b5 	bl	80134e8 <ucdr_init_buffer>
 801a17e:	4630      	mov	r0, r6
 801a180:	4622      	mov	r2, r4
 801a182:	490f      	ldr	r1, [pc, #60]	; (801a1c0 <on_full_output_buffer_fragmented+0x110>)
 801a184:	f7f9 f984 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801a188:	2000      	movs	r0, #0
 801a18a:	b00a      	add	sp, #40	; 0x28
 801a18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a190:	b292      	uxth	r2, r2
 801a192:	2302      	movs	r3, #2
 801a194:	210d      	movs	r1, #13
 801a196:	a802      	add	r0, sp, #8
 801a198:	f7ff ff12 	bl	8019fc0 <uxr_buffer_submessage_header>
 801a19c:	8928      	ldrh	r0, [r5, #8]
 801a19e:	89eb      	ldrh	r3, [r5, #14]
 801a1a0:	6869      	ldr	r1, [r5, #4]
 801a1a2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801a1a6:	fbb3 f7f0 	udiv	r7, r3, r0
 801a1aa:	fbb1 f1f0 	udiv	r1, r1, r0
 801a1ae:	fb00 3317 	mls	r3, r0, r7, r3
 801a1b2:	3208      	adds	r2, #8
 801a1b4:	b29b      	uxth	r3, r3
 801a1b6:	fb01 f303 	mul.w	r3, r1, r3
 801a1ba:	6829      	ldr	r1, [r5, #0]
 801a1bc:	50ca      	str	r2, [r1, r3]
 801a1be:	e7d3      	b.n	801a168 <on_full_output_buffer_fragmented+0xb8>
 801a1c0:	0801a0b1 	.word	0x0801a0b1

0801a1c4 <uxr_prepare_output_stream>:
 801a1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1c6:	b087      	sub	sp, #28
 801a1c8:	2707      	movs	r7, #7
 801a1ca:	2500      	movs	r5, #0
 801a1cc:	461c      	mov	r4, r3
 801a1ce:	4606      	mov	r6, r0
 801a1d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a1d6:	e9cd 7500 	strd	r7, r5, [sp]
 801a1da:	3204      	adds	r2, #4
 801a1dc:	f7fe ffc8 	bl	8019170 <uxr_prepare_stream_to_write_submessage>
 801a1e0:	f080 0201 	eor.w	r2, r0, #1
 801a1e4:	b2d2      	uxtb	r2, r2
 801a1e6:	75a2      	strb	r2, [r4, #22]
 801a1e8:	b112      	cbz	r2, 801a1f0 <uxr_prepare_output_stream+0x2c>
 801a1ea:	4628      	mov	r0, r5
 801a1ec:	b007      	add	sp, #28
 801a1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1f0:	aa05      	add	r2, sp, #20
 801a1f2:	9902      	ldr	r1, [sp, #8]
 801a1f4:	4630      	mov	r0, r6
 801a1f6:	f7ff f8f7 	bl	80193e8 <uxr_init_base_object_request>
 801a1fa:	a905      	add	r1, sp, #20
 801a1fc:	4605      	mov	r5, r0
 801a1fe:	4620      	mov	r0, r4
 801a200:	f001 f8bc 	bl	801b37c <uxr_serialize_WRITE_DATA_Payload_Data>
 801a204:	69a6      	ldr	r6, [r4, #24]
 801a206:	69e7      	ldr	r7, [r4, #28]
 801a208:	4620      	mov	r0, r4
 801a20a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801a20e:	1a52      	subs	r2, r2, r1
 801a210:	f7f9 f96a 	bl	80134e8 <ucdr_init_buffer>
 801a214:	4620      	mov	r0, r4
 801a216:	463a      	mov	r2, r7
 801a218:	4631      	mov	r1, r6
 801a21a:	f7f9 f939 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801a21e:	4628      	mov	r0, r5
 801a220:	b007      	add	sp, #28
 801a222:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a224 <uxr_prepare_output_stream_fragmented>:
 801a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a228:	b091      	sub	sp, #68	; 0x44
 801a22a:	4605      	mov	r5, r0
 801a22c:	3008      	adds	r0, #8
 801a22e:	461e      	mov	r6, r3
 801a230:	9105      	str	r1, [sp, #20]
 801a232:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a236:	9204      	str	r2, [sp, #16]
 801a238:	f7ff fe8a 	bl	8019f50 <uxr_get_output_reliable_stream>
 801a23c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a240:	2b01      	cmp	r3, #1
 801a242:	f000 8093 	beq.w	801a36c <uxr_prepare_output_stream_fragmented+0x148>
 801a246:	4604      	mov	r4, r0
 801a248:	2800      	cmp	r0, #0
 801a24a:	f000 808f 	beq.w	801a36c <uxr_prepare_output_stream_fragmented+0x148>
 801a24e:	f004 ffb9 	bl	801f1c4 <get_available_free_slots>
 801a252:	2800      	cmp	r0, #0
 801a254:	f000 8085 	beq.w	801a362 <uxr_prepare_output_stream_fragmented+0x13e>
 801a258:	8923      	ldrh	r3, [r4, #8]
 801a25a:	89e7      	ldrh	r7, [r4, #14]
 801a25c:	6862      	ldr	r2, [r4, #4]
 801a25e:	fbb7 f9f3 	udiv	r9, r7, r3
 801a262:	fbb2 f2f3 	udiv	r2, r2, r3
 801a266:	fb03 7919 	mls	r9, r3, r9, r7
 801a26a:	6823      	ldr	r3, [r4, #0]
 801a26c:	f1a2 0b04 	sub.w	fp, r2, #4
 801a270:	9203      	str	r2, [sp, #12]
 801a272:	fa1f f989 	uxth.w	r9, r9
 801a276:	fb02 f909 	mul.w	r9, r2, r9
 801a27a:	f109 0904 	add.w	r9, r9, #4
 801a27e:	4499      	add	r9, r3
 801a280:	7b23      	ldrb	r3, [r4, #12]
 801a282:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a286:	4543      	cmp	r3, r8
 801a288:	d37c      	bcc.n	801a384 <uxr_prepare_output_stream_fragmented+0x160>
 801a28a:	f1ab 0a04 	sub.w	sl, fp, #4
 801a28e:	465a      	mov	r2, fp
 801a290:	4649      	mov	r1, r9
 801a292:	a808      	add	r0, sp, #32
 801a294:	ebaa 0a03 	sub.w	sl, sl, r3
 801a298:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a29a:	f8cd 8000 	str.w	r8, [sp]
 801a29e:	3308      	adds	r3, #8
 801a2a0:	fa1f fa8a 	uxth.w	sl, sl
 801a2a4:	9302      	str	r3, [sp, #8]
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	f7f9 f90c 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801a2ac:	9b02      	ldr	r3, [sp, #8]
 801a2ae:	4652      	mov	r2, sl
 801a2b0:	210d      	movs	r1, #13
 801a2b2:	455b      	cmp	r3, fp
 801a2b4:	bf34      	ite	cc
 801a2b6:	2302      	movcc	r3, #2
 801a2b8:	2300      	movcs	r3, #0
 801a2ba:	a808      	add	r0, sp, #32
 801a2bc:	f7ff fe80 	bl	8019fc0 <uxr_buffer_submessage_header>
 801a2c0:	8921      	ldrh	r1, [r4, #8]
 801a2c2:	6863      	ldr	r3, [r4, #4]
 801a2c4:	4638      	mov	r0, r7
 801a2c6:	fbb7 f2f1 	udiv	r2, r7, r1
 801a2ca:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2ce:	fb01 7212 	mls	r2, r1, r2, r7
 801a2d2:	2101      	movs	r1, #1
 801a2d4:	b292      	uxth	r2, r2
 801a2d6:	fb02 f303 	mul.w	r3, r2, r3
 801a2da:	6822      	ldr	r2, [r4, #0]
 801a2dc:	f842 b003 	str.w	fp, [r2, r3]
 801a2e0:	f004 ff92 	bl	801f208 <uxr_seq_num_add>
 801a2e4:	9b03      	ldr	r3, [sp, #12]
 801a2e6:	f108 0104 	add.w	r1, r8, #4
 801a2ea:	4607      	mov	r7, r0
 801a2ec:	f1a3 0208 	sub.w	r2, r3, #8
 801a2f0:	4630      	mov	r0, r6
 801a2f2:	4449      	add	r1, r9
 801a2f4:	eba2 0208 	sub.w	r2, r2, r8
 801a2f8:	f7f9 f8f6 	bl	80134e8 <ucdr_init_buffer>
 801a2fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a2fe:	2107      	movs	r1, #7
 801a300:	81e7      	strh	r7, [r4, #14]
 801a302:	1d1a      	adds	r2, r3, #4
 801a304:	2300      	movs	r3, #0
 801a306:	4630      	mov	r0, r6
 801a308:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801a30c:	bf28      	it	cs
 801a30e:	461a      	movcs	r2, r3
 801a310:	b292      	uxth	r2, r2
 801a312:	f7ff fe55 	bl	8019fc0 <uxr_buffer_submessage_header>
 801a316:	aa07      	add	r2, sp, #28
 801a318:	9904      	ldr	r1, [sp, #16]
 801a31a:	4628      	mov	r0, r5
 801a31c:	f7ff f864 	bl	80193e8 <uxr_init_base_object_request>
 801a320:	4604      	mov	r4, r0
 801a322:	b320      	cbz	r0, 801a36e <uxr_prepare_output_stream_fragmented+0x14a>
 801a324:	a907      	add	r1, sp, #28
 801a326:	4630      	mov	r0, r6
 801a328:	f001 f828 	bl	801b37c <uxr_serialize_WRITE_DATA_Payload_Data>
 801a32c:	4630      	mov	r0, r6
 801a32e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801a332:	1a52      	subs	r2, r2, r1
 801a334:	f7f9 f8d8 	bl	80134e8 <ucdr_init_buffer>
 801a338:	9b05      	ldr	r3, [sp, #20]
 801a33a:	9a02      	ldr	r2, [sp, #8]
 801a33c:	4630      	mov	r0, r6
 801a33e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801a342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a344:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801a348:	462a      	mov	r2, r5
 801a34a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801a34e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a350:	4918      	ldr	r1, [pc, #96]	; (801a3b4 <uxr_prepare_output_stream_fragmented+0x190>)
 801a352:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801a356:	f7f9 f89b 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801a35a:	4620      	mov	r0, r4
 801a35c:	b011      	add	sp, #68	; 0x44
 801a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a362:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a364:	4628      	mov	r0, r5
 801a366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a368:	4798      	blx	r3
 801a36a:	b920      	cbnz	r0, 801a376 <uxr_prepare_output_stream_fragmented+0x152>
 801a36c:	2400      	movs	r4, #0
 801a36e:	4620      	mov	r0, r4
 801a370:	b011      	add	sp, #68	; 0x44
 801a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a376:	4620      	mov	r0, r4
 801a378:	f004 ff24 	bl	801f1c4 <get_available_free_slots>
 801a37c:	2800      	cmp	r0, #0
 801a37e:	f47f af6b 	bne.w	801a258 <uxr_prepare_output_stream_fragmented+0x34>
 801a382:	e7f3      	b.n	801a36c <uxr_prepare_output_stream_fragmented+0x148>
 801a384:	4638      	mov	r0, r7
 801a386:	2101      	movs	r1, #1
 801a388:	f004 ff3e 	bl	801f208 <uxr_seq_num_add>
 801a38c:	8922      	ldrh	r2, [r4, #8]
 801a38e:	6863      	ldr	r3, [r4, #4]
 801a390:	4607      	mov	r7, r0
 801a392:	fbb3 f9f2 	udiv	r9, r3, r2
 801a396:	fbb0 f3f2 	udiv	r3, r0, r2
 801a39a:	fb02 0313 	mls	r3, r2, r3, r0
 801a39e:	b29b      	uxth	r3, r3
 801a3a0:	fb03 f909 	mul.w	r9, r3, r9
 801a3a4:	6823      	ldr	r3, [r4, #0]
 801a3a6:	f109 0904 	add.w	r9, r9, #4
 801a3aa:	4499      	add	r9, r3
 801a3ac:	7b23      	ldrb	r3, [r4, #12]
 801a3ae:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a3b2:	e76a      	b.n	801a28a <uxr_prepare_output_stream_fragmented+0x66>
 801a3b4:	0801a0b1 	.word	0x0801a0b1

0801a3b8 <uxr_serialize_message_header>:
 801a3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3ba:	4616      	mov	r6, r2
 801a3bc:	b083      	sub	sp, #12
 801a3be:	4604      	mov	r4, r0
 801a3c0:	460d      	mov	r5, r1
 801a3c2:	9301      	str	r3, [sp, #4]
 801a3c4:	9f08      	ldr	r7, [sp, #32]
 801a3c6:	f7f7 fdb7 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a3ca:	4631      	mov	r1, r6
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	f7f7 fdb3 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a3d2:	9a01      	ldr	r2, [sp, #4]
 801a3d4:	2101      	movs	r1, #1
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	f7f7 fe5a 	bl	8012090 <ucdr_serialize_endian_uint16_t>
 801a3dc:	062b      	lsls	r3, r5, #24
 801a3de:	d501      	bpl.n	801a3e4 <uxr_serialize_message_header+0x2c>
 801a3e0:	b003      	add	sp, #12
 801a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3e4:	2204      	movs	r2, #4
 801a3e6:	4639      	mov	r1, r7
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	b003      	add	sp, #12
 801a3ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a3f0:	f7fd ba6e 	b.w	80178d0 <ucdr_serialize_array_uint8_t>

0801a3f4 <uxr_deserialize_message_header>:
 801a3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3f6:	4616      	mov	r6, r2
 801a3f8:	b083      	sub	sp, #12
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	460d      	mov	r5, r1
 801a3fe:	9301      	str	r3, [sp, #4]
 801a400:	9f08      	ldr	r7, [sp, #32]
 801a402:	f7f7 fdaf 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801a406:	4631      	mov	r1, r6
 801a408:	4620      	mov	r0, r4
 801a40a:	f7f7 fdab 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801a40e:	9a01      	ldr	r2, [sp, #4]
 801a410:	2101      	movs	r1, #1
 801a412:	4620      	mov	r0, r4
 801a414:	f7f7 ff30 	bl	8012278 <ucdr_deserialize_endian_uint16_t>
 801a418:	f995 3000 	ldrsb.w	r3, [r5]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	da01      	bge.n	801a424 <uxr_deserialize_message_header+0x30>
 801a420:	b003      	add	sp, #12
 801a422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a424:	2204      	movs	r2, #4
 801a426:	4639      	mov	r1, r7
 801a428:	4620      	mov	r0, r4
 801a42a:	b003      	add	sp, #12
 801a42c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a430:	f7fd bab2 	b.w	8017998 <ucdr_deserialize_array_uint8_t>

0801a434 <uxr_serialize_submessage_header>:
 801a434:	b530      	push	{r4, r5, lr}
 801a436:	4615      	mov	r5, r2
 801a438:	b083      	sub	sp, #12
 801a43a:	4604      	mov	r4, r0
 801a43c:	9301      	str	r3, [sp, #4]
 801a43e:	f7f7 fd7b 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a442:	4629      	mov	r1, r5
 801a444:	4620      	mov	r0, r4
 801a446:	f7f7 fd77 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a44a:	9a01      	ldr	r2, [sp, #4]
 801a44c:	2101      	movs	r1, #1
 801a44e:	4620      	mov	r0, r4
 801a450:	b003      	add	sp, #12
 801a452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a456:	f7f7 be1b 	b.w	8012090 <ucdr_serialize_endian_uint16_t>
 801a45a:	bf00      	nop

0801a45c <uxr_deserialize_submessage_header>:
 801a45c:	b530      	push	{r4, r5, lr}
 801a45e:	4615      	mov	r5, r2
 801a460:	b083      	sub	sp, #12
 801a462:	4604      	mov	r4, r0
 801a464:	9301      	str	r3, [sp, #4]
 801a466:	f7f7 fd7d 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801a46a:	4629      	mov	r1, r5
 801a46c:	4620      	mov	r0, r4
 801a46e:	f7f7 fd79 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801a472:	9a01      	ldr	r2, [sp, #4]
 801a474:	2101      	movs	r1, #1
 801a476:	4620      	mov	r0, r4
 801a478:	b003      	add	sp, #12
 801a47a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a47e:	f7f7 befb 	b.w	8012278 <ucdr_deserialize_endian_uint16_t>
 801a482:	bf00      	nop

0801a484 <uxr_serialize_CLIENT_Representation>:
 801a484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a488:	2204      	movs	r2, #4
 801a48a:	460e      	mov	r6, r1
 801a48c:	4605      	mov	r5, r0
 801a48e:	f7fd fa1f 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a492:	4607      	mov	r7, r0
 801a494:	2202      	movs	r2, #2
 801a496:	1d31      	adds	r1, r6, #4
 801a498:	4628      	mov	r0, r5
 801a49a:	f7fd fa19 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a49e:	4038      	ands	r0, r7
 801a4a0:	2202      	movs	r2, #2
 801a4a2:	1db1      	adds	r1, r6, #6
 801a4a4:	b2c7      	uxtb	r7, r0
 801a4a6:	4628      	mov	r0, r5
 801a4a8:	f7fd fa12 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a4ac:	2204      	movs	r2, #4
 801a4ae:	4007      	ands	r7, r0
 801a4b0:	f106 0108 	add.w	r1, r6, #8
 801a4b4:	4628      	mov	r0, r5
 801a4b6:	f7fd fa0b 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a4ba:	4007      	ands	r7, r0
 801a4bc:	7b31      	ldrb	r1, [r6, #12]
 801a4be:	4628      	mov	r0, r5
 801a4c0:	f7f7 fd3a 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a4c4:	7b71      	ldrb	r1, [r6, #13]
 801a4c6:	4007      	ands	r7, r0
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	f7f7 fd07 	bl	8011edc <ucdr_serialize_bool>
 801a4ce:	7b73      	ldrb	r3, [r6, #13]
 801a4d0:	ea07 0800 	and.w	r8, r7, r0
 801a4d4:	b93b      	cbnz	r3, 801a4e6 <uxr_serialize_CLIENT_Representation+0x62>
 801a4d6:	8bb1      	ldrh	r1, [r6, #28]
 801a4d8:	4628      	mov	r0, r5
 801a4da:	f7f7 fd59 	bl	8011f90 <ucdr_serialize_uint16_t>
 801a4de:	ea08 0000 	and.w	r0, r8, r0
 801a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4e6:	6931      	ldr	r1, [r6, #16]
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	f7f7 ff3b 	bl	8012364 <ucdr_serialize_uint32_t>
 801a4ee:	6933      	ldr	r3, [r6, #16]
 801a4f0:	b1e3      	cbz	r3, 801a52c <uxr_serialize_CLIENT_Representation+0xa8>
 801a4f2:	b1c0      	cbz	r0, 801a526 <uxr_serialize_CLIENT_Representation+0xa2>
 801a4f4:	4637      	mov	r7, r6
 801a4f6:	f04f 0900 	mov.w	r9, #0
 801a4fa:	e000      	b.n	801a4fe <uxr_serialize_CLIENT_Representation+0x7a>
 801a4fc:	b19c      	cbz	r4, 801a526 <uxr_serialize_CLIENT_Representation+0xa2>
 801a4fe:	6979      	ldr	r1, [r7, #20]
 801a500:	4628      	mov	r0, r5
 801a502:	f004 f91d 	bl	801e740 <ucdr_serialize_string>
 801a506:	69b9      	ldr	r1, [r7, #24]
 801a508:	4604      	mov	r4, r0
 801a50a:	4628      	mov	r0, r5
 801a50c:	f004 f918 	bl	801e740 <ucdr_serialize_string>
 801a510:	f109 0901 	add.w	r9, r9, #1
 801a514:	6933      	ldr	r3, [r6, #16]
 801a516:	4004      	ands	r4, r0
 801a518:	3708      	adds	r7, #8
 801a51a:	4599      	cmp	r9, r3
 801a51c:	b2e4      	uxtb	r4, r4
 801a51e:	d3ed      	bcc.n	801a4fc <uxr_serialize_CLIENT_Representation+0x78>
 801a520:	ea08 0804 	and.w	r8, r8, r4
 801a524:	e7d7      	b.n	801a4d6 <uxr_serialize_CLIENT_Representation+0x52>
 801a526:	f04f 0800 	mov.w	r8, #0
 801a52a:	e7d4      	b.n	801a4d6 <uxr_serialize_CLIENT_Representation+0x52>
 801a52c:	ea08 0800 	and.w	r8, r8, r0
 801a530:	e7d1      	b.n	801a4d6 <uxr_serialize_CLIENT_Representation+0x52>
 801a532:	bf00      	nop

0801a534 <uxr_deserialize_CLIENT_Representation>:
 801a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a538:	2204      	movs	r2, #4
 801a53a:	460c      	mov	r4, r1
 801a53c:	4605      	mov	r5, r0
 801a53e:	f7fd fa2b 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801a542:	4607      	mov	r7, r0
 801a544:	2202      	movs	r2, #2
 801a546:	1d21      	adds	r1, r4, #4
 801a548:	4628      	mov	r0, r5
 801a54a:	f7fd fa25 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801a54e:	4038      	ands	r0, r7
 801a550:	2202      	movs	r2, #2
 801a552:	1da1      	adds	r1, r4, #6
 801a554:	b2c6      	uxtb	r6, r0
 801a556:	4628      	mov	r0, r5
 801a558:	f7fd fa1e 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801a55c:	2204      	movs	r2, #4
 801a55e:	4006      	ands	r6, r0
 801a560:	f104 0108 	add.w	r1, r4, #8
 801a564:	4628      	mov	r0, r5
 801a566:	f7fd fa17 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801a56a:	4006      	ands	r6, r0
 801a56c:	f104 010c 	add.w	r1, r4, #12
 801a570:	4628      	mov	r0, r5
 801a572:	f7f7 fcf7 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801a576:	f104 010d 	add.w	r1, r4, #13
 801a57a:	ea06 0700 	and.w	r7, r6, r0
 801a57e:	4628      	mov	r0, r5
 801a580:	f7f7 fcc2 	bl	8011f08 <ucdr_deserialize_bool>
 801a584:	7b63      	ldrb	r3, [r4, #13]
 801a586:	4007      	ands	r7, r0
 801a588:	b93b      	cbnz	r3, 801a59a <uxr_deserialize_CLIENT_Representation+0x66>
 801a58a:	f104 011c 	add.w	r1, r4, #28
 801a58e:	4628      	mov	r0, r5
 801a590:	f7f7 fdfe 	bl	8012190 <ucdr_deserialize_uint16_t>
 801a594:	4038      	ands	r0, r7
 801a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a59a:	f104 0110 	add.w	r1, r4, #16
 801a59e:	4628      	mov	r0, r5
 801a5a0:	f7f8 f810 	bl	80125c4 <ucdr_deserialize_uint32_t>
 801a5a4:	6923      	ldr	r3, [r4, #16]
 801a5a6:	2b01      	cmp	r3, #1
 801a5a8:	d903      	bls.n	801a5b2 <uxr_deserialize_CLIENT_Representation+0x7e>
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	2700      	movs	r7, #0
 801a5ae:	75ab      	strb	r3, [r5, #22]
 801a5b0:	e7eb      	b.n	801a58a <uxr_deserialize_CLIENT_Representation+0x56>
 801a5b2:	b30b      	cbz	r3, 801a5f8 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a5b4:	b1f0      	cbz	r0, 801a5f4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a5b6:	46a0      	mov	r8, r4
 801a5b8:	f04f 0900 	mov.w	r9, #0
 801a5bc:	e000      	b.n	801a5c0 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a5be:	b1ce      	cbz	r6, 801a5f4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a5c0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a5c4:	f108 0808 	add.w	r8, r8, #8
 801a5c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a5cc:	4628      	mov	r0, r5
 801a5ce:	f004 f8c7 	bl	801e760 <ucdr_deserialize_string>
 801a5d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a5d6:	4606      	mov	r6, r0
 801a5d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a5dc:	4628      	mov	r0, r5
 801a5de:	f109 0901 	add.w	r9, r9, #1
 801a5e2:	f004 f8bd 	bl	801e760 <ucdr_deserialize_string>
 801a5e6:	6923      	ldr	r3, [r4, #16]
 801a5e8:	4006      	ands	r6, r0
 801a5ea:	4599      	cmp	r9, r3
 801a5ec:	b2f6      	uxtb	r6, r6
 801a5ee:	d3e6      	bcc.n	801a5be <uxr_deserialize_CLIENT_Representation+0x8a>
 801a5f0:	4037      	ands	r7, r6
 801a5f2:	e7ca      	b.n	801a58a <uxr_deserialize_CLIENT_Representation+0x56>
 801a5f4:	2700      	movs	r7, #0
 801a5f6:	e7c8      	b.n	801a58a <uxr_deserialize_CLIENT_Representation+0x56>
 801a5f8:	4007      	ands	r7, r0
 801a5fa:	e7c6      	b.n	801a58a <uxr_deserialize_CLIENT_Representation+0x56>

0801a5fc <uxr_serialize_AGENT_Representation>:
 801a5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a600:	2204      	movs	r2, #4
 801a602:	460f      	mov	r7, r1
 801a604:	4605      	mov	r5, r0
 801a606:	f7fd f963 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a60a:	4604      	mov	r4, r0
 801a60c:	2202      	movs	r2, #2
 801a60e:	1d39      	adds	r1, r7, #4
 801a610:	4628      	mov	r0, r5
 801a612:	f7fd f95d 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a616:	4020      	ands	r0, r4
 801a618:	2202      	movs	r2, #2
 801a61a:	1db9      	adds	r1, r7, #6
 801a61c:	b2c4      	uxtb	r4, r0
 801a61e:	4628      	mov	r0, r5
 801a620:	f7fd f956 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a624:	7a39      	ldrb	r1, [r7, #8]
 801a626:	4004      	ands	r4, r0
 801a628:	4628      	mov	r0, r5
 801a62a:	f7f7 fc57 	bl	8011edc <ucdr_serialize_bool>
 801a62e:	7a3b      	ldrb	r3, [r7, #8]
 801a630:	ea00 0804 	and.w	r8, r0, r4
 801a634:	b913      	cbnz	r3, 801a63c <uxr_serialize_AGENT_Representation+0x40>
 801a636:	4640      	mov	r0, r8
 801a638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a63c:	68f9      	ldr	r1, [r7, #12]
 801a63e:	4628      	mov	r0, r5
 801a640:	f7f7 fe90 	bl	8012364 <ucdr_serialize_uint32_t>
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	b303      	cbz	r3, 801a68a <uxr_serialize_AGENT_Representation+0x8e>
 801a648:	b1d0      	cbz	r0, 801a680 <uxr_serialize_AGENT_Representation+0x84>
 801a64a:	463e      	mov	r6, r7
 801a64c:	f04f 0900 	mov.w	r9, #0
 801a650:	e000      	b.n	801a654 <uxr_serialize_AGENT_Representation+0x58>
 801a652:	b1ac      	cbz	r4, 801a680 <uxr_serialize_AGENT_Representation+0x84>
 801a654:	6931      	ldr	r1, [r6, #16]
 801a656:	4628      	mov	r0, r5
 801a658:	f004 f872 	bl	801e740 <ucdr_serialize_string>
 801a65c:	6971      	ldr	r1, [r6, #20]
 801a65e:	4604      	mov	r4, r0
 801a660:	4628      	mov	r0, r5
 801a662:	f004 f86d 	bl	801e740 <ucdr_serialize_string>
 801a666:	f109 0901 	add.w	r9, r9, #1
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	4004      	ands	r4, r0
 801a66e:	3608      	adds	r6, #8
 801a670:	4599      	cmp	r9, r3
 801a672:	b2e4      	uxtb	r4, r4
 801a674:	d3ed      	bcc.n	801a652 <uxr_serialize_AGENT_Representation+0x56>
 801a676:	ea08 0804 	and.w	r8, r8, r4
 801a67a:	4640      	mov	r0, r8
 801a67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a680:	f04f 0800 	mov.w	r8, #0
 801a684:	4640      	mov	r0, r8
 801a686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a68a:	ea08 0800 	and.w	r8, r8, r0
 801a68e:	e7d2      	b.n	801a636 <uxr_serialize_AGENT_Representation+0x3a>

0801a690 <uxr_serialize_DATAWRITER_Representation>:
 801a690:	b570      	push	{r4, r5, r6, lr}
 801a692:	460d      	mov	r5, r1
 801a694:	7809      	ldrb	r1, [r1, #0]
 801a696:	4606      	mov	r6, r0
 801a698:	f7f7 fc4e 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a69c:	4604      	mov	r4, r0
 801a69e:	b130      	cbz	r0, 801a6ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a6a0:	782b      	ldrb	r3, [r5, #0]
 801a6a2:	2b02      	cmp	r3, #2
 801a6a4:	d00c      	beq.n	801a6c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a6a6:	2b03      	cmp	r3, #3
 801a6a8:	d010      	beq.n	801a6cc <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a6aa:	2b01      	cmp	r3, #1
 801a6ac:	d008      	beq.n	801a6c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a6ae:	2202      	movs	r2, #2
 801a6b0:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a6b4:	4630      	mov	r0, r6
 801a6b6:	f7fd f90b 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a6ba:	4020      	ands	r0, r4
 801a6bc:	b2c0      	uxtb	r0, r0
 801a6be:	bd70      	pop	{r4, r5, r6, pc}
 801a6c0:	6869      	ldr	r1, [r5, #4]
 801a6c2:	4630      	mov	r0, r6
 801a6c4:	f004 f83c 	bl	801e740 <ucdr_serialize_string>
 801a6c8:	4604      	mov	r4, r0
 801a6ca:	e7f0      	b.n	801a6ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a6cc:	4629      	mov	r1, r5
 801a6ce:	4630      	mov	r0, r6
 801a6d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a6d4:	3104      	adds	r1, #4
 801a6d6:	f7f8 ffa7 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801a6da:	4604      	mov	r4, r0
 801a6dc:	e7e7      	b.n	801a6ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a6de:	bf00      	nop

0801a6e0 <uxr_serialize_ObjectVariant.part.0>:
 801a6e0:	b570      	push	{r4, r5, r6, lr}
 801a6e2:	780b      	ldrb	r3, [r1, #0]
 801a6e4:	460c      	mov	r4, r1
 801a6e6:	4605      	mov	r5, r0
 801a6e8:	3b01      	subs	r3, #1
 801a6ea:	2b0d      	cmp	r3, #13
 801a6ec:	d854      	bhi.n	801a798 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a6ee:	e8df f003 	tbb	[pc, r3]
 801a6f2:	0730      	.short	0x0730
 801a6f4:	07071b1b 	.word	0x07071b1b
 801a6f8:	0c530707 	.word	0x0c530707
 801a6fc:	494e0c0c 	.word	0x494e0c0c
 801a700:	3104      	adds	r1, #4
 801a702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a706:	f7ff bfc3 	b.w	801a690 <uxr_serialize_DATAWRITER_Representation>
 801a70a:	7909      	ldrb	r1, [r1, #4]
 801a70c:	f7f7 fc14 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a710:	b1e8      	cbz	r0, 801a74e <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a712:	7923      	ldrb	r3, [r4, #4]
 801a714:	2b01      	cmp	r3, #1
 801a716:	d001      	beq.n	801a71c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a718:	2b02      	cmp	r3, #2
 801a71a:	d13d      	bne.n	801a798 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a71c:	68a1      	ldr	r1, [r4, #8]
 801a71e:	4628      	mov	r0, r5
 801a720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a724:	f004 b80c 	b.w	801e740 <ucdr_serialize_string>
 801a728:	7909      	ldrb	r1, [r1, #4]
 801a72a:	f7f7 fc05 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a72e:	4606      	mov	r6, r0
 801a730:	b120      	cbz	r0, 801a73c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a732:	7923      	ldrb	r3, [r4, #4]
 801a734:	2b02      	cmp	r3, #2
 801a736:	d039      	beq.n	801a7ac <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a738:	2b03      	cmp	r3, #3
 801a73a:	d02f      	beq.n	801a79c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a73c:	2202      	movs	r2, #2
 801a73e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a742:	4628      	mov	r0, r5
 801a744:	f7fd f8c4 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801a748:	4030      	ands	r0, r6
 801a74a:	b2c0      	uxtb	r0, r0
 801a74c:	bd70      	pop	{r4, r5, r6, pc}
 801a74e:	2000      	movs	r0, #0
 801a750:	bd70      	pop	{r4, r5, r6, pc}
 801a752:	7909      	ldrb	r1, [r1, #4]
 801a754:	f7f7 fbf0 	bl	8011f38 <ucdr_serialize_uint8_t>
 801a758:	4606      	mov	r6, r0
 801a75a:	b158      	cbz	r0, 801a774 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a75c:	7923      	ldrb	r3, [r4, #4]
 801a75e:	2b02      	cmp	r3, #2
 801a760:	d003      	beq.n	801a76a <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a762:	2b03      	cmp	r3, #3
 801a764:	d028      	beq.n	801a7b8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a766:	2b01      	cmp	r3, #1
 801a768:	d104      	bne.n	801a774 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a76a:	68a1      	ldr	r1, [r4, #8]
 801a76c:	4628      	mov	r0, r5
 801a76e:	f003 ffe7 	bl	801e740 <ucdr_serialize_string>
 801a772:	4606      	mov	r6, r0
 801a774:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a778:	4628      	mov	r0, r5
 801a77a:	f7f8 f919 	bl	80129b0 <ucdr_serialize_int16_t>
 801a77e:	4030      	ands	r0, r6
 801a780:	b2c0      	uxtb	r0, r0
 801a782:	bd70      	pop	{r4, r5, r6, pc}
 801a784:	3104      	adds	r1, #4
 801a786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a78a:	f7ff be7b 	b.w	801a484 <uxr_serialize_CLIENT_Representation>
 801a78e:	3104      	adds	r1, #4
 801a790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a794:	f7ff bf32 	b.w	801a5fc <uxr_serialize_AGENT_Representation>
 801a798:	2001      	movs	r0, #1
 801a79a:	bd70      	pop	{r4, r5, r6, pc}
 801a79c:	68a2      	ldr	r2, [r4, #8]
 801a79e:	f104 010c 	add.w	r1, r4, #12
 801a7a2:	4628      	mov	r0, r5
 801a7a4:	f7f8 ff40 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801a7a8:	4606      	mov	r6, r0
 801a7aa:	e7c7      	b.n	801a73c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a7ac:	68a1      	ldr	r1, [r4, #8]
 801a7ae:	4628      	mov	r0, r5
 801a7b0:	f003 ffc6 	bl	801e740 <ucdr_serialize_string>
 801a7b4:	4606      	mov	r6, r0
 801a7b6:	e7c1      	b.n	801a73c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a7b8:	68a2      	ldr	r2, [r4, #8]
 801a7ba:	f104 010c 	add.w	r1, r4, #12
 801a7be:	4628      	mov	r0, r5
 801a7c0:	f7f8 ff32 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801a7c4:	4606      	mov	r6, r0
 801a7c6:	e7d5      	b.n	801a774 <uxr_serialize_ObjectVariant.part.0+0x94>

0801a7c8 <uxr_deserialize_DATAWRITER_Representation>:
 801a7c8:	b570      	push	{r4, r5, r6, lr}
 801a7ca:	4606      	mov	r6, r0
 801a7cc:	460d      	mov	r5, r1
 801a7ce:	f7f7 fbc9 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	b130      	cbz	r0, 801a7e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a7d6:	782b      	ldrb	r3, [r5, #0]
 801a7d8:	2b02      	cmp	r3, #2
 801a7da:	d00c      	beq.n	801a7f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a7dc:	2b03      	cmp	r3, #3
 801a7de:	d012      	beq.n	801a806 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a7e0:	2b01      	cmp	r3, #1
 801a7e2:	d008      	beq.n	801a7f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a7e4:	2202      	movs	r2, #2
 801a7e6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a7ea:	4630      	mov	r0, r6
 801a7ec:	f7fd f8d4 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801a7f0:	4020      	ands	r0, r4
 801a7f2:	b2c0      	uxtb	r0, r0
 801a7f4:	bd70      	pop	{r4, r5, r6, pc}
 801a7f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a7fa:	6869      	ldr	r1, [r5, #4]
 801a7fc:	4630      	mov	r0, r6
 801a7fe:	f003 ffaf 	bl	801e760 <ucdr_deserialize_string>
 801a802:	4604      	mov	r4, r0
 801a804:	e7ee      	b.n	801a7e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a806:	1d2b      	adds	r3, r5, #4
 801a808:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a80c:	f105 0108 	add.w	r1, r5, #8
 801a810:	4630      	mov	r0, r6
 801a812:	f7f8 ff1b 	bl	801364c <ucdr_deserialize_sequence_uint8_t>
 801a816:	4604      	mov	r4, r0
 801a818:	e7e4      	b.n	801a7e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a81a:	bf00      	nop

0801a81c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	460d      	mov	r5, r1
 801a820:	7809      	ldrb	r1, [r1, #0]
 801a822:	4606      	mov	r6, r0
 801a824:	f7f7 fb5a 	bl	8011edc <ucdr_serialize_bool>
 801a828:	782b      	ldrb	r3, [r5, #0]
 801a82a:	4604      	mov	r4, r0
 801a82c:	b94b      	cbnz	r3, 801a842 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a82e:	7a29      	ldrb	r1, [r5, #8]
 801a830:	4630      	mov	r0, r6
 801a832:	f7f7 fb53 	bl	8011edc <ucdr_serialize_bool>
 801a836:	7a2b      	ldrb	r3, [r5, #8]
 801a838:	4004      	ands	r4, r0
 801a83a:	b2e4      	uxtb	r4, r4
 801a83c:	b943      	cbnz	r3, 801a850 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a83e:	4620      	mov	r0, r4
 801a840:	bd70      	pop	{r4, r5, r6, pc}
 801a842:	6869      	ldr	r1, [r5, #4]
 801a844:	4630      	mov	r0, r6
 801a846:	f003 ff7b 	bl	801e740 <ucdr_serialize_string>
 801a84a:	4004      	ands	r4, r0
 801a84c:	b2e4      	uxtb	r4, r4
 801a84e:	e7ee      	b.n	801a82e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a850:	68e9      	ldr	r1, [r5, #12]
 801a852:	4630      	mov	r0, r6
 801a854:	f003 ff74 	bl	801e740 <ucdr_serialize_string>
 801a858:	4004      	ands	r4, r0
 801a85a:	4620      	mov	r0, r4
 801a85c:	bd70      	pop	{r4, r5, r6, pc}
 801a85e:	bf00      	nop

0801a860 <uxr_serialize_OBJK_Topic_Binary>:
 801a860:	b570      	push	{r4, r5, r6, lr}
 801a862:	460d      	mov	r5, r1
 801a864:	4606      	mov	r6, r0
 801a866:	6809      	ldr	r1, [r1, #0]
 801a868:	f003 ff6a 	bl	801e740 <ucdr_serialize_string>
 801a86c:	4604      	mov	r4, r0
 801a86e:	7929      	ldrb	r1, [r5, #4]
 801a870:	4630      	mov	r0, r6
 801a872:	f7f7 fb33 	bl	8011edc <ucdr_serialize_bool>
 801a876:	792b      	ldrb	r3, [r5, #4]
 801a878:	4004      	ands	r4, r0
 801a87a:	b2e4      	uxtb	r4, r4
 801a87c:	b943      	cbnz	r3, 801a890 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a87e:	7b29      	ldrb	r1, [r5, #12]
 801a880:	4630      	mov	r0, r6
 801a882:	f7f7 fb2b 	bl	8011edc <ucdr_serialize_bool>
 801a886:	7b2b      	ldrb	r3, [r5, #12]
 801a888:	4004      	ands	r4, r0
 801a88a:	b93b      	cbnz	r3, 801a89c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a88c:	4620      	mov	r0, r4
 801a88e:	bd70      	pop	{r4, r5, r6, pc}
 801a890:	68a9      	ldr	r1, [r5, #8]
 801a892:	4630      	mov	r0, r6
 801a894:	f003 ff54 	bl	801e740 <ucdr_serialize_string>
 801a898:	4004      	ands	r4, r0
 801a89a:	e7f0      	b.n	801a87e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a89c:	6929      	ldr	r1, [r5, #16]
 801a89e:	4630      	mov	r0, r6
 801a8a0:	f003 ff4e 	bl	801e740 <ucdr_serialize_string>
 801a8a4:	4004      	ands	r4, r0
 801a8a6:	b2e4      	uxtb	r4, r4
 801a8a8:	4620      	mov	r0, r4
 801a8aa:	bd70      	pop	{r4, r5, r6, pc}

0801a8ac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8b0:	460c      	mov	r4, r1
 801a8b2:	7809      	ldrb	r1, [r1, #0]
 801a8b4:	4606      	mov	r6, r0
 801a8b6:	f7f7 fb11 	bl	8011edc <ucdr_serialize_bool>
 801a8ba:	7823      	ldrb	r3, [r4, #0]
 801a8bc:	4605      	mov	r5, r0
 801a8be:	b96b      	cbnz	r3, 801a8dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a8c0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	f7f7 fb09 	bl	8011edc <ucdr_serialize_bool>
 801a8ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a8ce:	4005      	ands	r5, r0
 801a8d0:	b2ed      	uxtb	r5, r5
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d169      	bne.n	801a9aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8dc:	6861      	ldr	r1, [r4, #4]
 801a8de:	4630      	mov	r0, r6
 801a8e0:	f7f7 fd40 	bl	8012364 <ucdr_serialize_uint32_t>
 801a8e4:	6863      	ldr	r3, [r4, #4]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d06b      	beq.n	801a9c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a8ea:	2800      	cmp	r0, #0
 801a8ec:	d067      	beq.n	801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a8ee:	68a1      	ldr	r1, [r4, #8]
 801a8f0:	4630      	mov	r0, r6
 801a8f2:	f003 ff25 	bl	801e740 <ucdr_serialize_string>
 801a8f6:	6863      	ldr	r3, [r4, #4]
 801a8f8:	2b01      	cmp	r3, #1
 801a8fa:	d953      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	d05e      	beq.n	801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a900:	68e1      	ldr	r1, [r4, #12]
 801a902:	4630      	mov	r0, r6
 801a904:	f003 ff1c 	bl	801e740 <ucdr_serialize_string>
 801a908:	6863      	ldr	r3, [r4, #4]
 801a90a:	2b02      	cmp	r3, #2
 801a90c:	d94a      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a90e:	2800      	cmp	r0, #0
 801a910:	d055      	beq.n	801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a912:	6921      	ldr	r1, [r4, #16]
 801a914:	4630      	mov	r0, r6
 801a916:	f003 ff13 	bl	801e740 <ucdr_serialize_string>
 801a91a:	6863      	ldr	r3, [r4, #4]
 801a91c:	2b03      	cmp	r3, #3
 801a91e:	d941      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a920:	2800      	cmp	r0, #0
 801a922:	d04c      	beq.n	801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a924:	6961      	ldr	r1, [r4, #20]
 801a926:	4630      	mov	r0, r6
 801a928:	f003 ff0a 	bl	801e740 <ucdr_serialize_string>
 801a92c:	6863      	ldr	r3, [r4, #4]
 801a92e:	2b04      	cmp	r3, #4
 801a930:	d938      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a932:	2800      	cmp	r0, #0
 801a934:	d043      	beq.n	801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a936:	69a1      	ldr	r1, [r4, #24]
 801a938:	4630      	mov	r0, r6
 801a93a:	f003 ff01 	bl	801e740 <ucdr_serialize_string>
 801a93e:	6863      	ldr	r3, [r4, #4]
 801a940:	2b05      	cmp	r3, #5
 801a942:	d92f      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a944:	2800      	cmp	r0, #0
 801a946:	d03a      	beq.n	801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a948:	69e1      	ldr	r1, [r4, #28]
 801a94a:	4630      	mov	r0, r6
 801a94c:	f003 fef8 	bl	801e740 <ucdr_serialize_string>
 801a950:	6863      	ldr	r3, [r4, #4]
 801a952:	2b06      	cmp	r3, #6
 801a954:	d926      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a956:	b390      	cbz	r0, 801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a958:	6a21      	ldr	r1, [r4, #32]
 801a95a:	4630      	mov	r0, r6
 801a95c:	f003 fef0 	bl	801e740 <ucdr_serialize_string>
 801a960:	6863      	ldr	r3, [r4, #4]
 801a962:	2b07      	cmp	r3, #7
 801a964:	d91e      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a966:	b350      	cbz	r0, 801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a968:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a96a:	4630      	mov	r0, r6
 801a96c:	f003 fee8 	bl	801e740 <ucdr_serialize_string>
 801a970:	6863      	ldr	r3, [r4, #4]
 801a972:	2b08      	cmp	r3, #8
 801a974:	d916      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a976:	b310      	cbz	r0, 801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a978:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a97a:	4630      	mov	r0, r6
 801a97c:	f003 fee0 	bl	801e740 <ucdr_serialize_string>
 801a980:	6863      	ldr	r3, [r4, #4]
 801a982:	2b09      	cmp	r3, #9
 801a984:	d90e      	bls.n	801a9a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a986:	b1d0      	cbz	r0, 801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a988:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a98c:	2709      	movs	r7, #9
 801a98e:	e000      	b.n	801a992 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a990:	b1a8      	cbz	r0, 801a9be <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a992:	f858 1b04 	ldr.w	r1, [r8], #4
 801a996:	4630      	mov	r0, r6
 801a998:	f003 fed2 	bl	801e740 <ucdr_serialize_string>
 801a99c:	3701      	adds	r7, #1
 801a99e:	6862      	ldr	r2, [r4, #4]
 801a9a0:	4297      	cmp	r7, r2
 801a9a2:	d3f5      	bcc.n	801a990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a9a4:	4005      	ands	r5, r0
 801a9a6:	b2ed      	uxtb	r5, r5
 801a9a8:	e78a      	b.n	801a8c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a9aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a9ac:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	f7f8 fe39 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801a9b6:	4005      	ands	r5, r0
 801a9b8:	4628      	mov	r0, r5
 801a9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9be:	2500      	movs	r5, #0
 801a9c0:	e77e      	b.n	801a8c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a9c2:	4028      	ands	r0, r5
 801a9c4:	b2c5      	uxtb	r5, r0
 801a9c6:	e77b      	b.n	801a8c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a9c8 <uxr_serialize_OBJK_Publisher_Binary>:
 801a9c8:	b570      	push	{r4, r5, r6, lr}
 801a9ca:	460d      	mov	r5, r1
 801a9cc:	7809      	ldrb	r1, [r1, #0]
 801a9ce:	4606      	mov	r6, r0
 801a9d0:	f7f7 fa84 	bl	8011edc <ucdr_serialize_bool>
 801a9d4:	782b      	ldrb	r3, [r5, #0]
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	b94b      	cbnz	r3, 801a9ee <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a9da:	7a29      	ldrb	r1, [r5, #8]
 801a9dc:	4630      	mov	r0, r6
 801a9de:	f7f7 fa7d 	bl	8011edc <ucdr_serialize_bool>
 801a9e2:	7a2b      	ldrb	r3, [r5, #8]
 801a9e4:	4004      	ands	r4, r0
 801a9e6:	b2e4      	uxtb	r4, r4
 801a9e8:	b943      	cbnz	r3, 801a9fc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	bd70      	pop	{r4, r5, r6, pc}
 801a9ee:	6869      	ldr	r1, [r5, #4]
 801a9f0:	4630      	mov	r0, r6
 801a9f2:	f003 fea5 	bl	801e740 <ucdr_serialize_string>
 801a9f6:	4004      	ands	r4, r0
 801a9f8:	b2e4      	uxtb	r4, r4
 801a9fa:	e7ee      	b.n	801a9da <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a9fc:	f105 010c 	add.w	r1, r5, #12
 801aa00:	4630      	mov	r0, r6
 801aa02:	f7ff ff53 	bl	801a8ac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801aa06:	4004      	ands	r4, r0
 801aa08:	4620      	mov	r0, r4
 801aa0a:	bd70      	pop	{r4, r5, r6, pc}

0801aa0c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa10:	460c      	mov	r4, r1
 801aa12:	7809      	ldrb	r1, [r1, #0]
 801aa14:	4606      	mov	r6, r0
 801aa16:	f7f7 fa61 	bl	8011edc <ucdr_serialize_bool>
 801aa1a:	7823      	ldrb	r3, [r4, #0]
 801aa1c:	4605      	mov	r5, r0
 801aa1e:	b96b      	cbnz	r3, 801aa3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801aa20:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801aa24:	4630      	mov	r0, r6
 801aa26:	f7f7 fa59 	bl	8011edc <ucdr_serialize_bool>
 801aa2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801aa2e:	4005      	ands	r5, r0
 801aa30:	b2ed      	uxtb	r5, r5
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d169      	bne.n	801ab0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801aa36:	4628      	mov	r0, r5
 801aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa3c:	6861      	ldr	r1, [r4, #4]
 801aa3e:	4630      	mov	r0, r6
 801aa40:	f7f7 fc90 	bl	8012364 <ucdr_serialize_uint32_t>
 801aa44:	6863      	ldr	r3, [r4, #4]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d06b      	beq.n	801ab22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801aa4a:	2800      	cmp	r0, #0
 801aa4c:	d067      	beq.n	801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aa4e:	68a1      	ldr	r1, [r4, #8]
 801aa50:	4630      	mov	r0, r6
 801aa52:	f003 fe75 	bl	801e740 <ucdr_serialize_string>
 801aa56:	6863      	ldr	r3, [r4, #4]
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d953      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	d05e      	beq.n	801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aa60:	68e1      	ldr	r1, [r4, #12]
 801aa62:	4630      	mov	r0, r6
 801aa64:	f003 fe6c 	bl	801e740 <ucdr_serialize_string>
 801aa68:	6863      	ldr	r3, [r4, #4]
 801aa6a:	2b02      	cmp	r3, #2
 801aa6c:	d94a      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	d055      	beq.n	801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aa72:	6921      	ldr	r1, [r4, #16]
 801aa74:	4630      	mov	r0, r6
 801aa76:	f003 fe63 	bl	801e740 <ucdr_serialize_string>
 801aa7a:	6863      	ldr	r3, [r4, #4]
 801aa7c:	2b03      	cmp	r3, #3
 801aa7e:	d941      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aa80:	2800      	cmp	r0, #0
 801aa82:	d04c      	beq.n	801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aa84:	6961      	ldr	r1, [r4, #20]
 801aa86:	4630      	mov	r0, r6
 801aa88:	f003 fe5a 	bl	801e740 <ucdr_serialize_string>
 801aa8c:	6863      	ldr	r3, [r4, #4]
 801aa8e:	2b04      	cmp	r3, #4
 801aa90:	d938      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aa92:	2800      	cmp	r0, #0
 801aa94:	d043      	beq.n	801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aa96:	69a1      	ldr	r1, [r4, #24]
 801aa98:	4630      	mov	r0, r6
 801aa9a:	f003 fe51 	bl	801e740 <ucdr_serialize_string>
 801aa9e:	6863      	ldr	r3, [r4, #4]
 801aaa0:	2b05      	cmp	r3, #5
 801aaa2:	d92f      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aaa4:	2800      	cmp	r0, #0
 801aaa6:	d03a      	beq.n	801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aaa8:	69e1      	ldr	r1, [r4, #28]
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f003 fe48 	bl	801e740 <ucdr_serialize_string>
 801aab0:	6863      	ldr	r3, [r4, #4]
 801aab2:	2b06      	cmp	r3, #6
 801aab4:	d926      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aab6:	b390      	cbz	r0, 801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aab8:	6a21      	ldr	r1, [r4, #32]
 801aaba:	4630      	mov	r0, r6
 801aabc:	f003 fe40 	bl	801e740 <ucdr_serialize_string>
 801aac0:	6863      	ldr	r3, [r4, #4]
 801aac2:	2b07      	cmp	r3, #7
 801aac4:	d91e      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aac6:	b350      	cbz	r0, 801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aaca:	4630      	mov	r0, r6
 801aacc:	f003 fe38 	bl	801e740 <ucdr_serialize_string>
 801aad0:	6863      	ldr	r3, [r4, #4]
 801aad2:	2b08      	cmp	r3, #8
 801aad4:	d916      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aad6:	b310      	cbz	r0, 801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aad8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aada:	4630      	mov	r0, r6
 801aadc:	f003 fe30 	bl	801e740 <ucdr_serialize_string>
 801aae0:	6863      	ldr	r3, [r4, #4]
 801aae2:	2b09      	cmp	r3, #9
 801aae4:	d90e      	bls.n	801ab04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801aae6:	b1d0      	cbz	r0, 801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aae8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801aaec:	2709      	movs	r7, #9
 801aaee:	e000      	b.n	801aaf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801aaf0:	b1a8      	cbz	r0, 801ab1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801aaf2:	f858 1b04 	ldr.w	r1, [r8], #4
 801aaf6:	4630      	mov	r0, r6
 801aaf8:	f003 fe22 	bl	801e740 <ucdr_serialize_string>
 801aafc:	3701      	adds	r7, #1
 801aafe:	6862      	ldr	r2, [r4, #4]
 801ab00:	4297      	cmp	r7, r2
 801ab02:	d3f5      	bcc.n	801aaf0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801ab04:	4005      	ands	r5, r0
 801ab06:	b2ed      	uxtb	r5, r5
 801ab08:	e78a      	b.n	801aa20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801ab0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ab0c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ab10:	4630      	mov	r0, r6
 801ab12:	f7f8 fd89 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801ab16:	4005      	ands	r5, r0
 801ab18:	4628      	mov	r0, r5
 801ab1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab1e:	2500      	movs	r5, #0
 801ab20:	e77e      	b.n	801aa20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801ab22:	4028      	ands	r0, r5
 801ab24:	b2c5      	uxtb	r5, r0
 801ab26:	e77b      	b.n	801aa20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801ab28 <uxr_serialize_OBJK_Subscriber_Binary>:
 801ab28:	b570      	push	{r4, r5, r6, lr}
 801ab2a:	460d      	mov	r5, r1
 801ab2c:	7809      	ldrb	r1, [r1, #0]
 801ab2e:	4606      	mov	r6, r0
 801ab30:	f7f7 f9d4 	bl	8011edc <ucdr_serialize_bool>
 801ab34:	782b      	ldrb	r3, [r5, #0]
 801ab36:	4604      	mov	r4, r0
 801ab38:	b94b      	cbnz	r3, 801ab4e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801ab3a:	7a29      	ldrb	r1, [r5, #8]
 801ab3c:	4630      	mov	r0, r6
 801ab3e:	f7f7 f9cd 	bl	8011edc <ucdr_serialize_bool>
 801ab42:	7a2b      	ldrb	r3, [r5, #8]
 801ab44:	4004      	ands	r4, r0
 801ab46:	b2e4      	uxtb	r4, r4
 801ab48:	b943      	cbnz	r3, 801ab5c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801ab4a:	4620      	mov	r0, r4
 801ab4c:	bd70      	pop	{r4, r5, r6, pc}
 801ab4e:	6869      	ldr	r1, [r5, #4]
 801ab50:	4630      	mov	r0, r6
 801ab52:	f003 fdf5 	bl	801e740 <ucdr_serialize_string>
 801ab56:	4004      	ands	r4, r0
 801ab58:	b2e4      	uxtb	r4, r4
 801ab5a:	e7ee      	b.n	801ab3a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801ab5c:	f105 010c 	add.w	r1, r5, #12
 801ab60:	4630      	mov	r0, r6
 801ab62:	f7ff ff53 	bl	801aa0c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801ab66:	4004      	ands	r4, r0
 801ab68:	4620      	mov	r0, r4
 801ab6a:	bd70      	pop	{r4, r5, r6, pc}

0801ab6c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801ab6c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801ab70:	4688      	mov	r8, r1
 801ab72:	4681      	mov	r9, r0
 801ab74:	8809      	ldrh	r1, [r1, #0]
 801ab76:	f7f7 fa0b 	bl	8011f90 <ucdr_serialize_uint16_t>
 801ab7a:	4606      	mov	r6, r0
 801ab7c:	f898 1002 	ldrb.w	r1, [r8, #2]
 801ab80:	4648      	mov	r0, r9
 801ab82:	f7f7 f9ab 	bl	8011edc <ucdr_serialize_bool>
 801ab86:	f898 3002 	ldrb.w	r3, [r8, #2]
 801ab8a:	4006      	ands	r6, r0
 801ab8c:	b2f5      	uxtb	r5, r6
 801ab8e:	b9eb      	cbnz	r3, 801abcc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801ab90:	f898 1006 	ldrb.w	r1, [r8, #6]
 801ab94:	4648      	mov	r0, r9
 801ab96:	f7f7 f9a1 	bl	8011edc <ucdr_serialize_bool>
 801ab9a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801ab9e:	4005      	ands	r5, r0
 801aba0:	bb7b      	cbnz	r3, 801ac02 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801aba2:	f898 100c 	ldrb.w	r1, [r8, #12]
 801aba6:	4648      	mov	r0, r9
 801aba8:	f7f7 f998 	bl	8011edc <ucdr_serialize_bool>
 801abac:	f898 300c 	ldrb.w	r3, [r8, #12]
 801abb0:	4005      	ands	r5, r0
 801abb2:	b9f3      	cbnz	r3, 801abf2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801abb4:	f898 1014 	ldrb.w	r1, [r8, #20]
 801abb8:	4648      	mov	r0, r9
 801abba:	f7f7 f98f 	bl	8011edc <ucdr_serialize_bool>
 801abbe:	f898 3014 	ldrb.w	r3, [r8, #20]
 801abc2:	4005      	ands	r5, r0
 801abc4:	b94b      	cbnz	r3, 801abda <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801abc6:	4628      	mov	r0, r5
 801abc8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801abcc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801abd0:	4648      	mov	r0, r9
 801abd2:	f7f7 f9dd 	bl	8011f90 <ucdr_serialize_uint16_t>
 801abd6:	4005      	ands	r5, r0
 801abd8:	e7da      	b.n	801ab90 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801abda:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801abde:	f108 011c 	add.w	r1, r8, #28
 801abe2:	4648      	mov	r0, r9
 801abe4:	f7f8 fd20 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801abe8:	4028      	ands	r0, r5
 801abea:	b2c5      	uxtb	r5, r0
 801abec:	4628      	mov	r0, r5
 801abee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801abf2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801abf6:	4648      	mov	r0, r9
 801abf8:	f7f7 fbb4 	bl	8012364 <ucdr_serialize_uint32_t>
 801abfc:	4028      	ands	r0, r5
 801abfe:	b2c5      	uxtb	r5, r0
 801ac00:	e7d8      	b.n	801abb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801ac02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ac06:	4648      	mov	r0, r9
 801ac08:	f7f7 fbac 	bl	8012364 <ucdr_serialize_uint32_t>
 801ac0c:	4028      	ands	r0, r5
 801ac0e:	b2c5      	uxtb	r5, r0
 801ac10:	e7c7      	b.n	801aba2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801ac12:	bf00      	nop

0801ac14 <uxr_serialize_OBJK_DataReader_Binary>:
 801ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac16:	2202      	movs	r2, #2
 801ac18:	460c      	mov	r4, r1
 801ac1a:	4606      	mov	r6, r0
 801ac1c:	f7fc fe58 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801ac20:	4605      	mov	r5, r0
 801ac22:	78a1      	ldrb	r1, [r4, #2]
 801ac24:	4630      	mov	r0, r6
 801ac26:	f7f7 f959 	bl	8011edc <ucdr_serialize_bool>
 801ac2a:	78a3      	ldrb	r3, [r4, #2]
 801ac2c:	4005      	ands	r5, r0
 801ac2e:	b2ed      	uxtb	r5, r5
 801ac30:	b90b      	cbnz	r3, 801ac36 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801ac32:	4628      	mov	r0, r5
 801ac34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac36:	f104 0108 	add.w	r1, r4, #8
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	f7ff ff96 	bl	801ab6c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801ac40:	4607      	mov	r7, r0
 801ac42:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ac46:	4630      	mov	r0, r6
 801ac48:	f7f7 f948 	bl	8011edc <ucdr_serialize_bool>
 801ac4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ac50:	4038      	ands	r0, r7
 801ac52:	b2c7      	uxtb	r7, r0
 801ac54:	b95b      	cbnz	r3, 801ac6e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801ac56:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	f7f7 f93e 	bl	8011edc <ucdr_serialize_bool>
 801ac60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ac64:	4007      	ands	r7, r0
 801ac66:	b94b      	cbnz	r3, 801ac7c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801ac68:	403d      	ands	r5, r7
 801ac6a:	4628      	mov	r0, r5
 801ac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac6e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801ac72:	4630      	mov	r0, r6
 801ac74:	f7f7 fdcc 	bl	8012810 <ucdr_serialize_uint64_t>
 801ac78:	4007      	ands	r7, r0
 801ac7a:	e7ec      	b.n	801ac56 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801ac7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ac7e:	4630      	mov	r0, r6
 801ac80:	f003 fd5e 	bl	801e740 <ucdr_serialize_string>
 801ac84:	4007      	ands	r7, r0
 801ac86:	b2ff      	uxtb	r7, r7
 801ac88:	e7ee      	b.n	801ac68 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801ac8a:	bf00      	nop

0801ac8c <uxr_serialize_OBJK_DataWriter_Binary>:
 801ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac8e:	2202      	movs	r2, #2
 801ac90:	460d      	mov	r5, r1
 801ac92:	4606      	mov	r6, r0
 801ac94:	f7fc fe1c 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801ac98:	4604      	mov	r4, r0
 801ac9a:	78a9      	ldrb	r1, [r5, #2]
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f7f7 f91d 	bl	8011edc <ucdr_serialize_bool>
 801aca2:	78ab      	ldrb	r3, [r5, #2]
 801aca4:	4004      	ands	r4, r0
 801aca6:	b2e4      	uxtb	r4, r4
 801aca8:	b90b      	cbnz	r3, 801acae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801acaa:	4620      	mov	r0, r4
 801acac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acae:	f105 0108 	add.w	r1, r5, #8
 801acb2:	4630      	mov	r0, r6
 801acb4:	f7ff ff5a 	bl	801ab6c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801acb8:	4607      	mov	r7, r0
 801acba:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801acbe:	4630      	mov	r0, r6
 801acc0:	f7f7 f90c 	bl	8011edc <ucdr_serialize_bool>
 801acc4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801acc8:	4038      	ands	r0, r7
 801acca:	b2c7      	uxtb	r7, r0
 801accc:	b913      	cbnz	r3, 801acd4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801acce:	403c      	ands	r4, r7
 801acd0:	4620      	mov	r0, r4
 801acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acd4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801acd8:	4630      	mov	r0, r6
 801acda:	f7f7 fd99 	bl	8012810 <ucdr_serialize_uint64_t>
 801acde:	4007      	ands	r7, r0
 801ace0:	e7f5      	b.n	801acce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801ace2:	bf00      	nop

0801ace4 <uxr_serialize_OBJK_Replier_Binary>:
 801ace4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801ace8:	460f      	mov	r7, r1
 801acea:	4680      	mov	r8, r0
 801acec:	6809      	ldr	r1, [r1, #0]
 801acee:	f003 fd27 	bl	801e740 <ucdr_serialize_string>
 801acf2:	4605      	mov	r5, r0
 801acf4:	6879      	ldr	r1, [r7, #4]
 801acf6:	4640      	mov	r0, r8
 801acf8:	f003 fd22 	bl	801e740 <ucdr_serialize_string>
 801acfc:	4005      	ands	r5, r0
 801acfe:	68b9      	ldr	r1, [r7, #8]
 801ad00:	4640      	mov	r0, r8
 801ad02:	b2ec      	uxtb	r4, r5
 801ad04:	f003 fd1c 	bl	801e740 <ucdr_serialize_string>
 801ad08:	7b39      	ldrb	r1, [r7, #12]
 801ad0a:	4004      	ands	r4, r0
 801ad0c:	4640      	mov	r0, r8
 801ad0e:	f7f7 f8e5 	bl	8011edc <ucdr_serialize_bool>
 801ad12:	7b3b      	ldrb	r3, [r7, #12]
 801ad14:	4004      	ands	r4, r0
 801ad16:	b94b      	cbnz	r3, 801ad2c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801ad18:	7d39      	ldrb	r1, [r7, #20]
 801ad1a:	4640      	mov	r0, r8
 801ad1c:	f7f7 f8de 	bl	8011edc <ucdr_serialize_bool>
 801ad20:	7d3b      	ldrb	r3, [r7, #20]
 801ad22:	4004      	ands	r4, r0
 801ad24:	b943      	cbnz	r3, 801ad38 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801ad26:	4620      	mov	r0, r4
 801ad28:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801ad2c:	6939      	ldr	r1, [r7, #16]
 801ad2e:	4640      	mov	r0, r8
 801ad30:	f003 fd06 	bl	801e740 <ucdr_serialize_string>
 801ad34:	4004      	ands	r4, r0
 801ad36:	e7ef      	b.n	801ad18 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801ad38:	69b9      	ldr	r1, [r7, #24]
 801ad3a:	4640      	mov	r0, r8
 801ad3c:	f003 fd00 	bl	801e740 <ucdr_serialize_string>
 801ad40:	4004      	ands	r4, r0
 801ad42:	b2e4      	uxtb	r4, r4
 801ad44:	4620      	mov	r0, r4
 801ad46:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801ad4a:	bf00      	nop

0801ad4c <uxr_deserialize_ObjectVariant>:
 801ad4c:	b570      	push	{r4, r5, r6, lr}
 801ad4e:	4605      	mov	r5, r0
 801ad50:	460e      	mov	r6, r1
 801ad52:	f7f7 f907 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801ad56:	b168      	cbz	r0, 801ad74 <uxr_deserialize_ObjectVariant+0x28>
 801ad58:	7833      	ldrb	r3, [r6, #0]
 801ad5a:	4604      	mov	r4, r0
 801ad5c:	3b01      	subs	r3, #1
 801ad5e:	2b0d      	cmp	r3, #13
 801ad60:	d809      	bhi.n	801ad76 <uxr_deserialize_ObjectVariant+0x2a>
 801ad62:	e8df f003 	tbb	[pc, r3]
 801ad66:	0a41      	.short	0x0a41
 801ad68:	0a0a2323 	.word	0x0a0a2323
 801ad6c:	10080a0a 	.word	0x10080a0a
 801ad70:	565c1010 	.word	0x565c1010
 801ad74:	2400      	movs	r4, #0
 801ad76:	4620      	mov	r0, r4
 801ad78:	bd70      	pop	{r4, r5, r6, pc}
 801ad7a:	1d31      	adds	r1, r6, #4
 801ad7c:	4628      	mov	r0, r5
 801ad7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad82:	f7ff bd21 	b.w	801a7c8 <uxr_deserialize_DATAWRITER_Representation>
 801ad86:	1d31      	adds	r1, r6, #4
 801ad88:	4628      	mov	r0, r5
 801ad8a:	f7f7 f8eb 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801ad8e:	2800      	cmp	r0, #0
 801ad90:	d0f0      	beq.n	801ad74 <uxr_deserialize_ObjectVariant+0x28>
 801ad92:	7933      	ldrb	r3, [r6, #4]
 801ad94:	2b01      	cmp	r3, #1
 801ad96:	d001      	beq.n	801ad9c <uxr_deserialize_ObjectVariant+0x50>
 801ad98:	2b02      	cmp	r3, #2
 801ad9a:	d1ec      	bne.n	801ad76 <uxr_deserialize_ObjectVariant+0x2a>
 801ad9c:	68b1      	ldr	r1, [r6, #8]
 801ad9e:	4628      	mov	r0, r5
 801ada0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ada4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ada8:	f003 bcda 	b.w	801e760 <ucdr_deserialize_string>
 801adac:	1d31      	adds	r1, r6, #4
 801adae:	4628      	mov	r0, r5
 801adb0:	f7f7 f8d8 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801adb4:	4604      	mov	r4, r0
 801adb6:	b170      	cbz	r0, 801add6 <uxr_deserialize_ObjectVariant+0x8a>
 801adb8:	7933      	ldrb	r3, [r6, #4]
 801adba:	2b02      	cmp	r3, #2
 801adbc:	d04c      	beq.n	801ae58 <uxr_deserialize_ObjectVariant+0x10c>
 801adbe:	2b03      	cmp	r3, #3
 801adc0:	d109      	bne.n	801add6 <uxr_deserialize_ObjectVariant+0x8a>
 801adc2:	f106 0308 	add.w	r3, r6, #8
 801adc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801adca:	f106 010c 	add.w	r1, r6, #12
 801adce:	4628      	mov	r0, r5
 801add0:	f7f8 fc3c 	bl	801364c <ucdr_deserialize_sequence_uint8_t>
 801add4:	4604      	mov	r4, r0
 801add6:	2202      	movs	r2, #2
 801add8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801addc:	4628      	mov	r0, r5
 801adde:	f7fc fddb 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801ade2:	4020      	ands	r0, r4
 801ade4:	b2c4      	uxtb	r4, r0
 801ade6:	e7c6      	b.n	801ad76 <uxr_deserialize_ObjectVariant+0x2a>
 801ade8:	1d31      	adds	r1, r6, #4
 801adea:	4628      	mov	r0, r5
 801adec:	f7f7 f8ba 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801adf0:	4604      	mov	r4, r0
 801adf2:	b130      	cbz	r0, 801ae02 <uxr_deserialize_ObjectVariant+0xb6>
 801adf4:	7933      	ldrb	r3, [r6, #4]
 801adf6:	2b02      	cmp	r3, #2
 801adf8:	d036      	beq.n	801ae68 <uxr_deserialize_ObjectVariant+0x11c>
 801adfa:	2b03      	cmp	r3, #3
 801adfc:	d03c      	beq.n	801ae78 <uxr_deserialize_ObjectVariant+0x12c>
 801adfe:	2b01      	cmp	r3, #1
 801ae00:	d032      	beq.n	801ae68 <uxr_deserialize_ObjectVariant+0x11c>
 801ae02:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801ae06:	4628      	mov	r0, r5
 801ae08:	f7f7 fe52 	bl	8012ab0 <ucdr_deserialize_int16_t>
 801ae0c:	4020      	ands	r0, r4
 801ae0e:	b2c4      	uxtb	r4, r0
 801ae10:	e7b1      	b.n	801ad76 <uxr_deserialize_ObjectVariant+0x2a>
 801ae12:	1d31      	adds	r1, r6, #4
 801ae14:	4628      	mov	r0, r5
 801ae16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae1a:	f7ff bb8b 	b.w	801a534 <uxr_deserialize_CLIENT_Representation>
 801ae1e:	2204      	movs	r2, #4
 801ae20:	4628      	mov	r0, r5
 801ae22:	18b1      	adds	r1, r6, r2
 801ae24:	f7fc fdb8 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801ae28:	4604      	mov	r4, r0
 801ae2a:	2202      	movs	r2, #2
 801ae2c:	f106 0108 	add.w	r1, r6, #8
 801ae30:	4628      	mov	r0, r5
 801ae32:	f7fc fdb1 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801ae36:	4004      	ands	r4, r0
 801ae38:	2202      	movs	r2, #2
 801ae3a:	f106 010a 	add.w	r1, r6, #10
 801ae3e:	4628      	mov	r0, r5
 801ae40:	b2e4      	uxtb	r4, r4
 801ae42:	f7fc fda9 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801ae46:	4603      	mov	r3, r0
 801ae48:	f106 010c 	add.w	r1, r6, #12
 801ae4c:	4628      	mov	r0, r5
 801ae4e:	401c      	ands	r4, r3
 801ae50:	f7f7 f85a 	bl	8011f08 <ucdr_deserialize_bool>
 801ae54:	4004      	ands	r4, r0
 801ae56:	e78e      	b.n	801ad76 <uxr_deserialize_ObjectVariant+0x2a>
 801ae58:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae5c:	68b1      	ldr	r1, [r6, #8]
 801ae5e:	4628      	mov	r0, r5
 801ae60:	f003 fc7e 	bl	801e760 <ucdr_deserialize_string>
 801ae64:	4604      	mov	r4, r0
 801ae66:	e7b6      	b.n	801add6 <uxr_deserialize_ObjectVariant+0x8a>
 801ae68:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae6c:	68b1      	ldr	r1, [r6, #8]
 801ae6e:	4628      	mov	r0, r5
 801ae70:	f003 fc76 	bl	801e760 <ucdr_deserialize_string>
 801ae74:	4604      	mov	r4, r0
 801ae76:	e7c4      	b.n	801ae02 <uxr_deserialize_ObjectVariant+0xb6>
 801ae78:	f106 0308 	add.w	r3, r6, #8
 801ae7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae80:	f106 010c 	add.w	r1, r6, #12
 801ae84:	4628      	mov	r0, r5
 801ae86:	f7f8 fbe1 	bl	801364c <ucdr_deserialize_sequence_uint8_t>
 801ae8a:	4604      	mov	r4, r0
 801ae8c:	e7b9      	b.n	801ae02 <uxr_deserialize_ObjectVariant+0xb6>
 801ae8e:	bf00      	nop

0801ae90 <uxr_deserialize_BaseObjectRequest>:
 801ae90:	b570      	push	{r4, r5, r6, lr}
 801ae92:	2202      	movs	r2, #2
 801ae94:	4605      	mov	r5, r0
 801ae96:	460e      	mov	r6, r1
 801ae98:	f7fc fd7e 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801ae9c:	2202      	movs	r2, #2
 801ae9e:	4604      	mov	r4, r0
 801aea0:	4628      	mov	r0, r5
 801aea2:	18b1      	adds	r1, r6, r2
 801aea4:	f7fc fd78 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801aea8:	4020      	ands	r0, r4
 801aeaa:	b2c0      	uxtb	r0, r0
 801aeac:	bd70      	pop	{r4, r5, r6, pc}
 801aeae:	bf00      	nop

0801aeb0 <uxr_serialize_ActivityInfoVariant>:
 801aeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aeb4:	460e      	mov	r6, r1
 801aeb6:	7809      	ldrb	r1, [r1, #0]
 801aeb8:	4680      	mov	r8, r0
 801aeba:	f7f7 f83d 	bl	8011f38 <ucdr_serialize_uint8_t>
 801aebe:	4607      	mov	r7, r0
 801aec0:	b138      	cbz	r0, 801aed2 <uxr_serialize_ActivityInfoVariant+0x22>
 801aec2:	7833      	ldrb	r3, [r6, #0]
 801aec4:	2b06      	cmp	r3, #6
 801aec6:	f000 8081 	beq.w	801afcc <uxr_serialize_ActivityInfoVariant+0x11c>
 801aeca:	2b0d      	cmp	r3, #13
 801aecc:	d014      	beq.n	801aef8 <uxr_serialize_ActivityInfoVariant+0x48>
 801aece:	2b05      	cmp	r3, #5
 801aed0:	d002      	beq.n	801aed8 <uxr_serialize_ActivityInfoVariant+0x28>
 801aed2:	4638      	mov	r0, r7
 801aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aed8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aedc:	4640      	mov	r0, r8
 801aede:	f7f7 fd67 	bl	80129b0 <ucdr_serialize_int16_t>
 801aee2:	4607      	mov	r7, r0
 801aee4:	4640      	mov	r0, r8
 801aee6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801aeea:	f7f7 fc91 	bl	8012810 <ucdr_serialize_uint64_t>
 801aeee:	4038      	ands	r0, r7
 801aef0:	b2c7      	uxtb	r7, r0
 801aef2:	4638      	mov	r0, r7
 801aef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aef8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aefc:	4640      	mov	r0, r8
 801aefe:	f7f7 fd57 	bl	80129b0 <ucdr_serialize_int16_t>
 801af02:	68f1      	ldr	r1, [r6, #12]
 801af04:	4607      	mov	r7, r0
 801af06:	4640      	mov	r0, r8
 801af08:	f7f7 fa2c 	bl	8012364 <ucdr_serialize_uint32_t>
 801af0c:	68f3      	ldr	r3, [r6, #12]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d0ed      	beq.n	801aeee <uxr_serialize_ActivityInfoVariant+0x3e>
 801af12:	b318      	cbz	r0, 801af5c <uxr_serialize_ActivityInfoVariant+0xac>
 801af14:	f106 090c 	add.w	r9, r6, #12
 801af18:	2400      	movs	r4, #0
 801af1a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801af1e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801af22:	7c29      	ldrb	r1, [r5, #16]
 801af24:	4640      	mov	r0, r8
 801af26:	f7f7 f807 	bl	8011f38 <ucdr_serialize_uint8_t>
 801af2a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801af2e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801af32:	2800      	cmp	r0, #0
 801af34:	d051      	beq.n	801afda <uxr_serialize_ActivityInfoVariant+0x12a>
 801af36:	7c2b      	ldrb	r3, [r5, #16]
 801af38:	00c9      	lsls	r1, r1, #3
 801af3a:	2b03      	cmp	r3, #3
 801af3c:	d854      	bhi.n	801afe8 <uxr_serialize_ActivityInfoVariant+0x138>
 801af3e:	e8df f003 	tbb	[pc, r3]
 801af42:	2133      	.short	0x2133
 801af44:	020f      	.short	0x020f
 801af46:	4449      	add	r1, r9
 801af48:	4640      	mov	r0, r8
 801af4a:	6889      	ldr	r1, [r1, #8]
 801af4c:	f003 fbf8 	bl	801e740 <ucdr_serialize_string>
 801af50:	3401      	adds	r4, #1
 801af52:	68f2      	ldr	r2, [r6, #12]
 801af54:	4294      	cmp	r4, r2
 801af56:	d244      	bcs.n	801afe2 <uxr_serialize_ActivityInfoVariant+0x132>
 801af58:	2800      	cmp	r0, #0
 801af5a:	d1de      	bne.n	801af1a <uxr_serialize_ActivityInfoVariant+0x6a>
 801af5c:	2700      	movs	r7, #0
 801af5e:	e7b8      	b.n	801aed2 <uxr_serialize_ActivityInfoVariant+0x22>
 801af60:	3108      	adds	r1, #8
 801af62:	44a2      	add	sl, r4
 801af64:	2210      	movs	r2, #16
 801af66:	4640      	mov	r0, r8
 801af68:	4449      	add	r1, r9
 801af6a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801af6e:	f7fc fcaf 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801af72:	4605      	mov	r5, r0
 801af74:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801af78:	4640      	mov	r0, r8
 801af7a:	f7f7 f9f3 	bl	8012364 <ucdr_serialize_uint32_t>
 801af7e:	4028      	ands	r0, r5
 801af80:	b2c0      	uxtb	r0, r0
 801af82:	e7e5      	b.n	801af50 <uxr_serialize_ActivityInfoVariant+0xa0>
 801af84:	3108      	adds	r1, #8
 801af86:	44a2      	add	sl, r4
 801af88:	2204      	movs	r2, #4
 801af8a:	4640      	mov	r0, r8
 801af8c:	4449      	add	r1, r9
 801af8e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801af92:	f7fc fc9d 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801af96:	4605      	mov	r5, r0
 801af98:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801af9c:	4640      	mov	r0, r8
 801af9e:	f7f6 fff7 	bl	8011f90 <ucdr_serialize_uint16_t>
 801afa2:	4028      	ands	r0, r5
 801afa4:	b2c0      	uxtb	r0, r0
 801afa6:	e7d3      	b.n	801af50 <uxr_serialize_ActivityInfoVariant+0xa0>
 801afa8:	3108      	adds	r1, #8
 801afaa:	44a2      	add	sl, r4
 801afac:	2202      	movs	r2, #2
 801afae:	4640      	mov	r0, r8
 801afb0:	4449      	add	r1, r9
 801afb2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801afb6:	f7fc fc8b 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801afba:	4605      	mov	r5, r0
 801afbc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801afc0:	4640      	mov	r0, r8
 801afc2:	f7f6 ffb9 	bl	8011f38 <ucdr_serialize_uint8_t>
 801afc6:	4028      	ands	r0, r5
 801afc8:	b2c0      	uxtb	r0, r0
 801afca:	e7c1      	b.n	801af50 <uxr_serialize_ActivityInfoVariant+0xa0>
 801afcc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801afd0:	4640      	mov	r0, r8
 801afd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afd6:	f7f7 bceb 	b.w	80129b0 <ucdr_serialize_int16_t>
 801afda:	3401      	adds	r4, #1
 801afdc:	68f2      	ldr	r2, [r6, #12]
 801afde:	42a2      	cmp	r2, r4
 801afe0:	d8bc      	bhi.n	801af5c <uxr_serialize_ActivityInfoVariant+0xac>
 801afe2:	4007      	ands	r7, r0
 801afe4:	b2ff      	uxtb	r7, r7
 801afe6:	e774      	b.n	801aed2 <uxr_serialize_ActivityInfoVariant+0x22>
 801afe8:	3401      	adds	r4, #1
 801afea:	68f3      	ldr	r3, [r6, #12]
 801afec:	3518      	adds	r5, #24
 801afee:	429c      	cmp	r4, r3
 801aff0:	d397      	bcc.n	801af22 <uxr_serialize_ActivityInfoVariant+0x72>
 801aff2:	e76e      	b.n	801aed2 <uxr_serialize_ActivityInfoVariant+0x22>

0801aff4 <uxr_deserialize_BaseObjectReply>:
 801aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff8:	2202      	movs	r2, #2
 801affa:	4606      	mov	r6, r0
 801affc:	460f      	mov	r7, r1
 801affe:	f7fc fccb 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b002:	2202      	movs	r2, #2
 801b004:	4605      	mov	r5, r0
 801b006:	4630      	mov	r0, r6
 801b008:	18b9      	adds	r1, r7, r2
 801b00a:	f7fc fcc5 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b00e:	4680      	mov	r8, r0
 801b010:	1d39      	adds	r1, r7, #4
 801b012:	4630      	mov	r0, r6
 801b014:	f7f6 ffa6 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b018:	ea05 0508 	and.w	r5, r5, r8
 801b01c:	4604      	mov	r4, r0
 801b01e:	1d79      	adds	r1, r7, #5
 801b020:	4630      	mov	r0, r6
 801b022:	402c      	ands	r4, r5
 801b024:	f7f6 ff9e 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b028:	4020      	ands	r0, r4
 801b02a:	b2c0      	uxtb	r0, r0
 801b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b030 <uxr_serialize_ReadSpecification>:
 801b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b032:	460e      	mov	r6, r1
 801b034:	4607      	mov	r7, r0
 801b036:	7809      	ldrb	r1, [r1, #0]
 801b038:	f7f6 ff7e 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b03c:	4604      	mov	r4, r0
 801b03e:	7871      	ldrb	r1, [r6, #1]
 801b040:	4638      	mov	r0, r7
 801b042:	f7f6 ff79 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b046:	4004      	ands	r4, r0
 801b048:	78b1      	ldrb	r1, [r6, #2]
 801b04a:	4638      	mov	r0, r7
 801b04c:	f7f6 ff46 	bl	8011edc <ucdr_serialize_bool>
 801b050:	78b3      	ldrb	r3, [r6, #2]
 801b052:	b2e4      	uxtb	r4, r4
 801b054:	4004      	ands	r4, r0
 801b056:	b943      	cbnz	r3, 801b06a <uxr_serialize_ReadSpecification+0x3a>
 801b058:	7a31      	ldrb	r1, [r6, #8]
 801b05a:	4638      	mov	r0, r7
 801b05c:	f7f6 ff3e 	bl	8011edc <ucdr_serialize_bool>
 801b060:	7a33      	ldrb	r3, [r6, #8]
 801b062:	4004      	ands	r4, r0
 801b064:	b93b      	cbnz	r3, 801b076 <uxr_serialize_ReadSpecification+0x46>
 801b066:	4620      	mov	r0, r4
 801b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b06a:	6871      	ldr	r1, [r6, #4]
 801b06c:	4638      	mov	r0, r7
 801b06e:	f003 fb67 	bl	801e740 <ucdr_serialize_string>
 801b072:	4004      	ands	r4, r0
 801b074:	e7f0      	b.n	801b058 <uxr_serialize_ReadSpecification+0x28>
 801b076:	8971      	ldrh	r1, [r6, #10]
 801b078:	4638      	mov	r0, r7
 801b07a:	f7f6 ff89 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b07e:	4605      	mov	r5, r0
 801b080:	89b1      	ldrh	r1, [r6, #12]
 801b082:	4638      	mov	r0, r7
 801b084:	f7f6 ff84 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b088:	4005      	ands	r5, r0
 801b08a:	89f1      	ldrh	r1, [r6, #14]
 801b08c:	4638      	mov	r0, r7
 801b08e:	b2ed      	uxtb	r5, r5
 801b090:	f7f6 ff7e 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b094:	8a31      	ldrh	r1, [r6, #16]
 801b096:	4025      	ands	r5, r4
 801b098:	4604      	mov	r4, r0
 801b09a:	4638      	mov	r0, r7
 801b09c:	4025      	ands	r5, r4
 801b09e:	f7f6 ff77 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b0a2:	ea00 0405 	and.w	r4, r0, r5
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0aa:	bf00      	nop

0801b0ac <uxr_serialize_CREATE_CLIENT_Payload>:
 801b0ac:	f7ff b9ea 	b.w	801a484 <uxr_serialize_CLIENT_Representation>

0801b0b0 <uxr_serialize_CREATE_Payload>:
 801b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0b2:	2202      	movs	r2, #2
 801b0b4:	4607      	mov	r7, r0
 801b0b6:	460e      	mov	r6, r1
 801b0b8:	f7fc fc0a 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b0bc:	2202      	movs	r2, #2
 801b0be:	4605      	mov	r5, r0
 801b0c0:	4638      	mov	r0, r7
 801b0c2:	18b1      	adds	r1, r6, r2
 801b0c4:	f7fc fc04 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b0c8:	7931      	ldrb	r1, [r6, #4]
 801b0ca:	4604      	mov	r4, r0
 801b0cc:	4638      	mov	r0, r7
 801b0ce:	f7f6 ff33 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b0d2:	b170      	cbz	r0, 801b0f2 <uxr_serialize_CREATE_Payload+0x42>
 801b0d4:	7933      	ldrb	r3, [r6, #4]
 801b0d6:	402c      	ands	r4, r5
 801b0d8:	3b01      	subs	r3, #1
 801b0da:	b2e4      	uxtb	r4, r4
 801b0dc:	2b0d      	cmp	r3, #13
 801b0de:	d809      	bhi.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b0e0:	e8df f003 	tbb	[pc, r3]
 801b0e4:	23230a4c 	.word	0x23230a4c
 801b0e8:	0a0a0a0a 	.word	0x0a0a0a0a
 801b0ec:	12121208 	.word	0x12121208
 801b0f0:	3e45      	.short	0x3e45
 801b0f2:	2400      	movs	r4, #0
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0f8:	f106 0108 	add.w	r1, r6, #8
 801b0fc:	4638      	mov	r0, r7
 801b0fe:	f7ff fac7 	bl	801a690 <uxr_serialize_DATAWRITER_Representation>
 801b102:	4004      	ands	r4, r0
 801b104:	4620      	mov	r0, r4
 801b106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b108:	7a31      	ldrb	r1, [r6, #8]
 801b10a:	4638      	mov	r0, r7
 801b10c:	f7f6 ff14 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b110:	2800      	cmp	r0, #0
 801b112:	d0ee      	beq.n	801b0f2 <uxr_serialize_CREATE_Payload+0x42>
 801b114:	7a33      	ldrb	r3, [r6, #8]
 801b116:	2b01      	cmp	r3, #1
 801b118:	d001      	beq.n	801b11e <uxr_serialize_CREATE_Payload+0x6e>
 801b11a:	2b02      	cmp	r3, #2
 801b11c:	d1ea      	bne.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b11e:	68f1      	ldr	r1, [r6, #12]
 801b120:	4638      	mov	r0, r7
 801b122:	f003 fb0d 	bl	801e740 <ucdr_serialize_string>
 801b126:	4004      	ands	r4, r0
 801b128:	e7e4      	b.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b12a:	7a31      	ldrb	r1, [r6, #8]
 801b12c:	4638      	mov	r0, r7
 801b12e:	f7f6 ff03 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b132:	4605      	mov	r5, r0
 801b134:	b158      	cbz	r0, 801b14e <uxr_serialize_CREATE_Payload+0x9e>
 801b136:	7a33      	ldrb	r3, [r6, #8]
 801b138:	2b02      	cmp	r3, #2
 801b13a:	d034      	beq.n	801b1a6 <uxr_serialize_CREATE_Payload+0xf6>
 801b13c:	2b03      	cmp	r3, #3
 801b13e:	d106      	bne.n	801b14e <uxr_serialize_CREATE_Payload+0x9e>
 801b140:	68f2      	ldr	r2, [r6, #12]
 801b142:	f106 0110 	add.w	r1, r6, #16
 801b146:	4638      	mov	r0, r7
 801b148:	f7f8 fa6e 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801b14c:	4605      	mov	r5, r0
 801b14e:	2202      	movs	r2, #2
 801b150:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801b154:	4638      	mov	r0, r7
 801b156:	f7fc fbbb 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b15a:	4028      	ands	r0, r5
 801b15c:	4004      	ands	r4, r0
 801b15e:	e7c9      	b.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b160:	f106 0108 	add.w	r1, r6, #8
 801b164:	4638      	mov	r0, r7
 801b166:	f7ff f98d 	bl	801a484 <uxr_serialize_CLIENT_Representation>
 801b16a:	4004      	ands	r4, r0
 801b16c:	e7c2      	b.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b16e:	f106 0108 	add.w	r1, r6, #8
 801b172:	4638      	mov	r0, r7
 801b174:	f7ff fa42 	bl	801a5fc <uxr_serialize_AGENT_Representation>
 801b178:	4004      	ands	r4, r0
 801b17a:	e7bb      	b.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b17c:	7a31      	ldrb	r1, [r6, #8]
 801b17e:	4638      	mov	r0, r7
 801b180:	f7f6 feda 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b184:	4605      	mov	r5, r0
 801b186:	b130      	cbz	r0, 801b196 <uxr_serialize_CREATE_Payload+0xe6>
 801b188:	7a33      	ldrb	r3, [r6, #8]
 801b18a:	2b02      	cmp	r3, #2
 801b18c:	d011      	beq.n	801b1b2 <uxr_serialize_CREATE_Payload+0x102>
 801b18e:	2b03      	cmp	r3, #3
 801b190:	d015      	beq.n	801b1be <uxr_serialize_CREATE_Payload+0x10e>
 801b192:	2b01      	cmp	r3, #1
 801b194:	d00d      	beq.n	801b1b2 <uxr_serialize_CREATE_Payload+0x102>
 801b196:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801b19a:	4638      	mov	r0, r7
 801b19c:	f7f7 fc08 	bl	80129b0 <ucdr_serialize_int16_t>
 801b1a0:	4028      	ands	r0, r5
 801b1a2:	4004      	ands	r4, r0
 801b1a4:	e7a6      	b.n	801b0f4 <uxr_serialize_CREATE_Payload+0x44>
 801b1a6:	68f1      	ldr	r1, [r6, #12]
 801b1a8:	4638      	mov	r0, r7
 801b1aa:	f003 fac9 	bl	801e740 <ucdr_serialize_string>
 801b1ae:	4605      	mov	r5, r0
 801b1b0:	e7cd      	b.n	801b14e <uxr_serialize_CREATE_Payload+0x9e>
 801b1b2:	68f1      	ldr	r1, [r6, #12]
 801b1b4:	4638      	mov	r0, r7
 801b1b6:	f003 fac3 	bl	801e740 <ucdr_serialize_string>
 801b1ba:	4605      	mov	r5, r0
 801b1bc:	e7eb      	b.n	801b196 <uxr_serialize_CREATE_Payload+0xe6>
 801b1be:	68f2      	ldr	r2, [r6, #12]
 801b1c0:	f106 0110 	add.w	r1, r6, #16
 801b1c4:	4638      	mov	r0, r7
 801b1c6:	f7f8 fa2f 	bl	8013628 <ucdr_serialize_sequence_uint8_t>
 801b1ca:	4605      	mov	r5, r0
 801b1cc:	e7e3      	b.n	801b196 <uxr_serialize_CREATE_Payload+0xe6>
 801b1ce:	bf00      	nop

0801b1d0 <uxr_deserialize_GET_INFO_Payload>:
 801b1d0:	b570      	push	{r4, r5, r6, lr}
 801b1d2:	2202      	movs	r2, #2
 801b1d4:	4605      	mov	r5, r0
 801b1d6:	460e      	mov	r6, r1
 801b1d8:	f7fc fbde 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b1dc:	2202      	movs	r2, #2
 801b1de:	4604      	mov	r4, r0
 801b1e0:	4628      	mov	r0, r5
 801b1e2:	18b1      	adds	r1, r6, r2
 801b1e4:	f7fc fbd8 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	1d31      	adds	r1, r6, #4
 801b1ec:	4628      	mov	r0, r5
 801b1ee:	401c      	ands	r4, r3
 801b1f0:	f7f7 f9e8 	bl	80125c4 <ucdr_deserialize_uint32_t>
 801b1f4:	b2e4      	uxtb	r4, r4
 801b1f6:	4020      	ands	r0, r4
 801b1f8:	bd70      	pop	{r4, r5, r6, pc}
 801b1fa:	bf00      	nop

0801b1fc <uxr_serialize_DELETE_Payload>:
 801b1fc:	b570      	push	{r4, r5, r6, lr}
 801b1fe:	2202      	movs	r2, #2
 801b200:	4605      	mov	r5, r0
 801b202:	460e      	mov	r6, r1
 801b204:	f7fc fb64 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b208:	2202      	movs	r2, #2
 801b20a:	4604      	mov	r4, r0
 801b20c:	4628      	mov	r0, r5
 801b20e:	18b1      	adds	r1, r6, r2
 801b210:	f7fc fb5e 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b214:	4020      	ands	r0, r4
 801b216:	b2c0      	uxtb	r0, r0
 801b218:	bd70      	pop	{r4, r5, r6, pc}
 801b21a:	bf00      	nop

0801b21c <uxr_deserialize_STATUS_AGENT_Payload>:
 801b21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b220:	460e      	mov	r6, r1
 801b222:	4605      	mov	r5, r0
 801b224:	f7f6 fe9e 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b228:	4604      	mov	r4, r0
 801b22a:	1c71      	adds	r1, r6, #1
 801b22c:	4628      	mov	r0, r5
 801b22e:	f7f6 fe99 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b232:	2204      	movs	r2, #4
 801b234:	4681      	mov	r9, r0
 801b236:	4628      	mov	r0, r5
 801b238:	18b1      	adds	r1, r6, r2
 801b23a:	f7fc fbad 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b23e:	f106 0108 	add.w	r1, r6, #8
 801b242:	4680      	mov	r8, r0
 801b244:	2202      	movs	r2, #2
 801b246:	4628      	mov	r0, r5
 801b248:	f7fc fba6 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b24c:	ea04 0309 	and.w	r3, r4, r9
 801b250:	4607      	mov	r7, r0
 801b252:	2202      	movs	r2, #2
 801b254:	b2db      	uxtb	r3, r3
 801b256:	f106 010a 	add.w	r1, r6, #10
 801b25a:	4628      	mov	r0, r5
 801b25c:	ea03 0408 	and.w	r4, r3, r8
 801b260:	f7fc fb9a 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b264:	4603      	mov	r3, r0
 801b266:	4628      	mov	r0, r5
 801b268:	403c      	ands	r4, r7
 801b26a:	f106 010c 	add.w	r1, r6, #12
 801b26e:	461d      	mov	r5, r3
 801b270:	f7f6 fe4a 	bl	8011f08 <ucdr_deserialize_bool>
 801b274:	4025      	ands	r5, r4
 801b276:	4028      	ands	r0, r5
 801b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b27c <uxr_deserialize_STATUS_Payload>:
 801b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b280:	2202      	movs	r2, #2
 801b282:	4606      	mov	r6, r0
 801b284:	460f      	mov	r7, r1
 801b286:	f7fc fb87 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b28a:	2202      	movs	r2, #2
 801b28c:	4605      	mov	r5, r0
 801b28e:	4630      	mov	r0, r6
 801b290:	18b9      	adds	r1, r7, r2
 801b292:	f7fc fb81 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b296:	4680      	mov	r8, r0
 801b298:	1d39      	adds	r1, r7, #4
 801b29a:	4630      	mov	r0, r6
 801b29c:	f7f6 fe62 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b2a0:	ea05 0508 	and.w	r5, r5, r8
 801b2a4:	4604      	mov	r4, r0
 801b2a6:	1d79      	adds	r1, r7, #5
 801b2a8:	4630      	mov	r0, r6
 801b2aa:	402c      	ands	r4, r5
 801b2ac:	f7f6 fe5a 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b2b0:	4020      	ands	r0, r4
 801b2b2:	b2c0      	uxtb	r0, r0
 801b2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b2b8 <uxr_serialize_INFO_Payload>:
 801b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2bc:	2202      	movs	r2, #2
 801b2be:	460c      	mov	r4, r1
 801b2c0:	4605      	mov	r5, r0
 801b2c2:	f7fc fb05 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b2c6:	2202      	movs	r2, #2
 801b2c8:	4680      	mov	r8, r0
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	18a1      	adds	r1, r4, r2
 801b2ce:	f7fc faff 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b2d2:	4607      	mov	r7, r0
 801b2d4:	7921      	ldrb	r1, [r4, #4]
 801b2d6:	4628      	mov	r0, r5
 801b2d8:	f7f6 fe2e 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b2dc:	ea08 0807 	and.w	r8, r8, r7
 801b2e0:	4606      	mov	r6, r0
 801b2e2:	7961      	ldrb	r1, [r4, #5]
 801b2e4:	4628      	mov	r0, r5
 801b2e6:	ea06 0608 	and.w	r6, r6, r8
 801b2ea:	f7f6 fe25 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b2ee:	7a21      	ldrb	r1, [r4, #8]
 801b2f0:	4030      	ands	r0, r6
 801b2f2:	b2c7      	uxtb	r7, r0
 801b2f4:	4628      	mov	r0, r5
 801b2f6:	f7f6 fdf1 	bl	8011edc <ucdr_serialize_bool>
 801b2fa:	7a23      	ldrb	r3, [r4, #8]
 801b2fc:	4606      	mov	r6, r0
 801b2fe:	b96b      	cbnz	r3, 801b31c <uxr_serialize_INFO_Payload+0x64>
 801b300:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b304:	4628      	mov	r0, r5
 801b306:	f7f6 fde9 	bl	8011edc <ucdr_serialize_bool>
 801b30a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b30e:	4030      	ands	r0, r6
 801b310:	b2c6      	uxtb	r6, r0
 801b312:	b983      	cbnz	r3, 801b336 <uxr_serialize_INFO_Payload+0x7e>
 801b314:	ea06 0007 	and.w	r0, r6, r7
 801b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b31c:	7b21      	ldrb	r1, [r4, #12]
 801b31e:	4628      	mov	r0, r5
 801b320:	f7f6 fe0a 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b324:	b188      	cbz	r0, 801b34a <uxr_serialize_INFO_Payload+0x92>
 801b326:	f104 010c 	add.w	r1, r4, #12
 801b32a:	4628      	mov	r0, r5
 801b32c:	f7ff f9d8 	bl	801a6e0 <uxr_serialize_ObjectVariant.part.0>
 801b330:	4030      	ands	r0, r6
 801b332:	b2c6      	uxtb	r6, r0
 801b334:	e7e4      	b.n	801b300 <uxr_serialize_INFO_Payload+0x48>
 801b336:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b33a:	4628      	mov	r0, r5
 801b33c:	f7ff fdb8 	bl	801aeb0 <uxr_serialize_ActivityInfoVariant>
 801b340:	4006      	ands	r6, r0
 801b342:	ea06 0007 	and.w	r0, r6, r7
 801b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b34a:	4606      	mov	r6, r0
 801b34c:	e7d8      	b.n	801b300 <uxr_serialize_INFO_Payload+0x48>
 801b34e:	bf00      	nop

0801b350 <uxr_serialize_READ_DATA_Payload>:
 801b350:	b570      	push	{r4, r5, r6, lr}
 801b352:	2202      	movs	r2, #2
 801b354:	4605      	mov	r5, r0
 801b356:	460e      	mov	r6, r1
 801b358:	f7fc faba 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b35c:	2202      	movs	r2, #2
 801b35e:	4604      	mov	r4, r0
 801b360:	4628      	mov	r0, r5
 801b362:	18b1      	adds	r1, r6, r2
 801b364:	f7fc fab4 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b368:	4603      	mov	r3, r0
 801b36a:	1d31      	adds	r1, r6, #4
 801b36c:	4628      	mov	r0, r5
 801b36e:	401c      	ands	r4, r3
 801b370:	f7ff fe5e 	bl	801b030 <uxr_serialize_ReadSpecification>
 801b374:	b2e4      	uxtb	r4, r4
 801b376:	4020      	ands	r0, r4
 801b378:	bd70      	pop	{r4, r5, r6, pc}
 801b37a:	bf00      	nop

0801b37c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b37c:	b570      	push	{r4, r5, r6, lr}
 801b37e:	2202      	movs	r2, #2
 801b380:	4605      	mov	r5, r0
 801b382:	460e      	mov	r6, r1
 801b384:	f7fc faa4 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b388:	2202      	movs	r2, #2
 801b38a:	4604      	mov	r4, r0
 801b38c:	4628      	mov	r0, r5
 801b38e:	18b1      	adds	r1, r6, r2
 801b390:	f7fc fa9e 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b394:	4020      	ands	r0, r4
 801b396:	b2c0      	uxtb	r0, r0
 801b398:	bd70      	pop	{r4, r5, r6, pc}
 801b39a:	bf00      	nop

0801b39c <uxr_serialize_ACKNACK_Payload>:
 801b39c:	b570      	push	{r4, r5, r6, lr}
 801b39e:	460c      	mov	r4, r1
 801b3a0:	4605      	mov	r5, r0
 801b3a2:	460e      	mov	r6, r1
 801b3a4:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b3a8:	f7f6 fdf2 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b3ac:	2202      	movs	r2, #2
 801b3ae:	4621      	mov	r1, r4
 801b3b0:	4604      	mov	r4, r0
 801b3b2:	4628      	mov	r0, r5
 801b3b4:	f7fc fa8c 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	7931      	ldrb	r1, [r6, #4]
 801b3bc:	4628      	mov	r0, r5
 801b3be:	401c      	ands	r4, r3
 801b3c0:	f7f6 fdba 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b3c4:	b2e4      	uxtb	r4, r4
 801b3c6:	4020      	ands	r0, r4
 801b3c8:	bd70      	pop	{r4, r5, r6, pc}
 801b3ca:	bf00      	nop

0801b3cc <uxr_deserialize_ACKNACK_Payload>:
 801b3cc:	b570      	push	{r4, r5, r6, lr}
 801b3ce:	460e      	mov	r6, r1
 801b3d0:	4605      	mov	r5, r0
 801b3d2:	f7f6 fedd 	bl	8012190 <ucdr_deserialize_uint16_t>
 801b3d6:	2202      	movs	r2, #2
 801b3d8:	4604      	mov	r4, r0
 801b3da:	4628      	mov	r0, r5
 801b3dc:	18b1      	adds	r1, r6, r2
 801b3de:	f7fc fadb 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	1d31      	adds	r1, r6, #4
 801b3e6:	4628      	mov	r0, r5
 801b3e8:	401c      	ands	r4, r3
 801b3ea:	f7f6 fdbb 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b3ee:	b2e4      	uxtb	r4, r4
 801b3f0:	4020      	ands	r0, r4
 801b3f2:	bd70      	pop	{r4, r5, r6, pc}

0801b3f4 <uxr_serialize_HEARTBEAT_Payload>:
 801b3f4:	b570      	push	{r4, r5, r6, lr}
 801b3f6:	460d      	mov	r5, r1
 801b3f8:	4606      	mov	r6, r0
 801b3fa:	8809      	ldrh	r1, [r1, #0]
 801b3fc:	f7f6 fdc8 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b400:	8869      	ldrh	r1, [r5, #2]
 801b402:	4604      	mov	r4, r0
 801b404:	4630      	mov	r0, r6
 801b406:	f7f6 fdc3 	bl	8011f90 <ucdr_serialize_uint16_t>
 801b40a:	4603      	mov	r3, r0
 801b40c:	7929      	ldrb	r1, [r5, #4]
 801b40e:	4630      	mov	r0, r6
 801b410:	401c      	ands	r4, r3
 801b412:	f7f6 fd91 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b416:	b2e4      	uxtb	r4, r4
 801b418:	4020      	ands	r0, r4
 801b41a:	bd70      	pop	{r4, r5, r6, pc}

0801b41c <uxr_deserialize_HEARTBEAT_Payload>:
 801b41c:	b570      	push	{r4, r5, r6, lr}
 801b41e:	460e      	mov	r6, r1
 801b420:	4605      	mov	r5, r0
 801b422:	f7f6 feb5 	bl	8012190 <ucdr_deserialize_uint16_t>
 801b426:	4604      	mov	r4, r0
 801b428:	1cb1      	adds	r1, r6, #2
 801b42a:	4628      	mov	r0, r5
 801b42c:	f7f6 feb0 	bl	8012190 <ucdr_deserialize_uint16_t>
 801b430:	4603      	mov	r3, r0
 801b432:	1d31      	adds	r1, r6, #4
 801b434:	4628      	mov	r0, r5
 801b436:	401c      	ands	r4, r3
 801b438:	f7f6 fd94 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b43c:	b2e4      	uxtb	r4, r4
 801b43e:	4020      	ands	r0, r4
 801b440:	bd70      	pop	{r4, r5, r6, pc}
 801b442:	bf00      	nop

0801b444 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b448:	460e      	mov	r6, r1
 801b44a:	4605      	mov	r5, r0
 801b44c:	f7f7 fc3c 	bl	8012cc8 <ucdr_deserialize_int32_t>
 801b450:	4607      	mov	r7, r0
 801b452:	1d31      	adds	r1, r6, #4
 801b454:	4628      	mov	r0, r5
 801b456:	f7f7 f8b5 	bl	80125c4 <ucdr_deserialize_uint32_t>
 801b45a:	4680      	mov	r8, r0
 801b45c:	f106 0108 	add.w	r1, r6, #8
 801b460:	4628      	mov	r0, r5
 801b462:	f7f7 fc31 	bl	8012cc8 <ucdr_deserialize_int32_t>
 801b466:	ea07 0708 	and.w	r7, r7, r8
 801b46a:	4604      	mov	r4, r0
 801b46c:	f106 010c 	add.w	r1, r6, #12
 801b470:	4628      	mov	r0, r5
 801b472:	403c      	ands	r4, r7
 801b474:	f7f7 f8a6 	bl	80125c4 <ucdr_deserialize_uint32_t>
 801b478:	f106 0110 	add.w	r1, r6, #16
 801b47c:	4004      	ands	r4, r0
 801b47e:	4628      	mov	r0, r5
 801b480:	f7f7 fc22 	bl	8012cc8 <ucdr_deserialize_int32_t>
 801b484:	4603      	mov	r3, r0
 801b486:	b2e4      	uxtb	r4, r4
 801b488:	4628      	mov	r0, r5
 801b48a:	461d      	mov	r5, r3
 801b48c:	f106 0114 	add.w	r1, r6, #20
 801b490:	f7f7 f898 	bl	80125c4 <ucdr_deserialize_uint32_t>
 801b494:	402c      	ands	r4, r5
 801b496:	4020      	ands	r0, r4
 801b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b49c <uxr_serialize_SampleIdentity>:
 801b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4a0:	4604      	mov	r4, r0
 801b4a2:	460d      	mov	r5, r1
 801b4a4:	220c      	movs	r2, #12
 801b4a6:	f7fc fa13 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b4aa:	2203      	movs	r2, #3
 801b4ac:	f105 010c 	add.w	r1, r5, #12
 801b4b0:	4607      	mov	r7, r0
 801b4b2:	4620      	mov	r0, r4
 801b4b4:	f7fc fa0c 	bl	80178d0 <ucdr_serialize_array_uint8_t>
 801b4b8:	7be9      	ldrb	r1, [r5, #15]
 801b4ba:	4680      	mov	r8, r0
 801b4bc:	4620      	mov	r0, r4
 801b4be:	f7f6 fd3b 	bl	8011f38 <ucdr_serialize_uint8_t>
 801b4c2:	6929      	ldr	r1, [r5, #16]
 801b4c4:	4606      	mov	r6, r0
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f7f7 fb66 	bl	8012b98 <ucdr_serialize_int32_t>
 801b4cc:	ea07 0708 	and.w	r7, r7, r8
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	4620      	mov	r0, r4
 801b4d4:	403e      	ands	r6, r7
 801b4d6:	6969      	ldr	r1, [r5, #20]
 801b4d8:	461c      	mov	r4, r3
 801b4da:	f7f6 ff43 	bl	8012364 <ucdr_serialize_uint32_t>
 801b4de:	4034      	ands	r4, r6
 801b4e0:	4020      	ands	r0, r4
 801b4e2:	b2c0      	uxtb	r0, r0
 801b4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b4e8 <uxr_deserialize_SampleIdentity>:
 801b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ec:	4604      	mov	r4, r0
 801b4ee:	460d      	mov	r5, r1
 801b4f0:	220c      	movs	r2, #12
 801b4f2:	f7fc fa51 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b4f6:	2203      	movs	r2, #3
 801b4f8:	f105 010c 	add.w	r1, r5, #12
 801b4fc:	4607      	mov	r7, r0
 801b4fe:	4620      	mov	r0, r4
 801b500:	f7fc fa4a 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801b504:	f105 010f 	add.w	r1, r5, #15
 801b508:	4680      	mov	r8, r0
 801b50a:	4620      	mov	r0, r4
 801b50c:	f7f6 fd2a 	bl	8011f64 <ucdr_deserialize_uint8_t>
 801b510:	f105 0110 	add.w	r1, r5, #16
 801b514:	4606      	mov	r6, r0
 801b516:	4620      	mov	r0, r4
 801b518:	f7f7 fbd6 	bl	8012cc8 <ucdr_deserialize_int32_t>
 801b51c:	ea07 0708 	and.w	r7, r7, r8
 801b520:	4603      	mov	r3, r0
 801b522:	4620      	mov	r0, r4
 801b524:	403e      	ands	r6, r7
 801b526:	f105 0114 	add.w	r1, r5, #20
 801b52a:	461c      	mov	r4, r3
 801b52c:	f7f7 f84a 	bl	80125c4 <ucdr_deserialize_uint32_t>
 801b530:	4034      	ands	r4, r6
 801b532:	4020      	ands	r0, r4
 801b534:	b2c0      	uxtb	r0, r0
 801b536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b53a:	bf00      	nop

0801b53c <rcl_client_get_rmw_handle>:
 801b53c:	b118      	cbz	r0, 801b546 <rcl_client_get_rmw_handle+0xa>
 801b53e:	6800      	ldr	r0, [r0, #0]
 801b540:	b108      	cbz	r0, 801b546 <rcl_client_get_rmw_handle+0xa>
 801b542:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b546:	4770      	bx	lr

0801b548 <rcl_send_request>:
 801b548:	b570      	push	{r4, r5, r6, lr}
 801b54a:	b082      	sub	sp, #8
 801b54c:	b1f8      	cbz	r0, 801b58e <rcl_send_request+0x46>
 801b54e:	4604      	mov	r4, r0
 801b550:	6800      	ldr	r0, [r0, #0]
 801b552:	b1e0      	cbz	r0, 801b58e <rcl_send_request+0x46>
 801b554:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b558:	b1cb      	cbz	r3, 801b58e <rcl_send_request+0x46>
 801b55a:	460e      	mov	r6, r1
 801b55c:	b1e1      	cbz	r1, 801b598 <rcl_send_request+0x50>
 801b55e:	4615      	mov	r5, r2
 801b560:	b1d2      	cbz	r2, 801b598 <rcl_send_request+0x50>
 801b562:	2105      	movs	r1, #5
 801b564:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b568:	f002 fa2e 	bl	801d9c8 <__atomic_load_8>
 801b56c:	4602      	mov	r2, r0
 801b56e:	460b      	mov	r3, r1
 801b570:	4631      	mov	r1, r6
 801b572:	e9c5 2300 	strd	r2, r3, [r5]
 801b576:	6823      	ldr	r3, [r4, #0]
 801b578:	462a      	mov	r2, r5
 801b57a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b57e:	f7fa fefb 	bl	8016378 <rmw_send_request>
 801b582:	4606      	mov	r6, r0
 801b584:	b160      	cbz	r0, 801b5a0 <rcl_send_request+0x58>
 801b586:	2601      	movs	r6, #1
 801b588:	4630      	mov	r0, r6
 801b58a:	b002      	add	sp, #8
 801b58c:	bd70      	pop	{r4, r5, r6, pc}
 801b58e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b592:	4630      	mov	r0, r6
 801b594:	b002      	add	sp, #8
 801b596:	bd70      	pop	{r4, r5, r6, pc}
 801b598:	260b      	movs	r6, #11
 801b59a:	4630      	mov	r0, r6
 801b59c:	b002      	add	sp, #8
 801b59e:	bd70      	pop	{r4, r5, r6, pc}
 801b5a0:	6820      	ldr	r0, [r4, #0]
 801b5a2:	2105      	movs	r1, #5
 801b5a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b5a8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b5ac:	9100      	str	r1, [sp, #0]
 801b5ae:	f002 fa77 	bl	801daa0 <__atomic_exchange_8>
 801b5b2:	4630      	mov	r0, r6
 801b5b4:	b002      	add	sp, #8
 801b5b6:	bd70      	pop	{r4, r5, r6, pc}

0801b5b8 <rcl_take_response>:
 801b5b8:	b570      	push	{r4, r5, r6, lr}
 801b5ba:	468e      	mov	lr, r1
 801b5bc:	b08c      	sub	sp, #48	; 0x30
 801b5be:	460c      	mov	r4, r1
 801b5c0:	4616      	mov	r6, r2
 801b5c2:	f10d 0c18 	add.w	ip, sp, #24
 801b5c6:	4605      	mov	r5, r0
 801b5c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b5d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b5d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b5d8:	b35d      	cbz	r5, 801b632 <rcl_take_response+0x7a>
 801b5da:	682b      	ldr	r3, [r5, #0]
 801b5dc:	b34b      	cbz	r3, 801b632 <rcl_take_response+0x7a>
 801b5de:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b5e2:	b330      	cbz	r0, 801b632 <rcl_take_response+0x7a>
 801b5e4:	b346      	cbz	r6, 801b638 <rcl_take_response+0x80>
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	4632      	mov	r2, r6
 801b5ea:	a902      	add	r1, sp, #8
 801b5ec:	f88d 3007 	strb.w	r3, [sp, #7]
 801b5f0:	f10d 0307 	add.w	r3, sp, #7
 801b5f4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b640 <rcl_take_response+0x88>
 801b5f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b5fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b600:	f7fa ffc2 	bl	8016588 <rmw_take_response>
 801b604:	4605      	mov	r5, r0
 801b606:	b9c8      	cbnz	r0, 801b63c <rcl_take_response+0x84>
 801b608:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b60c:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b610:	2a00      	cmp	r2, #0
 801b612:	bf08      	it	eq
 801b614:	461d      	moveq	r5, r3
 801b616:	f10d 0e18 	add.w	lr, sp, #24
 801b61a:	46a4      	mov	ip, r4
 801b61c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b624:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b628:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b62c:	4628      	mov	r0, r5
 801b62e:	b00c      	add	sp, #48	; 0x30
 801b630:	bd70      	pop	{r4, r5, r6, pc}
 801b632:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b636:	e7ee      	b.n	801b616 <rcl_take_response+0x5e>
 801b638:	250b      	movs	r5, #11
 801b63a:	e7ec      	b.n	801b616 <rcl_take_response+0x5e>
 801b63c:	2501      	movs	r5, #1
 801b63e:	e7ea      	b.n	801b616 <rcl_take_response+0x5e>
	...

0801b648 <rcl_client_is_valid>:
 801b648:	b130      	cbz	r0, 801b658 <rcl_client_is_valid+0x10>
 801b64a:	6800      	ldr	r0, [r0, #0]
 801b64c:	b120      	cbz	r0, 801b658 <rcl_client_is_valid+0x10>
 801b64e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b652:	3800      	subs	r0, #0
 801b654:	bf18      	it	ne
 801b656:	2001      	movne	r0, #1
 801b658:	4770      	bx	lr
 801b65a:	bf00      	nop

0801b65c <rcl_convert_rmw_ret_to_rcl_ret>:
 801b65c:	280b      	cmp	r0, #11
 801b65e:	dc0d      	bgt.n	801b67c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b660:	2800      	cmp	r0, #0
 801b662:	db09      	blt.n	801b678 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b664:	280b      	cmp	r0, #11
 801b666:	d807      	bhi.n	801b678 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b668:	e8df f000 	tbb	[pc, r0]
 801b66c:	07060607 	.word	0x07060607
 801b670:	06060606 	.word	0x06060606
 801b674:	07070606 	.word	0x07070606
 801b678:	2001      	movs	r0, #1
 801b67a:	4770      	bx	lr
 801b67c:	28cb      	cmp	r0, #203	; 0xcb
 801b67e:	bf18      	it	ne
 801b680:	2001      	movne	r0, #1
 801b682:	4770      	bx	lr

0801b684 <rcl_get_zero_initialized_context>:
 801b684:	4a03      	ldr	r2, [pc, #12]	; (801b694 <rcl_get_zero_initialized_context+0x10>)
 801b686:	4603      	mov	r3, r0
 801b688:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b68c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b690:	4618      	mov	r0, r3
 801b692:	4770      	bx	lr
 801b694:	08025ac4 	.word	0x08025ac4

0801b698 <rcl_context_is_valid>:
 801b698:	b118      	cbz	r0, 801b6a2 <rcl_context_is_valid+0xa>
 801b69a:	6840      	ldr	r0, [r0, #4]
 801b69c:	3800      	subs	r0, #0
 801b69e:	bf18      	it	ne
 801b6a0:	2001      	movne	r0, #1
 801b6a2:	4770      	bx	lr

0801b6a4 <__cleanup_context>:
 801b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6a8:	4606      	mov	r6, r0
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	6800      	ldr	r0, [r0, #0]
 801b6ae:	6073      	str	r3, [r6, #4]
 801b6b0:	2800      	cmp	r0, #0
 801b6b2:	d049      	beq.n	801b748 <__cleanup_context+0xa4>
 801b6b4:	6947      	ldr	r7, [r0, #20]
 801b6b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b6ba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b6be:	b137      	cbz	r7, 801b6ce <__cleanup_context+0x2a>
 801b6c0:	3014      	adds	r0, #20
 801b6c2:	f7f8 f845 	bl	8013750 <rcl_init_options_fini>
 801b6c6:	4607      	mov	r7, r0
 801b6c8:	2800      	cmp	r0, #0
 801b6ca:	d144      	bne.n	801b756 <__cleanup_context+0xb2>
 801b6cc:	6830      	ldr	r0, [r6, #0]
 801b6ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b6d0:	b143      	cbz	r3, 801b6e4 <__cleanup_context+0x40>
 801b6d2:	3028      	adds	r0, #40	; 0x28
 801b6d4:	f7fa fb58 	bl	8015d88 <rmw_context_fini>
 801b6d8:	b118      	cbz	r0, 801b6e2 <__cleanup_context+0x3e>
 801b6da:	2f00      	cmp	r7, #0
 801b6dc:	d03e      	beq.n	801b75c <__cleanup_context+0xb8>
 801b6de:	f7f9 fe17 	bl	8015310 <rcutils_reset_error>
 801b6e2:	6830      	ldr	r0, [r6, #0]
 801b6e4:	6a03      	ldr	r3, [r0, #32]
 801b6e6:	b1db      	cbz	r3, 801b720 <__cleanup_context+0x7c>
 801b6e8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b6ec:	2a01      	cmp	r2, #1
 801b6ee:	f17c 0100 	sbcs.w	r1, ip, #0
 801b6f2:	db11      	blt.n	801b718 <__cleanup_context+0x74>
 801b6f4:	2400      	movs	r4, #0
 801b6f6:	4625      	mov	r5, r4
 801b6f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b6fc:	4649      	mov	r1, r9
 801b6fe:	b1b8      	cbz	r0, 801b730 <__cleanup_context+0x8c>
 801b700:	47c0      	blx	r8
 801b702:	6833      	ldr	r3, [r6, #0]
 801b704:	3401      	adds	r4, #1
 801b706:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b70a:	f145 0500 	adc.w	r5, r5, #0
 801b70e:	6a1b      	ldr	r3, [r3, #32]
 801b710:	4294      	cmp	r4, r2
 801b712:	eb75 010c 	sbcs.w	r1, r5, ip
 801b716:	dbef      	blt.n	801b6f8 <__cleanup_context+0x54>
 801b718:	4618      	mov	r0, r3
 801b71a:	4649      	mov	r1, r9
 801b71c:	47c0      	blx	r8
 801b71e:	6830      	ldr	r0, [r6, #0]
 801b720:	4649      	mov	r1, r9
 801b722:	47c0      	blx	r8
 801b724:	2300      	movs	r3, #0
 801b726:	4638      	mov	r0, r7
 801b728:	e9c6 3300 	strd	r3, r3, [r6]
 801b72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b730:	3401      	adds	r4, #1
 801b732:	f145 0500 	adc.w	r5, r5, #0
 801b736:	4294      	cmp	r4, r2
 801b738:	eb75 010c 	sbcs.w	r1, r5, ip
 801b73c:	dbdc      	blt.n	801b6f8 <__cleanup_context+0x54>
 801b73e:	4618      	mov	r0, r3
 801b740:	4649      	mov	r1, r9
 801b742:	47c0      	blx	r8
 801b744:	6830      	ldr	r0, [r6, #0]
 801b746:	e7eb      	b.n	801b720 <__cleanup_context+0x7c>
 801b748:	4607      	mov	r7, r0
 801b74a:	2300      	movs	r3, #0
 801b74c:	4638      	mov	r0, r7
 801b74e:	e9c6 3300 	strd	r3, r3, [r6]
 801b752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b756:	f7f9 fddb 	bl	8015310 <rcutils_reset_error>
 801b75a:	e7b7      	b.n	801b6cc <__cleanup_context+0x28>
 801b75c:	f7ff ff7e 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 801b760:	4607      	mov	r7, r0
 801b762:	e7bc      	b.n	801b6de <__cleanup_context+0x3a>

0801b764 <rcl_get_zero_initialized_guard_condition>:
 801b764:	4a03      	ldr	r2, [pc, #12]	; (801b774 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b766:	4603      	mov	r3, r0
 801b768:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b76c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b770:	4618      	mov	r0, r3
 801b772:	4770      	bx	lr
 801b774:	08025acc 	.word	0x08025acc

0801b778 <rcl_guard_condition_init_from_rmw>:
 801b778:	b082      	sub	sp, #8
 801b77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b77e:	b086      	sub	sp, #24
 801b780:	4604      	mov	r4, r0
 801b782:	460e      	mov	r6, r1
 801b784:	4615      	mov	r5, r2
 801b786:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b78a:	f10d 0e04 	add.w	lr, sp, #4
 801b78e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b792:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b796:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b79a:	f8dc 3000 	ldr.w	r3, [ip]
 801b79e:	a801      	add	r0, sp, #4
 801b7a0:	f8ce 3000 	str.w	r3, [lr]
 801b7a4:	f7f9 fd76 	bl	8015294 <rcutils_allocator_is_valid>
 801b7a8:	f080 0301 	eor.w	r3, r0, #1
 801b7ac:	b2db      	uxtb	r3, r3
 801b7ae:	bb3b      	cbnz	r3, 801b800 <rcl_guard_condition_init_from_rmw+0x88>
 801b7b0:	b334      	cbz	r4, 801b800 <rcl_guard_condition_init_from_rmw+0x88>
 801b7b2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b7b6:	f1b8 0f00 	cmp.w	r8, #0
 801b7ba:	d11a      	bne.n	801b7f2 <rcl_guard_condition_init_from_rmw+0x7a>
 801b7bc:	b305      	cbz	r5, 801b800 <rcl_guard_condition_init_from_rmw+0x88>
 801b7be:	4628      	mov	r0, r5
 801b7c0:	f7ff ff6a 	bl	801b698 <rcl_context_is_valid>
 801b7c4:	b1f0      	cbz	r0, 801b804 <rcl_guard_condition_init_from_rmw+0x8c>
 801b7c6:	9b01      	ldr	r3, [sp, #4]
 801b7c8:	201c      	movs	r0, #28
 801b7ca:	9905      	ldr	r1, [sp, #20]
 801b7cc:	4798      	blx	r3
 801b7ce:	4607      	mov	r7, r0
 801b7d0:	6060      	str	r0, [r4, #4]
 801b7d2:	b320      	cbz	r0, 801b81e <rcl_guard_condition_init_from_rmw+0xa6>
 801b7d4:	b1c6      	cbz	r6, 801b808 <rcl_guard_condition_init_from_rmw+0x90>
 801b7d6:	6006      	str	r6, [r0, #0]
 801b7d8:	f880 8004 	strb.w	r8, [r0, #4]
 801b7dc:	ac01      	add	r4, sp, #4
 801b7de:	f107 0c08 	add.w	ip, r7, #8
 801b7e2:	2500      	movs	r5, #0
 801b7e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b7e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b7ea:	6823      	ldr	r3, [r4, #0]
 801b7ec:	f8cc 3000 	str.w	r3, [ip]
 801b7f0:	e000      	b.n	801b7f4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b7f2:	2564      	movs	r5, #100	; 0x64
 801b7f4:	4628      	mov	r0, r5
 801b7f6:	b006      	add	sp, #24
 801b7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7fc:	b002      	add	sp, #8
 801b7fe:	4770      	bx	lr
 801b800:	250b      	movs	r5, #11
 801b802:	e7f7      	b.n	801b7f4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b804:	2565      	movs	r5, #101	; 0x65
 801b806:	e7f5      	b.n	801b7f4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b808:	6828      	ldr	r0, [r5, #0]
 801b80a:	3028      	adds	r0, #40	; 0x28
 801b80c:	f002 fd56 	bl	801e2bc <rmw_create_guard_condition>
 801b810:	6038      	str	r0, [r7, #0]
 801b812:	6867      	ldr	r7, [r4, #4]
 801b814:	683e      	ldr	r6, [r7, #0]
 801b816:	b126      	cbz	r6, 801b822 <rcl_guard_condition_init_from_rmw+0xaa>
 801b818:	2301      	movs	r3, #1
 801b81a:	713b      	strb	r3, [r7, #4]
 801b81c:	e7de      	b.n	801b7dc <rcl_guard_condition_init_from_rmw+0x64>
 801b81e:	250a      	movs	r5, #10
 801b820:	e7e8      	b.n	801b7f4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b822:	9b02      	ldr	r3, [sp, #8]
 801b824:	4638      	mov	r0, r7
 801b826:	9905      	ldr	r1, [sp, #20]
 801b828:	2501      	movs	r5, #1
 801b82a:	4798      	blx	r3
 801b82c:	6066      	str	r6, [r4, #4]
 801b82e:	e7e1      	b.n	801b7f4 <rcl_guard_condition_init_from_rmw+0x7c>

0801b830 <rcl_guard_condition_fini>:
 801b830:	b570      	push	{r4, r5, r6, lr}
 801b832:	b082      	sub	sp, #8
 801b834:	b1f0      	cbz	r0, 801b874 <rcl_guard_condition_fini+0x44>
 801b836:	6843      	ldr	r3, [r0, #4]
 801b838:	4604      	mov	r4, r0
 801b83a:	b163      	cbz	r3, 801b856 <rcl_guard_condition_fini+0x26>
 801b83c:	6818      	ldr	r0, [r3, #0]
 801b83e:	68de      	ldr	r6, [r3, #12]
 801b840:	6999      	ldr	r1, [r3, #24]
 801b842:	b160      	cbz	r0, 801b85e <rcl_guard_condition_fini+0x2e>
 801b844:	791d      	ldrb	r5, [r3, #4]
 801b846:	b965      	cbnz	r5, 801b862 <rcl_guard_condition_fini+0x32>
 801b848:	4618      	mov	r0, r3
 801b84a:	47b0      	blx	r6
 801b84c:	2300      	movs	r3, #0
 801b84e:	4628      	mov	r0, r5
 801b850:	6063      	str	r3, [r4, #4]
 801b852:	b002      	add	sp, #8
 801b854:	bd70      	pop	{r4, r5, r6, pc}
 801b856:	461d      	mov	r5, r3
 801b858:	4628      	mov	r0, r5
 801b85a:	b002      	add	sp, #8
 801b85c:	bd70      	pop	{r4, r5, r6, pc}
 801b85e:	4605      	mov	r5, r0
 801b860:	e7f2      	b.n	801b848 <rcl_guard_condition_fini+0x18>
 801b862:	9101      	str	r1, [sp, #4]
 801b864:	f002 fd40 	bl	801e2e8 <rmw_destroy_guard_condition>
 801b868:	1e05      	subs	r5, r0, #0
 801b86a:	6863      	ldr	r3, [r4, #4]
 801b86c:	9901      	ldr	r1, [sp, #4]
 801b86e:	bf18      	it	ne
 801b870:	2501      	movne	r5, #1
 801b872:	e7e9      	b.n	801b848 <rcl_guard_condition_fini+0x18>
 801b874:	250b      	movs	r5, #11
 801b876:	4628      	mov	r0, r5
 801b878:	b002      	add	sp, #8
 801b87a:	bd70      	pop	{r4, r5, r6, pc}

0801b87c <rcl_guard_condition_get_default_options>:
 801b87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b87e:	b087      	sub	sp, #28
 801b880:	4606      	mov	r6, r0
 801b882:	4c0b      	ldr	r4, [pc, #44]	; (801b8b0 <rcl_guard_condition_get_default_options+0x34>)
 801b884:	4668      	mov	r0, sp
 801b886:	f7f9 fcf7 	bl	8015278 <rcutils_get_default_allocator>
 801b88a:	46ee      	mov	lr, sp
 801b88c:	46a4      	mov	ip, r4
 801b88e:	4625      	mov	r5, r4
 801b890:	4634      	mov	r4, r6
 801b892:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b896:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b89a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b89c:	f8de 7000 	ldr.w	r7, [lr]
 801b8a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b8a2:	4630      	mov	r0, r6
 801b8a4:	f8cc 7000 	str.w	r7, [ip]
 801b8a8:	6027      	str	r7, [r4, #0]
 801b8aa:	b007      	add	sp, #28
 801b8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8ae:	bf00      	nop
 801b8b0:	20017060 	.word	0x20017060

0801b8b4 <rcl_guard_condition_get_rmw_handle>:
 801b8b4:	b110      	cbz	r0, 801b8bc <rcl_guard_condition_get_rmw_handle+0x8>
 801b8b6:	6840      	ldr	r0, [r0, #4]
 801b8b8:	b100      	cbz	r0, 801b8bc <rcl_guard_condition_get_rmw_handle+0x8>
 801b8ba:	6800      	ldr	r0, [r0, #0]
 801b8bc:	4770      	bx	lr
 801b8be:	bf00      	nop

0801b8c0 <rcl_init>:
 801b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8c4:	1e05      	subs	r5, r0, #0
 801b8c6:	b09e      	sub	sp, #120	; 0x78
 801b8c8:	460e      	mov	r6, r1
 801b8ca:	4690      	mov	r8, r2
 801b8cc:	461f      	mov	r7, r3
 801b8ce:	f340 809f 	ble.w	801ba10 <rcl_init+0x150>
 801b8d2:	2900      	cmp	r1, #0
 801b8d4:	f000 809f 	beq.w	801ba16 <rcl_init+0x156>
 801b8d8:	f1a1 0e04 	sub.w	lr, r1, #4
 801b8dc:	f04f 0c00 	mov.w	ip, #0
 801b8e0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801b8e4:	f10c 0c01 	add.w	ip, ip, #1
 801b8e8:	2c00      	cmp	r4, #0
 801b8ea:	f000 8094 	beq.w	801ba16 <rcl_init+0x156>
 801b8ee:	4565      	cmp	r5, ip
 801b8f0:	d1f6      	bne.n	801b8e0 <rcl_init+0x20>
 801b8f2:	f1b8 0f00 	cmp.w	r8, #0
 801b8f6:	f000 808e 	beq.w	801ba16 <rcl_init+0x156>
 801b8fa:	f8d8 4000 	ldr.w	r4, [r8]
 801b8fe:	2c00      	cmp	r4, #0
 801b900:	f000 8089 	beq.w	801ba16 <rcl_init+0x156>
 801b904:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801b908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b90a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b90e:	6823      	ldr	r3, [r4, #0]
 801b910:	a819      	add	r0, sp, #100	; 0x64
 801b912:	f8cc 3000 	str.w	r3, [ip]
 801b916:	f7f9 fcbd 	bl	8015294 <rcutils_allocator_is_valid>
 801b91a:	f080 0001 	eor.w	r0, r0, #1
 801b91e:	b2c0      	uxtb	r0, r0
 801b920:	2800      	cmp	r0, #0
 801b922:	d178      	bne.n	801ba16 <rcl_init+0x156>
 801b924:	2f00      	cmp	r7, #0
 801b926:	d076      	beq.n	801ba16 <rcl_init+0x156>
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d178      	bne.n	801ba20 <rcl_init+0x160>
 801b92e:	2178      	movs	r1, #120	; 0x78
 801b930:	2001      	movs	r0, #1
 801b932:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b936:	4798      	blx	r3
 801b938:	4604      	mov	r4, r0
 801b93a:	6038      	str	r0, [r7, #0]
 801b93c:	2800      	cmp	r0, #0
 801b93e:	f000 80b6 	beq.w	801baae <rcl_init+0x1ee>
 801b942:	a802      	add	r0, sp, #8
 801b944:	f002 fa4c 	bl	801dde0 <rmw_get_zero_initialized_context>
 801b948:	a902      	add	r1, sp, #8
 801b94a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801b94e:	2250      	movs	r2, #80	; 0x50
 801b950:	f005 fc01 	bl	8021156 <memcpy>
 801b954:	ac19      	add	r4, sp, #100	; 0x64
 801b956:	f8d7 e000 	ldr.w	lr, [r7]
 801b95a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b95c:	46f4      	mov	ip, lr
 801b95e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b962:	6823      	ldr	r3, [r4, #0]
 801b964:	f10e 0114 	add.w	r1, lr, #20
 801b968:	4640      	mov	r0, r8
 801b96a:	f8cc 3000 	str.w	r3, [ip]
 801b96e:	f7f7 ff19 	bl	80137a4 <rcl_init_options_copy>
 801b972:	4604      	mov	r4, r0
 801b974:	2800      	cmp	r0, #0
 801b976:	d144      	bne.n	801ba02 <rcl_init+0x142>
 801b978:	f8d7 9000 	ldr.w	r9, [r7]
 801b97c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801b980:	f8c9 0020 	str.w	r0, [r9, #32]
 801b984:	f8c9 5018 	str.w	r5, [r9, #24]
 801b988:	f8c9 801c 	str.w	r8, [r9, #28]
 801b98c:	2d00      	cmp	r5, #0
 801b98e:	d04e      	beq.n	801ba2e <rcl_init+0x16e>
 801b990:	2e00      	cmp	r6, #0
 801b992:	d04c      	beq.n	801ba2e <rcl_init+0x16e>
 801b994:	2104      	movs	r1, #4
 801b996:	4628      	mov	r0, r5
 801b998:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b99c:	4798      	blx	r3
 801b99e:	f8c9 0020 	str.w	r0, [r9, #32]
 801b9a2:	f8d7 9000 	ldr.w	r9, [r7]
 801b9a6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801b9aa:	46ca      	mov	sl, r9
 801b9ac:	b343      	cbz	r3, 801ba00 <rcl_init+0x140>
 801b9ae:	2d01      	cmp	r5, #1
 801b9b0:	f178 0300 	sbcs.w	r3, r8, #0
 801b9b4:	db3b      	blt.n	801ba2e <rcl_init+0x16e>
 801b9b6:	2400      	movs	r4, #0
 801b9b8:	3e04      	subs	r6, #4
 801b9ba:	46a1      	mov	r9, r4
 801b9bc:	e00b      	b.n	801b9d6 <rcl_init+0x116>
 801b9be:	6831      	ldr	r1, [r6, #0]
 801b9c0:	f005 fbc9 	bl	8021156 <memcpy>
 801b9c4:	3401      	adds	r4, #1
 801b9c6:	f149 0900 	adc.w	r9, r9, #0
 801b9ca:	45c8      	cmp	r8, r9
 801b9cc:	bf08      	it	eq
 801b9ce:	42a5      	cmpeq	r5, r4
 801b9d0:	d02b      	beq.n	801ba2a <rcl_init+0x16a>
 801b9d2:	f8d7 a000 	ldr.w	sl, [r7]
 801b9d6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801b9da:	f7e4 fc91 	bl	8000300 <strlen>
 801b9de:	1c42      	adds	r2, r0, #1
 801b9e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b9e2:	4610      	mov	r0, r2
 801b9e4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b9e6:	f8da a020 	ldr.w	sl, [sl, #32]
 801b9ea:	9201      	str	r2, [sp, #4]
 801b9ec:	4798      	blx	r3
 801b9ee:	683b      	ldr	r3, [r7, #0]
 801b9f0:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801b9f4:	6a1b      	ldr	r3, [r3, #32]
 801b9f6:	9a01      	ldr	r2, [sp, #4]
 801b9f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b9fc:	2800      	cmp	r0, #0
 801b9fe:	d1de      	bne.n	801b9be <rcl_init+0xfe>
 801ba00:	240a      	movs	r4, #10
 801ba02:	4638      	mov	r0, r7
 801ba04:	f7ff fe4e 	bl	801b6a4 <__cleanup_context>
 801ba08:	4620      	mov	r0, r4
 801ba0a:	b01e      	add	sp, #120	; 0x78
 801ba0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba10:	2900      	cmp	r1, #0
 801ba12:	f43f af6e 	beq.w	801b8f2 <rcl_init+0x32>
 801ba16:	240b      	movs	r4, #11
 801ba18:	4620      	mov	r0, r4
 801ba1a:	b01e      	add	sp, #120	; 0x78
 801ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba20:	2464      	movs	r4, #100	; 0x64
 801ba22:	4620      	mov	r0, r4
 801ba24:	b01e      	add	sp, #120	; 0x78
 801ba26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba2a:	f8d7 9000 	ldr.w	r9, [r7]
 801ba2e:	4926      	ldr	r1, [pc, #152]	; (801bac8 <rcl_init+0x208>)
 801ba30:	680b      	ldr	r3, [r1, #0]
 801ba32:	3301      	adds	r3, #1
 801ba34:	d036      	beq.n	801baa4 <rcl_init+0x1e4>
 801ba36:	461a      	mov	r2, r3
 801ba38:	2400      	movs	r4, #0
 801ba3a:	600b      	str	r3, [r1, #0]
 801ba3c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ba40:	607b      	str	r3, [r7, #4]
 801ba42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ba44:	3301      	adds	r3, #1
 801ba46:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801ba4a:	d034      	beq.n	801bab6 <rcl_init+0x1f6>
 801ba4c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801ba50:	b93b      	cbnz	r3, 801ba62 <rcl_init+0x1a2>
 801ba52:	3030      	adds	r0, #48	; 0x30
 801ba54:	f000 f83a 	bl	801bacc <rcl_get_localhost_only>
 801ba58:	4604      	mov	r4, r0
 801ba5a:	2800      	cmp	r0, #0
 801ba5c:	d1d1      	bne.n	801ba02 <rcl_init+0x142>
 801ba5e:	683b      	ldr	r3, [r7, #0]
 801ba60:	6958      	ldr	r0, [r3, #20]
 801ba62:	aa18      	add	r2, sp, #96	; 0x60
 801ba64:	a917      	add	r1, sp, #92	; 0x5c
 801ba66:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801ba68:	f000 fc38 	bl	801c2dc <rcl_validate_enclave_name>
 801ba6c:	4604      	mov	r4, r0
 801ba6e:	2800      	cmp	r0, #0
 801ba70:	d1c7      	bne.n	801ba02 <rcl_init+0x142>
 801ba72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba74:	b9eb      	cbnz	r3, 801bab2 <rcl_init+0x1f2>
 801ba76:	6839      	ldr	r1, [r7, #0]
 801ba78:	694b      	ldr	r3, [r1, #20]
 801ba7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801ba7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801ba80:	f000 f9c8 	bl	801be14 <rcl_get_security_options_from_environment>
 801ba84:	4604      	mov	r4, r0
 801ba86:	2800      	cmp	r0, #0
 801ba88:	d1bb      	bne.n	801ba02 <rcl_init+0x142>
 801ba8a:	6839      	ldr	r1, [r7, #0]
 801ba8c:	6948      	ldr	r0, [r1, #20]
 801ba8e:	3128      	adds	r1, #40	; 0x28
 801ba90:	3018      	adds	r0, #24
 801ba92:	f7fa f843 	bl	8015b1c <rmw_init>
 801ba96:	4604      	mov	r4, r0
 801ba98:	2800      	cmp	r0, #0
 801ba9a:	d0bd      	beq.n	801ba18 <rcl_init+0x158>
 801ba9c:	f7ff fdde 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 801baa0:	4604      	mov	r4, r0
 801baa2:	e7ae      	b.n	801ba02 <rcl_init+0x142>
 801baa4:	2201      	movs	r2, #1
 801baa6:	461c      	mov	r4, r3
 801baa8:	600a      	str	r2, [r1, #0]
 801baaa:	4613      	mov	r3, r2
 801baac:	e7c6      	b.n	801ba3c <rcl_init+0x17c>
 801baae:	240a      	movs	r4, #10
 801bab0:	e7b2      	b.n	801ba18 <rcl_init+0x158>
 801bab2:	2401      	movs	r4, #1
 801bab4:	e7a5      	b.n	801ba02 <rcl_init+0x142>
 801bab6:	3024      	adds	r0, #36	; 0x24
 801bab8:	f003 fbc6 	bl	801f248 <rcl_get_default_domain_id>
 801babc:	4604      	mov	r4, r0
 801babe:	2800      	cmp	r0, #0
 801bac0:	d19f      	bne.n	801ba02 <rcl_init+0x142>
 801bac2:	683b      	ldr	r3, [r7, #0]
 801bac4:	6958      	ldr	r0, [r3, #20]
 801bac6:	e7c1      	b.n	801ba4c <rcl_init+0x18c>
 801bac8:	20017074 	.word	0x20017074

0801bacc <rcl_get_localhost_only>:
 801bacc:	b510      	push	{r4, lr}
 801bace:	2300      	movs	r3, #0
 801bad0:	b082      	sub	sp, #8
 801bad2:	9301      	str	r3, [sp, #4]
 801bad4:	b1b8      	cbz	r0, 801bb06 <rcl_get_localhost_only+0x3a>
 801bad6:	4604      	mov	r4, r0
 801bad8:	a901      	add	r1, sp, #4
 801bada:	480c      	ldr	r0, [pc, #48]	; (801bb0c <rcl_get_localhost_only+0x40>)
 801badc:	f7f9 fbe8 	bl	80152b0 <rcutils_get_env>
 801bae0:	b110      	cbz	r0, 801bae8 <rcl_get_localhost_only+0x1c>
 801bae2:	2001      	movs	r0, #1
 801bae4:	b002      	add	sp, #8
 801bae6:	bd10      	pop	{r4, pc}
 801bae8:	9b01      	ldr	r3, [sp, #4]
 801baea:	b113      	cbz	r3, 801baf2 <rcl_get_localhost_only+0x26>
 801baec:	781a      	ldrb	r2, [r3, #0]
 801baee:	2a31      	cmp	r2, #49	; 0x31
 801baf0:	d004      	beq.n	801bafc <rcl_get_localhost_only+0x30>
 801baf2:	2302      	movs	r3, #2
 801baf4:	2000      	movs	r0, #0
 801baf6:	7023      	strb	r3, [r4, #0]
 801baf8:	b002      	add	sp, #8
 801bafa:	bd10      	pop	{r4, pc}
 801bafc:	785b      	ldrb	r3, [r3, #1]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d1f7      	bne.n	801baf2 <rcl_get_localhost_only+0x26>
 801bb02:	2301      	movs	r3, #1
 801bb04:	e7f6      	b.n	801baf4 <rcl_get_localhost_only+0x28>
 801bb06:	200b      	movs	r0, #11
 801bb08:	b002      	add	sp, #8
 801bb0a:	bd10      	pop	{r4, pc}
 801bb0c:	08025ad4 	.word	0x08025ad4

0801bb10 <rcl_node_resolve_name>:
 801bb10:	b082      	sub	sp, #8
 801bb12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb16:	b091      	sub	sp, #68	; 0x44
 801bb18:	ac1a      	add	r4, sp, #104	; 0x68
 801bb1a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801bb1e:	e884 000c 	stmia.w	r4, {r2, r3}
 801bb22:	2800      	cmp	r0, #0
 801bb24:	d03d      	beq.n	801bba2 <rcl_node_resolve_name+0x92>
 801bb26:	460c      	mov	r4, r1
 801bb28:	4605      	mov	r5, r0
 801bb2a:	f7f8 f81d 	bl	8013b68 <rcl_node_get_options>
 801bb2e:	2800      	cmp	r0, #0
 801bb30:	d03a      	beq.n	801bba8 <rcl_node_resolve_name+0x98>
 801bb32:	4628      	mov	r0, r5
 801bb34:	f7f8 f808 	bl	8013b48 <rcl_node_get_name>
 801bb38:	4606      	mov	r6, r0
 801bb3a:	4628      	mov	r0, r5
 801bb3c:	ad0b      	add	r5, sp, #44	; 0x2c
 801bb3e:	f7f8 f80b 	bl	8013b58 <rcl_node_get_namespace>
 801bb42:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801bb46:	4607      	mov	r7, r0
 801bb48:	46ac      	mov	ip, r5
 801bb4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb52:	f8de 3000 	ldr.w	r3, [lr]
 801bb56:	f8cc 3000 	str.w	r3, [ip]
 801bb5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb5c:	b30b      	cbz	r3, 801bba2 <rcl_node_resolve_name+0x92>
 801bb5e:	4689      	mov	r9, r1
 801bb60:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801bb64:	f002 f80e 	bl	801db84 <rcutils_get_zero_initialized_string_map>
 801bb68:	ab10      	add	r3, sp, #64	; 0x40
 801bb6a:	9008      	str	r0, [sp, #32]
 801bb6c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801bb70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bb74:	2100      	movs	r1, #0
 801bb76:	a808      	add	r0, sp, #32
 801bb78:	e895 000c 	ldmia.w	r5, {r2, r3}
 801bb7c:	f002 f878 	bl	801dc70 <rcutils_string_map_init>
 801bb80:	4683      	mov	fp, r0
 801bb82:	b1a0      	cbz	r0, 801bbae <rcl_node_resolve_name+0x9e>
 801bb84:	f7f9 fbac 	bl	80152e0 <rcutils_get_error_string>
 801bb88:	f7f9 fbc2 	bl	8015310 <rcutils_reset_error>
 801bb8c:	f1bb 0f0a 	cmp.w	fp, #10
 801bb90:	bf18      	it	ne
 801bb92:	f04f 0b01 	movne.w	fp, #1
 801bb96:	4658      	mov	r0, fp
 801bb98:	b011      	add	sp, #68	; 0x44
 801bb9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb9e:	b002      	add	sp, #8
 801bba0:	4770      	bx	lr
 801bba2:	f04f 0b0b 	mov.w	fp, #11
 801bba6:	e7f6      	b.n	801bb96 <rcl_node_resolve_name+0x86>
 801bba8:	f04f 0b01 	mov.w	fp, #1
 801bbac:	e7f3      	b.n	801bb96 <rcl_node_resolve_name+0x86>
 801bbae:	9009      	str	r0, [sp, #36]	; 0x24
 801bbb0:	9007      	str	r0, [sp, #28]
 801bbb2:	a808      	add	r0, sp, #32
 801bbb4:	f003 fcdc 	bl	801f570 <rcl_get_default_topic_name_substitutions>
 801bbb8:	4683      	mov	fp, r0
 801bbba:	b180      	cbz	r0, 801bbde <rcl_node_resolve_name+0xce>
 801bbbc:	280a      	cmp	r0, #10
 801bbbe:	a808      	add	r0, sp, #32
 801bbc0:	bf18      	it	ne
 801bbc2:	f04f 0b01 	movne.w	fp, #1
 801bbc6:	f002 f893 	bl	801dcf0 <rcutils_string_map_fini>
 801bbca:	4604      	mov	r4, r0
 801bbcc:	2800      	cmp	r0, #0
 801bbce:	d15b      	bne.n	801bc88 <rcl_node_resolve_name+0x178>
 801bbd0:	4651      	mov	r1, sl
 801bbd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bbd4:	47c8      	blx	r9
 801bbd6:	4651      	mov	r1, sl
 801bbd8:	4620      	mov	r0, r4
 801bbda:	47c8      	blx	r9
 801bbdc:	e7db      	b.n	801bb96 <rcl_node_resolve_name+0x86>
 801bbde:	ab09      	add	r3, sp, #36	; 0x24
 801bbe0:	46ec      	mov	ip, sp
 801bbe2:	9305      	str	r3, [sp, #20]
 801bbe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bbe6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bbea:	682b      	ldr	r3, [r5, #0]
 801bbec:	463a      	mov	r2, r7
 801bbee:	4631      	mov	r1, r6
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	f8cc 3000 	str.w	r3, [ip]
 801bbf6:	ab08      	add	r3, sp, #32
 801bbf8:	f003 fb5a 	bl	801f2b0 <rcl_expand_topic_name>
 801bbfc:	4683      	mov	fp, r0
 801bbfe:	b9d8      	cbnz	r0, 801bc38 <rcl_node_resolve_name+0x128>
 801bc00:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bc02:	4602      	mov	r2, r0
 801bc04:	9009      	str	r0, [sp, #36]	; 0x24
 801bc06:	a90a      	add	r1, sp, #40	; 0x28
 801bc08:	4620      	mov	r0, r4
 801bc0a:	f002 f985 	bl	801df18 <rmw_validate_full_topic_name>
 801bc0e:	bb50      	cbnz	r0, 801bc66 <rcl_node_resolve_name+0x156>
 801bc10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bc12:	2d00      	cmp	r5, #0
 801bc14:	d140      	bne.n	801bc98 <rcl_node_resolve_name+0x188>
 801bc16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc18:	a808      	add	r0, sp, #32
 801bc1a:	601c      	str	r4, [r3, #0]
 801bc1c:	f002 f868 	bl	801dcf0 <rcutils_string_map_fini>
 801bc20:	4683      	mov	fp, r0
 801bc22:	2800      	cmp	r0, #0
 801bc24:	d043      	beq.n	801bcae <rcl_node_resolve_name+0x19e>
 801bc26:	f7f9 fb5b 	bl	80152e0 <rcutils_get_error_string>
 801bc2a:	46a8      	mov	r8, r5
 801bc2c:	f04f 0b01 	mov.w	fp, #1
 801bc30:	462c      	mov	r4, r5
 801bc32:	f7f9 fb6d 	bl	8015310 <rcutils_reset_error>
 801bc36:	e00a      	b.n	801bc4e <rcl_node_resolve_name+0x13e>
 801bc38:	2867      	cmp	r0, #103	; 0x67
 801bc3a:	bf14      	ite	ne
 801bc3c:	f04f 0800 	movne.w	r8, #0
 801bc40:	f008 0801 	andeq.w	r8, r8, #1
 801bc44:	9c07      	ldr	r4, [sp, #28]
 801bc46:	a808      	add	r0, sp, #32
 801bc48:	f002 f852 	bl	801dcf0 <rcutils_string_map_fini>
 801bc4c:	bb50      	cbnz	r0, 801bca4 <rcl_node_resolve_name+0x194>
 801bc4e:	4651      	mov	r1, sl
 801bc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc52:	47c8      	blx	r9
 801bc54:	4651      	mov	r1, sl
 801bc56:	4620      	mov	r0, r4
 801bc58:	47c8      	blx	r9
 801bc5a:	f1b8 0f00 	cmp.w	r8, #0
 801bc5e:	bf18      	it	ne
 801bc60:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801bc64:	e797      	b.n	801bb96 <rcl_node_resolve_name+0x86>
 801bc66:	f7f9 fb3b 	bl	80152e0 <rcutils_get_error_string>
 801bc6a:	f7f9 fb51 	bl	8015310 <rcutils_reset_error>
 801bc6e:	a808      	add	r0, sp, #32
 801bc70:	f002 f83e 	bl	801dcf0 <rcutils_string_map_fini>
 801bc74:	b998      	cbnz	r0, 801bc9e <rcl_node_resolve_name+0x18e>
 801bc76:	4651      	mov	r1, sl
 801bc78:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc7a:	47c8      	blx	r9
 801bc7c:	4651      	mov	r1, sl
 801bc7e:	4620      	mov	r0, r4
 801bc80:	f04f 0b01 	mov.w	fp, #1
 801bc84:	47c8      	blx	r9
 801bc86:	e786      	b.n	801bb96 <rcl_node_resolve_name+0x86>
 801bc88:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801bc8c:	f7f9 fb28 	bl	80152e0 <rcutils_get_error_string>
 801bc90:	f7f9 fb3e 	bl	8015310 <rcutils_reset_error>
 801bc94:	4644      	mov	r4, r8
 801bc96:	e7da      	b.n	801bc4e <rcl_node_resolve_name+0x13e>
 801bc98:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801bc9c:	e7d3      	b.n	801bc46 <rcl_node_resolve_name+0x136>
 801bc9e:	46d8      	mov	r8, fp
 801bca0:	f04f 0b01 	mov.w	fp, #1
 801bca4:	f7f9 fb1c 	bl	80152e0 <rcutils_get_error_string>
 801bca8:	f7f9 fb32 	bl	8015310 <rcutils_reset_error>
 801bcac:	e7cf      	b.n	801bc4e <rcl_node_resolve_name+0x13e>
 801bcae:	4651      	mov	r1, sl
 801bcb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bcb2:	47c8      	blx	r9
 801bcb4:	4651      	mov	r1, sl
 801bcb6:	4658      	mov	r0, fp
 801bcb8:	47c8      	blx	r9
 801bcba:	e76c      	b.n	801bb96 <rcl_node_resolve_name+0x86>

0801bcbc <exact_match_lookup>:
 801bcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcbe:	f102 0708 	add.w	r7, r2, #8
 801bcc2:	460b      	mov	r3, r1
 801bcc4:	b085      	sub	sp, #20
 801bcc6:	4614      	mov	r4, r2
 801bcc8:	4606      	mov	r6, r0
 801bcca:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bcce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	4919      	ldr	r1, [pc, #100]	; (801bd3c <exact_match_lookup+0x80>)
 801bcd6:	e894 000c 	ldmia.w	r4, {r2, r3}
 801bcda:	f001 ff1b 	bl	801db14 <rcutils_join_path>
 801bcde:	7833      	ldrb	r3, [r6, #0]
 801bce0:	4605      	mov	r5, r0
 801bce2:	2b2f      	cmp	r3, #47	; 0x2f
 801bce4:	d023      	beq.n	801bd2e <exact_match_lookup+0x72>
 801bce6:	f104 030c 	add.w	r3, r4, #12
 801bcea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bcee:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bcf2:	1c70      	adds	r0, r6, #1
 801bcf4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bcf8:	f001 ff12 	bl	801db20 <rcutils_to_native_path>
 801bcfc:	4606      	mov	r6, r0
 801bcfe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bd02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bd06:	4631      	mov	r1, r6
 801bd08:	4628      	mov	r0, r5
 801bd0a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801bd0e:	f001 ff01 	bl	801db14 <rcutils_join_path>
 801bd12:	4603      	mov	r3, r0
 801bd14:	4630      	mov	r0, r6
 801bd16:	6862      	ldr	r2, [r4, #4]
 801bd18:	461e      	mov	r6, r3
 801bd1a:	6921      	ldr	r1, [r4, #16]
 801bd1c:	4790      	blx	r2
 801bd1e:	4628      	mov	r0, r5
 801bd20:	4635      	mov	r5, r6
 801bd22:	6863      	ldr	r3, [r4, #4]
 801bd24:	6921      	ldr	r1, [r4, #16]
 801bd26:	4798      	blx	r3
 801bd28:	4628      	mov	r0, r5
 801bd2a:	b005      	add	sp, #20
 801bd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd2e:	7873      	ldrb	r3, [r6, #1]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d1d8      	bne.n	801bce6 <exact_match_lookup+0x2a>
 801bd34:	4628      	mov	r0, r5
 801bd36:	b005      	add	sp, #20
 801bd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd3a:	bf00      	nop
 801bd3c:	08025b24 	.word	0x08025b24

0801bd40 <rcl_get_secure_root>:
 801bd40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd44:	b085      	sub	sp, #20
 801bd46:	b168      	cbz	r0, 801bd64 <rcl_get_secure_root+0x24>
 801bd48:	4607      	mov	r7, r0
 801bd4a:	4608      	mov	r0, r1
 801bd4c:	460c      	mov	r4, r1
 801bd4e:	f7f9 faa1 	bl	8015294 <rcutils_allocator_is_valid>
 801bd52:	b138      	cbz	r0, 801bd64 <rcl_get_secure_root+0x24>
 801bd54:	2300      	movs	r3, #0
 801bd56:	482d      	ldr	r0, [pc, #180]	; (801be0c <rcl_get_secure_root+0xcc>)
 801bd58:	a903      	add	r1, sp, #12
 801bd5a:	9303      	str	r3, [sp, #12]
 801bd5c:	f7f9 faa8 	bl	80152b0 <rcutils_get_env>
 801bd60:	4605      	mov	r5, r0
 801bd62:	b120      	cbz	r0, 801bd6e <rcl_get_secure_root+0x2e>
 801bd64:	2500      	movs	r5, #0
 801bd66:	4628      	mov	r0, r5
 801bd68:	b005      	add	sp, #20
 801bd6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd6e:	9b03      	ldr	r3, [sp, #12]
 801bd70:	781a      	ldrb	r2, [r3, #0]
 801bd72:	2a00      	cmp	r2, #0
 801bd74:	d0f6      	beq.n	801bd64 <rcl_get_secure_root+0x24>
 801bd76:	f104 090c 	add.w	r9, r4, #12
 801bd7a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bd7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bd82:	4618      	mov	r0, r3
 801bd84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bd88:	f7f9 fc18 	bl	80155bc <rcutils_strdup>
 801bd8c:	4680      	mov	r8, r0
 801bd8e:	2800      	cmp	r0, #0
 801bd90:	d0e8      	beq.n	801bd64 <rcl_get_secure_root+0x24>
 801bd92:	a903      	add	r1, sp, #12
 801bd94:	481e      	ldr	r0, [pc, #120]	; (801be10 <rcl_get_secure_root+0xd0>)
 801bd96:	9503      	str	r5, [sp, #12]
 801bd98:	f7f9 fa8a 	bl	80152b0 <rcutils_get_env>
 801bd9c:	b160      	cbz	r0, 801bdb8 <rcl_get_secure_root+0x78>
 801bd9e:	2600      	movs	r6, #0
 801bda0:	4630      	mov	r0, r6
 801bda2:	6863      	ldr	r3, [r4, #4]
 801bda4:	6921      	ldr	r1, [r4, #16]
 801bda6:	4798      	blx	r3
 801bda8:	4640      	mov	r0, r8
 801bdaa:	6863      	ldr	r3, [r4, #4]
 801bdac:	6921      	ldr	r1, [r4, #16]
 801bdae:	4798      	blx	r3
 801bdb0:	4628      	mov	r0, r5
 801bdb2:	b005      	add	sp, #20
 801bdb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdb8:	9b03      	ldr	r3, [sp, #12]
 801bdba:	781e      	ldrb	r6, [r3, #0]
 801bdbc:	b1f6      	cbz	r6, 801bdfc <rcl_get_secure_root+0xbc>
 801bdbe:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bdc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bdcc:	f7f9 fbf6 	bl	80155bc <rcutils_strdup>
 801bdd0:	4606      	mov	r6, r0
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d0e3      	beq.n	801bd9e <rcl_get_secure_root+0x5e>
 801bdd6:	4622      	mov	r2, r4
 801bdd8:	4641      	mov	r1, r8
 801bdda:	f7ff ff6f 	bl	801bcbc <exact_match_lookup>
 801bdde:	4605      	mov	r5, r0
 801bde0:	2d00      	cmp	r5, #0
 801bde2:	d0dd      	beq.n	801bda0 <rcl_get_secure_root+0x60>
 801bde4:	4628      	mov	r0, r5
 801bde6:	f001 fe93 	bl	801db10 <rcutils_is_directory>
 801bdea:	4603      	mov	r3, r0
 801bdec:	2800      	cmp	r0, #0
 801bdee:	d1d7      	bne.n	801bda0 <rcl_get_secure_root+0x60>
 801bdf0:	4628      	mov	r0, r5
 801bdf2:	6921      	ldr	r1, [r4, #16]
 801bdf4:	461d      	mov	r5, r3
 801bdf6:	6863      	ldr	r3, [r4, #4]
 801bdf8:	4798      	blx	r3
 801bdfa:	e7d1      	b.n	801bda0 <rcl_get_secure_root+0x60>
 801bdfc:	4622      	mov	r2, r4
 801bdfe:	4638      	mov	r0, r7
 801be00:	4641      	mov	r1, r8
 801be02:	f7ff ff5b 	bl	801bcbc <exact_match_lookup>
 801be06:	4605      	mov	r5, r0
 801be08:	e7ea      	b.n	801bde0 <rcl_get_secure_root+0xa0>
 801be0a:	bf00      	nop
 801be0c:	08025b30 	.word	0x08025b30
 801be10:	08025b48 	.word	0x08025b48

0801be14 <rcl_get_security_options_from_environment>:
 801be14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be18:	b082      	sub	sp, #8
 801be1a:	2300      	movs	r3, #0
 801be1c:	4606      	mov	r6, r0
 801be1e:	460f      	mov	r7, r1
 801be20:	4821      	ldr	r0, [pc, #132]	; (801bea8 <rcl_get_security_options_from_environment+0x94>)
 801be22:	a901      	add	r1, sp, #4
 801be24:	4690      	mov	r8, r2
 801be26:	9301      	str	r3, [sp, #4]
 801be28:	f7f9 fa42 	bl	80152b0 <rcutils_get_env>
 801be2c:	b120      	cbz	r0, 801be38 <rcl_get_security_options_from_environment+0x24>
 801be2e:	2501      	movs	r5, #1
 801be30:	4628      	mov	r0, r5
 801be32:	b002      	add	sp, #8
 801be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be38:	4604      	mov	r4, r0
 801be3a:	491c      	ldr	r1, [pc, #112]	; (801beac <rcl_get_security_options_from_environment+0x98>)
 801be3c:	9801      	ldr	r0, [sp, #4]
 801be3e:	f7e4 f9ff 	bl	8000240 <strcmp>
 801be42:	4605      	mov	r5, r0
 801be44:	b9f0      	cbnz	r0, 801be84 <rcl_get_security_options_from_environment+0x70>
 801be46:	9001      	str	r0, [sp, #4]
 801be48:	f1b8 0f00 	cmp.w	r8, #0
 801be4c:	d021      	beq.n	801be92 <rcl_get_security_options_from_environment+0x7e>
 801be4e:	a901      	add	r1, sp, #4
 801be50:	4817      	ldr	r0, [pc, #92]	; (801beb0 <rcl_get_security_options_from_environment+0x9c>)
 801be52:	f7f9 fa2d 	bl	80152b0 <rcutils_get_env>
 801be56:	2800      	cmp	r0, #0
 801be58:	d1e9      	bne.n	801be2e <rcl_get_security_options_from_environment+0x1a>
 801be5a:	4916      	ldr	r1, [pc, #88]	; (801beb4 <rcl_get_security_options_from_environment+0xa0>)
 801be5c:	9801      	ldr	r0, [sp, #4]
 801be5e:	f7e4 f9ef 	bl	8000240 <strcmp>
 801be62:	4603      	mov	r3, r0
 801be64:	4639      	mov	r1, r7
 801be66:	4630      	mov	r0, r6
 801be68:	fab3 f383 	clz	r3, r3
 801be6c:	095b      	lsrs	r3, r3, #5
 801be6e:	f888 3000 	strb.w	r3, [r8]
 801be72:	f7ff ff65 	bl	801bd40 <rcl_get_secure_root>
 801be76:	b170      	cbz	r0, 801be96 <rcl_get_security_options_from_environment+0x82>
 801be78:	f8c8 0004 	str.w	r0, [r8, #4]
 801be7c:	4628      	mov	r0, r5
 801be7e:	b002      	add	sp, #8
 801be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be84:	4625      	mov	r5, r4
 801be86:	f888 4000 	strb.w	r4, [r8]
 801be8a:	4628      	mov	r0, r5
 801be8c:	b002      	add	sp, #8
 801be8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be92:	250b      	movs	r5, #11
 801be94:	e7cc      	b.n	801be30 <rcl_get_security_options_from_environment+0x1c>
 801be96:	f898 5000 	ldrb.w	r5, [r8]
 801be9a:	f1a5 0501 	sub.w	r5, r5, #1
 801be9e:	fab5 f585 	clz	r5, r5
 801bea2:	096d      	lsrs	r5, r5, #5
 801bea4:	e7c4      	b.n	801be30 <rcl_get_security_options_from_environment+0x1c>
 801bea6:	bf00      	nop
 801bea8:	08025ae8 	.word	0x08025ae8
 801beac:	08025afc 	.word	0x08025afc
 801beb0:	08025b04 	.word	0x08025b04
 801beb4:	08025b1c 	.word	0x08025b1c

0801beb8 <rcl_get_system_time>:
 801beb8:	4608      	mov	r0, r1
 801beba:	f7f9 bbbd 	b.w	8015638 <rcutils_system_time_now>
 801bebe:	bf00      	nop

0801bec0 <rcl_get_steady_time>:
 801bec0:	4608      	mov	r0, r1
 801bec2:	f7f9 bbdf 	b.w	8015684 <rcutils_steady_time_now>
 801bec6:	bf00      	nop

0801bec8 <rcl_get_ros_time>:
 801bec8:	7a03      	ldrb	r3, [r0, #8]
 801beca:	b510      	push	{r4, lr}
 801becc:	460c      	mov	r4, r1
 801bece:	b143      	cbz	r3, 801bee2 <rcl_get_ros_time+0x1a>
 801bed0:	2105      	movs	r1, #5
 801bed2:	f001 fd79 	bl	801d9c8 <__atomic_load_8>
 801bed6:	4602      	mov	r2, r0
 801bed8:	460b      	mov	r3, r1
 801beda:	2000      	movs	r0, #0
 801bedc:	e9c4 2300 	strd	r2, r3, [r4]
 801bee0:	bd10      	pop	{r4, pc}
 801bee2:	4608      	mov	r0, r1
 801bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bee8:	f7f9 bba6 	b.w	8015638 <rcutils_system_time_now>

0801beec <rcl_clock_init>:
 801beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beee:	4605      	mov	r5, r0
 801bef0:	4610      	mov	r0, r2
 801bef2:	4614      	mov	r4, r2
 801bef4:	460e      	mov	r6, r1
 801bef6:	f7f9 f9cd 	bl	8015294 <rcutils_allocator_is_valid>
 801befa:	b128      	cbz	r0, 801bf08 <rcl_clock_init+0x1c>
 801befc:	2d03      	cmp	r5, #3
 801befe:	d803      	bhi.n	801bf08 <rcl_clock_init+0x1c>
 801bf00:	e8df f005 	tbb	[pc, r5]
 801bf04:	0659301f 	.word	0x0659301f
 801bf08:	f04f 0c0b 	mov.w	ip, #11
 801bf0c:	4660      	mov	r0, ip
 801bf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf10:	2c00      	cmp	r4, #0
 801bf12:	d0f9      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bf14:	fab6 f386 	clz	r3, r6
 801bf18:	095b      	lsrs	r3, r3, #5
 801bf1a:	2e00      	cmp	r6, #0
 801bf1c:	d0f4      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bf1e:	6133      	str	r3, [r6, #16]
 801bf20:	469c      	mov	ip, r3
 801bf22:	f106 0514 	add.w	r5, r6, #20
 801bf26:	4f32      	ldr	r7, [pc, #200]	; (801bff0 <rcl_clock_init+0x104>)
 801bf28:	f04f 0e03 	mov.w	lr, #3
 801bf2c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bf30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf34:	6823      	ldr	r3, [r4, #0]
 801bf36:	4660      	mov	r0, ip
 801bf38:	602b      	str	r3, [r5, #0]
 801bf3a:	60f7      	str	r7, [r6, #12]
 801bf3c:	f886 e000 	strb.w	lr, [r6]
 801bf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf42:	2e00      	cmp	r6, #0
 801bf44:	d0e0      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bf46:	2300      	movs	r3, #0
 801bf48:	f106 0514 	add.w	r5, r6, #20
 801bf4c:	7033      	strb	r3, [r6, #0]
 801bf4e:	469c      	mov	ip, r3
 801bf50:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bf54:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bf58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf5c:	6823      	ldr	r3, [r4, #0]
 801bf5e:	4660      	mov	r0, ip
 801bf60:	602b      	str	r3, [r5, #0]
 801bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf64:	2c00      	cmp	r4, #0
 801bf66:	d0cf      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bf68:	fab6 f586 	clz	r5, r6
 801bf6c:	096d      	lsrs	r5, r5, #5
 801bf6e:	2e00      	cmp	r6, #0
 801bf70:	d0ca      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bf72:	46a6      	mov	lr, r4
 801bf74:	7035      	strb	r5, [r6, #0]
 801bf76:	f106 0c14 	add.w	ip, r6, #20
 801bf7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bf7e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bf82:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bf86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bf8a:	f8de 3000 	ldr.w	r3, [lr]
 801bf8e:	2010      	movs	r0, #16
 801bf90:	f8cc 3000 	str.w	r3, [ip]
 801bf94:	6823      	ldr	r3, [r4, #0]
 801bf96:	6921      	ldr	r1, [r4, #16]
 801bf98:	4798      	blx	r3
 801bf9a:	6130      	str	r0, [r6, #16]
 801bf9c:	b320      	cbz	r0, 801bfe8 <rcl_clock_init+0xfc>
 801bf9e:	2200      	movs	r2, #0
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	46ac      	mov	ip, r5
 801bfa4:	7205      	strb	r5, [r0, #8]
 801bfa6:	e9c0 2300 	strd	r2, r3, [r0]
 801bfaa:	4a12      	ldr	r2, [pc, #72]	; (801bff4 <rcl_clock_init+0x108>)
 801bfac:	2301      	movs	r3, #1
 801bfae:	4660      	mov	r0, ip
 801bfb0:	60f2      	str	r2, [r6, #12]
 801bfb2:	7033      	strb	r3, [r6, #0]
 801bfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfb6:	2c00      	cmp	r4, #0
 801bfb8:	d0a6      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bfba:	fab6 f386 	clz	r3, r6
 801bfbe:	095b      	lsrs	r3, r3, #5
 801bfc0:	2e00      	cmp	r6, #0
 801bfc2:	d0a1      	beq.n	801bf08 <rcl_clock_init+0x1c>
 801bfc4:	6133      	str	r3, [r6, #16]
 801bfc6:	469c      	mov	ip, r3
 801bfc8:	f106 0514 	add.w	r5, r6, #20
 801bfcc:	f8df e028 	ldr.w	lr, [pc, #40]	; 801bff8 <rcl_clock_init+0x10c>
 801bfd0:	2702      	movs	r7, #2
 801bfd2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bfd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bfd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bfda:	6823      	ldr	r3, [r4, #0]
 801bfdc:	4660      	mov	r0, ip
 801bfde:	602b      	str	r3, [r5, #0]
 801bfe0:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bfe4:	7037      	strb	r7, [r6, #0]
 801bfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfe8:	f04f 0c0a 	mov.w	ip, #10
 801bfec:	e78e      	b.n	801bf0c <rcl_clock_init+0x20>
 801bfee:	bf00      	nop
 801bff0:	0801bec1 	.word	0x0801bec1
 801bff4:	0801bec9 	.word	0x0801bec9
 801bff8:	0801beb9 	.word	0x0801beb9

0801bffc <rcl_clock_get_now>:
 801bffc:	b140      	cbz	r0, 801c010 <rcl_clock_get_now+0x14>
 801bffe:	b139      	cbz	r1, 801c010 <rcl_clock_get_now+0x14>
 801c000:	7803      	ldrb	r3, [r0, #0]
 801c002:	b11b      	cbz	r3, 801c00c <rcl_clock_get_now+0x10>
 801c004:	68c3      	ldr	r3, [r0, #12]
 801c006:	b10b      	cbz	r3, 801c00c <rcl_clock_get_now+0x10>
 801c008:	6900      	ldr	r0, [r0, #16]
 801c00a:	4718      	bx	r3
 801c00c:	2001      	movs	r0, #1
 801c00e:	4770      	bx	lr
 801c010:	200b      	movs	r0, #11
 801c012:	4770      	bx	lr

0801c014 <rcl_timer_call>:
 801c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c018:	b087      	sub	sp, #28
 801c01a:	2800      	cmp	r0, #0
 801c01c:	d06c      	beq.n	801c0f8 <rcl_timer_call+0xe4>
 801c01e:	6803      	ldr	r3, [r0, #0]
 801c020:	4604      	mov	r4, r0
 801c022:	2b00      	cmp	r3, #0
 801c024:	d062      	beq.n	801c0ec <rcl_timer_call+0xd8>
 801c026:	f3bf 8f5b 	dmb	ish
 801c02a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c02e:	f3bf 8f5b 	dmb	ish
 801c032:	2b00      	cmp	r3, #0
 801c034:	d14f      	bne.n	801c0d6 <rcl_timer_call+0xc2>
 801c036:	6803      	ldr	r3, [r0, #0]
 801c038:	a904      	add	r1, sp, #16
 801c03a:	6818      	ldr	r0, [r3, #0]
 801c03c:	f7ff ffde 	bl	801bffc <rcl_clock_get_now>
 801c040:	4605      	mov	r5, r0
 801c042:	2800      	cmp	r0, #0
 801c044:	d149      	bne.n	801c0da <rcl_timer_call+0xc6>
 801c046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	db49      	blt.n	801c0e2 <rcl_timer_call+0xce>
 801c04e:	2605      	movs	r6, #5
 801c050:	6820      	ldr	r0, [r4, #0]
 801c052:	9600      	str	r6, [sp, #0]
 801c054:	3020      	adds	r0, #32
 801c056:	f001 fd23 	bl	801daa0 <__atomic_exchange_8>
 801c05a:	6823      	ldr	r3, [r4, #0]
 801c05c:	4680      	mov	r8, r0
 801c05e:	f3bf 8f5b 	dmb	ish
 801c062:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c066:	f3bf 8f5b 	dmb	ish
 801c06a:	6820      	ldr	r0, [r4, #0]
 801c06c:	4689      	mov	r9, r1
 801c06e:	4631      	mov	r1, r6
 801c070:	3028      	adds	r0, #40	; 0x28
 801c072:	f001 fca9 	bl	801d9c8 <__atomic_load_8>
 801c076:	460f      	mov	r7, r1
 801c078:	4631      	mov	r1, r6
 801c07a:	4606      	mov	r6, r0
 801c07c:	6820      	ldr	r0, [r4, #0]
 801c07e:	3018      	adds	r0, #24
 801c080:	f001 fca2 	bl	801d9c8 <__atomic_load_8>
 801c084:	4602      	mov	r2, r0
 801c086:	9804      	ldr	r0, [sp, #16]
 801c088:	460b      	mov	r3, r1
 801c08a:	18b6      	adds	r6, r6, r2
 801c08c:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c090:	4692      	mov	sl, r2
 801c092:	eb47 0701 	adc.w	r7, r7, r1
 801c096:	4286      	cmp	r6, r0
 801c098:	eb77 010c 	sbcs.w	r1, r7, ip
 801c09c:	da04      	bge.n	801c0a8 <rcl_timer_call+0x94>
 801c09e:	ea53 0102 	orrs.w	r1, r3, r2
 801c0a2:	d12e      	bne.n	801c102 <rcl_timer_call+0xee>
 801c0a4:	4606      	mov	r6, r0
 801c0a6:	4667      	mov	r7, ip
 801c0a8:	6820      	ldr	r0, [r4, #0]
 801c0aa:	2105      	movs	r1, #5
 801c0ac:	4632      	mov	r2, r6
 801c0ae:	463b      	mov	r3, r7
 801c0b0:	3028      	adds	r0, #40	; 0x28
 801c0b2:	9100      	str	r1, [sp, #0]
 801c0b4:	f001 fcbe 	bl	801da34 <__atomic_store_8>
 801c0b8:	f1bb 0f00 	cmp.w	fp, #0
 801c0bc:	d00d      	beq.n	801c0da <rcl_timer_call+0xc6>
 801c0be:	9a04      	ldr	r2, [sp, #16]
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	9b05      	ldr	r3, [sp, #20]
 801c0c4:	ebb2 0208 	subs.w	r2, r2, r8
 801c0c8:	eb63 0309 	sbc.w	r3, r3, r9
 801c0cc:	47d8      	blx	fp
 801c0ce:	4628      	mov	r0, r5
 801c0d0:	b007      	add	sp, #28
 801c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0d6:	f240 3521 	movw	r5, #801	; 0x321
 801c0da:	4628      	mov	r0, r5
 801c0dc:	b007      	add	sp, #28
 801c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0e2:	2501      	movs	r5, #1
 801c0e4:	4628      	mov	r0, r5
 801c0e6:	b007      	add	sp, #28
 801c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ec:	f44f 7548 	mov.w	r5, #800	; 0x320
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	b007      	add	sp, #28
 801c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0f8:	250b      	movs	r5, #11
 801c0fa:	4628      	mov	r0, r5
 801c0fc:	b007      	add	sp, #28
 801c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c102:	1b80      	subs	r0, r0, r6
 801c104:	eb6c 0107 	sbc.w	r1, ip, r7
 801c108:	3801      	subs	r0, #1
 801c10a:	f161 0100 	sbc.w	r1, r1, #0
 801c10e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c112:	f7e4 fab9 	bl	8000688 <__aeabi_ldivmod>
 801c116:	9b02      	ldr	r3, [sp, #8]
 801c118:	3001      	adds	r0, #1
 801c11a:	f141 0100 	adc.w	r1, r1, #0
 801c11e:	fb00 f303 	mul.w	r3, r0, r3
 801c122:	fb01 330a 	mla	r3, r1, sl, r3
 801c126:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c12a:	1986      	adds	r6, r0, r6
 801c12c:	4453      	add	r3, sl
 801c12e:	eb43 0707 	adc.w	r7, r3, r7
 801c132:	e7b9      	b.n	801c0a8 <rcl_timer_call+0x94>

0801c134 <rcl_timer_is_ready>:
 801c134:	b570      	push	{r4, r5, r6, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	b380      	cbz	r0, 801c19c <rcl_timer_is_ready+0x68>
 801c13a:	6803      	ldr	r3, [r0, #0]
 801c13c:	4604      	mov	r4, r0
 801c13e:	b38b      	cbz	r3, 801c1a4 <rcl_timer_is_ready+0x70>
 801c140:	460d      	mov	r5, r1
 801c142:	b359      	cbz	r1, 801c19c <rcl_timer_is_ready+0x68>
 801c144:	f3bf 8f5b 	dmb	ish
 801c148:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c14c:	f3bf 8f5b 	dmb	ish
 801c150:	b953      	cbnz	r3, 801c168 <rcl_timer_is_ready+0x34>
 801c152:	6803      	ldr	r3, [r0, #0]
 801c154:	4669      	mov	r1, sp
 801c156:	6818      	ldr	r0, [r3, #0]
 801c158:	f7ff ff50 	bl	801bffc <rcl_clock_get_now>
 801c15c:	4606      	mov	r6, r0
 801c15e:	b148      	cbz	r0, 801c174 <rcl_timer_is_ready+0x40>
 801c160:	f240 3321 	movw	r3, #801	; 0x321
 801c164:	4298      	cmp	r0, r3
 801c166:	d102      	bne.n	801c16e <rcl_timer_is_ready+0x3a>
 801c168:	2300      	movs	r3, #0
 801c16a:	461e      	mov	r6, r3
 801c16c:	702b      	strb	r3, [r5, #0]
 801c16e:	4630      	mov	r0, r6
 801c170:	b002      	add	sp, #8
 801c172:	bd70      	pop	{r4, r5, r6, pc}
 801c174:	6820      	ldr	r0, [r4, #0]
 801c176:	2105      	movs	r1, #5
 801c178:	3028      	adds	r0, #40	; 0x28
 801c17a:	f001 fc25 	bl	801d9c8 <__atomic_load_8>
 801c17e:	9b00      	ldr	r3, [sp, #0]
 801c180:	1ac0      	subs	r0, r0, r3
 801c182:	9b01      	ldr	r3, [sp, #4]
 801c184:	eb61 0103 	sbc.w	r1, r1, r3
 801c188:	2801      	cmp	r0, #1
 801c18a:	4630      	mov	r0, r6
 801c18c:	f171 0300 	sbcs.w	r3, r1, #0
 801c190:	bfb4      	ite	lt
 801c192:	2301      	movlt	r3, #1
 801c194:	2300      	movge	r3, #0
 801c196:	702b      	strb	r3, [r5, #0]
 801c198:	b002      	add	sp, #8
 801c19a:	bd70      	pop	{r4, r5, r6, pc}
 801c19c:	260b      	movs	r6, #11
 801c19e:	4630      	mov	r0, r6
 801c1a0:	b002      	add	sp, #8
 801c1a2:	bd70      	pop	{r4, r5, r6, pc}
 801c1a4:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c1a8:	e7e1      	b.n	801c16e <rcl_timer_is_ready+0x3a>
 801c1aa:	bf00      	nop

0801c1ac <rcl_timer_get_time_until_next_call>:
 801c1ac:	b570      	push	{r4, r5, r6, lr}
 801c1ae:	b082      	sub	sp, #8
 801c1b0:	b330      	cbz	r0, 801c200 <rcl_timer_get_time_until_next_call+0x54>
 801c1b2:	6803      	ldr	r3, [r0, #0]
 801c1b4:	4604      	mov	r4, r0
 801c1b6:	b33b      	cbz	r3, 801c208 <rcl_timer_get_time_until_next_call+0x5c>
 801c1b8:	460d      	mov	r5, r1
 801c1ba:	b309      	cbz	r1, 801c200 <rcl_timer_get_time_until_next_call+0x54>
 801c1bc:	f3bf 8f5b 	dmb	ish
 801c1c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c1c4:	f3bf 8f5b 	dmb	ish
 801c1c8:	b9ab      	cbnz	r3, 801c1f6 <rcl_timer_get_time_until_next_call+0x4a>
 801c1ca:	6803      	ldr	r3, [r0, #0]
 801c1cc:	4669      	mov	r1, sp
 801c1ce:	6818      	ldr	r0, [r3, #0]
 801c1d0:	f7ff ff14 	bl	801bffc <rcl_clock_get_now>
 801c1d4:	4606      	mov	r6, r0
 801c1d6:	b958      	cbnz	r0, 801c1f0 <rcl_timer_get_time_until_next_call+0x44>
 801c1d8:	6820      	ldr	r0, [r4, #0]
 801c1da:	2105      	movs	r1, #5
 801c1dc:	3028      	adds	r0, #40	; 0x28
 801c1de:	f001 fbf3 	bl	801d9c8 <__atomic_load_8>
 801c1e2:	9b00      	ldr	r3, [sp, #0]
 801c1e4:	1ac0      	subs	r0, r0, r3
 801c1e6:	9b01      	ldr	r3, [sp, #4]
 801c1e8:	eb61 0103 	sbc.w	r1, r1, r3
 801c1ec:	6028      	str	r0, [r5, #0]
 801c1ee:	6069      	str	r1, [r5, #4]
 801c1f0:	4630      	mov	r0, r6
 801c1f2:	b002      	add	sp, #8
 801c1f4:	bd70      	pop	{r4, r5, r6, pc}
 801c1f6:	f240 3621 	movw	r6, #801	; 0x321
 801c1fa:	4630      	mov	r0, r6
 801c1fc:	b002      	add	sp, #8
 801c1fe:	bd70      	pop	{r4, r5, r6, pc}
 801c200:	260b      	movs	r6, #11
 801c202:	4630      	mov	r0, r6
 801c204:	b002      	add	sp, #8
 801c206:	bd70      	pop	{r4, r5, r6, pc}
 801c208:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c20c:	e7f0      	b.n	801c1f0 <rcl_timer_get_time_until_next_call+0x44>
 801c20e:	bf00      	nop

0801c210 <rcl_timer_get_guard_condition>:
 801c210:	b130      	cbz	r0, 801c220 <rcl_timer_get_guard_condition+0x10>
 801c212:	6800      	ldr	r0, [r0, #0]
 801c214:	b120      	cbz	r0, 801c220 <rcl_timer_get_guard_condition+0x10>
 801c216:	68c3      	ldr	r3, [r0, #12]
 801c218:	b10b      	cbz	r3, 801c21e <rcl_timer_get_guard_condition+0xe>
 801c21a:	3008      	adds	r0, #8
 801c21c:	4770      	bx	lr
 801c21e:	4618      	mov	r0, r3
 801c220:	4770      	bx	lr
 801c222:	bf00      	nop

0801c224 <rcl_validate_enclave_name_with_size>:
 801c224:	2800      	cmp	r0, #0
 801c226:	d049      	beq.n	801c2bc <rcl_validate_enclave_name_with_size+0x98>
 801c228:	b570      	push	{r4, r5, r6, lr}
 801c22a:	4615      	mov	r5, r2
 801c22c:	b0c2      	sub	sp, #264	; 0x108
 801c22e:	b19a      	cbz	r2, 801c258 <rcl_validate_enclave_name_with_size+0x34>
 801c230:	461e      	mov	r6, r3
 801c232:	466a      	mov	r2, sp
 801c234:	ab01      	add	r3, sp, #4
 801c236:	460c      	mov	r4, r1
 801c238:	f7f9 fa8a 	bl	8015750 <rmw_validate_namespace_with_size>
 801c23c:	4684      	mov	ip, r0
 801c23e:	b9b8      	cbnz	r0, 801c270 <rcl_validate_enclave_name_with_size+0x4c>
 801c240:	9900      	ldr	r1, [sp, #0]
 801c242:	b171      	cbz	r1, 801c262 <rcl_validate_enclave_name_with_size+0x3e>
 801c244:	2907      	cmp	r1, #7
 801c246:	d019      	beq.n	801c27c <rcl_validate_enclave_name_with_size+0x58>
 801c248:	1e4b      	subs	r3, r1, #1
 801c24a:	2b05      	cmp	r3, #5
 801c24c:	d83a      	bhi.n	801c2c4 <rcl_validate_enclave_name_with_size+0xa0>
 801c24e:	e8df f003 	tbb	[pc, r3]
 801c252:	2926      	.short	0x2926
 801c254:	1d322f2c 	.word	0x1d322f2c
 801c258:	f04f 0c0b 	mov.w	ip, #11
 801c25c:	4660      	mov	r0, ip
 801c25e:	b042      	add	sp, #264	; 0x108
 801c260:	bd70      	pop	{r4, r5, r6, pc}
 801c262:	2907      	cmp	r1, #7
 801c264:	d00a      	beq.n	801c27c <rcl_validate_enclave_name_with_size+0x58>
 801c266:	2300      	movs	r3, #0
 801c268:	4660      	mov	r0, ip
 801c26a:	602b      	str	r3, [r5, #0]
 801c26c:	b042      	add	sp, #264	; 0x108
 801c26e:	bd70      	pop	{r4, r5, r6, pc}
 801c270:	f7ff f9f4 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 801c274:	4684      	mov	ip, r0
 801c276:	4660      	mov	r0, ip
 801c278:	b042      	add	sp, #264	; 0x108
 801c27a:	bd70      	pop	{r4, r5, r6, pc}
 801c27c:	2cff      	cmp	r4, #255	; 0xff
 801c27e:	d9f2      	bls.n	801c266 <rcl_validate_enclave_name_with_size+0x42>
 801c280:	6029      	str	r1, [r5, #0]
 801c282:	2e00      	cmp	r6, #0
 801c284:	d0ea      	beq.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c286:	23fe      	movs	r3, #254	; 0xfe
 801c288:	6033      	str	r3, [r6, #0]
 801c28a:	e7e7      	b.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c28c:	2306      	movs	r3, #6
 801c28e:	602b      	str	r3, [r5, #0]
 801c290:	2e00      	cmp	r6, #0
 801c292:	d0e3      	beq.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c294:	9b01      	ldr	r3, [sp, #4]
 801c296:	4660      	mov	r0, ip
 801c298:	6033      	str	r3, [r6, #0]
 801c29a:	b042      	add	sp, #264	; 0x108
 801c29c:	bd70      	pop	{r4, r5, r6, pc}
 801c29e:	2301      	movs	r3, #1
 801c2a0:	602b      	str	r3, [r5, #0]
 801c2a2:	e7f5      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2a4:	2302      	movs	r3, #2
 801c2a6:	602b      	str	r3, [r5, #0]
 801c2a8:	e7f2      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2aa:	2303      	movs	r3, #3
 801c2ac:	602b      	str	r3, [r5, #0]
 801c2ae:	e7ef      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2b0:	2304      	movs	r3, #4
 801c2b2:	602b      	str	r3, [r5, #0]
 801c2b4:	e7ec      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2b6:	2305      	movs	r3, #5
 801c2b8:	602b      	str	r3, [r5, #0]
 801c2ba:	e7e9      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2bc:	f04f 0c0b 	mov.w	ip, #11
 801c2c0:	4660      	mov	r0, ip
 801c2c2:	4770      	bx	lr
 801c2c4:	460b      	mov	r3, r1
 801c2c6:	4a04      	ldr	r2, [pc, #16]	; (801c2d8 <rcl_validate_enclave_name_with_size+0xb4>)
 801c2c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c2cc:	a802      	add	r0, sp, #8
 801c2ce:	f7f9 f927 	bl	8015520 <rcutils_snprintf>
 801c2d2:	f04f 0c01 	mov.w	ip, #1
 801c2d6:	e7c1      	b.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c2d8:	08025b68 	.word	0x08025b68

0801c2dc <rcl_validate_enclave_name>:
 801c2dc:	b168      	cbz	r0, 801c2fa <rcl_validate_enclave_name+0x1e>
 801c2de:	b570      	push	{r4, r5, r6, lr}
 801c2e0:	460d      	mov	r5, r1
 801c2e2:	4616      	mov	r6, r2
 801c2e4:	4604      	mov	r4, r0
 801c2e6:	f7e4 f80b 	bl	8000300 <strlen>
 801c2ea:	4633      	mov	r3, r6
 801c2ec:	4601      	mov	r1, r0
 801c2ee:	462a      	mov	r2, r5
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2f6:	f7ff bf95 	b.w	801c224 <rcl_validate_enclave_name_with_size>
 801c2fa:	200b      	movs	r0, #11
 801c2fc:	4770      	bx	lr
 801c2fe:	bf00      	nop

0801c300 <rcl_get_zero_initialized_wait_set>:
 801c300:	b510      	push	{r4, lr}
 801c302:	4c08      	ldr	r4, [pc, #32]	; (801c324 <rcl_get_zero_initialized_wait_set+0x24>)
 801c304:	4686      	mov	lr, r0
 801c306:	4684      	mov	ip, r0
 801c308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c30a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c30e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c310:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c316:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c31a:	6823      	ldr	r3, [r4, #0]
 801c31c:	4670      	mov	r0, lr
 801c31e:	f8cc 3000 	str.w	r3, [ip]
 801c322:	bd10      	pop	{r4, pc}
 801c324:	08025bc8 	.word	0x08025bc8

0801c328 <rcl_wait_set_is_valid>:
 801c328:	b118      	cbz	r0, 801c332 <rcl_wait_set_is_valid+0xa>
 801c32a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c32c:	3800      	subs	r0, #0
 801c32e:	bf18      	it	ne
 801c330:	2001      	movne	r0, #1
 801c332:	4770      	bx	lr

0801c334 <rcl_wait_set_fini>:
 801c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c338:	b082      	sub	sp, #8
 801c33a:	2800      	cmp	r0, #0
 801c33c:	f000 8095 	beq.w	801c46a <rcl_wait_set_fini+0x136>
 801c340:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c342:	4604      	mov	r4, r0
 801c344:	2e00      	cmp	r6, #0
 801c346:	f000 808c 	beq.w	801c462 <rcl_wait_set_fini+0x12e>
 801c34a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c34c:	f002 f9c0 	bl	801e6d0 <rmw_destroy_wait_set>
 801c350:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c352:	1e06      	subs	r6, r0, #0
 801c354:	bf18      	it	ne
 801c356:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c35a:	2d00      	cmp	r5, #0
 801c35c:	f000 8081 	beq.w	801c462 <rcl_wait_set_fini+0x12e>
 801c360:	2700      	movs	r7, #0
 801c362:	6820      	ldr	r0, [r4, #0]
 801c364:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c368:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c36a:	6067      	str	r7, [r4, #4]
 801c36c:	602f      	str	r7, [r5, #0]
 801c36e:	b120      	cbz	r0, 801c37a <rcl_wait_set_fini+0x46>
 801c370:	9101      	str	r1, [sp, #4]
 801c372:	47c0      	blx	r8
 801c374:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c376:	9901      	ldr	r1, [sp, #4]
 801c378:	6027      	str	r7, [r4, #0]
 801c37a:	68a8      	ldr	r0, [r5, #8]
 801c37c:	b120      	cbz	r0, 801c388 <rcl_wait_set_fini+0x54>
 801c37e:	47c0      	blx	r8
 801c380:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c382:	2300      	movs	r3, #0
 801c384:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c388:	f04f 0800 	mov.w	r8, #0
 801c38c:	68a0      	ldr	r0, [r4, #8]
 801c38e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c390:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c392:	f8c4 800c 	str.w	r8, [r4, #12]
 801c396:	f8c5 800c 	str.w	r8, [r5, #12]
 801c39a:	b128      	cbz	r0, 801c3a8 <rcl_wait_set_fini+0x74>
 801c39c:	47b8      	blx	r7
 801c39e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3a0:	f8c4 8008 	str.w	r8, [r4, #8]
 801c3a4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c3a6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c3a8:	f04f 0800 	mov.w	r8, #0
 801c3ac:	6968      	ldr	r0, [r5, #20]
 801c3ae:	f8c5 8010 	str.w	r8, [r5, #16]
 801c3b2:	b128      	cbz	r0, 801c3c0 <rcl_wait_set_fini+0x8c>
 801c3b4:	47b8      	blx	r7
 801c3b6:	f8c5 8014 	str.w	r8, [r5, #20]
 801c3ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3bc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c3be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c3c0:	f04f 0800 	mov.w	r8, #0
 801c3c4:	6920      	ldr	r0, [r4, #16]
 801c3c6:	f8c4 8014 	str.w	r8, [r4, #20]
 801c3ca:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c3ce:	b128      	cbz	r0, 801c3dc <rcl_wait_set_fini+0xa8>
 801c3d0:	47b8      	blx	r7
 801c3d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3d4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c3d8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c3da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c3dc:	f04f 0800 	mov.w	r8, #0
 801c3e0:	69a0      	ldr	r0, [r4, #24]
 801c3e2:	f8c4 801c 	str.w	r8, [r4, #28]
 801c3e6:	f8c5 8018 	str.w	r8, [r5, #24]
 801c3ea:	b128      	cbz	r0, 801c3f8 <rcl_wait_set_fini+0xc4>
 801c3ec:	9101      	str	r1, [sp, #4]
 801c3ee:	47b8      	blx	r7
 801c3f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3f2:	9901      	ldr	r1, [sp, #4]
 801c3f4:	f8c4 8018 	str.w	r8, [r4, #24]
 801c3f8:	6a28      	ldr	r0, [r5, #32]
 801c3fa:	b120      	cbz	r0, 801c406 <rcl_wait_set_fini+0xd2>
 801c3fc:	47b8      	blx	r7
 801c3fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c400:	2300      	movs	r3, #0
 801c402:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c406:	2700      	movs	r7, #0
 801c408:	6a20      	ldr	r0, [r4, #32]
 801c40a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c40e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c410:	6267      	str	r7, [r4, #36]	; 0x24
 801c412:	626f      	str	r7, [r5, #36]	; 0x24
 801c414:	b120      	cbz	r0, 801c420 <rcl_wait_set_fini+0xec>
 801c416:	9101      	str	r1, [sp, #4]
 801c418:	47c0      	blx	r8
 801c41a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c41c:	9901      	ldr	r1, [sp, #4]
 801c41e:	6227      	str	r7, [r4, #32]
 801c420:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c422:	b120      	cbz	r0, 801c42e <rcl_wait_set_fini+0xfa>
 801c424:	47c0      	blx	r8
 801c426:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c428:	2300      	movs	r3, #0
 801c42a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c42e:	2700      	movs	r7, #0
 801c430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c432:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c436:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c438:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c43a:	632f      	str	r7, [r5, #48]	; 0x30
 801c43c:	b120      	cbz	r0, 801c448 <rcl_wait_set_fini+0x114>
 801c43e:	9101      	str	r1, [sp, #4]
 801c440:	47c0      	blx	r8
 801c442:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c444:	9901      	ldr	r1, [sp, #4]
 801c446:	62a7      	str	r7, [r4, #40]	; 0x28
 801c448:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c44a:	b120      	cbz	r0, 801c456 <rcl_wait_set_fini+0x122>
 801c44c:	47c0      	blx	r8
 801c44e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c450:	2300      	movs	r3, #0
 801c452:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c456:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c458:	4628      	mov	r0, r5
 801c45a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c45c:	4798      	blx	r3
 801c45e:	2300      	movs	r3, #0
 801c460:	6323      	str	r3, [r4, #48]	; 0x30
 801c462:	4630      	mov	r0, r6
 801c464:	b002      	add	sp, #8
 801c466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c46a:	260b      	movs	r6, #11
 801c46c:	4630      	mov	r0, r6
 801c46e:	b002      	add	sp, #8
 801c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c474 <rcl_wait_set_add_subscription>:
 801c474:	b318      	cbz	r0, 801c4be <rcl_wait_set_add_subscription+0x4a>
 801c476:	b538      	push	{r3, r4, r5, lr}
 801c478:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c47a:	4604      	mov	r4, r0
 801c47c:	b30b      	cbz	r3, 801c4c2 <rcl_wait_set_add_subscription+0x4e>
 801c47e:	b319      	cbz	r1, 801c4c8 <rcl_wait_set_add_subscription+0x54>
 801c480:	681d      	ldr	r5, [r3, #0]
 801c482:	6840      	ldr	r0, [r0, #4]
 801c484:	4285      	cmp	r5, r0
 801c486:	d217      	bcs.n	801c4b8 <rcl_wait_set_add_subscription+0x44>
 801c488:	1c68      	adds	r0, r5, #1
 801c48a:	6018      	str	r0, [r3, #0]
 801c48c:	6823      	ldr	r3, [r4, #0]
 801c48e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c492:	b102      	cbz	r2, 801c496 <rcl_wait_set_add_subscription+0x22>
 801c494:	6015      	str	r5, [r2, #0]
 801c496:	4608      	mov	r0, r1
 801c498:	f7f7 ff14 	bl	80142c4 <rcl_subscription_get_rmw_handle>
 801c49c:	b150      	cbz	r0, 801c4b4 <rcl_wait_set_add_subscription+0x40>
 801c49e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4a0:	6842      	ldr	r2, [r0, #4]
 801c4a2:	2000      	movs	r0, #0
 801c4a4:	689b      	ldr	r3, [r3, #8]
 801c4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c4aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c4ac:	6853      	ldr	r3, [r2, #4]
 801c4ae:	3301      	adds	r3, #1
 801c4b0:	6053      	str	r3, [r2, #4]
 801c4b2:	bd38      	pop	{r3, r4, r5, pc}
 801c4b4:	2001      	movs	r0, #1
 801c4b6:	bd38      	pop	{r3, r4, r5, pc}
 801c4b8:	f240 3086 	movw	r0, #902	; 0x386
 801c4bc:	bd38      	pop	{r3, r4, r5, pc}
 801c4be:	200b      	movs	r0, #11
 801c4c0:	4770      	bx	lr
 801c4c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c4c6:	bd38      	pop	{r3, r4, r5, pc}
 801c4c8:	200b      	movs	r0, #11
 801c4ca:	bd38      	pop	{r3, r4, r5, pc}

0801c4cc <rcl_wait_set_clear>:
 801c4cc:	2800      	cmp	r0, #0
 801c4ce:	d074      	beq.n	801c5ba <rcl_wait_set_clear+0xee>
 801c4d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c4d2:	b510      	push	{r4, lr}
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d071      	beq.n	801c5be <rcl_wait_set_clear+0xf2>
 801c4da:	6800      	ldr	r0, [r0, #0]
 801c4dc:	b138      	cbz	r0, 801c4ee <rcl_wait_set_clear+0x22>
 801c4de:	6862      	ldr	r2, [r4, #4]
 801c4e0:	2100      	movs	r1, #0
 801c4e2:	0092      	lsls	r2, r2, #2
 801c4e4:	f004 fd6a 	bl	8020fbc <memset>
 801c4e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4ea:	2200      	movs	r2, #0
 801c4ec:	601a      	str	r2, [r3, #0]
 801c4ee:	68a0      	ldr	r0, [r4, #8]
 801c4f0:	b138      	cbz	r0, 801c502 <rcl_wait_set_clear+0x36>
 801c4f2:	68e2      	ldr	r2, [r4, #12]
 801c4f4:	2100      	movs	r1, #0
 801c4f6:	0092      	lsls	r2, r2, #2
 801c4f8:	f004 fd60 	bl	8020fbc <memset>
 801c4fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4fe:	2200      	movs	r2, #0
 801c500:	60da      	str	r2, [r3, #12]
 801c502:	69a0      	ldr	r0, [r4, #24]
 801c504:	b138      	cbz	r0, 801c516 <rcl_wait_set_clear+0x4a>
 801c506:	69e2      	ldr	r2, [r4, #28]
 801c508:	2100      	movs	r1, #0
 801c50a:	0092      	lsls	r2, r2, #2
 801c50c:	f004 fd56 	bl	8020fbc <memset>
 801c510:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c512:	2200      	movs	r2, #0
 801c514:	619a      	str	r2, [r3, #24]
 801c516:	6a20      	ldr	r0, [r4, #32]
 801c518:	b138      	cbz	r0, 801c52a <rcl_wait_set_clear+0x5e>
 801c51a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c51c:	2100      	movs	r1, #0
 801c51e:	0092      	lsls	r2, r2, #2
 801c520:	f004 fd4c 	bl	8020fbc <memset>
 801c524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c526:	2200      	movs	r2, #0
 801c528:	625a      	str	r2, [r3, #36]	; 0x24
 801c52a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c52c:	b138      	cbz	r0, 801c53e <rcl_wait_set_clear+0x72>
 801c52e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c530:	2100      	movs	r1, #0
 801c532:	0092      	lsls	r2, r2, #2
 801c534:	f004 fd42 	bl	8020fbc <memset>
 801c538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c53a:	2200      	movs	r2, #0
 801c53c:	631a      	str	r2, [r3, #48]	; 0x30
 801c53e:	6920      	ldr	r0, [r4, #16]
 801c540:	b138      	cbz	r0, 801c552 <rcl_wait_set_clear+0x86>
 801c542:	6962      	ldr	r2, [r4, #20]
 801c544:	2100      	movs	r1, #0
 801c546:	0092      	lsls	r2, r2, #2
 801c548:	f004 fd38 	bl	8020fbc <memset>
 801c54c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c54e:	2200      	movs	r2, #0
 801c550:	641a      	str	r2, [r3, #64]	; 0x40
 801c552:	6898      	ldr	r0, [r3, #8]
 801c554:	b138      	cbz	r0, 801c566 <rcl_wait_set_clear+0x9a>
 801c556:	685a      	ldr	r2, [r3, #4]
 801c558:	2100      	movs	r1, #0
 801c55a:	0092      	lsls	r2, r2, #2
 801c55c:	f004 fd2e 	bl	8020fbc <memset>
 801c560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c562:	2200      	movs	r2, #0
 801c564:	605a      	str	r2, [r3, #4]
 801c566:	6958      	ldr	r0, [r3, #20]
 801c568:	b138      	cbz	r0, 801c57a <rcl_wait_set_clear+0xae>
 801c56a:	691a      	ldr	r2, [r3, #16]
 801c56c:	2100      	movs	r1, #0
 801c56e:	0092      	lsls	r2, r2, #2
 801c570:	f004 fd24 	bl	8020fbc <memset>
 801c574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c576:	2200      	movs	r2, #0
 801c578:	611a      	str	r2, [r3, #16]
 801c57a:	6a18      	ldr	r0, [r3, #32]
 801c57c:	b138      	cbz	r0, 801c58e <rcl_wait_set_clear+0xc2>
 801c57e:	69da      	ldr	r2, [r3, #28]
 801c580:	2100      	movs	r1, #0
 801c582:	0092      	lsls	r2, r2, #2
 801c584:	f004 fd1a 	bl	8020fbc <memset>
 801c588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c58a:	2200      	movs	r2, #0
 801c58c:	61da      	str	r2, [r3, #28]
 801c58e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c590:	b138      	cbz	r0, 801c5a2 <rcl_wait_set_clear+0xd6>
 801c592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c594:	2100      	movs	r1, #0
 801c596:	0092      	lsls	r2, r2, #2
 801c598:	f004 fd10 	bl	8020fbc <memset>
 801c59c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c59e:	2200      	movs	r2, #0
 801c5a0:	629a      	str	r2, [r3, #40]	; 0x28
 801c5a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c5a4:	b140      	cbz	r0, 801c5b8 <rcl_wait_set_clear+0xec>
 801c5a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c5a8:	2100      	movs	r1, #0
 801c5aa:	0092      	lsls	r2, r2, #2
 801c5ac:	f004 fd06 	bl	8020fbc <memset>
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	6353      	str	r3, [r2, #52]	; 0x34
 801c5b8:	bd10      	pop	{r4, pc}
 801c5ba:	200b      	movs	r0, #11
 801c5bc:	4770      	bx	lr
 801c5be:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c5c2:	bd10      	pop	{r4, pc}

0801c5c4 <rcl_wait_set_resize>:
 801c5c4:	2800      	cmp	r0, #0
 801c5c6:	f000 8180 	beq.w	801c8ca <rcl_wait_set_resize+0x306>
 801c5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c5d0:	b083      	sub	sp, #12
 801c5d2:	4605      	mov	r5, r0
 801c5d4:	2c00      	cmp	r4, #0
 801c5d6:	f000 817a 	beq.w	801c8ce <rcl_wait_set_resize+0x30a>
 801c5da:	f04f 0900 	mov.w	r9, #0
 801c5de:	461f      	mov	r7, r3
 801c5e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c5e4:	4688      	mov	r8, r1
 801c5e6:	4616      	mov	r6, r2
 801c5e8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c5ec:	f8c0 9004 	str.w	r9, [r0, #4]
 801c5f0:	f8c4 9000 	str.w	r9, [r4]
 801c5f4:	2900      	cmp	r1, #0
 801c5f6:	f000 80bf 	beq.w	801c778 <rcl_wait_set_resize+0x1b4>
 801c5fa:	008c      	lsls	r4, r1, #2
 801c5fc:	4652      	mov	r2, sl
 801c5fe:	6800      	ldr	r0, [r0, #0]
 801c600:	4621      	mov	r1, r4
 801c602:	9301      	str	r3, [sp, #4]
 801c604:	4798      	blx	r3
 801c606:	9b01      	ldr	r3, [sp, #4]
 801c608:	6028      	str	r0, [r5, #0]
 801c60a:	2800      	cmp	r0, #0
 801c60c:	f000 80f6 	beq.w	801c7fc <rcl_wait_set_resize+0x238>
 801c610:	4622      	mov	r2, r4
 801c612:	4649      	mov	r1, r9
 801c614:	9301      	str	r3, [sp, #4]
 801c616:	f004 fcd1 	bl	8020fbc <memset>
 801c61a:	f8c5 8004 	str.w	r8, [r5, #4]
 801c61e:	4652      	mov	r2, sl
 801c620:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c624:	4621      	mov	r1, r4
 801c626:	9b01      	ldr	r3, [sp, #4]
 801c628:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c62c:	f8c8 9004 	str.w	r9, [r8, #4]
 801c630:	4798      	blx	r3
 801c632:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c634:	f8c8 0008 	str.w	r0, [r8, #8]
 801c638:	689b      	ldr	r3, [r3, #8]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	f000 814a 	beq.w	801c8d4 <rcl_wait_set_resize+0x310>
 801c640:	4622      	mov	r2, r4
 801c642:	4649      	mov	r1, r9
 801c644:	4618      	mov	r0, r3
 801c646:	f004 fcb9 	bl	8020fbc <memset>
 801c64a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c64c:	f04f 0800 	mov.w	r8, #0
 801c650:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c654:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c658:	f8c5 800c 	str.w	r8, [r5, #12]
 801c65c:	f8c4 800c 	str.w	r8, [r4, #12]
 801c660:	2e00      	cmp	r6, #0
 801c662:	f040 809b 	bne.w	801c79c <rcl_wait_set_resize+0x1d8>
 801c666:	68a8      	ldr	r0, [r5, #8]
 801c668:	b128      	cbz	r0, 801c676 <rcl_wait_set_resize+0xb2>
 801c66a:	4649      	mov	r1, r9
 801c66c:	4790      	blx	r2
 801c66e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c670:	60ae      	str	r6, [r5, #8]
 801c672:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c676:	f04f 0800 	mov.w	r8, #0
 801c67a:	19f6      	adds	r6, r6, r7
 801c67c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c680:	f040 80a2 	bne.w	801c7c8 <rcl_wait_set_resize+0x204>
 801c684:	6960      	ldr	r0, [r4, #20]
 801c686:	b130      	cbz	r0, 801c696 <rcl_wait_set_resize+0xd2>
 801c688:	4649      	mov	r1, r9
 801c68a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c68c:	4798      	blx	r3
 801c68e:	6166      	str	r6, [r4, #20]
 801c690:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c692:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c696:	2600      	movs	r6, #0
 801c698:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c69c:	616e      	str	r6, [r5, #20]
 801c69e:	6426      	str	r6, [r4, #64]	; 0x40
 801c6a0:	2f00      	cmp	r7, #0
 801c6a2:	f040 80af 	bne.w	801c804 <rcl_wait_set_resize+0x240>
 801c6a6:	6928      	ldr	r0, [r5, #16]
 801c6a8:	b138      	cbz	r0, 801c6ba <rcl_wait_set_resize+0xf6>
 801c6aa:	4649      	mov	r1, r9
 801c6ac:	47d0      	blx	sl
 801c6ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6b0:	612f      	str	r7, [r5, #16]
 801c6b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c6b6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c6ba:	2600      	movs	r6, #0
 801c6bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6be:	61ee      	str	r6, [r5, #28]
 801c6c0:	61a6      	str	r6, [r4, #24]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f040 8093 	bne.w	801c7ee <rcl_wait_set_resize+0x22a>
 801c6c8:	69a8      	ldr	r0, [r5, #24]
 801c6ca:	b120      	cbz	r0, 801c6d6 <rcl_wait_set_resize+0x112>
 801c6cc:	4649      	mov	r1, r9
 801c6ce:	47d0      	blx	sl
 801c6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6d4:	61ab      	str	r3, [r5, #24]
 801c6d6:	6a20      	ldr	r0, [r4, #32]
 801c6d8:	b128      	cbz	r0, 801c6e6 <rcl_wait_set_resize+0x122>
 801c6da:	4649      	mov	r1, r9
 801c6dc:	47d0      	blx	sl
 801c6de:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c6e6:	2600      	movs	r6, #0
 801c6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6ea:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c6ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c6f0:	626e      	str	r6, [r5, #36]	; 0x24
 801c6f2:	6266      	str	r6, [r4, #36]	; 0x24
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	f000 8098 	beq.w	801c82a <rcl_wait_set_resize+0x266>
 801c6fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c6fe:	463a      	mov	r2, r7
 801c700:	6a28      	ldr	r0, [r5, #32]
 801c702:	4651      	mov	r1, sl
 801c704:	47c8      	blx	r9
 801c706:	6228      	str	r0, [r5, #32]
 801c708:	2800      	cmp	r0, #0
 801c70a:	d077      	beq.n	801c7fc <rcl_wait_set_resize+0x238>
 801c70c:	4652      	mov	r2, sl
 801c70e:	4631      	mov	r1, r6
 801c710:	f004 fc54 	bl	8020fbc <memset>
 801c714:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c718:	463a      	mov	r2, r7
 801c71a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c71c:	4651      	mov	r1, sl
 801c71e:	626b      	str	r3, [r5, #36]	; 0x24
 801c720:	62a6      	str	r6, [r4, #40]	; 0x28
 801c722:	47c8      	blx	r9
 801c724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c726:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c728:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c72a:	2c00      	cmp	r4, #0
 801c72c:	f000 80f2 	beq.w	801c914 <rcl_wait_set_resize+0x350>
 801c730:	4620      	mov	r0, r4
 801c732:	4652      	mov	r2, sl
 801c734:	4631      	mov	r1, r6
 801c736:	f004 fc41 	bl	8020fbc <memset>
 801c73a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c73c:	2600      	movs	r6, #0
 801c73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c740:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c742:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c746:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c748:	6326      	str	r6, [r4, #48]	; 0x30
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	f040 8097 	bne.w	801c87e <rcl_wait_set_resize+0x2ba>
 801c750:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c752:	b120      	cbz	r0, 801c75e <rcl_wait_set_resize+0x19a>
 801c754:	4639      	mov	r1, r7
 801c756:	47c0      	blx	r8
 801c758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c75a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c75c:	62ab      	str	r3, [r5, #40]	; 0x28
 801c75e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c760:	2800      	cmp	r0, #0
 801c762:	d04c      	beq.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c764:	4639      	mov	r1, r7
 801c766:	47c0      	blx	r8
 801c768:	2300      	movs	r3, #0
 801c76a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c76c:	4618      	mov	r0, r3
 801c76e:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c772:	b003      	add	sp, #12
 801c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c778:	6800      	ldr	r0, [r0, #0]
 801c77a:	b120      	cbz	r0, 801c786 <rcl_wait_set_resize+0x1c2>
 801c77c:	4651      	mov	r1, sl
 801c77e:	47d8      	blx	fp
 801c780:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c782:	f8c5 8000 	str.w	r8, [r5]
 801c786:	68a0      	ldr	r0, [r4, #8]
 801c788:	2800      	cmp	r0, #0
 801c78a:	f43f af5f 	beq.w	801c64c <rcl_wait_set_resize+0x88>
 801c78e:	4651      	mov	r1, sl
 801c790:	47d8      	blx	fp
 801c792:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c794:	2300      	movs	r3, #0
 801c796:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c79a:	e757      	b.n	801c64c <rcl_wait_set_resize+0x88>
 801c79c:	00b4      	lsls	r4, r6, #2
 801c79e:	464a      	mov	r2, r9
 801c7a0:	68a8      	ldr	r0, [r5, #8]
 801c7a2:	4621      	mov	r1, r4
 801c7a4:	4798      	blx	r3
 801c7a6:	60a8      	str	r0, [r5, #8]
 801c7a8:	b340      	cbz	r0, 801c7fc <rcl_wait_set_resize+0x238>
 801c7aa:	4622      	mov	r2, r4
 801c7ac:	4641      	mov	r1, r8
 801c7ae:	f004 fc05 	bl	8020fbc <memset>
 801c7b2:	f04f 0800 	mov.w	r8, #0
 801c7b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7b8:	60ee      	str	r6, [r5, #12]
 801c7ba:	19f6      	adds	r6, r6, r7
 801c7bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7c0:	f8c4 8010 	str.w	r8, [r4, #16]
 801c7c4:	f43f af5e 	beq.w	801c684 <rcl_wait_set_resize+0xc0>
 801c7c8:	00b6      	lsls	r6, r6, #2
 801c7ca:	464a      	mov	r2, r9
 801c7cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c7ce:	6960      	ldr	r0, [r4, #20]
 801c7d0:	4631      	mov	r1, r6
 801c7d2:	4798      	blx	r3
 801c7d4:	4681      	mov	r9, r0
 801c7d6:	6160      	str	r0, [r4, #20]
 801c7d8:	2800      	cmp	r0, #0
 801c7da:	f000 8084 	beq.w	801c8e6 <rcl_wait_set_resize+0x322>
 801c7de:	4632      	mov	r2, r6
 801c7e0:	4641      	mov	r1, r8
 801c7e2:	f004 fbeb 	bl	8020fbc <memset>
 801c7e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7ec:	e753      	b.n	801c696 <rcl_wait_set_resize+0xd2>
 801c7ee:	009c      	lsls	r4, r3, #2
 801c7f0:	464a      	mov	r2, r9
 801c7f2:	69a8      	ldr	r0, [r5, #24]
 801c7f4:	4621      	mov	r1, r4
 801c7f6:	47c0      	blx	r8
 801c7f8:	61a8      	str	r0, [r5, #24]
 801c7fa:	bb40      	cbnz	r0, 801c84e <rcl_wait_set_resize+0x28a>
 801c7fc:	200a      	movs	r0, #10
 801c7fe:	b003      	add	sp, #12
 801c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c804:	00bc      	lsls	r4, r7, #2
 801c806:	464a      	mov	r2, r9
 801c808:	6928      	ldr	r0, [r5, #16]
 801c80a:	4621      	mov	r1, r4
 801c80c:	47c0      	blx	r8
 801c80e:	6128      	str	r0, [r5, #16]
 801c810:	2800      	cmp	r0, #0
 801c812:	d0f3      	beq.n	801c7fc <rcl_wait_set_resize+0x238>
 801c814:	4622      	mov	r2, r4
 801c816:	4631      	mov	r1, r6
 801c818:	f004 fbd0 	bl	8020fbc <memset>
 801c81c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c81e:	616f      	str	r7, [r5, #20]
 801c820:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c824:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c828:	e747      	b.n	801c6ba <rcl_wait_set_resize+0xf6>
 801c82a:	6a28      	ldr	r0, [r5, #32]
 801c82c:	b120      	cbz	r0, 801c838 <rcl_wait_set_resize+0x274>
 801c82e:	4639      	mov	r1, r7
 801c830:	47c0      	blx	r8
 801c832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c834:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c836:	622b      	str	r3, [r5, #32]
 801c838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c83a:	2800      	cmp	r0, #0
 801c83c:	f43f af7e 	beq.w	801c73c <rcl_wait_set_resize+0x178>
 801c840:	4639      	mov	r1, r7
 801c842:	47c0      	blx	r8
 801c844:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c846:	2300      	movs	r3, #0
 801c848:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c84c:	e776      	b.n	801c73c <rcl_wait_set_resize+0x178>
 801c84e:	4622      	mov	r2, r4
 801c850:	4631      	mov	r1, r6
 801c852:	f004 fbb3 	bl	8020fbc <memset>
 801c856:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c85a:	464a      	mov	r2, r9
 801c85c:	6a38      	ldr	r0, [r7, #32]
 801c85e:	4621      	mov	r1, r4
 801c860:	61eb      	str	r3, [r5, #28]
 801c862:	61fe      	str	r6, [r7, #28]
 801c864:	47c0      	blx	r8
 801c866:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c868:	6238      	str	r0, [r7, #32]
 801c86a:	6a1f      	ldr	r7, [r3, #32]
 801c86c:	2f00      	cmp	r7, #0
 801c86e:	d04a      	beq.n	801c906 <rcl_wait_set_resize+0x342>
 801c870:	4622      	mov	r2, r4
 801c872:	4631      	mov	r1, r6
 801c874:	4638      	mov	r0, r7
 801c876:	f004 fba1 	bl	8020fbc <memset>
 801c87a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c87c:	e733      	b.n	801c6e6 <rcl_wait_set_resize+0x122>
 801c87e:	009c      	lsls	r4, r3, #2
 801c880:	463a      	mov	r2, r7
 801c882:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c884:	4621      	mov	r1, r4
 801c886:	47c8      	blx	r9
 801c888:	62a8      	str	r0, [r5, #40]	; 0x28
 801c88a:	2800      	cmp	r0, #0
 801c88c:	d0b6      	beq.n	801c7fc <rcl_wait_set_resize+0x238>
 801c88e:	4622      	mov	r2, r4
 801c890:	4631      	mov	r1, r6
 801c892:	f004 fb93 	bl	8020fbc <memset>
 801c896:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c89c:	463a      	mov	r2, r7
 801c89e:	4621      	mov	r1, r4
 801c8a0:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c8a4:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c8a6:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c8aa:	47c8      	blx	r9
 801c8ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c8ae:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d034      	beq.n	801c922 <rcl_wait_set_resize+0x35e>
 801c8b8:	4622      	mov	r2, r4
 801c8ba:	4631      	mov	r1, r6
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f004 fb7d 	bl	8020fbc <memset>
 801c8c2:	4630      	mov	r0, r6
 801c8c4:	b003      	add	sp, #12
 801c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ca:	200b      	movs	r0, #11
 801c8cc:	4770      	bx	lr
 801c8ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c8d2:	e794      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c8d4:	6828      	ldr	r0, [r5, #0]
 801c8d6:	4651      	mov	r1, sl
 801c8d8:	9301      	str	r3, [sp, #4]
 801c8da:	47d8      	blx	fp
 801c8dc:	9b01      	ldr	r3, [sp, #4]
 801c8de:	200a      	movs	r0, #10
 801c8e0:	e9c5 3300 	strd	r3, r3, [r5]
 801c8e4:	e78b      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c8e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c8e8:	68a8      	ldr	r0, [r5, #8]
 801c8ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c8ee:	4798      	blx	r3
 801c8f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c8f2:	6928      	ldr	r0, [r5, #16]
 801c8f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c8f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c8f8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c8fc:	4790      	blx	r2
 801c8fe:	200a      	movs	r0, #10
 801c900:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c904:	e77b      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c906:	69a8      	ldr	r0, [r5, #24]
 801c908:	4649      	mov	r1, r9
 801c90a:	47d0      	blx	sl
 801c90c:	200a      	movs	r0, #10
 801c90e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c912:	e774      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c914:	6a28      	ldr	r0, [r5, #32]
 801c916:	4639      	mov	r1, r7
 801c918:	47c0      	blx	r8
 801c91a:	200a      	movs	r0, #10
 801c91c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c920:	e76d      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c922:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c924:	4639      	mov	r1, r7
 801c926:	9301      	str	r3, [sp, #4]
 801c928:	47c0      	blx	r8
 801c92a:	9b01      	ldr	r3, [sp, #4]
 801c92c:	200a      	movs	r0, #10
 801c92e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c932:	e764      	b.n	801c7fe <rcl_wait_set_resize+0x23a>

0801c934 <rcl_wait_set_init>:
 801c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c938:	b085      	sub	sp, #20
 801c93a:	4605      	mov	r5, r0
 801c93c:	460e      	mov	r6, r1
 801c93e:	4617      	mov	r7, r2
 801c940:	a812      	add	r0, sp, #72	; 0x48
 801c942:	4698      	mov	r8, r3
 801c944:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c948:	f7f8 fca4 	bl	8015294 <rcutils_allocator_is_valid>
 801c94c:	2d00      	cmp	r5, #0
 801c94e:	d072      	beq.n	801ca36 <rcl_wait_set_init+0x102>
 801c950:	f080 0001 	eor.w	r0, r0, #1
 801c954:	b2c0      	uxtb	r0, r0
 801c956:	2800      	cmp	r0, #0
 801c958:	d16d      	bne.n	801ca36 <rcl_wait_set_init+0x102>
 801c95a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c95e:	f1ba 0f00 	cmp.w	sl, #0
 801c962:	d004      	beq.n	801c96e <rcl_wait_set_init+0x3a>
 801c964:	2464      	movs	r4, #100	; 0x64
 801c966:	4620      	mov	r0, r4
 801c968:	b005      	add	sp, #20
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96e:	f1b9 0f00 	cmp.w	r9, #0
 801c972:	d060      	beq.n	801ca36 <rcl_wait_set_init+0x102>
 801c974:	4648      	mov	r0, r9
 801c976:	f7fe fe8f 	bl	801b698 <rcl_context_is_valid>
 801c97a:	2800      	cmp	r0, #0
 801c97c:	d068      	beq.n	801ca50 <rcl_wait_set_init+0x11c>
 801c97e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c980:	205c      	movs	r0, #92	; 0x5c
 801c982:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c984:	4798      	blx	r3
 801c986:	6328      	str	r0, [r5, #48]	; 0x30
 801c988:	2800      	cmp	r0, #0
 801c98a:	d063      	beq.n	801ca54 <rcl_wait_set_init+0x120>
 801c98c:	225c      	movs	r2, #92	; 0x5c
 801c98e:	4651      	mov	r1, sl
 801c990:	f004 fb14 	bl	8020fbc <memset>
 801c994:	ac12      	add	r4, sp, #72	; 0x48
 801c996:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c99a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c99e:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c9a2:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c9a6:	eb03 0e02 	add.w	lr, r3, r2
 801c9aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9ac:	f8d9 9000 	ldr.w	r9, [r9]
 801c9b0:	449e      	add	lr, r3
 801c9b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c9b4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c9b8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c9bc:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c9c0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c9c4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c9c8:	44be      	add	lr, r7
 801c9ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c9ce:	6823      	ldr	r3, [r4, #0]
 801c9d0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c9d4:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c9d8:	f8cc 3000 	str.w	r3, [ip]
 801c9dc:	f001 fe6e 	bl	801e6bc <rmw_create_wait_set>
 801c9e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c9e2:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c9e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c9e8:	b350      	cbz	r0, 801ca40 <rcl_wait_set_init+0x10c>
 801c9ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c9ec:	4643      	mov	r3, r8
 801c9ee:	463a      	mov	r2, r7
 801c9f0:	4631      	mov	r1, r6
 801c9f2:	9402      	str	r4, [sp, #8]
 801c9f4:	4628      	mov	r0, r5
 801c9f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c9f8:	9401      	str	r4, [sp, #4]
 801c9fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c9fc:	9400      	str	r4, [sp, #0]
 801c9fe:	f7ff fde1 	bl	801c5c4 <rcl_wait_set_resize>
 801ca02:	4604      	mov	r4, r0
 801ca04:	2800      	cmp	r0, #0
 801ca06:	d0ae      	beq.n	801c966 <rcl_wait_set_init+0x32>
 801ca08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca0a:	bb2b      	cbnz	r3, 801ca58 <rcl_wait_set_init+0x124>
 801ca0c:	2600      	movs	r6, #0
 801ca0e:	4628      	mov	r0, r5
 801ca10:	4633      	mov	r3, r6
 801ca12:	4632      	mov	r2, r6
 801ca14:	4631      	mov	r1, r6
 801ca16:	9600      	str	r6, [sp, #0]
 801ca18:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801ca1c:	f7ff fdd2 	bl	801c5c4 <rcl_wait_set_resize>
 801ca20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ca22:	2800      	cmp	r0, #0
 801ca24:	d09f      	beq.n	801c966 <rcl_wait_set_init+0x32>
 801ca26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801ca28:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801ca2a:	4798      	blx	r3
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	632e      	str	r6, [r5, #48]	; 0x30
 801ca30:	b005      	add	sp, #20
 801ca32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca36:	240b      	movs	r4, #11
 801ca38:	4620      	mov	r0, r4
 801ca3a:	b005      	add	sp, #20
 801ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca40:	2401      	movs	r4, #1
 801ca42:	f001 fe45 	bl	801e6d0 <rmw_destroy_wait_set>
 801ca46:	2800      	cmp	r0, #0
 801ca48:	bf18      	it	ne
 801ca4a:	f44f 7461 	movne.w	r4, #900	; 0x384
 801ca4e:	e7dd      	b.n	801ca0c <rcl_wait_set_init+0xd8>
 801ca50:	2465      	movs	r4, #101	; 0x65
 801ca52:	e788      	b.n	801c966 <rcl_wait_set_init+0x32>
 801ca54:	240a      	movs	r4, #10
 801ca56:	e786      	b.n	801c966 <rcl_wait_set_init+0x32>
 801ca58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801ca5a:	e7f2      	b.n	801ca42 <rcl_wait_set_init+0x10e>

0801ca5c <rcl_wait_set_add_guard_condition>:
 801ca5c:	b318      	cbz	r0, 801caa6 <rcl_wait_set_add_guard_condition+0x4a>
 801ca5e:	b538      	push	{r3, r4, r5, lr}
 801ca60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ca62:	4604      	mov	r4, r0
 801ca64:	b30b      	cbz	r3, 801caaa <rcl_wait_set_add_guard_condition+0x4e>
 801ca66:	b319      	cbz	r1, 801cab0 <rcl_wait_set_add_guard_condition+0x54>
 801ca68:	68dd      	ldr	r5, [r3, #12]
 801ca6a:	68c0      	ldr	r0, [r0, #12]
 801ca6c:	4285      	cmp	r5, r0
 801ca6e:	d217      	bcs.n	801caa0 <rcl_wait_set_add_guard_condition+0x44>
 801ca70:	1c68      	adds	r0, r5, #1
 801ca72:	60d8      	str	r0, [r3, #12]
 801ca74:	68a3      	ldr	r3, [r4, #8]
 801ca76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ca7a:	b102      	cbz	r2, 801ca7e <rcl_wait_set_add_guard_condition+0x22>
 801ca7c:	6015      	str	r5, [r2, #0]
 801ca7e:	4608      	mov	r0, r1
 801ca80:	f7fe ff18 	bl	801b8b4 <rcl_guard_condition_get_rmw_handle>
 801ca84:	b150      	cbz	r0, 801ca9c <rcl_wait_set_add_guard_condition+0x40>
 801ca86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ca88:	6842      	ldr	r2, [r0, #4]
 801ca8a:	2000      	movs	r0, #0
 801ca8c:	695b      	ldr	r3, [r3, #20]
 801ca8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ca92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ca94:	6913      	ldr	r3, [r2, #16]
 801ca96:	3301      	adds	r3, #1
 801ca98:	6113      	str	r3, [r2, #16]
 801ca9a:	bd38      	pop	{r3, r4, r5, pc}
 801ca9c:	2001      	movs	r0, #1
 801ca9e:	bd38      	pop	{r3, r4, r5, pc}
 801caa0:	f240 3086 	movw	r0, #902	; 0x386
 801caa4:	bd38      	pop	{r3, r4, r5, pc}
 801caa6:	200b      	movs	r0, #11
 801caa8:	4770      	bx	lr
 801caaa:	f44f 7061 	mov.w	r0, #900	; 0x384
 801caae:	bd38      	pop	{r3, r4, r5, pc}
 801cab0:	200b      	movs	r0, #11
 801cab2:	bd38      	pop	{r3, r4, r5, pc}

0801cab4 <rcl_wait_set_add_timer>:
 801cab4:	b328      	cbz	r0, 801cb02 <rcl_wait_set_add_timer+0x4e>
 801cab6:	b538      	push	{r3, r4, r5, lr}
 801cab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801caba:	4604      	mov	r4, r0
 801cabc:	b31b      	cbz	r3, 801cb06 <rcl_wait_set_add_timer+0x52>
 801cabe:	b329      	cbz	r1, 801cb0c <rcl_wait_set_add_timer+0x58>
 801cac0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801cac2:	6965      	ldr	r5, [r4, #20]
 801cac4:	42a8      	cmp	r0, r5
 801cac6:	d219      	bcs.n	801cafc <rcl_wait_set_add_timer+0x48>
 801cac8:	1c45      	adds	r5, r0, #1
 801caca:	641d      	str	r5, [r3, #64]	; 0x40
 801cacc:	6923      	ldr	r3, [r4, #16]
 801cace:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cad2:	b102      	cbz	r2, 801cad6 <rcl_wait_set_add_timer+0x22>
 801cad4:	6010      	str	r0, [r2, #0]
 801cad6:	4608      	mov	r0, r1
 801cad8:	f7ff fb9a 	bl	801c210 <rcl_timer_get_guard_condition>
 801cadc:	b168      	cbz	r0, 801cafa <rcl_wait_set_add_timer+0x46>
 801cade:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cae0:	68e3      	ldr	r3, [r4, #12]
 801cae2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801cae4:	3b01      	subs	r3, #1
 801cae6:	441d      	add	r5, r3
 801cae8:	f7fe fee4 	bl	801b8b4 <rcl_guard_condition_get_rmw_handle>
 801caec:	b180      	cbz	r0, 801cb10 <rcl_wait_set_add_timer+0x5c>
 801caee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801caf0:	6842      	ldr	r2, [r0, #4]
 801caf2:	2000      	movs	r0, #0
 801caf4:	695b      	ldr	r3, [r3, #20]
 801caf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cafa:	bd38      	pop	{r3, r4, r5, pc}
 801cafc:	f240 3086 	movw	r0, #902	; 0x386
 801cb00:	bd38      	pop	{r3, r4, r5, pc}
 801cb02:	200b      	movs	r0, #11
 801cb04:	4770      	bx	lr
 801cb06:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb0a:	bd38      	pop	{r3, r4, r5, pc}
 801cb0c:	200b      	movs	r0, #11
 801cb0e:	bd38      	pop	{r3, r4, r5, pc}
 801cb10:	2001      	movs	r0, #1
 801cb12:	bd38      	pop	{r3, r4, r5, pc}

0801cb14 <rcl_wait_set_add_client>:
 801cb14:	b318      	cbz	r0, 801cb5e <rcl_wait_set_add_client+0x4a>
 801cb16:	b538      	push	{r3, r4, r5, lr}
 801cb18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cb1a:	4604      	mov	r4, r0
 801cb1c:	b30b      	cbz	r3, 801cb62 <rcl_wait_set_add_client+0x4e>
 801cb1e:	b319      	cbz	r1, 801cb68 <rcl_wait_set_add_client+0x54>
 801cb20:	699d      	ldr	r5, [r3, #24]
 801cb22:	69c0      	ldr	r0, [r0, #28]
 801cb24:	4285      	cmp	r5, r0
 801cb26:	d217      	bcs.n	801cb58 <rcl_wait_set_add_client+0x44>
 801cb28:	1c68      	adds	r0, r5, #1
 801cb2a:	6198      	str	r0, [r3, #24]
 801cb2c:	69a3      	ldr	r3, [r4, #24]
 801cb2e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cb32:	b102      	cbz	r2, 801cb36 <rcl_wait_set_add_client+0x22>
 801cb34:	6015      	str	r5, [r2, #0]
 801cb36:	4608      	mov	r0, r1
 801cb38:	f7fe fd00 	bl	801b53c <rcl_client_get_rmw_handle>
 801cb3c:	b150      	cbz	r0, 801cb54 <rcl_wait_set_add_client+0x40>
 801cb3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cb40:	6842      	ldr	r2, [r0, #4]
 801cb42:	2000      	movs	r0, #0
 801cb44:	6a1b      	ldr	r3, [r3, #32]
 801cb46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cb4c:	69d3      	ldr	r3, [r2, #28]
 801cb4e:	3301      	adds	r3, #1
 801cb50:	61d3      	str	r3, [r2, #28]
 801cb52:	bd38      	pop	{r3, r4, r5, pc}
 801cb54:	2001      	movs	r0, #1
 801cb56:	bd38      	pop	{r3, r4, r5, pc}
 801cb58:	f240 3086 	movw	r0, #902	; 0x386
 801cb5c:	bd38      	pop	{r3, r4, r5, pc}
 801cb5e:	200b      	movs	r0, #11
 801cb60:	4770      	bx	lr
 801cb62:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb66:	bd38      	pop	{r3, r4, r5, pc}
 801cb68:	200b      	movs	r0, #11
 801cb6a:	bd38      	pop	{r3, r4, r5, pc}

0801cb6c <rcl_wait_set_add_service>:
 801cb6c:	b318      	cbz	r0, 801cbb6 <rcl_wait_set_add_service+0x4a>
 801cb6e:	b538      	push	{r3, r4, r5, lr}
 801cb70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cb72:	4604      	mov	r4, r0
 801cb74:	b30b      	cbz	r3, 801cbba <rcl_wait_set_add_service+0x4e>
 801cb76:	b319      	cbz	r1, 801cbc0 <rcl_wait_set_add_service+0x54>
 801cb78:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cb7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cb7c:	4285      	cmp	r5, r0
 801cb7e:	d217      	bcs.n	801cbb0 <rcl_wait_set_add_service+0x44>
 801cb80:	1c68      	adds	r0, r5, #1
 801cb82:	6258      	str	r0, [r3, #36]	; 0x24
 801cb84:	6a23      	ldr	r3, [r4, #32]
 801cb86:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cb8a:	b102      	cbz	r2, 801cb8e <rcl_wait_set_add_service+0x22>
 801cb8c:	6015      	str	r5, [r2, #0]
 801cb8e:	4608      	mov	r0, r1
 801cb90:	f7f7 f9f8 	bl	8013f84 <rcl_service_get_rmw_handle>
 801cb94:	b150      	cbz	r0, 801cbac <rcl_wait_set_add_service+0x40>
 801cb96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cb98:	6842      	ldr	r2, [r0, #4]
 801cb9a:	2000      	movs	r0, #0
 801cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cba2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cba4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801cba6:	3301      	adds	r3, #1
 801cba8:	6293      	str	r3, [r2, #40]	; 0x28
 801cbaa:	bd38      	pop	{r3, r4, r5, pc}
 801cbac:	2001      	movs	r0, #1
 801cbae:	bd38      	pop	{r3, r4, r5, pc}
 801cbb0:	f240 3086 	movw	r0, #902	; 0x386
 801cbb4:	bd38      	pop	{r3, r4, r5, pc}
 801cbb6:	200b      	movs	r0, #11
 801cbb8:	4770      	bx	lr
 801cbba:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cbbe:	bd38      	pop	{r3, r4, r5, pc}
 801cbc0:	200b      	movs	r0, #11
 801cbc2:	bd38      	pop	{r3, r4, r5, pc}
 801cbc4:	0000      	movs	r0, r0
	...

0801cbc8 <rcl_wait>:
 801cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbcc:	ed2d 8b02 	vpush	{d8}
 801cbd0:	b08d      	sub	sp, #52	; 0x34
 801cbd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cbd6:	2800      	cmp	r0, #0
 801cbd8:	f000 814f 	beq.w	801ce7a <rcl_wait+0x2b2>
 801cbdc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801cbde:	4605      	mov	r5, r0
 801cbe0:	2e00      	cmp	r6, #0
 801cbe2:	f000 811a 	beq.w	801ce1a <rcl_wait+0x252>
 801cbe6:	6843      	ldr	r3, [r0, #4]
 801cbe8:	b983      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbea:	68eb      	ldr	r3, [r5, #12]
 801cbec:	b973      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbee:	696b      	ldr	r3, [r5, #20]
 801cbf0:	b963      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbf2:	69eb      	ldr	r3, [r5, #28]
 801cbf4:	b953      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cbf8:	b943      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801cbfc:	b933      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbfe:	f240 3085 	movw	r0, #901	; 0x385
 801cc02:	b00d      	add	sp, #52	; 0x34
 801cc04:	ecbd 8b02 	vpop	{d8}
 801cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc0c:	9b04      	ldr	r3, [sp, #16]
 801cc0e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801cc10:	2b01      	cmp	r3, #1
 801cc12:	9b05      	ldr	r3, [sp, #20]
 801cc14:	f173 0300 	sbcs.w	r3, r3, #0
 801cc18:	f2c0 80f8 	blt.w	801ce0c <rcl_wait+0x244>
 801cc1c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cc20:	2a00      	cmp	r2, #0
 801cc22:	f000 810f 	beq.w	801ce44 <rcl_wait+0x27c>
 801cc26:	2400      	movs	r4, #0
 801cc28:	4613      	mov	r3, r2
 801cc2a:	f240 3921 	movw	r9, #801	; 0x321
 801cc2e:	4632      	mov	r2, r6
 801cc30:	46a2      	mov	sl, r4
 801cc32:	46a3      	mov	fp, r4
 801cc34:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801ce98 <rcl_wait+0x2d0>
 801cc38:	e014      	b.n	801cc64 <rcl_wait+0x9c>
 801cc3a:	2800      	cmp	r0, #0
 801cc3c:	d1e1      	bne.n	801cc02 <rcl_wait+0x3a>
 801cc3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cc42:	4542      	cmp	r2, r8
 801cc44:	eb73 0107 	sbcs.w	r1, r3, r7
 801cc48:	da03      	bge.n	801cc52 <rcl_wait+0x8a>
 801cc4a:	4690      	mov	r8, r2
 801cc4c:	461f      	mov	r7, r3
 801cc4e:	f04f 0b01 	mov.w	fp, #1
 801cc52:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cc54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801cc56:	3401      	adds	r4, #1
 801cc58:	f14a 0a00 	adc.w	sl, sl, #0
 801cc5c:	429c      	cmp	r4, r3
 801cc5e:	f17a 0100 	sbcs.w	r1, sl, #0
 801cc62:	d228      	bcs.n	801ccb6 <rcl_wait+0xee>
 801cc64:	6928      	ldr	r0, [r5, #16]
 801cc66:	a908      	add	r1, sp, #32
 801cc68:	00a6      	lsls	r6, r4, #2
 801cc6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	d0f1      	beq.n	801cc56 <rcl_wait+0x8e>
 801cc72:	68eb      	ldr	r3, [r5, #12]
 801cc74:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cc78:	4423      	add	r3, r4
 801cc7a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cc7e:	f1be 0f00 	cmp.w	lr, #0
 801cc82:	d006      	beq.n	801cc92 <rcl_wait+0xca>
 801cc84:	6913      	ldr	r3, [r2, #16]
 801cc86:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	6113      	str	r3, [r2, #16]
 801cc8e:	692b      	ldr	r3, [r5, #16]
 801cc90:	5998      	ldr	r0, [r3, r6]
 801cc92:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cc96:	f7ff fa89 	bl	801c1ac <rcl_timer_get_time_until_next_call>
 801cc9a:	4548      	cmp	r0, r9
 801cc9c:	d1cd      	bne.n	801cc3a <rcl_wait+0x72>
 801cc9e:	692b      	ldr	r3, [r5, #16]
 801cca0:	2200      	movs	r2, #0
 801cca2:	3401      	adds	r4, #1
 801cca4:	519a      	str	r2, [r3, r6]
 801cca6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cca8:	f14a 0a00 	adc.w	sl, sl, #0
 801ccac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ccae:	429c      	cmp	r4, r3
 801ccb0:	f17a 0100 	sbcs.w	r1, sl, #0
 801ccb4:	d3d6      	bcc.n	801cc64 <rcl_wait+0x9c>
 801ccb6:	4659      	mov	r1, fp
 801ccb8:	4616      	mov	r6, r2
 801ccba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	f040 80b4 	bne.w	801ce2c <rcl_wait+0x264>
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	460c      	mov	r4, r1
 801ccca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ccce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ccd2:	ab08      	add	r3, sp, #32
 801ccd4:	9302      	str	r3, [sp, #8]
 801ccd6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801ccda:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801ccdc:	f106 0110 	add.w	r1, r6, #16
 801cce0:	9300      	str	r3, [sp, #0]
 801cce2:	1d30      	adds	r0, r6, #4
 801cce4:	f106 031c 	add.w	r3, r6, #28
 801cce8:	9201      	str	r2, [sp, #4]
 801ccea:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801ccee:	f001 fb81 	bl	801e3f4 <rmw_wait>
 801ccf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ccf4:	4680      	mov	r8, r0
 801ccf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ccf8:	b1e2      	cbz	r2, 801cd34 <rcl_wait+0x16c>
 801ccfa:	f04f 0900 	mov.w	r9, #0
 801ccfe:	464f      	mov	r7, r9
 801cd00:	692a      	ldr	r2, [r5, #16]
 801cd02:	f10d 011f 	add.w	r1, sp, #31
 801cd06:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cd0a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cd0e:	b160      	cbz	r0, 801cd2a <rcl_wait+0x162>
 801cd10:	f88d 701f 	strb.w	r7, [sp, #31]
 801cd14:	f7ff fa0e 	bl	801c134 <rcl_timer_is_ready>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	f47f af72 	bne.w	801cc02 <rcl_wait+0x3a>
 801cd1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cd22:	b90b      	cbnz	r3, 801cd28 <rcl_wait+0x160>
 801cd24:	692a      	ldr	r2, [r5, #16]
 801cd26:	5193      	str	r3, [r2, r6]
 801cd28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cd2a:	f109 0901 	add.w	r9, r9, #1
 801cd2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cd30:	454a      	cmp	r2, r9
 801cd32:	d8e5      	bhi.n	801cd00 <rcl_wait+0x138>
 801cd34:	f038 0002 	bics.w	r0, r8, #2
 801cd38:	d176      	bne.n	801ce28 <rcl_wait+0x260>
 801cd3a:	686f      	ldr	r7, [r5, #4]
 801cd3c:	b17f      	cbz	r7, 801cd5e <rcl_wait+0x196>
 801cd3e:	4602      	mov	r2, r0
 801cd40:	e002      	b.n	801cd48 <rcl_wait+0x180>
 801cd42:	3201      	adds	r2, #1
 801cd44:	42ba      	cmp	r2, r7
 801cd46:	d00a      	beq.n	801cd5e <rcl_wait+0x196>
 801cd48:	6899      	ldr	r1, [r3, #8]
 801cd4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd4e:	2900      	cmp	r1, #0
 801cd50:	d1f7      	bne.n	801cd42 <rcl_wait+0x17a>
 801cd52:	682e      	ldr	r6, [r5, #0]
 801cd54:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cd58:	3201      	adds	r2, #1
 801cd5a:	42ba      	cmp	r2, r7
 801cd5c:	d1f4      	bne.n	801cd48 <rcl_wait+0x180>
 801cd5e:	68ef      	ldr	r7, [r5, #12]
 801cd60:	b17f      	cbz	r7, 801cd82 <rcl_wait+0x1ba>
 801cd62:	2200      	movs	r2, #0
 801cd64:	e002      	b.n	801cd6c <rcl_wait+0x1a4>
 801cd66:	3201      	adds	r2, #1
 801cd68:	42ba      	cmp	r2, r7
 801cd6a:	d00a      	beq.n	801cd82 <rcl_wait+0x1ba>
 801cd6c:	6959      	ldr	r1, [r3, #20]
 801cd6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd72:	2900      	cmp	r1, #0
 801cd74:	d1f7      	bne.n	801cd66 <rcl_wait+0x19e>
 801cd76:	68ae      	ldr	r6, [r5, #8]
 801cd78:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cd7c:	3201      	adds	r2, #1
 801cd7e:	42ba      	cmp	r2, r7
 801cd80:	d1f4      	bne.n	801cd6c <rcl_wait+0x1a4>
 801cd82:	69ef      	ldr	r7, [r5, #28]
 801cd84:	b17f      	cbz	r7, 801cda6 <rcl_wait+0x1de>
 801cd86:	2200      	movs	r2, #0
 801cd88:	e002      	b.n	801cd90 <rcl_wait+0x1c8>
 801cd8a:	3201      	adds	r2, #1
 801cd8c:	42ba      	cmp	r2, r7
 801cd8e:	d00a      	beq.n	801cda6 <rcl_wait+0x1de>
 801cd90:	6a19      	ldr	r1, [r3, #32]
 801cd92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd96:	2900      	cmp	r1, #0
 801cd98:	d1f7      	bne.n	801cd8a <rcl_wait+0x1c2>
 801cd9a:	69ae      	ldr	r6, [r5, #24]
 801cd9c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cda0:	3201      	adds	r2, #1
 801cda2:	42ba      	cmp	r2, r7
 801cda4:	d1f4      	bne.n	801cd90 <rcl_wait+0x1c8>
 801cda6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cda8:	b17f      	cbz	r7, 801cdca <rcl_wait+0x202>
 801cdaa:	2200      	movs	r2, #0
 801cdac:	e002      	b.n	801cdb4 <rcl_wait+0x1ec>
 801cdae:	3201      	adds	r2, #1
 801cdb0:	42ba      	cmp	r2, r7
 801cdb2:	d00a      	beq.n	801cdca <rcl_wait+0x202>
 801cdb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cdb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cdba:	2900      	cmp	r1, #0
 801cdbc:	d1f7      	bne.n	801cdae <rcl_wait+0x1e6>
 801cdbe:	6a2e      	ldr	r6, [r5, #32]
 801cdc0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cdc4:	3201      	adds	r2, #1
 801cdc6:	42ba      	cmp	r2, r7
 801cdc8:	d1f4      	bne.n	801cdb4 <rcl_wait+0x1ec>
 801cdca:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cdcc:	b17f      	cbz	r7, 801cdee <rcl_wait+0x226>
 801cdce:	2200      	movs	r2, #0
 801cdd0:	e002      	b.n	801cdd8 <rcl_wait+0x210>
 801cdd2:	3201      	adds	r2, #1
 801cdd4:	42ba      	cmp	r2, r7
 801cdd6:	d00a      	beq.n	801cdee <rcl_wait+0x226>
 801cdd8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cdda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cdde:	2900      	cmp	r1, #0
 801cde0:	d1f7      	bne.n	801cdd2 <rcl_wait+0x20a>
 801cde2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801cde4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cde8:	3201      	adds	r2, #1
 801cdea:	42ba      	cmp	r2, r7
 801cdec:	d1f4      	bne.n	801cdd8 <rcl_wait+0x210>
 801cdee:	f1b8 0f02 	cmp.w	r8, #2
 801cdf2:	f47f af06 	bne.w	801cc02 <rcl_wait+0x3a>
 801cdf6:	f084 0301 	eor.w	r3, r4, #1
 801cdfa:	b2db      	uxtb	r3, r3
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	bf18      	it	ne
 801ce00:	2002      	movne	r0, #2
 801ce02:	b00d      	add	sp, #52	; 0x34
 801ce04:	ecbd 8b02 	vpop	{d8}
 801ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce0c:	2a00      	cmp	r2, #0
 801ce0e:	d03a      	beq.n	801ce86 <rcl_wait+0x2be>
 801ce10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ce14:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ce18:	e705      	b.n	801cc26 <rcl_wait+0x5e>
 801ce1a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801ce1e:	b00d      	add	sp, #52	; 0x34
 801ce20:	ecbd 8b02 	vpop	{d8}
 801ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce28:	2001      	movs	r0, #1
 801ce2a:	e6ea      	b.n	801cc02 <rcl_wait+0x3a>
 801ce2c:	9b04      	ldr	r3, [sp, #16]
 801ce2e:	460c      	mov	r4, r1
 801ce30:	2b01      	cmp	r3, #1
 801ce32:	9b05      	ldr	r3, [sp, #20]
 801ce34:	f173 0300 	sbcs.w	r3, r3, #0
 801ce38:	bfa8      	it	ge
 801ce3a:	f044 0401 	orrge.w	r4, r4, #1
 801ce3e:	b914      	cbnz	r4, 801ce46 <rcl_wait+0x27e>
 801ce40:	4623      	mov	r3, r4
 801ce42:	e747      	b.n	801ccd4 <rcl_wait+0x10c>
 801ce44:	4611      	mov	r1, r2
 801ce46:	2f00      	cmp	r7, #0
 801ce48:	da02      	bge.n	801ce50 <rcl_wait+0x288>
 801ce4a:	f04f 0800 	mov.w	r8, #0
 801ce4e:	4647      	mov	r7, r8
 801ce50:	460c      	mov	r4, r1
 801ce52:	4640      	mov	r0, r8
 801ce54:	4639      	mov	r1, r7
 801ce56:	a312      	add	r3, pc, #72	; (adr r3, 801cea0 <rcl_wait+0x2d8>)
 801ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce5c:	f7e3 fc14 	bl	8000688 <__aeabi_ldivmod>
 801ce60:	a30f      	add	r3, pc, #60	; (adr r3, 801cea0 <rcl_wait+0x2d8>)
 801ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ce6a:	4640      	mov	r0, r8
 801ce6c:	4639      	mov	r1, r7
 801ce6e:	f7e3 fc0b 	bl	8000688 <__aeabi_ldivmod>
 801ce72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ce76:	ab08      	add	r3, sp, #32
 801ce78:	e72c      	b.n	801ccd4 <rcl_wait+0x10c>
 801ce7a:	200b      	movs	r0, #11
 801ce7c:	b00d      	add	sp, #52	; 0x34
 801ce7e:	ecbd 8b02 	vpop	{d8}
 801ce82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce86:	4611      	mov	r1, r2
 801ce88:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ce8c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ce90:	e713      	b.n	801ccba <rcl_wait+0xf2>
 801ce92:	bf00      	nop
 801ce94:	f3af 8000 	nop.w
 801ce98:	ffffffff 	.word	0xffffffff
 801ce9c:	7fffffff 	.word	0x7fffffff
 801cea0:	3b9aca00 	.word	0x3b9aca00
 801cea4:	00000000 	.word	0x00000000

0801cea8 <rcl_action_take_goal_response>:
 801cea8:	2800      	cmp	r0, #0
 801ceaa:	d039      	beq.n	801cf20 <rcl_action_take_goal_response+0x78>
 801ceac:	b570      	push	{r4, r5, r6, lr}
 801ceae:	4604      	mov	r4, r0
 801ceb0:	6800      	ldr	r0, [r0, #0]
 801ceb2:	b380      	cbz	r0, 801cf16 <rcl_action_take_goal_response+0x6e>
 801ceb4:	460e      	mov	r6, r1
 801ceb6:	4615      	mov	r5, r2
 801ceb8:	f7fe fbc6 	bl	801b648 <rcl_client_is_valid>
 801cebc:	b330      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cebe:	6820      	ldr	r0, [r4, #0]
 801cec0:	3004      	adds	r0, #4
 801cec2:	f7fe fbc1 	bl	801b648 <rcl_client_is_valid>
 801cec6:	b308      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cec8:	6820      	ldr	r0, [r4, #0]
 801ceca:	3008      	adds	r0, #8
 801cecc:	f7fe fbbc 	bl	801b648 <rcl_client_is_valid>
 801ced0:	b1e0      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801ced2:	6820      	ldr	r0, [r4, #0]
 801ced4:	300c      	adds	r0, #12
 801ced6:	f7f7 f9fb 	bl	80142d0 <rcl_subscription_is_valid>
 801ceda:	b1b8      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cedc:	6820      	ldr	r0, [r4, #0]
 801cede:	3010      	adds	r0, #16
 801cee0:	f7f7 f9f6 	bl	80142d0 <rcl_subscription_is_valid>
 801cee4:	b190      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cee6:	b1cd      	cbz	r5, 801cf1c <rcl_action_take_goal_response+0x74>
 801cee8:	b1c6      	cbz	r6, 801cf1c <rcl_action_take_goal_response+0x74>
 801ceea:	462a      	mov	r2, r5
 801ceec:	4631      	mov	r1, r6
 801ceee:	6820      	ldr	r0, [r4, #0]
 801cef0:	f7fe fb62 	bl	801b5b8 <rcl_take_response>
 801cef4:	b148      	cbz	r0, 801cf0a <rcl_action_take_goal_response+0x62>
 801cef6:	280a      	cmp	r0, #10
 801cef8:	d007      	beq.n	801cf0a <rcl_action_take_goal_response+0x62>
 801cefa:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cefe:	f640 0337 	movw	r3, #2103	; 0x837
 801cf02:	4290      	cmp	r0, r2
 801cf04:	bf0c      	ite	eq
 801cf06:	4618      	moveq	r0, r3
 801cf08:	2001      	movne	r0, #1
 801cf0a:	bd70      	pop	{r4, r5, r6, pc}
 801cf0c:	f7f8 fa00 	bl	8015310 <rcutils_reset_error>
 801cf10:	f640 0036 	movw	r0, #2102	; 0x836
 801cf14:	bd70      	pop	{r4, r5, r6, pc}
 801cf16:	f640 0036 	movw	r0, #2102	; 0x836
 801cf1a:	bd70      	pop	{r4, r5, r6, pc}
 801cf1c:	200b      	movs	r0, #11
 801cf1e:	bd70      	pop	{r4, r5, r6, pc}
 801cf20:	f640 0036 	movw	r0, #2102	; 0x836
 801cf24:	4770      	bx	lr
 801cf26:	bf00      	nop

0801cf28 <rcl_action_send_result_request>:
 801cf28:	b390      	cbz	r0, 801cf90 <rcl_action_send_result_request+0x68>
 801cf2a:	b570      	push	{r4, r5, r6, lr}
 801cf2c:	4604      	mov	r4, r0
 801cf2e:	6800      	ldr	r0, [r0, #0]
 801cf30:	b348      	cbz	r0, 801cf86 <rcl_action_send_result_request+0x5e>
 801cf32:	460e      	mov	r6, r1
 801cf34:	4615      	mov	r5, r2
 801cf36:	f7fe fb87 	bl	801b648 <rcl_client_is_valid>
 801cf3a:	b1f8      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf3c:	6820      	ldr	r0, [r4, #0]
 801cf3e:	3004      	adds	r0, #4
 801cf40:	f7fe fb82 	bl	801b648 <rcl_client_is_valid>
 801cf44:	b1d0      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf46:	6820      	ldr	r0, [r4, #0]
 801cf48:	3008      	adds	r0, #8
 801cf4a:	f7fe fb7d 	bl	801b648 <rcl_client_is_valid>
 801cf4e:	b1a8      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf50:	6820      	ldr	r0, [r4, #0]
 801cf52:	300c      	adds	r0, #12
 801cf54:	f7f7 f9bc 	bl	80142d0 <rcl_subscription_is_valid>
 801cf58:	b180      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf5a:	6820      	ldr	r0, [r4, #0]
 801cf5c:	3010      	adds	r0, #16
 801cf5e:	f7f7 f9b7 	bl	80142d0 <rcl_subscription_is_valid>
 801cf62:	b158      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf64:	b195      	cbz	r5, 801cf8c <rcl_action_send_result_request+0x64>
 801cf66:	b18e      	cbz	r6, 801cf8c <rcl_action_send_result_request+0x64>
 801cf68:	6820      	ldr	r0, [r4, #0]
 801cf6a:	462a      	mov	r2, r5
 801cf6c:	4631      	mov	r1, r6
 801cf6e:	3008      	adds	r0, #8
 801cf70:	f7fe faea 	bl	801b548 <rcl_send_request>
 801cf74:	3800      	subs	r0, #0
 801cf76:	bf18      	it	ne
 801cf78:	2001      	movne	r0, #1
 801cf7a:	bd70      	pop	{r4, r5, r6, pc}
 801cf7c:	f7f8 f9c8 	bl	8015310 <rcutils_reset_error>
 801cf80:	f640 0036 	movw	r0, #2102	; 0x836
 801cf84:	bd70      	pop	{r4, r5, r6, pc}
 801cf86:	f640 0036 	movw	r0, #2102	; 0x836
 801cf8a:	bd70      	pop	{r4, r5, r6, pc}
 801cf8c:	200b      	movs	r0, #11
 801cf8e:	bd70      	pop	{r4, r5, r6, pc}
 801cf90:	f640 0036 	movw	r0, #2102	; 0x836
 801cf94:	4770      	bx	lr
 801cf96:	bf00      	nop

0801cf98 <rcl_action_take_result_response>:
 801cf98:	2800      	cmp	r0, #0
 801cf9a:	d03a      	beq.n	801d012 <rcl_action_take_result_response+0x7a>
 801cf9c:	b570      	push	{r4, r5, r6, lr}
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	6800      	ldr	r0, [r0, #0]
 801cfa2:	b388      	cbz	r0, 801d008 <rcl_action_take_result_response+0x70>
 801cfa4:	460e      	mov	r6, r1
 801cfa6:	4615      	mov	r5, r2
 801cfa8:	f7fe fb4e 	bl	801b648 <rcl_client_is_valid>
 801cfac:	b338      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfae:	6820      	ldr	r0, [r4, #0]
 801cfb0:	3004      	adds	r0, #4
 801cfb2:	f7fe fb49 	bl	801b648 <rcl_client_is_valid>
 801cfb6:	b310      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfb8:	6820      	ldr	r0, [r4, #0]
 801cfba:	3008      	adds	r0, #8
 801cfbc:	f7fe fb44 	bl	801b648 <rcl_client_is_valid>
 801cfc0:	b1e8      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfc2:	6820      	ldr	r0, [r4, #0]
 801cfc4:	300c      	adds	r0, #12
 801cfc6:	f7f7 f983 	bl	80142d0 <rcl_subscription_is_valid>
 801cfca:	b1c0      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfcc:	6820      	ldr	r0, [r4, #0]
 801cfce:	3010      	adds	r0, #16
 801cfd0:	f7f7 f97e 	bl	80142d0 <rcl_subscription_is_valid>
 801cfd4:	b198      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfd6:	b1d5      	cbz	r5, 801d00e <rcl_action_take_result_response+0x76>
 801cfd8:	b1ce      	cbz	r6, 801d00e <rcl_action_take_result_response+0x76>
 801cfda:	6820      	ldr	r0, [r4, #0]
 801cfdc:	462a      	mov	r2, r5
 801cfde:	4631      	mov	r1, r6
 801cfe0:	3008      	adds	r0, #8
 801cfe2:	f7fe fae9 	bl	801b5b8 <rcl_take_response>
 801cfe6:	b148      	cbz	r0, 801cffc <rcl_action_take_result_response+0x64>
 801cfe8:	280a      	cmp	r0, #10
 801cfea:	d007      	beq.n	801cffc <rcl_action_take_result_response+0x64>
 801cfec:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cff0:	f640 0337 	movw	r3, #2103	; 0x837
 801cff4:	4290      	cmp	r0, r2
 801cff6:	bf0c      	ite	eq
 801cff8:	4618      	moveq	r0, r3
 801cffa:	2001      	movne	r0, #1
 801cffc:	bd70      	pop	{r4, r5, r6, pc}
 801cffe:	f7f8 f987 	bl	8015310 <rcutils_reset_error>
 801d002:	f640 0036 	movw	r0, #2102	; 0x836
 801d006:	bd70      	pop	{r4, r5, r6, pc}
 801d008:	f640 0036 	movw	r0, #2102	; 0x836
 801d00c:	bd70      	pop	{r4, r5, r6, pc}
 801d00e:	200b      	movs	r0, #11
 801d010:	bd70      	pop	{r4, r5, r6, pc}
 801d012:	f640 0036 	movw	r0, #2102	; 0x836
 801d016:	4770      	bx	lr

0801d018 <rcl_action_take_cancel_response>:
 801d018:	2800      	cmp	r0, #0
 801d01a:	d03a      	beq.n	801d092 <rcl_action_take_cancel_response+0x7a>
 801d01c:	b570      	push	{r4, r5, r6, lr}
 801d01e:	4604      	mov	r4, r0
 801d020:	6800      	ldr	r0, [r0, #0]
 801d022:	b388      	cbz	r0, 801d088 <rcl_action_take_cancel_response+0x70>
 801d024:	460e      	mov	r6, r1
 801d026:	4615      	mov	r5, r2
 801d028:	f7fe fb0e 	bl	801b648 <rcl_client_is_valid>
 801d02c:	b338      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d02e:	6820      	ldr	r0, [r4, #0]
 801d030:	3004      	adds	r0, #4
 801d032:	f7fe fb09 	bl	801b648 <rcl_client_is_valid>
 801d036:	b310      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d038:	6820      	ldr	r0, [r4, #0]
 801d03a:	3008      	adds	r0, #8
 801d03c:	f7fe fb04 	bl	801b648 <rcl_client_is_valid>
 801d040:	b1e8      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d042:	6820      	ldr	r0, [r4, #0]
 801d044:	300c      	adds	r0, #12
 801d046:	f7f7 f943 	bl	80142d0 <rcl_subscription_is_valid>
 801d04a:	b1c0      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d04c:	6820      	ldr	r0, [r4, #0]
 801d04e:	3010      	adds	r0, #16
 801d050:	f7f7 f93e 	bl	80142d0 <rcl_subscription_is_valid>
 801d054:	b198      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d056:	b1d5      	cbz	r5, 801d08e <rcl_action_take_cancel_response+0x76>
 801d058:	b1ce      	cbz	r6, 801d08e <rcl_action_take_cancel_response+0x76>
 801d05a:	6820      	ldr	r0, [r4, #0]
 801d05c:	462a      	mov	r2, r5
 801d05e:	4631      	mov	r1, r6
 801d060:	3004      	adds	r0, #4
 801d062:	f7fe faa9 	bl	801b5b8 <rcl_take_response>
 801d066:	b148      	cbz	r0, 801d07c <rcl_action_take_cancel_response+0x64>
 801d068:	280a      	cmp	r0, #10
 801d06a:	d007      	beq.n	801d07c <rcl_action_take_cancel_response+0x64>
 801d06c:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d070:	f640 0337 	movw	r3, #2103	; 0x837
 801d074:	4290      	cmp	r0, r2
 801d076:	bf0c      	ite	eq
 801d078:	4618      	moveq	r0, r3
 801d07a:	2001      	movne	r0, #1
 801d07c:	bd70      	pop	{r4, r5, r6, pc}
 801d07e:	f7f8 f947 	bl	8015310 <rcutils_reset_error>
 801d082:	f640 0036 	movw	r0, #2102	; 0x836
 801d086:	bd70      	pop	{r4, r5, r6, pc}
 801d088:	f640 0036 	movw	r0, #2102	; 0x836
 801d08c:	bd70      	pop	{r4, r5, r6, pc}
 801d08e:	200b      	movs	r0, #11
 801d090:	bd70      	pop	{r4, r5, r6, pc}
 801d092:	f640 0036 	movw	r0, #2102	; 0x836
 801d096:	4770      	bx	lr

0801d098 <rcl_action_take_feedback>:
 801d098:	2800      	cmp	r0, #0
 801d09a:	d038      	beq.n	801d10e <rcl_action_take_feedback+0x76>
 801d09c:	b530      	push	{r4, r5, lr}
 801d09e:	4604      	mov	r4, r0
 801d0a0:	6800      	ldr	r0, [r0, #0]
 801d0a2:	b091      	sub	sp, #68	; 0x44
 801d0a4:	b378      	cbz	r0, 801d106 <rcl_action_take_feedback+0x6e>
 801d0a6:	460d      	mov	r5, r1
 801d0a8:	f7fe face 	bl	801b648 <rcl_client_is_valid>
 801d0ac:	b328      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0ae:	6820      	ldr	r0, [r4, #0]
 801d0b0:	3004      	adds	r0, #4
 801d0b2:	f7fe fac9 	bl	801b648 <rcl_client_is_valid>
 801d0b6:	b300      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0b8:	6820      	ldr	r0, [r4, #0]
 801d0ba:	3008      	adds	r0, #8
 801d0bc:	f7fe fac4 	bl	801b648 <rcl_client_is_valid>
 801d0c0:	b1d8      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0c2:	6820      	ldr	r0, [r4, #0]
 801d0c4:	300c      	adds	r0, #12
 801d0c6:	f7f7 f903 	bl	80142d0 <rcl_subscription_is_valid>
 801d0ca:	b1b0      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0cc:	6820      	ldr	r0, [r4, #0]
 801d0ce:	3010      	adds	r0, #16
 801d0d0:	f7f7 f8fe 	bl	80142d0 <rcl_subscription_is_valid>
 801d0d4:	b188      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0d6:	b1ed      	cbz	r5, 801d114 <rcl_action_take_feedback+0x7c>
 801d0d8:	6820      	ldr	r0, [r4, #0]
 801d0da:	2300      	movs	r3, #0
 801d0dc:	466a      	mov	r2, sp
 801d0de:	4629      	mov	r1, r5
 801d0e0:	300c      	adds	r0, #12
 801d0e2:	f7f7 f899 	bl	8014218 <rcl_take>
 801d0e6:	b160      	cbz	r0, 801d102 <rcl_action_take_feedback+0x6a>
 801d0e8:	f240 1391 	movw	r3, #401	; 0x191
 801d0ec:	4298      	cmp	r0, r3
 801d0ee:	d014      	beq.n	801d11a <rcl_action_take_feedback+0x82>
 801d0f0:	280a      	cmp	r0, #10
 801d0f2:	bf18      	it	ne
 801d0f4:	2001      	movne	r0, #1
 801d0f6:	b011      	add	sp, #68	; 0x44
 801d0f8:	bd30      	pop	{r4, r5, pc}
 801d0fa:	f7f8 f909 	bl	8015310 <rcutils_reset_error>
 801d0fe:	f640 0036 	movw	r0, #2102	; 0x836
 801d102:	b011      	add	sp, #68	; 0x44
 801d104:	bd30      	pop	{r4, r5, pc}
 801d106:	f640 0036 	movw	r0, #2102	; 0x836
 801d10a:	b011      	add	sp, #68	; 0x44
 801d10c:	bd30      	pop	{r4, r5, pc}
 801d10e:	f640 0036 	movw	r0, #2102	; 0x836
 801d112:	4770      	bx	lr
 801d114:	200b      	movs	r0, #11
 801d116:	b011      	add	sp, #68	; 0x44
 801d118:	bd30      	pop	{r4, r5, pc}
 801d11a:	f640 0037 	movw	r0, #2103	; 0x837
 801d11e:	e7f0      	b.n	801d102 <rcl_action_take_feedback+0x6a>

0801d120 <rcl_action_wait_set_add_action_client>:
 801d120:	2800      	cmp	r0, #0
 801d122:	d048      	beq.n	801d1b6 <rcl_action_wait_set_add_action_client+0x96>
 801d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d126:	460c      	mov	r4, r1
 801d128:	2900      	cmp	r1, #0
 801d12a:	d03c      	beq.n	801d1a6 <rcl_action_wait_set_add_action_client+0x86>
 801d12c:	4605      	mov	r5, r0
 801d12e:	6808      	ldr	r0, [r1, #0]
 801d130:	2800      	cmp	r0, #0
 801d132:	d038      	beq.n	801d1a6 <rcl_action_wait_set_add_action_client+0x86>
 801d134:	4617      	mov	r7, r2
 801d136:	461e      	mov	r6, r3
 801d138:	f7fe fa86 	bl	801b648 <rcl_client_is_valid>
 801d13c:	b3b0      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d13e:	6820      	ldr	r0, [r4, #0]
 801d140:	3004      	adds	r0, #4
 801d142:	f7fe fa81 	bl	801b648 <rcl_client_is_valid>
 801d146:	b388      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d148:	6820      	ldr	r0, [r4, #0]
 801d14a:	3008      	adds	r0, #8
 801d14c:	f7fe fa7c 	bl	801b648 <rcl_client_is_valid>
 801d150:	b360      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d152:	6820      	ldr	r0, [r4, #0]
 801d154:	300c      	adds	r0, #12
 801d156:	f7f7 f8bb 	bl	80142d0 <rcl_subscription_is_valid>
 801d15a:	b338      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d15c:	6820      	ldr	r0, [r4, #0]
 801d15e:	3010      	adds	r0, #16
 801d160:	f7f7 f8b6 	bl	80142d0 <rcl_subscription_is_valid>
 801d164:	b310      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d166:	6821      	ldr	r1, [r4, #0]
 801d168:	4628      	mov	r0, r5
 801d16a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801d16e:	f7ff fcd1 	bl	801cb14 <rcl_wait_set_add_client>
 801d172:	b9b8      	cbnz	r0, 801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d174:	6821      	ldr	r1, [r4, #0]
 801d176:	4628      	mov	r0, r5
 801d178:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801d17c:	3104      	adds	r1, #4
 801d17e:	f7ff fcc9 	bl	801cb14 <rcl_wait_set_add_client>
 801d182:	b978      	cbnz	r0, 801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d184:	6821      	ldr	r1, [r4, #0]
 801d186:	4628      	mov	r0, r5
 801d188:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801d18c:	3108      	adds	r1, #8
 801d18e:	f7ff fcc1 	bl	801cb14 <rcl_wait_set_add_client>
 801d192:	b938      	cbnz	r0, 801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d194:	6821      	ldr	r1, [r4, #0]
 801d196:	4628      	mov	r0, r5
 801d198:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801d19c:	310c      	adds	r1, #12
 801d19e:	f7ff f969 	bl	801c474 <rcl_wait_set_add_subscription>
 801d1a2:	b158      	cbz	r0, 801d1bc <rcl_action_wait_set_add_action_client+0x9c>
 801d1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1a6:	f640 0036 	movw	r0, #2102	; 0x836
 801d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ac:	f7f8 f8b0 	bl	8015310 <rcutils_reset_error>
 801d1b0:	f640 0036 	movw	r0, #2102	; 0x836
 801d1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d1ba:	4770      	bx	lr
 801d1bc:	6821      	ldr	r1, [r4, #0]
 801d1be:	4628      	mov	r0, r5
 801d1c0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801d1c4:	3110      	adds	r1, #16
 801d1c6:	f7ff f955 	bl	801c474 <rcl_wait_set_add_subscription>
 801d1ca:	2800      	cmp	r0, #0
 801d1cc:	d1ea      	bne.n	801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d1ce:	b11f      	cbz	r7, 801d1d8 <rcl_action_wait_set_add_action_client+0xb8>
 801d1d0:	6823      	ldr	r3, [r4, #0]
 801d1d2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801d1d6:	603b      	str	r3, [r7, #0]
 801d1d8:	2e00      	cmp	r6, #0
 801d1da:	d0e3      	beq.n	801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d1dc:	6823      	ldr	r3, [r4, #0]
 801d1de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801d1e2:	6033      	str	r3, [r6, #0]
 801d1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1e6:	bf00      	nop

0801d1e8 <rcl_action_client_wait_set_get_entities_ready>:
 801d1e8:	2800      	cmp	r0, #0
 801d1ea:	d050      	beq.n	801d28e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1f0:	460c      	mov	r4, r1
 801d1f2:	2900      	cmp	r1, #0
 801d1f4:	d03e      	beq.n	801d274 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d1f6:	4605      	mov	r5, r0
 801d1f8:	6808      	ldr	r0, [r1, #0]
 801d1fa:	2800      	cmp	r0, #0
 801d1fc:	d03a      	beq.n	801d274 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d1fe:	4616      	mov	r6, r2
 801d200:	461f      	mov	r7, r3
 801d202:	f7fe fa21 	bl	801b648 <rcl_client_is_valid>
 801d206:	2800      	cmp	r0, #0
 801d208:	d038      	beq.n	801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d20a:	6820      	ldr	r0, [r4, #0]
 801d20c:	3004      	adds	r0, #4
 801d20e:	f7fe fa1b 	bl	801b648 <rcl_client_is_valid>
 801d212:	2800      	cmp	r0, #0
 801d214:	d032      	beq.n	801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d216:	6820      	ldr	r0, [r4, #0]
 801d218:	3008      	adds	r0, #8
 801d21a:	f7fe fa15 	bl	801b648 <rcl_client_is_valid>
 801d21e:	b368      	cbz	r0, 801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d220:	6820      	ldr	r0, [r4, #0]
 801d222:	300c      	adds	r0, #12
 801d224:	f7f7 f854 	bl	80142d0 <rcl_subscription_is_valid>
 801d228:	b340      	cbz	r0, 801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d22a:	6820      	ldr	r0, [r4, #0]
 801d22c:	3010      	adds	r0, #16
 801d22e:	f7f7 f84f 	bl	80142d0 <rcl_subscription_is_valid>
 801d232:	b318      	cbz	r0, 801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d234:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d238:	2a00      	cmp	r2, #0
 801d23a:	bf18      	it	ne
 801d23c:	2b00      	cmpne	r3, #0
 801d23e:	9b08      	ldr	r3, [sp, #32]
 801d240:	bf0c      	ite	eq
 801d242:	2101      	moveq	r1, #1
 801d244:	2100      	movne	r1, #0
 801d246:	2b00      	cmp	r3, #0
 801d248:	bf08      	it	eq
 801d24a:	f041 0101 	orreq.w	r1, r1, #1
 801d24e:	2f00      	cmp	r7, #0
 801d250:	bf08      	it	eq
 801d252:	f041 0101 	orreq.w	r1, r1, #1
 801d256:	b9b9      	cbnz	r1, 801d288 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d258:	b1b6      	cbz	r6, 801d288 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d25a:	6823      	ldr	r3, [r4, #0]
 801d25c:	686c      	ldr	r4, [r5, #4]
 801d25e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801d262:	428a      	cmp	r2, r1
 801d264:	4610      	mov	r0, r2
 801d266:	bf38      	it	cc
 801d268:	4608      	movcc	r0, r1
 801d26a:	4284      	cmp	r4, r0
 801d26c:	d812      	bhi.n	801d294 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d26e:	2001      	movs	r0, #1
 801d270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d274:	f640 0036 	movw	r0, #2102	; 0x836
 801d278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d27c:	f7f8 f848 	bl	8015310 <rcutils_reset_error>
 801d280:	f640 0036 	movw	r0, #2102	; 0x836
 801d284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d288:	200b      	movs	r0, #11
 801d28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d28e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d292:	4770      	bx	lr
 801d294:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d298:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d29c:	45f0      	cmp	r8, lr
 801d29e:	4640      	mov	r0, r8
 801d2a0:	69ec      	ldr	r4, [r5, #28]
 801d2a2:	bf38      	it	cc
 801d2a4:	4670      	movcc	r0, lr
 801d2a6:	4560      	cmp	r0, ip
 801d2a8:	bf38      	it	cc
 801d2aa:	4660      	movcc	r0, ip
 801d2ac:	4284      	cmp	r4, r0
 801d2ae:	d9de      	bls.n	801d26e <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d2b0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d2b4:	682d      	ldr	r5, [r5, #0]
 801d2b6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d2ba:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d2be:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d2c2:	1a18      	subs	r0, r3, r0
 801d2c4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d2c8:	f103 0c0c 	add.w	ip, r3, #12
 801d2cc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d2d0:	fab0 f080 	clz	r0, r0
 801d2d4:	eba5 050c 	sub.w	r5, r5, ip
 801d2d8:	0940      	lsrs	r0, r0, #5
 801d2da:	fab5 f585 	clz	r5, r5
 801d2de:	096d      	lsrs	r5, r5, #5
 801d2e0:	7035      	strb	r5, [r6, #0]
 801d2e2:	f103 0510 	add.w	r5, r3, #16
 801d2e6:	1b64      	subs	r4, r4, r5
 801d2e8:	9d08      	ldr	r5, [sp, #32]
 801d2ea:	fab4 f484 	clz	r4, r4
 801d2ee:	0964      	lsrs	r4, r4, #5
 801d2f0:	703c      	strb	r4, [r7, #0]
 801d2f2:	1d1c      	adds	r4, r3, #4
 801d2f4:	3308      	adds	r3, #8
 801d2f6:	7028      	strb	r0, [r5, #0]
 801d2f8:	1b09      	subs	r1, r1, r4
 801d2fa:	2000      	movs	r0, #0
 801d2fc:	1ad3      	subs	r3, r2, r3
 801d2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d300:	fab1 f181 	clz	r1, r1
 801d304:	fab3 f383 	clz	r3, r3
 801d308:	0949      	lsrs	r1, r1, #5
 801d30a:	095b      	lsrs	r3, r3, #5
 801d30c:	7011      	strb	r1, [r2, #0]
 801d30e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d310:	7013      	strb	r3, [r2, #0]
 801d312:	e7b1      	b.n	801d278 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d314 <rcl_action_take_goal_request>:
 801d314:	2800      	cmp	r0, #0
 801d316:	d039      	beq.n	801d38c <rcl_action_take_goal_request+0x78>
 801d318:	b570      	push	{r4, r5, r6, lr}
 801d31a:	4604      	mov	r4, r0
 801d31c:	6800      	ldr	r0, [r0, #0]
 801d31e:	b380      	cbz	r0, 801d382 <rcl_action_take_goal_request+0x6e>
 801d320:	460e      	mov	r6, r1
 801d322:	4615      	mov	r5, r2
 801d324:	f7f6 fe8c 	bl	8014040 <rcl_service_is_valid>
 801d328:	b330      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d32a:	6820      	ldr	r0, [r4, #0]
 801d32c:	3004      	adds	r0, #4
 801d32e:	f7f6 fe87 	bl	8014040 <rcl_service_is_valid>
 801d332:	b308      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d334:	6820      	ldr	r0, [r4, #0]
 801d336:	3008      	adds	r0, #8
 801d338:	f7f6 fe82 	bl	8014040 <rcl_service_is_valid>
 801d33c:	b1e0      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d33e:	6820      	ldr	r0, [r4, #0]
 801d340:	300c      	adds	r0, #12
 801d342:	f7f6 fd41 	bl	8013dc8 <rcl_publisher_is_valid>
 801d346:	b1b8      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d348:	6820      	ldr	r0, [r4, #0]
 801d34a:	3010      	adds	r0, #16
 801d34c:	f7f6 fd3c 	bl	8013dc8 <rcl_publisher_is_valid>
 801d350:	b190      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d352:	b1cd      	cbz	r5, 801d388 <rcl_action_take_goal_request+0x74>
 801d354:	b1c6      	cbz	r6, 801d388 <rcl_action_take_goal_request+0x74>
 801d356:	462a      	mov	r2, r5
 801d358:	4631      	mov	r1, r6
 801d35a:	6820      	ldr	r0, [r4, #0]
 801d35c:	f7f6 fe18 	bl	8013f90 <rcl_take_request>
 801d360:	b148      	cbz	r0, 801d376 <rcl_action_take_goal_request+0x62>
 801d362:	280a      	cmp	r0, #10
 801d364:	d007      	beq.n	801d376 <rcl_action_take_goal_request+0x62>
 801d366:	f240 2259 	movw	r2, #601	; 0x259
 801d36a:	f640 0399 	movw	r3, #2201	; 0x899
 801d36e:	4290      	cmp	r0, r2
 801d370:	bf0c      	ite	eq
 801d372:	4618      	moveq	r0, r3
 801d374:	2001      	movne	r0, #1
 801d376:	bd70      	pop	{r4, r5, r6, pc}
 801d378:	f7f7 ffca 	bl	8015310 <rcutils_reset_error>
 801d37c:	f640 0098 	movw	r0, #2200	; 0x898
 801d380:	bd70      	pop	{r4, r5, r6, pc}
 801d382:	f640 0098 	movw	r0, #2200	; 0x898
 801d386:	bd70      	pop	{r4, r5, r6, pc}
 801d388:	200b      	movs	r0, #11
 801d38a:	bd70      	pop	{r4, r5, r6, pc}
 801d38c:	f640 0098 	movw	r0, #2200	; 0x898
 801d390:	4770      	bx	lr
 801d392:	bf00      	nop

0801d394 <rcl_action_send_goal_response>:
 801d394:	b388      	cbz	r0, 801d3fa <rcl_action_send_goal_response+0x66>
 801d396:	b570      	push	{r4, r5, r6, lr}
 801d398:	4604      	mov	r4, r0
 801d39a:	6800      	ldr	r0, [r0, #0]
 801d39c:	b340      	cbz	r0, 801d3f0 <rcl_action_send_goal_response+0x5c>
 801d39e:	460e      	mov	r6, r1
 801d3a0:	4615      	mov	r5, r2
 801d3a2:	f7f6 fe4d 	bl	8014040 <rcl_service_is_valid>
 801d3a6:	b1f0      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3a8:	6820      	ldr	r0, [r4, #0]
 801d3aa:	3004      	adds	r0, #4
 801d3ac:	f7f6 fe48 	bl	8014040 <rcl_service_is_valid>
 801d3b0:	b1c8      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3b2:	6820      	ldr	r0, [r4, #0]
 801d3b4:	3008      	adds	r0, #8
 801d3b6:	f7f6 fe43 	bl	8014040 <rcl_service_is_valid>
 801d3ba:	b1a0      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3bc:	6820      	ldr	r0, [r4, #0]
 801d3be:	300c      	adds	r0, #12
 801d3c0:	f7f6 fd02 	bl	8013dc8 <rcl_publisher_is_valid>
 801d3c4:	b178      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3c6:	6820      	ldr	r0, [r4, #0]
 801d3c8:	3010      	adds	r0, #16
 801d3ca:	f7f6 fcfd 	bl	8013dc8 <rcl_publisher_is_valid>
 801d3ce:	b150      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3d0:	b18d      	cbz	r5, 801d3f6 <rcl_action_send_goal_response+0x62>
 801d3d2:	b186      	cbz	r6, 801d3f6 <rcl_action_send_goal_response+0x62>
 801d3d4:	462a      	mov	r2, r5
 801d3d6:	4631      	mov	r1, r6
 801d3d8:	6820      	ldr	r0, [r4, #0]
 801d3da:	f7f6 fe19 	bl	8014010 <rcl_send_response>
 801d3de:	3800      	subs	r0, #0
 801d3e0:	bf18      	it	ne
 801d3e2:	2001      	movne	r0, #1
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}
 801d3e6:	f7f7 ff93 	bl	8015310 <rcutils_reset_error>
 801d3ea:	f640 0098 	movw	r0, #2200	; 0x898
 801d3ee:	bd70      	pop	{r4, r5, r6, pc}
 801d3f0:	f640 0098 	movw	r0, #2200	; 0x898
 801d3f4:	bd70      	pop	{r4, r5, r6, pc}
 801d3f6:	200b      	movs	r0, #11
 801d3f8:	bd70      	pop	{r4, r5, r6, pc}
 801d3fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d3fe:	4770      	bx	lr

0801d400 <rcl_action_take_result_request>:
 801d400:	2800      	cmp	r0, #0
 801d402:	d03a      	beq.n	801d47a <rcl_action_take_result_request+0x7a>
 801d404:	b570      	push	{r4, r5, r6, lr}
 801d406:	4604      	mov	r4, r0
 801d408:	6800      	ldr	r0, [r0, #0]
 801d40a:	b388      	cbz	r0, 801d470 <rcl_action_take_result_request+0x70>
 801d40c:	460e      	mov	r6, r1
 801d40e:	4615      	mov	r5, r2
 801d410:	f7f6 fe16 	bl	8014040 <rcl_service_is_valid>
 801d414:	b338      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d416:	6820      	ldr	r0, [r4, #0]
 801d418:	3004      	adds	r0, #4
 801d41a:	f7f6 fe11 	bl	8014040 <rcl_service_is_valid>
 801d41e:	b310      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d420:	6820      	ldr	r0, [r4, #0]
 801d422:	3008      	adds	r0, #8
 801d424:	f7f6 fe0c 	bl	8014040 <rcl_service_is_valid>
 801d428:	b1e8      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d42a:	6820      	ldr	r0, [r4, #0]
 801d42c:	300c      	adds	r0, #12
 801d42e:	f7f6 fccb 	bl	8013dc8 <rcl_publisher_is_valid>
 801d432:	b1c0      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d434:	6820      	ldr	r0, [r4, #0]
 801d436:	3010      	adds	r0, #16
 801d438:	f7f6 fcc6 	bl	8013dc8 <rcl_publisher_is_valid>
 801d43c:	b198      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d43e:	b1d5      	cbz	r5, 801d476 <rcl_action_take_result_request+0x76>
 801d440:	b1ce      	cbz	r6, 801d476 <rcl_action_take_result_request+0x76>
 801d442:	6820      	ldr	r0, [r4, #0]
 801d444:	462a      	mov	r2, r5
 801d446:	4631      	mov	r1, r6
 801d448:	3008      	adds	r0, #8
 801d44a:	f7f6 fda1 	bl	8013f90 <rcl_take_request>
 801d44e:	b148      	cbz	r0, 801d464 <rcl_action_take_result_request+0x64>
 801d450:	280a      	cmp	r0, #10
 801d452:	d007      	beq.n	801d464 <rcl_action_take_result_request+0x64>
 801d454:	f240 2259 	movw	r2, #601	; 0x259
 801d458:	f640 0399 	movw	r3, #2201	; 0x899
 801d45c:	4290      	cmp	r0, r2
 801d45e:	bf0c      	ite	eq
 801d460:	4618      	moveq	r0, r3
 801d462:	2001      	movne	r0, #1
 801d464:	bd70      	pop	{r4, r5, r6, pc}
 801d466:	f7f7 ff53 	bl	8015310 <rcutils_reset_error>
 801d46a:	f640 0098 	movw	r0, #2200	; 0x898
 801d46e:	bd70      	pop	{r4, r5, r6, pc}
 801d470:	f640 0098 	movw	r0, #2200	; 0x898
 801d474:	bd70      	pop	{r4, r5, r6, pc}
 801d476:	200b      	movs	r0, #11
 801d478:	bd70      	pop	{r4, r5, r6, pc}
 801d47a:	f640 0098 	movw	r0, #2200	; 0x898
 801d47e:	4770      	bx	lr

0801d480 <rcl_action_take_cancel_request>:
 801d480:	2800      	cmp	r0, #0
 801d482:	d03a      	beq.n	801d4fa <rcl_action_take_cancel_request+0x7a>
 801d484:	b570      	push	{r4, r5, r6, lr}
 801d486:	4604      	mov	r4, r0
 801d488:	6800      	ldr	r0, [r0, #0]
 801d48a:	b388      	cbz	r0, 801d4f0 <rcl_action_take_cancel_request+0x70>
 801d48c:	460e      	mov	r6, r1
 801d48e:	4615      	mov	r5, r2
 801d490:	f7f6 fdd6 	bl	8014040 <rcl_service_is_valid>
 801d494:	b338      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d496:	6820      	ldr	r0, [r4, #0]
 801d498:	3004      	adds	r0, #4
 801d49a:	f7f6 fdd1 	bl	8014040 <rcl_service_is_valid>
 801d49e:	b310      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4a0:	6820      	ldr	r0, [r4, #0]
 801d4a2:	3008      	adds	r0, #8
 801d4a4:	f7f6 fdcc 	bl	8014040 <rcl_service_is_valid>
 801d4a8:	b1e8      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4aa:	6820      	ldr	r0, [r4, #0]
 801d4ac:	300c      	adds	r0, #12
 801d4ae:	f7f6 fc8b 	bl	8013dc8 <rcl_publisher_is_valid>
 801d4b2:	b1c0      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4b4:	6820      	ldr	r0, [r4, #0]
 801d4b6:	3010      	adds	r0, #16
 801d4b8:	f7f6 fc86 	bl	8013dc8 <rcl_publisher_is_valid>
 801d4bc:	b198      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4be:	b1d5      	cbz	r5, 801d4f6 <rcl_action_take_cancel_request+0x76>
 801d4c0:	b1ce      	cbz	r6, 801d4f6 <rcl_action_take_cancel_request+0x76>
 801d4c2:	6820      	ldr	r0, [r4, #0]
 801d4c4:	462a      	mov	r2, r5
 801d4c6:	4631      	mov	r1, r6
 801d4c8:	3004      	adds	r0, #4
 801d4ca:	f7f6 fd61 	bl	8013f90 <rcl_take_request>
 801d4ce:	b148      	cbz	r0, 801d4e4 <rcl_action_take_cancel_request+0x64>
 801d4d0:	280a      	cmp	r0, #10
 801d4d2:	d007      	beq.n	801d4e4 <rcl_action_take_cancel_request+0x64>
 801d4d4:	f240 2259 	movw	r2, #601	; 0x259
 801d4d8:	f640 0399 	movw	r3, #2201	; 0x899
 801d4dc:	4290      	cmp	r0, r2
 801d4de:	bf0c      	ite	eq
 801d4e0:	4618      	moveq	r0, r3
 801d4e2:	2001      	movne	r0, #1
 801d4e4:	bd70      	pop	{r4, r5, r6, pc}
 801d4e6:	f7f7 ff13 	bl	8015310 <rcutils_reset_error>
 801d4ea:	f640 0098 	movw	r0, #2200	; 0x898
 801d4ee:	bd70      	pop	{r4, r5, r6, pc}
 801d4f0:	f640 0098 	movw	r0, #2200	; 0x898
 801d4f4:	bd70      	pop	{r4, r5, r6, pc}
 801d4f6:	200b      	movs	r0, #11
 801d4f8:	bd70      	pop	{r4, r5, r6, pc}
 801d4fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d4fe:	4770      	bx	lr

0801d500 <rcl_action_send_cancel_response>:
 801d500:	b390      	cbz	r0, 801d568 <rcl_action_send_cancel_response+0x68>
 801d502:	b570      	push	{r4, r5, r6, lr}
 801d504:	4604      	mov	r4, r0
 801d506:	6800      	ldr	r0, [r0, #0]
 801d508:	b348      	cbz	r0, 801d55e <rcl_action_send_cancel_response+0x5e>
 801d50a:	460e      	mov	r6, r1
 801d50c:	4615      	mov	r5, r2
 801d50e:	f7f6 fd97 	bl	8014040 <rcl_service_is_valid>
 801d512:	b1f8      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d514:	6820      	ldr	r0, [r4, #0]
 801d516:	3004      	adds	r0, #4
 801d518:	f7f6 fd92 	bl	8014040 <rcl_service_is_valid>
 801d51c:	b1d0      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d51e:	6820      	ldr	r0, [r4, #0]
 801d520:	3008      	adds	r0, #8
 801d522:	f7f6 fd8d 	bl	8014040 <rcl_service_is_valid>
 801d526:	b1a8      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d528:	6820      	ldr	r0, [r4, #0]
 801d52a:	300c      	adds	r0, #12
 801d52c:	f7f6 fc4c 	bl	8013dc8 <rcl_publisher_is_valid>
 801d530:	b180      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d532:	6820      	ldr	r0, [r4, #0]
 801d534:	3010      	adds	r0, #16
 801d536:	f7f6 fc47 	bl	8013dc8 <rcl_publisher_is_valid>
 801d53a:	b158      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d53c:	b195      	cbz	r5, 801d564 <rcl_action_send_cancel_response+0x64>
 801d53e:	b18e      	cbz	r6, 801d564 <rcl_action_send_cancel_response+0x64>
 801d540:	6820      	ldr	r0, [r4, #0]
 801d542:	462a      	mov	r2, r5
 801d544:	4631      	mov	r1, r6
 801d546:	3004      	adds	r0, #4
 801d548:	f7f6 fd62 	bl	8014010 <rcl_send_response>
 801d54c:	3800      	subs	r0, #0
 801d54e:	bf18      	it	ne
 801d550:	2001      	movne	r0, #1
 801d552:	bd70      	pop	{r4, r5, r6, pc}
 801d554:	f7f7 fedc 	bl	8015310 <rcutils_reset_error>
 801d558:	f640 0098 	movw	r0, #2200	; 0x898
 801d55c:	bd70      	pop	{r4, r5, r6, pc}
 801d55e:	f640 0098 	movw	r0, #2200	; 0x898
 801d562:	bd70      	pop	{r4, r5, r6, pc}
 801d564:	200b      	movs	r0, #11
 801d566:	bd70      	pop	{r4, r5, r6, pc}
 801d568:	f640 0098 	movw	r0, #2200	; 0x898
 801d56c:	4770      	bx	lr
 801d56e:	bf00      	nop

0801d570 <rcl_action_wait_set_add_action_server>:
 801d570:	2800      	cmp	r0, #0
 801d572:	d04d      	beq.n	801d610 <rcl_action_wait_set_add_action_server+0xa0>
 801d574:	b570      	push	{r4, r5, r6, lr}
 801d576:	460c      	mov	r4, r1
 801d578:	b159      	cbz	r1, 801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d57a:	4605      	mov	r5, r0
 801d57c:	6808      	ldr	r0, [r1, #0]
 801d57e:	b140      	cbz	r0, 801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d580:	4616      	mov	r6, r2
 801d582:	f7f6 fd5d 	bl	8014040 <rcl_service_is_valid>
 801d586:	b120      	cbz	r0, 801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d588:	6820      	ldr	r0, [r4, #0]
 801d58a:	3004      	adds	r0, #4
 801d58c:	f7f6 fd58 	bl	8014040 <rcl_service_is_valid>
 801d590:	b910      	cbnz	r0, 801d598 <rcl_action_wait_set_add_action_server+0x28>
 801d592:	f640 0098 	movw	r0, #2200	; 0x898
 801d596:	bd70      	pop	{r4, r5, r6, pc}
 801d598:	6820      	ldr	r0, [r4, #0]
 801d59a:	3008      	adds	r0, #8
 801d59c:	f7f6 fd50 	bl	8014040 <rcl_service_is_valid>
 801d5a0:	2800      	cmp	r0, #0
 801d5a2:	d0f6      	beq.n	801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d5a4:	6820      	ldr	r0, [r4, #0]
 801d5a6:	300c      	adds	r0, #12
 801d5a8:	f7f6 fc26 	bl	8013df8 <rcl_publisher_is_valid_except_context>
 801d5ac:	2800      	cmp	r0, #0
 801d5ae:	d0f0      	beq.n	801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d5b0:	6820      	ldr	r0, [r4, #0]
 801d5b2:	3010      	adds	r0, #16
 801d5b4:	f7f6 fc20 	bl	8013df8 <rcl_publisher_is_valid_except_context>
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	d0ea      	beq.n	801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d5bc:	6821      	ldr	r1, [r4, #0]
 801d5be:	4628      	mov	r0, r5
 801d5c0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d5c4:	f7ff fad2 	bl	801cb6c <rcl_wait_set_add_service>
 801d5c8:	2800      	cmp	r0, #0
 801d5ca:	d1e4      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d5cc:	6821      	ldr	r1, [r4, #0]
 801d5ce:	4628      	mov	r0, r5
 801d5d0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d5d4:	3104      	adds	r1, #4
 801d5d6:	f7ff fac9 	bl	801cb6c <rcl_wait_set_add_service>
 801d5da:	2800      	cmp	r0, #0
 801d5dc:	d1db      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d5de:	6821      	ldr	r1, [r4, #0]
 801d5e0:	4628      	mov	r0, r5
 801d5e2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d5e6:	3108      	adds	r1, #8
 801d5e8:	f7ff fac0 	bl	801cb6c <rcl_wait_set_add_service>
 801d5ec:	2800      	cmp	r0, #0
 801d5ee:	d1d2      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d5f0:	6821      	ldr	r1, [r4, #0]
 801d5f2:	4628      	mov	r0, r5
 801d5f4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d5f8:	3114      	adds	r1, #20
 801d5fa:	f7ff fa5b 	bl	801cab4 <rcl_wait_set_add_timer>
 801d5fe:	2800      	cmp	r0, #0
 801d600:	d1c9      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d602:	2e00      	cmp	r6, #0
 801d604:	d0c7      	beq.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d606:	6823      	ldr	r3, [r4, #0]
 801d608:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d60c:	6033      	str	r3, [r6, #0]
 801d60e:	bd70      	pop	{r4, r5, r6, pc}
 801d610:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d614:	4770      	bx	lr
 801d616:	bf00      	nop

0801d618 <rcl_action_server_wait_set_get_entities_ready>:
 801d618:	2800      	cmp	r0, #0
 801d61a:	d067      	beq.n	801d6ec <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d620:	460c      	mov	r4, r1
 801d622:	b161      	cbz	r1, 801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d624:	4605      	mov	r5, r0
 801d626:	6808      	ldr	r0, [r1, #0]
 801d628:	b148      	cbz	r0, 801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d62a:	4616      	mov	r6, r2
 801d62c:	4698      	mov	r8, r3
 801d62e:	f7f6 fd07 	bl	8014040 <rcl_service_is_valid>
 801d632:	b120      	cbz	r0, 801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d634:	6820      	ldr	r0, [r4, #0]
 801d636:	3004      	adds	r0, #4
 801d638:	f7f6 fd02 	bl	8014040 <rcl_service_is_valid>
 801d63c:	b918      	cbnz	r0, 801d646 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d63e:	f640 0098 	movw	r0, #2200	; 0x898
 801d642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d646:	6820      	ldr	r0, [r4, #0]
 801d648:	3008      	adds	r0, #8
 801d64a:	f7f6 fcf9 	bl	8014040 <rcl_service_is_valid>
 801d64e:	2800      	cmp	r0, #0
 801d650:	d0f5      	beq.n	801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d652:	6820      	ldr	r0, [r4, #0]
 801d654:	300c      	adds	r0, #12
 801d656:	f7f6 fbcf 	bl	8013df8 <rcl_publisher_is_valid_except_context>
 801d65a:	2800      	cmp	r0, #0
 801d65c:	d0ef      	beq.n	801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d65e:	6820      	ldr	r0, [r4, #0]
 801d660:	3010      	adds	r0, #16
 801d662:	f7f6 fbc9 	bl	8013df8 <rcl_publisher_is_valid_except_context>
 801d666:	2800      	cmp	r0, #0
 801d668:	d0e9      	beq.n	801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d66e:	2a00      	cmp	r2, #0
 801d670:	bf18      	it	ne
 801d672:	2b00      	cmpne	r3, #0
 801d674:	bf0c      	ite	eq
 801d676:	2101      	moveq	r1, #1
 801d678:	2100      	movne	r1, #0
 801d67a:	f1b8 0f00 	cmp.w	r8, #0
 801d67e:	bf08      	it	eq
 801d680:	f041 0101 	orreq.w	r1, r1, #1
 801d684:	bba9      	cbnz	r1, 801d6f2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d686:	b3a6      	cbz	r6, 801d6f2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d688:	6821      	ldr	r1, [r4, #0]
 801d68a:	2000      	movs	r0, #0
 801d68c:	692c      	ldr	r4, [r5, #16]
 801d68e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d692:	6a2f      	ldr	r7, [r5, #32]
 801d694:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d698:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d69c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d6a0:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d6a4:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d6a8:	1a64      	subs	r4, r4, r1
 801d6aa:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d6ae:	fab4 f484 	clz	r4, r4
 801d6b2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d6b6:	0964      	lsrs	r4, r4, #5
 801d6b8:	7034      	strb	r4, [r6, #0]
 801d6ba:	1d0c      	adds	r4, r1, #4
 801d6bc:	1b2c      	subs	r4, r5, r4
 801d6be:	fab4 f484 	clz	r4, r4
 801d6c2:	0964      	lsrs	r4, r4, #5
 801d6c4:	f888 4000 	strb.w	r4, [r8]
 801d6c8:	f101 0408 	add.w	r4, r1, #8
 801d6cc:	1b1b      	subs	r3, r3, r4
 801d6ce:	9c06      	ldr	r4, [sp, #24]
 801d6d0:	fab3 f383 	clz	r3, r3
 801d6d4:	095b      	lsrs	r3, r3, #5
 801d6d6:	7023      	strb	r3, [r4, #0]
 801d6d8:	f101 0314 	add.w	r3, r1, #20
 801d6dc:	1ad3      	subs	r3, r2, r3
 801d6de:	9a07      	ldr	r2, [sp, #28]
 801d6e0:	fab3 f383 	clz	r3, r3
 801d6e4:	095b      	lsrs	r3, r3, #5
 801d6e6:	7013      	strb	r3, [r2, #0]
 801d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d6f0:	4770      	bx	lr
 801d6f2:	200b      	movs	r0, #11
 801d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d6f8 <_execute_event_handler>:
 801d6f8:	2002      	movs	r0, #2
 801d6fa:	4770      	bx	lr

0801d6fc <_cancel_goal_event_handler>:
 801d6fc:	2003      	movs	r0, #3
 801d6fe:	4770      	bx	lr

0801d700 <_succeed_event_handler>:
 801d700:	2004      	movs	r0, #4
 801d702:	4770      	bx	lr

0801d704 <_abort_event_handler>:
 801d704:	2006      	movs	r0, #6
 801d706:	4770      	bx	lr

0801d708 <_canceled_event_handler>:
 801d708:	2005      	movs	r0, #5
 801d70a:	4770      	bx	lr

0801d70c <rcl_action_transition_goal_state>:
 801d70c:	b2c2      	uxtb	r2, r0
 801d70e:	2a06      	cmp	r2, #6
 801d710:	d810      	bhi.n	801d734 <rcl_action_transition_goal_state+0x28>
 801d712:	2904      	cmp	r1, #4
 801d714:	d80e      	bhi.n	801d734 <rcl_action_transition_goal_state+0x28>
 801d716:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d71a:	b410      	push	{r4}
 801d71c:	1853      	adds	r3, r2, r1
 801d71e:	4c06      	ldr	r4, [pc, #24]	; (801d738 <rcl_action_transition_goal_state+0x2c>)
 801d720:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d724:	b113      	cbz	r3, 801d72c <rcl_action_transition_goal_state+0x20>
 801d726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d72a:	4718      	bx	r3
 801d72c:	2000      	movs	r0, #0
 801d72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d732:	4770      	bx	lr
 801d734:	2000      	movs	r0, #0
 801d736:	4770      	bx	lr
 801d738:	08025bfc 	.word	0x08025bfc

0801d73c <rcl_action_get_zero_initialized_cancel_response>:
 801d73c:	b510      	push	{r4, lr}
 801d73e:	4c07      	ldr	r4, [pc, #28]	; (801d75c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d740:	4686      	mov	lr, r0
 801d742:	4684      	mov	ip, r0
 801d744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d74c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d750:	6823      	ldr	r3, [r4, #0]
 801d752:	4670      	mov	r0, lr
 801d754:	f8cc 3000 	str.w	r3, [ip]
 801d758:	bd10      	pop	{r4, pc}
 801d75a:	bf00      	nop
 801d75c:	08025c88 	.word	0x08025c88

0801d760 <rclc_action_send_result_request>:
 801d760:	b1d0      	cbz	r0, 801d798 <rclc_action_send_result_request+0x38>
 801d762:	4684      	mov	ip, r0
 801d764:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d768:	b500      	push	{lr}
 801d76a:	b087      	sub	sp, #28
 801d76c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d770:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d774:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d778:	f10d 0e08 	add.w	lr, sp, #8
 801d77c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d780:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d784:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d788:	a902      	add	r1, sp, #8
 801d78a:	3010      	adds	r0, #16
 801d78c:	f7ff fbcc 	bl	801cf28 <rcl_action_send_result_request>
 801d790:	b920      	cbnz	r0, 801d79c <rclc_action_send_result_request+0x3c>
 801d792:	b007      	add	sp, #28
 801d794:	f85d fb04 	ldr.w	pc, [sp], #4
 801d798:	200b      	movs	r0, #11
 801d79a:	4770      	bx	lr
 801d79c:	9001      	str	r0, [sp, #4]
 801d79e:	f7f7 fdb7 	bl	8015310 <rcutils_reset_error>
 801d7a2:	9801      	ldr	r0, [sp, #4]
 801d7a4:	b007      	add	sp, #28
 801d7a6:	f85d fb04 	ldr.w	pc, [sp], #4
 801d7aa:	bf00      	nop

0801d7ac <rclc_action_take_goal_handle>:
 801d7ac:	b160      	cbz	r0, 801d7c8 <rclc_action_take_goal_handle+0x1c>
 801d7ae:	6883      	ldr	r3, [r0, #8]
 801d7b0:	b143      	cbz	r3, 801d7c4 <rclc_action_take_goal_handle+0x18>
 801d7b2:	6819      	ldr	r1, [r3, #0]
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	6081      	str	r1, [r0, #8]
 801d7b8:	721a      	strb	r2, [r3, #8]
 801d7ba:	68c1      	ldr	r1, [r0, #12]
 801d7bc:	621a      	str	r2, [r3, #32]
 801d7be:	849a      	strh	r2, [r3, #36]	; 0x24
 801d7c0:	6019      	str	r1, [r3, #0]
 801d7c2:	60c3      	str	r3, [r0, #12]
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	4770      	bx	lr
 801d7c8:	4603      	mov	r3, r0
 801d7ca:	e7fb      	b.n	801d7c4 <rclc_action_take_goal_handle+0x18>

0801d7cc <rclc_action_remove_used_goal_handle>:
 801d7cc:	b180      	cbz	r0, 801d7f0 <rclc_action_remove_used_goal_handle+0x24>
 801d7ce:	b179      	cbz	r1, 801d7f0 <rclc_action_remove_used_goal_handle+0x24>
 801d7d0:	68c3      	ldr	r3, [r0, #12]
 801d7d2:	4299      	cmp	r1, r3
 801d7d4:	d00d      	beq.n	801d7f2 <rclc_action_remove_used_goal_handle+0x26>
 801d7d6:	b12b      	cbz	r3, 801d7e4 <rclc_action_remove_used_goal_handle+0x18>
 801d7d8:	681a      	ldr	r2, [r3, #0]
 801d7da:	4291      	cmp	r1, r2
 801d7dc:	d003      	beq.n	801d7e6 <rclc_action_remove_used_goal_handle+0x1a>
 801d7de:	4613      	mov	r3, r2
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d1f9      	bne.n	801d7d8 <rclc_action_remove_used_goal_handle+0xc>
 801d7e4:	4770      	bx	lr
 801d7e6:	680a      	ldr	r2, [r1, #0]
 801d7e8:	601a      	str	r2, [r3, #0]
 801d7ea:	6883      	ldr	r3, [r0, #8]
 801d7ec:	600b      	str	r3, [r1, #0]
 801d7ee:	6081      	str	r1, [r0, #8]
 801d7f0:	4770      	bx	lr
 801d7f2:	680b      	ldr	r3, [r1, #0]
 801d7f4:	60c3      	str	r3, [r0, #12]
 801d7f6:	e7f8      	b.n	801d7ea <rclc_action_remove_used_goal_handle+0x1e>

0801d7f8 <rclc_action_find_goal_handle_by_uuid>:
 801d7f8:	b538      	push	{r3, r4, r5, lr}
 801d7fa:	b181      	cbz	r1, 801d81e <rclc_action_find_goal_handle_by_uuid+0x26>
 801d7fc:	b178      	cbz	r0, 801d81e <rclc_action_find_goal_handle_by_uuid+0x26>
 801d7fe:	68c4      	ldr	r4, [r0, #12]
 801d800:	460d      	mov	r5, r1
 801d802:	b914      	cbnz	r4, 801d80a <rclc_action_find_goal_handle_by_uuid+0x12>
 801d804:	e009      	b.n	801d81a <rclc_action_find_goal_handle_by_uuid+0x22>
 801d806:	6824      	ldr	r4, [r4, #0]
 801d808:	b13c      	cbz	r4, 801d81a <rclc_action_find_goal_handle_by_uuid+0x22>
 801d80a:	f104 0009 	add.w	r0, r4, #9
 801d80e:	2210      	movs	r2, #16
 801d810:	4629      	mov	r1, r5
 801d812:	f003 fba9 	bl	8020f68 <memcmp>
 801d816:	2800      	cmp	r0, #0
 801d818:	d1f5      	bne.n	801d806 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d81a:	4620      	mov	r0, r4
 801d81c:	bd38      	pop	{r3, r4, r5, pc}
 801d81e:	2400      	movs	r4, #0
 801d820:	4620      	mov	r0, r4
 801d822:	bd38      	pop	{r3, r4, r5, pc}

0801d824 <rclc_action_find_first_handle_by_status>:
 801d824:	b140      	cbz	r0, 801d838 <rclc_action_find_first_handle_by_status+0x14>
 801d826:	68c0      	ldr	r0, [r0, #12]
 801d828:	b910      	cbnz	r0, 801d830 <rclc_action_find_first_handle_by_status+0xc>
 801d82a:	e005      	b.n	801d838 <rclc_action_find_first_handle_by_status+0x14>
 801d82c:	6800      	ldr	r0, [r0, #0]
 801d82e:	b118      	cbz	r0, 801d838 <rclc_action_find_first_handle_by_status+0x14>
 801d830:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d834:	428b      	cmp	r3, r1
 801d836:	d1f9      	bne.n	801d82c <rclc_action_find_first_handle_by_status+0x8>
 801d838:	4770      	bx	lr
 801d83a:	bf00      	nop

0801d83c <rclc_action_find_first_terminated_handle>:
 801d83c:	b140      	cbz	r0, 801d850 <rclc_action_find_first_terminated_handle+0x14>
 801d83e:	68c0      	ldr	r0, [r0, #12]
 801d840:	b910      	cbnz	r0, 801d848 <rclc_action_find_first_terminated_handle+0xc>
 801d842:	e005      	b.n	801d850 <rclc_action_find_first_terminated_handle+0x14>
 801d844:	6800      	ldr	r0, [r0, #0]
 801d846:	b118      	cbz	r0, 801d850 <rclc_action_find_first_terminated_handle+0x14>
 801d848:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d84c:	2b03      	cmp	r3, #3
 801d84e:	ddf9      	ble.n	801d844 <rclc_action_find_first_terminated_handle+0x8>
 801d850:	4770      	bx	lr
 801d852:	bf00      	nop

0801d854 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d854:	b170      	cbz	r0, 801d874 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d856:	68c0      	ldr	r0, [r0, #12]
 801d858:	b160      	cbz	r0, 801d874 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d85a:	b410      	push	{r4}
 801d85c:	e001      	b.n	801d862 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d85e:	6800      	ldr	r0, [r0, #0]
 801d860:	b128      	cbz	r0, 801d86e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d862:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d866:	4299      	cmp	r1, r3
 801d868:	bf08      	it	eq
 801d86a:	4294      	cmpeq	r4, r2
 801d86c:	d1f7      	bne.n	801d85e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d872:	4770      	bx	lr
 801d874:	4770      	bx	lr
 801d876:	bf00      	nop

0801d878 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d878:	b170      	cbz	r0, 801d898 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d87a:	68c0      	ldr	r0, [r0, #12]
 801d87c:	b160      	cbz	r0, 801d898 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d87e:	b410      	push	{r4}
 801d880:	e001      	b.n	801d886 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d882:	6800      	ldr	r0, [r0, #0]
 801d884:	b128      	cbz	r0, 801d892 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d886:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d88a:	4299      	cmp	r1, r3
 801d88c:	bf08      	it	eq
 801d88e:	4294      	cmpeq	r4, r2
 801d890:	d1f7      	bne.n	801d882 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d892:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d896:	4770      	bx	lr
 801d898:	4770      	bx	lr
 801d89a:	bf00      	nop

0801d89c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d89c:	b170      	cbz	r0, 801d8bc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d89e:	68c0      	ldr	r0, [r0, #12]
 801d8a0:	b160      	cbz	r0, 801d8bc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d8a2:	b410      	push	{r4}
 801d8a4:	e001      	b.n	801d8aa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d8a6:	6800      	ldr	r0, [r0, #0]
 801d8a8:	b128      	cbz	r0, 801d8b6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d8aa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d8ae:	4299      	cmp	r1, r3
 801d8b0:	bf08      	it	eq
 801d8b2:	4294      	cmpeq	r4, r2
 801d8b4:	d1f7      	bne.n	801d8a6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8ba:	4770      	bx	lr
 801d8bc:	4770      	bx	lr
 801d8be:	bf00      	nop

0801d8c0 <rclc_action_find_first_handle_with_goal_response>:
 801d8c0:	b140      	cbz	r0, 801d8d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d8c2:	68c0      	ldr	r0, [r0, #12]
 801d8c4:	b910      	cbnz	r0, 801d8cc <rclc_action_find_first_handle_with_goal_response+0xc>
 801d8c6:	e005      	b.n	801d8d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d8c8:	6800      	ldr	r0, [r0, #0]
 801d8ca:	b118      	cbz	r0, 801d8d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d8cc:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d0f9      	beq.n	801d8c8 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d8d4:	4770      	bx	lr
 801d8d6:	bf00      	nop

0801d8d8 <rclc_action_find_first_handle_with_result_response>:
 801d8d8:	b140      	cbz	r0, 801d8ec <rclc_action_find_first_handle_with_result_response+0x14>
 801d8da:	68c0      	ldr	r0, [r0, #12]
 801d8dc:	b910      	cbnz	r0, 801d8e4 <rclc_action_find_first_handle_with_result_response+0xc>
 801d8de:	e005      	b.n	801d8ec <rclc_action_find_first_handle_with_result_response+0x14>
 801d8e0:	6800      	ldr	r0, [r0, #0]
 801d8e2:	b118      	cbz	r0, 801d8ec <rclc_action_find_first_handle_with_result_response+0x14>
 801d8e4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d0f9      	beq.n	801d8e0 <rclc_action_find_first_handle_with_result_response+0x8>
 801d8ec:	4770      	bx	lr
 801d8ee:	bf00      	nop

0801d8f0 <rclc_action_server_response_goal_request>:
 801d8f0:	b198      	cbz	r0, 801d91a <rclc_action_server_response_goal_request+0x2a>
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	460b      	mov	r3, r1
 801d8f6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d8fa:	b510      	push	{r4, lr}
 801d8fc:	6844      	ldr	r4, [r0, #4]
 801d8fe:	b086      	sub	sp, #24
 801d900:	f104 0010 	add.w	r0, r4, #16
 801d904:	9205      	str	r2, [sp, #20]
 801d906:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d90a:	aa03      	add	r2, sp, #12
 801d90c:	f88d 300c 	strb.w	r3, [sp, #12]
 801d910:	f7ff fd40 	bl	801d394 <rcl_action_send_goal_response>
 801d914:	b918      	cbnz	r0, 801d91e <rclc_action_server_response_goal_request+0x2e>
 801d916:	b006      	add	sp, #24
 801d918:	bd10      	pop	{r4, pc}
 801d91a:	200b      	movs	r0, #11
 801d91c:	4770      	bx	lr
 801d91e:	9001      	str	r0, [sp, #4]
 801d920:	f7f7 fcf6 	bl	8015310 <rcutils_reset_error>
 801d924:	9801      	ldr	r0, [sp, #4]
 801d926:	b006      	add	sp, #24
 801d928:	bd10      	pop	{r4, pc}
 801d92a:	bf00      	nop
 801d92c:	0000      	movs	r0, r0
	...

0801d930 <rclc_action_server_goal_cancel_accept>:
 801d930:	b310      	cbz	r0, 801d978 <rclc_action_server_goal_cancel_accept+0x48>
 801d932:	b510      	push	{r4, lr}
 801d934:	b090      	sub	sp, #64	; 0x40
 801d936:	4604      	mov	r4, r0
 801d938:	a806      	add	r0, sp, #24
 801d93a:	f7ff feff 	bl	801d73c <rcl_action_get_zero_initialized_cancel_response>
 801d93e:	2300      	movs	r3, #0
 801d940:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d944:	46ec      	mov	ip, sp
 801d946:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d94a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d94e:	f88d 3018 	strb.w	r3, [sp, #24]
 801d952:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d956:	f8cd d01c 	str.w	sp, [sp, #28]
 801d95a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d95e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d980 <rclc_action_server_goal_cancel_accept+0x50>
 801d962:	6860      	ldr	r0, [r4, #4]
 801d964:	aa06      	add	r2, sp, #24
 801d966:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d96a:	3010      	adds	r0, #16
 801d96c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d970:	f7ff fdc6 	bl	801d500 <rcl_action_send_cancel_response>
 801d974:	b010      	add	sp, #64	; 0x40
 801d976:	bd10      	pop	{r4, pc}
 801d978:	200b      	movs	r0, #11
 801d97a:	4770      	bx	lr
 801d97c:	f3af 8000 	nop.w
 801d980:	00000001 	.word	0x00000001
 801d984:	00000001 	.word	0x00000001

0801d988 <rclc_action_server_goal_cancel_reject>:
 801d988:	b082      	sub	sp, #8
 801d98a:	b530      	push	{r4, r5, lr}
 801d98c:	b08b      	sub	sp, #44	; 0x2c
 801d98e:	ac0e      	add	r4, sp, #56	; 0x38
 801d990:	e884 000c 	stmia.w	r4, {r2, r3}
 801d994:	b188      	cbz	r0, 801d9ba <rclc_action_server_goal_cancel_reject+0x32>
 801d996:	4604      	mov	r4, r0
 801d998:	a801      	add	r0, sp, #4
 801d99a:	460d      	mov	r5, r1
 801d99c:	f7ff fece 	bl	801d73c <rcl_action_get_zero_initialized_cancel_response>
 801d9a0:	aa01      	add	r2, sp, #4
 801d9a2:	a90e      	add	r1, sp, #56	; 0x38
 801d9a4:	f104 0010 	add.w	r0, r4, #16
 801d9a8:	f88d 5004 	strb.w	r5, [sp, #4]
 801d9ac:	f7ff fda8 	bl	801d500 <rcl_action_send_cancel_response>
 801d9b0:	b00b      	add	sp, #44	; 0x2c
 801d9b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9b6:	b002      	add	sp, #8
 801d9b8:	4770      	bx	lr
 801d9ba:	200b      	movs	r0, #11
 801d9bc:	b00b      	add	sp, #44	; 0x2c
 801d9be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9c2:	b002      	add	sp, #8
 801d9c4:	4770      	bx	lr
 801d9c6:	bf00      	nop

0801d9c8 <__atomic_load_8>:
 801d9c8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d9cc:	4a16      	ldr	r2, [pc, #88]	; (801da28 <__atomic_load_8+0x60>)
 801d9ce:	4b17      	ldr	r3, [pc, #92]	; (801da2c <__atomic_load_8+0x64>)
 801d9d0:	f04f 0c01 	mov.w	ip, #1
 801d9d4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d9d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d9dc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d9e0:	fb02 f101 	mul.w	r1, r2, r1
 801d9e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d9e8:	fba3 2301 	umull	r2, r3, r3, r1
 801d9ec:	091b      	lsrs	r3, r3, #4
 801d9ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d9f2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d9f6:	b4d0      	push	{r4, r6, r7}
 801d9f8:	1ac9      	subs	r1, r1, r3
 801d9fa:	4c0d      	ldr	r4, [pc, #52]	; (801da30 <__atomic_load_8+0x68>)
 801d9fc:	1862      	adds	r2, r4, r1
 801d9fe:	e8d2 3f4f 	ldrexb	r3, [r2]
 801da02:	e8c2 cf46 	strexb	r6, ip, [r2]
 801da06:	2e00      	cmp	r6, #0
 801da08:	d1f9      	bne.n	801d9fe <__atomic_load_8+0x36>
 801da0a:	b2db      	uxtb	r3, r3
 801da0c:	f3bf 8f5b 	dmb	ish
 801da10:	2b00      	cmp	r3, #0
 801da12:	d1f4      	bne.n	801d9fe <__atomic_load_8+0x36>
 801da14:	e9d0 6700 	ldrd	r6, r7, [r0]
 801da18:	f3bf 8f5b 	dmb	ish
 801da1c:	5463      	strb	r3, [r4, r1]
 801da1e:	4630      	mov	r0, r6
 801da20:	4639      	mov	r1, r7
 801da22:	bcd0      	pop	{r4, r6, r7}
 801da24:	4770      	bx	lr
 801da26:	bf00      	nop
 801da28:	27d4eb2d 	.word	0x27d4eb2d
 801da2c:	b21642c9 	.word	0xb21642c9
 801da30:	20017078 	.word	0x20017078

0801da34 <__atomic_store_8>:
 801da34:	b570      	push	{r4, r5, r6, lr}
 801da36:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801da3a:	4916      	ldr	r1, [pc, #88]	; (801da94 <__atomic_store_8+0x60>)
 801da3c:	4c16      	ldr	r4, [pc, #88]	; (801da98 <__atomic_store_8+0x64>)
 801da3e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801da42:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801da46:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801da4a:	fb01 fe0e 	mul.w	lr, r1, lr
 801da4e:	4913      	ldr	r1, [pc, #76]	; (801da9c <__atomic_store_8+0x68>)
 801da50:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801da54:	fba1 510e 	umull	r5, r1, r1, lr
 801da58:	f04f 0501 	mov.w	r5, #1
 801da5c:	0909      	lsrs	r1, r1, #4
 801da5e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801da62:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801da66:	ebae 0e01 	sub.w	lr, lr, r1
 801da6a:	eb04 0c0e 	add.w	ip, r4, lr
 801da6e:	e8dc 1f4f 	ldrexb	r1, [ip]
 801da72:	e8cc 5f46 	strexb	r6, r5, [ip]
 801da76:	2e00      	cmp	r6, #0
 801da78:	d1f9      	bne.n	801da6e <__atomic_store_8+0x3a>
 801da7a:	b2c9      	uxtb	r1, r1
 801da7c:	f3bf 8f5b 	dmb	ish
 801da80:	2900      	cmp	r1, #0
 801da82:	d1f4      	bne.n	801da6e <__atomic_store_8+0x3a>
 801da84:	e9c0 2300 	strd	r2, r3, [r0]
 801da88:	f3bf 8f5b 	dmb	ish
 801da8c:	f804 100e 	strb.w	r1, [r4, lr]
 801da90:	bd70      	pop	{r4, r5, r6, pc}
 801da92:	bf00      	nop
 801da94:	27d4eb2d 	.word	0x27d4eb2d
 801da98:	20017078 	.word	0x20017078
 801da9c:	b21642c9 	.word	0xb21642c9

0801daa0 <__atomic_exchange_8>:
 801daa0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801daa4:	4917      	ldr	r1, [pc, #92]	; (801db04 <__atomic_exchange_8+0x64>)
 801daa6:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801daaa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801daae:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dab2:	fb01 fc0c 	mul.w	ip, r1, ip
 801dab6:	4914      	ldr	r1, [pc, #80]	; (801db08 <__atomic_exchange_8+0x68>)
 801dab8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dabc:	b570      	push	{r4, r5, r6, lr}
 801dabe:	4686      	mov	lr, r0
 801dac0:	fba1 010c 	umull	r0, r1, r1, ip
 801dac4:	4d11      	ldr	r5, [pc, #68]	; (801db0c <__atomic_exchange_8+0x6c>)
 801dac6:	f04f 0001 	mov.w	r0, #1
 801daca:	0909      	lsrs	r1, r1, #4
 801dacc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dad0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dad4:	ebac 0c01 	sub.w	ip, ip, r1
 801dad8:	eb05 010c 	add.w	r1, r5, ip
 801dadc:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dae0:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dae4:	2e00      	cmp	r6, #0
 801dae6:	d1f9      	bne.n	801dadc <__atomic_exchange_8+0x3c>
 801dae8:	b2e4      	uxtb	r4, r4
 801daea:	f3bf 8f5b 	dmb	ish
 801daee:	2c00      	cmp	r4, #0
 801daf0:	d1f4      	bne.n	801dadc <__atomic_exchange_8+0x3c>
 801daf2:	e9de 0100 	ldrd	r0, r1, [lr]
 801daf6:	e9ce 2300 	strd	r2, r3, [lr]
 801dafa:	f3bf 8f5b 	dmb	ish
 801dafe:	f805 400c 	strb.w	r4, [r5, ip]
 801db02:	bd70      	pop	{r4, r5, r6, pc}
 801db04:	27d4eb2d 	.word	0x27d4eb2d
 801db08:	b21642c9 	.word	0xb21642c9
 801db0c:	20017078 	.word	0x20017078

0801db10 <rcutils_is_directory>:
 801db10:	2000      	movs	r0, #0
 801db12:	4770      	bx	lr

0801db14 <rcutils_join_path>:
 801db14:	b082      	sub	sp, #8
 801db16:	2000      	movs	r0, #0
 801db18:	e88d 000c 	stmia.w	sp, {r2, r3}
 801db1c:	b002      	add	sp, #8
 801db1e:	4770      	bx	lr

0801db20 <rcutils_to_native_path>:
 801db20:	b084      	sub	sp, #16
 801db22:	2000      	movs	r0, #0
 801db24:	f10d 0c04 	add.w	ip, sp, #4
 801db28:	b004      	add	sp, #16
 801db2a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801db2e:	4770      	bx	lr

0801db30 <rcutils_string_array_fini>:
 801db30:	b328      	cbz	r0, 801db7e <rcutils_string_array_fini+0x4e>
 801db32:	b570      	push	{r4, r5, r6, lr}
 801db34:	4604      	mov	r4, r0
 801db36:	6840      	ldr	r0, [r0, #4]
 801db38:	b1e0      	cbz	r0, 801db74 <rcutils_string_array_fini+0x44>
 801db3a:	f104 0008 	add.w	r0, r4, #8
 801db3e:	f7f7 fba9 	bl	8015294 <rcutils_allocator_is_valid>
 801db42:	b1c0      	cbz	r0, 801db76 <rcutils_string_array_fini+0x46>
 801db44:	6823      	ldr	r3, [r4, #0]
 801db46:	b1c3      	cbz	r3, 801db7a <rcutils_string_array_fini+0x4a>
 801db48:	2500      	movs	r5, #0
 801db4a:	6860      	ldr	r0, [r4, #4]
 801db4c:	462e      	mov	r6, r5
 801db4e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801db52:	68e3      	ldr	r3, [r4, #12]
 801db54:	69a1      	ldr	r1, [r4, #24]
 801db56:	4798      	blx	r3
 801db58:	e9d4 3000 	ldrd	r3, r0, [r4]
 801db5c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801db60:	3501      	adds	r5, #1
 801db62:	429d      	cmp	r5, r3
 801db64:	d3f3      	bcc.n	801db4e <rcutils_string_array_fini+0x1e>
 801db66:	68e3      	ldr	r3, [r4, #12]
 801db68:	69a1      	ldr	r1, [r4, #24]
 801db6a:	4798      	blx	r3
 801db6c:	2300      	movs	r3, #0
 801db6e:	4618      	mov	r0, r3
 801db70:	e9c4 3300 	strd	r3, r3, [r4]
 801db74:	bd70      	pop	{r4, r5, r6, pc}
 801db76:	200b      	movs	r0, #11
 801db78:	bd70      	pop	{r4, r5, r6, pc}
 801db7a:	6860      	ldr	r0, [r4, #4]
 801db7c:	e7f3      	b.n	801db66 <rcutils_string_array_fini+0x36>
 801db7e:	200b      	movs	r0, #11
 801db80:	4770      	bx	lr
 801db82:	bf00      	nop

0801db84 <rcutils_get_zero_initialized_string_map>:
 801db84:	2000      	movs	r0, #0
 801db86:	4b01      	ldr	r3, [pc, #4]	; (801db8c <rcutils_get_zero_initialized_string_map+0x8>)
 801db88:	6018      	str	r0, [r3, #0]
 801db8a:	4770      	bx	lr
 801db8c:	20017090 	.word	0x20017090

0801db90 <rcutils_string_map_reserve>:
 801db90:	2800      	cmp	r0, #0
 801db92:	d05e      	beq.n	801dc52 <rcutils_string_map_reserve+0xc2>
 801db94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db98:	460c      	mov	r4, r1
 801db9a:	6801      	ldr	r1, [r0, #0]
 801db9c:	b082      	sub	sp, #8
 801db9e:	4605      	mov	r5, r0
 801dba0:	b129      	cbz	r1, 801dbae <rcutils_string_map_reserve+0x1e>
 801dba2:	68cb      	ldr	r3, [r1, #12]
 801dba4:	42a3      	cmp	r3, r4
 801dba6:	d906      	bls.n	801dbb6 <rcutils_string_map_reserve+0x26>
 801dba8:	461c      	mov	r4, r3
 801dbaa:	2900      	cmp	r1, #0
 801dbac:	d1f9      	bne.n	801dba2 <rcutils_string_map_reserve+0x12>
 801dbae:	201f      	movs	r0, #31
 801dbb0:	b002      	add	sp, #8
 801dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbb6:	688b      	ldr	r3, [r1, #8]
 801dbb8:	42a3      	cmp	r3, r4
 801dbba:	d046      	beq.n	801dc4a <rcutils_string_map_reserve+0xba>
 801dbbc:	6a0e      	ldr	r6, [r1, #32]
 801dbbe:	2c00      	cmp	r4, #0
 801dbc0:	d033      	beq.n	801dc2a <rcutils_string_map_reserve+0x9a>
 801dbc2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801dbc6:	d242      	bcs.n	801dc4e <rcutils_string_map_reserve+0xbe>
 801dbc8:	00a7      	lsls	r7, r4, #2
 801dbca:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801dbce:	6808      	ldr	r0, [r1, #0]
 801dbd0:	4632      	mov	r2, r6
 801dbd2:	4639      	mov	r1, r7
 801dbd4:	47c0      	blx	r8
 801dbd6:	2800      	cmp	r0, #0
 801dbd8:	d039      	beq.n	801dc4e <rcutils_string_map_reserve+0xbe>
 801dbda:	682b      	ldr	r3, [r5, #0]
 801dbdc:	4632      	mov	r2, r6
 801dbde:	4639      	mov	r1, r7
 801dbe0:	6018      	str	r0, [r3, #0]
 801dbe2:	6858      	ldr	r0, [r3, #4]
 801dbe4:	47c0      	blx	r8
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	d031      	beq.n	801dc4e <rcutils_string_map_reserve+0xbe>
 801dbea:	682d      	ldr	r5, [r5, #0]
 801dbec:	68ab      	ldr	r3, [r5, #8]
 801dbee:	6068      	str	r0, [r5, #4]
 801dbf0:	42a3      	cmp	r3, r4
 801dbf2:	d225      	bcs.n	801dc40 <rcutils_string_map_reserve+0xb0>
 801dbf4:	682a      	ldr	r2, [r5, #0]
 801dbf6:	eb00 0c07 	add.w	ip, r0, r7
 801dbfa:	0099      	lsls	r1, r3, #2
 801dbfc:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801dc00:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801dc04:	45e6      	cmp	lr, ip
 801dc06:	d203      	bcs.n	801dc10 <rcutils_string_map_reserve+0x80>
 801dc08:	eb02 0c07 	add.w	ip, r2, r7
 801dc0c:	4566      	cmp	r6, ip
 801dc0e:	d322      	bcc.n	801dc56 <rcutils_string_map_reserve+0xc6>
 801dc10:	1ae3      	subs	r3, r4, r3
 801dc12:	4670      	mov	r0, lr
 801dc14:	2100      	movs	r1, #0
 801dc16:	009a      	lsls	r2, r3, #2
 801dc18:	9201      	str	r2, [sp, #4]
 801dc1a:	f003 f9cf 	bl	8020fbc <memset>
 801dc1e:	9a01      	ldr	r2, [sp, #4]
 801dc20:	2100      	movs	r1, #0
 801dc22:	4630      	mov	r0, r6
 801dc24:	f003 f9ca 	bl	8020fbc <memset>
 801dc28:	e00a      	b.n	801dc40 <rcutils_string_map_reserve+0xb0>
 801dc2a:	694f      	ldr	r7, [r1, #20]
 801dc2c:	6808      	ldr	r0, [r1, #0]
 801dc2e:	4631      	mov	r1, r6
 801dc30:	47b8      	blx	r7
 801dc32:	682b      	ldr	r3, [r5, #0]
 801dc34:	4631      	mov	r1, r6
 801dc36:	6858      	ldr	r0, [r3, #4]
 801dc38:	601c      	str	r4, [r3, #0]
 801dc3a:	47b8      	blx	r7
 801dc3c:	682d      	ldr	r5, [r5, #0]
 801dc3e:	606c      	str	r4, [r5, #4]
 801dc40:	2000      	movs	r0, #0
 801dc42:	60ac      	str	r4, [r5, #8]
 801dc44:	b002      	add	sp, #8
 801dc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc4a:	2000      	movs	r0, #0
 801dc4c:	e7b0      	b.n	801dbb0 <rcutils_string_map_reserve+0x20>
 801dc4e:	200a      	movs	r0, #10
 801dc50:	e7ae      	b.n	801dbb0 <rcutils_string_map_reserve+0x20>
 801dc52:	200b      	movs	r0, #11
 801dc54:	4770      	bx	lr
 801dc56:	1f0b      	subs	r3, r1, #4
 801dc58:	4418      	add	r0, r3
 801dc5a:	4413      	add	r3, r2
 801dc5c:	3a04      	subs	r2, #4
 801dc5e:	4417      	add	r7, r2
 801dc60:	2200      	movs	r2, #0
 801dc62:	f843 2f04 	str.w	r2, [r3, #4]!
 801dc66:	42bb      	cmp	r3, r7
 801dc68:	f840 2f04 	str.w	r2, [r0, #4]!
 801dc6c:	d1f9      	bne.n	801dc62 <rcutils_string_map_reserve+0xd2>
 801dc6e:	e7e7      	b.n	801dc40 <rcutils_string_map_reserve+0xb0>

0801dc70 <rcutils_string_map_init>:
 801dc70:	b082      	sub	sp, #8
 801dc72:	b570      	push	{r4, r5, r6, lr}
 801dc74:	ac04      	add	r4, sp, #16
 801dc76:	e884 000c 	stmia.w	r4, {r2, r3}
 801dc7a:	b380      	cbz	r0, 801dcde <rcutils_string_map_init+0x6e>
 801dc7c:	6806      	ldr	r6, [r0, #0]
 801dc7e:	4604      	mov	r4, r0
 801dc80:	b12e      	cbz	r6, 801dc8e <rcutils_string_map_init+0x1e>
 801dc82:	251e      	movs	r5, #30
 801dc84:	4628      	mov	r0, r5
 801dc86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc8a:	b002      	add	sp, #8
 801dc8c:	4770      	bx	lr
 801dc8e:	a804      	add	r0, sp, #16
 801dc90:	460d      	mov	r5, r1
 801dc92:	f7f7 faff 	bl	8015294 <rcutils_allocator_is_valid>
 801dc96:	b310      	cbz	r0, 801dcde <rcutils_string_map_init+0x6e>
 801dc98:	9b04      	ldr	r3, [sp, #16]
 801dc9a:	2024      	movs	r0, #36	; 0x24
 801dc9c:	9908      	ldr	r1, [sp, #32]
 801dc9e:	4798      	blx	r3
 801dca0:	6020      	str	r0, [r4, #0]
 801dca2:	b310      	cbz	r0, 801dcea <rcutils_string_map_init+0x7a>
 801dca4:	f10d 0e10 	add.w	lr, sp, #16
 801dca8:	f100 0c10 	add.w	ip, r0, #16
 801dcac:	e9c0 6600 	strd	r6, r6, [r0]
 801dcb0:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801dcb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801dcb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dcbc:	f8de 3000 	ldr.w	r3, [lr]
 801dcc0:	4629      	mov	r1, r5
 801dcc2:	4620      	mov	r0, r4
 801dcc4:	f8cc 3000 	str.w	r3, [ip]
 801dcc8:	f7ff ff62 	bl	801db90 <rcutils_string_map_reserve>
 801dccc:	4605      	mov	r5, r0
 801dcce:	2800      	cmp	r0, #0
 801dcd0:	d0d8      	beq.n	801dc84 <rcutils_string_map_init+0x14>
 801dcd2:	9b05      	ldr	r3, [sp, #20]
 801dcd4:	9908      	ldr	r1, [sp, #32]
 801dcd6:	6820      	ldr	r0, [r4, #0]
 801dcd8:	4798      	blx	r3
 801dcda:	6026      	str	r6, [r4, #0]
 801dcdc:	e7d2      	b.n	801dc84 <rcutils_string_map_init+0x14>
 801dcde:	250b      	movs	r5, #11
 801dce0:	4628      	mov	r0, r5
 801dce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dce6:	b002      	add	sp, #8
 801dce8:	4770      	bx	lr
 801dcea:	250a      	movs	r5, #10
 801dcec:	e7ca      	b.n	801dc84 <rcutils_string_map_init+0x14>
 801dcee:	bf00      	nop

0801dcf0 <rcutils_string_map_fini>:
 801dcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcf4:	b082      	sub	sp, #8
 801dcf6:	2800      	cmp	r0, #0
 801dcf8:	d03a      	beq.n	801dd70 <rcutils_string_map_fini+0x80>
 801dcfa:	6804      	ldr	r4, [r0, #0]
 801dcfc:	4606      	mov	r6, r0
 801dcfe:	2c00      	cmp	r4, #0
 801dd00:	d032      	beq.n	801dd68 <rcutils_string_map_fini+0x78>
 801dd02:	68a3      	ldr	r3, [r4, #8]
 801dd04:	b32b      	cbz	r3, 801dd52 <rcutils_string_map_fini+0x62>
 801dd06:	2500      	movs	r5, #0
 801dd08:	6822      	ldr	r2, [r4, #0]
 801dd0a:	462f      	mov	r7, r5
 801dd0c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dd10:	b1e0      	cbz	r0, 801dd4c <rcutils_string_map_fini+0x5c>
 801dd12:	6a21      	ldr	r1, [r4, #32]
 801dd14:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801dd18:	9101      	str	r1, [sp, #4]
 801dd1a:	47c0      	blx	r8
 801dd1c:	9901      	ldr	r1, [sp, #4]
 801dd1e:	e9d4 3200 	ldrd	r3, r2, [r4]
 801dd22:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801dd26:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dd2a:	47c0      	blx	r8
 801dd2c:	68e3      	ldr	r3, [r4, #12]
 801dd2e:	6862      	ldr	r2, [r4, #4]
 801dd30:	3b01      	subs	r3, #1
 801dd32:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801dd36:	3501      	adds	r5, #1
 801dd38:	60e3      	str	r3, [r4, #12]
 801dd3a:	6834      	ldr	r4, [r6, #0]
 801dd3c:	68a3      	ldr	r3, [r4, #8]
 801dd3e:	429d      	cmp	r5, r3
 801dd40:	d207      	bcs.n	801dd52 <rcutils_string_map_fini+0x62>
 801dd42:	6822      	ldr	r2, [r4, #0]
 801dd44:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dd48:	2800      	cmp	r0, #0
 801dd4a:	d1e2      	bne.n	801dd12 <rcutils_string_map_fini+0x22>
 801dd4c:	3501      	adds	r5, #1
 801dd4e:	429d      	cmp	r5, r3
 801dd50:	d3dc      	bcc.n	801dd0c <rcutils_string_map_fini+0x1c>
 801dd52:	2100      	movs	r1, #0
 801dd54:	4630      	mov	r0, r6
 801dd56:	f7ff ff1b 	bl	801db90 <rcutils_string_map_reserve>
 801dd5a:	4604      	mov	r4, r0
 801dd5c:	b920      	cbnz	r0, 801dd68 <rcutils_string_map_fini+0x78>
 801dd5e:	6830      	ldr	r0, [r6, #0]
 801dd60:	6943      	ldr	r3, [r0, #20]
 801dd62:	6a01      	ldr	r1, [r0, #32]
 801dd64:	4798      	blx	r3
 801dd66:	6034      	str	r4, [r6, #0]
 801dd68:	4620      	mov	r0, r4
 801dd6a:	b002      	add	sp, #8
 801dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd70:	240b      	movs	r4, #11
 801dd72:	4620      	mov	r0, r4
 801dd74:	b002      	add	sp, #8
 801dd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd7a:	bf00      	nop

0801dd7c <rcutils_string_map_getn>:
 801dd7c:	b378      	cbz	r0, 801ddde <rcutils_string_map_getn+0x62>
 801dd7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd82:	f8d0 b000 	ldr.w	fp, [r0]
 801dd86:	f1bb 0f00 	cmp.w	fp, #0
 801dd8a:	d01f      	beq.n	801ddcc <rcutils_string_map_getn+0x50>
 801dd8c:	fab1 f481 	clz	r4, r1
 801dd90:	4688      	mov	r8, r1
 801dd92:	0964      	lsrs	r4, r4, #5
 801dd94:	b1d1      	cbz	r1, 801ddcc <rcutils_string_map_getn+0x50>
 801dd96:	f8db 7008 	ldr.w	r7, [fp, #8]
 801dd9a:	f8db 6000 	ldr.w	r6, [fp]
 801dd9e:	b1af      	cbz	r7, 801ddcc <rcutils_string_map_getn+0x50>
 801dda0:	4691      	mov	r9, r2
 801dda2:	3e04      	subs	r6, #4
 801dda4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801dda8:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801ddac:	3401      	adds	r4, #1
 801ddae:	4628      	mov	r0, r5
 801ddb0:	b155      	cbz	r5, 801ddc8 <rcutils_string_map_getn+0x4c>
 801ddb2:	f7e2 faa5 	bl	8000300 <strlen>
 801ddb6:	4602      	mov	r2, r0
 801ddb8:	4629      	mov	r1, r5
 801ddba:	4640      	mov	r0, r8
 801ddbc:	454a      	cmp	r2, r9
 801ddbe:	bf38      	it	cc
 801ddc0:	464a      	movcc	r2, r9
 801ddc2:	f003 f910 	bl	8020fe6 <strncmp>
 801ddc6:	b120      	cbz	r0, 801ddd2 <rcutils_string_map_getn+0x56>
 801ddc8:	42a7      	cmp	r7, r4
 801ddca:	d1eb      	bne.n	801dda4 <rcutils_string_map_getn+0x28>
 801ddcc:	2000      	movs	r0, #0
 801ddce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddd2:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ddd6:	f853 000a 	ldr.w	r0, [r3, sl]
 801ddda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddde:	4770      	bx	lr

0801dde0 <rmw_get_zero_initialized_context>:
 801dde0:	b510      	push	{r4, lr}
 801dde2:	4604      	mov	r4, r0
 801dde4:	3010      	adds	r0, #16
 801dde6:	f7f7 fc73 	bl	80156d0 <rmw_get_zero_initialized_init_options>
 801ddea:	2300      	movs	r3, #0
 801ddec:	4620      	mov	r0, r4
 801ddee:	60a3      	str	r3, [r4, #8]
 801ddf0:	64a3      	str	r3, [r4, #72]	; 0x48
 801ddf2:	64e3      	str	r3, [r4, #76]	; 0x4c
 801ddf4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801de00 <rmw_get_zero_initialized_context+0x20>
 801ddf8:	ed84 7b00 	vstr	d7, [r4]
 801ddfc:	bd10      	pop	{r4, pc}
 801ddfe:	bf00      	nop
	...

0801de08 <rmw_time_equal>:
 801de08:	b4f0      	push	{r4, r5, r6, r7}
 801de0a:	b084      	sub	sp, #16
 801de0c:	ac04      	add	r4, sp, #16
 801de0e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801de12:	4603      	mov	r3, r0
 801de14:	4925      	ldr	r1, [pc, #148]	; (801deac <rmw_time_equal+0xa4>)
 801de16:	9d01      	ldr	r5, [sp, #4]
 801de18:	4610      	mov	r0, r2
 801de1a:	4299      	cmp	r1, r3
 801de1c:	f04f 0202 	mov.w	r2, #2
 801de20:	9e03      	ldr	r6, [sp, #12]
 801de22:	41aa      	sbcs	r2, r5
 801de24:	d330      	bcc.n	801de88 <rmw_time_equal+0x80>
 801de26:	4c22      	ldr	r4, [pc, #136]	; (801deb0 <rmw_time_equal+0xa8>)
 801de28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801de2c:	fba3 3204 	umull	r3, r2, r3, r4
 801de30:	fb04 2205 	mla	r2, r4, r5, r2
 801de34:	43dd      	mvns	r5, r3
 801de36:	1a8c      	subs	r4, r1, r2
 801de38:	4285      	cmp	r5, r0
 801de3a:	41b4      	sbcs	r4, r6
 801de3c:	d332      	bcc.n	801dea4 <rmw_time_equal+0x9c>
 801de3e:	eb10 0c03 	adds.w	ip, r0, r3
 801de42:	eb42 0106 	adc.w	r1, r2, r6
 801de46:	4819      	ldr	r0, [pc, #100]	; (801deac <rmw_time_equal+0xa4>)
 801de48:	2202      	movs	r2, #2
 801de4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801de4c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801de4e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801de52:	4298      	cmp	r0, r3
 801de54:	41b2      	sbcs	r2, r6
 801de56:	d31c      	bcc.n	801de92 <rmw_time_equal+0x8a>
 801de58:	4c15      	ldr	r4, [pc, #84]	; (801deb0 <rmw_time_equal+0xa8>)
 801de5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801de5e:	fba3 3204 	umull	r3, r2, r3, r4
 801de62:	fb04 2206 	mla	r2, r4, r6, r2
 801de66:	43de      	mvns	r6, r3
 801de68:	1a84      	subs	r4, r0, r2
 801de6a:	42ae      	cmp	r6, r5
 801de6c:	41bc      	sbcs	r4, r7
 801de6e:	d315      	bcc.n	801de9c <rmw_time_equal+0x94>
 801de70:	195b      	adds	r3, r3, r5
 801de72:	eb42 0207 	adc.w	r2, r2, r7
 801de76:	428a      	cmp	r2, r1
 801de78:	bf08      	it	eq
 801de7a:	4563      	cmpeq	r3, ip
 801de7c:	bf0c      	ite	eq
 801de7e:	2001      	moveq	r0, #1
 801de80:	2000      	movne	r0, #0
 801de82:	b004      	add	sp, #16
 801de84:	bcf0      	pop	{r4, r5, r6, r7}
 801de86:	4770      	bx	lr
 801de88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801de8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801de90:	e7d9      	b.n	801de46 <rmw_time_equal+0x3e>
 801de92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801de9a:	e7ec      	b.n	801de76 <rmw_time_equal+0x6e>
 801de9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dea0:	4602      	mov	r2, r0
 801dea2:	e7e8      	b.n	801de76 <rmw_time_equal+0x6e>
 801dea4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dea8:	e7cd      	b.n	801de46 <rmw_time_equal+0x3e>
 801deaa:	bf00      	nop
 801deac:	25c17d04 	.word	0x25c17d04
 801deb0:	3b9aca00 	.word	0x3b9aca00

0801deb4 <rmw_time_total_nsec>:
 801deb4:	b470      	push	{r4, r5, r6}
 801deb6:	b085      	sub	sp, #20
 801deb8:	ac04      	add	r4, sp, #16
 801deba:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801debe:	4603      	mov	r3, r0
 801dec0:	4913      	ldr	r1, [pc, #76]	; (801df10 <rmw_time_total_nsec+0x5c>)
 801dec2:	9d01      	ldr	r5, [sp, #4]
 801dec4:	4610      	mov	r0, r2
 801dec6:	4299      	cmp	r1, r3
 801dec8:	f04f 0202 	mov.w	r2, #2
 801decc:	9e03      	ldr	r6, [sp, #12]
 801dece:	41aa      	sbcs	r2, r5
 801ded0:	d311      	bcc.n	801def6 <rmw_time_total_nsec+0x42>
 801ded2:	4c10      	ldr	r4, [pc, #64]	; (801df14 <rmw_time_total_nsec+0x60>)
 801ded4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ded8:	fba3 3204 	umull	r3, r2, r3, r4
 801dedc:	fb04 2205 	mla	r2, r4, r5, r2
 801dee0:	43dd      	mvns	r5, r3
 801dee2:	1a8c      	subs	r4, r1, r2
 801dee4:	4285      	cmp	r5, r0
 801dee6:	41b4      	sbcs	r4, r6
 801dee8:	d30c      	bcc.n	801df04 <rmw_time_total_nsec+0x50>
 801deea:	1818      	adds	r0, r3, r0
 801deec:	eb42 0106 	adc.w	r1, r2, r6
 801def0:	b005      	add	sp, #20
 801def2:	bc70      	pop	{r4, r5, r6}
 801def4:	4770      	bx	lr
 801def6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801defa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801defe:	b005      	add	sp, #20
 801df00:	bc70      	pop	{r4, r5, r6}
 801df02:	4770      	bx	lr
 801df04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801df08:	b005      	add	sp, #20
 801df0a:	bc70      	pop	{r4, r5, r6}
 801df0c:	4770      	bx	lr
 801df0e:	bf00      	nop
 801df10:	25c17d04 	.word	0x25c17d04
 801df14:	3b9aca00 	.word	0x3b9aca00

0801df18 <rmw_validate_full_topic_name>:
 801df18:	2800      	cmp	r0, #0
 801df1a:	d05d      	beq.n	801dfd8 <rmw_validate_full_topic_name+0xc0>
 801df1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df20:	460d      	mov	r5, r1
 801df22:	2900      	cmp	r1, #0
 801df24:	d05a      	beq.n	801dfdc <rmw_validate_full_topic_name+0xc4>
 801df26:	4604      	mov	r4, r0
 801df28:	4616      	mov	r6, r2
 801df2a:	f7e2 f9e9 	bl	8000300 <strlen>
 801df2e:	b150      	cbz	r0, 801df46 <rmw_validate_full_topic_name+0x2e>
 801df30:	7823      	ldrb	r3, [r4, #0]
 801df32:	2b2f      	cmp	r3, #47	; 0x2f
 801df34:	d00e      	beq.n	801df54 <rmw_validate_full_topic_name+0x3c>
 801df36:	2302      	movs	r3, #2
 801df38:	602b      	str	r3, [r5, #0]
 801df3a:	b146      	cbz	r6, 801df4e <rmw_validate_full_topic_name+0x36>
 801df3c:	2300      	movs	r3, #0
 801df3e:	4618      	mov	r0, r3
 801df40:	6033      	str	r3, [r6, #0]
 801df42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df46:	2301      	movs	r3, #1
 801df48:	602b      	str	r3, [r5, #0]
 801df4a:	2e00      	cmp	r6, #0
 801df4c:	d1f6      	bne.n	801df3c <rmw_validate_full_topic_name+0x24>
 801df4e:	2000      	movs	r0, #0
 801df50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df54:	1e43      	subs	r3, r0, #1
 801df56:	5ce2      	ldrb	r2, [r4, r3]
 801df58:	2a2f      	cmp	r2, #47	; 0x2f
 801df5a:	d041      	beq.n	801dfe0 <rmw_validate_full_topic_name+0xc8>
 801df5c:	1e62      	subs	r2, r4, #1
 801df5e:	f1c4 0e01 	rsb	lr, r4, #1
 801df62:	eb02 0800 	add.w	r8, r2, r0
 801df66:	eb0e 0702 	add.w	r7, lr, r2
 801df6a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801df6e:	f023 0120 	bic.w	r1, r3, #32
 801df72:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801df76:	3941      	subs	r1, #65	; 0x41
 801df78:	2919      	cmp	r1, #25
 801df7a:	d90f      	bls.n	801df9c <rmw_validate_full_topic_name+0x84>
 801df7c:	f1bc 0f0a 	cmp.w	ip, #10
 801df80:	d90c      	bls.n	801df9c <rmw_validate_full_topic_name+0x84>
 801df82:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801df86:	fab3 f383 	clz	r3, r3
 801df8a:	095b      	lsrs	r3, r3, #5
 801df8c:	b933      	cbnz	r3, 801df9c <rmw_validate_full_topic_name+0x84>
 801df8e:	2204      	movs	r2, #4
 801df90:	602a      	str	r2, [r5, #0]
 801df92:	2e00      	cmp	r6, #0
 801df94:	d0db      	beq.n	801df4e <rmw_validate_full_topic_name+0x36>
 801df96:	4618      	mov	r0, r3
 801df98:	6037      	str	r7, [r6, #0]
 801df9a:	e7d2      	b.n	801df42 <rmw_validate_full_topic_name+0x2a>
 801df9c:	4542      	cmp	r2, r8
 801df9e:	d1e2      	bne.n	801df66 <rmw_validate_full_topic_name+0x4e>
 801dfa0:	2301      	movs	r3, #1
 801dfa2:	4f1a      	ldr	r7, [pc, #104]	; (801e00c <rmw_validate_full_topic_name+0xf4>)
 801dfa4:	e004      	b.n	801dfb0 <rmw_validate_full_topic_name+0x98>
 801dfa6:	4298      	cmp	r0, r3
 801dfa8:	f104 0401 	add.w	r4, r4, #1
 801dfac:	4613      	mov	r3, r2
 801dfae:	d91c      	bls.n	801dfea <rmw_validate_full_topic_name+0xd2>
 801dfb0:	4298      	cmp	r0, r3
 801dfb2:	f103 0201 	add.w	r2, r3, #1
 801dfb6:	d0f6      	beq.n	801dfa6 <rmw_validate_full_topic_name+0x8e>
 801dfb8:	7821      	ldrb	r1, [r4, #0]
 801dfba:	292f      	cmp	r1, #47	; 0x2f
 801dfbc:	d1f3      	bne.n	801dfa6 <rmw_validate_full_topic_name+0x8e>
 801dfbe:	7861      	ldrb	r1, [r4, #1]
 801dfc0:	292f      	cmp	r1, #47	; 0x2f
 801dfc2:	d01e      	beq.n	801e002 <rmw_validate_full_topic_name+0xea>
 801dfc4:	5dc9      	ldrb	r1, [r1, r7]
 801dfc6:	0749      	lsls	r1, r1, #29
 801dfc8:	d5ed      	bpl.n	801dfa6 <rmw_validate_full_topic_name+0x8e>
 801dfca:	2206      	movs	r2, #6
 801dfcc:	602a      	str	r2, [r5, #0]
 801dfce:	2e00      	cmp	r6, #0
 801dfd0:	d0bd      	beq.n	801df4e <rmw_validate_full_topic_name+0x36>
 801dfd2:	2000      	movs	r0, #0
 801dfd4:	6033      	str	r3, [r6, #0]
 801dfd6:	e7b4      	b.n	801df42 <rmw_validate_full_topic_name+0x2a>
 801dfd8:	200b      	movs	r0, #11
 801dfda:	4770      	bx	lr
 801dfdc:	200b      	movs	r0, #11
 801dfde:	e7b0      	b.n	801df42 <rmw_validate_full_topic_name+0x2a>
 801dfe0:	2203      	movs	r2, #3
 801dfe2:	602a      	str	r2, [r5, #0]
 801dfe4:	2e00      	cmp	r6, #0
 801dfe6:	d1f4      	bne.n	801dfd2 <rmw_validate_full_topic_name+0xba>
 801dfe8:	e7b1      	b.n	801df4e <rmw_validate_full_topic_name+0x36>
 801dfea:	28f7      	cmp	r0, #247	; 0xf7
 801dfec:	d803      	bhi.n	801dff6 <rmw_validate_full_topic_name+0xde>
 801dfee:	2300      	movs	r3, #0
 801dff0:	4618      	mov	r0, r3
 801dff2:	602b      	str	r3, [r5, #0]
 801dff4:	e7a5      	b.n	801df42 <rmw_validate_full_topic_name+0x2a>
 801dff6:	2307      	movs	r3, #7
 801dff8:	602b      	str	r3, [r5, #0]
 801dffa:	2e00      	cmp	r6, #0
 801dffc:	d0a7      	beq.n	801df4e <rmw_validate_full_topic_name+0x36>
 801dffe:	23f6      	movs	r3, #246	; 0xf6
 801e000:	e7e7      	b.n	801dfd2 <rmw_validate_full_topic_name+0xba>
 801e002:	2205      	movs	r2, #5
 801e004:	602a      	str	r2, [r5, #0]
 801e006:	2e00      	cmp	r6, #0
 801e008:	d1e3      	bne.n	801dfd2 <rmw_validate_full_topic_name+0xba>
 801e00a:	e7a0      	b.n	801df4e <rmw_validate_full_topic_name+0x36>
 801e00c:	08025d6c 	.word	0x08025d6c

0801e010 <on_status>:
 801e010:	b082      	sub	sp, #8
 801e012:	b002      	add	sp, #8
 801e014:	4770      	bx	lr
 801e016:	bf00      	nop

0801e018 <on_topic>:
 801e018:	4a23      	ldr	r2, [pc, #140]	; (801e0a8 <on_topic+0x90>)
 801e01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e01e:	6812      	ldr	r2, [r2, #0]
 801e020:	b094      	sub	sp, #80	; 0x50
 801e022:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e024:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801e028:	9113      	str	r1, [sp, #76]	; 0x4c
 801e02a:	9312      	str	r3, [sp, #72]	; 0x48
 801e02c:	b3c2      	cbz	r2, 801e0a0 <on_topic+0x88>
 801e02e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801e032:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801e036:	e001      	b.n	801e03c <on_topic+0x24>
 801e038:	6852      	ldr	r2, [r2, #4]
 801e03a:	b38a      	cbz	r2, 801e0a0 <on_topic+0x88>
 801e03c:	6894      	ldr	r4, [r2, #8]
 801e03e:	8aa3      	ldrh	r3, [r4, #20]
 801e040:	428b      	cmp	r3, r1
 801e042:	d1f9      	bne.n	801e038 <on_topic+0x20>
 801e044:	7da3      	ldrb	r3, [r4, #22]
 801e046:	4283      	cmp	r3, r0
 801e048:	d1f6      	bne.n	801e038 <on_topic+0x20>
 801e04a:	2248      	movs	r2, #72	; 0x48
 801e04c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801e050:	4668      	mov	r0, sp
 801e052:	f003 f880 	bl	8021156 <memcpy>
 801e056:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801e05a:	4620      	mov	r0, r4
 801e05c:	cb0c      	ldmia	r3, {r2, r3}
 801e05e:	f7f8 ffdb 	bl	8017018 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e062:	4607      	mov	r7, r0
 801e064:	b1e0      	cbz	r0, 801e0a0 <on_topic+0x88>
 801e066:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e06a:	462a      	mov	r2, r5
 801e06c:	4630      	mov	r0, r6
 801e06e:	f108 0110 	add.w	r1, r8, #16
 801e072:	f7f9 fc91 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801e076:	b930      	cbnz	r0, 801e086 <on_topic+0x6e>
 801e078:	4639      	mov	r1, r7
 801e07a:	480c      	ldr	r0, [pc, #48]	; (801e0ac <on_topic+0x94>)
 801e07c:	b014      	add	sp, #80	; 0x50
 801e07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e082:	f000 b8bd 	b.w	801e200 <put_memory>
 801e086:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801e08a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801e08e:	f000 fb33 	bl	801e6f8 <rmw_uros_epoch_nanos>
 801e092:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801e096:	2305      	movs	r3, #5
 801e098:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e09c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801e0a0:	b014      	add	sp, #80	; 0x50
 801e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0a6:	bf00      	nop
 801e0a8:	2001702c 	.word	0x2001702c
 801e0ac:	2001701c 	.word	0x2001701c

0801e0b0 <on_request>:
 801e0b0:	4824      	ldr	r0, [pc, #144]	; (801e144 <on_request+0x94>)
 801e0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0b6:	6800      	ldr	r0, [r0, #0]
 801e0b8:	b094      	sub	sp, #80	; 0x50
 801e0ba:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e0bc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e0c0:	9113      	str	r1, [sp, #76]	; 0x4c
 801e0c2:	2800      	cmp	r0, #0
 801e0c4:	d03b      	beq.n	801e13e <on_request+0x8e>
 801e0c6:	461d      	mov	r5, r3
 801e0c8:	e001      	b.n	801e0ce <on_request+0x1e>
 801e0ca:	6840      	ldr	r0, [r0, #4]
 801e0cc:	b3b8      	cbz	r0, 801e13e <on_request+0x8e>
 801e0ce:	6884      	ldr	r4, [r0, #8]
 801e0d0:	8b21      	ldrh	r1, [r4, #24]
 801e0d2:	4291      	cmp	r1, r2
 801e0d4:	d1f9      	bne.n	801e0ca <on_request+0x1a>
 801e0d6:	2248      	movs	r2, #72	; 0x48
 801e0d8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e0dc:	4668      	mov	r0, sp
 801e0de:	f003 f83a 	bl	8021156 <memcpy>
 801e0e2:	f104 0320 	add.w	r3, r4, #32
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	cb0c      	ldmia	r3, {r2, r3}
 801e0ea:	f7f8 ff95 	bl	8017018 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e0ee:	4680      	mov	r8, r0
 801e0f0:	b328      	cbz	r0, 801e13e <on_request+0x8e>
 801e0f2:	4630      	mov	r0, r6
 801e0f4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e0f8:	463a      	mov	r2, r7
 801e0fa:	f106 0110 	add.w	r1, r6, #16
 801e0fe:	f7f9 fc4b 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801e102:	b930      	cbnz	r0, 801e112 <on_request+0x62>
 801e104:	4641      	mov	r1, r8
 801e106:	4810      	ldr	r0, [pc, #64]	; (801e148 <on_request+0x98>)
 801e108:	b014      	add	sp, #80	; 0x50
 801e10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e10e:	f000 b877 	b.w	801e200 <put_memory>
 801e112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e114:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801e118:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e11c:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e124:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e128:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e12c:	f000 fae4 	bl	801e6f8 <rmw_uros_epoch_nanos>
 801e130:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e134:	2303      	movs	r3, #3
 801e136:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e13a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e13e:	b014      	add	sp, #80	; 0x50
 801e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e144:	20016ffc 	.word	0x20016ffc
 801e148:	2001701c 	.word	0x2001701c

0801e14c <on_reply>:
 801e14c:	4822      	ldr	r0, [pc, #136]	; (801e1d8 <on_reply+0x8c>)
 801e14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e152:	6800      	ldr	r0, [r0, #0]
 801e154:	b094      	sub	sp, #80	; 0x50
 801e156:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e158:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e15c:	9113      	str	r1, [sp, #76]	; 0x4c
 801e15e:	b3b8      	cbz	r0, 801e1d0 <on_reply+0x84>
 801e160:	461d      	mov	r5, r3
 801e162:	e001      	b.n	801e168 <on_reply+0x1c>
 801e164:	6840      	ldr	r0, [r0, #4]
 801e166:	b398      	cbz	r0, 801e1d0 <on_reply+0x84>
 801e168:	6884      	ldr	r4, [r0, #8]
 801e16a:	8b21      	ldrh	r1, [r4, #24]
 801e16c:	4291      	cmp	r1, r2
 801e16e:	d1f9      	bne.n	801e164 <on_reply+0x18>
 801e170:	2248      	movs	r2, #72	; 0x48
 801e172:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e176:	4668      	mov	r0, sp
 801e178:	f002 ffed 	bl	8021156 <memcpy>
 801e17c:	f104 0320 	add.w	r3, r4, #32
 801e180:	4620      	mov	r0, r4
 801e182:	cb0c      	ldmia	r3, {r2, r3}
 801e184:	f7f8 ff48 	bl	8017018 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e188:	4680      	mov	r8, r0
 801e18a:	b308      	cbz	r0, 801e1d0 <on_reply+0x84>
 801e18c:	4630      	mov	r0, r6
 801e18e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e192:	463a      	mov	r2, r7
 801e194:	f106 0110 	add.w	r1, r6, #16
 801e198:	f7f9 fbfe 	bl	8017998 <ucdr_deserialize_array_uint8_t>
 801e19c:	b930      	cbnz	r0, 801e1ac <on_reply+0x60>
 801e19e:	4641      	mov	r1, r8
 801e1a0:	480e      	ldr	r0, [pc, #56]	; (801e1dc <on_reply+0x90>)
 801e1a2:	b014      	add	sp, #80	; 0x50
 801e1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1a8:	f000 b82a 	b.w	801e200 <put_memory>
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e1b2:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e1b6:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801e1ba:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801e1be:	f000 fa9b 	bl	801e6f8 <rmw_uros_epoch_nanos>
 801e1c2:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e1c6:	2304      	movs	r3, #4
 801e1c8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e1cc:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e1d0:	b014      	add	sp, #80	; 0x50
 801e1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d6:	bf00      	nop
 801e1d8:	2001270c 	.word	0x2001270c
 801e1dc:	2001701c 	.word	0x2001701c

0801e1e0 <get_memory>:
 801e1e0:	4603      	mov	r3, r0
 801e1e2:	6840      	ldr	r0, [r0, #4]
 801e1e4:	b158      	cbz	r0, 801e1fe <get_memory+0x1e>
 801e1e6:	6842      	ldr	r2, [r0, #4]
 801e1e8:	605a      	str	r2, [r3, #4]
 801e1ea:	b10a      	cbz	r2, 801e1f0 <get_memory+0x10>
 801e1ec:	2100      	movs	r1, #0
 801e1ee:	6011      	str	r1, [r2, #0]
 801e1f0:	681a      	ldr	r2, [r3, #0]
 801e1f2:	6042      	str	r2, [r0, #4]
 801e1f4:	b102      	cbz	r2, 801e1f8 <get_memory+0x18>
 801e1f6:	6010      	str	r0, [r2, #0]
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	6002      	str	r2, [r0, #0]
 801e1fc:	6018      	str	r0, [r3, #0]
 801e1fe:	4770      	bx	lr

0801e200 <put_memory>:
 801e200:	680b      	ldr	r3, [r1, #0]
 801e202:	b10b      	cbz	r3, 801e208 <put_memory+0x8>
 801e204:	684a      	ldr	r2, [r1, #4]
 801e206:	605a      	str	r2, [r3, #4]
 801e208:	684a      	ldr	r2, [r1, #4]
 801e20a:	b102      	cbz	r2, 801e20e <put_memory+0xe>
 801e20c:	6013      	str	r3, [r2, #0]
 801e20e:	6803      	ldr	r3, [r0, #0]
 801e210:	428b      	cmp	r3, r1
 801e212:	6843      	ldr	r3, [r0, #4]
 801e214:	bf08      	it	eq
 801e216:	6002      	streq	r2, [r0, #0]
 801e218:	604b      	str	r3, [r1, #4]
 801e21a:	b103      	cbz	r3, 801e21e <put_memory+0x1e>
 801e21c:	6019      	str	r1, [r3, #0]
 801e21e:	2300      	movs	r3, #0
 801e220:	600b      	str	r3, [r1, #0]
 801e222:	6041      	str	r1, [r0, #4]
 801e224:	4770      	bx	lr
 801e226:	bf00      	nop

0801e228 <rmw_destroy_client>:
 801e228:	b570      	push	{r4, r5, r6, lr}
 801e22a:	b128      	cbz	r0, 801e238 <rmw_destroy_client+0x10>
 801e22c:	4604      	mov	r4, r0
 801e22e:	6800      	ldr	r0, [r0, #0]
 801e230:	460d      	mov	r5, r1
 801e232:	f7f9 f905 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 801e236:	b910      	cbnz	r0, 801e23e <rmw_destroy_client+0x16>
 801e238:	2401      	movs	r4, #1
 801e23a:	4620      	mov	r0, r4
 801e23c:	bd70      	pop	{r4, r5, r6, pc}
 801e23e:	6863      	ldr	r3, [r4, #4]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d0f9      	beq.n	801e238 <rmw_destroy_client+0x10>
 801e244:	2d00      	cmp	r5, #0
 801e246:	d0f7      	beq.n	801e238 <rmw_destroy_client+0x10>
 801e248:	6828      	ldr	r0, [r5, #0]
 801e24a:	f7f9 f8f9 	bl	8017440 <is_uxrce_rmw_identifier_valid>
 801e24e:	2800      	cmp	r0, #0
 801e250:	d0f2      	beq.n	801e238 <rmw_destroy_client+0x10>
 801e252:	686e      	ldr	r6, [r5, #4]
 801e254:	2e00      	cmp	r6, #0
 801e256:	d0ef      	beq.n	801e238 <rmw_destroy_client+0x10>
 801e258:	6864      	ldr	r4, [r4, #4]
 801e25a:	6932      	ldr	r2, [r6, #16]
 801e25c:	6920      	ldr	r0, [r4, #16]
 801e25e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e262:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e266:	6819      	ldr	r1, [r3, #0]
 801e268:	f7f9 ff62 	bl	8018130 <uxr_buffer_cancel_data>
 801e26c:	4602      	mov	r2, r0
 801e26e:	6920      	ldr	r0, [r4, #16]
 801e270:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e274:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e278:	f7f8 ffd0 	bl	801721c <run_xrce_session>
 801e27c:	6920      	ldr	r0, [r4, #16]
 801e27e:	6932      	ldr	r2, [r6, #16]
 801e280:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e284:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e288:	6819      	ldr	r1, [r3, #0]
 801e28a:	f7f9 fbed 	bl	8017a68 <uxr_buffer_delete_entity>
 801e28e:	4602      	mov	r2, r0
 801e290:	6920      	ldr	r0, [r4, #16]
 801e292:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e296:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e29a:	f7f8 ffbf 	bl	801721c <run_xrce_session>
 801e29e:	4603      	mov	r3, r0
 801e2a0:	4628      	mov	r0, r5
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	bf14      	ite	ne
 801e2a6:	2400      	movne	r4, #0
 801e2a8:	2402      	moveq	r4, #2
 801e2aa:	f7f8 fe93 	bl	8016fd4 <rmw_uxrce_fini_client_memory>
 801e2ae:	e7c4      	b.n	801e23a <rmw_destroy_client+0x12>

0801e2b0 <rmw_get_implementation_identifier>:
 801e2b0:	4b01      	ldr	r3, [pc, #4]	; (801e2b8 <rmw_get_implementation_identifier+0x8>)
 801e2b2:	6818      	ldr	r0, [r3, #0]
 801e2b4:	4770      	bx	lr
 801e2b6:	bf00      	nop
 801e2b8:	08025cc4 	.word	0x08025cc4

0801e2bc <rmw_create_guard_condition>:
 801e2bc:	b538      	push	{r3, r4, r5, lr}
 801e2be:	4605      	mov	r5, r0
 801e2c0:	4808      	ldr	r0, [pc, #32]	; (801e2e4 <rmw_create_guard_condition+0x28>)
 801e2c2:	f7ff ff8d 	bl	801e1e0 <get_memory>
 801e2c6:	4603      	mov	r3, r0
 801e2c8:	b148      	cbz	r0, 801e2de <rmw_create_guard_condition+0x22>
 801e2ca:	6884      	ldr	r4, [r0, #8]
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	61e5      	str	r5, [r4, #28]
 801e2d0:	7423      	strb	r3, [r4, #16]
 801e2d2:	f7ff ffed 	bl	801e2b0 <rmw_get_implementation_identifier>
 801e2d6:	f104 0314 	add.w	r3, r4, #20
 801e2da:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e2de:	4618      	mov	r0, r3
 801e2e0:	bd38      	pop	{r3, r4, r5, pc}
 801e2e2:	bf00      	nop
 801e2e4:	20016fbc 	.word	0x20016fbc

0801e2e8 <rmw_destroy_guard_condition>:
 801e2e8:	b508      	push	{r3, lr}
 801e2ea:	4b08      	ldr	r3, [pc, #32]	; (801e30c <rmw_destroy_guard_condition+0x24>)
 801e2ec:	6819      	ldr	r1, [r3, #0]
 801e2ee:	b911      	cbnz	r1, 801e2f6 <rmw_destroy_guard_condition+0xe>
 801e2f0:	e00a      	b.n	801e308 <rmw_destroy_guard_condition+0x20>
 801e2f2:	6849      	ldr	r1, [r1, #4]
 801e2f4:	b141      	cbz	r1, 801e308 <rmw_destroy_guard_condition+0x20>
 801e2f6:	688b      	ldr	r3, [r1, #8]
 801e2f8:	3314      	adds	r3, #20
 801e2fa:	4298      	cmp	r0, r3
 801e2fc:	d1f9      	bne.n	801e2f2 <rmw_destroy_guard_condition+0xa>
 801e2fe:	4803      	ldr	r0, [pc, #12]	; (801e30c <rmw_destroy_guard_condition+0x24>)
 801e300:	f7ff ff7e 	bl	801e200 <put_memory>
 801e304:	2000      	movs	r0, #0
 801e306:	bd08      	pop	{r3, pc}
 801e308:	2001      	movs	r0, #1
 801e30a:	bd08      	pop	{r3, pc}
 801e30c:	20016fbc 	.word	0x20016fbc

0801e310 <create_topic>:
 801e310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e314:	4605      	mov	r5, r0
 801e316:	b084      	sub	sp, #16
 801e318:	4822      	ldr	r0, [pc, #136]	; (801e3a4 <create_topic+0x94>)
 801e31a:	460f      	mov	r7, r1
 801e31c:	4616      	mov	r6, r2
 801e31e:	f7ff ff5f 	bl	801e1e0 <get_memory>
 801e322:	4604      	mov	r4, r0
 801e324:	2800      	cmp	r0, #0
 801e326:	d039      	beq.n	801e39c <create_topic+0x8c>
 801e328:	692b      	ldr	r3, [r5, #16]
 801e32a:	2102      	movs	r1, #2
 801e32c:	6884      	ldr	r4, [r0, #8]
 801e32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e332:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e3ac <create_topic+0x9c>
 801e336:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e33a:	1c42      	adds	r2, r0, #1
 801e33c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e340:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e344:	f7f9 fe8a 	bl	801805c <uxr_object_id>
 801e348:	223c      	movs	r2, #60	; 0x3c
 801e34a:	6120      	str	r0, [r4, #16]
 801e34c:	4641      	mov	r1, r8
 801e34e:	4638      	mov	r0, r7
 801e350:	f7f9 f85e 	bl	8017410 <generate_topic_name>
 801e354:	b1f0      	cbz	r0, 801e394 <create_topic+0x84>
 801e356:	4f14      	ldr	r7, [pc, #80]	; (801e3a8 <create_topic+0x98>)
 801e358:	4630      	mov	r0, r6
 801e35a:	2264      	movs	r2, #100	; 0x64
 801e35c:	4639      	mov	r1, r7
 801e35e:	f7f9 f829 	bl	80173b4 <generate_type_name>
 801e362:	b1b8      	cbz	r0, 801e394 <create_topic+0x84>
 801e364:	6928      	ldr	r0, [r5, #16]
 801e366:	2106      	movs	r1, #6
 801e368:	696b      	ldr	r3, [r5, #20]
 801e36a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e36e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e372:	f8cd 8000 	str.w	r8, [sp]
 801e376:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e37a:	6811      	ldr	r1, [r2, #0]
 801e37c:	6922      	ldr	r2, [r4, #16]
 801e37e:	f7f9 fbf1 	bl	8017b64 <uxr_buffer_create_topic_bin>
 801e382:	4602      	mov	r2, r0
 801e384:	6928      	ldr	r0, [r5, #16]
 801e386:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e38a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e38e:	f7f8 ff45 	bl	801721c <run_xrce_session>
 801e392:	b918      	cbnz	r0, 801e39c <create_topic+0x8c>
 801e394:	4620      	mov	r0, r4
 801e396:	2400      	movs	r4, #0
 801e398:	f7f8 fe32 	bl	8017000 <rmw_uxrce_fini_topic_memory>
 801e39c:	4620      	mov	r0, r4
 801e39e:	b004      	add	sp, #16
 801e3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3a4:	2001703c 	.word	0x2001703c
 801e3a8:	200170d0 	.word	0x200170d0
 801e3ac:	20017094 	.word	0x20017094

0801e3b0 <destroy_topic>:
 801e3b0:	b538      	push	{r3, r4, r5, lr}
 801e3b2:	6985      	ldr	r5, [r0, #24]
 801e3b4:	b1dd      	cbz	r5, 801e3ee <destroy_topic+0x3e>
 801e3b6:	4604      	mov	r4, r0
 801e3b8:	6928      	ldr	r0, [r5, #16]
 801e3ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e3be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e3c2:	6922      	ldr	r2, [r4, #16]
 801e3c4:	6819      	ldr	r1, [r3, #0]
 801e3c6:	f7f9 fb4f 	bl	8017a68 <uxr_buffer_delete_entity>
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	6928      	ldr	r0, [r5, #16]
 801e3ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e3d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e3d6:	f7f8 ff21 	bl	801721c <run_xrce_session>
 801e3da:	4603      	mov	r3, r0
 801e3dc:	4620      	mov	r0, r4
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	bf14      	ite	ne
 801e3e2:	2400      	movne	r4, #0
 801e3e4:	2402      	moveq	r4, #2
 801e3e6:	f7f8 fe0b 	bl	8017000 <rmw_uxrce_fini_topic_memory>
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	bd38      	pop	{r3, r4, r5, pc}
 801e3ee:	2401      	movs	r4, #1
 801e3f0:	4620      	mov	r0, r4
 801e3f2:	bd38      	pop	{r3, r4, r5, pc}

0801e3f4 <rmw_wait>:
 801e3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e3f8:	4698      	mov	r8, r3
 801e3fa:	ea40 0301 	orr.w	r3, r0, r1
 801e3fe:	b089      	sub	sp, #36	; 0x24
 801e400:	ea48 0303 	orr.w	r3, r8, r3
 801e404:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e406:	4313      	orrs	r3, r2
 801e408:	f000 8106 	beq.w	801e618 <rmw_wait+0x224>
 801e40c:	4605      	mov	r5, r0
 801e40e:	460e      	mov	r6, r1
 801e410:	4691      	mov	r9, r2
 801e412:	b16c      	cbz	r4, 801e430 <rmw_wait+0x3c>
 801e414:	4ba6      	ldr	r3, [pc, #664]	; (801e6b0 <rmw_wait+0x2bc>)
 801e416:	af04      	add	r7, sp, #16
 801e418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e41a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e41e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e422:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e426:	f7ff fcef 	bl	801de08 <rmw_time_equal>
 801e42a:	2800      	cmp	r0, #0
 801e42c:	f000 810b 	beq.w	801e646 <rmw_wait+0x252>
 801e430:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e434:	f7f8 fe74 	bl	8017120 <rmw_uxrce_clean_expired_static_input_buffer>
 801e438:	4b9e      	ldr	r3, [pc, #632]	; (801e6b4 <rmw_wait+0x2c0>)
 801e43a:	681c      	ldr	r4, [r3, #0]
 801e43c:	b14c      	cbz	r4, 801e452 <rmw_wait+0x5e>
 801e43e:	4623      	mov	r3, r4
 801e440:	2100      	movs	r1, #0
 801e442:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e44a:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d1f7      	bne.n	801e442 <rmw_wait+0x4e>
 801e452:	f1b9 0f00 	cmp.w	r9, #0
 801e456:	d011      	beq.n	801e47c <rmw_wait+0x88>
 801e458:	f8d9 1000 	ldr.w	r1, [r9]
 801e45c:	b171      	cbz	r1, 801e47c <rmw_wait+0x88>
 801e45e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e462:	2300      	movs	r3, #0
 801e464:	2001      	movs	r0, #1
 801e466:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e46a:	3301      	adds	r3, #1
 801e46c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e46e:	4299      	cmp	r1, r3
 801e470:	6912      	ldr	r2, [r2, #16]
 801e472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e476:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e47a:	d1f4      	bne.n	801e466 <rmw_wait+0x72>
 801e47c:	f1b8 0f00 	cmp.w	r8, #0
 801e480:	d011      	beq.n	801e4a6 <rmw_wait+0xb2>
 801e482:	f8d8 1000 	ldr.w	r1, [r8]
 801e486:	b171      	cbz	r1, 801e4a6 <rmw_wait+0xb2>
 801e488:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e48c:	2300      	movs	r3, #0
 801e48e:	2001      	movs	r0, #1
 801e490:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e494:	3301      	adds	r3, #1
 801e496:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e498:	4299      	cmp	r1, r3
 801e49a:	6912      	ldr	r2, [r2, #16]
 801e49c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e4a0:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e4a4:	d1f4      	bne.n	801e490 <rmw_wait+0x9c>
 801e4a6:	b185      	cbz	r5, 801e4ca <rmw_wait+0xd6>
 801e4a8:	6829      	ldr	r1, [r5, #0]
 801e4aa:	b171      	cbz	r1, 801e4ca <rmw_wait+0xd6>
 801e4ac:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e4b0:	2300      	movs	r3, #0
 801e4b2:	2001      	movs	r0, #1
 801e4b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e4b8:	3301      	adds	r3, #1
 801e4ba:	6a12      	ldr	r2, [r2, #32]
 801e4bc:	4299      	cmp	r1, r3
 801e4be:	6912      	ldr	r2, [r2, #16]
 801e4c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e4c4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e4c8:	d1f4      	bne.n	801e4b4 <rmw_wait+0xc0>
 801e4ca:	b344      	cbz	r4, 801e51e <rmw_wait+0x12a>
 801e4cc:	4622      	mov	r2, r4
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e4d4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e4d8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e4dc:	440b      	add	r3, r1
 801e4de:	b2db      	uxtb	r3, r3
 801e4e0:	2a00      	cmp	r2, #0
 801e4e2:	d1f5      	bne.n	801e4d0 <rmw_wait+0xdc>
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d05f      	beq.n	801e5a8 <rmw_wait+0x1b4>
 801e4e8:	1c7a      	adds	r2, r7, #1
 801e4ea:	d00d      	beq.n	801e508 <rmw_wait+0x114>
 801e4ec:	ee07 7a90 	vmov	s15, r7
 801e4f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e4f4:	ee07 3a90 	vmov	s15, r3
 801e4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e500:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e504:	ee17 7a90 	vmov	r7, s15
 801e508:	68a0      	ldr	r0, [r4, #8]
 801e50a:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e50e:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e512:	2b00      	cmp	r3, #0
 801e514:	f040 808d 	bne.w	801e632 <rmw_wait+0x23e>
 801e518:	6864      	ldr	r4, [r4, #4]
 801e51a:	2c00      	cmp	r4, #0
 801e51c:	d1f4      	bne.n	801e508 <rmw_wait+0x114>
 801e51e:	f1b9 0f00 	cmp.w	r9, #0
 801e522:	f000 80a1 	beq.w	801e668 <rmw_wait+0x274>
 801e526:	f8d9 7000 	ldr.w	r7, [r9]
 801e52a:	2f00      	cmp	r7, #0
 801e52c:	f000 80a4 	beq.w	801e678 <rmw_wait+0x284>
 801e530:	2400      	movs	r4, #0
 801e532:	4627      	mov	r7, r4
 801e534:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e538:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e53c:	f7f8 fdc6 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801e540:	2800      	cmp	r0, #0
 801e542:	d03b      	beq.n	801e5bc <rmw_wait+0x1c8>
 801e544:	3401      	adds	r4, #1
 801e546:	f8d9 3000 	ldr.w	r3, [r9]
 801e54a:	2701      	movs	r7, #1
 801e54c:	42a3      	cmp	r3, r4
 801e54e:	d8f1      	bhi.n	801e534 <rmw_wait+0x140>
 801e550:	2701      	movs	r7, #1
 801e552:	f1b8 0f00 	cmp.w	r8, #0
 801e556:	d010      	beq.n	801e57a <rmw_wait+0x186>
 801e558:	f8d8 3000 	ldr.w	r3, [r8]
 801e55c:	b16b      	cbz	r3, 801e57a <rmw_wait+0x186>
 801e55e:	2400      	movs	r4, #0
 801e560:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e564:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e568:	f7f8 fdb0 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801e56c:	b370      	cbz	r0, 801e5cc <rmw_wait+0x1d8>
 801e56e:	3401      	adds	r4, #1
 801e570:	f8d8 3000 	ldr.w	r3, [r8]
 801e574:	2701      	movs	r7, #1
 801e576:	42a3      	cmp	r3, r4
 801e578:	d8f2      	bhi.n	801e560 <rmw_wait+0x16c>
 801e57a:	2d00      	cmp	r5, #0
 801e57c:	d035      	beq.n	801e5ea <rmw_wait+0x1f6>
 801e57e:	682b      	ldr	r3, [r5, #0]
 801e580:	b39b      	cbz	r3, 801e5ea <rmw_wait+0x1f6>
 801e582:	2400      	movs	r4, #0
 801e584:	686b      	ldr	r3, [r5, #4]
 801e586:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e58a:	f7f8 fd9f 	bl	80170cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801e58e:	b328      	cbz	r0, 801e5dc <rmw_wait+0x1e8>
 801e590:	3401      	adds	r4, #1
 801e592:	682b      	ldr	r3, [r5, #0]
 801e594:	2701      	movs	r7, #1
 801e596:	42a3      	cmp	r3, r4
 801e598:	d8f4      	bhi.n	801e584 <rmw_wait+0x190>
 801e59a:	2e00      	cmp	r6, #0
 801e59c:	d03c      	beq.n	801e618 <rmw_wait+0x224>
 801e59e:	6834      	ldr	r4, [r6, #0]
 801e5a0:	2c00      	cmp	r4, #0
 801e5a2:	d039      	beq.n	801e618 <rmw_wait+0x224>
 801e5a4:	2701      	movs	r7, #1
 801e5a6:	e023      	b.n	801e5f0 <rmw_wait+0x1fc>
 801e5a8:	68a0      	ldr	r0, [r4, #8]
 801e5aa:	2100      	movs	r1, #0
 801e5ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e5b0:	f7fa fb54 	bl	8018c5c <uxr_run_session_timeout>
 801e5b4:	6864      	ldr	r4, [r4, #4]
 801e5b6:	2c00      	cmp	r4, #0
 801e5b8:	d1f6      	bne.n	801e5a8 <rmw_wait+0x1b4>
 801e5ba:	e7b0      	b.n	801e51e <rmw_wait+0x12a>
 801e5bc:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e5c0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e5c4:	3401      	adds	r4, #1
 801e5c6:	42a3      	cmp	r3, r4
 801e5c8:	d8b4      	bhi.n	801e534 <rmw_wait+0x140>
 801e5ca:	e7c2      	b.n	801e552 <rmw_wait+0x15e>
 801e5cc:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e5d0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e5d4:	3401      	adds	r4, #1
 801e5d6:	429c      	cmp	r4, r3
 801e5d8:	d3c2      	bcc.n	801e560 <rmw_wait+0x16c>
 801e5da:	e7ce      	b.n	801e57a <rmw_wait+0x186>
 801e5dc:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e5e0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e5e4:	3401      	adds	r4, #1
 801e5e6:	42a3      	cmp	r3, r4
 801e5e8:	d8cc      	bhi.n	801e584 <rmw_wait+0x190>
 801e5ea:	b1a6      	cbz	r6, 801e616 <rmw_wait+0x222>
 801e5ec:	6834      	ldr	r4, [r6, #0]
 801e5ee:	b194      	cbz	r4, 801e616 <rmw_wait+0x222>
 801e5f0:	2300      	movs	r3, #0
 801e5f2:	461d      	mov	r5, r3
 801e5f4:	e004      	b.n	801e600 <rmw_wait+0x20c>
 801e5f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e5fa:	3301      	adds	r3, #1
 801e5fc:	42a3      	cmp	r3, r4
 801e5fe:	d00a      	beq.n	801e616 <rmw_wait+0x222>
 801e600:	6870      	ldr	r0, [r6, #4]
 801e602:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e606:	7c0a      	ldrb	r2, [r1, #16]
 801e608:	2a00      	cmp	r2, #0
 801e60a:	d0f4      	beq.n	801e5f6 <rmw_wait+0x202>
 801e60c:	3301      	adds	r3, #1
 801e60e:	4617      	mov	r7, r2
 801e610:	740d      	strb	r5, [r1, #16]
 801e612:	42a3      	cmp	r3, r4
 801e614:	d1f4      	bne.n	801e600 <rmw_wait+0x20c>
 801e616:	b147      	cbz	r7, 801e62a <rmw_wait+0x236>
 801e618:	2000      	movs	r0, #0
 801e61a:	b009      	add	sp, #36	; 0x24
 801e61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e620:	b11e      	cbz	r6, 801e62a <rmw_wait+0x236>
 801e622:	6834      	ldr	r4, [r6, #0]
 801e624:	462f      	mov	r7, r5
 801e626:	2c00      	cmp	r4, #0
 801e628:	d1e2      	bne.n	801e5f0 <rmw_wait+0x1fc>
 801e62a:	2002      	movs	r0, #2
 801e62c:	b009      	add	sp, #36	; 0x24
 801e62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e632:	4639      	mov	r1, r7
 801e634:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e638:	f7fa fb2a 	bl	8018c90 <uxr_run_session_until_data>
 801e63c:	6864      	ldr	r4, [r4, #4]
 801e63e:	2c00      	cmp	r4, #0
 801e640:	f47f af62 	bne.w	801e508 <rmw_wait+0x114>
 801e644:	e76b      	b.n	801e51e <rmw_wait+0x12a>
 801e646:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e64a:	f7ff fc33 	bl	801deb4 <rmw_time_total_nsec>
 801e64e:	2300      	movs	r3, #0
 801e650:	4a19      	ldr	r2, [pc, #100]	; (801e6b8 <rmw_wait+0x2c4>)
 801e652:	f7e2 f869 	bl	8000728 <__aeabi_uldivmod>
 801e656:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e65a:	4607      	mov	r7, r0
 801e65c:	f171 0300 	sbcs.w	r3, r1, #0
 801e660:	bfa8      	it	ge
 801e662:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e666:	e6e5      	b.n	801e434 <rmw_wait+0x40>
 801e668:	f1b8 0f00 	cmp.w	r8, #0
 801e66c:	d00f      	beq.n	801e68e <rmw_wait+0x29a>
 801e66e:	f8d8 3000 	ldr.w	r3, [r8]
 801e672:	b193      	cbz	r3, 801e69a <rmw_wait+0x2a6>
 801e674:	464f      	mov	r7, r9
 801e676:	e772      	b.n	801e55e <rmw_wait+0x16a>
 801e678:	f1b8 0f00 	cmp.w	r8, #0
 801e67c:	d007      	beq.n	801e68e <rmw_wait+0x29a>
 801e67e:	f8d8 3000 	ldr.w	r3, [r8]
 801e682:	2b00      	cmp	r3, #0
 801e684:	f47f af6b 	bne.w	801e55e <rmw_wait+0x16a>
 801e688:	b155      	cbz	r5, 801e6a0 <rmw_wait+0x2ac>
 801e68a:	461f      	mov	r7, r3
 801e68c:	e777      	b.n	801e57e <rmw_wait+0x18a>
 801e68e:	2d00      	cmp	r5, #0
 801e690:	d0c6      	beq.n	801e620 <rmw_wait+0x22c>
 801e692:	682b      	ldr	r3, [r5, #0]
 801e694:	b143      	cbz	r3, 801e6a8 <rmw_wait+0x2b4>
 801e696:	4647      	mov	r7, r8
 801e698:	e773      	b.n	801e582 <rmw_wait+0x18e>
 801e69a:	b10d      	cbz	r5, 801e6a0 <rmw_wait+0x2ac>
 801e69c:	464f      	mov	r7, r9
 801e69e:	e76e      	b.n	801e57e <rmw_wait+0x18a>
 801e6a0:	462f      	mov	r7, r5
 801e6a2:	2e00      	cmp	r6, #0
 801e6a4:	d1a2      	bne.n	801e5ec <rmw_wait+0x1f8>
 801e6a6:	e7c0      	b.n	801e62a <rmw_wait+0x236>
 801e6a8:	4647      	mov	r7, r8
 801e6aa:	2e00      	cmp	r6, #0
 801e6ac:	d19e      	bne.n	801e5ec <rmw_wait+0x1f8>
 801e6ae:	e7bc      	b.n	801e62a <rmw_wait+0x236>
 801e6b0:	08024740 	.word	0x08024740
 801e6b4:	2001700c 	.word	0x2001700c
 801e6b8:	000f4240 	.word	0x000f4240

0801e6bc <rmw_create_wait_set>:
 801e6bc:	b508      	push	{r3, lr}
 801e6be:	4803      	ldr	r0, [pc, #12]	; (801e6cc <rmw_create_wait_set+0x10>)
 801e6c0:	f7ff fd8e 	bl	801e1e0 <get_memory>
 801e6c4:	b108      	cbz	r0, 801e6ca <rmw_create_wait_set+0xe>
 801e6c6:	6880      	ldr	r0, [r0, #8]
 801e6c8:	3010      	adds	r0, #16
 801e6ca:	bd08      	pop	{r3, pc}
 801e6cc:	2001704c 	.word	0x2001704c

0801e6d0 <rmw_destroy_wait_set>:
 801e6d0:	b508      	push	{r3, lr}
 801e6d2:	4b08      	ldr	r3, [pc, #32]	; (801e6f4 <rmw_destroy_wait_set+0x24>)
 801e6d4:	6819      	ldr	r1, [r3, #0]
 801e6d6:	b911      	cbnz	r1, 801e6de <rmw_destroy_wait_set+0xe>
 801e6d8:	e00a      	b.n	801e6f0 <rmw_destroy_wait_set+0x20>
 801e6da:	6849      	ldr	r1, [r1, #4]
 801e6dc:	b141      	cbz	r1, 801e6f0 <rmw_destroy_wait_set+0x20>
 801e6de:	688b      	ldr	r3, [r1, #8]
 801e6e0:	3310      	adds	r3, #16
 801e6e2:	4298      	cmp	r0, r3
 801e6e4:	d1f9      	bne.n	801e6da <rmw_destroy_wait_set+0xa>
 801e6e6:	4803      	ldr	r0, [pc, #12]	; (801e6f4 <rmw_destroy_wait_set+0x24>)
 801e6e8:	f7ff fd8a 	bl	801e200 <put_memory>
 801e6ec:	2000      	movs	r0, #0
 801e6ee:	bd08      	pop	{r3, pc}
 801e6f0:	2001      	movs	r0, #1
 801e6f2:	bd08      	pop	{r3, pc}
 801e6f4:	2001704c 	.word	0x2001704c

0801e6f8 <rmw_uros_epoch_nanos>:
 801e6f8:	4b05      	ldr	r3, [pc, #20]	; (801e710 <rmw_uros_epoch_nanos+0x18>)
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	b123      	cbz	r3, 801e708 <rmw_uros_epoch_nanos+0x10>
 801e6fe:	6898      	ldr	r0, [r3, #8]
 801e700:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e704:	f7f9 bf20 	b.w	8018548 <uxr_epoch_nanos>
 801e708:	2000      	movs	r0, #0
 801e70a:	2100      	movs	r1, #0
 801e70c:	4770      	bx	lr
 801e70e:	bf00      	nop
 801e710:	2001700c 	.word	0x2001700c

0801e714 <std_msgs__msg__String__init>:
 801e714:	b538      	push	{r3, r4, r5, lr}
 801e716:	4604      	mov	r4, r0
 801e718:	b128      	cbz	r0, 801e726 <std_msgs__msg__String__init+0x12>
 801e71a:	f7f8 feb7 	bl	801748c <rosidl_runtime_c__String__init>
 801e71e:	4605      	mov	r5, r0
 801e720:	b120      	cbz	r0, 801e72c <std_msgs__msg__String__init+0x18>
 801e722:	4628      	mov	r0, r5
 801e724:	bd38      	pop	{r3, r4, r5, pc}
 801e726:	4605      	mov	r5, r0
 801e728:	4628      	mov	r0, r5
 801e72a:	bd38      	pop	{r3, r4, r5, pc}
 801e72c:	4620      	mov	r0, r4
 801e72e:	f7f8 fec3 	bl	80174b8 <rosidl_runtime_c__String__fini>
 801e732:	4628      	mov	r0, r5
 801e734:	bd38      	pop	{r3, r4, r5, pc}
 801e736:	bf00      	nop

0801e738 <std_msgs__msg__String__fini>:
 801e738:	b108      	cbz	r0, 801e73e <std_msgs__msg__String__fini+0x6>
 801e73a:	f7f8 bebd 	b.w	80174b8 <rosidl_runtime_c__String__fini>
 801e73e:	4770      	bx	lr

0801e740 <ucdr_serialize_string>:
 801e740:	b510      	push	{r4, lr}
 801e742:	b082      	sub	sp, #8
 801e744:	4604      	mov	r4, r0
 801e746:	4608      	mov	r0, r1
 801e748:	9101      	str	r1, [sp, #4]
 801e74a:	f7e1 fdd9 	bl	8000300 <strlen>
 801e74e:	4602      	mov	r2, r0
 801e750:	9901      	ldr	r1, [sp, #4]
 801e752:	4620      	mov	r0, r4
 801e754:	3201      	adds	r2, #1
 801e756:	b002      	add	sp, #8
 801e758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e75c:	f7f4 bf38 	b.w	80135d0 <ucdr_serialize_sequence_char>

0801e760 <ucdr_deserialize_string>:
 801e760:	b500      	push	{lr}
 801e762:	b083      	sub	sp, #12
 801e764:	ab01      	add	r3, sp, #4
 801e766:	f7f4 ff45 	bl	80135f4 <ucdr_deserialize_sequence_char>
 801e76a:	b003      	add	sp, #12
 801e76c:	f85d fb04 	ldr.w	pc, [sp], #4

0801e770 <uxr_init_input_best_effort_stream>:
 801e770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e774:	8003      	strh	r3, [r0, #0]
 801e776:	4770      	bx	lr

0801e778 <uxr_reset_input_best_effort_stream>:
 801e778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e77c:	8003      	strh	r3, [r0, #0]
 801e77e:	4770      	bx	lr

0801e780 <uxr_receive_best_effort_message>:
 801e780:	b538      	push	{r3, r4, r5, lr}
 801e782:	4604      	mov	r4, r0
 801e784:	8800      	ldrh	r0, [r0, #0]
 801e786:	460d      	mov	r5, r1
 801e788:	f000 fd46 	bl	801f218 <uxr_seq_num_cmp>
 801e78c:	4603      	mov	r3, r0
 801e78e:	0fc0      	lsrs	r0, r0, #31
 801e790:	2b00      	cmp	r3, #0
 801e792:	bfb8      	it	lt
 801e794:	8025      	strhlt	r5, [r4, #0]
 801e796:	bd38      	pop	{r3, r4, r5, pc}

0801e798 <on_full_input_buffer>:
 801e798:	b570      	push	{r4, r5, r6, lr}
 801e79a:	460c      	mov	r4, r1
 801e79c:	4605      	mov	r5, r0
 801e79e:	8908      	ldrh	r0, [r1, #8]
 801e7a0:	682b      	ldr	r3, [r5, #0]
 801e7a2:	7d26      	ldrb	r6, [r4, #20]
 801e7a4:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e7a8:	fbb2 f2f0 	udiv	r2, r2, r0
 801e7ac:	eba3 0c01 	sub.w	ip, r3, r1
 801e7b0:	fbbc fcf2 	udiv	ip, ip, r2
 801e7b4:	f10c 0c01 	add.w	ip, ip, #1
 801e7b8:	fa1f f38c 	uxth.w	r3, ip
 801e7bc:	fbb3 fcf0 	udiv	ip, r3, r0
 801e7c0:	fb00 331c 	mls	r3, r0, ip, r3
 801e7c4:	b29b      	uxth	r3, r3
 801e7c6:	fb02 f303 	mul.w	r3, r2, r3
 801e7ca:	1d18      	adds	r0, r3, #4
 801e7cc:	4408      	add	r0, r1
 801e7ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e7d2:	b116      	cbz	r6, 801e7da <on_full_input_buffer+0x42>
 801e7d4:	2600      	movs	r6, #0
 801e7d6:	f840 6c04 	str.w	r6, [r0, #-4]
 801e7da:	2a03      	cmp	r2, #3
 801e7dc:	d801      	bhi.n	801e7e2 <on_full_input_buffer+0x4a>
 801e7de:	2001      	movs	r0, #1
 801e7e0:	bd70      	pop	{r4, r5, r6, pc}
 801e7e2:	3308      	adds	r3, #8
 801e7e4:	4628      	mov	r0, r5
 801e7e6:	3a04      	subs	r2, #4
 801e7e8:	4419      	add	r1, r3
 801e7ea:	692b      	ldr	r3, [r5, #16]
 801e7ec:	f7f4 fe74 	bl	80134d8 <ucdr_init_buffer_origin>
 801e7f0:	4628      	mov	r0, r5
 801e7f2:	4622      	mov	r2, r4
 801e7f4:	4902      	ldr	r1, [pc, #8]	; (801e800 <on_full_input_buffer+0x68>)
 801e7f6:	f7f4 fe4b 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801e7fa:	2000      	movs	r0, #0
 801e7fc:	bd70      	pop	{r4, r5, r6, pc}
 801e7fe:	bf00      	nop
 801e800:	0801e799 	.word	0x0801e799

0801e804 <uxr_init_input_reliable_stream>:
 801e804:	b510      	push	{r4, lr}
 801e806:	e9c0 1200 	strd	r1, r2, [r0]
 801e80a:	2400      	movs	r4, #0
 801e80c:	9a02      	ldr	r2, [sp, #8]
 801e80e:	8103      	strh	r3, [r0, #8]
 801e810:	6102      	str	r2, [r0, #16]
 801e812:	7504      	strb	r4, [r0, #20]
 801e814:	b1c3      	cbz	r3, 801e848 <uxr_init_input_reliable_stream+0x44>
 801e816:	600c      	str	r4, [r1, #0]
 801e818:	8901      	ldrh	r1, [r0, #8]
 801e81a:	2901      	cmp	r1, #1
 801e81c:	d914      	bls.n	801e848 <uxr_init_input_reliable_stream+0x44>
 801e81e:	f04f 0c01 	mov.w	ip, #1
 801e822:	6843      	ldr	r3, [r0, #4]
 801e824:	f10c 0e01 	add.w	lr, ip, #1
 801e828:	fbbc f2f1 	udiv	r2, ip, r1
 801e82c:	fbb3 f3f1 	udiv	r3, r3, r1
 801e830:	fb01 c212 	mls	r2, r1, r2, ip
 801e834:	fa1f fc8e 	uxth.w	ip, lr
 801e838:	b292      	uxth	r2, r2
 801e83a:	fb02 f303 	mul.w	r3, r2, r3
 801e83e:	6802      	ldr	r2, [r0, #0]
 801e840:	50d4      	str	r4, [r2, r3]
 801e842:	8901      	ldrh	r1, [r0, #8]
 801e844:	4561      	cmp	r1, ip
 801e846:	d8ec      	bhi.n	801e822 <uxr_init_input_reliable_stream+0x1e>
 801e848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e84c:	60c3      	str	r3, [r0, #12]
 801e84e:	bd10      	pop	{r4, pc}

0801e850 <uxr_reset_input_reliable_stream>:
 801e850:	8901      	ldrh	r1, [r0, #8]
 801e852:	b1d9      	cbz	r1, 801e88c <uxr_reset_input_reliable_stream+0x3c>
 801e854:	b510      	push	{r4, lr}
 801e856:	f04f 0e00 	mov.w	lr, #0
 801e85a:	46f4      	mov	ip, lr
 801e85c:	4674      	mov	r4, lr
 801e85e:	6843      	ldr	r3, [r0, #4]
 801e860:	f10e 0e01 	add.w	lr, lr, #1
 801e864:	fbbc f2f1 	udiv	r2, ip, r1
 801e868:	fbb3 f3f1 	udiv	r3, r3, r1
 801e86c:	fb01 c212 	mls	r2, r1, r2, ip
 801e870:	fa1f fc8e 	uxth.w	ip, lr
 801e874:	b292      	uxth	r2, r2
 801e876:	fb02 f303 	mul.w	r3, r2, r3
 801e87a:	6802      	ldr	r2, [r0, #0]
 801e87c:	50d4      	str	r4, [r2, r3]
 801e87e:	8901      	ldrh	r1, [r0, #8]
 801e880:	4561      	cmp	r1, ip
 801e882:	d8ec      	bhi.n	801e85e <uxr_reset_input_reliable_stream+0xe>
 801e884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e888:	60c3      	str	r3, [r0, #12]
 801e88a:	bd10      	pop	{r4, pc}
 801e88c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e890:	60c3      	str	r3, [r0, #12]
 801e892:	4770      	bx	lr

0801e894 <uxr_receive_reliable_message>:
 801e894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e898:	4604      	mov	r4, r0
 801e89a:	460d      	mov	r5, r1
 801e89c:	8901      	ldrh	r1, [r0, #8]
 801e89e:	4617      	mov	r7, r2
 801e8a0:	8980      	ldrh	r0, [r0, #12]
 801e8a2:	4698      	mov	r8, r3
 801e8a4:	f000 fcb0 	bl	801f208 <uxr_seq_num_add>
 801e8a8:	4629      	mov	r1, r5
 801e8aa:	4606      	mov	r6, r0
 801e8ac:	89a0      	ldrh	r0, [r4, #12]
 801e8ae:	f000 fcb3 	bl	801f218 <uxr_seq_num_cmp>
 801e8b2:	2800      	cmp	r0, #0
 801e8b4:	db0a      	blt.n	801e8cc <uxr_receive_reliable_message+0x38>
 801e8b6:	2600      	movs	r6, #0
 801e8b8:	4629      	mov	r1, r5
 801e8ba:	89e0      	ldrh	r0, [r4, #14]
 801e8bc:	f000 fcac 	bl	801f218 <uxr_seq_num_cmp>
 801e8c0:	2800      	cmp	r0, #0
 801e8c2:	da00      	bge.n	801e8c6 <uxr_receive_reliable_message+0x32>
 801e8c4:	81e5      	strh	r5, [r4, #14]
 801e8c6:	4630      	mov	r0, r6
 801e8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8cc:	4630      	mov	r0, r6
 801e8ce:	4629      	mov	r1, r5
 801e8d0:	f000 fca2 	bl	801f218 <uxr_seq_num_cmp>
 801e8d4:	2800      	cmp	r0, #0
 801e8d6:	dbee      	blt.n	801e8b6 <uxr_receive_reliable_message+0x22>
 801e8d8:	6923      	ldr	r3, [r4, #16]
 801e8da:	4638      	mov	r0, r7
 801e8dc:	4798      	blx	r3
 801e8de:	4681      	mov	r9, r0
 801e8e0:	2101      	movs	r1, #1
 801e8e2:	89a0      	ldrh	r0, [r4, #12]
 801e8e4:	f000 fc90 	bl	801f208 <uxr_seq_num_add>
 801e8e8:	f1b9 0f00 	cmp.w	r9, #0
 801e8ec:	bf08      	it	eq
 801e8ee:	4285      	cmpeq	r5, r0
 801e8f0:	bf0c      	ite	eq
 801e8f2:	2601      	moveq	r6, #1
 801e8f4:	2600      	movne	r6, #0
 801e8f6:	d104      	bne.n	801e902 <uxr_receive_reliable_message+0x6e>
 801e8f8:	2300      	movs	r3, #0
 801e8fa:	9a08      	ldr	r2, [sp, #32]
 801e8fc:	81a0      	strh	r0, [r4, #12]
 801e8fe:	7013      	strb	r3, [r2, #0]
 801e900:	e7da      	b.n	801e8b8 <uxr_receive_reliable_message+0x24>
 801e902:	8922      	ldrh	r2, [r4, #8]
 801e904:	6863      	ldr	r3, [r4, #4]
 801e906:	fbb5 f0f2 	udiv	r0, r5, r2
 801e90a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e90e:	fb02 5010 	mls	r0, r2, r0, r5
 801e912:	b280      	uxth	r0, r0
 801e914:	fb03 f000 	mul.w	r0, r3, r0
 801e918:	6823      	ldr	r3, [r4, #0]
 801e91a:	3004      	adds	r0, #4
 801e91c:	4418      	add	r0, r3
 801e91e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d1c7      	bne.n	801e8b6 <uxr_receive_reliable_message+0x22>
 801e926:	4639      	mov	r1, r7
 801e928:	4642      	mov	r2, r8
 801e92a:	f002 fc14 	bl	8021156 <memcpy>
 801e92e:	8921      	ldrh	r1, [r4, #8]
 801e930:	6863      	ldr	r3, [r4, #4]
 801e932:	fbb5 f2f1 	udiv	r2, r5, r1
 801e936:	fbb3 f3f1 	udiv	r3, r3, r1
 801e93a:	fb01 5212 	mls	r2, r1, r2, r5
 801e93e:	b292      	uxth	r2, r2
 801e940:	fb02 f303 	mul.w	r3, r2, r3
 801e944:	6822      	ldr	r2, [r4, #0]
 801e946:	f842 8003 	str.w	r8, [r2, r3]
 801e94a:	2301      	movs	r3, #1
 801e94c:	9a08      	ldr	r2, [sp, #32]
 801e94e:	7013      	strb	r3, [r2, #0]
 801e950:	f1b9 0f00 	cmp.w	r9, #0
 801e954:	d0af      	beq.n	801e8b6 <uxr_receive_reliable_message+0x22>
 801e956:	89a6      	ldrh	r6, [r4, #12]
 801e958:	2101      	movs	r1, #1
 801e95a:	4630      	mov	r0, r6
 801e95c:	f000 fc54 	bl	801f208 <uxr_seq_num_add>
 801e960:	8921      	ldrh	r1, [r4, #8]
 801e962:	6863      	ldr	r3, [r4, #4]
 801e964:	4606      	mov	r6, r0
 801e966:	fbb0 f2f1 	udiv	r2, r0, r1
 801e96a:	fbb3 f3f1 	udiv	r3, r3, r1
 801e96e:	fb01 0212 	mls	r2, r1, r2, r0
 801e972:	6820      	ldr	r0, [r4, #0]
 801e974:	b292      	uxth	r2, r2
 801e976:	fb02 f303 	mul.w	r3, r2, r3
 801e97a:	3304      	adds	r3, #4
 801e97c:	4418      	add	r0, r3
 801e97e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d097      	beq.n	801e8b6 <uxr_receive_reliable_message+0x22>
 801e986:	6923      	ldr	r3, [r4, #16]
 801e988:	4798      	blx	r3
 801e98a:	2802      	cmp	r0, #2
 801e98c:	d002      	beq.n	801e994 <uxr_receive_reliable_message+0x100>
 801e98e:	2801      	cmp	r0, #1
 801e990:	d0e2      	beq.n	801e958 <uxr_receive_reliable_message+0xc4>
 801e992:	e790      	b.n	801e8b6 <uxr_receive_reliable_message+0x22>
 801e994:	2601      	movs	r6, #1
 801e996:	e78f      	b.n	801e8b8 <uxr_receive_reliable_message+0x24>

0801e998 <uxr_next_input_reliable_buffer_available>:
 801e998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e99c:	4604      	mov	r4, r0
 801e99e:	460f      	mov	r7, r1
 801e9a0:	8980      	ldrh	r0, [r0, #12]
 801e9a2:	2101      	movs	r1, #1
 801e9a4:	4690      	mov	r8, r2
 801e9a6:	f000 fc2f 	bl	801f208 <uxr_seq_num_add>
 801e9aa:	8922      	ldrh	r2, [r4, #8]
 801e9ac:	6866      	ldr	r6, [r4, #4]
 801e9ae:	fbb0 f3f2 	udiv	r3, r0, r2
 801e9b2:	fbb6 f6f2 	udiv	r6, r6, r2
 801e9b6:	fb02 0313 	mls	r3, r2, r3, r0
 801e9ba:	b29b      	uxth	r3, r3
 801e9bc:	fb03 f606 	mul.w	r6, r3, r6
 801e9c0:	6823      	ldr	r3, [r4, #0]
 801e9c2:	3604      	adds	r6, #4
 801e9c4:	441e      	add	r6, r3
 801e9c6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e9ca:	f1b9 0f00 	cmp.w	r9, #0
 801e9ce:	d023      	beq.n	801ea18 <uxr_next_input_reliable_buffer_available+0x80>
 801e9d0:	4605      	mov	r5, r0
 801e9d2:	6923      	ldr	r3, [r4, #16]
 801e9d4:	4630      	mov	r0, r6
 801e9d6:	4798      	blx	r3
 801e9d8:	4682      	mov	sl, r0
 801e9da:	b300      	cbz	r0, 801ea1e <uxr_next_input_reliable_buffer_available+0x86>
 801e9dc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e9e0:	2101      	movs	r1, #1
 801e9e2:	4650      	mov	r0, sl
 801e9e4:	f000 fc10 	bl	801f208 <uxr_seq_num_add>
 801e9e8:	8921      	ldrh	r1, [r4, #8]
 801e9ea:	4682      	mov	sl, r0
 801e9ec:	6863      	ldr	r3, [r4, #4]
 801e9ee:	6820      	ldr	r0, [r4, #0]
 801e9f0:	fbba f2f1 	udiv	r2, sl, r1
 801e9f4:	fbb3 f3f1 	udiv	r3, r3, r1
 801e9f8:	fb01 a212 	mls	r2, r1, r2, sl
 801e9fc:	b292      	uxth	r2, r2
 801e9fe:	fb02 f303 	mul.w	r3, r2, r3
 801ea02:	3304      	adds	r3, #4
 801ea04:	4418      	add	r0, r3
 801ea06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ea0a:	b12b      	cbz	r3, 801ea18 <uxr_next_input_reliable_buffer_available+0x80>
 801ea0c:	6923      	ldr	r3, [r4, #16]
 801ea0e:	4798      	blx	r3
 801ea10:	2802      	cmp	r0, #2
 801ea12:	d01b      	beq.n	801ea4c <uxr_next_input_reliable_buffer_available+0xb4>
 801ea14:	2801      	cmp	r0, #1
 801ea16:	d0e3      	beq.n	801e9e0 <uxr_next_input_reliable_buffer_available+0x48>
 801ea18:	2000      	movs	r0, #0
 801ea1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea1e:	464a      	mov	r2, r9
 801ea20:	4631      	mov	r1, r6
 801ea22:	4638      	mov	r0, r7
 801ea24:	f7f4 fd60 	bl	80134e8 <ucdr_init_buffer>
 801ea28:	8921      	ldrh	r1, [r4, #8]
 801ea2a:	6863      	ldr	r3, [r4, #4]
 801ea2c:	2001      	movs	r0, #1
 801ea2e:	fbb5 f2f1 	udiv	r2, r5, r1
 801ea32:	fbb3 f3f1 	udiv	r3, r3, r1
 801ea36:	fb01 5212 	mls	r2, r1, r2, r5
 801ea3a:	b292      	uxth	r2, r2
 801ea3c:	fb02 f303 	mul.w	r3, r2, r3
 801ea40:	6822      	ldr	r2, [r4, #0]
 801ea42:	f842 a003 	str.w	sl, [r2, r3]
 801ea46:	81a5      	strh	r5, [r4, #12]
 801ea48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea4c:	8920      	ldrh	r0, [r4, #8]
 801ea4e:	eb06 0108 	add.w	r1, r6, r8
 801ea52:	6863      	ldr	r3, [r4, #4]
 801ea54:	eba9 0208 	sub.w	r2, r9, r8
 801ea58:	fbb5 f6f0 	udiv	r6, r5, r0
 801ea5c:	fbb3 f3f0 	udiv	r3, r3, r0
 801ea60:	fb00 5516 	mls	r5, r0, r6, r5
 801ea64:	2000      	movs	r0, #0
 801ea66:	b2ad      	uxth	r5, r5
 801ea68:	fb03 f505 	mul.w	r5, r3, r5
 801ea6c:	6823      	ldr	r3, [r4, #0]
 801ea6e:	5158      	str	r0, [r3, r5]
 801ea70:	4638      	mov	r0, r7
 801ea72:	f7f4 fd39 	bl	80134e8 <ucdr_init_buffer>
 801ea76:	4638      	mov	r0, r7
 801ea78:	4622      	mov	r2, r4
 801ea7a:	4903      	ldr	r1, [pc, #12]	; (801ea88 <uxr_next_input_reliable_buffer_available+0xf0>)
 801ea7c:	f7f4 fd08 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801ea80:	2001      	movs	r0, #1
 801ea82:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801ea86:	e7c8      	b.n	801ea1a <uxr_next_input_reliable_buffer_available+0x82>
 801ea88:	0801e799 	.word	0x0801e799

0801ea8c <uxr_process_heartbeat>:
 801ea8c:	b538      	push	{r3, r4, r5, lr}
 801ea8e:	4611      	mov	r1, r2
 801ea90:	4604      	mov	r4, r0
 801ea92:	89c0      	ldrh	r0, [r0, #14]
 801ea94:	4615      	mov	r5, r2
 801ea96:	f000 fbbf 	bl	801f218 <uxr_seq_num_cmp>
 801ea9a:	2800      	cmp	r0, #0
 801ea9c:	bfb8      	it	lt
 801ea9e:	81e5      	strhlt	r5, [r4, #14]
 801eaa0:	bd38      	pop	{r3, r4, r5, pc}
 801eaa2:	bf00      	nop

0801eaa4 <uxr_compute_acknack>:
 801eaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eaa8:	8903      	ldrh	r3, [r0, #8]
 801eaaa:	4604      	mov	r4, r0
 801eaac:	460f      	mov	r7, r1
 801eaae:	8985      	ldrh	r5, [r0, #12]
 801eab0:	b1db      	cbz	r3, 801eaea <uxr_compute_acknack+0x46>
 801eab2:	4628      	mov	r0, r5
 801eab4:	2601      	movs	r6, #1
 801eab6:	e004      	b.n	801eac2 <uxr_compute_acknack+0x1e>
 801eab8:	4566      	cmp	r6, ip
 801eaba:	f106 0601 	add.w	r6, r6, #1
 801eabe:	d214      	bcs.n	801eaea <uxr_compute_acknack+0x46>
 801eac0:	89a0      	ldrh	r0, [r4, #12]
 801eac2:	b2b1      	uxth	r1, r6
 801eac4:	f000 fba0 	bl	801f208 <uxr_seq_num_add>
 801eac8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801eacc:	fbb0 f2fc 	udiv	r2, r0, ip
 801ead0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801ead4:	fb0c 0212 	mls	r2, ip, r2, r0
 801ead8:	fbb3 f3fc 	udiv	r3, r3, ip
 801eadc:	b292      	uxth	r2, r2
 801eade:	fb02 f303 	mul.w	r3, r2, r3
 801eae2:	58cb      	ldr	r3, [r1, r3]
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d1e7      	bne.n	801eab8 <uxr_compute_acknack+0x14>
 801eae8:	4605      	mov	r5, r0
 801eaea:	803d      	strh	r5, [r7, #0]
 801eaec:	2101      	movs	r1, #1
 801eaee:	89e6      	ldrh	r6, [r4, #14]
 801eaf0:	4628      	mov	r0, r5
 801eaf2:	f000 fb8d 	bl	801f210 <uxr_seq_num_sub>
 801eaf6:	4601      	mov	r1, r0
 801eaf8:	4630      	mov	r0, r6
 801eafa:	f000 fb89 	bl	801f210 <uxr_seq_num_sub>
 801eafe:	4606      	mov	r6, r0
 801eb00:	b328      	cbz	r0, 801eb4e <uxr_compute_acknack+0xaa>
 801eb02:	f04f 0900 	mov.w	r9, #0
 801eb06:	f04f 0801 	mov.w	r8, #1
 801eb0a:	464d      	mov	r5, r9
 801eb0c:	fa1f f189 	uxth.w	r1, r9
 801eb10:	8838      	ldrh	r0, [r7, #0]
 801eb12:	f000 fb79 	bl	801f208 <uxr_seq_num_add>
 801eb16:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801eb1a:	6861      	ldr	r1, [r4, #4]
 801eb1c:	fa08 fe09 	lsl.w	lr, r8, r9
 801eb20:	6822      	ldr	r2, [r4, #0]
 801eb22:	f109 0901 	add.w	r9, r9, #1
 801eb26:	ea4e 0e05 	orr.w	lr, lr, r5
 801eb2a:	fbb0 f3fc 	udiv	r3, r0, ip
 801eb2e:	fbb1 f1fc 	udiv	r1, r1, ip
 801eb32:	fb03 001c 	mls	r0, r3, ip, r0
 801eb36:	b283      	uxth	r3, r0
 801eb38:	fb01 f303 	mul.w	r3, r1, r3
 801eb3c:	58d3      	ldr	r3, [r2, r3]
 801eb3e:	b90b      	cbnz	r3, 801eb44 <uxr_compute_acknack+0xa0>
 801eb40:	fa1f f58e 	uxth.w	r5, lr
 801eb44:	454e      	cmp	r6, r9
 801eb46:	d1e1      	bne.n	801eb0c <uxr_compute_acknack+0x68>
 801eb48:	4628      	mov	r0, r5
 801eb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb4e:	4605      	mov	r5, r0
 801eb50:	4628      	mov	r0, r5
 801eb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb56:	bf00      	nop

0801eb58 <uxr_init_output_best_effort_stream>:
 801eb58:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801eb5c:	6001      	str	r1, [r0, #0]
 801eb5e:	7303      	strb	r3, [r0, #12]
 801eb60:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801eb64:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801eb68:	4770      	bx	lr
 801eb6a:	bf00      	nop

0801eb6c <uxr_reset_output_best_effort_stream>:
 801eb6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eb70:	7b03      	ldrb	r3, [r0, #12]
 801eb72:	81c2      	strh	r2, [r0, #14]
 801eb74:	6043      	str	r3, [r0, #4]
 801eb76:	4770      	bx	lr

0801eb78 <uxr_prepare_best_effort_buffer_to_write>:
 801eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb7a:	4604      	mov	r4, r0
 801eb7c:	b083      	sub	sp, #12
 801eb7e:	6840      	ldr	r0, [r0, #4]
 801eb80:	460d      	mov	r5, r1
 801eb82:	4616      	mov	r6, r2
 801eb84:	f7fb fa5c 	bl	801a040 <uxr_submessage_padding>
 801eb88:	6863      	ldr	r3, [r4, #4]
 801eb8a:	4418      	add	r0, r3
 801eb8c:	68a3      	ldr	r3, [r4, #8]
 801eb8e:	1942      	adds	r2, r0, r5
 801eb90:	4293      	cmp	r3, r2
 801eb92:	bf2c      	ite	cs
 801eb94:	2701      	movcs	r7, #1
 801eb96:	2700      	movcc	r7, #0
 801eb98:	d202      	bcs.n	801eba0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801eb9a:	4638      	mov	r0, r7
 801eb9c:	b003      	add	sp, #12
 801eb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eba0:	9000      	str	r0, [sp, #0]
 801eba2:	2300      	movs	r3, #0
 801eba4:	4630      	mov	r0, r6
 801eba6:	6821      	ldr	r1, [r4, #0]
 801eba8:	f7f4 fc8c 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801ebac:	6861      	ldr	r1, [r4, #4]
 801ebae:	4638      	mov	r0, r7
 801ebb0:	4429      	add	r1, r5
 801ebb2:	6061      	str	r1, [r4, #4]
 801ebb4:	b003      	add	sp, #12
 801ebb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ebb8 <uxr_prepare_best_effort_buffer_to_send>:
 801ebb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebbc:	4604      	mov	r4, r0
 801ebbe:	461d      	mov	r5, r3
 801ebc0:	6840      	ldr	r0, [r0, #4]
 801ebc2:	7b23      	ldrb	r3, [r4, #12]
 801ebc4:	4298      	cmp	r0, r3
 801ebc6:	bf8c      	ite	hi
 801ebc8:	2601      	movhi	r6, #1
 801ebca:	2600      	movls	r6, #0
 801ebcc:	d802      	bhi.n	801ebd4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ebce:	4630      	mov	r0, r6
 801ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebd4:	4688      	mov	r8, r1
 801ebd6:	89e0      	ldrh	r0, [r4, #14]
 801ebd8:	2101      	movs	r1, #1
 801ebda:	4617      	mov	r7, r2
 801ebdc:	f000 fb14 	bl	801f208 <uxr_seq_num_add>
 801ebe0:	6823      	ldr	r3, [r4, #0]
 801ebe2:	81e0      	strh	r0, [r4, #14]
 801ebe4:	8028      	strh	r0, [r5, #0]
 801ebe6:	4630      	mov	r0, r6
 801ebe8:	f8c8 3000 	str.w	r3, [r8]
 801ebec:	6863      	ldr	r3, [r4, #4]
 801ebee:	603b      	str	r3, [r7, #0]
 801ebf0:	7b23      	ldrb	r3, [r4, #12]
 801ebf2:	6063      	str	r3, [r4, #4]
 801ebf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ebf8 <on_full_output_buffer>:
 801ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebfa:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ebfe:	460c      	mov	r4, r1
 801ec00:	6803      	ldr	r3, [r0, #0]
 801ec02:	4605      	mov	r5, r0
 801ec04:	7b26      	ldrb	r6, [r4, #12]
 801ec06:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ec0a:	fbb2 f2fc 	udiv	r2, r2, ip
 801ec0e:	eba3 0e01 	sub.w	lr, r3, r1
 801ec12:	6903      	ldr	r3, [r0, #16]
 801ec14:	fbbe fef2 	udiv	lr, lr, r2
 801ec18:	f10e 0e01 	add.w	lr, lr, #1
 801ec1c:	fa1f fe8e 	uxth.w	lr, lr
 801ec20:	fbbe f7fc 	udiv	r7, lr, ip
 801ec24:	fb0c ec17 	mls	ip, ip, r7, lr
 801ec28:	fa1f fc8c 	uxth.w	ip, ip
 801ec2c:	fb02 fc0c 	mul.w	ip, r2, ip
 801ec30:	f851 200c 	ldr.w	r2, [r1, ip]
 801ec34:	44b4      	add	ip, r6
 801ec36:	1b92      	subs	r2, r2, r6
 801ec38:	f10c 0c08 	add.w	ip, ip, #8
 801ec3c:	3a04      	subs	r2, #4
 801ec3e:	4461      	add	r1, ip
 801ec40:	f7f4 fc4a 	bl	80134d8 <ucdr_init_buffer_origin>
 801ec44:	4628      	mov	r0, r5
 801ec46:	4622      	mov	r2, r4
 801ec48:	4902      	ldr	r1, [pc, #8]	; (801ec54 <on_full_output_buffer+0x5c>)
 801ec4a:	f7f4 fc21 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801ec4e:	2000      	movs	r0, #0
 801ec50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec52:	bf00      	nop
 801ec54:	0801ebf9 	.word	0x0801ebf9

0801ec58 <uxr_init_output_reliable_stream>:
 801ec58:	b530      	push	{r4, r5, lr}
 801ec5a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801ec5e:	8103      	strh	r3, [r0, #8]
 801ec60:	7304      	strb	r4, [r0, #12]
 801ec62:	e9c0 1200 	strd	r1, r2, [r0]
 801ec66:	b1e3      	cbz	r3, 801eca2 <uxr_init_output_reliable_stream+0x4a>
 801ec68:	600c      	str	r4, [r1, #0]
 801ec6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ec6e:	f1bc 0f01 	cmp.w	ip, #1
 801ec72:	d916      	bls.n	801eca2 <uxr_init_output_reliable_stream+0x4a>
 801ec74:	f04f 0e01 	mov.w	lr, #1
 801ec78:	6843      	ldr	r3, [r0, #4]
 801ec7a:	f10e 0501 	add.w	r5, lr, #1
 801ec7e:	7b04      	ldrb	r4, [r0, #12]
 801ec80:	6801      	ldr	r1, [r0, #0]
 801ec82:	fbbe f2fc 	udiv	r2, lr, ip
 801ec86:	fbb3 f3fc 	udiv	r3, r3, ip
 801ec8a:	fb0c e212 	mls	r2, ip, r2, lr
 801ec8e:	fa1f fe85 	uxth.w	lr, r5
 801ec92:	b292      	uxth	r2, r2
 801ec94:	fb02 f303 	mul.w	r3, r2, r3
 801ec98:	50cc      	str	r4, [r1, r3]
 801ec9a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ec9e:	45f4      	cmp	ip, lr
 801eca0:	d8ea      	bhi.n	801ec78 <uxr_init_output_reliable_stream+0x20>
 801eca2:	4b07      	ldr	r3, [pc, #28]	; (801ecc0 <uxr_init_output_reliable_stream+0x68>)
 801eca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eca8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ecac:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801ecb0:	f8c0 300e 	str.w	r3, [r0, #14]
 801ecb4:	2300      	movs	r3, #0
 801ecb6:	8242      	strh	r2, [r0, #18]
 801ecb8:	8403      	strh	r3, [r0, #32]
 801ecba:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801ecbe:	bd30      	pop	{r4, r5, pc}
 801ecc0:	ffff0000 	.word	0xffff0000
 801ecc4:	00000000 	.word	0x00000000

0801ecc8 <uxr_reset_output_reliable_stream>:
 801ecc8:	8901      	ldrh	r1, [r0, #8]
 801ecca:	b510      	push	{r4, lr}
 801eccc:	b1b1      	cbz	r1, 801ecfc <uxr_reset_output_reliable_stream+0x34>
 801ecce:	f04f 0e00 	mov.w	lr, #0
 801ecd2:	46f4      	mov	ip, lr
 801ecd4:	6843      	ldr	r3, [r0, #4]
 801ecd6:	f10e 0e01 	add.w	lr, lr, #1
 801ecda:	7b04      	ldrb	r4, [r0, #12]
 801ecdc:	fbbc f2f1 	udiv	r2, ip, r1
 801ece0:	fbb3 f3f1 	udiv	r3, r3, r1
 801ece4:	fb01 c212 	mls	r2, r1, r2, ip
 801ece8:	fa1f fc8e 	uxth.w	ip, lr
 801ecec:	b292      	uxth	r2, r2
 801ecee:	fb02 f303 	mul.w	r3, r2, r3
 801ecf2:	6802      	ldr	r2, [r0, #0]
 801ecf4:	50d4      	str	r4, [r2, r3]
 801ecf6:	8901      	ldrh	r1, [r0, #8]
 801ecf8:	4561      	cmp	r1, ip
 801ecfa:	d8eb      	bhi.n	801ecd4 <uxr_reset_output_reliable_stream+0xc>
 801ecfc:	4b08      	ldr	r3, [pc, #32]	; (801ed20 <uxr_reset_output_reliable_stream+0x58>)
 801ecfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed02:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801ed18 <uxr_reset_output_reliable_stream+0x50>
 801ed06:	f8c0 300e 	str.w	r3, [r0, #14]
 801ed0a:	2300      	movs	r3, #0
 801ed0c:	8242      	strh	r2, [r0, #18]
 801ed0e:	8403      	strh	r3, [r0, #32]
 801ed10:	ed80 7b06 	vstr	d7, [r0, #24]
 801ed14:	bd10      	pop	{r4, pc}
 801ed16:	bf00      	nop
 801ed18:	ffffffff 	.word	0xffffffff
 801ed1c:	7fffffff 	.word	0x7fffffff
 801ed20:	ffff0000 	.word	0xffff0000

0801ed24 <uxr_prepare_reliable_buffer_to_write>:
 801ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed28:	4604      	mov	r4, r0
 801ed2a:	b091      	sub	sp, #68	; 0x44
 801ed2c:	8900      	ldrh	r0, [r0, #8]
 801ed2e:	468b      	mov	fp, r1
 801ed30:	89e6      	ldrh	r6, [r4, #14]
 801ed32:	9204      	str	r2, [sp, #16]
 801ed34:	6865      	ldr	r5, [r4, #4]
 801ed36:	6823      	ldr	r3, [r4, #0]
 801ed38:	f894 900c 	ldrb.w	r9, [r4, #12]
 801ed3c:	fbb6 f2f0 	udiv	r2, r6, r0
 801ed40:	fbb5 f5f0 	udiv	r5, r5, r0
 801ed44:	fb00 6212 	mls	r2, r0, r2, r6
 801ed48:	1f2f      	subs	r7, r5, #4
 801ed4a:	b292      	uxth	r2, r2
 801ed4c:	fb05 3202 	mla	r2, r5, r2, r3
 801ed50:	1d11      	adds	r1, r2, #4
 801ed52:	f8d2 8000 	ldr.w	r8, [r2]
 801ed56:	9103      	str	r1, [sp, #12]
 801ed58:	2800      	cmp	r0, #0
 801ed5a:	f000 814a 	beq.w	801eff2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801ed5e:	f04f 0c00 	mov.w	ip, #0
 801ed62:	46e2      	mov	sl, ip
 801ed64:	4661      	mov	r1, ip
 801ed66:	f10c 0c01 	add.w	ip, ip, #1
 801ed6a:	fbb1 f2f0 	udiv	r2, r1, r0
 801ed6e:	fb00 1212 	mls	r2, r0, r2, r1
 801ed72:	fa1f f18c 	uxth.w	r1, ip
 801ed76:	b292      	uxth	r2, r2
 801ed78:	fb05 f202 	mul.w	r2, r5, r2
 801ed7c:	589a      	ldr	r2, [r3, r2]
 801ed7e:	454a      	cmp	r2, r9
 801ed80:	d103      	bne.n	801ed8a <uxr_prepare_reliable_buffer_to_write+0x66>
 801ed82:	f10a 0a01 	add.w	sl, sl, #1
 801ed86:	fa1f fa8a 	uxth.w	sl, sl
 801ed8a:	4281      	cmp	r1, r0
 801ed8c:	d3eb      	bcc.n	801ed66 <uxr_prepare_reliable_buffer_to_write+0x42>
 801ed8e:	4640      	mov	r0, r8
 801ed90:	2104      	movs	r1, #4
 801ed92:	f8cd a014 	str.w	sl, [sp, #20]
 801ed96:	f7f4 fbab 	bl	80134f0 <ucdr_alignment>
 801ed9a:	4480      	add	r8, r0
 801ed9c:	eb08 020b 	add.w	r2, r8, fp
 801eda0:	42ba      	cmp	r2, r7
 801eda2:	f240 80ca 	bls.w	801ef3a <uxr_prepare_reliable_buffer_to_write+0x216>
 801eda6:	7b22      	ldrb	r2, [r4, #12]
 801eda8:	445a      	add	r2, fp
 801edaa:	42ba      	cmp	r2, r7
 801edac:	f240 80b2 	bls.w	801ef14 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801edb0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801edb4:	b2bb      	uxth	r3, r7
 801edb6:	eba2 0209 	sub.w	r2, r2, r9
 801edba:	441a      	add	r2, r3
 801edbc:	b292      	uxth	r2, r2
 801edbe:	fb0a f902 	mul.w	r9, sl, r2
 801edc2:	9205      	str	r2, [sp, #20]
 801edc4:	45d9      	cmp	r9, fp
 801edc6:	9206      	str	r2, [sp, #24]
 801edc8:	f0c0 80b3 	bcc.w	801ef32 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801edcc:	f108 0204 	add.w	r2, r8, #4
 801edd0:	42ba      	cmp	r2, r7
 801edd2:	f080 80da 	bcs.w	801ef8a <uxr_prepare_reliable_buffer_to_write+0x266>
 801edd6:	f1a3 0904 	sub.w	r9, r3, #4
 801edda:	9b05      	ldr	r3, [sp, #20]
 801eddc:	eba9 0908 	sub.w	r9, r9, r8
 801ede0:	fa1f f989 	uxth.w	r9, r9
 801ede4:	ebab 0b09 	sub.w	fp, fp, r9
 801ede8:	fbbb f2f3 	udiv	r2, fp, r3
 801edec:	fb03 b312 	mls	r3, r3, r2, fp
 801edf0:	2b00      	cmp	r3, #0
 801edf2:	f040 80c4 	bne.w	801ef7e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801edf6:	b293      	uxth	r3, r2
 801edf8:	4553      	cmp	r3, sl
 801edfa:	f200 809a 	bhi.w	801ef32 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	f000 80f9 	beq.w	801eff6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801ee04:	f8cd 801c 	str.w	r8, [sp, #28]
 801ee08:	f04f 0a00 	mov.w	sl, #0
 801ee0c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ee10:	f10d 0b20 	add.w	fp, sp, #32
 801ee14:	9505      	str	r5, [sp, #20]
 801ee16:	461d      	mov	r5, r3
 801ee18:	e000      	b.n	801ee1c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801ee1a:	46c1      	mov	r9, r8
 801ee1c:	8922      	ldrh	r2, [r4, #8]
 801ee1e:	4658      	mov	r0, fp
 801ee20:	6863      	ldr	r3, [r4, #4]
 801ee22:	f10a 0a01 	add.w	sl, sl, #1
 801ee26:	fbb6 f1f2 	udiv	r1, r6, r2
 801ee2a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ee2e:	fb02 6111 	mls	r1, r2, r1, r6
 801ee32:	463a      	mov	r2, r7
 801ee34:	b289      	uxth	r1, r1
 801ee36:	fb03 f101 	mul.w	r1, r3, r1
 801ee3a:	6823      	ldr	r3, [r4, #0]
 801ee3c:	3104      	adds	r1, #4
 801ee3e:	4419      	add	r1, r3
 801ee40:	2300      	movs	r3, #0
 801ee42:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801ee46:	f8cd c000 	str.w	ip, [sp]
 801ee4a:	f7f4 fb3b 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801ee4e:	464a      	mov	r2, r9
 801ee50:	2300      	movs	r3, #0
 801ee52:	210d      	movs	r1, #13
 801ee54:	4658      	mov	r0, fp
 801ee56:	f7fb f8b3 	bl	8019fc0 <uxr_buffer_submessage_header>
 801ee5a:	8921      	ldrh	r1, [r4, #8]
 801ee5c:	6863      	ldr	r3, [r4, #4]
 801ee5e:	4630      	mov	r0, r6
 801ee60:	fbb6 f2f1 	udiv	r2, r6, r1
 801ee64:	fbb3 f3f1 	udiv	r3, r3, r1
 801ee68:	fb01 6212 	mls	r2, r1, r2, r6
 801ee6c:	2101      	movs	r1, #1
 801ee6e:	b292      	uxth	r2, r2
 801ee70:	fb02 f303 	mul.w	r3, r2, r3
 801ee74:	6822      	ldr	r2, [r4, #0]
 801ee76:	50d7      	str	r7, [r2, r3]
 801ee78:	f000 f9c6 	bl	801f208 <uxr_seq_num_add>
 801ee7c:	4606      	mov	r6, r0
 801ee7e:	fa1f f38a 	uxth.w	r3, sl
 801ee82:	429d      	cmp	r5, r3
 801ee84:	d8c9      	bhi.n	801ee1a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801ee86:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ee8a:	9d05      	ldr	r5, [sp, #20]
 801ee8c:	8920      	ldrh	r0, [r4, #8]
 801ee8e:	463a      	mov	r2, r7
 801ee90:	6863      	ldr	r3, [r4, #4]
 801ee92:	fbb6 f1f0 	udiv	r1, r6, r0
 801ee96:	fbb3 f3f0 	udiv	r3, r3, r0
 801ee9a:	fb00 6111 	mls	r1, r0, r1, r6
 801ee9e:	4658      	mov	r0, fp
 801eea0:	b289      	uxth	r1, r1
 801eea2:	fb01 f303 	mul.w	r3, r1, r3
 801eea6:	6821      	ldr	r1, [r4, #0]
 801eea8:	3304      	adds	r3, #4
 801eeaa:	4419      	add	r1, r3
 801eeac:	2300      	movs	r3, #0
 801eeae:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801eeb2:	9700      	str	r7, [sp, #0]
 801eeb4:	f7f4 fb06 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801eeb8:	9f06      	ldr	r7, [sp, #24]
 801eeba:	4658      	mov	r0, fp
 801eebc:	2302      	movs	r3, #2
 801eebe:	b2ba      	uxth	r2, r7
 801eec0:	210d      	movs	r1, #13
 801eec2:	f7fb f87d 	bl	8019fc0 <uxr_buffer_submessage_header>
 801eec6:	f108 0104 	add.w	r1, r8, #4
 801eeca:	9b03      	ldr	r3, [sp, #12]
 801eecc:	f1a5 0208 	sub.w	r2, r5, #8
 801eed0:	8925      	ldrh	r5, [r4, #8]
 801eed2:	440b      	add	r3, r1
 801eed4:	eba2 0208 	sub.w	r2, r2, r8
 801eed8:	fbb6 f0f5 	udiv	r0, r6, r5
 801eedc:	4619      	mov	r1, r3
 801eede:	6863      	ldr	r3, [r4, #4]
 801eee0:	fb05 6010 	mls	r0, r5, r0, r6
 801eee4:	fbb3 f3f5 	udiv	r3, r3, r5
 801eee8:	b280      	uxth	r0, r0
 801eeea:	6825      	ldr	r5, [r4, #0]
 801eeec:	fb00 f303 	mul.w	r3, r0, r3
 801eef0:	7b20      	ldrb	r0, [r4, #12]
 801eef2:	3004      	adds	r0, #4
 801eef4:	4438      	add	r0, r7
 801eef6:	50e8      	str	r0, [r5, r3]
 801eef8:	9d04      	ldr	r5, [sp, #16]
 801eefa:	4628      	mov	r0, r5
 801eefc:	f7f4 faf4 	bl	80134e8 <ucdr_init_buffer>
 801ef00:	4628      	mov	r0, r5
 801ef02:	4622      	mov	r2, r4
 801ef04:	493d      	ldr	r1, [pc, #244]	; (801effc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ef06:	f7f4 fac3 	bl	8013490 <ucdr_set_on_full_buffer_callback>
 801ef0a:	2001      	movs	r0, #1
 801ef0c:	81e6      	strh	r6, [r4, #14]
 801ef0e:	b011      	add	sp, #68	; 0x44
 801ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef14:	2101      	movs	r1, #1
 801ef16:	89e0      	ldrh	r0, [r4, #14]
 801ef18:	f000 f976 	bl	801f208 <uxr_seq_num_add>
 801ef1c:	4605      	mov	r5, r0
 801ef1e:	8921      	ldrh	r1, [r4, #8]
 801ef20:	8a60      	ldrh	r0, [r4, #18]
 801ef22:	f000 f971 	bl	801f208 <uxr_seq_num_add>
 801ef26:	4601      	mov	r1, r0
 801ef28:	4628      	mov	r0, r5
 801ef2a:	f000 f975 	bl	801f218 <uxr_seq_num_cmp>
 801ef2e:	2800      	cmp	r0, #0
 801ef30:	dd44      	ble.n	801efbc <uxr_prepare_reliable_buffer_to_write+0x298>
 801ef32:	2000      	movs	r0, #0
 801ef34:	b011      	add	sp, #68	; 0x44
 801ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef3a:	8921      	ldrh	r1, [r4, #8]
 801ef3c:	8a60      	ldrh	r0, [r4, #18]
 801ef3e:	9205      	str	r2, [sp, #20]
 801ef40:	f000 f962 	bl	801f208 <uxr_seq_num_add>
 801ef44:	4601      	mov	r1, r0
 801ef46:	4630      	mov	r0, r6
 801ef48:	f000 f966 	bl	801f218 <uxr_seq_num_cmp>
 801ef4c:	2800      	cmp	r0, #0
 801ef4e:	9a05      	ldr	r2, [sp, #20]
 801ef50:	dcef      	bgt.n	801ef32 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ef52:	8925      	ldrh	r5, [r4, #8]
 801ef54:	e9d4 7300 	ldrd	r7, r3, [r4]
 801ef58:	fbb6 f4f5 	udiv	r4, r6, r5
 801ef5c:	fbb3 f3f5 	udiv	r3, r3, r5
 801ef60:	fb05 6414 	mls	r4, r5, r4, r6
 801ef64:	b2a4      	uxth	r4, r4
 801ef66:	fb04 f303 	mul.w	r3, r4, r3
 801ef6a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801ef6e:	50fa      	str	r2, [r7, r3]
 801ef70:	2300      	movs	r3, #0
 801ef72:	f8cd 8000 	str.w	r8, [sp]
 801ef76:	f7f4 faa5 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801ef7a:	2001      	movs	r0, #1
 801ef7c:	e7da      	b.n	801ef34 <uxr_prepare_reliable_buffer_to_write+0x210>
 801ef7e:	3201      	adds	r2, #1
 801ef80:	9306      	str	r3, [sp, #24]
 801ef82:	b293      	uxth	r3, r2
 801ef84:	4553      	cmp	r3, sl
 801ef86:	d8d4      	bhi.n	801ef32 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ef88:	e739      	b.n	801edfe <uxr_prepare_reliable_buffer_to_write+0xda>
 801ef8a:	4630      	mov	r0, r6
 801ef8c:	2101      	movs	r1, #1
 801ef8e:	9307      	str	r3, [sp, #28]
 801ef90:	f000 f93a 	bl	801f208 <uxr_seq_num_add>
 801ef94:	4606      	mov	r6, r0
 801ef96:	8920      	ldrh	r0, [r4, #8]
 801ef98:	6862      	ldr	r2, [r4, #4]
 801ef9a:	fbb6 f1f0 	udiv	r1, r6, r0
 801ef9e:	fbb2 f2f0 	udiv	r2, r2, r0
 801efa2:	fb00 6111 	mls	r1, r0, r1, r6
 801efa6:	b289      	uxth	r1, r1
 801efa8:	fb01 f202 	mul.w	r2, r1, r2
 801efac:	6821      	ldr	r1, [r4, #0]
 801efae:	3204      	adds	r2, #4
 801efb0:	188b      	adds	r3, r1, r2
 801efb2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801efb6:	9303      	str	r3, [sp, #12]
 801efb8:	9b07      	ldr	r3, [sp, #28]
 801efba:	e70c      	b.n	801edd6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801efbc:	8921      	ldrh	r1, [r4, #8]
 801efbe:	6863      	ldr	r3, [r4, #4]
 801efc0:	9804      	ldr	r0, [sp, #16]
 801efc2:	fbb5 f2f1 	udiv	r2, r5, r1
 801efc6:	fbb3 f3f1 	udiv	r3, r3, r1
 801efca:	fb01 5212 	mls	r2, r1, r2, r5
 801efce:	6821      	ldr	r1, [r4, #0]
 801efd0:	b292      	uxth	r2, r2
 801efd2:	fb02 f303 	mul.w	r3, r2, r3
 801efd6:	7b22      	ldrb	r2, [r4, #12]
 801efd8:	3304      	adds	r3, #4
 801efda:	445a      	add	r2, fp
 801efdc:	4419      	add	r1, r3
 801efde:	f841 2c04 	str.w	r2, [r1, #-4]
 801efe2:	7b23      	ldrb	r3, [r4, #12]
 801efe4:	9300      	str	r3, [sp, #0]
 801efe6:	2300      	movs	r3, #0
 801efe8:	f7f4 fa6c 	bl	80134c4 <ucdr_init_buffer_origin_offset>
 801efec:	2001      	movs	r0, #1
 801efee:	81e5      	strh	r5, [r4, #14]
 801eff0:	e7a0      	b.n	801ef34 <uxr_prepare_reliable_buffer_to_write+0x210>
 801eff2:	4682      	mov	sl, r0
 801eff4:	e6cb      	b.n	801ed8e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801eff6:	f10d 0b20 	add.w	fp, sp, #32
 801effa:	e747      	b.n	801ee8c <uxr_prepare_reliable_buffer_to_write+0x168>
 801effc:	0801ebf9 	.word	0x0801ebf9

0801f000 <uxr_prepare_next_reliable_buffer_to_send>:
 801f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f002:	4604      	mov	r4, r0
 801f004:	461d      	mov	r5, r3
 801f006:	460f      	mov	r7, r1
 801f008:	8a00      	ldrh	r0, [r0, #16]
 801f00a:	2101      	movs	r1, #1
 801f00c:	4616      	mov	r6, r2
 801f00e:	f000 f8fb 	bl	801f208 <uxr_seq_num_add>
 801f012:	8028      	strh	r0, [r5, #0]
 801f014:	8922      	ldrh	r2, [r4, #8]
 801f016:	6863      	ldr	r3, [r4, #4]
 801f018:	fbb0 f1f2 	udiv	r1, r0, r2
 801f01c:	fbb3 f3f2 	udiv	r3, r3, r2
 801f020:	fb02 0c11 	mls	ip, r2, r1, r0
 801f024:	89e1      	ldrh	r1, [r4, #14]
 801f026:	fa1f fc8c 	uxth.w	ip, ip
 801f02a:	fb0c fc03 	mul.w	ip, ip, r3
 801f02e:	6823      	ldr	r3, [r4, #0]
 801f030:	f10c 0c04 	add.w	ip, ip, #4
 801f034:	4463      	add	r3, ip
 801f036:	603b      	str	r3, [r7, #0]
 801f038:	6823      	ldr	r3, [r4, #0]
 801f03a:	449c      	add	ip, r3
 801f03c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801f040:	6033      	str	r3, [r6, #0]
 801f042:	f000 f8e9 	bl	801f218 <uxr_seq_num_cmp>
 801f046:	2800      	cmp	r0, #0
 801f048:	dd01      	ble.n	801f04e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801f04a:	2000      	movs	r0, #0
 801f04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f04e:	7b23      	ldrb	r3, [r4, #12]
 801f050:	6832      	ldr	r2, [r6, #0]
 801f052:	429a      	cmp	r2, r3
 801f054:	d9f9      	bls.n	801f04a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801f056:	8a61      	ldrh	r1, [r4, #18]
 801f058:	8a20      	ldrh	r0, [r4, #16]
 801f05a:	f000 f8d9 	bl	801f210 <uxr_seq_num_sub>
 801f05e:	8923      	ldrh	r3, [r4, #8]
 801f060:	4283      	cmp	r3, r0
 801f062:	d0f2      	beq.n	801f04a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801f064:	8828      	ldrh	r0, [r5, #0]
 801f066:	89e3      	ldrh	r3, [r4, #14]
 801f068:	8220      	strh	r0, [r4, #16]
 801f06a:	4298      	cmp	r0, r3
 801f06c:	d001      	beq.n	801f072 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801f06e:	2001      	movs	r0, #1
 801f070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f072:	2101      	movs	r1, #1
 801f074:	f000 f8c8 	bl	801f208 <uxr_seq_num_add>
 801f078:	4603      	mov	r3, r0
 801f07a:	2001      	movs	r0, #1
 801f07c:	81e3      	strh	r3, [r4, #14]
 801f07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f080 <uxr_update_output_stream_heartbeat_timestamp>:
 801f080:	b570      	push	{r4, r5, r6, lr}
 801f082:	8a01      	ldrh	r1, [r0, #16]
 801f084:	4604      	mov	r4, r0
 801f086:	8a40      	ldrh	r0, [r0, #18]
 801f088:	4615      	mov	r5, r2
 801f08a:	461e      	mov	r6, r3
 801f08c:	f000 f8c4 	bl	801f218 <uxr_seq_num_cmp>
 801f090:	2800      	cmp	r0, #0
 801f092:	db07      	blt.n	801f0a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801f094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f098:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801f09c:	2000      	movs	r0, #0
 801f09e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801f0a2:	bd70      	pop	{r4, r5, r6, pc}
 801f0a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801f0a8:	b940      	cbnz	r0, 801f0bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801f0aa:	2301      	movs	r3, #1
 801f0ac:	f884 3020 	strb.w	r3, [r4, #32]
 801f0b0:	3564      	adds	r5, #100	; 0x64
 801f0b2:	f146 0600 	adc.w	r6, r6, #0
 801f0b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801f0ba:	bd70      	pop	{r4, r5, r6, pc}
 801f0bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801f0c0:	4295      	cmp	r5, r2
 801f0c2:	eb76 0303 	sbcs.w	r3, r6, r3
 801f0c6:	db04      	blt.n	801f0d2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801f0c8:	1c43      	adds	r3, r0, #1
 801f0ca:	2001      	movs	r0, #1
 801f0cc:	f884 3020 	strb.w	r3, [r4, #32]
 801f0d0:	e7ee      	b.n	801f0b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801f0d2:	2000      	movs	r0, #0
 801f0d4:	e7ec      	b.n	801f0b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801f0d6:	bf00      	nop

0801f0d8 <uxr_begin_output_nack_buffer_it>:
 801f0d8:	8a40      	ldrh	r0, [r0, #18]
 801f0da:	4770      	bx	lr

0801f0dc <uxr_next_reliable_nack_buffer_to_send>:
 801f0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0e0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801f0e4:	b197      	cbz	r7, 801f10c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801f0e6:	4680      	mov	r8, r0
 801f0e8:	460d      	mov	r5, r1
 801f0ea:	4616      	mov	r6, r2
 801f0ec:	461c      	mov	r4, r3
 801f0ee:	8818      	ldrh	r0, [r3, #0]
 801f0f0:	2101      	movs	r1, #1
 801f0f2:	f000 f889 	bl	801f208 <uxr_seq_num_add>
 801f0f6:	8020      	strh	r0, [r4, #0]
 801f0f8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801f0fc:	f000 f88c 	bl	801f218 <uxr_seq_num_cmp>
 801f100:	2800      	cmp	r0, #0
 801f102:	dd06      	ble.n	801f112 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801f104:	2300      	movs	r3, #0
 801f106:	461f      	mov	r7, r3
 801f108:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801f10c:	4638      	mov	r0, r7
 801f10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f112:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801f116:	8820      	ldrh	r0, [r4, #0]
 801f118:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f11c:	fbb0 f3f2 	udiv	r3, r0, r2
 801f120:	fbb1 fcf2 	udiv	ip, r1, r2
 801f124:	fb02 0313 	mls	r3, r2, r3, r0
 801f128:	b29b      	uxth	r3, r3
 801f12a:	fb03 fc0c 	mul.w	ip, r3, ip
 801f12e:	f8d8 3000 	ldr.w	r3, [r8]
 801f132:	f10c 0c04 	add.w	ip, ip, #4
 801f136:	4463      	add	r3, ip
 801f138:	602b      	str	r3, [r5, #0]
 801f13a:	f8d8 3000 	ldr.w	r3, [r8]
 801f13e:	4463      	add	r3, ip
 801f140:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801f144:	6033      	str	r3, [r6, #0]
 801f146:	f898 200c 	ldrb.w	r2, [r8, #12]
 801f14a:	429a      	cmp	r2, r3
 801f14c:	d0d0      	beq.n	801f0f0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801f14e:	e7dd      	b.n	801f10c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801f150 <uxr_process_acknack>:
 801f150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f152:	4604      	mov	r4, r0
 801f154:	460e      	mov	r6, r1
 801f156:	4610      	mov	r0, r2
 801f158:	2101      	movs	r1, #1
 801f15a:	f000 f859 	bl	801f210 <uxr_seq_num_sub>
 801f15e:	8a61      	ldrh	r1, [r4, #18]
 801f160:	f000 f856 	bl	801f210 <uxr_seq_num_sub>
 801f164:	b1c8      	cbz	r0, 801f19a <uxr_process_acknack+0x4a>
 801f166:	4605      	mov	r5, r0
 801f168:	2700      	movs	r7, #0
 801f16a:	2101      	movs	r1, #1
 801f16c:	8a60      	ldrh	r0, [r4, #18]
 801f16e:	f000 f84b 	bl	801f208 <uxr_seq_num_add>
 801f172:	8923      	ldrh	r3, [r4, #8]
 801f174:	6862      	ldr	r2, [r4, #4]
 801f176:	3701      	adds	r7, #1
 801f178:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801f17c:	6821      	ldr	r1, [r4, #0]
 801f17e:	42bd      	cmp	r5, r7
 801f180:	8260      	strh	r0, [r4, #18]
 801f182:	fbb0 fef3 	udiv	lr, r0, r3
 801f186:	fbb2 f2f3 	udiv	r2, r2, r3
 801f18a:	fb03 031e 	mls	r3, r3, lr, r0
 801f18e:	b29b      	uxth	r3, r3
 801f190:	fb02 f303 	mul.w	r3, r2, r3
 801f194:	f841 c003 	str.w	ip, [r1, r3]
 801f198:	d1e7      	bne.n	801f16a <uxr_process_acknack+0x1a>
 801f19a:	3e00      	subs	r6, #0
 801f19c:	f04f 0300 	mov.w	r3, #0
 801f1a0:	bf18      	it	ne
 801f1a2:	2601      	movne	r6, #1
 801f1a4:	f884 3020 	strb.w	r3, [r4, #32]
 801f1a8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801f1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1ae:	bf00      	nop

0801f1b0 <uxr_is_output_up_to_date>:
 801f1b0:	8a01      	ldrh	r1, [r0, #16]
 801f1b2:	8a40      	ldrh	r0, [r0, #18]
 801f1b4:	b508      	push	{r3, lr}
 801f1b6:	f000 f82f 	bl	801f218 <uxr_seq_num_cmp>
 801f1ba:	fab0 f080 	clz	r0, r0
 801f1be:	0940      	lsrs	r0, r0, #5
 801f1c0:	bd08      	pop	{r3, pc}
 801f1c2:	bf00      	nop

0801f1c4 <get_available_free_slots>:
 801f1c4:	8901      	ldrh	r1, [r0, #8]
 801f1c6:	b1e1      	cbz	r1, 801f202 <get_available_free_slots+0x3e>
 801f1c8:	6843      	ldr	r3, [r0, #4]
 801f1ca:	f04f 0c00 	mov.w	ip, #0
 801f1ce:	b530      	push	{r4, r5, lr}
 801f1d0:	fbb3 fef1 	udiv	lr, r3, r1
 801f1d4:	6805      	ldr	r5, [r0, #0]
 801f1d6:	4662      	mov	r2, ip
 801f1d8:	7b04      	ldrb	r4, [r0, #12]
 801f1da:	4660      	mov	r0, ip
 801f1dc:	f10c 0c01 	add.w	ip, ip, #1
 801f1e0:	fbb2 f3f1 	udiv	r3, r2, r1
 801f1e4:	fb01 2313 	mls	r3, r1, r3, r2
 801f1e8:	fa1f f28c 	uxth.w	r2, ip
 801f1ec:	b29b      	uxth	r3, r3
 801f1ee:	fb0e f303 	mul.w	r3, lr, r3
 801f1f2:	58eb      	ldr	r3, [r5, r3]
 801f1f4:	429c      	cmp	r4, r3
 801f1f6:	d101      	bne.n	801f1fc <get_available_free_slots+0x38>
 801f1f8:	3001      	adds	r0, #1
 801f1fa:	b280      	uxth	r0, r0
 801f1fc:	428a      	cmp	r2, r1
 801f1fe:	d3ed      	bcc.n	801f1dc <get_available_free_slots+0x18>
 801f200:	bd30      	pop	{r4, r5, pc}
 801f202:	4608      	mov	r0, r1
 801f204:	4770      	bx	lr
 801f206:	bf00      	nop

0801f208 <uxr_seq_num_add>:
 801f208:	4408      	add	r0, r1
 801f20a:	b280      	uxth	r0, r0
 801f20c:	4770      	bx	lr
 801f20e:	bf00      	nop

0801f210 <uxr_seq_num_sub>:
 801f210:	1a40      	subs	r0, r0, r1
 801f212:	b280      	uxth	r0, r0
 801f214:	4770      	bx	lr
 801f216:	bf00      	nop

0801f218 <uxr_seq_num_cmp>:
 801f218:	4288      	cmp	r0, r1
 801f21a:	d011      	beq.n	801f240 <uxr_seq_num_cmp+0x28>
 801f21c:	d309      	bcc.n	801f232 <uxr_seq_num_cmp+0x1a>
 801f21e:	4288      	cmp	r0, r1
 801f220:	d910      	bls.n	801f244 <uxr_seq_num_cmp+0x2c>
 801f222:	1a40      	subs	r0, r0, r1
 801f224:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801f228:	bfd4      	ite	le
 801f22a:	2001      	movle	r0, #1
 801f22c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801f230:	4770      	bx	lr
 801f232:	1a0b      	subs	r3, r1, r0
 801f234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f238:	daf1      	bge.n	801f21e <uxr_seq_num_cmp+0x6>
 801f23a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f23e:	4770      	bx	lr
 801f240:	2000      	movs	r0, #0
 801f242:	4770      	bx	lr
 801f244:	2001      	movs	r0, #1
 801f246:	4770      	bx	lr

0801f248 <rcl_get_default_domain_id>:
 801f248:	b530      	push	{r4, r5, lr}
 801f24a:	2300      	movs	r3, #0
 801f24c:	b083      	sub	sp, #12
 801f24e:	9300      	str	r3, [sp, #0]
 801f250:	b1d0      	cbz	r0, 801f288 <rcl_get_default_domain_id+0x40>
 801f252:	4604      	mov	r4, r0
 801f254:	4669      	mov	r1, sp
 801f256:	4815      	ldr	r0, [pc, #84]	; (801f2ac <rcl_get_default_domain_id+0x64>)
 801f258:	f7f6 f82a 	bl	80152b0 <rcutils_get_env>
 801f25c:	4602      	mov	r2, r0
 801f25e:	b110      	cbz	r0, 801f266 <rcl_get_default_domain_id+0x1e>
 801f260:	2001      	movs	r0, #1
 801f262:	b003      	add	sp, #12
 801f264:	bd30      	pop	{r4, r5, pc}
 801f266:	9b00      	ldr	r3, [sp, #0]
 801f268:	b18b      	cbz	r3, 801f28e <rcl_get_default_domain_id+0x46>
 801f26a:	7818      	ldrb	r0, [r3, #0]
 801f26c:	2800      	cmp	r0, #0
 801f26e:	d0f8      	beq.n	801f262 <rcl_get_default_domain_id+0x1a>
 801f270:	a901      	add	r1, sp, #4
 801f272:	4618      	mov	r0, r3
 801f274:	9201      	str	r2, [sp, #4]
 801f276:	f000 fc8f 	bl	801fb98 <strtoul>
 801f27a:	4605      	mov	r5, r0
 801f27c:	b150      	cbz	r0, 801f294 <rcl_get_default_domain_id+0x4c>
 801f27e:	1c43      	adds	r3, r0, #1
 801f280:	d00d      	beq.n	801f29e <rcl_get_default_domain_id+0x56>
 801f282:	2000      	movs	r0, #0
 801f284:	6025      	str	r5, [r4, #0]
 801f286:	e7ec      	b.n	801f262 <rcl_get_default_domain_id+0x1a>
 801f288:	200b      	movs	r0, #11
 801f28a:	b003      	add	sp, #12
 801f28c:	bd30      	pop	{r4, r5, pc}
 801f28e:	4618      	mov	r0, r3
 801f290:	b003      	add	sp, #12
 801f292:	bd30      	pop	{r4, r5, pc}
 801f294:	9b01      	ldr	r3, [sp, #4]
 801f296:	781b      	ldrb	r3, [r3, #0]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d0f2      	beq.n	801f282 <rcl_get_default_domain_id+0x3a>
 801f29c:	e7e0      	b.n	801f260 <rcl_get_default_domain_id+0x18>
 801f29e:	f001 ff25 	bl	80210ec <__errno>
 801f2a2:	6803      	ldr	r3, [r0, #0]
 801f2a4:	2b22      	cmp	r3, #34	; 0x22
 801f2a6:	d1ec      	bne.n	801f282 <rcl_get_default_domain_id+0x3a>
 801f2a8:	e7da      	b.n	801f260 <rcl_get_default_domain_id+0x18>
 801f2aa:	bf00      	nop
 801f2ac:	08025cc8 	.word	0x08025cc8

0801f2b0 <rcl_expand_topic_name>:
 801f2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2b4:	b08d      	sub	sp, #52	; 0x34
 801f2b6:	4698      	mov	r8, r3
 801f2b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f2ba:	9207      	str	r2, [sp, #28]
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	bf18      	it	ne
 801f2c0:	f1b8 0f00 	cmpne.w	r8, #0
 801f2c4:	bf0c      	ite	eq
 801f2c6:	2301      	moveq	r3, #1
 801f2c8:	2300      	movne	r3, #0
 801f2ca:	2a00      	cmp	r2, #0
 801f2cc:	bf08      	it	eq
 801f2ce:	f043 0301 	orreq.w	r3, r3, #1
 801f2d2:	2900      	cmp	r1, #0
 801f2d4:	bf08      	it	eq
 801f2d6:	f043 0301 	orreq.w	r3, r3, #1
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	d13d      	bne.n	801f35a <rcl_expand_topic_name+0xaa>
 801f2de:	fab0 f280 	clz	r2, r0
 801f2e2:	4604      	mov	r4, r0
 801f2e4:	0952      	lsrs	r2, r2, #5
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	d037      	beq.n	801f35a <rcl_expand_topic_name+0xaa>
 801f2ea:	460f      	mov	r7, r1
 801f2ec:	a90b      	add	r1, sp, #44	; 0x2c
 801f2ee:	f000 f945 	bl	801f57c <rcl_validate_topic_name>
 801f2f2:	4605      	mov	r5, r0
 801f2f4:	bb68      	cbnz	r0, 801f352 <rcl_expand_topic_name+0xa2>
 801f2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d137      	bne.n	801f36c <rcl_expand_topic_name+0xbc>
 801f2fc:	4602      	mov	r2, r0
 801f2fe:	a90b      	add	r1, sp, #44	; 0x2c
 801f300:	4638      	mov	r0, r7
 801f302:	f7f6 fa97 	bl	8015834 <rmw_validate_node_name>
 801f306:	bb68      	cbnz	r0, 801f364 <rcl_expand_topic_name+0xb4>
 801f308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d133      	bne.n	801f376 <rcl_expand_topic_name+0xc6>
 801f30e:	462a      	mov	r2, r5
 801f310:	a90b      	add	r1, sp, #44	; 0x2c
 801f312:	9807      	ldr	r0, [sp, #28]
 801f314:	f7f6 fa70 	bl	80157f8 <rmw_validate_namespace>
 801f318:	bb20      	cbnz	r0, 801f364 <rcl_expand_topic_name+0xb4>
 801f31a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f31c:	2d00      	cmp	r5, #0
 801f31e:	f040 80a2 	bne.w	801f466 <rcl_expand_topic_name+0x1b6>
 801f322:	217b      	movs	r1, #123	; 0x7b
 801f324:	4620      	mov	r0, r4
 801f326:	f001 fe51 	bl	8020fcc <strchr>
 801f32a:	7823      	ldrb	r3, [r4, #0]
 801f32c:	4681      	mov	r9, r0
 801f32e:	bb20      	cbnz	r0, 801f37a <rcl_expand_topic_name+0xca>
 801f330:	2b2f      	cmp	r3, #47	; 0x2f
 801f332:	d122      	bne.n	801f37a <rcl_expand_topic_name+0xca>
 801f334:	ab19      	add	r3, sp, #100	; 0x64
 801f336:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f33a:	ab16      	add	r3, sp, #88	; 0x58
 801f33c:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f340:	4620      	mov	r0, r4
 801f342:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f344:	f7f6 f93a 	bl	80155bc <rcutils_strdup>
 801f348:	2800      	cmp	r0, #0
 801f34a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f34c:	bf08      	it	eq
 801f34e:	250a      	moveq	r5, #10
 801f350:	6018      	str	r0, [r3, #0]
 801f352:	4628      	mov	r0, r5
 801f354:	b00d      	add	sp, #52	; 0x34
 801f356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f35a:	250b      	movs	r5, #11
 801f35c:	4628      	mov	r0, r5
 801f35e:	b00d      	add	sp, #52	; 0x34
 801f360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f364:	f7fc f97a 	bl	801b65c <rcl_convert_rmw_ret_to_rcl_ret>
 801f368:	4605      	mov	r5, r0
 801f36a:	e7f2      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f36c:	2567      	movs	r5, #103	; 0x67
 801f36e:	4628      	mov	r0, r5
 801f370:	b00d      	add	sp, #52	; 0x34
 801f372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f376:	25c9      	movs	r5, #201	; 0xc9
 801f378:	e7eb      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f37a:	2b7e      	cmp	r3, #126	; 0x7e
 801f37c:	d075      	beq.n	801f46a <rcl_expand_topic_name+0x1ba>
 801f37e:	f1b9 0f00 	cmp.w	r9, #0
 801f382:	f000 80c2 	beq.w	801f50a <rcl_expand_topic_name+0x25a>
 801f386:	2300      	movs	r3, #0
 801f388:	46a2      	mov	sl, r4
 801f38a:	461e      	mov	r6, r3
 801f38c:	9508      	str	r5, [sp, #32]
 801f38e:	4655      	mov	r5, sl
 801f390:	9409      	str	r4, [sp, #36]	; 0x24
 801f392:	46b2      	mov	sl, r6
 801f394:	464c      	mov	r4, r9
 801f396:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f39a:	2c00      	cmp	r4, #0
 801f39c:	f000 80ae 	beq.w	801f4fc <rcl_expand_topic_name+0x24c>
 801f3a0:	217d      	movs	r1, #125	; 0x7d
 801f3a2:	4628      	mov	r0, r5
 801f3a4:	f001 fe12 	bl	8020fcc <strchr>
 801f3a8:	eba0 0904 	sub.w	r9, r0, r4
 801f3ac:	4621      	mov	r1, r4
 801f3ae:	4869      	ldr	r0, [pc, #420]	; (801f554 <rcl_expand_topic_name+0x2a4>)
 801f3b0:	f109 0601 	add.w	r6, r9, #1
 801f3b4:	4632      	mov	r2, r6
 801f3b6:	f001 fe16 	bl	8020fe6 <strncmp>
 801f3ba:	2800      	cmp	r0, #0
 801f3bc:	d051      	beq.n	801f462 <rcl_expand_topic_name+0x1b2>
 801f3be:	4632      	mov	r2, r6
 801f3c0:	4621      	mov	r1, r4
 801f3c2:	4865      	ldr	r0, [pc, #404]	; (801f558 <rcl_expand_topic_name+0x2a8>)
 801f3c4:	f001 fe0f 	bl	8020fe6 <strncmp>
 801f3c8:	b128      	cbz	r0, 801f3d6 <rcl_expand_topic_name+0x126>
 801f3ca:	4632      	mov	r2, r6
 801f3cc:	4621      	mov	r1, r4
 801f3ce:	4863      	ldr	r0, [pc, #396]	; (801f55c <rcl_expand_topic_name+0x2ac>)
 801f3d0:	f001 fe09 	bl	8020fe6 <strncmp>
 801f3d4:	bb38      	cbnz	r0, 801f426 <rcl_expand_topic_name+0x176>
 801f3d6:	46d9      	mov	r9, fp
 801f3d8:	ab18      	add	r3, sp, #96	; 0x60
 801f3da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f3de:	ab16      	add	r3, sp, #88	; 0x58
 801f3e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	4631      	mov	r1, r6
 801f3e8:	cb0c      	ldmia	r3, {r2, r3}
 801f3ea:	f7f6 f909 	bl	8015600 <rcutils_strndup>
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	2800      	cmp	r0, #0
 801f3f2:	f000 80a3 	beq.w	801f53c <rcl_expand_topic_name+0x28c>
 801f3f6:	464a      	mov	r2, r9
 801f3f8:	4628      	mov	r0, r5
 801f3fa:	ab16      	add	r3, sp, #88	; 0x58
 801f3fc:	4621      	mov	r1, r4
 801f3fe:	f7f5 ffdd 	bl	80153bc <rcutils_repl_str>
 801f402:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f404:	4605      	mov	r5, r0
 801f406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f408:	4620      	mov	r0, r4
 801f40a:	4798      	blx	r3
 801f40c:	4650      	mov	r0, sl
 801f40e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f410:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f412:	4798      	blx	r3
 801f414:	2d00      	cmp	r5, #0
 801f416:	d06c      	beq.n	801f4f2 <rcl_expand_topic_name+0x242>
 801f418:	217b      	movs	r1, #123	; 0x7b
 801f41a:	4628      	mov	r0, r5
 801f41c:	f001 fdd6 	bl	8020fcc <strchr>
 801f420:	46aa      	mov	sl, r5
 801f422:	4604      	mov	r4, r0
 801f424:	e7b9      	b.n	801f39a <rcl_expand_topic_name+0xea>
 801f426:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801f42a:	1c61      	adds	r1, r4, #1
 801f42c:	4640      	mov	r0, r8
 801f42e:	f7fe fca5 	bl	801dd7c <rcutils_string_map_getn>
 801f432:	4681      	mov	r9, r0
 801f434:	2800      	cmp	r0, #0
 801f436:	d1cf      	bne.n	801f3d8 <rcl_expand_topic_name+0x128>
 801f438:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f43a:	aa18      	add	r2, sp, #96	; 0x60
 801f43c:	2569      	movs	r5, #105	; 0x69
 801f43e:	6018      	str	r0, [r3, #0]
 801f440:	ab16      	add	r3, sp, #88	; 0x58
 801f442:	ca07      	ldmia	r2, {r0, r1, r2}
 801f444:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f448:	4631      	mov	r1, r6
 801f44a:	4620      	mov	r0, r4
 801f44c:	cb0c      	ldmia	r3, {r2, r3}
 801f44e:	f7f6 f8d7 	bl	8015600 <rcutils_strndup>
 801f452:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f456:	4798      	blx	r3
 801f458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f45a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f45c:	4650      	mov	r0, sl
 801f45e:	4798      	blx	r3
 801f460:	e777      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f462:	46b9      	mov	r9, r7
 801f464:	e7b8      	b.n	801f3d8 <rcl_expand_topic_name+0x128>
 801f466:	25ca      	movs	r5, #202	; 0xca
 801f468:	e773      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f46a:	9e07      	ldr	r6, [sp, #28]
 801f46c:	4630      	mov	r0, r6
 801f46e:	f7e0 ff47 	bl	8000300 <strlen>
 801f472:	4a3b      	ldr	r2, [pc, #236]	; (801f560 <rcl_expand_topic_name+0x2b0>)
 801f474:	4b3b      	ldr	r3, [pc, #236]	; (801f564 <rcl_expand_topic_name+0x2b4>)
 801f476:	9603      	str	r6, [sp, #12]
 801f478:	2801      	cmp	r0, #1
 801f47a:	bf18      	it	ne
 801f47c:	4613      	movne	r3, r2
 801f47e:	9704      	str	r7, [sp, #16]
 801f480:	9302      	str	r3, [sp, #8]
 801f482:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f484:	9300      	str	r3, [sp, #0]
 801f486:	1c63      	adds	r3, r4, #1
 801f488:	9305      	str	r3, [sp, #20]
 801f48a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f48e:	9301      	str	r3, [sp, #4]
 801f490:	ab16      	add	r3, sp, #88	; 0x58
 801f492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f494:	f7f5 ff58 	bl	8015348 <rcutils_format_string_limit>
 801f498:	4606      	mov	r6, r0
 801f49a:	b350      	cbz	r0, 801f4f2 <rcl_expand_topic_name+0x242>
 801f49c:	f1b9 0f00 	cmp.w	r9, #0
 801f4a0:	d005      	beq.n	801f4ae <rcl_expand_topic_name+0x1fe>
 801f4a2:	217b      	movs	r1, #123	; 0x7b
 801f4a4:	46b2      	mov	sl, r6
 801f4a6:	f001 fd91 	bl	8020fcc <strchr>
 801f4aa:	4681      	mov	r9, r0
 801f4ac:	e76e      	b.n	801f38c <rcl_expand_topic_name+0xdc>
 801f4ae:	7833      	ldrb	r3, [r6, #0]
 801f4b0:	2b2f      	cmp	r3, #47	; 0x2f
 801f4b2:	d01b      	beq.n	801f4ec <rcl_expand_topic_name+0x23c>
 801f4b4:	9c07      	ldr	r4, [sp, #28]
 801f4b6:	4620      	mov	r0, r4
 801f4b8:	f7e0 ff22 	bl	8000300 <strlen>
 801f4bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f4c0:	4a29      	ldr	r2, [pc, #164]	; (801f568 <rcl_expand_topic_name+0x2b8>)
 801f4c2:	9301      	str	r3, [sp, #4]
 801f4c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f4c6:	9604      	str	r6, [sp, #16]
 801f4c8:	9300      	str	r3, [sp, #0]
 801f4ca:	4b28      	ldr	r3, [pc, #160]	; (801f56c <rcl_expand_topic_name+0x2bc>)
 801f4cc:	9403      	str	r4, [sp, #12]
 801f4ce:	2801      	cmp	r0, #1
 801f4d0:	bf18      	it	ne
 801f4d2:	4613      	movne	r3, r2
 801f4d4:	9302      	str	r3, [sp, #8]
 801f4d6:	ab16      	add	r3, sp, #88	; 0x58
 801f4d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f4da:	f7f5 ff35 	bl	8015348 <rcutils_format_string_limit>
 801f4de:	4603      	mov	r3, r0
 801f4e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f4e2:	4630      	mov	r0, r6
 801f4e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f4e6:	461e      	mov	r6, r3
 801f4e8:	4790      	blx	r2
 801f4ea:	b116      	cbz	r6, 801f4f2 <rcl_expand_topic_name+0x242>
 801f4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f4ee:	601e      	str	r6, [r3, #0]
 801f4f0:	e72f      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f4f2:	2300      	movs	r3, #0
 801f4f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f4f6:	250a      	movs	r5, #10
 801f4f8:	6013      	str	r3, [r2, #0]
 801f4fa:	e72a      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f4fc:	4653      	mov	r3, sl
 801f4fe:	4656      	mov	r6, sl
 801f500:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f504:	2b00      	cmp	r3, #0
 801f506:	d1d2      	bne.n	801f4ae <rcl_expand_topic_name+0x1fe>
 801f508:	7823      	ldrb	r3, [r4, #0]
 801f50a:	2b2f      	cmp	r3, #47	; 0x2f
 801f50c:	d01e      	beq.n	801f54c <rcl_expand_topic_name+0x29c>
 801f50e:	9e07      	ldr	r6, [sp, #28]
 801f510:	4630      	mov	r0, r6
 801f512:	f7e0 fef5 	bl	8000300 <strlen>
 801f516:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f51c:	9603      	str	r6, [sp, #12]
 801f51e:	9404      	str	r4, [sp, #16]
 801f520:	e9cd 2300 	strd	r2, r3, [sp]
 801f524:	4a10      	ldr	r2, [pc, #64]	; (801f568 <rcl_expand_topic_name+0x2b8>)
 801f526:	4b11      	ldr	r3, [pc, #68]	; (801f56c <rcl_expand_topic_name+0x2bc>)
 801f528:	2801      	cmp	r0, #1
 801f52a:	bf18      	it	ne
 801f52c:	4613      	movne	r3, r2
 801f52e:	9302      	str	r3, [sp, #8]
 801f530:	ab16      	add	r3, sp, #88	; 0x58
 801f532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f534:	f7f5 ff08 	bl	8015348 <rcutils_format_string_limit>
 801f538:	4606      	mov	r6, r0
 801f53a:	e7d6      	b.n	801f4ea <rcl_expand_topic_name+0x23a>
 801f53c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f540:	4650      	mov	r0, sl
 801f542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f544:	6014      	str	r4, [r2, #0]
 801f546:	250a      	movs	r5, #10
 801f548:	4798      	blx	r3
 801f54a:	e702      	b.n	801f352 <rcl_expand_topic_name+0xa2>
 801f54c:	2300      	movs	r3, #0
 801f54e:	461e      	mov	r6, r3
 801f550:	e7cc      	b.n	801f4ec <rcl_expand_topic_name+0x23c>
 801f552:	bf00      	nop
 801f554:	08025ce0 	.word	0x08025ce0
 801f558:	08025ce8 	.word	0x08025ce8
 801f55c:	08025cf0 	.word	0x08025cf0
 801f560:	08025cd8 	.word	0x08025cd8
 801f564:	08025660 	.word	0x08025660
 801f568:	08025060 	.word	0x08025060
 801f56c:	08025058 	.word	0x08025058

0801f570 <rcl_get_default_topic_name_substitutions>:
 801f570:	2800      	cmp	r0, #0
 801f572:	bf0c      	ite	eq
 801f574:	200b      	moveq	r0, #11
 801f576:	2000      	movne	r0, #0
 801f578:	4770      	bx	lr
 801f57a:	bf00      	nop

0801f57c <rcl_validate_topic_name>:
 801f57c:	2800      	cmp	r0, #0
 801f57e:	f000 8089 	beq.w	801f694 <rcl_validate_topic_name+0x118>
 801f582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f586:	460e      	mov	r6, r1
 801f588:	2900      	cmp	r1, #0
 801f58a:	f000 8085 	beq.w	801f698 <rcl_validate_topic_name+0x11c>
 801f58e:	4604      	mov	r4, r0
 801f590:	4617      	mov	r7, r2
 801f592:	f7e0 feb5 	bl	8000300 <strlen>
 801f596:	b1b0      	cbz	r0, 801f5c6 <rcl_validate_topic_name+0x4a>
 801f598:	f894 e000 	ldrb.w	lr, [r4]
 801f59c:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f700 <rcl_validate_topic_name+0x184>
 801f5a0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f5a4:	f013 0304 	ands.w	r3, r3, #4
 801f5a8:	d139      	bne.n	801f61e <rcl_validate_topic_name+0xa2>
 801f5aa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f5ae:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f5b2:	2a2f      	cmp	r2, #47	; 0x2f
 801f5b4:	d10f      	bne.n	801f5d6 <rcl_validate_topic_name+0x5a>
 801f5b6:	2202      	movs	r2, #2
 801f5b8:	6032      	str	r2, [r6, #0]
 801f5ba:	b3a7      	cbz	r7, 801f626 <rcl_validate_topic_name+0xaa>
 801f5bc:	4618      	mov	r0, r3
 801f5be:	f8c7 8000 	str.w	r8, [r7]
 801f5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5c6:	2301      	movs	r3, #1
 801f5c8:	6033      	str	r3, [r6, #0]
 801f5ca:	b367      	cbz	r7, 801f626 <rcl_validate_topic_name+0xaa>
 801f5cc:	2300      	movs	r3, #0
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	603b      	str	r3, [r7, #0]
 801f5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5d6:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f5da:	461d      	mov	r5, r3
 801f5dc:	4619      	mov	r1, r3
 801f5de:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f5e2:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f5e6:	f1b9 0f09 	cmp.w	r9, #9
 801f5ea:	d91f      	bls.n	801f62c <rcl_validate_topic_name+0xb0>
 801f5ec:	f022 0920 	bic.w	r9, r2, #32
 801f5f0:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f5f4:	f1b9 0f19 	cmp.w	r9, #25
 801f5f8:	d918      	bls.n	801f62c <rcl_validate_topic_name+0xb0>
 801f5fa:	2a5f      	cmp	r2, #95	; 0x5f
 801f5fc:	d024      	beq.n	801f648 <rcl_validate_topic_name+0xcc>
 801f5fe:	2a2f      	cmp	r2, #47	; 0x2f
 801f600:	d058      	beq.n	801f6b4 <rcl_validate_topic_name+0x138>
 801f602:	2a7e      	cmp	r2, #126	; 0x7e
 801f604:	d04a      	beq.n	801f69c <rcl_validate_topic_name+0x120>
 801f606:	2a7b      	cmp	r2, #123	; 0x7b
 801f608:	d05b      	beq.n	801f6c2 <rcl_validate_topic_name+0x146>
 801f60a:	2a7d      	cmp	r2, #125	; 0x7d
 801f60c:	d169      	bne.n	801f6e2 <rcl_validate_topic_name+0x166>
 801f60e:	2d00      	cmp	r5, #0
 801f610:	d15c      	bne.n	801f6cc <rcl_validate_topic_name+0x150>
 801f612:	2305      	movs	r3, #5
 801f614:	6033      	str	r3, [r6, #0]
 801f616:	b137      	cbz	r7, 801f626 <rcl_validate_topic_name+0xaa>
 801f618:	2000      	movs	r0, #0
 801f61a:	6039      	str	r1, [r7, #0]
 801f61c:	e7d9      	b.n	801f5d2 <rcl_validate_topic_name+0x56>
 801f61e:	2304      	movs	r3, #4
 801f620:	6033      	str	r3, [r6, #0]
 801f622:	2f00      	cmp	r7, #0
 801f624:	d1d2      	bne.n	801f5cc <rcl_validate_topic_name+0x50>
 801f626:	2000      	movs	r0, #0
 801f628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f62c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f630:	0752      	lsls	r2, r2, #29
 801f632:	d509      	bpl.n	801f648 <rcl_validate_topic_name+0xcc>
 801f634:	2900      	cmp	r1, #0
 801f636:	bf0c      	ite	eq
 801f638:	2200      	moveq	r2, #0
 801f63a:	f005 0201 	andne.w	r2, r5, #1
 801f63e:	b11a      	cbz	r2, 801f648 <rcl_validate_topic_name+0xcc>
 801f640:	1e4d      	subs	r5, r1, #1
 801f642:	429d      	cmp	r5, r3
 801f644:	d031      	beq.n	801f6aa <rcl_validate_topic_name+0x12e>
 801f646:	4615      	mov	r5, r2
 801f648:	3101      	adds	r1, #1
 801f64a:	4288      	cmp	r0, r1
 801f64c:	d1c7      	bne.n	801f5de <rcl_validate_topic_name+0x62>
 801f64e:	2d00      	cmp	r5, #0
 801f650:	d142      	bne.n	801f6d8 <rcl_validate_topic_name+0x15c>
 801f652:	4628      	mov	r0, r5
 801f654:	2301      	movs	r3, #1
 801f656:	e00c      	b.n	801f672 <rcl_validate_topic_name+0xf6>
 801f658:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f65c:	d101      	bne.n	801f662 <rcl_validate_topic_name+0xe6>
 801f65e:	2801      	cmp	r0, #1
 801f660:	d047      	beq.n	801f6f2 <rcl_validate_topic_name+0x176>
 801f662:	1c5a      	adds	r2, r3, #1
 801f664:	428b      	cmp	r3, r1
 801f666:	f100 0001 	add.w	r0, r0, #1
 801f66a:	f104 0401 	add.w	r4, r4, #1
 801f66e:	4613      	mov	r3, r2
 801f670:	d22e      	bcs.n	801f6d0 <rcl_validate_topic_name+0x154>
 801f672:	4580      	cmp	r8, r0
 801f674:	d0f5      	beq.n	801f662 <rcl_validate_topic_name+0xe6>
 801f676:	7822      	ldrb	r2, [r4, #0]
 801f678:	2a2f      	cmp	r2, #47	; 0x2f
 801f67a:	d1ed      	bne.n	801f658 <rcl_validate_topic_name+0xdc>
 801f67c:	7862      	ldrb	r2, [r4, #1]
 801f67e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f682:	0752      	lsls	r2, r2, #29
 801f684:	d5ed      	bpl.n	801f662 <rcl_validate_topic_name+0xe6>
 801f686:	2204      	movs	r2, #4
 801f688:	6032      	str	r2, [r6, #0]
 801f68a:	2f00      	cmp	r7, #0
 801f68c:	d0cb      	beq.n	801f626 <rcl_validate_topic_name+0xaa>
 801f68e:	2000      	movs	r0, #0
 801f690:	603b      	str	r3, [r7, #0]
 801f692:	e79e      	b.n	801f5d2 <rcl_validate_topic_name+0x56>
 801f694:	200b      	movs	r0, #11
 801f696:	4770      	bx	lr
 801f698:	200b      	movs	r0, #11
 801f69a:	e79a      	b.n	801f5d2 <rcl_validate_topic_name+0x56>
 801f69c:	2900      	cmp	r1, #0
 801f69e:	d0d3      	beq.n	801f648 <rcl_validate_topic_name+0xcc>
 801f6a0:	2306      	movs	r3, #6
 801f6a2:	6033      	str	r3, [r6, #0]
 801f6a4:	2f00      	cmp	r7, #0
 801f6a6:	d1b7      	bne.n	801f618 <rcl_validate_topic_name+0x9c>
 801f6a8:	e7bd      	b.n	801f626 <rcl_validate_topic_name+0xaa>
 801f6aa:	2309      	movs	r3, #9
 801f6ac:	6033      	str	r3, [r6, #0]
 801f6ae:	2f00      	cmp	r7, #0
 801f6b0:	d1b2      	bne.n	801f618 <rcl_validate_topic_name+0x9c>
 801f6b2:	e7b8      	b.n	801f626 <rcl_validate_topic_name+0xaa>
 801f6b4:	2d00      	cmp	r5, #0
 801f6b6:	d0c7      	beq.n	801f648 <rcl_validate_topic_name+0xcc>
 801f6b8:	2308      	movs	r3, #8
 801f6ba:	6033      	str	r3, [r6, #0]
 801f6bc:	2f00      	cmp	r7, #0
 801f6be:	d1ab      	bne.n	801f618 <rcl_validate_topic_name+0x9c>
 801f6c0:	e7b1      	b.n	801f626 <rcl_validate_topic_name+0xaa>
 801f6c2:	2d00      	cmp	r5, #0
 801f6c4:	d1f8      	bne.n	801f6b8 <rcl_validate_topic_name+0x13c>
 801f6c6:	460b      	mov	r3, r1
 801f6c8:	2501      	movs	r5, #1
 801f6ca:	e7bd      	b.n	801f648 <rcl_validate_topic_name+0xcc>
 801f6cc:	2500      	movs	r5, #0
 801f6ce:	e7bb      	b.n	801f648 <rcl_validate_topic_name+0xcc>
 801f6d0:	2300      	movs	r3, #0
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	6033      	str	r3, [r6, #0]
 801f6d6:	e77c      	b.n	801f5d2 <rcl_validate_topic_name+0x56>
 801f6d8:	2205      	movs	r2, #5
 801f6da:	6032      	str	r2, [r6, #0]
 801f6dc:	2f00      	cmp	r7, #0
 801f6de:	d1d6      	bne.n	801f68e <rcl_validate_topic_name+0x112>
 801f6e0:	e7a1      	b.n	801f626 <rcl_validate_topic_name+0xaa>
 801f6e2:	2d00      	cmp	r5, #0
 801f6e4:	bf14      	ite	ne
 801f6e6:	2308      	movne	r3, #8
 801f6e8:	2303      	moveq	r3, #3
 801f6ea:	6033      	str	r3, [r6, #0]
 801f6ec:	2f00      	cmp	r7, #0
 801f6ee:	d193      	bne.n	801f618 <rcl_validate_topic_name+0x9c>
 801f6f0:	e799      	b.n	801f626 <rcl_validate_topic_name+0xaa>
 801f6f2:	2307      	movs	r3, #7
 801f6f4:	6033      	str	r3, [r6, #0]
 801f6f6:	2f00      	cmp	r7, #0
 801f6f8:	d095      	beq.n	801f626 <rcl_validate_topic_name+0xaa>
 801f6fa:	2301      	movs	r3, #1
 801f6fc:	e7c7      	b.n	801f68e <rcl_validate_topic_name+0x112>
 801f6fe:	bf00      	nop
 801f700:	08025d6c 	.word	0x08025d6c

0801f704 <calloc>:
 801f704:	4b02      	ldr	r3, [pc, #8]	; (801f710 <calloc+0xc>)
 801f706:	460a      	mov	r2, r1
 801f708:	4601      	mov	r1, r0
 801f70a:	6818      	ldr	r0, [r3, #0]
 801f70c:	f000 b802 	b.w	801f714 <_calloc_r>
 801f710:	200009d8 	.word	0x200009d8

0801f714 <_calloc_r>:
 801f714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f716:	fba1 2402 	umull	r2, r4, r1, r2
 801f71a:	b94c      	cbnz	r4, 801f730 <_calloc_r+0x1c>
 801f71c:	4611      	mov	r1, r2
 801f71e:	9201      	str	r2, [sp, #4]
 801f720:	f000 f898 	bl	801f854 <_malloc_r>
 801f724:	9a01      	ldr	r2, [sp, #4]
 801f726:	4605      	mov	r5, r0
 801f728:	b930      	cbnz	r0, 801f738 <_calloc_r+0x24>
 801f72a:	4628      	mov	r0, r5
 801f72c:	b003      	add	sp, #12
 801f72e:	bd30      	pop	{r4, r5, pc}
 801f730:	220c      	movs	r2, #12
 801f732:	6002      	str	r2, [r0, #0]
 801f734:	2500      	movs	r5, #0
 801f736:	e7f8      	b.n	801f72a <_calloc_r+0x16>
 801f738:	4621      	mov	r1, r4
 801f73a:	f001 fc3f 	bl	8020fbc <memset>
 801f73e:	e7f4      	b.n	801f72a <_calloc_r+0x16>

0801f740 <exit>:
 801f740:	b508      	push	{r3, lr}
 801f742:	4b06      	ldr	r3, [pc, #24]	; (801f75c <exit+0x1c>)
 801f744:	4604      	mov	r4, r0
 801f746:	b113      	cbz	r3, 801f74e <exit+0xe>
 801f748:	2100      	movs	r1, #0
 801f74a:	f3af 8000 	nop.w
 801f74e:	4b04      	ldr	r3, [pc, #16]	; (801f760 <exit+0x20>)
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	b103      	cbz	r3, 801f756 <exit+0x16>
 801f754:	4798      	blx	r3
 801f756:	4620      	mov	r0, r4
 801f758:	f7e4 fb06 	bl	8003d68 <_exit>
 801f75c:	00000000 	.word	0x00000000
 801f760:	20017274 	.word	0x20017274

0801f764 <getenv>:
 801f764:	b507      	push	{r0, r1, r2, lr}
 801f766:	4b04      	ldr	r3, [pc, #16]	; (801f778 <getenv+0x14>)
 801f768:	4601      	mov	r1, r0
 801f76a:	aa01      	add	r2, sp, #4
 801f76c:	6818      	ldr	r0, [r3, #0]
 801f76e:	f000 f805 	bl	801f77c <_findenv_r>
 801f772:	b003      	add	sp, #12
 801f774:	f85d fb04 	ldr.w	pc, [sp], #4
 801f778:	200009d8 	.word	0x200009d8

0801f77c <_findenv_r>:
 801f77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f780:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f7f0 <_findenv_r+0x74>
 801f784:	4607      	mov	r7, r0
 801f786:	4689      	mov	r9, r1
 801f788:	4616      	mov	r6, r2
 801f78a:	f002 fb0d 	bl	8021da8 <__env_lock>
 801f78e:	f8da 4000 	ldr.w	r4, [sl]
 801f792:	b134      	cbz	r4, 801f7a2 <_findenv_r+0x26>
 801f794:	464b      	mov	r3, r9
 801f796:	4698      	mov	r8, r3
 801f798:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f79c:	b13a      	cbz	r2, 801f7ae <_findenv_r+0x32>
 801f79e:	2a3d      	cmp	r2, #61	; 0x3d
 801f7a0:	d1f9      	bne.n	801f796 <_findenv_r+0x1a>
 801f7a2:	4638      	mov	r0, r7
 801f7a4:	f002 fb06 	bl	8021db4 <__env_unlock>
 801f7a8:	2000      	movs	r0, #0
 801f7aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7ae:	eba8 0809 	sub.w	r8, r8, r9
 801f7b2:	46a3      	mov	fp, r4
 801f7b4:	f854 0b04 	ldr.w	r0, [r4], #4
 801f7b8:	2800      	cmp	r0, #0
 801f7ba:	d0f2      	beq.n	801f7a2 <_findenv_r+0x26>
 801f7bc:	4642      	mov	r2, r8
 801f7be:	4649      	mov	r1, r9
 801f7c0:	f001 fc11 	bl	8020fe6 <strncmp>
 801f7c4:	2800      	cmp	r0, #0
 801f7c6:	d1f4      	bne.n	801f7b2 <_findenv_r+0x36>
 801f7c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f7cc:	eb03 0508 	add.w	r5, r3, r8
 801f7d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f7d4:	2b3d      	cmp	r3, #61	; 0x3d
 801f7d6:	d1ec      	bne.n	801f7b2 <_findenv_r+0x36>
 801f7d8:	f8da 3000 	ldr.w	r3, [sl]
 801f7dc:	ebab 0303 	sub.w	r3, fp, r3
 801f7e0:	109b      	asrs	r3, r3, #2
 801f7e2:	4638      	mov	r0, r7
 801f7e4:	6033      	str	r3, [r6, #0]
 801f7e6:	f002 fae5 	bl	8021db4 <__env_unlock>
 801f7ea:	1c68      	adds	r0, r5, #1
 801f7ec:	e7dd      	b.n	801f7aa <_findenv_r+0x2e>
 801f7ee:	bf00      	nop
 801f7f0:	20000000 	.word	0x20000000

0801f7f4 <malloc>:
 801f7f4:	4b02      	ldr	r3, [pc, #8]	; (801f800 <malloc+0xc>)
 801f7f6:	4601      	mov	r1, r0
 801f7f8:	6818      	ldr	r0, [r3, #0]
 801f7fa:	f000 b82b 	b.w	801f854 <_malloc_r>
 801f7fe:	bf00      	nop
 801f800:	200009d8 	.word	0x200009d8

0801f804 <free>:
 801f804:	4b02      	ldr	r3, [pc, #8]	; (801f810 <free+0xc>)
 801f806:	4601      	mov	r1, r0
 801f808:	6818      	ldr	r0, [r3, #0]
 801f80a:	f002 bad9 	b.w	8021dc0 <_free_r>
 801f80e:	bf00      	nop
 801f810:	200009d8 	.word	0x200009d8

0801f814 <sbrk_aligned>:
 801f814:	b570      	push	{r4, r5, r6, lr}
 801f816:	4e0e      	ldr	r6, [pc, #56]	; (801f850 <sbrk_aligned+0x3c>)
 801f818:	460c      	mov	r4, r1
 801f81a:	6831      	ldr	r1, [r6, #0]
 801f81c:	4605      	mov	r5, r0
 801f81e:	b911      	cbnz	r1, 801f826 <sbrk_aligned+0x12>
 801f820:	f001 fc42 	bl	80210a8 <_sbrk_r>
 801f824:	6030      	str	r0, [r6, #0]
 801f826:	4621      	mov	r1, r4
 801f828:	4628      	mov	r0, r5
 801f82a:	f001 fc3d 	bl	80210a8 <_sbrk_r>
 801f82e:	1c43      	adds	r3, r0, #1
 801f830:	d00a      	beq.n	801f848 <sbrk_aligned+0x34>
 801f832:	1cc4      	adds	r4, r0, #3
 801f834:	f024 0403 	bic.w	r4, r4, #3
 801f838:	42a0      	cmp	r0, r4
 801f83a:	d007      	beq.n	801f84c <sbrk_aligned+0x38>
 801f83c:	1a21      	subs	r1, r4, r0
 801f83e:	4628      	mov	r0, r5
 801f840:	f001 fc32 	bl	80210a8 <_sbrk_r>
 801f844:	3001      	adds	r0, #1
 801f846:	d101      	bne.n	801f84c <sbrk_aligned+0x38>
 801f848:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f84c:	4620      	mov	r0, r4
 801f84e:	bd70      	pop	{r4, r5, r6, pc}
 801f850:	20017138 	.word	0x20017138

0801f854 <_malloc_r>:
 801f854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f858:	1ccd      	adds	r5, r1, #3
 801f85a:	f025 0503 	bic.w	r5, r5, #3
 801f85e:	3508      	adds	r5, #8
 801f860:	2d0c      	cmp	r5, #12
 801f862:	bf38      	it	cc
 801f864:	250c      	movcc	r5, #12
 801f866:	2d00      	cmp	r5, #0
 801f868:	4607      	mov	r7, r0
 801f86a:	db01      	blt.n	801f870 <_malloc_r+0x1c>
 801f86c:	42a9      	cmp	r1, r5
 801f86e:	d905      	bls.n	801f87c <_malloc_r+0x28>
 801f870:	230c      	movs	r3, #12
 801f872:	603b      	str	r3, [r7, #0]
 801f874:	2600      	movs	r6, #0
 801f876:	4630      	mov	r0, r6
 801f878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f87c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f950 <_malloc_r+0xfc>
 801f880:	f000 f868 	bl	801f954 <__malloc_lock>
 801f884:	f8d8 3000 	ldr.w	r3, [r8]
 801f888:	461c      	mov	r4, r3
 801f88a:	bb5c      	cbnz	r4, 801f8e4 <_malloc_r+0x90>
 801f88c:	4629      	mov	r1, r5
 801f88e:	4638      	mov	r0, r7
 801f890:	f7ff ffc0 	bl	801f814 <sbrk_aligned>
 801f894:	1c43      	adds	r3, r0, #1
 801f896:	4604      	mov	r4, r0
 801f898:	d155      	bne.n	801f946 <_malloc_r+0xf2>
 801f89a:	f8d8 4000 	ldr.w	r4, [r8]
 801f89e:	4626      	mov	r6, r4
 801f8a0:	2e00      	cmp	r6, #0
 801f8a2:	d145      	bne.n	801f930 <_malloc_r+0xdc>
 801f8a4:	2c00      	cmp	r4, #0
 801f8a6:	d048      	beq.n	801f93a <_malloc_r+0xe6>
 801f8a8:	6823      	ldr	r3, [r4, #0]
 801f8aa:	4631      	mov	r1, r6
 801f8ac:	4638      	mov	r0, r7
 801f8ae:	eb04 0903 	add.w	r9, r4, r3
 801f8b2:	f001 fbf9 	bl	80210a8 <_sbrk_r>
 801f8b6:	4581      	cmp	r9, r0
 801f8b8:	d13f      	bne.n	801f93a <_malloc_r+0xe6>
 801f8ba:	6821      	ldr	r1, [r4, #0]
 801f8bc:	1a6d      	subs	r5, r5, r1
 801f8be:	4629      	mov	r1, r5
 801f8c0:	4638      	mov	r0, r7
 801f8c2:	f7ff ffa7 	bl	801f814 <sbrk_aligned>
 801f8c6:	3001      	adds	r0, #1
 801f8c8:	d037      	beq.n	801f93a <_malloc_r+0xe6>
 801f8ca:	6823      	ldr	r3, [r4, #0]
 801f8cc:	442b      	add	r3, r5
 801f8ce:	6023      	str	r3, [r4, #0]
 801f8d0:	f8d8 3000 	ldr.w	r3, [r8]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d038      	beq.n	801f94a <_malloc_r+0xf6>
 801f8d8:	685a      	ldr	r2, [r3, #4]
 801f8da:	42a2      	cmp	r2, r4
 801f8dc:	d12b      	bne.n	801f936 <_malloc_r+0xe2>
 801f8de:	2200      	movs	r2, #0
 801f8e0:	605a      	str	r2, [r3, #4]
 801f8e2:	e00f      	b.n	801f904 <_malloc_r+0xb0>
 801f8e4:	6822      	ldr	r2, [r4, #0]
 801f8e6:	1b52      	subs	r2, r2, r5
 801f8e8:	d41f      	bmi.n	801f92a <_malloc_r+0xd6>
 801f8ea:	2a0b      	cmp	r2, #11
 801f8ec:	d917      	bls.n	801f91e <_malloc_r+0xca>
 801f8ee:	1961      	adds	r1, r4, r5
 801f8f0:	42a3      	cmp	r3, r4
 801f8f2:	6025      	str	r5, [r4, #0]
 801f8f4:	bf18      	it	ne
 801f8f6:	6059      	strne	r1, [r3, #4]
 801f8f8:	6863      	ldr	r3, [r4, #4]
 801f8fa:	bf08      	it	eq
 801f8fc:	f8c8 1000 	streq.w	r1, [r8]
 801f900:	5162      	str	r2, [r4, r5]
 801f902:	604b      	str	r3, [r1, #4]
 801f904:	4638      	mov	r0, r7
 801f906:	f104 060b 	add.w	r6, r4, #11
 801f90a:	f000 f829 	bl	801f960 <__malloc_unlock>
 801f90e:	f026 0607 	bic.w	r6, r6, #7
 801f912:	1d23      	adds	r3, r4, #4
 801f914:	1af2      	subs	r2, r6, r3
 801f916:	d0ae      	beq.n	801f876 <_malloc_r+0x22>
 801f918:	1b9b      	subs	r3, r3, r6
 801f91a:	50a3      	str	r3, [r4, r2]
 801f91c:	e7ab      	b.n	801f876 <_malloc_r+0x22>
 801f91e:	42a3      	cmp	r3, r4
 801f920:	6862      	ldr	r2, [r4, #4]
 801f922:	d1dd      	bne.n	801f8e0 <_malloc_r+0x8c>
 801f924:	f8c8 2000 	str.w	r2, [r8]
 801f928:	e7ec      	b.n	801f904 <_malloc_r+0xb0>
 801f92a:	4623      	mov	r3, r4
 801f92c:	6864      	ldr	r4, [r4, #4]
 801f92e:	e7ac      	b.n	801f88a <_malloc_r+0x36>
 801f930:	4634      	mov	r4, r6
 801f932:	6876      	ldr	r6, [r6, #4]
 801f934:	e7b4      	b.n	801f8a0 <_malloc_r+0x4c>
 801f936:	4613      	mov	r3, r2
 801f938:	e7cc      	b.n	801f8d4 <_malloc_r+0x80>
 801f93a:	230c      	movs	r3, #12
 801f93c:	603b      	str	r3, [r7, #0]
 801f93e:	4638      	mov	r0, r7
 801f940:	f000 f80e 	bl	801f960 <__malloc_unlock>
 801f944:	e797      	b.n	801f876 <_malloc_r+0x22>
 801f946:	6025      	str	r5, [r4, #0]
 801f948:	e7dc      	b.n	801f904 <_malloc_r+0xb0>
 801f94a:	605b      	str	r3, [r3, #4]
 801f94c:	deff      	udf	#255	; 0xff
 801f94e:	bf00      	nop
 801f950:	20017134 	.word	0x20017134

0801f954 <__malloc_lock>:
 801f954:	4801      	ldr	r0, [pc, #4]	; (801f95c <__malloc_lock+0x8>)
 801f956:	f001 bbf4 	b.w	8021142 <__retarget_lock_acquire_recursive>
 801f95a:	bf00      	nop
 801f95c:	2001727d 	.word	0x2001727d

0801f960 <__malloc_unlock>:
 801f960:	4801      	ldr	r0, [pc, #4]	; (801f968 <__malloc_unlock+0x8>)
 801f962:	f001 bbef 	b.w	8021144 <__retarget_lock_release_recursive>
 801f966:	bf00      	nop
 801f968:	2001727d 	.word	0x2001727d

0801f96c <srand>:
 801f96c:	b538      	push	{r3, r4, r5, lr}
 801f96e:	4b10      	ldr	r3, [pc, #64]	; (801f9b0 <srand+0x44>)
 801f970:	681d      	ldr	r5, [r3, #0]
 801f972:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f974:	4604      	mov	r4, r0
 801f976:	b9b3      	cbnz	r3, 801f9a6 <srand+0x3a>
 801f978:	2018      	movs	r0, #24
 801f97a:	f7ff ff3b 	bl	801f7f4 <malloc>
 801f97e:	4602      	mov	r2, r0
 801f980:	6328      	str	r0, [r5, #48]	; 0x30
 801f982:	b920      	cbnz	r0, 801f98e <srand+0x22>
 801f984:	4b0b      	ldr	r3, [pc, #44]	; (801f9b4 <srand+0x48>)
 801f986:	480c      	ldr	r0, [pc, #48]	; (801f9b8 <srand+0x4c>)
 801f988:	2146      	movs	r1, #70	; 0x46
 801f98a:	f001 fbf9 	bl	8021180 <__assert_func>
 801f98e:	490b      	ldr	r1, [pc, #44]	; (801f9bc <srand+0x50>)
 801f990:	4b0b      	ldr	r3, [pc, #44]	; (801f9c0 <srand+0x54>)
 801f992:	e9c0 1300 	strd	r1, r3, [r0]
 801f996:	4b0b      	ldr	r3, [pc, #44]	; (801f9c4 <srand+0x58>)
 801f998:	6083      	str	r3, [r0, #8]
 801f99a:	230b      	movs	r3, #11
 801f99c:	8183      	strh	r3, [r0, #12]
 801f99e:	2100      	movs	r1, #0
 801f9a0:	2001      	movs	r0, #1
 801f9a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f9a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f9a8:	2200      	movs	r2, #0
 801f9aa:	611c      	str	r4, [r3, #16]
 801f9ac:	615a      	str	r2, [r3, #20]
 801f9ae:	bd38      	pop	{r3, r4, r5, pc}
 801f9b0:	200009d8 	.word	0x200009d8
 801f9b4:	08025cfc 	.word	0x08025cfc
 801f9b8:	08025d13 	.word	0x08025d13
 801f9bc:	abcd330e 	.word	0xabcd330e
 801f9c0:	e66d1234 	.word	0xe66d1234
 801f9c4:	0005deec 	.word	0x0005deec

0801f9c8 <rand>:
 801f9c8:	4b16      	ldr	r3, [pc, #88]	; (801fa24 <rand+0x5c>)
 801f9ca:	b510      	push	{r4, lr}
 801f9cc:	681c      	ldr	r4, [r3, #0]
 801f9ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f9d0:	b9b3      	cbnz	r3, 801fa00 <rand+0x38>
 801f9d2:	2018      	movs	r0, #24
 801f9d4:	f7ff ff0e 	bl	801f7f4 <malloc>
 801f9d8:	4602      	mov	r2, r0
 801f9da:	6320      	str	r0, [r4, #48]	; 0x30
 801f9dc:	b920      	cbnz	r0, 801f9e8 <rand+0x20>
 801f9de:	4b12      	ldr	r3, [pc, #72]	; (801fa28 <rand+0x60>)
 801f9e0:	4812      	ldr	r0, [pc, #72]	; (801fa2c <rand+0x64>)
 801f9e2:	2152      	movs	r1, #82	; 0x52
 801f9e4:	f001 fbcc 	bl	8021180 <__assert_func>
 801f9e8:	4911      	ldr	r1, [pc, #68]	; (801fa30 <rand+0x68>)
 801f9ea:	4b12      	ldr	r3, [pc, #72]	; (801fa34 <rand+0x6c>)
 801f9ec:	e9c0 1300 	strd	r1, r3, [r0]
 801f9f0:	4b11      	ldr	r3, [pc, #68]	; (801fa38 <rand+0x70>)
 801f9f2:	6083      	str	r3, [r0, #8]
 801f9f4:	230b      	movs	r3, #11
 801f9f6:	8183      	strh	r3, [r0, #12]
 801f9f8:	2100      	movs	r1, #0
 801f9fa:	2001      	movs	r0, #1
 801f9fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fa00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fa02:	480e      	ldr	r0, [pc, #56]	; (801fa3c <rand+0x74>)
 801fa04:	690b      	ldr	r3, [r1, #16]
 801fa06:	694c      	ldr	r4, [r1, #20]
 801fa08:	4a0d      	ldr	r2, [pc, #52]	; (801fa40 <rand+0x78>)
 801fa0a:	4358      	muls	r0, r3
 801fa0c:	fb02 0004 	mla	r0, r2, r4, r0
 801fa10:	fba3 3202 	umull	r3, r2, r3, r2
 801fa14:	3301      	adds	r3, #1
 801fa16:	eb40 0002 	adc.w	r0, r0, r2
 801fa1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801fa1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fa22:	bd10      	pop	{r4, pc}
 801fa24:	200009d8 	.word	0x200009d8
 801fa28:	08025cfc 	.word	0x08025cfc
 801fa2c:	08025d13 	.word	0x08025d13
 801fa30:	abcd330e 	.word	0xabcd330e
 801fa34:	e66d1234 	.word	0xe66d1234
 801fa38:	0005deec 	.word	0x0005deec
 801fa3c:	5851f42d 	.word	0x5851f42d
 801fa40:	4c957f2d 	.word	0x4c957f2d

0801fa44 <realloc>:
 801fa44:	4b02      	ldr	r3, [pc, #8]	; (801fa50 <realloc+0xc>)
 801fa46:	460a      	mov	r2, r1
 801fa48:	4601      	mov	r1, r0
 801fa4a:	6818      	ldr	r0, [r3, #0]
 801fa4c:	f000 b802 	b.w	801fa54 <_realloc_r>
 801fa50:	200009d8 	.word	0x200009d8

0801fa54 <_realloc_r>:
 801fa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa58:	4680      	mov	r8, r0
 801fa5a:	4614      	mov	r4, r2
 801fa5c:	460e      	mov	r6, r1
 801fa5e:	b921      	cbnz	r1, 801fa6a <_realloc_r+0x16>
 801fa60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fa64:	4611      	mov	r1, r2
 801fa66:	f7ff bef5 	b.w	801f854 <_malloc_r>
 801fa6a:	b92a      	cbnz	r2, 801fa78 <_realloc_r+0x24>
 801fa6c:	f002 f9a8 	bl	8021dc0 <_free_r>
 801fa70:	4625      	mov	r5, r4
 801fa72:	4628      	mov	r0, r5
 801fa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa78:	f002 fe98 	bl	80227ac <_malloc_usable_size_r>
 801fa7c:	4284      	cmp	r4, r0
 801fa7e:	4607      	mov	r7, r0
 801fa80:	d802      	bhi.n	801fa88 <_realloc_r+0x34>
 801fa82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fa86:	d812      	bhi.n	801faae <_realloc_r+0x5a>
 801fa88:	4621      	mov	r1, r4
 801fa8a:	4640      	mov	r0, r8
 801fa8c:	f7ff fee2 	bl	801f854 <_malloc_r>
 801fa90:	4605      	mov	r5, r0
 801fa92:	2800      	cmp	r0, #0
 801fa94:	d0ed      	beq.n	801fa72 <_realloc_r+0x1e>
 801fa96:	42bc      	cmp	r4, r7
 801fa98:	4622      	mov	r2, r4
 801fa9a:	4631      	mov	r1, r6
 801fa9c:	bf28      	it	cs
 801fa9e:	463a      	movcs	r2, r7
 801faa0:	f001 fb59 	bl	8021156 <memcpy>
 801faa4:	4631      	mov	r1, r6
 801faa6:	4640      	mov	r0, r8
 801faa8:	f002 f98a 	bl	8021dc0 <_free_r>
 801faac:	e7e1      	b.n	801fa72 <_realloc_r+0x1e>
 801faae:	4635      	mov	r5, r6
 801fab0:	e7df      	b.n	801fa72 <_realloc_r+0x1e>
	...

0801fab4 <_strtoul_l.constprop.0>:
 801fab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fab8:	4f36      	ldr	r7, [pc, #216]	; (801fb94 <_strtoul_l.constprop.0+0xe0>)
 801faba:	4686      	mov	lr, r0
 801fabc:	460d      	mov	r5, r1
 801fabe:	4628      	mov	r0, r5
 801fac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fac4:	5d3e      	ldrb	r6, [r7, r4]
 801fac6:	f016 0608 	ands.w	r6, r6, #8
 801faca:	d1f8      	bne.n	801fabe <_strtoul_l.constprop.0+0xa>
 801facc:	2c2d      	cmp	r4, #45	; 0x2d
 801face:	d130      	bne.n	801fb32 <_strtoul_l.constprop.0+0x7e>
 801fad0:	782c      	ldrb	r4, [r5, #0]
 801fad2:	2601      	movs	r6, #1
 801fad4:	1c85      	adds	r5, r0, #2
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d057      	beq.n	801fb8a <_strtoul_l.constprop.0+0xd6>
 801fada:	2b10      	cmp	r3, #16
 801fadc:	d109      	bne.n	801faf2 <_strtoul_l.constprop.0+0x3e>
 801fade:	2c30      	cmp	r4, #48	; 0x30
 801fae0:	d107      	bne.n	801faf2 <_strtoul_l.constprop.0+0x3e>
 801fae2:	7828      	ldrb	r0, [r5, #0]
 801fae4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fae8:	2858      	cmp	r0, #88	; 0x58
 801faea:	d149      	bne.n	801fb80 <_strtoul_l.constprop.0+0xcc>
 801faec:	786c      	ldrb	r4, [r5, #1]
 801faee:	2310      	movs	r3, #16
 801faf0:	3502      	adds	r5, #2
 801faf2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801faf6:	2700      	movs	r7, #0
 801faf8:	fbb8 f8f3 	udiv	r8, r8, r3
 801fafc:	fb03 f908 	mul.w	r9, r3, r8
 801fb00:	ea6f 0909 	mvn.w	r9, r9
 801fb04:	4638      	mov	r0, r7
 801fb06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801fb0a:	f1bc 0f09 	cmp.w	ip, #9
 801fb0e:	d815      	bhi.n	801fb3c <_strtoul_l.constprop.0+0x88>
 801fb10:	4664      	mov	r4, ip
 801fb12:	42a3      	cmp	r3, r4
 801fb14:	dd23      	ble.n	801fb5e <_strtoul_l.constprop.0+0xaa>
 801fb16:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801fb1a:	d007      	beq.n	801fb2c <_strtoul_l.constprop.0+0x78>
 801fb1c:	4580      	cmp	r8, r0
 801fb1e:	d31b      	bcc.n	801fb58 <_strtoul_l.constprop.0+0xa4>
 801fb20:	d101      	bne.n	801fb26 <_strtoul_l.constprop.0+0x72>
 801fb22:	45a1      	cmp	r9, r4
 801fb24:	db18      	blt.n	801fb58 <_strtoul_l.constprop.0+0xa4>
 801fb26:	fb00 4003 	mla	r0, r0, r3, r4
 801fb2a:	2701      	movs	r7, #1
 801fb2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fb30:	e7e9      	b.n	801fb06 <_strtoul_l.constprop.0+0x52>
 801fb32:	2c2b      	cmp	r4, #43	; 0x2b
 801fb34:	bf04      	itt	eq
 801fb36:	782c      	ldrbeq	r4, [r5, #0]
 801fb38:	1c85      	addeq	r5, r0, #2
 801fb3a:	e7cc      	b.n	801fad6 <_strtoul_l.constprop.0+0x22>
 801fb3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801fb40:	f1bc 0f19 	cmp.w	ip, #25
 801fb44:	d801      	bhi.n	801fb4a <_strtoul_l.constprop.0+0x96>
 801fb46:	3c37      	subs	r4, #55	; 0x37
 801fb48:	e7e3      	b.n	801fb12 <_strtoul_l.constprop.0+0x5e>
 801fb4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801fb4e:	f1bc 0f19 	cmp.w	ip, #25
 801fb52:	d804      	bhi.n	801fb5e <_strtoul_l.constprop.0+0xaa>
 801fb54:	3c57      	subs	r4, #87	; 0x57
 801fb56:	e7dc      	b.n	801fb12 <_strtoul_l.constprop.0+0x5e>
 801fb58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fb5c:	e7e6      	b.n	801fb2c <_strtoul_l.constprop.0+0x78>
 801fb5e:	1c7b      	adds	r3, r7, #1
 801fb60:	d106      	bne.n	801fb70 <_strtoul_l.constprop.0+0xbc>
 801fb62:	2322      	movs	r3, #34	; 0x22
 801fb64:	f8ce 3000 	str.w	r3, [lr]
 801fb68:	4638      	mov	r0, r7
 801fb6a:	b932      	cbnz	r2, 801fb7a <_strtoul_l.constprop.0+0xc6>
 801fb6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb70:	b106      	cbz	r6, 801fb74 <_strtoul_l.constprop.0+0xc0>
 801fb72:	4240      	negs	r0, r0
 801fb74:	2a00      	cmp	r2, #0
 801fb76:	d0f9      	beq.n	801fb6c <_strtoul_l.constprop.0+0xb8>
 801fb78:	b107      	cbz	r7, 801fb7c <_strtoul_l.constprop.0+0xc8>
 801fb7a:	1e69      	subs	r1, r5, #1
 801fb7c:	6011      	str	r1, [r2, #0]
 801fb7e:	e7f5      	b.n	801fb6c <_strtoul_l.constprop.0+0xb8>
 801fb80:	2430      	movs	r4, #48	; 0x30
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d1b5      	bne.n	801faf2 <_strtoul_l.constprop.0+0x3e>
 801fb86:	2308      	movs	r3, #8
 801fb88:	e7b3      	b.n	801faf2 <_strtoul_l.constprop.0+0x3e>
 801fb8a:	2c30      	cmp	r4, #48	; 0x30
 801fb8c:	d0a9      	beq.n	801fae2 <_strtoul_l.constprop.0+0x2e>
 801fb8e:	230a      	movs	r3, #10
 801fb90:	e7af      	b.n	801faf2 <_strtoul_l.constprop.0+0x3e>
 801fb92:	bf00      	nop
 801fb94:	08025d6c 	.word	0x08025d6c

0801fb98 <strtoul>:
 801fb98:	4613      	mov	r3, r2
 801fb9a:	460a      	mov	r2, r1
 801fb9c:	4601      	mov	r1, r0
 801fb9e:	4802      	ldr	r0, [pc, #8]	; (801fba8 <strtoul+0x10>)
 801fba0:	6800      	ldr	r0, [r0, #0]
 801fba2:	f7ff bf87 	b.w	801fab4 <_strtoul_l.constprop.0>
 801fba6:	bf00      	nop
 801fba8:	200009d8 	.word	0x200009d8

0801fbac <__cvt>:
 801fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbae:	ed2d 8b02 	vpush	{d8}
 801fbb2:	eeb0 8b40 	vmov.f64	d8, d0
 801fbb6:	b085      	sub	sp, #20
 801fbb8:	4617      	mov	r7, r2
 801fbba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fbbc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fbbe:	ee18 2a90 	vmov	r2, s17
 801fbc2:	f025 0520 	bic.w	r5, r5, #32
 801fbc6:	2a00      	cmp	r2, #0
 801fbc8:	bfb6      	itet	lt
 801fbca:	222d      	movlt	r2, #45	; 0x2d
 801fbcc:	2200      	movge	r2, #0
 801fbce:	eeb1 8b40 	vneglt.f64	d8, d0
 801fbd2:	2d46      	cmp	r5, #70	; 0x46
 801fbd4:	460c      	mov	r4, r1
 801fbd6:	701a      	strb	r2, [r3, #0]
 801fbd8:	d004      	beq.n	801fbe4 <__cvt+0x38>
 801fbda:	2d45      	cmp	r5, #69	; 0x45
 801fbdc:	d100      	bne.n	801fbe0 <__cvt+0x34>
 801fbde:	3401      	adds	r4, #1
 801fbe0:	2102      	movs	r1, #2
 801fbe2:	e000      	b.n	801fbe6 <__cvt+0x3a>
 801fbe4:	2103      	movs	r1, #3
 801fbe6:	ab03      	add	r3, sp, #12
 801fbe8:	9301      	str	r3, [sp, #4]
 801fbea:	ab02      	add	r3, sp, #8
 801fbec:	9300      	str	r3, [sp, #0]
 801fbee:	4622      	mov	r2, r4
 801fbf0:	4633      	mov	r3, r6
 801fbf2:	eeb0 0b48 	vmov.f64	d0, d8
 801fbf6:	f001 fb6b 	bl	80212d0 <_dtoa_r>
 801fbfa:	2d47      	cmp	r5, #71	; 0x47
 801fbfc:	d101      	bne.n	801fc02 <__cvt+0x56>
 801fbfe:	07fb      	lsls	r3, r7, #31
 801fc00:	d51a      	bpl.n	801fc38 <__cvt+0x8c>
 801fc02:	2d46      	cmp	r5, #70	; 0x46
 801fc04:	eb00 0204 	add.w	r2, r0, r4
 801fc08:	d10c      	bne.n	801fc24 <__cvt+0x78>
 801fc0a:	7803      	ldrb	r3, [r0, #0]
 801fc0c:	2b30      	cmp	r3, #48	; 0x30
 801fc0e:	d107      	bne.n	801fc20 <__cvt+0x74>
 801fc10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc18:	bf1c      	itt	ne
 801fc1a:	f1c4 0401 	rsbne	r4, r4, #1
 801fc1e:	6034      	strne	r4, [r6, #0]
 801fc20:	6833      	ldr	r3, [r6, #0]
 801fc22:	441a      	add	r2, r3
 801fc24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc2c:	bf08      	it	eq
 801fc2e:	9203      	streq	r2, [sp, #12]
 801fc30:	2130      	movs	r1, #48	; 0x30
 801fc32:	9b03      	ldr	r3, [sp, #12]
 801fc34:	4293      	cmp	r3, r2
 801fc36:	d307      	bcc.n	801fc48 <__cvt+0x9c>
 801fc38:	9b03      	ldr	r3, [sp, #12]
 801fc3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fc3c:	1a1b      	subs	r3, r3, r0
 801fc3e:	6013      	str	r3, [r2, #0]
 801fc40:	b005      	add	sp, #20
 801fc42:	ecbd 8b02 	vpop	{d8}
 801fc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc48:	1c5c      	adds	r4, r3, #1
 801fc4a:	9403      	str	r4, [sp, #12]
 801fc4c:	7019      	strb	r1, [r3, #0]
 801fc4e:	e7f0      	b.n	801fc32 <__cvt+0x86>

0801fc50 <__exponent>:
 801fc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fc52:	4603      	mov	r3, r0
 801fc54:	2900      	cmp	r1, #0
 801fc56:	bfb8      	it	lt
 801fc58:	4249      	neglt	r1, r1
 801fc5a:	f803 2b02 	strb.w	r2, [r3], #2
 801fc5e:	bfb4      	ite	lt
 801fc60:	222d      	movlt	r2, #45	; 0x2d
 801fc62:	222b      	movge	r2, #43	; 0x2b
 801fc64:	2909      	cmp	r1, #9
 801fc66:	7042      	strb	r2, [r0, #1]
 801fc68:	dd2a      	ble.n	801fcc0 <__exponent+0x70>
 801fc6a:	f10d 0207 	add.w	r2, sp, #7
 801fc6e:	4617      	mov	r7, r2
 801fc70:	260a      	movs	r6, #10
 801fc72:	4694      	mov	ip, r2
 801fc74:	fb91 f5f6 	sdiv	r5, r1, r6
 801fc78:	fb06 1415 	mls	r4, r6, r5, r1
 801fc7c:	3430      	adds	r4, #48	; 0x30
 801fc7e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801fc82:	460c      	mov	r4, r1
 801fc84:	2c63      	cmp	r4, #99	; 0x63
 801fc86:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801fc8a:	4629      	mov	r1, r5
 801fc8c:	dcf1      	bgt.n	801fc72 <__exponent+0x22>
 801fc8e:	3130      	adds	r1, #48	; 0x30
 801fc90:	f1ac 0402 	sub.w	r4, ip, #2
 801fc94:	f802 1c01 	strb.w	r1, [r2, #-1]
 801fc98:	1c41      	adds	r1, r0, #1
 801fc9a:	4622      	mov	r2, r4
 801fc9c:	42ba      	cmp	r2, r7
 801fc9e:	d30a      	bcc.n	801fcb6 <__exponent+0x66>
 801fca0:	f10d 0209 	add.w	r2, sp, #9
 801fca4:	eba2 020c 	sub.w	r2, r2, ip
 801fca8:	42bc      	cmp	r4, r7
 801fcaa:	bf88      	it	hi
 801fcac:	2200      	movhi	r2, #0
 801fcae:	4413      	add	r3, r2
 801fcb0:	1a18      	subs	r0, r3, r0
 801fcb2:	b003      	add	sp, #12
 801fcb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcb6:	f812 5b01 	ldrb.w	r5, [r2], #1
 801fcba:	f801 5f01 	strb.w	r5, [r1, #1]!
 801fcbe:	e7ed      	b.n	801fc9c <__exponent+0x4c>
 801fcc0:	2330      	movs	r3, #48	; 0x30
 801fcc2:	3130      	adds	r1, #48	; 0x30
 801fcc4:	7083      	strb	r3, [r0, #2]
 801fcc6:	70c1      	strb	r1, [r0, #3]
 801fcc8:	1d03      	adds	r3, r0, #4
 801fcca:	e7f1      	b.n	801fcb0 <__exponent+0x60>
 801fccc:	0000      	movs	r0, r0
	...

0801fcd0 <_printf_float>:
 801fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd4:	b08b      	sub	sp, #44	; 0x2c
 801fcd6:	460c      	mov	r4, r1
 801fcd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801fcdc:	4616      	mov	r6, r2
 801fcde:	461f      	mov	r7, r3
 801fce0:	4605      	mov	r5, r0
 801fce2:	f001 f9a9 	bl	8021038 <_localeconv_r>
 801fce6:	f8d0 b000 	ldr.w	fp, [r0]
 801fcea:	4658      	mov	r0, fp
 801fcec:	f7e0 fb08 	bl	8000300 <strlen>
 801fcf0:	2300      	movs	r3, #0
 801fcf2:	9308      	str	r3, [sp, #32]
 801fcf4:	f8d8 3000 	ldr.w	r3, [r8]
 801fcf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801fcfc:	6822      	ldr	r2, [r4, #0]
 801fcfe:	3307      	adds	r3, #7
 801fd00:	f023 0307 	bic.w	r3, r3, #7
 801fd04:	f103 0108 	add.w	r1, r3, #8
 801fd08:	f8c8 1000 	str.w	r1, [r8]
 801fd0c:	ed93 0b00 	vldr	d0, [r3]
 801fd10:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801ff70 <_printf_float+0x2a0>
 801fd14:	eeb0 7bc0 	vabs.f64	d7, d0
 801fd18:	eeb4 7b46 	vcmp.f64	d7, d6
 801fd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd20:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801fd24:	4682      	mov	sl, r0
 801fd26:	dd24      	ble.n	801fd72 <_printf_float+0xa2>
 801fd28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd30:	d502      	bpl.n	801fd38 <_printf_float+0x68>
 801fd32:	232d      	movs	r3, #45	; 0x2d
 801fd34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd38:	498f      	ldr	r1, [pc, #572]	; (801ff78 <_printf_float+0x2a8>)
 801fd3a:	4b90      	ldr	r3, [pc, #576]	; (801ff7c <_printf_float+0x2ac>)
 801fd3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fd40:	bf94      	ite	ls
 801fd42:	4688      	movls	r8, r1
 801fd44:	4698      	movhi	r8, r3
 801fd46:	2303      	movs	r3, #3
 801fd48:	6123      	str	r3, [r4, #16]
 801fd4a:	f022 0204 	bic.w	r2, r2, #4
 801fd4e:	2300      	movs	r3, #0
 801fd50:	6022      	str	r2, [r4, #0]
 801fd52:	9304      	str	r3, [sp, #16]
 801fd54:	9700      	str	r7, [sp, #0]
 801fd56:	4633      	mov	r3, r6
 801fd58:	aa09      	add	r2, sp, #36	; 0x24
 801fd5a:	4621      	mov	r1, r4
 801fd5c:	4628      	mov	r0, r5
 801fd5e:	f000 f9d1 	bl	8020104 <_printf_common>
 801fd62:	3001      	adds	r0, #1
 801fd64:	f040 808a 	bne.w	801fe7c <_printf_float+0x1ac>
 801fd68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fd6c:	b00b      	add	sp, #44	; 0x2c
 801fd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd72:	eeb4 0b40 	vcmp.f64	d0, d0
 801fd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd7a:	d709      	bvc.n	801fd90 <_printf_float+0xc0>
 801fd7c:	ee10 3a90 	vmov	r3, s1
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	bfbc      	itt	lt
 801fd84:	232d      	movlt	r3, #45	; 0x2d
 801fd86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801fd8a:	497d      	ldr	r1, [pc, #500]	; (801ff80 <_printf_float+0x2b0>)
 801fd8c:	4b7d      	ldr	r3, [pc, #500]	; (801ff84 <_printf_float+0x2b4>)
 801fd8e:	e7d5      	b.n	801fd3c <_printf_float+0x6c>
 801fd90:	6863      	ldr	r3, [r4, #4]
 801fd92:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801fd96:	9104      	str	r1, [sp, #16]
 801fd98:	1c59      	adds	r1, r3, #1
 801fd9a:	d13c      	bne.n	801fe16 <_printf_float+0x146>
 801fd9c:	2306      	movs	r3, #6
 801fd9e:	6063      	str	r3, [r4, #4]
 801fda0:	2300      	movs	r3, #0
 801fda2:	9303      	str	r3, [sp, #12]
 801fda4:	ab08      	add	r3, sp, #32
 801fda6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fdaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fdae:	ab07      	add	r3, sp, #28
 801fdb0:	6861      	ldr	r1, [r4, #4]
 801fdb2:	9300      	str	r3, [sp, #0]
 801fdb4:	6022      	str	r2, [r4, #0]
 801fdb6:	f10d 031b 	add.w	r3, sp, #27
 801fdba:	4628      	mov	r0, r5
 801fdbc:	f7ff fef6 	bl	801fbac <__cvt>
 801fdc0:	9b04      	ldr	r3, [sp, #16]
 801fdc2:	9907      	ldr	r1, [sp, #28]
 801fdc4:	2b47      	cmp	r3, #71	; 0x47
 801fdc6:	4680      	mov	r8, r0
 801fdc8:	d108      	bne.n	801fddc <_printf_float+0x10c>
 801fdca:	1cc8      	adds	r0, r1, #3
 801fdcc:	db02      	blt.n	801fdd4 <_printf_float+0x104>
 801fdce:	6863      	ldr	r3, [r4, #4]
 801fdd0:	4299      	cmp	r1, r3
 801fdd2:	dd41      	ble.n	801fe58 <_printf_float+0x188>
 801fdd4:	f1a9 0902 	sub.w	r9, r9, #2
 801fdd8:	fa5f f989 	uxtb.w	r9, r9
 801fddc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fde0:	d820      	bhi.n	801fe24 <_printf_float+0x154>
 801fde2:	3901      	subs	r1, #1
 801fde4:	464a      	mov	r2, r9
 801fde6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801fdea:	9107      	str	r1, [sp, #28]
 801fdec:	f7ff ff30 	bl	801fc50 <__exponent>
 801fdf0:	9a08      	ldr	r2, [sp, #32]
 801fdf2:	9004      	str	r0, [sp, #16]
 801fdf4:	1813      	adds	r3, r2, r0
 801fdf6:	2a01      	cmp	r2, #1
 801fdf8:	6123      	str	r3, [r4, #16]
 801fdfa:	dc02      	bgt.n	801fe02 <_printf_float+0x132>
 801fdfc:	6822      	ldr	r2, [r4, #0]
 801fdfe:	07d2      	lsls	r2, r2, #31
 801fe00:	d501      	bpl.n	801fe06 <_printf_float+0x136>
 801fe02:	3301      	adds	r3, #1
 801fe04:	6123      	str	r3, [r4, #16]
 801fe06:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d0a2      	beq.n	801fd54 <_printf_float+0x84>
 801fe0e:	232d      	movs	r3, #45	; 0x2d
 801fe10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe14:	e79e      	b.n	801fd54 <_printf_float+0x84>
 801fe16:	9904      	ldr	r1, [sp, #16]
 801fe18:	2947      	cmp	r1, #71	; 0x47
 801fe1a:	d1c1      	bne.n	801fda0 <_printf_float+0xd0>
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d1bf      	bne.n	801fda0 <_printf_float+0xd0>
 801fe20:	2301      	movs	r3, #1
 801fe22:	e7bc      	b.n	801fd9e <_printf_float+0xce>
 801fe24:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801fe28:	d118      	bne.n	801fe5c <_printf_float+0x18c>
 801fe2a:	2900      	cmp	r1, #0
 801fe2c:	6863      	ldr	r3, [r4, #4]
 801fe2e:	dd0b      	ble.n	801fe48 <_printf_float+0x178>
 801fe30:	6121      	str	r1, [r4, #16]
 801fe32:	b913      	cbnz	r3, 801fe3a <_printf_float+0x16a>
 801fe34:	6822      	ldr	r2, [r4, #0]
 801fe36:	07d0      	lsls	r0, r2, #31
 801fe38:	d502      	bpl.n	801fe40 <_printf_float+0x170>
 801fe3a:	3301      	adds	r3, #1
 801fe3c:	440b      	add	r3, r1
 801fe3e:	6123      	str	r3, [r4, #16]
 801fe40:	2300      	movs	r3, #0
 801fe42:	65a1      	str	r1, [r4, #88]	; 0x58
 801fe44:	9304      	str	r3, [sp, #16]
 801fe46:	e7de      	b.n	801fe06 <_printf_float+0x136>
 801fe48:	b913      	cbnz	r3, 801fe50 <_printf_float+0x180>
 801fe4a:	6822      	ldr	r2, [r4, #0]
 801fe4c:	07d2      	lsls	r2, r2, #31
 801fe4e:	d501      	bpl.n	801fe54 <_printf_float+0x184>
 801fe50:	3302      	adds	r3, #2
 801fe52:	e7f4      	b.n	801fe3e <_printf_float+0x16e>
 801fe54:	2301      	movs	r3, #1
 801fe56:	e7f2      	b.n	801fe3e <_printf_float+0x16e>
 801fe58:	f04f 0967 	mov.w	r9, #103	; 0x67
 801fe5c:	9b08      	ldr	r3, [sp, #32]
 801fe5e:	4299      	cmp	r1, r3
 801fe60:	db05      	blt.n	801fe6e <_printf_float+0x19e>
 801fe62:	6823      	ldr	r3, [r4, #0]
 801fe64:	6121      	str	r1, [r4, #16]
 801fe66:	07d8      	lsls	r0, r3, #31
 801fe68:	d5ea      	bpl.n	801fe40 <_printf_float+0x170>
 801fe6a:	1c4b      	adds	r3, r1, #1
 801fe6c:	e7e7      	b.n	801fe3e <_printf_float+0x16e>
 801fe6e:	2900      	cmp	r1, #0
 801fe70:	bfd4      	ite	le
 801fe72:	f1c1 0202 	rsble	r2, r1, #2
 801fe76:	2201      	movgt	r2, #1
 801fe78:	4413      	add	r3, r2
 801fe7a:	e7e0      	b.n	801fe3e <_printf_float+0x16e>
 801fe7c:	6823      	ldr	r3, [r4, #0]
 801fe7e:	055a      	lsls	r2, r3, #21
 801fe80:	d407      	bmi.n	801fe92 <_printf_float+0x1c2>
 801fe82:	6923      	ldr	r3, [r4, #16]
 801fe84:	4642      	mov	r2, r8
 801fe86:	4631      	mov	r1, r6
 801fe88:	4628      	mov	r0, r5
 801fe8a:	47b8      	blx	r7
 801fe8c:	3001      	adds	r0, #1
 801fe8e:	d12a      	bne.n	801fee6 <_printf_float+0x216>
 801fe90:	e76a      	b.n	801fd68 <_printf_float+0x98>
 801fe92:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fe96:	f240 80e0 	bls.w	802005a <_printf_float+0x38a>
 801fe9a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fe9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fea6:	d133      	bne.n	801ff10 <_printf_float+0x240>
 801fea8:	4a37      	ldr	r2, [pc, #220]	; (801ff88 <_printf_float+0x2b8>)
 801feaa:	2301      	movs	r3, #1
 801feac:	4631      	mov	r1, r6
 801feae:	4628      	mov	r0, r5
 801feb0:	47b8      	blx	r7
 801feb2:	3001      	adds	r0, #1
 801feb4:	f43f af58 	beq.w	801fd68 <_printf_float+0x98>
 801feb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801febc:	429a      	cmp	r2, r3
 801febe:	db02      	blt.n	801fec6 <_printf_float+0x1f6>
 801fec0:	6823      	ldr	r3, [r4, #0]
 801fec2:	07d8      	lsls	r0, r3, #31
 801fec4:	d50f      	bpl.n	801fee6 <_printf_float+0x216>
 801fec6:	4653      	mov	r3, sl
 801fec8:	465a      	mov	r2, fp
 801feca:	4631      	mov	r1, r6
 801fecc:	4628      	mov	r0, r5
 801fece:	47b8      	blx	r7
 801fed0:	3001      	adds	r0, #1
 801fed2:	f43f af49 	beq.w	801fd68 <_printf_float+0x98>
 801fed6:	f04f 0800 	mov.w	r8, #0
 801feda:	f104 091a 	add.w	r9, r4, #26
 801fede:	9b08      	ldr	r3, [sp, #32]
 801fee0:	3b01      	subs	r3, #1
 801fee2:	4543      	cmp	r3, r8
 801fee4:	dc09      	bgt.n	801fefa <_printf_float+0x22a>
 801fee6:	6823      	ldr	r3, [r4, #0]
 801fee8:	079b      	lsls	r3, r3, #30
 801feea:	f100 8106 	bmi.w	80200fa <_printf_float+0x42a>
 801feee:	68e0      	ldr	r0, [r4, #12]
 801fef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fef2:	4298      	cmp	r0, r3
 801fef4:	bfb8      	it	lt
 801fef6:	4618      	movlt	r0, r3
 801fef8:	e738      	b.n	801fd6c <_printf_float+0x9c>
 801fefa:	2301      	movs	r3, #1
 801fefc:	464a      	mov	r2, r9
 801fefe:	4631      	mov	r1, r6
 801ff00:	4628      	mov	r0, r5
 801ff02:	47b8      	blx	r7
 801ff04:	3001      	adds	r0, #1
 801ff06:	f43f af2f 	beq.w	801fd68 <_printf_float+0x98>
 801ff0a:	f108 0801 	add.w	r8, r8, #1
 801ff0e:	e7e6      	b.n	801fede <_printf_float+0x20e>
 801ff10:	9b07      	ldr	r3, [sp, #28]
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	dc3a      	bgt.n	801ff8c <_printf_float+0x2bc>
 801ff16:	4a1c      	ldr	r2, [pc, #112]	; (801ff88 <_printf_float+0x2b8>)
 801ff18:	2301      	movs	r3, #1
 801ff1a:	4631      	mov	r1, r6
 801ff1c:	4628      	mov	r0, r5
 801ff1e:	47b8      	blx	r7
 801ff20:	3001      	adds	r0, #1
 801ff22:	f43f af21 	beq.w	801fd68 <_printf_float+0x98>
 801ff26:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ff2a:	4313      	orrs	r3, r2
 801ff2c:	d102      	bne.n	801ff34 <_printf_float+0x264>
 801ff2e:	6823      	ldr	r3, [r4, #0]
 801ff30:	07d9      	lsls	r1, r3, #31
 801ff32:	d5d8      	bpl.n	801fee6 <_printf_float+0x216>
 801ff34:	4653      	mov	r3, sl
 801ff36:	465a      	mov	r2, fp
 801ff38:	4631      	mov	r1, r6
 801ff3a:	4628      	mov	r0, r5
 801ff3c:	47b8      	blx	r7
 801ff3e:	3001      	adds	r0, #1
 801ff40:	f43f af12 	beq.w	801fd68 <_printf_float+0x98>
 801ff44:	f04f 0900 	mov.w	r9, #0
 801ff48:	f104 0a1a 	add.w	sl, r4, #26
 801ff4c:	9b07      	ldr	r3, [sp, #28]
 801ff4e:	425b      	negs	r3, r3
 801ff50:	454b      	cmp	r3, r9
 801ff52:	dc01      	bgt.n	801ff58 <_printf_float+0x288>
 801ff54:	9b08      	ldr	r3, [sp, #32]
 801ff56:	e795      	b.n	801fe84 <_printf_float+0x1b4>
 801ff58:	2301      	movs	r3, #1
 801ff5a:	4652      	mov	r2, sl
 801ff5c:	4631      	mov	r1, r6
 801ff5e:	4628      	mov	r0, r5
 801ff60:	47b8      	blx	r7
 801ff62:	3001      	adds	r0, #1
 801ff64:	f43f af00 	beq.w	801fd68 <_printf_float+0x98>
 801ff68:	f109 0901 	add.w	r9, r9, #1
 801ff6c:	e7ee      	b.n	801ff4c <_printf_float+0x27c>
 801ff6e:	bf00      	nop
 801ff70:	ffffffff 	.word	0xffffffff
 801ff74:	7fefffff 	.word	0x7fefffff
 801ff78:	08025e6c 	.word	0x08025e6c
 801ff7c:	08025e70 	.word	0x08025e70
 801ff80:	08025e74 	.word	0x08025e74
 801ff84:	08025e78 	.word	0x08025e78
 801ff88:	08025e7c 	.word	0x08025e7c
 801ff8c:	9a08      	ldr	r2, [sp, #32]
 801ff8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ff90:	429a      	cmp	r2, r3
 801ff92:	bfa8      	it	ge
 801ff94:	461a      	movge	r2, r3
 801ff96:	2a00      	cmp	r2, #0
 801ff98:	4691      	mov	r9, r2
 801ff9a:	dc38      	bgt.n	802000e <_printf_float+0x33e>
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	9305      	str	r3, [sp, #20]
 801ffa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ffa4:	f104 021a 	add.w	r2, r4, #26
 801ffa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ffaa:	9905      	ldr	r1, [sp, #20]
 801ffac:	9304      	str	r3, [sp, #16]
 801ffae:	eba3 0309 	sub.w	r3, r3, r9
 801ffb2:	428b      	cmp	r3, r1
 801ffb4:	dc33      	bgt.n	802001e <_printf_float+0x34e>
 801ffb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ffba:	429a      	cmp	r2, r3
 801ffbc:	db3c      	blt.n	8020038 <_printf_float+0x368>
 801ffbe:	6823      	ldr	r3, [r4, #0]
 801ffc0:	07da      	lsls	r2, r3, #31
 801ffc2:	d439      	bmi.n	8020038 <_printf_float+0x368>
 801ffc4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ffc8:	eba2 0903 	sub.w	r9, r2, r3
 801ffcc:	9b04      	ldr	r3, [sp, #16]
 801ffce:	1ad2      	subs	r2, r2, r3
 801ffd0:	4591      	cmp	r9, r2
 801ffd2:	bfa8      	it	ge
 801ffd4:	4691      	movge	r9, r2
 801ffd6:	f1b9 0f00 	cmp.w	r9, #0
 801ffda:	dc35      	bgt.n	8020048 <_printf_float+0x378>
 801ffdc:	f04f 0800 	mov.w	r8, #0
 801ffe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ffe4:	f104 0a1a 	add.w	sl, r4, #26
 801ffe8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ffec:	1a9b      	subs	r3, r3, r2
 801ffee:	eba3 0309 	sub.w	r3, r3, r9
 801fff2:	4543      	cmp	r3, r8
 801fff4:	f77f af77 	ble.w	801fee6 <_printf_float+0x216>
 801fff8:	2301      	movs	r3, #1
 801fffa:	4652      	mov	r2, sl
 801fffc:	4631      	mov	r1, r6
 801fffe:	4628      	mov	r0, r5
 8020000:	47b8      	blx	r7
 8020002:	3001      	adds	r0, #1
 8020004:	f43f aeb0 	beq.w	801fd68 <_printf_float+0x98>
 8020008:	f108 0801 	add.w	r8, r8, #1
 802000c:	e7ec      	b.n	801ffe8 <_printf_float+0x318>
 802000e:	4613      	mov	r3, r2
 8020010:	4631      	mov	r1, r6
 8020012:	4642      	mov	r2, r8
 8020014:	4628      	mov	r0, r5
 8020016:	47b8      	blx	r7
 8020018:	3001      	adds	r0, #1
 802001a:	d1bf      	bne.n	801ff9c <_printf_float+0x2cc>
 802001c:	e6a4      	b.n	801fd68 <_printf_float+0x98>
 802001e:	2301      	movs	r3, #1
 8020020:	4631      	mov	r1, r6
 8020022:	4628      	mov	r0, r5
 8020024:	9204      	str	r2, [sp, #16]
 8020026:	47b8      	blx	r7
 8020028:	3001      	adds	r0, #1
 802002a:	f43f ae9d 	beq.w	801fd68 <_printf_float+0x98>
 802002e:	9b05      	ldr	r3, [sp, #20]
 8020030:	9a04      	ldr	r2, [sp, #16]
 8020032:	3301      	adds	r3, #1
 8020034:	9305      	str	r3, [sp, #20]
 8020036:	e7b7      	b.n	801ffa8 <_printf_float+0x2d8>
 8020038:	4653      	mov	r3, sl
 802003a:	465a      	mov	r2, fp
 802003c:	4631      	mov	r1, r6
 802003e:	4628      	mov	r0, r5
 8020040:	47b8      	blx	r7
 8020042:	3001      	adds	r0, #1
 8020044:	d1be      	bne.n	801ffc4 <_printf_float+0x2f4>
 8020046:	e68f      	b.n	801fd68 <_printf_float+0x98>
 8020048:	9a04      	ldr	r2, [sp, #16]
 802004a:	464b      	mov	r3, r9
 802004c:	4442      	add	r2, r8
 802004e:	4631      	mov	r1, r6
 8020050:	4628      	mov	r0, r5
 8020052:	47b8      	blx	r7
 8020054:	3001      	adds	r0, #1
 8020056:	d1c1      	bne.n	801ffdc <_printf_float+0x30c>
 8020058:	e686      	b.n	801fd68 <_printf_float+0x98>
 802005a:	9a08      	ldr	r2, [sp, #32]
 802005c:	2a01      	cmp	r2, #1
 802005e:	dc01      	bgt.n	8020064 <_printf_float+0x394>
 8020060:	07db      	lsls	r3, r3, #31
 8020062:	d537      	bpl.n	80200d4 <_printf_float+0x404>
 8020064:	2301      	movs	r3, #1
 8020066:	4642      	mov	r2, r8
 8020068:	4631      	mov	r1, r6
 802006a:	4628      	mov	r0, r5
 802006c:	47b8      	blx	r7
 802006e:	3001      	adds	r0, #1
 8020070:	f43f ae7a 	beq.w	801fd68 <_printf_float+0x98>
 8020074:	4653      	mov	r3, sl
 8020076:	465a      	mov	r2, fp
 8020078:	4631      	mov	r1, r6
 802007a:	4628      	mov	r0, r5
 802007c:	47b8      	blx	r7
 802007e:	3001      	adds	r0, #1
 8020080:	f43f ae72 	beq.w	801fd68 <_printf_float+0x98>
 8020084:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020088:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802008c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020090:	9b08      	ldr	r3, [sp, #32]
 8020092:	d01a      	beq.n	80200ca <_printf_float+0x3fa>
 8020094:	3b01      	subs	r3, #1
 8020096:	f108 0201 	add.w	r2, r8, #1
 802009a:	4631      	mov	r1, r6
 802009c:	4628      	mov	r0, r5
 802009e:	47b8      	blx	r7
 80200a0:	3001      	adds	r0, #1
 80200a2:	d10e      	bne.n	80200c2 <_printf_float+0x3f2>
 80200a4:	e660      	b.n	801fd68 <_printf_float+0x98>
 80200a6:	2301      	movs	r3, #1
 80200a8:	464a      	mov	r2, r9
 80200aa:	4631      	mov	r1, r6
 80200ac:	4628      	mov	r0, r5
 80200ae:	47b8      	blx	r7
 80200b0:	3001      	adds	r0, #1
 80200b2:	f43f ae59 	beq.w	801fd68 <_printf_float+0x98>
 80200b6:	f108 0801 	add.w	r8, r8, #1
 80200ba:	9b08      	ldr	r3, [sp, #32]
 80200bc:	3b01      	subs	r3, #1
 80200be:	4543      	cmp	r3, r8
 80200c0:	dcf1      	bgt.n	80200a6 <_printf_float+0x3d6>
 80200c2:	9b04      	ldr	r3, [sp, #16]
 80200c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80200c8:	e6dd      	b.n	801fe86 <_printf_float+0x1b6>
 80200ca:	f04f 0800 	mov.w	r8, #0
 80200ce:	f104 091a 	add.w	r9, r4, #26
 80200d2:	e7f2      	b.n	80200ba <_printf_float+0x3ea>
 80200d4:	2301      	movs	r3, #1
 80200d6:	4642      	mov	r2, r8
 80200d8:	e7df      	b.n	802009a <_printf_float+0x3ca>
 80200da:	2301      	movs	r3, #1
 80200dc:	464a      	mov	r2, r9
 80200de:	4631      	mov	r1, r6
 80200e0:	4628      	mov	r0, r5
 80200e2:	47b8      	blx	r7
 80200e4:	3001      	adds	r0, #1
 80200e6:	f43f ae3f 	beq.w	801fd68 <_printf_float+0x98>
 80200ea:	f108 0801 	add.w	r8, r8, #1
 80200ee:	68e3      	ldr	r3, [r4, #12]
 80200f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80200f2:	1a5b      	subs	r3, r3, r1
 80200f4:	4543      	cmp	r3, r8
 80200f6:	dcf0      	bgt.n	80200da <_printf_float+0x40a>
 80200f8:	e6f9      	b.n	801feee <_printf_float+0x21e>
 80200fa:	f04f 0800 	mov.w	r8, #0
 80200fe:	f104 0919 	add.w	r9, r4, #25
 8020102:	e7f4      	b.n	80200ee <_printf_float+0x41e>

08020104 <_printf_common>:
 8020104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020108:	4616      	mov	r6, r2
 802010a:	4699      	mov	r9, r3
 802010c:	688a      	ldr	r2, [r1, #8]
 802010e:	690b      	ldr	r3, [r1, #16]
 8020110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020114:	4293      	cmp	r3, r2
 8020116:	bfb8      	it	lt
 8020118:	4613      	movlt	r3, r2
 802011a:	6033      	str	r3, [r6, #0]
 802011c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020120:	4607      	mov	r7, r0
 8020122:	460c      	mov	r4, r1
 8020124:	b10a      	cbz	r2, 802012a <_printf_common+0x26>
 8020126:	3301      	adds	r3, #1
 8020128:	6033      	str	r3, [r6, #0]
 802012a:	6823      	ldr	r3, [r4, #0]
 802012c:	0699      	lsls	r1, r3, #26
 802012e:	bf42      	ittt	mi
 8020130:	6833      	ldrmi	r3, [r6, #0]
 8020132:	3302      	addmi	r3, #2
 8020134:	6033      	strmi	r3, [r6, #0]
 8020136:	6825      	ldr	r5, [r4, #0]
 8020138:	f015 0506 	ands.w	r5, r5, #6
 802013c:	d106      	bne.n	802014c <_printf_common+0x48>
 802013e:	f104 0a19 	add.w	sl, r4, #25
 8020142:	68e3      	ldr	r3, [r4, #12]
 8020144:	6832      	ldr	r2, [r6, #0]
 8020146:	1a9b      	subs	r3, r3, r2
 8020148:	42ab      	cmp	r3, r5
 802014a:	dc26      	bgt.n	802019a <_printf_common+0x96>
 802014c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020150:	1e13      	subs	r3, r2, #0
 8020152:	6822      	ldr	r2, [r4, #0]
 8020154:	bf18      	it	ne
 8020156:	2301      	movne	r3, #1
 8020158:	0692      	lsls	r2, r2, #26
 802015a:	d42b      	bmi.n	80201b4 <_printf_common+0xb0>
 802015c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020160:	4649      	mov	r1, r9
 8020162:	4638      	mov	r0, r7
 8020164:	47c0      	blx	r8
 8020166:	3001      	adds	r0, #1
 8020168:	d01e      	beq.n	80201a8 <_printf_common+0xa4>
 802016a:	6823      	ldr	r3, [r4, #0]
 802016c:	6922      	ldr	r2, [r4, #16]
 802016e:	f003 0306 	and.w	r3, r3, #6
 8020172:	2b04      	cmp	r3, #4
 8020174:	bf02      	ittt	eq
 8020176:	68e5      	ldreq	r5, [r4, #12]
 8020178:	6833      	ldreq	r3, [r6, #0]
 802017a:	1aed      	subeq	r5, r5, r3
 802017c:	68a3      	ldr	r3, [r4, #8]
 802017e:	bf0c      	ite	eq
 8020180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020184:	2500      	movne	r5, #0
 8020186:	4293      	cmp	r3, r2
 8020188:	bfc4      	itt	gt
 802018a:	1a9b      	subgt	r3, r3, r2
 802018c:	18ed      	addgt	r5, r5, r3
 802018e:	2600      	movs	r6, #0
 8020190:	341a      	adds	r4, #26
 8020192:	42b5      	cmp	r5, r6
 8020194:	d11a      	bne.n	80201cc <_printf_common+0xc8>
 8020196:	2000      	movs	r0, #0
 8020198:	e008      	b.n	80201ac <_printf_common+0xa8>
 802019a:	2301      	movs	r3, #1
 802019c:	4652      	mov	r2, sl
 802019e:	4649      	mov	r1, r9
 80201a0:	4638      	mov	r0, r7
 80201a2:	47c0      	blx	r8
 80201a4:	3001      	adds	r0, #1
 80201a6:	d103      	bne.n	80201b0 <_printf_common+0xac>
 80201a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80201ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201b0:	3501      	adds	r5, #1
 80201b2:	e7c6      	b.n	8020142 <_printf_common+0x3e>
 80201b4:	18e1      	adds	r1, r4, r3
 80201b6:	1c5a      	adds	r2, r3, #1
 80201b8:	2030      	movs	r0, #48	; 0x30
 80201ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80201be:	4422      	add	r2, r4
 80201c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80201c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80201c8:	3302      	adds	r3, #2
 80201ca:	e7c7      	b.n	802015c <_printf_common+0x58>
 80201cc:	2301      	movs	r3, #1
 80201ce:	4622      	mov	r2, r4
 80201d0:	4649      	mov	r1, r9
 80201d2:	4638      	mov	r0, r7
 80201d4:	47c0      	blx	r8
 80201d6:	3001      	adds	r0, #1
 80201d8:	d0e6      	beq.n	80201a8 <_printf_common+0xa4>
 80201da:	3601      	adds	r6, #1
 80201dc:	e7d9      	b.n	8020192 <_printf_common+0x8e>
	...

080201e0 <_printf_i>:
 80201e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80201e4:	7e0f      	ldrb	r7, [r1, #24]
 80201e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80201e8:	2f78      	cmp	r7, #120	; 0x78
 80201ea:	4691      	mov	r9, r2
 80201ec:	4680      	mov	r8, r0
 80201ee:	460c      	mov	r4, r1
 80201f0:	469a      	mov	sl, r3
 80201f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80201f6:	d807      	bhi.n	8020208 <_printf_i+0x28>
 80201f8:	2f62      	cmp	r7, #98	; 0x62
 80201fa:	d80a      	bhi.n	8020212 <_printf_i+0x32>
 80201fc:	2f00      	cmp	r7, #0
 80201fe:	f000 80d4 	beq.w	80203aa <_printf_i+0x1ca>
 8020202:	2f58      	cmp	r7, #88	; 0x58
 8020204:	f000 80c0 	beq.w	8020388 <_printf_i+0x1a8>
 8020208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802020c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020210:	e03a      	b.n	8020288 <_printf_i+0xa8>
 8020212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020216:	2b15      	cmp	r3, #21
 8020218:	d8f6      	bhi.n	8020208 <_printf_i+0x28>
 802021a:	a101      	add	r1, pc, #4	; (adr r1, 8020220 <_printf_i+0x40>)
 802021c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020220:	08020279 	.word	0x08020279
 8020224:	0802028d 	.word	0x0802028d
 8020228:	08020209 	.word	0x08020209
 802022c:	08020209 	.word	0x08020209
 8020230:	08020209 	.word	0x08020209
 8020234:	08020209 	.word	0x08020209
 8020238:	0802028d 	.word	0x0802028d
 802023c:	08020209 	.word	0x08020209
 8020240:	08020209 	.word	0x08020209
 8020244:	08020209 	.word	0x08020209
 8020248:	08020209 	.word	0x08020209
 802024c:	08020391 	.word	0x08020391
 8020250:	080202b9 	.word	0x080202b9
 8020254:	0802034b 	.word	0x0802034b
 8020258:	08020209 	.word	0x08020209
 802025c:	08020209 	.word	0x08020209
 8020260:	080203b3 	.word	0x080203b3
 8020264:	08020209 	.word	0x08020209
 8020268:	080202b9 	.word	0x080202b9
 802026c:	08020209 	.word	0x08020209
 8020270:	08020209 	.word	0x08020209
 8020274:	08020353 	.word	0x08020353
 8020278:	682b      	ldr	r3, [r5, #0]
 802027a:	1d1a      	adds	r2, r3, #4
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	602a      	str	r2, [r5, #0]
 8020280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020288:	2301      	movs	r3, #1
 802028a:	e09f      	b.n	80203cc <_printf_i+0x1ec>
 802028c:	6820      	ldr	r0, [r4, #0]
 802028e:	682b      	ldr	r3, [r5, #0]
 8020290:	0607      	lsls	r7, r0, #24
 8020292:	f103 0104 	add.w	r1, r3, #4
 8020296:	6029      	str	r1, [r5, #0]
 8020298:	d501      	bpl.n	802029e <_printf_i+0xbe>
 802029a:	681e      	ldr	r6, [r3, #0]
 802029c:	e003      	b.n	80202a6 <_printf_i+0xc6>
 802029e:	0646      	lsls	r6, r0, #25
 80202a0:	d5fb      	bpl.n	802029a <_printf_i+0xba>
 80202a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80202a6:	2e00      	cmp	r6, #0
 80202a8:	da03      	bge.n	80202b2 <_printf_i+0xd2>
 80202aa:	232d      	movs	r3, #45	; 0x2d
 80202ac:	4276      	negs	r6, r6
 80202ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80202b2:	485a      	ldr	r0, [pc, #360]	; (802041c <_printf_i+0x23c>)
 80202b4:	230a      	movs	r3, #10
 80202b6:	e012      	b.n	80202de <_printf_i+0xfe>
 80202b8:	682b      	ldr	r3, [r5, #0]
 80202ba:	6820      	ldr	r0, [r4, #0]
 80202bc:	1d19      	adds	r1, r3, #4
 80202be:	6029      	str	r1, [r5, #0]
 80202c0:	0605      	lsls	r5, r0, #24
 80202c2:	d501      	bpl.n	80202c8 <_printf_i+0xe8>
 80202c4:	681e      	ldr	r6, [r3, #0]
 80202c6:	e002      	b.n	80202ce <_printf_i+0xee>
 80202c8:	0641      	lsls	r1, r0, #25
 80202ca:	d5fb      	bpl.n	80202c4 <_printf_i+0xe4>
 80202cc:	881e      	ldrh	r6, [r3, #0]
 80202ce:	4853      	ldr	r0, [pc, #332]	; (802041c <_printf_i+0x23c>)
 80202d0:	2f6f      	cmp	r7, #111	; 0x6f
 80202d2:	bf0c      	ite	eq
 80202d4:	2308      	moveq	r3, #8
 80202d6:	230a      	movne	r3, #10
 80202d8:	2100      	movs	r1, #0
 80202da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80202de:	6865      	ldr	r5, [r4, #4]
 80202e0:	60a5      	str	r5, [r4, #8]
 80202e2:	2d00      	cmp	r5, #0
 80202e4:	bfa2      	ittt	ge
 80202e6:	6821      	ldrge	r1, [r4, #0]
 80202e8:	f021 0104 	bicge.w	r1, r1, #4
 80202ec:	6021      	strge	r1, [r4, #0]
 80202ee:	b90e      	cbnz	r6, 80202f4 <_printf_i+0x114>
 80202f0:	2d00      	cmp	r5, #0
 80202f2:	d04b      	beq.n	802038c <_printf_i+0x1ac>
 80202f4:	4615      	mov	r5, r2
 80202f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80202fa:	fb03 6711 	mls	r7, r3, r1, r6
 80202fe:	5dc7      	ldrb	r7, [r0, r7]
 8020300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020304:	4637      	mov	r7, r6
 8020306:	42bb      	cmp	r3, r7
 8020308:	460e      	mov	r6, r1
 802030a:	d9f4      	bls.n	80202f6 <_printf_i+0x116>
 802030c:	2b08      	cmp	r3, #8
 802030e:	d10b      	bne.n	8020328 <_printf_i+0x148>
 8020310:	6823      	ldr	r3, [r4, #0]
 8020312:	07de      	lsls	r6, r3, #31
 8020314:	d508      	bpl.n	8020328 <_printf_i+0x148>
 8020316:	6923      	ldr	r3, [r4, #16]
 8020318:	6861      	ldr	r1, [r4, #4]
 802031a:	4299      	cmp	r1, r3
 802031c:	bfde      	ittt	le
 802031e:	2330      	movle	r3, #48	; 0x30
 8020320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020324:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020328:	1b52      	subs	r2, r2, r5
 802032a:	6122      	str	r2, [r4, #16]
 802032c:	f8cd a000 	str.w	sl, [sp]
 8020330:	464b      	mov	r3, r9
 8020332:	aa03      	add	r2, sp, #12
 8020334:	4621      	mov	r1, r4
 8020336:	4640      	mov	r0, r8
 8020338:	f7ff fee4 	bl	8020104 <_printf_common>
 802033c:	3001      	adds	r0, #1
 802033e:	d14a      	bne.n	80203d6 <_printf_i+0x1f6>
 8020340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020344:	b004      	add	sp, #16
 8020346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802034a:	6823      	ldr	r3, [r4, #0]
 802034c:	f043 0320 	orr.w	r3, r3, #32
 8020350:	6023      	str	r3, [r4, #0]
 8020352:	4833      	ldr	r0, [pc, #204]	; (8020420 <_printf_i+0x240>)
 8020354:	2778      	movs	r7, #120	; 0x78
 8020356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802035a:	6823      	ldr	r3, [r4, #0]
 802035c:	6829      	ldr	r1, [r5, #0]
 802035e:	061f      	lsls	r7, r3, #24
 8020360:	f851 6b04 	ldr.w	r6, [r1], #4
 8020364:	d402      	bmi.n	802036c <_printf_i+0x18c>
 8020366:	065f      	lsls	r7, r3, #25
 8020368:	bf48      	it	mi
 802036a:	b2b6      	uxthmi	r6, r6
 802036c:	07df      	lsls	r7, r3, #31
 802036e:	bf48      	it	mi
 8020370:	f043 0320 	orrmi.w	r3, r3, #32
 8020374:	6029      	str	r1, [r5, #0]
 8020376:	bf48      	it	mi
 8020378:	6023      	strmi	r3, [r4, #0]
 802037a:	b91e      	cbnz	r6, 8020384 <_printf_i+0x1a4>
 802037c:	6823      	ldr	r3, [r4, #0]
 802037e:	f023 0320 	bic.w	r3, r3, #32
 8020382:	6023      	str	r3, [r4, #0]
 8020384:	2310      	movs	r3, #16
 8020386:	e7a7      	b.n	80202d8 <_printf_i+0xf8>
 8020388:	4824      	ldr	r0, [pc, #144]	; (802041c <_printf_i+0x23c>)
 802038a:	e7e4      	b.n	8020356 <_printf_i+0x176>
 802038c:	4615      	mov	r5, r2
 802038e:	e7bd      	b.n	802030c <_printf_i+0x12c>
 8020390:	682b      	ldr	r3, [r5, #0]
 8020392:	6826      	ldr	r6, [r4, #0]
 8020394:	6961      	ldr	r1, [r4, #20]
 8020396:	1d18      	adds	r0, r3, #4
 8020398:	6028      	str	r0, [r5, #0]
 802039a:	0635      	lsls	r5, r6, #24
 802039c:	681b      	ldr	r3, [r3, #0]
 802039e:	d501      	bpl.n	80203a4 <_printf_i+0x1c4>
 80203a0:	6019      	str	r1, [r3, #0]
 80203a2:	e002      	b.n	80203aa <_printf_i+0x1ca>
 80203a4:	0670      	lsls	r0, r6, #25
 80203a6:	d5fb      	bpl.n	80203a0 <_printf_i+0x1c0>
 80203a8:	8019      	strh	r1, [r3, #0]
 80203aa:	2300      	movs	r3, #0
 80203ac:	6123      	str	r3, [r4, #16]
 80203ae:	4615      	mov	r5, r2
 80203b0:	e7bc      	b.n	802032c <_printf_i+0x14c>
 80203b2:	682b      	ldr	r3, [r5, #0]
 80203b4:	1d1a      	adds	r2, r3, #4
 80203b6:	602a      	str	r2, [r5, #0]
 80203b8:	681d      	ldr	r5, [r3, #0]
 80203ba:	6862      	ldr	r2, [r4, #4]
 80203bc:	2100      	movs	r1, #0
 80203be:	4628      	mov	r0, r5
 80203c0:	f7df ff4e 	bl	8000260 <memchr>
 80203c4:	b108      	cbz	r0, 80203ca <_printf_i+0x1ea>
 80203c6:	1b40      	subs	r0, r0, r5
 80203c8:	6060      	str	r0, [r4, #4]
 80203ca:	6863      	ldr	r3, [r4, #4]
 80203cc:	6123      	str	r3, [r4, #16]
 80203ce:	2300      	movs	r3, #0
 80203d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80203d4:	e7aa      	b.n	802032c <_printf_i+0x14c>
 80203d6:	6923      	ldr	r3, [r4, #16]
 80203d8:	462a      	mov	r2, r5
 80203da:	4649      	mov	r1, r9
 80203dc:	4640      	mov	r0, r8
 80203de:	47d0      	blx	sl
 80203e0:	3001      	adds	r0, #1
 80203e2:	d0ad      	beq.n	8020340 <_printf_i+0x160>
 80203e4:	6823      	ldr	r3, [r4, #0]
 80203e6:	079b      	lsls	r3, r3, #30
 80203e8:	d413      	bmi.n	8020412 <_printf_i+0x232>
 80203ea:	68e0      	ldr	r0, [r4, #12]
 80203ec:	9b03      	ldr	r3, [sp, #12]
 80203ee:	4298      	cmp	r0, r3
 80203f0:	bfb8      	it	lt
 80203f2:	4618      	movlt	r0, r3
 80203f4:	e7a6      	b.n	8020344 <_printf_i+0x164>
 80203f6:	2301      	movs	r3, #1
 80203f8:	4632      	mov	r2, r6
 80203fa:	4649      	mov	r1, r9
 80203fc:	4640      	mov	r0, r8
 80203fe:	47d0      	blx	sl
 8020400:	3001      	adds	r0, #1
 8020402:	d09d      	beq.n	8020340 <_printf_i+0x160>
 8020404:	3501      	adds	r5, #1
 8020406:	68e3      	ldr	r3, [r4, #12]
 8020408:	9903      	ldr	r1, [sp, #12]
 802040a:	1a5b      	subs	r3, r3, r1
 802040c:	42ab      	cmp	r3, r5
 802040e:	dcf2      	bgt.n	80203f6 <_printf_i+0x216>
 8020410:	e7eb      	b.n	80203ea <_printf_i+0x20a>
 8020412:	2500      	movs	r5, #0
 8020414:	f104 0619 	add.w	r6, r4, #25
 8020418:	e7f5      	b.n	8020406 <_printf_i+0x226>
 802041a:	bf00      	nop
 802041c:	08025e7e 	.word	0x08025e7e
 8020420:	08025e8f 	.word	0x08025e8f

08020424 <_scanf_float>:
 8020424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020428:	b087      	sub	sp, #28
 802042a:	4617      	mov	r7, r2
 802042c:	9303      	str	r3, [sp, #12]
 802042e:	688b      	ldr	r3, [r1, #8]
 8020430:	1e5a      	subs	r2, r3, #1
 8020432:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020436:	bf83      	ittte	hi
 8020438:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802043c:	195b      	addhi	r3, r3, r5
 802043e:	9302      	strhi	r3, [sp, #8]
 8020440:	2300      	movls	r3, #0
 8020442:	bf86      	itte	hi
 8020444:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020448:	608b      	strhi	r3, [r1, #8]
 802044a:	9302      	strls	r3, [sp, #8]
 802044c:	680b      	ldr	r3, [r1, #0]
 802044e:	468b      	mov	fp, r1
 8020450:	2500      	movs	r5, #0
 8020452:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8020456:	f84b 3b1c 	str.w	r3, [fp], #28
 802045a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802045e:	4680      	mov	r8, r0
 8020460:	460c      	mov	r4, r1
 8020462:	465e      	mov	r6, fp
 8020464:	46aa      	mov	sl, r5
 8020466:	46a9      	mov	r9, r5
 8020468:	9501      	str	r5, [sp, #4]
 802046a:	68a2      	ldr	r2, [r4, #8]
 802046c:	b152      	cbz	r2, 8020484 <_scanf_float+0x60>
 802046e:	683b      	ldr	r3, [r7, #0]
 8020470:	781b      	ldrb	r3, [r3, #0]
 8020472:	2b4e      	cmp	r3, #78	; 0x4e
 8020474:	d864      	bhi.n	8020540 <_scanf_float+0x11c>
 8020476:	2b40      	cmp	r3, #64	; 0x40
 8020478:	d83c      	bhi.n	80204f4 <_scanf_float+0xd0>
 802047a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802047e:	b2c8      	uxtb	r0, r1
 8020480:	280e      	cmp	r0, #14
 8020482:	d93a      	bls.n	80204fa <_scanf_float+0xd6>
 8020484:	f1b9 0f00 	cmp.w	r9, #0
 8020488:	d003      	beq.n	8020492 <_scanf_float+0x6e>
 802048a:	6823      	ldr	r3, [r4, #0]
 802048c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020490:	6023      	str	r3, [r4, #0]
 8020492:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020496:	f1ba 0f01 	cmp.w	sl, #1
 802049a:	f200 8113 	bhi.w	80206c4 <_scanf_float+0x2a0>
 802049e:	455e      	cmp	r6, fp
 80204a0:	f200 8105 	bhi.w	80206ae <_scanf_float+0x28a>
 80204a4:	2501      	movs	r5, #1
 80204a6:	4628      	mov	r0, r5
 80204a8:	b007      	add	sp, #28
 80204aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80204b2:	2a0d      	cmp	r2, #13
 80204b4:	d8e6      	bhi.n	8020484 <_scanf_float+0x60>
 80204b6:	a101      	add	r1, pc, #4	; (adr r1, 80204bc <_scanf_float+0x98>)
 80204b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80204bc:	080205fb 	.word	0x080205fb
 80204c0:	08020485 	.word	0x08020485
 80204c4:	08020485 	.word	0x08020485
 80204c8:	08020485 	.word	0x08020485
 80204cc:	0802065b 	.word	0x0802065b
 80204d0:	08020633 	.word	0x08020633
 80204d4:	08020485 	.word	0x08020485
 80204d8:	08020485 	.word	0x08020485
 80204dc:	08020609 	.word	0x08020609
 80204e0:	08020485 	.word	0x08020485
 80204e4:	08020485 	.word	0x08020485
 80204e8:	08020485 	.word	0x08020485
 80204ec:	08020485 	.word	0x08020485
 80204f0:	080205c1 	.word	0x080205c1
 80204f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80204f8:	e7db      	b.n	80204b2 <_scanf_float+0x8e>
 80204fa:	290e      	cmp	r1, #14
 80204fc:	d8c2      	bhi.n	8020484 <_scanf_float+0x60>
 80204fe:	a001      	add	r0, pc, #4	; (adr r0, 8020504 <_scanf_float+0xe0>)
 8020500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8020504:	080205b3 	.word	0x080205b3
 8020508:	08020485 	.word	0x08020485
 802050c:	080205b3 	.word	0x080205b3
 8020510:	08020647 	.word	0x08020647
 8020514:	08020485 	.word	0x08020485
 8020518:	08020561 	.word	0x08020561
 802051c:	0802059d 	.word	0x0802059d
 8020520:	0802059d 	.word	0x0802059d
 8020524:	0802059d 	.word	0x0802059d
 8020528:	0802059d 	.word	0x0802059d
 802052c:	0802059d 	.word	0x0802059d
 8020530:	0802059d 	.word	0x0802059d
 8020534:	0802059d 	.word	0x0802059d
 8020538:	0802059d 	.word	0x0802059d
 802053c:	0802059d 	.word	0x0802059d
 8020540:	2b6e      	cmp	r3, #110	; 0x6e
 8020542:	d809      	bhi.n	8020558 <_scanf_float+0x134>
 8020544:	2b60      	cmp	r3, #96	; 0x60
 8020546:	d8b2      	bhi.n	80204ae <_scanf_float+0x8a>
 8020548:	2b54      	cmp	r3, #84	; 0x54
 802054a:	d077      	beq.n	802063c <_scanf_float+0x218>
 802054c:	2b59      	cmp	r3, #89	; 0x59
 802054e:	d199      	bne.n	8020484 <_scanf_float+0x60>
 8020550:	2d07      	cmp	r5, #7
 8020552:	d197      	bne.n	8020484 <_scanf_float+0x60>
 8020554:	2508      	movs	r5, #8
 8020556:	e029      	b.n	80205ac <_scanf_float+0x188>
 8020558:	2b74      	cmp	r3, #116	; 0x74
 802055a:	d06f      	beq.n	802063c <_scanf_float+0x218>
 802055c:	2b79      	cmp	r3, #121	; 0x79
 802055e:	e7f6      	b.n	802054e <_scanf_float+0x12a>
 8020560:	6821      	ldr	r1, [r4, #0]
 8020562:	05c8      	lsls	r0, r1, #23
 8020564:	d51a      	bpl.n	802059c <_scanf_float+0x178>
 8020566:	9b02      	ldr	r3, [sp, #8]
 8020568:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802056c:	6021      	str	r1, [r4, #0]
 802056e:	f109 0901 	add.w	r9, r9, #1
 8020572:	b11b      	cbz	r3, 802057c <_scanf_float+0x158>
 8020574:	3b01      	subs	r3, #1
 8020576:	3201      	adds	r2, #1
 8020578:	9302      	str	r3, [sp, #8]
 802057a:	60a2      	str	r2, [r4, #8]
 802057c:	68a3      	ldr	r3, [r4, #8]
 802057e:	3b01      	subs	r3, #1
 8020580:	60a3      	str	r3, [r4, #8]
 8020582:	6923      	ldr	r3, [r4, #16]
 8020584:	3301      	adds	r3, #1
 8020586:	6123      	str	r3, [r4, #16]
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	3b01      	subs	r3, #1
 802058c:	2b00      	cmp	r3, #0
 802058e:	607b      	str	r3, [r7, #4]
 8020590:	f340 8084 	ble.w	802069c <_scanf_float+0x278>
 8020594:	683b      	ldr	r3, [r7, #0]
 8020596:	3301      	adds	r3, #1
 8020598:	603b      	str	r3, [r7, #0]
 802059a:	e766      	b.n	802046a <_scanf_float+0x46>
 802059c:	eb1a 0f05 	cmn.w	sl, r5
 80205a0:	f47f af70 	bne.w	8020484 <_scanf_float+0x60>
 80205a4:	6822      	ldr	r2, [r4, #0]
 80205a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80205aa:	6022      	str	r2, [r4, #0]
 80205ac:	f806 3b01 	strb.w	r3, [r6], #1
 80205b0:	e7e4      	b.n	802057c <_scanf_float+0x158>
 80205b2:	6822      	ldr	r2, [r4, #0]
 80205b4:	0610      	lsls	r0, r2, #24
 80205b6:	f57f af65 	bpl.w	8020484 <_scanf_float+0x60>
 80205ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80205be:	e7f4      	b.n	80205aa <_scanf_float+0x186>
 80205c0:	f1ba 0f00 	cmp.w	sl, #0
 80205c4:	d10e      	bne.n	80205e4 <_scanf_float+0x1c0>
 80205c6:	f1b9 0f00 	cmp.w	r9, #0
 80205ca:	d10e      	bne.n	80205ea <_scanf_float+0x1c6>
 80205cc:	6822      	ldr	r2, [r4, #0]
 80205ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80205d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80205d6:	d108      	bne.n	80205ea <_scanf_float+0x1c6>
 80205d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80205dc:	6022      	str	r2, [r4, #0]
 80205de:	f04f 0a01 	mov.w	sl, #1
 80205e2:	e7e3      	b.n	80205ac <_scanf_float+0x188>
 80205e4:	f1ba 0f02 	cmp.w	sl, #2
 80205e8:	d055      	beq.n	8020696 <_scanf_float+0x272>
 80205ea:	2d01      	cmp	r5, #1
 80205ec:	d002      	beq.n	80205f4 <_scanf_float+0x1d0>
 80205ee:	2d04      	cmp	r5, #4
 80205f0:	f47f af48 	bne.w	8020484 <_scanf_float+0x60>
 80205f4:	3501      	adds	r5, #1
 80205f6:	b2ed      	uxtb	r5, r5
 80205f8:	e7d8      	b.n	80205ac <_scanf_float+0x188>
 80205fa:	f1ba 0f01 	cmp.w	sl, #1
 80205fe:	f47f af41 	bne.w	8020484 <_scanf_float+0x60>
 8020602:	f04f 0a02 	mov.w	sl, #2
 8020606:	e7d1      	b.n	80205ac <_scanf_float+0x188>
 8020608:	b97d      	cbnz	r5, 802062a <_scanf_float+0x206>
 802060a:	f1b9 0f00 	cmp.w	r9, #0
 802060e:	f47f af3c 	bne.w	802048a <_scanf_float+0x66>
 8020612:	6822      	ldr	r2, [r4, #0]
 8020614:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020618:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802061c:	f47f af39 	bne.w	8020492 <_scanf_float+0x6e>
 8020620:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020624:	6022      	str	r2, [r4, #0]
 8020626:	2501      	movs	r5, #1
 8020628:	e7c0      	b.n	80205ac <_scanf_float+0x188>
 802062a:	2d03      	cmp	r5, #3
 802062c:	d0e2      	beq.n	80205f4 <_scanf_float+0x1d0>
 802062e:	2d05      	cmp	r5, #5
 8020630:	e7de      	b.n	80205f0 <_scanf_float+0x1cc>
 8020632:	2d02      	cmp	r5, #2
 8020634:	f47f af26 	bne.w	8020484 <_scanf_float+0x60>
 8020638:	2503      	movs	r5, #3
 802063a:	e7b7      	b.n	80205ac <_scanf_float+0x188>
 802063c:	2d06      	cmp	r5, #6
 802063e:	f47f af21 	bne.w	8020484 <_scanf_float+0x60>
 8020642:	2507      	movs	r5, #7
 8020644:	e7b2      	b.n	80205ac <_scanf_float+0x188>
 8020646:	6822      	ldr	r2, [r4, #0]
 8020648:	0591      	lsls	r1, r2, #22
 802064a:	f57f af1b 	bpl.w	8020484 <_scanf_float+0x60>
 802064e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8020652:	6022      	str	r2, [r4, #0]
 8020654:	f8cd 9004 	str.w	r9, [sp, #4]
 8020658:	e7a8      	b.n	80205ac <_scanf_float+0x188>
 802065a:	6822      	ldr	r2, [r4, #0]
 802065c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020660:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020664:	d006      	beq.n	8020674 <_scanf_float+0x250>
 8020666:	0550      	lsls	r0, r2, #21
 8020668:	f57f af0c 	bpl.w	8020484 <_scanf_float+0x60>
 802066c:	f1b9 0f00 	cmp.w	r9, #0
 8020670:	f43f af0f 	beq.w	8020492 <_scanf_float+0x6e>
 8020674:	0591      	lsls	r1, r2, #22
 8020676:	bf58      	it	pl
 8020678:	9901      	ldrpl	r1, [sp, #4]
 802067a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802067e:	bf58      	it	pl
 8020680:	eba9 0101 	subpl.w	r1, r9, r1
 8020684:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020688:	bf58      	it	pl
 802068a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802068e:	6022      	str	r2, [r4, #0]
 8020690:	f04f 0900 	mov.w	r9, #0
 8020694:	e78a      	b.n	80205ac <_scanf_float+0x188>
 8020696:	f04f 0a03 	mov.w	sl, #3
 802069a:	e787      	b.n	80205ac <_scanf_float+0x188>
 802069c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80206a0:	4639      	mov	r1, r7
 80206a2:	4640      	mov	r0, r8
 80206a4:	4798      	blx	r3
 80206a6:	2800      	cmp	r0, #0
 80206a8:	f43f aedf 	beq.w	802046a <_scanf_float+0x46>
 80206ac:	e6ea      	b.n	8020484 <_scanf_float+0x60>
 80206ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80206b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80206b6:	463a      	mov	r2, r7
 80206b8:	4640      	mov	r0, r8
 80206ba:	4798      	blx	r3
 80206bc:	6923      	ldr	r3, [r4, #16]
 80206be:	3b01      	subs	r3, #1
 80206c0:	6123      	str	r3, [r4, #16]
 80206c2:	e6ec      	b.n	802049e <_scanf_float+0x7a>
 80206c4:	1e6b      	subs	r3, r5, #1
 80206c6:	2b06      	cmp	r3, #6
 80206c8:	d825      	bhi.n	8020716 <_scanf_float+0x2f2>
 80206ca:	2d02      	cmp	r5, #2
 80206cc:	d836      	bhi.n	802073c <_scanf_float+0x318>
 80206ce:	455e      	cmp	r6, fp
 80206d0:	f67f aee8 	bls.w	80204a4 <_scanf_float+0x80>
 80206d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80206d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80206dc:	463a      	mov	r2, r7
 80206de:	4640      	mov	r0, r8
 80206e0:	4798      	blx	r3
 80206e2:	6923      	ldr	r3, [r4, #16]
 80206e4:	3b01      	subs	r3, #1
 80206e6:	6123      	str	r3, [r4, #16]
 80206e8:	e7f1      	b.n	80206ce <_scanf_float+0x2aa>
 80206ea:	9802      	ldr	r0, [sp, #8]
 80206ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80206f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80206f4:	9002      	str	r0, [sp, #8]
 80206f6:	463a      	mov	r2, r7
 80206f8:	4640      	mov	r0, r8
 80206fa:	4798      	blx	r3
 80206fc:	6923      	ldr	r3, [r4, #16]
 80206fe:	3b01      	subs	r3, #1
 8020700:	6123      	str	r3, [r4, #16]
 8020702:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020706:	fa5f fa8a 	uxtb.w	sl, sl
 802070a:	f1ba 0f02 	cmp.w	sl, #2
 802070e:	d1ec      	bne.n	80206ea <_scanf_float+0x2c6>
 8020710:	3d03      	subs	r5, #3
 8020712:	b2ed      	uxtb	r5, r5
 8020714:	1b76      	subs	r6, r6, r5
 8020716:	6823      	ldr	r3, [r4, #0]
 8020718:	05da      	lsls	r2, r3, #23
 802071a:	d52f      	bpl.n	802077c <_scanf_float+0x358>
 802071c:	055b      	lsls	r3, r3, #21
 802071e:	d510      	bpl.n	8020742 <_scanf_float+0x31e>
 8020720:	455e      	cmp	r6, fp
 8020722:	f67f aebf 	bls.w	80204a4 <_scanf_float+0x80>
 8020726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802072a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802072e:	463a      	mov	r2, r7
 8020730:	4640      	mov	r0, r8
 8020732:	4798      	blx	r3
 8020734:	6923      	ldr	r3, [r4, #16]
 8020736:	3b01      	subs	r3, #1
 8020738:	6123      	str	r3, [r4, #16]
 802073a:	e7f1      	b.n	8020720 <_scanf_float+0x2fc>
 802073c:	46aa      	mov	sl, r5
 802073e:	9602      	str	r6, [sp, #8]
 8020740:	e7df      	b.n	8020702 <_scanf_float+0x2de>
 8020742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8020746:	6923      	ldr	r3, [r4, #16]
 8020748:	2965      	cmp	r1, #101	; 0x65
 802074a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802074e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8020752:	6123      	str	r3, [r4, #16]
 8020754:	d00c      	beq.n	8020770 <_scanf_float+0x34c>
 8020756:	2945      	cmp	r1, #69	; 0x45
 8020758:	d00a      	beq.n	8020770 <_scanf_float+0x34c>
 802075a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802075e:	463a      	mov	r2, r7
 8020760:	4640      	mov	r0, r8
 8020762:	4798      	blx	r3
 8020764:	6923      	ldr	r3, [r4, #16]
 8020766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802076a:	3b01      	subs	r3, #1
 802076c:	1eb5      	subs	r5, r6, #2
 802076e:	6123      	str	r3, [r4, #16]
 8020770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020774:	463a      	mov	r2, r7
 8020776:	4640      	mov	r0, r8
 8020778:	4798      	blx	r3
 802077a:	462e      	mov	r6, r5
 802077c:	6825      	ldr	r5, [r4, #0]
 802077e:	f015 0510 	ands.w	r5, r5, #16
 8020782:	d14d      	bne.n	8020820 <_scanf_float+0x3fc>
 8020784:	7035      	strb	r5, [r6, #0]
 8020786:	6823      	ldr	r3, [r4, #0]
 8020788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802078c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020790:	d11a      	bne.n	80207c8 <_scanf_float+0x3a4>
 8020792:	9b01      	ldr	r3, [sp, #4]
 8020794:	454b      	cmp	r3, r9
 8020796:	eba3 0209 	sub.w	r2, r3, r9
 802079a:	d122      	bne.n	80207e2 <_scanf_float+0x3be>
 802079c:	2200      	movs	r2, #0
 802079e:	4659      	mov	r1, fp
 80207a0:	4640      	mov	r0, r8
 80207a2:	f002 fdd7 	bl	8023354 <_strtod_r>
 80207a6:	9b03      	ldr	r3, [sp, #12]
 80207a8:	6821      	ldr	r1, [r4, #0]
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	f011 0f02 	tst.w	r1, #2
 80207b0:	f103 0204 	add.w	r2, r3, #4
 80207b4:	d020      	beq.n	80207f8 <_scanf_float+0x3d4>
 80207b6:	9903      	ldr	r1, [sp, #12]
 80207b8:	600a      	str	r2, [r1, #0]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	ed83 0b00 	vstr	d0, [r3]
 80207c0:	68e3      	ldr	r3, [r4, #12]
 80207c2:	3301      	adds	r3, #1
 80207c4:	60e3      	str	r3, [r4, #12]
 80207c6:	e66e      	b.n	80204a6 <_scanf_float+0x82>
 80207c8:	9b04      	ldr	r3, [sp, #16]
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d0e6      	beq.n	802079c <_scanf_float+0x378>
 80207ce:	9905      	ldr	r1, [sp, #20]
 80207d0:	230a      	movs	r3, #10
 80207d2:	462a      	mov	r2, r5
 80207d4:	3101      	adds	r1, #1
 80207d6:	4640      	mov	r0, r8
 80207d8:	f002 fe44 	bl	8023464 <_strtol_r>
 80207dc:	9b04      	ldr	r3, [sp, #16]
 80207de:	9e05      	ldr	r6, [sp, #20]
 80207e0:	1ac2      	subs	r2, r0, r3
 80207e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80207e6:	429e      	cmp	r6, r3
 80207e8:	bf28      	it	cs
 80207ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80207ee:	490d      	ldr	r1, [pc, #52]	; (8020824 <_scanf_float+0x400>)
 80207f0:	4630      	mov	r0, r6
 80207f2:	f000 fa87 	bl	8020d04 <siprintf>
 80207f6:	e7d1      	b.n	802079c <_scanf_float+0x378>
 80207f8:	f011 0f04 	tst.w	r1, #4
 80207fc:	9903      	ldr	r1, [sp, #12]
 80207fe:	600a      	str	r2, [r1, #0]
 8020800:	d1db      	bne.n	80207ba <_scanf_float+0x396>
 8020802:	eeb4 0b40 	vcmp.f64	d0, d0
 8020806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802080a:	681e      	ldr	r6, [r3, #0]
 802080c:	d705      	bvc.n	802081a <_scanf_float+0x3f6>
 802080e:	4806      	ldr	r0, [pc, #24]	; (8020828 <_scanf_float+0x404>)
 8020810:	f000 fcb0 	bl	8021174 <nanf>
 8020814:	ed86 0a00 	vstr	s0, [r6]
 8020818:	e7d2      	b.n	80207c0 <_scanf_float+0x39c>
 802081a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802081e:	e7f9      	b.n	8020814 <_scanf_float+0x3f0>
 8020820:	2500      	movs	r5, #0
 8020822:	e640      	b.n	80204a6 <_scanf_float+0x82>
 8020824:	08025ea0 	.word	0x08025ea0
 8020828:	08025ee0 	.word	0x08025ee0

0802082c <std>:
 802082c:	2300      	movs	r3, #0
 802082e:	b510      	push	{r4, lr}
 8020830:	4604      	mov	r4, r0
 8020832:	e9c0 3300 	strd	r3, r3, [r0]
 8020836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802083a:	6083      	str	r3, [r0, #8]
 802083c:	8181      	strh	r1, [r0, #12]
 802083e:	6643      	str	r3, [r0, #100]	; 0x64
 8020840:	81c2      	strh	r2, [r0, #14]
 8020842:	6183      	str	r3, [r0, #24]
 8020844:	4619      	mov	r1, r3
 8020846:	2208      	movs	r2, #8
 8020848:	305c      	adds	r0, #92	; 0x5c
 802084a:	f000 fbb7 	bl	8020fbc <memset>
 802084e:	4b0d      	ldr	r3, [pc, #52]	; (8020884 <std+0x58>)
 8020850:	6263      	str	r3, [r4, #36]	; 0x24
 8020852:	4b0d      	ldr	r3, [pc, #52]	; (8020888 <std+0x5c>)
 8020854:	62a3      	str	r3, [r4, #40]	; 0x28
 8020856:	4b0d      	ldr	r3, [pc, #52]	; (802088c <std+0x60>)
 8020858:	62e3      	str	r3, [r4, #44]	; 0x2c
 802085a:	4b0d      	ldr	r3, [pc, #52]	; (8020890 <std+0x64>)
 802085c:	6323      	str	r3, [r4, #48]	; 0x30
 802085e:	4b0d      	ldr	r3, [pc, #52]	; (8020894 <std+0x68>)
 8020860:	6224      	str	r4, [r4, #32]
 8020862:	429c      	cmp	r4, r3
 8020864:	d006      	beq.n	8020874 <std+0x48>
 8020866:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802086a:	4294      	cmp	r4, r2
 802086c:	d002      	beq.n	8020874 <std+0x48>
 802086e:	33d0      	adds	r3, #208	; 0xd0
 8020870:	429c      	cmp	r4, r3
 8020872:	d105      	bne.n	8020880 <std+0x54>
 8020874:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802087c:	f000 bc60 	b.w	8021140 <__retarget_lock_init_recursive>
 8020880:	bd10      	pop	{r4, pc}
 8020882:	bf00      	nop
 8020884:	08020d45 	.word	0x08020d45
 8020888:	08020d67 	.word	0x08020d67
 802088c:	08020d9f 	.word	0x08020d9f
 8020890:	08020dc3 	.word	0x08020dc3
 8020894:	2001713c 	.word	0x2001713c

08020898 <stdio_exit_handler>:
 8020898:	4a02      	ldr	r2, [pc, #8]	; (80208a4 <stdio_exit_handler+0xc>)
 802089a:	4903      	ldr	r1, [pc, #12]	; (80208a8 <stdio_exit_handler+0x10>)
 802089c:	4803      	ldr	r0, [pc, #12]	; (80208ac <stdio_exit_handler+0x14>)
 802089e:	f000 b869 	b.w	8020974 <_fwalk_sglue>
 80208a2:	bf00      	nop
 80208a4:	20000980 	.word	0x20000980
 80208a8:	08023aad 	.word	0x08023aad
 80208ac:	2000098c 	.word	0x2000098c

080208b0 <cleanup_stdio>:
 80208b0:	6841      	ldr	r1, [r0, #4]
 80208b2:	4b0c      	ldr	r3, [pc, #48]	; (80208e4 <cleanup_stdio+0x34>)
 80208b4:	4299      	cmp	r1, r3
 80208b6:	b510      	push	{r4, lr}
 80208b8:	4604      	mov	r4, r0
 80208ba:	d001      	beq.n	80208c0 <cleanup_stdio+0x10>
 80208bc:	f003 f8f6 	bl	8023aac <_fflush_r>
 80208c0:	68a1      	ldr	r1, [r4, #8]
 80208c2:	4b09      	ldr	r3, [pc, #36]	; (80208e8 <cleanup_stdio+0x38>)
 80208c4:	4299      	cmp	r1, r3
 80208c6:	d002      	beq.n	80208ce <cleanup_stdio+0x1e>
 80208c8:	4620      	mov	r0, r4
 80208ca:	f003 f8ef 	bl	8023aac <_fflush_r>
 80208ce:	68e1      	ldr	r1, [r4, #12]
 80208d0:	4b06      	ldr	r3, [pc, #24]	; (80208ec <cleanup_stdio+0x3c>)
 80208d2:	4299      	cmp	r1, r3
 80208d4:	d004      	beq.n	80208e0 <cleanup_stdio+0x30>
 80208d6:	4620      	mov	r0, r4
 80208d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208dc:	f003 b8e6 	b.w	8023aac <_fflush_r>
 80208e0:	bd10      	pop	{r4, pc}
 80208e2:	bf00      	nop
 80208e4:	2001713c 	.word	0x2001713c
 80208e8:	200171a4 	.word	0x200171a4
 80208ec:	2001720c 	.word	0x2001720c

080208f0 <global_stdio_init.part.0>:
 80208f0:	b510      	push	{r4, lr}
 80208f2:	4b0b      	ldr	r3, [pc, #44]	; (8020920 <global_stdio_init.part.0+0x30>)
 80208f4:	4c0b      	ldr	r4, [pc, #44]	; (8020924 <global_stdio_init.part.0+0x34>)
 80208f6:	4a0c      	ldr	r2, [pc, #48]	; (8020928 <global_stdio_init.part.0+0x38>)
 80208f8:	601a      	str	r2, [r3, #0]
 80208fa:	4620      	mov	r0, r4
 80208fc:	2200      	movs	r2, #0
 80208fe:	2104      	movs	r1, #4
 8020900:	f7ff ff94 	bl	802082c <std>
 8020904:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020908:	2201      	movs	r2, #1
 802090a:	2109      	movs	r1, #9
 802090c:	f7ff ff8e 	bl	802082c <std>
 8020910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020914:	2202      	movs	r2, #2
 8020916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802091a:	2112      	movs	r1, #18
 802091c:	f7ff bf86 	b.w	802082c <std>
 8020920:	20017274 	.word	0x20017274
 8020924:	2001713c 	.word	0x2001713c
 8020928:	08020899 	.word	0x08020899

0802092c <__sfp_lock_acquire>:
 802092c:	4801      	ldr	r0, [pc, #4]	; (8020934 <__sfp_lock_acquire+0x8>)
 802092e:	f000 bc08 	b.w	8021142 <__retarget_lock_acquire_recursive>
 8020932:	bf00      	nop
 8020934:	2001727e 	.word	0x2001727e

08020938 <__sfp_lock_release>:
 8020938:	4801      	ldr	r0, [pc, #4]	; (8020940 <__sfp_lock_release+0x8>)
 802093a:	f000 bc03 	b.w	8021144 <__retarget_lock_release_recursive>
 802093e:	bf00      	nop
 8020940:	2001727e 	.word	0x2001727e

08020944 <__sinit>:
 8020944:	b510      	push	{r4, lr}
 8020946:	4604      	mov	r4, r0
 8020948:	f7ff fff0 	bl	802092c <__sfp_lock_acquire>
 802094c:	6a23      	ldr	r3, [r4, #32]
 802094e:	b11b      	cbz	r3, 8020958 <__sinit+0x14>
 8020950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020954:	f7ff bff0 	b.w	8020938 <__sfp_lock_release>
 8020958:	4b04      	ldr	r3, [pc, #16]	; (802096c <__sinit+0x28>)
 802095a:	6223      	str	r3, [r4, #32]
 802095c:	4b04      	ldr	r3, [pc, #16]	; (8020970 <__sinit+0x2c>)
 802095e:	681b      	ldr	r3, [r3, #0]
 8020960:	2b00      	cmp	r3, #0
 8020962:	d1f5      	bne.n	8020950 <__sinit+0xc>
 8020964:	f7ff ffc4 	bl	80208f0 <global_stdio_init.part.0>
 8020968:	e7f2      	b.n	8020950 <__sinit+0xc>
 802096a:	bf00      	nop
 802096c:	080208b1 	.word	0x080208b1
 8020970:	20017274 	.word	0x20017274

08020974 <_fwalk_sglue>:
 8020974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020978:	4607      	mov	r7, r0
 802097a:	4688      	mov	r8, r1
 802097c:	4614      	mov	r4, r2
 802097e:	2600      	movs	r6, #0
 8020980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020984:	f1b9 0901 	subs.w	r9, r9, #1
 8020988:	d505      	bpl.n	8020996 <_fwalk_sglue+0x22>
 802098a:	6824      	ldr	r4, [r4, #0]
 802098c:	2c00      	cmp	r4, #0
 802098e:	d1f7      	bne.n	8020980 <_fwalk_sglue+0xc>
 8020990:	4630      	mov	r0, r6
 8020992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020996:	89ab      	ldrh	r3, [r5, #12]
 8020998:	2b01      	cmp	r3, #1
 802099a:	d907      	bls.n	80209ac <_fwalk_sglue+0x38>
 802099c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80209a0:	3301      	adds	r3, #1
 80209a2:	d003      	beq.n	80209ac <_fwalk_sglue+0x38>
 80209a4:	4629      	mov	r1, r5
 80209a6:	4638      	mov	r0, r7
 80209a8:	47c0      	blx	r8
 80209aa:	4306      	orrs	r6, r0
 80209ac:	3568      	adds	r5, #104	; 0x68
 80209ae:	e7e9      	b.n	8020984 <_fwalk_sglue+0x10>

080209b0 <_fwrite_r>:
 80209b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209b4:	9c08      	ldr	r4, [sp, #32]
 80209b6:	468a      	mov	sl, r1
 80209b8:	4690      	mov	r8, r2
 80209ba:	fb02 f903 	mul.w	r9, r2, r3
 80209be:	4606      	mov	r6, r0
 80209c0:	b118      	cbz	r0, 80209ca <_fwrite_r+0x1a>
 80209c2:	6a03      	ldr	r3, [r0, #32]
 80209c4:	b90b      	cbnz	r3, 80209ca <_fwrite_r+0x1a>
 80209c6:	f7ff ffbd 	bl	8020944 <__sinit>
 80209ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80209cc:	07dd      	lsls	r5, r3, #31
 80209ce:	d405      	bmi.n	80209dc <_fwrite_r+0x2c>
 80209d0:	89a3      	ldrh	r3, [r4, #12]
 80209d2:	0598      	lsls	r0, r3, #22
 80209d4:	d402      	bmi.n	80209dc <_fwrite_r+0x2c>
 80209d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209d8:	f000 fbb3 	bl	8021142 <__retarget_lock_acquire_recursive>
 80209dc:	89a3      	ldrh	r3, [r4, #12]
 80209de:	0719      	lsls	r1, r3, #28
 80209e0:	d516      	bpl.n	8020a10 <_fwrite_r+0x60>
 80209e2:	6923      	ldr	r3, [r4, #16]
 80209e4:	b1a3      	cbz	r3, 8020a10 <_fwrite_r+0x60>
 80209e6:	2500      	movs	r5, #0
 80209e8:	454d      	cmp	r5, r9
 80209ea:	d01f      	beq.n	8020a2c <_fwrite_r+0x7c>
 80209ec:	68a7      	ldr	r7, [r4, #8]
 80209ee:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80209f2:	3f01      	subs	r7, #1
 80209f4:	2f00      	cmp	r7, #0
 80209f6:	60a7      	str	r7, [r4, #8]
 80209f8:	da04      	bge.n	8020a04 <_fwrite_r+0x54>
 80209fa:	69a3      	ldr	r3, [r4, #24]
 80209fc:	429f      	cmp	r7, r3
 80209fe:	db0f      	blt.n	8020a20 <_fwrite_r+0x70>
 8020a00:	290a      	cmp	r1, #10
 8020a02:	d00d      	beq.n	8020a20 <_fwrite_r+0x70>
 8020a04:	6823      	ldr	r3, [r4, #0]
 8020a06:	1c5a      	adds	r2, r3, #1
 8020a08:	6022      	str	r2, [r4, #0]
 8020a0a:	7019      	strb	r1, [r3, #0]
 8020a0c:	3501      	adds	r5, #1
 8020a0e:	e7eb      	b.n	80209e8 <_fwrite_r+0x38>
 8020a10:	4621      	mov	r1, r4
 8020a12:	4630      	mov	r0, r6
 8020a14:	f000 fa50 	bl	8020eb8 <__swsetup_r>
 8020a18:	2800      	cmp	r0, #0
 8020a1a:	d0e4      	beq.n	80209e6 <_fwrite_r+0x36>
 8020a1c:	2500      	movs	r5, #0
 8020a1e:	e005      	b.n	8020a2c <_fwrite_r+0x7c>
 8020a20:	4622      	mov	r2, r4
 8020a22:	4630      	mov	r0, r6
 8020a24:	f000 fa0a 	bl	8020e3c <__swbuf_r>
 8020a28:	3001      	adds	r0, #1
 8020a2a:	d1ef      	bne.n	8020a0c <_fwrite_r+0x5c>
 8020a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a2e:	07da      	lsls	r2, r3, #31
 8020a30:	d405      	bmi.n	8020a3e <_fwrite_r+0x8e>
 8020a32:	89a3      	ldrh	r3, [r4, #12]
 8020a34:	059b      	lsls	r3, r3, #22
 8020a36:	d402      	bmi.n	8020a3e <_fwrite_r+0x8e>
 8020a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a3a:	f000 fb83 	bl	8021144 <__retarget_lock_release_recursive>
 8020a3e:	fbb5 f0f8 	udiv	r0, r5, r8
 8020a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020a48 <fwrite>:
 8020a48:	b507      	push	{r0, r1, r2, lr}
 8020a4a:	9300      	str	r3, [sp, #0]
 8020a4c:	4613      	mov	r3, r2
 8020a4e:	460a      	mov	r2, r1
 8020a50:	4601      	mov	r1, r0
 8020a52:	4803      	ldr	r0, [pc, #12]	; (8020a60 <fwrite+0x18>)
 8020a54:	6800      	ldr	r0, [r0, #0]
 8020a56:	f7ff ffab 	bl	80209b0 <_fwrite_r>
 8020a5a:	b003      	add	sp, #12
 8020a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020a60:	200009d8 	.word	0x200009d8

08020a64 <iprintf>:
 8020a64:	b40f      	push	{r0, r1, r2, r3}
 8020a66:	b507      	push	{r0, r1, r2, lr}
 8020a68:	4906      	ldr	r1, [pc, #24]	; (8020a84 <iprintf+0x20>)
 8020a6a:	ab04      	add	r3, sp, #16
 8020a6c:	6808      	ldr	r0, [r1, #0]
 8020a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a72:	6881      	ldr	r1, [r0, #8]
 8020a74:	9301      	str	r3, [sp, #4]
 8020a76:	f002 fe79 	bl	802376c <_vfiprintf_r>
 8020a7a:	b003      	add	sp, #12
 8020a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020a80:	b004      	add	sp, #16
 8020a82:	4770      	bx	lr
 8020a84:	200009d8 	.word	0x200009d8

08020a88 <_puts_r>:
 8020a88:	6a03      	ldr	r3, [r0, #32]
 8020a8a:	b570      	push	{r4, r5, r6, lr}
 8020a8c:	6884      	ldr	r4, [r0, #8]
 8020a8e:	4605      	mov	r5, r0
 8020a90:	460e      	mov	r6, r1
 8020a92:	b90b      	cbnz	r3, 8020a98 <_puts_r+0x10>
 8020a94:	f7ff ff56 	bl	8020944 <__sinit>
 8020a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a9a:	07db      	lsls	r3, r3, #31
 8020a9c:	d405      	bmi.n	8020aaa <_puts_r+0x22>
 8020a9e:	89a3      	ldrh	r3, [r4, #12]
 8020aa0:	0598      	lsls	r0, r3, #22
 8020aa2:	d402      	bmi.n	8020aaa <_puts_r+0x22>
 8020aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020aa6:	f000 fb4c 	bl	8021142 <__retarget_lock_acquire_recursive>
 8020aaa:	89a3      	ldrh	r3, [r4, #12]
 8020aac:	0719      	lsls	r1, r3, #28
 8020aae:	d513      	bpl.n	8020ad8 <_puts_r+0x50>
 8020ab0:	6923      	ldr	r3, [r4, #16]
 8020ab2:	b18b      	cbz	r3, 8020ad8 <_puts_r+0x50>
 8020ab4:	3e01      	subs	r6, #1
 8020ab6:	68a3      	ldr	r3, [r4, #8]
 8020ab8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020abc:	3b01      	subs	r3, #1
 8020abe:	60a3      	str	r3, [r4, #8]
 8020ac0:	b9e9      	cbnz	r1, 8020afe <_puts_r+0x76>
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	da2e      	bge.n	8020b24 <_puts_r+0x9c>
 8020ac6:	4622      	mov	r2, r4
 8020ac8:	210a      	movs	r1, #10
 8020aca:	4628      	mov	r0, r5
 8020acc:	f000 f9b6 	bl	8020e3c <__swbuf_r>
 8020ad0:	3001      	adds	r0, #1
 8020ad2:	d007      	beq.n	8020ae4 <_puts_r+0x5c>
 8020ad4:	250a      	movs	r5, #10
 8020ad6:	e007      	b.n	8020ae8 <_puts_r+0x60>
 8020ad8:	4621      	mov	r1, r4
 8020ada:	4628      	mov	r0, r5
 8020adc:	f000 f9ec 	bl	8020eb8 <__swsetup_r>
 8020ae0:	2800      	cmp	r0, #0
 8020ae2:	d0e7      	beq.n	8020ab4 <_puts_r+0x2c>
 8020ae4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020aea:	07da      	lsls	r2, r3, #31
 8020aec:	d405      	bmi.n	8020afa <_puts_r+0x72>
 8020aee:	89a3      	ldrh	r3, [r4, #12]
 8020af0:	059b      	lsls	r3, r3, #22
 8020af2:	d402      	bmi.n	8020afa <_puts_r+0x72>
 8020af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020af6:	f000 fb25 	bl	8021144 <__retarget_lock_release_recursive>
 8020afa:	4628      	mov	r0, r5
 8020afc:	bd70      	pop	{r4, r5, r6, pc}
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	da04      	bge.n	8020b0c <_puts_r+0x84>
 8020b02:	69a2      	ldr	r2, [r4, #24]
 8020b04:	429a      	cmp	r2, r3
 8020b06:	dc06      	bgt.n	8020b16 <_puts_r+0x8e>
 8020b08:	290a      	cmp	r1, #10
 8020b0a:	d004      	beq.n	8020b16 <_puts_r+0x8e>
 8020b0c:	6823      	ldr	r3, [r4, #0]
 8020b0e:	1c5a      	adds	r2, r3, #1
 8020b10:	6022      	str	r2, [r4, #0]
 8020b12:	7019      	strb	r1, [r3, #0]
 8020b14:	e7cf      	b.n	8020ab6 <_puts_r+0x2e>
 8020b16:	4622      	mov	r2, r4
 8020b18:	4628      	mov	r0, r5
 8020b1a:	f000 f98f 	bl	8020e3c <__swbuf_r>
 8020b1e:	3001      	adds	r0, #1
 8020b20:	d1c9      	bne.n	8020ab6 <_puts_r+0x2e>
 8020b22:	e7df      	b.n	8020ae4 <_puts_r+0x5c>
 8020b24:	6823      	ldr	r3, [r4, #0]
 8020b26:	250a      	movs	r5, #10
 8020b28:	1c5a      	adds	r2, r3, #1
 8020b2a:	6022      	str	r2, [r4, #0]
 8020b2c:	701d      	strb	r5, [r3, #0]
 8020b2e:	e7db      	b.n	8020ae8 <_puts_r+0x60>

08020b30 <puts>:
 8020b30:	4b02      	ldr	r3, [pc, #8]	; (8020b3c <puts+0xc>)
 8020b32:	4601      	mov	r1, r0
 8020b34:	6818      	ldr	r0, [r3, #0]
 8020b36:	f7ff bfa7 	b.w	8020a88 <_puts_r>
 8020b3a:	bf00      	nop
 8020b3c:	200009d8 	.word	0x200009d8

08020b40 <setvbuf>:
 8020b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020b44:	461d      	mov	r5, r3
 8020b46:	4b54      	ldr	r3, [pc, #336]	; (8020c98 <setvbuf+0x158>)
 8020b48:	681f      	ldr	r7, [r3, #0]
 8020b4a:	4604      	mov	r4, r0
 8020b4c:	460e      	mov	r6, r1
 8020b4e:	4690      	mov	r8, r2
 8020b50:	b127      	cbz	r7, 8020b5c <setvbuf+0x1c>
 8020b52:	6a3b      	ldr	r3, [r7, #32]
 8020b54:	b913      	cbnz	r3, 8020b5c <setvbuf+0x1c>
 8020b56:	4638      	mov	r0, r7
 8020b58:	f7ff fef4 	bl	8020944 <__sinit>
 8020b5c:	f1b8 0f02 	cmp.w	r8, #2
 8020b60:	d006      	beq.n	8020b70 <setvbuf+0x30>
 8020b62:	f1b8 0f01 	cmp.w	r8, #1
 8020b66:	f200 8094 	bhi.w	8020c92 <setvbuf+0x152>
 8020b6a:	2d00      	cmp	r5, #0
 8020b6c:	f2c0 8091 	blt.w	8020c92 <setvbuf+0x152>
 8020b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b72:	07da      	lsls	r2, r3, #31
 8020b74:	d405      	bmi.n	8020b82 <setvbuf+0x42>
 8020b76:	89a3      	ldrh	r3, [r4, #12]
 8020b78:	059b      	lsls	r3, r3, #22
 8020b7a:	d402      	bmi.n	8020b82 <setvbuf+0x42>
 8020b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b7e:	f000 fae0 	bl	8021142 <__retarget_lock_acquire_recursive>
 8020b82:	4621      	mov	r1, r4
 8020b84:	4638      	mov	r0, r7
 8020b86:	f002 ff91 	bl	8023aac <_fflush_r>
 8020b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020b8c:	b141      	cbz	r1, 8020ba0 <setvbuf+0x60>
 8020b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b92:	4299      	cmp	r1, r3
 8020b94:	d002      	beq.n	8020b9c <setvbuf+0x5c>
 8020b96:	4638      	mov	r0, r7
 8020b98:	f001 f912 	bl	8021dc0 <_free_r>
 8020b9c:	2300      	movs	r3, #0
 8020b9e:	6363      	str	r3, [r4, #52]	; 0x34
 8020ba0:	2300      	movs	r3, #0
 8020ba2:	61a3      	str	r3, [r4, #24]
 8020ba4:	6063      	str	r3, [r4, #4]
 8020ba6:	89a3      	ldrh	r3, [r4, #12]
 8020ba8:	0618      	lsls	r0, r3, #24
 8020baa:	d503      	bpl.n	8020bb4 <setvbuf+0x74>
 8020bac:	6921      	ldr	r1, [r4, #16]
 8020bae:	4638      	mov	r0, r7
 8020bb0:	f001 f906 	bl	8021dc0 <_free_r>
 8020bb4:	89a3      	ldrh	r3, [r4, #12]
 8020bb6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8020bba:	f023 0303 	bic.w	r3, r3, #3
 8020bbe:	f1b8 0f02 	cmp.w	r8, #2
 8020bc2:	81a3      	strh	r3, [r4, #12]
 8020bc4:	d05f      	beq.n	8020c86 <setvbuf+0x146>
 8020bc6:	ab01      	add	r3, sp, #4
 8020bc8:	466a      	mov	r2, sp
 8020bca:	4621      	mov	r1, r4
 8020bcc:	4638      	mov	r0, r7
 8020bce:	f002 ffa7 	bl	8023b20 <__swhatbuf_r>
 8020bd2:	89a3      	ldrh	r3, [r4, #12]
 8020bd4:	4318      	orrs	r0, r3
 8020bd6:	81a0      	strh	r0, [r4, #12]
 8020bd8:	bb2d      	cbnz	r5, 8020c26 <setvbuf+0xe6>
 8020bda:	9d00      	ldr	r5, [sp, #0]
 8020bdc:	4628      	mov	r0, r5
 8020bde:	f7fe fe09 	bl	801f7f4 <malloc>
 8020be2:	4606      	mov	r6, r0
 8020be4:	2800      	cmp	r0, #0
 8020be6:	d150      	bne.n	8020c8a <setvbuf+0x14a>
 8020be8:	f8dd 9000 	ldr.w	r9, [sp]
 8020bec:	45a9      	cmp	r9, r5
 8020bee:	d13e      	bne.n	8020c6e <setvbuf+0x12e>
 8020bf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020bf4:	2200      	movs	r2, #0
 8020bf6:	60a2      	str	r2, [r4, #8]
 8020bf8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020bfc:	6022      	str	r2, [r4, #0]
 8020bfe:	6122      	str	r2, [r4, #16]
 8020c00:	2201      	movs	r2, #1
 8020c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c06:	6162      	str	r2, [r4, #20]
 8020c08:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020c0a:	f043 0302 	orr.w	r3, r3, #2
 8020c0e:	07d1      	lsls	r1, r2, #31
 8020c10:	81a3      	strh	r3, [r4, #12]
 8020c12:	d404      	bmi.n	8020c1e <setvbuf+0xde>
 8020c14:	059b      	lsls	r3, r3, #22
 8020c16:	d402      	bmi.n	8020c1e <setvbuf+0xde>
 8020c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c1a:	f000 fa93 	bl	8021144 <__retarget_lock_release_recursive>
 8020c1e:	4628      	mov	r0, r5
 8020c20:	b003      	add	sp, #12
 8020c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c26:	2e00      	cmp	r6, #0
 8020c28:	d0d8      	beq.n	8020bdc <setvbuf+0x9c>
 8020c2a:	6a3b      	ldr	r3, [r7, #32]
 8020c2c:	b913      	cbnz	r3, 8020c34 <setvbuf+0xf4>
 8020c2e:	4638      	mov	r0, r7
 8020c30:	f7ff fe88 	bl	8020944 <__sinit>
 8020c34:	f1b8 0f01 	cmp.w	r8, #1
 8020c38:	bf08      	it	eq
 8020c3a:	89a3      	ldrheq	r3, [r4, #12]
 8020c3c:	6026      	str	r6, [r4, #0]
 8020c3e:	bf04      	itt	eq
 8020c40:	f043 0301 	orreq.w	r3, r3, #1
 8020c44:	81a3      	strheq	r3, [r4, #12]
 8020c46:	89a3      	ldrh	r3, [r4, #12]
 8020c48:	f013 0208 	ands.w	r2, r3, #8
 8020c4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020c50:	d01d      	beq.n	8020c8e <setvbuf+0x14e>
 8020c52:	07da      	lsls	r2, r3, #31
 8020c54:	bf41      	itttt	mi
 8020c56:	2200      	movmi	r2, #0
 8020c58:	426d      	negmi	r5, r5
 8020c5a:	60a2      	strmi	r2, [r4, #8]
 8020c5c:	61a5      	strmi	r5, [r4, #24]
 8020c5e:	bf58      	it	pl
 8020c60:	60a5      	strpl	r5, [r4, #8]
 8020c62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020c64:	f015 0501 	ands.w	r5, r5, #1
 8020c68:	d0d4      	beq.n	8020c14 <setvbuf+0xd4>
 8020c6a:	2500      	movs	r5, #0
 8020c6c:	e7d7      	b.n	8020c1e <setvbuf+0xde>
 8020c6e:	4648      	mov	r0, r9
 8020c70:	f7fe fdc0 	bl	801f7f4 <malloc>
 8020c74:	4606      	mov	r6, r0
 8020c76:	2800      	cmp	r0, #0
 8020c78:	d0ba      	beq.n	8020bf0 <setvbuf+0xb0>
 8020c7a:	89a3      	ldrh	r3, [r4, #12]
 8020c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c80:	81a3      	strh	r3, [r4, #12]
 8020c82:	464d      	mov	r5, r9
 8020c84:	e7d1      	b.n	8020c2a <setvbuf+0xea>
 8020c86:	2500      	movs	r5, #0
 8020c88:	e7b4      	b.n	8020bf4 <setvbuf+0xb4>
 8020c8a:	46a9      	mov	r9, r5
 8020c8c:	e7f5      	b.n	8020c7a <setvbuf+0x13a>
 8020c8e:	60a2      	str	r2, [r4, #8]
 8020c90:	e7e7      	b.n	8020c62 <setvbuf+0x122>
 8020c92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020c96:	e7c2      	b.n	8020c1e <setvbuf+0xde>
 8020c98:	200009d8 	.word	0x200009d8

08020c9c <sniprintf>:
 8020c9c:	b40c      	push	{r2, r3}
 8020c9e:	b530      	push	{r4, r5, lr}
 8020ca0:	4b17      	ldr	r3, [pc, #92]	; (8020d00 <sniprintf+0x64>)
 8020ca2:	1e0c      	subs	r4, r1, #0
 8020ca4:	681d      	ldr	r5, [r3, #0]
 8020ca6:	b09d      	sub	sp, #116	; 0x74
 8020ca8:	da08      	bge.n	8020cbc <sniprintf+0x20>
 8020caa:	238b      	movs	r3, #139	; 0x8b
 8020cac:	602b      	str	r3, [r5, #0]
 8020cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020cb2:	b01d      	add	sp, #116	; 0x74
 8020cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020cb8:	b002      	add	sp, #8
 8020cba:	4770      	bx	lr
 8020cbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020cc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020cc4:	bf14      	ite	ne
 8020cc6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020cca:	4623      	moveq	r3, r4
 8020ccc:	9304      	str	r3, [sp, #16]
 8020cce:	9307      	str	r3, [sp, #28]
 8020cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020cd4:	9002      	str	r0, [sp, #8]
 8020cd6:	9006      	str	r0, [sp, #24]
 8020cd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020cdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020cde:	ab21      	add	r3, sp, #132	; 0x84
 8020ce0:	a902      	add	r1, sp, #8
 8020ce2:	4628      	mov	r0, r5
 8020ce4:	9301      	str	r3, [sp, #4]
 8020ce6:	f002 fc19 	bl	802351c <_svfiprintf_r>
 8020cea:	1c43      	adds	r3, r0, #1
 8020cec:	bfbc      	itt	lt
 8020cee:	238b      	movlt	r3, #139	; 0x8b
 8020cf0:	602b      	strlt	r3, [r5, #0]
 8020cf2:	2c00      	cmp	r4, #0
 8020cf4:	d0dd      	beq.n	8020cb2 <sniprintf+0x16>
 8020cf6:	9b02      	ldr	r3, [sp, #8]
 8020cf8:	2200      	movs	r2, #0
 8020cfa:	701a      	strb	r2, [r3, #0]
 8020cfc:	e7d9      	b.n	8020cb2 <sniprintf+0x16>
 8020cfe:	bf00      	nop
 8020d00:	200009d8 	.word	0x200009d8

08020d04 <siprintf>:
 8020d04:	b40e      	push	{r1, r2, r3}
 8020d06:	b500      	push	{lr}
 8020d08:	b09c      	sub	sp, #112	; 0x70
 8020d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8020d0c:	9002      	str	r0, [sp, #8]
 8020d0e:	9006      	str	r0, [sp, #24]
 8020d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020d14:	4809      	ldr	r0, [pc, #36]	; (8020d3c <siprintf+0x38>)
 8020d16:	9107      	str	r1, [sp, #28]
 8020d18:	9104      	str	r1, [sp, #16]
 8020d1a:	4909      	ldr	r1, [pc, #36]	; (8020d40 <siprintf+0x3c>)
 8020d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020d20:	9105      	str	r1, [sp, #20]
 8020d22:	6800      	ldr	r0, [r0, #0]
 8020d24:	9301      	str	r3, [sp, #4]
 8020d26:	a902      	add	r1, sp, #8
 8020d28:	f002 fbf8 	bl	802351c <_svfiprintf_r>
 8020d2c:	9b02      	ldr	r3, [sp, #8]
 8020d2e:	2200      	movs	r2, #0
 8020d30:	701a      	strb	r2, [r3, #0]
 8020d32:	b01c      	add	sp, #112	; 0x70
 8020d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d38:	b003      	add	sp, #12
 8020d3a:	4770      	bx	lr
 8020d3c:	200009d8 	.word	0x200009d8
 8020d40:	ffff0208 	.word	0xffff0208

08020d44 <__sread>:
 8020d44:	b510      	push	{r4, lr}
 8020d46:	460c      	mov	r4, r1
 8020d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d4c:	f000 f99a 	bl	8021084 <_read_r>
 8020d50:	2800      	cmp	r0, #0
 8020d52:	bfab      	itete	ge
 8020d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d56:	89a3      	ldrhlt	r3, [r4, #12]
 8020d58:	181b      	addge	r3, r3, r0
 8020d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d5e:	bfac      	ite	ge
 8020d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d62:	81a3      	strhlt	r3, [r4, #12]
 8020d64:	bd10      	pop	{r4, pc}

08020d66 <__swrite>:
 8020d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d6a:	461f      	mov	r7, r3
 8020d6c:	898b      	ldrh	r3, [r1, #12]
 8020d6e:	05db      	lsls	r3, r3, #23
 8020d70:	4605      	mov	r5, r0
 8020d72:	460c      	mov	r4, r1
 8020d74:	4616      	mov	r6, r2
 8020d76:	d505      	bpl.n	8020d84 <__swrite+0x1e>
 8020d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d7c:	2302      	movs	r3, #2
 8020d7e:	2200      	movs	r2, #0
 8020d80:	f000 f96e 	bl	8021060 <_lseek_r>
 8020d84:	89a3      	ldrh	r3, [r4, #12]
 8020d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d8e:	81a3      	strh	r3, [r4, #12]
 8020d90:	4632      	mov	r2, r6
 8020d92:	463b      	mov	r3, r7
 8020d94:	4628      	mov	r0, r5
 8020d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d9a:	f000 b995 	b.w	80210c8 <_write_r>

08020d9e <__sseek>:
 8020d9e:	b510      	push	{r4, lr}
 8020da0:	460c      	mov	r4, r1
 8020da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020da6:	f000 f95b 	bl	8021060 <_lseek_r>
 8020daa:	1c43      	adds	r3, r0, #1
 8020dac:	89a3      	ldrh	r3, [r4, #12]
 8020dae:	bf15      	itete	ne
 8020db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8020db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020dba:	81a3      	strheq	r3, [r4, #12]
 8020dbc:	bf18      	it	ne
 8020dbe:	81a3      	strhne	r3, [r4, #12]
 8020dc0:	bd10      	pop	{r4, pc}

08020dc2 <__sclose>:
 8020dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020dc6:	f000 b93b 	b.w	8021040 <_close_r>

08020dca <_vsniprintf_r>:
 8020dca:	b530      	push	{r4, r5, lr}
 8020dcc:	4614      	mov	r4, r2
 8020dce:	2c00      	cmp	r4, #0
 8020dd0:	b09b      	sub	sp, #108	; 0x6c
 8020dd2:	4605      	mov	r5, r0
 8020dd4:	461a      	mov	r2, r3
 8020dd6:	da05      	bge.n	8020de4 <_vsniprintf_r+0x1a>
 8020dd8:	238b      	movs	r3, #139	; 0x8b
 8020dda:	6003      	str	r3, [r0, #0]
 8020ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020de0:	b01b      	add	sp, #108	; 0x6c
 8020de2:	bd30      	pop	{r4, r5, pc}
 8020de4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020de8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020dec:	bf14      	ite	ne
 8020dee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020df2:	4623      	moveq	r3, r4
 8020df4:	9302      	str	r3, [sp, #8]
 8020df6:	9305      	str	r3, [sp, #20]
 8020df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020dfc:	9100      	str	r1, [sp, #0]
 8020dfe:	9104      	str	r1, [sp, #16]
 8020e00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e04:	4669      	mov	r1, sp
 8020e06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020e08:	f002 fb88 	bl	802351c <_svfiprintf_r>
 8020e0c:	1c43      	adds	r3, r0, #1
 8020e0e:	bfbc      	itt	lt
 8020e10:	238b      	movlt	r3, #139	; 0x8b
 8020e12:	602b      	strlt	r3, [r5, #0]
 8020e14:	2c00      	cmp	r4, #0
 8020e16:	d0e3      	beq.n	8020de0 <_vsniprintf_r+0x16>
 8020e18:	9b00      	ldr	r3, [sp, #0]
 8020e1a:	2200      	movs	r2, #0
 8020e1c:	701a      	strb	r2, [r3, #0]
 8020e1e:	e7df      	b.n	8020de0 <_vsniprintf_r+0x16>

08020e20 <vsniprintf>:
 8020e20:	b507      	push	{r0, r1, r2, lr}
 8020e22:	9300      	str	r3, [sp, #0]
 8020e24:	4613      	mov	r3, r2
 8020e26:	460a      	mov	r2, r1
 8020e28:	4601      	mov	r1, r0
 8020e2a:	4803      	ldr	r0, [pc, #12]	; (8020e38 <vsniprintf+0x18>)
 8020e2c:	6800      	ldr	r0, [r0, #0]
 8020e2e:	f7ff ffcc 	bl	8020dca <_vsniprintf_r>
 8020e32:	b003      	add	sp, #12
 8020e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8020e38:	200009d8 	.word	0x200009d8

08020e3c <__swbuf_r>:
 8020e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e3e:	460e      	mov	r6, r1
 8020e40:	4614      	mov	r4, r2
 8020e42:	4605      	mov	r5, r0
 8020e44:	b118      	cbz	r0, 8020e4e <__swbuf_r+0x12>
 8020e46:	6a03      	ldr	r3, [r0, #32]
 8020e48:	b90b      	cbnz	r3, 8020e4e <__swbuf_r+0x12>
 8020e4a:	f7ff fd7b 	bl	8020944 <__sinit>
 8020e4e:	69a3      	ldr	r3, [r4, #24]
 8020e50:	60a3      	str	r3, [r4, #8]
 8020e52:	89a3      	ldrh	r3, [r4, #12]
 8020e54:	071a      	lsls	r2, r3, #28
 8020e56:	d525      	bpl.n	8020ea4 <__swbuf_r+0x68>
 8020e58:	6923      	ldr	r3, [r4, #16]
 8020e5a:	b31b      	cbz	r3, 8020ea4 <__swbuf_r+0x68>
 8020e5c:	6823      	ldr	r3, [r4, #0]
 8020e5e:	6922      	ldr	r2, [r4, #16]
 8020e60:	1a98      	subs	r0, r3, r2
 8020e62:	6963      	ldr	r3, [r4, #20]
 8020e64:	b2f6      	uxtb	r6, r6
 8020e66:	4283      	cmp	r3, r0
 8020e68:	4637      	mov	r7, r6
 8020e6a:	dc04      	bgt.n	8020e76 <__swbuf_r+0x3a>
 8020e6c:	4621      	mov	r1, r4
 8020e6e:	4628      	mov	r0, r5
 8020e70:	f002 fe1c 	bl	8023aac <_fflush_r>
 8020e74:	b9e0      	cbnz	r0, 8020eb0 <__swbuf_r+0x74>
 8020e76:	68a3      	ldr	r3, [r4, #8]
 8020e78:	3b01      	subs	r3, #1
 8020e7a:	60a3      	str	r3, [r4, #8]
 8020e7c:	6823      	ldr	r3, [r4, #0]
 8020e7e:	1c5a      	adds	r2, r3, #1
 8020e80:	6022      	str	r2, [r4, #0]
 8020e82:	701e      	strb	r6, [r3, #0]
 8020e84:	6962      	ldr	r2, [r4, #20]
 8020e86:	1c43      	adds	r3, r0, #1
 8020e88:	429a      	cmp	r2, r3
 8020e8a:	d004      	beq.n	8020e96 <__swbuf_r+0x5a>
 8020e8c:	89a3      	ldrh	r3, [r4, #12]
 8020e8e:	07db      	lsls	r3, r3, #31
 8020e90:	d506      	bpl.n	8020ea0 <__swbuf_r+0x64>
 8020e92:	2e0a      	cmp	r6, #10
 8020e94:	d104      	bne.n	8020ea0 <__swbuf_r+0x64>
 8020e96:	4621      	mov	r1, r4
 8020e98:	4628      	mov	r0, r5
 8020e9a:	f002 fe07 	bl	8023aac <_fflush_r>
 8020e9e:	b938      	cbnz	r0, 8020eb0 <__swbuf_r+0x74>
 8020ea0:	4638      	mov	r0, r7
 8020ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ea4:	4621      	mov	r1, r4
 8020ea6:	4628      	mov	r0, r5
 8020ea8:	f000 f806 	bl	8020eb8 <__swsetup_r>
 8020eac:	2800      	cmp	r0, #0
 8020eae:	d0d5      	beq.n	8020e5c <__swbuf_r+0x20>
 8020eb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020eb4:	e7f4      	b.n	8020ea0 <__swbuf_r+0x64>
	...

08020eb8 <__swsetup_r>:
 8020eb8:	b538      	push	{r3, r4, r5, lr}
 8020eba:	4b2a      	ldr	r3, [pc, #168]	; (8020f64 <__swsetup_r+0xac>)
 8020ebc:	4605      	mov	r5, r0
 8020ebe:	6818      	ldr	r0, [r3, #0]
 8020ec0:	460c      	mov	r4, r1
 8020ec2:	b118      	cbz	r0, 8020ecc <__swsetup_r+0x14>
 8020ec4:	6a03      	ldr	r3, [r0, #32]
 8020ec6:	b90b      	cbnz	r3, 8020ecc <__swsetup_r+0x14>
 8020ec8:	f7ff fd3c 	bl	8020944 <__sinit>
 8020ecc:	89a3      	ldrh	r3, [r4, #12]
 8020ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ed2:	0718      	lsls	r0, r3, #28
 8020ed4:	d422      	bmi.n	8020f1c <__swsetup_r+0x64>
 8020ed6:	06d9      	lsls	r1, r3, #27
 8020ed8:	d407      	bmi.n	8020eea <__swsetup_r+0x32>
 8020eda:	2309      	movs	r3, #9
 8020edc:	602b      	str	r3, [r5, #0]
 8020ede:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020ee2:	81a3      	strh	r3, [r4, #12]
 8020ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020ee8:	e034      	b.n	8020f54 <__swsetup_r+0x9c>
 8020eea:	0758      	lsls	r0, r3, #29
 8020eec:	d512      	bpl.n	8020f14 <__swsetup_r+0x5c>
 8020eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020ef0:	b141      	cbz	r1, 8020f04 <__swsetup_r+0x4c>
 8020ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020ef6:	4299      	cmp	r1, r3
 8020ef8:	d002      	beq.n	8020f00 <__swsetup_r+0x48>
 8020efa:	4628      	mov	r0, r5
 8020efc:	f000 ff60 	bl	8021dc0 <_free_r>
 8020f00:	2300      	movs	r3, #0
 8020f02:	6363      	str	r3, [r4, #52]	; 0x34
 8020f04:	89a3      	ldrh	r3, [r4, #12]
 8020f06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020f0a:	81a3      	strh	r3, [r4, #12]
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	6063      	str	r3, [r4, #4]
 8020f10:	6923      	ldr	r3, [r4, #16]
 8020f12:	6023      	str	r3, [r4, #0]
 8020f14:	89a3      	ldrh	r3, [r4, #12]
 8020f16:	f043 0308 	orr.w	r3, r3, #8
 8020f1a:	81a3      	strh	r3, [r4, #12]
 8020f1c:	6923      	ldr	r3, [r4, #16]
 8020f1e:	b94b      	cbnz	r3, 8020f34 <__swsetup_r+0x7c>
 8020f20:	89a3      	ldrh	r3, [r4, #12]
 8020f22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f2a:	d003      	beq.n	8020f34 <__swsetup_r+0x7c>
 8020f2c:	4621      	mov	r1, r4
 8020f2e:	4628      	mov	r0, r5
 8020f30:	f002 fe1c 	bl	8023b6c <__smakebuf_r>
 8020f34:	89a0      	ldrh	r0, [r4, #12]
 8020f36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f3a:	f010 0301 	ands.w	r3, r0, #1
 8020f3e:	d00a      	beq.n	8020f56 <__swsetup_r+0x9e>
 8020f40:	2300      	movs	r3, #0
 8020f42:	60a3      	str	r3, [r4, #8]
 8020f44:	6963      	ldr	r3, [r4, #20]
 8020f46:	425b      	negs	r3, r3
 8020f48:	61a3      	str	r3, [r4, #24]
 8020f4a:	6923      	ldr	r3, [r4, #16]
 8020f4c:	b943      	cbnz	r3, 8020f60 <__swsetup_r+0xa8>
 8020f4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020f52:	d1c4      	bne.n	8020ede <__swsetup_r+0x26>
 8020f54:	bd38      	pop	{r3, r4, r5, pc}
 8020f56:	0781      	lsls	r1, r0, #30
 8020f58:	bf58      	it	pl
 8020f5a:	6963      	ldrpl	r3, [r4, #20]
 8020f5c:	60a3      	str	r3, [r4, #8]
 8020f5e:	e7f4      	b.n	8020f4a <__swsetup_r+0x92>
 8020f60:	2000      	movs	r0, #0
 8020f62:	e7f7      	b.n	8020f54 <__swsetup_r+0x9c>
 8020f64:	200009d8 	.word	0x200009d8

08020f68 <memcmp>:
 8020f68:	b510      	push	{r4, lr}
 8020f6a:	3901      	subs	r1, #1
 8020f6c:	4402      	add	r2, r0
 8020f6e:	4290      	cmp	r0, r2
 8020f70:	d101      	bne.n	8020f76 <memcmp+0xe>
 8020f72:	2000      	movs	r0, #0
 8020f74:	e005      	b.n	8020f82 <memcmp+0x1a>
 8020f76:	7803      	ldrb	r3, [r0, #0]
 8020f78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020f7c:	42a3      	cmp	r3, r4
 8020f7e:	d001      	beq.n	8020f84 <memcmp+0x1c>
 8020f80:	1b18      	subs	r0, r3, r4
 8020f82:	bd10      	pop	{r4, pc}
 8020f84:	3001      	adds	r0, #1
 8020f86:	e7f2      	b.n	8020f6e <memcmp+0x6>

08020f88 <memmove>:
 8020f88:	4288      	cmp	r0, r1
 8020f8a:	b510      	push	{r4, lr}
 8020f8c:	eb01 0402 	add.w	r4, r1, r2
 8020f90:	d902      	bls.n	8020f98 <memmove+0x10>
 8020f92:	4284      	cmp	r4, r0
 8020f94:	4623      	mov	r3, r4
 8020f96:	d807      	bhi.n	8020fa8 <memmove+0x20>
 8020f98:	1e43      	subs	r3, r0, #1
 8020f9a:	42a1      	cmp	r1, r4
 8020f9c:	d008      	beq.n	8020fb0 <memmove+0x28>
 8020f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020fa6:	e7f8      	b.n	8020f9a <memmove+0x12>
 8020fa8:	4402      	add	r2, r0
 8020faa:	4601      	mov	r1, r0
 8020fac:	428a      	cmp	r2, r1
 8020fae:	d100      	bne.n	8020fb2 <memmove+0x2a>
 8020fb0:	bd10      	pop	{r4, pc}
 8020fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020fba:	e7f7      	b.n	8020fac <memmove+0x24>

08020fbc <memset>:
 8020fbc:	4402      	add	r2, r0
 8020fbe:	4603      	mov	r3, r0
 8020fc0:	4293      	cmp	r3, r2
 8020fc2:	d100      	bne.n	8020fc6 <memset+0xa>
 8020fc4:	4770      	bx	lr
 8020fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8020fca:	e7f9      	b.n	8020fc0 <memset+0x4>

08020fcc <strchr>:
 8020fcc:	b2c9      	uxtb	r1, r1
 8020fce:	4603      	mov	r3, r0
 8020fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fd4:	b11a      	cbz	r2, 8020fde <strchr+0x12>
 8020fd6:	428a      	cmp	r2, r1
 8020fd8:	d1f9      	bne.n	8020fce <strchr+0x2>
 8020fda:	4618      	mov	r0, r3
 8020fdc:	4770      	bx	lr
 8020fde:	2900      	cmp	r1, #0
 8020fe0:	bf18      	it	ne
 8020fe2:	2300      	movne	r3, #0
 8020fe4:	e7f9      	b.n	8020fda <strchr+0xe>

08020fe6 <strncmp>:
 8020fe6:	b510      	push	{r4, lr}
 8020fe8:	b16a      	cbz	r2, 8021006 <strncmp+0x20>
 8020fea:	3901      	subs	r1, #1
 8020fec:	1884      	adds	r4, r0, r2
 8020fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ff2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	d103      	bne.n	8021002 <strncmp+0x1c>
 8020ffa:	42a0      	cmp	r0, r4
 8020ffc:	d001      	beq.n	8021002 <strncmp+0x1c>
 8020ffe:	2a00      	cmp	r2, #0
 8021000:	d1f5      	bne.n	8020fee <strncmp+0x8>
 8021002:	1ad0      	subs	r0, r2, r3
 8021004:	bd10      	pop	{r4, pc}
 8021006:	4610      	mov	r0, r2
 8021008:	e7fc      	b.n	8021004 <strncmp+0x1e>

0802100a <strstr>:
 802100a:	780a      	ldrb	r2, [r1, #0]
 802100c:	b570      	push	{r4, r5, r6, lr}
 802100e:	b96a      	cbnz	r2, 802102c <strstr+0x22>
 8021010:	bd70      	pop	{r4, r5, r6, pc}
 8021012:	429a      	cmp	r2, r3
 8021014:	d109      	bne.n	802102a <strstr+0x20>
 8021016:	460c      	mov	r4, r1
 8021018:	4605      	mov	r5, r0
 802101a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802101e:	2b00      	cmp	r3, #0
 8021020:	d0f6      	beq.n	8021010 <strstr+0x6>
 8021022:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021026:	429e      	cmp	r6, r3
 8021028:	d0f7      	beq.n	802101a <strstr+0x10>
 802102a:	3001      	adds	r0, #1
 802102c:	7803      	ldrb	r3, [r0, #0]
 802102e:	2b00      	cmp	r3, #0
 8021030:	d1ef      	bne.n	8021012 <strstr+0x8>
 8021032:	4618      	mov	r0, r3
 8021034:	e7ec      	b.n	8021010 <strstr+0x6>
	...

08021038 <_localeconv_r>:
 8021038:	4800      	ldr	r0, [pc, #0]	; (802103c <_localeconv_r+0x4>)
 802103a:	4770      	bx	lr
 802103c:	20000acc 	.word	0x20000acc

08021040 <_close_r>:
 8021040:	b538      	push	{r3, r4, r5, lr}
 8021042:	4d06      	ldr	r5, [pc, #24]	; (802105c <_close_r+0x1c>)
 8021044:	2300      	movs	r3, #0
 8021046:	4604      	mov	r4, r0
 8021048:	4608      	mov	r0, r1
 802104a:	602b      	str	r3, [r5, #0]
 802104c:	f7e2 fecf 	bl	8003dee <_close>
 8021050:	1c43      	adds	r3, r0, #1
 8021052:	d102      	bne.n	802105a <_close_r+0x1a>
 8021054:	682b      	ldr	r3, [r5, #0]
 8021056:	b103      	cbz	r3, 802105a <_close_r+0x1a>
 8021058:	6023      	str	r3, [r4, #0]
 802105a:	bd38      	pop	{r3, r4, r5, pc}
 802105c:	20017278 	.word	0x20017278

08021060 <_lseek_r>:
 8021060:	b538      	push	{r3, r4, r5, lr}
 8021062:	4d07      	ldr	r5, [pc, #28]	; (8021080 <_lseek_r+0x20>)
 8021064:	4604      	mov	r4, r0
 8021066:	4608      	mov	r0, r1
 8021068:	4611      	mov	r1, r2
 802106a:	2200      	movs	r2, #0
 802106c:	602a      	str	r2, [r5, #0]
 802106e:	461a      	mov	r2, r3
 8021070:	f7e2 fee4 	bl	8003e3c <_lseek>
 8021074:	1c43      	adds	r3, r0, #1
 8021076:	d102      	bne.n	802107e <_lseek_r+0x1e>
 8021078:	682b      	ldr	r3, [r5, #0]
 802107a:	b103      	cbz	r3, 802107e <_lseek_r+0x1e>
 802107c:	6023      	str	r3, [r4, #0]
 802107e:	bd38      	pop	{r3, r4, r5, pc}
 8021080:	20017278 	.word	0x20017278

08021084 <_read_r>:
 8021084:	b538      	push	{r3, r4, r5, lr}
 8021086:	4d07      	ldr	r5, [pc, #28]	; (80210a4 <_read_r+0x20>)
 8021088:	4604      	mov	r4, r0
 802108a:	4608      	mov	r0, r1
 802108c:	4611      	mov	r1, r2
 802108e:	2200      	movs	r2, #0
 8021090:	602a      	str	r2, [r5, #0]
 8021092:	461a      	mov	r2, r3
 8021094:	f7e2 fe72 	bl	8003d7c <_read>
 8021098:	1c43      	adds	r3, r0, #1
 802109a:	d102      	bne.n	80210a2 <_read_r+0x1e>
 802109c:	682b      	ldr	r3, [r5, #0]
 802109e:	b103      	cbz	r3, 80210a2 <_read_r+0x1e>
 80210a0:	6023      	str	r3, [r4, #0]
 80210a2:	bd38      	pop	{r3, r4, r5, pc}
 80210a4:	20017278 	.word	0x20017278

080210a8 <_sbrk_r>:
 80210a8:	b538      	push	{r3, r4, r5, lr}
 80210aa:	4d06      	ldr	r5, [pc, #24]	; (80210c4 <_sbrk_r+0x1c>)
 80210ac:	2300      	movs	r3, #0
 80210ae:	4604      	mov	r4, r0
 80210b0:	4608      	mov	r0, r1
 80210b2:	602b      	str	r3, [r5, #0]
 80210b4:	f7e2 fed0 	bl	8003e58 <_sbrk>
 80210b8:	1c43      	adds	r3, r0, #1
 80210ba:	d102      	bne.n	80210c2 <_sbrk_r+0x1a>
 80210bc:	682b      	ldr	r3, [r5, #0]
 80210be:	b103      	cbz	r3, 80210c2 <_sbrk_r+0x1a>
 80210c0:	6023      	str	r3, [r4, #0]
 80210c2:	bd38      	pop	{r3, r4, r5, pc}
 80210c4:	20017278 	.word	0x20017278

080210c8 <_write_r>:
 80210c8:	b538      	push	{r3, r4, r5, lr}
 80210ca:	4d07      	ldr	r5, [pc, #28]	; (80210e8 <_write_r+0x20>)
 80210cc:	4604      	mov	r4, r0
 80210ce:	4608      	mov	r0, r1
 80210d0:	4611      	mov	r1, r2
 80210d2:	2200      	movs	r2, #0
 80210d4:	602a      	str	r2, [r5, #0]
 80210d6:	461a      	mov	r2, r3
 80210d8:	f7e2 fe6d 	bl	8003db6 <_write>
 80210dc:	1c43      	adds	r3, r0, #1
 80210de:	d102      	bne.n	80210e6 <_write_r+0x1e>
 80210e0:	682b      	ldr	r3, [r5, #0]
 80210e2:	b103      	cbz	r3, 80210e6 <_write_r+0x1e>
 80210e4:	6023      	str	r3, [r4, #0]
 80210e6:	bd38      	pop	{r3, r4, r5, pc}
 80210e8:	20017278 	.word	0x20017278

080210ec <__errno>:
 80210ec:	4b01      	ldr	r3, [pc, #4]	; (80210f4 <__errno+0x8>)
 80210ee:	6818      	ldr	r0, [r3, #0]
 80210f0:	4770      	bx	lr
 80210f2:	bf00      	nop
 80210f4:	200009d8 	.word	0x200009d8

080210f8 <__libc_init_array>:
 80210f8:	b570      	push	{r4, r5, r6, lr}
 80210fa:	4d0d      	ldr	r5, [pc, #52]	; (8021130 <__libc_init_array+0x38>)
 80210fc:	4c0d      	ldr	r4, [pc, #52]	; (8021134 <__libc_init_array+0x3c>)
 80210fe:	1b64      	subs	r4, r4, r5
 8021100:	10a4      	asrs	r4, r4, #2
 8021102:	2600      	movs	r6, #0
 8021104:	42a6      	cmp	r6, r4
 8021106:	d109      	bne.n	802111c <__libc_init_array+0x24>
 8021108:	4d0b      	ldr	r5, [pc, #44]	; (8021138 <__libc_init_array+0x40>)
 802110a:	4c0c      	ldr	r4, [pc, #48]	; (802113c <__libc_init_array+0x44>)
 802110c:	f003 f954 	bl	80243b8 <_init>
 8021110:	1b64      	subs	r4, r4, r5
 8021112:	10a4      	asrs	r4, r4, #2
 8021114:	2600      	movs	r6, #0
 8021116:	42a6      	cmp	r6, r4
 8021118:	d105      	bne.n	8021126 <__libc_init_array+0x2e>
 802111a:	bd70      	pop	{r4, r5, r6, pc}
 802111c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021120:	4798      	blx	r3
 8021122:	3601      	adds	r6, #1
 8021124:	e7ee      	b.n	8021104 <__libc_init_array+0xc>
 8021126:	f855 3b04 	ldr.w	r3, [r5], #4
 802112a:	4798      	blx	r3
 802112c:	3601      	adds	r6, #1
 802112e:	e7f2      	b.n	8021116 <__libc_init_array+0x1e>
 8021130:	08026184 	.word	0x08026184
 8021134:	08026184 	.word	0x08026184
 8021138:	08026184 	.word	0x08026184
 802113c:	0802619c 	.word	0x0802619c

08021140 <__retarget_lock_init_recursive>:
 8021140:	4770      	bx	lr

08021142 <__retarget_lock_acquire_recursive>:
 8021142:	4770      	bx	lr

08021144 <__retarget_lock_release_recursive>:
 8021144:	4770      	bx	lr

08021146 <strcpy>:
 8021146:	4603      	mov	r3, r0
 8021148:	f811 2b01 	ldrb.w	r2, [r1], #1
 802114c:	f803 2b01 	strb.w	r2, [r3], #1
 8021150:	2a00      	cmp	r2, #0
 8021152:	d1f9      	bne.n	8021148 <strcpy+0x2>
 8021154:	4770      	bx	lr

08021156 <memcpy>:
 8021156:	440a      	add	r2, r1
 8021158:	4291      	cmp	r1, r2
 802115a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802115e:	d100      	bne.n	8021162 <memcpy+0xc>
 8021160:	4770      	bx	lr
 8021162:	b510      	push	{r4, lr}
 8021164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021168:	f803 4f01 	strb.w	r4, [r3, #1]!
 802116c:	4291      	cmp	r1, r2
 802116e:	d1f9      	bne.n	8021164 <memcpy+0xe>
 8021170:	bd10      	pop	{r4, pc}
	...

08021174 <nanf>:
 8021174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802117c <nanf+0x8>
 8021178:	4770      	bx	lr
 802117a:	bf00      	nop
 802117c:	7fc00000 	.word	0x7fc00000

08021180 <__assert_func>:
 8021180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021182:	4614      	mov	r4, r2
 8021184:	461a      	mov	r2, r3
 8021186:	4b09      	ldr	r3, [pc, #36]	; (80211ac <__assert_func+0x2c>)
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	4605      	mov	r5, r0
 802118c:	68d8      	ldr	r0, [r3, #12]
 802118e:	b14c      	cbz	r4, 80211a4 <__assert_func+0x24>
 8021190:	4b07      	ldr	r3, [pc, #28]	; (80211b0 <__assert_func+0x30>)
 8021192:	9100      	str	r1, [sp, #0]
 8021194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021198:	4906      	ldr	r1, [pc, #24]	; (80211b4 <__assert_func+0x34>)
 802119a:	462b      	mov	r3, r5
 802119c:	f002 fcae 	bl	8023afc <fiprintf>
 80211a0:	f002 fd4a 	bl	8023c38 <abort>
 80211a4:	4b04      	ldr	r3, [pc, #16]	; (80211b8 <__assert_func+0x38>)
 80211a6:	461c      	mov	r4, r3
 80211a8:	e7f3      	b.n	8021192 <__assert_func+0x12>
 80211aa:	bf00      	nop
 80211ac:	200009d8 	.word	0x200009d8
 80211b0:	08025ea5 	.word	0x08025ea5
 80211b4:	08025eb2 	.word	0x08025eb2
 80211b8:	08025ee0 	.word	0x08025ee0

080211bc <quorem>:
 80211bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211c0:	6903      	ldr	r3, [r0, #16]
 80211c2:	690c      	ldr	r4, [r1, #16]
 80211c4:	42a3      	cmp	r3, r4
 80211c6:	4607      	mov	r7, r0
 80211c8:	db7e      	blt.n	80212c8 <quorem+0x10c>
 80211ca:	3c01      	subs	r4, #1
 80211cc:	f101 0814 	add.w	r8, r1, #20
 80211d0:	f100 0514 	add.w	r5, r0, #20
 80211d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80211d8:	9301      	str	r3, [sp, #4]
 80211da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80211de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80211e2:	3301      	adds	r3, #1
 80211e4:	429a      	cmp	r2, r3
 80211e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80211ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80211ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80211f2:	d331      	bcc.n	8021258 <quorem+0x9c>
 80211f4:	f04f 0e00 	mov.w	lr, #0
 80211f8:	4640      	mov	r0, r8
 80211fa:	46ac      	mov	ip, r5
 80211fc:	46f2      	mov	sl, lr
 80211fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8021202:	b293      	uxth	r3, r2
 8021204:	fb06 e303 	mla	r3, r6, r3, lr
 8021208:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802120c:	0c1a      	lsrs	r2, r3, #16
 802120e:	b29b      	uxth	r3, r3
 8021210:	ebaa 0303 	sub.w	r3, sl, r3
 8021214:	f8dc a000 	ldr.w	sl, [ip]
 8021218:	fa13 f38a 	uxtah	r3, r3, sl
 802121c:	fb06 220e 	mla	r2, r6, lr, r2
 8021220:	9300      	str	r3, [sp, #0]
 8021222:	9b00      	ldr	r3, [sp, #0]
 8021224:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021228:	b292      	uxth	r2, r2
 802122a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802122e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021232:	f8bd 3000 	ldrh.w	r3, [sp]
 8021236:	4581      	cmp	r9, r0
 8021238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802123c:	f84c 3b04 	str.w	r3, [ip], #4
 8021240:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021244:	d2db      	bcs.n	80211fe <quorem+0x42>
 8021246:	f855 300b 	ldr.w	r3, [r5, fp]
 802124a:	b92b      	cbnz	r3, 8021258 <quorem+0x9c>
 802124c:	9b01      	ldr	r3, [sp, #4]
 802124e:	3b04      	subs	r3, #4
 8021250:	429d      	cmp	r5, r3
 8021252:	461a      	mov	r2, r3
 8021254:	d32c      	bcc.n	80212b0 <quorem+0xf4>
 8021256:	613c      	str	r4, [r7, #16]
 8021258:	4638      	mov	r0, r7
 802125a:	f001 f8c3 	bl	80223e4 <__mcmp>
 802125e:	2800      	cmp	r0, #0
 8021260:	db22      	blt.n	80212a8 <quorem+0xec>
 8021262:	3601      	adds	r6, #1
 8021264:	4629      	mov	r1, r5
 8021266:	2000      	movs	r0, #0
 8021268:	f858 2b04 	ldr.w	r2, [r8], #4
 802126c:	f8d1 c000 	ldr.w	ip, [r1]
 8021270:	b293      	uxth	r3, r2
 8021272:	1ac3      	subs	r3, r0, r3
 8021274:	0c12      	lsrs	r2, r2, #16
 8021276:	fa13 f38c 	uxtah	r3, r3, ip
 802127a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802127e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021282:	b29b      	uxth	r3, r3
 8021284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021288:	45c1      	cmp	r9, r8
 802128a:	f841 3b04 	str.w	r3, [r1], #4
 802128e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8021292:	d2e9      	bcs.n	8021268 <quorem+0xac>
 8021294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802129c:	b922      	cbnz	r2, 80212a8 <quorem+0xec>
 802129e:	3b04      	subs	r3, #4
 80212a0:	429d      	cmp	r5, r3
 80212a2:	461a      	mov	r2, r3
 80212a4:	d30a      	bcc.n	80212bc <quorem+0x100>
 80212a6:	613c      	str	r4, [r7, #16]
 80212a8:	4630      	mov	r0, r6
 80212aa:	b003      	add	sp, #12
 80212ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212b0:	6812      	ldr	r2, [r2, #0]
 80212b2:	3b04      	subs	r3, #4
 80212b4:	2a00      	cmp	r2, #0
 80212b6:	d1ce      	bne.n	8021256 <quorem+0x9a>
 80212b8:	3c01      	subs	r4, #1
 80212ba:	e7c9      	b.n	8021250 <quorem+0x94>
 80212bc:	6812      	ldr	r2, [r2, #0]
 80212be:	3b04      	subs	r3, #4
 80212c0:	2a00      	cmp	r2, #0
 80212c2:	d1f0      	bne.n	80212a6 <quorem+0xea>
 80212c4:	3c01      	subs	r4, #1
 80212c6:	e7eb      	b.n	80212a0 <quorem+0xe4>
 80212c8:	2000      	movs	r0, #0
 80212ca:	e7ee      	b.n	80212aa <quorem+0xee>
 80212cc:	0000      	movs	r0, r0
	...

080212d0 <_dtoa_r>:
 80212d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d4:	ed2d 8b02 	vpush	{d8}
 80212d8:	69c5      	ldr	r5, [r0, #28]
 80212da:	b091      	sub	sp, #68	; 0x44
 80212dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80212e0:	ec59 8b10 	vmov	r8, r9, d0
 80212e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80212e6:	9106      	str	r1, [sp, #24]
 80212e8:	4606      	mov	r6, r0
 80212ea:	9208      	str	r2, [sp, #32]
 80212ec:	930c      	str	r3, [sp, #48]	; 0x30
 80212ee:	b975      	cbnz	r5, 802130e <_dtoa_r+0x3e>
 80212f0:	2010      	movs	r0, #16
 80212f2:	f7fe fa7f 	bl	801f7f4 <malloc>
 80212f6:	4602      	mov	r2, r0
 80212f8:	61f0      	str	r0, [r6, #28]
 80212fa:	b920      	cbnz	r0, 8021306 <_dtoa_r+0x36>
 80212fc:	4ba6      	ldr	r3, [pc, #664]	; (8021598 <_dtoa_r+0x2c8>)
 80212fe:	21ef      	movs	r1, #239	; 0xef
 8021300:	48a6      	ldr	r0, [pc, #664]	; (802159c <_dtoa_r+0x2cc>)
 8021302:	f7ff ff3d 	bl	8021180 <__assert_func>
 8021306:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802130a:	6005      	str	r5, [r0, #0]
 802130c:	60c5      	str	r5, [r0, #12]
 802130e:	69f3      	ldr	r3, [r6, #28]
 8021310:	6819      	ldr	r1, [r3, #0]
 8021312:	b151      	cbz	r1, 802132a <_dtoa_r+0x5a>
 8021314:	685a      	ldr	r2, [r3, #4]
 8021316:	604a      	str	r2, [r1, #4]
 8021318:	2301      	movs	r3, #1
 802131a:	4093      	lsls	r3, r2
 802131c:	608b      	str	r3, [r1, #8]
 802131e:	4630      	mov	r0, r6
 8021320:	f000 fdda 	bl	8021ed8 <_Bfree>
 8021324:	69f3      	ldr	r3, [r6, #28]
 8021326:	2200      	movs	r2, #0
 8021328:	601a      	str	r2, [r3, #0]
 802132a:	f1b9 0300 	subs.w	r3, r9, #0
 802132e:	bfbb      	ittet	lt
 8021330:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021334:	9303      	strlt	r3, [sp, #12]
 8021336:	2300      	movge	r3, #0
 8021338:	2201      	movlt	r2, #1
 802133a:	bfac      	ite	ge
 802133c:	6023      	strge	r3, [r4, #0]
 802133e:	6022      	strlt	r2, [r4, #0]
 8021340:	4b97      	ldr	r3, [pc, #604]	; (80215a0 <_dtoa_r+0x2d0>)
 8021342:	9c03      	ldr	r4, [sp, #12]
 8021344:	43a3      	bics	r3, r4
 8021346:	d11c      	bne.n	8021382 <_dtoa_r+0xb2>
 8021348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802134a:	f242 730f 	movw	r3, #9999	; 0x270f
 802134e:	6013      	str	r3, [r2, #0]
 8021350:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021354:	ea53 0308 	orrs.w	r3, r3, r8
 8021358:	f000 84fb 	beq.w	8021d52 <_dtoa_r+0xa82>
 802135c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802135e:	b963      	cbnz	r3, 802137a <_dtoa_r+0xaa>
 8021360:	4b90      	ldr	r3, [pc, #576]	; (80215a4 <_dtoa_r+0x2d4>)
 8021362:	e020      	b.n	80213a6 <_dtoa_r+0xd6>
 8021364:	4b90      	ldr	r3, [pc, #576]	; (80215a8 <_dtoa_r+0x2d8>)
 8021366:	9301      	str	r3, [sp, #4]
 8021368:	3308      	adds	r3, #8
 802136a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802136c:	6013      	str	r3, [r2, #0]
 802136e:	9801      	ldr	r0, [sp, #4]
 8021370:	b011      	add	sp, #68	; 0x44
 8021372:	ecbd 8b02 	vpop	{d8}
 8021376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802137a:	4b8a      	ldr	r3, [pc, #552]	; (80215a4 <_dtoa_r+0x2d4>)
 802137c:	9301      	str	r3, [sp, #4]
 802137e:	3303      	adds	r3, #3
 8021380:	e7f3      	b.n	802136a <_dtoa_r+0x9a>
 8021382:	ed9d 8b02 	vldr	d8, [sp, #8]
 8021386:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802138e:	d10c      	bne.n	80213aa <_dtoa_r+0xda>
 8021390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021392:	2301      	movs	r3, #1
 8021394:	6013      	str	r3, [r2, #0]
 8021396:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021398:	2b00      	cmp	r3, #0
 802139a:	f000 84d7 	beq.w	8021d4c <_dtoa_r+0xa7c>
 802139e:	4b83      	ldr	r3, [pc, #524]	; (80215ac <_dtoa_r+0x2dc>)
 80213a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80213a2:	6013      	str	r3, [r2, #0]
 80213a4:	3b01      	subs	r3, #1
 80213a6:	9301      	str	r3, [sp, #4]
 80213a8:	e7e1      	b.n	802136e <_dtoa_r+0x9e>
 80213aa:	aa0e      	add	r2, sp, #56	; 0x38
 80213ac:	a90f      	add	r1, sp, #60	; 0x3c
 80213ae:	4630      	mov	r0, r6
 80213b0:	eeb0 0b48 	vmov.f64	d0, d8
 80213b4:	f001 f92c 	bl	8022610 <__d2b>
 80213b8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80213bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80213be:	4605      	mov	r5, r0
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d046      	beq.n	8021452 <_dtoa_r+0x182>
 80213c4:	eeb0 7b48 	vmov.f64	d7, d8
 80213c8:	ee18 1a90 	vmov	r1, s17
 80213cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80213d0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80213d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80213d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80213dc:	2000      	movs	r0, #0
 80213de:	ee07 1a90 	vmov	s15, r1
 80213e2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80213e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021580 <_dtoa_r+0x2b0>
 80213ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80213ee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8021588 <_dtoa_r+0x2b8>
 80213f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80213f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021590 <_dtoa_r+0x2c0>
 80213fa:	ee07 3a90 	vmov	s15, r3
 80213fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8021402:	eeb0 7b46 	vmov.f64	d7, d6
 8021406:	eea4 7b05 	vfma.f64	d7, d4, d5
 802140a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802140e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8021412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021416:	ee16 ba90 	vmov	fp, s13
 802141a:	9009      	str	r0, [sp, #36]	; 0x24
 802141c:	d508      	bpl.n	8021430 <_dtoa_r+0x160>
 802141e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8021422:	eeb4 6b47 	vcmp.f64	d6, d7
 8021426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802142a:	bf18      	it	ne
 802142c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021430:	f1bb 0f16 	cmp.w	fp, #22
 8021434:	d82b      	bhi.n	802148e <_dtoa_r+0x1be>
 8021436:	495e      	ldr	r1, [pc, #376]	; (80215b0 <_dtoa_r+0x2e0>)
 8021438:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 802143c:	ed91 7b00 	vldr	d7, [r1]
 8021440:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8021444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021448:	d501      	bpl.n	802144e <_dtoa_r+0x17e>
 802144a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802144e:	2100      	movs	r1, #0
 8021450:	e01e      	b.n	8021490 <_dtoa_r+0x1c0>
 8021452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021454:	4413      	add	r3, r2
 8021456:	f203 4132 	addw	r1, r3, #1074	; 0x432
 802145a:	2920      	cmp	r1, #32
 802145c:	bfc1      	itttt	gt
 802145e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8021462:	408c      	lslgt	r4, r1
 8021464:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8021468:	fa28 f101 	lsrgt.w	r1, r8, r1
 802146c:	bfd6      	itet	le
 802146e:	f1c1 0120 	rsble	r1, r1, #32
 8021472:	4321      	orrgt	r1, r4
 8021474:	fa08 f101 	lslle.w	r1, r8, r1
 8021478:	ee07 1a90 	vmov	s15, r1
 802147c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021480:	3b01      	subs	r3, #1
 8021482:	ee17 1a90 	vmov	r1, s15
 8021486:	2001      	movs	r0, #1
 8021488:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 802148c:	e7a7      	b.n	80213de <_dtoa_r+0x10e>
 802148e:	2101      	movs	r1, #1
 8021490:	1ad2      	subs	r2, r2, r3
 8021492:	1e53      	subs	r3, r2, #1
 8021494:	9305      	str	r3, [sp, #20]
 8021496:	bf45      	ittet	mi
 8021498:	f1c2 0301 	rsbmi	r3, r2, #1
 802149c:	9304      	strmi	r3, [sp, #16]
 802149e:	2300      	movpl	r3, #0
 80214a0:	2300      	movmi	r3, #0
 80214a2:	bf4c      	ite	mi
 80214a4:	9305      	strmi	r3, [sp, #20]
 80214a6:	9304      	strpl	r3, [sp, #16]
 80214a8:	f1bb 0f00 	cmp.w	fp, #0
 80214ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80214ae:	db18      	blt.n	80214e2 <_dtoa_r+0x212>
 80214b0:	9b05      	ldr	r3, [sp, #20]
 80214b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80214b6:	445b      	add	r3, fp
 80214b8:	9305      	str	r3, [sp, #20]
 80214ba:	2300      	movs	r3, #0
 80214bc:	9a06      	ldr	r2, [sp, #24]
 80214be:	2a09      	cmp	r2, #9
 80214c0:	d848      	bhi.n	8021554 <_dtoa_r+0x284>
 80214c2:	2a05      	cmp	r2, #5
 80214c4:	bfc4      	itt	gt
 80214c6:	3a04      	subgt	r2, #4
 80214c8:	9206      	strgt	r2, [sp, #24]
 80214ca:	9a06      	ldr	r2, [sp, #24]
 80214cc:	f1a2 0202 	sub.w	r2, r2, #2
 80214d0:	bfcc      	ite	gt
 80214d2:	2400      	movgt	r4, #0
 80214d4:	2401      	movle	r4, #1
 80214d6:	2a03      	cmp	r2, #3
 80214d8:	d847      	bhi.n	802156a <_dtoa_r+0x29a>
 80214da:	e8df f002 	tbb	[pc, r2]
 80214de:	2d0b      	.short	0x2d0b
 80214e0:	392b      	.short	0x392b
 80214e2:	9b04      	ldr	r3, [sp, #16]
 80214e4:	2200      	movs	r2, #0
 80214e6:	eba3 030b 	sub.w	r3, r3, fp
 80214ea:	9304      	str	r3, [sp, #16]
 80214ec:	920a      	str	r2, [sp, #40]	; 0x28
 80214ee:	f1cb 0300 	rsb	r3, fp, #0
 80214f2:	e7e3      	b.n	80214bc <_dtoa_r+0x1ec>
 80214f4:	2200      	movs	r2, #0
 80214f6:	9207      	str	r2, [sp, #28]
 80214f8:	9a08      	ldr	r2, [sp, #32]
 80214fa:	2a00      	cmp	r2, #0
 80214fc:	dc38      	bgt.n	8021570 <_dtoa_r+0x2a0>
 80214fe:	f04f 0a01 	mov.w	sl, #1
 8021502:	46d1      	mov	r9, sl
 8021504:	4652      	mov	r2, sl
 8021506:	f8cd a020 	str.w	sl, [sp, #32]
 802150a:	69f7      	ldr	r7, [r6, #28]
 802150c:	2100      	movs	r1, #0
 802150e:	2004      	movs	r0, #4
 8021510:	f100 0c14 	add.w	ip, r0, #20
 8021514:	4594      	cmp	ip, r2
 8021516:	d930      	bls.n	802157a <_dtoa_r+0x2aa>
 8021518:	6079      	str	r1, [r7, #4]
 802151a:	4630      	mov	r0, r6
 802151c:	930d      	str	r3, [sp, #52]	; 0x34
 802151e:	f000 fc9b 	bl	8021e58 <_Balloc>
 8021522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021524:	9001      	str	r0, [sp, #4]
 8021526:	4602      	mov	r2, r0
 8021528:	2800      	cmp	r0, #0
 802152a:	d145      	bne.n	80215b8 <_dtoa_r+0x2e8>
 802152c:	4b21      	ldr	r3, [pc, #132]	; (80215b4 <_dtoa_r+0x2e4>)
 802152e:	f240 11af 	movw	r1, #431	; 0x1af
 8021532:	e6e5      	b.n	8021300 <_dtoa_r+0x30>
 8021534:	2201      	movs	r2, #1
 8021536:	e7de      	b.n	80214f6 <_dtoa_r+0x226>
 8021538:	2200      	movs	r2, #0
 802153a:	9207      	str	r2, [sp, #28]
 802153c:	9a08      	ldr	r2, [sp, #32]
 802153e:	eb0b 0a02 	add.w	sl, fp, r2
 8021542:	f10a 0901 	add.w	r9, sl, #1
 8021546:	464a      	mov	r2, r9
 8021548:	2a01      	cmp	r2, #1
 802154a:	bfb8      	it	lt
 802154c:	2201      	movlt	r2, #1
 802154e:	e7dc      	b.n	802150a <_dtoa_r+0x23a>
 8021550:	2201      	movs	r2, #1
 8021552:	e7f2      	b.n	802153a <_dtoa_r+0x26a>
 8021554:	2401      	movs	r4, #1
 8021556:	2200      	movs	r2, #0
 8021558:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802155c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8021560:	2100      	movs	r1, #0
 8021562:	46d1      	mov	r9, sl
 8021564:	2212      	movs	r2, #18
 8021566:	9108      	str	r1, [sp, #32]
 8021568:	e7cf      	b.n	802150a <_dtoa_r+0x23a>
 802156a:	2201      	movs	r2, #1
 802156c:	9207      	str	r2, [sp, #28]
 802156e:	e7f5      	b.n	802155c <_dtoa_r+0x28c>
 8021570:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021574:	46d1      	mov	r9, sl
 8021576:	4652      	mov	r2, sl
 8021578:	e7c7      	b.n	802150a <_dtoa_r+0x23a>
 802157a:	3101      	adds	r1, #1
 802157c:	0040      	lsls	r0, r0, #1
 802157e:	e7c7      	b.n	8021510 <_dtoa_r+0x240>
 8021580:	636f4361 	.word	0x636f4361
 8021584:	3fd287a7 	.word	0x3fd287a7
 8021588:	8b60c8b3 	.word	0x8b60c8b3
 802158c:	3fc68a28 	.word	0x3fc68a28
 8021590:	509f79fb 	.word	0x509f79fb
 8021594:	3fd34413 	.word	0x3fd34413
 8021598:	08025cfc 	.word	0x08025cfc
 802159c:	08025eee 	.word	0x08025eee
 80215a0:	7ff00000 	.word	0x7ff00000
 80215a4:	08025eea 	.word	0x08025eea
 80215a8:	08025ee1 	.word	0x08025ee1
 80215ac:	08025e7d 	.word	0x08025e7d
 80215b0:	08025fd8 	.word	0x08025fd8
 80215b4:	08025f46 	.word	0x08025f46
 80215b8:	69f2      	ldr	r2, [r6, #28]
 80215ba:	9901      	ldr	r1, [sp, #4]
 80215bc:	6011      	str	r1, [r2, #0]
 80215be:	f1b9 0f0e 	cmp.w	r9, #14
 80215c2:	d86c      	bhi.n	802169e <_dtoa_r+0x3ce>
 80215c4:	2c00      	cmp	r4, #0
 80215c6:	d06a      	beq.n	802169e <_dtoa_r+0x3ce>
 80215c8:	f1bb 0f00 	cmp.w	fp, #0
 80215cc:	f340 80a0 	ble.w	8021710 <_dtoa_r+0x440>
 80215d0:	4ac1      	ldr	r2, [pc, #772]	; (80218d8 <_dtoa_r+0x608>)
 80215d2:	f00b 010f 	and.w	r1, fp, #15
 80215d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80215da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80215de:	ed92 7b00 	vldr	d7, [r2]
 80215e2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80215e6:	f000 8087 	beq.w	80216f8 <_dtoa_r+0x428>
 80215ea:	49bc      	ldr	r1, [pc, #752]	; (80218dc <_dtoa_r+0x60c>)
 80215ec:	ed91 6b08 	vldr	d6, [r1, #32]
 80215f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80215f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80215f8:	f002 020f 	and.w	r2, r2, #15
 80215fc:	2103      	movs	r1, #3
 80215fe:	48b7      	ldr	r0, [pc, #732]	; (80218dc <_dtoa_r+0x60c>)
 8021600:	2a00      	cmp	r2, #0
 8021602:	d17b      	bne.n	80216fc <_dtoa_r+0x42c>
 8021604:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021608:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802160c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021610:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021612:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021616:	2a00      	cmp	r2, #0
 8021618:	f000 80a0 	beq.w	802175c <_dtoa_r+0x48c>
 802161c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021620:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021628:	f140 8098 	bpl.w	802175c <_dtoa_r+0x48c>
 802162c:	f1b9 0f00 	cmp.w	r9, #0
 8021630:	f000 8094 	beq.w	802175c <_dtoa_r+0x48c>
 8021634:	f1ba 0f00 	cmp.w	sl, #0
 8021638:	dd2f      	ble.n	802169a <_dtoa_r+0x3ca>
 802163a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802163e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021642:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021646:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 802164a:	3101      	adds	r1, #1
 802164c:	4654      	mov	r4, sl
 802164e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021652:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8021656:	ee07 1a90 	vmov	s15, r1
 802165a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802165e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021662:	ee15 7a90 	vmov	r7, s11
 8021666:	ec51 0b15 	vmov	r0, r1, d5
 802166a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 802166e:	2c00      	cmp	r4, #0
 8021670:	d177      	bne.n	8021762 <_dtoa_r+0x492>
 8021672:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021676:	ee36 6b47 	vsub.f64	d6, d6, d7
 802167a:	ec41 0b17 	vmov	d7, r0, r1
 802167e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021686:	f300 826a 	bgt.w	8021b5e <_dtoa_r+0x88e>
 802168a:	eeb1 7b47 	vneg.f64	d7, d7
 802168e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021696:	f100 8260 	bmi.w	8021b5a <_dtoa_r+0x88a>
 802169a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802169e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80216a0:	2a00      	cmp	r2, #0
 80216a2:	f2c0 811d 	blt.w	80218e0 <_dtoa_r+0x610>
 80216a6:	f1bb 0f0e 	cmp.w	fp, #14
 80216aa:	f300 8119 	bgt.w	80218e0 <_dtoa_r+0x610>
 80216ae:	4b8a      	ldr	r3, [pc, #552]	; (80218d8 <_dtoa_r+0x608>)
 80216b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80216b4:	ed93 6b00 	vldr	d6, [r3]
 80216b8:	9b08      	ldr	r3, [sp, #32]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	f280 80b7 	bge.w	802182e <_dtoa_r+0x55e>
 80216c0:	f1b9 0f00 	cmp.w	r9, #0
 80216c4:	f300 80b3 	bgt.w	802182e <_dtoa_r+0x55e>
 80216c8:	f040 8246 	bne.w	8021b58 <_dtoa_r+0x888>
 80216cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80216d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80216d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80216d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80216dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216e0:	464c      	mov	r4, r9
 80216e2:	464f      	mov	r7, r9
 80216e4:	f280 821c 	bge.w	8021b20 <_dtoa_r+0x850>
 80216e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80216ec:	2331      	movs	r3, #49	; 0x31
 80216ee:	f808 3b01 	strb.w	r3, [r8], #1
 80216f2:	f10b 0b01 	add.w	fp, fp, #1
 80216f6:	e218      	b.n	8021b2a <_dtoa_r+0x85a>
 80216f8:	2102      	movs	r1, #2
 80216fa:	e780      	b.n	80215fe <_dtoa_r+0x32e>
 80216fc:	07d4      	lsls	r4, r2, #31
 80216fe:	d504      	bpl.n	802170a <_dtoa_r+0x43a>
 8021700:	ed90 6b00 	vldr	d6, [r0]
 8021704:	3101      	adds	r1, #1
 8021706:	ee27 7b06 	vmul.f64	d7, d7, d6
 802170a:	1052      	asrs	r2, r2, #1
 802170c:	3008      	adds	r0, #8
 802170e:	e777      	b.n	8021600 <_dtoa_r+0x330>
 8021710:	d022      	beq.n	8021758 <_dtoa_r+0x488>
 8021712:	f1cb 0200 	rsb	r2, fp, #0
 8021716:	4970      	ldr	r1, [pc, #448]	; (80218d8 <_dtoa_r+0x608>)
 8021718:	f002 000f 	and.w	r0, r2, #15
 802171c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021720:	ed91 7b00 	vldr	d7, [r1]
 8021724:	ee28 7b07 	vmul.f64	d7, d8, d7
 8021728:	ed8d 7b02 	vstr	d7, [sp, #8]
 802172c:	486b      	ldr	r0, [pc, #428]	; (80218dc <_dtoa_r+0x60c>)
 802172e:	1112      	asrs	r2, r2, #4
 8021730:	2400      	movs	r4, #0
 8021732:	2102      	movs	r1, #2
 8021734:	b92a      	cbnz	r2, 8021742 <_dtoa_r+0x472>
 8021736:	2c00      	cmp	r4, #0
 8021738:	f43f af6a 	beq.w	8021610 <_dtoa_r+0x340>
 802173c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021740:	e766      	b.n	8021610 <_dtoa_r+0x340>
 8021742:	07d7      	lsls	r7, r2, #31
 8021744:	d505      	bpl.n	8021752 <_dtoa_r+0x482>
 8021746:	ed90 6b00 	vldr	d6, [r0]
 802174a:	3101      	adds	r1, #1
 802174c:	2401      	movs	r4, #1
 802174e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021752:	1052      	asrs	r2, r2, #1
 8021754:	3008      	adds	r0, #8
 8021756:	e7ed      	b.n	8021734 <_dtoa_r+0x464>
 8021758:	2102      	movs	r1, #2
 802175a:	e759      	b.n	8021610 <_dtoa_r+0x340>
 802175c:	465a      	mov	r2, fp
 802175e:	464c      	mov	r4, r9
 8021760:	e775      	b.n	802164e <_dtoa_r+0x37e>
 8021762:	ec41 0b17 	vmov	d7, r0, r1
 8021766:	495c      	ldr	r1, [pc, #368]	; (80218d8 <_dtoa_r+0x608>)
 8021768:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 802176c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8021770:	9901      	ldr	r1, [sp, #4]
 8021772:	440c      	add	r4, r1
 8021774:	9907      	ldr	r1, [sp, #28]
 8021776:	b351      	cbz	r1, 80217ce <_dtoa_r+0x4fe>
 8021778:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802177c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021780:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021784:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021788:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802178c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021790:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021794:	ee14 1a90 	vmov	r1, s9
 8021798:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802179c:	3130      	adds	r1, #48	; 0x30
 802179e:	ee36 6b45 	vsub.f64	d6, d6, d5
 80217a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80217a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217aa:	f808 1b01 	strb.w	r1, [r8], #1
 80217ae:	d439      	bmi.n	8021824 <_dtoa_r+0x554>
 80217b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80217b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80217b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217bc:	d472      	bmi.n	80218a4 <_dtoa_r+0x5d4>
 80217be:	45a0      	cmp	r8, r4
 80217c0:	f43f af6b 	beq.w	802169a <_dtoa_r+0x3ca>
 80217c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80217c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80217cc:	e7e0      	b.n	8021790 <_dtoa_r+0x4c0>
 80217ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80217d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80217d6:	4620      	mov	r0, r4
 80217d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80217dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80217e0:	ee14 1a90 	vmov	r1, s9
 80217e4:	3130      	adds	r1, #48	; 0x30
 80217e6:	f808 1b01 	strb.w	r1, [r8], #1
 80217ea:	45a0      	cmp	r8, r4
 80217ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80217f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80217f4:	d118      	bne.n	8021828 <_dtoa_r+0x558>
 80217f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80217fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80217fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021806:	dc4d      	bgt.n	80218a4 <_dtoa_r+0x5d4>
 8021808:	ee35 5b47 	vsub.f64	d5, d5, d7
 802180c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021814:	f57f af41 	bpl.w	802169a <_dtoa_r+0x3ca>
 8021818:	4680      	mov	r8, r0
 802181a:	3801      	subs	r0, #1
 802181c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021820:	2b30      	cmp	r3, #48	; 0x30
 8021822:	d0f9      	beq.n	8021818 <_dtoa_r+0x548>
 8021824:	4693      	mov	fp, r2
 8021826:	e02a      	b.n	802187e <_dtoa_r+0x5ae>
 8021828:	ee26 6b03 	vmul.f64	d6, d6, d3
 802182c:	e7d6      	b.n	80217dc <_dtoa_r+0x50c>
 802182e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021832:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8021836:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802183a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802183e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8021842:	ee15 3a10 	vmov	r3, s10
 8021846:	3330      	adds	r3, #48	; 0x30
 8021848:	f808 3b01 	strb.w	r3, [r8], #1
 802184c:	9b01      	ldr	r3, [sp, #4]
 802184e:	eba8 0303 	sub.w	r3, r8, r3
 8021852:	4599      	cmp	r9, r3
 8021854:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021858:	eea3 7b46 	vfms.f64	d7, d3, d6
 802185c:	d133      	bne.n	80218c6 <_dtoa_r+0x5f6>
 802185e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021862:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802186a:	dc1a      	bgt.n	80218a2 <_dtoa_r+0x5d2>
 802186c:	eeb4 7b46 	vcmp.f64	d7, d6
 8021870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021874:	d103      	bne.n	802187e <_dtoa_r+0x5ae>
 8021876:	ee15 3a10 	vmov	r3, s10
 802187a:	07d9      	lsls	r1, r3, #31
 802187c:	d411      	bmi.n	80218a2 <_dtoa_r+0x5d2>
 802187e:	4629      	mov	r1, r5
 8021880:	4630      	mov	r0, r6
 8021882:	f000 fb29 	bl	8021ed8 <_Bfree>
 8021886:	2300      	movs	r3, #0
 8021888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802188a:	f888 3000 	strb.w	r3, [r8]
 802188e:	f10b 0301 	add.w	r3, fp, #1
 8021892:	6013      	str	r3, [r2, #0]
 8021894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021896:	2b00      	cmp	r3, #0
 8021898:	f43f ad69 	beq.w	802136e <_dtoa_r+0x9e>
 802189c:	f8c3 8000 	str.w	r8, [r3]
 80218a0:	e565      	b.n	802136e <_dtoa_r+0x9e>
 80218a2:	465a      	mov	r2, fp
 80218a4:	4643      	mov	r3, r8
 80218a6:	4698      	mov	r8, r3
 80218a8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80218ac:	2939      	cmp	r1, #57	; 0x39
 80218ae:	d106      	bne.n	80218be <_dtoa_r+0x5ee>
 80218b0:	9901      	ldr	r1, [sp, #4]
 80218b2:	4299      	cmp	r1, r3
 80218b4:	d1f7      	bne.n	80218a6 <_dtoa_r+0x5d6>
 80218b6:	9801      	ldr	r0, [sp, #4]
 80218b8:	2130      	movs	r1, #48	; 0x30
 80218ba:	3201      	adds	r2, #1
 80218bc:	7001      	strb	r1, [r0, #0]
 80218be:	7819      	ldrb	r1, [r3, #0]
 80218c0:	3101      	adds	r1, #1
 80218c2:	7019      	strb	r1, [r3, #0]
 80218c4:	e7ae      	b.n	8021824 <_dtoa_r+0x554>
 80218c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80218ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80218ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218d2:	d1b2      	bne.n	802183a <_dtoa_r+0x56a>
 80218d4:	e7d3      	b.n	802187e <_dtoa_r+0x5ae>
 80218d6:	bf00      	nop
 80218d8:	08025fd8 	.word	0x08025fd8
 80218dc:	08025fb0 	.word	0x08025fb0
 80218e0:	9907      	ldr	r1, [sp, #28]
 80218e2:	2900      	cmp	r1, #0
 80218e4:	f000 80d0 	beq.w	8021a88 <_dtoa_r+0x7b8>
 80218e8:	9906      	ldr	r1, [sp, #24]
 80218ea:	2901      	cmp	r1, #1
 80218ec:	f300 80b4 	bgt.w	8021a58 <_dtoa_r+0x788>
 80218f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80218f2:	2900      	cmp	r1, #0
 80218f4:	f000 80ac 	beq.w	8021a50 <_dtoa_r+0x780>
 80218f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80218fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021900:	461c      	mov	r4, r3
 8021902:	9309      	str	r3, [sp, #36]	; 0x24
 8021904:	9b04      	ldr	r3, [sp, #16]
 8021906:	4413      	add	r3, r2
 8021908:	9304      	str	r3, [sp, #16]
 802190a:	9b05      	ldr	r3, [sp, #20]
 802190c:	2101      	movs	r1, #1
 802190e:	4413      	add	r3, r2
 8021910:	4630      	mov	r0, r6
 8021912:	9305      	str	r3, [sp, #20]
 8021914:	f000 fbe0 	bl	80220d8 <__i2b>
 8021918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802191a:	4607      	mov	r7, r0
 802191c:	f1b8 0f00 	cmp.w	r8, #0
 8021920:	d00d      	beq.n	802193e <_dtoa_r+0x66e>
 8021922:	9a05      	ldr	r2, [sp, #20]
 8021924:	2a00      	cmp	r2, #0
 8021926:	dd0a      	ble.n	802193e <_dtoa_r+0x66e>
 8021928:	4542      	cmp	r2, r8
 802192a:	9904      	ldr	r1, [sp, #16]
 802192c:	bfa8      	it	ge
 802192e:	4642      	movge	r2, r8
 8021930:	1a89      	subs	r1, r1, r2
 8021932:	9104      	str	r1, [sp, #16]
 8021934:	9905      	ldr	r1, [sp, #20]
 8021936:	eba8 0802 	sub.w	r8, r8, r2
 802193a:	1a8a      	subs	r2, r1, r2
 802193c:	9205      	str	r2, [sp, #20]
 802193e:	b303      	cbz	r3, 8021982 <_dtoa_r+0x6b2>
 8021940:	9a07      	ldr	r2, [sp, #28]
 8021942:	2a00      	cmp	r2, #0
 8021944:	f000 80a5 	beq.w	8021a92 <_dtoa_r+0x7c2>
 8021948:	2c00      	cmp	r4, #0
 802194a:	dd13      	ble.n	8021974 <_dtoa_r+0x6a4>
 802194c:	4639      	mov	r1, r7
 802194e:	4622      	mov	r2, r4
 8021950:	4630      	mov	r0, r6
 8021952:	930d      	str	r3, [sp, #52]	; 0x34
 8021954:	f000 fc80 	bl	8022258 <__pow5mult>
 8021958:	462a      	mov	r2, r5
 802195a:	4601      	mov	r1, r0
 802195c:	4607      	mov	r7, r0
 802195e:	4630      	mov	r0, r6
 8021960:	f000 fbd0 	bl	8022104 <__multiply>
 8021964:	4629      	mov	r1, r5
 8021966:	9009      	str	r0, [sp, #36]	; 0x24
 8021968:	4630      	mov	r0, r6
 802196a:	f000 fab5 	bl	8021ed8 <_Bfree>
 802196e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021972:	4615      	mov	r5, r2
 8021974:	1b1a      	subs	r2, r3, r4
 8021976:	d004      	beq.n	8021982 <_dtoa_r+0x6b2>
 8021978:	4629      	mov	r1, r5
 802197a:	4630      	mov	r0, r6
 802197c:	f000 fc6c 	bl	8022258 <__pow5mult>
 8021980:	4605      	mov	r5, r0
 8021982:	2101      	movs	r1, #1
 8021984:	4630      	mov	r0, r6
 8021986:	f000 fba7 	bl	80220d8 <__i2b>
 802198a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802198c:	2b00      	cmp	r3, #0
 802198e:	4604      	mov	r4, r0
 8021990:	f340 8081 	ble.w	8021a96 <_dtoa_r+0x7c6>
 8021994:	461a      	mov	r2, r3
 8021996:	4601      	mov	r1, r0
 8021998:	4630      	mov	r0, r6
 802199a:	f000 fc5d 	bl	8022258 <__pow5mult>
 802199e:	9b06      	ldr	r3, [sp, #24]
 80219a0:	2b01      	cmp	r3, #1
 80219a2:	4604      	mov	r4, r0
 80219a4:	dd7a      	ble.n	8021a9c <_dtoa_r+0x7cc>
 80219a6:	2300      	movs	r3, #0
 80219a8:	9309      	str	r3, [sp, #36]	; 0x24
 80219aa:	6922      	ldr	r2, [r4, #16]
 80219ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80219b0:	6910      	ldr	r0, [r2, #16]
 80219b2:	f000 fb43 	bl	802203c <__hi0bits>
 80219b6:	f1c0 0020 	rsb	r0, r0, #32
 80219ba:	9b05      	ldr	r3, [sp, #20]
 80219bc:	4418      	add	r0, r3
 80219be:	f010 001f 	ands.w	r0, r0, #31
 80219c2:	f000 8093 	beq.w	8021aec <_dtoa_r+0x81c>
 80219c6:	f1c0 0220 	rsb	r2, r0, #32
 80219ca:	2a04      	cmp	r2, #4
 80219cc:	f340 8085 	ble.w	8021ada <_dtoa_r+0x80a>
 80219d0:	9b04      	ldr	r3, [sp, #16]
 80219d2:	f1c0 001c 	rsb	r0, r0, #28
 80219d6:	4403      	add	r3, r0
 80219d8:	9304      	str	r3, [sp, #16]
 80219da:	9b05      	ldr	r3, [sp, #20]
 80219dc:	4480      	add	r8, r0
 80219de:	4403      	add	r3, r0
 80219e0:	9305      	str	r3, [sp, #20]
 80219e2:	9b04      	ldr	r3, [sp, #16]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	dd05      	ble.n	80219f4 <_dtoa_r+0x724>
 80219e8:	4629      	mov	r1, r5
 80219ea:	461a      	mov	r2, r3
 80219ec:	4630      	mov	r0, r6
 80219ee:	f000 fc8d 	bl	802230c <__lshift>
 80219f2:	4605      	mov	r5, r0
 80219f4:	9b05      	ldr	r3, [sp, #20]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	dd05      	ble.n	8021a06 <_dtoa_r+0x736>
 80219fa:	4621      	mov	r1, r4
 80219fc:	461a      	mov	r2, r3
 80219fe:	4630      	mov	r0, r6
 8021a00:	f000 fc84 	bl	802230c <__lshift>
 8021a04:	4604      	mov	r4, r0
 8021a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d071      	beq.n	8021af0 <_dtoa_r+0x820>
 8021a0c:	4621      	mov	r1, r4
 8021a0e:	4628      	mov	r0, r5
 8021a10:	f000 fce8 	bl	80223e4 <__mcmp>
 8021a14:	2800      	cmp	r0, #0
 8021a16:	da6b      	bge.n	8021af0 <_dtoa_r+0x820>
 8021a18:	2300      	movs	r3, #0
 8021a1a:	4629      	mov	r1, r5
 8021a1c:	220a      	movs	r2, #10
 8021a1e:	4630      	mov	r0, r6
 8021a20:	f000 fa7c 	bl	8021f1c <__multadd>
 8021a24:	9b07      	ldr	r3, [sp, #28]
 8021a26:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021a2a:	4605      	mov	r5, r0
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	f000 8197 	beq.w	8021d60 <_dtoa_r+0xa90>
 8021a32:	4639      	mov	r1, r7
 8021a34:	2300      	movs	r3, #0
 8021a36:	220a      	movs	r2, #10
 8021a38:	4630      	mov	r0, r6
 8021a3a:	f000 fa6f 	bl	8021f1c <__multadd>
 8021a3e:	f1ba 0f00 	cmp.w	sl, #0
 8021a42:	4607      	mov	r7, r0
 8021a44:	f300 8093 	bgt.w	8021b6e <_dtoa_r+0x89e>
 8021a48:	9b06      	ldr	r3, [sp, #24]
 8021a4a:	2b02      	cmp	r3, #2
 8021a4c:	dc57      	bgt.n	8021afe <_dtoa_r+0x82e>
 8021a4e:	e08e      	b.n	8021b6e <_dtoa_r+0x89e>
 8021a50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8021a56:	e751      	b.n	80218fc <_dtoa_r+0x62c>
 8021a58:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8021a5c:	42a3      	cmp	r3, r4
 8021a5e:	bfbf      	itttt	lt
 8021a60:	1ae2      	sublt	r2, r4, r3
 8021a62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8021a64:	189b      	addlt	r3, r3, r2
 8021a66:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021a68:	bfae      	itee	ge
 8021a6a:	1b1c      	subge	r4, r3, r4
 8021a6c:	4623      	movlt	r3, r4
 8021a6e:	2400      	movlt	r4, #0
 8021a70:	f1b9 0f00 	cmp.w	r9, #0
 8021a74:	bfb5      	itete	lt
 8021a76:	9a04      	ldrlt	r2, [sp, #16]
 8021a78:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8021a7c:	eba2 0809 	sublt.w	r8, r2, r9
 8021a80:	464a      	movge	r2, r9
 8021a82:	bfb8      	it	lt
 8021a84:	2200      	movlt	r2, #0
 8021a86:	e73c      	b.n	8021902 <_dtoa_r+0x632>
 8021a88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021a8c:	9f07      	ldr	r7, [sp, #28]
 8021a8e:	461c      	mov	r4, r3
 8021a90:	e744      	b.n	802191c <_dtoa_r+0x64c>
 8021a92:	461a      	mov	r2, r3
 8021a94:	e770      	b.n	8021978 <_dtoa_r+0x6a8>
 8021a96:	9b06      	ldr	r3, [sp, #24]
 8021a98:	2b01      	cmp	r3, #1
 8021a9a:	dc18      	bgt.n	8021ace <_dtoa_r+0x7fe>
 8021a9c:	9b02      	ldr	r3, [sp, #8]
 8021a9e:	b9b3      	cbnz	r3, 8021ace <_dtoa_r+0x7fe>
 8021aa0:	9b03      	ldr	r3, [sp, #12]
 8021aa2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021aa6:	b9a2      	cbnz	r2, 8021ad2 <_dtoa_r+0x802>
 8021aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021aac:	0d12      	lsrs	r2, r2, #20
 8021aae:	0512      	lsls	r2, r2, #20
 8021ab0:	b18a      	cbz	r2, 8021ad6 <_dtoa_r+0x806>
 8021ab2:	9b04      	ldr	r3, [sp, #16]
 8021ab4:	3301      	adds	r3, #1
 8021ab6:	9304      	str	r3, [sp, #16]
 8021ab8:	9b05      	ldr	r3, [sp, #20]
 8021aba:	3301      	adds	r3, #1
 8021abc:	9305      	str	r3, [sp, #20]
 8021abe:	2301      	movs	r3, #1
 8021ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8021ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ac4:	2b00      	cmp	r3, #0
 8021ac6:	f47f af70 	bne.w	80219aa <_dtoa_r+0x6da>
 8021aca:	2001      	movs	r0, #1
 8021acc:	e775      	b.n	80219ba <_dtoa_r+0x6ea>
 8021ace:	2300      	movs	r3, #0
 8021ad0:	e7f6      	b.n	8021ac0 <_dtoa_r+0x7f0>
 8021ad2:	9b02      	ldr	r3, [sp, #8]
 8021ad4:	e7f4      	b.n	8021ac0 <_dtoa_r+0x7f0>
 8021ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8021ad8:	e7f3      	b.n	8021ac2 <_dtoa_r+0x7f2>
 8021ada:	d082      	beq.n	80219e2 <_dtoa_r+0x712>
 8021adc:	9b04      	ldr	r3, [sp, #16]
 8021ade:	321c      	adds	r2, #28
 8021ae0:	4413      	add	r3, r2
 8021ae2:	9304      	str	r3, [sp, #16]
 8021ae4:	9b05      	ldr	r3, [sp, #20]
 8021ae6:	4490      	add	r8, r2
 8021ae8:	4413      	add	r3, r2
 8021aea:	e779      	b.n	80219e0 <_dtoa_r+0x710>
 8021aec:	4602      	mov	r2, r0
 8021aee:	e7f5      	b.n	8021adc <_dtoa_r+0x80c>
 8021af0:	f1b9 0f00 	cmp.w	r9, #0
 8021af4:	dc36      	bgt.n	8021b64 <_dtoa_r+0x894>
 8021af6:	9b06      	ldr	r3, [sp, #24]
 8021af8:	2b02      	cmp	r3, #2
 8021afa:	dd33      	ble.n	8021b64 <_dtoa_r+0x894>
 8021afc:	46ca      	mov	sl, r9
 8021afe:	f1ba 0f00 	cmp.w	sl, #0
 8021b02:	d10d      	bne.n	8021b20 <_dtoa_r+0x850>
 8021b04:	4621      	mov	r1, r4
 8021b06:	4653      	mov	r3, sl
 8021b08:	2205      	movs	r2, #5
 8021b0a:	4630      	mov	r0, r6
 8021b0c:	f000 fa06 	bl	8021f1c <__multadd>
 8021b10:	4601      	mov	r1, r0
 8021b12:	4604      	mov	r4, r0
 8021b14:	4628      	mov	r0, r5
 8021b16:	f000 fc65 	bl	80223e4 <__mcmp>
 8021b1a:	2800      	cmp	r0, #0
 8021b1c:	f73f ade4 	bgt.w	80216e8 <_dtoa_r+0x418>
 8021b20:	9b08      	ldr	r3, [sp, #32]
 8021b22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021b26:	ea6f 0b03 	mvn.w	fp, r3
 8021b2a:	f04f 0900 	mov.w	r9, #0
 8021b2e:	4621      	mov	r1, r4
 8021b30:	4630      	mov	r0, r6
 8021b32:	f000 f9d1 	bl	8021ed8 <_Bfree>
 8021b36:	2f00      	cmp	r7, #0
 8021b38:	f43f aea1 	beq.w	802187e <_dtoa_r+0x5ae>
 8021b3c:	f1b9 0f00 	cmp.w	r9, #0
 8021b40:	d005      	beq.n	8021b4e <_dtoa_r+0x87e>
 8021b42:	45b9      	cmp	r9, r7
 8021b44:	d003      	beq.n	8021b4e <_dtoa_r+0x87e>
 8021b46:	4649      	mov	r1, r9
 8021b48:	4630      	mov	r0, r6
 8021b4a:	f000 f9c5 	bl	8021ed8 <_Bfree>
 8021b4e:	4639      	mov	r1, r7
 8021b50:	4630      	mov	r0, r6
 8021b52:	f000 f9c1 	bl	8021ed8 <_Bfree>
 8021b56:	e692      	b.n	802187e <_dtoa_r+0x5ae>
 8021b58:	2400      	movs	r4, #0
 8021b5a:	4627      	mov	r7, r4
 8021b5c:	e7e0      	b.n	8021b20 <_dtoa_r+0x850>
 8021b5e:	4693      	mov	fp, r2
 8021b60:	4627      	mov	r7, r4
 8021b62:	e5c1      	b.n	80216e8 <_dtoa_r+0x418>
 8021b64:	9b07      	ldr	r3, [sp, #28]
 8021b66:	46ca      	mov	sl, r9
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	f000 8100 	beq.w	8021d6e <_dtoa_r+0xa9e>
 8021b6e:	f1b8 0f00 	cmp.w	r8, #0
 8021b72:	dd05      	ble.n	8021b80 <_dtoa_r+0x8b0>
 8021b74:	4639      	mov	r1, r7
 8021b76:	4642      	mov	r2, r8
 8021b78:	4630      	mov	r0, r6
 8021b7a:	f000 fbc7 	bl	802230c <__lshift>
 8021b7e:	4607      	mov	r7, r0
 8021b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b82:	2b00      	cmp	r3, #0
 8021b84:	d05d      	beq.n	8021c42 <_dtoa_r+0x972>
 8021b86:	6879      	ldr	r1, [r7, #4]
 8021b88:	4630      	mov	r0, r6
 8021b8a:	f000 f965 	bl	8021e58 <_Balloc>
 8021b8e:	4680      	mov	r8, r0
 8021b90:	b928      	cbnz	r0, 8021b9e <_dtoa_r+0x8ce>
 8021b92:	4b82      	ldr	r3, [pc, #520]	; (8021d9c <_dtoa_r+0xacc>)
 8021b94:	4602      	mov	r2, r0
 8021b96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8021b9a:	f7ff bbb1 	b.w	8021300 <_dtoa_r+0x30>
 8021b9e:	693a      	ldr	r2, [r7, #16]
 8021ba0:	3202      	adds	r2, #2
 8021ba2:	0092      	lsls	r2, r2, #2
 8021ba4:	f107 010c 	add.w	r1, r7, #12
 8021ba8:	300c      	adds	r0, #12
 8021baa:	f7ff fad4 	bl	8021156 <memcpy>
 8021bae:	2201      	movs	r2, #1
 8021bb0:	4641      	mov	r1, r8
 8021bb2:	4630      	mov	r0, r6
 8021bb4:	f000 fbaa 	bl	802230c <__lshift>
 8021bb8:	9b01      	ldr	r3, [sp, #4]
 8021bba:	3301      	adds	r3, #1
 8021bbc:	9304      	str	r3, [sp, #16]
 8021bbe:	9b01      	ldr	r3, [sp, #4]
 8021bc0:	4453      	add	r3, sl
 8021bc2:	9308      	str	r3, [sp, #32]
 8021bc4:	9b02      	ldr	r3, [sp, #8]
 8021bc6:	f003 0301 	and.w	r3, r3, #1
 8021bca:	46b9      	mov	r9, r7
 8021bcc:	9307      	str	r3, [sp, #28]
 8021bce:	4607      	mov	r7, r0
 8021bd0:	9b04      	ldr	r3, [sp, #16]
 8021bd2:	4621      	mov	r1, r4
 8021bd4:	3b01      	subs	r3, #1
 8021bd6:	4628      	mov	r0, r5
 8021bd8:	9302      	str	r3, [sp, #8]
 8021bda:	f7ff faef 	bl	80211bc <quorem>
 8021bde:	4603      	mov	r3, r0
 8021be0:	3330      	adds	r3, #48	; 0x30
 8021be2:	9005      	str	r0, [sp, #20]
 8021be4:	4649      	mov	r1, r9
 8021be6:	4628      	mov	r0, r5
 8021be8:	9309      	str	r3, [sp, #36]	; 0x24
 8021bea:	f000 fbfb 	bl	80223e4 <__mcmp>
 8021bee:	463a      	mov	r2, r7
 8021bf0:	4682      	mov	sl, r0
 8021bf2:	4621      	mov	r1, r4
 8021bf4:	4630      	mov	r0, r6
 8021bf6:	f000 fc11 	bl	802241c <__mdiff>
 8021bfa:	68c2      	ldr	r2, [r0, #12]
 8021bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bfe:	4680      	mov	r8, r0
 8021c00:	bb0a      	cbnz	r2, 8021c46 <_dtoa_r+0x976>
 8021c02:	4601      	mov	r1, r0
 8021c04:	4628      	mov	r0, r5
 8021c06:	f000 fbed 	bl	80223e4 <__mcmp>
 8021c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c0c:	4602      	mov	r2, r0
 8021c0e:	4641      	mov	r1, r8
 8021c10:	4630      	mov	r0, r6
 8021c12:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8021c16:	f000 f95f 	bl	8021ed8 <_Bfree>
 8021c1a:	9b06      	ldr	r3, [sp, #24]
 8021c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c1e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021c22:	ea43 0102 	orr.w	r1, r3, r2
 8021c26:	9b07      	ldr	r3, [sp, #28]
 8021c28:	4319      	orrs	r1, r3
 8021c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c2c:	d10d      	bne.n	8021c4a <_dtoa_r+0x97a>
 8021c2e:	2b39      	cmp	r3, #57	; 0x39
 8021c30:	d029      	beq.n	8021c86 <_dtoa_r+0x9b6>
 8021c32:	f1ba 0f00 	cmp.w	sl, #0
 8021c36:	dd01      	ble.n	8021c3c <_dtoa_r+0x96c>
 8021c38:	9b05      	ldr	r3, [sp, #20]
 8021c3a:	3331      	adds	r3, #49	; 0x31
 8021c3c:	9a02      	ldr	r2, [sp, #8]
 8021c3e:	7013      	strb	r3, [r2, #0]
 8021c40:	e775      	b.n	8021b2e <_dtoa_r+0x85e>
 8021c42:	4638      	mov	r0, r7
 8021c44:	e7b8      	b.n	8021bb8 <_dtoa_r+0x8e8>
 8021c46:	2201      	movs	r2, #1
 8021c48:	e7e1      	b.n	8021c0e <_dtoa_r+0x93e>
 8021c4a:	f1ba 0f00 	cmp.w	sl, #0
 8021c4e:	db06      	blt.n	8021c5e <_dtoa_r+0x98e>
 8021c50:	9906      	ldr	r1, [sp, #24]
 8021c52:	ea41 0a0a 	orr.w	sl, r1, sl
 8021c56:	9907      	ldr	r1, [sp, #28]
 8021c58:	ea5a 0a01 	orrs.w	sl, sl, r1
 8021c5c:	d120      	bne.n	8021ca0 <_dtoa_r+0x9d0>
 8021c5e:	2a00      	cmp	r2, #0
 8021c60:	ddec      	ble.n	8021c3c <_dtoa_r+0x96c>
 8021c62:	4629      	mov	r1, r5
 8021c64:	2201      	movs	r2, #1
 8021c66:	4630      	mov	r0, r6
 8021c68:	9304      	str	r3, [sp, #16]
 8021c6a:	f000 fb4f 	bl	802230c <__lshift>
 8021c6e:	4621      	mov	r1, r4
 8021c70:	4605      	mov	r5, r0
 8021c72:	f000 fbb7 	bl	80223e4 <__mcmp>
 8021c76:	2800      	cmp	r0, #0
 8021c78:	9b04      	ldr	r3, [sp, #16]
 8021c7a:	dc02      	bgt.n	8021c82 <_dtoa_r+0x9b2>
 8021c7c:	d1de      	bne.n	8021c3c <_dtoa_r+0x96c>
 8021c7e:	07da      	lsls	r2, r3, #31
 8021c80:	d5dc      	bpl.n	8021c3c <_dtoa_r+0x96c>
 8021c82:	2b39      	cmp	r3, #57	; 0x39
 8021c84:	d1d8      	bne.n	8021c38 <_dtoa_r+0x968>
 8021c86:	9a02      	ldr	r2, [sp, #8]
 8021c88:	2339      	movs	r3, #57	; 0x39
 8021c8a:	7013      	strb	r3, [r2, #0]
 8021c8c:	4643      	mov	r3, r8
 8021c8e:	4698      	mov	r8, r3
 8021c90:	3b01      	subs	r3, #1
 8021c92:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8021c96:	2a39      	cmp	r2, #57	; 0x39
 8021c98:	d051      	beq.n	8021d3e <_dtoa_r+0xa6e>
 8021c9a:	3201      	adds	r2, #1
 8021c9c:	701a      	strb	r2, [r3, #0]
 8021c9e:	e746      	b.n	8021b2e <_dtoa_r+0x85e>
 8021ca0:	2a00      	cmp	r2, #0
 8021ca2:	dd03      	ble.n	8021cac <_dtoa_r+0x9dc>
 8021ca4:	2b39      	cmp	r3, #57	; 0x39
 8021ca6:	d0ee      	beq.n	8021c86 <_dtoa_r+0x9b6>
 8021ca8:	3301      	adds	r3, #1
 8021caa:	e7c7      	b.n	8021c3c <_dtoa_r+0x96c>
 8021cac:	9a04      	ldr	r2, [sp, #16]
 8021cae:	9908      	ldr	r1, [sp, #32]
 8021cb0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021cb4:	428a      	cmp	r2, r1
 8021cb6:	d02b      	beq.n	8021d10 <_dtoa_r+0xa40>
 8021cb8:	4629      	mov	r1, r5
 8021cba:	2300      	movs	r3, #0
 8021cbc:	220a      	movs	r2, #10
 8021cbe:	4630      	mov	r0, r6
 8021cc0:	f000 f92c 	bl	8021f1c <__multadd>
 8021cc4:	45b9      	cmp	r9, r7
 8021cc6:	4605      	mov	r5, r0
 8021cc8:	f04f 0300 	mov.w	r3, #0
 8021ccc:	f04f 020a 	mov.w	r2, #10
 8021cd0:	4649      	mov	r1, r9
 8021cd2:	4630      	mov	r0, r6
 8021cd4:	d107      	bne.n	8021ce6 <_dtoa_r+0xa16>
 8021cd6:	f000 f921 	bl	8021f1c <__multadd>
 8021cda:	4681      	mov	r9, r0
 8021cdc:	4607      	mov	r7, r0
 8021cde:	9b04      	ldr	r3, [sp, #16]
 8021ce0:	3301      	adds	r3, #1
 8021ce2:	9304      	str	r3, [sp, #16]
 8021ce4:	e774      	b.n	8021bd0 <_dtoa_r+0x900>
 8021ce6:	f000 f919 	bl	8021f1c <__multadd>
 8021cea:	4639      	mov	r1, r7
 8021cec:	4681      	mov	r9, r0
 8021cee:	2300      	movs	r3, #0
 8021cf0:	220a      	movs	r2, #10
 8021cf2:	4630      	mov	r0, r6
 8021cf4:	f000 f912 	bl	8021f1c <__multadd>
 8021cf8:	4607      	mov	r7, r0
 8021cfa:	e7f0      	b.n	8021cde <_dtoa_r+0xa0e>
 8021cfc:	f1ba 0f00 	cmp.w	sl, #0
 8021d00:	9a01      	ldr	r2, [sp, #4]
 8021d02:	bfcc      	ite	gt
 8021d04:	46d0      	movgt	r8, sl
 8021d06:	f04f 0801 	movle.w	r8, #1
 8021d0a:	4490      	add	r8, r2
 8021d0c:	f04f 0900 	mov.w	r9, #0
 8021d10:	4629      	mov	r1, r5
 8021d12:	2201      	movs	r2, #1
 8021d14:	4630      	mov	r0, r6
 8021d16:	9302      	str	r3, [sp, #8]
 8021d18:	f000 faf8 	bl	802230c <__lshift>
 8021d1c:	4621      	mov	r1, r4
 8021d1e:	4605      	mov	r5, r0
 8021d20:	f000 fb60 	bl	80223e4 <__mcmp>
 8021d24:	2800      	cmp	r0, #0
 8021d26:	dcb1      	bgt.n	8021c8c <_dtoa_r+0x9bc>
 8021d28:	d102      	bne.n	8021d30 <_dtoa_r+0xa60>
 8021d2a:	9b02      	ldr	r3, [sp, #8]
 8021d2c:	07db      	lsls	r3, r3, #31
 8021d2e:	d4ad      	bmi.n	8021c8c <_dtoa_r+0x9bc>
 8021d30:	4643      	mov	r3, r8
 8021d32:	4698      	mov	r8, r3
 8021d34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021d38:	2a30      	cmp	r2, #48	; 0x30
 8021d3a:	d0fa      	beq.n	8021d32 <_dtoa_r+0xa62>
 8021d3c:	e6f7      	b.n	8021b2e <_dtoa_r+0x85e>
 8021d3e:	9a01      	ldr	r2, [sp, #4]
 8021d40:	429a      	cmp	r2, r3
 8021d42:	d1a4      	bne.n	8021c8e <_dtoa_r+0x9be>
 8021d44:	f10b 0b01 	add.w	fp, fp, #1
 8021d48:	2331      	movs	r3, #49	; 0x31
 8021d4a:	e778      	b.n	8021c3e <_dtoa_r+0x96e>
 8021d4c:	4b14      	ldr	r3, [pc, #80]	; (8021da0 <_dtoa_r+0xad0>)
 8021d4e:	f7ff bb2a 	b.w	80213a6 <_dtoa_r+0xd6>
 8021d52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	f47f ab05 	bne.w	8021364 <_dtoa_r+0x94>
 8021d5a:	4b12      	ldr	r3, [pc, #72]	; (8021da4 <_dtoa_r+0xad4>)
 8021d5c:	f7ff bb23 	b.w	80213a6 <_dtoa_r+0xd6>
 8021d60:	f1ba 0f00 	cmp.w	sl, #0
 8021d64:	dc03      	bgt.n	8021d6e <_dtoa_r+0xa9e>
 8021d66:	9b06      	ldr	r3, [sp, #24]
 8021d68:	2b02      	cmp	r3, #2
 8021d6a:	f73f aec8 	bgt.w	8021afe <_dtoa_r+0x82e>
 8021d6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021d72:	4621      	mov	r1, r4
 8021d74:	4628      	mov	r0, r5
 8021d76:	f7ff fa21 	bl	80211bc <quorem>
 8021d7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021d7e:	f808 3b01 	strb.w	r3, [r8], #1
 8021d82:	9a01      	ldr	r2, [sp, #4]
 8021d84:	eba8 0202 	sub.w	r2, r8, r2
 8021d88:	4592      	cmp	sl, r2
 8021d8a:	ddb7      	ble.n	8021cfc <_dtoa_r+0xa2c>
 8021d8c:	4629      	mov	r1, r5
 8021d8e:	2300      	movs	r3, #0
 8021d90:	220a      	movs	r2, #10
 8021d92:	4630      	mov	r0, r6
 8021d94:	f000 f8c2 	bl	8021f1c <__multadd>
 8021d98:	4605      	mov	r5, r0
 8021d9a:	e7ea      	b.n	8021d72 <_dtoa_r+0xaa2>
 8021d9c:	08025f46 	.word	0x08025f46
 8021da0:	08025e7c 	.word	0x08025e7c
 8021da4:	08025ee1 	.word	0x08025ee1

08021da8 <__env_lock>:
 8021da8:	4801      	ldr	r0, [pc, #4]	; (8021db0 <__env_lock+0x8>)
 8021daa:	f7ff b9ca 	b.w	8021142 <__retarget_lock_acquire_recursive>
 8021dae:	bf00      	nop
 8021db0:	2001727c 	.word	0x2001727c

08021db4 <__env_unlock>:
 8021db4:	4801      	ldr	r0, [pc, #4]	; (8021dbc <__env_unlock+0x8>)
 8021db6:	f7ff b9c5 	b.w	8021144 <__retarget_lock_release_recursive>
 8021dba:	bf00      	nop
 8021dbc:	2001727c 	.word	0x2001727c

08021dc0 <_free_r>:
 8021dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021dc2:	2900      	cmp	r1, #0
 8021dc4:	d044      	beq.n	8021e50 <_free_r+0x90>
 8021dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021dca:	9001      	str	r0, [sp, #4]
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	f1a1 0404 	sub.w	r4, r1, #4
 8021dd2:	bfb8      	it	lt
 8021dd4:	18e4      	addlt	r4, r4, r3
 8021dd6:	f7fd fdbd 	bl	801f954 <__malloc_lock>
 8021dda:	4a1e      	ldr	r2, [pc, #120]	; (8021e54 <_free_r+0x94>)
 8021ddc:	9801      	ldr	r0, [sp, #4]
 8021dde:	6813      	ldr	r3, [r2, #0]
 8021de0:	b933      	cbnz	r3, 8021df0 <_free_r+0x30>
 8021de2:	6063      	str	r3, [r4, #4]
 8021de4:	6014      	str	r4, [r2, #0]
 8021de6:	b003      	add	sp, #12
 8021de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021dec:	f7fd bdb8 	b.w	801f960 <__malloc_unlock>
 8021df0:	42a3      	cmp	r3, r4
 8021df2:	d908      	bls.n	8021e06 <_free_r+0x46>
 8021df4:	6825      	ldr	r5, [r4, #0]
 8021df6:	1961      	adds	r1, r4, r5
 8021df8:	428b      	cmp	r3, r1
 8021dfa:	bf01      	itttt	eq
 8021dfc:	6819      	ldreq	r1, [r3, #0]
 8021dfe:	685b      	ldreq	r3, [r3, #4]
 8021e00:	1949      	addeq	r1, r1, r5
 8021e02:	6021      	streq	r1, [r4, #0]
 8021e04:	e7ed      	b.n	8021de2 <_free_r+0x22>
 8021e06:	461a      	mov	r2, r3
 8021e08:	685b      	ldr	r3, [r3, #4]
 8021e0a:	b10b      	cbz	r3, 8021e10 <_free_r+0x50>
 8021e0c:	42a3      	cmp	r3, r4
 8021e0e:	d9fa      	bls.n	8021e06 <_free_r+0x46>
 8021e10:	6811      	ldr	r1, [r2, #0]
 8021e12:	1855      	adds	r5, r2, r1
 8021e14:	42a5      	cmp	r5, r4
 8021e16:	d10b      	bne.n	8021e30 <_free_r+0x70>
 8021e18:	6824      	ldr	r4, [r4, #0]
 8021e1a:	4421      	add	r1, r4
 8021e1c:	1854      	adds	r4, r2, r1
 8021e1e:	42a3      	cmp	r3, r4
 8021e20:	6011      	str	r1, [r2, #0]
 8021e22:	d1e0      	bne.n	8021de6 <_free_r+0x26>
 8021e24:	681c      	ldr	r4, [r3, #0]
 8021e26:	685b      	ldr	r3, [r3, #4]
 8021e28:	6053      	str	r3, [r2, #4]
 8021e2a:	440c      	add	r4, r1
 8021e2c:	6014      	str	r4, [r2, #0]
 8021e2e:	e7da      	b.n	8021de6 <_free_r+0x26>
 8021e30:	d902      	bls.n	8021e38 <_free_r+0x78>
 8021e32:	230c      	movs	r3, #12
 8021e34:	6003      	str	r3, [r0, #0]
 8021e36:	e7d6      	b.n	8021de6 <_free_r+0x26>
 8021e38:	6825      	ldr	r5, [r4, #0]
 8021e3a:	1961      	adds	r1, r4, r5
 8021e3c:	428b      	cmp	r3, r1
 8021e3e:	bf04      	itt	eq
 8021e40:	6819      	ldreq	r1, [r3, #0]
 8021e42:	685b      	ldreq	r3, [r3, #4]
 8021e44:	6063      	str	r3, [r4, #4]
 8021e46:	bf04      	itt	eq
 8021e48:	1949      	addeq	r1, r1, r5
 8021e4a:	6021      	streq	r1, [r4, #0]
 8021e4c:	6054      	str	r4, [r2, #4]
 8021e4e:	e7ca      	b.n	8021de6 <_free_r+0x26>
 8021e50:	b003      	add	sp, #12
 8021e52:	bd30      	pop	{r4, r5, pc}
 8021e54:	20017134 	.word	0x20017134

08021e58 <_Balloc>:
 8021e58:	b570      	push	{r4, r5, r6, lr}
 8021e5a:	69c6      	ldr	r6, [r0, #28]
 8021e5c:	4604      	mov	r4, r0
 8021e5e:	460d      	mov	r5, r1
 8021e60:	b976      	cbnz	r6, 8021e80 <_Balloc+0x28>
 8021e62:	2010      	movs	r0, #16
 8021e64:	f7fd fcc6 	bl	801f7f4 <malloc>
 8021e68:	4602      	mov	r2, r0
 8021e6a:	61e0      	str	r0, [r4, #28]
 8021e6c:	b920      	cbnz	r0, 8021e78 <_Balloc+0x20>
 8021e6e:	4b18      	ldr	r3, [pc, #96]	; (8021ed0 <_Balloc+0x78>)
 8021e70:	4818      	ldr	r0, [pc, #96]	; (8021ed4 <_Balloc+0x7c>)
 8021e72:	216b      	movs	r1, #107	; 0x6b
 8021e74:	f7ff f984 	bl	8021180 <__assert_func>
 8021e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021e7c:	6006      	str	r6, [r0, #0]
 8021e7e:	60c6      	str	r6, [r0, #12]
 8021e80:	69e6      	ldr	r6, [r4, #28]
 8021e82:	68f3      	ldr	r3, [r6, #12]
 8021e84:	b183      	cbz	r3, 8021ea8 <_Balloc+0x50>
 8021e86:	69e3      	ldr	r3, [r4, #28]
 8021e88:	68db      	ldr	r3, [r3, #12]
 8021e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021e8e:	b9b8      	cbnz	r0, 8021ec0 <_Balloc+0x68>
 8021e90:	2101      	movs	r1, #1
 8021e92:	fa01 f605 	lsl.w	r6, r1, r5
 8021e96:	1d72      	adds	r2, r6, #5
 8021e98:	0092      	lsls	r2, r2, #2
 8021e9a:	4620      	mov	r0, r4
 8021e9c:	f7fd fc3a 	bl	801f714 <_calloc_r>
 8021ea0:	b160      	cbz	r0, 8021ebc <_Balloc+0x64>
 8021ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021ea6:	e00e      	b.n	8021ec6 <_Balloc+0x6e>
 8021ea8:	2221      	movs	r2, #33	; 0x21
 8021eaa:	2104      	movs	r1, #4
 8021eac:	4620      	mov	r0, r4
 8021eae:	f7fd fc31 	bl	801f714 <_calloc_r>
 8021eb2:	69e3      	ldr	r3, [r4, #28]
 8021eb4:	60f0      	str	r0, [r6, #12]
 8021eb6:	68db      	ldr	r3, [r3, #12]
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	d1e4      	bne.n	8021e86 <_Balloc+0x2e>
 8021ebc:	2000      	movs	r0, #0
 8021ebe:	bd70      	pop	{r4, r5, r6, pc}
 8021ec0:	6802      	ldr	r2, [r0, #0]
 8021ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021ecc:	e7f7      	b.n	8021ebe <_Balloc+0x66>
 8021ece:	bf00      	nop
 8021ed0:	08025cfc 	.word	0x08025cfc
 8021ed4:	08025f57 	.word	0x08025f57

08021ed8 <_Bfree>:
 8021ed8:	b570      	push	{r4, r5, r6, lr}
 8021eda:	69c6      	ldr	r6, [r0, #28]
 8021edc:	4605      	mov	r5, r0
 8021ede:	460c      	mov	r4, r1
 8021ee0:	b976      	cbnz	r6, 8021f00 <_Bfree+0x28>
 8021ee2:	2010      	movs	r0, #16
 8021ee4:	f7fd fc86 	bl	801f7f4 <malloc>
 8021ee8:	4602      	mov	r2, r0
 8021eea:	61e8      	str	r0, [r5, #28]
 8021eec:	b920      	cbnz	r0, 8021ef8 <_Bfree+0x20>
 8021eee:	4b09      	ldr	r3, [pc, #36]	; (8021f14 <_Bfree+0x3c>)
 8021ef0:	4809      	ldr	r0, [pc, #36]	; (8021f18 <_Bfree+0x40>)
 8021ef2:	218f      	movs	r1, #143	; 0x8f
 8021ef4:	f7ff f944 	bl	8021180 <__assert_func>
 8021ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021efc:	6006      	str	r6, [r0, #0]
 8021efe:	60c6      	str	r6, [r0, #12]
 8021f00:	b13c      	cbz	r4, 8021f12 <_Bfree+0x3a>
 8021f02:	69eb      	ldr	r3, [r5, #28]
 8021f04:	6862      	ldr	r2, [r4, #4]
 8021f06:	68db      	ldr	r3, [r3, #12]
 8021f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021f0c:	6021      	str	r1, [r4, #0]
 8021f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021f12:	bd70      	pop	{r4, r5, r6, pc}
 8021f14:	08025cfc 	.word	0x08025cfc
 8021f18:	08025f57 	.word	0x08025f57

08021f1c <__multadd>:
 8021f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f20:	690d      	ldr	r5, [r1, #16]
 8021f22:	4607      	mov	r7, r0
 8021f24:	460c      	mov	r4, r1
 8021f26:	461e      	mov	r6, r3
 8021f28:	f101 0c14 	add.w	ip, r1, #20
 8021f2c:	2000      	movs	r0, #0
 8021f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8021f32:	b299      	uxth	r1, r3
 8021f34:	fb02 6101 	mla	r1, r2, r1, r6
 8021f38:	0c1e      	lsrs	r6, r3, #16
 8021f3a:	0c0b      	lsrs	r3, r1, #16
 8021f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8021f40:	b289      	uxth	r1, r1
 8021f42:	3001      	adds	r0, #1
 8021f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021f48:	4285      	cmp	r5, r0
 8021f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8021f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021f52:	dcec      	bgt.n	8021f2e <__multadd+0x12>
 8021f54:	b30e      	cbz	r6, 8021f9a <__multadd+0x7e>
 8021f56:	68a3      	ldr	r3, [r4, #8]
 8021f58:	42ab      	cmp	r3, r5
 8021f5a:	dc19      	bgt.n	8021f90 <__multadd+0x74>
 8021f5c:	6861      	ldr	r1, [r4, #4]
 8021f5e:	4638      	mov	r0, r7
 8021f60:	3101      	adds	r1, #1
 8021f62:	f7ff ff79 	bl	8021e58 <_Balloc>
 8021f66:	4680      	mov	r8, r0
 8021f68:	b928      	cbnz	r0, 8021f76 <__multadd+0x5a>
 8021f6a:	4602      	mov	r2, r0
 8021f6c:	4b0c      	ldr	r3, [pc, #48]	; (8021fa0 <__multadd+0x84>)
 8021f6e:	480d      	ldr	r0, [pc, #52]	; (8021fa4 <__multadd+0x88>)
 8021f70:	21ba      	movs	r1, #186	; 0xba
 8021f72:	f7ff f905 	bl	8021180 <__assert_func>
 8021f76:	6922      	ldr	r2, [r4, #16]
 8021f78:	3202      	adds	r2, #2
 8021f7a:	f104 010c 	add.w	r1, r4, #12
 8021f7e:	0092      	lsls	r2, r2, #2
 8021f80:	300c      	adds	r0, #12
 8021f82:	f7ff f8e8 	bl	8021156 <memcpy>
 8021f86:	4621      	mov	r1, r4
 8021f88:	4638      	mov	r0, r7
 8021f8a:	f7ff ffa5 	bl	8021ed8 <_Bfree>
 8021f8e:	4644      	mov	r4, r8
 8021f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021f94:	3501      	adds	r5, #1
 8021f96:	615e      	str	r6, [r3, #20]
 8021f98:	6125      	str	r5, [r4, #16]
 8021f9a:	4620      	mov	r0, r4
 8021f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021fa0:	08025f46 	.word	0x08025f46
 8021fa4:	08025f57 	.word	0x08025f57

08021fa8 <__s2b>:
 8021fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021fac:	460c      	mov	r4, r1
 8021fae:	4615      	mov	r5, r2
 8021fb0:	461f      	mov	r7, r3
 8021fb2:	2209      	movs	r2, #9
 8021fb4:	3308      	adds	r3, #8
 8021fb6:	4606      	mov	r6, r0
 8021fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8021fbc:	2100      	movs	r1, #0
 8021fbe:	2201      	movs	r2, #1
 8021fc0:	429a      	cmp	r2, r3
 8021fc2:	db09      	blt.n	8021fd8 <__s2b+0x30>
 8021fc4:	4630      	mov	r0, r6
 8021fc6:	f7ff ff47 	bl	8021e58 <_Balloc>
 8021fca:	b940      	cbnz	r0, 8021fde <__s2b+0x36>
 8021fcc:	4602      	mov	r2, r0
 8021fce:	4b19      	ldr	r3, [pc, #100]	; (8022034 <__s2b+0x8c>)
 8021fd0:	4819      	ldr	r0, [pc, #100]	; (8022038 <__s2b+0x90>)
 8021fd2:	21d3      	movs	r1, #211	; 0xd3
 8021fd4:	f7ff f8d4 	bl	8021180 <__assert_func>
 8021fd8:	0052      	lsls	r2, r2, #1
 8021fda:	3101      	adds	r1, #1
 8021fdc:	e7f0      	b.n	8021fc0 <__s2b+0x18>
 8021fde:	9b08      	ldr	r3, [sp, #32]
 8021fe0:	6143      	str	r3, [r0, #20]
 8021fe2:	2d09      	cmp	r5, #9
 8021fe4:	f04f 0301 	mov.w	r3, #1
 8021fe8:	6103      	str	r3, [r0, #16]
 8021fea:	dd16      	ble.n	802201a <__s2b+0x72>
 8021fec:	f104 0909 	add.w	r9, r4, #9
 8021ff0:	46c8      	mov	r8, r9
 8021ff2:	442c      	add	r4, r5
 8021ff4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021ff8:	4601      	mov	r1, r0
 8021ffa:	3b30      	subs	r3, #48	; 0x30
 8021ffc:	220a      	movs	r2, #10
 8021ffe:	4630      	mov	r0, r6
 8022000:	f7ff ff8c 	bl	8021f1c <__multadd>
 8022004:	45a0      	cmp	r8, r4
 8022006:	d1f5      	bne.n	8021ff4 <__s2b+0x4c>
 8022008:	f1a5 0408 	sub.w	r4, r5, #8
 802200c:	444c      	add	r4, r9
 802200e:	1b2d      	subs	r5, r5, r4
 8022010:	1963      	adds	r3, r4, r5
 8022012:	42bb      	cmp	r3, r7
 8022014:	db04      	blt.n	8022020 <__s2b+0x78>
 8022016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802201a:	340a      	adds	r4, #10
 802201c:	2509      	movs	r5, #9
 802201e:	e7f6      	b.n	802200e <__s2b+0x66>
 8022020:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022024:	4601      	mov	r1, r0
 8022026:	3b30      	subs	r3, #48	; 0x30
 8022028:	220a      	movs	r2, #10
 802202a:	4630      	mov	r0, r6
 802202c:	f7ff ff76 	bl	8021f1c <__multadd>
 8022030:	e7ee      	b.n	8022010 <__s2b+0x68>
 8022032:	bf00      	nop
 8022034:	08025f46 	.word	0x08025f46
 8022038:	08025f57 	.word	0x08025f57

0802203c <__hi0bits>:
 802203c:	0c03      	lsrs	r3, r0, #16
 802203e:	041b      	lsls	r3, r3, #16
 8022040:	b9d3      	cbnz	r3, 8022078 <__hi0bits+0x3c>
 8022042:	0400      	lsls	r0, r0, #16
 8022044:	2310      	movs	r3, #16
 8022046:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802204a:	bf04      	itt	eq
 802204c:	0200      	lsleq	r0, r0, #8
 802204e:	3308      	addeq	r3, #8
 8022050:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022054:	bf04      	itt	eq
 8022056:	0100      	lsleq	r0, r0, #4
 8022058:	3304      	addeq	r3, #4
 802205a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802205e:	bf04      	itt	eq
 8022060:	0080      	lsleq	r0, r0, #2
 8022062:	3302      	addeq	r3, #2
 8022064:	2800      	cmp	r0, #0
 8022066:	db05      	blt.n	8022074 <__hi0bits+0x38>
 8022068:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802206c:	f103 0301 	add.w	r3, r3, #1
 8022070:	bf08      	it	eq
 8022072:	2320      	moveq	r3, #32
 8022074:	4618      	mov	r0, r3
 8022076:	4770      	bx	lr
 8022078:	2300      	movs	r3, #0
 802207a:	e7e4      	b.n	8022046 <__hi0bits+0xa>

0802207c <__lo0bits>:
 802207c:	6803      	ldr	r3, [r0, #0]
 802207e:	f013 0207 	ands.w	r2, r3, #7
 8022082:	d00c      	beq.n	802209e <__lo0bits+0x22>
 8022084:	07d9      	lsls	r1, r3, #31
 8022086:	d422      	bmi.n	80220ce <__lo0bits+0x52>
 8022088:	079a      	lsls	r2, r3, #30
 802208a:	bf49      	itett	mi
 802208c:	085b      	lsrmi	r3, r3, #1
 802208e:	089b      	lsrpl	r3, r3, #2
 8022090:	6003      	strmi	r3, [r0, #0]
 8022092:	2201      	movmi	r2, #1
 8022094:	bf5c      	itt	pl
 8022096:	6003      	strpl	r3, [r0, #0]
 8022098:	2202      	movpl	r2, #2
 802209a:	4610      	mov	r0, r2
 802209c:	4770      	bx	lr
 802209e:	b299      	uxth	r1, r3
 80220a0:	b909      	cbnz	r1, 80220a6 <__lo0bits+0x2a>
 80220a2:	0c1b      	lsrs	r3, r3, #16
 80220a4:	2210      	movs	r2, #16
 80220a6:	b2d9      	uxtb	r1, r3
 80220a8:	b909      	cbnz	r1, 80220ae <__lo0bits+0x32>
 80220aa:	3208      	adds	r2, #8
 80220ac:	0a1b      	lsrs	r3, r3, #8
 80220ae:	0719      	lsls	r1, r3, #28
 80220b0:	bf04      	itt	eq
 80220b2:	091b      	lsreq	r3, r3, #4
 80220b4:	3204      	addeq	r2, #4
 80220b6:	0799      	lsls	r1, r3, #30
 80220b8:	bf04      	itt	eq
 80220ba:	089b      	lsreq	r3, r3, #2
 80220bc:	3202      	addeq	r2, #2
 80220be:	07d9      	lsls	r1, r3, #31
 80220c0:	d403      	bmi.n	80220ca <__lo0bits+0x4e>
 80220c2:	085b      	lsrs	r3, r3, #1
 80220c4:	f102 0201 	add.w	r2, r2, #1
 80220c8:	d003      	beq.n	80220d2 <__lo0bits+0x56>
 80220ca:	6003      	str	r3, [r0, #0]
 80220cc:	e7e5      	b.n	802209a <__lo0bits+0x1e>
 80220ce:	2200      	movs	r2, #0
 80220d0:	e7e3      	b.n	802209a <__lo0bits+0x1e>
 80220d2:	2220      	movs	r2, #32
 80220d4:	e7e1      	b.n	802209a <__lo0bits+0x1e>
	...

080220d8 <__i2b>:
 80220d8:	b510      	push	{r4, lr}
 80220da:	460c      	mov	r4, r1
 80220dc:	2101      	movs	r1, #1
 80220de:	f7ff febb 	bl	8021e58 <_Balloc>
 80220e2:	4602      	mov	r2, r0
 80220e4:	b928      	cbnz	r0, 80220f2 <__i2b+0x1a>
 80220e6:	4b05      	ldr	r3, [pc, #20]	; (80220fc <__i2b+0x24>)
 80220e8:	4805      	ldr	r0, [pc, #20]	; (8022100 <__i2b+0x28>)
 80220ea:	f240 1145 	movw	r1, #325	; 0x145
 80220ee:	f7ff f847 	bl	8021180 <__assert_func>
 80220f2:	2301      	movs	r3, #1
 80220f4:	6144      	str	r4, [r0, #20]
 80220f6:	6103      	str	r3, [r0, #16]
 80220f8:	bd10      	pop	{r4, pc}
 80220fa:	bf00      	nop
 80220fc:	08025f46 	.word	0x08025f46
 8022100:	08025f57 	.word	0x08025f57

08022104 <__multiply>:
 8022104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022108:	4691      	mov	r9, r2
 802210a:	690a      	ldr	r2, [r1, #16]
 802210c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022110:	429a      	cmp	r2, r3
 8022112:	bfb8      	it	lt
 8022114:	460b      	movlt	r3, r1
 8022116:	460c      	mov	r4, r1
 8022118:	bfbc      	itt	lt
 802211a:	464c      	movlt	r4, r9
 802211c:	4699      	movlt	r9, r3
 802211e:	6927      	ldr	r7, [r4, #16]
 8022120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022124:	68a3      	ldr	r3, [r4, #8]
 8022126:	6861      	ldr	r1, [r4, #4]
 8022128:	eb07 060a 	add.w	r6, r7, sl
 802212c:	42b3      	cmp	r3, r6
 802212e:	b085      	sub	sp, #20
 8022130:	bfb8      	it	lt
 8022132:	3101      	addlt	r1, #1
 8022134:	f7ff fe90 	bl	8021e58 <_Balloc>
 8022138:	b930      	cbnz	r0, 8022148 <__multiply+0x44>
 802213a:	4602      	mov	r2, r0
 802213c:	4b44      	ldr	r3, [pc, #272]	; (8022250 <__multiply+0x14c>)
 802213e:	4845      	ldr	r0, [pc, #276]	; (8022254 <__multiply+0x150>)
 8022140:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8022144:	f7ff f81c 	bl	8021180 <__assert_func>
 8022148:	f100 0514 	add.w	r5, r0, #20
 802214c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022150:	462b      	mov	r3, r5
 8022152:	2200      	movs	r2, #0
 8022154:	4543      	cmp	r3, r8
 8022156:	d321      	bcc.n	802219c <__multiply+0x98>
 8022158:	f104 0314 	add.w	r3, r4, #20
 802215c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022160:	f109 0314 	add.w	r3, r9, #20
 8022164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022168:	9202      	str	r2, [sp, #8]
 802216a:	1b3a      	subs	r2, r7, r4
 802216c:	3a15      	subs	r2, #21
 802216e:	f022 0203 	bic.w	r2, r2, #3
 8022172:	3204      	adds	r2, #4
 8022174:	f104 0115 	add.w	r1, r4, #21
 8022178:	428f      	cmp	r7, r1
 802217a:	bf38      	it	cc
 802217c:	2204      	movcc	r2, #4
 802217e:	9201      	str	r2, [sp, #4]
 8022180:	9a02      	ldr	r2, [sp, #8]
 8022182:	9303      	str	r3, [sp, #12]
 8022184:	429a      	cmp	r2, r3
 8022186:	d80c      	bhi.n	80221a2 <__multiply+0x9e>
 8022188:	2e00      	cmp	r6, #0
 802218a:	dd03      	ble.n	8022194 <__multiply+0x90>
 802218c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022190:	2b00      	cmp	r3, #0
 8022192:	d05b      	beq.n	802224c <__multiply+0x148>
 8022194:	6106      	str	r6, [r0, #16]
 8022196:	b005      	add	sp, #20
 8022198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802219c:	f843 2b04 	str.w	r2, [r3], #4
 80221a0:	e7d8      	b.n	8022154 <__multiply+0x50>
 80221a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80221a6:	f1ba 0f00 	cmp.w	sl, #0
 80221aa:	d024      	beq.n	80221f6 <__multiply+0xf2>
 80221ac:	f104 0e14 	add.w	lr, r4, #20
 80221b0:	46a9      	mov	r9, r5
 80221b2:	f04f 0c00 	mov.w	ip, #0
 80221b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80221ba:	f8d9 1000 	ldr.w	r1, [r9]
 80221be:	fa1f fb82 	uxth.w	fp, r2
 80221c2:	b289      	uxth	r1, r1
 80221c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80221c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80221cc:	f8d9 2000 	ldr.w	r2, [r9]
 80221d0:	4461      	add	r1, ip
 80221d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80221d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80221da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80221de:	b289      	uxth	r1, r1
 80221e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80221e4:	4577      	cmp	r7, lr
 80221e6:	f849 1b04 	str.w	r1, [r9], #4
 80221ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80221ee:	d8e2      	bhi.n	80221b6 <__multiply+0xb2>
 80221f0:	9a01      	ldr	r2, [sp, #4]
 80221f2:	f845 c002 	str.w	ip, [r5, r2]
 80221f6:	9a03      	ldr	r2, [sp, #12]
 80221f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80221fc:	3304      	adds	r3, #4
 80221fe:	f1b9 0f00 	cmp.w	r9, #0
 8022202:	d021      	beq.n	8022248 <__multiply+0x144>
 8022204:	6829      	ldr	r1, [r5, #0]
 8022206:	f104 0c14 	add.w	ip, r4, #20
 802220a:	46ae      	mov	lr, r5
 802220c:	f04f 0a00 	mov.w	sl, #0
 8022210:	f8bc b000 	ldrh.w	fp, [ip]
 8022214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022218:	fb09 220b 	mla	r2, r9, fp, r2
 802221c:	4452      	add	r2, sl
 802221e:	b289      	uxth	r1, r1
 8022220:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022224:	f84e 1b04 	str.w	r1, [lr], #4
 8022228:	f85c 1b04 	ldr.w	r1, [ip], #4
 802222c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022230:	f8be 1000 	ldrh.w	r1, [lr]
 8022234:	fb09 110a 	mla	r1, r9, sl, r1
 8022238:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802223c:	4567      	cmp	r7, ip
 802223e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022242:	d8e5      	bhi.n	8022210 <__multiply+0x10c>
 8022244:	9a01      	ldr	r2, [sp, #4]
 8022246:	50a9      	str	r1, [r5, r2]
 8022248:	3504      	adds	r5, #4
 802224a:	e799      	b.n	8022180 <__multiply+0x7c>
 802224c:	3e01      	subs	r6, #1
 802224e:	e79b      	b.n	8022188 <__multiply+0x84>
 8022250:	08025f46 	.word	0x08025f46
 8022254:	08025f57 	.word	0x08025f57

08022258 <__pow5mult>:
 8022258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802225c:	4615      	mov	r5, r2
 802225e:	f012 0203 	ands.w	r2, r2, #3
 8022262:	4606      	mov	r6, r0
 8022264:	460f      	mov	r7, r1
 8022266:	d007      	beq.n	8022278 <__pow5mult+0x20>
 8022268:	4c25      	ldr	r4, [pc, #148]	; (8022300 <__pow5mult+0xa8>)
 802226a:	3a01      	subs	r2, #1
 802226c:	2300      	movs	r3, #0
 802226e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022272:	f7ff fe53 	bl	8021f1c <__multadd>
 8022276:	4607      	mov	r7, r0
 8022278:	10ad      	asrs	r5, r5, #2
 802227a:	d03d      	beq.n	80222f8 <__pow5mult+0xa0>
 802227c:	69f4      	ldr	r4, [r6, #28]
 802227e:	b97c      	cbnz	r4, 80222a0 <__pow5mult+0x48>
 8022280:	2010      	movs	r0, #16
 8022282:	f7fd fab7 	bl	801f7f4 <malloc>
 8022286:	4602      	mov	r2, r0
 8022288:	61f0      	str	r0, [r6, #28]
 802228a:	b928      	cbnz	r0, 8022298 <__pow5mult+0x40>
 802228c:	4b1d      	ldr	r3, [pc, #116]	; (8022304 <__pow5mult+0xac>)
 802228e:	481e      	ldr	r0, [pc, #120]	; (8022308 <__pow5mult+0xb0>)
 8022290:	f240 11b3 	movw	r1, #435	; 0x1b3
 8022294:	f7fe ff74 	bl	8021180 <__assert_func>
 8022298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802229c:	6004      	str	r4, [r0, #0]
 802229e:	60c4      	str	r4, [r0, #12]
 80222a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80222a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80222a8:	b94c      	cbnz	r4, 80222be <__pow5mult+0x66>
 80222aa:	f240 2171 	movw	r1, #625	; 0x271
 80222ae:	4630      	mov	r0, r6
 80222b0:	f7ff ff12 	bl	80220d8 <__i2b>
 80222b4:	2300      	movs	r3, #0
 80222b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80222ba:	4604      	mov	r4, r0
 80222bc:	6003      	str	r3, [r0, #0]
 80222be:	f04f 0900 	mov.w	r9, #0
 80222c2:	07eb      	lsls	r3, r5, #31
 80222c4:	d50a      	bpl.n	80222dc <__pow5mult+0x84>
 80222c6:	4639      	mov	r1, r7
 80222c8:	4622      	mov	r2, r4
 80222ca:	4630      	mov	r0, r6
 80222cc:	f7ff ff1a 	bl	8022104 <__multiply>
 80222d0:	4639      	mov	r1, r7
 80222d2:	4680      	mov	r8, r0
 80222d4:	4630      	mov	r0, r6
 80222d6:	f7ff fdff 	bl	8021ed8 <_Bfree>
 80222da:	4647      	mov	r7, r8
 80222dc:	106d      	asrs	r5, r5, #1
 80222de:	d00b      	beq.n	80222f8 <__pow5mult+0xa0>
 80222e0:	6820      	ldr	r0, [r4, #0]
 80222e2:	b938      	cbnz	r0, 80222f4 <__pow5mult+0x9c>
 80222e4:	4622      	mov	r2, r4
 80222e6:	4621      	mov	r1, r4
 80222e8:	4630      	mov	r0, r6
 80222ea:	f7ff ff0b 	bl	8022104 <__multiply>
 80222ee:	6020      	str	r0, [r4, #0]
 80222f0:	f8c0 9000 	str.w	r9, [r0]
 80222f4:	4604      	mov	r4, r0
 80222f6:	e7e4      	b.n	80222c2 <__pow5mult+0x6a>
 80222f8:	4638      	mov	r0, r7
 80222fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80222fe:	bf00      	nop
 8022300:	080260a0 	.word	0x080260a0
 8022304:	08025cfc 	.word	0x08025cfc
 8022308:	08025f57 	.word	0x08025f57

0802230c <__lshift>:
 802230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022310:	460c      	mov	r4, r1
 8022312:	6849      	ldr	r1, [r1, #4]
 8022314:	6923      	ldr	r3, [r4, #16]
 8022316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802231a:	68a3      	ldr	r3, [r4, #8]
 802231c:	4607      	mov	r7, r0
 802231e:	4691      	mov	r9, r2
 8022320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022324:	f108 0601 	add.w	r6, r8, #1
 8022328:	42b3      	cmp	r3, r6
 802232a:	db0b      	blt.n	8022344 <__lshift+0x38>
 802232c:	4638      	mov	r0, r7
 802232e:	f7ff fd93 	bl	8021e58 <_Balloc>
 8022332:	4605      	mov	r5, r0
 8022334:	b948      	cbnz	r0, 802234a <__lshift+0x3e>
 8022336:	4602      	mov	r2, r0
 8022338:	4b28      	ldr	r3, [pc, #160]	; (80223dc <__lshift+0xd0>)
 802233a:	4829      	ldr	r0, [pc, #164]	; (80223e0 <__lshift+0xd4>)
 802233c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8022340:	f7fe ff1e 	bl	8021180 <__assert_func>
 8022344:	3101      	adds	r1, #1
 8022346:	005b      	lsls	r3, r3, #1
 8022348:	e7ee      	b.n	8022328 <__lshift+0x1c>
 802234a:	2300      	movs	r3, #0
 802234c:	f100 0114 	add.w	r1, r0, #20
 8022350:	f100 0210 	add.w	r2, r0, #16
 8022354:	4618      	mov	r0, r3
 8022356:	4553      	cmp	r3, sl
 8022358:	db33      	blt.n	80223c2 <__lshift+0xb6>
 802235a:	6920      	ldr	r0, [r4, #16]
 802235c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022360:	f104 0314 	add.w	r3, r4, #20
 8022364:	f019 091f 	ands.w	r9, r9, #31
 8022368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802236c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022370:	d02b      	beq.n	80223ca <__lshift+0xbe>
 8022372:	f1c9 0e20 	rsb	lr, r9, #32
 8022376:	468a      	mov	sl, r1
 8022378:	2200      	movs	r2, #0
 802237a:	6818      	ldr	r0, [r3, #0]
 802237c:	fa00 f009 	lsl.w	r0, r0, r9
 8022380:	4310      	orrs	r0, r2
 8022382:	f84a 0b04 	str.w	r0, [sl], #4
 8022386:	f853 2b04 	ldr.w	r2, [r3], #4
 802238a:	459c      	cmp	ip, r3
 802238c:	fa22 f20e 	lsr.w	r2, r2, lr
 8022390:	d8f3      	bhi.n	802237a <__lshift+0x6e>
 8022392:	ebac 0304 	sub.w	r3, ip, r4
 8022396:	3b15      	subs	r3, #21
 8022398:	f023 0303 	bic.w	r3, r3, #3
 802239c:	3304      	adds	r3, #4
 802239e:	f104 0015 	add.w	r0, r4, #21
 80223a2:	4584      	cmp	ip, r0
 80223a4:	bf38      	it	cc
 80223a6:	2304      	movcc	r3, #4
 80223a8:	50ca      	str	r2, [r1, r3]
 80223aa:	b10a      	cbz	r2, 80223b0 <__lshift+0xa4>
 80223ac:	f108 0602 	add.w	r6, r8, #2
 80223b0:	3e01      	subs	r6, #1
 80223b2:	4638      	mov	r0, r7
 80223b4:	612e      	str	r6, [r5, #16]
 80223b6:	4621      	mov	r1, r4
 80223b8:	f7ff fd8e 	bl	8021ed8 <_Bfree>
 80223bc:	4628      	mov	r0, r5
 80223be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80223c6:	3301      	adds	r3, #1
 80223c8:	e7c5      	b.n	8022356 <__lshift+0x4a>
 80223ca:	3904      	subs	r1, #4
 80223cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80223d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80223d4:	459c      	cmp	ip, r3
 80223d6:	d8f9      	bhi.n	80223cc <__lshift+0xc0>
 80223d8:	e7ea      	b.n	80223b0 <__lshift+0xa4>
 80223da:	bf00      	nop
 80223dc:	08025f46 	.word	0x08025f46
 80223e0:	08025f57 	.word	0x08025f57

080223e4 <__mcmp>:
 80223e4:	b530      	push	{r4, r5, lr}
 80223e6:	6902      	ldr	r2, [r0, #16]
 80223e8:	690c      	ldr	r4, [r1, #16]
 80223ea:	1b12      	subs	r2, r2, r4
 80223ec:	d10e      	bne.n	802240c <__mcmp+0x28>
 80223ee:	f100 0314 	add.w	r3, r0, #20
 80223f2:	3114      	adds	r1, #20
 80223f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80223f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80223fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022404:	42a5      	cmp	r5, r4
 8022406:	d003      	beq.n	8022410 <__mcmp+0x2c>
 8022408:	d305      	bcc.n	8022416 <__mcmp+0x32>
 802240a:	2201      	movs	r2, #1
 802240c:	4610      	mov	r0, r2
 802240e:	bd30      	pop	{r4, r5, pc}
 8022410:	4283      	cmp	r3, r0
 8022412:	d3f3      	bcc.n	80223fc <__mcmp+0x18>
 8022414:	e7fa      	b.n	802240c <__mcmp+0x28>
 8022416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802241a:	e7f7      	b.n	802240c <__mcmp+0x28>

0802241c <__mdiff>:
 802241c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022420:	460c      	mov	r4, r1
 8022422:	4606      	mov	r6, r0
 8022424:	4611      	mov	r1, r2
 8022426:	4620      	mov	r0, r4
 8022428:	4690      	mov	r8, r2
 802242a:	f7ff ffdb 	bl	80223e4 <__mcmp>
 802242e:	1e05      	subs	r5, r0, #0
 8022430:	d110      	bne.n	8022454 <__mdiff+0x38>
 8022432:	4629      	mov	r1, r5
 8022434:	4630      	mov	r0, r6
 8022436:	f7ff fd0f 	bl	8021e58 <_Balloc>
 802243a:	b930      	cbnz	r0, 802244a <__mdiff+0x2e>
 802243c:	4b3a      	ldr	r3, [pc, #232]	; (8022528 <__mdiff+0x10c>)
 802243e:	4602      	mov	r2, r0
 8022440:	f240 2137 	movw	r1, #567	; 0x237
 8022444:	4839      	ldr	r0, [pc, #228]	; (802252c <__mdiff+0x110>)
 8022446:	f7fe fe9b 	bl	8021180 <__assert_func>
 802244a:	2301      	movs	r3, #1
 802244c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022454:	bfa4      	itt	ge
 8022456:	4643      	movge	r3, r8
 8022458:	46a0      	movge	r8, r4
 802245a:	4630      	mov	r0, r6
 802245c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022460:	bfa6      	itte	ge
 8022462:	461c      	movge	r4, r3
 8022464:	2500      	movge	r5, #0
 8022466:	2501      	movlt	r5, #1
 8022468:	f7ff fcf6 	bl	8021e58 <_Balloc>
 802246c:	b920      	cbnz	r0, 8022478 <__mdiff+0x5c>
 802246e:	4b2e      	ldr	r3, [pc, #184]	; (8022528 <__mdiff+0x10c>)
 8022470:	4602      	mov	r2, r0
 8022472:	f240 2145 	movw	r1, #581	; 0x245
 8022476:	e7e5      	b.n	8022444 <__mdiff+0x28>
 8022478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802247c:	6926      	ldr	r6, [r4, #16]
 802247e:	60c5      	str	r5, [r0, #12]
 8022480:	f104 0914 	add.w	r9, r4, #20
 8022484:	f108 0514 	add.w	r5, r8, #20
 8022488:	f100 0e14 	add.w	lr, r0, #20
 802248c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022494:	f108 0210 	add.w	r2, r8, #16
 8022498:	46f2      	mov	sl, lr
 802249a:	2100      	movs	r1, #0
 802249c:	f859 3b04 	ldr.w	r3, [r9], #4
 80224a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80224a4:	fa11 f88b 	uxtah	r8, r1, fp
 80224a8:	b299      	uxth	r1, r3
 80224aa:	0c1b      	lsrs	r3, r3, #16
 80224ac:	eba8 0801 	sub.w	r8, r8, r1
 80224b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80224b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80224b8:	fa1f f888 	uxth.w	r8, r8
 80224bc:	1419      	asrs	r1, r3, #16
 80224be:	454e      	cmp	r6, r9
 80224c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80224c4:	f84a 3b04 	str.w	r3, [sl], #4
 80224c8:	d8e8      	bhi.n	802249c <__mdiff+0x80>
 80224ca:	1b33      	subs	r3, r6, r4
 80224cc:	3b15      	subs	r3, #21
 80224ce:	f023 0303 	bic.w	r3, r3, #3
 80224d2:	3304      	adds	r3, #4
 80224d4:	3415      	adds	r4, #21
 80224d6:	42a6      	cmp	r6, r4
 80224d8:	bf38      	it	cc
 80224da:	2304      	movcc	r3, #4
 80224dc:	441d      	add	r5, r3
 80224de:	4473      	add	r3, lr
 80224e0:	469e      	mov	lr, r3
 80224e2:	462e      	mov	r6, r5
 80224e4:	4566      	cmp	r6, ip
 80224e6:	d30e      	bcc.n	8022506 <__mdiff+0xea>
 80224e8:	f10c 0203 	add.w	r2, ip, #3
 80224ec:	1b52      	subs	r2, r2, r5
 80224ee:	f022 0203 	bic.w	r2, r2, #3
 80224f2:	3d03      	subs	r5, #3
 80224f4:	45ac      	cmp	ip, r5
 80224f6:	bf38      	it	cc
 80224f8:	2200      	movcc	r2, #0
 80224fa:	4413      	add	r3, r2
 80224fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022500:	b17a      	cbz	r2, 8022522 <__mdiff+0x106>
 8022502:	6107      	str	r7, [r0, #16]
 8022504:	e7a4      	b.n	8022450 <__mdiff+0x34>
 8022506:	f856 8b04 	ldr.w	r8, [r6], #4
 802250a:	fa11 f288 	uxtah	r2, r1, r8
 802250e:	1414      	asrs	r4, r2, #16
 8022510:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022514:	b292      	uxth	r2, r2
 8022516:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802251a:	f84e 2b04 	str.w	r2, [lr], #4
 802251e:	1421      	asrs	r1, r4, #16
 8022520:	e7e0      	b.n	80224e4 <__mdiff+0xc8>
 8022522:	3f01      	subs	r7, #1
 8022524:	e7ea      	b.n	80224fc <__mdiff+0xe0>
 8022526:	bf00      	nop
 8022528:	08025f46 	.word	0x08025f46
 802252c:	08025f57 	.word	0x08025f57

08022530 <__ulp>:
 8022530:	b082      	sub	sp, #8
 8022532:	ed8d 0b00 	vstr	d0, [sp]
 8022536:	9a01      	ldr	r2, [sp, #4]
 8022538:	4b0f      	ldr	r3, [pc, #60]	; (8022578 <__ulp+0x48>)
 802253a:	4013      	ands	r3, r2
 802253c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8022540:	2b00      	cmp	r3, #0
 8022542:	dc08      	bgt.n	8022556 <__ulp+0x26>
 8022544:	425b      	negs	r3, r3
 8022546:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802254a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802254e:	da04      	bge.n	802255a <__ulp+0x2a>
 8022550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022554:	4113      	asrs	r3, r2
 8022556:	2200      	movs	r2, #0
 8022558:	e008      	b.n	802256c <__ulp+0x3c>
 802255a:	f1a2 0314 	sub.w	r3, r2, #20
 802255e:	2b1e      	cmp	r3, #30
 8022560:	bfda      	itte	le
 8022562:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8022566:	40da      	lsrle	r2, r3
 8022568:	2201      	movgt	r2, #1
 802256a:	2300      	movs	r3, #0
 802256c:	4619      	mov	r1, r3
 802256e:	4610      	mov	r0, r2
 8022570:	ec41 0b10 	vmov	d0, r0, r1
 8022574:	b002      	add	sp, #8
 8022576:	4770      	bx	lr
 8022578:	7ff00000 	.word	0x7ff00000

0802257c <__b2d>:
 802257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022580:	6906      	ldr	r6, [r0, #16]
 8022582:	f100 0814 	add.w	r8, r0, #20
 8022586:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802258a:	1f37      	subs	r7, r6, #4
 802258c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022590:	4610      	mov	r0, r2
 8022592:	f7ff fd53 	bl	802203c <__hi0bits>
 8022596:	f1c0 0320 	rsb	r3, r0, #32
 802259a:	280a      	cmp	r0, #10
 802259c:	600b      	str	r3, [r1, #0]
 802259e:	491b      	ldr	r1, [pc, #108]	; (802260c <__b2d+0x90>)
 80225a0:	dc15      	bgt.n	80225ce <__b2d+0x52>
 80225a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80225a6:	fa22 f30c 	lsr.w	r3, r2, ip
 80225aa:	45b8      	cmp	r8, r7
 80225ac:	ea43 0501 	orr.w	r5, r3, r1
 80225b0:	bf34      	ite	cc
 80225b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80225b6:	2300      	movcs	r3, #0
 80225b8:	3015      	adds	r0, #21
 80225ba:	fa02 f000 	lsl.w	r0, r2, r0
 80225be:	fa23 f30c 	lsr.w	r3, r3, ip
 80225c2:	4303      	orrs	r3, r0
 80225c4:	461c      	mov	r4, r3
 80225c6:	ec45 4b10 	vmov	d0, r4, r5
 80225ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225ce:	45b8      	cmp	r8, r7
 80225d0:	bf3a      	itte	cc
 80225d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80225d6:	f1a6 0708 	subcc.w	r7, r6, #8
 80225da:	2300      	movcs	r3, #0
 80225dc:	380b      	subs	r0, #11
 80225de:	d012      	beq.n	8022606 <__b2d+0x8a>
 80225e0:	f1c0 0120 	rsb	r1, r0, #32
 80225e4:	fa23 f401 	lsr.w	r4, r3, r1
 80225e8:	4082      	lsls	r2, r0
 80225ea:	4322      	orrs	r2, r4
 80225ec:	4547      	cmp	r7, r8
 80225ee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80225f2:	bf8c      	ite	hi
 80225f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80225f8:	2200      	movls	r2, #0
 80225fa:	4083      	lsls	r3, r0
 80225fc:	40ca      	lsrs	r2, r1
 80225fe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022602:	4313      	orrs	r3, r2
 8022604:	e7de      	b.n	80225c4 <__b2d+0x48>
 8022606:	ea42 0501 	orr.w	r5, r2, r1
 802260a:	e7db      	b.n	80225c4 <__b2d+0x48>
 802260c:	3ff00000 	.word	0x3ff00000

08022610 <__d2b>:
 8022610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022614:	460f      	mov	r7, r1
 8022616:	2101      	movs	r1, #1
 8022618:	ec59 8b10 	vmov	r8, r9, d0
 802261c:	4616      	mov	r6, r2
 802261e:	f7ff fc1b 	bl	8021e58 <_Balloc>
 8022622:	4604      	mov	r4, r0
 8022624:	b930      	cbnz	r0, 8022634 <__d2b+0x24>
 8022626:	4602      	mov	r2, r0
 8022628:	4b24      	ldr	r3, [pc, #144]	; (80226bc <__d2b+0xac>)
 802262a:	4825      	ldr	r0, [pc, #148]	; (80226c0 <__d2b+0xb0>)
 802262c:	f240 310f 	movw	r1, #783	; 0x30f
 8022630:	f7fe fda6 	bl	8021180 <__assert_func>
 8022634:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802263c:	bb2d      	cbnz	r5, 802268a <__d2b+0x7a>
 802263e:	9301      	str	r3, [sp, #4]
 8022640:	f1b8 0300 	subs.w	r3, r8, #0
 8022644:	d026      	beq.n	8022694 <__d2b+0x84>
 8022646:	4668      	mov	r0, sp
 8022648:	9300      	str	r3, [sp, #0]
 802264a:	f7ff fd17 	bl	802207c <__lo0bits>
 802264e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8022652:	b1e8      	cbz	r0, 8022690 <__d2b+0x80>
 8022654:	f1c0 0320 	rsb	r3, r0, #32
 8022658:	fa02 f303 	lsl.w	r3, r2, r3
 802265c:	430b      	orrs	r3, r1
 802265e:	40c2      	lsrs	r2, r0
 8022660:	6163      	str	r3, [r4, #20]
 8022662:	9201      	str	r2, [sp, #4]
 8022664:	9b01      	ldr	r3, [sp, #4]
 8022666:	61a3      	str	r3, [r4, #24]
 8022668:	2b00      	cmp	r3, #0
 802266a:	bf14      	ite	ne
 802266c:	2202      	movne	r2, #2
 802266e:	2201      	moveq	r2, #1
 8022670:	6122      	str	r2, [r4, #16]
 8022672:	b1bd      	cbz	r5, 80226a4 <__d2b+0x94>
 8022674:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022678:	4405      	add	r5, r0
 802267a:	603d      	str	r5, [r7, #0]
 802267c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022680:	6030      	str	r0, [r6, #0]
 8022682:	4620      	mov	r0, r4
 8022684:	b003      	add	sp, #12
 8022686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802268e:	e7d6      	b.n	802263e <__d2b+0x2e>
 8022690:	6161      	str	r1, [r4, #20]
 8022692:	e7e7      	b.n	8022664 <__d2b+0x54>
 8022694:	a801      	add	r0, sp, #4
 8022696:	f7ff fcf1 	bl	802207c <__lo0bits>
 802269a:	9b01      	ldr	r3, [sp, #4]
 802269c:	6163      	str	r3, [r4, #20]
 802269e:	3020      	adds	r0, #32
 80226a0:	2201      	movs	r2, #1
 80226a2:	e7e5      	b.n	8022670 <__d2b+0x60>
 80226a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80226a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80226ac:	6038      	str	r0, [r7, #0]
 80226ae:	6918      	ldr	r0, [r3, #16]
 80226b0:	f7ff fcc4 	bl	802203c <__hi0bits>
 80226b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80226b8:	e7e2      	b.n	8022680 <__d2b+0x70>
 80226ba:	bf00      	nop
 80226bc:	08025f46 	.word	0x08025f46
 80226c0:	08025f57 	.word	0x08025f57

080226c4 <__ratio>:
 80226c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226c8:	4688      	mov	r8, r1
 80226ca:	4669      	mov	r1, sp
 80226cc:	4681      	mov	r9, r0
 80226ce:	f7ff ff55 	bl	802257c <__b2d>
 80226d2:	a901      	add	r1, sp, #4
 80226d4:	4640      	mov	r0, r8
 80226d6:	ec55 4b10 	vmov	r4, r5, d0
 80226da:	ee10 aa10 	vmov	sl, s0
 80226de:	f7ff ff4d 	bl	802257c <__b2d>
 80226e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80226e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80226ea:	1ad2      	subs	r2, r2, r3
 80226ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 80226f0:	1a5b      	subs	r3, r3, r1
 80226f2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80226f6:	ec57 6b10 	vmov	r6, r7, d0
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	bfd6      	itet	le
 80226fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022702:	462a      	movgt	r2, r5
 8022704:	463a      	movle	r2, r7
 8022706:	46ab      	mov	fp, r5
 8022708:	bfd6      	itet	le
 802270a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 802270e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8022712:	ee00 3a90 	vmovle	s1, r3
 8022716:	ec4b ab17 	vmov	d7, sl, fp
 802271a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 802271e:	b003      	add	sp, #12
 8022720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022724 <__copybits>:
 8022724:	3901      	subs	r1, #1
 8022726:	b570      	push	{r4, r5, r6, lr}
 8022728:	1149      	asrs	r1, r1, #5
 802272a:	6914      	ldr	r4, [r2, #16]
 802272c:	3101      	adds	r1, #1
 802272e:	f102 0314 	add.w	r3, r2, #20
 8022732:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022736:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802273a:	1f05      	subs	r5, r0, #4
 802273c:	42a3      	cmp	r3, r4
 802273e:	d30c      	bcc.n	802275a <__copybits+0x36>
 8022740:	1aa3      	subs	r3, r4, r2
 8022742:	3b11      	subs	r3, #17
 8022744:	f023 0303 	bic.w	r3, r3, #3
 8022748:	3211      	adds	r2, #17
 802274a:	42a2      	cmp	r2, r4
 802274c:	bf88      	it	hi
 802274e:	2300      	movhi	r3, #0
 8022750:	4418      	add	r0, r3
 8022752:	2300      	movs	r3, #0
 8022754:	4288      	cmp	r0, r1
 8022756:	d305      	bcc.n	8022764 <__copybits+0x40>
 8022758:	bd70      	pop	{r4, r5, r6, pc}
 802275a:	f853 6b04 	ldr.w	r6, [r3], #4
 802275e:	f845 6f04 	str.w	r6, [r5, #4]!
 8022762:	e7eb      	b.n	802273c <__copybits+0x18>
 8022764:	f840 3b04 	str.w	r3, [r0], #4
 8022768:	e7f4      	b.n	8022754 <__copybits+0x30>

0802276a <__any_on>:
 802276a:	f100 0214 	add.w	r2, r0, #20
 802276e:	6900      	ldr	r0, [r0, #16]
 8022770:	114b      	asrs	r3, r1, #5
 8022772:	4298      	cmp	r0, r3
 8022774:	b510      	push	{r4, lr}
 8022776:	db11      	blt.n	802279c <__any_on+0x32>
 8022778:	dd0a      	ble.n	8022790 <__any_on+0x26>
 802277a:	f011 011f 	ands.w	r1, r1, #31
 802277e:	d007      	beq.n	8022790 <__any_on+0x26>
 8022780:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022784:	fa24 f001 	lsr.w	r0, r4, r1
 8022788:	fa00 f101 	lsl.w	r1, r0, r1
 802278c:	428c      	cmp	r4, r1
 802278e:	d10b      	bne.n	80227a8 <__any_on+0x3e>
 8022790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022794:	4293      	cmp	r3, r2
 8022796:	d803      	bhi.n	80227a0 <__any_on+0x36>
 8022798:	2000      	movs	r0, #0
 802279a:	bd10      	pop	{r4, pc}
 802279c:	4603      	mov	r3, r0
 802279e:	e7f7      	b.n	8022790 <__any_on+0x26>
 80227a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80227a4:	2900      	cmp	r1, #0
 80227a6:	d0f5      	beq.n	8022794 <__any_on+0x2a>
 80227a8:	2001      	movs	r0, #1
 80227aa:	e7f6      	b.n	802279a <__any_on+0x30>

080227ac <_malloc_usable_size_r>:
 80227ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80227b0:	1f18      	subs	r0, r3, #4
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	bfbc      	itt	lt
 80227b6:	580b      	ldrlt	r3, [r1, r0]
 80227b8:	18c0      	addlt	r0, r0, r3
 80227ba:	4770      	bx	lr

080227bc <sulp>:
 80227bc:	b570      	push	{r4, r5, r6, lr}
 80227be:	4604      	mov	r4, r0
 80227c0:	460d      	mov	r5, r1
 80227c2:	4616      	mov	r6, r2
 80227c4:	ec45 4b10 	vmov	d0, r4, r5
 80227c8:	f7ff feb2 	bl	8022530 <__ulp>
 80227cc:	b17e      	cbz	r6, 80227ee <sulp+0x32>
 80227ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80227d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	dd09      	ble.n	80227ee <sulp+0x32>
 80227da:	051b      	lsls	r3, r3, #20
 80227dc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80227e0:	2000      	movs	r0, #0
 80227e2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80227e6:	ec41 0b17 	vmov	d7, r0, r1
 80227ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 80227ee:	bd70      	pop	{r4, r5, r6, pc}

080227f0 <_strtod_l>:
 80227f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227f4:	ed2d 8b0e 	vpush	{d8-d14}
 80227f8:	b097      	sub	sp, #92	; 0x5c
 80227fa:	4604      	mov	r4, r0
 80227fc:	920d      	str	r2, [sp, #52]	; 0x34
 80227fe:	2200      	movs	r2, #0
 8022800:	9212      	str	r2, [sp, #72]	; 0x48
 8022802:	468a      	mov	sl, r1
 8022804:	f04f 0800 	mov.w	r8, #0
 8022808:	f04f 0900 	mov.w	r9, #0
 802280c:	460a      	mov	r2, r1
 802280e:	9211      	str	r2, [sp, #68]	; 0x44
 8022810:	7811      	ldrb	r1, [r2, #0]
 8022812:	292b      	cmp	r1, #43	; 0x2b
 8022814:	d04c      	beq.n	80228b0 <_strtod_l+0xc0>
 8022816:	d839      	bhi.n	802288c <_strtod_l+0x9c>
 8022818:	290d      	cmp	r1, #13
 802281a:	d833      	bhi.n	8022884 <_strtod_l+0x94>
 802281c:	2908      	cmp	r1, #8
 802281e:	d833      	bhi.n	8022888 <_strtod_l+0x98>
 8022820:	2900      	cmp	r1, #0
 8022822:	d03c      	beq.n	802289e <_strtod_l+0xae>
 8022824:	2200      	movs	r2, #0
 8022826:	9208      	str	r2, [sp, #32]
 8022828:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802282a:	7832      	ldrb	r2, [r6, #0]
 802282c:	2a30      	cmp	r2, #48	; 0x30
 802282e:	f040 80b8 	bne.w	80229a2 <_strtod_l+0x1b2>
 8022832:	7872      	ldrb	r2, [r6, #1]
 8022834:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8022838:	2a58      	cmp	r2, #88	; 0x58
 802283a:	d170      	bne.n	802291e <_strtod_l+0x12e>
 802283c:	9302      	str	r3, [sp, #8]
 802283e:	9b08      	ldr	r3, [sp, #32]
 8022840:	9301      	str	r3, [sp, #4]
 8022842:	ab12      	add	r3, sp, #72	; 0x48
 8022844:	9300      	str	r3, [sp, #0]
 8022846:	4a91      	ldr	r2, [pc, #580]	; (8022a8c <_strtod_l+0x29c>)
 8022848:	ab13      	add	r3, sp, #76	; 0x4c
 802284a:	a911      	add	r1, sp, #68	; 0x44
 802284c:	4620      	mov	r0, r4
 802284e:	f001 fa61 	bl	8023d14 <__gethex>
 8022852:	f010 070f 	ands.w	r7, r0, #15
 8022856:	4605      	mov	r5, r0
 8022858:	d005      	beq.n	8022866 <_strtod_l+0x76>
 802285a:	2f06      	cmp	r7, #6
 802285c:	d12a      	bne.n	80228b4 <_strtod_l+0xc4>
 802285e:	3601      	adds	r6, #1
 8022860:	2300      	movs	r3, #0
 8022862:	9611      	str	r6, [sp, #68]	; 0x44
 8022864:	9308      	str	r3, [sp, #32]
 8022866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022868:	2b00      	cmp	r3, #0
 802286a:	f040 8555 	bne.w	8023318 <_strtod_l+0xb28>
 802286e:	9b08      	ldr	r3, [sp, #32]
 8022870:	ec49 8b10 	vmov	d0, r8, r9
 8022874:	b1cb      	cbz	r3, 80228aa <_strtod_l+0xba>
 8022876:	eeb1 0b40 	vneg.f64	d0, d0
 802287a:	b017      	add	sp, #92	; 0x5c
 802287c:	ecbd 8b0e 	vpop	{d8-d14}
 8022880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022884:	2920      	cmp	r1, #32
 8022886:	d1cd      	bne.n	8022824 <_strtod_l+0x34>
 8022888:	3201      	adds	r2, #1
 802288a:	e7c0      	b.n	802280e <_strtod_l+0x1e>
 802288c:	292d      	cmp	r1, #45	; 0x2d
 802288e:	d1c9      	bne.n	8022824 <_strtod_l+0x34>
 8022890:	2101      	movs	r1, #1
 8022892:	9108      	str	r1, [sp, #32]
 8022894:	1c51      	adds	r1, r2, #1
 8022896:	9111      	str	r1, [sp, #68]	; 0x44
 8022898:	7852      	ldrb	r2, [r2, #1]
 802289a:	2a00      	cmp	r2, #0
 802289c:	d1c4      	bne.n	8022828 <_strtod_l+0x38>
 802289e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228a0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	f040 8535 	bne.w	8023314 <_strtod_l+0xb24>
 80228aa:	ec49 8b10 	vmov	d0, r8, r9
 80228ae:	e7e4      	b.n	802287a <_strtod_l+0x8a>
 80228b0:	2100      	movs	r1, #0
 80228b2:	e7ee      	b.n	8022892 <_strtod_l+0xa2>
 80228b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80228b6:	b13a      	cbz	r2, 80228c8 <_strtod_l+0xd8>
 80228b8:	2135      	movs	r1, #53	; 0x35
 80228ba:	a814      	add	r0, sp, #80	; 0x50
 80228bc:	f7ff ff32 	bl	8022724 <__copybits>
 80228c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80228c2:	4620      	mov	r0, r4
 80228c4:	f7ff fb08 	bl	8021ed8 <_Bfree>
 80228c8:	1e7b      	subs	r3, r7, #1
 80228ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80228cc:	2b04      	cmp	r3, #4
 80228ce:	d806      	bhi.n	80228de <_strtod_l+0xee>
 80228d0:	e8df f003 	tbb	[pc, r3]
 80228d4:	201d0314 	.word	0x201d0314
 80228d8:	14          	.byte	0x14
 80228d9:	00          	.byte	0x00
 80228da:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80228de:	05eb      	lsls	r3, r5, #23
 80228e0:	bf48      	it	mi
 80228e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80228e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80228ea:	0d1b      	lsrs	r3, r3, #20
 80228ec:	051b      	lsls	r3, r3, #20
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d1b9      	bne.n	8022866 <_strtod_l+0x76>
 80228f2:	f7fe fbfb 	bl	80210ec <__errno>
 80228f6:	2322      	movs	r3, #34	; 0x22
 80228f8:	6003      	str	r3, [r0, #0]
 80228fa:	e7b4      	b.n	8022866 <_strtod_l+0x76>
 80228fc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8022900:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8022904:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022908:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802290c:	e7e7      	b.n	80228de <_strtod_l+0xee>
 802290e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8022a94 <_strtod_l+0x2a4>
 8022912:	e7e4      	b.n	80228de <_strtod_l+0xee>
 8022914:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8022918:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802291c:	e7df      	b.n	80228de <_strtod_l+0xee>
 802291e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022920:	1c5a      	adds	r2, r3, #1
 8022922:	9211      	str	r2, [sp, #68]	; 0x44
 8022924:	785b      	ldrb	r3, [r3, #1]
 8022926:	2b30      	cmp	r3, #48	; 0x30
 8022928:	d0f9      	beq.n	802291e <_strtod_l+0x12e>
 802292a:	2b00      	cmp	r3, #0
 802292c:	d09b      	beq.n	8022866 <_strtod_l+0x76>
 802292e:	2301      	movs	r3, #1
 8022930:	9306      	str	r3, [sp, #24]
 8022932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022934:	9309      	str	r3, [sp, #36]	; 0x24
 8022936:	2300      	movs	r3, #0
 8022938:	9305      	str	r3, [sp, #20]
 802293a:	9307      	str	r3, [sp, #28]
 802293c:	461e      	mov	r6, r3
 802293e:	220a      	movs	r2, #10
 8022940:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022942:	7805      	ldrb	r5, [r0, #0]
 8022944:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8022948:	b2d9      	uxtb	r1, r3
 802294a:	2909      	cmp	r1, #9
 802294c:	d92b      	bls.n	80229a6 <_strtod_l+0x1b6>
 802294e:	4950      	ldr	r1, [pc, #320]	; (8022a90 <_strtod_l+0x2a0>)
 8022950:	2201      	movs	r2, #1
 8022952:	f7fe fb48 	bl	8020fe6 <strncmp>
 8022956:	2800      	cmp	r0, #0
 8022958:	d035      	beq.n	80229c6 <_strtod_l+0x1d6>
 802295a:	2000      	movs	r0, #0
 802295c:	462a      	mov	r2, r5
 802295e:	4633      	mov	r3, r6
 8022960:	4683      	mov	fp, r0
 8022962:	4601      	mov	r1, r0
 8022964:	2a65      	cmp	r2, #101	; 0x65
 8022966:	d001      	beq.n	802296c <_strtod_l+0x17c>
 8022968:	2a45      	cmp	r2, #69	; 0x45
 802296a:	d118      	bne.n	802299e <_strtod_l+0x1ae>
 802296c:	b91b      	cbnz	r3, 8022976 <_strtod_l+0x186>
 802296e:	9b06      	ldr	r3, [sp, #24]
 8022970:	4303      	orrs	r3, r0
 8022972:	d094      	beq.n	802289e <_strtod_l+0xae>
 8022974:	2300      	movs	r3, #0
 8022976:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 802297a:	f10a 0201 	add.w	r2, sl, #1
 802297e:	9211      	str	r2, [sp, #68]	; 0x44
 8022980:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022984:	2a2b      	cmp	r2, #43	; 0x2b
 8022986:	d075      	beq.n	8022a74 <_strtod_l+0x284>
 8022988:	2a2d      	cmp	r2, #45	; 0x2d
 802298a:	d07b      	beq.n	8022a84 <_strtod_l+0x294>
 802298c:	f04f 0e00 	mov.w	lr, #0
 8022990:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8022994:	2d09      	cmp	r5, #9
 8022996:	f240 8083 	bls.w	8022aa0 <_strtod_l+0x2b0>
 802299a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 802299e:	2500      	movs	r5, #0
 80229a0:	e09e      	b.n	8022ae0 <_strtod_l+0x2f0>
 80229a2:	2300      	movs	r3, #0
 80229a4:	e7c4      	b.n	8022930 <_strtod_l+0x140>
 80229a6:	2e08      	cmp	r6, #8
 80229a8:	bfd5      	itete	le
 80229aa:	9907      	ldrle	r1, [sp, #28]
 80229ac:	9905      	ldrgt	r1, [sp, #20]
 80229ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80229b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80229b6:	f100 0001 	add.w	r0, r0, #1
 80229ba:	bfd4      	ite	le
 80229bc:	9307      	strle	r3, [sp, #28]
 80229be:	9305      	strgt	r3, [sp, #20]
 80229c0:	3601      	adds	r6, #1
 80229c2:	9011      	str	r0, [sp, #68]	; 0x44
 80229c4:	e7bc      	b.n	8022940 <_strtod_l+0x150>
 80229c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229c8:	1c5a      	adds	r2, r3, #1
 80229ca:	9211      	str	r2, [sp, #68]	; 0x44
 80229cc:	785a      	ldrb	r2, [r3, #1]
 80229ce:	b3ae      	cbz	r6, 8022a3c <_strtod_l+0x24c>
 80229d0:	4683      	mov	fp, r0
 80229d2:	4633      	mov	r3, r6
 80229d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80229d8:	2909      	cmp	r1, #9
 80229da:	d912      	bls.n	8022a02 <_strtod_l+0x212>
 80229dc:	2101      	movs	r1, #1
 80229de:	e7c1      	b.n	8022964 <_strtod_l+0x174>
 80229e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229e2:	1c5a      	adds	r2, r3, #1
 80229e4:	9211      	str	r2, [sp, #68]	; 0x44
 80229e6:	785a      	ldrb	r2, [r3, #1]
 80229e8:	3001      	adds	r0, #1
 80229ea:	2a30      	cmp	r2, #48	; 0x30
 80229ec:	d0f8      	beq.n	80229e0 <_strtod_l+0x1f0>
 80229ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80229f2:	2b08      	cmp	r3, #8
 80229f4:	f200 8495 	bhi.w	8023322 <_strtod_l+0xb32>
 80229f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229fa:	9309      	str	r3, [sp, #36]	; 0x24
 80229fc:	4683      	mov	fp, r0
 80229fe:	2000      	movs	r0, #0
 8022a00:	4603      	mov	r3, r0
 8022a02:	3a30      	subs	r2, #48	; 0x30
 8022a04:	f100 0101 	add.w	r1, r0, #1
 8022a08:	d012      	beq.n	8022a30 <_strtod_l+0x240>
 8022a0a:	448b      	add	fp, r1
 8022a0c:	eb00 0c03 	add.w	ip, r0, r3
 8022a10:	4619      	mov	r1, r3
 8022a12:	250a      	movs	r5, #10
 8022a14:	4561      	cmp	r1, ip
 8022a16:	d113      	bne.n	8022a40 <_strtod_l+0x250>
 8022a18:	1819      	adds	r1, r3, r0
 8022a1a:	2908      	cmp	r1, #8
 8022a1c:	f103 0301 	add.w	r3, r3, #1
 8022a20:	4403      	add	r3, r0
 8022a22:	dc1b      	bgt.n	8022a5c <_strtod_l+0x26c>
 8022a24:	9807      	ldr	r0, [sp, #28]
 8022a26:	210a      	movs	r1, #10
 8022a28:	fb01 2200 	mla	r2, r1, r0, r2
 8022a2c:	9207      	str	r2, [sp, #28]
 8022a2e:	2100      	movs	r1, #0
 8022a30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a32:	1c50      	adds	r0, r2, #1
 8022a34:	9011      	str	r0, [sp, #68]	; 0x44
 8022a36:	7852      	ldrb	r2, [r2, #1]
 8022a38:	4608      	mov	r0, r1
 8022a3a:	e7cb      	b.n	80229d4 <_strtod_l+0x1e4>
 8022a3c:	4630      	mov	r0, r6
 8022a3e:	e7d4      	b.n	80229ea <_strtod_l+0x1fa>
 8022a40:	2908      	cmp	r1, #8
 8022a42:	f101 0101 	add.w	r1, r1, #1
 8022a46:	dc03      	bgt.n	8022a50 <_strtod_l+0x260>
 8022a48:	9f07      	ldr	r7, [sp, #28]
 8022a4a:	436f      	muls	r7, r5
 8022a4c:	9707      	str	r7, [sp, #28]
 8022a4e:	e7e1      	b.n	8022a14 <_strtod_l+0x224>
 8022a50:	2910      	cmp	r1, #16
 8022a52:	bfde      	ittt	le
 8022a54:	9f05      	ldrle	r7, [sp, #20]
 8022a56:	436f      	mulle	r7, r5
 8022a58:	9705      	strle	r7, [sp, #20]
 8022a5a:	e7db      	b.n	8022a14 <_strtod_l+0x224>
 8022a5c:	2b10      	cmp	r3, #16
 8022a5e:	bfdf      	itttt	le
 8022a60:	9805      	ldrle	r0, [sp, #20]
 8022a62:	210a      	movle	r1, #10
 8022a64:	fb01 2200 	mlale	r2, r1, r0, r2
 8022a68:	9205      	strle	r2, [sp, #20]
 8022a6a:	e7e0      	b.n	8022a2e <_strtod_l+0x23e>
 8022a6c:	f04f 0b00 	mov.w	fp, #0
 8022a70:	2101      	movs	r1, #1
 8022a72:	e77c      	b.n	802296e <_strtod_l+0x17e>
 8022a74:	f04f 0e00 	mov.w	lr, #0
 8022a78:	f10a 0202 	add.w	r2, sl, #2
 8022a7c:	9211      	str	r2, [sp, #68]	; 0x44
 8022a7e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8022a82:	e785      	b.n	8022990 <_strtod_l+0x1a0>
 8022a84:	f04f 0e01 	mov.w	lr, #1
 8022a88:	e7f6      	b.n	8022a78 <_strtod_l+0x288>
 8022a8a:	bf00      	nop
 8022a8c:	080260b0 	.word	0x080260b0
 8022a90:	080260ac 	.word	0x080260ac
 8022a94:	7ff00000 	.word	0x7ff00000
 8022a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a9a:	1c55      	adds	r5, r2, #1
 8022a9c:	9511      	str	r5, [sp, #68]	; 0x44
 8022a9e:	7852      	ldrb	r2, [r2, #1]
 8022aa0:	2a30      	cmp	r2, #48	; 0x30
 8022aa2:	d0f9      	beq.n	8022a98 <_strtod_l+0x2a8>
 8022aa4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8022aa8:	2d08      	cmp	r5, #8
 8022aaa:	f63f af78 	bhi.w	802299e <_strtod_l+0x1ae>
 8022aae:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8022ab2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8022ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022ab8:	1c55      	adds	r5, r2, #1
 8022aba:	9511      	str	r5, [sp, #68]	; 0x44
 8022abc:	7852      	ldrb	r2, [r2, #1]
 8022abe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8022ac2:	2f09      	cmp	r7, #9
 8022ac4:	d937      	bls.n	8022b36 <_strtod_l+0x346>
 8022ac6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022ac8:	1bed      	subs	r5, r5, r7
 8022aca:	2d08      	cmp	r5, #8
 8022acc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8022ad0:	dc02      	bgt.n	8022ad8 <_strtod_l+0x2e8>
 8022ad2:	4565      	cmp	r5, ip
 8022ad4:	bfa8      	it	ge
 8022ad6:	4665      	movge	r5, ip
 8022ad8:	f1be 0f00 	cmp.w	lr, #0
 8022adc:	d000      	beq.n	8022ae0 <_strtod_l+0x2f0>
 8022ade:	426d      	negs	r5, r5
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d14d      	bne.n	8022b80 <_strtod_l+0x390>
 8022ae4:	9b06      	ldr	r3, [sp, #24]
 8022ae6:	4303      	orrs	r3, r0
 8022ae8:	f47f aebd 	bne.w	8022866 <_strtod_l+0x76>
 8022aec:	2900      	cmp	r1, #0
 8022aee:	f47f aed6 	bne.w	802289e <_strtod_l+0xae>
 8022af2:	2a69      	cmp	r2, #105	; 0x69
 8022af4:	d027      	beq.n	8022b46 <_strtod_l+0x356>
 8022af6:	dc24      	bgt.n	8022b42 <_strtod_l+0x352>
 8022af8:	2a49      	cmp	r2, #73	; 0x49
 8022afa:	d024      	beq.n	8022b46 <_strtod_l+0x356>
 8022afc:	2a4e      	cmp	r2, #78	; 0x4e
 8022afe:	f47f aece 	bne.w	802289e <_strtod_l+0xae>
 8022b02:	4995      	ldr	r1, [pc, #596]	; (8022d58 <_strtod_l+0x568>)
 8022b04:	a811      	add	r0, sp, #68	; 0x44
 8022b06:	f001 fb45 	bl	8024194 <__match>
 8022b0a:	2800      	cmp	r0, #0
 8022b0c:	f43f aec7 	beq.w	802289e <_strtod_l+0xae>
 8022b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b12:	781b      	ldrb	r3, [r3, #0]
 8022b14:	2b28      	cmp	r3, #40	; 0x28
 8022b16:	d12d      	bne.n	8022b74 <_strtod_l+0x384>
 8022b18:	4990      	ldr	r1, [pc, #576]	; (8022d5c <_strtod_l+0x56c>)
 8022b1a:	aa14      	add	r2, sp, #80	; 0x50
 8022b1c:	a811      	add	r0, sp, #68	; 0x44
 8022b1e:	f001 fb4d 	bl	80241bc <__hexnan>
 8022b22:	2805      	cmp	r0, #5
 8022b24:	d126      	bne.n	8022b74 <_strtod_l+0x384>
 8022b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022b28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8022b2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8022b30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8022b34:	e697      	b.n	8022866 <_strtod_l+0x76>
 8022b36:	250a      	movs	r5, #10
 8022b38:	fb05 2c0c 	mla	ip, r5, ip, r2
 8022b3c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8022b40:	e7b9      	b.n	8022ab6 <_strtod_l+0x2c6>
 8022b42:	2a6e      	cmp	r2, #110	; 0x6e
 8022b44:	e7db      	b.n	8022afe <_strtod_l+0x30e>
 8022b46:	4986      	ldr	r1, [pc, #536]	; (8022d60 <_strtod_l+0x570>)
 8022b48:	a811      	add	r0, sp, #68	; 0x44
 8022b4a:	f001 fb23 	bl	8024194 <__match>
 8022b4e:	2800      	cmp	r0, #0
 8022b50:	f43f aea5 	beq.w	802289e <_strtod_l+0xae>
 8022b54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b56:	4983      	ldr	r1, [pc, #524]	; (8022d64 <_strtod_l+0x574>)
 8022b58:	3b01      	subs	r3, #1
 8022b5a:	a811      	add	r0, sp, #68	; 0x44
 8022b5c:	9311      	str	r3, [sp, #68]	; 0x44
 8022b5e:	f001 fb19 	bl	8024194 <__match>
 8022b62:	b910      	cbnz	r0, 8022b6a <_strtod_l+0x37a>
 8022b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b66:	3301      	adds	r3, #1
 8022b68:	9311      	str	r3, [sp, #68]	; 0x44
 8022b6a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8022d78 <_strtod_l+0x588>
 8022b6e:	f04f 0800 	mov.w	r8, #0
 8022b72:	e678      	b.n	8022866 <_strtod_l+0x76>
 8022b74:	487c      	ldr	r0, [pc, #496]	; (8022d68 <_strtod_l+0x578>)
 8022b76:	f001 f857 	bl	8023c28 <nan>
 8022b7a:	ec59 8b10 	vmov	r8, r9, d0
 8022b7e:	e672      	b.n	8022866 <_strtod_l+0x76>
 8022b80:	eddd 7a07 	vldr	s15, [sp, #28]
 8022b84:	eba5 020b 	sub.w	r2, r5, fp
 8022b88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022b8c:	2e00      	cmp	r6, #0
 8022b8e:	bf08      	it	eq
 8022b90:	461e      	moveq	r6, r3
 8022b92:	2b10      	cmp	r3, #16
 8022b94:	9206      	str	r2, [sp, #24]
 8022b96:	461a      	mov	r2, r3
 8022b98:	bfa8      	it	ge
 8022b9a:	2210      	movge	r2, #16
 8022b9c:	2b09      	cmp	r3, #9
 8022b9e:	ec59 8b17 	vmov	r8, r9, d7
 8022ba2:	dd0c      	ble.n	8022bbe <_strtod_l+0x3ce>
 8022ba4:	4971      	ldr	r1, [pc, #452]	; (8022d6c <_strtod_l+0x57c>)
 8022ba6:	eddd 6a05 	vldr	s13, [sp, #20]
 8022baa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8022bae:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8022bb2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8022bb6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022bba:	ec59 8b16 	vmov	r8, r9, d6
 8022bbe:	2b0f      	cmp	r3, #15
 8022bc0:	dc37      	bgt.n	8022c32 <_strtod_l+0x442>
 8022bc2:	9906      	ldr	r1, [sp, #24]
 8022bc4:	2900      	cmp	r1, #0
 8022bc6:	f43f ae4e 	beq.w	8022866 <_strtod_l+0x76>
 8022bca:	dd23      	ble.n	8022c14 <_strtod_l+0x424>
 8022bcc:	2916      	cmp	r1, #22
 8022bce:	dc0b      	bgt.n	8022be8 <_strtod_l+0x3f8>
 8022bd0:	4b66      	ldr	r3, [pc, #408]	; (8022d6c <_strtod_l+0x57c>)
 8022bd2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8022bd6:	ed93 7b00 	vldr	d7, [r3]
 8022bda:	ec49 8b16 	vmov	d6, r8, r9
 8022bde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022be2:	ec59 8b17 	vmov	r8, r9, d7
 8022be6:	e63e      	b.n	8022866 <_strtod_l+0x76>
 8022be8:	9806      	ldr	r0, [sp, #24]
 8022bea:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8022bee:	4281      	cmp	r1, r0
 8022bf0:	db1f      	blt.n	8022c32 <_strtod_l+0x442>
 8022bf2:	4a5e      	ldr	r2, [pc, #376]	; (8022d6c <_strtod_l+0x57c>)
 8022bf4:	f1c3 030f 	rsb	r3, r3, #15
 8022bf8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8022bfc:	ed91 7b00 	vldr	d7, [r1]
 8022c00:	ec49 8b16 	vmov	d6, r8, r9
 8022c04:	1ac3      	subs	r3, r0, r3
 8022c06:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022c0e:	ed92 6b00 	vldr	d6, [r2]
 8022c12:	e7e4      	b.n	8022bde <_strtod_l+0x3ee>
 8022c14:	9906      	ldr	r1, [sp, #24]
 8022c16:	3116      	adds	r1, #22
 8022c18:	db0b      	blt.n	8022c32 <_strtod_l+0x442>
 8022c1a:	4b54      	ldr	r3, [pc, #336]	; (8022d6c <_strtod_l+0x57c>)
 8022c1c:	ebab 0505 	sub.w	r5, fp, r5
 8022c20:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8022c24:	ed95 7b00 	vldr	d7, [r5]
 8022c28:	ec49 8b16 	vmov	d6, r8, r9
 8022c2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022c30:	e7d7      	b.n	8022be2 <_strtod_l+0x3f2>
 8022c32:	9906      	ldr	r1, [sp, #24]
 8022c34:	1a9a      	subs	r2, r3, r2
 8022c36:	440a      	add	r2, r1
 8022c38:	2a00      	cmp	r2, #0
 8022c3a:	dd6e      	ble.n	8022d1a <_strtod_l+0x52a>
 8022c3c:	f012 000f 	ands.w	r0, r2, #15
 8022c40:	d00a      	beq.n	8022c58 <_strtod_l+0x468>
 8022c42:	494a      	ldr	r1, [pc, #296]	; (8022d6c <_strtod_l+0x57c>)
 8022c44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022c48:	ed91 7b00 	vldr	d7, [r1]
 8022c4c:	ec49 8b16 	vmov	d6, r8, r9
 8022c50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022c54:	ec59 8b17 	vmov	r8, r9, d7
 8022c58:	f032 020f 	bics.w	r2, r2, #15
 8022c5c:	d04e      	beq.n	8022cfc <_strtod_l+0x50c>
 8022c5e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8022c62:	dd22      	ble.n	8022caa <_strtod_l+0x4ba>
 8022c64:	2500      	movs	r5, #0
 8022c66:	462e      	mov	r6, r5
 8022c68:	9507      	str	r5, [sp, #28]
 8022c6a:	462f      	mov	r7, r5
 8022c6c:	2322      	movs	r3, #34	; 0x22
 8022c6e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8022d78 <_strtod_l+0x588>
 8022c72:	6023      	str	r3, [r4, #0]
 8022c74:	f04f 0800 	mov.w	r8, #0
 8022c78:	9b07      	ldr	r3, [sp, #28]
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	f43f adf3 	beq.w	8022866 <_strtod_l+0x76>
 8022c80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022c82:	4620      	mov	r0, r4
 8022c84:	f7ff f928 	bl	8021ed8 <_Bfree>
 8022c88:	4639      	mov	r1, r7
 8022c8a:	4620      	mov	r0, r4
 8022c8c:	f7ff f924 	bl	8021ed8 <_Bfree>
 8022c90:	4631      	mov	r1, r6
 8022c92:	4620      	mov	r0, r4
 8022c94:	f7ff f920 	bl	8021ed8 <_Bfree>
 8022c98:	9907      	ldr	r1, [sp, #28]
 8022c9a:	4620      	mov	r0, r4
 8022c9c:	f7ff f91c 	bl	8021ed8 <_Bfree>
 8022ca0:	4629      	mov	r1, r5
 8022ca2:	4620      	mov	r0, r4
 8022ca4:	f7ff f918 	bl	8021ed8 <_Bfree>
 8022ca8:	e5dd      	b.n	8022866 <_strtod_l+0x76>
 8022caa:	2000      	movs	r0, #0
 8022cac:	ec49 8b17 	vmov	d7, r8, r9
 8022cb0:	4f2f      	ldr	r7, [pc, #188]	; (8022d70 <_strtod_l+0x580>)
 8022cb2:	1112      	asrs	r2, r2, #4
 8022cb4:	4601      	mov	r1, r0
 8022cb6:	2a01      	cmp	r2, #1
 8022cb8:	dc23      	bgt.n	8022d02 <_strtod_l+0x512>
 8022cba:	b108      	cbz	r0, 8022cc0 <_strtod_l+0x4d0>
 8022cbc:	ec59 8b17 	vmov	r8, r9, d7
 8022cc0:	4a2b      	ldr	r2, [pc, #172]	; (8022d70 <_strtod_l+0x580>)
 8022cc2:	482c      	ldr	r0, [pc, #176]	; (8022d74 <_strtod_l+0x584>)
 8022cc4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8022cc8:	ed92 7b00 	vldr	d7, [r2]
 8022ccc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022cd0:	ec49 8b16 	vmov	d6, r8, r9
 8022cd4:	4a28      	ldr	r2, [pc, #160]	; (8022d78 <_strtod_l+0x588>)
 8022cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022cda:	ee17 1a90 	vmov	r1, s15
 8022cde:	400a      	ands	r2, r1
 8022ce0:	4282      	cmp	r2, r0
 8022ce2:	ec59 8b17 	vmov	r8, r9, d7
 8022ce6:	d8bd      	bhi.n	8022c64 <_strtod_l+0x474>
 8022ce8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8022cec:	4282      	cmp	r2, r0
 8022cee:	bf86      	itte	hi
 8022cf0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8022d7c <_strtod_l+0x58c>
 8022cf4:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022cf8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	9205      	str	r2, [sp, #20]
 8022d00:	e076      	b.n	8022df0 <_strtod_l+0x600>
 8022d02:	f012 0f01 	tst.w	r2, #1
 8022d06:	d004      	beq.n	8022d12 <_strtod_l+0x522>
 8022d08:	ed97 6b00 	vldr	d6, [r7]
 8022d0c:	2001      	movs	r0, #1
 8022d0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022d12:	3101      	adds	r1, #1
 8022d14:	1052      	asrs	r2, r2, #1
 8022d16:	3708      	adds	r7, #8
 8022d18:	e7cd      	b.n	8022cb6 <_strtod_l+0x4c6>
 8022d1a:	d0ef      	beq.n	8022cfc <_strtod_l+0x50c>
 8022d1c:	4252      	negs	r2, r2
 8022d1e:	f012 000f 	ands.w	r0, r2, #15
 8022d22:	d00a      	beq.n	8022d3a <_strtod_l+0x54a>
 8022d24:	4911      	ldr	r1, [pc, #68]	; (8022d6c <_strtod_l+0x57c>)
 8022d26:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022d2a:	ed91 7b00 	vldr	d7, [r1]
 8022d2e:	ec49 8b16 	vmov	d6, r8, r9
 8022d32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022d36:	ec59 8b17 	vmov	r8, r9, d7
 8022d3a:	1112      	asrs	r2, r2, #4
 8022d3c:	d0de      	beq.n	8022cfc <_strtod_l+0x50c>
 8022d3e:	2a1f      	cmp	r2, #31
 8022d40:	dd1e      	ble.n	8022d80 <_strtod_l+0x590>
 8022d42:	2500      	movs	r5, #0
 8022d44:	462e      	mov	r6, r5
 8022d46:	9507      	str	r5, [sp, #28]
 8022d48:	462f      	mov	r7, r5
 8022d4a:	2322      	movs	r3, #34	; 0x22
 8022d4c:	f04f 0800 	mov.w	r8, #0
 8022d50:	f04f 0900 	mov.w	r9, #0
 8022d54:	6023      	str	r3, [r4, #0]
 8022d56:	e78f      	b.n	8022c78 <_strtod_l+0x488>
 8022d58:	08025e79 	.word	0x08025e79
 8022d5c:	080260c4 	.word	0x080260c4
 8022d60:	08025e71 	.word	0x08025e71
 8022d64:	08025ee4 	.word	0x08025ee4
 8022d68:	08025ee0 	.word	0x08025ee0
 8022d6c:	08025fd8 	.word	0x08025fd8
 8022d70:	08025fb0 	.word	0x08025fb0
 8022d74:	7ca00000 	.word	0x7ca00000
 8022d78:	7ff00000 	.word	0x7ff00000
 8022d7c:	7fefffff 	.word	0x7fefffff
 8022d80:	f012 0110 	ands.w	r1, r2, #16
 8022d84:	bf18      	it	ne
 8022d86:	216a      	movne	r1, #106	; 0x6a
 8022d88:	9105      	str	r1, [sp, #20]
 8022d8a:	ec49 8b17 	vmov	d7, r8, r9
 8022d8e:	49be      	ldr	r1, [pc, #760]	; (8023088 <_strtod_l+0x898>)
 8022d90:	2000      	movs	r0, #0
 8022d92:	07d7      	lsls	r7, r2, #31
 8022d94:	d504      	bpl.n	8022da0 <_strtod_l+0x5b0>
 8022d96:	ed91 6b00 	vldr	d6, [r1]
 8022d9a:	2001      	movs	r0, #1
 8022d9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022da0:	1052      	asrs	r2, r2, #1
 8022da2:	f101 0108 	add.w	r1, r1, #8
 8022da6:	d1f4      	bne.n	8022d92 <_strtod_l+0x5a2>
 8022da8:	b108      	cbz	r0, 8022dae <_strtod_l+0x5be>
 8022daa:	ec59 8b17 	vmov	r8, r9, d7
 8022dae:	9a05      	ldr	r2, [sp, #20]
 8022db0:	b1ba      	cbz	r2, 8022de2 <_strtod_l+0x5f2>
 8022db2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022db6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8022dba:	2a00      	cmp	r2, #0
 8022dbc:	4648      	mov	r0, r9
 8022dbe:	dd10      	ble.n	8022de2 <_strtod_l+0x5f2>
 8022dc0:	2a1f      	cmp	r2, #31
 8022dc2:	f340 812c 	ble.w	802301e <_strtod_l+0x82e>
 8022dc6:	2a34      	cmp	r2, #52	; 0x34
 8022dc8:	bfde      	ittt	le
 8022dca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8022dce:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022dd2:	408a      	lslle	r2, r1
 8022dd4:	f04f 0800 	mov.w	r8, #0
 8022dd8:	bfcc      	ite	gt
 8022dda:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8022dde:	ea02 0900 	andle.w	r9, r2, r0
 8022de2:	ec49 8b17 	vmov	d7, r8, r9
 8022de6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022dee:	d0a8      	beq.n	8022d42 <_strtod_l+0x552>
 8022df0:	9a07      	ldr	r2, [sp, #28]
 8022df2:	9200      	str	r2, [sp, #0]
 8022df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022df6:	4632      	mov	r2, r6
 8022df8:	4620      	mov	r0, r4
 8022dfa:	f7ff f8d5 	bl	8021fa8 <__s2b>
 8022dfe:	9007      	str	r0, [sp, #28]
 8022e00:	2800      	cmp	r0, #0
 8022e02:	f43f af2f 	beq.w	8022c64 <_strtod_l+0x474>
 8022e06:	9a06      	ldr	r2, [sp, #24]
 8022e08:	2a00      	cmp	r2, #0
 8022e0a:	ebab 0305 	sub.w	r3, fp, r5
 8022e0e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8023068 <_strtod_l+0x878>
 8022e12:	bfa8      	it	ge
 8022e14:	2300      	movge	r3, #0
 8022e16:	ed9f ab96 	vldr	d10, [pc, #600]	; 8023070 <_strtod_l+0x880>
 8022e1a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8023078 <_strtod_l+0x888>
 8022e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8022e20:	2500      	movs	r5, #0
 8022e22:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022e26:	930c      	str	r3, [sp, #48]	; 0x30
 8022e28:	462e      	mov	r6, r5
 8022e2a:	9b07      	ldr	r3, [sp, #28]
 8022e2c:	4620      	mov	r0, r4
 8022e2e:	6859      	ldr	r1, [r3, #4]
 8022e30:	f7ff f812 	bl	8021e58 <_Balloc>
 8022e34:	4607      	mov	r7, r0
 8022e36:	2800      	cmp	r0, #0
 8022e38:	f43f af18 	beq.w	8022c6c <_strtod_l+0x47c>
 8022e3c:	9b07      	ldr	r3, [sp, #28]
 8022e3e:	691a      	ldr	r2, [r3, #16]
 8022e40:	3202      	adds	r2, #2
 8022e42:	f103 010c 	add.w	r1, r3, #12
 8022e46:	0092      	lsls	r2, r2, #2
 8022e48:	300c      	adds	r0, #12
 8022e4a:	f7fe f984 	bl	8021156 <memcpy>
 8022e4e:	ec49 8b10 	vmov	d0, r8, r9
 8022e52:	aa14      	add	r2, sp, #80	; 0x50
 8022e54:	a913      	add	r1, sp, #76	; 0x4c
 8022e56:	4620      	mov	r0, r4
 8022e58:	f7ff fbda 	bl	8022610 <__d2b>
 8022e5c:	ec49 8b18 	vmov	d8, r8, r9
 8022e60:	9012      	str	r0, [sp, #72]	; 0x48
 8022e62:	2800      	cmp	r0, #0
 8022e64:	f43f af02 	beq.w	8022c6c <_strtod_l+0x47c>
 8022e68:	2101      	movs	r1, #1
 8022e6a:	4620      	mov	r0, r4
 8022e6c:	f7ff f934 	bl	80220d8 <__i2b>
 8022e70:	4606      	mov	r6, r0
 8022e72:	2800      	cmp	r0, #0
 8022e74:	f43f aefa 	beq.w	8022c6c <_strtod_l+0x47c>
 8022e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022e7a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	bfab      	itete	ge
 8022e80:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8022e82:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8022e84:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8022e88:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8022e8c:	bfac      	ite	ge
 8022e8e:	eb03 0b02 	addge.w	fp, r3, r2
 8022e92:	eba2 0a03 	sublt.w	sl, r2, r3
 8022e96:	9a05      	ldr	r2, [sp, #20]
 8022e98:	1a9b      	subs	r3, r3, r2
 8022e9a:	440b      	add	r3, r1
 8022e9c:	4a7b      	ldr	r2, [pc, #492]	; (802308c <_strtod_l+0x89c>)
 8022e9e:	3b01      	subs	r3, #1
 8022ea0:	4293      	cmp	r3, r2
 8022ea2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8022ea6:	f280 80cd 	bge.w	8023044 <_strtod_l+0x854>
 8022eaa:	1ad2      	subs	r2, r2, r3
 8022eac:	2a1f      	cmp	r2, #31
 8022eae:	eba1 0102 	sub.w	r1, r1, r2
 8022eb2:	f04f 0001 	mov.w	r0, #1
 8022eb6:	f300 80b9 	bgt.w	802302c <_strtod_l+0x83c>
 8022eba:	fa00 f302 	lsl.w	r3, r0, r2
 8022ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ec0:	2300      	movs	r3, #0
 8022ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8022ec4:	eb0b 0301 	add.w	r3, fp, r1
 8022ec8:	9a05      	ldr	r2, [sp, #20]
 8022eca:	459b      	cmp	fp, r3
 8022ecc:	448a      	add	sl, r1
 8022ece:	4492      	add	sl, r2
 8022ed0:	465a      	mov	r2, fp
 8022ed2:	bfa8      	it	ge
 8022ed4:	461a      	movge	r2, r3
 8022ed6:	4552      	cmp	r2, sl
 8022ed8:	bfa8      	it	ge
 8022eda:	4652      	movge	r2, sl
 8022edc:	2a00      	cmp	r2, #0
 8022ede:	bfc2      	ittt	gt
 8022ee0:	1a9b      	subgt	r3, r3, r2
 8022ee2:	ebaa 0a02 	subgt.w	sl, sl, r2
 8022ee6:	ebab 0b02 	subgt.w	fp, fp, r2
 8022eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022eec:	2a00      	cmp	r2, #0
 8022eee:	dd18      	ble.n	8022f22 <_strtod_l+0x732>
 8022ef0:	4631      	mov	r1, r6
 8022ef2:	4620      	mov	r0, r4
 8022ef4:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ef6:	f7ff f9af 	bl	8022258 <__pow5mult>
 8022efa:	4606      	mov	r6, r0
 8022efc:	2800      	cmp	r0, #0
 8022efe:	f43f aeb5 	beq.w	8022c6c <_strtod_l+0x47c>
 8022f02:	4601      	mov	r1, r0
 8022f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022f06:	4620      	mov	r0, r4
 8022f08:	f7ff f8fc 	bl	8022104 <__multiply>
 8022f0c:	900e      	str	r0, [sp, #56]	; 0x38
 8022f0e:	2800      	cmp	r0, #0
 8022f10:	f43f aeac 	beq.w	8022c6c <_strtod_l+0x47c>
 8022f14:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022f16:	4620      	mov	r0, r4
 8022f18:	f7fe ffde 	bl	8021ed8 <_Bfree>
 8022f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022f20:	9212      	str	r2, [sp, #72]	; 0x48
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	f300 8093 	bgt.w	802304e <_strtod_l+0x85e>
 8022f28:	9b06      	ldr	r3, [sp, #24]
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	dd08      	ble.n	8022f40 <_strtod_l+0x750>
 8022f2e:	4639      	mov	r1, r7
 8022f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f32:	4620      	mov	r0, r4
 8022f34:	f7ff f990 	bl	8022258 <__pow5mult>
 8022f38:	4607      	mov	r7, r0
 8022f3a:	2800      	cmp	r0, #0
 8022f3c:	f43f ae96 	beq.w	8022c6c <_strtod_l+0x47c>
 8022f40:	f1ba 0f00 	cmp.w	sl, #0
 8022f44:	dd08      	ble.n	8022f58 <_strtod_l+0x768>
 8022f46:	4639      	mov	r1, r7
 8022f48:	4652      	mov	r2, sl
 8022f4a:	4620      	mov	r0, r4
 8022f4c:	f7ff f9de 	bl	802230c <__lshift>
 8022f50:	4607      	mov	r7, r0
 8022f52:	2800      	cmp	r0, #0
 8022f54:	f43f ae8a 	beq.w	8022c6c <_strtod_l+0x47c>
 8022f58:	f1bb 0f00 	cmp.w	fp, #0
 8022f5c:	dd08      	ble.n	8022f70 <_strtod_l+0x780>
 8022f5e:	4631      	mov	r1, r6
 8022f60:	465a      	mov	r2, fp
 8022f62:	4620      	mov	r0, r4
 8022f64:	f7ff f9d2 	bl	802230c <__lshift>
 8022f68:	4606      	mov	r6, r0
 8022f6a:	2800      	cmp	r0, #0
 8022f6c:	f43f ae7e 	beq.w	8022c6c <_strtod_l+0x47c>
 8022f70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022f72:	463a      	mov	r2, r7
 8022f74:	4620      	mov	r0, r4
 8022f76:	f7ff fa51 	bl	802241c <__mdiff>
 8022f7a:	4605      	mov	r5, r0
 8022f7c:	2800      	cmp	r0, #0
 8022f7e:	f43f ae75 	beq.w	8022c6c <_strtod_l+0x47c>
 8022f82:	2300      	movs	r3, #0
 8022f84:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022f88:	60c3      	str	r3, [r0, #12]
 8022f8a:	4631      	mov	r1, r6
 8022f8c:	f7ff fa2a 	bl	80223e4 <__mcmp>
 8022f90:	2800      	cmp	r0, #0
 8022f92:	da7f      	bge.n	8023094 <_strtod_l+0x8a4>
 8022f94:	ea5a 0a08 	orrs.w	sl, sl, r8
 8022f98:	f040 80a5 	bne.w	80230e6 <_strtod_l+0x8f6>
 8022f9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022fa0:	2b00      	cmp	r3, #0
 8022fa2:	f040 80a0 	bne.w	80230e6 <_strtod_l+0x8f6>
 8022fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022faa:	0d1b      	lsrs	r3, r3, #20
 8022fac:	051b      	lsls	r3, r3, #20
 8022fae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022fb2:	f240 8098 	bls.w	80230e6 <_strtod_l+0x8f6>
 8022fb6:	696b      	ldr	r3, [r5, #20]
 8022fb8:	b91b      	cbnz	r3, 8022fc2 <_strtod_l+0x7d2>
 8022fba:	692b      	ldr	r3, [r5, #16]
 8022fbc:	2b01      	cmp	r3, #1
 8022fbe:	f340 8092 	ble.w	80230e6 <_strtod_l+0x8f6>
 8022fc2:	4629      	mov	r1, r5
 8022fc4:	2201      	movs	r2, #1
 8022fc6:	4620      	mov	r0, r4
 8022fc8:	f7ff f9a0 	bl	802230c <__lshift>
 8022fcc:	4631      	mov	r1, r6
 8022fce:	4605      	mov	r5, r0
 8022fd0:	f7ff fa08 	bl	80223e4 <__mcmp>
 8022fd4:	2800      	cmp	r0, #0
 8022fd6:	f340 8086 	ble.w	80230e6 <_strtod_l+0x8f6>
 8022fda:	9905      	ldr	r1, [sp, #20]
 8022fdc:	4a2c      	ldr	r2, [pc, #176]	; (8023090 <_strtod_l+0x8a0>)
 8022fde:	464b      	mov	r3, r9
 8022fe0:	2900      	cmp	r1, #0
 8022fe2:	f000 809f 	beq.w	8023124 <_strtod_l+0x934>
 8022fe6:	ea02 0109 	and.w	r1, r2, r9
 8022fea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022fee:	f300 8099 	bgt.w	8023124 <_strtod_l+0x934>
 8022ff2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022ff6:	f77f aea8 	ble.w	8022d4a <_strtod_l+0x55a>
 8022ffa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8023080 <_strtod_l+0x890>
 8022ffe:	ec49 8b16 	vmov	d6, r8, r9
 8023002:	4b23      	ldr	r3, [pc, #140]	; (8023090 <_strtod_l+0x8a0>)
 8023004:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023008:	ee17 2a90 	vmov	r2, s15
 802300c:	4013      	ands	r3, r2
 802300e:	ec59 8b17 	vmov	r8, r9, d7
 8023012:	2b00      	cmp	r3, #0
 8023014:	f47f ae34 	bne.w	8022c80 <_strtod_l+0x490>
 8023018:	2322      	movs	r3, #34	; 0x22
 802301a:	6023      	str	r3, [r4, #0]
 802301c:	e630      	b.n	8022c80 <_strtod_l+0x490>
 802301e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023022:	fa01 f202 	lsl.w	r2, r1, r2
 8023026:	ea02 0808 	and.w	r8, r2, r8
 802302a:	e6da      	b.n	8022de2 <_strtod_l+0x5f2>
 802302c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8023030:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8023034:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8023038:	33e2      	adds	r3, #226	; 0xe2
 802303a:	fa00 f303 	lsl.w	r3, r0, r3
 802303e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8023042:	e73f      	b.n	8022ec4 <_strtod_l+0x6d4>
 8023044:	2200      	movs	r2, #0
 8023046:	2301      	movs	r3, #1
 8023048:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802304c:	e73a      	b.n	8022ec4 <_strtod_l+0x6d4>
 802304e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023050:	461a      	mov	r2, r3
 8023052:	4620      	mov	r0, r4
 8023054:	f7ff f95a 	bl	802230c <__lshift>
 8023058:	9012      	str	r0, [sp, #72]	; 0x48
 802305a:	2800      	cmp	r0, #0
 802305c:	f47f af64 	bne.w	8022f28 <_strtod_l+0x738>
 8023060:	e604      	b.n	8022c6c <_strtod_l+0x47c>
 8023062:	bf00      	nop
 8023064:	f3af 8000 	nop.w
 8023068:	94a03595 	.word	0x94a03595
 802306c:	3fcfffff 	.word	0x3fcfffff
 8023070:	94a03595 	.word	0x94a03595
 8023074:	3fdfffff 	.word	0x3fdfffff
 8023078:	35afe535 	.word	0x35afe535
 802307c:	3fe00000 	.word	0x3fe00000
 8023080:	00000000 	.word	0x00000000
 8023084:	39500000 	.word	0x39500000
 8023088:	080260d8 	.word	0x080260d8
 802308c:	fffffc02 	.word	0xfffffc02
 8023090:	7ff00000 	.word	0x7ff00000
 8023094:	46cb      	mov	fp, r9
 8023096:	d15f      	bne.n	8023158 <_strtod_l+0x968>
 8023098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802309c:	f1ba 0f00 	cmp.w	sl, #0
 80230a0:	d02a      	beq.n	80230f8 <_strtod_l+0x908>
 80230a2:	4aa7      	ldr	r2, [pc, #668]	; (8023340 <_strtod_l+0xb50>)
 80230a4:	4293      	cmp	r3, r2
 80230a6:	d12b      	bne.n	8023100 <_strtod_l+0x910>
 80230a8:	9b05      	ldr	r3, [sp, #20]
 80230aa:	4642      	mov	r2, r8
 80230ac:	b1fb      	cbz	r3, 80230ee <_strtod_l+0x8fe>
 80230ae:	4ba5      	ldr	r3, [pc, #660]	; (8023344 <_strtod_l+0xb54>)
 80230b0:	ea09 0303 	and.w	r3, r9, r3
 80230b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80230b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80230bc:	d81a      	bhi.n	80230f4 <_strtod_l+0x904>
 80230be:	0d1b      	lsrs	r3, r3, #20
 80230c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80230c4:	fa01 f303 	lsl.w	r3, r1, r3
 80230c8:	429a      	cmp	r2, r3
 80230ca:	d119      	bne.n	8023100 <_strtod_l+0x910>
 80230cc:	4b9e      	ldr	r3, [pc, #632]	; (8023348 <_strtod_l+0xb58>)
 80230ce:	459b      	cmp	fp, r3
 80230d0:	d102      	bne.n	80230d8 <_strtod_l+0x8e8>
 80230d2:	3201      	adds	r2, #1
 80230d4:	f43f adca 	beq.w	8022c6c <_strtod_l+0x47c>
 80230d8:	4b9a      	ldr	r3, [pc, #616]	; (8023344 <_strtod_l+0xb54>)
 80230da:	ea0b 0303 	and.w	r3, fp, r3
 80230de:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80230e2:	f04f 0800 	mov.w	r8, #0
 80230e6:	9b05      	ldr	r3, [sp, #20]
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	d186      	bne.n	8022ffa <_strtod_l+0x80a>
 80230ec:	e5c8      	b.n	8022c80 <_strtod_l+0x490>
 80230ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80230f2:	e7e9      	b.n	80230c8 <_strtod_l+0x8d8>
 80230f4:	460b      	mov	r3, r1
 80230f6:	e7e7      	b.n	80230c8 <_strtod_l+0x8d8>
 80230f8:	ea53 0308 	orrs.w	r3, r3, r8
 80230fc:	f43f af6d 	beq.w	8022fda <_strtod_l+0x7ea>
 8023100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023102:	b1cb      	cbz	r3, 8023138 <_strtod_l+0x948>
 8023104:	ea13 0f0b 	tst.w	r3, fp
 8023108:	d0ed      	beq.n	80230e6 <_strtod_l+0x8f6>
 802310a:	9a05      	ldr	r2, [sp, #20]
 802310c:	4640      	mov	r0, r8
 802310e:	4649      	mov	r1, r9
 8023110:	f1ba 0f00 	cmp.w	sl, #0
 8023114:	d014      	beq.n	8023140 <_strtod_l+0x950>
 8023116:	f7ff fb51 	bl	80227bc <sulp>
 802311a:	ee38 7b00 	vadd.f64	d7, d8, d0
 802311e:	ec59 8b17 	vmov	r8, r9, d7
 8023122:	e7e0      	b.n	80230e6 <_strtod_l+0x8f6>
 8023124:	4013      	ands	r3, r2
 8023126:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802312a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802312e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8023132:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8023136:	e7d6      	b.n	80230e6 <_strtod_l+0x8f6>
 8023138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802313a:	ea13 0f08 	tst.w	r3, r8
 802313e:	e7e3      	b.n	8023108 <_strtod_l+0x918>
 8023140:	f7ff fb3c 	bl	80227bc <sulp>
 8023144:	ee38 0b40 	vsub.f64	d0, d8, d0
 8023148:	eeb5 0b40 	vcmp.f64	d0, #0.0
 802314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023150:	ec59 8b10 	vmov	r8, r9, d0
 8023154:	d1c7      	bne.n	80230e6 <_strtod_l+0x8f6>
 8023156:	e5f8      	b.n	8022d4a <_strtod_l+0x55a>
 8023158:	4631      	mov	r1, r6
 802315a:	4628      	mov	r0, r5
 802315c:	f7ff fab2 	bl	80226c4 <__ratio>
 8023160:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8023164:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802316c:	d85f      	bhi.n	802322e <_strtod_l+0xa3e>
 802316e:	f1ba 0f00 	cmp.w	sl, #0
 8023172:	d166      	bne.n	8023242 <_strtod_l+0xa52>
 8023174:	f1b8 0f00 	cmp.w	r8, #0
 8023178:	d14d      	bne.n	8023216 <_strtod_l+0xa26>
 802317a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802317e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8023182:	2b00      	cmp	r3, #0
 8023184:	d162      	bne.n	802324c <_strtod_l+0xa5c>
 8023186:	eeb4 0bcd 	vcmpe.f64	d0, d13
 802318a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 802318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023192:	d401      	bmi.n	8023198 <_strtod_l+0x9a8>
 8023194:	ee20 db0d 	vmul.f64	d13, d0, d13
 8023198:	eeb1 cb4d 	vneg.f64	d12, d13
 802319c:	4869      	ldr	r0, [pc, #420]	; (8023344 <_strtod_l+0xb54>)
 802319e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8023350 <_strtod_l+0xb60>
 80231a2:	ea0b 0100 	and.w	r1, fp, r0
 80231a6:	4561      	cmp	r1, ip
 80231a8:	ec53 2b1c 	vmov	r2, r3, d12
 80231ac:	d17a      	bne.n	80232a4 <_strtod_l+0xab4>
 80231ae:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80231b2:	ec49 8b10 	vmov	d0, r8, r9
 80231b6:	910a      	str	r1, [sp, #40]	; 0x28
 80231b8:	f7ff f9ba 	bl	8022530 <__ulp>
 80231bc:	ec49 8b1e 	vmov	d14, r8, r9
 80231c0:	4860      	ldr	r0, [pc, #384]	; (8023344 <_strtod_l+0xb54>)
 80231c2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80231c6:	ee1e 3a90 	vmov	r3, s29
 80231ca:	4a60      	ldr	r2, [pc, #384]	; (802334c <_strtod_l+0xb5c>)
 80231cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80231ce:	4018      	ands	r0, r3
 80231d0:	4290      	cmp	r0, r2
 80231d2:	ec59 8b1e 	vmov	r8, r9, d14
 80231d6:	d93c      	bls.n	8023252 <_strtod_l+0xa62>
 80231d8:	ee18 2a90 	vmov	r2, s17
 80231dc:	4b5a      	ldr	r3, [pc, #360]	; (8023348 <_strtod_l+0xb58>)
 80231de:	429a      	cmp	r2, r3
 80231e0:	d104      	bne.n	80231ec <_strtod_l+0x9fc>
 80231e2:	ee18 3a10 	vmov	r3, s16
 80231e6:	3301      	adds	r3, #1
 80231e8:	f43f ad40 	beq.w	8022c6c <_strtod_l+0x47c>
 80231ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8023348 <_strtod_l+0xb58>
 80231f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80231f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80231f6:	4620      	mov	r0, r4
 80231f8:	f7fe fe6e 	bl	8021ed8 <_Bfree>
 80231fc:	4639      	mov	r1, r7
 80231fe:	4620      	mov	r0, r4
 8023200:	f7fe fe6a 	bl	8021ed8 <_Bfree>
 8023204:	4631      	mov	r1, r6
 8023206:	4620      	mov	r0, r4
 8023208:	f7fe fe66 	bl	8021ed8 <_Bfree>
 802320c:	4629      	mov	r1, r5
 802320e:	4620      	mov	r0, r4
 8023210:	f7fe fe62 	bl	8021ed8 <_Bfree>
 8023214:	e609      	b.n	8022e2a <_strtod_l+0x63a>
 8023216:	f1b8 0f01 	cmp.w	r8, #1
 802321a:	d103      	bne.n	8023224 <_strtod_l+0xa34>
 802321c:	f1b9 0f00 	cmp.w	r9, #0
 8023220:	f43f ad93 	beq.w	8022d4a <_strtod_l+0x55a>
 8023224:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8023228:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 802322c:	e7b6      	b.n	802319c <_strtod_l+0x9ac>
 802322e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8023232:	ee20 db0d 	vmul.f64	d13, d0, d13
 8023236:	f1ba 0f00 	cmp.w	sl, #0
 802323a:	d0ad      	beq.n	8023198 <_strtod_l+0x9a8>
 802323c:	eeb0 cb4d 	vmov.f64	d12, d13
 8023240:	e7ac      	b.n	802319c <_strtod_l+0x9ac>
 8023242:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8023246:	eeb0 db4c 	vmov.f64	d13, d12
 802324a:	e7a7      	b.n	802319c <_strtod_l+0x9ac>
 802324c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8023250:	e7a4      	b.n	802319c <_strtod_l+0x9ac>
 8023252:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8023256:	9b05      	ldr	r3, [sp, #20]
 8023258:	46cb      	mov	fp, r9
 802325a:	2b00      	cmp	r3, #0
 802325c:	d1ca      	bne.n	80231f4 <_strtod_l+0xa04>
 802325e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023262:	0d1b      	lsrs	r3, r3, #20
 8023264:	051b      	lsls	r3, r3, #20
 8023266:	4299      	cmp	r1, r3
 8023268:	d1c4      	bne.n	80231f4 <_strtod_l+0xa04>
 802326a:	ec51 0b1d 	vmov	r0, r1, d13
 802326e:	f7dd fa73 	bl	8000758 <__aeabi_d2lz>
 8023272:	f7dd f9db 	bl	800062c <__aeabi_l2d>
 8023276:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 802327a:	ec41 0b17 	vmov	d7, r0, r1
 802327e:	ea4b 0b08 	orr.w	fp, fp, r8
 8023282:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8023286:	ee3d db47 	vsub.f64	d13, d13, d7
 802328a:	d03c      	beq.n	8023306 <_strtod_l+0xb16>
 802328c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8023290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023294:	f53f acf4 	bmi.w	8022c80 <_strtod_l+0x490>
 8023298:	eeb4 dbcb 	vcmpe.f64	d13, d11
 802329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232a0:	dda8      	ble.n	80231f4 <_strtod_l+0xa04>
 80232a2:	e4ed      	b.n	8022c80 <_strtod_l+0x490>
 80232a4:	9805      	ldr	r0, [sp, #20]
 80232a6:	b1f0      	cbz	r0, 80232e6 <_strtod_l+0xaf6>
 80232a8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80232ac:	d81b      	bhi.n	80232e6 <_strtod_l+0xaf6>
 80232ae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8023338 <_strtod_l+0xb48>
 80232b2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80232b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232ba:	d811      	bhi.n	80232e0 <_strtod_l+0xaf0>
 80232bc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80232c0:	ee1d 3a10 	vmov	r3, s26
 80232c4:	2b01      	cmp	r3, #1
 80232c6:	bf38      	it	cc
 80232c8:	2301      	movcc	r3, #1
 80232ca:	ee0d 3a10 	vmov	s26, r3
 80232ce:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80232d2:	f1ba 0f00 	cmp.w	sl, #0
 80232d6:	d113      	bne.n	8023300 <_strtod_l+0xb10>
 80232d8:	eeb1 7b4d 	vneg.f64	d7, d13
 80232dc:	ec53 2b17 	vmov	r2, r3, d7
 80232e0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80232e4:	1a43      	subs	r3, r0, r1
 80232e6:	eeb0 0b48 	vmov.f64	d0, d8
 80232ea:	ec43 2b1c 	vmov	d12, r2, r3
 80232ee:	910a      	str	r1, [sp, #40]	; 0x28
 80232f0:	f7ff f91e 	bl	8022530 <__ulp>
 80232f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80232f6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80232fa:	ec59 8b18 	vmov	r8, r9, d8
 80232fe:	e7aa      	b.n	8023256 <_strtod_l+0xa66>
 8023300:	eeb0 7b4d 	vmov.f64	d7, d13
 8023304:	e7ea      	b.n	80232dc <_strtod_l+0xaec>
 8023306:	eeb4 dbc9 	vcmpe.f64	d13, d9
 802330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802330e:	f57f af71 	bpl.w	80231f4 <_strtod_l+0xa04>
 8023312:	e4b5      	b.n	8022c80 <_strtod_l+0x490>
 8023314:	2300      	movs	r3, #0
 8023316:	9308      	str	r3, [sp, #32]
 8023318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802331a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802331c:	6013      	str	r3, [r2, #0]
 802331e:	f7ff baa6 	b.w	802286e <_strtod_l+0x7e>
 8023322:	2a65      	cmp	r2, #101	; 0x65
 8023324:	f43f aba2 	beq.w	8022a6c <_strtod_l+0x27c>
 8023328:	2a45      	cmp	r2, #69	; 0x45
 802332a:	f43f ab9f 	beq.w	8022a6c <_strtod_l+0x27c>
 802332e:	2101      	movs	r1, #1
 8023330:	f7ff bbd8 	b.w	8022ae4 <_strtod_l+0x2f4>
 8023334:	f3af 8000 	nop.w
 8023338:	ffc00000 	.word	0xffc00000
 802333c:	41dfffff 	.word	0x41dfffff
 8023340:	000fffff 	.word	0x000fffff
 8023344:	7ff00000 	.word	0x7ff00000
 8023348:	7fefffff 	.word	0x7fefffff
 802334c:	7c9fffff 	.word	0x7c9fffff
 8023350:	7fe00000 	.word	0x7fe00000

08023354 <_strtod_r>:
 8023354:	4b01      	ldr	r3, [pc, #4]	; (802335c <_strtod_r+0x8>)
 8023356:	f7ff ba4b 	b.w	80227f0 <_strtod_l>
 802335a:	bf00      	nop
 802335c:	200009dc 	.word	0x200009dc

08023360 <_strtol_l.constprop.0>:
 8023360:	2b01      	cmp	r3, #1
 8023362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023366:	d001      	beq.n	802336c <_strtol_l.constprop.0+0xc>
 8023368:	2b24      	cmp	r3, #36	; 0x24
 802336a:	d906      	bls.n	802337a <_strtol_l.constprop.0+0x1a>
 802336c:	f7fd febe 	bl	80210ec <__errno>
 8023370:	2316      	movs	r3, #22
 8023372:	6003      	str	r3, [r0, #0]
 8023374:	2000      	movs	r0, #0
 8023376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802337a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023460 <_strtol_l.constprop.0+0x100>
 802337e:	460d      	mov	r5, r1
 8023380:	462e      	mov	r6, r5
 8023382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023386:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802338a:	f017 0708 	ands.w	r7, r7, #8
 802338e:	d1f7      	bne.n	8023380 <_strtol_l.constprop.0+0x20>
 8023390:	2c2d      	cmp	r4, #45	; 0x2d
 8023392:	d132      	bne.n	80233fa <_strtol_l.constprop.0+0x9a>
 8023394:	782c      	ldrb	r4, [r5, #0]
 8023396:	2701      	movs	r7, #1
 8023398:	1cb5      	adds	r5, r6, #2
 802339a:	2b00      	cmp	r3, #0
 802339c:	d05b      	beq.n	8023456 <_strtol_l.constprop.0+0xf6>
 802339e:	2b10      	cmp	r3, #16
 80233a0:	d109      	bne.n	80233b6 <_strtol_l.constprop.0+0x56>
 80233a2:	2c30      	cmp	r4, #48	; 0x30
 80233a4:	d107      	bne.n	80233b6 <_strtol_l.constprop.0+0x56>
 80233a6:	782c      	ldrb	r4, [r5, #0]
 80233a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80233ac:	2c58      	cmp	r4, #88	; 0x58
 80233ae:	d14d      	bne.n	802344c <_strtol_l.constprop.0+0xec>
 80233b0:	786c      	ldrb	r4, [r5, #1]
 80233b2:	2310      	movs	r3, #16
 80233b4:	3502      	adds	r5, #2
 80233b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80233ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80233be:	f04f 0e00 	mov.w	lr, #0
 80233c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80233c6:	4676      	mov	r6, lr
 80233c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80233cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80233d0:	f1bc 0f09 	cmp.w	ip, #9
 80233d4:	d816      	bhi.n	8023404 <_strtol_l.constprop.0+0xa4>
 80233d6:	4664      	mov	r4, ip
 80233d8:	42a3      	cmp	r3, r4
 80233da:	dd24      	ble.n	8023426 <_strtol_l.constprop.0+0xc6>
 80233dc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80233e0:	d008      	beq.n	80233f4 <_strtol_l.constprop.0+0x94>
 80233e2:	45b1      	cmp	r9, r6
 80233e4:	d31c      	bcc.n	8023420 <_strtol_l.constprop.0+0xc0>
 80233e6:	d101      	bne.n	80233ec <_strtol_l.constprop.0+0x8c>
 80233e8:	45a2      	cmp	sl, r4
 80233ea:	db19      	blt.n	8023420 <_strtol_l.constprop.0+0xc0>
 80233ec:	fb06 4603 	mla	r6, r6, r3, r4
 80233f0:	f04f 0e01 	mov.w	lr, #1
 80233f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80233f8:	e7e8      	b.n	80233cc <_strtol_l.constprop.0+0x6c>
 80233fa:	2c2b      	cmp	r4, #43	; 0x2b
 80233fc:	bf04      	itt	eq
 80233fe:	782c      	ldrbeq	r4, [r5, #0]
 8023400:	1cb5      	addeq	r5, r6, #2
 8023402:	e7ca      	b.n	802339a <_strtol_l.constprop.0+0x3a>
 8023404:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023408:	f1bc 0f19 	cmp.w	ip, #25
 802340c:	d801      	bhi.n	8023412 <_strtol_l.constprop.0+0xb2>
 802340e:	3c37      	subs	r4, #55	; 0x37
 8023410:	e7e2      	b.n	80233d8 <_strtol_l.constprop.0+0x78>
 8023412:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023416:	f1bc 0f19 	cmp.w	ip, #25
 802341a:	d804      	bhi.n	8023426 <_strtol_l.constprop.0+0xc6>
 802341c:	3c57      	subs	r4, #87	; 0x57
 802341e:	e7db      	b.n	80233d8 <_strtol_l.constprop.0+0x78>
 8023420:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8023424:	e7e6      	b.n	80233f4 <_strtol_l.constprop.0+0x94>
 8023426:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 802342a:	d105      	bne.n	8023438 <_strtol_l.constprop.0+0xd8>
 802342c:	2322      	movs	r3, #34	; 0x22
 802342e:	6003      	str	r3, [r0, #0]
 8023430:	4646      	mov	r6, r8
 8023432:	b942      	cbnz	r2, 8023446 <_strtol_l.constprop.0+0xe6>
 8023434:	4630      	mov	r0, r6
 8023436:	e79e      	b.n	8023376 <_strtol_l.constprop.0+0x16>
 8023438:	b107      	cbz	r7, 802343c <_strtol_l.constprop.0+0xdc>
 802343a:	4276      	negs	r6, r6
 802343c:	2a00      	cmp	r2, #0
 802343e:	d0f9      	beq.n	8023434 <_strtol_l.constprop.0+0xd4>
 8023440:	f1be 0f00 	cmp.w	lr, #0
 8023444:	d000      	beq.n	8023448 <_strtol_l.constprop.0+0xe8>
 8023446:	1e69      	subs	r1, r5, #1
 8023448:	6011      	str	r1, [r2, #0]
 802344a:	e7f3      	b.n	8023434 <_strtol_l.constprop.0+0xd4>
 802344c:	2430      	movs	r4, #48	; 0x30
 802344e:	2b00      	cmp	r3, #0
 8023450:	d1b1      	bne.n	80233b6 <_strtol_l.constprop.0+0x56>
 8023452:	2308      	movs	r3, #8
 8023454:	e7af      	b.n	80233b6 <_strtol_l.constprop.0+0x56>
 8023456:	2c30      	cmp	r4, #48	; 0x30
 8023458:	d0a5      	beq.n	80233a6 <_strtol_l.constprop.0+0x46>
 802345a:	230a      	movs	r3, #10
 802345c:	e7ab      	b.n	80233b6 <_strtol_l.constprop.0+0x56>
 802345e:	bf00      	nop
 8023460:	08025d6c 	.word	0x08025d6c

08023464 <_strtol_r>:
 8023464:	f7ff bf7c 	b.w	8023360 <_strtol_l.constprop.0>

08023468 <__ssputs_r>:
 8023468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802346c:	688e      	ldr	r6, [r1, #8]
 802346e:	461f      	mov	r7, r3
 8023470:	42be      	cmp	r6, r7
 8023472:	680b      	ldr	r3, [r1, #0]
 8023474:	4682      	mov	sl, r0
 8023476:	460c      	mov	r4, r1
 8023478:	4690      	mov	r8, r2
 802347a:	d82c      	bhi.n	80234d6 <__ssputs_r+0x6e>
 802347c:	898a      	ldrh	r2, [r1, #12]
 802347e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023482:	d026      	beq.n	80234d2 <__ssputs_r+0x6a>
 8023484:	6965      	ldr	r5, [r4, #20]
 8023486:	6909      	ldr	r1, [r1, #16]
 8023488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802348c:	eba3 0901 	sub.w	r9, r3, r1
 8023490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023494:	1c7b      	adds	r3, r7, #1
 8023496:	444b      	add	r3, r9
 8023498:	106d      	asrs	r5, r5, #1
 802349a:	429d      	cmp	r5, r3
 802349c:	bf38      	it	cc
 802349e:	461d      	movcc	r5, r3
 80234a0:	0553      	lsls	r3, r2, #21
 80234a2:	d527      	bpl.n	80234f4 <__ssputs_r+0x8c>
 80234a4:	4629      	mov	r1, r5
 80234a6:	f7fc f9d5 	bl	801f854 <_malloc_r>
 80234aa:	4606      	mov	r6, r0
 80234ac:	b360      	cbz	r0, 8023508 <__ssputs_r+0xa0>
 80234ae:	6921      	ldr	r1, [r4, #16]
 80234b0:	464a      	mov	r2, r9
 80234b2:	f7fd fe50 	bl	8021156 <memcpy>
 80234b6:	89a3      	ldrh	r3, [r4, #12]
 80234b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80234bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80234c0:	81a3      	strh	r3, [r4, #12]
 80234c2:	6126      	str	r6, [r4, #16]
 80234c4:	6165      	str	r5, [r4, #20]
 80234c6:	444e      	add	r6, r9
 80234c8:	eba5 0509 	sub.w	r5, r5, r9
 80234cc:	6026      	str	r6, [r4, #0]
 80234ce:	60a5      	str	r5, [r4, #8]
 80234d0:	463e      	mov	r6, r7
 80234d2:	42be      	cmp	r6, r7
 80234d4:	d900      	bls.n	80234d8 <__ssputs_r+0x70>
 80234d6:	463e      	mov	r6, r7
 80234d8:	6820      	ldr	r0, [r4, #0]
 80234da:	4632      	mov	r2, r6
 80234dc:	4641      	mov	r1, r8
 80234de:	f7fd fd53 	bl	8020f88 <memmove>
 80234e2:	68a3      	ldr	r3, [r4, #8]
 80234e4:	1b9b      	subs	r3, r3, r6
 80234e6:	60a3      	str	r3, [r4, #8]
 80234e8:	6823      	ldr	r3, [r4, #0]
 80234ea:	4433      	add	r3, r6
 80234ec:	6023      	str	r3, [r4, #0]
 80234ee:	2000      	movs	r0, #0
 80234f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234f4:	462a      	mov	r2, r5
 80234f6:	f7fc faad 	bl	801fa54 <_realloc_r>
 80234fa:	4606      	mov	r6, r0
 80234fc:	2800      	cmp	r0, #0
 80234fe:	d1e0      	bne.n	80234c2 <__ssputs_r+0x5a>
 8023500:	6921      	ldr	r1, [r4, #16]
 8023502:	4650      	mov	r0, sl
 8023504:	f7fe fc5c 	bl	8021dc0 <_free_r>
 8023508:	230c      	movs	r3, #12
 802350a:	f8ca 3000 	str.w	r3, [sl]
 802350e:	89a3      	ldrh	r3, [r4, #12]
 8023510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023514:	81a3      	strh	r3, [r4, #12]
 8023516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802351a:	e7e9      	b.n	80234f0 <__ssputs_r+0x88>

0802351c <_svfiprintf_r>:
 802351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023520:	4698      	mov	r8, r3
 8023522:	898b      	ldrh	r3, [r1, #12]
 8023524:	061b      	lsls	r3, r3, #24
 8023526:	b09d      	sub	sp, #116	; 0x74
 8023528:	4607      	mov	r7, r0
 802352a:	460d      	mov	r5, r1
 802352c:	4614      	mov	r4, r2
 802352e:	d50e      	bpl.n	802354e <_svfiprintf_r+0x32>
 8023530:	690b      	ldr	r3, [r1, #16]
 8023532:	b963      	cbnz	r3, 802354e <_svfiprintf_r+0x32>
 8023534:	2140      	movs	r1, #64	; 0x40
 8023536:	f7fc f98d 	bl	801f854 <_malloc_r>
 802353a:	6028      	str	r0, [r5, #0]
 802353c:	6128      	str	r0, [r5, #16]
 802353e:	b920      	cbnz	r0, 802354a <_svfiprintf_r+0x2e>
 8023540:	230c      	movs	r3, #12
 8023542:	603b      	str	r3, [r7, #0]
 8023544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023548:	e0d0      	b.n	80236ec <_svfiprintf_r+0x1d0>
 802354a:	2340      	movs	r3, #64	; 0x40
 802354c:	616b      	str	r3, [r5, #20]
 802354e:	2300      	movs	r3, #0
 8023550:	9309      	str	r3, [sp, #36]	; 0x24
 8023552:	2320      	movs	r3, #32
 8023554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023558:	f8cd 800c 	str.w	r8, [sp, #12]
 802355c:	2330      	movs	r3, #48	; 0x30
 802355e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8023704 <_svfiprintf_r+0x1e8>
 8023562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023566:	f04f 0901 	mov.w	r9, #1
 802356a:	4623      	mov	r3, r4
 802356c:	469a      	mov	sl, r3
 802356e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023572:	b10a      	cbz	r2, 8023578 <_svfiprintf_r+0x5c>
 8023574:	2a25      	cmp	r2, #37	; 0x25
 8023576:	d1f9      	bne.n	802356c <_svfiprintf_r+0x50>
 8023578:	ebba 0b04 	subs.w	fp, sl, r4
 802357c:	d00b      	beq.n	8023596 <_svfiprintf_r+0x7a>
 802357e:	465b      	mov	r3, fp
 8023580:	4622      	mov	r2, r4
 8023582:	4629      	mov	r1, r5
 8023584:	4638      	mov	r0, r7
 8023586:	f7ff ff6f 	bl	8023468 <__ssputs_r>
 802358a:	3001      	adds	r0, #1
 802358c:	f000 80a9 	beq.w	80236e2 <_svfiprintf_r+0x1c6>
 8023590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023592:	445a      	add	r2, fp
 8023594:	9209      	str	r2, [sp, #36]	; 0x24
 8023596:	f89a 3000 	ldrb.w	r3, [sl]
 802359a:	2b00      	cmp	r3, #0
 802359c:	f000 80a1 	beq.w	80236e2 <_svfiprintf_r+0x1c6>
 80235a0:	2300      	movs	r3, #0
 80235a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80235a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80235aa:	f10a 0a01 	add.w	sl, sl, #1
 80235ae:	9304      	str	r3, [sp, #16]
 80235b0:	9307      	str	r3, [sp, #28]
 80235b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80235b6:	931a      	str	r3, [sp, #104]	; 0x68
 80235b8:	4654      	mov	r4, sl
 80235ba:	2205      	movs	r2, #5
 80235bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235c0:	4850      	ldr	r0, [pc, #320]	; (8023704 <_svfiprintf_r+0x1e8>)
 80235c2:	f7dc fe4d 	bl	8000260 <memchr>
 80235c6:	9a04      	ldr	r2, [sp, #16]
 80235c8:	b9d8      	cbnz	r0, 8023602 <_svfiprintf_r+0xe6>
 80235ca:	06d0      	lsls	r0, r2, #27
 80235cc:	bf44      	itt	mi
 80235ce:	2320      	movmi	r3, #32
 80235d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235d4:	0711      	lsls	r1, r2, #28
 80235d6:	bf44      	itt	mi
 80235d8:	232b      	movmi	r3, #43	; 0x2b
 80235da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235de:	f89a 3000 	ldrb.w	r3, [sl]
 80235e2:	2b2a      	cmp	r3, #42	; 0x2a
 80235e4:	d015      	beq.n	8023612 <_svfiprintf_r+0xf6>
 80235e6:	9a07      	ldr	r2, [sp, #28]
 80235e8:	4654      	mov	r4, sl
 80235ea:	2000      	movs	r0, #0
 80235ec:	f04f 0c0a 	mov.w	ip, #10
 80235f0:	4621      	mov	r1, r4
 80235f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80235f6:	3b30      	subs	r3, #48	; 0x30
 80235f8:	2b09      	cmp	r3, #9
 80235fa:	d94d      	bls.n	8023698 <_svfiprintf_r+0x17c>
 80235fc:	b1b0      	cbz	r0, 802362c <_svfiprintf_r+0x110>
 80235fe:	9207      	str	r2, [sp, #28]
 8023600:	e014      	b.n	802362c <_svfiprintf_r+0x110>
 8023602:	eba0 0308 	sub.w	r3, r0, r8
 8023606:	fa09 f303 	lsl.w	r3, r9, r3
 802360a:	4313      	orrs	r3, r2
 802360c:	9304      	str	r3, [sp, #16]
 802360e:	46a2      	mov	sl, r4
 8023610:	e7d2      	b.n	80235b8 <_svfiprintf_r+0x9c>
 8023612:	9b03      	ldr	r3, [sp, #12]
 8023614:	1d19      	adds	r1, r3, #4
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	9103      	str	r1, [sp, #12]
 802361a:	2b00      	cmp	r3, #0
 802361c:	bfbb      	ittet	lt
 802361e:	425b      	neglt	r3, r3
 8023620:	f042 0202 	orrlt.w	r2, r2, #2
 8023624:	9307      	strge	r3, [sp, #28]
 8023626:	9307      	strlt	r3, [sp, #28]
 8023628:	bfb8      	it	lt
 802362a:	9204      	strlt	r2, [sp, #16]
 802362c:	7823      	ldrb	r3, [r4, #0]
 802362e:	2b2e      	cmp	r3, #46	; 0x2e
 8023630:	d10c      	bne.n	802364c <_svfiprintf_r+0x130>
 8023632:	7863      	ldrb	r3, [r4, #1]
 8023634:	2b2a      	cmp	r3, #42	; 0x2a
 8023636:	d134      	bne.n	80236a2 <_svfiprintf_r+0x186>
 8023638:	9b03      	ldr	r3, [sp, #12]
 802363a:	1d1a      	adds	r2, r3, #4
 802363c:	681b      	ldr	r3, [r3, #0]
 802363e:	9203      	str	r2, [sp, #12]
 8023640:	2b00      	cmp	r3, #0
 8023642:	bfb8      	it	lt
 8023644:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023648:	3402      	adds	r4, #2
 802364a:	9305      	str	r3, [sp, #20]
 802364c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8023714 <_svfiprintf_r+0x1f8>
 8023650:	7821      	ldrb	r1, [r4, #0]
 8023652:	2203      	movs	r2, #3
 8023654:	4650      	mov	r0, sl
 8023656:	f7dc fe03 	bl	8000260 <memchr>
 802365a:	b138      	cbz	r0, 802366c <_svfiprintf_r+0x150>
 802365c:	9b04      	ldr	r3, [sp, #16]
 802365e:	eba0 000a 	sub.w	r0, r0, sl
 8023662:	2240      	movs	r2, #64	; 0x40
 8023664:	4082      	lsls	r2, r0
 8023666:	4313      	orrs	r3, r2
 8023668:	3401      	adds	r4, #1
 802366a:	9304      	str	r3, [sp, #16]
 802366c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023670:	4825      	ldr	r0, [pc, #148]	; (8023708 <_svfiprintf_r+0x1ec>)
 8023672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023676:	2206      	movs	r2, #6
 8023678:	f7dc fdf2 	bl	8000260 <memchr>
 802367c:	2800      	cmp	r0, #0
 802367e:	d038      	beq.n	80236f2 <_svfiprintf_r+0x1d6>
 8023680:	4b22      	ldr	r3, [pc, #136]	; (802370c <_svfiprintf_r+0x1f0>)
 8023682:	bb1b      	cbnz	r3, 80236cc <_svfiprintf_r+0x1b0>
 8023684:	9b03      	ldr	r3, [sp, #12]
 8023686:	3307      	adds	r3, #7
 8023688:	f023 0307 	bic.w	r3, r3, #7
 802368c:	3308      	adds	r3, #8
 802368e:	9303      	str	r3, [sp, #12]
 8023690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023692:	4433      	add	r3, r6
 8023694:	9309      	str	r3, [sp, #36]	; 0x24
 8023696:	e768      	b.n	802356a <_svfiprintf_r+0x4e>
 8023698:	fb0c 3202 	mla	r2, ip, r2, r3
 802369c:	460c      	mov	r4, r1
 802369e:	2001      	movs	r0, #1
 80236a0:	e7a6      	b.n	80235f0 <_svfiprintf_r+0xd4>
 80236a2:	2300      	movs	r3, #0
 80236a4:	3401      	adds	r4, #1
 80236a6:	9305      	str	r3, [sp, #20]
 80236a8:	4619      	mov	r1, r3
 80236aa:	f04f 0c0a 	mov.w	ip, #10
 80236ae:	4620      	mov	r0, r4
 80236b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236b4:	3a30      	subs	r2, #48	; 0x30
 80236b6:	2a09      	cmp	r2, #9
 80236b8:	d903      	bls.n	80236c2 <_svfiprintf_r+0x1a6>
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d0c6      	beq.n	802364c <_svfiprintf_r+0x130>
 80236be:	9105      	str	r1, [sp, #20]
 80236c0:	e7c4      	b.n	802364c <_svfiprintf_r+0x130>
 80236c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80236c6:	4604      	mov	r4, r0
 80236c8:	2301      	movs	r3, #1
 80236ca:	e7f0      	b.n	80236ae <_svfiprintf_r+0x192>
 80236cc:	ab03      	add	r3, sp, #12
 80236ce:	9300      	str	r3, [sp, #0]
 80236d0:	462a      	mov	r2, r5
 80236d2:	4b0f      	ldr	r3, [pc, #60]	; (8023710 <_svfiprintf_r+0x1f4>)
 80236d4:	a904      	add	r1, sp, #16
 80236d6:	4638      	mov	r0, r7
 80236d8:	f7fc fafa 	bl	801fcd0 <_printf_float>
 80236dc:	1c42      	adds	r2, r0, #1
 80236de:	4606      	mov	r6, r0
 80236e0:	d1d6      	bne.n	8023690 <_svfiprintf_r+0x174>
 80236e2:	89ab      	ldrh	r3, [r5, #12]
 80236e4:	065b      	lsls	r3, r3, #25
 80236e6:	f53f af2d 	bmi.w	8023544 <_svfiprintf_r+0x28>
 80236ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236ec:	b01d      	add	sp, #116	; 0x74
 80236ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236f2:	ab03      	add	r3, sp, #12
 80236f4:	9300      	str	r3, [sp, #0]
 80236f6:	462a      	mov	r2, r5
 80236f8:	4b05      	ldr	r3, [pc, #20]	; (8023710 <_svfiprintf_r+0x1f4>)
 80236fa:	a904      	add	r1, sp, #16
 80236fc:	4638      	mov	r0, r7
 80236fe:	f7fc fd6f 	bl	80201e0 <_printf_i>
 8023702:	e7eb      	b.n	80236dc <_svfiprintf_r+0x1c0>
 8023704:	08026100 	.word	0x08026100
 8023708:	0802610a 	.word	0x0802610a
 802370c:	0801fcd1 	.word	0x0801fcd1
 8023710:	08023469 	.word	0x08023469
 8023714:	08026106 	.word	0x08026106

08023718 <__sfputc_r>:
 8023718:	6893      	ldr	r3, [r2, #8]
 802371a:	3b01      	subs	r3, #1
 802371c:	2b00      	cmp	r3, #0
 802371e:	b410      	push	{r4}
 8023720:	6093      	str	r3, [r2, #8]
 8023722:	da08      	bge.n	8023736 <__sfputc_r+0x1e>
 8023724:	6994      	ldr	r4, [r2, #24]
 8023726:	42a3      	cmp	r3, r4
 8023728:	db01      	blt.n	802372e <__sfputc_r+0x16>
 802372a:	290a      	cmp	r1, #10
 802372c:	d103      	bne.n	8023736 <__sfputc_r+0x1e>
 802372e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023732:	f7fd bb83 	b.w	8020e3c <__swbuf_r>
 8023736:	6813      	ldr	r3, [r2, #0]
 8023738:	1c58      	adds	r0, r3, #1
 802373a:	6010      	str	r0, [r2, #0]
 802373c:	7019      	strb	r1, [r3, #0]
 802373e:	4608      	mov	r0, r1
 8023740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023744:	4770      	bx	lr

08023746 <__sfputs_r>:
 8023746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023748:	4606      	mov	r6, r0
 802374a:	460f      	mov	r7, r1
 802374c:	4614      	mov	r4, r2
 802374e:	18d5      	adds	r5, r2, r3
 8023750:	42ac      	cmp	r4, r5
 8023752:	d101      	bne.n	8023758 <__sfputs_r+0x12>
 8023754:	2000      	movs	r0, #0
 8023756:	e007      	b.n	8023768 <__sfputs_r+0x22>
 8023758:	f814 1b01 	ldrb.w	r1, [r4], #1
 802375c:	463a      	mov	r2, r7
 802375e:	4630      	mov	r0, r6
 8023760:	f7ff ffda 	bl	8023718 <__sfputc_r>
 8023764:	1c43      	adds	r3, r0, #1
 8023766:	d1f3      	bne.n	8023750 <__sfputs_r+0xa>
 8023768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802376c <_vfiprintf_r>:
 802376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023770:	460d      	mov	r5, r1
 8023772:	b09d      	sub	sp, #116	; 0x74
 8023774:	4614      	mov	r4, r2
 8023776:	4698      	mov	r8, r3
 8023778:	4606      	mov	r6, r0
 802377a:	b118      	cbz	r0, 8023784 <_vfiprintf_r+0x18>
 802377c:	6a03      	ldr	r3, [r0, #32]
 802377e:	b90b      	cbnz	r3, 8023784 <_vfiprintf_r+0x18>
 8023780:	f7fd f8e0 	bl	8020944 <__sinit>
 8023784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023786:	07d9      	lsls	r1, r3, #31
 8023788:	d405      	bmi.n	8023796 <_vfiprintf_r+0x2a>
 802378a:	89ab      	ldrh	r3, [r5, #12]
 802378c:	059a      	lsls	r2, r3, #22
 802378e:	d402      	bmi.n	8023796 <_vfiprintf_r+0x2a>
 8023790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023792:	f7fd fcd6 	bl	8021142 <__retarget_lock_acquire_recursive>
 8023796:	89ab      	ldrh	r3, [r5, #12]
 8023798:	071b      	lsls	r3, r3, #28
 802379a:	d501      	bpl.n	80237a0 <_vfiprintf_r+0x34>
 802379c:	692b      	ldr	r3, [r5, #16]
 802379e:	b99b      	cbnz	r3, 80237c8 <_vfiprintf_r+0x5c>
 80237a0:	4629      	mov	r1, r5
 80237a2:	4630      	mov	r0, r6
 80237a4:	f7fd fb88 	bl	8020eb8 <__swsetup_r>
 80237a8:	b170      	cbz	r0, 80237c8 <_vfiprintf_r+0x5c>
 80237aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80237ac:	07dc      	lsls	r4, r3, #31
 80237ae:	d504      	bpl.n	80237ba <_vfiprintf_r+0x4e>
 80237b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80237b4:	b01d      	add	sp, #116	; 0x74
 80237b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237ba:	89ab      	ldrh	r3, [r5, #12]
 80237bc:	0598      	lsls	r0, r3, #22
 80237be:	d4f7      	bmi.n	80237b0 <_vfiprintf_r+0x44>
 80237c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80237c2:	f7fd fcbf 	bl	8021144 <__retarget_lock_release_recursive>
 80237c6:	e7f3      	b.n	80237b0 <_vfiprintf_r+0x44>
 80237c8:	2300      	movs	r3, #0
 80237ca:	9309      	str	r3, [sp, #36]	; 0x24
 80237cc:	2320      	movs	r3, #32
 80237ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80237d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80237d6:	2330      	movs	r3, #48	; 0x30
 80237d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802398c <_vfiprintf_r+0x220>
 80237dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80237e0:	f04f 0901 	mov.w	r9, #1
 80237e4:	4623      	mov	r3, r4
 80237e6:	469a      	mov	sl, r3
 80237e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80237ec:	b10a      	cbz	r2, 80237f2 <_vfiprintf_r+0x86>
 80237ee:	2a25      	cmp	r2, #37	; 0x25
 80237f0:	d1f9      	bne.n	80237e6 <_vfiprintf_r+0x7a>
 80237f2:	ebba 0b04 	subs.w	fp, sl, r4
 80237f6:	d00b      	beq.n	8023810 <_vfiprintf_r+0xa4>
 80237f8:	465b      	mov	r3, fp
 80237fa:	4622      	mov	r2, r4
 80237fc:	4629      	mov	r1, r5
 80237fe:	4630      	mov	r0, r6
 8023800:	f7ff ffa1 	bl	8023746 <__sfputs_r>
 8023804:	3001      	adds	r0, #1
 8023806:	f000 80a9 	beq.w	802395c <_vfiprintf_r+0x1f0>
 802380a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802380c:	445a      	add	r2, fp
 802380e:	9209      	str	r2, [sp, #36]	; 0x24
 8023810:	f89a 3000 	ldrb.w	r3, [sl]
 8023814:	2b00      	cmp	r3, #0
 8023816:	f000 80a1 	beq.w	802395c <_vfiprintf_r+0x1f0>
 802381a:	2300      	movs	r3, #0
 802381c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023824:	f10a 0a01 	add.w	sl, sl, #1
 8023828:	9304      	str	r3, [sp, #16]
 802382a:	9307      	str	r3, [sp, #28]
 802382c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023830:	931a      	str	r3, [sp, #104]	; 0x68
 8023832:	4654      	mov	r4, sl
 8023834:	2205      	movs	r2, #5
 8023836:	f814 1b01 	ldrb.w	r1, [r4], #1
 802383a:	4854      	ldr	r0, [pc, #336]	; (802398c <_vfiprintf_r+0x220>)
 802383c:	f7dc fd10 	bl	8000260 <memchr>
 8023840:	9a04      	ldr	r2, [sp, #16]
 8023842:	b9d8      	cbnz	r0, 802387c <_vfiprintf_r+0x110>
 8023844:	06d1      	lsls	r1, r2, #27
 8023846:	bf44      	itt	mi
 8023848:	2320      	movmi	r3, #32
 802384a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802384e:	0713      	lsls	r3, r2, #28
 8023850:	bf44      	itt	mi
 8023852:	232b      	movmi	r3, #43	; 0x2b
 8023854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023858:	f89a 3000 	ldrb.w	r3, [sl]
 802385c:	2b2a      	cmp	r3, #42	; 0x2a
 802385e:	d015      	beq.n	802388c <_vfiprintf_r+0x120>
 8023860:	9a07      	ldr	r2, [sp, #28]
 8023862:	4654      	mov	r4, sl
 8023864:	2000      	movs	r0, #0
 8023866:	f04f 0c0a 	mov.w	ip, #10
 802386a:	4621      	mov	r1, r4
 802386c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023870:	3b30      	subs	r3, #48	; 0x30
 8023872:	2b09      	cmp	r3, #9
 8023874:	d94d      	bls.n	8023912 <_vfiprintf_r+0x1a6>
 8023876:	b1b0      	cbz	r0, 80238a6 <_vfiprintf_r+0x13a>
 8023878:	9207      	str	r2, [sp, #28]
 802387a:	e014      	b.n	80238a6 <_vfiprintf_r+0x13a>
 802387c:	eba0 0308 	sub.w	r3, r0, r8
 8023880:	fa09 f303 	lsl.w	r3, r9, r3
 8023884:	4313      	orrs	r3, r2
 8023886:	9304      	str	r3, [sp, #16]
 8023888:	46a2      	mov	sl, r4
 802388a:	e7d2      	b.n	8023832 <_vfiprintf_r+0xc6>
 802388c:	9b03      	ldr	r3, [sp, #12]
 802388e:	1d19      	adds	r1, r3, #4
 8023890:	681b      	ldr	r3, [r3, #0]
 8023892:	9103      	str	r1, [sp, #12]
 8023894:	2b00      	cmp	r3, #0
 8023896:	bfbb      	ittet	lt
 8023898:	425b      	neglt	r3, r3
 802389a:	f042 0202 	orrlt.w	r2, r2, #2
 802389e:	9307      	strge	r3, [sp, #28]
 80238a0:	9307      	strlt	r3, [sp, #28]
 80238a2:	bfb8      	it	lt
 80238a4:	9204      	strlt	r2, [sp, #16]
 80238a6:	7823      	ldrb	r3, [r4, #0]
 80238a8:	2b2e      	cmp	r3, #46	; 0x2e
 80238aa:	d10c      	bne.n	80238c6 <_vfiprintf_r+0x15a>
 80238ac:	7863      	ldrb	r3, [r4, #1]
 80238ae:	2b2a      	cmp	r3, #42	; 0x2a
 80238b0:	d134      	bne.n	802391c <_vfiprintf_r+0x1b0>
 80238b2:	9b03      	ldr	r3, [sp, #12]
 80238b4:	1d1a      	adds	r2, r3, #4
 80238b6:	681b      	ldr	r3, [r3, #0]
 80238b8:	9203      	str	r2, [sp, #12]
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	bfb8      	it	lt
 80238be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80238c2:	3402      	adds	r4, #2
 80238c4:	9305      	str	r3, [sp, #20]
 80238c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802399c <_vfiprintf_r+0x230>
 80238ca:	7821      	ldrb	r1, [r4, #0]
 80238cc:	2203      	movs	r2, #3
 80238ce:	4650      	mov	r0, sl
 80238d0:	f7dc fcc6 	bl	8000260 <memchr>
 80238d4:	b138      	cbz	r0, 80238e6 <_vfiprintf_r+0x17a>
 80238d6:	9b04      	ldr	r3, [sp, #16]
 80238d8:	eba0 000a 	sub.w	r0, r0, sl
 80238dc:	2240      	movs	r2, #64	; 0x40
 80238de:	4082      	lsls	r2, r0
 80238e0:	4313      	orrs	r3, r2
 80238e2:	3401      	adds	r4, #1
 80238e4:	9304      	str	r3, [sp, #16]
 80238e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238ea:	4829      	ldr	r0, [pc, #164]	; (8023990 <_vfiprintf_r+0x224>)
 80238ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80238f0:	2206      	movs	r2, #6
 80238f2:	f7dc fcb5 	bl	8000260 <memchr>
 80238f6:	2800      	cmp	r0, #0
 80238f8:	d03f      	beq.n	802397a <_vfiprintf_r+0x20e>
 80238fa:	4b26      	ldr	r3, [pc, #152]	; (8023994 <_vfiprintf_r+0x228>)
 80238fc:	bb1b      	cbnz	r3, 8023946 <_vfiprintf_r+0x1da>
 80238fe:	9b03      	ldr	r3, [sp, #12]
 8023900:	3307      	adds	r3, #7
 8023902:	f023 0307 	bic.w	r3, r3, #7
 8023906:	3308      	adds	r3, #8
 8023908:	9303      	str	r3, [sp, #12]
 802390a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802390c:	443b      	add	r3, r7
 802390e:	9309      	str	r3, [sp, #36]	; 0x24
 8023910:	e768      	b.n	80237e4 <_vfiprintf_r+0x78>
 8023912:	fb0c 3202 	mla	r2, ip, r2, r3
 8023916:	460c      	mov	r4, r1
 8023918:	2001      	movs	r0, #1
 802391a:	e7a6      	b.n	802386a <_vfiprintf_r+0xfe>
 802391c:	2300      	movs	r3, #0
 802391e:	3401      	adds	r4, #1
 8023920:	9305      	str	r3, [sp, #20]
 8023922:	4619      	mov	r1, r3
 8023924:	f04f 0c0a 	mov.w	ip, #10
 8023928:	4620      	mov	r0, r4
 802392a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802392e:	3a30      	subs	r2, #48	; 0x30
 8023930:	2a09      	cmp	r2, #9
 8023932:	d903      	bls.n	802393c <_vfiprintf_r+0x1d0>
 8023934:	2b00      	cmp	r3, #0
 8023936:	d0c6      	beq.n	80238c6 <_vfiprintf_r+0x15a>
 8023938:	9105      	str	r1, [sp, #20]
 802393a:	e7c4      	b.n	80238c6 <_vfiprintf_r+0x15a>
 802393c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023940:	4604      	mov	r4, r0
 8023942:	2301      	movs	r3, #1
 8023944:	e7f0      	b.n	8023928 <_vfiprintf_r+0x1bc>
 8023946:	ab03      	add	r3, sp, #12
 8023948:	9300      	str	r3, [sp, #0]
 802394a:	462a      	mov	r2, r5
 802394c:	4b12      	ldr	r3, [pc, #72]	; (8023998 <_vfiprintf_r+0x22c>)
 802394e:	a904      	add	r1, sp, #16
 8023950:	4630      	mov	r0, r6
 8023952:	f7fc f9bd 	bl	801fcd0 <_printf_float>
 8023956:	4607      	mov	r7, r0
 8023958:	1c78      	adds	r0, r7, #1
 802395a:	d1d6      	bne.n	802390a <_vfiprintf_r+0x19e>
 802395c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802395e:	07d9      	lsls	r1, r3, #31
 8023960:	d405      	bmi.n	802396e <_vfiprintf_r+0x202>
 8023962:	89ab      	ldrh	r3, [r5, #12]
 8023964:	059a      	lsls	r2, r3, #22
 8023966:	d402      	bmi.n	802396e <_vfiprintf_r+0x202>
 8023968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802396a:	f7fd fbeb 	bl	8021144 <__retarget_lock_release_recursive>
 802396e:	89ab      	ldrh	r3, [r5, #12]
 8023970:	065b      	lsls	r3, r3, #25
 8023972:	f53f af1d 	bmi.w	80237b0 <_vfiprintf_r+0x44>
 8023976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023978:	e71c      	b.n	80237b4 <_vfiprintf_r+0x48>
 802397a:	ab03      	add	r3, sp, #12
 802397c:	9300      	str	r3, [sp, #0]
 802397e:	462a      	mov	r2, r5
 8023980:	4b05      	ldr	r3, [pc, #20]	; (8023998 <_vfiprintf_r+0x22c>)
 8023982:	a904      	add	r1, sp, #16
 8023984:	4630      	mov	r0, r6
 8023986:	f7fc fc2b 	bl	80201e0 <_printf_i>
 802398a:	e7e4      	b.n	8023956 <_vfiprintf_r+0x1ea>
 802398c:	08026100 	.word	0x08026100
 8023990:	0802610a 	.word	0x0802610a
 8023994:	0801fcd1 	.word	0x0801fcd1
 8023998:	08023747 	.word	0x08023747
 802399c:	08026106 	.word	0x08026106

080239a0 <__sflush_r>:
 80239a0:	898a      	ldrh	r2, [r1, #12]
 80239a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239a6:	4605      	mov	r5, r0
 80239a8:	0710      	lsls	r0, r2, #28
 80239aa:	460c      	mov	r4, r1
 80239ac:	d458      	bmi.n	8023a60 <__sflush_r+0xc0>
 80239ae:	684b      	ldr	r3, [r1, #4]
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	dc05      	bgt.n	80239c0 <__sflush_r+0x20>
 80239b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80239b6:	2b00      	cmp	r3, #0
 80239b8:	dc02      	bgt.n	80239c0 <__sflush_r+0x20>
 80239ba:	2000      	movs	r0, #0
 80239bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80239c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80239c2:	2e00      	cmp	r6, #0
 80239c4:	d0f9      	beq.n	80239ba <__sflush_r+0x1a>
 80239c6:	2300      	movs	r3, #0
 80239c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80239cc:	682f      	ldr	r7, [r5, #0]
 80239ce:	6a21      	ldr	r1, [r4, #32]
 80239d0:	602b      	str	r3, [r5, #0]
 80239d2:	d032      	beq.n	8023a3a <__sflush_r+0x9a>
 80239d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80239d6:	89a3      	ldrh	r3, [r4, #12]
 80239d8:	075a      	lsls	r2, r3, #29
 80239da:	d505      	bpl.n	80239e8 <__sflush_r+0x48>
 80239dc:	6863      	ldr	r3, [r4, #4]
 80239de:	1ac0      	subs	r0, r0, r3
 80239e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80239e2:	b10b      	cbz	r3, 80239e8 <__sflush_r+0x48>
 80239e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80239e6:	1ac0      	subs	r0, r0, r3
 80239e8:	2300      	movs	r3, #0
 80239ea:	4602      	mov	r2, r0
 80239ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80239ee:	6a21      	ldr	r1, [r4, #32]
 80239f0:	4628      	mov	r0, r5
 80239f2:	47b0      	blx	r6
 80239f4:	1c43      	adds	r3, r0, #1
 80239f6:	89a3      	ldrh	r3, [r4, #12]
 80239f8:	d106      	bne.n	8023a08 <__sflush_r+0x68>
 80239fa:	6829      	ldr	r1, [r5, #0]
 80239fc:	291d      	cmp	r1, #29
 80239fe:	d82b      	bhi.n	8023a58 <__sflush_r+0xb8>
 8023a00:	4a29      	ldr	r2, [pc, #164]	; (8023aa8 <__sflush_r+0x108>)
 8023a02:	410a      	asrs	r2, r1
 8023a04:	07d6      	lsls	r6, r2, #31
 8023a06:	d427      	bmi.n	8023a58 <__sflush_r+0xb8>
 8023a08:	2200      	movs	r2, #0
 8023a0a:	6062      	str	r2, [r4, #4]
 8023a0c:	04d9      	lsls	r1, r3, #19
 8023a0e:	6922      	ldr	r2, [r4, #16]
 8023a10:	6022      	str	r2, [r4, #0]
 8023a12:	d504      	bpl.n	8023a1e <__sflush_r+0x7e>
 8023a14:	1c42      	adds	r2, r0, #1
 8023a16:	d101      	bne.n	8023a1c <__sflush_r+0x7c>
 8023a18:	682b      	ldr	r3, [r5, #0]
 8023a1a:	b903      	cbnz	r3, 8023a1e <__sflush_r+0x7e>
 8023a1c:	6560      	str	r0, [r4, #84]	; 0x54
 8023a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023a20:	602f      	str	r7, [r5, #0]
 8023a22:	2900      	cmp	r1, #0
 8023a24:	d0c9      	beq.n	80239ba <__sflush_r+0x1a>
 8023a26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023a2a:	4299      	cmp	r1, r3
 8023a2c:	d002      	beq.n	8023a34 <__sflush_r+0x94>
 8023a2e:	4628      	mov	r0, r5
 8023a30:	f7fe f9c6 	bl	8021dc0 <_free_r>
 8023a34:	2000      	movs	r0, #0
 8023a36:	6360      	str	r0, [r4, #52]	; 0x34
 8023a38:	e7c0      	b.n	80239bc <__sflush_r+0x1c>
 8023a3a:	2301      	movs	r3, #1
 8023a3c:	4628      	mov	r0, r5
 8023a3e:	47b0      	blx	r6
 8023a40:	1c41      	adds	r1, r0, #1
 8023a42:	d1c8      	bne.n	80239d6 <__sflush_r+0x36>
 8023a44:	682b      	ldr	r3, [r5, #0]
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d0c5      	beq.n	80239d6 <__sflush_r+0x36>
 8023a4a:	2b1d      	cmp	r3, #29
 8023a4c:	d001      	beq.n	8023a52 <__sflush_r+0xb2>
 8023a4e:	2b16      	cmp	r3, #22
 8023a50:	d101      	bne.n	8023a56 <__sflush_r+0xb6>
 8023a52:	602f      	str	r7, [r5, #0]
 8023a54:	e7b1      	b.n	80239ba <__sflush_r+0x1a>
 8023a56:	89a3      	ldrh	r3, [r4, #12]
 8023a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023a5c:	81a3      	strh	r3, [r4, #12]
 8023a5e:	e7ad      	b.n	80239bc <__sflush_r+0x1c>
 8023a60:	690f      	ldr	r7, [r1, #16]
 8023a62:	2f00      	cmp	r7, #0
 8023a64:	d0a9      	beq.n	80239ba <__sflush_r+0x1a>
 8023a66:	0793      	lsls	r3, r2, #30
 8023a68:	680e      	ldr	r6, [r1, #0]
 8023a6a:	bf08      	it	eq
 8023a6c:	694b      	ldreq	r3, [r1, #20]
 8023a6e:	600f      	str	r7, [r1, #0]
 8023a70:	bf18      	it	ne
 8023a72:	2300      	movne	r3, #0
 8023a74:	eba6 0807 	sub.w	r8, r6, r7
 8023a78:	608b      	str	r3, [r1, #8]
 8023a7a:	f1b8 0f00 	cmp.w	r8, #0
 8023a7e:	dd9c      	ble.n	80239ba <__sflush_r+0x1a>
 8023a80:	6a21      	ldr	r1, [r4, #32]
 8023a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023a84:	4643      	mov	r3, r8
 8023a86:	463a      	mov	r2, r7
 8023a88:	4628      	mov	r0, r5
 8023a8a:	47b0      	blx	r6
 8023a8c:	2800      	cmp	r0, #0
 8023a8e:	dc06      	bgt.n	8023a9e <__sflush_r+0xfe>
 8023a90:	89a3      	ldrh	r3, [r4, #12]
 8023a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023a96:	81a3      	strh	r3, [r4, #12]
 8023a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023a9c:	e78e      	b.n	80239bc <__sflush_r+0x1c>
 8023a9e:	4407      	add	r7, r0
 8023aa0:	eba8 0800 	sub.w	r8, r8, r0
 8023aa4:	e7e9      	b.n	8023a7a <__sflush_r+0xda>
 8023aa6:	bf00      	nop
 8023aa8:	dfbffffe 	.word	0xdfbffffe

08023aac <_fflush_r>:
 8023aac:	b538      	push	{r3, r4, r5, lr}
 8023aae:	690b      	ldr	r3, [r1, #16]
 8023ab0:	4605      	mov	r5, r0
 8023ab2:	460c      	mov	r4, r1
 8023ab4:	b913      	cbnz	r3, 8023abc <_fflush_r+0x10>
 8023ab6:	2500      	movs	r5, #0
 8023ab8:	4628      	mov	r0, r5
 8023aba:	bd38      	pop	{r3, r4, r5, pc}
 8023abc:	b118      	cbz	r0, 8023ac6 <_fflush_r+0x1a>
 8023abe:	6a03      	ldr	r3, [r0, #32]
 8023ac0:	b90b      	cbnz	r3, 8023ac6 <_fflush_r+0x1a>
 8023ac2:	f7fc ff3f 	bl	8020944 <__sinit>
 8023ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	d0f3      	beq.n	8023ab6 <_fflush_r+0xa>
 8023ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023ad0:	07d0      	lsls	r0, r2, #31
 8023ad2:	d404      	bmi.n	8023ade <_fflush_r+0x32>
 8023ad4:	0599      	lsls	r1, r3, #22
 8023ad6:	d402      	bmi.n	8023ade <_fflush_r+0x32>
 8023ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023ada:	f7fd fb32 	bl	8021142 <__retarget_lock_acquire_recursive>
 8023ade:	4628      	mov	r0, r5
 8023ae0:	4621      	mov	r1, r4
 8023ae2:	f7ff ff5d 	bl	80239a0 <__sflush_r>
 8023ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ae8:	07da      	lsls	r2, r3, #31
 8023aea:	4605      	mov	r5, r0
 8023aec:	d4e4      	bmi.n	8023ab8 <_fflush_r+0xc>
 8023aee:	89a3      	ldrh	r3, [r4, #12]
 8023af0:	059b      	lsls	r3, r3, #22
 8023af2:	d4e1      	bmi.n	8023ab8 <_fflush_r+0xc>
 8023af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023af6:	f7fd fb25 	bl	8021144 <__retarget_lock_release_recursive>
 8023afa:	e7dd      	b.n	8023ab8 <_fflush_r+0xc>

08023afc <fiprintf>:
 8023afc:	b40e      	push	{r1, r2, r3}
 8023afe:	b503      	push	{r0, r1, lr}
 8023b00:	4601      	mov	r1, r0
 8023b02:	ab03      	add	r3, sp, #12
 8023b04:	4805      	ldr	r0, [pc, #20]	; (8023b1c <fiprintf+0x20>)
 8023b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b0a:	6800      	ldr	r0, [r0, #0]
 8023b0c:	9301      	str	r3, [sp, #4]
 8023b0e:	f7ff fe2d 	bl	802376c <_vfiprintf_r>
 8023b12:	b002      	add	sp, #8
 8023b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8023b18:	b003      	add	sp, #12
 8023b1a:	4770      	bx	lr
 8023b1c:	200009d8 	.word	0x200009d8

08023b20 <__swhatbuf_r>:
 8023b20:	b570      	push	{r4, r5, r6, lr}
 8023b22:	460c      	mov	r4, r1
 8023b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b28:	2900      	cmp	r1, #0
 8023b2a:	b096      	sub	sp, #88	; 0x58
 8023b2c:	4615      	mov	r5, r2
 8023b2e:	461e      	mov	r6, r3
 8023b30:	da0d      	bge.n	8023b4e <__swhatbuf_r+0x2e>
 8023b32:	89a3      	ldrh	r3, [r4, #12]
 8023b34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023b38:	f04f 0100 	mov.w	r1, #0
 8023b3c:	bf0c      	ite	eq
 8023b3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023b42:	2340      	movne	r3, #64	; 0x40
 8023b44:	2000      	movs	r0, #0
 8023b46:	6031      	str	r1, [r6, #0]
 8023b48:	602b      	str	r3, [r5, #0]
 8023b4a:	b016      	add	sp, #88	; 0x58
 8023b4c:	bd70      	pop	{r4, r5, r6, pc}
 8023b4e:	466a      	mov	r2, sp
 8023b50:	f000 f848 	bl	8023be4 <_fstat_r>
 8023b54:	2800      	cmp	r0, #0
 8023b56:	dbec      	blt.n	8023b32 <__swhatbuf_r+0x12>
 8023b58:	9901      	ldr	r1, [sp, #4]
 8023b5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023b5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023b62:	4259      	negs	r1, r3
 8023b64:	4159      	adcs	r1, r3
 8023b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023b6a:	e7eb      	b.n	8023b44 <__swhatbuf_r+0x24>

08023b6c <__smakebuf_r>:
 8023b6c:	898b      	ldrh	r3, [r1, #12]
 8023b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023b70:	079d      	lsls	r5, r3, #30
 8023b72:	4606      	mov	r6, r0
 8023b74:	460c      	mov	r4, r1
 8023b76:	d507      	bpl.n	8023b88 <__smakebuf_r+0x1c>
 8023b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023b7c:	6023      	str	r3, [r4, #0]
 8023b7e:	6123      	str	r3, [r4, #16]
 8023b80:	2301      	movs	r3, #1
 8023b82:	6163      	str	r3, [r4, #20]
 8023b84:	b002      	add	sp, #8
 8023b86:	bd70      	pop	{r4, r5, r6, pc}
 8023b88:	ab01      	add	r3, sp, #4
 8023b8a:	466a      	mov	r2, sp
 8023b8c:	f7ff ffc8 	bl	8023b20 <__swhatbuf_r>
 8023b90:	9900      	ldr	r1, [sp, #0]
 8023b92:	4605      	mov	r5, r0
 8023b94:	4630      	mov	r0, r6
 8023b96:	f7fb fe5d 	bl	801f854 <_malloc_r>
 8023b9a:	b948      	cbnz	r0, 8023bb0 <__smakebuf_r+0x44>
 8023b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ba0:	059a      	lsls	r2, r3, #22
 8023ba2:	d4ef      	bmi.n	8023b84 <__smakebuf_r+0x18>
 8023ba4:	f023 0303 	bic.w	r3, r3, #3
 8023ba8:	f043 0302 	orr.w	r3, r3, #2
 8023bac:	81a3      	strh	r3, [r4, #12]
 8023bae:	e7e3      	b.n	8023b78 <__smakebuf_r+0xc>
 8023bb0:	89a3      	ldrh	r3, [r4, #12]
 8023bb2:	6020      	str	r0, [r4, #0]
 8023bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023bb8:	81a3      	strh	r3, [r4, #12]
 8023bba:	9b00      	ldr	r3, [sp, #0]
 8023bbc:	6163      	str	r3, [r4, #20]
 8023bbe:	9b01      	ldr	r3, [sp, #4]
 8023bc0:	6120      	str	r0, [r4, #16]
 8023bc2:	b15b      	cbz	r3, 8023bdc <__smakebuf_r+0x70>
 8023bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023bc8:	4630      	mov	r0, r6
 8023bca:	f000 f81d 	bl	8023c08 <_isatty_r>
 8023bce:	b128      	cbz	r0, 8023bdc <__smakebuf_r+0x70>
 8023bd0:	89a3      	ldrh	r3, [r4, #12]
 8023bd2:	f023 0303 	bic.w	r3, r3, #3
 8023bd6:	f043 0301 	orr.w	r3, r3, #1
 8023bda:	81a3      	strh	r3, [r4, #12]
 8023bdc:	89a3      	ldrh	r3, [r4, #12]
 8023bde:	431d      	orrs	r5, r3
 8023be0:	81a5      	strh	r5, [r4, #12]
 8023be2:	e7cf      	b.n	8023b84 <__smakebuf_r+0x18>

08023be4 <_fstat_r>:
 8023be4:	b538      	push	{r3, r4, r5, lr}
 8023be6:	4d07      	ldr	r5, [pc, #28]	; (8023c04 <_fstat_r+0x20>)
 8023be8:	2300      	movs	r3, #0
 8023bea:	4604      	mov	r4, r0
 8023bec:	4608      	mov	r0, r1
 8023bee:	4611      	mov	r1, r2
 8023bf0:	602b      	str	r3, [r5, #0]
 8023bf2:	f7e0 f908 	bl	8003e06 <_fstat>
 8023bf6:	1c43      	adds	r3, r0, #1
 8023bf8:	d102      	bne.n	8023c00 <_fstat_r+0x1c>
 8023bfa:	682b      	ldr	r3, [r5, #0]
 8023bfc:	b103      	cbz	r3, 8023c00 <_fstat_r+0x1c>
 8023bfe:	6023      	str	r3, [r4, #0]
 8023c00:	bd38      	pop	{r3, r4, r5, pc}
 8023c02:	bf00      	nop
 8023c04:	20017278 	.word	0x20017278

08023c08 <_isatty_r>:
 8023c08:	b538      	push	{r3, r4, r5, lr}
 8023c0a:	4d06      	ldr	r5, [pc, #24]	; (8023c24 <_isatty_r+0x1c>)
 8023c0c:	2300      	movs	r3, #0
 8023c0e:	4604      	mov	r4, r0
 8023c10:	4608      	mov	r0, r1
 8023c12:	602b      	str	r3, [r5, #0]
 8023c14:	f7e0 f907 	bl	8003e26 <_isatty>
 8023c18:	1c43      	adds	r3, r0, #1
 8023c1a:	d102      	bne.n	8023c22 <_isatty_r+0x1a>
 8023c1c:	682b      	ldr	r3, [r5, #0]
 8023c1e:	b103      	cbz	r3, 8023c22 <_isatty_r+0x1a>
 8023c20:	6023      	str	r3, [r4, #0]
 8023c22:	bd38      	pop	{r3, r4, r5, pc}
 8023c24:	20017278 	.word	0x20017278

08023c28 <nan>:
 8023c28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023c30 <nan+0x8>
 8023c2c:	4770      	bx	lr
 8023c2e:	bf00      	nop
 8023c30:	00000000 	.word	0x00000000
 8023c34:	7ff80000 	.word	0x7ff80000

08023c38 <abort>:
 8023c38:	b508      	push	{r3, lr}
 8023c3a:	2006      	movs	r0, #6
 8023c3c:	f000 fba0 	bl	8024380 <raise>
 8023c40:	2001      	movs	r0, #1
 8023c42:	f7e0 f891 	bl	8003d68 <_exit>

08023c46 <rshift>:
 8023c46:	6903      	ldr	r3, [r0, #16]
 8023c48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8023c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023c50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8023c54:	f100 0414 	add.w	r4, r0, #20
 8023c58:	dd45      	ble.n	8023ce6 <rshift+0xa0>
 8023c5a:	f011 011f 	ands.w	r1, r1, #31
 8023c5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8023c62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8023c66:	d10c      	bne.n	8023c82 <rshift+0x3c>
 8023c68:	f100 0710 	add.w	r7, r0, #16
 8023c6c:	4629      	mov	r1, r5
 8023c6e:	42b1      	cmp	r1, r6
 8023c70:	d334      	bcc.n	8023cdc <rshift+0x96>
 8023c72:	1a9b      	subs	r3, r3, r2
 8023c74:	009b      	lsls	r3, r3, #2
 8023c76:	1eea      	subs	r2, r5, #3
 8023c78:	4296      	cmp	r6, r2
 8023c7a:	bf38      	it	cc
 8023c7c:	2300      	movcc	r3, #0
 8023c7e:	4423      	add	r3, r4
 8023c80:	e015      	b.n	8023cae <rshift+0x68>
 8023c82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8023c86:	f1c1 0820 	rsb	r8, r1, #32
 8023c8a:	40cf      	lsrs	r7, r1
 8023c8c:	f105 0e04 	add.w	lr, r5, #4
 8023c90:	46a1      	mov	r9, r4
 8023c92:	4576      	cmp	r6, lr
 8023c94:	46f4      	mov	ip, lr
 8023c96:	d815      	bhi.n	8023cc4 <rshift+0x7e>
 8023c98:	1a9a      	subs	r2, r3, r2
 8023c9a:	0092      	lsls	r2, r2, #2
 8023c9c:	3a04      	subs	r2, #4
 8023c9e:	3501      	adds	r5, #1
 8023ca0:	42ae      	cmp	r6, r5
 8023ca2:	bf38      	it	cc
 8023ca4:	2200      	movcc	r2, #0
 8023ca6:	18a3      	adds	r3, r4, r2
 8023ca8:	50a7      	str	r7, [r4, r2]
 8023caa:	b107      	cbz	r7, 8023cae <rshift+0x68>
 8023cac:	3304      	adds	r3, #4
 8023cae:	1b1a      	subs	r2, r3, r4
 8023cb0:	42a3      	cmp	r3, r4
 8023cb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8023cb6:	bf08      	it	eq
 8023cb8:	2300      	moveq	r3, #0
 8023cba:	6102      	str	r2, [r0, #16]
 8023cbc:	bf08      	it	eq
 8023cbe:	6143      	streq	r3, [r0, #20]
 8023cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023cc4:	f8dc c000 	ldr.w	ip, [ip]
 8023cc8:	fa0c fc08 	lsl.w	ip, ip, r8
 8023ccc:	ea4c 0707 	orr.w	r7, ip, r7
 8023cd0:	f849 7b04 	str.w	r7, [r9], #4
 8023cd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023cd8:	40cf      	lsrs	r7, r1
 8023cda:	e7da      	b.n	8023c92 <rshift+0x4c>
 8023cdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8023ce0:	f847 cf04 	str.w	ip, [r7, #4]!
 8023ce4:	e7c3      	b.n	8023c6e <rshift+0x28>
 8023ce6:	4623      	mov	r3, r4
 8023ce8:	e7e1      	b.n	8023cae <rshift+0x68>

08023cea <__hexdig_fun>:
 8023cea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8023cee:	2b09      	cmp	r3, #9
 8023cf0:	d802      	bhi.n	8023cf8 <__hexdig_fun+0xe>
 8023cf2:	3820      	subs	r0, #32
 8023cf4:	b2c0      	uxtb	r0, r0
 8023cf6:	4770      	bx	lr
 8023cf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8023cfc:	2b05      	cmp	r3, #5
 8023cfe:	d801      	bhi.n	8023d04 <__hexdig_fun+0x1a>
 8023d00:	3847      	subs	r0, #71	; 0x47
 8023d02:	e7f7      	b.n	8023cf4 <__hexdig_fun+0xa>
 8023d04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023d08:	2b05      	cmp	r3, #5
 8023d0a:	d801      	bhi.n	8023d10 <__hexdig_fun+0x26>
 8023d0c:	3827      	subs	r0, #39	; 0x27
 8023d0e:	e7f1      	b.n	8023cf4 <__hexdig_fun+0xa>
 8023d10:	2000      	movs	r0, #0
 8023d12:	4770      	bx	lr

08023d14 <__gethex>:
 8023d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d18:	4617      	mov	r7, r2
 8023d1a:	680a      	ldr	r2, [r1, #0]
 8023d1c:	b085      	sub	sp, #20
 8023d1e:	f102 0b02 	add.w	fp, r2, #2
 8023d22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023d26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023d2a:	4681      	mov	r9, r0
 8023d2c:	468a      	mov	sl, r1
 8023d2e:	9302      	str	r3, [sp, #8]
 8023d30:	32fe      	adds	r2, #254	; 0xfe
 8023d32:	eb02 030b 	add.w	r3, r2, fp
 8023d36:	46d8      	mov	r8, fp
 8023d38:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8023d3c:	9301      	str	r3, [sp, #4]
 8023d3e:	2830      	cmp	r0, #48	; 0x30
 8023d40:	d0f7      	beq.n	8023d32 <__gethex+0x1e>
 8023d42:	f7ff ffd2 	bl	8023cea <__hexdig_fun>
 8023d46:	4604      	mov	r4, r0
 8023d48:	2800      	cmp	r0, #0
 8023d4a:	d138      	bne.n	8023dbe <__gethex+0xaa>
 8023d4c:	49a7      	ldr	r1, [pc, #668]	; (8023fec <__gethex+0x2d8>)
 8023d4e:	2201      	movs	r2, #1
 8023d50:	4640      	mov	r0, r8
 8023d52:	f7fd f948 	bl	8020fe6 <strncmp>
 8023d56:	4606      	mov	r6, r0
 8023d58:	2800      	cmp	r0, #0
 8023d5a:	d169      	bne.n	8023e30 <__gethex+0x11c>
 8023d5c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023d60:	465d      	mov	r5, fp
 8023d62:	f7ff ffc2 	bl	8023cea <__hexdig_fun>
 8023d66:	2800      	cmp	r0, #0
 8023d68:	d064      	beq.n	8023e34 <__gethex+0x120>
 8023d6a:	465a      	mov	r2, fp
 8023d6c:	7810      	ldrb	r0, [r2, #0]
 8023d6e:	2830      	cmp	r0, #48	; 0x30
 8023d70:	4690      	mov	r8, r2
 8023d72:	f102 0201 	add.w	r2, r2, #1
 8023d76:	d0f9      	beq.n	8023d6c <__gethex+0x58>
 8023d78:	f7ff ffb7 	bl	8023cea <__hexdig_fun>
 8023d7c:	2301      	movs	r3, #1
 8023d7e:	fab0 f480 	clz	r4, r0
 8023d82:	0964      	lsrs	r4, r4, #5
 8023d84:	465e      	mov	r6, fp
 8023d86:	9301      	str	r3, [sp, #4]
 8023d88:	4642      	mov	r2, r8
 8023d8a:	4615      	mov	r5, r2
 8023d8c:	3201      	adds	r2, #1
 8023d8e:	7828      	ldrb	r0, [r5, #0]
 8023d90:	f7ff ffab 	bl	8023cea <__hexdig_fun>
 8023d94:	2800      	cmp	r0, #0
 8023d96:	d1f8      	bne.n	8023d8a <__gethex+0x76>
 8023d98:	4994      	ldr	r1, [pc, #592]	; (8023fec <__gethex+0x2d8>)
 8023d9a:	2201      	movs	r2, #1
 8023d9c:	4628      	mov	r0, r5
 8023d9e:	f7fd f922 	bl	8020fe6 <strncmp>
 8023da2:	b978      	cbnz	r0, 8023dc4 <__gethex+0xb0>
 8023da4:	b946      	cbnz	r6, 8023db8 <__gethex+0xa4>
 8023da6:	1c6e      	adds	r6, r5, #1
 8023da8:	4632      	mov	r2, r6
 8023daa:	4615      	mov	r5, r2
 8023dac:	3201      	adds	r2, #1
 8023dae:	7828      	ldrb	r0, [r5, #0]
 8023db0:	f7ff ff9b 	bl	8023cea <__hexdig_fun>
 8023db4:	2800      	cmp	r0, #0
 8023db6:	d1f8      	bne.n	8023daa <__gethex+0x96>
 8023db8:	1b73      	subs	r3, r6, r5
 8023dba:	009e      	lsls	r6, r3, #2
 8023dbc:	e004      	b.n	8023dc8 <__gethex+0xb4>
 8023dbe:	2400      	movs	r4, #0
 8023dc0:	4626      	mov	r6, r4
 8023dc2:	e7e1      	b.n	8023d88 <__gethex+0x74>
 8023dc4:	2e00      	cmp	r6, #0
 8023dc6:	d1f7      	bne.n	8023db8 <__gethex+0xa4>
 8023dc8:	782b      	ldrb	r3, [r5, #0]
 8023dca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023dce:	2b50      	cmp	r3, #80	; 0x50
 8023dd0:	d13d      	bne.n	8023e4e <__gethex+0x13a>
 8023dd2:	786b      	ldrb	r3, [r5, #1]
 8023dd4:	2b2b      	cmp	r3, #43	; 0x2b
 8023dd6:	d02f      	beq.n	8023e38 <__gethex+0x124>
 8023dd8:	2b2d      	cmp	r3, #45	; 0x2d
 8023dda:	d031      	beq.n	8023e40 <__gethex+0x12c>
 8023ddc:	1c69      	adds	r1, r5, #1
 8023dde:	f04f 0b00 	mov.w	fp, #0
 8023de2:	7808      	ldrb	r0, [r1, #0]
 8023de4:	f7ff ff81 	bl	8023cea <__hexdig_fun>
 8023de8:	1e42      	subs	r2, r0, #1
 8023dea:	b2d2      	uxtb	r2, r2
 8023dec:	2a18      	cmp	r2, #24
 8023dee:	d82e      	bhi.n	8023e4e <__gethex+0x13a>
 8023df0:	f1a0 0210 	sub.w	r2, r0, #16
 8023df4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023df8:	f7ff ff77 	bl	8023cea <__hexdig_fun>
 8023dfc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023e00:	fa5f fc8c 	uxtb.w	ip, ip
 8023e04:	f1bc 0f18 	cmp.w	ip, #24
 8023e08:	d91d      	bls.n	8023e46 <__gethex+0x132>
 8023e0a:	f1bb 0f00 	cmp.w	fp, #0
 8023e0e:	d000      	beq.n	8023e12 <__gethex+0xfe>
 8023e10:	4252      	negs	r2, r2
 8023e12:	4416      	add	r6, r2
 8023e14:	f8ca 1000 	str.w	r1, [sl]
 8023e18:	b1dc      	cbz	r4, 8023e52 <__gethex+0x13e>
 8023e1a:	9b01      	ldr	r3, [sp, #4]
 8023e1c:	2b00      	cmp	r3, #0
 8023e1e:	bf14      	ite	ne
 8023e20:	f04f 0800 	movne.w	r8, #0
 8023e24:	f04f 0806 	moveq.w	r8, #6
 8023e28:	4640      	mov	r0, r8
 8023e2a:	b005      	add	sp, #20
 8023e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e30:	4645      	mov	r5, r8
 8023e32:	4626      	mov	r6, r4
 8023e34:	2401      	movs	r4, #1
 8023e36:	e7c7      	b.n	8023dc8 <__gethex+0xb4>
 8023e38:	f04f 0b00 	mov.w	fp, #0
 8023e3c:	1ca9      	adds	r1, r5, #2
 8023e3e:	e7d0      	b.n	8023de2 <__gethex+0xce>
 8023e40:	f04f 0b01 	mov.w	fp, #1
 8023e44:	e7fa      	b.n	8023e3c <__gethex+0x128>
 8023e46:	230a      	movs	r3, #10
 8023e48:	fb03 0002 	mla	r0, r3, r2, r0
 8023e4c:	e7d0      	b.n	8023df0 <__gethex+0xdc>
 8023e4e:	4629      	mov	r1, r5
 8023e50:	e7e0      	b.n	8023e14 <__gethex+0x100>
 8023e52:	eba5 0308 	sub.w	r3, r5, r8
 8023e56:	3b01      	subs	r3, #1
 8023e58:	4621      	mov	r1, r4
 8023e5a:	2b07      	cmp	r3, #7
 8023e5c:	dc0a      	bgt.n	8023e74 <__gethex+0x160>
 8023e5e:	4648      	mov	r0, r9
 8023e60:	f7fd fffa 	bl	8021e58 <_Balloc>
 8023e64:	4604      	mov	r4, r0
 8023e66:	b940      	cbnz	r0, 8023e7a <__gethex+0x166>
 8023e68:	4b61      	ldr	r3, [pc, #388]	; (8023ff0 <__gethex+0x2dc>)
 8023e6a:	4602      	mov	r2, r0
 8023e6c:	21e4      	movs	r1, #228	; 0xe4
 8023e6e:	4861      	ldr	r0, [pc, #388]	; (8023ff4 <__gethex+0x2e0>)
 8023e70:	f7fd f986 	bl	8021180 <__assert_func>
 8023e74:	3101      	adds	r1, #1
 8023e76:	105b      	asrs	r3, r3, #1
 8023e78:	e7ef      	b.n	8023e5a <__gethex+0x146>
 8023e7a:	f100 0a14 	add.w	sl, r0, #20
 8023e7e:	2300      	movs	r3, #0
 8023e80:	495a      	ldr	r1, [pc, #360]	; (8023fec <__gethex+0x2d8>)
 8023e82:	f8cd a004 	str.w	sl, [sp, #4]
 8023e86:	469b      	mov	fp, r3
 8023e88:	45a8      	cmp	r8, r5
 8023e8a:	d342      	bcc.n	8023f12 <__gethex+0x1fe>
 8023e8c:	9801      	ldr	r0, [sp, #4]
 8023e8e:	f840 bb04 	str.w	fp, [r0], #4
 8023e92:	eba0 000a 	sub.w	r0, r0, sl
 8023e96:	1080      	asrs	r0, r0, #2
 8023e98:	6120      	str	r0, [r4, #16]
 8023e9a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8023e9e:	4658      	mov	r0, fp
 8023ea0:	f7fe f8cc 	bl	802203c <__hi0bits>
 8023ea4:	683d      	ldr	r5, [r7, #0]
 8023ea6:	eba8 0000 	sub.w	r0, r8, r0
 8023eaa:	42a8      	cmp	r0, r5
 8023eac:	dd59      	ble.n	8023f62 <__gethex+0x24e>
 8023eae:	eba0 0805 	sub.w	r8, r0, r5
 8023eb2:	4641      	mov	r1, r8
 8023eb4:	4620      	mov	r0, r4
 8023eb6:	f7fe fc58 	bl	802276a <__any_on>
 8023eba:	4683      	mov	fp, r0
 8023ebc:	b1b8      	cbz	r0, 8023eee <__gethex+0x1da>
 8023ebe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8023ec2:	1159      	asrs	r1, r3, #5
 8023ec4:	f003 021f 	and.w	r2, r3, #31
 8023ec8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023ecc:	f04f 0b01 	mov.w	fp, #1
 8023ed0:	fa0b f202 	lsl.w	r2, fp, r2
 8023ed4:	420a      	tst	r2, r1
 8023ed6:	d00a      	beq.n	8023eee <__gethex+0x1da>
 8023ed8:	455b      	cmp	r3, fp
 8023eda:	dd06      	ble.n	8023eea <__gethex+0x1d6>
 8023edc:	f1a8 0102 	sub.w	r1, r8, #2
 8023ee0:	4620      	mov	r0, r4
 8023ee2:	f7fe fc42 	bl	802276a <__any_on>
 8023ee6:	2800      	cmp	r0, #0
 8023ee8:	d138      	bne.n	8023f5c <__gethex+0x248>
 8023eea:	f04f 0b02 	mov.w	fp, #2
 8023eee:	4641      	mov	r1, r8
 8023ef0:	4620      	mov	r0, r4
 8023ef2:	f7ff fea8 	bl	8023c46 <rshift>
 8023ef6:	4446      	add	r6, r8
 8023ef8:	68bb      	ldr	r3, [r7, #8]
 8023efa:	42b3      	cmp	r3, r6
 8023efc:	da41      	bge.n	8023f82 <__gethex+0x26e>
 8023efe:	4621      	mov	r1, r4
 8023f00:	4648      	mov	r0, r9
 8023f02:	f7fd ffe9 	bl	8021ed8 <_Bfree>
 8023f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023f08:	2300      	movs	r3, #0
 8023f0a:	6013      	str	r3, [r2, #0]
 8023f0c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8023f10:	e78a      	b.n	8023e28 <__gethex+0x114>
 8023f12:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8023f16:	2a2e      	cmp	r2, #46	; 0x2e
 8023f18:	d014      	beq.n	8023f44 <__gethex+0x230>
 8023f1a:	2b20      	cmp	r3, #32
 8023f1c:	d106      	bne.n	8023f2c <__gethex+0x218>
 8023f1e:	9b01      	ldr	r3, [sp, #4]
 8023f20:	f843 bb04 	str.w	fp, [r3], #4
 8023f24:	f04f 0b00 	mov.w	fp, #0
 8023f28:	9301      	str	r3, [sp, #4]
 8023f2a:	465b      	mov	r3, fp
 8023f2c:	7828      	ldrb	r0, [r5, #0]
 8023f2e:	9303      	str	r3, [sp, #12]
 8023f30:	f7ff fedb 	bl	8023cea <__hexdig_fun>
 8023f34:	9b03      	ldr	r3, [sp, #12]
 8023f36:	f000 000f 	and.w	r0, r0, #15
 8023f3a:	4098      	lsls	r0, r3
 8023f3c:	ea4b 0b00 	orr.w	fp, fp, r0
 8023f40:	3304      	adds	r3, #4
 8023f42:	e7a1      	b.n	8023e88 <__gethex+0x174>
 8023f44:	45a8      	cmp	r8, r5
 8023f46:	d8e8      	bhi.n	8023f1a <__gethex+0x206>
 8023f48:	2201      	movs	r2, #1
 8023f4a:	4628      	mov	r0, r5
 8023f4c:	9303      	str	r3, [sp, #12]
 8023f4e:	f7fd f84a 	bl	8020fe6 <strncmp>
 8023f52:	4926      	ldr	r1, [pc, #152]	; (8023fec <__gethex+0x2d8>)
 8023f54:	9b03      	ldr	r3, [sp, #12]
 8023f56:	2800      	cmp	r0, #0
 8023f58:	d1df      	bne.n	8023f1a <__gethex+0x206>
 8023f5a:	e795      	b.n	8023e88 <__gethex+0x174>
 8023f5c:	f04f 0b03 	mov.w	fp, #3
 8023f60:	e7c5      	b.n	8023eee <__gethex+0x1da>
 8023f62:	da0b      	bge.n	8023f7c <__gethex+0x268>
 8023f64:	eba5 0800 	sub.w	r8, r5, r0
 8023f68:	4621      	mov	r1, r4
 8023f6a:	4642      	mov	r2, r8
 8023f6c:	4648      	mov	r0, r9
 8023f6e:	f7fe f9cd 	bl	802230c <__lshift>
 8023f72:	eba6 0608 	sub.w	r6, r6, r8
 8023f76:	4604      	mov	r4, r0
 8023f78:	f100 0a14 	add.w	sl, r0, #20
 8023f7c:	f04f 0b00 	mov.w	fp, #0
 8023f80:	e7ba      	b.n	8023ef8 <__gethex+0x1e4>
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	42b3      	cmp	r3, r6
 8023f86:	dd73      	ble.n	8024070 <__gethex+0x35c>
 8023f88:	1b9e      	subs	r6, r3, r6
 8023f8a:	42b5      	cmp	r5, r6
 8023f8c:	dc34      	bgt.n	8023ff8 <__gethex+0x2e4>
 8023f8e:	68fb      	ldr	r3, [r7, #12]
 8023f90:	2b02      	cmp	r3, #2
 8023f92:	d023      	beq.n	8023fdc <__gethex+0x2c8>
 8023f94:	2b03      	cmp	r3, #3
 8023f96:	d025      	beq.n	8023fe4 <__gethex+0x2d0>
 8023f98:	2b01      	cmp	r3, #1
 8023f9a:	d115      	bne.n	8023fc8 <__gethex+0x2b4>
 8023f9c:	42b5      	cmp	r5, r6
 8023f9e:	d113      	bne.n	8023fc8 <__gethex+0x2b4>
 8023fa0:	2d01      	cmp	r5, #1
 8023fa2:	d10b      	bne.n	8023fbc <__gethex+0x2a8>
 8023fa4:	9a02      	ldr	r2, [sp, #8]
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	6013      	str	r3, [r2, #0]
 8023faa:	2301      	movs	r3, #1
 8023fac:	6123      	str	r3, [r4, #16]
 8023fae:	f8ca 3000 	str.w	r3, [sl]
 8023fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023fb4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8023fb8:	601c      	str	r4, [r3, #0]
 8023fba:	e735      	b.n	8023e28 <__gethex+0x114>
 8023fbc:	1e69      	subs	r1, r5, #1
 8023fbe:	4620      	mov	r0, r4
 8023fc0:	f7fe fbd3 	bl	802276a <__any_on>
 8023fc4:	2800      	cmp	r0, #0
 8023fc6:	d1ed      	bne.n	8023fa4 <__gethex+0x290>
 8023fc8:	4621      	mov	r1, r4
 8023fca:	4648      	mov	r0, r9
 8023fcc:	f7fd ff84 	bl	8021ed8 <_Bfree>
 8023fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023fd2:	2300      	movs	r3, #0
 8023fd4:	6013      	str	r3, [r2, #0]
 8023fd6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8023fda:	e725      	b.n	8023e28 <__gethex+0x114>
 8023fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023fde:	2b00      	cmp	r3, #0
 8023fe0:	d1f2      	bne.n	8023fc8 <__gethex+0x2b4>
 8023fe2:	e7df      	b.n	8023fa4 <__gethex+0x290>
 8023fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023fe6:	2b00      	cmp	r3, #0
 8023fe8:	d1dc      	bne.n	8023fa4 <__gethex+0x290>
 8023fea:	e7ed      	b.n	8023fc8 <__gethex+0x2b4>
 8023fec:	080260ac 	.word	0x080260ac
 8023ff0:	08025f46 	.word	0x08025f46
 8023ff4:	08026119 	.word	0x08026119
 8023ff8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8023ffc:	f1bb 0f00 	cmp.w	fp, #0
 8024000:	d133      	bne.n	802406a <__gethex+0x356>
 8024002:	f1b8 0f00 	cmp.w	r8, #0
 8024006:	d004      	beq.n	8024012 <__gethex+0x2fe>
 8024008:	4641      	mov	r1, r8
 802400a:	4620      	mov	r0, r4
 802400c:	f7fe fbad 	bl	802276a <__any_on>
 8024010:	4683      	mov	fp, r0
 8024012:	ea4f 1268 	mov.w	r2, r8, asr #5
 8024016:	2301      	movs	r3, #1
 8024018:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802401c:	f008 081f 	and.w	r8, r8, #31
 8024020:	fa03 f308 	lsl.w	r3, r3, r8
 8024024:	4213      	tst	r3, r2
 8024026:	4631      	mov	r1, r6
 8024028:	4620      	mov	r0, r4
 802402a:	bf18      	it	ne
 802402c:	f04b 0b02 	orrne.w	fp, fp, #2
 8024030:	1bad      	subs	r5, r5, r6
 8024032:	f7ff fe08 	bl	8023c46 <rshift>
 8024036:	687e      	ldr	r6, [r7, #4]
 8024038:	f04f 0802 	mov.w	r8, #2
 802403c:	f1bb 0f00 	cmp.w	fp, #0
 8024040:	d04a      	beq.n	80240d8 <__gethex+0x3c4>
 8024042:	68fb      	ldr	r3, [r7, #12]
 8024044:	2b02      	cmp	r3, #2
 8024046:	d016      	beq.n	8024076 <__gethex+0x362>
 8024048:	2b03      	cmp	r3, #3
 802404a:	d018      	beq.n	802407e <__gethex+0x36a>
 802404c:	2b01      	cmp	r3, #1
 802404e:	d109      	bne.n	8024064 <__gethex+0x350>
 8024050:	f01b 0f02 	tst.w	fp, #2
 8024054:	d006      	beq.n	8024064 <__gethex+0x350>
 8024056:	f8da 3000 	ldr.w	r3, [sl]
 802405a:	ea4b 0b03 	orr.w	fp, fp, r3
 802405e:	f01b 0f01 	tst.w	fp, #1
 8024062:	d10f      	bne.n	8024084 <__gethex+0x370>
 8024064:	f048 0810 	orr.w	r8, r8, #16
 8024068:	e036      	b.n	80240d8 <__gethex+0x3c4>
 802406a:	f04f 0b01 	mov.w	fp, #1
 802406e:	e7d0      	b.n	8024012 <__gethex+0x2fe>
 8024070:	f04f 0801 	mov.w	r8, #1
 8024074:	e7e2      	b.n	802403c <__gethex+0x328>
 8024076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024078:	f1c3 0301 	rsb	r3, r3, #1
 802407c:	930f      	str	r3, [sp, #60]	; 0x3c
 802407e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024080:	2b00      	cmp	r3, #0
 8024082:	d0ef      	beq.n	8024064 <__gethex+0x350>
 8024084:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8024088:	f104 0214 	add.w	r2, r4, #20
 802408c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8024090:	9301      	str	r3, [sp, #4]
 8024092:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8024096:	2300      	movs	r3, #0
 8024098:	4694      	mov	ip, r2
 802409a:	f852 1b04 	ldr.w	r1, [r2], #4
 802409e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80240a2:	d01e      	beq.n	80240e2 <__gethex+0x3ce>
 80240a4:	3101      	adds	r1, #1
 80240a6:	f8cc 1000 	str.w	r1, [ip]
 80240aa:	f1b8 0f02 	cmp.w	r8, #2
 80240ae:	f104 0214 	add.w	r2, r4, #20
 80240b2:	d13d      	bne.n	8024130 <__gethex+0x41c>
 80240b4:	683b      	ldr	r3, [r7, #0]
 80240b6:	3b01      	subs	r3, #1
 80240b8:	42ab      	cmp	r3, r5
 80240ba:	d10b      	bne.n	80240d4 <__gethex+0x3c0>
 80240bc:	1169      	asrs	r1, r5, #5
 80240be:	2301      	movs	r3, #1
 80240c0:	f005 051f 	and.w	r5, r5, #31
 80240c4:	fa03 f505 	lsl.w	r5, r3, r5
 80240c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80240cc:	421d      	tst	r5, r3
 80240ce:	bf18      	it	ne
 80240d0:	f04f 0801 	movne.w	r8, #1
 80240d4:	f048 0820 	orr.w	r8, r8, #32
 80240d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80240da:	601c      	str	r4, [r3, #0]
 80240dc:	9b02      	ldr	r3, [sp, #8]
 80240de:	601e      	str	r6, [r3, #0]
 80240e0:	e6a2      	b.n	8023e28 <__gethex+0x114>
 80240e2:	4290      	cmp	r0, r2
 80240e4:	f842 3c04 	str.w	r3, [r2, #-4]
 80240e8:	d8d6      	bhi.n	8024098 <__gethex+0x384>
 80240ea:	68a2      	ldr	r2, [r4, #8]
 80240ec:	4593      	cmp	fp, r2
 80240ee:	db17      	blt.n	8024120 <__gethex+0x40c>
 80240f0:	6861      	ldr	r1, [r4, #4]
 80240f2:	4648      	mov	r0, r9
 80240f4:	3101      	adds	r1, #1
 80240f6:	f7fd feaf 	bl	8021e58 <_Balloc>
 80240fa:	4682      	mov	sl, r0
 80240fc:	b918      	cbnz	r0, 8024106 <__gethex+0x3f2>
 80240fe:	4b1b      	ldr	r3, [pc, #108]	; (802416c <__gethex+0x458>)
 8024100:	4602      	mov	r2, r0
 8024102:	2184      	movs	r1, #132	; 0x84
 8024104:	e6b3      	b.n	8023e6e <__gethex+0x15a>
 8024106:	6922      	ldr	r2, [r4, #16]
 8024108:	3202      	adds	r2, #2
 802410a:	f104 010c 	add.w	r1, r4, #12
 802410e:	0092      	lsls	r2, r2, #2
 8024110:	300c      	adds	r0, #12
 8024112:	f7fd f820 	bl	8021156 <memcpy>
 8024116:	4621      	mov	r1, r4
 8024118:	4648      	mov	r0, r9
 802411a:	f7fd fedd 	bl	8021ed8 <_Bfree>
 802411e:	4654      	mov	r4, sl
 8024120:	6922      	ldr	r2, [r4, #16]
 8024122:	1c51      	adds	r1, r2, #1
 8024124:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8024128:	6121      	str	r1, [r4, #16]
 802412a:	2101      	movs	r1, #1
 802412c:	6151      	str	r1, [r2, #20]
 802412e:	e7bc      	b.n	80240aa <__gethex+0x396>
 8024130:	6921      	ldr	r1, [r4, #16]
 8024132:	4559      	cmp	r1, fp
 8024134:	dd0b      	ble.n	802414e <__gethex+0x43a>
 8024136:	2101      	movs	r1, #1
 8024138:	4620      	mov	r0, r4
 802413a:	f7ff fd84 	bl	8023c46 <rshift>
 802413e:	68bb      	ldr	r3, [r7, #8]
 8024140:	3601      	adds	r6, #1
 8024142:	42b3      	cmp	r3, r6
 8024144:	f6ff aedb 	blt.w	8023efe <__gethex+0x1ea>
 8024148:	f04f 0801 	mov.w	r8, #1
 802414c:	e7c2      	b.n	80240d4 <__gethex+0x3c0>
 802414e:	f015 051f 	ands.w	r5, r5, #31
 8024152:	d0f9      	beq.n	8024148 <__gethex+0x434>
 8024154:	9b01      	ldr	r3, [sp, #4]
 8024156:	441a      	add	r2, r3
 8024158:	f1c5 0520 	rsb	r5, r5, #32
 802415c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8024160:	f7fd ff6c 	bl	802203c <__hi0bits>
 8024164:	42a8      	cmp	r0, r5
 8024166:	dbe6      	blt.n	8024136 <__gethex+0x422>
 8024168:	e7ee      	b.n	8024148 <__gethex+0x434>
 802416a:	bf00      	nop
 802416c:	08025f46 	.word	0x08025f46

08024170 <L_shift>:
 8024170:	f1c2 0208 	rsb	r2, r2, #8
 8024174:	0092      	lsls	r2, r2, #2
 8024176:	b570      	push	{r4, r5, r6, lr}
 8024178:	f1c2 0620 	rsb	r6, r2, #32
 802417c:	6843      	ldr	r3, [r0, #4]
 802417e:	6804      	ldr	r4, [r0, #0]
 8024180:	fa03 f506 	lsl.w	r5, r3, r6
 8024184:	432c      	orrs	r4, r5
 8024186:	40d3      	lsrs	r3, r2
 8024188:	6004      	str	r4, [r0, #0]
 802418a:	f840 3f04 	str.w	r3, [r0, #4]!
 802418e:	4288      	cmp	r0, r1
 8024190:	d3f4      	bcc.n	802417c <L_shift+0xc>
 8024192:	bd70      	pop	{r4, r5, r6, pc}

08024194 <__match>:
 8024194:	b530      	push	{r4, r5, lr}
 8024196:	6803      	ldr	r3, [r0, #0]
 8024198:	3301      	adds	r3, #1
 802419a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802419e:	b914      	cbnz	r4, 80241a6 <__match+0x12>
 80241a0:	6003      	str	r3, [r0, #0]
 80241a2:	2001      	movs	r0, #1
 80241a4:	bd30      	pop	{r4, r5, pc}
 80241a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80241aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80241ae:	2d19      	cmp	r5, #25
 80241b0:	bf98      	it	ls
 80241b2:	3220      	addls	r2, #32
 80241b4:	42a2      	cmp	r2, r4
 80241b6:	d0f0      	beq.n	802419a <__match+0x6>
 80241b8:	2000      	movs	r0, #0
 80241ba:	e7f3      	b.n	80241a4 <__match+0x10>

080241bc <__hexnan>:
 80241bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241c0:	680b      	ldr	r3, [r1, #0]
 80241c2:	6801      	ldr	r1, [r0, #0]
 80241c4:	115e      	asrs	r6, r3, #5
 80241c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80241ca:	f013 031f 	ands.w	r3, r3, #31
 80241ce:	b087      	sub	sp, #28
 80241d0:	bf18      	it	ne
 80241d2:	3604      	addne	r6, #4
 80241d4:	2500      	movs	r5, #0
 80241d6:	1f37      	subs	r7, r6, #4
 80241d8:	4682      	mov	sl, r0
 80241da:	4690      	mov	r8, r2
 80241dc:	9301      	str	r3, [sp, #4]
 80241de:	f846 5c04 	str.w	r5, [r6, #-4]
 80241e2:	46b9      	mov	r9, r7
 80241e4:	463c      	mov	r4, r7
 80241e6:	9502      	str	r5, [sp, #8]
 80241e8:	46ab      	mov	fp, r5
 80241ea:	784a      	ldrb	r2, [r1, #1]
 80241ec:	1c4b      	adds	r3, r1, #1
 80241ee:	9303      	str	r3, [sp, #12]
 80241f0:	b342      	cbz	r2, 8024244 <__hexnan+0x88>
 80241f2:	4610      	mov	r0, r2
 80241f4:	9105      	str	r1, [sp, #20]
 80241f6:	9204      	str	r2, [sp, #16]
 80241f8:	f7ff fd77 	bl	8023cea <__hexdig_fun>
 80241fc:	2800      	cmp	r0, #0
 80241fe:	d14f      	bne.n	80242a0 <__hexnan+0xe4>
 8024200:	9a04      	ldr	r2, [sp, #16]
 8024202:	9905      	ldr	r1, [sp, #20]
 8024204:	2a20      	cmp	r2, #32
 8024206:	d818      	bhi.n	802423a <__hexnan+0x7e>
 8024208:	9b02      	ldr	r3, [sp, #8]
 802420a:	459b      	cmp	fp, r3
 802420c:	dd13      	ble.n	8024236 <__hexnan+0x7a>
 802420e:	454c      	cmp	r4, r9
 8024210:	d206      	bcs.n	8024220 <__hexnan+0x64>
 8024212:	2d07      	cmp	r5, #7
 8024214:	dc04      	bgt.n	8024220 <__hexnan+0x64>
 8024216:	462a      	mov	r2, r5
 8024218:	4649      	mov	r1, r9
 802421a:	4620      	mov	r0, r4
 802421c:	f7ff ffa8 	bl	8024170 <L_shift>
 8024220:	4544      	cmp	r4, r8
 8024222:	d950      	bls.n	80242c6 <__hexnan+0x10a>
 8024224:	2300      	movs	r3, #0
 8024226:	f1a4 0904 	sub.w	r9, r4, #4
 802422a:	f844 3c04 	str.w	r3, [r4, #-4]
 802422e:	f8cd b008 	str.w	fp, [sp, #8]
 8024232:	464c      	mov	r4, r9
 8024234:	461d      	mov	r5, r3
 8024236:	9903      	ldr	r1, [sp, #12]
 8024238:	e7d7      	b.n	80241ea <__hexnan+0x2e>
 802423a:	2a29      	cmp	r2, #41	; 0x29
 802423c:	d155      	bne.n	80242ea <__hexnan+0x12e>
 802423e:	3102      	adds	r1, #2
 8024240:	f8ca 1000 	str.w	r1, [sl]
 8024244:	f1bb 0f00 	cmp.w	fp, #0
 8024248:	d04f      	beq.n	80242ea <__hexnan+0x12e>
 802424a:	454c      	cmp	r4, r9
 802424c:	d206      	bcs.n	802425c <__hexnan+0xa0>
 802424e:	2d07      	cmp	r5, #7
 8024250:	dc04      	bgt.n	802425c <__hexnan+0xa0>
 8024252:	462a      	mov	r2, r5
 8024254:	4649      	mov	r1, r9
 8024256:	4620      	mov	r0, r4
 8024258:	f7ff ff8a 	bl	8024170 <L_shift>
 802425c:	4544      	cmp	r4, r8
 802425e:	d934      	bls.n	80242ca <__hexnan+0x10e>
 8024260:	f1a8 0204 	sub.w	r2, r8, #4
 8024264:	4623      	mov	r3, r4
 8024266:	f853 1b04 	ldr.w	r1, [r3], #4
 802426a:	f842 1f04 	str.w	r1, [r2, #4]!
 802426e:	429f      	cmp	r7, r3
 8024270:	d2f9      	bcs.n	8024266 <__hexnan+0xaa>
 8024272:	1b3b      	subs	r3, r7, r4
 8024274:	f023 0303 	bic.w	r3, r3, #3
 8024278:	3304      	adds	r3, #4
 802427a:	3e03      	subs	r6, #3
 802427c:	3401      	adds	r4, #1
 802427e:	42a6      	cmp	r6, r4
 8024280:	bf38      	it	cc
 8024282:	2304      	movcc	r3, #4
 8024284:	4443      	add	r3, r8
 8024286:	2200      	movs	r2, #0
 8024288:	f843 2b04 	str.w	r2, [r3], #4
 802428c:	429f      	cmp	r7, r3
 802428e:	d2fb      	bcs.n	8024288 <__hexnan+0xcc>
 8024290:	683b      	ldr	r3, [r7, #0]
 8024292:	b91b      	cbnz	r3, 802429c <__hexnan+0xe0>
 8024294:	4547      	cmp	r7, r8
 8024296:	d126      	bne.n	80242e6 <__hexnan+0x12a>
 8024298:	2301      	movs	r3, #1
 802429a:	603b      	str	r3, [r7, #0]
 802429c:	2005      	movs	r0, #5
 802429e:	e025      	b.n	80242ec <__hexnan+0x130>
 80242a0:	3501      	adds	r5, #1
 80242a2:	2d08      	cmp	r5, #8
 80242a4:	f10b 0b01 	add.w	fp, fp, #1
 80242a8:	dd06      	ble.n	80242b8 <__hexnan+0xfc>
 80242aa:	4544      	cmp	r4, r8
 80242ac:	d9c3      	bls.n	8024236 <__hexnan+0x7a>
 80242ae:	2300      	movs	r3, #0
 80242b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80242b4:	2501      	movs	r5, #1
 80242b6:	3c04      	subs	r4, #4
 80242b8:	6822      	ldr	r2, [r4, #0]
 80242ba:	f000 000f 	and.w	r0, r0, #15
 80242be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80242c2:	6020      	str	r0, [r4, #0]
 80242c4:	e7b7      	b.n	8024236 <__hexnan+0x7a>
 80242c6:	2508      	movs	r5, #8
 80242c8:	e7b5      	b.n	8024236 <__hexnan+0x7a>
 80242ca:	9b01      	ldr	r3, [sp, #4]
 80242cc:	2b00      	cmp	r3, #0
 80242ce:	d0df      	beq.n	8024290 <__hexnan+0xd4>
 80242d0:	f1c3 0320 	rsb	r3, r3, #32
 80242d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80242d8:	40da      	lsrs	r2, r3
 80242da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80242de:	4013      	ands	r3, r2
 80242e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80242e4:	e7d4      	b.n	8024290 <__hexnan+0xd4>
 80242e6:	3f04      	subs	r7, #4
 80242e8:	e7d2      	b.n	8024290 <__hexnan+0xd4>
 80242ea:	2004      	movs	r0, #4
 80242ec:	b007      	add	sp, #28
 80242ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080242f2 <__ascii_mbtowc>:
 80242f2:	b082      	sub	sp, #8
 80242f4:	b901      	cbnz	r1, 80242f8 <__ascii_mbtowc+0x6>
 80242f6:	a901      	add	r1, sp, #4
 80242f8:	b142      	cbz	r2, 802430c <__ascii_mbtowc+0x1a>
 80242fa:	b14b      	cbz	r3, 8024310 <__ascii_mbtowc+0x1e>
 80242fc:	7813      	ldrb	r3, [r2, #0]
 80242fe:	600b      	str	r3, [r1, #0]
 8024300:	7812      	ldrb	r2, [r2, #0]
 8024302:	1e10      	subs	r0, r2, #0
 8024304:	bf18      	it	ne
 8024306:	2001      	movne	r0, #1
 8024308:	b002      	add	sp, #8
 802430a:	4770      	bx	lr
 802430c:	4610      	mov	r0, r2
 802430e:	e7fb      	b.n	8024308 <__ascii_mbtowc+0x16>
 8024310:	f06f 0001 	mvn.w	r0, #1
 8024314:	e7f8      	b.n	8024308 <__ascii_mbtowc+0x16>

08024316 <__ascii_wctomb>:
 8024316:	b149      	cbz	r1, 802432c <__ascii_wctomb+0x16>
 8024318:	2aff      	cmp	r2, #255	; 0xff
 802431a:	bf85      	ittet	hi
 802431c:	238a      	movhi	r3, #138	; 0x8a
 802431e:	6003      	strhi	r3, [r0, #0]
 8024320:	700a      	strbls	r2, [r1, #0]
 8024322:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8024326:	bf98      	it	ls
 8024328:	2001      	movls	r0, #1
 802432a:	4770      	bx	lr
 802432c:	4608      	mov	r0, r1
 802432e:	4770      	bx	lr

08024330 <_raise_r>:
 8024330:	291f      	cmp	r1, #31
 8024332:	b538      	push	{r3, r4, r5, lr}
 8024334:	4604      	mov	r4, r0
 8024336:	460d      	mov	r5, r1
 8024338:	d904      	bls.n	8024344 <_raise_r+0x14>
 802433a:	2316      	movs	r3, #22
 802433c:	6003      	str	r3, [r0, #0]
 802433e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024342:	bd38      	pop	{r3, r4, r5, pc}
 8024344:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8024346:	b112      	cbz	r2, 802434e <_raise_r+0x1e>
 8024348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802434c:	b94b      	cbnz	r3, 8024362 <_raise_r+0x32>
 802434e:	4620      	mov	r0, r4
 8024350:	f000 f830 	bl	80243b4 <_getpid_r>
 8024354:	462a      	mov	r2, r5
 8024356:	4601      	mov	r1, r0
 8024358:	4620      	mov	r0, r4
 802435a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802435e:	f000 b817 	b.w	8024390 <_kill_r>
 8024362:	2b01      	cmp	r3, #1
 8024364:	d00a      	beq.n	802437c <_raise_r+0x4c>
 8024366:	1c59      	adds	r1, r3, #1
 8024368:	d103      	bne.n	8024372 <_raise_r+0x42>
 802436a:	2316      	movs	r3, #22
 802436c:	6003      	str	r3, [r0, #0]
 802436e:	2001      	movs	r0, #1
 8024370:	e7e7      	b.n	8024342 <_raise_r+0x12>
 8024372:	2400      	movs	r4, #0
 8024374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024378:	4628      	mov	r0, r5
 802437a:	4798      	blx	r3
 802437c:	2000      	movs	r0, #0
 802437e:	e7e0      	b.n	8024342 <_raise_r+0x12>

08024380 <raise>:
 8024380:	4b02      	ldr	r3, [pc, #8]	; (802438c <raise+0xc>)
 8024382:	4601      	mov	r1, r0
 8024384:	6818      	ldr	r0, [r3, #0]
 8024386:	f7ff bfd3 	b.w	8024330 <_raise_r>
 802438a:	bf00      	nop
 802438c:	200009d8 	.word	0x200009d8

08024390 <_kill_r>:
 8024390:	b538      	push	{r3, r4, r5, lr}
 8024392:	4d07      	ldr	r5, [pc, #28]	; (80243b0 <_kill_r+0x20>)
 8024394:	2300      	movs	r3, #0
 8024396:	4604      	mov	r4, r0
 8024398:	4608      	mov	r0, r1
 802439a:	4611      	mov	r1, r2
 802439c:	602b      	str	r3, [r5, #0]
 802439e:	f7df fcd3 	bl	8003d48 <_kill>
 80243a2:	1c43      	adds	r3, r0, #1
 80243a4:	d102      	bne.n	80243ac <_kill_r+0x1c>
 80243a6:	682b      	ldr	r3, [r5, #0]
 80243a8:	b103      	cbz	r3, 80243ac <_kill_r+0x1c>
 80243aa:	6023      	str	r3, [r4, #0]
 80243ac:	bd38      	pop	{r3, r4, r5, pc}
 80243ae:	bf00      	nop
 80243b0:	20017278 	.word	0x20017278

080243b4 <_getpid_r>:
 80243b4:	f7df bcc0 	b.w	8003d38 <_getpid>

080243b8 <_init>:
 80243b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243ba:	bf00      	nop
 80243bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80243be:	bc08      	pop	{r3}
 80243c0:	469e      	mov	lr, r3
 80243c2:	4770      	bx	lr

080243c4 <_fini>:
 80243c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243c6:	bf00      	nop
 80243c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80243ca:	bc08      	pop	{r3}
 80243cc:	469e      	mov	lr, r3
 80243ce:	4770      	bx	lr
